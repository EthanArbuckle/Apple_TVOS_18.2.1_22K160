unint64_t BitArray.init(_:)(unint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  v1 = result;
  v2 = *(void *)(result + 16);
  if (v2)
  {
    v3 = result + 32;
    if (!*(void *)(result + 32)) {
      goto LABEL_7;
    }
    while (1)
    {
      result = v2 << 6;
      if (v2 << 6 < 0) {
        break;
      }
      result = _UnsafeBitSet.index(before:)(result, v3, v2);
      v3 = result + 1;
      if (__OFADD__(result, 1LL)) {
        goto LABEL_18;
      }
      if ((v3 & 0x8000000000000000LL) == 0) {
        return v1;
      }
      __break(1u);
LABEL_7:
      if (v2 == 1) {
        goto LABEL_8;
      }
      if (!*(void *)(v1 + 40))
      {
        if (v2 == 2) {
          goto LABEL_8;
        }
        v4 = 6LL;
        while (!*(void *)(v1 + 8 * v4))
        {
          v5 = v4 - 3;
          if (__OFADD__(v4 - 4, 1LL)) {
            goto LABEL_19;
          }
          ++v4;
          if (v5 == v2) {
            goto LABEL_8;
          }
        }
      }
    }

    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }

  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
    return MEMORY[0x18961AFE8];
  }

  return result;
}

void *sub_188CF61CC(void *result)
{
  uint64_t v1 = result[2];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = (uint64_t)(result + 4);
  if (result[4]) {
    goto LABEL_3;
  }
  if (v1 == 1) {
    return 0LL;
  }
  if (!result[5])
  {
    if (v1 == 2) {
      return 0LL;
    }
    for (uint64_t i = 6LL; !result[i]; ++i)
    {
      uint64_t v5 = i - 3;
      if (__OFADD__(i - 4, 1LL)) {
        goto LABEL_16;
      }
      uint64_t v3 = 0LL;
      if (v5 == v1) {
        return (void *)v3;
      }
    }
  }

LABEL_3:
  result = (void *)(v1 << 6);
  if (((v1 << 6) & 0x8000000000000000LL) == 0) {
    return (void *)_UnsafeBitSet.index(before:)((unint64_t)result, v2, v1);
  }
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

  if (a3 == &type metadata for BitSet)
  {
    Description[2](v11, a1, &type metadata for BitSet);
LABEL_16:
    swift_dynamicCast();
    v15 = BitSet.isStrictSubset(of:)(a2, v19[0]);
    swift_bridgeObjectRelease();
    return (void *)(v15 & 1);
  }

  if (a3 == &type metadata for BitSet.Counted)
  {
    Description[2](v11, a1, &type metadata for BitSet.Counted);
    goto LABEL_16;
  }

  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C749F60);
  if ((ValueMetadata *)v14 == a3)
  {
    Description[2](v11, a1, a3);
    swift_dynamicCast();
    v15 = BitSet.isStrictSuperset(of:)((uint64_t)v19[0], (unint64_t)v19[1], a2);
    return (void *)(v15 & 1);
  }

  MEMORY[0x1895F8858](v14);
  *(&v18 - 4) = (uint64_t)a3;
  *(&v18 - 3) = a4;
  *(&v18 - 2) = a1;
  *(&v18 - 1) = (uint64_t)a2;
  LOBYTE(v19[0]) = 2;
  result = sub_188DC2478(v13, v19, (void *(*)(char *__return_ptr, _BYTE **))sub_188D0A3AC);
  if (LOBYTE(v19[0]) != 2)
  {
    v15 = (uint64_t)v19[0] & 1;
    return (void *)(v15 & 1);
  }

  v16 = 1;
  return v16 & 1;
}

  v0 = (void *)(v1 << 6);
  if (((v1 << 6) & 0x8000000000000000LL) == 0)
  {
    uint64_t v3 = _UnsafeBitSet.index(before:)((unint64_t)v0, v2, v1);
    v4 = 0;
LABEL_7:
    v0 = (void *)v3;
    LOBYTE(v2) = v4;
    goto LABEL_17;
  }

  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  result.is_nil = v2;
  result.value = (Swift::Int)v0;
  return result;
}

  v32[0] = a3;
  v16 = (sub_188D71600(a1, a2, v32, a7) & 1) != 0 || a3 > 0 && v32[0] == 0;
  v29 = 0;
  return v29 | v16;
}

      if (((a2 << 6) & 0x8000000000000000LL) == 0) {
        return result;
      }
LABEL_16:
      __break(1u);
    }
  }

  return result;
}

      if (((v1 << 6) & 0x8000000000000000LL) == 0) {
        return result;
      }
LABEL_16:
      __break(1u);
    }
  }

  return result;
}

      if (((v1 << 6) & 0x8000000000000000LL) == 0) {
        return result;
      }
LABEL_14:
      __break(1u);
    }
  }

  return result;
}

  v21 = 0;
LABEL_4:
  *v66 = v21;
  return result;
}

        if (v48)
        {
          v188 = 0;
          goto LABEL_5;
        }

        v84 = a4[1];
        v85 = v172;
        v86 = v177;
        if (v84)
        {
          v87 = 0;
          goto LABEL_27;
        }

        goto LABEL_51;
      }

      v184 = v49;
      v46.i32[0] = v67 & (v54 - 1);
      v68 = (uint8x8_t)vcnt_s8(v46);
      v68.i16[0] = vaddlv_u8(v68);
      v69 = v68.u32[0];
      v71 = (uint64_t)v178;
      v70 = v179;
      v72 = *(void (**)(char *, uint64_t, uint64_t))(v179 + 16);
      v73 = v51;
      v74 = v193;
      v72(v178, v51, v193);
      v75 = v190;
      v163 = sub_188DF5A9C();
      v175 = *(char **)(v70 + 8);
      ((void (*)(uint64_t, uint64_t))v175)(v71, v74);
      v76 = v186;
      v77 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v69, v52, v187, v74, v186, v75);
      v78 = *v77;
      v79 = v77[1];
      v174 = (void (*)(char *))v72;
      v72((char *)v71, v73, v74);
      swift_retain();
      v45 = v192;
      LOBYTE(v79) = _HashNode.containsKey(_:_:_:)(v173, v71, v163, v78, v79, v74, v76, v75);
      swift_release();
      ((void (*)(uint64_t, uint64_t))v175)(v71, v74);
      a4 = v181;
      if ((v79 & 1) == 0) {
        goto LABEL_13;
      }
LABEL_8:
      if ((v188 & 1) != 0)
      {
        if (!v48) {
          goto LABEL_21;
        }
      }

      else
      {
        _HashNode.Builder.copyItems(_:from:upTo:)(v176, a4, v191, v183, v185);
        if (!v48) {
          goto LABEL_21;
        }
      }

      v188 = 1;
      v13 = v190;
      v49 = v184 + 1;
    }

    v55 = v13;
    v184 = v49;
    v46.i32[0] = (v54 - 1) & v53;
    v56 = (uint8x8_t)vcnt_s8(v46);
    v56.i16[0] = vaddlv_u8(v56);
    v57 = v56.u32[0];
    v58 = v179;
    v59 = *(void (**)(char *, uint64_t, uint64_t))(v179 + 16);
    v60 = v193;
    LODWORD(v175) = v48;
    v61 = a4;
    v62 = v178;
    v59(v178, v51, v193);
    v63 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v57, v52, v187, v60, v186, v55);
    v64 = v166;
    v174 = (void (*)(char *))v59;
    v59(v166, v63, v60);
    LOBYTE(v57) = sub_188DF7D90();
    v65 = *(void (**)(char *, uint64_t))(v58 + 8);
    v65(v64, v60);
    v66 = v62;
    a4 = v61;
    v45 = v192;
    v48 = v175;
    v65(v66, v60);
    if ((v57 & 1) != 0) {
      goto LABEL_8;
    }
LABEL_13:
    v49 = v184;
    if ((v188 & 1) == 0) {
      goto LABEL_3;
    }
LABEL_19:
    v80 = *(int *)(v165 + 48);
    v81 = (uint64_t)v159;
    v82 = (uint64_t)&v159[v80];
    v83 = v182 + v80;
    v174(v159);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 16LL))(v82, v83, v45);
    _HashNode.Builder.addNewItem(_:_:at:)(v176, v81, v82, v183, v185);
    if (!v48) {
      break;
    }
    v188 = 1;
LABEL_5:
    v13 = v190;
    ++v49;
  }

uint64_t BitArray.init<A>(bitPattern:)(uint64_t a1, uint64_t a2, int64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  v9 = (char *)&v20 - v8;
  sub_188DF851C();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v12 = sub_188CF646C( (void (*)(char *, char *))sub_188CF6460,  0LL,  AssociatedTypeWitness,  (uint64_t)&type metadata for _UnsafeBitSet._Word,  MEMORY[0x18961A520],  *(void *)(*(void *)(AssociatedConformanceWitness + 8) + 8LL),  MEMORY[0x18961A528],  v11);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  unint64_t v13 = sub_188DF8534();
  unint64_t v14 = v13;
  uint64_t v15 = *(void *)(v12 + 16);
  if (!v15)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
    if (!v14) {
      return v12;
    }
    goto LABEL_18;
  }

  if ((v13 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = -1LL;
    if ((result & 1) != 0) {
      goto LABEL_9;
    }
LABEL_16:
    uint64_t result = (uint64_t)sub_188CF73DC(v12);
    uint64_t v12 = result;
    goto LABEL_9;
  }

  unint64_t v16 = v13 >> 6;
  BOOL v17 = (v13 & 0x3F) == 0 && v13 > 0x3F;
  a3 = v16 - v17;
  if (v15 != v16 - v17 + 1) {
    goto LABEL_14;
  }
  if (v17) {
    goto LABEL_15;
  }
  uint64_t v18 = ~(-1LL << v13);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_16;
  }
LABEL_9:
  if (a3 < *(void *)(v12 + 16))
  {
    *(void *)(v12 + 8 * a3 + 32) &= v18;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
    return v12;
  }

  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

void *sub_188CF6460@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_188CF646C( void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v30 = a5;
  uint64_t v31 = a8;
  v38 = a1;
  uint64_t v39 = a2;
  uint64_t v29 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](a1);
  v40 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  unint64_t v14 = (char *)&v29 - v13;
  MEMORY[0x1895F8858](v12);
  unint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v32 = *(void *)(v17 - 8);
  uint64_t v33 = v17;
  MEMORY[0x1895F8858](v17);
  v19 = (char *)&v29 - v18;
  uint64_t v20 = sub_188DF81E0();
  if (!v20) {
    return sub_188DF80C0();
  }
  uint64_t v36 = AssociatedTypeWitness;
  uint64_t v21 = v20;
  uint64_t v44 = sub_188DF7C10();
  uint64_t v34 = sub_188DF8738();
  sub_188DF86CC();
  uint64_t v37 = v8;
  uint64_t result = sub_188DF81C8();
  if ((v21 & 0x8000000000000000LL) == 0)
  {
    uint64_t v23 = v21;
    v35 = v16;
    while (v23)
    {
      uint64_t v41 = v23;
      v24 = (void (*)(char *, void))sub_188DF82C4();
      v25 = *(void (**)(char *))(v11 + 16);
      uint64_t v26 = v11;
      uint64_t v27 = v36;
      v25(v14);
      v24(v43, 0LL);
      uint64_t v28 = v42;
      v38(v14, v40);
      if (v28)
      {
        (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v27);
        (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v33);
        swift_release();
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v29 + 32))(v31, v40, v30);
      }

      uint64_t v42 = 0LL;
      (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v27);
      sub_188DF86FC();
      uint64_t result = sub_188DF8228();
      uint64_t v23 = v41 - 1;
      uint64_t v11 = v26;
      if (v41 == 1)
      {
        (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v33);
        return v44;
      }
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

char *BitArray.init(minimumCapacity:)(char *result)
{
  return result;
}

uint64_t static BinaryInteger._convert(_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t result = sub_188DF8540();
  if (!*(void *)(a2 + 16)) {
    return 0LL;
  }
  unint64_t v9 = a3 >> 6;
  uint64_t v10 = a3 & 0x3F;
  uint64_t v11 = (a3 > 0x3F) & (v10 == 0);
  if (a3 > 0x3F && v10 == 0) {
    uint64_t v10 = 64LL;
  }
  uint64_t v12 = v9 - v11;
  uint64_t v13 = a2 + 32;
  unint64_t v14 = *(void *)(a2 + 32 + 8 * (v9 - v11));
  if ((result & 1) == 0)
  {
LABEL_12:
    uint64_t v17 = 0LL;
    if ((sub_188CF68EC(v12, v14, a1, a4) & 1) != 0) {
      goto LABEL_13;
    }
    return v17;
  }

  if (v10)
  {
    if (((v14 >> (v10 - 1)) & 1) != 0)
    {
      uint64_t v15 = -1LL << v10;
      if ((v11 & 1) != 0) {
        uint64_t v16 = 0LL;
      }
      else {
        uint64_t v16 = v15;
      }
      uint64_t v17 = 1LL;
      if ((sub_188CF68EC(v12, v14 | v16, a1, a4) & 1) == 0) {
        return v17;
      }
LABEL_13:
      char v18 = 0;
      uint64_t v19 = v12 - 1;
      while (1)
      {
        if (v19 > 0)
        {
          uint64_t v20 = v19 - 1;
        }

        else
        {
          if ((v19 != 0) | v18 & 1) {
            return v17;
          }
          uint64_t v20 = 0LL;
          char v18 = 1;
        }

        char v21 = sub_188CF68EC(v19, *(void *)(v13 + 8 * v19), a1, a4);
        uint64_t v19 = v20;
        if ((v21 & 1) == 0) {
          return v17;
        }
      }
    }

    goto LABEL_12;
  }

  __break(1u);
  return result;
}

uint64_t sub_188CF68EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = 64LL;
  sub_188CF7620();
  sub_188DF8510();
  uint64_t v11 = a2;
  sub_188CF78D0();
  sub_188DF84E0();
  sub_188DF8504();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a4);
  return 1LL;
}

uint64_t BitArray._foreachTwosComplementWordDownward(isSigned:body:)( uint64_t result, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)(a4 + 16)) {
    return 0LL;
  }
  unint64_t v6 = a5 >> 6;
  uint64_t v7 = a5 & 0x3F;
  uint64_t v8 = (a5 > 0x3F) & (v7 == 0);
  if (a5 > 0x3F && v7 == 0) {
    uint64_t v7 = 64LL;
  }
  uint64_t v9 = v6 - v8;
  uint64_t v10 = a4 + 32;
  unint64_t v11 = *(void *)(a4 + 32 + 8 * (v6 - v8));
  if ((result & 1) == 0)
  {
LABEL_12:
    uint64_t v14 = 0LL;
    if ((a2(v9, v11) & 1) != 0) {
      goto LABEL_13;
    }
    return v14;
  }

  if (v7)
  {
    if (((v11 >> (v7 - 1)) & 1) != 0)
    {
      uint64_t v12 = -1LL << v7;
      if (a5 > 0x3F && (a5 & 0x3F) == 0) {
        uint64_t v13 = 0LL;
      }
      else {
        uint64_t v13 = v12;
      }
      uint64_t v14 = 1LL;
      if ((a2(v9, v11 | v13) & 1) == 0) {
        return v14;
      }
LABEL_13:
      char v15 = 0;
      uint64_t v16 = v9 - 1;
      while (1)
      {
        if (v16 > 0)
        {
          uint64_t v17 = v16 - 1;
        }

        else
        {
          if ((v16 != 0) | v15 & 1) {
            return v14;
          }
          uint64_t v17 = 0LL;
          char v15 = 1;
        }

        char v18 = a2(v16, *(void *)(v10 + 8 * v16));
        uint64_t v16 = v17;
        if ((v18 & 1) == 0) {
          return v14;
        }
      }
    }

    goto LABEL_12;
  }

  __break(1u);
  return result;
}

uint64_t BinaryInteger.init(truncatingIfNeeded:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return swift_bridgeObjectRelease();
}

uint64_t BinaryInteger.init(exactly:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v47 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v48 = AssociatedTypeWitness;
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v51 = (uint64_t)&v43 - v9;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = MEMORY[0x1895F8858](v10);
  uint64_t v50 = *(void *)(a3 - 8);
  uint64_t v12 = MEMORY[0x1895F8858](v11);
  v45 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  uint64_t v16 = (char *)&v43 - v15;
  MEMORY[0x1895F8858](v14);
  char v18 = (char *)&v43 - v17;
  uint64_t v49 = a1;
  unint64_t v46 = a2;
  int v19 = static BinaryInteger._convert(_:)((uint64_t)&v43 - v17, a1, a2, a3);
  if ((sub_188DF8540() & 1) != 0)
  {
    if (sub_188DF8534() >= 64)
    {
      uint64_t v52 = 0LL;
      sub_188CF7620();
      sub_188DF84E0();
      LODWORD(v20) = sub_188DF7CC4();
      (*(void (**)(char *, uint64_t))(v50 + 8))(v16, a3);
    }

    else
    {
      unint64_t v20 = (unint64_t)sub_188DF8528() >> 63;
    }
  }

  else
  {
    uint64_t v44 = a4;
    char v21 = sub_188DF8540();
    uint64_t v22 = sub_188DF8534();
    if ((v21 & 1) != 0)
    {
      if (v22 <= 64)
      {
        swift_getAssociatedConformanceWitness();
        sub_188DF89CC();
        sub_188DF896C();
        char v25 = sub_188DF7CC4();
        uint64_t v26 = v50;
        uint64_t v27 = *(void (**)(char *, uint64_t))(v50 + 8);
        v27(v16, a3);
        uint64_t v28 = v45;
        (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v45, v18, a3);
        if ((v25 & 1) != 0) {
          LODWORD(v29) = 1;
        }
        else {
          unint64_t v29 = (unint64_t)sub_188DF8528() >> 63;
        }
        a4 = v44;
        uint64_t v23 = v49;
        v27(v28, a3);
        goto LABEL_16;
      }

      uint64_t v52 = 0LL;
      sub_188CF7620();
      sub_188DF84E0();
      LODWORD(v20) = sub_188DF7CC4();
      (*(void (**)(char *, uint64_t))(v50 + 8))(v16, a3);
    }

    else
    {
      if (v22 >= 64)
      {
        a4 = v44;
        uint64_t v23 = v49;
        if ((v19 & 1) != 0) {
          goto LABEL_12;
        }
        goto LABEL_16;
      }

      unint64_t v20 = (unint64_t)sub_188DF8528() >> 63;
    }

    a4 = v44;
  }

  uint64_t v23 = v49;
  if (((v19 ^ v20) & 1) != 0)
  {
LABEL_12:
    uint64_t v24 = v50;
    (*(void (**)(char *, uint64_t))(v50 + 8))(v18, a3);
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }

LABEL_16:
  sub_188DF851C();
  LOBYTE(v52) = 1;
  uint64_t result = sub_188DF8540();
  if (!*(void *)(v23 + 16))
  {
LABEL_33:
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v51, v48);
    if (v52 == 1)
    {
      uint64_t v24 = v50;
      (*(void (**)(uint64_t, char *, uint64_t))(v50 + 32))(a4, v18, a3);
      uint64_t v42 = 0LL;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(a4, v42, 1LL, a3);
    }

    uint64_t v24 = v50;
    (*(void (**)(char *, uint64_t))(v50 + 8))(v18, a3);
LABEL_36:
    uint64_t v42 = 1LL;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(a4, v42, 1LL, a3);
  }

  unint64_t v31 = v46 >> 6;
  uint64_t v32 = v46 & 0x3F;
  uint64_t v33 = (v46 > 0x3F) & (v32 == 0);
  if (v46 > 0x3F && v32 == 0) {
    uint64_t v32 = 64LL;
  }
  uint64_t v34 = v31 - v33;
  unint64_t v35 = *(void *)(v23 + 32 + 8 * (v31 - v33));
  if ((result & 1) == 0)
  {
LABEL_26:
    if (sub_188CF707C(v34, v35, &v52, v51, v19 & 1))
    {
      char v38 = 0;
      uint64_t v39 = v34 - 1;
      while (1)
      {
        if (v39 > 0)
        {
          uint64_t v40 = v39 - 1;
        }

        else
        {
          if ((v39 != 0) | v38 & 1) {
            goto LABEL_33;
          }
          uint64_t v40 = 0LL;
          char v38 = 1;
        }

        BOOL v41 = sub_188CF707C(v39, *(void *)(v23 + 32 + 8 * v39), &v52, v51, v19 & 1);
        uint64_t v39 = v40;
        if (!v41) {
          goto LABEL_33;
        }
      }
    }

    goto LABEL_33;
  }

  if (v32)
  {
    if (((v35 >> (v32 - 1)) & 1) != 0)
    {
      uint64_t v36 = -1LL << v32;
      if ((v33 & 1) != 0) {
        uint64_t v37 = 0LL;
      }
      else {
        uint64_t v37 = v36;
      }
      v35 |= v37;
    }

    goto LABEL_26;
  }

  __break(1u);
  return result;
}

          __break(1u);
          goto LABEL_17;
        }

        uint64_t v10 = v7 + 48;
        while (v8 - 2 != v5)
        {
          v0[1] = v5 + 2;
          uint64_t v9 = *(void *)(v10 + 8 * v5);
          v0[2] = v9;
          ++v5;
          if (v9)
          {
            unint64_t v6 = v5 + 1;
            goto LABEL_11;
          }
        }
      }

      v4 = 0LL;
      uint64_t v3 = 1;
      goto LABEL_17;
    }

  uint64_t v17 = v40;
  char v18 = v38;
  if (v40 == v38) {
    goto LABEL_13;
  }
  int v19 = *((void *)v4 + 2);
  uint64_t v36 = v39;
  unint64_t v20 = sub_188D2F1B8((uint64_t (*)())v37, v40, v38, v39);
  uint64_t v22 = *v21;
  uint64_t result = ((uint64_t (*)(_BYTE *, void))v20)(v37, 0LL);
  if (v17 < 0 || v17 >= v18) {
    goto LABEL_37;
  }
  uint64_t v23 = v17 + 1;
  uint64_t v24 = -v18;
LABEL_21:
  while (1)
  {
    char v25 = *((void *)v4 + 3);
    uint64_t v26 = v25 >> 1;
    uint64_t v27 = v19 + 1;
    if (v19 < v26) {
      goto LABEL_23;
    }
LABEL_20:
    *((void *)v4 + 2) = v19;
  }

  uint64_t result = (uint64_t)sub_188CF7528((char *)(v25 > 1), v19 + 1, 1, v4);
  v4 = (char *)result;
  uint64_t v26 = *(void *)(result + 24) >> 1;
  if (v19 >= v26) {
    goto LABEL_20;
  }
LABEL_23:
  uint64_t v28 = &v4[8 * v19];
  *((void *)v28 + 4) = v22;
  if (v23 == v18)
  {
LABEL_35:
    *((void *)v4 + 2) = v27;
    goto LABEL_13;
  }

  uint64_t v3 = 0LL;
  unint64_t v29 = v24 + v23;
  uint64_t v34 = v19;
  unint64_t v35 = v26;
  uint64_t v30 = ~v19 + v26;
  unint64_t v31 = v28 + 40;
  while (1)
  {
    uint64_t v32 = sub_188D2F1B8((uint64_t (*)())v37, v23 + v3, v18, v36);
    uint64_t v22 = *v33;
    uint64_t result = ((uint64_t (*)(_BYTE *, void))v32)(v37, 0LL);
    if (v23 < 0 || v23 + v3 >= v18) {
      break;
    }
    if (v30 == v3)
    {
      v23 += v3 + 1;
      int v19 = v35;
      uint64_t v24 = -v18;
      *((void *)v4 + 2) = v35;
      goto LABEL_21;
    }

    *(void *)&v31[8 * v3++] = v22;
    if (!(v29 + v3)) {
      goto LABEL_34;
    }
  }

  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  uint64_t v52 = 1;
LABEL_17:
  *v71 = v52;
}

      (*(void (**)(char *, uint64_t))(v44 + 8))(v59, v57);
      swift_bridgeObjectRelease();
    }

    sub_188DF821C();
    return 0LL;
  }

  unint64_t v31 = _s19CollectionsInternal10_HashTableV5scale13reservedScaleACSi_SitcfC_0(v30, v53);
  uint64_t v32 = &v48[*(int *)(TupleTypeMetadata2 + 48)];
  _HashTable.UnsafeHandle.fill<A>(untilFirstDuplicateIn:)( v32,  v26,  (void *)(v31 + 16),  v31 + 32,  a6,  (uint64_t)v52,  v58);
  (*(void (**)(uint64_t, char *, uint64_t))(v60 + 32))(v49, v32, AssociatedTypeWitness);
  return v31;
}

    __break(1u);
    return result;
  }

  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_188DF0C80;
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_188DF0B8C;
  uint64_t v16 = a2;
  return sub_188DF0A3C(v16, v13, v14, v15);
}

          __break(1u);
LABEL_17:
          __break(1u);
LABEL_18:
          __break(1u);
          return result;
        }

BOOL sub_188CF707C(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5)
{
  if (sub_188DF81E0() <= a1)
  {
    uint64_t v11 = a5 << 63 >> 63;
  }

  else
  {
    uint64_t v14 = a1;
    uint64_t v9 = (void (*)(_BYTE *, void))sub_188DF82C4();
    uint64_t v11 = *v10;
    v9(v13, 0LL);
  }

  BOOL result = v11 == a2;
  *a3 = result;
  return result;
}

uint64_t BinaryInteger.init(_:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_188DF8384();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)v14 - v10;
  BinaryInteger.init(exactly:)(a1, a2, a3, (uint64_t)v14 - v10);
  uint64_t v12 = *(void *)(a3 - 8);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v14[0] = 0LL;
  v14[1] = 0xE000000000000000LL;
  sub_188DF8600();
  sub_188DF7EE0();
  sub_188DF8B94();
  sub_188DF7EE0();
  swift_bridgeObjectRelease();
  sub_188DF7EE0();
  uint64_t result = sub_188DF881C();
  __break(1u);
  return result;
}

uint64_t variable initialization expression of Rope._root@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5 = type metadata accessor for Rope._Node(0LL, a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(a4, 1LL, 1LL, v5);
}

uint64_t variable initialization expression of BigString.Index._rope()
{
  return 0LL;
}

uint64_t variable initialization expression of _HashTable.BucketIterator._wrappedAround()
{
  return 0LL;
}

uint64_t variable initialization expression of _HashTreeStatistics.nodeCount()
{
  return 0LL;
}

uint64_t variable initialization expression of _HashTreeStatistics.collisionNodeCount()
{
  return 0LL;
}

uint64_t variable initialization expression of _HashTreeStatistics.itemCount()
{
  return 0LL;
}

uint64_t variable initialization expression of _HashTreeStatistics.collisionCount()
{
  return 0LL;
}

uint64_t variable initialization expression of _HashTreeStatistics._collisionChainCount()
{
  return 0LL;
}

uint64_t variable initialization expression of _HashTreeStatistics.maxItemDepth()
{
  return 0LL;
}

uint64_t variable initialization expression of _HashTreeStatistics._sumItemDepth()
{
  return 0LL;
}

uint64_t variable initialization expression of _HashTreeStatistics.capacityBytes()
{
  return 0LL;
}

uint64_t variable initialization expression of _HashTreeStatistics.itemBytes()
{
  return 0LL;
}

uint64_t variable initialization expression of _HashTreeStatistics.childBytes()
{
  return 0LL;
}

uint64_t variable initialization expression of _HashTreeStatistics.freeBytes()
{
  return 0LL;
}

uint64_t variable initialization expression of _HashTreeStatistics.grossBytes()
{
  return 0LL;
}

void *sub_188CF73C8(void *a1)
{
  return sub_188CF73F0(0LL, a1[2], 0, a1);
}

char *sub_188CF73DC(uint64_t a1)
{
  return sub_188CF7528(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

void *sub_188CF73F0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C749D98);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }

  else
  {
    uint64_t v10 = (void *)MEMORY[0x18961AFE8];
  }

  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[6 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 48 * v8);
    }
    a4[2] = 0LL;
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C749DA0);
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

char *sub_188CF7528(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_18C749DC0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, 8 * v8);
  }

  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_188CF7620()
{
  unint64_t result = qword_18C749D88;
  if (!qword_18C749D88)
  {
    unint64_t result = MEMORY[0x1895D7620](MEMORY[0x189618788], MEMORY[0x189618740]);
    atomic_store(result, (unint64_t *)&qword_18C749D88);
  }

  return result;
}

char *sub_188CF7664(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C749D90);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  size_t v15 = 16 * v8;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, v15);
  }

  swift_bridgeObjectRelease();
  return v10;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = MEMORY[0x1895D7608]((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

void *sub_188CF779C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C749DA8);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }

  else
  {
    uint64_t v10 = (void *)MEMORY[0x18961AFE8];
  }

  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0LL;
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C749DB0);
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_188CF78D0()
{
  unint64_t result = qword_18C749DB8;
  if (!qword_18C749DB8)
  {
    unint64_t result = MEMORY[0x1895D7620](MEMORY[0x189618CF8], MEMORY[0x189618CD8]);
    atomic_store(result, (unint64_t *)&qword_18C749DB8);
  }

  return result;
}

uint64_t _HashNode.symmetricDifference<A>(_:_:)@<X0>( char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>, uint64_t a10)
{
  if (a5 < 1)
  {
    uint64_t v15 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0LL, 0LL, a2, a3, a6, a8, a10);
    uint64_t v16 = MEMORY[0x18961AFC8] + 8LL;
    _HashNode.Builder.init(_:_:)(a1, v15, v17, a6, MEMORY[0x18961AFC8] + 8LL, a10, a9);
    uint64_t v14 = a6;
    uint64_t v13 = v16;
  }

  else
  {
    if (a3 < 1)
    {
      uint64_t v18 = type metadata accessor for _HashNode.Builder(0LL, a6, MEMORY[0x18961AFC8] + 8LL, a10);
      int v19 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL);
      unint64_t v20 = a9;
      uint64_t v21 = 1LL;
      return v19(v20, v21, 1LL, v18);
    }

    _HashNode._symmetricDifference<A>(_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
    uint64_t v13 = MEMORY[0x18961AFC8] + 8LL;
    uint64_t v14 = a6;
  }

  uint64_t v18 = type metadata accessor for _HashNode.Builder(0LL, v14, v13, a10);
  int v19 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL);
  unint64_t v20 = a9;
  uint64_t v21 = 0LL;
  return v19(v20, v21, 1LL, v18);
}

void _HashNode._symmetricDifference<A>(_:_:)( unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>, uint64_t a10)
{
  uint64_t v28 = a3;
  uint64_t v29 = a8;
  uint64_t v17 = MEMORY[0x18961AFC8] + 8LL;
  uint64_t v18 = type metadata accessor for _HashNode.Builder.Kind(0LL, a6, MEMORY[0x18961AFC8] + 8LL, a10);
  MEMORY[0x1895F8858](v18);
  unint64_t v20 = (char *)&v27 - v19;
  if (a4 == a2)
  {
    swift_storeEnumTagMultiPayload();
    _HashNode.Builder.init(_:_:)(a1, (uint64_t)v20, a6, v17, a10, a9);
  }

  else
  {
    uint64_t v21 = a9;
    BOOL v22 = _HashNode.isCollisionNode.getter(a4, a5, a6, a7, a10);
    uint64_t v24 = v28;
    uint64_t v23 = v29;
    if (v22 || _HashNode.isCollisionNode.getter(a2, v28, a6, v29, a10))
    {
      _HashNode._symmetricDifference_slow<A>(_:_:)(a1, a2, v24, a4, a5, a6, a7, v23, v21, a10);
    }

    else
    {
      uint64_t v25 = nullsub_1(a4 + 16, a4 + 32, a6, a7, a10);
      sub_188CF7D38(v25, v26, a2, a1, a6, a7, v23, v21, a10);
    }
  }
}

uint64_t _HashNode._symmetricDifference_slow<A>(_:_:)@<X0>( unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>, uint64_t a10)
{
  BOOL v18 = _HashNode.isCollisionNode.getter(a4, a5, a6, a7, a10);
  BOOL v19 = _HashNode.isCollisionNode.getter(a2, a3, a6, a8, a10);
  if (v18)
  {
    uint64_t v20 = a8;
    uint64_t v21 = a9;
    BOOL v22 = (void *)a7;
    if (v19) {
      return _HashNode._symmetricDifference_slow_both<A>(_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
    }
    unsigned int v24 = a1;
    uint64_t v25 = a2;
    uint64_t v26 = a3;
    uint64_t v27 = a4;
    uint64_t v28 = a5;
    uint64_t v29 = a6;
  }

  else
  {
    uint64_t v21 = a9;
    unsigned int v24 = a1;
    uint64_t v25 = a4;
    uint64_t v26 = a5;
    uint64_t v27 = a2;
    uint64_t v28 = a3;
    uint64_t v29 = a6;
    BOOL v22 = (void *)a8;
    uint64_t v20 = a7;
  }

  return _HashNode._symmetricDifference_slow_left<A>(_:_:)(v24, v25, v26, v27, v28, v29, v22, v20, v21, a10);
}

void sub_188CF7D38( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _BYTE *a8@<X8>, uint64_t a9)
{
  uint64_t v16 = (unsigned int *)nullsub_1(a3 + 16, a3 + 32, a5, a7, a9);
  sub_188CF7DDC(v16, v17, a4, a1, a2, a5, a6, a7, a8, a9);
}

void sub_188CF7DDC( unsigned int *a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>, uint64_t a10)
{
  uint64_t v256 = a7;
  v246 = (unsigned int *)a4;
  uint64_t v247 = a5;
  uint64_t v250 = a2;
  uint64_t v15 = MEMORY[0x18961AFC8] + 8LL;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v17 = type metadata accessor for _HashNode.Builder(255LL, a6, v15, a10);
  uint64_t v226 = TupleTypeMetadata2;
  uint64_t v232 = swift_getTupleTypeMetadata2();
  uint64_t v224 = sub_188DF8384();
  uint64_t v223 = *(void *)(v224 - 8);
  MEMORY[0x1895F8858](v224);
  uint64_t v231 = (uint64_t)&v208 - v18;
  uint64_t v238 = sub_188DF8384();
  uint64_t v230 = *(void *)(v238 - 8);
  uint64_t v19 = MEMORY[0x1895F8858](v238);
  v229 = (char *)&v208 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = MEMORY[0x1895F8858](v19);
  v228 = (char *)&v208 - v22;
  uint64_t v248 = v17;
  uint64_t v239 = *(void *)(v17 - 8);
  uint64_t v23 = MEMORY[0x1895F8858](v21);
  v222 = (char *)&v208 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = MEMORY[0x1895F8858](v23);
  v225 = (char *)&v208 - v26;
  MEMORY[0x1895F8858](v25);
  uint64_t v233 = (uint64_t)&v208 - v27;
  uint64_t v28 = type metadata accessor for _HashNode.Builder(0LL, a6, a8, a10);
  uint64_t v217 = *(void *)(v28 - 8);
  MEMORY[0x1895F8858](v28);
  v212 = (char *)&v208 - v29;
  uint64_t v254 = a8;
  uint64_t v211 = swift_getTupleTypeMetadata2();
  uint64_t v220 = swift_getTupleTypeMetadata2();
  uint64_t v210 = sub_188DF8384();
  uint64_t v209 = *(void *)(v210 - 8);
  MEMORY[0x1895F8858](v210);
  uint64_t v219 = (uint64_t)&v208 - v30;
  v218 = (uint64_t *)v28;
  v237 = (uint64_t *)sub_188DF8384();
  v236 = (void (**)(char *, char *, uint64_t *))*(v237 - 1);
  uint64_t v31 = MEMORY[0x1895F8858](v237);
  v216 = (char *)&v208 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = MEMORY[0x1895F8858](v31);
  v215 = (char *)&v208 - v34;
  uint64_t v245 = *(void *)(a6 - 8);
  uint64_t v35 = MEMORY[0x1895F8858](v33);
  unint64_t v242 = (unint64_t)&v208 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v35);
  v253 = (char *)&v208 - v37;
  uint64_t v38 = type metadata accessor for _HashNode.Builder.Kind(0LL, a6, v15, a10);
  MEMORY[0x1895F8858](v38);
  uint64_t v40 = (char *)&v208 - v39;
  swift_storeEnumTagMultiPayload();
  v249 = a9;
  unsigned int v252 = a3;
  char v41 = a3;
  uint64_t v42 = v246;
  uint64_t v213 = v15;
  _HashNode.Builder.init(_:_:)(v41, (uint64_t)v40, a6, v15, a10, a9);
  unsigned int v43 = *v42;
  v251 = a1;
  uint64_t v259 = a10;
  uint64_t v234 = a6;
  if (v43)
  {
    unsigned int v255 = 0;
    LODWORD(v243) = v252 + 5;
    do
    {
      int v46 = __clz(__rbit32(v43));
      uint64_t v47 = _HashNode.UnsafeHandle.itemPtr(at:)(v255, (uint64_t)v42, v247);
      uint64_t v49 = v47;
      unsigned int v50 = *a1;
      int v51 = 1 << v46;
      if (((1 << v46) & *a1) != 0)
      {
        int v244 = v46;
        v48.i32[0] = (v51 - 1) & v50;
        uint8x8_t v52 = (uint8x8_t)vcnt_s8(v48);
        v52.i16[0] = vaddlv_u8(v52);
        uint64_t v53 = _HashNode.UnsafeHandle.itemPtr(at:)(v52.u32[0], (uint64_t)a1, v250);
        uint64_t v54 = v245;
        v55 = *(void (**)(char *, uint64_t, uint64_t))(v245 + 16);
        v56 = v253;
        v55(v253, v49, a6);
        uint64_t v57 = v49;
        unint64_t v58 = v242;
        v55((char *)v242, v53, a6);
        char v59 = sub_188DF7D90();
        v60 = *(void (**)(unint64_t, uint64_t))(v54 + 8);
        v60(v58, a6);
        v60((unint64_t)v56, a6);
        if ((v59 & 1) == 0)
        {
          uint64_t v61 = (uint64_t)v253;
          v55(v253, v57, a6);
          unint64_t v62 = sub_188DF5A9C();
          v60(v61, a6);
          v55((char *)v61, v53, a6);
          unint64_t v63 = sub_188DF5A9C();
          v60(v61, a6);
          uint64_t v64 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v55)(v61, v57, a6);
          MEMORY[0x1895F8858](v64);
          uint64_t v65 = v256;
          *(&v208 - 6) = a6;
          *(&v208 - 5) = v65;
          uint64_t v66 = v259;
          *(&v208 - 4) = v254;
          *(&v208 - 3) = v66;
          uint64_t v68 = static _HashNode.build(level:item1:_:item2:_:)( (int)v243,  v61,  v67,  v62,  (uint64_t)sub_188CFA6A4,  (uint64_t)(&v208 - 8),  v63,  a6,  MEMORY[0x18961AFC8] + 8LL,  v259);
          _HashNode.Builder.addNewChildNode(_:_:at:)(v252, v68, v69, v244, v248);
        }
      }

      else
      {
        unsigned int v70 = a1[1];
        if ((v70 & v51) != 0)
        {
          int v244 = v46;
          v48.i32[0] = v70 & (v51 - 1);
          uint8x8_t v71 = (uint8x8_t)vcnt_s8(v48);
          v71.i16[0] = vaddlv_u8(v71);
          uint64_t v72 = v259;
          v73 = (uint64_t *)_HashNode.UnsafeHandle.childPtr(at:)(v71.u32[0], (uint64_t)a1, v250);
          uint64_t v74 = v245;
          v75 = *(void (**)(char *, uint64_t, uint64_t))(v245 + 16);
          uint64_t v76 = (uint64_t)v253;
          v75(v253, v49, a6);
          uint64_t v77 = sub_188DF5A9C();
          v78 = *(void (**)(uint64_t, uint64_t))(v74 + 8);
          unint64_t v240 = v77;
          v241 = v78;
          v78(v76, a6);
          uint64_t v79 = *v73;
          uint64_t v80 = v73[1];
          v221 = v73;
          uint64_t v81 = v254;
          v227 = v75;
          v75((char *)v76, v49, a6);
          swift_retain();
          uint64_t v82 = v80;
          uint64_t v83 = v219;
          uint64_t v84 = v72;
          v85 = v241;
          _HashNode.removing(_:_:_:)(v243, v76, v240, v79, v82, a6, v81, v84, v219);
          swift_release();
          v85(v76, a6);
          uint64_t v86 = v220;
          int v87 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v220 - 8) + 48LL))(v83, 1LL, v220);
          uint64_t v235 = v49;
          if (v87 == 1)
          {
            (*(void (**)(uint64_t, uint64_t))(v209 + 8))(v83, v210);
            uint64_t v88 = v217;
            v89 = v215;
            v90 = v218;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t *))(v217 + 56))(v215, 1LL, 1LL, v218);
          }

          else
          {
            uint64_t v91 = v83 + *(int *)(v211 + 48);
            uint64_t v92 = v83 + *(int *)(v86 + 48);
            uint64_t v93 = v83;
            uint64_t v88 = v217;
            v94 = v215;
            v90 = v218;
            (*(void (**)(char *, uint64_t, uint64_t *))(v217 + 32))(v215, v92, v218);
            (*(void (**)(char *, void, uint64_t, uint64_t *))(v88 + 56))(v94, 0LL, 1LL, v90);
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v81 - 8) + 8LL))(v91, v81);
            uint64_t v95 = v93;
            v85 = v241;
            v241(v95, a6);
            v89 = v94;
          }

          v96 = v237;
          v97 = v236;
          v98 = v216;
          v236[2](v216, v89, v237);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t *))(v88 + 48))(v98, 1LL, v90) == 1)
          {
            v214 = v97[1];
            ((void (*)(char *, uint64_t *))v214)(v98, v96);
            v99 = v96;
            uint64_t v100 = *v221;
            uint64_t v101 = v221[1];
            Swift::Int v102 = *(void *)(*(void *)(v226 - 8) + 72LL);
            swift_retain();
            uint64_t v103 = v259;
            uint64_t v104 = _HashNode.mapValuesToVoid(copy:extraBytes:)(1LL, v102, v100, v101, a6, v254, v259);
            uint64_t v106 = v105;
            uint64_t v107 = v103;
            swift_release();
            uint64_t v257 = v104;
            uint64_t v258 = v106;
            uint64_t v108 = (uint64_t)v253;
            v227(v253, v235, a6);
            v109 = (void *)type metadata accessor for _HashNode(0LL, a6, v213, v107);
            _HashNode.insert(_:_:_:)(v243, v108, v110, v240, v109);
            v85(v108, a6);
            _HashNode.Builder.addNewChildNode(_:_:at:)(v252, v257, v258, v244, v248);
            ((void (*)(char *, uint64_t *))v214)(v89, v99);
          }

          else
          {
            v111 = v212;
            (*(void (**)(char *, char *, uint64_t *))(v88 + 32))(v212, v98, v90);
            uint64_t v112 = v233;
            _HashNode.Builder.mapValuesToVoid()(v90, v233);
            uint64_t v113 = v239;
            uint64_t v114 = (uint64_t)v225;
            uint64_t v115 = v248;
            (*(void (**)(char *, uint64_t, uint64_t))(v239 + 16))(v225, v112, v248);
            _HashNode.Builder.addNewChildBranch(_:_:at:)(v252, v114, v244, v115);
            v116 = *(void (**)(uint64_t, uint64_t))(v113 + 8);
            a6 = v234;
            v116(v112, v115);
            (*(void (**)(char *, uint64_t *))(v88 + 8))(v111, v90);
            ((void (*)(char *, uint64_t *))v236[1])(v89, v237);
          }
        }

        else
        {
          uint64_t v44 = (uint64_t)v253;
          (*(void (**)(char *, uint64_t, uint64_t))(v245 + 16))(v253, v47, a6);
          _HashNode.Builder.addNewItem(_:_:at:)(v252, v44, v45, v46, v248);
        }
      }

      ++v255;
      v43 &= v43 - 1;
      a1 = v251;
      uint64_t v42 = v246;
    }

    while (v43);
  }

  unsigned int v117 = v42[1];
  uint64_t v118 = v248;
  if (v117)
  {
    uint64_t v119 = 0LL;
    LODWORD(v240) = v252 + 5;
    v227 = (void (*)(char *, uint64_t, uint64_t))(MEMORY[0x18961AFC8] + 8LL);
    do
    {
      uint64_t v122 = (uint64_t)v246;
      uint64_t v123 = v256;
      v124 = (uint64_t *)_HashNode.UnsafeHandle.childPtr(at:)(v119, (uint64_t)v246, v247);
      unsigned int v126 = *a1;
      unsigned int v255 = __clz(__rbit32(v117));
      int v127 = 1 << v255;
      if (((1 << v255) & v126) != 0)
      {
        LODWORD(v241) = v117;
        v125.i32[0] = (v127 - 1) & v126;
        uint8x8_t v128 = (uint8x8_t)vcnt_s8(v125);
        v128.i16[0] = vaddlv_u8(v128);
        v129 = v124;
        uint64_t v130 = _HashNode.UnsafeHandle.itemPtr(at:)(v128.u32[0], (uint64_t)a1, v250);
        uint64_t v131 = v245;
        v132 = *(void (***)(char *, char *, uint64_t *))(v245 + 16);
        uint64_t v133 = (uint64_t)v253;
        ((void (*)(char *, uint64_t, uint64_t))v132)(v253, v130, a6);
        uint64_t v134 = sub_188DF5A9C();
        v135 = *(void (**)(uint64_t, uint64_t))(v131 + 8);
        unint64_t v242 = v134;
        v243 = v135;
        v135(v133, a6);
        uint64_t v136 = *v129;
        uint64_t v137 = v129[1];
        v237 = v129;
        swift_retain();
        uint64_t v138 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0LL, 0LL, v136, v137, a6, v123, v259);
        uint64_t v140 = v139;
        swift_release();
        uint64_t v235 = v130;
        v236 = v132;
        ((void (*)(uint64_t, uint64_t, uint64_t))v132)(v133, v130, a6);
        uint64_t v141 = v140;
        uint64_t v142 = v231;
        _HashNode.removing(_:_:_:)(v240, v133, v242, v138, v141, a6, (uint64_t)v227, v259, v231);
        swift_release();
        v143 = v243;
        v243(v133, a6);
        uint64_t v144 = v232;
        int v145 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v232 - 8) + 48LL))(v142, 1LL, v232);
        int v244 = v119;
        if (v145 == 1)
        {
          (*(void (**)(uint64_t, uint64_t))(v223 + 8))(v142, v224);
          uint64_t v146 = v239;
          v147 = v228;
          uint64_t v118 = v248;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v239 + 56))(v228, 1LL, 1LL, v248);
        }

        else
        {
          uint64_t v164 = v142 + *(int *)(v144 + 48);
          uint64_t v146 = v239;
          v147 = v228;
          uint64_t v118 = v248;
          (*(void (**)(char *, uint64_t, uint64_t))(v239 + 32))(v228, v164, v248);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v146 + 56))(v147, 0LL, 1LL, v118);
          v143(v142, a6);
        }

        uint64_t v165 = v230;
        v166 = v229;
        uint64_t v167 = v238;
        (*(void (**)(char *, char *, uint64_t))(v230 + 16))(v229, v147, v238);
        int v168 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v146 + 48))(v166, 1LL, v118);
        unsigned int v117 = v241;
        if (v168 == 1)
        {
          v169 = *(void (**)(char *, uint64_t))(v165 + 8);
          v169(v166, v167);
          v170 = v169;
          v171 = v147;
          uint64_t v172 = *v237;
          uint64_t v173 = v237[1];
          Swift::Int v174 = *(void *)(*(void *)(v226 - 8) + 72LL);
          swift_retain();
          a6 = v234;
          uint64_t v175 = _HashNode.mapValuesToVoid(copy:extraBytes:)(1LL, v174, v172, v173, v234, v256, v259);
          uint64_t v177 = v176;
          swift_release();
          uint64_t v257 = v175;
          uint64_t v258 = v177;
          uint64_t v118 = v248;
          uint64_t v178 = (uint64_t)v253;
          ((void (*)(char *, uint64_t, uint64_t))v236)(v253, v235, a6);
          v179 = (void *)type metadata accessor for _HashNode(0LL, a6, MEMORY[0x18961AFC8] + 8LL, v259);
          _HashNode.insert(_:_:_:)(v240, v178, v180, v242, v179);
          v243(v178, a6);
          _HashNode.Builder.addNewChildNode(_:_:at:)(v252, v257, v258, v255, v118);
          v170(v171, v238);
          a1 = v251;
        }

        else
        {
          v120 = v222;
          (*(void (**)(char *, char *, uint64_t))(v146 + 32))(v222, v166, v118);
          uint64_t v121 = v233;
          (*(void (**)(uint64_t, char *, uint64_t))(v146 + 16))(v233, v120, v118);
          _HashNode.Builder.addNewChildBranch(_:_:at:)(v252, v121, v255, v118);
          (*(void (**)(char *, uint64_t))(v146 + 8))(v120, v118);
          (*(void (**)(char *, uint64_t))(v165 + 8))(v147, v167);
          a1 = v251;
          a6 = v234;
        }

        LODWORD(v119) = v244;
      }

      else
      {
        unsigned int v148 = a1[1];
        if ((v148 & v127) != 0)
        {
          v125.i32[0] = v148 & (v127 - 1);
          uint8x8_t v149 = (uint8x8_t)vcnt_s8(v125);
          v149.i16[0] = vaddlv_u8(v149);
          uint64_t v150 = v149.u32[0];
          uint64_t v151 = v256;
          v152 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v119, v122, v247, a6, v256, v259);
          uint64_t v153 = *v152;
          uint64_t v154 = v152[1];
          uint64_t v155 = v254;
          v156 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v150, a1, v250, a6, v254, v259);
          uint64_t v157 = *v156;
          uint64_t v158 = v156[1];
          swift_retain();
          swift_retain();
          int v244 = v119;
          uint64_t v119 = v233;
          uint64_t v159 = v154;
          uint64_t v118 = v248;
          uint64_t v160 = v151;
          uint64_t v161 = v239;
          _HashNode._symmetricDifference<A>(_:_:)(v240, v157, v158, v153, v159, a6, v160, v155, v259);
          swift_release();
          swift_release();
          uint64_t v162 = (uint64_t)v225;
          (*(void (**)(char *, uint64_t, uint64_t))(v161 + 16))(v225, v119, v118);
          _HashNode.Builder.addNewChildBranch(_:_:at:)(v252, v162, v255, v118);
          uint64_t v163 = v119;
          LODWORD(v119) = v244;
          (*(void (**)(uint64_t, uint64_t))(v161 + 8))(v163, v118);
        }

        else
        {
          uint64_t v181 = *v124;
          uint64_t v182 = v124[1];
          swift_retain();
          uint64_t v183 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0LL, 0LL, v181, v182, a6, v256, v259);
          uint64_t v185 = v184;
          swift_release();
          uint64_t v186 = v185;
          uint64_t v118 = v248;
          _HashNode.Builder.addNewChildNode(_:_:at:)(v252, v183, v186, v255, v248);
        }
      }

      uint64_t v119 = (v119 + 1);
      v117 &= v117 - 1;
    }

    while (v117);
    v187 = v246;
    unsigned int v188 = v246[1];
    uint64_t v189 = v254;
  }

  else
  {
    unsigned int v188 = 0;
    uint64_t v189 = v254;
    v187 = v246;
  }

  unsigned int v190 = v188 | *v187;
  unsigned int v191 = *v251;
  if (*v251)
  {
    uint64_t v192 = 0LL;
    uint64_t v193 = (uint64_t)v253;
    do
    {
      int v194 = __clz(__rbit32(v191));
      if (((v190 >> v194) & 1) == 0)
      {
        uint64_t v195 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v192, v251, v250, a6, v189, v259);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v245 + 16))(v193, v195, a6);
        _HashNode.Builder.addNewItem(_:_:at:)(v252, v193, v196, v194, v118);
      }

      uint64_t v192 = (v192 + 1);
      v191 &= v191 - 1;
    }

    while (v191);
  }

  unsigned int v197 = v251[1];
  if (v197)
  {
    uint64_t v198 = 0LL;
    do
    {
      int v199 = __clz(__rbit32(v197));
      if (((v190 >> v199) & 1) == 0)
      {
        uint64_t v200 = v254;
        uint64_t v201 = v259;
        v202 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v198, v251, v250, a6, v254, v259);
        uint64_t v203 = *v202;
        uint64_t v204 = v202[1];
        swift_retain();
        uint64_t v205 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0LL, 0LL, v203, v204, a6, v200, v201);
        uint64_t v207 = v206;
        swift_release();
        _HashNode.Builder.addNewChildNode(_:_:at:)(v252, v205, v207, v199, v248);
      }

      uint64_t v198 = (v198 + 1);
      v197 &= v197 - 1;
    }

    while (v197);
  }

uint64_t sub_188CF8FC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v8 = (char *)&v10 - v7;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16LL))((char *)&v10 - v7, a2, a3);
  return sub_188D8A1FC((uint64_t)v8, a1, TupleTypeMetadata2);
}

uint64_t _HashNode._symmetricDifference_slow_both<A>(_:_:)@<X0>( unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>, uint64_t a10)
{
  uint64_t v17 = (unsigned int *)nullsub_1(a4 + 16, a4 + 32, a6, a7, a10);
  uint64_t v19 = v18;
  uint64_t v20 = (unsigned int *)nullsub_1(a2 + 16, a2 + 32, a6, a8, a10);
  return sub_188CF91F4(v20, v21, v17, v19, a1, a4, a5, a2, a9, a3, a6, a7, a8, a10);
}

uint64_t _HashNode._symmetricDifference_slow_left<A>(_:_:)@<X0>( unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>, uint64_t a10)
{
  uint64_t v19 = (unsigned int *)nullsub_1(a4 + 16, a4 + 32, a6, a7, a10);
  return sub_188CF9744(v19, v20, a2, a3, a1, a4, a5, a6, a9, a7, a8, a10);
}

uint64_t sub_188CF91F4@<X0>( unsigned int *a1@<X0>, unint64_t *a2@<X1>, unsigned int *a3@<X2>, unint64_t *a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v68 = (__int32 *)a3;
  v75 = (uint64_t *)a7;
  uint64_t v76 = (_BYTE *)a8;
  uint64_t v74 = a6;
  unsigned int v81 = a5;
  uint64_t v80 = (__int32 *)a1;
  uint64_t v85 = a13;
  uint64_t v78 = *(void *)(a11 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v77 = (char *)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = MEMORY[0x18961AFC8] + 8LL;
  uint64_t v82 = type metadata accessor for _HashNode.Builder.Kind(0LL, a11, MEMORY[0x18961AFC8] + 8LL, a14);
  MEMORY[0x1895F8858](v82);
  uint64_t v20 = (uint64_t *)((char *)&v67 - v19);
  uint64_t v79 = type metadata accessor for _HashNode.Builder(0LL, a11, v18, a14);
  MEMORY[0x1895F8858](v79);
  uint64_t v23 = (char *)&v67 - v22;
  BOOL v24 = *a4 == *a2;
  uint64_t v69 = a9;
  if (v24)
  {
    uint64_t v74 = a12;
    v75 = (uint64_t *)a4;
    uint64_t v67 = v21;
    swift_storeEnumTagMultiPayload();
    uint64_t v76 = v23;
    _HashNode.Builder.init(_:_:)(v81, (uint64_t)v20, a11, v18, a14, v23);
    v73 = (uint64_t *)a2;
    uint64_t v25 = _HashNode.UnsafeHandle.reverseItems.getter();
    uint64_t v71 = v26;
    uint64_t v72 = v25;
    uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)*v68);
    v27.i16[0] = vaddlv_u8(v27);
    if (*v68 == v68[1]) {
      __int32 v28 = *v68;
    }
    else {
      __int32 v28 = v27.i32[0];
    }
    uint64_t v29 = a14;
    uint64_t v82 = a14;
    uint64_t v30 = (uint64_t)v68;
    __int32 v70 = v28;
    if (v28)
    {
      unsigned int v31 = 0;
      uint64_t v32 = v75;
      do
      {
        uint64_t v33 = v30;
        uint64_t v34 = v74;
        uint64_t v35 = _HashNode.UnsafeHandle.itemPtr(at:)(v31, v30, (uint64_t)v32);
        uint64_t v83 = v72;
        uint64_t v84 = v71;
        uint64_t v36 = MEMORY[0x1895F8858](v35);
        *(&v67 - 6) = a11;
        *(&v67 - 5) = v34;
        *(&v67 - 4) = v85;
        *(&v67 - 3) = v29;
        uint64_t v66 = v36;
        swift_getTupleTypeMetadata2();
        uint64_t v37 = sub_188DF83F0();
        MEMORY[0x1895D7620](MEMORY[0x189618B38], v37);
        uint64_t v32 = v75;
        if ((sub_188DF806C() & 1) == 0)
        {
          uint64_t v38 = (uint64_t)v77;
          (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v77, v35, a11);
          _HashNode.Builder.addNewCollision(_:_:_:)(v81, v38, v39, *v32, v79);
        }

        ++v31;
        uint64_t v29 = v82;
        uint64_t v30 = v33;
      }

      while (v70 != v31);
    }

    uint64_t v53 = v74;
    v75 = (uint64_t *)_HashNode.UnsafeHandle.reverseItems.getter();
    uint64_t v72 = v54;
    uint64_t v55 = (uint64_t)v80;
    __int32 v56 = *v80;
    uint8x8_t v57 = (uint8x8_t)vcnt_s8((int8x8_t)*v80);
    v57.i16[0] = vaddlv_u8(v57);
    if (*v80 != v80[1]) {
      __int32 v56 = v57.i32[0];
    }
    LODWORD(v71) = v56;
    if (v56)
    {
      unsigned int v58 = 0;
      char v59 = v73;
      uint64_t v60 = v85;
      do
      {
        uint64_t v61 = _HashNode.UnsafeHandle.itemPtr(at:)(v58, v55, (uint64_t)v59);
        uint64_t v83 = (uint64_t)v75;
        uint64_t v84 = v72;
        uint64_t v62 = MEMORY[0x1895F8858](v61);
        *(&v67 - 6) = a11;
        *(&v67 - 5) = v53;
        *(&v67 - 4) = v60;
        *(&v67 - 3) = v29;
        uint64_t v66 = v62;
        swift_getTupleTypeMetadata2();
        uint64_t v63 = sub_188DF83F0();
        MEMORY[0x1895D7620](MEMORY[0x189618B38], v63);
        char v59 = v73;
        if ((sub_188DF806C() & 1) == 0)
        {
          uint64_t v64 = (uint64_t)v77;
          (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v77, v61, a11);
          _HashNode.Builder.addNewCollision(_:_:_:)(v81, v64, v65, *v59, v79);
        }

        ++v58;
        uint64_t v29 = v82;
        uint64_t v60 = v85;
        uint64_t v55 = (uint64_t)v80;
      }

      while ((_DWORD)v71 != v58);
    }

    return (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v67 + 32))(v69, v76, v79);
  }

  else
  {
    uint64_t v40 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0LL, 0LL, v74, (uint64_t)v75, a11, a12, a14);
    uint64_t v42 = v41;
    unint64_t v43 = *a4;
    uint64_t v44 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0LL, 0LL, (uint64_t)v76, a10, a11, v85, a14);
    unint64_t v45 = *a2;
    char v46 = v81;
    uint64_t v49 = sub_188DA84DC(v81, v40, v42, v43, v44, v47, v45, a11, v48, v18, a14);
    uint64_t v51 = v50;
    swift_release();
    swift_release();
    *uint64_t v20 = v49;
    v20[1] = v51;
    swift_storeEnumTagMultiPayload();
    return _HashNode.Builder.init(_:_:)(v46, (uint64_t)v20, a11, v18, a14, v69);
  }

uint64_t sub_188CF9744@<X0>( unsigned int *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>, void *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v18 = (int *)nullsub_1(a3 + 16, a3 + 32, a8, a11, a12);
  return sub_188CF97F0(v18, v19, a1, a2, a5, a3, a4, a6, a9, a7, a8, a10, a11, a12);
}

uint64_t sub_188CF97F0@<X0>( int *a1@<X0>, void *a2@<X1>, unsigned int *a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14)
{
  uint64_t v190 = a8;
  uint64_t v192 = a6;
  uint64_t v193 = (uint64_t *)a7;
  uint64_t v181 = a3;
  unsigned int v191 = a9;
  uint64_t v194 = a13;
  uint64_t v195 = a2;
  uint64_t v189 = a10;
  uint64_t v17 = MEMORY[0x18961AFC8] + 8LL;
  v179 = (void *)type metadata accessor for _HashNode.Builder(0LL, a11, MEMORY[0x18961AFC8] + 8LL, a14);
  uint64_t v183 = (void (**)(uint64_t, char *, void *))*(v179 - 1);
  uint64_t v18 = MEMORY[0x1895F8858](v179);
  uint64_t v182 = (char *)&v170 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v18);
  uint64_t v21 = (char *)&v170 - v20;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v188 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v22 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v180 = (char *)&v170 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v22);
  uint64_t v184 = (uint64_t)&v170 - v24;
  uint64_t v186 = type metadata accessor for _HashNode.Builder.Kind(0LL, a11, v17, a14);
  MEMORY[0x1895F8858](v186);
  v187 = (uint64_t *)((char *)&v170 - v25);
  uint64_t v203 = a12;
  uint64_t v26 = swift_getTupleTypeMetadata2();
  uint64_t v27 = MEMORY[0x1895F8858](v26);
  uint64_t v28 = MEMORY[0x1895F8858](v27);
  uint64_t v29 = *(void *)(a11 - 8);
  uint64_t v30 = MEMORY[0x1895F8858](v28);
  uint64_t v37 = (char *)&v170 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v38 = *a4;
  uint64_t v198 = a5;
  unint64_t v39 = v38 >> a5;
  unsigned int v197 = v39 & 0x1F;
  int v40 = *a1;
  int v41 = 1 << v39;
  if ((v41 & *a1) == 0)
  {
    uint64_t v70 = (uint64_t)v182;
    uint64_t v69 = v183;
    uint64_t v71 = v194;
    int v72 = *(_DWORD *)(v31 + 4);
    if ((v72 & v41) != 0)
    {
      v35.i32[0] = v72 & (v41 - 1);
      uint8x8_t v73 = (uint8x8_t)vcnt_s8(v35);
      v73.i16[0] = vaddlv_u8(v73);
      LODWORD(v188) = v73.i32[0];
      uint64_t v74 = (uint64_t *)_HashNode.UnsafeHandle.childPtr(at:)(v73.u32[0], v31, (uint64_t)v195);
      uint64_t v76 = *v74;
      uint64_t v75 = v74[1];
      int v77 = v198;
      swift_retain();
      _HashNode._symmetricDifference<A>(_:_:)((v77 + 5), v190, v189, v76, v75, a11, v71, v203, a14);
      swift_release();
      uint64_t v78 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0LL, 0LL, v192, (uint64_t)v193, a11, v71, a14);
      uint64_t v80 = v79;
      unsigned int v81 = v179;
      v69[2](v70, v21, v179);
      _HashNode.replacingChild(_:at:_:with:)( v77,  v197,  v188,  v70,  v78,  v80,  a11,  MEMORY[0x18961AFC8] + 8LL,  (uint64_t)v191,  a14);
      swift_release();
      return ((uint64_t (*)(char *, void *))v69[1])(v21, v81);
    }

    uint64_t v201 = _HashNode.mapValuesToVoid(copy:extraBytes:)(1LL, 16LL, v192, (uint64_t)v193, a11, v194, a14);
    uint64_t v202 = v129;
    uint64_t v130 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0LL, 0LL, v190, v189, a11, (uint64_t)v203, a14);
    uint64_t v132 = v131;
    uint64_t v133 = MEMORY[0x18961AFC8] + 8LL;
    uint64_t v134 = (void *)type metadata accessor for _HashNode(0LL, a11, MEMORY[0x18961AFC8] + 8LL, a14);
    sub_188DF6B94(v130, v132, v197, v134);
    swift_release();
    uint64_t v135 = v202;
    uint64_t v136 = v187;
    void *v187 = v201;
    v136[1] = v135;
    swift_storeEnumTagMultiPayload();
    uint64_t v104 = v191;
    char v105 = v198;
    uint64_t v106 = (uint64_t)v136;
    uint64_t v107 = a11;
    uint64_t v108 = v133;
    uint64_t v109 = a14;
    return _HashNode.Builder.init(_:_:)(v105, v106, v107, v108, v109, v104);
  }

  uint64_t v42 = a4;
  uint64_t v175 = v32;
  uint64_t v176 = v34;
  uint64_t v178 = v33;
  uint64_t v182 = (char *)v30;
  v35.i32[0] = (v41 - 1) & v40;
  uint8x8_t v43 = (uint8x8_t)vcnt_s8(v35);
  v43.i16[0] = vaddlv_u8(v43);
  unsigned int v44 = v43.i32[0];
  uint64_t v177 = v31;
  uint64_t v45 = v194;
  uint64_t v46 = _HashNode.UnsafeHandle.itemPtr(at:)(v43.u32[0], v31, (uint64_t)v195);
  uint64_t v183 = *(void (***)(uint64_t, char *, void *))(v29 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v183)(v37, v46, a11);
  unint64_t v47 = sub_188DF5A9C();
  v179 = *(void **)(v29 + 8);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v179)(v37, a11);
  if (v47 != *v42)
  {
    uint64_t v82 = *(void *)(v188 + 72);
    BOOL v83 = __OFSUB__(16LL, v82);
    uint64_t v84 = 16 - v82;
    if (v83)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }

    uint64_t v201 = _HashNode.mapValuesToVoid(copy:extraBytes:)(1LL, v84 & ~(v84 >> 63), v192, (uint64_t)v193, a11, v45, a14);
    uint64_t v202 = v85;
    unsigned int v86 = v44;
    uint64_t v87 = v45;
    uint64_t v88 = MEMORY[0x18961AFC8] + 8LL;
    uint64_t v195 = (void *)type metadata accessor for _HashNode(0LL, a11, MEMORY[0x18961AFC8] + 8LL, a14);
    uint64_t v89 = v184;
    _HashNode.removeItem(at:_:)(v184, v90, v197, v86, v195);
    LODWORD(v192) = v198 + 5;
    uint64_t v91 = v180;
    uint64_t v92 = ((uint64_t (*)(char *, uint64_t, uint64_t))v183)(v180, v89, a11);
    uint64_t v193 = &v170;
    MEMORY[0x1895F8858](v92);
    uint64_t v93 = v203;
    *(&v170 - 6) = a11;
    *(&v170 - 5) = (uint64_t)v93;
    *(&v170 - 4) = v87;
    *(&v170 - 3) = a14;
    uint64_t v169 = (uint64_t)v91;
    uint64_t v94 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0LL, 0LL, v190, v189, a11, (uint64_t)v93, a14);
    uint64_t v97 = static _HashNode.build(level:item1:_:child2:_:)( v192,  (uint64_t)sub_188CFA658,  (uint64_t)(&v170 - 8),  v47,  v94,  v95,  *v42,  a11,  v96,  v88,  a14);
    uint64_t v99 = v98;
    uint64_t v100 = *(void (**)(char *, uint64_t))(v188 + 8);
    uint64_t v101 = TupleTypeMetadata2;
    v100(v91, TupleTypeMetadata2);
    sub_188DF6B94(v97, v99, v197, v195);
    swift_release();
    v100((char *)v89, v101);
    uint64_t v102 = v202;
    uint64_t v103 = v187;
    void *v187 = v201;
    v103[1] = v102;
    swift_storeEnumTagMultiPayload();
    uint64_t v104 = v191;
    char v105 = v198;
    uint64_t v106 = (uint64_t)v103;
    uint64_t v107 = a11;
    uint64_t v108 = v88;
    uint64_t v109 = a14;
    return _HashNode.Builder.init(_:_:)(v105, v106, v107, v108, v109, v104);
  }

  unsigned int v174 = v44;
  uint64_t v49 = (__int32 *)v181;
  uint64_t v50 = v203;
  uint64_t v51 = _HashNode.UnsafeHandle.reverseItems.getter();
  uint64_t v180 = (char *)&v170;
  uint64_t v173 = v51;
  uint64_t v201 = v51;
  uint64_t v202 = v52;
  uint64_t v172 = v52;
  MEMORY[0x1895F8858](v51);
  *(&v170 - 6) = a11;
  *(&v170 - 5) = (uint64_t)v50;
  *(&v170 - 4) = v45;
  *(&v170 - 3) = a14;
  uint64_t v169 = v46;
  uint64_t v53 = sub_188DF83F0();
  MEMORY[0x1895D7620](MEMORY[0x189618B48], v53);
  uint64_t v54 = v196;
  sub_188DF8234();
  if (v200 == 1)
  {
    uint64_t v56 = v192;
    uint64_t v55 = (uint64_t)v193;
    uint64_t result = _HashNode.hasSingletonItem.getter(v192, (uint64_t)v193, a11, v45, a14);
    if ((result & 1) != 0)
    {
      uint64_t v201 = _HashNode.mapValuesToVoid(copy:extraBytes:)( 1LL,  *(void *)(v188 + 72),  v190,  v189,  a11,  (uint64_t)v203,  a14);
      uint64_t v202 = v57;
      uint64_t v58 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(0LL, v177, v195, a11, v45, a14);
      ((void (*)(char *, uint64_t, uint64_t))v183)(v37, v58, a11);
      uint64_t v59 = MEMORY[0x18961AFC8] + 8LL;
      uint64_t v60 = (void *)type metadata accessor for _HashNode(0LL, a11, MEMORY[0x18961AFC8] + 8LL, a14);
      _HashNode.ensureUniqueAndAppendCollision(isUnique:_:)(1, (uint64_t)v37, v61, v60);
      ((void (*)(char *, uint64_t))v179)(v37, a11);
      uint64_t v62 = v202;
      uint64_t v63 = v187;
      void *v187 = v201;
      v63[1] = v62;
      swift_storeEnumTagMultiPayload();
      uint64_t v64 = v191;
      char v65 = v198;
      uint64_t v66 = (uint64_t)v63;
      uint64_t v67 = a11;
      uint64_t v68 = v59;
      return _HashNode.Builder.init(_:_:)(v65, v66, v67, v68, a14, v64);
    }

    Swift::Int v137 = *(void *)(v188 + 72);
    if (!__OFSUB__(16LL, v137))
    {
      uint64_t v201 = _HashNode.mapValuesToVoid(copy:extraBytes:)( 1LL,  (16 - v137) & ~((16 - v137) >> 63),  v56,  v55,  a11,  v45,  a14);
      uint64_t v202 = v138;
      uint64_t v139 = a14;
      uint64_t v140 = MEMORY[0x18961AFC8] + 8LL;
      uint64_t v141 = (void *)type metadata accessor for _HashNode(0LL, a11, MEMORY[0x18961AFC8] + 8LL, a14);
      uint64_t v142 = v184;
      char v143 = v197;
      _HashNode.removeItem(at:_:)(v184, v144, v197, v174, v141);
      uint64_t v199 = _HashNode.mapValuesToVoid(copy:extraBytes:)(1LL, v137, v190, v189, a11, (uint64_t)v203, a14);
      uint64_t v200 = v145;
      _HashNode.ensureUniqueAndAppendCollision(isUnique:_:)(1, v142, v146, v141);
      sub_188DF6B94(v199, v200, v143, v141);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v188 + 8))(v142, TupleTypeMetadata2);
      uint64_t v147 = v202;
      unsigned int v148 = v187;
      void *v187 = v201;
      v148[1] = v147;
      swift_storeEnumTagMultiPayload();
      uint8x8_t v149 = v191;
      char v150 = v198;
      uint64_t v151 = (uint64_t)v148;
      uint64_t v152 = a11;
      uint64_t v153 = v140;
      return _HashNode.Builder.init(_:_:)(v150, v151, v152, v153, v139, v149);
    }

    goto LABEL_25;
  }

  uint64_t v110 = v199;
  __int32 v111 = *v49;
  uint8x8_t v112 = (uint8x8_t)vcnt_s8((int8x8_t)*v49);
  v112.i16[0] = vaddlv_u8(v112);
  if (*v49 != v49[1]) {
    __int32 v111 = v112.i32[0];
  }
  if (v111 == 2)
  {
    uint64_t v171 = a14;
    uint64_t v201 = _HashNode.mapValuesToVoid(copy:extraBytes:)(1LL, 0LL, v192, (uint64_t)v193, a11, v45, a14);
    uint64_t v202 = v113;
    uint64_t v196 = v54;
    uint64_t v114 = v182;
    uint64_t v115 = *((int *)v182 + 12);
    uint64_t v116 = v175;
    uint64_t v117 = v175 + v115;
    uint64_t v195 = (void *)(v175 + v115);
    uint64_t v118 = v173 + *(void *)(v178 + 72) - *(void *)(v178 + 72) * v110 + v115;
    ((void (*)(uint64_t))v183)(v175);
    uint64_t v119 = v203;
    uint64_t v120 = *(v203 - 1);
    (*(void (**)(uint64_t, uint64_t, void *))(v120 + 16))(v117, v118, v203);
    uint64_t v121 = v176;
    uint64_t v122 = v176 + *((int *)v114 + 12);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32))(v176, v116, a11);
    (*(void (**)(uint64_t, void *, void *))(v120 + 32))(v122, v195, v119);
    ((void (*)(char *, uint64_t, uint64_t))v183)(v37, v121, a11);
    (*(void (**)(uint64_t, char *))(v178 + 8))(v121, v114);
    uint64_t v123 = MEMORY[0x18961AFC8] + 8LL;
    uint64_t v124 = v171;
    int8x8_t v125 = (void *)type metadata accessor for _HashNode(0LL, a11, MEMORY[0x18961AFC8] + 8LL, v171);
    _HashNode.replaceItem(at:_:with:)(v197, v174, (uint64_t)v37, v126, v125);
    uint64_t v127 = v202;
    uint64_t v128 = (uint64_t)v187;
    void *v187 = v201;
    *(void *)(v128 + 8) = v127;
    swift_storeEnumTagMultiPayload();
    return _HashNode.Builder.init(_:_:)(v198, v128, a11, v123, v124, v191);
  }

  unsigned int v154 = v172 + ~(_DWORD)v199;
  uint64_t v139 = a14;
  uint64_t v201 = _HashNode.mapValuesToVoid(copy:extraBytes:)(1LL, 0LL, v190, v189, a11, (uint64_t)v203, a14);
  uint64_t v202 = v155;
  uint64_t v156 = MEMORY[0x18961AFC8] + 8LL;
  uint64_t v203 = (void *)type metadata accessor for _HashNode(0LL, a11, MEMORY[0x18961AFC8] + 8LL, a14);
  _HashNode.removeItem(at:_:)((uint64_t)v37, v157, 255, v154, v203);
  ((void (*)(char *, uint64_t))v179)(v37, a11);
  uint64_t v159 = v192;
  uint64_t v158 = (uint64_t)v193;
  uint64_t result = _HashNode.hasSingletonItem.getter(v192, (uint64_t)v193, a11, v45, a14);
  if ((result & 1) != 0)
  {
    uint64_t v160 = v202;
    uint64_t v161 = v187;
    void *v187 = v201;
    v161[1] = v160;
    swift_storeEnumTagMultiPayload();
    uint8x8_t v149 = v191;
    char v150 = v198;
    uint64_t v151 = (uint64_t)v161;
    uint64_t v152 = a11;
    uint64_t v153 = v156;
    return _HashNode.Builder.init(_:_:)(v150, v151, v152, v153, v139, v149);
  }

  uint64_t v162 = *(void *)(v188 + 72);
  BOOL v83 = __OFSUB__(16LL, v162);
  uint64_t v163 = 16 - v162;
  if (!v83)
  {
    uint64_t v199 = _HashNode.mapValuesToVoid(copy:extraBytes:)(1LL, v163 & ~(v163 >> 63), v159, v158, a11, v45, a14);
    uint64_t v200 = v164;
    char v165 = v197;
    v166 = v203;
    _HashNode.removeItem(at:_:)((uint64_t)v37, v164, v197, v174, v203);
    ((void (*)(char *, uint64_t))v179)(v37, a11);
    sub_188DF6B94(v201, v202, v165, v166);
    swift_release();
    uint64_t v167 = v200;
    int v168 = v187;
    void *v187 = v199;
    v168[1] = v167;
    swift_storeEnumTagMultiPayload();
    uint64_t v68 = MEMORY[0x18961AFC8] + 8LL;
    uint64_t v64 = v191;
    char v65 = v198;
    uint64_t v66 = (uint64_t)v168;
    uint64_t v67 = a11;
    return _HashNode.Builder.init(_:_:)(v65, v66, v67, v68, a14, v64);
  }

LABEL_26:
  __break(1u);
  return result;
}

  swift_unknownObjectRetain();
  uint64_t result = sub_188D36DF0();
  if (result > a3)
  {
    if (v8 && ((a3 >> ((4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C)) & 0xF) + 1 < *(unsigned __int16 *)(v8 + 16))
    {
      sub_188D087F8(v6);
      v7 &= 0xFFFFFFFFFFFFFF00LL;
    }

    else
    {
      uint64_t v36 = v33;
      uint64_t v37 = v34;
      unint64_t v38 = v35;
      swift_unknownObjectRetain();
      uint64_t v24 = sub_188D7F780((uint64_t)&v27);
      sub_188D087F8(v6);
      if ((v24 & 1) == 0) {
        sub_188D36DF0();
      }
      sub_188D087F8(v6);
      v7 &= 0xFFFFFFFFFFFFFF00LL;
    }

    return v7;
  }

  if (v7 >= a1 && v7 < result >> 14) {
    return 0LL;
  }
  return result;
}

      __break(1u);
      goto LABEL_27;
    }

    return 0LL;
  }

  v4 = *(void *)v2;
  unint64_t v6 = *(void *)(v2 + 8);
  if ((v6 & 0x1000000000000000LL) == 0)
  {
    if (v8 < 0)
    {
      __break(1u);
    }

    else
    {
      uint64_t v9 = HIBYTE(v6) & 0xF;
      if ((v6 & 0x2000000000000000LL) == 0) {
        uint64_t v9 = v4 & 0xFFFFFFFFFFFFLL;
      }
      if (v9 >= v8)
      {
        uint64_t v10 = (v8 << 16) | 4;
        goto LABEL_13;
      }
    }

    __break(1u);
    goto LABEL_30;
  }

      int8x8_t v48 = a1 >> 16;
      goto LABEL_41;
    }

      if ((a4 & 0x1000000000000000LL) == 0) {
        goto LABEL_27;
      }
      goto LABEL_8;
    }

    if ((v11 & 0xC) == v9)
    {
      uint64_t result = sub_188D37044(v11, a3, a4);
      size_t v11 = result;
    }

    if (v35 <= v11 >> 16) {
      goto LABEL_88;
    }
    if ((v11 & 1) != 0) {
      goto LABEL_26;
    }
    size_t v11 = v11 & 0xC | sub_188D36F34(v11, a3, a4) & 0xFFFFFFFFFFFFFFF3LL | 1;
    if ((a4 & 0x1000000000000000LL) == 0)
    {
LABEL_27:
      uint64_t v13 = v11 >> 16;
      if ((a4 & 0x2000000000000000LL) != 0)
      {
        uint64_t v36 = a3;
        uint64_t v37 = v33;
        uint64_t v15 = *((unsigned __int8 *)&v36 + v13);
      }

      else
      {
        uint64_t v14 = v32;
        if ((a3 & 0x1000000000000000LL) == 0) {
          uint64_t v14 = sub_188DF8684();
        }
        uint64_t v15 = *(unsigned __int8 *)(v14 + v13);
      }

      uint64_t v16 = (char)v15;
      uint64_t v17 = __clz(v15 ^ 0xFF) - 24;
      if (v16 >= 0) {
        LOBYTE(v17) = 1;
      }
      size_t v11 = ((v13 + v17) << 16) | 5;
      goto LABEL_9;
    }

  __break(1u);
  return result;
}

uint64_t sub_188CFA4C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v7 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v7);
  size_t v11 = (char *)&v14 - v10;
  uint64_t v12 = *(void *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v14 - v10, a2, a3);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v11, a3);
  return sub_188D8A1FC((uint64_t)v9, a1, TupleTypeMetadata2);
}

uint64_t sub_188CFA5B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](a1);
  unint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v4 + 16))(v6);
  char v7 = sub_188DF7D90();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a3);
  return v7 & 1;
}

uint64_t sub_188CFA658(uint64_t a1)
{
  return sub_188CFA4C4(a1, *(void *)(v1 + 48), *(void *)(v1 + 16));
}

uint64_t sub_188CFA668(uint64_t a1)
{
  return sub_188CFA680(a1) & 1;
}

uint64_t sub_188CFA680(uint64_t a1)
{
  return sub_188CFA5B0(a1, *(void *)(v1 + 48), *(void *)(v1 + 16)) & 1;
}

uint64_t sub_188CFA6A4(uint64_t a1)
{
  return sub_188CF8FC8(a1, *(void *)(v1 + 48), *(void *)(v1 + 16));
}

void OrderedDictionary.subscript.getter()
{
}

void OrderedDictionary.modifyValue<A>(forKey:default:_:)()
{
}

void OrderedDictionary.modifyValue<A>(forKey:insertingDefault:at:_:)()
{
}

uint64_t Deque.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a1;
  uint64_t v4 = type metadata accessor for Deque(0LL, a2, a3, a4);
  MEMORY[0x1895D7620](&protocol conformance descriptor for Deque<A>, v4);
  return _arrayDescription<A>(for:debug:typeName:)((uint64_t)&v6, 0, 0LL, 0LL, v4);
}

uint64_t sub_188CFA7E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Deque.description.getter(*v4, *(void *)(a1 + 16), a3, a4);
}

uint64_t Deque.debugDescription.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a1;
  sub_188DF8B94();
  sub_188DF7EE0();
  swift_bridgeObjectRelease();
  sub_188DF7EE0();
  uint64_t v5 = type metadata accessor for Deque(0LL, a2, v3, v4);
  MEMORY[0x1895D7620](&protocol conformance descriptor for Deque<A>, v5);
  uint64_t v6 = _arrayDescription<A>(for:debug:typeName:)((uint64_t)&v8, 1, 0x3C6575716544LL, 0xE600000000000000LL, v5);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_188CFA8C4(uint64_t a1)
{
  return Deque.debugDescription.getter(*v1, *(void *)(a1 + 16));
}

uint64_t static TreeSet.== infix(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return TreeSet.isEqualSet(to:)(a4, a5, a6, a1, a2, a3, a7, a8);
}

uint64_t sub_188CFA8FC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return TreeSet.isEqualSet(to:)(*a2, a2[1], a2[2], *a1, a1[1], a1[2], *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t TreeSet.init(arrayLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1;
  uint64_t v5 = sub_188DF8120();
  uint64_t v6 = MEMORY[0x1895D7620](MEMORY[0x189618470], v5);
  return TreeSet.init<A>(_:)((uint64_t)&v8, a2, v5, a3, v6);
}

uint64_t sub_188CFA984@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = TreeSet.init(arrayLiteral:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
  *a3 = result;
  a3[1] = v5;
  a3[2] = v6;
  return result;
}

uint64_t _RopePath._value.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_RopePath._value.modify())()
{
  return nullsub_1;
}

uint64_t static _RopePath._pathBitWidth.getter()
{
  return 56LL;
}

uint64_t _RopePath.init(height:)(uint64_t result)
{
  return result;
}

BOOL static _RopePath.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

BOOL sub_188CFA9F4(uint64_t *a1, uint64_t *a2)
{
  return static _RopePath.== infix(_:_:)(*a1, *a2);
}

uint64_t _RopePath.hash(into:)()
{
  return sub_188DF8A80();
}

uint64_t _RopePath.hashValue.getter()
{
  return sub_188DF8A98();
}

uint64_t sub_188CFAA68()
{
  return _RopePath.hashValue.getter();
}

uint64_t sub_188CFAA70()
{
  return _RopePath.hash(into:)();
}

uint64_t sub_188CFAA78()
{
  return sub_188DF8A98();
}

BOOL static _RopePath.< infix(_:_:)(unint64_t a1, unint64_t a2)
{
  return a1 < a2;
}

BOOL sub_188CFAAC0(unint64_t *a1, unint64_t *a2)
{
  return static _RopePath.< infix(_:_:)(*a1, *a2);
}

uint64_t _RopePath.description.getter(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = a1;
  char v6 = 0;
  while ((_BYTE)a1)
  {
    int v7 = a1 - 1;
LABEL_6:
    int v8 = a1;
    _RopePath.subscript.getter(a1, v5, a2, a3);
    sub_188DF88D0();
    sub_188DF7EE0();
    swift_bridgeObjectRelease();
    LODWORD(a1) = v7;
    if (v8)
    {
      sub_188DF7EE0();
      LODWORD(a1) = v7;
    }
  }

  if ((v6 & 1) == 0)
  {
    int v7 = 0;
    char v6 = 1;
    goto LABEL_6;
  }

  sub_188DF7EE0();
  return 60LL;
}

uint64_t _RopePath.subscript.getter(unsigned __int8 a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1;
  int v8 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 24);
  uint64_t result = v8(a3, a4);
  uint64_t v10 = v7 * result;
  if ((unsigned __int128)(v7 * (__int128)result) >> 64 == (v7 * result) >> 63)
  {
    if (!__OFADD__(v10, 8LL)) {
      return (a2 >> (v10 + 8)) & ~(-1LL << v8(a3, a4));
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_188CFAC58(uint64_t a1)
{
  return _RopePath.description.getter(*v1, *(void *)(a1 + 16), *(void *)(a1 + 24));
}

Swift::Void __swiftcall _RopePath.popRoot()()
{
  else {
    unint64_t *v0 = *v0 & 0xFFFFFFFFFFFFFF00LL | (*v0 - 1);
  }
}

uint64_t _RopePath.subscript.setter(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = a2;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 24);
  uint64_t result = v9(v7, v8);
  uint64_t v11 = v6 * result;
  if ((unsigned __int128)(v6 * (__int128)result) >> 64 != (v6 * result) >> 63)
  {
    __break(1u);
    goto LABEL_6;
  }

  char v12 = v11 + 8;
  if (__OFADD__(v11, 8LL))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  uint64_t result = v9(v7, v8);
  if ((a1 & 0x8000000000000000LL) == 0)
  {
    *uint64_t v4 = *v4 & ((((-1LL << result) + 1) << v12) - 1) | (a1 << v12);
    return result;
  }

LABEL_7:
  __break(1u);
  return result;
}

  uint64_t v11 = sub_188D0C5F4(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  uint64_t v20 = HIDWORD(a7);
  if (BYTE4(a4) == BYTE4(a7) && a2 == a5)
  {
    if (a3 == a6)
    {
      else {
        return (a7 - a4);
      }
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    uint64_t v18 = HIDWORD(a4);
    if (BYTE4(a4) >= BYTE4(a7))
    {
      if (BYTE4(a7)) {
        goto LABEL_30;
      }
      goto LABEL_32;
    }

    if (!BYTE4(a4)) {
      goto LABEL_56;
    }
    if ((a4 & 0xC000000000LL) == 0) {
      goto LABEL_55;
    }
    if (a2 == a5)
    {
LABEL_56:
      sub_188D71528((unsigned int *)(a3 + 16), a3 + 32, a4, v18, a5, a6, a7 & 0x1FFFFFFFFFFLL, v32);
      return v32[0];
    }

    else
    {
      if ((a7 & 0xC000000000LL) != 0) {
        goto LABEL_43;
      }
LABEL_42:
      while (a2 << -(char)v20 == a5 << -(char)v20)
      {
LABEL_32:
        sub_188D71528((unsigned int *)(a6 + 16), a6 + 32, a7, v20, a2, a3, a4 & 0x1FFFFFFFFFFLL, v32);
        uint64_t v24 = v32[0];
        uint64_t result = -v32[0];
        if (!__OFSUB__(0LL, v32[0])) {
          return result;
        }
        __break(1u);
LABEL_35:
        v23.i32[0] = v24;
        uint64_t v27 = (uint8x8_t)vcnt_s8(v23);
        v27.i16[0] = vaddlv_u8(v27);
        if (v27.i32[0] != (_DWORD)a7)
        {
LABEL_36:
          if (BYTE4(a7) <= v16)
          {
            uint64_t v17 = a7;
          }

          else
          {
            sub_188D70FD4( (unsigned int *)(a8 + 16),  a8 + 32,  (a5 >> v16) & 0x1F,  v16,  a5,  a6,  a7 & 0x1FFFFFFFFFFLL,  v32);
            uint64_t v17 = v32[0];
          }
        }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    uint64_t v15 = v8;
    uint64_t v16 = sub_188DF8120();
    swift_bridgeObjectRetain_n();
    MEMORY[0x1895D7620](MEMORY[0x189618470], v16);
    uint64_t v17 = sub_188DF812C();
    v31[0] = v17;
    uint64_t v18 = sub_188D10D98();
    uint64_t v19 = sub_188DF8738();
    uint64_t v20 = MEMORY[0x1895D7620](MEMORY[0x189619588], v19);
    uint64_t v21 = static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)( (uint64_t)v31,  0LL,  1,  v18,  v19,  v20,  v9);
    uint64_t v22 = _s19CollectionsInternal4HeapV5countSivg_0();
    uint64_t v23 = 0LL;
    if (v22 >= 16)
    {
      swift_retain();
      uint64_t v23 = v21;
    }

    uint64_t v24 = OrderedSet.init(_uniqueElements:_:)(v17, v23);
    uint64_t v26 = v25;
    swift_bridgeObjectRelease();
    swift_release();
    v31[0] = v4;
    uint64_t v27 = sub_188DF8738();
    swift_retain();
    swift_retain();
    swift_retain();
    MEMORY[0x1895D7620](MEMORY[0x189619578], v27);
    uint64_t v28 = sub_188DF812C();
    uint64_t v29 = _s19CollectionsInternal4HeapV5countSivg_0();
    uint64_t v30 = _s19CollectionsInternal4HeapV5countSivg_0();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    if (v29 != v30)
    {
LABEL_13:
      __break(1u);
      return result;
    }

    *uint64_t v15 = v24;
    v15[1] = v26;
    v15[2] = v28;
  }

  return result;
}

  if (!a3)
  {
LABEL_13:
    uint64_t v27 = OrderedSet.init(minimumCapacity:persistent:)(a5, 0, a8, a9);
    swift_release();
    swift_release();
    return v27;
  }

  if (a3 != _s19CollectionsInternal4HeapV5countSivg_0())
  {
    uint64_t result = a3 + a5;
    if (!__OFADD__(a3, a5))
    {
      v35[1] = a6;
      uint64_t result = OrderedSet.init(minimumCapacity:persistent:)(result, 0, a8, a9);
      uint64_t v36 = result;
      uint64_t v37 = v28;
      if (a2 < 1) {
        uint64_t v29 = 0LL;
      }
      else {
        uint64_t v29 = (uint64_t)*a1;
      }
      uint64_t v30 = 0LL;
      while (1)
      {
        if (v29)
        {
          if (v30 << 6 < 0) {
            goto LABEL_38;
          }
          v29 &= v29 - 1;
        }

        else
        {
          uint64_t v33 = v30 + 1;
          if (__OFADD__(v30, 1LL)) {
            goto LABEL_39;
          }
          if (v33 >= a2)
          {
LABEL_33:
            swift_release();
            swift_release();
            return v36;
          }

          uint64_t v34 = a1[v33];
          if (!*(void *)&v34)
          {
            while (1)
            {
              uint64_t v30 = v33 + 1;
              if (__OFADD__(v33, 1LL)) {
                goto LABEL_37;
              }
              if (v30 >= a2) {
                goto LABEL_33;
              }
              uint64_t v34 = a1[v30];
              ++v33;
              if (v34) {
                goto LABEL_20;
              }
            }
          }

          ++v30;
LABEL_20:
          if (v30 << 6 < 0) {
            goto LABEL_40;
          }
          uint64_t v29 = (*(void *)&v34 - 1LL) & *(void *)&v34;
        }

        sub_188DF8774();
        uint64_t v32 = type metadata accessor for OrderedSet(0LL, a8, a9, v31);
        OrderedSet._appendNew(_:)((uint64_t)v19, v32);
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, a8);
      }
    }

    goto LABEL_42;
  }

  uint64_t v25 = OrderedSet._capacity.getter(a6);
  uint64_t result = _s19CollectionsInternal4HeapV5countSivg_0();
  if (__OFSUB__(v25, result))
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }

  if (v25 - result >= a5) {
    return a6;
  }
  uint64_t v36 = a6;
  uint64_t v37 = a7;
  if (!__OFADD__(a3, a5))
  {
    type metadata accessor for OrderedSet(0LL, a8, a9, v26);
    OrderedSet.reserveCapacity(_:)(a3 + a5);
    return v36;
  }

  if (!a2) {
    return v6;
  }
  if (a2 >= 0) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = -a2;
  }
  uint64_t v31 = v10;
  if (a2 < 1)
  {
    if (result < a3) {
      return _UnsafeBitSet.index(_:offsetBy:)(result, a2, a4, a5);
    }
    uint64_t v31 = v10 - 1;
    uint64_t v21 = result >> 6;
    if (result < 0x40 || (result & 0x3F) != 0)
    {
      if (v21 >= a5)
      {
LABEL_40:
        uint64_t v27 = (v21 << 6) - 64;
        uint64_t v28 = a4 - 8;
        while (1)
        {
          uint64_t v29 = sub_188DAA7C4(&v31, *(void *)(v28 + 8 * v21));
          if ((v30 & 1) == 0) {
            break;
          }
          --v21;
          v27 -= 64LL;
        }

        uint64_t v26 = v29 + v27;
LABEL_51:
        if (v26 >= a3) {
          return v26;
        }
        else {
          return 0LL;
        }
      }

      uint64_t v23 = ~(-1LL << (result & 0x3F));
      uint64_t v22 = result >> 6;
    }

    else
    {
      uint64_t v22 = v21 - 1;
      if (v21 > a5)
      {
LABEL_39:
        uint64_t v21 = v22;
        goto LABEL_40;
      }

      uint64_t v23 = -1LL;
    }

    uint64_t v24 = sub_188DAA7C4(&v31, *(void *)(a4 + 8 * v22) & v23);
    if ((v25 & 1) == 0)
    {
      uint64_t v26 = v24 + (v22 << 6);
      goto LABEL_51;
    }

    goto LABEL_39;
  }

  if (a3 < result) {
    return _UnsafeBitSet.index(_:offsetBy:)(result, a2, a4, a5);
  }
  uint64_t v11 = result >> 6;
  if ((uint64_t)(result >> 6) < a5)
  {
    uint64_t result = sub_188DAA74C(&v31, *(void *)(a4 + 8 * v11) & (-1LL << result));
    if ((v12 & 1) == 0)
    {
      uint64_t v13 = result + (v6 & 0xFFFFFFFFFFFFFFC0LL);
      goto LABEL_47;
    }
  }

  uint64_t v14 = a5 - 1;
  if (__OFSUB__(a5, 1LL)) {
    goto LABEL_60;
  }
  uint64_t v15 = v14 - v11;
  if (v14 <= v11)
  {
LABEL_25:
    if (v31) {
      uint64_t v20 = 0;
    }
    else {
      uint64_t v20 = v5 == a3;
    }
    if (v20) {
      return v5;
    }
    else {
      return 0LL;
    }
  }

  uint64_t v16 = ~v11 << 6;
  uint64_t v17 = (uint64_t *)(a4 + 8 * v11 + 8);
  while (1)
  {
    uint64_t v18 = *v17++;
    uint64_t result = sub_188DAA74C(&v31, v18);
    if ((v19 & 1) == 0) {
      break;
    }
    v16 -= 64LL;
    if (!--v15) {
      goto LABEL_25;
    }
  }

  if (v16 <= 0)
  {
    uint64_t v13 = result - v16;
LABEL_47:
    if (v13 <= a3) {
      return v13;
    }
    else {
      return 0LL;
    }
  }

    unint64_t v5 = a3;
    goto LABEL_9;
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  uint64_t v16 = *(unsigned __int16 *)(*v3 + 16LL);
  if (v6 >= v16
    || (uint64_t v17 = *v3 + 40 * v6,
        uint64_t v19 = *(void *)(v17 + 24),
        uint64_t v18 = (uint64_t *)(v17 + 24),
        *(unsigned __int16 *)(v19 + 16) + (unint64_t)*(unsigned __int16 *)(*v8 + 16LL) > 0xF))
  {
    if ((_DWORD)v16 == 15)
    {
      sub_188DEE920(7LL, (uint64_t)&v40);
      if (v6 >= 8)
      {
        sub_188DF3BB4((uint64_t)v8, v6 - *(unsigned __int16 *)(*v3 + 16LL));
        uint64_t result = sub_188D087F8((uint64_t)v8);
        uint64_t v20 = v40;
        uint64_t v21 = v41;
        uint64_t v22 = v42;
        uint64_t v23 = v43;
        uint64_t v24 = v44;
      }

      else
      {
        uint64_t v20 = v40;
        uint64_t v21 = v41;
        uint64_t v22 = v42;
        uint64_t v23 = v43;
        uint64_t v24 = v44;
        sub_188DF3BB4((uint64_t)v8, v6);
        uint64_t result = sub_188D087F8((uint64_t)v8);
      }

      goto LABEL_20;
    }

    sub_188DF3BB4((uint64_t)v8, v6);
    uint64_t result = sub_188D087F8((uint64_t)v8);
LABEL_18:
    uint64_t v20 = 0LL;
    uint64_t v21 = 0LL;
    uint64_t v22 = 0LL;
    uint64_t v23 = 0LL;
    uint64_t v24 = 0LL;
LABEL_20:
    *a3 = v20;
    a3[1] = v21;
    a3[2] = v22;
    a3[3] = v23;
    a3[4] = v24;
    return result;
  }

  uint64_t v26 = v8[1];
  uint64_t v25 = v8[2];
  uint64_t v28 = v8[3];
  uint64_t v27 = v8[4];
  swift_unknownObjectRetain();
  sub_188DEFD8C((uint64_t *)v37, v18, 0LL);
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v29 = v3[1];
  uint64_t v15 = __OFADD__(v29, v26);
  uint64_t v30 = v29 + v26;
  if (v15) {
    goto LABEL_23;
  }
  v3[1] = v30;
  uint64_t v31 = v3[2];
  uint64_t v15 = __OFADD__(v31, v25);
  uint64_t v32 = v31 + v25;
  if (v15)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  v3[2] = v32;
  uint64_t v33 = v3[3];
  uint64_t v15 = __OFADD__(v33, v28);
  uint64_t v34 = v33 + v28;
  if (v15)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  v3[3] = v34;
  int8x8_t v35 = v3[4];
  uint64_t v15 = __OFADD__(v35, v27);
  uint64_t v36 = v35 + v27;
  if (!v15)
  {
    v3[4] = v36;
    uint64_t result = swift_unknownObjectRelease();
    goto LABEL_18;
  }

uint64_t (*_RopePath.subscript.modify(uint64_t a1, unsigned __int8 a2, uint64_t a3))(uint64_t a1)
{
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = a2;
  *(void *)a1 = _RopePath.subscript.getter(a2, *v3, *(void *)(a3 + 16), *(void *)(a3 + 24));
  return sub_188CFAD7C;
}

uint64_t sub_188CFAD7C(uint64_t a1)
{
  return _RopePath.subscript.setter(*(void *)a1, *(_BYTE *)(a1 + 24), *(void *)(a1 + 8));
}

Swift::Bool __swiftcall _RopePath.isEmpty(below:)(Swift::UInt8 below)
{
  uint64_t v3 = v1;
  uint64_t v4 = below;
  uint64_t v5 = (*(uint64_t (**)())(v2 + 24))();
  else {
    __break(1u);
  }
  return v5;
}

Swift::Void __swiftcall _RopePath.clear(below:)(Swift::UInt8 below)
{
  uint64_t v3 = below;
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(v1 + 24) + 24LL))();
  else {
    __break(1u);
  }
}

void sub_188CFAE70()
{
}

uint64_t sub_188CFAE80()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for _RopePath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _RopePath);
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x1895D75B4](a1, v6, a5);
}

uint64_t static _HashNode.spaceForNewItem.getter()
{
  return *(void *)(*(void *)(swift_getTupleTypeMetadata2() - 8) + 72LL);
}

uint64_t static _HashNode.spaceForSpawningChild.getter()
{
  uint64_t result = swift_getTupleTypeMetadata2();
  uint64_t v1 = *(void *)(*(void *)(result - 8) + 72LL);
  BOOL v2 = __OFSUB__(16LL, v1);
  uint64_t v3 = 16 - v1;
  if (!v2) {
    return v3 & ~(v3 >> 63);
  }
  __break(1u);
  return result;
}

uint64_t static _HashNode.spaceForNewChild.getter()
{
  return 16LL;
}

uint64_t sub_188CFAF44()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  _emptySingleton = result;
  return result;
}

uint64_t *_emptySingleton.unsafeMutableAddressor()
{
  if (qword_18C749D80 != -1) {
    swift_once();
  }
  return &_emptySingleton;
}

void *_HashNode.Storage.deinit()
{
  uint64_t v1 = (uint64_t *)(*v0 + class metadata base offset for _HashNode.Storage);
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = nullsub_1(v0 + 2, v0 + 4, *v1, v3, v4);
  sub_188CFB028(v5, v6, v2, v3, v4);
  return v0;
}

uint64_t sub_188CFB028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = _HashNode.UnsafeHandle.children.getter(a1, a2, a3, a4, a5);
  uint64_t v10 = v9;
  uint64_t v11 = type metadata accessor for _HashNode(0LL, a3, a4, a5);
  sub_188D1BDE0(v8, v10, v11);
  uint64_t v12 = _HashNode.UnsafeHandle.reverseItems.getter();
  uint64_t v14 = v13;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return sub_188D1BDE0(v12, v14, TupleTypeMetadata2);
}

uint64_t _HashNode.Storage.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t static _HashNode.Storage.allocate(byteCapacity:)(uint64_t a1)
{
  uint64_t result = swift_getTupleTypeMetadata2();
  uint64_t v3 = *(void *)(result - 8);
  uint64_t v4 = 16LL;
  uint64_t v5 = (a1 + v4 - 1) / v4;
  BOOL v6 = v5 < 1;
  unint64_t v7 = v5 - 1;
  if (v6) {
    uint64_t v8 = 0LL;
  }
  else {
    uint64_t v8 = 1LL << -(char)__clz(v7);
  }
  if ((unsigned __int128)(v4 * (__int128)v8) >> 64 != (v4 * v8) >> 63)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }

  uint64_t v9 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = (_DWORD *)swift_allocObject();
  int64_t v11 = _swift_stdlib_malloc_size(v10);
  int v12 = v11 - 32;
  if (v11 < 32) {
    int v12 = v11 - 17;
  }
  unsigned int v13 = v12 & 0xFFFFFFF0;
  v10[4] = 0;
  v10[5] = 0;
  v10[6] = v13;
  v10[7] = v13;
  sub_188CFB254((uint64_t)(v10 + 4), (uint64_t)(v10 + 8));
  return (uint64_t)v10;
}

uint64_t sub_188CFB254(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + *(unsigned int *)(a1 + 8);
  uint64_t result = swift_getTupleTypeMetadata2();
  uint64_t v6 = ((~*(_BYTE *)(*(void *)(result - 8) + 80LL) | 0xFFFFFFFFFFFFFF00LL) & v4) - a2;
  if (v6 < 0)
  {
    __break(1u);
  }

  else if (!HIDWORD(v6))
  {
    *(_DWORD *)(a1 + 8) = v6;
    *(_DWORD *)(a1 + 12) = v6;
    return result;
  }

  __break(1u);
  return result;
}

uint64_t static _HashNode.spaceForInlinedChild.getter()
{
  uint64_t result = swift_getTupleTypeMetadata2();
  uint64_t v1 = *(void *)(*(void *)(result - 8) + 72LL);
  BOOL v2 = __OFSUB__(v1, 16LL);
  uint64_t v3 = v1 - 16;
  if (!v2) {
    return v3 & ~(v3 >> 63);
  }
  __break(1u);
  return result;
}

Swift::Bool __swiftcall _HashNode.isUnique()()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

Swift::Bool __swiftcall _HashNode.hasFreeSpace(_:)(Swift::Int a1)
{
  uint64_t v2 = v1;
  swift_beginAccess();
  return *(unsigned int *)(v2 + 28) >= a1;
}

Swift::Void __swiftcall _HashNode.ensureUnique(isUnique:)(Swift::Bool isUnique)
{
  if (!isUnique)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *v2;
    uint64_t v5 = v2[1];
    uint64_t v6 = sub_188D10D98();
    uint64_t v7 = _HashNode.copy(withFreeSpace:)(v6, v4, v5, v3[2], v3[3], v3[4]);
    uint64_t v9 = v8;
    swift_release();
    *uint64_t v2 = v7;
    v2[1] = v9;
  }

uint64_t _HashNode.copy(withFreeSpace:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (_HashNode.isCollisionNode.getter(a2, a3, a4, a5, a6))
  {
    uint64_t v12 = nullsub_1(a2 + 16, a2 + 32, a4, a5, a6);
    sub_188CFBB10(v12, v13, a2, a3, a4, a5, a6, v20);
    return v20[0];
  }

  else
  {
    uint64_t v15 = (__int32 *)nullsub_1(a2 + 16, a2 + 32, a4, a5, a6);
    __int32 v17 = *v15;
    int v16 = v15[1];
    v20[2] = a4;
    v20[3] = a5;
    v20[4] = a6;
    v20[5] = (uint64_t)v15;
    v20[6] = v18;
    return static _HashNode.allocate<A>(itemMap:childMap:count:extraBytes:initializingWith:)( v19,  (uint64_t)v15,  v17,  v16,  a3,  a1,  sub_188CFBFAC,  (uint64_t)v20,  a4,  a5,  MEMORY[0x18961AFC8] + 8LL,  a6);
  }

Swift::Void __swiftcall _HashNode.ensureUnique(isUnique:withFreeSpace:)(Swift::Bool isUnique, Swift::Int withFreeSpace)
{
  uint64_t v5 = *v3;
  if (isUnique)
  {
    swift_beginAccess();
  }

  else
  {
    uint64_t v6 = _HashNode.copy(withFreeSpace:)(withFreeSpace, *v3, v3[1], v2[2], v2[3], v2[4]);
    uint64_t v8 = v7;
    swift_release();
    *uint64_t v3 = v6;
    v3[1] = v8;
  }

Swift::Void __swiftcall _HashNode.move(withFreeSpace:)(Swift::Int withFreeSpace)
{
  uint64_t v4 = *v2;
  uint64_t v5 = v2[1];
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  BOOL v9 = _HashNode.isCollisionNode.getter(*v2, v5, v6, v7, v8);
  uint64_t v10 = (__int32 *)nullsub_1(v4 + 16, v4 + 32, v6, v7, v8);
  if (v9)
  {
    uint64_t v13 = *v11;
    uint64_t v21 = v6;
    uint64_t v22 = v7;
    uint64_t v23 = v8;
    uint64_t v24 = v10;
    uint64_t v25 = v11;
    uint64_t v14 = static _HashNode.allocateCollision<A>(count:_:extraBytes:initializingWith:)( (uint64_t)v10,  v5,  v13,  0LL,  (uint64_t (*)(uint64_t))sub_188CFBF74,  (uint64_t)v20,  v6,  v7,  MEMORY[0x18961AFC8] + 8LL,  v8);
  }

  else
  {
    __int32 v17 = *v10;
    int v16 = v10[1];
    uint64_t v21 = v6;
    uint64_t v22 = v7;
    uint64_t v23 = v8;
    uint64_t v24 = v10;
    uint64_t v25 = v11;
    uint64_t v14 = static _HashNode.allocate<A>(itemMap:childMap:count:extraBytes:initializingWith:)( v12,  (uint64_t)v10,  v17,  v16,  v5,  withFreeSpace,  sub_188CFBF80,  (uint64_t)v20,  v6,  v7,  MEMORY[0x18961AFC8] + 8LL,  v8);
  }

  uint64_t v18 = v14;
  uint64_t v19 = v15;
  swift_release();
  *uint64_t v2 = v18;
  v2[1] = v19;
}

uint64_t static _HashNode.allocate<A>(itemMap:childMap:count:extraBytes:initializingWith:)( int8x8_t a1, uint64_t a2, __int32 a3, int a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  a1.i32[0] = a3;
  uint8x8_t v18 = (uint8x8_t)vcnt_s8(a1);
  v18.i16[0] = vaddlv_u8(v18);
  uint64_t v19 = v18.u32[0];
  uint64_t result = swift_getTupleTypeMetadata2();
  uint64_t v22 = *(void *)(*(void *)(result - 8) + 72LL);
  uint64_t v23 = v19 * v22;
  if ((unsigned __int128)(v19 * (__int128)v22) >> 64 == (v19 * v22) >> 63)
  {
    v21.i32[0] = a4;
    uint8x8_t v24 = (uint8x8_t)vcnt_s8(v21);
    v24.i16[0] = vaddlv_u8(v24);
    uint64_t v34 = v24.u32[0];
    uint64_t v32 = a7;
    uint64_t v33 = v19 * v22;
    uint64_t v25 = v23 + 16LL * v24.u32[0];
    int v31 = v23 + 16 * v24.i32[0];
    type metadata accessor for _HashNode.Storage(0LL, a9, a10, a12);
    static _HashNode.Storage.allocate(byteCapacity:)(v25 + a6);
    int v30 = a4;
    uint64_t v26 = _HashNode.init(storage:count:)();
    LODWORD(v25) = a3;
    uint64_t v27 = (_DWORD *)nullsub_1(v26 + 16, v26 + 32, a9, a10, a12);
    uint64_t v29 = v28;
    swift_retain();
    sub_188CFB81C(v27, v29, v25, v30, v31, v34, v33, v19, v32, a8, a9, a10, a11, a12);
    swift_release();
    return v26;
  }

  else
  {
    __break(1u);
  }

  return result;
}

_DWORD *sub_188CFB81C( _DWORD *result, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *uint64_t result = a3;
  result[1] = a4;
  uint64_t v14 = result[2];
  result[3] -= a5;
  if (__OFSUB__(v14, a7))
  {
    __break(1u);
  }

  else
  {
    type metadata accessor for _HashNode(0LL, a11, a12, a14);
    uint64_t v15 = sub_188DF83A8();
    uint64_t v17 = v16;
    swift_getTupleTypeMetadata2();
    uint64_t v18 = sub_188DF83A8();
    return (_DWORD *)a9(v15, v17, v18, v19);
  }

  return result;
}

uint64_t static _HashNode.allocateCollision<A>(count:_:extraBytes:initializingWith:)( uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = swift_getTupleTypeMetadata2();
  uint64_t v17 = *(void *)(*(void *)(result - 8) + 72LL);
  int64_t v18 = a2 * v17;
  if ((unsigned __int128)(a2 * (__int128)v17) >> 64 == (a2 * v17) >> 63)
  {
    int64_t v19 = v18 + 8;
    int v26 = v18 + 8;
    uint64_t v27 = a2 * v17;
    type metadata accessor for _HashNode.Storage(0LL, a7, a8, a10);
    static _HashNode.Storage.allocate(byteCapacity:)(v19 + a4);
    uint64_t v25 = a3;
    uint64_t v20 = _HashNode.init(storage:count:)();
    int8x8_t v21 = a5;
    uint64_t v22 = (_DWORD *)nullsub_1(v20 + 16, v20 + 32, a7, a8, a10);
    uint8x8_t v24 = v23;
    swift_retain();
    sub_188CFBA68(v22, v24, a2, v26, v25, v27, v21);
    swift_release();
    return v20;
  }

  else
  {
    __break(1u);
  }

  return result;
}

_DWORD *sub_188CFBA68( _DWORD *result, void *a2, unint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t))
{
  if ((a3 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (!HIDWORD(a3))
  {
    *uint64_t result = a3;
    result[1] = a3;
    result[3] -= a4;
    *a2 = a5;
    swift_getTupleTypeMetadata2();
    uint64_t v8 = sub_188DF83A8();
    return (_DWORD *)a7(v8);
  }

  __break(1u);
  return result;
}

uint64_t sub_188CFBB10@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v15 = _HashNode.collisionHash.getter(a3, a4, a5, a6, a7);
  uint64_t v19 = a5;
  uint64_t v20 = a6;
  uint64_t v21 = a7;
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  uint64_t result = static _HashNode.allocateCollision<A>(count:_:extraBytes:initializingWith:)( v15,  a4,  v15,  0LL,  (uint64_t (*)(uint64_t))sub_188CFBF8C,  (uint64_t)v18,  a5,  a6,  MEMORY[0x18961AFC8] + 8LL,  a7);
  *a8 = result;
  a8[1] = v17;
  return result;
}

uint64_t sub_188CFBBC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _HashNode.UnsafeHandle.reverseItems.getter();
  uint64_t v6 = v5;
  swift_getTupleTypeMetadata2();
  return UnsafeMutableBufferPointer.initialize(fromContentsOf:)(v4, v6, a1, a2);
}

uint64_t sub_188CFBC50( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14 = _HashNode.UnsafeHandle.children.getter(a5, a6, a7, a8, a9);
  uint64_t v16 = v15;
  type metadata accessor for _HashNode(0LL, a7, a8, a9);
  UnsafeMutableBufferPointer.initialize(fromContentsOf:)(v14, v16, a1, a2);
  uint64_t v17 = _HashNode.UnsafeHandle.reverseItems.getter();
  uint64_t v19 = v18;
  swift_getTupleTypeMetadata2();
  return UnsafeMutableBufferPointer.initialize(fromContentsOf:)(v17, v19, a3, a4);
}

void sub_188CFBD50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _HashNode.UnsafeHandle.reverseItems.getter();
  uint64_t v6 = v5;
  swift_getTupleTypeMetadata2();
  _sSr19CollectionsInternalE17moveInitializeAll14fromContentsOfySryxG_tF_0(v4, v6, a1, a2);
  _HashNode.UnsafeHandle.clear()();
}

void sub_188CFBE0C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14 = _HashNode.UnsafeHandle.children.getter(a5, a6, a7, a8, a9);
  uint64_t v16 = v15;
  type metadata accessor for _HashNode(0LL, a7, a8, a9);
  _sSr19CollectionsInternalE17moveInitializeAll14fromContentsOfySryxG_tF_0(v14, v16, a1, a2);
  uint64_t v17 = _HashNode.UnsafeHandle.reverseItems.getter();
  uint64_t v19 = v18;
  swift_getTupleTypeMetadata2();
  _sSr19CollectionsInternalE17moveInitializeAll14fromContentsOfySryxG_tF_0(v17, v19, a3, a4);
  _HashNode.UnsafeHandle.clear()();
}

uint64_t type metadata accessor for _HashNode.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _HashNode.Storage);
}

uint64_t sub_188CFBF34()
{
  return swift_initClassMetadata2();
}

uint64_t sub_188CFBF74(uint64_t a1, uint64_t a2)
{
  return sub_188CFBF98( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_188CFBD50);
}

uint64_t sub_188CFBF80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_188CFBFB8( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void))sub_188CFBE0C);
}

uint64_t sub_188CFBF8C(uint64_t a1, uint64_t a2)
{
  return sub_188CFBF98( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_188CFBBC8);
}

uint64_t sub_188CFBF98( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, void, void))
{
  return a3(a1, a2, v3[5], v3[6], v3[2], v3[3], v3[4]);
}

uint64_t sub_188CFBFAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_188CFBFB8(a1, a2, a3, a4, sub_188CFBC50);
}

uint64_t sub_188CFBFB8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void))
{
  return a5(a1, a2, a3, a4, v5[5], v5[6], v5[2], v5[3], v5[4]);
}

uint64_t BitSet.customMirror.getter(uint64_t a1)
{
  uint64_t v2 = sub_188DF8AB0();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C749ED0);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v13[0] = a1;
  v13[1] = a1;
  uint64_t v9 = *MEMORY[0x18961A708];
  uint64_t v10 = sub_188DF8AA4();
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 104))(v8, v9, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x18961A748], v2);
  sub_188CFC144();
  swift_bridgeObjectRetain_n();
  return sub_188DF8ABC();
}

unint64_t sub_188CFC144()
{
  unint64_t result = qword_18C749ED8;
  if (!qword_18C749ED8)
  {
    unint64_t result = MEMORY[0x1895D7620](&protocol conformance descriptor for BitSet, &type metadata for BitSet);
    atomic_store(result, (unint64_t *)&qword_18C749ED8);
  }

  return result;
}

uint64_t sub_188CFC188()
{
  uint64_t v1 = sub_188DF8AB0();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1895F8858](v1);
  uint64_t v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C749ED0);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v12[0] = *v0;
  v12[1] = v12[0];
  uint64_t v8 = *MEMORY[0x18961A708];
  uint64_t v9 = sub_188DF8AA4();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 104))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x18961A748], v1);
  sub_188CFC144();
  swift_bridgeObjectRetain_n();
  return sub_188DF8ABC();
}

uint64_t _UnmanagedHashNode.ref.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_UnmanagedHashNode.ref.modify())()
{
  return nullsub_1;
}

uint64_t _UnmanagedHashNode.init(_:)(uint64_t a1)
{
  return a1;
}

BOOL static _UnmanagedHashNode.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

BOOL sub_188CFC330(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t _UnmanagedHashNode.description.getter()
{
  return 30768LL;
}

uint64_t sub_188CFC3AC()
{
  return 30768LL;
}

uint64_t _UnmanagedHashNode.withRaw<A>(_:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

BOOL _UnmanagedHashNode.hasItems.getter(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) != 0;
}

BOOL _UnmanagedHashNode.hasChildren.getter(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 20);
  return *(_DWORD *)(a1 + 16) != v2 && v2 != 0;
}

uint64_t _UnmanagedHashNode.itemCount.getter(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 16);
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v2 == *(_DWORD *)(a1 + 20)) {
    return v2;
  }
  else {
    return v3.u32[0];
  }
}

uint64_t _UnmanagedHashNode.childCount.getter(uint64_t a1)
{
  uint64_t result = 0LL;
  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a1 + 20))
  {
    v2.i32[0] = *(_DWORD *)(a1 + 20);
    uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
    v4.i16[0] = vaddlv_u8(v4);
    return v4.u32[0];
  }

  return result;
}

uint64_t _UnmanagedHashNode.itemsEndSlot.getter(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 16);
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v2 == *(_DWORD *)(a1 + 20)) {
    return v2;
  }
  else {
    return v3.u32[0];
  }
}

uint64_t _UnmanagedHashNode.childrenEndSlot.getter(uint64_t a1)
{
  uint8x8_t v2 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(a1 + 20));
  v2.i16[0] = vaddlv_u8(v2);
  if (*(_DWORD *)(a1 + 16) == *(_DWORD *)(a1 + 20)) {
    return 0LL;
  }
  else {
    return v2.u32[0];
  }
}

uint64_t _UnmanagedHashNode.unmanagedChild(at:)(unsigned int a1, uint64_t a2)
{
  return *(void *)(a2 + 16LL * a1 + 32);
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for _UnmanagedHashNode(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 8)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _UnmanagedHashNode(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for _UnmanagedHashNode()
{
  return &type metadata for _UnmanagedHashNode;
}

uint64_t BitArray.encode(to:)(void *a1, uint64_t a2)
{
  if (!v2)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    if (v4)
    {
      swift_bridgeObjectRetain();
      for (uint64_t i = 0LL; i != v4; ++i)
      {
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
        sub_188DF893C();
      }

      swift_bridgeObjectRelease();
    }
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

char *BitArray.init(from:)(void *a1)
{
  return sub_188CFC8A8(a1);
}

char *sub_188CFC868@<X0>(void *a1@<X0>, char **a2@<X8>)
{
  uint64_t result = sub_188CFC8A8(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }

  return result;
}

uint64_t sub_188CFC890(void *a1)
{
  return BitArray.encode(to:)(a1, *v1);
}

char *sub_188CFC8A8(void *a1)
{
  uint64_t v3 = sub_188DF8648();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v21[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = (uint64_t)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_188DF8AD4();
  if (v1) {
    goto LABEL_19;
  }
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v21, v22);
  unint64_t v8 = sub_188DF890C();
  __swift_project_boxed_opaque_existential_1(v21, v22);
  uint64_t v9 = sub_188DF88F4();
  if (v9 <= 1) {
    uint64_t v11 = 1LL;
  }
  else {
    uint64_t v11 = v9;
  }
  uint64_t v12 = v11 - 1;
  char v13 = v10 & 1;
  if ((v10 & 1) != 0) {
    uint64_t v14 = v9;
  }
  else {
    uint64_t v14 = v12;
  }
  uint64_t result = sub_188D58CD4(v21, v14, v13);
  uint64_t v7 = (uint64_t)result;
  unint64_t v16 = *((void *)result + 2);
  if (v16 >> 57)
  {
    __break(1u);
  }

  else
  {
    if (((v16 << 6) & 0x8000000000000000LL) != 0 || v16 << 6 < v8) {
      goto LABEL_18;
    }
    if (v16 && (v16 - 1) << 6 >= v8) {
      goto LABEL_18;
    }
    if ((v8 & 0x3F) == 0)
    {
LABEL_21:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      return (char *)v7;
    }

    if (v16)
    {
      if (*(void *)&result[8 * v16 + 24] >> (v8 & 0x3F))
      {
LABEL_18:
        swift_bridgeObjectRelease();
        __swift_project_boxed_opaque_existential_1(v21, v22);
        sub_188DF88DC();
        sub_188DF863C();
        uint64_t v7 = sub_188DF8654();
        swift_allocError();
        uint64_t v19 = v18;
        (*(void (**)(uint64_t, char *, uint64_t))(v4 + 16))(v18, v6, v3);
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v7 - 8) + 104LL))( v19,  *MEMORY[0x189619360],  v7);
        swift_willThrow();
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
LABEL_19:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
        return (char *)v7;
      }

      goto LABEL_21;
    }
  }

  __break(1u);
  return result;
}

unint64_t sub_188CFCB68()
{
  unint64_t result = qword_18C749EE0;
  if (!qword_18C749EE0)
  {
    unint64_t result = MEMORY[0x1895D7620](&protocol conformance descriptor for BitSet, &type metadata for BitSet);
    atomic_store(result, (unint64_t *)&qword_18C749EE0);
  }

  return result;
}

unint64_t sub_188CFCBB0()
{
  unint64_t result = qword_18C749EE8;
  if (!qword_18C749EE8)
  {
    unint64_t result = MEMORY[0x1895D7620](&protocol conformance descriptor for BitSet, &type metadata for BitSet);
    atomic_store(result, (unint64_t *)&qword_18C749EE8);
  }

  return result;
}

void sub_188CFCBF4(void *a1@<X8>)
{
  *a1 = MEMORY[0x18961AFE8];
}

BOOL sub_188CFCC04(Swift::Int *a1)
{
  return BitSet.contains(_:)(*a1);
}

uint64_t sub_188CFCC10@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_188CFCC6C(a1, (uint64_t (*)(void, void))BitSet.union(_:), a2);
}

uint64_t sub_188CFCC1C@<X0>(int8x16_t **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = BitSet.intersection(_:)(*a1, *v2);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t sub_188CFCC60@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_188CFCC6C(a1, (uint64_t (*)(void, void))BitSet.symmetricDifference(_:), a2);
}

uint64_t sub_188CFCC6C@<X0>(void *a1@<X0>, uint64_t (*a2)(void, void)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v5 = a2(*a1, *v3);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v5;
  return result;
}

BOOL sub_188CFCCBC(Swift::Int *a1, Swift::Int *a2)
{
  Swift::tuple_inserted_Bool_memberAfterInsert_Int v3 = BitSet.insert(_:)(*a2);
  *a1 = v3.memberAfterInsert;
  return v3.inserted;
}

Swift::Int sub_188CFCCE8@<X0>(Swift::Int *a1@<X0>, uint64_t a2@<X8>)
{
  Swift::Int_optional v4 = BitSet.remove(_:)(*a1);
  *(void *)a2 = v4.value;
  *(_BYTE *)(a2 + 8) = v4.is_nil;
  return v4.value;
}

uint64_t sub_188CFCD18@<X0>(Swift::Int *a1@<X0>, uint64_t a2@<X8>)
{
  Swift::Int v3 = *a1;
  uint64_t result = *(_OWORD *)&BitSet.insert(_:)(*a1);
  if ((result & 1) != 0) {
    Swift::Int v5 = v3;
  }
  else {
    Swift::Int v5 = 0LL;
  }
  *(void *)a2 = v5;
  *(_BYTE *)(a2 + 8) = (result & 1) == 0;
  return result;
}

uint64_t sub_188CFCD60(int8x16_t **a1)
{
  return swift_bridgeObjectRelease();
}

_BYTE *sub_188CFCD88(int8x16_t **a1)
{
  return BitSet.formIntersection(_:)(*a1);
}

uint64_t sub_188CFCD90(int8x16_t **a1)
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_188CFCDB8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = BitSet.subtracting(_:)(*a1, *v2);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

BOOL sub_188CFCDFC(void **a1)
{
  return BitSet.isSubset(of:)(*a1, *v1);
}

BOOL sub_188CFCE08(void **a1)
{
  return BitSet.isDisjoint(with:)(*a1, *v1);
}

BOOL sub_188CFCE14(void **a1)
{
  return BitSet.isSubset(of:)(*v1, *a1);
}

uint64_t sub_188CFCE20()
{
  return BitSet.isEmpty.getter(*v0);
}

uint64_t sub_188CFCE28@<X0>(uint64_t a1@<X0>, ValueMetadata *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = BitSet.init<A>(_:)(a1, a2);
  *a3 = result;
  return result;
}

_BYTE *sub_188CFCE4C(int8x16_t **a1)
{
  return BitSet.subtract(_:)(*a1);
}

uint64_t OrderedSet.formSymmetricDifference(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_release();
}

{
  sub_188CFCF00(a1, a2, a3);
  swift_release();
  return swift_release();
}

uint64_t OrderedSet.formSymmetricDifference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a1, a3);
}

uint64_t sub_188CFCF00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_188DA0220(a1, a2, *v3, v3[1], *(void *)(a3 + 16), *(void *)(a3 + 24));
  uint64_t v6 = v5;
  swift_release();
  uint64_t result = swift_release();
  *Swift::Int v3 = v4;
  v3[1] = v6;
  return result;
}

uint64_t sub_188CFCF58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_188DA0318(a1, *v3, v3[1], *(void *)(a2 + 16), a3, *(void *)(a2 + 24));
  uint64_t v6 = v5;
  swift_release();
  uint64_t result = swift_release();
  *Swift::Int v3 = v4;
  v3[1] = v6;
  return result;
}

uint64_t Rope._root.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5 = sub_188DF8384();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a3, v3, v5);
}

uint64_t Rope._root.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_188DF8384();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(v4, a1, v6);
}

uint64_t (*Rope._root.modify())()
{
  return nullsub_1;
}

uint64_t Rope._version.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 36));
}

uint64_t Rope._version.setter(uint64_t result, uint64_t a2)
{
  *(void *)(v2 + *(int *)(a2 + 36)) = result;
  return result;
}

uint64_t (*Rope._version.modify())()
{
  return nullsub_1;
}

uint64_t Rope.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = type metadata accessor for Rope._Node(0LL, a1, a2, a3);
  unint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL);
  v8(a4, 1LL, 1LL, v7);
  uint64_t v9 = sub_188DF8384();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(a4, v9);
  v8(a4, 1LL, 1LL, v7);
  uint64_t v13 = 0LL;
  MEMORY[0x1895D76E0](&v13, 8LL);
  uint64_t v10 = v13;
  uint64_t result = type metadata accessor for Rope(0LL, a1, a2, v11);
  *(void *)(a4 + *(int *)(result + 36)) = v10;
  return result;
}

uint64_t type metadata accessor for Rope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Rope);
}

uint64_t Rope.init(root:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = type metadata accessor for Rope._Node(0LL, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(a5, 1LL, 1LL, v9);
  uint64_t v10 = sub_188DF8384();
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 24))(a5, a1, v10);
  uint64_t v15 = 0LL;
  MEMORY[0x1895D76E0](&v15, 8LL);
  uint64_t v12 = v15;
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
  uint64_t result = type metadata accessor for Rope(0LL, a2, a3, v13);
  *(void *)(a5 + *(int *)(result + 36)) = v12;
  return result;
}

uint64_t Rope.root.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v6 = type metadata accessor for Rope._Node(255LL, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
  uint64_t v7 = sub_188DF8384();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v13 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v13 - v9, v4, v7);
  uint64_t v11 = *(void *)(v6 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  __break(1u);
  return result;
}

uint64_t (*Rope.root.modify( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(void, void, void, void, void)
{
  uint64_t v5 = type metadata accessor for Rope._Node(0LL, *(void *)(a2 + 16), *(void *)(a2 + 24), a4);
  uint64_t result = (uint64_t (*)(void, void, void, void, void))(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))( v4,  1LL,  v5);
  if ((_DWORD)result != 1) {
    return nullsub_1;
  }
  __break(1u);
  return result;
}

uint64_t Rope.root.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for Rope._Node(0LL, *(void *)(a2 + 16), *(void *)(a2 + 24), a4);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v4, 1LL, v6);
  if ((_DWORD)result != 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(v4, a1, v6);
  }
  __break(1u);
  return result;
}

void Rope.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v18 = *(void *)(a2 - 8);
  uint64_t v7 = v18;
  MEMORY[0x1895F8858](a1);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Rope._Item(0LL, v10, v11, v12);
  MEMORY[0x1895F8858](v13);
  uint64_t v15 = (char *)&v18 - v14;
  uint64_t v17 = type metadata accessor for Rope._Node(255LL, a2, a3, v16);
  uint64_t v19 = sub_188DF8384();
  MEMORY[0x1895F8858](v19);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(a4, 1LL, 1LL, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v20, a2);
  Rope._Item.init(_:)((uint64_t)v9, a2, (uint64_t)v15);
  static Rope._Node.createLeaf(_:)((uint64_t)v15, a2, a3);
}

uint64_t sub_188CFD504()
{
  *(void *)(v8 - 88) = 0LL;
  MEMORY[0x1895D76E0](v8 - 88, 8LL);
  uint64_t v9 = *(void *)(v8 - 88);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 112) + 8LL))(v7, v2);
  uint64_t result = type metadata accessor for Rope(0LL, v2, v1, v10);
  *(void *)(v3 + *(int *)(result + 36)) = v9;
  return result;
}

Swift::Void __swiftcall Rope._ensureUnique()()
{
  uint64_t v3 = type metadata accessor for Rope._Node(255LL, *(void *)(v0 + 16), *(void *)(v0 + 24), v1);
  uint64_t v4 = sub_188DF8384();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v10 - v6;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))((char *)&v10 - v6, v2, v4);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48LL);
  int v9 = v8(v7, 1LL, v3);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (v9 != 1)
  {
    else {
      Rope._Node.ensureUnique()();
    }
  }

uint64_t Rope.isSingleton.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for Rope._Node(0LL, *(void *)(a1 + 16), *(void *)(a1 + 24), a4);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  int v9 = (char *)&v23 - v8;
  uint64_t v10 = sub_188DF8384();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  uint64_t v16 = (char *)&v23 - v15;
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v24 = v5;
  v17((char *)&v23 - v15, v5, v10);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v19 = v18(v16, 1LL, v6);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v11 + 8);
  v20(v16, v10);
  if (v19 == 1) {
    return 0;
  }
  v17(v14, v24, v10);
  if (v18(v14, 1LL, v6) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v14, v6);
    BOOL v21 = Rope._Node.isSingleton.getter(v6);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return v21;
  }

  uint64_t result = ((uint64_t (*)(char *, uint64_t))v20)(v14, v10);
  __break(1u);
  return result;
}

BOOL Rope.isIdentical(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v7 = type metadata accessor for Rope._Node(255LL, *(void *)(a2 + 16), *(void *)(a2 + 24), a4);
  uint64_t v8 = sub_188DF8384();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](v8);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v14 = (uint64_t *)((char *)&v23 - v13);
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v15((char *)&v23 - v13, v5, v8);
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  if (v17((char *)v14, 1LL, v7) == 1)
  {
    (*(void (**)(uint64_t *, uint64_t))(v9 + 8))(v14, v8);
    uint64_t v18 = 0LL;
  }

  else
  {
    uint64_t v18 = *v14;
    uint64_t v24 = a1;
    int v19 = *(void (**)(uint64_t *, uint64_t))(v16 + 8);
    swift_unknownObjectRetain();
    v19(v14, v7);
    a1 = v24;
  }

  v15(v12, a1, v8);
  if (v17(v12, 1LL, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    if (!v18) {
      return 1LL;
    }
    goto LABEL_12;
  }

  uint64_t v20 = *(void *)v12;
  BOOL v21 = *(void (**)(char *, uint64_t))(v16 + 8);
  swift_unknownObjectRetain();
  v21(v12, v7);
  if (v18)
  {
    if (v20)
    {
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return v20 == v18;
    }

    goto LABEL_12;
  }

  if (v20)
  {
LABEL_12:
    swift_unknownObjectRelease();
    return 0LL;
  }

  return 1LL;
}

uint64_t sub_188CFD9C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_188DF8384();
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *sub_188CFDA4C(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  size_t v7 = ((v6 + 8) & ~v6) + *(void *)(v5 + 64);
  if (v6 <= 7 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0 && ((v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8 <= 0x18)
  {
    uint64_t v11 = AssociatedTypeWitness;
    uint64_t v12 = ~v6;
    if ((*(_DWORD *)(v5 + 84) & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t))(v5 + 48))(((unint64_t)a2 + v6 + 8) & v12))
      {
LABEL_14:
        memcpy(a1, a2, v7);
LABEL_17:
        *(void *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFF8LL);
        return a1;
      }
    }

    else
    {
      uint64_t v13 = *a2;
      if ((_DWORD)v13 != -1) {
        goto LABEL_14;
      }
    }

    *a1 = *a2;
    uint64_t v14 = (char *)a2 + v6;
    uint64_t v15 = ((unint64_t)a1 + v6 + 8) & v12;
    uint64_t v16 = (unint64_t)(v14 + 8) & v12;
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_unknownObjectRetain();
    v17(v15, v16, v11);
    goto LABEL_17;
  }

  uint64_t v10 = *a2;
  *a1 = *a2;
  a1 = (uint64_t *)(v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
  swift_retain();
  return a1;
}

uint64_t sub_188CFDBB4(uint64_t *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = ~v4;
  if ((*(_DWORD *)(v3 + 84) & 0x80000000) != 0)
  {
    uint64_t result = (*(uint64_t (**)(unint64_t))(v3 + 48))(((unint64_t)a1 + v4 + 8) & v5);
    if ((_DWORD)result) {
      return result;
    }
LABEL_7:
    swift_unknownObjectRelease();
    return (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 8))( ((unint64_t)a1 + v4 + 8) & v5,  AssociatedTypeWitness);
  }

  uint64_t v6 = *a1;
  uint64_t result = (v6 + 1);
  if ((_DWORD)v6 == -1) {
    goto LABEL_7;
  }
  return result;
}

uint64_t *sub_188CFDC7C(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = ~v6;
  uint64_t v8 = (v6 + 8) & ~v6;
  uint64_t v9 = *(void *)(v5 + 64);
  if ((*(_DWORD *)(v5 + 84) & 0x80000000) == 0)
  {
    uint64_t v10 = *a2;
    size_t v11 = v8 + v9;
    if ((_DWORD)v10 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *a1 = *a2;
    uint64_t v12 = (char *)a2 + v6;
    uint64_t v13 = ((unint64_t)a1 + v6 + 8) & v7;
    uint64_t v14 = (unint64_t)(v12 + 8) & v7;
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_unknownObjectRetain();
    v15(v13, v14, AssociatedTypeWitness);
    goto LABEL_8;
  }

  size_t v11 = v8 + v9;
LABEL_5:
  memcpy(a1, a2, v11);
LABEL_8:
  *(void *)(((unint64_t)a1 + v11 + 7) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)a2 + v11 + 7) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

void *sub_188CFDDA0(void *a1, void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ~v7;
  size_t v9 = ((v7 + 8) & ~v7) + *(void *)(v5 + 64);
  if ((v6 & 0x80000000) != 0)
  {
    uint64_t v12 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
    int v13 = v12(((unint64_t)a1 + v7 + 8) & v8, *(unsigned int *)(v5 + 84), AssociatedTypeWitness);
    int v11 = v12(((unint64_t)a2 + v7 + 8) & v8, v6, AssociatedTypeWitness);
    if (!v13)
    {
LABEL_5:
      if (!v11)
      {
        *a1 = *a2;
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 24))( ((unint64_t)a1 + v7 + 8) & v8,  ((unint64_t)a2 + v7 + 8) & v8,  AssociatedTypeWitness);
        goto LABEL_12;
      }

      swift_unknownObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))( ((unint64_t)a1 + v7 + 8) & v8,  AssociatedTypeWitness);
      goto LABEL_9;
    }
  }

  else
  {
    uint64_t v10 = *a2;
    if (*a2 >= 0xFFFFFFFFuLL) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 + 1;
    if (*a1 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }

  if (!v11)
  {
    *a1 = *a2;
    uint64_t v14 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_unknownObjectRetain();
    v14(((unint64_t)a1 + v7 + 8) & v8, ((unint64_t)a2 + v7 + 8) & v8, AssociatedTypeWitness);
    goto LABEL_12;
  }

LABEL_9:
  memcpy(a1, a2, v9);
LABEL_12:
  *(void *)(((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)a2 + v9 + 7) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

  memcpy(a1, a2, v9);
LABEL_12:
  *(void *)(((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)a2 + v9 + 7) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

  __break(1u);
  return result;
}

    ++v16;
    v17 += 6;
    if (v15 == v16) {
      goto LABEL_15;
    }
  }

  if ((a1 & 0x8000000000000000LL) == 0) {
    goto LABEL_9;
  }
LABEL_11:
  if (v16 >= v15)
  {
LABEL_15:
    uint64_t v24 = a2[1];
    if (!v24) {
      goto LABEL_23;
    }
    uint64_t v25 = a2[2];
    int v26 = __OFSUB__(a1, v25);
    uint64_t v27 = a1 - v25;
    if (v27 < 0 == v26)
    {
      a1 = v27;
      if (v26) {
        goto LABEL_64;
      }
LABEL_23:
      uint64_t v3 = a2[7];
      if (!v3) {
        return 1LL;
      }
      if (a1 >= (uint64_t)((unint64_t)*((unsigned int *)a2 + 16) >> 24))
      {
LABEL_61:
        __break(1u);
      }

      else
      {
        uint64_t v4 = a2[6];
        int v11 = *((_WORD *)a2 + 34);
        if ((v3 & 0x1000000000000000LL) == 0)
        {
          unint64_t v38 = HIBYTE(v3) & 0xF;
          if ((v3 & 0x2000000000000000LL) == 0) {
            unint64_t v38 = v4 & 0xFFFFFFFFFFFFLL;
          }
          if (v38 >= v11)
          {
            unint64_t v39 = (v11 << 16) | 4;
LABEL_30:
            swift_bridgeObjectRetain();
            sub_188D0EFD0(v39, v4, v3);
            int v40 = sub_188DF8468();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            int v41 = sub_188D0EFD0(v40, v4, v3);
            uint8x8_t v43 = v42;
            uint64_t v45 = v44;
            unint64_t v47 = v46;
            swift_bridgeObjectRelease();
            sub_188DCAFBC(v41, v43, v45, v47);
            (*(void (**)(uint64_t, char *, uint64_t))(v9 + 40))(a3, v13, v8);
            goto LABEL_31;
          }

          __break(1u);
LABEL_64:
          __break(1u);
          return result;
        }
      }

      unint64_t v39 = MEMORY[0x1895D67BC](15LL, v11, v4, v3);
      goto LABEL_30;
    }

    uint64_t v28 = *(unsigned __int8 *)(v24 + 18);
    swift_unknownObjectRetain();
    uint64_t v29 = v24 + 16;
    int v30 = v24 + 24;
    if (v28)
    {
      if ((sub_188D84420(v29, v30, a1, a3) & 1) != 0)
      {
LABEL_20:
        if (!a2[7])
        {
LABEL_37:
          swift_unknownObjectRelease();
          return 1LL;
        }

        swift_bridgeObjectRetain();
        int v31 = sub_188DF7FD0();
        uint64_t v33 = v32;
        int8x8_t v35 = v34;
        uint64_t v37 = v36;
        swift_bridgeObjectRelease();
        sub_188DCAB58(v31, v33, v35, v37);
        swift_unknownObjectRelease();
LABEL_31:
        swift_bridgeObjectRelease();
        return 1LL;
      }
    }

    else if ((sub_188D848E4(v29, v30, a1, a3) & 1) != 0)
    {
      goto LABEL_20;
    }

    swift_unknownObjectRelease();
    return 0LL;
  }

  int v19 = *v17;
  if (!*v17)
  {
    if (!a1) {
      goto LABEL_40;
    }
    __break(1u);
    goto LABEL_37;
  }

  uint64_t v20 = *(unsigned __int8 *)(v19 + 18);
  swift_unknownObjectRetain();
  BOOL v21 = v19 + 16;
  uint64_t v22 = v19 + 24;
  if (v20) {
    uint64_t v23 = sub_188D84420(v21, v22, a1, a3);
  }
  else {
    uint64_t v23 = sub_188D848E4(v21, v22, a1, a3);
  }
  int8x8_t v48 = v23;
  swift_unknownObjectRelease();
  if ((v48 & 1) != 0)
  {
LABEL_40:
    uint64_t v49 = v16 + 1;
    if (v16 + 1 < v15)
    {
      uint64_t v70 = v4;
      uint64_t v71 = a2;
      while (1)
      {
        uint64_t v50 = *(void *)(v4 + 48 * v49);
        if (!v50) {
          goto LABEL_45;
        }
        if (*(_BYTE *)(v50 + 18)) {
          break;
        }
        uint64_t v52 = *(unsigned __int16 *)(v50 + 16);
        int v72 = *(void *)(v4 + 48 * v49);
        if (v52)
        {
          swift_unknownObjectRetain();
          uint64_t v53 = v50 + 32;
          do
          {
            swift_bridgeObjectRetain();
            uint64_t v54 = sub_188DF7FD0();
            uint64_t v56 = v55;
            uint64_t v58 = v57;
            uint64_t v60 = v59;
            swift_bridgeObjectRelease();
            sub_188DCAB58(v54, v56, v58, v60);
            swift_bridgeObjectRelease();
            v53 += 24LL;
            --v52;
          }

          while (v52);
        }

        else
        {
          swift_unknownObjectRetain();
        }

        swift_unknownObjectRelease();
        uint64_t v4 = v70;
        a2 = v71;
        int v26 = __OFADD__(v49++, 1LL);
        if (v26)
        {
LABEL_55:
          __break(1u);
          goto LABEL_56;
        }

  if (a4 != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }

  if ((a3 & 0x10000000000LL) == 0)
  {
    uint64_t result = swift_beginAccess();
    uint64_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(a2 + 20));
    v12.i16[0] = vaddlv_u8(v12);
    int v13 = v12.i32[0];
    if (*(_DWORD *)(a2 + 16) == *(_DWORD *)(a2 + 20)) {
      int v13 = 0;
    }
    __break(1u);
  }

  uint64_t result = swift_beginAccess();
  uint64_t v14 = *(_DWORD *)(a2 + 16);
  uint64_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
  v15.i16[0] = vaddlv_u8(v15);
  if (v14 != *(_DWORD *)(a2 + 20)) {
    uint64_t v14 = v15.i32[0];
  }
  return result;
}

        __break(1u);
LABEL_10:
        __break(1u);
        return result;
      }
    }

    __break(1u);
    goto LABEL_9;
  }

  return result;
}

  __break(1u);
LABEL_10:
  uint64_t v7 = sub_188CF73DC((uint64_t)v7);
  *uint64_t v2 = v7;
LABEL_5:
  sub_188DF548C(v4, v6, (uint64_t)(v7 + 32), *((void *)v7 + 2), v5);
  *uint64_t v2 = v7;
  uint64_t result = v4 - v5;
  if (!__OFSUB__(v4, v5)) {
    return sub_188D3C3F4(result);
  }
  __break(1u);
  return result;
}

    __break(1u);
    goto LABEL_10;
  }

  __break(1u);
}

    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v18, v22);
    __break(1u);
  }

  return result;
}

    *a1 = v14;
    *a2 = 0LL;
    uint64_t v18 = 256;
    uint64_t v17 = 1;
    return v18 | v17;
  }

  if (HIBYTE(a5) >= v8)
  {
    size_t v9 = a4 & 0x2000000000000000LL;
    uint64_t v10 = HIBYTE(a4) & 0xF;
    int v11 = a3 & 0xFFFFFFFFFFFFLL;
    int v13 = a3 & 0x800000000000000LL;
    uint64_t v14 = sub_188DF7F64();
    if ((v19 & 1) != 0)
    {
      uint64_t v12 = a4 & 0x1000000000000000LL;
      goto LABEL_11;
    }

    goto LABEL_9;
  }

  size_t v9 = a4 & 0x2000000000000000LL;
  uint64_t v10 = HIBYTE(a4) & 0xF;
  int v11 = a3 & 0xFFFFFFFFFFFFLL;
  uint64_t v12 = a4 & 0x1000000000000000LL;
  int v13 = a3 & 0x800000000000000LL;
LABEL_11:
  if (v9) {
    uint64_t v20 = v10;
  }
  else {
    uint64_t v20 = v11;
  }
  if (v13) {
    BOOL v21 = 1;
  }
  else {
    BOOL v21 = v12 == 0;
  }
  uint64_t v22 = 7LL;
  if (!v21) {
    uint64_t v22 = 11LL;
  }
  uint64_t v23 = v22 | (v20 << 16);
  uint64_t result = sub_188DF7F7C();
  if (!__OFSUB__(v8, result))
  {
    uint64_t v17 = 0;
    *a2 = v8 - result;
    *a1 = v23;
    uint64_t v18 = 256;
    return v18 | v17;
  }

  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

    __break(1u);
LABEL_10:
    __break(1u);
  }

  __break(1u);
  return result;
}

    __break(1u);
LABEL_10:
    __break(1u);
  }

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
}

  uint64_t v14 = (unsigned __int16)*a2 - v18;
  if (v14 < 0)
  {
LABEL_19:
    __break(1u);
    return result;
  }

  *a2 = v14;
  uint64_t v15 = &a3[40 * v18];
  return v6;
}

  uint64_t v14 = (unsigned __int16)*a2 - v19;
  if (v14 < 0)
  {
LABEL_19:
    __break(1u);
    return result;
  }

  *a2 = v14;
  uint64_t v15 = &a3[24 * v19];
  uint64_t v16 = 24LL * (unsigned __int16)v14;
  if (v19 > 0 || &v15[v16] <= a3) {
    memmove(a3, v15, v16);
  }
  return v6;
}

  memcpy(a1, a2, v9);
LABEL_12:
  *(void *)(((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)a2 + v9 + 7) & 0xFFFFFFFFFFFFF8LL);
  uint64_t v15 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  uint64_t v16 = (void *)(((unint64_t)a1 + v15 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v17 = (void *)(((unint64_t)a2 + v15 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v16 = *v17;
  v16[1] = v17[1];
  v16[2] = v17[2];
  return a1;
}

  memcpy(a1, a2, v9);
LABEL_12:
  *(void *)(((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)a2 + v9 + 7) & 0xFFFFFFFFFFFFF8LL);
  uint64_t v14 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  uint64_t v15 = (void *)(((unint64_t)a1 + v14 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v16 = (void *)(((unint64_t)a2 + v14 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  v15[2] = v16[2];
  return a1;
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t *sub_188CFDF60(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = ~v6;
  uint64_t v8 = (v6 + 8) & ~v6;
  uint64_t v9 = *(void *)(v5 + 64);
  if ((*(_DWORD *)(v5 + 84) & 0x80000000) == 0)
  {
    uint64_t v10 = *a2;
    size_t v11 = v8 + v9;
    if ((_DWORD)v10 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *a1 = *a2;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))( ((unint64_t)a1 + v6 + 8) & v7,  ((unint64_t)a2 + v6 + 8) & v7,  AssociatedTypeWitness);
    goto LABEL_8;
  }

  size_t v11 = v8 + v9;
LABEL_5:
  memcpy(a1, a2, v11);
LABEL_8:
  *(void *)(((unint64_t)a1 + v11 + 7) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)a2 + v11 + 7) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

void *sub_188CFE078(void *a1, void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ~v7;
  size_t v9 = ((v7 + 8) & ~v7) + *(void *)(v5 + 64);
  if ((v6 & 0x80000000) != 0)
  {
    uint64_t v12 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
    int v13 = v12(((unint64_t)a1 + v7 + 8) & v8, *(unsigned int *)(v5 + 84), AssociatedTypeWitness);
    int v11 = v12(((unint64_t)a2 + v7 + 8) & v8, v6, AssociatedTypeWitness);
    if (!v13)
    {
LABEL_5:
      if (!v11)
      {
        *a1 = *a2;
        swift_unknownObjectRelease();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 40))( ((unint64_t)a1 + v7 + 8) & v8,  ((unint64_t)a2 + v7 + 8) & v8,  AssociatedTypeWitness);
        goto LABEL_12;
      }

      swift_unknownObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))( ((unint64_t)a1 + v7 + 8) & v8,  AssociatedTypeWitness);
      goto LABEL_9;
    }
  }

  else
  {
    uint64_t v10 = *a2;
    if (*a2 >= 0xFFFFFFFFuLL) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 + 1;
    if (*a1 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }

  if (!v11)
  {
    *a1 = *a2;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))( ((unint64_t)a1 + v7 + 8) & v8,  ((unint64_t)a2 + v7 + 8) & v8,  AssociatedTypeWitness);
    goto LABEL_12;
  }

uint64_t sub_188CFE21C(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    int v6 = 0x7FFFFFFF;
  }
  else {
    int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 - 1 < a2)
  {
    unsigned int v8 = a2 - v6 + 2;
    if (((((*(void *)(v4 + 64) + ((v7 + 8) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8) & 0xFFFFFFF8) != 0) {
      unsigned int v8 = 2;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0LL;
    }
    __asm { BR              X15 }
  }

  if ((v5 & 0x80000000) != 0)
  {
    unsigned int v13 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 8) & ~v7);
  }

  else
  {
    uint64_t v12 = *a1;
    unsigned int v13 = v12 + 1;
  }

  if (v13 >= 2) {
    return v13 - 1;
  }
  else {
    return 0LL;
  }
}

void sub_188CFE378(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu) {
    int v7 = 0x7FFFFFFF;
  }
  else {
    int v7 = *(_DWORD *)(v6 + 84);
  }
  unsigned int v8 = v7 - 1;
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  if (v7 - 1 >= a3)
  {
    int v12 = 0u;
    if (v8 >= a2) {
      goto LABEL_16;
    }
  }

  else
  {
    unsigned int v10 = a3 - v7 + 2;
    if ((((((_DWORD)v9 + 8) & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8) {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    if (v8 >= a2) {
LABEL_16:
    }
      __asm { BR              X14 }
  }

  unsigned int v13 = a2 - v7;
  if ((((((_DWORD)v9 + 8) & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    bzero(a1, ((((v9 + 8) & ~v9) + *(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8);
    *a1 = v13;
  }

  __asm { BR              X10 }

void sub_188CFE4A8()
{
  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x188CFE5A0LL);
}

void sub_188CFE4B0()
{
  *(_DWORD *)(v0 + v2) = 0;
  if (v1) {
    JUMPOUT(0x188CFE4B8LL);
  }
  JUMPOUT(0x188CFE5A0LL);
}

void sub_188CFE514()
{
  _BYTE *v0 = v1;
  JUMPOUT(0x188CFE5A0LL);
}

void sub_188CFE530()
{
  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x188CFE5A0LL);
}

void sub_188CFE538()
{
  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x188CFE5A0LL);
}

void sub_188CFE540(uint64_t a1, size_t a2)
{
  *(_WORD *)&v4[v6] = 0;
  if (v5)
  {
    if (v5 + 1 <= v3) {
      JUMPOUT(0x188CFE51CLL);
    }
    if ((_DWORD)a2)
    {
      else {
        int v2 = 4;
      }
      bzero(v4, a2);
      __asm { BR              X10 }
    }
  }

  JUMPOUT(0x188CFE5A0LL);
}

void sub_188CFE574()
{
  *(_WORD *)uint64_t v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x188CFE5A0LL);
}

void sub_188CFE584()
{
  _WORD *v0 = v1;
  JUMPOUT(0x188CFE5A0LL);
}

void sub_188CFE58C()
{
  _DWORD *v0 = v1;
  JUMPOUT(0x188CFE5A0LL);
}

uint64_t TreeSet.hash(into:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](a1);
  int v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_188DF8384();
  MEMORY[0x1895F8858](v13);
  uint64_t v15 = (char *)v27 - v14;
  __int128 v16 = a1[3];
  v31[4] = a1[2];
  v31[5] = v16;
  uint64_t v32 = *((void *)a1 + 8);
  __int128 v18 = *a1;
  __int128 v17 = a1[1];
  v27[1] = a1;
  v31[2] = v18;
  v31[3] = v17;
  v27[2] = sub_188DF8A8C();
  TreeSet.makeIterator()(a2, v30);
  v27[3] = a6;
  uint64_t v20 = type metadata accessor for TreeSet.Iterator(0LL, a5, a6, v19);
  TreeSet.Iterator.next()(v20, (uint64_t)v15);
  uint64_t v21 = v10;
  uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v22(v15, 1LL, a5) != 1)
  {
    uint64_t v23 = 0LL;
    uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    do
    {
      v24(v12, v15, a5);
      uint64_t v25 = sub_188DF7C40();
      (*(void (**)(char *, uint64_t))(v21 + 8))(v12, a5);
      v23 ^= v25;
      TreeSet.Iterator.next()(v20, (uint64_t)v15);
    }

    while (v22(v15, 1LL, a5) != 1);
  }

  v28[6] = v30[6];
  v29[0] = v31[0];
  *(_OWORD *)((char *)v29 + 11) = *(_OWORD *)((char *)v31 + 11);
  v28[2] = v30[2];
  v28[3] = v30[3];
  v28[4] = v30[4];
  v28[5] = v30[5];
  v28[0] = v30[0];
  v28[1] = v30[1];
  sub_188CFE7A8((uint64_t)v28);
  return sub_188DF8A50();
}

uint64_t sub_188CFE7A8(uint64_t a1)
{
  return a1;
}

uint64_t TreeSet.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_188DF8A98();
}

uint64_t sub_188CFE844(uint64_t a1)
{
  return TreeSet.hashValue.getter(*v1, v1[1], v1[2], *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t sub_188CFE858(__int128 *a1, uint64_t a2)
{
  return TreeSet.hash(into:)(a1, *v2, v2[1], v2[2], *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t sub_188CFE86C(uint64_t a1, uint64_t a2)
{
  return sub_188DF8A98();
}

void sub_188CFE8B4()
{
}

uint64_t static OrderedDictionary<>.== infix(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((static OrderedSet.== infix(_:_:)(a1, a2, a4, a5, a7, a9) & 1) != 0) {
    return sub_188DF8744();
  }
  else {
    return 0LL;
  }
}

uint64_t sub_188CFE92C(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  return static OrderedDictionary<>.== infix(_:_:)(*a1, a1[1], a1[2], *a2, a2[1], a2[2], a3[2], a3[3], a3[4]) & 1;
}

BOOL sub_188CFE978(uint64_t a1)
{
  uint64_t v3 = v11[0];
  uint64_t v4 = v10[0];
  sub_188D011B8((uint64_t)v9, (uint64_t)v7);
  sub_188D011B8((uint64_t)v9, (uint64_t)v10);
  if (v10[0]) {
    uint64_t v5 = v7[0];
  }
  else {
    uint64_t v5 = 0LL;
  }
  if (v3 && v4)
  {
    if (v5)
    {
      sub_188D07F48(v1);
      sub_188D07F48(a1);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return v4 == v5;
    }

    sub_188D07F48(v1);
    sub_188D07F48(a1);
  }

  else
  {
    sub_188D07F48(v1);
    sub_188D07F48(a1);
    if (!v5) {
      return 1LL;
    }
  }

  swift_unknownObjectRelease();
  return 0LL;
}

__n128 BigSubstring.init(_unchecked:in:)@<Q0>(_OWORD *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v3 = a1[1];
  *(_OWORD *)a3 = *a1;
  *(_OWORD *)(a3 + 16) = v3;
  __int128 v4 = *a2;
  __int128 v5 = a2[1];
  *(_OWORD *)(a3 + 32) = a1[2];
  *(_OWORD *)(a3 + 48) = v4;
  __n128 result = (__n128)a2[2];
  __int128 v7 = a2[3];
  *(_OWORD *)(a3 + 64) = v5;
  *(__n128 *)(a3 + 80) = result;
  *(_OWORD *)(a3 + 96) = v7;
  return result;
}

__n128 BigSubstring.init(_:in:)@<Q0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 v6 = *(__n128 *)(a1 + 16);
  uint64_t v28 = *(void *)(a1 + 40);
  uint64_t v29 = *(void *)(a1 + 32);
  unint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  unint64_t v9 = a2[2];
  uint64_t v10 = a2[3];
  __n128 v27 = v6;
  v31[0] = *(_OWORD *)a1;
  __int128 v30 = v31[0];
  __int128 v11 = *(_OWORD *)(a1 + 32);
  v31[1] = v6;
  v31[2] = v11;
  sub_188D011B8((uint64_t)v31, (uint64_t)v32);
  sub_188D07F48((uint64_t)v32);
  unint64_t v12 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v7, v8, v9, v10);
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  unint64_t v19 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(a2[4], a2[5], a2[6], a2[7]);
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  sub_188D087F8(a1);
  __n128 result = v27;
  *(_OWORD *)a3 = v30;
  *(__n128 *)(a3 + 16) = v27;
  *(void *)(a3 + 32) = v29;
  *(void *)(a3 + 40) = v28;
  *(void *)(a3 + 48) = v12;
  *(void *)(a3 + 56) = v14;
  *(void *)(a3 + 64) = v16;
  *(void *)(a3 + 72) = v18;
  *(void *)(a3 + 80) = v19;
  *(void *)(a3 + 88) = v21;
  *(void *)(a3 + 96) = v23;
  *(void *)(a3 + 104) = v25;
  return result;
}

uint64_t BigSubstring.base.getter@<X0>(_OWORD *a1@<X8>)
{
  __int128 v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v1[2];
  return swift_unknownObjectRetain();
}

uint64_t BigSubstring.description.getter()
{
  __int128 v1 = v0[1];
  v8[0] = *v0;
  v8[1] = v1;
  __int128 v2 = v0[3];
  v8[2] = v0[2];
  __int128 v3 = v0[4];
  __int128 v4 = v0[5];
  v7[0] = v2;
  v7[1] = v3;
  __int128 v5 = v0[6];
  v7[2] = v4;
  v7[3] = v5;
  sub_188D07F48((uint64_t)v0);
  return sub_188DDD874((uint64_t)v8, (uint64_t)v7);
}

uint64_t sub_188CFEC04()
{
  __int128 v1 = v0[1];
  v5[0] = *v0;
  v5[1] = v1;
  __int128 v2 = v0[3];
  v5[2] = v0[2];
  v6[0] = v2;
  __int128 v3 = v0[5];
  v6[1] = v0[4];
  v6[2] = v3;
  void v6[3] = v0[6];
  swift_unknownObjectRetain();
  return sub_188DDD874((uint64_t)v5, (uint64_t)v6);
}

uint64_t BigSubstring.debugDescription.getter()
{
  __int128 v1 = v0[1];
  v9[0] = *v0;
  v9[1] = v1;
  __int128 v2 = v0[3];
  v9[2] = v0[2];
  __int128 v3 = v0[4];
  __int128 v4 = v0[5];
  v8[0] = v2;
  v8[1] = v3;
  __int128 v5 = v0[6];
  v8[2] = v4;
  _OWORD v8[3] = v5;
  sub_188D07F48((uint64_t)v0);
  sub_188DDD874((uint64_t)v9, (uint64_t)v8);
  uint64_t v6 = sub_188DF7DFC();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_188CFECCC()
{
  __int128 v1 = v0[1];
  v6[0] = *v0;
  v6[1] = v1;
  __int128 v2 = v0[3];
  v6[2] = v0[2];
  v7[0] = v2;
  __int128 v3 = v0[5];
  v7[1] = v0[4];
  v7[2] = v3;
  v7[3] = v0[6];
  swift_unknownObjectRetain();
  sub_188DDD874((uint64_t)v6, (uint64_t)v7);
  uint64_t v4 = sub_188DF7DFC();
  swift_bridgeObjectRelease();
  return v4;
}

__n128 BigSubstring.init(stringLiteral:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v4 = v7[5];
  *(_OWORD *)(a3 + 64) = v7[4];
  *(_OWORD *)(a3 + 80) = v4;
  *(_OWORD *)(a3 + 96) = v7[6];
  __int128 v5 = v7[1];
  *(_OWORD *)a3 = v7[0];
  *(_OWORD *)(a3 + 16) = v5;
  __n128 result = (__n128)v7[3];
  *(_OWORD *)(a3 + 32) = v7[2];
  *(__n128 *)(a3 + 48) = result;
  return result;
}

__n128 BigSubstring.init<A>(_:)@<Q0>(uint64_t a1@<X0>, ValueMetadata *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v6 = v9[5];
  *(_OWORD *)(a3 + 64) = v9[4];
  *(_OWORD *)(a3 + 80) = v6;
  *(_OWORD *)(a3 + 96) = v9[6];
  __int128 v7 = v9[1];
  *(_OWORD *)a3 = v9[0];
  *(_OWORD *)(a3 + 16) = v7;
  __n128 result = (__n128)v9[3];
  *(_OWORD *)(a3 + 32) = v9[2];
  *(__n128 *)(a3 + 48) = result;
  return result;
}

__n128 sub_188CFEE14@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3 = v6[5];
  *(_OWORD *)(a2 + 64) = v6[4];
  *(_OWORD *)(a2 + 80) = v3;
  *(_OWORD *)(a2 + 96) = v6[6];
  __int128 v4 = v6[1];
  *(_OWORD *)a2 = v6[0];
  *(_OWORD *)(a2 + 16) = v4;
  __n128 result = (__n128)v6[3];
  *(_OWORD *)(a2 + 32) = v6[2];
  *(__n128 *)(a2 + 48) = result;
  return result;
}

__n128 sub_188CFEE74@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v11 = v13[1];
  __int128 v12 = v13[0];
  __int128 v9 = v13[3];
  __int128 v10 = v13[2];
  __n128 v7 = (__n128)v13[5];
  __int128 v8 = v13[4];
  uint64_t v4 = v14;
  uint64_t v5 = v15;
  swift_bridgeObjectRelease();
  *(_OWORD *)a3 = v12;
  *(_OWORD *)(a3 + 16) = v11;
  *(_OWORD *)(a3 + 32) = v10;
  *(_OWORD *)(a3 + 48) = v9;
  __n128 result = v7;
  *(_OWORD *)(a3 + 64) = v8;
  *(__n128 *)(a3 + 80) = v7;
  *(void *)(a3 + 96) = v4;
  *(void *)(a3 + 104) = v5;
  return result;
}

BOOL BigSubstring.isIdentical(to:)(uint64_t a1)
{
  uint64_t v2 = (uint64_t)v1;
  __int128 v4 = v1[1];
  _OWORD v8[3] = *v1;
  _OWORD v8[4] = v4;
  v8[5] = v1[2];
  __int128 v5 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v5;
  v8[2] = *(_OWORD *)(a1 + 32);
  sub_188D07F48((uint64_t)v1);
  sub_188D07F48(a1);
  BOOL v6 = sub_188CFE978((uint64_t)v8);
  sub_188D087F8(a1);
  sub_188D087F8(v2);
  return v6
      && (*(void *)(a1 + 48) ^ *(void *)(v2 + 48)) <= 1023LL
      && (*(void *)(v2 + 80) ^ *(void *)(a1 + 80)) < 0x400uLL;
}

unint64_t BigSubstring.count.getter()
{
  unint64_t result = v0[6];
  unint64_t v2 = v0[10];
  if (v2 >> 10 >= result >> 10) {
    return _s19CollectionsInternal9BigStringV8distance4from2toSiAC5IndexV_AHtF_0( result,  v0[7],  v0[8],  v0[9],  v2,  v0[11],  v0[12],  v0[13]);
  }
  __break(1u);
  return result;
}

__n128 BigSubstring.makeIterator()@<Q0>(uint64_t a1@<X8>)
{
  __int128 v3 = *(_OWORD *)(v1 + 16);
  v22[0] = *(_OWORD *)v1;
  v22[1] = v3;
  v22[2] = *(_OWORD *)(v1 + 32);
  unint64_t v4 = *(void *)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 56);
  unint64_t v6 = *(void *)(v1 + 64);
  uint64_t v7 = *(void *)(v1 + 72);
  __int128 v18 = *(_OWORD *)(v1 + 80);
  uint64_t v8 = *(void *)(v1 + 96);
  uint64_t v9 = *(void *)(v1 + 104);
  sub_188D07F48(v1);
  sub_188DA4EA0(v22, v4, v5, v6, v7, v19);
  __int128 v16 = v19[1];
  __int128 v17 = v19[0];
  __int128 v14 = v19[3];
  __int128 v15 = v19[2];
  __n128 v13 = (__n128)v19[4];
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  sub_188D087F8(v1);
  *(_OWORD *)a1 = v18;
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  *(_OWORD *)(a1 + 32) = v17;
  *(_OWORD *)(a1 + 48) = v16;
  *(_OWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 80) = v14;
  __n128 result = v13;
  *(__n128 *)(a1 + 96) = v13;
  *(void *)(a1 + 112) = v10;
  *(void *)(a1 + 120) = v11;
  return result;
}

Swift::String_optional __swiftcall BigSubstring.Iterator.next()()
{
  uint64_t v1 = v0[10];
  unint64_t v2 = v0[14];
  if (__OFADD__(v1, v2 >> 16))
  {
    __break(1u);
  }

  else
  {
    if ((int64_t)(v1 + (v2 >> 16)) < *v0 >> 11 && (v0[15] ^ v2) >= 0x4000)
    {
      sub_188DA4354();
      uint64_t v3 = v7;
      unint64_t v4 = (void *)v8;
      if ((sub_188DA48EC(v7, v8) & 1) == 0) {
        v0[14] = v0[15];
      }
    }

    else
    {
      uint64_t v3 = 0LL;
      unint64_t v4 = 0LL;
    }

    uint64_t v5 = v3;
    unint64_t v6 = v4;
  }

  result.value._object = v6;
  result.value._countAndFlagsBits = v5;
  return result;
}

uint64_t sub_188CFF1CC(_OWORD *a1, __int128 *a2)
{
  __int128 v2 = a1[5];
  v13[4] = a1[4];
  v13[5] = v2;
  __int128 v3 = a1[6];
  __int128 v4 = a1[1];
  v13[0] = *a1;
  v13[1] = v4;
  __int128 v5 = a1[3];
  void v13[2] = a1[2];
  v13[3] = v5;
  __int128 v6 = *a2;
  __int128 v7 = a2[1];
  _OWORD v13[6] = v3;
  v14[0] = v6;
  __int128 v8 = a2[2];
  __int128 v9 = a2[3];
  __int128 v10 = a2[6];
  v14[5] = a2[5];
  v14[6] = v10;
  __int128 v11 = a2[4];
  v14[3] = v9;
  v14[4] = v11;
  v14[1] = v7;
  void v14[2] = v8;
  return _s19CollectionsInternal12BigSubstringV2eeoiySbAC_ACtFZ_0((uint64_t)v13, (uint64_t)v14) & 1;
}

uint64_t BigSubstring.hash(into:)()
{
  __int128 v1 = *(_OWORD *)(v0 + 16);
  v37[0] = *(_OWORD *)v0;
  v37[1] = v1;
  v37[2] = *(_OWORD *)(v0 + 32);
  unint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);
  unint64_t v4 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 72);
  __int128 v21 = *(_OWORD *)(v0 + 88);
  unint64_t v19 = *(void *)(v0 + 80);
  uint64_t v20 = *(void *)(v0 + 104);
  sub_188D07F48(v0);
  sub_188DA4EA0(v37, v2, v3, v4, v5, v29);
  __int128 v17 = v29[1];
  __int128 v18 = v29[0];
  uint64_t v6 = v30;
  uint64_t v7 = v31;
  __int128 v16 = v33;
  uint64_t v8 = v32;
  uint64_t v9 = v34;
  unint64_t v10 = v35;
  uint64_t v11 = v36;
  uint64_t result = sub_188D087F8(v0);
  *(_OWORD *)&v23[8] = v21;
  *(void *)uint64_t v23 = v19;
  *(void *)&v23[24] = v20;
  __int128 v24 = v18;
  __int128 v25 = v17;
  *(void *)&__int128 v26 = v6;
  *((void *)&v26 + 1) = v7;
  *(_OWORD *)&v27[8] = v16;
  *(void *)__n128 v27 = v8;
  *(void *)&v27[24] = v9;
  *(void *)&__int128 v28 = v10;
  *((void *)&v28 + 1) = v11;
  if (!__OFADD__(v8, v10 >> 16))
  {
    if ((uint64_t)(v8 + (v10 >> 16)) >= (uint64_t)(v19 >> 11) || (v11 ^ v10) < 0x4000)
    {
LABEL_9:
      sub_188DF8A5C();
      _OWORD v22[4] = v26;
      v22[5] = *(_OWORD *)v27;
      v22[6] = *(_OWORD *)&v27[16];
      v22[7] = v28;
      v22[0] = *(_OWORD *)v23;
      v22[1] = *(_OWORD *)&v23[16];
      v22[2] = v24;
      v22[3] = v25;
      return sub_188D08820((uint64_t)v22);
    }

    while (1)
    {
      v37[3] = v24;
      v37[4] = v25;
      v37[5] = v26;
      uint64_t v38 = v8;
      __int128 v39 = *(_OWORD *)&v27[8];
      uint64_t v40 = *(void *)&v27[24];
      unint64_t v41 = v10;
      uint64_t v42 = v11;
      sub_188DA4354();
      uint64_t v15 = sub_188DA48EC(v13, v14);
      if ((v15 & 1) == 0) {
        *(void *)&__int128 v28 = *((void *)&v28 + 1);
      }
      MEMORY[0x1895F8858](v15);
      sub_188DF7E50();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v8 = *(void *)v27;
      unint64_t v10 = v28;
      if ((int64_t)(*(void *)v27 + ((unint64_t)v28 >> 16)) < *(void *)v23 >> 11)
      {
        uint64_t v11 = *((void *)&v28 + 1);
      }

      goto LABEL_9;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t BigSubstring.hashValue.getter()
{
  return sub_188DF8A98();
}

uint64_t sub_188CFF48C()
{
  return sub_188DF8A98();
}

uint64_t sub_188CFF4F0()
{
  return BigSubstring.hash(into:)();
}

uint64_t sub_188CFF538()
{
  return sub_188DF8A98();
}

uint64_t sub_188CFF59C(_OWORD *a1, __int128 *a2)
{
  __int128 v2 = a1[5];
  v13[4] = a1[4];
  v13[5] = v2;
  __int128 v3 = a1[6];
  __int128 v4 = a1[1];
  v13[0] = *a1;
  v13[1] = v4;
  __int128 v5 = a1[3];
  void v13[2] = a1[2];
  v13[3] = v5;
  __int128 v6 = *a2;
  __int128 v7 = a2[1];
  _OWORD v13[6] = v3;
  v14[0] = v6;
  __int128 v8 = a2[2];
  __int128 v9 = a2[3];
  __int128 v10 = a2[6];
  v14[5] = a2[5];
  v14[6] = v10;
  __int128 v11 = a2[4];
  v14[3] = v9;
  v14[4] = v11;
  v14[1] = v7;
  void v14[2] = v8;
  return _s19CollectionsInternal12BigSubstringV1loiySbAC_ACtFZ_0((uint64_t)v13, (uint64_t)v14) & 1;
}

BOOL sub_188CFF600(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[5];
  v12[4] = a1[4];
  v12[5] = v2;
  v12[6] = a1[6];
  __int128 v3 = a1[1];
  v12[0] = *a1;
  v12[1] = v3;
  __int128 v4 = a1[3];
  void v12[2] = a1[2];
  v12[3] = v4;
  __int128 v5 = a2[1];
  v11[0] = *a2;
  v11[1] = v5;
  __int128 v6 = a2[2];
  __int128 v7 = a2[3];
  __int128 v8 = a2[6];
  void v11[5] = a2[5];
  v11[6] = v8;
  __int128 v9 = a2[4];
  v11[3] = v7;
  __int128 v11[4] = v9;
  v11[2] = v6;
  return (_s19CollectionsInternal12BigSubstringV1loiySbAC_ACtFZ_0((uint64_t)v11, (uint64_t)v12) & 1) == 0;
}

BOOL sub_188CFF66C(_OWORD *a1, __int128 *a2)
{
  __int128 v2 = a1[5];
  v13[4] = a1[4];
  v13[5] = v2;
  __int128 v3 = a1[6];
  __int128 v4 = a1[1];
  v13[0] = *a1;
  v13[1] = v4;
  __int128 v5 = a1[3];
  void v13[2] = a1[2];
  v13[3] = v5;
  __int128 v6 = *a2;
  __int128 v7 = a2[1];
  _OWORD v13[6] = v3;
  v14[0] = v6;
  __int128 v8 = a2[2];
  __int128 v9 = a2[3];
  __int128 v10 = a2[6];
  v14[5] = a2[5];
  v14[6] = v10;
  __int128 v11 = a2[4];
  v14[3] = v9;
  v14[4] = v11;
  v14[1] = v7;
  void v14[2] = v8;
  return (_s19CollectionsInternal12BigSubstringV1loiySbAC_ACtFZ_0((uint64_t)v13, (uint64_t)v14) & 1) == 0;
}

uint64_t sub_188CFF6D4(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[5];
  v12[4] = a1[4];
  v12[5] = v2;
  v12[6] = a1[6];
  __int128 v3 = a1[1];
  v12[0] = *a1;
  v12[1] = v3;
  __int128 v4 = a1[3];
  void v12[2] = a1[2];
  v12[3] = v4;
  __int128 v5 = a2[1];
  v11[0] = *a2;
  v11[1] = v5;
  __int128 v6 = a2[2];
  __int128 v7 = a2[3];
  __int128 v8 = a2[6];
  void v11[5] = a2[5];
  v11[6] = v8;
  __int128 v9 = a2[4];
  v11[3] = v7;
  __int128 v11[4] = v9;
  v11[2] = v6;
  return _s19CollectionsInternal12BigSubstringV1loiySbAC_ACtFZ_0((uint64_t)v11, (uint64_t)v12) & 1;
}

uint64_t BigSubstring.startIndex.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t BigSubstring.endIndex.getter()
{
  return *(void *)(v0 + 80);
}

uint64_t sub_188CFF754@<X0>(Swift::String_optional *a1@<X8>)
{
  Swift::String_optional v3 = BigSubstring.Iterator.next()();
  uint64_t result = v3.value._countAndFlagsBits;
  *a1 = v3;
  return result;
}

__n128 sub_188CFF778@<Q0>(uint64_t a1@<X8>)
{
  __int128 v3 = *(_OWORD *)(v1 + 16);
  v22[0] = *(_OWORD *)v1;
  v22[1] = v3;
  v22[2] = *(_OWORD *)(v1 + 32);
  unint64_t v4 = *(void *)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 56);
  unint64_t v6 = *(void *)(v1 + 64);
  uint64_t v7 = *(void *)(v1 + 72);
  __int128 v18 = *(_OWORD *)(v1 + 80);
  uint64_t v9 = *(void *)(v1 + 96);
  uint64_t v8 = *(void *)(v1 + 104);
  sub_188DA4EA0(v22, v4, v5, v6, v7, v19);
  __int128 v16 = v19[1];
  __int128 v17 = v19[0];
  __int128 v14 = v19[3];
  __int128 v15 = v19[2];
  __n128 v13 = (__n128)v19[4];
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  sub_188D087F8((uint64_t)v22);
  *(_OWORD *)a1 = v18;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v8;
  *(_OWORD *)(a1 + 32) = v17;
  *(_OWORD *)(a1 + 48) = v16;
  *(_OWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 80) = v14;
  __n128 result = v13;
  *(__n128 *)(a1 + 96) = v13;
  *(void *)(a1 + 112) = v10;
  *(void *)(a1 + 120) = v11;
  return result;
}

uint64_t sub_188CFF83C()
{
  return 2LL;
}

unint64_t sub_188CFF844()
{
  __int128 v1 = v0[5];
  _OWORD v6[4] = v0[4];
  v6[5] = v1;
  v6[6] = v0[6];
  __int128 v2 = v0[1];
  v6[0] = *v0;
  v6[1] = v2;
  __int128 v3 = v0[3];
  v6[2] = v0[2];
  _OWORD v6[3] = v3;
  unint64_t v4 = sub_188DD5E34((uint64_t)v6);
  sub_188D087F8((uint64_t)v6);
  return v4;
}

uint64_t sub_188CFF89C(unint64_t *a1, uint64_t *a2, unint64_t *a3)
{
  return sub_188DD64F8(a1, a2, a3);
}

uint64_t sub_188CFF8E4()
{
  return sub_188DF803C();
}

unint64_t BigSubstring.distance(from:to:)( unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  unint64_t v9 = result >> 10;
  unint64_t v10 = *(void *)(v8 + 48) >> 10;
  unint64_t v11 = *(void *)(v8 + 80) >> 10;
  if (v11 >= a5 >> 10 && a5 >> 10 >= v10 && v9 >= v10 && v11 >= v9) {
    return _s19CollectionsInternal9BigStringV8distance4from2toSiAC5IndexV_AHtF_0(result, a2, a3, a4, a5, a6, a7, a8);
  }
  __break(1u);
  return result;
}

unint64_t BigSubstring.index(after:)( unint64_t result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  if (result >> 10 < *(void *)(v4 + 80) >> 10) {
    return sub_188D047AC(result, a2, a3, a4, 1uLL) & 0xFFFFFFFFFFFFF8FFLL | 0x300;
  }
  __break(1u);
  return result;
}

unint64_t BigSubstring.index(before:)( unint64_t result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  if (*(void *)(v4 + 48) >> 10 < result >> 10) {
    return sub_188D047AC(result, a2, a3, a4, 0xFFFFFFFFFFFFFFFFLL) & 0xFFFFFFFFFFFFF8FFLL | 0x300;
  }
  __break(1u);
  return result;
}

unint64_t BigSubstring.index(_:offsetBy:)( unint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v6 = *(void *)(v5 + 48) >> 10;
  unint64_t v7 = *(void *)(v5 + 80) >> 10;
  if (result >> 10 >= v6 && v7 >= result >> 10)
  {
    __n128 result = sub_188D047AC(result, a2, a3, a4, a5);
    unint64_t v9 = (result & 0xFFFFFFFFFFFFF8FFLL) >> 10;
    if (v9 >= v6 && v7 >= v9) {
      return result & 0xFFFFFFFFFFFFF8FFLL | 0x300;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

unint64_t BigSubstring.index(_:offsetBy:limitedBy:)( unint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, int64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  unint64_t v10 = *(void *)(v9 + 48) >> 10;
  unint64_t v11 = *(void *)(v9 + 80) >> 10;
  if (result >> 10 < v10 || v11 < result >> 10)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }

  __n128 result = BigString.index(_:offsetBy:limitedBy:)(result, a2, a3, a4, a5, a6, a7, a8, a9);
  if (v13 != 2 && (result >> 10 < v10 || v11 < result >> 10)) {
    goto LABEL_13;
  }
  return result;
}

unint64_t BigSubstring.subscript.getter( unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (result >> 10 < *((void *)v4 + 6) >> 10 || result >> 10 >= *((void *)v4 + 10) >> 10)
  {
    __break(1u);
  }

  else
  {
    __int128 v6 = v4[1];
    __int128 v8 = *v4;
    __int128 v9 = v6;
    __int128 v10 = v4[2];
    sub_188DCFAC4(result, a2, a3, a4, &v7);
    return v7;
  }

  return result;
}

unint64_t *BigSubstring.subscript.getter@<X0>(unint64_t *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *result;
  unint64_t v5 = result[4];
  if (*result >> 10 >= *(void *)(v2 + 48) >> 10 && *(void *)(v2 + 80) >> 10 >= v5 >> 10)
  {
    __int128 v26 = *(_OWORD *)v2;
    __int128 v25 = *(_OWORD *)(v2 + 16);
    unint64_t v8 = result[6];
    uint64_t v7 = result[7];
    uint64_t v9 = result[5];
    unint64_t v11 = result[2];
    uint64_t v10 = result[3];
    uint64_t v12 = result[1];
    uint64_t v23 = *(void *)(v2 + 32);
    uint64_t v24 = *(void *)(v2 + 40);
    sub_188D07F48(v2);
    unint64_t v13 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v4, v12, v11, v10);
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    uint64_t v19 = v18;
    __n128 result = (unint64_t *)_s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v5, v9, v8, v7);
    *(_OWORD *)a2 = v26;
    *(_OWORD *)(a2 + 16) = v25;
    *(void *)(a2 + 32) = v23;
    *(void *)(a2 + 40) = v24;
    *(void *)(a2 + 48) = v13;
    *(void *)(a2 + 56) = v15;
    *(void *)(a2 + 64) = v17;
    *(void *)(a2 + 72) = v19;
    *(void *)(a2 + 80) = result;
    *(void *)(a2 + 88) = v20;
    *(void *)(a2 + 96) = v21;
    *(void *)(a2 + 104) = v22;
  }

  else
  {
    __break(1u);
  }

  return result;
}

unint64_t sub_188CFFC98@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = *(void *)a1;
  if (*(void *)(v2 + 48) >> 10 >= result >> 10)
  {
    __break(1u);
  }

  else
  {
    unint64_t result = sub_188D047AC( result,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  0xFFFFFFFFFFFFFFFFLL);
    *a2 = result & 0xFFFFFFFFFFFFF8FFLL | 0x300;
    a2[1] = v6;
    a2[2] = v7;
    a2[3] = v8;
  }

  return result;
}

unint64_t sub_188CFFD0C(uint64_t a1)
{
  unint64_t result = *(void *)a1;
  if (*(void *)(v1 + 48) >> 10 >= result >> 10)
  {
    __break(1u);
  }

  else
  {
    unint64_t result = sub_188D047AC( result,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  0xFFFFFFFFFFFFFFFFLL);
    *(void *)a1 = result & 0xFFFFFFFFFFFFF8FFLL | 0x300;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + 24) = v6;
  }

  return result;
}

__n128 sub_188CFFD88@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 48);
  __int128 v3 = *(_OWORD *)(v1 + 64);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 sub_188CFFD94@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 80);
  __int128 v3 = *(_OWORD *)(v1 + 96);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

unint64_t sub_188CFFDA0(void *a1, unint64_t *a2)
{
  uint64_t v5 = malloc(0x48uLL);
  *a1 = v5;
  unint64_t result = *a2;
  uint64_t v7 = a2[1];
  unint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  __int128 v10 = *(_OWORD *)(v2 + 16);
  *uint64_t v5 = *(_OWORD *)v2;
  v5[1] = v10;
  v5[2] = *(_OWORD *)(v2 + 32);
  if (result >> 10 < *(void *)(v2 + 48) >> 10 || result >> 10 >= *(void *)(v2 + 80) >> 10)
  {
    __break(1u);
  }

  else
  {
    sub_188DCFAC4(result, v7, v8, v9, &v13);
    uint64_t v11 = v13;
    uint64_t v12 = v14;
    *((void *)v5 + 8) = v14;
    *((void *)v5 + 6) = v11;
    *((void *)v5 + 7) = v12;
    return (unint64_t)sub_188CFFE40;
  }

  return result;
}

void sub_188CFFE40(void **a1)
{
  uint64_t v1 = *a1;
  swift_bridgeObjectRelease();
  free(v1);
}

unint64_t *sub_188CFFE68@<X0>(unint64_t *result@<X0>, void *a2@<X8>)
{
  unint64_t v4 = *result;
  unint64_t v5 = result[4];
  if (*result >> 10 >= (unint64_t)v2[6] >> 10 && (unint64_t)v2[10] >> 10 >= v5 >> 10)
  {
    uint64_t v26 = v2[4];
    uint64_t v27 = v2[5];
    uint64_t v7 = v2[2];
    uint64_t v8 = *v2;
    uint64_t v9 = v2[1];
    uint64_t v28 = result[7];
    unint64_t v24 = result[6];
    uint64_t v25 = v2[3];
    uint64_t v23 = result[5];
    unint64_t v11 = result[2];
    uint64_t v10 = result[3];
    uint64_t v12 = result[1];
    swift_unknownObjectRetain();
    unint64_t v13 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v4, v12, v11, v10);
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    uint64_t v19 = v18;
    unint64_t result = (unint64_t *)_s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0( v5,  v23,  v24,  v28);
    *a2 = v8;
    a2[1] = v9;
    a2[2] = v7;
    a2[3] = v25;
    a2[4] = v26;
    a2[5] = v27;
    a2[6] = v13;
    a2[7] = v15;
    a2[8] = v17;
    a2[9] = v19;
    a2[10] = result;
    a2[11] = v20;
    a2[12] = v21;
    a2[13] = v22;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_188CFFF80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 48);
  uint64_t v3 = *(void *)(v1 + 56);
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = *(void *)(v1 + 72);
  uint64_t v6 = *(void *)(v1 + 80);
  uint64_t v7 = *(void *)(v1 + 88);
  uint64_t v8 = *(void *)(v1 + 96);
  uint64_t v9 = *(void *)(v1 + 104);
  __int128 v10 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v3;
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 72) = v5;
  *(void *)(a1 + 80) = v6;
  *(void *)(a1 + 88) = v7;
  *(void *)(a1 + 96) = v8;
  *(void *)(a1 + 104) = v9;
  *(void *)(a1 + 112) = v2;
  *(void *)(a1 + 120) = v3;
  *(void *)(a1 + 128) = v4;
  *(void *)(a1 + 136) = v5;
  *(void *)(a1 + 144) = v6;
  *(void *)(a1 + 152) = v7;
  *(void *)(a1 + 160) = v8;
  *(void *)(a1 + 168) = v9;
  return swift_unknownObjectRetain();
}

BOOL sub_188CFFFC8()
{
  return (*(void *)(v0 + 80) ^ *(void *)(v0 + 48)) < 0x400uLL;
}

unint64_t sub_188CFFFE0()
{
  unint64_t result = v0[6];
  unint64_t v2 = v0[10];
  if (v2 >> 10 >= result >> 10) {
    return _s19CollectionsInternal9BigStringV8distance4from2toSiAC5IndexV_AHtF_0( result,  v0[7],  v0[8],  v0[9],  v2,  v0[11],  v0[12],  v0[13]);
  }
  __break(1u);
  return result;
}

void sub_188D00040(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  a1[3] = 3LL;
}

unint64_t sub_188D00050@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result = *(void *)a1;
  unint64_t v7 = *(void *)(v3 + 48) >> 10;
  unint64_t v8 = *(void *)(v3 + 80) >> 10;
  if (result >> 10 >= v7 && v8 >= result >> 10)
  {
    unint64_t result = sub_188D047AC(result, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
    unint64_t v13 = (result & 0xFFFFFFFFFFFFF8FFLL) >> 10;
    if (v13 >= v7 && v8 >= v13)
    {
      *a3 = result & 0xFFFFFFFFFFFFF8FFLL | 0x300;
      a3[1] = v10;
      a3[2] = v11;
      a3[3] = v12;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

unint64_t sub_188D000F0@<X0>( uint64_t a1@<X0>, int64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t result = *(void *)a1;
  unint64_t v8 = *(void *)(v4 + 48) >> 10;
  if (result >> 10 < v8 || (unint64_t v9 = *(void *)(v4 + 80) >> 10, v9 < result >> 10))
  {
    __break(1u);
  }

  else
  {
    unint64_t result = BigString.index(_:offsetBy:limitedBy:)( result,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  a2,  *(void *)a3,  *(void *)(a3 + 8),  *(void *)(a3 + 16),  *(void *)(a3 + 24));
    if (v12 == 2 || result >> 10 >= v8 && v9 >= result >> 10)
    {
      *a4 = result;
      a4[1] = v10;
      a4[2] = v11;
      a4[3] = v12;
      return result;
    }
  }

  __break(1u);
  return result;
}

unint64_t sub_188D001A8(uint64_t a1, uint64_t a2)
{
  unint64_t result = *(void *)a1;
  unint64_t v5 = *(void *)a2;
  unint64_t v6 = *(void *)(v2 + 80) >> 10;
  if (v6 >= *(void *)a2 >> 10)
  {
    unint64_t v7 = *(void *)(v2 + 48) >> 10;
    if (v5 >> 10 >= v7 && result >> 10 >= v7 && v6 >= result >> 10) {
      return _s19CollectionsInternal9BigStringV8distance4from2toSiAC5IndexV_AHtF_0( result,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  v5,  *(void *)(a2 + 8),  *(void *)(a2 + 16),  *(void *)(a2 + 24));
    }
  }

  __break(1u);
  return result;
}

void *sub_188D00238(void *result, void *a2)
{
  unint64_t v2 = *result >> 10;
  if (v2 < *a2 >> 10 || v2 >= a2[4] >> 10) {
    __break(1u);
  }
  return result;
}

void *sub_188D00260(void *result, void *a2)
{
  unint64_t v2 = *result >> 10;
  if (v2 < *a2 >> 10 || a2[4] >> 10 < v2) {
    __break(1u);
  }
  return result;
}

void *sub_188D00288(void *result, void *a2)
{
  if (*result >> 10 < *a2 >> 10 || a2[4] >> 10 < result[4] >> 10) {
    __break(1u);
  }
  return result;
}

unint64_t sub_188D002B8@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = *(void *)a1;
  if (result >> 10 >= *(void *)(v2 + 80) >> 10)
  {
    __break(1u);
  }

  else
  {
    unint64_t result = sub_188D047AC(result, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), 1uLL);
    *a2 = result & 0xFFFFFFFFFFFFF8FFLL | 0x300;
    a2[1] = v6;
    a2[2] = v7;
    a2[3] = v8;
  }

  return result;
}

unint64_t sub_188D0032C(uint64_t a1)
{
  unint64_t result = *(void *)a1;
  if (result >> 10 >= *(void *)(v1 + 80) >> 10)
  {
    __break(1u);
  }

  else
  {
    unint64_t result = sub_188D047AC(result, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), 1uLL);
    *(void *)a1 = result & 0xFFFFFFFFFFFFF8FFLL | 0x300;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + 24) = v6;
  }

  return result;
}

unint64_t BigSubstring.index(roundingDown:)( unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (result >> 10 >= *(void *)(v4 + 48) >> 10 && *(void *)(v4 + 80) >> 10 >= result >> 10) {
    return _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(result, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t BigSubstring.index(roundingUp:)( unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5 = result >> 10;
  if (result >> 10 >= *(void *)(v4 + 48) >> 10 && *(void *)(v4 + 80) >> 10 >= v5)
  {
    unint64_t result = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(result, a2, a3, a4);
    if (v5 != result >> 10) {
      return sub_188D047AC(result, v7, v8, v9, 1uLL) & 0xFFFFFFFFFFFFF8FFLL | 0x300;
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_188D00468(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 32);
  if (*(void *)result) {
    uint64_t v5 = *(void *)(result + 32);
  }
  else {
    uint64_t v5 = 0LL;
  }
  uint64_t v6 = v5 - a2;
  if (__OFSUB__(v5, a2))
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v8 = result;
  uint64_t v9 = *(void *)(result + 24);
  uint64_t v10 = *(void *)(result + 40);
  uint64_t v29 = *(void *)result;
  __int128 v30 = *(_OWORD *)(result + 8);
  uint64_t v31 = v9;
  uint64_t v32 = v4;
  uint64_t v33 = v10;
  unint64_t v11 = a3 << 11;
  swift_unknownObjectRetain();
  unint64_t v12 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v11, 0LL, 0LL, 1LL);
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  unint64_t result = swift_unknownObjectRelease();
  __int128 v19 = *(_OWORD *)(v8 + 16);
  v28[0] = *(_OWORD *)v8;
  v28[1] = v19;
  v28[2] = *(_OWORD *)(v8 + 32);
  if (__OFADD__(a4, v6))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  __int128 v20 = *(_OWORD *)(v8 + 16);
  v34[0] = *(_OWORD *)v8;
  v34[1] = v20;
  v34[2] = *(_OWORD *)(v8 + 32);
  sub_188D011B8((uint64_t)v34, (uint64_t)v35);
  sub_188D07F48((uint64_t)v35);
  unint64_t v21 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0((a4 + v6) << 11, 0LL, 0LL, 1LL);
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  unint64_t result = sub_188D087F8((uint64_t)v28);
  if (v21 >> 10 >= v12 >> 10)
  {
    *(void *)(v8 + 48) = v12;
    *(void *)(v8 + 56) = v14;
    *(void *)(v8 + 64) = v16;
    *(void *)(v8 + 72) = v18;
    *(void *)(v8 + 80) = v21;
    *(void *)(v8 + 88) = v23;
    *(void *)(v8 + 96) = v25;
    *(void *)(v8 + 104) = v27;
    return result;
  }

LABEL_10:
  __break(1u);
  return result;
}

  uint64_t v32 = v3 >> 10;
  uint64_t v33 = v16 >> 10;
  if (v3 >> 10 >= v16 >> 10) {
    goto LABEL_25;
  }
  if (((result >> 10) & 1) == ((v16 & 0x400) == 0)) {
    goto LABEL_24;
  }
  if ((result & 0x400) == 0)
  {
LABEL_21:
    uint64_t v45 = *(_OWORD *)(a1 + 16);
    v83[0] = *(_OWORD *)a1;
    v83[1] = v45;
    v83[2] = *(_OWORD *)(a1 + 32);
    v84[0] = v2;
    v84[1] = v6;
    v84[2] = v7;
    v84[3] = v9;
    v84[4] = result;
    v84[5] = v10;
    v84[6] = v11;
    v84[7] = v12;
    uint64_t v46 = *a2;
    unint64_t v47 = a2[2];
    v82[1] = a2[1];
    v82[2] = v47;
    v82[0] = v46;
    if (v33 >= v32 && v21 >= v31)
    {
      v85[0] = v3;
      v85[1] = v13;
      v85[2] = v14;
      v85[3] = v15;
      v85[4] = v16;
      v85[5] = v17;
      v85[6] = v19;
      v85[7] = v20;
      int8x8_t v48 = sub_188D9769C((uint64_t *)v83, v84, (uint64_t *)v82, v85);
      return v48 & 1;
    }

    goto LABEL_32;
  }

  uint64_t v56 = v13;
  uint64_t v58 = v16 >> 10;
  uint64_t v50 = v9;
  uint64_t v52 = v7;
  uint64_t v54 = v6;
  uint64_t v75 = v15;
  int v77 = v14;
  uint64_t v79 = v16;
  uint64_t v62 = v18;
  uint64_t v64 = v21;
  if (v18 >= v21)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

  uint64_t v34 = *(_OWORD *)(a1 + 16);
  v83[6] = *(_OWORD *)a1;
  v83[7] = v34;
  v83[8] = *(_OWORD *)(a1 + 32);
  unint64_t result = sub_188D05DA8(result, v10, v11, v12, 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v71 = v36;
  uint8x8_t v73 = v35;
  uint64_t v69 = v37;
  if (v81 < v58)
  {
    uint64_t v38 = result;
    __int128 v39 = a2[1];
    v83[3] = *a2;
    v83[4] = v39;
    v83[5] = a2[2];
    unint64_t result = sub_188D05DA8(v79, v17, v19, v20, 0xFFFFFFFFFFFFFFFFLL);
    uint64_t v80 = result;
    uint64_t v67 = v42;
    if (v38 >> 10 < v62 || v38 >> 10 >= v64) {
      goto LABEL_35;
    }
    uint8x8_t v43 = v40;
    __int128 v20 = v41;
    unsigned int v44 = v38;
    unint64_t v21 = v38 >> 10;
    uint64_t v60 = v44;
    char v65 = sub_188DCF86C(v44, v73, v71, v69);
    unint64_t result = v80;
    if (v80 >> 10 < v81 || v80 >> 10 >= v58) {
      goto LABEL_36;
    }
    if (v65 == (unsigned __int16)sub_188DCF86C(v80, v67, v43, v20))
    {
      uint64_t v33 = v80 >> 10;
      uint64_t v6 = v54;
      uint64_t v13 = v56;
      uint64_t v14 = v77;
      uint64_t v16 = v80;
      uint64_t v10 = v73;
      uint64_t v15 = v75;
      __int128 v19 = v43;
      uint64_t v17 = v67;
      unint64_t v12 = v69;
      uint64_t v9 = v50;
      unint64_t v7 = v52;
      unint64_t result = v60;
      unint64_t v11 = v71;
      uint64_t v32 = v3 >> 10;
      goto LABEL_21;
    }

      __break(1u);
      goto LABEL_11;
    }

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = sub_188CF73DC((uint64_t)v6);
  }
  uint64_t v10 = *((void *)v6 + 2);
  unint64_t v11 = v6 + 32;
  unint64_t v12 = 1LL << v3;
  if ((v5 & 1) != 0) {
    uint64_t v13 = *(void *)&v11[8 * v4] | v12;
  }
  else {
    uint64_t v13 = *(void *)&v11[8 * v4] & ~v12;
  }
  *(void *)&v11[8 * v4] = v13;
  uint64_t v14 = v4 == v10 - 1;
  *uint64_t v2 = (uint64_t)v6;
  return sub_188D8FB84(&v14, v2);
}

  __break(1u);
  return result;
}

        uint64_t v49 = 0;
        uint64_t v22 = a3;
        uint64_t v23 = a4;
        uint64_t v24 = v62;
        goto LABEL_11;
      }

      a6 = v57;
      unint64_t v21 = v59;
      if (__OFADD__(v56, 1LL))
      {
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }

      *uint64_t v64 = v56 + 1;
      if (__OFADD__(*v20, 1LL)) {
        goto LABEL_33;
      }
      ++*v20;
    }

    else
    {
      uint64_t v49 = 1;
      a1 = v61;
      uint64_t v22 = v61;
      uint64_t v23 = a2;
      uint64_t v24 = v63;
      unint64_t v21 = v59;
      uint64_t v25 = v59;
      uint64_t v26 = a3;
      uint64_t v27 = a4;
LABEL_15:
      uint64_t v28 = a5;
      a6 = v57;
LABEL_5:
      sub_188DA5B34(v22, v23, v24, v25, v26, v27, v28, a6, v49);
    }
  }

  unsigned int v44 = v52;
  swift_beginAccess();
  char v65 = *v44;
  uint64_t v45 = sub_188DF8120();
  swift_bridgeObjectRetain();
  MEMORY[0x1895D7620](MEMORY[0x189618488], v45);
  uint64_t v46 = v54;
  sub_188DF884C();
  unint64_t v47 = v55;
  int8x8_t v48 = *(void *)(v55 - 8);
  unint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1LL, v55);
  if ((_DWORD)result != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v48 + 32))(v51, v46, v47);
    swift_release();
    swift_release();
    return swift_release();
  }

      (*(void (**)(char *, uint64_t))(v64 + 8))(v74, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v71 + 8))(v67, a5);
      v90[0] = v98[0];
      *(_OWORD *)((char *)v90 + 11) = *(_OWORD *)((char *)v98 + 11);
      uint64_t v85 = v93;
      unsigned int v86 = v94;
      uint64_t v88 = v96;
      uint64_t v89 = v97;
      uint64_t v87 = v95;
      BOOL v83 = v91;
      uint64_t v84 = v92;
      sub_188CFE7A8((uint64_t)&v83);
      swift_release();
    }

    else
    {
      int8x8_t v48 = v35;
      MEMORY[0x1895F8858](v35);
      *(&v58 - 8) = a5;
      *(&v58 - 7) = a6;
      *(&v58 - 6) = v61;
      *(&v58 - 5) = v34;
      uint64_t v49 = v80;
      *(&v58 - 4) = v79;
      *(&v58 - 3) = v49;
      *(&v58 - 2) = v78;
      if ((sub_188DF8018() & 1) == 0)
      {
        (*(void (**)(char *, uint64_t))(v71 + 8))(v67, a5);
        v90[0] = v98[0];
        *(_OWORD *)((char *)v90 + 11) = *(_OWORD *)((char *)v98 + 11);
        uint64_t v85 = v93;
        unsigned int v86 = v94;
        uint64_t v88 = v96;
        uint64_t v89 = v97;
        uint64_t v87 = v95;
        BOOL v83 = v91;
        uint64_t v84 = v92;
        sub_188CFE7A8((uint64_t)&v83);
        goto LABEL_4;
      }

      if ((v48 & 1) != 0)
      {
        uint64_t v51 = v71;
        uint64_t v53 = v62;
        uint64_t v52 = (uint64_t)v63;
        while (1)
        {
          TreeSet.Iterator.next()(v68, v52);
          v73(v53, (char *)v52, a5);
          uint64_t v54 = sub_188DF8084();
          uint64_t v55 = *(void (**)(char *, uint64_t))(v51 + 8);
          v55(v53, a5);
          if ((v54 & 1) == 0)
          {
            v55(v67, a5);
            uint64_t v50 = v96;
            uint64_t v89 = v97;
            v90[0] = v98[0];
            *(_OWORD *)((char *)v90 + 11) = *(_OWORD *)((char *)v98 + 11);
            uint64_t v85 = v93;
            unsigned int v86 = v94;
            goto LABEL_24;
          }
        }

        (*(void (**)(char *, uint64_t))(v51 + 8))(v67, a5);
        v90[0] = v98[0];
        *(_OWORD *)((char *)v90 + 11) = *(_OWORD *)((char *)v98 + 11);
        uint64_t v85 = v93;
        unsigned int v86 = v94;
        uint64_t v88 = v96;
        uint64_t v89 = v97;
        uint64_t v87 = v95;
        BOOL v83 = v91;
        uint64_t v84 = v92;
        sub_188CFE7A8((uint64_t)&v83);
        (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v52, v70);
        goto LABEL_4;
      }

      (*(void (**)(char *, uint64_t))(v71 + 8))(v67, a5);
      uint64_t v89 = v97;
      v90[0] = v98[0];
      *(_OWORD *)((char *)v90 + 11) = *(_OWORD *)((char *)v98 + 11);
      uint64_t v85 = v93;
      unsigned int v86 = v94;
      uint64_t v50 = v96;
LABEL_24:
      uint64_t v87 = v95;
      uint64_t v88 = v50;
      BOOL v83 = v91;
      uint64_t v84 = v92;
      sub_188CFE7A8((uint64_t)&v83);
    }

    uint64_t v33 = 1;
    return v33 & 1;
  }

  v90[0] = v98[0];
  *(_OWORD *)((char *)v90 + 11) = *(_OWORD *)((char *)v98 + 11);
  uint64_t v85 = v93;
  unsigned int v86 = v94;
  uint64_t v88 = v96;
  uint64_t v89 = v97;
  uint64_t v87 = v95;
  BOOL v83 = v91;
  uint64_t v84 = v92;
  sub_188CFE7A8((uint64_t)&v83);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v19, v70);
LABEL_4:
  uint64_t v33 = 0;
  return v33 & 1;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  uint64_t v8 = (_BYTE *)v2;
  uint64_t v9 = v5;
LABEL_13:
  result.value = (Swift::Int)v8;
  result.is_nil = v9;
  return result;
}

  uint64_t v31 = v34;
  if (a1)
  {
LABEL_20:
    __break(1u);
    return result;
  }

  uint64_t v32 = Rope._UnsafeHandle.childCount.getter(v43);
  uint64_t v25 = v32;
  if ((v31 & 1) != 0)
  {
    uint64_t v25 = v32 - 1;
    if (__OFSUB__(v32, 1LL)) {
      __break(1u);
    }
  }

  return v25;
}

  uint64_t v9 = (unint64_t)result[2];
  if ((v9 & 0x3F) != 0) {
    *(uint64_t *)((char *)v2->i64 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= ~(-1LL << (v9 & 0x3F));
  }
  return result;
}

double BigSubstring.init()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v4 = 0LL;
  MEMORY[0x1895D76E0](&v4, 8LL);
  uint64_t v2 = v4;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = v2;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 48) = 768LL;
  *(void *)&double result = 1LL;
  *(_OWORD *)(a1 + 72) = xmmword_188DF9310;
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 104) = 1LL;
  return result;
}

uint64_t BigSubstring.replaceSubrange<A>(_:with:)(unint64_t *a1, uint64_t a2, ValueMetadata *a3)
{
  return (*((uint64_t (**)(uint64_t, ValueMetadata *))a3[-1].Description + 1))(a2, a3);
}

uint64_t sub_188D00660(uint64_t a1, unint64_t *a2, uint64_t a3, ValueMetadata *a4)
{
  unint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v7, v9, v10);
  return BigString.replaceSubrange<A>(_:with:)(a2, (uint64_t)v7, a4);
}

__n128 BigSubstring.init(repeating:count:)@<Q0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v6 = v11[5];
  *(_OWORD *)(a4 + 64) = v11[4];
  *(_OWORD *)(a4 + 80) = v6;
  *(_OWORD *)(a4 + 96) = v11[6];
  __int128 v7 = v11[1];
  *(_OWORD *)a4 = v11[0];
  *(_OWORD *)(a4 + 16) = v7;
  __n128 result = (__n128)v11[3];
  *(_OWORD *)(a4 + 32) = v11[2];
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 BigSubstring.init<A>(repeating:count:)@<Q0>( uint64_t a1@<X0>, uint64_t a2@<X1>, ValueMetadata *a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v7 = v11[5];
  *(_OWORD *)(a4 + 64) = v11[4];
  *(_OWORD *)(a4 + 80) = v7;
  *(_OWORD *)(a4 + 96) = v11[6];
  __int128 v8 = v11[1];
  *(_OWORD *)a4 = v11[0];
  *(_OWORD *)(a4 + 16) = v8;
  __n128 result = (__n128)v11[3];
  *(_OWORD *)(a4 + 32) = v11[2];
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 BigSubstring.init(repeating:count:)@<Q0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v6 = v10[5];
  *(_OWORD *)(a3 + 64) = v10[4];
  *(_OWORD *)(a3 + 80) = v6;
  *(_OWORD *)(a3 + 96) = v10[6];
  __int128 v7 = v10[1];
  *(_OWORD *)a3 = v10[0];
  *(_OWORD *)(a3 + 16) = v7;
  __n128 result = (__n128)v10[3];
  *(_OWORD *)(a3 + 32) = v10[2];
  *(__n128 *)(a3 + 48) = result;
  return result;
}

{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14[3];
  _BYTE v15[48];
  _OWORD v16[7];
  _OWORD v17[4];
  __int128 v18[3];
  __int128 v6 = a1[1];
  v18[0] = *a1;
  v18[1] = v6;
  __int128 v7 = a1[3];
  v18[2] = a1[2];
  __int128 v8 = a1[4];
  uint64_t v9 = a1[5];
  v17[0] = v7;
  v17[1] = v8;
  uint64_t v10 = a1[6];
  v17[2] = v9;
  v17[3] = v10;
  sub_188D07F48((uint64_t)a1);
  sub_188DDEAD8(v18, (unint64_t *)v17, v14);
  sub_188D9461C(v14, a2, (uint64_t)v15);
  sub_188D08238((uint64_t)v15, v16);
  sub_188D087F8((uint64_t)v15);
  sub_188D087F8((uint64_t)a1);
  unint64_t v11 = v16[5];
  *(_OWORD *)(a3 + 64) = v16[4];
  *(_OWORD *)(a3 + 80) = v11;
  *(_OWORD *)(a3 + 96) = v16[6];
  uint64_t v12 = v16[1];
  *(_OWORD *)a3 = v16[0];
  *(_OWORD *)(a3 + 16) = v12;
  __n128 result = (__n128)v16[3];
  *(_OWORD *)(a3 + 32) = v16[2];
  *(__n128 *)(a3 + 48) = result;
  return result;
}

Swift::Void __swiftcall BigSubstring.append(_:)(Swift::String a1)
{
  unint64_t v2 = v1[10];
  unint64_t v3 = v1[6];
  if (v2 >> 10 < v3 >> 10)
  {
    __break(1u);
  }

  else
  {
    object = a1._object;
    uint64_t countAndFlagsBits = a1._countAndFlagsBits;
    unint64_t v7 = v1[12];
    unint64_t v6 = v1[13];
    uint64_t v8 = v1[11];
    uint64_t v9 = v3 >> 11;
    if (*v1) {
      uint64_t v10 = v1[4];
    }
    else {
      uint64_t v10 = 0LL;
    }
    swift_bridgeObjectRetain();
    BigString.insert(contentsOf:at:)(countAndFlagsBits, (uint64_t)object, v2, v8, v7, v6);
    sub_188D00468((uint64_t)v1, v10, v9, v2 >> 11);
  }

uint64_t BigSubstring.append<A>(contentsOf:)(uint64_t a1, ValueMetadata *a2)
{
  return (*((uint64_t (**)(uint64_t, ValueMetadata *))a2[-1].Description + 1))(a1, a2);
}

uint64_t BigSubstring.insert(_:at:)( uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t v7 = v6[6];
  if (a3 >> 10 < v7 >> 10)
  {
    __break(1u);
    goto LABEL_8;
  }

  unint64_t v8 = v6[10];
  if (a3 >> 10 > v8 >> 10)
  {
LABEL_8:
    __break(1u);
    return result;
  }

  uint64_t v14 = result;
  uint64_t v15 = v7 >> 11;
  uint64_t v16 = v8 >> 11;
  if (*v6) {
    uint64_t v17 = v6[4];
  }
  else {
    uint64_t v17 = 0LL;
  }
  swift_bridgeObjectRetain();
  BigString.insert(contentsOf:at:)(v14, a2, a3, a4, a5, a6);
  return sub_188D00468((uint64_t)v6, v17, v15, v16);
}

uint64_t BigSubstring.insert<A>(contentsOf:at:)( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, ValueMetadata *a6)
{
  return (*((uint64_t (**)(uint64_t, ValueMetadata *))a6[-1].Description + 1))(a1, a6);
}

unint64_t BigSubstring.remove(at:)( unint64_t result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  __int128 v5 = *(_OWORD *)(v4 + 32);
  __int128 v35 = *(_OWORD *)(v4 + 16);
  __int128 v36 = v5;
  __int128 v34 = *(_OWORD *)v4;
  unint64_t v6 = *(void *)(v4 + 80);
  unint64_t v7 = result >> 10;
  if (result >> 10 >= v6 >> 10)
  {
    __break(1u);
    goto LABEL_14;
  }

  unint64_t v11 = result;
  uint64_t v29 = v34;
  __n128 result = sub_188D047AC(result, a2, a3, a4, 1uLL);
  unint64_t v12 = (result >> 10) & 0x3FFFFFFFFFFFFELL;
  if (v12 < v7)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v28 = v36;
  unint64_t v13 = *(void *)(v4 + 48);
  if (v6 >> 10 < v12 || v7 < v13 >> 10) {
    goto LABEL_15;
  }
  unint64_t v15 = sub_188D097FC(v11, a2, a3, a4, 0);
  uint64_t v17 = v16;
  unint64_t v19 = v18;
  uint64_t v21 = v20;
  __n128 result = sub_188DCFAC4(v15, v16, v18, v20, v30);
  __int128 v24 = v31;
  if ((unint64_t)v31 >> 10 < v15 >> 10)
  {
LABEL_16:
    __break(1u);
    return result;
  }

  uint64_t v27 = v30[0];
  __int128 v25 = v32;
  if (v29) {
    uint64_t v26 = v28;
  }
  else {
    uint64_t v26 = 0LL;
  }
  v30[0] = v15;
  v30[1] = v17;
  *(void *)&__int128 v31 = v19;
  *((void *)&v31 + 1) = v21;
  __int128 v32 = v24;
  __int128 v33 = v25;
  sub_188D8539C((unint64_t *)v30, v22, v23);
  sub_188D00468(v4, v26, v13 >> 11, v6 >> 11);
  return v27;
}

unint64_t *BigSubstring.removeSubrange(_:)(unint64_t *result, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = v3[6];
  if (*result >> 10 < v4 >> 10)
  {
    __break(1u);
    goto LABEL_8;
  }

  unint64_t v5 = v3[10];
  if (v5 >> 10 < result[4] >> 10)
  {
LABEL_8:
    __break(1u);
    return result;
  }

  uint64_t v6 = v4 >> 11;
  uint64_t v7 = v5 >> 11;
  if (*v3) {
    uint64_t v8 = v3[4];
  }
  else {
    uint64_t v8 = 0LL;
  }
  BigString.removeSubrange(_:)(result, a2, a3);
  return (unint64_t *)sub_188D00468((uint64_t)v3, v8, v6, v7);
}

Swift::Void __swiftcall BigSubstring.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  __int128 v4 = *(_OWORD *)(v3 + 64);
  v9[0] = *(_OWORD *)(v3 + 48);
  v9[1] = v4;
  __int128 v5 = *(_OWORD *)(v3 + 96);
  __int128 v10 = *(_OWORD *)(v3 + 80);
  __int128 v11 = v5;
  uint64_t v6 = *(void *)&v9[0] >> 11;
  unint64_t v7 = (unint64_t)v10 >> 11;
  if (*(void *)v3) {
    uint64_t v8 = *(void *)(v3 + 32);
  }
  else {
    uint64_t v8 = 0LL;
  }
  BigString.removeSubrange(_:)((unint64_t *)v9, v1, v2);
  sub_188D00468(v3, v8, v6, v7);
}

double sub_188D00D60@<D0>(uint64_t a1@<X8>)
{
  uint64_t v4 = 0LL;
  MEMORY[0x1895D76E0](&v4, 8LL);
  uint64_t v2 = v4;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = v2;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 48) = 768LL;
  *(void *)&double result = 1LL;
  *(_OWORD *)(a1 + 72) = xmmword_188DF9310;
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 104) = 1LL;
  return result;
}

uint64_t sub_188D00DC8(_OWORD *a1, uint64_t a2, ValueMetadata *a3)
{
  __int128 v5 = a1[1];
  v8[0] = *a1;
  v8[1] = v5;
  __int128 v6 = a1[3];
  v8[2] = a1[2];
  _OWORD v8[3] = v6;
  sub_188D08870((unint64_t *)v8, a2, a3);
  return (*((uint64_t (**)(uint64_t, ValueMetadata *))a3[-1].Description + 1))(a2, a3);
}

__n128 sub_188D00E24@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5 = v10[5];
  *(_OWORD *)(a3 + 64) = v10[4];
  *(_OWORD *)(a3 + 80) = v5;
  *(_OWORD *)(a3 + 96) = v10[6];
  __int128 v6 = v10[1];
  *(_OWORD *)a3 = v10[0];
  *(_OWORD *)(a3 + 16) = v6;
  __n128 result = (__n128)v10[3];
  *(_OWORD *)(a3 + 32) = v10[2];
  *(__n128 *)(a3 + 48) = result;
  return result;
}

__n128 sub_188D00EA0@<Q0>(uint64_t a1@<X0>, ValueMetadata *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v6 = v9[5];
  *(_OWORD *)(a3 + 64) = v9[4];
  *(_OWORD *)(a3 + 80) = v6;
  *(_OWORD *)(a3 + 96) = v9[6];
  __int128 v7 = v9[1];
  *(_OWORD *)a3 = v9[0];
  *(_OWORD *)(a3 + 16) = v7;
  __n128 result = (__n128)v9[3];
  *(_OWORD *)(a3 + 32) = v9[2];
  *(__n128 *)(a3 + 48) = result;
  return result;
}

uint64_t *sub_188D00F10(uint64_t *result)
{
  unint64_t v2 = v1[10];
  unint64_t v3 = v1[6];
  if (v2 >> 10 < v3 >> 10)
  {
    __break(1u);
  }

  else
  {
    unint64_t v5 = v1[12];
    unint64_t v4 = v1[13];
    uint64_t v6 = v1[11];
    uint64_t v8 = *result;
    uint64_t v7 = result[1];
    uint64_t v9 = v3 >> 11;
    if (*v1) {
      uint64_t v10 = v1[4];
    }
    else {
      uint64_t v10 = 0LL;
    }
    swift_bridgeObjectRetain();
    BigString.insert(contentsOf:at:)(v8, v7, v2, v6, v5, v4);
    sub_188D00468((uint64_t)v1, v10, v9, v2 >> 11);
    return (uint64_t *)swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_188D00FC0(uint64_t a1, ValueMetadata *a2)
{
  return (*((uint64_t (**)(uint64_t, ValueMetadata *))a2[-1].Description + 1))(a1, a2);
}

uint64_t sub_188D00FFC(uint64_t *a1, uint64_t a2)
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_188D01030(uint64_t a1, uint64_t a2, ValueMetadata *a3)
{
  return (*((uint64_t (**)(uint64_t, ValueMetadata *))a3[-1].Description + 1))(a1, a3);
}

unint64_t sub_188D01084@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = BigSubstring.remove(at:)(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
  *a2 = result;
  a2[1] = v4;
  return result;
}

unint64_t *sub_188D010B4(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  __int128 v3 = a1[1];
  v6[0] = *a1;
  v6[1] = v3;
  __int128 v4 = a1[3];
  v6[2] = a1[2];
  _OWORD v6[3] = v4;
  return BigSubstring.removeSubrange(_:)((unint64_t *)v6, a2, a3);
}

void sub_188D010E4(void *a1@<X8>)
{
  *a1 = v2;
  a1[1] = v3;
}

void sub_188D0110C(void *a1@<X8>)
{
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_188D01134(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4 = *(_OWORD *)(v3 + 64);
  v10[0] = *(_OWORD *)(v3 + 48);
  v10[1] = v4;
  __int128 v5 = *(_OWORD *)(v3 + 96);
  __int128 v11 = *(_OWORD *)(v3 + 80);
  __int128 v12 = v5;
  uint64_t v6 = *(void *)&v10[0] >> 11;
  unint64_t v7 = (unint64_t)v11 >> 11;
  if (*(void *)v3) {
    uint64_t v8 = *(void *)(v3 + 32);
  }
  else {
    uint64_t v8 = 0LL;
  }
  BigString.removeSubrange(_:)((unint64_t *)v10, a2, a3);
  return sub_188D00468(v3, v8, v6, v7);
}

uint64_t sub_188D011A4(uint64_t (*a1)(void *), uint64_t a2)
{
  return sub_188DC6068(a1, a2);
}

uint64_t sub_188D011B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(qword_18C4FAFB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_188D01200( uint64_t result, void (*a2)(uint64_t *, void *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v15 = result;
  uint64_t v7 = a5 - a4;
  if (a5 != a4)
  {
    for (uint64_t i = a6 + 24 * a4 + 21; ; i += 24LL)
    {
      uint64_t v10 = *(void *)(i - 13);
      __int16 v11 = *(_WORD *)(i - 1);
      v12[0] = *(void *)(i - 21);
      v12[1] = v10;
      int v13 = *(_DWORD *)(i - 5);
      __int16 v14 = v11;
      swift_bridgeObjectRetain();
      a2(&v15, v12);
      unint64_t result = swift_bridgeObjectRelease();
      if (v6) {
        break;
      }
      if (!--v7) {
        return v15;
      }
    }
  }

  return result;
}

uint64_t sub_188D012B0( uint64_t result, void (*a2)(uint64_t *, uint64_t *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = result;
  uint64_t v7 = a5 - a4;
  if (a5 != a4)
  {
    for (uint64_t i = (uint64_t *)(a6 + 40 * a4); ; i += 5)
    {
      uint64_t v10 = *i;
      __int128 v11 = *(_OWORD *)(i + 1);
      __int128 v12 = *(_OWORD *)(i + 3);
      swift_unknownObjectRetain();
      a2(&v13, &v10);
      unint64_t result = swift_unknownObjectRelease();
      if (v6) {
        break;
      }
      if (!--v7) {
        return v13;
      }
    }
  }

  return result;
}

uint64_t sub_188D01358( uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t (*a7)(unint64_t, unint64_t, uint64_t, uint64_t), uint64_t (*a8)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t))
{
  uint64_t v9 = v8[5];
  if (v9 != result || v9 != a4)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  if (a2 == a5) {
    return 0LL;
  }
  uint64_t v14 = (uint64_t)v8;
  uint64_t v15 = result;
  unint64_t result = *v8;
  if (!*v8) {
    goto LABEL_17;
  }
  if (a3 && a6 && a3 == a6)
  {
    char v22 = (4 * *(_BYTE *)(a3 + 18) + 8) & 0x3C;
    return a7((a2 >> v22) & 0xF, (a5 >> v22) & 0xF, a3 + 16, a3 + 24);
  }

  if (a2 < a5)
  {
    swift_unknownObjectRetain();
    uint64_t v13 = a8(v15, a2, a3, a4, a5, a6);
    sub_188D087F8(v14);
    return v13;
  }

  swift_unknownObjectRetain();
  uint64_t v20 = a8(a4, a5, a6, v15, a2, a3);
  unint64_t result = sub_188D087F8(v14);
  BOOL v21 = __OFSUB__(0LL, v20);
  uint64_t v13 = -v20;
  if (!v21) {
    return v13;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_188D014DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a1;
  uint64_t v7 = a2 - a1;
  BOOL v6 = a2 == a1;
  if (a2 < a1)
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v11 = sub_188D012B0(0LL, (void (*)(uint64_t *, uint64_t *))sub_188D09314, (uint64_t)&v16, v8, v9, v10);
    BOOL v12 = __OFSUB__(0LL, v11);
    uint64_t result = -v11;
    BOOL v6 = result == 0;
    if (!v12) {
      return result;
    }
    __break(1u);
  }

  uint64_t result = 0LL;
  if (!v6)
  {
    uint64_t v14 = (uint64_t *)(v4 + 40 * v5 + 32);
    while (1)
    {
      uint64_t v15 = *v14;
      v14 += 5;
      BOOL v12 = __OFADD__(result, v15);
      result += v15;
      if (v12) {
        break;
      }
      if (!--v7) {
        return result;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_188D01588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a1;
  uint64_t v7 = a2 - a1;
  BOOL v6 = a2 == a1;
  if (a2 < a1)
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v11 = sub_188D01200(0LL, (void (*)(uint64_t *, void *))sub_188D09300, (uint64_t)&v16, v8, v9, v10);
    BOOL v12 = __OFSUB__(0LL, v11);
    uint64_t result = -v11;
    BOOL v6 = result == 0;
    if (!v12) {
      return result;
    }
    __break(1u);
  }

  uint64_t result = 0LL;
  if (!v6)
  {
    uint64_t v14 = (unsigned __int8 *)(v4 + 24 * v5 + 16);
    while (1)
    {
      unsigned int v15 = *v14;
      v14 += 24;
      BOOL v12 = __OFADD__(result, v15);
      result += v15;
      if (v12) {
        break;
      }
      if (!--v7) {
        return result;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_188D01634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a1;
  uint64_t v7 = a2 - a1;
  BOOL v6 = a2 == a1;
  if (a2 < a1)
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v11 = sub_188D012B0(0LL, (void (*)(uint64_t *, uint64_t *))sub_188D093AC, (uint64_t)&v16, v8, v9, v10);
    BOOL v12 = __OFSUB__(0LL, v11);
    uint64_t result = -v11;
    BOOL v6 = result == 0;
    if (!v12) {
      return result;
    }
    __break(1u);
  }

  uint64_t result = 0LL;
  if (!v6)
  {
    uint64_t v14 = (uint64_t *)(v4 + 40 * v5 + 24);
    while (1)
    {
      uint64_t v15 = *v14;
      v14 += 5;
      BOOL v12 = __OFADD__(result, v15);
      result += v15;
      if (v12) {
        break;
      }
      if (!--v7) {
        return result;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_188D016E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a1;
  uint64_t v7 = a2 - a1;
  BOOL v6 = a2 == a1;
  if (a2 < a1)
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v11 = sub_188D01200(0LL, (void (*)(uint64_t *, void *))sub_188D09398, (uint64_t)&v16, v8, v9, v10);
    BOOL v12 = __OFSUB__(0LL, v11);
    uint64_t result = -v11;
    BOOL v6 = result == 0;
    if (!v12) {
      return result;
    }
    __break(1u);
  }

  uint64_t result = 0LL;
  if (!v6)
  {
    uint64_t v14 = (unsigned __int8 *)(v4 + 24 * v5 + 17);
    while (1)
    {
      unsigned int v15 = *v14;
      v14 += 24;
      BOOL v12 = __OFADD__(result, v15);
      result += v15;
      if (v12) {
        break;
      }
      if (!--v7) {
        return result;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_188D0178C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a1;
  uint64_t v7 = a2 - a1;
  BOOL v6 = a2 == a1;
  if (a2 < a1)
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v11 = sub_188D012B0(0LL, (void (*)(uint64_t *, uint64_t *))sub_188D09360, (uint64_t)&v16, v8, v9, v10);
    BOOL v12 = __OFSUB__(0LL, v11);
    uint64_t result = -v11;
    BOOL v6 = result == 0;
    if (!v12) {
      return result;
    }
    __break(1u);
  }

  uint64_t result = 0LL;
  if (!v6)
  {
    uint64_t v14 = (uint64_t *)(v4 + 40 * v5 + 16);
    while (1)
    {
      uint64_t v15 = *v14;
      v14 += 5;
      BOOL v12 = __OFADD__(result, v15);
      result += v15;
      if (v12) {
        break;
      }
      if (!--v7) {
        return result;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_188D01838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a1;
  uint64_t v7 = a2 - a1;
  BOOL v6 = a2 == a1;
  if (a2 < a1)
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v11 = sub_188D01200(0LL, (void (*)(uint64_t *, void *))sub_188D0934C, (uint64_t)&v16, v8, v9, v10);
    BOOL v12 = __OFSUB__(0LL, v11);
    uint64_t result = -v11;
    BOOL v6 = result == 0;
    if (!v12) {
      return result;
    }
    __break(1u);
  }

  uint64_t result = 0LL;
  if (!v6)
  {
    uint64_t v14 = (unsigned __int8 *)(v4 + 24 * v5 + 18);
    while (1)
    {
      unsigned int v15 = *v14;
      v14 += 24;
      BOOL v12 = __OFADD__(result, v15);
      result += v15;
      if (v12) {
        break;
      }
      if (!--v7) {
        return result;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_188D018E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a1;
  uint64_t v7 = a2 - a1;
  BOOL v6 = a2 == a1;
  if (a2 < a1)
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v11 = sub_188D012B0(0LL, (void (*)(uint64_t *, uint64_t *))sub_188D093F8, (uint64_t)&v16, v8, v9, v10);
    BOOL v12 = __OFSUB__(0LL, v11);
    uint64_t result = -v11;
    BOOL v6 = result == 0;
    if (!v12) {
      return result;
    }
    __break(1u);
  }

  uint64_t result = 0LL;
  if (!v6)
  {
    uint64_t v14 = (uint64_t *)(v4 + 40 * v5 + 8);
    while (1)
    {
      uint64_t v15 = *v14;
      v14 += 5;
      BOOL v12 = __OFADD__(result, v15);
      result += v15;
      if (v12) {
        break;
      }
      if (!--v7) {
        return result;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_188D01990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a1;
  uint64_t v7 = a2 - a1;
  BOOL v6 = a2 == a1;
  if (a2 < a1)
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v11 = sub_188D01200(0LL, (void (*)(uint64_t *, void *))sub_188D093E4, (uint64_t)&v16, v8, v9, v10);
    BOOL v12 = __OFSUB__(0LL, v11);
    uint64_t result = -v11;
    BOOL v6 = result == 0;
    if (!v12) {
      return result;
    }
    __break(1u);
  }

  uint64_t result = 0LL;
  if (!v6)
  {
    uint64_t v14 = (unsigned __int8 *)(v4 + 24 * v5 + 19);
    while (1)
    {
      unsigned int v15 = *v14;
      v14 += 24;
      BOOL v12 = __OFADD__(result, v15);
      result += v15;
      if (v12) {
        break;
      }
      if (!--v7) {
        return result;
      }
    }

    __break(1u);
  }

  return result;
}

unint64_t sub_188D01A3C( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t result = *v6;
  uint64_t v10 = (unsigned __int16 *)(*v6 + 16);
  unint64_t v9 = *v10;
  int v11 = *(unsigned __int8 *)(*v6 + 18);
  char v12 = (4 * v11 + 8) & 0x3C;
  unint64_t v13 = (a2 >> v12) & 0xF;
  unint64_t v14 = (a5 >> v12) & 0xF;
  if (v13 >= v9 || v14 > v9)
  {
    __break(1u);
  }

  else
  {
    uint64_t v17 = a3;
    if (v14 != v9) {
      goto LABEL_10;
    }
    if ((a5 & (~(-1LL << ((4 * v11) & 0x3C)) << 8)) == 0)
    {
      unint64_t v19 = v6[4];
      unint64_t result = sub_188D01EFC(a1, a2, a3);
      uint64_t v17 = v19 - result;
      if (!__OFSUB__(v19, result)) {
        return v17;
      }
      __break(1u);
LABEL_10:
      uint64_t v22 = a6;
      uint64_t v23 = a4;
      uint64_t v20 = result + 24;
      swift_unknownObjectRetain();
      if (v11) {
        uint64_t v21 = sub_188D028EC((uint64_t)v10, v20, v13, v14, a1, a2, v17, v23, a5, v22);
      }
      else {
        uint64_t v21 = sub_188D0264C((uint64_t)v10, v20, v13, v14);
      }
      uint64_t v17 = v21;
      sub_188D087F8((uint64_t)v6);
      return v17;
    }
  }

  __break(1u);
  return result;
}

unint64_t sub_188D01B6C( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t result = *v6;
  uint64_t v10 = (unsigned __int16 *)(*v6 + 16);
  unint64_t v9 = *v10;
  int v11 = *(unsigned __int8 *)(*v6 + 18);
  char v12 = (4 * v11 + 8) & 0x3C;
  unint64_t v13 = (a2 >> v12) & 0xF;
  unint64_t v14 = (a5 >> v12) & 0xF;
  if (v13 >= v9 || v14 > v9)
  {
    __break(1u);
  }

  else
  {
    uint64_t v17 = a3;
    if (v14 != v9) {
      goto LABEL_10;
    }
    if ((a5 & (~(-1LL << ((4 * v11) & 0x3C)) << 8)) == 0)
    {
      unint64_t v19 = v6[3];
      unint64_t result = sub_188D0202C(a1, a2, a3);
      uint64_t v17 = v19 - result;
      if (!__OFSUB__(v19, result)) {
        return v17;
      }
      __break(1u);
LABEL_10:
      uint64_t v22 = a6;
      uint64_t v23 = a4;
      uint64_t v20 = result + 24;
      swift_unknownObjectRetain();
      if (v11) {
        uint64_t v21 = sub_188D02A74((uint64_t)v10, v20, v13, v14, a1, a2, v17, v23, a5, v22);
      }
      else {
        uint64_t v21 = sub_188D026F4((uint64_t)v10, v20, v13, v14);
      }
      uint64_t v17 = v21;
      sub_188D087F8((uint64_t)v6);
      return v17;
    }
  }

  __break(1u);
  return result;
}

unint64_t sub_188D01C9C( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t result = *v6;
  uint64_t v10 = (unsigned __int16 *)(*v6 + 16);
  unint64_t v9 = *v10;
  int v11 = *(unsigned __int8 *)(*v6 + 18);
  char v12 = (4 * v11 + 8) & 0x3C;
  unint64_t v13 = (a2 >> v12) & 0xF;
  unint64_t v14 = (a5 >> v12) & 0xF;
  if (v13 >= v9 || v14 > v9)
  {
    __break(1u);
  }

  else
  {
    uint64_t v17 = a3;
    if (v14 != v9) {
      goto LABEL_10;
    }
    if ((a5 & (~(-1LL << ((4 * v11) & 0x3C)) << 8)) == 0)
    {
      unint64_t v19 = v6[2];
      unint64_t result = sub_188D0215C(a1, a2, a3);
      uint64_t v17 = v19 - result;
      if (!__OFSUB__(v19, result)) {
        return v17;
      }
      __break(1u);
LABEL_10:
      uint64_t v22 = a6;
      uint64_t v23 = a4;
      uint64_t v20 = result + 24;
      swift_unknownObjectRetain();
      if (v11) {
        uint64_t v21 = sub_188D02C08((uint64_t)v10, v20, v13, v14, a1, a2, v17, v23, a5, v22);
      }
      else {
        uint64_t v21 = sub_188D0279C((uint64_t)v10, v20, v13, v14);
      }
      uint64_t v17 = v21;
      sub_188D087F8((uint64_t)v6);
      return v17;
    }
  }

  __break(1u);
  return result;
}

unint64_t sub_188D01DCC( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t result = *v6;
  uint64_t v10 = (unsigned __int16 *)(*v6 + 16);
  unint64_t v9 = *v10;
  int v11 = *(unsigned __int8 *)(*v6 + 18);
  char v12 = (4 * v11 + 8) & 0x3C;
  unint64_t v13 = (a2 >> v12) & 0xF;
  unint64_t v14 = (a5 >> v12) & 0xF;
  if (v13 >= v9 || v14 > v9)
  {
    __break(1u);
  }

  else
  {
    uint64_t v17 = a3;
    if (v14 != v9) {
      goto LABEL_10;
    }
    if ((a5 & (~(-1LL << ((4 * v11) & 0x3C)) << 8)) == 0)
    {
      unint64_t v19 = v6[1];
      unint64_t result = sub_188D0228C(a1, a2, a3);
      uint64_t v17 = v19 - result;
      if (!__OFSUB__(v19, result)) {
        return v17;
      }
      __break(1u);
LABEL_10:
      uint64_t v22 = a6;
      uint64_t v23 = a4;
      uint64_t v20 = result + 24;
      swift_unknownObjectRetain();
      if (v11) {
        uint64_t v21 = sub_188D02DA0((uint64_t)v10, v20, v13, v14, a1, a2, v17, v23, a5, v22);
      }
      else {
        uint64_t v21 = sub_188D02844((uint64_t)v10, v20, v13, v14);
      }
      uint64_t v17 = v21;
      sub_188D087F8((uint64_t)v6);
      return v17;
    }
  }

  __break(1u);
  return result;
}

unint64_t sub_188D01EFC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t result = *(void *)v3;
  uint64_t v8 = (unsigned __int16 *)(*(void *)v3 + 16LL);
  unint64_t v7 = *v8;
  int v9 = *(unsigned __int8 *)(*(void *)v3 + 18LL);
  unint64_t v10 = (a2 >> ((4 * v9 + 8) & 0x3C)) & 0xF;
  if (v10 > v7)
  {
    __break(1u);
  }

  else
  {
    if (v10 != v7)
    {
      uint64_t v13 = result + 24;
      swift_unknownObjectRetain();
      if (v9)
      {
        uint64_t v8 = (unsigned __int16 *)sub_188D014DC(0LL, v10, (uint64_t)v8, v13);
        uint64_t v14 = v13 + 40LL * v10;
        uint64_t v15 = *(void *)(v14 + 32);
        __int128 v16 = *(_OWORD *)(v14 + 16);
        v19[0] = *(_OWORD *)v14;
        v19[1] = v16;
        uint64_t v20 = v15;
        swift_unknownObjectRetain();
        uint64_t v17 = sub_188D01EFC(a1, a2, a3);
        sub_188D087F8((uint64_t)v19);
        BOOL v18 = __OFADD__(v8, v17);
        unint64_t v10 = (unint64_t)v8 + v17;
        if (!v18) {
          goto LABEL_11;
        }
        __break(1u);
      }

      unint64_t v10 = sub_188D023BC((uint64_t)v8, v13, v10);
LABEL_11:
      sub_188D087F8(v4);
      return v10;
    }

    if ((a2 & (~(-1LL << ((4 * v9) & 0x3C)) << 8)) == 0) {
      return *(void *)(v4 + 32);
    }
  }

  __break(1u);
  return result;
}

unint64_t sub_188D0202C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t result = *(void *)v3;
  uint64_t v8 = (unsigned __int16 *)(*(void *)v3 + 16LL);
  unint64_t v7 = *v8;
  int v9 = *(unsigned __int8 *)(*(void *)v3 + 18LL);
  unint64_t v10 = (a2 >> ((4 * v9 + 8) & 0x3C)) & 0xF;
  if (v10 > v7)
  {
    __break(1u);
  }

  else
  {
    if (v10 != v7)
    {
      uint64_t v13 = result + 24;
      swift_unknownObjectRetain();
      if (v9)
      {
        uint64_t v8 = (unsigned __int16 *)sub_188D01634(0LL, v10, (uint64_t)v8, v13);
        uint64_t v14 = v13 + 40LL * v10;
        uint64_t v15 = *(void *)(v14 + 32);
        __int128 v16 = *(_OWORD *)(v14 + 16);
        v19[0] = *(_OWORD *)v14;
        v19[1] = v16;
        uint64_t v20 = v15;
        swift_unknownObjectRetain();
        uint64_t v17 = sub_188D0202C(a1, a2, a3);
        sub_188D087F8((uint64_t)v19);
        BOOL v18 = __OFADD__(v8, v17);
        unint64_t v10 = (unint64_t)v8 + v17;
        if (!v18) {
          goto LABEL_11;
        }
        __break(1u);
      }

      unint64_t v10 = sub_188D02460((uint64_t)v8, v13, v10);
LABEL_11:
      sub_188D087F8(v4);
      return v10;
    }

    if ((a2 & (~(-1LL << ((4 * v9) & 0x3C)) << 8)) == 0) {
      return *(void *)(v4 + 24);
    }
  }

  __break(1u);
  return result;
}

unint64_t sub_188D0215C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t result = *(void *)v3;
  uint64_t v8 = (unsigned __int16 *)(*(void *)v3 + 16LL);
  unint64_t v7 = *v8;
  int v9 = *(unsigned __int8 *)(*(void *)v3 + 18LL);
  unint64_t v10 = (a2 >> ((4 * v9 + 8) & 0x3C)) & 0xF;
  if (v10 > v7)
  {
    __break(1u);
  }

  else
  {
    if (v10 != v7)
    {
      uint64_t v13 = result + 24;
      swift_unknownObjectRetain();
      if (v9)
      {
        uint64_t v8 = (unsigned __int16 *)sub_188D0178C(0LL, v10, (uint64_t)v8, v13);
        uint64_t v14 = v13 + 40LL * v10;
        uint64_t v15 = *(void *)(v14 + 32);
        __int128 v16 = *(_OWORD *)(v14 + 16);
        v19[0] = *(_OWORD *)v14;
        v19[1] = v16;
        uint64_t v20 = v15;
        swift_unknownObjectRetain();
        uint64_t v17 = sub_188D0215C(a1, a2, a3);
        sub_188D087F8((uint64_t)v19);
        BOOL v18 = __OFADD__(v8, v17);
        unint64_t v10 = (unint64_t)v8 + v17;
        if (!v18) {
          goto LABEL_11;
        }
        __break(1u);
      }

      unint64_t v10 = sub_188D02504((uint64_t)v8, v13, v10);
LABEL_11:
      sub_188D087F8(v4);
      return v10;
    }

    if ((a2 & (~(-1LL << ((4 * v9) & 0x3C)) << 8)) == 0) {
      return *(void *)(v4 + 16);
    }
  }

  __break(1u);
  return result;
}

unint64_t sub_188D0228C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t result = *(void *)v3;
  uint64_t v8 = (unsigned __int16 *)(*(void *)v3 + 16LL);
  unint64_t v7 = *v8;
  int v9 = *(unsigned __int8 *)(*(void *)v3 + 18LL);
  unint64_t v10 = (a2 >> ((4 * v9 + 8) & 0x3C)) & 0xF;
  if (v10 > v7)
  {
    __break(1u);
  }

  else
  {
    if (v10 != v7)
    {
      uint64_t v13 = result + 24;
      swift_unknownObjectRetain();
      if (v9)
      {
        uint64_t v8 = (unsigned __int16 *)sub_188D018E4(0LL, v10, (uint64_t)v8, v13);
        uint64_t v14 = v13 + 40LL * v10;
        uint64_t v15 = *(void *)(v14 + 32);
        __int128 v16 = *(_OWORD *)(v14 + 16);
        v19[0] = *(_OWORD *)v14;
        v19[1] = v16;
        uint64_t v20 = v15;
        swift_unknownObjectRetain();
        uint64_t v17 = sub_188D0228C(a1, a2, a3);
        sub_188D087F8((uint64_t)v19);
        BOOL v18 = __OFADD__(v8, v17);
        unint64_t v10 = (unint64_t)v8 + v17;
        if (!v18) {
          goto LABEL_11;
        }
        __break(1u);
      }

      unint64_t v10 = sub_188D025A8((uint64_t)v8, v13, v10);
LABEL_11:
      sub_188D087F8(v4);
      return v10;
    }

    if ((a2 & (~(-1LL << ((4 * v9) & 0x3C)) << 8)) == 0) {
      return *(void *)(v4 + 8);
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_188D023BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a3 < 0)
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v10 = sub_188D01200(0LL, (void (*)(uint64_t *, void *))sub_188D09300, (uint64_t)&v11, v8, 0LL, v9);
    BOOL v7 = __OFSUB__(0LL, v10);
    uint64_t result = -v10;
    if (v7) {
LABEL_10:
    }
      __break(1u);
  }

  else
  {
    uint64_t result = 0LL;
    if (a3)
    {
      uint64_t v5 = (unsigned __int8 *)(a2 + 16);
      while (1)
      {
        unsigned int v6 = *v5;
        v5 += 24;
        BOOL v7 = __OFADD__(result, v6);
        result += v6;
        if (v7) {
          break;
        }
        if (!--v3) {
          return result;
        }
      }

      __break(1u);
      goto LABEL_10;
    }
  }

  return result;
}

uint64_t sub_188D02460(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a3 < 0)
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v10 = sub_188D01200(0LL, (void (*)(uint64_t *, void *))sub_188D09398, (uint64_t)&v11, v8, 0LL, v9);
    BOOL v7 = __OFSUB__(0LL, v10);
    uint64_t result = -v10;
    if (v7) {
LABEL_10:
    }
      __break(1u);
  }

  else
  {
    uint64_t result = 0LL;
    if (a3)
    {
      uint64_t v5 = (unsigned __int8 *)(a2 + 17);
      while (1)
      {
        unsigned int v6 = *v5;
        v5 += 24;
        BOOL v7 = __OFADD__(result, v6);
        result += v6;
        if (v7) {
          break;
        }
        if (!--v3) {
          return result;
        }
      }

      __break(1u);
      goto LABEL_10;
    }
  }

  return result;
}

uint64_t sub_188D02504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a3 < 0)
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v10 = sub_188D01200(0LL, (void (*)(uint64_t *, void *))sub_188D0934C, (uint64_t)&v11, v8, 0LL, v9);
    BOOL v7 = __OFSUB__(0LL, v10);
    uint64_t result = -v10;
    if (v7) {
LABEL_10:
    }
      __break(1u);
  }

  else
  {
    uint64_t result = 0LL;
    if (a3)
    {
      uint64_t v5 = (unsigned __int8 *)(a2 + 18);
      while (1)
      {
        unsigned int v6 = *v5;
        v5 += 24;
        BOOL v7 = __OFADD__(result, v6);
        result += v6;
        if (v7) {
          break;
        }
        if (!--v3) {
          return result;
        }
      }

      __break(1u);
      goto LABEL_10;
    }
  }

  return result;
}

uint64_t sub_188D025A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a3 < 0)
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v10 = sub_188D01200(0LL, (void (*)(uint64_t *, void *))sub_188D093E4, (uint64_t)&v11, v8, 0LL, v9);
    BOOL v7 = __OFSUB__(0LL, v10);
    uint64_t result = -v10;
    if (v7) {
LABEL_10:
    }
      __break(1u);
  }

  else
  {
    uint64_t result = 0LL;
    if (a3)
    {
      uint64_t v5 = (unsigned __int8 *)(a2 + 19);
      while (1)
      {
        unsigned int v6 = *v5;
        v5 += 24;
        BOOL v7 = __OFADD__(result, v6);
        result += v6;
        if (v7) {
          break;
        }
        if (!--v3) {
          return result;
        }
      }

      __break(1u);
      goto LABEL_10;
    }
  }

  return result;
}

uint64_t sub_188D0264C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a3;
  uint64_t v5 = a2;
  uint64_t v7 = a4 - a3;
  BOOL v6 = a4 == a3;
  if (a4 < a3)
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v11 = sub_188D01200(0LL, (void (*)(uint64_t *, void *))sub_188D09300, (uint64_t)&v16, v8, v9, v10);
    BOOL v12 = __OFSUB__(0LL, v11);
    uint64_t result = -v11;
    BOOL v6 = result == 0;
    if (!v12) {
      return result;
    }
    __break(1u);
  }

  uint64_t result = 0LL;
  if (!v6)
  {
    uint64_t v14 = (unsigned __int8 *)(v5 + 24 * v4 + 16);
    while (1)
    {
      unsigned int v15 = *v14;
      v14 += 24;
      BOOL v12 = __OFADD__(result, v15);
      result += v15;
      if (v12) {
        break;
      }
      if (!--v7) {
        return result;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_188D026F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a3;
  uint64_t v5 = a2;
  uint64_t v7 = a4 - a3;
  BOOL v6 = a4 == a3;
  if (a4 < a3)
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v11 = sub_188D01200(0LL, (void (*)(uint64_t *, void *))sub_188D09398, (uint64_t)&v16, v8, v9, v10);
    BOOL v12 = __OFSUB__(0LL, v11);
    uint64_t result = -v11;
    BOOL v6 = result == 0;
    if (!v12) {
      return result;
    }
    __break(1u);
  }

  uint64_t result = 0LL;
  if (!v6)
  {
    uint64_t v14 = (unsigned __int8 *)(v5 + 24 * v4 + 17);
    while (1)
    {
      unsigned int v15 = *v14;
      v14 += 24;
      BOOL v12 = __OFADD__(result, v15);
      result += v15;
      if (v12) {
        break;
      }
      if (!--v7) {
        return result;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_188D0279C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a3;
  uint64_t v5 = a2;
  uint64_t v7 = a4 - a3;
  BOOL v6 = a4 == a3;
  if (a4 < a3)
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v11 = sub_188D01200(0LL, (void (*)(uint64_t *, void *))sub_188D0934C, (uint64_t)&v16, v8, v9, v10);
    BOOL v12 = __OFSUB__(0LL, v11);
    uint64_t result = -v11;
    BOOL v6 = result == 0;
    if (!v12) {
      return result;
    }
    __break(1u);
  }

  uint64_t result = 0LL;
  if (!v6)
  {
    uint64_t v14 = (unsigned __int8 *)(v5 + 24 * v4 + 18);
    while (1)
    {
      unsigned int v15 = *v14;
      v14 += 24;
      BOOL v12 = __OFADD__(result, v15);
      result += v15;
      if (v12) {
        break;
      }
      if (!--v7) {
        return result;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_188D02844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a3;
  uint64_t v5 = a2;
  uint64_t v7 = a4 - a3;
  BOOL v6 = a4 == a3;
  if (a4 < a3)
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v11 = sub_188D01200(0LL, (void (*)(uint64_t *, void *))sub_188D093E4, (uint64_t)&v16, v8, v9, v10);
    BOOL v12 = __OFSUB__(0LL, v11);
    uint64_t result = -v11;
    BOOL v6 = result == 0;
    if (!v12) {
      return result;
    }
    __break(1u);
  }

  uint64_t result = 0LL;
  if (!v6)
  {
    uint64_t v14 = (unsigned __int8 *)(v5 + 24 * v4 + 19);
    while (1)
    {
      unsigned int v15 = *v14;
      v14 += 24;
      BOOL v12 = __OFADD__(result, v15);
      result += v15;
      if (v12) {
        break;
      }
      if (!--v7) {
        return result;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_188D028EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
  uint64_t v14 = a2 + 40 * a3;
  if (a3 == a4)
  {
    __int128 v15 = *(_OWORD *)(v14 + 16);
    *(_OWORD *)__int128 v36 = *(_OWORD *)v14;
    *(_OWORD *)&v36[16] = v15;
    uint64_t v37 = *(void *)(v14 + 32);
    swift_unknownObjectRetain();
    uint64_t v16 = sub_188D01A3C(a5, a6, a7, a8, a9, a10);
    sub_188D087F8((uint64_t)v36);
    return v16;
  }

  uint64_t v20 = *(void *)v14;
  uint64_t v21 = a2 + 40 * a3;
  uint64_t v22 = *(void *)(v21 + 24);
  uint64_t v23 = *(void *)(v21 + 32);
  *(void *)__int128 v36 = v20;
  *(_OWORD *)&v36[8] = *(_OWORD *)(v21 + 8);
  *(void *)&v36[24] = v22;
  uint64_t v37 = v23;
  swift_unknownObjectRetain();
  unint64_t v24 = sub_188D01EFC(a5, a6, a7);
  uint64_t result = swift_unknownObjectRelease();
  BOOL v26 = __OFSUB__(v23, v24);
  uint64_t v27 = v23 - v24;
  if (v26)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t result = a3 + 1;
  if (__OFADD__(a3, 1LL))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t result = sub_188D014DC(result, a4, a1, a2);
  uint64_t v28 = v27 + result;
  if (__OFADD__(v27, result))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v29 = a2 + 40 * a4;
  __int128 v30 = *(_OWORD *)(v29 + 16);
  v34[0] = *(_OWORD *)v29;
  v34[1] = v30;
  uint64_t v35 = *(void *)(v29 + 32);
  swift_unknownObjectRetain();
  unint64_t v31 = sub_188D01EFC(a8, a9, a10);
  uint64_t result = sub_188D087F8((uint64_t)v34);
  BOOL v26 = __OFADD__(v28, v31);
  uint64_t v16 = v28 + v31;
  if (!v26) {
    return v16;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_188D02A74( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
  uint64_t v14 = a2 + 40 * a3;
  if (a3 == a4)
  {
    __int128 v15 = *(_OWORD *)(v14 + 16);
    *(_OWORD *)__int128 v34 = *(_OWORD *)v14;
    *(_OWORD *)&v34[16] = v15;
    *(void *)&v34[32] = *(void *)(v14 + 32);
    swift_unknownObjectRetain();
    uint64_t v16 = sub_188D01B6C(a5, a6, a7, a8, a9, a10);
    sub_188D087F8((uint64_t)v34);
    return v16;
  }

  uint64_t v20 = *(void *)v14;
  uint64_t v21 = a2 + 40 * a3;
  *(void *)__int128 v34 = v20;
  *(_OWORD *)&v34[8] = *(_OWORD *)(v21 + 8);
  *(_OWORD *)&v34[24] = *(_OWORD *)(v21 + 24);
  swift_unknownObjectRetain();
  unint64_t v22 = sub_188D0202C(a5, a6, a7);
  uint64_t result = swift_unknownObjectRelease();
  BOOL v24 = __OFSUB__(*(void *)&v34[24], v22);
  unint64_t v25 = *(void *)&v34[24] - v22;
  if (v24)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t result = a3 + 1;
  if (__OFADD__(a3, 1LL))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t result = sub_188D01634(result, a4, a1, a2);
  unint64_t v26 = v25 + result;
  if (__OFADD__(v25, result))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v27 = a2 + 40 * a4;
  __int128 v28 = *(_OWORD *)(v27 + 16);
  v32[0] = *(_OWORD *)v27;
  v32[1] = v28;
  uint64_t v33 = *(void *)(v27 + 32);
  swift_unknownObjectRetain();
  unint64_t v29 = sub_188D0202C(a8, a9, a10);
  uint64_t result = sub_188D087F8((uint64_t)v32);
  BOOL v24 = __OFADD__(v26, v29);
  uint64_t v16 = v26 + v29;
  if (!v24) {
    return v16;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_188D02C08( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
  uint64_t v14 = a2 + 40 * a3;
  if (a3 == a4)
  {
    __int128 v15 = *(_OWORD *)(v14 + 16);
    __int128 v36 = *(_OWORD *)v14;
    __int128 v37 = v15;
    uint64_t v38 = *(void *)(v14 + 32);
    swift_unknownObjectRetain();
    uint64_t v16 = sub_188D01C9C(a5, a6, a7, a8, a9, a10);
    sub_188D087F8((uint64_t)&v36);
    return v16;
  }

  uint64_t v20 = *(void *)v14;
  uint64_t v21 = a2 + 40 * a3;
  uint64_t v22 = *(void *)(v21 + 8);
  uint64_t v23 = *(void *)(v21 + 32);
  *(void *)&__int128 v36 = v20;
  *((void *)&v36 + 1) = v22;
  __int128 v37 = *(_OWORD *)(v21 + 16);
  uint64_t v38 = v23;
  swift_unknownObjectRetain();
  unint64_t v24 = sub_188D0215C(a5, a6, a7);
  uint64_t result = swift_unknownObjectRelease();
  BOOL v26 = __OFSUB__((void)v37, v24);
  uint64_t v27 = v37 - v24;
  if (v26)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t result = a3 + 1;
  if (__OFADD__(a3, 1LL))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t result = sub_188D0178C(result, a4, a1, a2);
  uint64_t v28 = v27 + result;
  if (__OFADD__(v27, result))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v29 = a2 + 40 * a4;
  __int128 v30 = *(_OWORD *)(v29 + 16);
  v34[0] = *(_OWORD *)v29;
  v34[1] = v30;
  uint64_t v35 = *(void *)(v29 + 32);
  swift_unknownObjectRetain();
  unint64_t v31 = sub_188D0215C(a8, a9, a10);
  uint64_t result = sub_188D087F8((uint64_t)v34);
  BOOL v26 = __OFADD__(v28, v31);
  uint64_t v16 = v28 + v31;
  if (!v26) {
    return v16;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_188D02DA0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
  uint64_t v14 = a2 + 40 * a3;
  if (a3 == a4)
  {
    __int128 v15 = *(_OWORD *)(v14 + 16);
    *(_OWORD *)__int128 v34 = *(_OWORD *)v14;
    *(_OWORD *)&v34[16] = v15;
    *(void *)&v34[32] = *(void *)(v14 + 32);
    swift_unknownObjectRetain();
    uint64_t v16 = sub_188D01DCC(a5, a6, a7, a8, a9, a10);
    sub_188D087F8((uint64_t)v34);
    return v16;
  }

  uint64_t v20 = *(void *)v14;
  uint64_t v21 = a2 + 40 * a3;
  *(void *)__int128 v34 = v20;
  *(_OWORD *)&v34[8] = *(_OWORD *)(v21 + 8);
  *(_OWORD *)&v34[24] = *(_OWORD *)(v21 + 24);
  swift_unknownObjectRetain();
  unint64_t v22 = sub_188D0228C(a5, a6, a7);
  uint64_t result = swift_unknownObjectRelease();
  BOOL v24 = __OFSUB__(*(void *)&v34[8], v22);
  unint64_t v25 = *(void *)&v34[8] - v22;
  if (v24)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t result = a3 + 1;
  if (__OFADD__(a3, 1LL))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t result = sub_188D018E4(result, a4, a1, a2);
  unint64_t v26 = v25 + result;
  if (__OFADD__(v25, result))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v27 = a2 + 40 * a4;
  __int128 v28 = *(_OWORD *)(v27 + 16);
  v32[0] = *(_OWORD *)v27;
  v32[1] = v28;
  uint64_t v33 = *(void *)(v27 + 32);
  swift_unknownObjectRetain();
  unint64_t v29 = sub_188D0228C(a8, a9, a10);
  uint64_t result = sub_188D087F8((uint64_t)v32);
  BOOL v24 = __OFADD__(v26, v29);
  uint64_t v16 = v26 + v29;
  if (!v24) {
    return v16;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_188D02F34( uint64_t result, uint64_t *a2, char a3, uint64_t (*a4)(uint64_t, uint64_t *, void), uint64_t (*a5)(uint64_t, uint64_t *, void, void *, uint64_t (*)(void, void, void)), uint64_t (*a6)(void *, void *, uint64_t, void *, uint64_t *, void))
{
  uint64_t v10 = v7[5];
  if (*(void *)result != v10)
  {
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v11 = (uint64_t)v7;
  uint64_t v13 = (void *)*v7;
  uint64_t v14 = *a2;
  if (!v13)
  {
    if (!v14) {
      return result;
    }
    __break(1u);
LABEL_11:
    BOOL v19 = __OFSUB__(0LL, v14);
    uint64_t v20 = -v14;
    if (!v19)
    {
      uint64_t v17 = a4;
      __int128 v21 = *(_OWORD *)(v11 + 8);
      __int128 v22 = *(_OWORD *)(v11 + 24);
      *a2 = v20;
      uint64_t v23 = v13;
      __int128 v24 = v21;
      __int128 v25 = v22;
      swift_unknownObjectRetain();
      uint64_t v13 = &v23;
      uint64_t v6 = v17(v6, a2, v8 & 1);
      uint64_t result = sub_188D087F8(v11);
      if ((v6 & 1) != 0) {
        return result;
      }
      __break(1u);
      goto LABEL_14;
    }

LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  char v8 = a3;
  uint64_t v6 = result;
  if (v14 <= 0) {
    goto LABEL_11;
  }
  uint64_t v9 = a5;
  uint64_t v16 = *(void *)(result + 16);
  if (!v16
    || (uint64_t result = a5( result + 8,  a2,  a3 & 1,  (void *)(v16 + 16),  (uint64_t (*)(void, void, void))(v16 + 24)),  (result & 1) == 0))
  {
    uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t *, void))(v13 + 3);
    if (*((_BYTE *)v13 + 18))
    {
      sub_188D07F48(v11);
      char v18 = a6(v13 + 2, v13 + 3, v6, v13, a2, v8 & 1);
      uint64_t result = sub_188D087F8(v11);
      if ((v18 & 1) != 0) {
        return result;
      }
LABEL_15:
      if (!*a2)
      {
        uint64_t result = sub_188D36DF0();
        uint64_t v13 = 0LL;
        *(void *)uint64_t v6 = v10;
        *(void *)(v6 + 8) = result;
        goto LABEL_17;
      }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }

  __int128 v15 = 0LL;
  if (v12) {
    uint64_t v16 = &v12[v10];
  }
  else {
    uint64_t v16 = 0LL;
  }
  while (v12 && v12 != v16)
  {
    uint64_t v17 = 0;
    BOOL v19 = *v12++;
    char v18 = v19;
    if (v15 == v13) {
      goto LABEL_29;
    }
LABEL_26:
    uint64_t v20 = *(unsigned __int8 *)(a6 + v15);
    __int128 v21 = v15 + 1;
    if ((v17 & 1) != 0) {
      goto LABEL_33;
    }
LABEL_30:
    __int128 v22 = 0LL;
    if (v15 != v13)
    {
      __int128 v15 = v21;
      if (v18 == v20) {
        continue;
      }
    }

    goto LABEL_36;
  }

  char v18 = 0;
  uint64_t v17 = 1;
  if (v15 != v13) {
    goto LABEL_26;
  }
LABEL_29:
  uint64_t v20 = 0;
  __int128 v21 = v13;
  if ((v17 & 1) == 0) {
    goto LABEL_30;
  }
LABEL_33:
  if (v15 == v13) {
    __int128 v22 = v10;
  }
  else {
    __int128 v22 = 0LL;
  }
LABEL_36:
  if (v22 < 0 || v10 < v22) {
    goto LABEL_45;
  }
  if (__OFADD__(*a5, v22))
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }

  *a5 += v22;
  uint64_t v23 = *a3 + v22;
  if (!__OFADD__(*a3, v22))
  {
    *a3 = v23;
    return v23 < a2;
  }

  __break(1u);
  return result;
}

      uint64_t v1 = sub_188CF73DC((uint64_t)v1);
      *uint64_t v2 = v1;
      goto LABEL_15;
    }

    char v8 = *((void *)v1 + 1);
    uint64_t v9 = v8 - by;
    if (__CFADD__(v8, v3))
    {
      __break(1u);
    }

    else if (v9 < 0xFFFFFFFFFFFFFFC0LL)
    {
      uint64_t v10 = ((v9 + 63) >> 6) - *(void *)(*(void *)v1 + 16LL);
      if (v10 >= 0)
      {
        sub_188D2EF64(v10, 0LL);
        *((void *)v1 + 1) = v9;
        goto LABEL_14;
      }

  __break(1u);
}

  __break(1u);
}

        uint64_t result = sub_188DB9784(result, a2);
        BOOL v12 = v61;
        if (v11 >= v61)
        {
          sub_188D087F8(v7);
          return swift_unknownObjectRelease();
        }

        uint64_t v9 = *(void **)v60;
        if (!*(_BYTE *)(*(void *)v60 + 18LL))
        {
          uint64_t v59 = v11;
          goto LABEL_28;
        }
      }

  __break(1u);
  return result;
}

LABEL_21:
      __break(1u);
      return result;
    }

  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_22:
  uint64_t v9 = sub_188CF73DC((uint64_t)v9);
  *uint64_t v3 = v9;
LABEL_13:
  sub_188DF548C(v6, v7, (uint64_t)(v9 + 32), *((void *)v9 + 2), v8);
  *uint64_t v3 = v9;
  uint64_t result = v10 - v5;
  if (v10 > v5)
  {
    if (!__OFSUB__(v10, v5)) {
      return sub_188D3C3F4(result);
    }
    goto LABEL_24;
  }

  return result;
}

      LODWORD(v19) = 0;
      uint64_t v20 = 0;
      *BOOL v12 = 15LL;
      return (uint64_t *)(v20 | v19);
    }

    uint64_t v7 = BYTE4(a5);
    uint64_t v6 = HIBYTE(a4) & 0xF;
    if ((a4 & 0x1000000000000000LL) == 0)
    {
      __int128 v21 = a3 & 0xFFFFFFFFFFFFLL;
      if ((a4 & 0x2000000000000000LL) != 0) {
        __int128 v21 = HIBYTE(a4) & 0xF;
      }
      if (v21 < BYTE4(a5))
      {
        __break(1u);
LABEL_120:
        __break(1u);
LABEL_121:
        __int128 v15 = a4 & 0x2000000000000000LL;
        char v8 = HIBYTE(a4) & 0xF;
        uint64_t v66 = v11;
        v11 &= 0xFFFFFFFFFFFFuLL;
        __int128 v24 = 11LL;
        if ((v66 & 0x800000000000000LL) != 0) {
          __int128 v24 = 7LL;
        }
        a2 = v73;
        goto LABEL_34;
      }

      __int128 v22 = v5 >> 14;
      if (v5 >> 14 <= 4 * (unint64_t)BYTE4(a5))
      {
        *uint64_t result = 15LL;
        BOOL v19 = (((unint64_t)BYTE4(a5) << 16) | 4) >> 14;
        if (v19)
        {
LABEL_131:
          LODWORD(v19) = 0;
          uint64_t v20 = 0;
          return (uint64_t *)(v20 | v19);
        }

        goto LABEL_44;
      }

      uint64_t v23 = a5 - (unint64_t)BYTE5(a5);
      if (v23 < 0) {
        goto LABEL_128;
      }
      if (v21 < v23)
      {
LABEL_129:
        __break(1u);
LABEL_130:
        *BOOL v12 = 15LL;
        uint64_t v67 = MEMORY[0x1895D67BC](15LL, v7, v11, a4);
        a2 = (unint64_t *)v8;
        BOOL v19 = v67 >> 14;
        if (v67 >> 14) {
          goto LABEL_131;
        }
LABEL_44:
        uint64_t v20 = 0;
        *a2 = v13 + 1;
        return (uint64_t *)(v20 | v19);
      }

      if (v22 <= 4 * v23)
      {
        goto LABEL_57;
      }

      uint64_t result = (uint64_t *)((v23 << 16) | 4);
LABEL_31:
      *BOOL v12 = (uint64_t)result;
      *a2 = v13 + 1;
      if (v13 == -1LL)
      {
        uint64_t v20 = 0;
        LODWORD(v19) = 1;
        return (uint64_t *)(v20 | v19);
      }

      uint64_t v38 = ~v13++;
      if (v38 > BYTE3(v9)) {
        goto LABEL_69;
      }
      if ((a4 & 0x1000000000000000LL) != 0) {
        goto LABEL_150;
      }
LABEL_57:
      uint64_t v74 = a2;
      __int128 v39 = v11 & 0xFFFFFFFFFFFFLL;
      if ((a4 & 0x2000000000000000LL) != 0) {
        __int128 v39 = v6;
      }
      if (v39 < v7) {
        goto LABEL_153;
      }
      int v72 = v12;
      uint64_t v40 = (v7 << 16) | 4;
      goto LABEL_61;
    }
  }

  else
  {
    uint64_t v14 = *result;
    uint64_t v13 = BYTE4(a5);
    if ((a4 & 0x1000000000000000LL) != 0) {
      goto LABEL_112;
    }
    char v18 = HIBYTE(a4) & 0xF;
    if ((a4 & 0x2000000000000000LL) == 0) {
      char v18 = a3 & 0xFFFFFFFFFFFFLL;
    }
    if (v18 >= BYTE4(a5))
    {
      if (v14 >> 14 >= 4 * (unint64_t)BYTE4(a5))
      {
        unint64_t v26 = a5 - (unint64_t)BYTE5(a5);
        if (v26 < 0)
        {
          __break(1u);
        }

        else if (v18 >= v26)
        {
          if (v14 >> 14 < 4 * v26)
          {
            uint64_t v27 = ((unint64_t)BYTE4(a5) << 16) | 4;
LABEL_42:
            swift_bridgeObjectRetain();
            __int128 v28 = sub_188D0EFD0(v27, v11, a4);
            __int128 v30 = v29;
            __int128 v32 = v31;
            __int128 v34 = v33;
            swift_bridgeObjectRelease();
            uint64_t v35 = MEMORY[0x1895D6D14](v14, v28, v30, v32, v34);
            swift_bridgeObjectRelease();
            uint64_t v20 = 0;
            *BOOL v12 = v35;
            LODWORD(v19) = 1;
            return (uint64_t *)(v20 | v19);
          }

          __int128 v36 = (v26 << 16) | 4;
LABEL_48:
          uint64_t v20 = 0;
          *BOOL v12 = v36;
          LODWORD(v19) = 1;
          return (uint64_t *)(v20 | v19);
        }

        __break(1u);
        goto LABEL_126;
      }

      goto LABEL_21;
    }

    __break(1u);
  }

  uint64_t v70 = v6;
  char v8 = (uint64_t)a2;
  char v65 = v5 >> 14;
  uint64_t v14 = v11;
  if (v65 > (unint64_t)MEMORY[0x1895D67BC](15LL, v9 - (unint64_t)BYTE5(v9), v11, a4) >> 14)
  {
    uint64_t result = (uint64_t *)MEMORY[0x1895D67BC](15LL, v9 - (unint64_t)BYTE5(v9), v11, a4);
    a2 = (unint64_t *)v8;
    uint64_t v6 = v70;
    goto LABEL_31;
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    uint64_t v4 = sub_188CF73DC((uint64_t)v4);
    *(void *)uint64_t v1 = v4;
    goto LABEL_12;
  }

  swift_bridgeObjectRelease();
  *(void *)uint64_t v1 = MEMORY[0x18961AFE8];
  *((void *)v1 + 1) = 0LL;
}

  __break(1u);
  return result;
}

        __int128 v15 = sub_188DF7E08();
LABEL_22:
        sub_188DF8B34();
        if (v8 == v15 >> 14) {
          return swift_bridgeObjectRelease_n();
        }
      }

      if (v18 <= v15 >> 16)
      {
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        sub_188DF85F4();
        swift_bridgeObjectRetain();
        sub_188DC9D84(a1, a3, a4);
        __int128 v15 = sub_188DF7E08();
        continue;
      }

  uint64_t v84 = a4[1];
  uint64_t v85 = v172;
  unsigned int v86 = v177;
  if (v84)
  {
    uint64_t v87 = 1;
    goto LABEL_27;
  }

  *uint64_t v1 = (uint64_t)v4;
  return sub_188D8FB84(&v20, v1);
}

LABEL_14:
    uint64_t result = v9(v6 + 8, a2, v8 & 1, v13 + 2, (uint64_t (*)(void, void, void))v17);
    if ((result & 1) != 0)
    {
LABEL_17:
      *(void *)(v6 + 16) = v13;
      return result;
    }

    goto LABEL_15;
  }

  return result;
}

    uint64_t v49 = v54;
    *uint64_t v54 = v30 & 1;
    uint64_t v50 = v67;
    *((void *)v49 + 1) = v66;
    *((void *)v49 + 2) = v50;
  }

  else
  {
    LODWORD(v68) = v15;
    uint64_t v40 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0LL, 0LL, v18, v17, a7, v16, a10);
    uint64_t v63 = v41;
    uint64_t v42 = *a3;
    uint8x8_t v43 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0LL, 0LL, a4, a6, a7, a9, a10);
    uint64_t v46 = sub_188DA84DC(v68, v40, (uint64_t)v63, v42, v43, v44, *(void *)a2, a7, v45, MEMORY[0x18961AFC8] + 8LL, a10);
    int8x8_t v48 = v47;
    swift_release();
    uint64_t result = swift_release();
    *(_BYTE *)a5 = 1;
    *(void *)(a5 + 8) = v46;
    *(void *)(a5 + 16) = v48;
  }

  return result;
}

      uint64_t v7 = v5;
      return v7 << 16;
    }

    uint64_t v9 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000LL) == 0) {
      uint64_t v9 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (v5 != v9) {
      return sub_188DF85E8();
    }
  }

  return result;
}

        __break(1u);
      }
    }

    else
    {
      int v72 = v89;
      uint64_t v94 = _HashNode.copy(withFreeSpace:)(16LL, v90, v89, a10, a11, v93);
      uint64_t v95 = v73;
      uint64_t v74 = a3[1];
      uint64_t v75 = (void *)type metadata accessor for _HashNode(0LL, a10, a11, v40);
      uint64_t v76 = swift_retain();
      sub_188DF6B94(v76, v74, v88, v75);
      swift_release();
      int v77 = v95;
      *a3 = v94;
      a3[1] = v77;
      uint64_t result = swift_release();
      *uint64_t v91 = v72;
    }
  }

  return result;
}

  __break(1u);
  return result;
}

    __break(1u);
    goto LABEL_15;
  }

  __int128 v15 = (uint64_t (**)(uint64_t, ValueMetadata *))Description;
  if ((ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&qword_18C74A8D0) != a4)
  {
    char v18 = v32 + v17;
    if (__OFADD__(v32, v17))
    {
      __break(1u);
    }

    else if (v18 >= v32)
    {
      sub_188DF531C(a3, v32, v18, (uint64_t)a4);
      return ((uint64_t (*)(uint64_t, ValueMetadata *))Description[1])(a3, a4);
    }

    __break(1u);
    goto LABEL_14;
  }

  Description[2]((uint64_t (**)(uint64_t, ValueMetadata *))v13, a3, a4);
  swift_dynamicCast();
  uint64_t v23 = v38;
  __int128 v30 = v37;
  unint64_t v31 = v36;
  __int128 v24 = *(void *)(v38 + 16);
  __int128 v25 = (char *)*v4;
  swift_bridgeObjectRetain();
  unint64_t v26 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v4 = (int64_t)v25;
  uint64_t v27 = v32;
  if ((v26 & 1) == 0)
  {
    __int128 v25 = sub_188CF73DC((uint64_t)v25);
    *uint64_t v4 = (int64_t)v25;
  }

  __int128 v28 = *((void *)v25 + 2);
  unint64_t v29 = v4[1];
  uint64_t v33 = v25 + 32;
  __int128 v34 = v28;
  uint64_t v35 = v29;
  sub_188DF548C(v31, v30, v23 + 32, v24, v27);
  *uint64_t v4 = (int64_t)v25;
  swift_bridgeObjectRelease_n();
  return v15[1](a3, a4);
}

        uint64_t v9 = sub_188CF73DC((uint64_t)v9);
        *uint64_t v3 = v9;
        goto LABEL_10;
      }

  if (v8)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }

  uint64_t v10 = 0LL;
  BOOL v12 = (unsigned __int16)*a1;
LABEL_16:
  uint64_t v11 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }

  __break(1u);
  return result;
}

uint64_t sub_188D030B8(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = *a2;
  if (*a2 <= 0 && (a3 & 1) == 0) {
    return 1LL;
  }
  if (*(_BYTE *)(v7 + 18))
  {
    sub_188D07F48((uint64_t)v3);
    char v10 = sub_188D078DC(v7 + 16, v7 + 24, a1, v7, a2, a3 & 1);
    sub_188D087F8((uint64_t)v3);
    return v10 & 1;
  }

  else
  {
    unint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = (v11 >> 8) & 0xF;
    if (v12)
    {
      unint64_t v13 = v12 + 1;
      uint64_t v14 = (v12 << 8) - 256;
      __int128 v15 = (unsigned __int8 *)(v7 + 24 * ((v11 >> 8) & 0xF) + 19);
      while (1)
      {
        unsigned int v17 = *v15;
        v15 -= 24;
        uint64_t v16 = v17;
        uint64_t v18 = v8 - v17;
        BOOL v19 = v8 <= v17;
        BOOL v20 = v8 < v17;
        if ((a3 & 1) != 0) {
          BOOL v19 = v20;
        }
        if (v19) {
          break;
        }
        *a2 = v18;
        --v13;
        v14 -= 256LL;
        uint64_t v8 = v18;
        if (v13 < 2) {
          return 0LL;
        }
      }

      *(void *)(a1 + 8) = v14 | v11 & 0xFFFFFFFFFFFFF0FFLL;
      *a2 = v16 - v8;
      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

uint64_t sub_188D031D4(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = *a2;
  if (*a2 <= 0 && (a3 & 1) == 0) {
    return 1LL;
  }
  if (*(_BYTE *)(v7 + 18))
  {
    sub_188D07F48((uint64_t)v3);
    char v10 = sub_188D07460(v7 + 16, v7 + 24, a1, v7, a2, a3 & 1);
    sub_188D087F8((uint64_t)v3);
    return v10 & 1;
  }

  else
  {
    unint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = (v11 >> 8) & 0xF;
    if (v12)
    {
      unint64_t v13 = v12 + 1;
      uint64_t v14 = (v12 << 8) - 256;
      __int128 v15 = (unsigned __int8 *)(v7 + 24 * ((v11 >> 8) & 0xF) + 18);
      while (1)
      {
        unsigned int v17 = *v15;
        v15 -= 24;
        uint64_t v16 = v17;
        uint64_t v18 = v8 - v17;
        BOOL v19 = v8 <= v17;
        BOOL v20 = v8 < v17;
        if ((a3 & 1) != 0) {
          BOOL v19 = v20;
        }
        if (v19) {
          break;
        }
        *a2 = v18;
        --v13;
        v14 -= 256LL;
        uint64_t v8 = v18;
        if (v13 < 2) {
          return 0LL;
        }
      }

      *(void *)(a1 + 8) = v14 | v11 & 0xFFFFFFFFFFFFF0FFLL;
      *a2 = v16 - v8;
      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

uint64_t sub_188D032F0(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = *a2;
  if (*a2 <= 0 && (a3 & 1) == 0) {
    return 1LL;
  }
  if (*(_BYTE *)(v7 + 18))
  {
    sub_188D07F48((uint64_t)v3);
    char v10 = sub_188D07D58(v7 + 16, v7 + 24, a1, v7, a2, a3 & 1);
    sub_188D087F8((uint64_t)v3);
    return v10 & 1;
  }

  else
  {
    unint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = (v11 >> 8) & 0xF;
    if (v12)
    {
      unint64_t v13 = v12 + 1;
      uint64_t v14 = (v12 << 8) - 256;
      __int128 v15 = (unsigned __int8 *)(v7 + 24 * ((v11 >> 8) & 0xF) + 16);
      while (1)
      {
        unsigned int v17 = *v15;
        v15 -= 24;
        uint64_t v16 = v17;
        uint64_t v18 = v8 - v17;
        BOOL v19 = v8 <= v17;
        BOOL v20 = v8 < v17;
        if ((a3 & 1) != 0) {
          BOOL v19 = v20;
        }
        if (v19) {
          break;
        }
        *a2 = v18;
        --v13;
        v14 -= 256LL;
        uint64_t v8 = v18;
        if (v13 < 2) {
          return 0LL;
        }
      }

      *(void *)(a1 + 8) = v14 | v11 & 0xFFFFFFFFFFFFF0FFLL;
      *a2 = v16 - v8;
      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

uint64_t sub_188D0340C(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = *a2;
  if (*a2 <= 0 && (a3 & 1) == 0) {
    return 1LL;
  }
  if (*(_BYTE *)(v7 + 18))
  {
    sub_188D07F48((uint64_t)v3);
    char v10 = sub_188D065F4(v7 + 16, v7 + 24, a1, v7, a2, a3 & 1);
    sub_188D087F8((uint64_t)v3);
    return v10 & 1;
  }

  else
  {
    unint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = (v11 >> 8) & 0xF;
    if (v12)
    {
      unint64_t v13 = v12 + 1;
      uint64_t v14 = (v12 << 8) - 256;
      __int128 v15 = (unsigned __int8 *)(v7 + 24 * ((v11 >> 8) & 0xF) + 17);
      while (1)
      {
        unsigned int v17 = *v15;
        v15 -= 24;
        uint64_t v16 = v17;
        uint64_t v18 = v8 - v17;
        BOOL v19 = v8 <= v17;
        BOOL v20 = v8 < v17;
        if ((a3 & 1) != 0) {
          BOOL v19 = v20;
        }
        if (v19) {
          break;
        }
        *a2 = v18;
        --v13;
        v14 -= 256LL;
        uint64_t v8 = v18;
        if (v13 < 2) {
          return 0LL;
        }
      }

      *(void *)(a1 + 8) = v14 | v11 & 0xFFFFFFFFFFFFF0FFLL;
      *a2 = v16 - v8;
      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

unint64_t sub_188D03528(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t result = sub_188D0F098(a1, a3, a4);
  if (a2 < 0)
  {
    uint64_t v14 = 0LL;
    while (1)
    {
      if (result < 0x10000) {
        goto LABEL_38;
      }
      if ((a4 & 0x1000000000000000LL) == 0) {
        break;
      }
      unint64_t result = sub_188DF7E14();
LABEL_20:
      if (--v14 <= a2) {
        return result;
      }
    }

    unint64_t v15 = result >> 16;
    if ((a4 & 0x2000000000000000LL) != 0)
    {
      unint64_t v21 = a3;
      uint64_t v22 = a4 & 0xFFFFFFFFFFFFFFLL;
      if ((*((_BYTE *)&v21 + v15 - 1) & 0xC0) == 0x80)
      {
        uint64_t v17 = 0LL;
        do
          int v19 = *((_BYTE *)&v21 + v15 + v17-- - 2) & 0xC0;
        while (v19 == 128);
        goto LABEL_33;
      }
    }

    else
    {
      uint64_t v16 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((a3 & 0x1000000000000000LL) == 0) {
        uint64_t v16 = sub_188DF8684();
      }
      if ((*(_BYTE *)(v15 + v16 - 1) & 0xC0) == 0x80)
      {
        uint64_t v17 = 0LL;
        do
          int v18 = *(_BYTE *)(v16 + v15 - 2 + v17--) & 0xC0;
        while (v18 == 128);
LABEL_33:
        uint64_t v20 = 1 - v17;
LABEL_35:
        unint64_t result = ((v15 - v20) << 16) | 5;
        goto LABEL_20;
      }
    }

    uint64_t v20 = 1LL;
    goto LABEL_35;
  }

  if (a2)
  {
    if ((a4 & 0x2000000000000000LL) != 0) {
      unint64_t v8 = HIBYTE(a4) & 0xF;
    }
    else {
      unint64_t v8 = a3 & 0xFFFFFFFFFFFFLL;
    }
    while (1)
    {
      unint64_t v9 = result >> 16;
      if (result >> 16 >= v8) {
        break;
      }
      if ((a4 & 0x1000000000000000LL) != 0)
      {
        unint64_t result = sub_188DF7E08();
        if (!--a2) {
          return result;
        }
      }

      else
      {
        if ((a4 & 0x2000000000000000LL) != 0)
        {
          unint64_t v21 = a3;
          uint64_t v22 = a4 & 0xFFFFFFFFFFFFFFLL;
          int v11 = *((unsigned __int8 *)&v21 + v9);
        }

        else
        {
          uint64_t v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000LL) == 0) {
            uint64_t v10 = sub_188DF8684();
          }
          int v11 = *(unsigned __int8 *)(v10 + v9);
        }

        int v12 = (char)v11;
        unsigned int v13 = __clz(v11 ^ 0xFF) - 24;
        if (v12 >= 0) {
          LOBYTE(v13) = 1;
        }
        unint64_t result = ((v9 + v13) << 16) | 5;
        if (!--a2) {
          return result;
        }
      }
    }

    __break(1u);
LABEL_38:
    __break(1u);
  }

  return result;
}

unint64_t sub_188D03720( unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  return sub_188D03798( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))MEMORY[0x189617F58],  (uint64_t (*)(unint64_t, unint64_t, uint64_t, uint64_t))sub_188D016E0,  (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_188D01B6C);
}

unint64_t sub_188D0375C( unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  return sub_188D03798( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_188D62BEC,  (uint64_t (*)(unint64_t, unint64_t, uint64_t, uint64_t))sub_188D01838,  (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_188D01C9C);
}

unint64_t sub_188D03798( unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, unint64_t, uint64_t, uint64_t), uint64_t (*a10)(unint64_t, unint64_t, uint64_t, uint64_t), uint64_t (*a11)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t))
{
  __int128 v12 = v11[1];
  __int128 v63 = *v11;
  __int128 v64 = v12;
  __int128 v65 = v11[2];
  unint64_t v13 = 2 * (v65 & 0x1FFFFFFFFFFFFFLL);
  if (!(void)v63) {
    unint64_t v13 = 0LL;
  }
  unint64_t v14 = result >> 10;
  if (v13 < result >> 10)
  {
    __break(1u);
    goto LABEL_54;
  }

  unint64_t v15 = a5 >> 10;
  if (v13 < a5 >> 10)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }

  if (v14 == v15) {
    return 0LL;
  }
  uint64_t v17 = (uint64_t)v11;
  unint64_t v58 = a5 >> 10;
  unint64_t v59 = result >> 10;
  BOOL v18 = v15 >= v14;
  if (v15 >= v14) {
    unint64_t v19 = result;
  }
  else {
    unint64_t v19 = a5;
  }
  if (v15 >= v14) {
    uint64_t v20 = a2;
  }
  else {
    uint64_t v20 = a6;
  }
  if (v18) {
    unint64_t v21 = a3;
  }
  else {
    unint64_t v21 = a7;
  }
  if (v18) {
    uint64_t v22 = a4;
  }
  else {
    uint64_t v22 = a8;
  }
  if (v18) {
    unint64_t v23 = a5;
  }
  else {
    unint64_t v23 = result;
  }
  if (v18) {
    uint64_t v24 = a6;
  }
  else {
    uint64_t v24 = a2;
  }
  if (v18) {
    unint64_t v25 = a7;
  }
  else {
    unint64_t v25 = a3;
  }
  if (v18) {
    uint64_t v26 = a8;
  }
  else {
    uint64_t v26 = a4;
  }
  unint64_t v27 = sub_188D097FC(v19, v20, v21, v22, 0);
  uint64_t v60 = v28;
  unint64_t v61 = v29;
  uint64_t v31 = v30;
  unint64_t result = sub_188D097FC(v23, v24, v25, v26, 1);
  if (v31 == 1) {
    goto LABEL_61;
  }
  uint64_t v35 = v34;
  if (v34 != 1)
  {
    unint64_t v36 = v33;
    unint64_t v37 = (16 * (int)v27) & 0x4000LL | ((unint64_t)v27 << 16) | (v27 >> 8) & 3 | 4;
    unint64_t v38 = (16 * (int)result) & 0x4000LL | ((unint64_t)result << 16) | (result >> 8) & 3 | 4;
    if (v61 != v33)
    {
      if (v60 == *((void *)&v65 + 1))
      {
        uint64_t v43 = v32;
        uint64_t v56 = v31;
        unint64_t v57 = v37;
        unint64_t v55 = (16 * (int)result) & 0x4000LL | ((unint64_t)result << 16) | (result >> 8) & 3 | 4;
        if (v31)
        {
          unint64_t v44 = v31 + 24 * ((v61 >> ((4 * *(_BYTE *)(v31 + 18) + 8) & 0x3C)) & 0xF);
          uint64_t v46 = *(void *)(v44 + 24);
          uint64_t v45 = *(void *)(v44 + 32);
          unint64_t result = swift_bridgeObjectRetain();
        }

        else
        {
          __int128 v68 = v63;
          __int128 v69 = v64;
          uint64_t v70 = v65;
          swift_unknownObjectRetain();
          sub_188D36E50(v61, (uint64_t)v66);
          unint64_t result = sub_188D087F8((uint64_t)v11);
          uint64_t v45 = *((void *)&v66[0] + 1);
          uint64_t v46 = *(void *)&v66[0];
        }

        if (v43 == v60)
        {
          if (v35)
          {
            unint64_t v47 = v35 + 24 * ((v36 >> ((4 * *(_BYTE *)(v35 + 18) + 8) & 0x3C)) & 0xF);
            uint64_t v49 = *(void *)(v47 + 24);
            uint64_t v48 = *(void *)(v47 + 32);
            swift_bridgeObjectRetain();
          }

          else
          {
            v66[0] = v63;
            v66[1] = v64;
            uint64_t v67 = v65;
            swift_unknownObjectRetain();
            sub_188D36E50(v36, (uint64_t)v62);
            sub_188D087F8((uint64_t)v11);
            uint64_t v49 = v62[0];
            uint64_t v48 = v62[1];
          }

          swift_unknownObjectRetain();
          uint64_t v50 = sub_188D01358(v60, v61, v56, v60, v36, v35, a10, a11);
          sub_188D087F8(v17);
          uint64_t v51 = a9(15LL, v57, v46, v45);
          unint64_t result = swift_bridgeObjectRelease();
          BOOL v52 = __OFSUB__(v50, v51);
          uint64_t v53 = v50 - v51;
          if (!v52)
          {
            uint64_t v54 = a9(15LL, v55, v49, v48);
            unint64_t result = swift_bridgeObjectRelease();
            BOOL v52 = __OFADD__(v53, v54);
            uint64_t v16 = v53 + v54;
            if (v52)
            {
LABEL_60:
              __break(1u);
LABEL_61:
              __break(1u);
              goto LABEL_62;
            }

            if (v58 >= v59) {
              return v16;
            }
            goto LABEL_51;
          }

LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
          goto LABEL_60;
        }

          __break(1u);
LABEL_59:
          __break(1u);
          goto LABEL_60;
        }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  v4 += v20 << 16;
  unint64_t v21 = 5;
LABEL_59:
  uint64_t v17 = v4 & 0xFFFFFFFFFFFF0000LL | v21;
LABEL_60:
  unint64_t v23 = *(void *)(v9 + 48);
  if (v17 >> 14 >= 4 * v14)
  {
    unint64_t v27 = *(_OWORD *)(v9 + 16);
    unint64_t v33 = *(_OWORD *)v9;
    uint64_t v34 = v27;
    uint64_t v35 = *(_OWORD *)(v9 + 32);
    sub_188D011B8((uint64_t)&v33, (uint64_t)v40);
    sub_188D07F48((uint64_t)v40);
    uint64_t v26 = sub_188D36584(v32, v3, v10);
    uint64_t v3 = v28;
    uint64_t v10 = v29;
    sub_188D087F8((uint64_t)&v33);
    unint64_t v25 = (v23 + ((v30 - (unint64_t)v23) << 11)) & 0xFFFFFFFFFFFFF800LL;
  }

  else
  {
    uint64_t v24 = (v23 + (((v17 >> 16) - v23) << 11)) & 0xFFFFFFFFFFFFF800LL;
    if ((v17 & 0xC000) != 0) {
      v24 |= 0x400uLL;
    }
    unint64_t v25 = v24 & 0xFFFFFFFFFFFFFF00LL | BYTE2(v17);
    uint64_t v26 = v32;
  }

  *(void *)(v9 + 48) = v25;
  *(void *)(v9 + 56) = v26;
  *(void *)(v9 + 64) = v3;
  *(void *)(v9 + 72) = v10;
  return (Swift::UInt16_optional)((unsigned __int16)v8 | ((_DWORD)v7 << 16));
}

LABEL_57:
        __break(1u);
        goto LABEL_58;
      }

        __break(1u);
        goto LABEL_58;
      }

LABEL_56:
      __break(1u);
      goto LABEL_57;
    }

    if (v60 == *((void *)&v65 + 1))
    {
      unint64_t v39 = v37;
      if (v31)
      {
        unint64_t v40 = v31 + 24 * ((v61 >> ((4 * *(_BYTE *)(v31 + 18) + 8) & 0x3C)) & 0xF);
        uint64_t v41 = *(void *)(v40 + 24);
        uint64_t v42 = *(void *)(v40 + 32);
        swift_bridgeObjectRetain();
      }

      else
      {
        __int128 v68 = v63;
        __int128 v69 = v64;
        uint64_t v70 = v65;
        swift_unknownObjectRetain();
        sub_188D36E50(v61, (uint64_t)v66);
        sub_188D087F8((uint64_t)v11);
        uint64_t v42 = *((void *)&v66[0] + 1);
        uint64_t v41 = *(void *)&v66[0];
      }

      uint64_t v16 = a9(v39, v38, v41, v42);
      unint64_t result = swift_bridgeObjectRelease();
      if (v58 >= v59) {
        return v16;
      }
LABEL_51:
      BOOL v52 = __OFSUB__(0LL, v16);
      uint64_t v16 = -v16;
      if (!v52) {
        return v16;
      }
      goto LABEL_59;
    }

      __break(1u);
      goto LABEL_57;
    }

    if (v55 == *((void *)&v59 + 1))
    {
      unint64_t v33 = (16 * (int)v23) & 0x4000LL | ((unint64_t)v23 << 16) | (v23 >> 8) & 3 | 4;
      uint64_t v34 = (16 * (int)result) & 0x4000LL | ((unint64_t)result << 16) | (result >> 8) & 3 | 4;
      if (v27)
      {
        uint64_t v35 = v27 + 24 * ((v54 >> ((4 * *(_BYTE *)(v27 + 18) + 8) & 0x3C)) & 0xF);
        unint64_t v37 = *(void *)(v35 + 24);
        unint64_t v36 = *(void *)(v35 + 32);
        swift_bridgeObjectRetain();
      }

      else
      {
        uint64_t v62 = v57;
        __int128 v63 = v58;
        __int128 v64 = v59;
        swift_unknownObjectRetain();
        sub_188D36E50(v54, (uint64_t)v60);
        sub_188D087F8((uint64_t)v8);
        unint64_t v36 = *((void *)&v60[0] + 1);
        unint64_t v37 = *(void *)&v60[0];
      }

      unint64_t v13 = sub_188D82544(v33, v34, v37, v36);
      unint64_t result = swift_bridgeObjectRelease();
      if (v52 >= v53) {
        return v13;
      }
LABEL_51:
      unint64_t v47 = __OFSUB__(0LL, v13);
      unint64_t v13 = -(uint64_t)v13;
      if (!v47) {
        return v13;
      }
      goto LABEL_59;
    }

          __break(1u);
LABEL_57:
          __break(1u);
          goto LABEL_58;
        }

          __break(1u);
LABEL_57:
          __break(1u);
          goto LABEL_58;
        }

      unint64_t v25 = MEMORY[0x1895D67BC](15LL, v19, v7, v6);
      goto LABEL_32;
    }

    if ((v3 & 0x1000000000000000LL) == 0)
    {
      if ((v19 & 0x8000000000000000LL) == 0)
      {
        if (v5 >= v19)
        {
          uint64_t v20 = (v19 << 16) | 4;
          goto LABEL_22;
        }

        goto LABEL_58;
      }

      __break(1u);
      goto LABEL_56;
    }
  }

  uint64_t v20 = MEMORY[0x1895D67BC](15LL, v19, v4, v3);
LABEL_22:
  unint64_t v21 = sub_188D0F098(v20, v4, v3);
  if ((v21 ^ v20) >= 0x4000)
  {
    uint64_t v22 = sub_188DC9D84(v21, v4, v3);
    if ((v3 & 0x1000000000000000LL) == 0)
    {
      uint64_t v6 = v22 >> 16;
      if ((v3 & 0x2000000000000000LL) != 0)
      {
        unint64_t v37 = v4;
        unint64_t v38 = v3 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v24 = *((unsigned __int8 *)&v37 + v6);
        goto LABEL_41;
      }

      if ((v4 & 0x1000000000000000LL) != 0)
      {
        unint64_t v23 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_27:
        uint64_t v24 = *(unsigned __int8 *)(v23 + v6);
LABEL_41:
        uint64_t v31 = (char)v24;
        uint64_t v32 = __clz(v24 ^ 0xFF) - 24;
        if (v31 >= 0) {
          LOBYTE(v32) = 1;
        }
        uint64_t v20 = ((v6 + v32) << 16) | 5;
        goto LABEL_44;
      }

    if (!a2[1]
      || (uint8x8_t v73 = a2[1],
          unint64_t v61 = *((_OWORD *)a2 + 2),
          uint64_t v74 = *((_OWORD *)a2 + 1),
          uint64_t v75 = v61,
          swift_unknownObjectRetain(),
          uint64_t v62 = sub_188D83804((uint64_t)&v73, a3),
          swift_unknownObjectRelease(),
          (v62 & 1) != 0))
    {
      if (!a2[7]) {
        return 1LL;
      }
      swift_bridgeObjectRetain();
      __int128 v63 = sub_188DF7FD0();
      __int128 v65 = v64;
      uint64_t v67 = v66;
      __int128 v69 = v68;
      swift_bridgeObjectRelease();
      sub_188DCAB58(v63, v65, v67, v69);
      goto LABEL_31;
    }
  }

  return 0LL;
}

  __break(1u);
  return result;
}

  if ((v18 & 1) == 0)
  {
    if (v7 >= 1)
    {
      sub_188DF836C();
      Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)position, v7);
      unint64_t result = Deque._UnsafeHandle.slot(_:offsetBy:)(v11, v7).position;
    }

    if (v14 < 1)
    {
LABEL_74:
      a3[2] = v11.position;
      unint64_t v37 = a3[1];
      uint64_t v31 = __OFADD__(v37, v8);
      unint64_t v38 = v37 + v8;
      if (!v31)
      {
        a3[1] = v38;
        if (v14 <= 0) {
          uint64_t v35 = *a3;
        }
        else {
          uint64_t v35 = v14;
        }
        unint64_t v36 = v5;
LABEL_79:
        unint64_t result = Deque._UnsafeHandle.mutableWrappedBuffer(between:and:)(v36, v35, a3, (uint64_t)v42);
        unint64_t v39 = v43;
        unint64_t v40 = v42[1];
        *(_OWORD *)a4 = v42[0];
        *(_OWORD *)(a4 + 16) = v40;
        *(_BYTE *)(a4 + 32) = v39;
        return result;
      }

      goto LABEL_84;
    }

    uint64_t v32 = *a3 + v10;
    sub_188DF836C();
    Deque._UnsafeHandle.slot(_:offsetBy:)(0LL, v14);
    unint64_t v29 = v32;
    uint64_t v30 = v14;
LABEL_73:
    unint64_t result = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v29, v30).position;
    goto LABEL_74;
  }

      unint64_t v44 = v7 | ((v53 - (void)a5 + v7) << 11);
      uint64_t v46 = v60;
      uint64_t v45 = v61;
      goto LABEL_71;
    }

    goto LABEL_84;
  }

LABEL_55:
    __break(1u);
    goto LABEL_56;
  }

    __break(1u);
    goto LABEL_56;
  }

        __break(1u);
        goto LABEL_56;
      }

      int v11 = (v8 << 11) | 0x300;
      swift_bridgeObjectRelease();
      return v11;
    }

        __break(1u);
        goto LABEL_56;
      }

      int v11 = (v8 << 11) | 0x300;
      swift_bridgeObjectRelease();
      return v11;
    }

  uint64_t v22 = sub_188D36F34(v4, v7, v1);
  uint64_t v4 = v22 & 0xFFFFFFFFFFFFFFF2LL | 1;
  uint64_t v2 = v22 >> 16;
  if ((v1 & 0x2000000000000000LL) != 0) {
    goto LABEL_56;
  }
LABEL_38:
  if ((v7 & 0x1000000000000000LL) != 0) {
    BOOL v18 = (v1 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else {
    BOOL v18 = sub_188DF8684();
  }
  LODWORD(v7) = v31;
  unint64_t v19 = *(unsigned __int8 *)(v18 + v2);
  swift_bridgeObjectRelease();
  if ((v19 & 0x80) == 0)
  {
LABEL_57:
    uint64_t v20 = 1LL;
    goto LABEL_58;
  }

LABEL_62:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }

unint64_t _s19CollectionsInternal9BigStringV8distance4from2toSiAC5IndexV_AHtF_0( unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  __int128 v15 = *(_OWORD *)(v9 + 16);
  __int128 v81 = *(_OWORD *)v9;
  __int128 v82 = v15;
  __int128 v83 = *(_OWORD *)(v9 + 32);
  unint64_t v16 = v81;
  unsigned int v17 = v83;
  unint64_t v18 = 2 * (v83 & 0x1FFFFFFFFFFFFFLL);
  if (!(void)v81) {
    unint64_t v18 = 0LL;
  }
  unint64_t v19 = a1 >> 10;
  if (v18 < a1 >> 10)
  {
    __break(1u);
    goto LABEL_88;
  }

  unint64_t v20 = a5 >> 10;
  if (v18 < a5 >> 10)
  {
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }

  if (v19 == v20) {
    return 0LL;
  }
  unint64_t v8 = v9;
  unint64_t v72 = *((void *)&v81 + 1);
  uint64_t v73 = v82;
  unint64_t v74 = a5 >> 10;
  unint64_t v75 = a1 >> 10;
  BOOL v22 = v20 >= v19;
  if (v20 >= v19) {
    unint64_t v23 = a1;
  }
  else {
    unint64_t v23 = a5;
  }
  if (v20 >= v19) {
    uint64_t v24 = a2;
  }
  else {
    uint64_t v24 = a6;
  }
  if (v22) {
    unint64_t v25 = a3;
  }
  else {
    unint64_t v25 = a7;
  }
  if (v22) {
    uint64_t v26 = a4;
  }
  else {
    uint64_t v26 = a8;
  }
  uint64_t v71 = *((void *)&v82 + 1);
  if (v22) {
    unint64_t v10 = a5;
  }
  else {
    unint64_t v10 = a1;
  }
  if (v22) {
    uint64_t v27 = a6;
  }
  else {
    uint64_t v27 = a2;
  }
  if (v22) {
    unint64_t v28 = a7;
  }
  else {
    unint64_t v28 = a3;
  }
  if (v22) {
    uint64_t v29 = a8;
  }
  else {
    uint64_t v29 = a4;
  }
  unint64_t v30 = sub_188D097FC(v23, v24, v25, v26, 0);
  unint64_t v77 = v32;
  uint64_t v78 = v31;
  uint64_t v34 = v33;
  unint64_t result = sub_188D097FC(v10, v27, v28, v29, 1);
  if (v34 == 1) {
    goto LABEL_110;
  }
  unint64_t v14 = v37;
  if (v37 == 1)
  {
LABEL_111:
    __break(1u);
    return result;
  }

  unint64_t v11 = v36;
  unint64_t v12 = (16 * (int)v30) & 0x4000LL | ((unint64_t)v30 << 16);
  uint64_t v38 = v12 | (v30 >> 8) & 3 | 4;
  unint64_t v13 = v77;
  unint64_t v76 = (16 * (int)result) & 0x4000LL | ((unint64_t)result << 16) | (result >> 8) & 3 | 4;
  if (v77 == v36)
  {
    if (v78 == *((void *)&v83 + 1))
    {
      unint64_t v11 = v38;
      unint64_t v14 = (16 * (int)result) & 0x4000LL | ((unint64_t)result << 16);
      if (v34)
      {
        unint64_t v39 = v34 + 24 * ((v77 >> ((4 * *(_BYTE *)(v34 + 18) + 8) & 0x3C)) & 0xF);
        uint64_t v9 = *(void *)(v39 + 24);
        unint64_t v8 = *(void *)(v39 + 32);
        LODWORD(sub_188D08238((uint64_t)v9, v10) = *(unsigned __int8 *)(v39 + 44);
        swift_bridgeObjectRetain();
      }

      else
      {
        __int128 v89 = v81;
        __int128 v90 = v82;
        uint64_t v91 = v83;
        swift_unknownObjectRetain();
        sub_188D36E50(v77, (uint64_t)&v84);
        sub_188D087F8(v9);
        uint64_t v9 = v84;
        unint64_t v8 = v85;
        LODWORD(sub_188D08238((uint64_t)v9, v10) = BYTE4(v86);
      }

      unint64_t v13 = HIBYTE(v8) & 0xF;
      unint64_t v10 = v10;
      if ((v8 & 0x1000000000000000LL) == 0)
      {
        unint64_t v41 = v9 & 0xFFFFFFFFFFFFLL;
        if ((v8 & 0x2000000000000000LL) != 0) {
          unint64_t v41 = HIBYTE(v8) & 0xF;
        }
        unint64_t result = ((unint64_t)v10 << 16) | 4;
        goto LABEL_46;
      }

LABEL_91:
      unint64_t result = MEMORY[0x1895D67BC](15LL, v10, v9, v8);
LABEL_46:
      unint64_t v42 = result >> 14;
      uint64_t v34 = v12 >> 14 < result >> 14;
      if (v12 >> 14 < result >> 14) {
        unint64_t v11 = result;
      }
      unint64_t v12 = v14 >> 14 < v42;
      if (v14 >> 14 >= v42) {
        unint64_t v16 = v76;
      }
      else {
        unint64_t v16 = result;
      }
      if ((v8 & 0x1000000000000000LL) != 0)
      {
        unint64_t v44 = MEMORY[0x1895D67BC](15LL, v10, v9, v8);
      }

      else
      {
        unint64_t v43 = v9 & 0xFFFFFFFFFFFFLL;
        if ((v8 & 0x2000000000000000LL) != 0) {
          unint64_t v43 = v13;
        }
        if (v43 < v10) {
          goto LABEL_109;
        }
        unint64_t v44 = (v10 << 16) | 4;
      }

      sub_188D0EFD0(v44, v9, v8);
      uint64_t v9 = v45;
      unint64_t v10 = sub_188DF8498();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v46 = v10 + v34;
      if (__OFADD__(v10, v34))
      {
        __break(1u);
        goto LABEL_99;
      }

      unint64_t result = v46 - v12;
      if (!__OFSUB__(v46, v12)) {
        goto LABEL_84;
      }
      __break(1u);
      goto LABEL_61;
    }

    goto LABEL_89;
  }

  if (v78 != *((void *)&v83 + 1))
  {
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }

  unint64_t v10 = v35;
  unint64_t v68 = (16 * (int)result) & 0x4000LL | ((unint64_t)result << 16);
  if (v34)
  {
    unint64_t v40 = v34 + 24 * ((v77 >> ((4 * *(_BYTE *)(v34 + 18) + 8) & 0x3C)) & 0xF);
    unint64_t v13 = *(void *)(v40 + 32);
    uint64_t v70 = *(void *)(v40 + 24);
    uint64_t v9 = *(unsigned __int8 *)(v40 + 44);
    swift_bridgeObjectRetain();
    goto LABEL_62;
  }

  __break(1u);
LABEL_92:
  __break(1u);
  return result;
}

    __int128 v90 = sub_188CF73F0((void *)(v24 > 1), v21, 1, v90);
    goto LABEL_64;
  }

  if (v21)
  {
    sub_188DEF570((uint64_t)v121);
    uint64_t v7 = v94;
    unint64_t v8 = v95;
    unint64_t v10 = v96;
    uint64_t v9 = v97;
    unint64_t v11 = v98;
    goto LABEL_51;
  }

  __break(1u);
LABEL_93:
  __break(1u);
  return result;
}

LABEL_61:
  *(void *)&__int128 v89 = v16;
  *((void *)&v89 + 1) = v72;
  *(void *)&__int128 v90 = v73;
  *((void *)&v90 + 1) = v71;
  uint64_t v91 = v83;
  swift_unknownObjectRetain();
  sub_188D36E50(v13, (uint64_t)&v84);
  sub_188D087F8(v8);
  unint64_t v13 = v85;
  uint64_t v70 = v84;
  uint64_t v9 = BYTE4(v86);
LABEL_62:
  if (v10 != v78)
  {
    __break(1u);
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }

  unsigned int v69 = v9;
  if (v14)
  {
    unint64_t v47 = v14 + 24 * ((v11 >> ((4 * *(_BYTE *)(v14 + 18) + 8) & 0x3C)) & 0xF);
    unint64_t v10 = *(void *)(v47 + 32);
    uint64_t v73 = *(void *)(v47 + 24);
    unsigned int v17 = *(unsigned __int8 *)(v47 + 44);
    swift_bridgeObjectRetain();
  }

  else
  {
    unint64_t v84 = v16;
    unint64_t v85 = v72;
    uint64_t v86 = v73;
    uint64_t v87 = v71;
    uint64_t v88 = v83;
    swift_unknownObjectRetain();
    sub_188D36E50(v11, (uint64_t)v79);
    sub_188D087F8(v8);
    unint64_t v10 = v79[1];
    uint64_t v73 = v79[0];
    unsigned int v17 = v80;
  }

  swift_unknownObjectRetain();
  uint64_t v9 = sub_188D01358( v78,  v77,  v34,  v78,  v11,  v14,  (uint64_t (*)(unint64_t, unint64_t, uint64_t, uint64_t))sub_188D01990,  (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_188D01DCC);
  sub_188D087F8(v8);
  unint64_t v11 = v69;
  if ((v13 & 0x1000000000000000LL) == 0)
  {
    unint64_t v48 = HIBYTE(v13) & 0xF;
    uint64_t v49 = v70;
    if ((v13 & 0x2000000000000000LL) == 0) {
      unint64_t v48 = v70 & 0xFFFFFFFFFFFFLL;
    }
    if (v48 >= v69)
    {
      BOOL v50 = v12 >> 14 < 4 * (unint64_t)v69;
      uint64_t v51 = ((unint64_t)v69 << 16) | 4;
      uint64_t v52 = 4LL * v69;
      BOOL v53 = v52 != 0;
      if (v52) {
        unint64_t v16 = ((unint64_t)v69 << 16) | 4;
      }
      else {
        unint64_t v16 = 15LL;
      }
      goto LABEL_73;
    }

  uint64_t v162 = v17 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0x2000000000000000LL) != 0) {
    uint64_t v162 = HIBYTE(a3) & 0xF;
  }
  if (v162 < v22 >> 16) {
    goto LABEL_82;
  }
  unint64_t result = sub_188DF7F28();
  unint64_t v23 = result;
  if (v20 <= 255) {
    goto LABEL_65;
  }
LABEL_8:
  else {
    uint64_t v24 = v20 - 124;
  }
  if (v20 - v24 > 252) {
    goto LABEL_66;
  }
  if (v23 >= v24)
  {
    if ((a3 & 0x1000000000000000LL) != 0)
    {
      unint64_t v72 = MEMORY[0x1895D67BC](15LL, v24, v17, a3);
    }

    else
    {
      uint64_t v71 = HIBYTE(a3) & 0xF;
      if ((a3 & 0x2000000000000000LL) == 0) {
        uint64_t v71 = v17 & 0xFFFFFFFFFFFFLL;
      }
      if (v71 < v24) {
        goto LABEL_72;
      }
      unint64_t v72 = (v24 << 16) | 4;
    }

    uint64_t v73 = sub_188D0F098(v72, v17, a3);
    unint64_t v74 = sub_188D82630( v73,  v17,  a3,  ((unint64_t)*((unsigned __int8 *)v16 + 21) << 40) | ((unint64_t)*(unsigned int *)((char *)v16 + 17) << 8) | v15);
    unint64_t v75 = v74;
    LODWORD(v178) = v76;
    uint64_t v173 = v74 >> 8;
    unsigned int v174 = v74 >> 16;
    uint64_t v175 = v74 >> 24;
    uint64_t v176 = HIDWORD(v74);
    uint64_t v177 = v74 >> 40;
    v179 = (char *)HIWORD(v74);
    uint64_t v180 = (char *)HIBYTE(v74);
    LODWORD(v182) = v76 >> 8;
    LODWORD(v181) = HIWORD(v76);
    LODWORD(v183) = HIBYTE(v76);
    swift_bridgeObjectRetain();
    unint64_t v77 = sub_188D0EFD0(v73, v17, a3);
    uint64_t v79 = v78;
    __int128 v81 = v80;
    __int128 v83 = v82;
    swift_bridgeObjectRelease();
    uint64_t v24 = MEMORY[0x1895D6684](v77, v79, v81, v83);
    __int128 v15 = v84;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    unint64_t v85 = sub_188DF7FD0();
    uint64_t v87 = v86;
    unint64_t v18 = v88;
    __int128 v90 = v89;
    swift_bridgeObjectRelease();
    unsigned int v17 = MEMORY[0x1895D6684](v85, v87, v18, v90);
    uint64_t v92 = v91;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *unint64_t v16 = v17;
    v16[1] = v92;
    *((_BYTE *)v16 + 16) = v75;
    *((_BYTE *)v16 + 17) = v173;
    *((_BYTE *)v16 + 18) = v174;
    *((_BYTE *)v16 + 19) = v175;
    *((_BYTE *)v16 + 20) = v176;
    *((_BYTE *)v16 + 21) = v177;
    uint64_t v200 = v24;
    uint64_t v201 = v15;
    LOBYTE(v202) = (_BYTE)v179;
    BYTE1(v202) = (_BYTE)v180;
    BYTE2(v202) = (_BYTE)v178;
    BYTE3(v202) = v182;
    BYTE4(v202) = (_BYTE)v181;
    BOOL v22 = v23 - v75;
    BYTE5(v202) = v183;
    if ((v15 & 0x1000000000000000LL) != 0)
    {
LABEL_69:
      uint64_t v94 = MEMORY[0x1895D67BC](15LL, v22, v24, v15);
      uint64_t v95 = v184;
      unint64_t v23 = (uint64_t)v185;
      goto LABEL_36;
    }

    unint64_t v23 = (uint64_t)v185;
    if ((v22 & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else
    {
      uint64_t v93 = HIBYTE(v15) & 0xF;
      if ((v15 & 0x2000000000000000LL) == 0) {
        uint64_t v93 = v24 & 0xFFFFFFFFFFFFLL;
      }
      if (v93 >= v22)
      {
        uint64_t v94 = (v22 << 16) | 4;
        uint64_t v95 = v184;
LABEL_36:
        int8x8_t v96 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A2A8);
        sub_188D2C7E8((void *)v23, v94, (void *)((char *)v95 + *(int *)(v96 + 48)));
        uint64_t v97 = v201;
        uint64_t v98 = WORD2(v202);
        *uint64_t v95 = v200;
        v95[1] = v97;
        *((_DWORD *)v95 + 4) = v202;
        *((_WORD *)v95 + 10) = v98;
        _s12InsertResultOMa();
        return swift_storeEnumTagMultiPayload();
      }
    }

    __break(1u);
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }

  if (__OFADD__(v23, v18))
  {
    __break(1u);
    goto LABEL_69;
  }

  unsigned int v174 = v15 + v18;
  if (v24 >= v23 + v18)
  {
    uint64_t v99 = v24 - v18;
    if ((a3 & 0x1000000000000000LL) != 0)
    {
      uint64_t v101 = MEMORY[0x1895D67BC](15LL, v99, v17, a3);
    }

    else
    {
      if ((v99 & 0x8000000000000000LL) != 0)
      {
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
        goto LABEL_81;
      }

      uint64_t v100 = HIBYTE(a3) & 0xF;
      if ((a3 & 0x2000000000000000LL) == 0) {
        uint64_t v100 = v17 & 0xFFFFFFFFFFFFLL;
      }
      if (v100 < v99) {
        goto LABEL_79;
      }
      uint64_t v101 = (v99 << 16) | 4;
    }

    uint64_t v102 = sub_188D0F098(v101, v17, a3);
    uint64_t v103 = sub_188D82630( v102,  v17,  a3,  ((unint64_t)*((unsigned __int8 *)v16 + 21) << 40) | ((unint64_t)*(unsigned int *)((char *)v16 + 17) << 8) | v15);
    uint64_t v104 = v103;
    LODWORD(v171) = v105;
    v166 = v103 >> 8;
    uint64_t v167 = v103 >> 16;
    int v168 = v103 >> 24;
    uint64_t v169 = HIDWORD(v103);
    uint64_t v170 = v103 >> 40;
    uint64_t v172 = HIWORD(v103);
    uint64_t v173 = HIBYTE(v103);
    LODWORD(v182) = v105 >> 8;
    LODWORD(v180) = HIWORD(v105);
    LODWORD(v177) = HIBYTE(v105);
    swift_bridgeObjectRetain();
    uint64_t v106 = sub_188D0EFD0(v102, v17, a3);
    uint64_t v108 = v107;
    uint64_t v110 = v109;
    uint8x8_t v112 = v111;
    swift_bridgeObjectRelease();
    char v165 = MEMORY[0x1895D6684](v106, v108, v110, v112);
    uint64_t v114 = v113;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v115 = sub_188DF7FD0();
    uint64_t v117 = v116;
    uint64_t v119 = v118;
    uint64_t v121 = v120;
    swift_bridgeObjectRelease();
    unint64_t v18 = MEMORY[0x1895D6684](v115, v117, v119, v121);
    unsigned int v17 = v122;
    swift_bridgeObjectRelease();
    unint64_t result = swift_bridgeObjectRelease();
    *unint64_t v16 = v18;
    v16[1] = v17;
    *((_BYTE *)v16 + 16) = v104;
    *((_BYTE *)v16 + 17) = v166;
    *((_BYTE *)v16 + 18) = v167;
    *((_BYTE *)v16 + 19) = v168;
    *((_BYTE *)v16 + 20) = v169;
    *((_BYTE *)v16 + 21) = v170;
    uint64_t v200 = v165;
    uint64_t v201 = v114;
    LOBYTE(v202) = v172;
    BYTE1(v202) = v173;
    BYTE2(v202) = v171;
    BYTE3(v202) = v182;
    BYTE4(v202) = (_BYTE)v180;
    BYTE5(v202) = v177;
    if ((v17 & 0x1000000000000000LL) == 0)
    {
      uint64_t v123 = v184;
      uint64_t v124 = v183;
      if (v23 < 0)
      {
        __break(1u);
      }

      else
      {
        int8x8_t v125 = HIBYTE(v17) & 0xF;
        if ((v17 & 0x2000000000000000LL) == 0) {
          int8x8_t v125 = v18 & 0xFFFFFFFFFFFFLL;
        }
        if (v125 >= v23)
        {
          uint64_t v126 = (v23 << 16) | 4;
          uint64_t v127 = v176;
          uint64_t v128 = v175;
          uint64_t v129 = v185;
LABEL_50:
          uint64_t v130 = v179;
          uint64_t v131 = v178;
          swift_bridgeObjectRetain();
          sub_188D2C7E8(v129, v126, v131);
          if ((*(unsigned int (**)(void *, uint64_t, unint64_t))(v128 + 48))(v131, 1LL, v127) == 1)
          {
            swift_bridgeObjectRelease();
            uint64_t v132 = &qword_18C74A298;
            uint64_t v133 = (uint64_t)v131;
LABEL_56:
            sub_188D2DCE0(v133, v132);
            uint64_t v153 = (char *)v123 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C74A2A8) + 48);
            unsigned int v154 = v201;
            uint64_t v155 = WORD2(v202);
            *uint64_t v123 = v200;
            v123[1] = v154;
            *((_DWORD *)v123 + 4) = v202;
            *((_WORD *)v123 + 10) = v155;
            (*(void (**)(char *, uint64_t, uint64_t, unint64_t))(v128 + 56))(v153, 1LL, 1LL, v127);
            goto LABEL_66;
          }

          uint64_t v186 = (unint64_t *)v23;
          uint64_t v145 = *(int *)(v127 + 48);
          uint64_t v146 = (uint64_t)&v130[v145];
          uint64_t v147 = *(int *)(v127 + 64);
          unsigned int v148 = (uint64_t)&v130[v147];
          uint8x8_t v149 = (char *)v131 + v145;
          char v150 = (char *)v131 + v147;
          *(void *)uint64_t v130 = *v131;
          uint64_t v151 = (void (*)(char *, char *, uint64_t))v181[4];
          v151(&v130[v145], v149, v124);
          v151((char *)v148, v150, v124);
          swift_bridgeObjectRelease();
          sub_188D2208C(0xFuLL, v146, v148);
          if ((v152 & 1) == 0)
          {
            uint64_t v132 = &qword_18C74A2A0;
            uint64_t v133 = (uint64_t)v130;
            goto LABEL_56;
          }

          unint64_t result = __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A2A8);
          uint64_t v156 = *(int *)(result + 48);
          uint64_t v157 = v201;
          uint64_t v158 = WORD2(v202);
          *uint64_t v123 = v200;
          v123[1] = v157;
          *((_DWORD *)v123 + 4) = v202;
          *((_WORD *)v123 + 10) = v158;
          if (__OFSUB__(v174, v186))
          {
LABEL_81:
            __break(1u);
LABEL_82:
            __break(1u);
            goto LABEL_83;
          }

          uint64_t v159 = (char *)v123 + v156;
          uint64_t v160 = (char *)v123 + v156 + *(int *)(v127 + 64);
          uint64_t v161 = (char *)v123 + v156 + *(int *)(v127 + 48);
          *(void *)((char *)v123 + v156) = v174 - (void)v186;
          v151(v161, (char *)v146, v124);
          v151(v160, (char *)v148, v124);
          (*(void (**)(char *, void, uint64_t, unint64_t))(v128 + 56))(v159, 0LL, 1LL, v127);
LABEL_66:
          _s12InsertResultOMa();
          return swift_storeEnumTagMultiPayload();
        }
      }

      __break(1u);
LABEL_77:
      __break(1u);
      goto LABEL_78;
    }

  __break(1u);
  return result;
}

LABEL_99:
    __break(1u);
    goto LABEL_100;
  }

LABEL_94:
  uint64_t v49 = v70;
  unint64_t v66 = MEMORY[0x1895D67BC](15LL, v11, v70, v13);
  BOOL v53 = v66 >> 14 != 0;
  if (v66 >> 14) {
    unint64_t v16 = v66;
  }
  else {
    unint64_t v16 = 15LL;
  }
  BOOL v50 = v12 >> 14 < v66 >> 14;
  uint64_t v51 = MEMORY[0x1895D67BC](15LL, v11, v70, v13);
LABEL_73:
  sub_188D0EFD0(v51, v49, v13);
  uint64_t v54 = sub_188DF8498();
  swift_bridgeObjectRelease();
  unint64_t result = swift_bridgeObjectRelease();
  uint64_t v55 = v54 + v53;
  if (__OFADD__(v54, v53))
  {
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }

  BOOL v56 = __OFSUB__(v55, v50);
  uint64_t v57 = v55 - v50;
  if (v56)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }

  unint64_t v16 = v9 - v57;
  if (__OFSUB__(v9, v57))
  {
LABEL_102:
    __break(1u);
    goto LABEL_103;
  }

  uint64_t v9 = v17;
  if ((v10 & 0x1000000000000000LL) != 0)
  {
LABEL_103:
    uint64_t v59 = v73;
    unint64_t v67 = (unint64_t)MEMORY[0x1895D67BC](15LL, v9, v73, v10) >> 14;
    BOOL v62 = v67 != 0;
    BOOL v60 = v68 >> 14 < v67;
    uint64_t v61 = MEMORY[0x1895D67BC](15LL, v9, v73, v10);
    goto LABEL_81;
  }

  unint64_t v58 = HIBYTE(v10) & 0xF;
  uint64_t v59 = v73;
  if ((v10 & 0x2000000000000000LL) == 0) {
    unint64_t v58 = v73 & 0xFFFFFFFFFFFFLL;
  }
  if (v58 < v17)
  {
    __break(1u);
    goto LABEL_105;
  }

  BOOL v60 = v68 >> 14 < 4 * (unint64_t)v17;
  uint64_t v61 = ((unint64_t)v17 << 16) | 4;
  BOOL v62 = 4LL * v17 != 0;
LABEL_81:
  sub_188D0EFD0(v61, v59, v10);
  uint64_t v63 = sub_188DF8498();
  swift_bridgeObjectRelease();
  unint64_t result = swift_bridgeObjectRelease();
  uint64_t v64 = v63 + v62;
  if (__OFADD__(v63, v62))
  {
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
    goto LABEL_107;
  }

  BOOL v56 = __OFSUB__(v64, v60);
  uint64_t v65 = v64 - v60;
  if (v56)
  {
LABEL_107:
    __break(1u);
    goto LABEL_108;
  }

  unint64_t result = v16 + v65;
  if (__OFADD__(v16, v65))
  {
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    __break(1u);
    goto LABEL_111;
  }

LABEL_84:
  if (v74 < v75)
  {
    BOOL v56 = __OFSUB__(0LL, result);
    unint64_t result = -(uint64_t)result;
    if (v56) {
      goto LABEL_106;
    }
  }

  return result;
}

unint64_t sub_188D04270( unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  __int128 v9 = v8[1];
  __int128 v57 = *v8;
  __int128 v58 = v9;
  __int128 v59 = v8[2];
  unint64_t v10 = 2 * (v59 & 0x1FFFFFFFFFFFFFLL);
  if (!(void)v57) {
    unint64_t v10 = 0LL;
  }
  unint64_t v11 = result >> 10;
  if (v10 < result >> 10)
  {
    __break(1u);
    goto LABEL_54;
  }

  unint64_t v12 = a5 >> 10;
  if (v10 < a5 >> 10)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }

  if (v11 == v12) {
    return 0LL;
  }
  unint64_t v52 = a5 >> 10;
  unint64_t v53 = result >> 10;
  BOOL v14 = v12 >= v11;
  if (v12 >= v11) {
    unint64_t v15 = result;
  }
  else {
    unint64_t v15 = a5;
  }
  if (v12 >= v11) {
    uint64_t v16 = a2;
  }
  else {
    uint64_t v16 = a6;
  }
  if (v14) {
    unint64_t v17 = a3;
  }
  else {
    unint64_t v17 = a7;
  }
  if (v14) {
    uint64_t v18 = a4;
  }
  else {
    uint64_t v18 = a8;
  }
  if (v14) {
    unint64_t v19 = a5;
  }
  else {
    unint64_t v19 = result;
  }
  if (v14) {
    uint64_t v20 = a6;
  }
  else {
    uint64_t v20 = a2;
  }
  if (v14) {
    unint64_t v21 = a7;
  }
  else {
    unint64_t v21 = a3;
  }
  if (v14) {
    uint64_t v22 = a8;
  }
  else {
    uint64_t v22 = a4;
  }
  unint64_t v23 = sub_188D097FC(v15, v16, v17, v18, 0);
  uint64_t v55 = v24;
  unint64_t v54 = v25;
  uint64_t v27 = v26;
  unint64_t result = sub_188D097FC(v19, v20, v21, v22, 1);
  if (v27 == 1) {
    goto LABEL_61;
  }
  uint64_t v31 = v30;
  if (v30 != 1)
  {
    unint64_t v32 = v29;
    if (v54 != v29)
    {
      if (v55 == *((void *)&v59 + 1))
      {
        uint64_t v38 = v28;
        unint64_t v51 = (16 * (int)v23) & 0x4000LL | ((unint64_t)v23 << 16) | (v23 >> 8) & 3 | 4;
        unint64_t v50 = (16 * (int)result) & 0x4000LL | ((unint64_t)result << 16) | (result >> 8) & 3 | 4;
        if (v27)
        {
          unint64_t v39 = v27 + 24 * ((v54 >> ((4 * *(_BYTE *)(v27 + 18) + 8) & 0x3C)) & 0xF);
          unint64_t v41 = *(void *)(v39 + 24);
          unint64_t v40 = *(void *)(v39 + 32);
          unint64_t result = swift_bridgeObjectRetain();
        }

        else
        {
          __int128 v62 = v57;
          __int128 v63 = v58;
          uint64_t v64 = v59;
          swift_unknownObjectRetain();
          sub_188D36E50(v54, (uint64_t)v60);
          unint64_t result = sub_188D087F8((uint64_t)v8);
          unint64_t v40 = *((void *)&v60[0] + 1);
          unint64_t v41 = *(void *)&v60[0];
        }

        if (v38 == v55)
        {
          if (v31)
          {
            unint64_t v42 = v31 + 24 * ((v32 >> ((4 * *(_BYTE *)(v31 + 18) + 8) & 0x3C)) & 0xF);
            unint64_t v44 = *(void *)(v42 + 24);
            unint64_t v43 = *(void *)(v42 + 32);
            swift_bridgeObjectRetain();
          }

          else
          {
            v60[0] = v57;
            v60[1] = v58;
            uint64_t v61 = v59;
            swift_unknownObjectRetain();
            sub_188D36E50(v32, (uint64_t)v56);
            sub_188D087F8((uint64_t)v8);
            unint64_t v44 = v56[0];
            unint64_t v43 = v56[1];
          }

          uint64_t v45 = sub_188D01358( v55,  v54,  v27,  v55,  v32,  v31,  (uint64_t (*)(unint64_t, unint64_t, uint64_t, uint64_t))sub_188D01588,  (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_188D01A3C);
          unint64_t v46 = sub_188D82544(0xFuLL, v51, v41, v40);
          unint64_t result = swift_bridgeObjectRelease();
          BOOL v47 = __OFSUB__(v45, v46);
          unint64_t v48 = v45 - v46;
          if (!v47)
          {
            unint64_t v49 = sub_188D82544(0xFuLL, v50, v44, v43);
            unint64_t result = swift_bridgeObjectRelease();
            BOOL v47 = __OFADD__(v48, v49);
            unint64_t v13 = v48 + v49;
            if (v47)
            {
LABEL_60:
              __break(1u);
LABEL_61:
              __break(1u);
              goto LABEL_62;
            }

            if (v52 >= v53) {
              return v13;
            }
            goto LABEL_51;
          }

unint64_t sub_188D047AC( unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v11 = v6;
  __int128 v12 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)unint64_t v72 = *(_OWORD *)v6;
  *(_OWORD *)&v72[16] = v12;
  __int128 v73 = *(_OWORD *)(v6 + 32);
  unint64_t v13 = v73;
  if (*(void *)v72) {
    unint64_t v14 = 2 * (v73 & 0x1FFFFFFFFFFFFFLL);
  }
  else {
    unint64_t v14 = 0LL;
  }
  if (v14 < a1 >> 10)
  {
    __break(1u);
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }

  if (!*(void *)v72 || (uint64_t v74 = *(void *)v72, v75 = *(_OWORD *)&v72[8], v76 = *(void *)&v72[24], (v77 = v73) == 0))
  {
    if (!a5) {
      return 768LL;
    }
    goto LABEL_61;
  }

  uint64_t v16 = a1;
  if (a1 >> 10 == ((2LL * (void)v73) & 0x3FFFFFFFFFFFFFLL))
  {
    if (!a5) {
      return v16;
    }
    LOBYTE(v17) = 1;
  }

  else
  {
    unint64_t v17 = a5 >> 63;
  }

  uint64_t v6 = v11;
  unint64_t result = sub_188D097FC(a1, a2, a3, a4, v17);
  if (v20 != 1)
  {
    unint64_t v5 = v19;
    uint64_t v8 = v20;
    unint64_t v69 = a2;
    unint64_t v70 = v19;
    unint64_t v71 = v20;
    uint64_t v67 = a5;
    unint64_t v68 = (16 * (int)result) & 0x4000LL | ((unint64_t)result << 16) | (result >> 8) & 3 | 4;
    if (a2 == *((void *)&v73 + 1))
    {
      unint64_t v60 = a2;
      unint64_t v61 = result;
      unint64_t v59 = v19;
      if (v20)
      {
        unint64_t v22 = v20 + 24 * ((v19 >> ((4 * *(_BYTE *)(v20 + 18) + 8) & 0x3C)) & 0xF);
        uint64_t v23 = *(void *)(v22 + 24);
        unint64_t v9 = *(void *)(v22 + 32);
        unint64_t v7 = *(unsigned __int8 *)(v22 + 40);
        v21.i32[0] = *(_DWORD *)(v22 + 41);
        unint64_t v58 = vmovl_u8(v21).u64[0];
        uint64_t v24 = *(unsigned __int8 *)(v22 + 45);
        swift_bridgeObjectRetain();
        v25.i64[0] = v58;
      }

      else
      {
        swift_unknownObjectRetain();
        sub_188D36E50(v5, (uint64_t)&v62);
        sub_188D087F8(v11);
        uint64_t v23 = v62;
        unint64_t v9 = v63;
        unint64_t v7 = v64;
        v26.i32[0] = v65;
        uint16x8_t v25 = vmovl_u8(v26);
        uint64_t v24 = v66;
      }

      uint32x4_t v27 = vmovl_u16((uint16x4_t)(v25.i64[0] & 0xFF00FF00FF00FFLL));
      v28.i64[0] = v27.u32[0];
      v28.i64[1] = v27.u32[1];
      uint64x2_t v29 = v28;
      v28.i64[0] = v27.u32[2];
      v28.i64[1] = v27.u32[3];
      uint64_t v57 = v27.u32[2];
      int8x16_t v30 = vorrq_s8( (int8x16_t)vshlq_u64(v29, (uint64x2_t)xmmword_188DF9330),  (int8x16_t)vshlq_u64(v28, (uint64x2_t)xmmword_188DF9320));
      unint64_t v10 = *(void *)&vorr_s8(*(int8x8_t *)v30.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)) | (v24 << 40) | v7;
      swift_bridgeObjectRetain();
      uint64_t v6 = (uint64_t)sub_188D8FC30((uint64_t *)&v68, (unint64_t *)&v67, v23, v9, v10);
      swift_bridgeObjectRelease();
      if ((v6 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        unint64_t v32 = (v68 >> 16) - v61 + (v61 >> 11);
        if ((v68 & 0xC000) != 0) {
          uint64_t v33 = (v32 << 11) | 0x400;
        }
        else {
          uint64_t v33 = v32 << 11;
        }
        return v33 & 0xFFFFFFFFFFFFFF00LL | BYTE2(v68);
      }

      uint64_t v56 = v61;
      if ((v6 & 0x100) == 0)
      {
        swift_unknownObjectRetain();
        uint64_t v6 = (uint64_t)v72;
        sub_188D02F34( (uint64_t)&v69,  &v67,  0,  (uint64_t (*)(uint64_t, uint64_t *, void))sub_188D030B8,  (uint64_t (*)(uint64_t, uint64_t *, void, void *, uint64_t (*)(void, void, void)))sub_188D07650,  (uint64_t (*)(void *, void *, uint64_t, void *, uint64_t *, void))sub_188D076CC);
        sub_188D087F8(v11);
        unint64_t v5 = v60;
        if (v69 == v60)
        {
          unint64_t v7 = v70;
          uint64_t v57 = v71;
          if (v71)
          {
            unint64_t v31 = v71 + 24 * ((v70 >> ((4 * *(_BYTE *)(v71 + 18) + 8) & 0x3C)) & 0xF);
            uint64_t v6 = *(void *)(v31 + 24);
            unint64_t v10 = *(void *)(v31 + 32);
            unint64_t v9 = *(unsigned __int8 *)(v31 + 43);
            unint64_t v13 = *(unsigned __int8 *)(v31 + 44);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
          }

          else
          {
            swift_unknownObjectRetain();
            sub_188D36E50(v7, (uint64_t)&v62);
            sub_188D087F8(v11);
            swift_bridgeObjectRelease();
            uint64_t v6 = v62;
            unint64_t v10 = v63;
            unint64_t v9 = BYTE2(v65);
            unint64_t v13 = HIBYTE(v65);
          }

          if (v67 < v9)
          {
            a2 = v13;
            unint64_t v9 = v61;
            if ((v10 & 0x1000000000000000LL) == 0)
            {
              unint64_t v38 = HIBYTE(v10) & 0xF;
              if ((v10 & 0x2000000000000000LL) == 0) {
                unint64_t v38 = v6 & 0xFFFFFFFFFFFFLL;
              }
              if (v38 < v13)
              {
                __break(1u);
                goto LABEL_68;
              }

              unint64_t v13 = ((unint64_t)v13 << 16) | 4;
LABEL_40:
              swift_bridgeObjectRetain();
              sub_188D0EFD0(v13, v6, v10);
              unint64_t v39 = sub_188DF8468();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unint64_t v40 = (v61 >> 11) - v9;
              swift_unknownObjectRetain();
              uint64_t v41 = v8;
              uint64_t v8 = v57;
              uint64_t v42 = sub_188D01358( v5,  v59,  v41,  v5,  v7,  v57,  (uint64_t (*)(unint64_t, unint64_t, uint64_t, uint64_t))sub_188D01588,  (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_188D01A3C);
              sub_188D087F8(v11);
              swift_bridgeObjectRelease();
              unint64_t v43 = v40 + v42;
              if (!__OFADD__(v40, v42))
              {
                BOOL v44 = __OFADD__(v43, v39 >> 16);
                unint64_t v45 = v43 + (v39 >> 16);
                if (!v44)
                {
                  if ((v39 & 0xC000) != 0) {
                    uint64_t v46 = (v45 << 11) | 0x400;
                  }
                  else {
                    uint64_t v46 = v45 << 11;
                  }
                  return v46 & 0xFFFFFFFFFFFFFF00LL | BYTE2(v39);
                }

                goto LABEL_69;
              }

LABEL_68:
              __break(1u);
LABEL_69:
              __break(1u);
              goto LABEL_70;
            }

      a3[2].position = v10;
      unint64_t v34 = a3[1].position;
      uint64_t v33 = __OFSUB__(v34, v3);
      unint64_t v35 = v34 - v3;
      if (!v33) {
        goto LABEL_80;
      }
      __break(1u);
      goto LABEL_71;
    }

    __break(1u);
  }

  unint64_t result = Deque._UnsafeHandle.slot(_:offsetBy:)(v6, position).position;
  if (__OFSUB__(position, v3))
  {
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }

  unint64_t v17 = a3[2].position + position - v3;
  uint64_t v18 = a3->position;
  if (v17 >= a3->position) {
    unint64_t v19 = a3->position;
  }
  else {
    unint64_t v19 = 0LL;
  }
  if (v10)
  {
    uint64_t v20 = result;
    uint8x8_t v21 = v17 - v19;
    if (v17 - v19 <= 0) {
      unint64_t v22 = a3->position;
    }
    else {
      unint64_t v22 = v17 - v19;
    }
    if (result <= 0) {
      uint64_t v23 = a3->position;
    }
    else {
      uint64_t v23 = result;
    }
    if (v12 >= v23)
    {
      uint64x2_t v28 = v18 - v12;
      uint64x2_t v29 = __OFSUB__(v18, v12);
      if (v22 >= v11)
      {
        if (v29)
        {
LABEL_92:
          __break(1u);
          return result;
        }

        if (v28 >= 1)
        {
          sub_188DF836C();
          Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v12, v28);
          unint64_t result = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v11, v28).position;
          uint64_t v11 = result;
        }

        if (v20 >= 1)
        {
          sub_188DF836C();
          Deque._UnsafeHandle.slot(_:offsetBy:)(0LL, v20);
          v25.position = v11;
          uint8x8_t v26 = v20;
          goto LABEL_78;
        }
      }

      else
      {
        if (v29)
        {
LABEL_89:
          __break(1u);
          goto LABEL_90;
        }

        if (v28 >= 1)
        {
          sub_188DF836C();
          Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v12, v28);
          uint64_t v11 = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v11, v28).position;
        }

        sub_188DF836C();
        v30.position = Deque._UnsafeHandle.slot(_:offsetBy:)(0LL, v3).position;
        unint64_t result = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v11, v3).position;
        if (v21 >= 1)
        {
          sub_188DF836C();
          Deque._UnsafeHandle.slot(_:offsetBy:)(v30, v21);
          v25.position = 0LL;
          uint8x8_t v26 = v21;
          goto LABEL_78;
        }
      }
    }

    else
    {
      if (v22 >= v11)
      {
LABEL_71:
        if (v10 < 1) {
          goto LABEL_79;
        }
        sub_188DF836C();
        Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v12, v10);
        v25.position = v11;
        uint8x8_t v26 = v10;
        goto LABEL_78;
      }

      uint64_t v24 = v18 - v11;
      if (__OFSUB__(v18, v11))
      {
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
        goto LABEL_89;
      }

      if (v24 >= 1)
      {
        sub_188DF836C();
        __int128 v12 = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v12, v24).position;
        unint64_t result = Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v11, v24).position;
      }

      if (__OFSUB__(v10, v24)) {
        goto LABEL_87;
      }
      if (v10 - v24 >= 1)
      {
        sub_188DF836C();
        Deque._UnsafeHandle.slot(_:offsetBy:)((CollectionsInternal::_DequeSlot)v12, v10 - v24);
        v25.position = 0LL;
        uint8x8_t v26 = v10 - v24;
LABEL_78:
        unint64_t result = Deque._UnsafeHandle.slot(_:offsetBy:)(v25, v26).position;
      }
    }
  }

LABEL_66:
            unint64_t v13 = MEMORY[0x1895D67BC](15LL, a2, v6, v10);
            goto LABEL_40;
          }

    if ((a1 & 0x2000000000000000LL) != 0)
    {
      uint64_t v93 = v23;
      uint64_t v94 = v85;
      swift_bridgeObjectRetain();
    }

    else
    {
      if ((v23 & 0x1000000000000000LL) == 0) {
        sub_188DF8684();
      }
      swift_bridgeObjectRetain();
    }

    sub_188DF8690();
    swift_bridgeObjectRelease();
LABEL_74:
    if ((sub_188DF8B34() & 1) != 0) {
      break;
    }
    unint64_t v5 = (uint64_t *)(v39 >> 14);
    a4 = v39;
    unint64_t v31 = v90;
    if (v39 >> 14 >= v92) {
      goto LABEL_76;
    }
  }

  unint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

          uint64_t v95 = v95 & ((-15LL << v41) - 1) | ((v10 - 1) << v41);
          uint64_t v51 = v11 + 40LL * ((int)v10 - 1);
          uint64_t v52 = *(void *)(v51 + 32);
          uint64_t v53 = *(_OWORD *)(v51 + 16);
          v100[0] = *(_OWORD *)v51;
          v100[1] = v53;
          uint64_t v101 = v52;
          swift_unknownObjectRetain();
          unint64_t v5 = (unint64_t)sub_188DF0F88((uint64_t *)&v95);
          sub_188D087F8((uint64_t)v100);
          int8x8_t v96 = v5;
          goto LABEL_73;
        }

        if (v10)
        {
          uint64_t v95 = ((v10 - 1) << v41) | ((-15LL << v41) - 1) & v7;
          int8x8_t v96 = v8;
          swift_unknownObjectRetain();
          goto LABEL_74;
        }
      }

      swift_unknownObjectRetain();
      if (!v5) {
        goto LABEL_86;
      }
LABEL_62:
      uint64_t v95 = v95 & ((-15LL << v4) - 1) | ((v5 - 1) << v4);
      uint64_t v48 = v75 + 40LL * ((int)v5 - 1);
      unint64_t v49 = *(void *)(v48 + 32);
      unint64_t v50 = *(_OWORD *)(v48 + 16);
      v98[0] = *(_OWORD *)v48;
      v98[1] = v50;
      uint64_t v99 = v49;
      swift_unknownObjectRetain();
      unint64_t v5 = (unint64_t)sub_188DF0F88((uint64_t *)&v95);
      sub_188D087F8((uint64_t)v98);
      int8x8_t v96 = v5;
      goto LABEL_74;
    }

    if (v100 != v10) {
      goto LABEL_77;
    }
    if (v99)
    {
      swift_bridgeObjectRetain();
    }

    else
    {
      v120[0] = v28;
      v120[1] = v109;
      v120[2] = v108;
      v120[3] = v107;
      v120[4] = v106;
      swift_unknownObjectRetain();
      sub_188D36E50(v112, (uint64_t)v113);
      sub_188D087F8(v53);
    }

    unint64_t v15 = v53;
    uint64_t v92 = sub_188DF7FD0();
    uint64_t v94 = v93;
    int8x8_t v96 = v95;
    uint64_t v98 = v97;
    swift_bridgeObjectRelease();
    v113[0] = v92;
    v113[1] = v94;
    v113[2] = v96;
    v113[3] = v98;
    goto LABEL_71;
  }

LABEL_65:
          __break(1u);
          goto LABEL_66;
        }

        goto LABEL_63;
      }

      unint64_t v5 = v60;
      if (__OFADD__(v67, v57))
      {
LABEL_64:
        __break(1u);
        goto LABEL_65;
      }

      v67 += v57;
      swift_unknownObjectRetain();
      sub_188D02F34( (uint64_t)&v69,  &v67,  0,  (uint64_t (*)(uint64_t, uint64_t *, void))sub_188D030B8,  (uint64_t (*)(uint64_t, uint64_t *, void, void *, uint64_t (*)(void, void, void)))sub_188D07650,  (uint64_t (*)(void *, void *, uint64_t, void *, uint64_t *, void))sub_188D076CC);
      sub_188D087F8(v11);
      unint64_t v10 = v70;
      swift_unknownObjectRetain();
      unint64_t v34 = sub_188D36DF0();
      sub_188D087F8(v11);
      if (v10 != v34)
      {
        if (v69 == v60)
        {
          unint64_t v7 = v71;
          if (v71)
          {
            unint64_t v35 = v71 + 24 * ((v10 >> ((4 * *(_BYTE *)(v71 + 18) + 8) & 0x3C)) & 0xF);
            unint64_t v13 = *(void *)(v35 + 32);
            uint64_t v57 = *(void *)(v35 + 24);
            unsigned int v36 = *(unsigned __int8 *)(v35 + 43);
            unsigned int v37 = *(unsigned __int8 *)(v35 + 44);
            swift_bridgeObjectRetain();
            unint64_t result = swift_bridgeObjectRelease();
          }

          else
          {
            swift_unknownObjectRetain();
            sub_188D36E50(v10, (uint64_t)&v62);
            sub_188D087F8(v11);
            unint64_t result = swift_bridgeObjectRelease();
            unint64_t v13 = v63;
            uint64_t v57 = v62;
            unsigned int v36 = BYTE2(v65);
            unsigned int v37 = HIBYTE(v65);
          }

          if (v67 < v36)
          {
            a2 = v37;
            if ((v13 & 0x1000000000000000LL) == 0)
            {
              unint64_t v47 = HIBYTE(v13) & 0xF;
              uint64_t v48 = v61;
              if ((v13 & 0x2000000000000000LL) == 0) {
                unint64_t v47 = v57 & 0xFFFFFFFFFFFFLL;
              }
              if (v47 < a2)
              {
                __break(1u);
                goto LABEL_74;
              }

              unint64_t v49 = (a2 << 16) | 4;
LABEL_53:
              swift_bridgeObjectRetain();
              sub_188D0EFD0(v49, v57, v13);
              unint64_t v50 = sub_188DF8468();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v51 = (v61 >> 11) - v48;
              swift_unknownObjectRetain();
              uint64_t v52 = sub_188D01358( v5,  v59,  v8,  v5,  v10,  v7,  (uint64_t (*)(unint64_t, unint64_t, uint64_t, uint64_t))sub_188D01588,  (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_188D01A3C);
              sub_188D087F8(v11);
              unint64_t result = swift_bridgeObjectRelease();
              uint64_t v53 = v51 + v52;
              if (!__OFADD__(v51, v52))
              {
                BOOL v44 = __OFADD__(v53, v50 >> 16);
                uint64_t v54 = v53 + (v50 >> 16);
                if (!v44)
                {
                  if ((v50 & 0xC000) != 0) {
                    uint64_t v55 = (v54 << 11) | 0x400;
                  }
                  else {
                    uint64_t v55 = v54 << 11;
                  }
                  return v55 & 0xFFFFFFFFFFFFFF00LL | BYTE2(v50);
                }

                goto LABEL_75;
              }

      __break(1u);
    }

LABEL_74:
              __break(1u);
LABEL_75:
              __break(1u);
              goto LABEL_76;
            }

    uint64_t v126 = MEMORY[0x1895D67BC](15LL, v23, v18, v17);
    uint64_t v123 = v184;
    uint64_t v127 = v176;
    uint64_t v128 = v175;
    uint64_t v129 = v185;
    uint64_t v124 = v183;
    goto LABEL_50;
  }

  uint16x8_t v25 = sub_188D82630( a2,  v17,  a3,  ((unint64_t)*((unsigned __int8 *)v16 + 21) << 40) | ((unint64_t)*(unsigned int *)((char *)v16 + 17) << 8) | v15);
  uint8x8_t v26 = v25;
  uint64x2_t v28 = v27;
  v166 = v25 >> 8;
  uint64_t v167 = v25 >> 16;
  int v168 = v25 >> 24;
  uint64_t v169 = HIDWORD(v25);
  uint64_t v170 = v25 >> 40;
  uint64_t v171 = HIWORD(v25);
  uint64_t v172 = HIBYTE(v25);
  LODWORD(v179) = v27 >> 8;
  LODWORD(v178) = HIWORD(v27);
  LODWORD(v173) = HIBYTE(v27);
  swift_bridgeObjectRetain();
  char v165 = sub_188D0EFD0(a2, v17, a3);
  int8x16_t v30 = v29;
  uint64_t v164 = v31;
  uint64_t v33 = v32;
  swift_bridgeObjectRelease();
  char v165 = MEMORY[0x1895D6684](v165, v30, v164, v33);
  uint64_t v164 = v34;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  unint64_t v35 = sub_188DF7FD0();
  unsigned int v37 = v36;
  unint64_t v39 = v38;
  uint64_t v18 = v40;
  swift_bridgeObjectRelease();
  uint64_t v41 = MEMORY[0x1895D6684](v35, v37, v39, v18);
  unint64_t v17 = v42;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *uint64_t v16 = v41;
  v16[1] = v17;
  *((_BYTE *)v16 + 16) = v26;
  unint64_t v43 = v164;
  *((_BYTE *)v16 + 17) = v166;
  *((_BYTE *)v16 + 18) = v167;
  *((_BYTE *)v16 + 19) = v168;
  *((_BYTE *)v16 + 20) = v169;
  *((_BYTE *)v16 + 21) = v170;
  v187 = v165;
  uint64_t v188 = v43;
  LOBYTE(v189) = v171;
  BYTE1(v189) = v172;
  BYTE2(v189) = v28;
  HIBYTE(v189) = (_BYTE)v179;
  LOBYTE(v190) = (_BYTE)v178;
  HIBYTE(v190) = v173;
  BOOL v44 = _s9_IngesterVMa();
  unint64_t v45 = (void (*)(void))v181[2];
  ((void (*)(uint64_t, char *, uint64_t))v45)(v182, (char *)v185 + *(int *)(v44 + 24), v183);
  if (__OFSUB__(v24, v23))
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }

  swift_bridgeObjectRetain();
  sub_188D8C938(v24 - v23, (unint64_t)v191);
  sub_188D2DD1C((uint64_t)v191, (uint64_t)&v200);
  uint64_t v46 = v203;
  if (!v203) {
    goto LABEL_21;
  }
  unint64_t v47 = v200;
  uint64_t v48 = v201;
  unint64_t v49 = v202;
  v179 = (char *)v204;
  uint64_t v178 = (void *)v205;
  uint64_t v173 = v206;
  unint64_t result = sub_188D82544(v200, v201, v202, v203);
  if (result > 255) {
    goto LABEL_77;
  }
  unint64_t v50 = sub_188D82544(v47, v48, v49, v46);
  uint64_t v51 = sub_188DF7F7C();
  uint64_t v52 = sub_188D62BEC(v47, v48, v49, v46);
  uint64_t v53 = sub_188D38104(v50, v51, v52, (uint64_t)v179, (uint64_t)v178, v173);
  sub_188D37FDC(v53 & 0xFFFFFFFFFFFFLL);
  uint64_t v193 = v47;
  uint64_t v194 = v48;
  uint64_t v195 = v49;
  uint64_t v196 = v46;
  sub_188D2DC60();
  sub_188DF7EC8();
  sub_188D2DD64((uint64_t)v191);
LABEL_21:
  uint64_t v185 = v45;
  uint64_t v186 = (unint64_t *)v23;
  sub_188D8C938(255LL, (unint64_t)v192);
  unint64_t result = sub_188D2DD1C((uint64_t)v192, (uint64_t)&v193);
  uint64_t v54 = v196;
  if (v196)
  {
    uint64_t v55 = v194;
    v179 = (char *)v193;
    uint64_t v56 = v195;
    uint64_t v57 = v197;
    unint64_t v58 = v198;
    unint64_t v59 = v199;
    unint64_t v60 = (uint64_t)v180;
    unint64_t v61 = v183;
    v185();
    swift_bridgeObjectRelease();
    uint64_t v62 = v182;
    sub_188D2C524((uint64_t)v179, v55, v56, v54, v57, v58, v59, 0xFuLL, v182, v60);
    unsigned __int8 v64 = v63;
    sub_188D2DD64((uint64_t)v192);
    if ((v64 & 1) == 0)
    {
      __int32 v65 = (void (*)(uint64_t, uint64_t))v181[1];
      v65(v60, v61);
      v65(v62, v61);
      unsigned __int8 v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A2A8);
      uint64_t v67 = v184;
      unint64_t v68 = (char *)v184 + *(int *)(v66 + 48);
      unint64_t v69 = v188;
      unint64_t v70 = v190;
      *uint64_t v184 = v187;
      v67[1] = v69;
      *((_DWORD *)v67 + 4) = v189;
      *((_WORD *)v67 + 10) = v70;
      (*(void (**)(char *, uint64_t, uint64_t, unint64_t))(v175 + 56))(v68, 1LL, 1LL, v176);
      _s12InsertResultOMa();
      return swift_storeEnumTagMultiPayload();
    }

    unint64_t result = __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A2A8);
    uint64_t v134 = *(int *)(result + 48);
    uint64_t v135 = v188;
    uint64_t v136 = v190;
    Swift::Int v137 = v184;
    *uint64_t v184 = v187;
    v137[1] = v135;
    *((_DWORD *)v137 + 4) = v189;
    *((_WORD *)v137 + 10) = v136;
    uint64_t v138 = v176;
    uint64_t v139 = v175;
    if (!__OFSUB__(v174, v186))
    {
      uint64_t v140 = (char *)v137 + v134;
      uint64_t v141 = (char *)v137 + v134 + *(int *)(v176 + 64);
      uint64_t v142 = (char *)v137 + v134 + *(int *)(v176 + 48);
      *(void *)((char *)v137 + v134) = v174 - (void)v186;
      char v143 = (void (*)(char *, uint64_t, uint64_t))v181[4];
      uint64_t v144 = v183;
      v143(v142, v182, v183);
      v143(v141, (uint64_t)v180, v144);
      (*(void (**)(char *, void, uint64_t, unint64_t))(v139 + 56))(v140, 0LL, 1LL, v138);
      _s12InsertResultOMa();
      return swift_storeEnumTagMultiPayload();
    }

    goto LABEL_80;
  }

    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }

        sub_188DF8528();
        v43(v56, v4);
        return v44;
      }
    }

    else if (v78 < 65)
    {
      unint64_t v85 = v94;
      uint64_t v86 = sub_188DF8528();
      v43(v85, v4);
      if (v104 < v86) {
        goto LABEL_72;
      }
      goto LABEL_74;
    }

    sub_188CF78D0();
    sub_188DF84E0();
    __int128 v83 = v94;
    unint64_t v84 = sub_188DF7CC4();
    v43(v37, v4);
    v43(v83, v4);
    if ((v84 & 1) != 0) {
      goto LABEL_72;
    }
    goto LABEL_74;
  }

  __break(1u);
LABEL_77:
  __break(1u);
  return result;
}

LABEL_72:
            unint64_t v49 = MEMORY[0x1895D67BC](15LL, a2, v57, v13);
            uint64_t v48 = v56;
            goto LABEL_53;
          }

LABEL_71:
          __break(1u);
          goto LABEL_72;
        }

    uint64_t v99 = 0LL;
    uint64_t v132 = v128;
LABEL_135:
    uint64_t v100 = MEMORY[0x1895D6684](v35, v37, v39, v41);
    uint64_t v102 = v101;
    if ((v101 & 0x1000000000000000LL) != 0)
    {
      uint64_t v100 = sub_188DDD440();
      uint64_t v114 = v113;
      swift_bridgeObjectRelease();
      uint64_t v102 = v114;
    }

    swift_bridgeObjectRetain();
    uint64_t v103 = sub_188DF7FD0();
    char v105 = v104;
    uint64_t v107 = v106;
    uint64_t v109 = v108;
    swift_bridgeObjectRelease();
    unint64_t result = sub_188D82544(v103, v105, v107, v109);
    uint64_t v110 = sub_188D82544(v103, v105, v107, v109);
    __int32 v111 = sub_188DF7F7C();
    uint8x8_t v112 = sub_188D62BEC(v103, v105, v107, v109);
    swift_bridgeObjectRelease();
    unint64_t result = swift_bridgeObjectRelease();
    if (v110 > 255)
    {
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
LABEL_169:
      __break(1u);
LABEL_170:
      __break(1u);
LABEL_171:
      __break(1u);
      goto LABEL_172;
    }

    if (v111 > 255) {
      goto LABEL_164;
    }
    if (v112 > 255) {
      goto LABEL_165;
    }
    if (v99 > 255) {
      goto LABEL_166;
    }
    if (v128 > 255) {
      goto LABEL_167;
    }
    if ((v128 | v99 | v132 | v110 | v111 | v112) < 0) {
      goto LABEL_168;
    }
    if (v132 > 255) {
      goto LABEL_169;
    }
    int8x8_t v125 = ((_DWORD)v99 << 24) | v125 & 0xFFFF000000000000LL | ((unint64_t)v128 << 32) & 0xFFFF00FFFFFF0000LL | ((unint64_t)v132 << 40) | v110 | ((unint64_t)v111 << 8) | ((unint64_t)v112 << 16);
    uint64_t v2 = v120;
    sub_188DDC91C(v100, v102, v125);
    uint64_t v3 = a1;
  }

  if ((v28 ^ v25) >> 14) {
    goto LABEL_178;
  }
  uint64_t v115 = (char *)v3 + *(int *)(_s9_IngesterVMa() + 24);
  uint64_t v116 = v2 + *(int *)(_s7BuilderVMa() + 24);
  uint64_t v117 = sub_188DF8B4C();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v117 - 8) + 24LL))(v116, v115, v117);
}

    if ((v56 & 0x2000000000000000LL) != 0)
    {
      v149[0] = v54;
      v149[1] = v134;
      swift_bridgeObjectRetain();
      sub_188DF8690();
      swift_bridgeObjectRelease();
    }

    else
    {
      if ((v54 & 0x1000000000000000LL) == 0) {
        sub_188DF8684();
      }
      swift_bridgeObjectRetain();
      sub_188DF8690();
      swift_bridgeObjectRelease();
    }

LABEL_70:
        __break(1u);
        goto LABEL_71;
      }

      uint64_t v16 = (v13 << 11) | 0x300;
      swift_bridgeObjectRelease();
      return v16;
    }

  __int128 v75 = a2;
  unint64_t v45 = v11 & 0xFFFFFFFFFFFFLL;
  if ((a4 & 0x2000000000000000LL) != 0) {
    unint64_t v45 = v6;
  }
  if (v45 >= v7)
  {
    uint64_t v46 = v6;
    unint64_t v47 = v12;
    uint64_t v48 = (v7 << 16) | 4;
LABEL_141:
    swift_bridgeObjectRetain();
    sub_188D0EFD0(v48, v11, a4);
    unint64_t result = (uint64_t *)swift_bridgeObjectRelease();
    if ((a4 & 0x1000000000000000LL) != 0)
    {
      MEMORY[0x1895D67BC](15LL, v7, v11, a4);
    }

    else
    {
      unint64_t v68 = v11 & 0xFFFFFFFFFFFFLL;
      if ((a4 & 0x2000000000000000LL) != 0) {
        unint64_t v68 = v46;
      }
      if (v68 < v7) {
        goto LABEL_154;
      }
    }

    unint64_t v69 = sub_188DF8498();
    unint64_t result = (uint64_t *)swift_bridgeObjectRelease();
    if (!__OFADD__(v13, v69))
    {
      LODWORD(v19) = 0;
      uint64_t v20 = 0;
      uint64_t *v75 = v13 + v69;
      *unint64_t v47 = 15LL;
      return (uint64_t *)(v20 | v19);
    }

    __break(1u);
  }

  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
  return result;
}

                  unint64_t v7 = v84;
                  if (v84)
                  {
                    uint64_t v95 = v95 & ((-15LL << v83) - 1) | ((v84 - 1) << v83);
                    uint64_t v54 = (__int128 *)(v82 + 40LL * ((int)v84 - 1));
                    uint64_t v55 = *((void *)v54 + 4);
                    uint64_t v56 = v54[1];
                    uint64_t v102 = *v54;
                    uint64_t v103 = v56;
                    uint64_t v104 = v55;
                    swift_unknownObjectRetain();
                    unint64_t v5 = (unint64_t)sub_188DF0F88((uint64_t *)&v95);
                    sub_188D087F8((uint64_t)&v102);
                    int8x8_t v96 = v5;
                    goto LABEL_72;
                  }

                  swift_unknownObjectRelease();
                  if (!v10) {
                    goto LABEL_85;
                  }
                  goto LABEL_66;
                }

                if (v47)
                {
                  uint64_t v95 = ((v47 - 1) << v46) | ((-15LL << v46) - 1) & v7;
                  int8x8_t v96 = v44;
                  sub_188D07F48(v6);
                  swift_unknownObjectRetain();
                  swift_unknownObjectRetain();
                  goto LABEL_72;
                }
              }

              __int128 v82 = v9 + 24;
              __int128 v83 = v42;
              unint64_t v84 = (v7 >> v42) & 0xF;
              sub_188D07F48(v6);
              swift_unknownObjectRetain();
              swift_unknownObjectRetain();
              goto LABEL_70;
            }

            if (v43)
            {
              uint64_t v95 = ((v43 - 1) << v42) | ((-15LL << v42) - 1) & v7;
              int8x8_t v96 = v9;
              sub_188D07F48(v6);
              swift_unknownObjectRetain();
              goto LABEL_73;
            }
          }

          sub_188D07F48(v6);
          swift_unknownObjectRetain();
          if (!v10)
          {
LABEL_85:
            swift_unknownObjectRelease();
            if (!v5)
            {
LABEL_86:
              sub_188D087F8(v6);
LABEL_87:
              sub_188D087F8(v6);
              __break(1u);
              goto LABEL_88;
            }

            goto LABEL_62;
          }

LABEL_76:
  __break(1u);
  return result;
}

    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v25 + 24))(v36, v37, v6);
    goto LABEL_77;
  }

  if (!v37[v31] || (v37[v31] - 1) << v48 == -1)
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v25 + 16))(v36, v37, v6);
    uint64_t v46 = v55;
    v36[v31] = 0;
    goto LABEL_78;
  }

    swift_bridgeObjectRelease();
    unint64_t v17 = v77;
LABEL_79:
    swift_bridgeObjectRelease();
    uint64_t v18 = sub_188DF8B58();
    uint64_t v11 = v43;
LABEL_80:
    (*(void (**)(char *, uint64_t))(v82 + 8))(v91, v83);
    unint64_t v5 = v70;
    a1 = v69;
    a4 = v68;
    a2 = v67;
    goto LABEL_81;
  }

  __int128 v89 = (uint64_t *)(a4 >> 14);
  uint64_t v92 = v21 >> 14;
  if (a4 >> 14 >= v21 >> 14) {
    goto LABEL_76;
  }
  int8x16_t v30 = (v23 >> 59) & 1;
  if ((a1 & 0x1000000000000000LL) == 0) {
    LOBYTE(v30) = 1;
  }
  unint64_t v31 = 4LL << v30;
  unint64_t v32 = HIBYTE(a1) & 0xF;
  uint64_t v74 = v32;
  __int128 v73 = v23 & 0xFFFFFFFFFFFFLL;
  if ((a1 & 0x2000000000000000LL) == 0) {
    unint64_t v32 = v23 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v88 = v32;
  unint64_t v84 = (a1 & 0xFFFFFFFFFFFFFFFLL) + 32;
  unint64_t v85 = a1 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v5 = v89;
  __int128 v90 = v31;
  while (1)
  {
    uint64_t v33 = a4 & 0xC;
    unint64_t v34 = (a4 & 1) == 0 || v33 == v31;
    a2 = v34;
    if (v34)
    {
      unint64_t v35 = a4;
      if (v33 == v31) {
        unint64_t v35 = sub_188D37044(a4, v23, a1);
      }
      if (v88 <= v35 >> 16)
      {
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        __break(1u);
        goto LABEL_118;
      }

      if ((v35 & 1) == 0) {
        unint64_t v35 = v35 & 0xC | sub_188D36F34(v35, v23, a1) & 0xFFFFFFFFFFFFFFF3LL | 1;
      }
    }

    else
    {
      unint64_t v35 = a4;
      if (v88 <= a4 >> 16) {
        goto LABEL_115;
      }
    }

    if ((a1 & 0x1000000000000000LL) != 0)
    {
      unint64_t v39 = sub_188DF7E08();
      if (!(_DWORD)a2) {
        goto LABEL_53;
      }
    }

    else
    {
      unsigned int v36 = v35 >> 16;
      if ((a1 & 0x2000000000000000LL) != 0)
      {
        uint64_t v93 = v23;
        uint64_t v94 = v85;
        unint64_t v38 = *((unsigned __int8 *)&v93 + v36);
      }

      else
      {
        unsigned int v37 = v84;
        if ((v23 & 0x1000000000000000LL) == 0) {
          unsigned int v37 = sub_188DF8684();
        }
        unint64_t v38 = *(unsigned __int8 *)(v37 + v36);
      }

      unint64_t v40 = (char)v38;
      uint64_t v41 = __clz(v38 ^ 0xFF) - 24;
      if (v40 >= 0) {
        LOBYTE(v41) = 1;
      }
      unint64_t v39 = ((v36 + v41) << 16) | 5;
      if (!(_DWORD)a2)
      {
LABEL_53:
LABEL_65:
        if ((a1 & 0x1000000000000000LL) != 0) {
          goto LABEL_73;
        }
        goto LABEL_66;
      }
    }

    uint64_t v42 = a4;
    if (v33 == v90) {
      uint64_t v42 = sub_188D37044(a4, v23, a1);
    }
    if ((v42 & 1) != 0) {
      goto LABEL_65;
    }
    sub_188D36F34(v42, v23, a1);
    if ((a1 & 0x1000000000000000LL) != 0)
    {
LABEL_73:
      sub_188DF85F4();
      goto LABEL_74;
    }

    char v105 = (v92 ^ v96) + v97;
    if (v105 >= v96) {
      uint64_t v106 = v96;
    }
    else {
      uint64_t v106 = 0LL;
    }
    uint64_t v93 = v114;
    if (v105 - v106 == v35) {
      goto LABEL_101;
    }
  }

  uint64_t v107 = (v91 * v101) >> 6;
  if (v94)
  {
    if (v102) {
      goto LABEL_151;
    }
    if (v107 + 1 == v104) {
      uint64_t v107 = 0LL;
    }
    else {
      ++v107;
    }
  }

  uint64_t v108 = v101 - v94;
  if (__OFSUB__(v101, v94)) {
    goto LABEL_148;
  }
  if (v107 == 2 && v101 == 5) {
    uint64_t v110 = 32LL;
  }
  else {
    uint64_t v110 = 64LL;
  }
  unint64_t v71 = __OFSUB__(v110, v108);
  __int32 v111 = v110 - v108;
  if (!v71)
  {
    uint8x8_t v112 = *(void *)(v81 + 8 * v107);
    uint64_t v113 = (v112 << v94) | v93;
    uint64_t v114 = v112 >> v108;
    uint64_t v94 = v111;
    uint64_t v92 = v113 & v90;
    if ((v113 & v90) == 0) {
      goto LABEL_101;
    }
    goto LABEL_76;
  }

unint64_t sub_188D04EBC( unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v6 = (uint64_t)v5;
  __int128 v7 = v5[1];
  *(_OWORD *)uint64_t v77 = *v5;
  *(_OWORD *)&v77[16] = v7;
  __int128 v78 = v5[2];
  uint64_t v8 = v78;
  if (*(void *)v77) {
    unint64_t v9 = 2 * (v78 & 0x1FFFFFFFFFFFFFLL);
  }
  else {
    unint64_t v9 = 0LL;
  }
  if (v9 < result >> 10)
  {
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
    goto LABEL_131;
  }

  uint64_t v10 = a5;
  if (!*(void *)v77 || (uint64_t v79 = *(void *)v77, v80 = *(_OWORD *)&v77[8], v81 = *(void *)&v77[24], (v82 = v78) == 0))
  {
    if (!a5) {
      return 768LL;
    }
    goto LABEL_126;
  }

  uint64_t v11 = result;
  if (result >> 10 == ((2LL * (void)v78) & 0x3FFFFFFFFFFFFFLL))
  {
    if (!a5) {
      return v11;
    }
    LOBYTE(v12) = 1;
  }

  else
  {
    unint64_t v12 = a5 >> 63;
  }

  unint64_t result = sub_188D097FC(result, a2, a3, a4, v12);
  if (v15 == 1) {
    goto LABEL_135;
  }
  unint64_t v16 = v14;
  uint64_t v17 = v15;
  uint64_t v74 = v13;
  unint64_t v75 = v14;
  uint64_t v76 = v15;
  uint64_t v73 = v10;
  if (v13 != *((void *)&v78 + 1)) {
    goto LABEL_127;
  }
  uint64_t v68 = v13;
  unint64_t v18 = (16 * (int)result) & 0x4000LL | ((unint64_t)result << 16);
  unint64_t v69 = result;
  unint64_t v19 = v18 | (result >> 8) & 3 | 4;
  if (v15)
  {
    unint64_t v20 = v15 + 24 * ((v14 >> ((4 * *(_BYTE *)(v15 + 18) + 8) & 0x3C)) & 0xF);
    unint64_t v21 = *(void *)(v20 + 24);
    unint64_t v22 = *(void *)(v20 + 32);
    unsigned int v23 = *(unsigned __int8 *)(v20 + 42);
    unint64_t result = swift_bridgeObjectRetain();
  }

  else
  {
    swift_unknownObjectRetain();
    sub_188D36E50(v16, (uint64_t)&v70);
    unint64_t result = sub_188D087F8(v6);
    unint64_t v21 = v70;
    unint64_t v22 = v71;
    unsigned int v23 = v72;
  }

  if (!v10)
  {
    unint64_t v19 = sub_188D0F098(v19, v21, v22);
    goto LABEL_53;
  }

  unint64_t v67 = v16;
  if (v10 > 0)
  {
    if ((v22 & 0x2000000000000000LL) != 0) {
      unint64_t v24 = HIBYTE(v22) & 0xF;
    }
    else {
      unint64_t v24 = v21 & 0xFFFFFFFFFFFFLL;
    }
    if (4 * v24 <= v18 >> 14) {
      goto LABEL_95;
    }
    uint64_t v25 = (v21 >> 59) & 1;
    if ((v22 & 0x1000000000000000LL) == 0) {
      LOBYTE(v25) = 1;
    }
    uint64_t v26 = 4LL << v25;
    do
    {
      if ((v19 & 0xC) == v26 || (v19 & 1) == 0)
      {
        if ((v19 & 0xC) == v26)
        {
          unint64_t result = sub_188D37044(v19, v21, v22);
          unint64_t v19 = result;
          if (v24 <= result >> 16) {
            goto LABEL_123;
          }
        }

        else if (v24 <= v19 >> 16)
        {
          goto LABEL_123;
        }

        if ((v19 & 1) == 0)
        {
          unint64_t result = sub_188D36F34(v19, v21, v22);
          unint64_t v19 = v19 & 0xC | result & 0xFFFFFFFFFFFFFFF3LL | 1;
        }
      }

      else if (v24 <= v19 >> 16)
      {
        goto LABEL_122;
      }

      if ((v22 & 0x1000000000000000LL) != 0)
      {
        unint64_t result = sub_188DF7E08();
        unint64_t v19 = result;
      }

      else
      {
        unint64_t v28 = v19 >> 16;
        if ((v22 & 0x2000000000000000LL) != 0)
        {
          unint64_t v70 = v21;
          uint64_t v71 = v22 & 0xFFFFFFFFFFFFFFLL;
          int v29 = *((unsigned __int8 *)&v70 + v28);
        }

        else
        {
          unint64_t result = (v22 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v21 & 0x1000000000000000LL) == 0) {
            unint64_t result = sub_188DF8684();
          }
          int v29 = *(unsigned __int8 *)(result + v28);
        }

        int v30 = (char)v29;
        unsigned int v31 = __clz(v29 ^ 0xFF) - 24;
        if (v30 >= 0) {
          LOBYTE(v31) = 1;
        }
        unint64_t v19 = ((v28 + v31) << 16) | 5;
      }

      --v10;
    }

    while (v10 >= 1 && v19 >> 14 < 4 * v24);
    if (v10)
    {
LABEL_95:
      if (!__OFADD__(v10, v23))
      {
        uint64_t v73 = v10 + v23;
        swift_unknownObjectRetain();
        sub_188D02F34( (uint64_t)&v74,  &v73,  0,  (uint64_t (*)(uint64_t, uint64_t *, void))sub_188D031D4,  (uint64_t (*)(uint64_t, uint64_t *, void, void *, uint64_t (*)(void, void, void)))sub_188D071D4,  (uint64_t (*)(void *, void *, uint64_t, void *, uint64_t *, void))sub_188D07250);
        sub_188D087F8(v6);
        unint64_t v43 = v75;
        swift_unknownObjectRetain();
        unint64_t v44 = sub_188D36DF0();
        unint64_t result = sub_188D087F8(v6);
        if (v43 == v44)
        {
          uint64_t v11 = (v8 << 11) | 0x300;
          swift_bridgeObjectRelease();
          return v11;
        }

        if (v74 == v68)
        {
          uint64_t v45 = v76;
          if (v76)
          {
            unint64_t v46 = v76 + 24 * ((v43 >> ((4 * *(_BYTE *)(v76 + 18) + 8) & 0x3C)) & 0xF);
            unint64_t v47 = *(void *)(v46 + 24);
            unint64_t v48 = *(void *)(v46 + 32);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
          }

          else
          {
            swift_unknownObjectRetain();
            sub_188D36E50(v43, (uint64_t)&v70);
            sub_188D087F8(v6);
            swift_bridgeObjectRelease();
            unint64_t v47 = v70;
            unint64_t v48 = v71;
          }

          unint64_t v61 = sub_188D03528(0xFuLL, v73, v47, v48);
          unint64_t v62 = (v69 >> 11) - v69;
          swift_unknownObjectRetain();
          uint64_t v63 = sub_188D01358( v68,  v67,  v17,  v68,  v43,  v45,  (uint64_t (*)(unint64_t, unint64_t, uint64_t, uint64_t))sub_188D01588,  (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_188D01A3C);
          sub_188D087F8(v6);
          unint64_t result = swift_bridgeObjectRelease();
          unint64_t v64 = v62 + v63;
          if (!__OFADD__(v62, v63))
          {
            BOOL v58 = __OFADD__(v64, v61 >> 16);
            unint64_t v65 = v64 + (v61 >> 16);
            if (!v58)
            {
              if ((v61 & 0xC000) != 0) {
                uint64_t v66 = (v65 << 11) | 0x400;
              }
              else {
                uint64_t v66 = v65 << 11;
              }
              return v66 & 0xFFFFFFFFFFFFFF00LL | BYTE2(v61);
            }

            goto LABEL_134;
          }

LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
          return result;
        }

LABEL_132:
        __break(1u);
        goto LABEL_133;
      }

      goto LABEL_128;
    }

LABEL_53:
    swift_bridgeObjectRelease();
    unint64_t v32 = (v19 >> 16) - v69 + (v69 >> 11);
    if ((v19 & 0xC000) != 0) {
      uint64_t v33 = (v32 << 11) | 0x400;
    }
    else {
      uint64_t v33 = v32 << 11;
    }
    return v33 & 0xFFFFFFFFFFFFFF00LL | BYTE2(v19);
  }

  if (!v18) {
    goto LABEL_102;
  }
  uint64_t v34 = (v21 >> 59) & 1;
  if ((v22 & 0x1000000000000000LL) == 0) {
    LOBYTE(v34) = 1;
  }
  uint64_t v35 = 4LL << v34;
  if ((v22 & 0x2000000000000000LL) != 0) {
    unint64_t v36 = HIBYTE(v22) & 0xF;
  }
  else {
    unint64_t v36 = v21 & 0xFFFFFFFFFFFFLL;
  }
  do
  {
    if ((v19 & 0xC) == v35 || (v19 & 1) == 0)
    {
      if ((v19 & 0xC) == v35)
      {
        unint64_t result = sub_188D37044(v19, v21, v22);
        unint64_t v19 = result;
        if (v36 < result >> 16) {
          goto LABEL_125;
        }
      }

      else if (v36 < v19 >> 16)
      {
        goto LABEL_125;
      }

      if ((v19 & 1) == 0)
      {
        unint64_t result = sub_188D36F34(v19, v21, v22);
        unint64_t v19 = v19 & 0xC | result & 0xFFFFFFFFFFFFFFF3LL | 1;
      }
    }

    else if (v36 < v19 >> 16)
    {
      goto LABEL_124;
    }

    if (v19 < 0x4000)
    {
      __break(1u);
      goto LABEL_121;
    }

    if ((v22 & 0x1000000000000000LL) == 0)
    {
      unint64_t v38 = v19 >> 16;
      if ((v22 & 0x2000000000000000LL) != 0)
      {
        unint64_t v70 = v21;
        uint64_t v71 = v22 & 0xFFFFFFFFFFFFFFLL;
        if ((*((_BYTE *)&v70 + v38 - 1) & 0xC0) == 0x80)
        {
          uint64_t v39 = 0LL;
          do
            int v41 = *((_BYTE *)&v69 + v38 + v39-- + 6) & 0xC0;
          while (v41 == 128);
          goto LABEL_86;
        }
      }

      else
      {
        unint64_t result = (v22 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((v21 & 0x1000000000000000LL) == 0) {
          unint64_t result = sub_188DF8684();
        }
        if ((*(_BYTE *)(v38 + result - 1) & 0xC0) == 0x80)
        {
          uint64_t v39 = 0LL;
          do
            int v40 = *(_BYTE *)(result + v38 - 2 + v39--) & 0xC0;
          while (v40 == 128);
LABEL_86:
          uint64_t v42 = 1 - v39;
LABEL_88:
          unint64_t v19 = (v19 - (v42 << 16)) & 0xFFFFFFFFFFFF0000LL | 5;
          goto LABEL_89;
        }
      }

      uint64_t v42 = 1LL;
      goto LABEL_88;
    }

    unint64_t result = sub_188DF7E14();
    unint64_t v19 = result;
LABEL_89:
    ++v10;
  }

  while (v10 < 0 && v19 >> 14);
  uint64_t v73 = v10;
  if (!v10) {
    goto LABEL_53;
  }
LABEL_102:
  swift_unknownObjectRetain();
  sub_188D02F34( (uint64_t)&v74,  &v73,  0,  (uint64_t (*)(uint64_t, uint64_t *, void))sub_188D031D4,  (uint64_t (*)(uint64_t, uint64_t *, void, void *, uint64_t (*)(void, void, void)))sub_188D071D4,  (uint64_t (*)(void *, void *, uint64_t, void *, uint64_t *, void))sub_188D07250);
  unint64_t result = sub_188D087F8(v6);
  if (v74 != v68) {
    goto LABEL_129;
  }
  unint64_t v49 = v75;
  uint64_t v50 = v76;
  if (v76)
  {
    unint64_t v51 = v76 + 24 * ((v75 >> ((4 * *(_BYTE *)(v76 + 18) + 8) & 0x3C)) & 0xF);
    unint64_t v52 = *(void *)(v51 + 24);
    unint64_t v53 = *(void *)(v51 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_unknownObjectRetain();
    sub_188D36E50(v49, (uint64_t)&v70);
    sub_188D087F8(v6);
    swift_bridgeObjectRelease();
    unint64_t v52 = v70;
    unint64_t v53 = v71;
  }

  unint64_t v54 = sub_188D03528(0xFuLL, v73, v52, v53);
  unint64_t v55 = (v69 >> 11) - v69;
  swift_unknownObjectRetain();
  uint64_t v56 = sub_188D01358( v68,  v67,  v17,  v68,  v49,  v50,  (uint64_t (*)(unint64_t, unint64_t, uint64_t, uint64_t))sub_188D01588,  (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_188D01A3C);
  sub_188D087F8(v6);
  unint64_t result = swift_bridgeObjectRelease();
  unint64_t v57 = v55 + v56;
  if (__OFADD__(v55, v56)) {
    goto LABEL_130;
  }
  BOOL v58 = __OFADD__(v57, v54 >> 16);
  unint64_t v59 = v57 + (v54 >> 16);
  if (v58)
  {
LABEL_131:
    __break(1u);
    goto LABEL_132;
  }

  if ((v54 & 0xC000) != 0) {
    uint64_t v60 = (v59 << 11) | 0x400;
  }
  else {
    uint64_t v60 = v59 << 11;
  }
  return v60 & 0xFFFFFFFFFFFFFF00LL | BYTE2(v54);
}

          __break(1u);
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }

        goto LABEL_51;
      }

      if (__OFADD__(v70, v22))
      {
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }

      v70 += v22;
      swift_unknownObjectRetain();
      sub_188D02F34( (uint64_t)&v72,  (uint64_t *)&v70,  0,  (uint64_t (*)(uint64_t, uint64_t *, void))sub_188D032F0,  (uint64_t (*)(uint64_t, uint64_t *, void, void *, uint64_t (*)(void, void, void)))sub_188D07ACC,  (uint64_t (*)(void *, void *, uint64_t, void *, uint64_t *, void))sub_188D07B48);
      sub_188D087F8(v6);
      unsigned int v37 = v73;
      swift_unknownObjectRetain();
      unint64_t v38 = sub_188D36DF0();
      unint64_t result = sub_188D087F8(v6);
      if (v37 != v38)
      {
        if (v72 == v64)
        {
          uint64_t v39 = v65;
          int v40 = v74;
          if (v74)
          {
            int v41 = v74 + 24 * ((v37 >> ((4 * *(_BYTE *)(v74 + 18) + 8) & 0x3C)) & 0xF);
            uint64_t v42 = *(void *)(v41 + 32);
            unint64_t v59 = *(void *)(v41 + 24);
            unint64_t v61 = v74;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            unint64_t v43 = v59;
            int v40 = v61;
            uint64_t v39 = v65;
          }

          else
          {
            swift_unknownObjectRetain();
            sub_188D36E50(v37, (uint64_t)&v66);
            sub_188D087F8(v6);
            swift_bridgeObjectRelease();
            unint64_t v43 = v66;
            uint64_t v42 = v67;
          }

          unint64_t v51 = sub_188D95994(v70, v43, v42);
          unint64_t v52 = (v65 >> 11) - v39;
          swift_unknownObjectRetain();
          unint64_t v53 = sub_188D01358( v64,  v63,  v18,  v64,  v37,  v40,  (uint64_t (*)(unint64_t, unint64_t, uint64_t, uint64_t))sub_188D01588,  (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_188D01A3C);
          sub_188D087F8(v6);
          unint64_t result = swift_bridgeObjectRelease();
          unint64_t v54 = v52 + v53;
          if (!__OFADD__(v52, v53))
          {
            unint64_t v48 = __OFADD__(v54, v51 >> 16);
            unint64_t v55 = v54 + (v51 >> 16);
            if (!v48)
            {
              if ((v51 & 0xC000) != 0) {
                uint64_t v56 = (v55 << 11) | 0x400;
              }
              else {
                uint64_t v56 = v55 << 11;
              }
              return v56 & 0xFFFFFFFFFFFFFF00LL | BYTE2(v51);
            }

            goto LABEL_57;
          }

          __break(1u);
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }

        goto LABEL_51;
      }

      if (__OFADD__(v61, v52))
      {
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }

      uint64_t v35 = v17;
      v61 += v52;
      swift_unknownObjectRetain();
      sub_188D02F34( (uint64_t)&v63,  (uint64_t *)&v61,  0,  (uint64_t (*)(uint64_t, uint64_t *, void))sub_188D0340C,  (uint64_t (*)(uint64_t, uint64_t *, void, void *, uint64_t (*)(void, void, void)))sub_188D06368,  (uint64_t (*)(void *, void *, uint64_t, void *, uint64_t *, void))sub_188D063E4);
      sub_188D087F8(v6);
      unint64_t v36 = v64;
      swift_unknownObjectRetain();
      unsigned int v37 = sub_188D36DF0();
      unint64_t result = sub_188D087F8(v6);
      if (v36 != v37)
      {
        unint64_t v54 = v35;
        if (v63 == v57)
        {
          unint64_t v38 = v65;
          if (v65)
          {
            swift_bridgeObjectRetain();
          }

          else
          {
            swift_unknownObjectRetain();
            sub_188D36E50(v36, (uint64_t)v58);
            sub_188D087F8(v6);
          }

          swift_bridgeObjectRelease();
          uint64_t v45 = sub_188DF7F70();
          uint64_t v56 = (v54 >> 11) - v50;
          swift_unknownObjectRetain();
          unint64_t v46 = sub_188D01358( v57,  v18,  v19,  v57,  v36,  v38,  (uint64_t (*)(unint64_t, unint64_t, uint64_t, uint64_t))sub_188D01588,  (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_188D01A3C);
          sub_188D087F8(v6);
          unint64_t result = swift_bridgeObjectRelease();
          unint64_t v47 = v56 + v46;
          if (!__OFADD__(v56, v46))
          {
            uint64_t v42 = __OFADD__(v47, v45 >> 16);
            unint64_t v48 = v47 + (v45 >> 16);
            if (!v42)
            {
              if ((v45 & 0xC000) != 0) {
                unint64_t v49 = (v48 << 11) | 0x400;
              }
              else {
                unint64_t v49 = v48 << 11;
              }
              return v49 & 0xFFFFFFFFFFFFFF00LL | BYTE2(v45);
            }

            goto LABEL_57;
          }

  unint64_t v48 = 8 * v31;
  if (!v36[v31]) {
    goto LABEL_64;
  }
  unint64_t v49 = (v36[v31] - 1) << v48;
  if ((_DWORD)v31)
  {
    else {
      uint64_t v50 = 4;
    }
    __asm { BR              X12 }
  }

  if (v49 == -1)
  {
LABEL_64:
    if (!v37[v31]) {
      goto LABEL_76;
    }
    unint64_t v51 = (v37[v31] - 1) << v48;
    if ((_DWORD)v31)
    {
      else {
        unint64_t v52 = 4;
      }
      __asm { BR              X11 }
    }

    uint64_t v45 = v51 + 1;
LABEL_74:
    if (v45)
    {
      (*(void (**)(_BYTE *, uint64_t))(v25 + 8))(v36, v6);
      memcpy(v36, v37, v35);
      goto LABEL_77;
    }

unint64_t sub_188D05724( unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v6 = (uint64_t)v5;
  __int128 v7 = v5[1];
  *(_OWORD *)unint64_t v75 = *v5;
  *(_OWORD *)&v75[16] = v7;
  __int128 v76 = v5[2];
  uint64_t v8 = v76;
  if (*(void *)v75) {
    unint64_t v9 = 2 * (v76 & 0x1FFFFFFFFFFFFFLL);
  }
  else {
    unint64_t v9 = 0LL;
  }
  if (v9 < result >> 10)
  {
    __break(1u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }

  if (!*(void *)v75 || (uint64_t v77 = *(void *)v75, v78 = *(_OWORD *)&v75[8], v79 = *(void *)&v75[24], (v80 = v76) == 0))
  {
    if (!a5) {
      return 768LL;
    }
    goto LABEL_49;
  }

  uint64_t v11 = result;
  if (result >> 10 == ((2LL * (void)v76) & 0x3FFFFFFFFFFFFFLL))
  {
    if (!a5) {
      return v11;
    }
    LOBYTE(v12) = 1;
  }

  else
  {
    unint64_t v12 = a5 >> 63;
  }

  unint64_t result = sub_188D097FC(result, a2, a3, a4, v12);
  if (v15 != 1)
  {
    unint64_t v17 = v14;
    uint64_t v18 = v15;
    uint64_t v72 = v13;
    unint64_t v73 = v14;
    uint64_t v74 = v15;
    unint64_t v70 = a5;
    unint64_t v71 = (16 * (int)result) & 0x4000LL | ((unint64_t)result << 16) | (result >> 8) & 3 | 4;
    if (v13 == *((void *)&v76 + 1))
    {
      uint64_t v64 = v13;
      unint64_t v65 = result;
      unint64_t v63 = v14;
      if (v15)
      {
        unint64_t v19 = v15 + 24 * ((v14 >> ((4 * *(_BYTE *)(v15 + 18) + 8) & 0x3C)) & 0xF);
        uint64_t v20 = *(void *)(v19 + 24);
        unint64_t v21 = *(void *)(v19 + 32);
        unsigned int v22 = *(unsigned __int8 *)(v19 + 40);
        v16.i32[0] = *(_DWORD *)(v19 + 41);
        unint64_t v62 = vmovl_u8(v16).u64[0];
        swift_bridgeObjectRetain();
        v23.i64[0] = v62;
      }

      else
      {
        swift_unknownObjectRetain();
        sub_188D36E50(v17, (uint64_t)&v66);
        sub_188D087F8(v6);
        uint64_t v20 = v66;
        unint64_t v21 = v67;
        unsigned int v22 = v68;
        v24.i32[0] = v69;
        uint16x8_t v23 = vmovl_u8(v24);
      }

      uint32x4_t v25 = vmovl_u16((uint16x4_t)(v23.i64[0] & 0xFF00FF00FF00FFLL));
      v26.i64[0] = v25.u32[0];
      v26.i64[1] = v25.u32[1];
      uint64x2_t v27 = v26;
      v26.i64[0] = v25.u32[2];
      v26.i64[1] = v25.u32[3];
      int8x16_t v28 = vorrq_s8( (int8x16_t)vshlq_u64(v27, (uint64x2_t)xmmword_188DF9330),  (int8x16_t)vshlq_u64(v26, (uint64x2_t)xmmword_188DF9320));
      unint64_t result = (unint64_t)sub_188D95770( &v71,  &v70,  v20,  v21,  vorr_s8(*(int8x8_t *)v28.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL)).u8[0] | v22);
      if ((result & 1) != 0)
      {
        swift_bridgeObjectRelease();
        unint64_t v35 = (v71 >> 16) - v65 + (v65 >> 11);
        if ((v71 & 0xC000) != 0) {
          uint64_t v36 = (v35 << 11) | 0x400;
        }
        else {
          uint64_t v36 = v35 << 11;
        }
        return v36 & 0xFFFFFFFFFFFFFF00LL | BYTE2(v71);
      }

      if ((result & 0x100) == 0)
      {
        swift_unknownObjectRetain();
        sub_188D02F34( (uint64_t)&v72,  (uint64_t *)&v70,  0,  (uint64_t (*)(uint64_t, uint64_t *, void))sub_188D032F0,  (uint64_t (*)(uint64_t, uint64_t *, void, void *, uint64_t (*)(void, void, void)))sub_188D07ACC,  (uint64_t (*)(void *, void *, uint64_t, void *, uint64_t *, void))sub_188D07B48);
        unint64_t result = sub_188D087F8(v6);
        if (v72 == v64)
        {
          unint64_t v29 = v73;
          uint64_t v30 = v74;
          uint64_t v31 = v65;
          if (v74)
          {
            unint64_t v32 = v74 + 24 * ((v73 >> ((4 * *(_BYTE *)(v74 + 18) + 8) & 0x3C)) & 0xF);
            unint64_t v60 = v73;
            uint64_t v57 = *(void *)(v32 + 24);
            uint64_t v58 = v74;
            unint64_t v33 = *(void *)(v32 + 32);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v34 = v57;
            uint64_t v30 = v58;
            unint64_t v29 = v60;
            uint64_t v31 = v65;
          }

          else
          {
            swift_unknownObjectRetain();
            sub_188D36E50(v29, (uint64_t)&v66);
            sub_188D087F8(v6);
            swift_bridgeObjectRelease();
            uint64_t v34 = v66;
            unint64_t v33 = v67;
          }

          unint64_t v44 = sub_188D95994(v70, v34, v33);
          uint64_t v45 = (v65 >> 11) - v31;
          swift_unknownObjectRetain();
          uint64_t v46 = sub_188D01358( v64,  v63,  v18,  v64,  v29,  v30,  (uint64_t (*)(unint64_t, unint64_t, uint64_t, uint64_t))sub_188D01588,  (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_188D01A3C);
          sub_188D087F8(v6);
          unint64_t result = swift_bridgeObjectRelease();
          uint64_t v47 = v45 + v46;
          if (!__OFADD__(v45, v46))
          {
            BOOL v48 = __OFADD__(v47, v44 >> 16);
            uint64_t v49 = v47 + (v44 >> 16);
            if (!v48)
            {
              if ((v44 & 0xC000) != 0) {
                uint64_t v50 = (v49 << 11) | 0x400;
              }
              else {
                uint64_t v50 = v49 << 11;
              }
              return v50 & 0xFFFFFFFFFFFFFF00LL | BYTE2(v44);
            }

            goto LABEL_54;
          }

LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }

    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }

            if (v43)
            {
              *((void *)&v213 + 1) = *((void *)&v213 + 1) & ((-15LL << v192) - 1) | ((v43 - 1) << v192);
              unint64_t v51 = &v191[5 * (int)v43 - 5];
              uint64_t v52 = v51[4];
              uint64_t v53 = *((_OWORD *)v51 + 1);
              v232[0] = *(_OWORD *)v51;
              v232[1] = v53;
              uint64_t v233 = v52;
              swift_unknownObjectRetain();
              unsigned int v22 = sub_188DF0F88(v200);
              sub_188D087F8((uint64_t)v232);
              *(void *)&v214 = v22;
              swift_unknownObjectRelease();
              goto LABEL_52;
            }

            swift_unknownObjectRelease();
            uint64_t v36 = v193;
LABEL_33:
            if (v35)
            {
              *((void *)&v213 + 1) = *((void *)&v213 + 1) & ((-15LL << v34) - 1) | ((v35 - 1) << v34);
              unint64_t v44 = v36 + 40LL * ((int)v35 - 1);
              uint64_t v45 = *(void *)(v44 + 32);
              uint64_t v46 = *(_OWORD *)(v44 + 16);
              v230[0] = *(_OWORD *)v44;
              v230[1] = v46;
              uint64_t v231 = v45;
              swift_unknownObjectRetain();
              unsigned int v22 = sub_188DF0F88(v200);
              sub_188D087F8((uint64_t)v230);
              *(void *)&v214 = v22;
              swift_unknownObjectRelease();
              goto LABEL_39;
            }

            swift_unknownObjectRelease();
LABEL_37:
            if (!v32) {
              goto LABEL_162;
            }
LABEL_38:
            *((void *)&v213 + 1) = *((void *)&v213 + 1) & ((-15LL << v31) - 1) | ((v32 - 1) << v31);
            uint64_t v47 = v201.i64[0] + 40LL * ((int)v32 - 1);
            BOOL v48 = *(void *)(v47 + 32);
            uint64_t v49 = *(_OWORD *)(v47 + 16);
            v228[0] = *(_OWORD *)v47;
            v228[1] = v49;
            v229 = v48;
            swift_unknownObjectRetain();
            unsigned int v22 = sub_188DF0F88(v200);
            sub_188D087F8((uint64_t)v228);
            *(void *)&v214 = v22;
LABEL_39:
            uint8x8_t v24 = v197;
LABEL_40:
            swift_unknownObjectRelease_n();
            unint64_t v21 = *((void *)&v213 + 1);
            uint16x8_t v23 = v213;
            if ((void)v213 != v20) {
              goto LABEL_152;
            }
LABEL_41:
            if (v22) {
              goto LABEL_42;
            }
            goto LABEL_6;
          }

          if (v42)
          {
            *((void *)&v213 + 1) = ((v42 - 1) << v41) | ((-15LL << v41) - 1) & v21;
            *(void *)&v214 = v22;
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
LABEL_48:
            swift_unknownObjectRelease();
LABEL_52:
            uint8x8_t v24 = v197;
            swift_unknownObjectRelease();
            goto LABEL_40;
          }
        }

        unsigned int v191 = v39;
        uint64_t v192 = v37;
        uint64_t v43 = (v21 >> v37) & 0xF;
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        goto LABEL_50;
      }

      if (!v32) {
        goto LABEL_163;
      }
      unint64_t v21 = ((v32 - 1) << v31) | ((-15LL << v31) - 1) & v21;
      *((void *)&v213 + 1) = v21;
      swift_unknownObjectRelease();
      *(void *)&v214 = v15;
      unsigned int v22 = (uint64_t *)v15;
      uint8x8_t v24 = v197;
      if (v15)
      {
LABEL_42:
        uint64_t v50 = &v22[3 * ((v21 >> ((4 * *((_BYTE *)v22 + 18) + 8) & 0x3C)) & 0xF)];
        uint32x4_t v25 = *((unsigned __int8 *)v50 + 40);
        uint64x2_t v26 = *((unsigned __int8 *)v50 + 44);
        goto LABEL_7;
      }

  __break(1u);
LABEL_51:
  unint64_t result = sub_188D37044(a1, a4, a5);
  a1 = result;
LABEL_21:
  if ((v6 & 0xC) == v31)
  {
    unint64_t result = sub_188D37044(v6, a4, a5);
    uint64_t v6 = result;
    if ((a5 & 0x1000000000000000LL) == 0) {
      goto LABEL_23;
    }
  }

  else if ((a5 & 0x1000000000000000LL) == 0)
  {
LABEL_23:
    a5 = (v6 >> 16) - (a1 >> 16);
    goto LABEL_58;
  }

  uint64_t v53 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000LL) != 0) {
    uint64_t v53 = v55;
  }
  if (v53 < a1 >> 16) {
    goto LABEL_76;
  }
  if (v53 < v6 >> 16)
  {
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }

  a5 = sub_188DF7F28();
LABEL_58:
  unint64_t result = (*(uint64_t (**)(unint64_t, uint64_t))(v57 + 8))(v16, v58);
  if ((a5 & 0x8000000000000000LL) != 0)
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }

  int8x16_t v28 = v60;
  LODWORD(v23) = v56;
  if (a5 <= 0xFF) {
    return v23 & 0xFFFFFF | ((unint64_t)v28 << 40) | ((unint64_t)a5 << 32) | ((_DWORD)v26 << 24);
  }
  __break(1u);
LABEL_61:
  unint64_t result = sub_188D37044(a1, a4, a5);
  a1 = result;
LABEL_28:
  uint64_t v49 = v55;
  if ((a2 & 0xC) == v31)
  {
    unint64_t result = sub_188D37044(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000LL) == 0) {
      goto LABEL_30;
    }
  }

  else if ((a5 & 0x1000000000000000LL) == 0)
  {
LABEL_30:
    a5 = (a2 >> 16) - (a1 >> 16);
    goto LABEL_68;
  }

  uint64_t v54 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000LL) != 0) {
    uint64_t v54 = v49;
  }
  if (v54 < a1 >> 16) {
    goto LABEL_78;
  }
  if (v54 >= a2 >> 16)
  {
    a5 = sub_188DF7F28();
LABEL_68:
    unint64_t result = (*(uint64_t (**)(unint64_t, uint64_t))(v57 + 8))(v16, v58);
    if ((a5 & 0x8000000000000000LL) == 0)
    {
      int8x16_t v28 = v60;
      LODWORD(v23) = v56;
      if (a5 <= 0xFF)
      {
        LODWORD(v26) = 1;
        return v23 & 0xFFFFFF | ((unint64_t)v28 << 40) | ((unint64_t)a5 << 32) | ((_DWORD)v26 << 24);
      }

      goto LABEL_75;
    }

    __break(1u);
LABEL_51:
    __break(1u);
  }

  else
  {
LABEL_7:
    uint8x8_t v16 = a5 - (void)result;
    if (__OFSUB__(a5, result))
    {
      __break(1u);
      goto LABEL_39;
    }

    if (v16 >= (uint64_t)v15)
    {
      if (v13 == v12) {
        goto LABEL_41;
      }
      if ((a4 & 0x1000000000000000LL) == 0) {
        goto LABEL_17;
      }
LABEL_44:
      uint64x2_t v26 = MEMORY[0x1895D67BC](v10, v15, a3, a4);
LABEL_45:
      uint64_t v20 = 0LL;
      char *v9 = v26;
      unint64_t v21 = 1;
    }

    else
    {
      unint64_t v17 = HIBYTE(a4) & 0xF;
      if ((a4 & 0x2000000000000000LL) == 0) {
        unint64_t v17 = a3;
      }
      uint64_t v18 = 11LL;
      if (v11) {
        uint64_t v18 = 7LL;
      }
      char *v9 = v18 | (v17 << 16);
      unint64_t v19 = __OFSUB__(v15, v16);
      uint64_t v20 = v15 - v16;
      if (v19) {
        goto LABEL_40;
      }
      unint64_t v21 = 0;
    }

  uint64_t v147 = v155;
  unsigned int v148 = v86;
  uint8x8_t v149 = v185;
  (*(void (**)(uint64_t, char *, uint64_t))(v85 + 32))(v155, v148, v185);
  char v150 = 0LL;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v85 + 56))(v147, v150, 1LL, v149);
}

unint64_t sub_188D05DA8( unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v6 = (uint64_t)v5;
  __int128 v7 = v5[1];
  *(_OWORD *)uint64_t v66 = *v5;
  *(_OWORD *)&v66[16] = v7;
  __int128 v67 = v5[2];
  uint64_t v8 = v67;
  if (*(void *)v66) {
    unint64_t v9 = 2 * (v67 & 0x1FFFFFFFFFFFFFLL);
  }
  else {
    unint64_t v9 = 0LL;
  }
  if (v9 < result >> 10)
  {
    __break(1u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }

  if (!*(void *)v66 || (uint64_t v68 = *(void *)v66, v69 = *(_OWORD *)&v66[8], v70 = *(void *)&v66[24], (v71 = v67) == 0))
  {
    if (!a5) {
      return 768LL;
    }
    goto LABEL_49;
  }

  uint64_t v11 = result;
  if (result >> 10 == ((2LL * (void)v67) & 0x3FFFFFFFFFFFFFLL))
  {
    if (!a5) {
      return v11;
    }
    LOBYTE(v12) = 1;
  }

  else
  {
    unint64_t v12 = a5 >> 63;
  }

  unint64_t result = sub_188D097FC(result, a2, a3, a4, v12);
  if (v15 != 1)
  {
    unint64_t v17 = result;
    unint64_t v18 = v14;
    uint64_t v19 = v15;
    uint64_t v63 = v13;
    unint64_t v64 = v14;
    uint64_t v65 = v15;
    unint64_t v61 = a5;
    unint64_t v62 = (16 * (int)result) & 0x4000LL | ((unint64_t)result << 16) | (result >> 8) & 3 | 4;
    if (v13 == *((void *)&v67 + 1))
    {
      uint64_t v57 = v13;
      if (v15)
      {
        unint64_t v20 = v15 + 24 * ((v14 >> ((4 * *(_BYTE *)(v15 + 18) + 8) & 0x3C)) & 0xF);
        uint64_t v21 = *(void *)(v20 + 24);
        unint64_t v22 = *(void *)(v20 + 32);
        __int16 v23 = *(unsigned __int8 *)(v20 + 40);
        v16.i32[0] = *(_DWORD *)(v20 + 41);
        unint64_t v51 = vmovl_u8(v16).u64[0];
        swift_bridgeObjectRetain();
        v24.i64[0] = v51;
        uint64_t v25 = v21;
      }

      else
      {
        swift_unknownObjectRetain();
        sub_188D36E50(v18, (uint64_t)v58);
        sub_188D087F8(v6);
        uint64_t v25 = v58[0];
        unint64_t v22 = v58[1];
        __int16 v23 = v59;
        v26.i32[0] = v60;
        uint16x8_t v24 = vmovl_u8(v26);
      }

      uint32x4_t v27 = vmovl_u16((uint16x4_t)(v24.i64[0] & 0xFF00FF00FF00FFLL));
      v28.i64[0] = v27.u32[0];
      v28.i64[1] = v27.u32[1];
      uint64x2_t v29 = v28;
      v28.i64[0] = v27.u32[2];
      v28.i64[1] = v27.u32[3];
      uint64_t v52 = v29.i64[0];
      int8x16_t v30 = vorrq_s8( (int8x16_t)vshlq_u64(v29, (uint64x2_t)xmmword_188DF9330),  (int8x16_t)vshlq_u64(v28, (uint64x2_t)xmmword_188DF9320));
      unint64_t result = sub_188D955C0( (uint64_t *)&v62,  &v61,  v25,  v22,  vorr_s8(*(int8x8_t *)v30.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)).u16[0] | v23);
      if ((result & 1) != 0)
      {
        swift_bridgeObjectRelease();
        unint64_t v33 = (v62 >> 16) - v17 + (v17 >> 11);
        if ((v62 & 0xC000) != 0) {
          uint64_t v34 = (v33 << 11) | 0x400;
        }
        else {
          uint64_t v34 = v33 << 11;
        }
        return v34 & 0xFFFFFFFFFFFFFF00LL | BYTE2(v62);
      }

      uint64_t v50 = v17;
      if ((result & 0x100) == 0)
      {
        swift_unknownObjectRetain();
        sub_188D02F34( (uint64_t)&v63,  (uint64_t *)&v61,  0,  (uint64_t (*)(uint64_t, uint64_t *, void))sub_188D0340C,  (uint64_t (*)(uint64_t, uint64_t *, void, void *, uint64_t (*)(void, void, void)))sub_188D06368,  (uint64_t (*)(void *, void *, uint64_t, void *, uint64_t *, void))sub_188D063E4);
        unint64_t result = sub_188D087F8(v6);
        if (v63 == v57)
        {
          unint64_t v53 = v17;
          unint64_t v32 = v64;
          uint64_t v31 = v65;
          if (v65)
          {
            swift_bridgeObjectRetain();
          }

          else
          {
            swift_unknownObjectRetain();
            sub_188D36E50(v32, (uint64_t)v58);
            sub_188D087F8(v6);
          }

          swift_bridgeObjectRelease();
          unint64_t v39 = sub_188DF7F70();
          uint64_t v55 = (v53 >> 11) - v50;
          swift_unknownObjectRetain();
          uint64_t v40 = sub_188D01358( v57,  v18,  v19,  v57,  v32,  v31,  (uint64_t (*)(unint64_t, unint64_t, uint64_t, uint64_t))sub_188D01588,  (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_188D01A3C);
          sub_188D087F8(v6);
          unint64_t result = swift_bridgeObjectRelease();
          uint64_t v41 = v55 + v40;
          if (!__OFADD__(v55, v40))
          {
            BOOL v42 = __OFADD__(v41, v39 >> 16);
            uint64_t v43 = v41 + (v39 >> 16);
            if (!v42)
            {
              if ((v39 & 0xC000) != 0) {
                uint64_t v44 = (v43 << 11) | 0x400;
              }
              else {
                uint64_t v44 = v43 << 11;
              }
              return v44 & 0xFFFFFFFFFFFFFF00LL | BYTE2(v39);
            }

            goto LABEL_54;
          }

uint64_t sub_188D06368(unint64_t *a1, uint64_t *a2, char a3, unsigned __int16 *a4, uint64_t a5)
{
  unint64_t v5 = *a4;
  unint64_t v6 = *a1;
  unint64_t v7 = (*a1 >> 8) & 0xF;
  if (v7 >= v5)
  {
    uint64_t v13 = 0LL;
  }

  else
  {
    uint64_t v8 = *a2;
    unint64_t v9 = (unsigned __int8 *)(a5 + 24 * ((*a1 >> 8) & 0xF) + 17);
    do
    {
      unsigned int v11 = *v9;
      v9 += 24;
      uint64_t v10 = v11;
      BOOL v12 = v8 < v11;
      if ((a3 & 1) != 0)
      {
        if (v12)
        {
LABEL_8:
          uint64_t v13 = 1LL;
          goto LABEL_11;
        }
      }

      else if (v12)
      {
        goto LABEL_8;
      }

      v8 -= v10;
      *a2 = v8;
      ++v7;
    }

    while (v5 != v7);
    uint64_t v13 = 0LL;
    unint64_t v7 = v5;
  }

LABEL_11:
  *a1 = v6 & 0xFFFFFFFFFFFFF0FFLL | (v7 << 8);
  return v13;
}

  *a1 = v6 & 0xFFFFFFFFFFFFF0FFLL | (v7 << 8);
  return v13;
}

  *a1 = v6 & 0xFFFFFFFFFFFFF0FFLL | (v7 << 8);
  return v13;
}

  *a1 = v6 & 0xFFFFFFFFFFFFF0FFLL | (v7 << 8);
  return v13;
}

    swift_storeEnumTagMultiPayload();
    return a1;
  }

  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  return a1;
}

    swift_storeEnumTagMultiPayload();
    return a1;
  }

  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  return a1;
}

    uint64_t v25 = 0;
    goto LABEL_12;
  }

  if (!sub_188D71CE0( a4,  a6,  BYTE4(a6),  v15 != 0,  *(void *)a2,  *(_DWORD *)(a2 + 16),  *(_BYTE *)(a2 + 20),  *(_BYTE *)(a2 + 21)))
  {
    unint64_t v33 = a3;
    if ((sub_188D71600(a1, a2, &v33, a7) & 1) != 0)
    {
      unint64_t v17 = v15 != 0;
      unint64_t v18 = *(void *)a2;
      uint64_t v19 = *(_DWORD *)(a2 + 16);
      unint64_t v20 = *(_BYTE *)(a2 + 21);
      uint64_t v21 = *(_BYTE *)(a2 + 20);
      unint64_t v22 = a4;
      __int16 v23 = v8;
      uint16x8_t v24 = v14;
LABEL_10:
      uint8x8_t v16 = !sub_188D71CE0(v22, v23, v24, v17, v18, v19, v21, v20);
      goto LABEL_18;
    }

    goto LABEL_11;
  }

        unint64_t v5 = sub_188CF73DC((uint64_t)v5);
        *uint64_t v1 = v5;
        goto LABEL_7;
      }

    __break(1u);
    goto LABEL_12;
  }

  unint64_t v9 = __CFADD__(v8, a2);
  v8 += a2;
  if (v9)
  {
    __break(1u);
    goto LABEL_14;
  }

  if (v8 >= 0xFFFFFFFFFFFFFFC0LL)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  unint64_t result = ((v8 + 63) >> 6) - *((void *)*v3 + 2);
  if (result >= 0)
  {
    sub_188D2EF64(result, 0LL);
    v3[1] = (char *)v8;
    goto LABEL_7;
  }

    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }

  return 0LL;
}

      __break(1u);
LABEL_12:
      __break(1u);
      return result;
    }

    __break(1u);
    goto LABEL_11;
  }

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))( AssociatedTypeWitness,  AssociatedConformanceWitness);
}

      __break(1u);
LABEL_12:
      __break(1u);
      return result;
    }

    __break(1u);
    goto LABEL_11;
  }

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))( AssociatedTypeWitness,  AssociatedConformanceWitness);
}

  __break(1u);
  return result;
}

        __break(1u);
LABEL_12:
        __break(1u);
        goto LABEL_13;
      }
    }

    __break(1u);
    goto LABEL_11;
  }

  return result;
}

        __break(1u);
LABEL_12:
        __break(1u);
        goto LABEL_13;
      }
    }

    __break(1u);
    goto LABEL_11;
  }

  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    (*(void (**)(char *, uint64_t))(v68 + 8))(v44, v69);
    __break(1u);
    return;
  }

  (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v40, v7);
  (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v50, v69);
LABEL_8:
  Rope._invalidateIndices()();
}

    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v46, v74);
    __break(1u);
    return;
  }

  (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v45, v8);
  (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v53, v55);
LABEL_8:
  Rope._invalidateIndices()();
}

  __break(1u);
  return result;
}

    (*result)[1] = v5;
    return result;
  }

  if (!*(void *)&v4) {
    goto LABEL_11;
  }
  unint64_t v6 = 8LL * *(void *)&v4;
  while (1)
  {
    unint64_t v7 = (uint8x8_t)vcnt_s8(*v3);
    v7.i16[0] = vaddlv_u8(v7);
    uint64_t v8 = __OFADD__(v5, v7.u32[0]);
    unint64_t v5 = (int8x8_t *)((char *)v5 + v7.u32[0]);
    if (v8) {
      break;
    }
    ++v3;
    v6 -= 8LL;
    if (!v6) {
      goto LABEL_11;
    }
  }

  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

  v5[5] = *((void *)&v33 + 1) + 1LL;
  return result;
}

  *a5 = v9;
  a5[1] = v10;
  a5[2] = v11;
  a5[3] = v12;
  a5[4] = v13;
  return result;
}

  __break(1u);
  return result;
}

  unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
  if (v24 < 0 || a2 != v24) {
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_188D063E4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, char a6)
{
  unint64_t v6 = (unint64_t *)(a3 + 8);
  unint64_t v7 = (*(void *)(a3 + 8) >> ((4 * *(_BYTE *)(a4 + 18) + 8) & 0x3C)) & 0xFLL;
  if (v7 >= *(unsigned __int16 *)(a4 + 16))
  {
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v21 = result;
  unint64_t v12 = *(unsigned __int16 *)result;
  uint64_t v13 = *(void *)(a2 + 40 * ((*(void *)(a3 + 8) >> ((4 * *(_BYTE *)(a4 + 18) + 8) & 0x3C)) & 0xFLL));
  if (*(_BYTE *)(v13 + 18))
  {
    swift_unknownObjectRetain();
    char v14 = sub_188D063E4(v13 + 16, v13 + 24, a3, v13, a5, a6 & 1);
    swift_unknownObjectRelease();
    if ((v14 & 1) != 0) {
      return 1LL;
    }
  }

  else if ((sub_188D06368(v6, a5, a6 & 1, (unsigned __int16 *)(v13 + 16), v13 + 24) & 1) != 0)
  {
LABEL_17:
    *(void *)(a3 + 16) = v13;
    return 1LL;
  }

  unint64_t v15 = v7 + 1;
  if (v7 + 1 >= v12) {
    return 0LL;
  }
  uint64_t v16 = *a5;
  for (uint64_t i = (void *)(a2 + 40LL * v7 + 40); ; i += 5)
  {
    uint64_t v18 = i[3];
    if ((a6 & 1) == 0) {
      break;
    }
    if (v16 <= v18) {
      goto LABEL_12;
    }
LABEL_9:
    v16 -= v18;
    *a5 = v16;
    if (v12 == ++v15) {
      return 0LL;
    }
  }

  if (v16 >= v18) {
    goto LABEL_9;
  }
LABEL_12:
  *unint64_t v6 = (((-15LL << ((4 * *(_BYTE *)(v21 + 2) + 8) & 0x3C)) - 1) & *v6 | (v15 << ((4 * *(_BYTE *)(v21 + 2) + 8) & 0x3C))) & ((-256LL << ((4 * *(_BYTE *)(v21 + 2)) & 0x3C)) | 0xFF);
  uint64_t v13 = *i;
  uint64_t v19 = *i + 24LL;
  if (!*(_BYTE *)(*i + 18LL))
  {
    unint64_t result = sub_188D06368(v6, a5, a6 & 1, (unsigned __int16 *)(v13 + 16), *i + 24LL);
    if ((result & 1) == 0) {
      goto LABEL_20;
    }
    goto LABEL_17;
  }

  swift_unknownObjectRetain();
  char v20 = sub_188D063E4(v13 + 16, v19, a3, v13, a5, a6 & 1);
  unint64_t result = swift_unknownObjectRelease();
  if ((v20 & 1) != 0) {
    return 1LL;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_188D065F4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, char a6)
{
  unint64_t v6 = (unint64_t *)(a3 + 8);
  unint64_t v7 = (*(void *)(a3 + 8) >> ((4 * *(_BYTE *)(a4 + 18) + 8) & 0x3C)) & 0xFLL;
  unint64_t v8 = *(unsigned __int16 *)(a4 + 16);
  if (v7 > v8)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v13 = result;
  if (v7 < v8)
  {
    uint64_t v14 = a2 + 40 * ((*(void *)(a3 + 8) >> ((4 * *(_BYTE *)(a4 + 18) + 8) & 0x3C)) & 0xFLL);
    __int128 v15 = *(_OWORD *)(v14 + 16);
    v24[0] = *(_OWORD *)v14;
    v24[1] = v15;
    uint64_t v25 = *(void *)(v14 + 32);
    swift_unknownObjectRetain();
    char v16 = sub_188D0340C(a3, a5, a6 & 1);
    unint64_t result = sub_188D087F8((uint64_t)v24);
    if ((v16 & 1) != 0) {
      return 1LL;
    }
  }

  if (!v7) {
    return 0LL;
  }
  uint64_t v17 = *a5;
  unint64_t v18 = v7 + 1;
  for (uint64_t i = (uint64_t *)(a2 + 40LL * v7 - 40); ; i -= 5)
  {
    uint64_t v20 = i[3];
    if ((a6 & 1) == 0) {
      break;
    }
    if (v17 < v20) {
      goto LABEL_13;
    }
LABEL_10:
    BOOL v21 = __OFSUB__(v17, v20);
    v17 -= v20;
    if (v21)
    {
      __break(1u);
      goto LABEL_22;
    }

    *a5 = v17;
    if (--v18 < 2) {
      return 0LL;
    }
  }

  if (v20 < v17) {
    goto LABEL_10;
  }
LABEL_13:
  *unint64_t v6 = (((-15LL << ((4 * *(_BYTE *)(v13 + 2) + 8) & 0x3C)) - 1) & *v6 | ((v18 - 2) << ((4 * *(_BYTE *)(v13 + 2) + 8) & 0x3C))) & ((-256LL << ((4 * *(_BYTE *)(v13 + 2)) & 0x3C)) | 0xFF);
  if (__OFSUB__(v20, *a5)) {
    goto LABEL_23;
  }
  *a5 = v20 - *a5;
  uint64_t v22 = *i;
  if (!*(_BYTE *)(*i + 18))
  {
    unint64_t result = sub_188D06368(v6, a5, a6 & 1, (unsigned __int16 *)(v22 + 16), v22 + 24);
    if ((result & 1) == 0) {
      goto LABEL_24;
    }
    *(void *)(a3 + 16) = v22;
    return 1LL;
  }

  swift_unknownObjectRetain();
  char v23 = sub_188D063E4(v22 + 16, v22 + 24, a3, v22, a5, a6 & 1);
  unint64_t result = swift_unknownObjectRelease();
  if ((v23 & 1) != 0) {
    return 1LL;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t _s19CollectionsInternal12BigSubstringV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a1 + 16);
  v96[0] = *(_OWORD *)a1;
  v96[1] = v4;
  __int128 v97 = *(_OWORD *)(a1 + 32);
  __int128 v5 = *(_OWORD *)(a2 + 16);
  v93[0] = *(_OWORD *)a2;
  v93[1] = v5;
  __int128 v94 = *(_OWORD *)(a2 + 32);
  v95[0] = v93[0];
  __int128 v98 = v96[0];
  __int128 v99 = v4;
  __int128 v100 = v97;
  v95[1] = v5;
  v95[2] = v94;
  sub_188D07F48(a1);
  sub_188D07F48(a2);
  BOOL v6 = sub_188CFE978((uint64_t)v95);
  sub_188D087F8(a2);
  uint64_t result = sub_188D087F8(a1);
  unint64_t v8 = *(void *)(a1 + 48);
  if (v6 && (*(void *)(a2 + 48) ^ v8) <= 0x3FF && (*(void *)(a1 + 80) ^ *(void *)(a2 + 80)) < 1024LL) {
    return 1LL;
  }
  unint64_t v9 = *(void *)(a1 + 80);
  if (v9 >> 10 < v8 >> 10) {
    goto LABEL_36;
  }
  uint64_t v10 = *(void *)(a1 + 56);
  unint64_t v11 = *(void *)(a1 + 64);
  uint64_t v12 = *(void *)(a1 + 72);
  unint64_t v51 = *(void *)(a1 + 80);
  uint64_t v49 = *(void *)(a1 + 88);
  unint64_t v47 = *(void *)(a1 + 96);
  uint64_t v45 = *(void *)(a1 + 104);
  uint64_t result = _s19CollectionsInternal9BigStringV8distance4from2toSiAC5IndexV_AHtF_0( *(void *)(a1 + 48),  v10,  v11,  v12,  v9,  v49,  v47,  v45);
  unint64_t v13 = *(void *)(a2 + 48);
  unint64_t v14 = *(void *)(a2 + 80);
  if (v14 >> 10 < v13 >> 10)
  {
LABEL_37:
    __break(1u);
    return result;
  }

  uint64_t v40 = *(void *)(a2 + 56);
  uint64_t v37 = *(void *)(a2 + 72);
  unint64_t v38 = *(void *)(a2 + 64);
  unint64_t v43 = *(void *)(a2 + 96);
  uint64_t v44 = *(void *)(a2 + 88);
  uint64_t v42 = *(void *)(a2 + 104);
  if (result == _s19CollectionsInternal9BigStringV8distance4from2toSiAC5IndexV_AHtF_0( *(void *)(a2 + 48),  v40,  v38,  v37,  v14,  v44,  v43,  v42))
  {
    sub_188D07F48(a1);
    sub_188DA4EA0(v96, v8, v10, v11, v12, v82);
    __int128 v35 = v82[1];
    __int128 v36 = v82[0];
    uint64_t v15 = v83;
    uint64_t v16 = v84;
    uint64_t v17 = v85;
    __int128 v34 = v86;
    uint64_t v18 = v87;
    unint64_t v19 = v88;
    uint64_t v20 = v89;
    sub_188D087F8(a1);
    *(void *)&__int128 v75 = v51;
    *((void *)&v75 + 1) = v49;
    *(void *)&__int128 v76 = v47;
    *((void *)&v76 + 1) = v45;
    __int128 v77 = v36;
    __int128 v78 = v35;
    *(void *)&__int128 v79 = v15;
    *((void *)&v79 + 1) = v16;
    *(_OWORD *)&v80[8] = v34;
    *(void *)uint64_t v80 = v17;
    *(void *)&v80[24] = v18;
    *(void *)&__int128 v81 = v19;
    *((void *)&v81 + 1) = v20;
    sub_188D07F48(a2);
    sub_188DA4EA0(v93, v13, v40, v38, v37, v90);
    __int128 v48 = v90[1];
    __int128 v50 = v90[0];
    __int128 v46 = v90[2];
    __int128 v39 = v90[4];
    __int128 v41 = v90[3];
    uint64_t v21 = v91;
    uint64_t v22 = v92;
    uint64_t result = sub_188D087F8(a2);
    *(void *)&__int128 v68 = v14;
    *((void *)&v68 + 1) = v44;
    *(void *)&__int128 v69 = v43;
    *((void *)&v69 + 1) = v42;
    __int128 v70 = v50;
    __int128 v71 = v48;
    __int128 v72 = v46;
    *(_OWORD *)unint64_t v73 = v41;
    *(_OWORD *)&v73[16] = v39;
    int64_t v23 = v17 + (v19 >> 16);
    *(void *)&__int128 v74 = v21;
    *((void *)&v74 + 1) = v22;
    if (__OFADD__(v17, v19 >> 16))
    {
LABEL_34:
      __break(1u);
    }

    else
    {
      int64_t v24 = v14 >> 11;
      while (1)
      {
        if (v23 < (uint64_t)(v51 >> 11) && (*((void *)&v81 + 1) ^ v19) >= 0x4000)
        {
          __int128 v108 = v77;
          __int128 v109 = v78;
          __int128 v110 = v79;
          __int128 v112 = *(_OWORD *)&v80[8];
          uint64_t v111 = v17;
          uint64_t v113 = *(void *)&v80[24];
          unint64_t v114 = v19;
          uint64_t v115 = *((void *)&v81 + 1);
          sub_188DA4354();
          uint64_t v26 = v30;
          uint64_t v27 = v31;
          uint64_t result = sub_188DA48EC(v30, v31);
          if ((result & 1) == 0) {
            *(void *)&__int128 v81 = *((void *)&v81 + 1);
          }
        }

        else
        {
          uint64_t v26 = 0LL;
          uint64_t v27 = 0LL;
        }

        if ((uint64_t)(*(void *)v73 + ((unint64_t)v74 >> 16)) < v24
          && (*((void *)&v74 + 1) ^ (unint64_t)v74) >= 0x4000)
        {
          __int128 v101 = v70;
          __int128 v102 = v71;
          __int128 v103 = v72;
          __int128 v105 = *(_OWORD *)&v73[8];
          uint64_t v104 = *(void *)v73;
          uint64_t v106 = *(void *)&v73[24];
          __int128 v107 = v74;
          sub_188DA4354();
          uint64_t v28 = v32;
          uint64_t v29 = v33;
          if ((sub_188DA48EC(v32, v33) & 1) == 0) {
            *(void *)&__int128 v74 = *((void *)&v74 + 1);
          }
        }

        else
        {
          uint64_t v28 = 0LL;
          uint64_t v29 = 0LL;
        }

        if (!v27)
        {
          if (!v29)
          {
            __int128 v56 = v72;
            __int128 v57 = *(_OWORD *)v73;
            __int128 v58 = *(_OWORD *)&v73[16];
            __int128 v59 = v74;
            __int128 v52 = v68;
            __int128 v53 = v69;
            __int128 v54 = v70;
            __int128 v55 = v71;
            sub_188D08820((uint64_t)&v52);
            __int128 v64 = v79;
            __int128 v65 = *(_OWORD *)v80;
            __int128 v66 = *(_OWORD *)&v80[16];
            __int128 v67 = v81;
            __int128 v60 = v75;
            __int128 v61 = v76;
            __int128 v62 = v77;
            __int128 v63 = v78;
            sub_188D08820((uint64_t)&v60);
            return 1LL;
          }

LABEL_30:
          swift_bridgeObjectRelease();
LABEL_31:
          __int128 v56 = v72;
          __int128 v57 = *(_OWORD *)v73;
          __int128 v58 = *(_OWORD *)&v73[16];
          __int128 v59 = v74;
          __int128 v52 = v68;
          __int128 v53 = v69;
          __int128 v54 = v70;
          __int128 v55 = v71;
          sub_188D08820((uint64_t)&v52);
          __int128 v64 = v79;
          __int128 v65 = *(_OWORD *)v80;
          __int128 v66 = *(_OWORD *)&v80[16];
          __int128 v67 = v81;
          __int128 v60 = v75;
          __int128 v61 = v76;
          __int128 v62 = v77;
          __int128 v63 = v78;
          sub_188D08820((uint64_t)&v60);
          return 0LL;
        }

        if (!v29) {
          goto LABEL_30;
        }
        if (v26 == v28 && v27 == v29)
        {
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
        }

        else
        {
          char v25 = sub_188DF8978();
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          if ((v25 & 1) == 0) {
            goto LABEL_31;
          }
        }

        uint64_t v17 = *(void *)v80;
        unint64_t v19 = v81;
        int64_t v23 = *(void *)v80 + ((unint64_t)v81 >> 16);
      }
    }

    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  return 0LL;
}

        __break(1u);
        goto LABEL_31;
      }
    }

    __break(1u);
    goto LABEL_30;
  }

  uint64_t v2 = 0LL;
  uint64_t v3 = 0LL;
  __int128 v4 = 0LL;
  uint64_t result = 0LL;
  BOOL v6 = (uint64_t *)(*(void *)v0 + 64LL);
  do
  {
    unint64_t v7 = *(v6 - 4);
    if (v7)
    {
      unint64_t v8 = *(v6 - 1);
      unint64_t v7 = *v6;
      uint64_t v10 = *(v6 - 3);
      unint64_t v9 = *(v6 - 2);
      unint64_t v11 = __OFADD__(result, v10);
      result += v10;
      if (v11)
      {
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
    }

    else
    {
      unint64_t v9 = 0LL;
      unint64_t v8 = 0LL;
    }

    unint64_t v11 = __OFADD__(v4, v9);
    v4 += v9;
    if (v11) {
      goto LABEL_25;
    }
    unint64_t v11 = __OFADD__(v3, v8);
    v3 += v8;
    if (v11) {
      goto LABEL_26;
    }
    unint64_t v11 = __OFADD__(v2, v7);
    v2 += v7;
    if (v11) {
      goto LABEL_27;
    }
    v6 += 6;
    --v1;
  }

  while (v1);
  if (*(void *)(v0 + 8)) {
    goto LABEL_15;
  }
LABEL_19:
  if (!*(void *)(v0 + 56)) {
    return result;
  }
  uint64_t v16 = *(unsigned int *)(v0 + 64);
  unint64_t v11 = __OFADD__(result, v16 >> 24);
  result += v16 >> 24;
  if (v11) {
    goto LABEL_32;
  }
  if (__OFADD__(v4, BYTE2(v16)))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

  if (__OFADD__(v3, BYTE1(v16)))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  if (__OFADD__(v2, v16)) {
LABEL_35:
  }
    __break(1u);
  return result;
}

    __break(1u);
    goto LABEL_31;
  }

  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A8D0);
  uint64_t v22 = v38;
  if ((ValueMetadata *)v21 != a3)
  {
    if (v8 >= (uint64_t)a2)
    {
      int64_t v23 = v37;
      sub_188DF531C(v37, a2, v8, (uint64_t)a3);
      return (*(uint64_t (**)(uint64_t, ValueMetadata *))(v22 + 8))(v23, a3);
    }

    __break(1u);
    goto LABEL_30;
  }

  (*(void (**)(char *, uint64_t, ValueMetadata *))(v38 + 16))(v12, v37, a3);
  swift_dynamicCast();
  uint64_t v28 = (unint64_t)v42;
  uint64_t v29 = v43;
  uint64_t v30 = v44;
  uint64_t v31 = *(void *)(v44 + 16);
  uint64_t v32 = *v4;
  swift_bridgeObjectRetain();
  uint64_t v33 = swift_isUniquelyReferenced_nonNull_native();
  *__int128 v4 = v32;
  if ((v33 & 1) == 0)
  {
    uint64_t v32 = sub_188CF73DC((uint64_t)v32);
    *__int128 v4 = v32;
  }

  __int128 v34 = *((void *)v32 + 2);
  __int128 v35 = v4[1];
  __int128 v39 = v32 + 32;
  uint64_t v40 = v34;
  __int128 v41 = v35;
  sub_188DF548C(v28, v29, v30 + 32, v31, a2);
  *__int128 v4 = v32;
  swift_bridgeObjectRelease_n();
  return (*(uint64_t (**)(uint64_t, ValueMetadata *))(v38 + 8))(v37, a3);
}

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return 1LL;
}

          __break(1u);
LABEL_31:
          __break(1u);
          goto LABEL_32;
        }

        uint64_t v45 = 0LL;
        uint64_t v42 = v38 * v21;
        __int128 v72 = v38 * v35;
        __int128 v48 = v79;
      }

      else
      {
        __int128 v76 = (void (*)(char *, uint64_t))(v21 + 1);
        __int128 v77 = v32;
        uint64_t v37 = v88;
        __int128 v36 = v89;
        unint64_t v38 = *(void *)(v88 + 72);
        unint64_t v73 = v38 * v35;
        __int128 v39 = *(void (**)(char *))(v88 + 16);
        __int128 v75 = (uint64_t *)(v89 + v38 * v35);
        v39(v13);
        uint64_t v40 = Rope._Node.header.getter();
        __int128 v41 = *(void (**)(char *, uint64_t))(v37 + 8);
        v41(v13, v11);
        uint64_t v42 = v38 * v21;
        unint64_t v43 = (uint64_t *)(v36 + v42);
        __int128 v74 = (void (*)(char *, uint64_t *, uint64_t))v39;
        v39(v13);
        uint64_t v44 = (unsigned __int16)Rope._Node.header.getter();
        v41(v13, v11);
        uint64_t v45 = v44 + v40;
        __int128 v46 = (*(uint64_t (**)(void))(v82 + 16))();
        unint64_t v47 = v80;
        if (v46 >= v45)
        {
          static Rope._Node.redistributeChildren(_:_:to:)(v43, v75, v45, v80, v79);
          Rope._UnsafeHandle._removeChild(at:)((uint64_t)v76, v78);
          v41(v13, v11);
LABEL_26:
          __int128 v34 = 0;
          goto LABEL_27;
        }

        __int128 v48 = v79;
        if ((v81 & 0x8000000000000000LL) == 0)
        {
          uint64_t v49 = v88;
          __int128 v50 = v74;
          goto LABEL_15;
        }

        __int128 v72 = v73;
      }

      static Rope._Node.redistributeChildren(_:_:to:)( (uint64_t *)(v89 + v42),  (uint64_t *)(v89 + v72),  (unint64_t)v45 >> 1,  v47,  v48);
      goto LABEL_26;
    }

        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
    }

    __break(1u);
    goto LABEL_30;
  }

  uint64_t result = sub_188DEEDC0(v32, (uint64_t *)&v33, (uint64_t *)&v40);
  if (!(void)v40)
  {
    unint64_t v7 = *(void *)&v36[8];
    __int128 v5 = *(void *)v36;
    unint64_t v8 = *(void *)&v36[16];
    unint64_t v9 = *(void *)&v36[24];
    uint64_t v10 = *(void *)&v36[32];
    *(void *)&uint64_t v40 = 0LL;
    swift_unknownObjectRetain();
    MEMORY[0x1895D76E0](&v40, 8LL);
    uint64_t v22 = v40;
    swift_unknownObjectRelease();
    goto LABEL_26;
  }

  int64_t v23 = *((void *)&v40 + 1);
  int64_t v24 = v41;
  uint64_t v30 = v42;
  uint64_t v37 = *(_OWORD *)v36;
  unint64_t v38 = *(_OWORD *)&v36[16];
  char v25 = *(void *)&v36[32];
  __int128 v39 = *(void *)&v36[32];
  uint64_t v26 = *(unsigned __int8 *)(*(void *)v36 + 18LL) + 1;
  if (((v26 >> 8) & 1) != 0) {
    goto LABEL_32;
  }
  uint64_t v27 = v38;
  uint64_t v28 = *((void *)&v37 + 1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A228);
  __int128 v5 = swift_allocObject();
  *(_WORD *)(v5 + 16) = 0;
  uint64_t result = v5 + 16;
  *(_BYTE *)(v5 + 18) = v26;
  uint64_t v21 = __OFADD__(v28, v23);
  unint64_t v7 = v28 + v23;
  if (v21)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

  unint64_t v8 = v27 + v24;
  if (__OFADD__((void)v27, (void)v24))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  unint64_t v9 = *((void *)&v27 + 1) + *((void *)&v24 + 1);
  if (__OFADD__(*((void *)&v27 + 1), *((void *)&v24 + 1)))
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  uint64_t v21 = __OFADD__(v25, v30);
  uint64_t v10 = v25 + v30;
  if (!v21)
  {
    sub_188DF08F4((_WORD *)result, v5 + 24, (uint64_t)&v37, (uint64_t)&v40);
    uint64_t v31 = 0LL;
    MEMORY[0x1895D76E0](&v31, 8LL);
    swift_unknownObjectRelease();
    uint64_t v22 = v31;
    swift_unknownObjectRelease();
    uint64_t result = sub_188D087F8((uint64_t)&v37);
    goto LABEL_27;
  }

uint64_t _s19CollectionsInternal12BigSubstringV1loiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a1 + 16);
  v90[0] = *(_OWORD *)a1;
  v90[1] = v4;
  __int128 v91 = *(_OWORD *)(a1 + 32);
  __int128 v92 = v90[0];
  __int128 v5 = *(_OWORD *)(a2 + 16);
  v87[0] = *(_OWORD *)a2;
  v87[1] = v5;
  __int128 v88 = *(_OWORD *)(a2 + 32);
  v89[0] = v87[0];
  __int128 v93 = v4;
  __int128 v94 = v91;
  v89[1] = v5;
  v89[2] = v88;
  sub_188D07F48(a1);
  sub_188D07F48(a2);
  BOOL v6 = sub_188CFE978((uint64_t)v89);
  sub_188D087F8(a2);
  sub_188D087F8(a1);
  unint64_t v7 = *(void *)(a1 + 48);
  if (v6 && (*(void *)(a2 + 48) ^ v7) <= 0x3FF && (*(void *)(a1 + 80) ^ *(void *)(a2 + 80)) < 1024LL) {
    return 0LL;
  }
  uint64_t v8 = *(void *)(a1 + 56);
  unint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 72);
  unint64_t v11 = *(void *)(a1 + 80);
  __int128 v46 = *(_OWORD *)(a1 + 88);
  uint64_t v12 = *(void *)(a1 + 104);
  sub_188D07F48(a1);
  sub_188DA4EA0(v90, v7, v8, v9, v10, v76);
  __int128 v42 = v76[1];
  __int128 v44 = v76[0];
  uint64_t v13 = v77;
  uint64_t v14 = v78;
  uint64_t v15 = v79;
  __int128 v40 = v80;
  uint64_t v16 = v81;
  unint64_t v17 = v82;
  uint64_t v18 = v83;
  sub_188D087F8(a1);
  *(_OWORD *)&v70[8] = v46;
  *(void *)__int128 v70 = v11;
  *(void *)&v70[24] = v12;
  __int128 v71 = v44;
  __int128 v72 = v42;
  *(void *)&__int128 v73 = v13;
  *((void *)&v73 + 1) = v14;
  *(_OWORD *)&v74[8] = v40;
  *(void *)__int128 v74 = v15;
  *(void *)&v74[24] = v16;
  *(void *)&__int128 v75 = v17;
  *((void *)&v75 + 1) = v18;
  unint64_t v19 = *(void *)(a2 + 48);
  uint64_t v20 = *(void *)(a2 + 56);
  unint64_t v21 = *(void *)(a2 + 64);
  uint64_t v22 = *(void *)(a2 + 72);
  unint64_t v23 = *(void *)(a2 + 80);
  __int128 v47 = *(_OWORD *)(a2 + 88);
  uint64_t v24 = *(void *)(a2 + 104);
  sub_188D07F48(a2);
  sub_188DA4EA0(v87, v19, v20, v21, v22, v84);
  __int128 v43 = v84[1];
  __int128 v45 = v84[0];
  __int128 v39 = v84[3];
  __int128 v41 = v84[2];
  __int128 v38 = v84[4];
  uint64_t v25 = v85;
  uint64_t v26 = v86;
  uint64_t result = sub_188D087F8(a2);
  *(_OWORD *)&v64[8] = v47;
  *(void *)__int128 v64 = v23;
  *(void *)&v64[24] = v24;
  __int128 v65 = v45;
  __int128 v66 = v43;
  __int128 v67 = v41;
  *(_OWORD *)__int128 v68 = v39;
  *(_OWORD *)&v68[16] = v38;
  int64_t v28 = v15 + (v17 >> 16);
  *(void *)&__int128 v69 = v25;
  *((void *)&v69 + 1) = v26;
  if (__OFADD__(v15, v17 >> 16))
  {
LABEL_29:
    __break(1u);
  }

  else
  {
    while (1)
    {
      if (v28 < (uint64_t)(v11 >> 11) && (*((void *)&v75 + 1) ^ v17) >= 0x4000)
      {
        __int128 v102 = v71;
        __int128 v103 = v72;
        __int128 v104 = v73;
        __int128 v106 = *(_OWORD *)&v74[8];
        uint64_t v105 = v15;
        uint64_t v107 = *(void *)&v74[24];
        unint64_t v108 = v17;
        uint64_t v109 = *((void *)&v75 + 1);
        sub_188DA4354();
        uint64_t v29 = v33;
        uint64_t v30 = v34;
        uint64_t result = sub_188DA48EC(v33, v34);
        if ((result & 1) == 0) {
          *(void *)&__int128 v75 = *((void *)&v75 + 1);
        }
      }

      else
      {
        uint64_t v29 = 0LL;
        uint64_t v30 = 0LL;
      }

      if ((uint64_t)(*(void *)v68 + ((unint64_t)v69 >> 16)) < (uint64_t)(v23 >> 11)
        && (*((void *)&v69 + 1) ^ (unint64_t)v69) >= 0x4000)
      {
        __int128 v95 = v65;
        __int128 v96 = v66;
        __int128 v97 = v67;
        __int128 v99 = *(_OWORD *)&v68[8];
        uint64_t v98 = *(void *)v68;
        uint64_t v100 = *(void *)&v68[24];
        __int128 v101 = v69;
        sub_188DA4354();
        uint64_t v31 = v35;
        uint64_t v32 = v36;
        if ((sub_188DA48EC(v35, v36) & 1) == 0) {
          *(void *)&__int128 v69 = *((void *)&v69 + 1);
        }
      }

      else
      {
        uint64_t v31 = 0LL;
        uint64_t v32 = 0LL;
      }

      if (!v30)
      {
        __int128 v52 = v67;
        __int128 v53 = *(_OWORD *)v68;
        __int128 v54 = *(_OWORD *)&v68[16];
        __int128 v55 = v69;
        __int128 v48 = *(_OWORD *)v64;
        __int128 v49 = *(_OWORD *)&v64[16];
        __int128 v50 = v65;
        __int128 v51 = v66;
        sub_188D08820((uint64_t)&v48);
        __int128 v60 = v73;
        __int128 v61 = *(_OWORD *)v74;
        __int128 v62 = *(_OWORD *)&v74[16];
        __int128 v63 = v75;
        __int128 v56 = *(_OWORD *)v70;
        __int128 v57 = *(_OWORD *)&v70[16];
        __int128 v58 = v71;
        __int128 v59 = v72;
        sub_188D08820((uint64_t)&v56);
        if (!v32) {
          return 0LL;
        }
        swift_bridgeObjectRelease();
        return 1LL;
      }

      if (!v32)
      {
        swift_bridgeObjectRelease();
        __int128 v52 = v67;
        __int128 v53 = *(_OWORD *)v68;
        __int128 v54 = *(_OWORD *)&v68[16];
        __int128 v55 = v69;
        __int128 v48 = *(_OWORD *)v64;
        __int128 v49 = *(_OWORD *)&v64[16];
        __int128 v50 = v65;
        __int128 v51 = v66;
        sub_188D08820((uint64_t)&v48);
        __int128 v60 = v73;
        __int128 v61 = *(_OWORD *)v74;
        __int128 v62 = *(_OWORD *)&v74[16];
        __int128 v63 = v75;
        __int128 v56 = *(_OWORD *)v70;
        __int128 v57 = *(_OWORD *)&v70[16];
        __int128 v58 = v71;
        __int128 v59 = v72;
        sub_188D08820((uint64_t)&v56);
        return 0LL;
      }

      if ((v29 != v31 || v30 != v32) && (sub_188DF8978() & 1) == 0)
      {
        char v37 = sub_188DF8978();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __int128 v52 = v67;
        __int128 v53 = *(_OWORD *)v68;
        __int128 v54 = *(_OWORD *)&v68[16];
        __int128 v55 = v69;
        __int128 v48 = *(_OWORD *)v64;
        __int128 v49 = *(_OWORD *)&v64[16];
        __int128 v50 = v65;
        __int128 v51 = v66;
        sub_188D08820((uint64_t)&v48);
        __int128 v60 = v73;
        __int128 v61 = *(_OWORD *)v74;
        __int128 v62 = *(_OWORD *)&v74[16];
        __int128 v63 = v75;
        __int128 v56 = *(_OWORD *)v70;
        __int128 v57 = *(_OWORD *)&v70[16];
        __int128 v58 = v71;
        __int128 v59 = v72;
        sub_188D08820((uint64_t)&v56);
        return v37 & 1;
      }

      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v15 = *(void *)v74;
      unint64_t v17 = v75;
      int64_t v28 = *(void *)v74 + ((unint64_t)v75 >> 16);
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_188D071D4(unint64_t *a1, uint64_t *a2, char a3, unsigned __int16 *a4, uint64_t a5)
{
  unint64_t v5 = *a4;
  unint64_t v6 = *a1;
  unint64_t v7 = (*a1 >> 8) & 0xF;
  if (v7 >= v5)
  {
    uint64_t v13 = 0LL;
  }

  else
  {
    uint64_t v8 = *a2;
    unint64_t v9 = (unsigned __int8 *)(a5 + 24 * ((*a1 >> 8) & 0xF) + 18);
    do
    {
      unsigned int v11 = *v9;
      v9 += 24;
      uint64_t v10 = v11;
      BOOL v12 = v8 < v11;
      if ((a3 & 1) != 0)
      {
        if (v12)
        {
LABEL_8:
          uint64_t v13 = 1LL;
          goto LABEL_11;
        }
      }

      else if (v12)
      {
        goto LABEL_8;
      }

      v8 -= v10;
      *a2 = v8;
      ++v7;
    }

    while (v5 != v7);
    uint64_t v13 = 0LL;
    unint64_t v7 = v5;
  }

uint64_t sub_188D07250(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, char a6)
{
  unint64_t v6 = (unint64_t *)(a3 + 8);
  unint64_t v7 = (*(void *)(a3 + 8) >> ((4 * *(_BYTE *)(a4 + 18) + 8) & 0x3C)) & 0xFLL;
  if (v7 >= *(unsigned __int16 *)(a4 + 16))
  {
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v19 = result;
  unint64_t v12 = *(unsigned __int16 *)result;
  uint64_t v13 = *(void *)(a2 + 40 * ((*(void *)(a3 + 8) >> ((4 * *(_BYTE *)(a4 + 18) + 8) & 0x3C)) & 0xFLL));
  if (*(_BYTE *)(v13 + 18))
  {
    swift_unknownObjectRetain();
    char v14 = sub_188D07250(v13 + 16, v13 + 24, a3, v13, a5, a6 & 1);
    swift_unknownObjectRelease();
    if ((v14 & 1) != 0) {
      return 1LL;
    }
  }

  else if ((sub_188D071D4(v6, a5, a6 & 1, (unsigned __int16 *)(v13 + 16), v13 + 24) & 1) != 0)
  {
LABEL_17:
    *(void *)(a3 + 16) = v13;
    return 1LL;
  }

  unint64_t v15 = v7 + 1;
  if (v7 + 1 >= v12) {
    return 0LL;
  }
  uint64_t v16 = *a5;
  unint64_t v17 = (uint64_t *)(a2 + 40LL * v7 + 56);
  while ((a6 & 1) != 0)
  {
    if (v16 <= *v17) {
      goto LABEL_12;
    }
LABEL_9:
    v16 -= *v17;
    *a5 = v16;
    ++v15;
    v17 += 5;
    if (v12 == v15) {
      return 0LL;
    }
  }

  if (v16 >= *v17) {
    goto LABEL_9;
  }
LABEL_12:
  *unint64_t v6 = (((-15LL << ((4 * *(_BYTE *)(v19 + 2) + 8) & 0x3C)) - 1) & *v6 | (v15 << ((4 * *(_BYTE *)(v19 + 2) + 8) & 0x3C))) & ((-256LL << ((4 * *(_BYTE *)(v19 + 2)) & 0x3C)) | 0xFF);
  uint64_t v13 = *(v17 - 2);
  if (!*(_BYTE *)(v13 + 18))
  {
    uint64_t result = sub_188D071D4(v6, a5, a6 & 1, (unsigned __int16 *)(v13 + 16), v13 + 24);
    if ((result & 1) == 0) {
      goto LABEL_20;
    }
    goto LABEL_17;
  }

  swift_unknownObjectRetain();
  char v18 = sub_188D07250(v13 + 16, v13 + 24, a3, v13, a5, a6 & 1);
  uint64_t result = swift_unknownObjectRelease();
  if ((v18 & 1) != 0) {
    return 1LL;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_188D07460(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, char a6)
{
  unint64_t v6 = (unint64_t *)(a3 + 8);
  unint64_t v7 = (*(void *)(a3 + 8) >> ((4 * *(_BYTE *)(a4 + 18) + 8) & 0x3C)) & 0xFLL;
  unint64_t v8 = *(unsigned __int16 *)(a4 + 16);
  if (v7 > v8)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v13 = result;
  if (v7 < v8)
  {
    uint64_t v14 = a2 + 40 * ((*(void *)(a3 + 8) >> ((4 * *(_BYTE *)(a4 + 18) + 8) & 0x3C)) & 0xFLL);
    __int128 v15 = *(_OWORD *)(v14 + 16);
    v24[0] = *(_OWORD *)v14;
    v24[1] = v15;
    uint64_t v25 = *(void *)(v14 + 32);
    swift_unknownObjectRetain();
    char v16 = sub_188D031D4(a3, a5, a6 & 1);
    uint64_t result = sub_188D087F8((uint64_t)v24);
    if ((v16 & 1) != 0) {
      return 1LL;
    }
  }

  if (!v7) {
    return 0LL;
  }
  uint64_t v17 = *a5;
  unint64_t v18 = v7 + 1;
  for (uint64_t i = (uint64_t *)(a2 + 40LL * v7 - 40); ; i -= 5)
  {
    uint64_t v20 = i[2];
    if ((a6 & 1) == 0) {
      break;
    }
    if (v17 < v20) {
      goto LABEL_13;
    }
LABEL_10:
    BOOL v21 = __OFSUB__(v17, v20);
    v17 -= v20;
    if (v21)
    {
      __break(1u);
      goto LABEL_22;
    }

    *a5 = v17;
    if (--v18 < 2) {
      return 0LL;
    }
  }

  if (v20 < v17) {
    goto LABEL_10;
  }
LABEL_13:
  *unint64_t v6 = (((-15LL << ((4 * *(_BYTE *)(v13 + 2) + 8) & 0x3C)) - 1) & *v6 | ((v18 - 2) << ((4 * *(_BYTE *)(v13 + 2) + 8) & 0x3C))) & ((-256LL << ((4 * *(_BYTE *)(v13 + 2)) & 0x3C)) | 0xFF);
  if (__OFSUB__(v20, *a5)) {
    goto LABEL_23;
  }
  *a5 = v20 - *a5;
  uint64_t v22 = *i;
  if (!*(_BYTE *)(*i + 18))
  {
    uint64_t result = sub_188D071D4(v6, a5, a6 & 1, (unsigned __int16 *)(v22 + 16), v22 + 24);
    if ((result & 1) == 0) {
      goto LABEL_24;
    }
    *(void *)(a3 + 16) = v22;
    return 1LL;
  }

  swift_unknownObjectRetain();
  char v23 = sub_188D07250(v22 + 16, v22 + 24, a3, v22, a5, a6 & 1);
  uint64_t result = swift_unknownObjectRelease();
  if ((v23 & 1) != 0) {
    return 1LL;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_188D07650(unint64_t *a1, uint64_t *a2, char a3, unsigned __int16 *a4, uint64_t a5)
{
  unint64_t v5 = *a4;
  unint64_t v6 = *a1;
  unint64_t v7 = (*a1 >> 8) & 0xF;
  if (v7 >= v5)
  {
    uint64_t v13 = 0LL;
  }

  else
  {
    uint64_t v8 = *a2;
    unint64_t v9 = (unsigned __int8 *)(a5 + 24 * ((*a1 >> 8) & 0xF) + 19);
    do
    {
      unsigned int v11 = *v9;
      v9 += 24;
      uint64_t v10 = v11;
      BOOL v12 = v8 < v11;
      if ((a3 & 1) != 0)
      {
        if (v12)
        {
LABEL_8:
          uint64_t v13 = 1LL;
          goto LABEL_11;
        }
      }

      else if (v12)
      {
        goto LABEL_8;
      }

      v8 -= v10;
      *a2 = v8;
      ++v7;
    }

    while (v5 != v7);
    uint64_t v13 = 0LL;
    unint64_t v7 = v5;
  }

uint64_t sub_188D076CC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, char a6)
{
  unint64_t v6 = (unint64_t *)(a3 + 8);
  unint64_t v7 = (*(void *)(a3 + 8) >> ((4 * *(_BYTE *)(a4 + 18) + 8) & 0x3C)) & 0xFLL;
  if (v7 >= *(unsigned __int16 *)(a4 + 16))
  {
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v19 = result;
  unint64_t v12 = *(unsigned __int16 *)result;
  uint64_t v13 = *(void *)(a2 + 40 * ((*(void *)(a3 + 8) >> ((4 * *(_BYTE *)(a4 + 18) + 8) & 0x3C)) & 0xFLL));
  if (*(_BYTE *)(v13 + 18))
  {
    swift_unknownObjectRetain();
    char v14 = sub_188D076CC(v13 + 16, v13 + 24, a3, v13, a5, a6 & 1);
    swift_unknownObjectRelease();
    if ((v14 & 1) != 0) {
      return 1LL;
    }
  }

  else if ((sub_188D07650(v6, a5, a6 & 1, (unsigned __int16 *)(v13 + 16), v13 + 24) & 1) != 0)
  {
LABEL_17:
    *(void *)(a3 + 16) = v13;
    return 1LL;
  }

  unint64_t v15 = v7 + 1;
  if (v7 + 1 >= v12) {
    return 0LL;
  }
  uint64_t v16 = *a5;
  uint64_t v17 = (uint64_t *)(a2 + 40LL * v7 + 48);
  while ((a6 & 1) != 0)
  {
    if (v16 <= *v17) {
      goto LABEL_12;
    }
LABEL_9:
    v16 -= *v17;
    *a5 = v16;
    ++v15;
    v17 += 5;
    if (v12 == v15) {
      return 0LL;
    }
  }

  if (v16 >= *v17) {
    goto LABEL_9;
  }
LABEL_12:
  *unint64_t v6 = (((-15LL << ((4 * *(_BYTE *)(v19 + 2) + 8) & 0x3C)) - 1) & *v6 | (v15 << ((4 * *(_BYTE *)(v19 + 2) + 8) & 0x3C))) & ((-256LL << ((4 * *(_BYTE *)(v19 + 2)) & 0x3C)) | 0xFF);
  uint64_t v13 = *(v17 - 1);
  if (!*(_BYTE *)(v13 + 18))
  {
    uint64_t result = sub_188D07650(v6, a5, a6 & 1, (unsigned __int16 *)(v13 + 16), v13 + 24);
    if ((result & 1) == 0) {
      goto LABEL_20;
    }
    goto LABEL_17;
  }

  swift_unknownObjectRetain();
  char v18 = sub_188D076CC(v13 + 16, v13 + 24, a3, v13, a5, a6 & 1);
  uint64_t result = swift_unknownObjectRelease();
  if ((v18 & 1) != 0) {
    return 1LL;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_188D078DC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, char a6)
{
  unint64_t v6 = (unint64_t *)(a3 + 8);
  unint64_t v7 = (*(void *)(a3 + 8) >> ((4 * *(_BYTE *)(a4 + 18) + 8) & 0x3C)) & 0xFLL;
  unint64_t v8 = *(unsigned __int16 *)(a4 + 16);
  if (v7 > v8)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v13 = result;
  if (v7 < v8)
  {
    uint64_t v14 = a2 + 40 * ((*(void *)(a3 + 8) >> ((4 * *(_BYTE *)(a4 + 18) + 8) & 0x3C)) & 0xFLL);
    __int128 v15 = *(_OWORD *)(v14 + 16);
    v24[0] = *(_OWORD *)v14;
    v24[1] = v15;
    uint64_t v25 = *(void *)(v14 + 32);
    swift_unknownObjectRetain();
    char v16 = sub_188D030B8(a3, a5, a6 & 1);
    uint64_t result = sub_188D087F8((uint64_t)v24);
    if ((v16 & 1) != 0) {
      return 1LL;
    }
  }

  if (!v7) {
    return 0LL;
  }
  uint64_t v17 = *a5;
  unint64_t v18 = v7 + 1;
  for (uint64_t i = (uint64_t *)(a2 + 40LL * v7 - 40); ; i -= 5)
  {
    uint64_t v20 = i[1];
    if ((a6 & 1) == 0) {
      break;
    }
    if (v17 < v20) {
      goto LABEL_13;
    }
LABEL_10:
    BOOL v21 = __OFSUB__(v17, v20);
    v17 -= v20;
    if (v21)
    {
      __break(1u);
      goto LABEL_22;
    }

    *a5 = v17;
    if (--v18 < 2) {
      return 0LL;
    }
  }

  if (v20 < v17) {
    goto LABEL_10;
  }
LABEL_13:
  *unint64_t v6 = (((-15LL << ((4 * *(_BYTE *)(v13 + 2) + 8) & 0x3C)) - 1) & *v6 | ((v18 - 2) << ((4 * *(_BYTE *)(v13 + 2) + 8) & 0x3C))) & ((-256LL << ((4 * *(_BYTE *)(v13 + 2)) & 0x3C)) | 0xFF);
  if (__OFSUB__(v20, *a5)) {
    goto LABEL_23;
  }
  *a5 = v20 - *a5;
  uint64_t v22 = *i;
  if (!*(_BYTE *)(*i + 18))
  {
    uint64_t result = sub_188D07650(v6, a5, a6 & 1, (unsigned __int16 *)(v22 + 16), v22 + 24);
    if ((result & 1) == 0) {
      goto LABEL_24;
    }
    *(void *)(a3 + 16) = v22;
    return 1LL;
  }

  swift_unknownObjectRetain();
  char v23 = sub_188D076CC(v22 + 16, v22 + 24, a3, v22, a5, a6 & 1);
  uint64_t result = swift_unknownObjectRelease();
  if ((v23 & 1) != 0) {
    return 1LL;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_188D07ACC(unint64_t *a1, uint64_t *a2, char a3, unsigned __int16 *a4, uint64_t a5)
{
  unint64_t v5 = *a4;
  unint64_t v6 = *a1;
  unint64_t v7 = (*a1 >> 8) & 0xF;
  if (v7 >= v5)
  {
    uint64_t v13 = 0LL;
  }

  else
  {
    uint64_t v8 = *a2;
    unint64_t v9 = (unsigned __int8 *)(a5 + 24 * ((*a1 >> 8) & 0xF) + 16);
    do
    {
      unsigned int v11 = *v9;
      v9 += 24;
      uint64_t v10 = v11;
      BOOL v12 = v8 < v11;
      if ((a3 & 1) != 0)
      {
        if (v12)
        {
LABEL_8:
          uint64_t v13 = 1LL;
          goto LABEL_11;
        }
      }

      else if (v12)
      {
        goto LABEL_8;
      }

      v8 -= v10;
      *a2 = v8;
      ++v7;
    }

    while (v5 != v7);
    uint64_t v13 = 0LL;
    unint64_t v7 = v5;
  }

uint64_t sub_188D07B48(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, char a6)
{
  unint64_t v6 = (unint64_t *)(a3 + 8);
  unint64_t v7 = (*(void *)(a3 + 8) >> ((4 * *(_BYTE *)(a4 + 18) + 8) & 0x3C)) & 0xFLL;
  if (v7 >= *(unsigned __int16 *)(a4 + 16))
  {
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v19 = result;
  unint64_t v12 = *(unsigned __int16 *)result;
  uint64_t v13 = *(void *)(a2 + 40 * ((*(void *)(a3 + 8) >> ((4 * *(_BYTE *)(a4 + 18) + 8) & 0x3C)) & 0xFLL));
  if (*(_BYTE *)(v13 + 18))
  {
    swift_unknownObjectRetain();
    char v14 = sub_188D07B48(v13 + 16, v13 + 24, a3, v13, a5, a6 & 1);
    swift_unknownObjectRelease();
    if ((v14 & 1) != 0) {
      return 1LL;
    }
  }

  else if ((sub_188D07ACC(v6, a5, a6 & 1, (unsigned __int16 *)(v13 + 16), v13 + 24) & 1) != 0)
  {
LABEL_17:
    *(void *)(a3 + 16) = v13;
    return 1LL;
  }

  unint64_t v15 = v7 + 1;
  if (v7 + 1 >= v12) {
    return 0LL;
  }
  uint64_t v16 = *a5;
  uint64_t v17 = (uint64_t *)(a2 + 40LL * v7 + 72);
  while ((a6 & 1) != 0)
  {
    if (v16 <= *v17) {
      goto LABEL_12;
    }
LABEL_9:
    v16 -= *v17;
    *a5 = v16;
    ++v15;
    v17 += 5;
    if (v12 == v15) {
      return 0LL;
    }
  }

  if (v16 >= *v17) {
    goto LABEL_9;
  }
LABEL_12:
  *unint64_t v6 = (((-15LL << ((4 * *(_BYTE *)(v19 + 2) + 8) & 0x3C)) - 1) & *v6 | (v15 << ((4 * *(_BYTE *)(v19 + 2) + 8) & 0x3C))) & ((-256LL << ((4 * *(_BYTE *)(v19 + 2)) & 0x3C)) | 0xFF);
  uint64_t v13 = *(v17 - 4);
  if (!*(_BYTE *)(v13 + 18))
  {
    uint64_t result = sub_188D07ACC(v6, a5, a6 & 1, (unsigned __int16 *)(v13 + 16), v13 + 24);
    if ((result & 1) == 0) {
      goto LABEL_20;
    }
    goto LABEL_17;
  }

  swift_unknownObjectRetain();
  char v18 = sub_188D07B48(v13 + 16, v13 + 24, a3, v13, a5, a6 & 1);
  uint64_t result = swift_unknownObjectRelease();
  if ((v18 & 1) != 0) {
    return 1LL;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_188D07D58(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, char a6)
{
  unint64_t v6 = (unint64_t *)(a3 + 8);
  unint64_t v7 = (*(void *)(a3 + 8) >> ((4 * *(_BYTE *)(a4 + 18) + 8) & 0x3C)) & 0xFLL;
  unint64_t v8 = *(unsigned __int16 *)(a4 + 16);
  if (v7 > v8)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v13 = result;
  if (v7 < v8)
  {
    uint64_t v14 = a2 + 40 * ((*(void *)(a3 + 8) >> ((4 * *(_BYTE *)(a4 + 18) + 8) & 0x3C)) & 0xFLL);
    __int128 v15 = *(_OWORD *)(v14 + 16);
    v24[0] = *(_OWORD *)v14;
    v24[1] = v15;
    uint64_t v25 = *(void *)(v14 + 32);
    swift_unknownObjectRetain();
    char v16 = sub_188D032F0(a3, a5, a6 & 1);
    uint64_t result = sub_188D087F8((uint64_t)v24);
    if ((v16 & 1) != 0) {
      return 1LL;
    }
  }

  if (!v7) {
    return 0LL;
  }
  uint64_t v17 = *a5;
  unint64_t v18 = v7 + 1;
  for (uint64_t i = (uint64_t *)(a2 + 40LL * v7 - 8); ; i -= 5)
  {
    uint64_t v20 = *i;
    if ((a6 & 1) == 0) {
      break;
    }
    if (v17 < v20) {
      goto LABEL_13;
    }
LABEL_10:
    BOOL v21 = __OFSUB__(v17, v20);
    v17 -= v20;
    if (v21)
    {
      __break(1u);
      goto LABEL_22;
    }

    *a5 = v17;
    if (--v18 < 2) {
      return 0LL;
    }
  }

  if (v20 < v17) {
    goto LABEL_10;
  }
LABEL_13:
  *unint64_t v6 = (((-15LL << ((4 * *(_BYTE *)(v13 + 2) + 8) & 0x3C)) - 1) & *v6 | ((v18 - 2) << ((4 * *(_BYTE *)(v13 + 2) + 8) & 0x3C))) & ((-256LL << ((4 * *(_BYTE *)(v13 + 2)) & 0x3C)) | 0xFF);
  if (__OFSUB__(v20, *a5)) {
    goto LABEL_23;
  }
  *a5 = v20 - *a5;
  uint64_t v22 = *(i - 4);
  if (!*(_BYTE *)(v22 + 18))
  {
    uint64_t result = sub_188D07ACC(v6, a5, a6 & 1, (unsigned __int16 *)(v22 + 16), v22 + 24);
    if ((result & 1) == 0) {
      goto LABEL_24;
    }
    *(void *)(a3 + 16) = v22;
    return 1LL;
  }

  swift_unknownObjectRetain();
  char v23 = sub_188D07B48(v22 + 16, v22 + 24, a3, v22, a5, a6 & 1);
  uint64_t result = swift_unknownObjectRelease();
  if ((v23 & 1) != 0) {
    return 1LL;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_188D07F48(uint64_t a1)
{
  return a1;
}

uint64_t sub_188D07F70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = sub_188D9328C(a1, a2, &v44);
  uint64_t v7 = *((void *)&v44 + 1);
  uint64_t v8 = v44;
  __int128 v47 = v44;
  __int128 v48 = v45;
  __int128 v49 = v46;
  uint64_t v9 = v44;
  uint64_t v10 = v46;
  uint64_t v42 = *((void *)&v45 + 1);
  uint64_t v43 = v45;
  uint64_t v40 = *((void *)&v46 + 1);
  uint64_t v41 = v46;
  if (!(void)v44)
  {
    uint64_t v39 = *((void *)&v49 + 1);
LABEL_10:
    swift_unknownObjectRetain();
    unint64_t v12 = sub_188D36DF0();
    LOBYTE(v13) = 0;
    uint64_t v14 = 0LL;
    goto LABEL_39;
  }

  if ((v46 & 0x8000000000000000LL) != 0)
  {
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    return result;
  }

  uint64_t v39 = *((void *)&v49 + 1);
  if (*(_WORD *)(v44 + 16)) {
    BOOL v11 = (void)v46 == 0LL;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    goto LABEL_10;
  }
  uint64_t v15 = *(unsigned __int8 *)(v44 + 18);
  if (*(_BYTE *)(v44 + 18))
  {
    uint64_t v38 = v44;
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v13 = 0LL;
    uint64_t v16 = v9;
    do
    {
      uint64_t v17 = *(unsigned __int16 *)(v16 + 16);
      if (*(_WORD *)(v16 + 16))
      {
        uint64_t v19 = 0LL;
        uint64_t v20 = (uint64_t *)(v16 + 56);
        while (1)
        {
          uint64_t v21 = *v20;
          v20 += 5;
          uint64_t v22 = v13 - v21;
          if (__OFSUB__(v13, v21)) {
            break;
          }
          if (__OFADD__(v22, 1LL)) {
            goto LABEL_44;
          }
          if (v22 + 1 < 1)
          {
            uint64_t v17 = v19;
            goto LABEL_14;
          }

          ++v19;
          uint64_t v13 = v22;
          if (v17 == v19) {
            goto LABEL_23;
          }
        }

        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }

      uint64_t v22 = v13;
LABEL_23:
      if (v22) {
        goto LABEL_45;
      }
      uint64_t v13 = 0LL;
LABEL_14:
      char v18 = (4 * *(_BYTE *)(v16 + 18) + 8) & 0x3C;
      uint64_t v15 = ((-15LL << v18) - 1) & v15 | (v17 << v18);
      uint64_t v14 = *(void *)(v16 + 24 + 40 * v17);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v16 = v14;
    }

    while (*(_BYTE *)(v14 + 18));
    unint64_t v23 = v15 & 0xFFFFFFFFFFFFF0FFLL;
    uint64_t v8 = v38;
    uint64_t v24 = *(unsigned __int16 *)(v14 + 16);
    if (!*(_WORD *)(v14 + 16)) {
      goto LABEL_33;
    }
    goto LABEL_26;
  }

  uint64_t result = swift_unknownObjectRetain_n();
  unint64_t v23 = 0LL;
  uint64_t v13 = 0LL;
  uint64_t v14 = v9;
  uint64_t v24 = *(unsigned __int16 *)(v9 + 16);
  if (*(_WORD *)(v9 + 16))
  {
LABEL_26:
    uint64_t v25 = 0LL;
    uint64_t v26 = (unsigned __int8 *)(v14 + 40);
    while (1)
    {
      unsigned int v27 = *v26;
      v26 += 24;
      uint64_t v28 = v13 - v27;
      if (__OFSUB__(v13, v27)) {
        break;
      }
      if (__OFADD__(v28, 1LL)) {
        goto LABEL_47;
      }
      if (v28 + 1 < 1)
      {
        uint64_t v24 = v25;
        goto LABEL_37;
      }

      ++v25;
      uint64_t v13 = v28;
      if (v24 == v25) {
        goto LABEL_34;
      }
    }

LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }

    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
      }

      swift_unknownObjectRetain();
      __int128 v51 = sub_188D83DAC((_WORD *)(v50 + 16), v50 + 24, a3);
      swift_unknownObjectRelease();
      if ((v51 & 1) == 0) {
        return 0LL;
      }
LABEL_45:
      uint64_t v26 = __OFADD__(v49++, 1LL);
      if (v26) {
        goto LABEL_55;
      }
      goto LABEL_46;
    }

    *a2 = v20;
    return (unint64_t *)(((v15 >> 55) & 0x100 | v21) ^ 0x100);
  }

  return result;
}

  if ((v16 & 0x1000000000000000LL) == 0)
  {
    sub_188DDD440();
    swift_bridgeObjectRelease();
  }

                  __int128 v72 = v65 + 1;
                  if (v65 + 1 < (unint64_t)*(unsigned __int16 *)(v63 + 16))
                  {
                    __int128 v73 = (__int128 *)(v69 + 40LL * v72);
                    __int128 v75 = *v73;
                    __int128 v74 = v73[1];
                    uint64_t v126 = *((void *)v73 + 4);
                    v125[0] = v75;
                    v125[1] = v74;
                    uint64_t result = v75;
                    __int128 v76 = *(unsigned __int8 *)(v75 + 18) + 1;
                    __int128 v53 = v101;
                    if (((v76 >> 8) & 1) != 0) {
                      goto LABEL_80;
                    }
                    uint64_t v115 = ((-256LL << (4 * (v76 & 0xF))) | 0xFF) & (v115 & ((-15LL << v102) - 1) | (v72 << v102));
                    __int128 v50 = v115;
                    swift_unknownObjectRetain();
                    uint64_t v77 = sub_188D7F6E0(v50);
                    sub_188D087F8((uint64_t)v125);
                    uint64_t v116 = v77;
                    goto LABEL_49;
                  }

                  swift_unknownObjectRelease();
                  __int128 v53 = v101;
                  __int128 v60 = v110;
LABEL_51:
                  uint64_t v78 = v62 + 1;
                  if (v62 + 1 < (unint64_t)*(unsigned __int16 *)(v60 + 16))
                  {
                    uint64_t v10 = v105;
                    uint64_t v79 = (__int128 *)(v104 + 40LL * v78);
                    uint64_t v81 = *v79;
                    __int128 v80 = v79[1];
                    uint64_t v124 = *((void *)v79 + 4);
                    v123[0] = v81;
                    v123[1] = v80;
                    uint64_t result = v81;
                    unint64_t v82 = *(unsigned __int8 *)(v81 + 18) + 1;
                    if (((v82 >> 8) & 1) != 0) {
                      goto LABEL_79;
                    }
                    uint64_t v115 = ((-256LL << (4 * (v82 & 0xF))) | 0xFF) & (v115 & ((-15LL << v103) - 1) | (v78 << v103));
                    __int128 v50 = v115;
                    swift_unknownObjectRetain();
                    uint64_t v83 = sub_188D7F6E0(v50);
                    sub_188D087F8((uint64_t)v123);
                    uint64_t v116 = v83;
                    goto LABEL_54;
                  }

                  swift_unknownObjectRelease();
                  uint64_t v10 = v105;
LABEL_56:
                  uint64_t v84 = v59 + 1;
                  if (v59 + 1 >= (unint64_t)*(unsigned __int16 *)(v28 + 16))
                  {
                    sub_188D087F8(v53);
LABEL_62:
                    __int128 v90 = *(unsigned __int8 *)(v28 + 18);
                    __int128 v91 = *(unsigned __int16 *)(v28 + 16);
                    swift_unknownObjectRetain();
                    sub_188D087F8(v53);
                    uint64_t result = sub_188D087F8(v53);
                    __int128 v50 = ((-15LL << ((4 * v90 + 8) & 0x3C)) - 1) & v90 | (unint64_t)(v91 << ((4 * v90 + 8) & 0x3C));
                    unint64_t v114 = v10;
                    uint64_t v115 = v50;
                    uint64_t v116 = 0LL;
                    goto LABEL_63;
                  }

                  uint64_t v85 = v111 + 40LL * v84;
                  uint64_t v87 = *(_OWORD *)v85;
                  uint64_t v86 = *(_OWORD *)(v85 + 16);
                  uint64_t v122 = *(void *)(v85 + 32);
                  v121[0] = v87;
                  v121[1] = v86;
                  uint64_t result = v87;
                  __int128 v88 = *(unsigned __int8 *)(v87 + 18) + 1;
                  if (((v88 >> 8) & 1) != 0) {
                    goto LABEL_78;
                  }
                  uint64_t v115 = ((-256LL << (4 * (v88 & 0xF))) | 0xFF) & (v115 & ((-15LL << v58) - 1) | (v84 << v58));
                  __int128 v50 = v115;
                  swift_unknownObjectRetain();
                  uint64_t v89 = sub_188D7F6E0(v50);
                  sub_188D087F8((uint64_t)v121);
                  uint64_t v116 = v89;
                  goto LABEL_59;
                }

                __int128 v71 = ((v50 >> v68) & 0xF) + 1;
                if (v71 >= *(unsigned __int16 *)(v66 + 16))
                {
                  __int128 v69 = v63 + 24;
                  __int128 v102 = v64;
                  __int128 v103 = v61;
                  sub_188D07F48(v53);
                  swift_unknownObjectRetain();
                  swift_unknownObjectRetain();
                  goto LABEL_46;
                }

                __int128 v50 = (v71 << v68) | ((-15LL << v68) - 1) & v50;
                uint64_t v115 = v50;
                uint64_t v116 = v66;
                sub_188D07F48(v53);
                swift_unknownObjectRetain();
                swift_unknownObjectRetain();
LABEL_49:
                swift_unknownObjectRelease();
                uint64_t v10 = v105;
              }

              else
              {
                if (v65 + 1 >= (unint64_t)*(unsigned __int16 *)(v63 + 16))
                {
                  __int128 v103 = (4 * *(_BYTE *)(v60 + 18) + 8) & 0x3C;
                  __int128 v104 = v60 + 24;
                  sub_188D07F48(v53);
                  swift_unknownObjectRetain();
                  goto LABEL_51;
                }

                __int128 v50 = ((v65 + 1) << v64) | ((-15LL << v64) - 1) & v50;
                uint64_t v115 = v50;
                uint64_t v116 = v63;
                sub_188D07F48(v53);
                swift_unknownObjectRetain();
                uint64_t v10 = v105;
              }

  __break(1u);
  return result;
}

LABEL_33:
  uint64_t v28 = v13;
LABEL_34:
  if (v28) {
    goto LABEL_50;
  }
  uint64_t v13 = 0LL;
LABEL_37:
  uint64_t result = swift_unknownObjectRelease();
  if (v13 < 0) {
    goto LABEL_48;
  }
  unint64_t v12 = v23 | (v24 << 8);
LABEL_39:
  if (v9) {
    unint64_t v29 = (v10 << 11) | 0x300;
  }
  else {
    unint64_t v29 = 768LL;
  }
  uint64_t v30 = v13 | 0x300LL;
  unint64_t v31 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v29, 0LL, 0LL, 1LL);
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t result = sub_188D087F8((uint64_t)&v44);
  *a3 = v8;
  a3[1] = v7;
  a3[2] = v43;
  a3[3] = v42;
  a3[4] = v41;
  a3[5] = v40;
  a3[6] = v30;
  a3[7] = v39;
  a3[8] = v12;
  a3[9] = v14;
  a3[10] = v31;
  a3[11] = v33;
  a3[12] = v35;
  a3[13] = v37;
  return result;
}

  uint64_t v25 = v10;
LABEL_34:
  if (v25) {
    goto LABEL_50;
  }
  uint64_t v10 = 0LL;
LABEL_37:
  uint64_t result = swift_unknownObjectRelease();
  if (v10 < 0) {
    goto LABEL_48;
  }
  uint64_t v9 = v20 | (v21 << 8);
LABEL_39:
  if (v6) {
    uint64_t v26 = (v7 << 11) | 0x300;
  }
  else {
    uint64_t v26 = 768LL;
  }
  unsigned int v27 = v10 | 0x300LL;
  uint64_t v28 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v26, 0LL, 0LL, 1LL);
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t result = sub_188D087F8(v2);
  *a2 = v4;
  a2[1] = v40;
  a2[2] = v39;
  a2[3] = v38;
  a2[4] = v37;
  a2[5] = v36;
  a2[6] = v27;
  a2[7] = v35;
  a2[8] = v9;
  a2[9] = v11;
  a2[10] = v28;
  a2[11] = v30;
  a2[12] = v32;
  a2[13] = v34;
  return result;
}

    if (v6)
    {
      if (*(void *)(result + 32 + 8 * v6 - 8))
      {
        uint64_t v42 = v6;
LABEL_48:
        *(void *)(result + 16) = v42;
        return result;
      }

      __int128 v48 = v6;
      while (1)
      {
        uint64_t v42 = v48 - 1;
        if (v48 - 1 < 1) {
          break;
        }
        if (*(void *)(result + 16 + 8 * v48--))
        {
          if (v6 >= v42) {
            goto LABEL_48;
          }
          __break(1u);
          break;
        }
      }
    }

    uint64_t v42 = 0LL;
    goto LABEL_48;
  }

  __break(1u);
  return result;
}

    swift_bridgeObjectRelease();
    return;
  }

  unint64_t v29 = 0LL;
  uint64_t v30 = 0LL;
  unint64_t v31 = 0LL;
  uint64_t v32 = __OFADD__(depth, 1LL);
  uint64_t v34 = v32;
  while (1)
  {
    sub_188DF7FA0();
    sub_188DF7EE0();
    swift_bridgeObjectRelease();
    if ((*v8 & (1 << v31)) == 0) {
      break;
    }
    uint64_t v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_188DF9DB0;
    swift_bridgeObjectRetain();
    sub_188DF7EE0();
    sub_188DF7EE0();
    swift_bridgeObjectRelease();
    sub_188DF7EE0();
    sub_188D27620(v30, (uint64_t)v8, v42, v43, v44, v45);
    sub_188DF7EE0();
    swift_bridgeObjectRelease();
    *(void *)(v33 + 56) = MEMORY[0x189617FA8];
    *(Swift::String *)(v33 + 32) = restPrefix;
    sub_188DF8A2C();
    swift_bridgeObjectRelease();
    uint64_t v30 = (v30 + 1);
LABEL_39:
    ++v31;
    uint64_t v8 = v41;
    if (v31 == 32) {
      goto LABEL_33;
    }
  }

  if ((v8[1] & (1 << v31)) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_39;
  }

  _HashNode.UnsafeHandle.subscript.unsafeAddressor(v29, v8, v42, v43, v44, v45);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_188DF7EE0();
  sub_188DF7EE0();
  swift_bridgeObjectRelease();
  sub_188DF7EE0();
  swift_bridgeObjectRetain();
  sub_188DF7EE0();
  if (!v34)
  {
    _HashNode.dump(iterationOrder:limit:firstPrefix:restPrefix:depth:)(0, limita, restPrefix, restPrefix, depth + 1);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v29 = (v29 + 1);
    uint64_t v30 = v30;
    goto LABEL_39;
  }

  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
}

    uint64_t v21 = 0;
    goto LABEL_34;
  }

  uint64_t v13 = a3;
  uint64_t v38 = (unsigned int *)result;
  uint64_t v14 = (unint64_t)*a4 >> a3;
  uint64_t v15 = (uint64_t *)(a2 + 16 * (v14 & 0x1F));
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  char v18 = (a3 + 5);
  uint64_t v19 = *v15 + 16;
  uint64_t v20 = *v15 + 32;
  swift_retain();
  sub_188D71A34(v40, v19, v20, v18, a4, a5, v16, v17);
  uint64_t result = swift_release();
  if ((v40[0] & 1) != 0)
  {
    uint64_t v21 = 1;
    BOOL v11 = a7;
LABEL_34:
    *BOOL v11 = v21;
    return result;
  }

  uint64_t v22 = v14 & 0x1F;
  if (*((unsigned __int8 *)a4 + 20) != v13)
  {
    *((_BYTE *)a4 + 20) = v13;
    a4[1] = a6;
    unsigned int v27 = *a4;
    *((_DWORD *)a4 + 4) = ((unint64_t)*a4 >> (v13 & 0x3F)) & 0x1F;
    uint64_t v10 = v38;
    BOOL v11 = a7;
    uint64_t v9 = a2;
    if (v13 <= 0x3Fu) {
      *a4 = v27 & ~(-1LL << (v13 & 0x3F));
    }
    *((_BYTE *)a4 + 21) = 0;
    uint64_t v25 = *a5;
    if (v22) {
      goto LABEL_17;
    }
    goto LABEL_27;
  }

  uint64_t v10 = v38;
  BOOL v11 = a7;
  uint64_t v9 = a2;
  uint64_t v25 = *a5;
  if (!v22) {
    goto LABEL_27;
  }
LABEL_17:
  uint64_t v28 = (v22 - 1);
  unint64_t v29 = *(void *)(v9 + 16LL * v28 + 8);
  if (__OFADD__(v29, v25))
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }

  if (v29 + v25 < 0)
  {
    uint64_t v30 = (void *)(v9 + 16 * v28 - 8);
    while (1)
    {
      unint64_t v31 = __OFADD__(v25, v29);
      v25 += v29;
      if (v31) {
        break;
      }
      *a5 = v25;
      if (!v28) {
        goto LABEL_27;
      }
      unint64_t v29 = *v30;
      uint64_t v32 = *v30 + v25;
      if (__OFADD__(*v30, v25)) {
        goto LABEL_36;
      }
      v30 -= 2;
      --v28;
      if ((v32 & 0x8000000000000000LL) == 0) {
        goto LABEL_24;
      }
    }

    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

    if (v6)
    {
      if (*(void *)(result + 32 + 8 * v6 - 8))
      {
        uint64_t v42 = v6;
LABEL_48:
        *(void *)(result + 16) = v42;
        return result;
      }

      __int128 v48 = v6;
      while (1)
      {
        uint64_t v42 = v48 - 1;
        if (v48 - 1 < 1) {
          break;
        }
        if (*(void *)(result + 16 + 8 * v48--))
        {
          if (v6 >= v42) {
            goto LABEL_48;
          }
          __break(1u);
          break;
        }
      }
    }

    uint64_t v42 = 0LL;
    goto LABEL_48;
  }

  __break(1u);
  return result;
}

  __break(1u);
}

uint64_t sub_188D08238@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result;
  uint64_t v4 = *(void *)result;
  __int128 v5 = *(_OWORD *)(result + 32);
  __int128 v41 = *(_OWORD *)result;
  uint64_t v6 = *(void *)result;
  uint64_t v7 = *(void *)(result + 32);
  uint64_t v39 = *(void *)(result + 16);
  uint64_t v40 = *(void *)(result + 8);
  uint64_t v37 = v7;
  uint64_t v38 = *(void *)(result + 24);
  uint64_t v36 = *(void *)(result + 40);
  if (!*(void *)result)
  {
    uint64_t v35 = *((void *)&v5 + 1);
LABEL_10:
    sub_188D07F48(result);
    swift_unknownObjectRetain();
    unint64_t v9 = sub_188D36DF0();
    LOBYTE(sub_188D08238((uint64_t)v9, v10) = 0;
    uint64_t v11 = 0LL;
    goto LABEL_39;
  }

  if ((v5 & 0x8000000000000000LL) != 0)
  {
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    return result;
  }

  uint64_t v35 = *((void *)&v5 + 1);
  if (*(_WORD *)(v41 + 16)) {
    BOOL v8 = (void)v5 == 0LL;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8) {
    goto LABEL_10;
  }
  uint64_t v12 = *(unsigned __int8 *)(v41 + 18);
  if (*(_BYTE *)(v41 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v10 = 0LL;
    uint64_t v13 = v6;
    do
    {
      uint64_t v14 = *(unsigned __int16 *)(v13 + 16);
      if (*(_WORD *)(v13 + 16))
      {
        uint64_t v16 = 0LL;
        uint64_t v17 = (uint64_t *)(v13 + 56);
        while (1)
        {
          uint64_t v18 = *v17;
          v17 += 5;
          uint64_t v19 = v10 - v18;
          if (__OFSUB__(v10, v18)) {
            break;
          }
          if (__OFADD__(v19, 1LL)) {
            goto LABEL_44;
          }
          if (v19 + 1 < 1)
          {
            uint64_t v14 = v16;
            goto LABEL_14;
          }

          ++v16;
          uint64_t v10 = v19;
          if (v14 == v16) {
            goto LABEL_23;
          }
        }

        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }

      uint64_t v19 = v10;
LABEL_23:
      if (v19) {
        goto LABEL_45;
      }
      uint64_t v10 = 0LL;
LABEL_14:
      char v15 = (4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C;
      uint64_t v12 = ((-15LL << v15) - 1) & v12 | (v14 << v15);
      uint64_t v11 = *(void *)(v13 + 24 + 40 * v14);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v13 = v11;
    }

    while (*(_BYTE *)(v11 + 18));
    unint64_t v20 = v12 & 0xFFFFFFFFFFFFF0FFLL;
    uint64_t v21 = *(unsigned __int16 *)(v11 + 16);
    if (!*(_WORD *)(v11 + 16)) {
      goto LABEL_33;
    }
    goto LABEL_26;
  }

  uint64_t result = swift_unknownObjectRetain_n();
  unint64_t v20 = 0LL;
  uint64_t v10 = 0LL;
  uint64_t v11 = v6;
  uint64_t v21 = *(unsigned __int16 *)(v6 + 16);
  if (*(_WORD *)(v6 + 16))
  {
LABEL_26:
    uint64_t v22 = 0LL;
    unint64_t v23 = (unsigned __int8 *)(v11 + 40);
    while (1)
    {
      unsigned int v24 = *v23;
      v23 += 24;
      uint64_t v25 = v10 - v24;
      if (__OFSUB__(v10, v24)) {
        break;
      }
      if (__OFADD__(v25, 1LL)) {
        goto LABEL_47;
      }
      if (v25 + 1 < 1)
      {
        uint64_t v21 = v22;
        goto LABEL_37;
      }

      ++v22;
      uint64_t v10 = v25;
      if (v21 == v22) {
        goto LABEL_34;
      }
    }

void sub_188D084F8(uint64_t a1@<X0>, ValueMetadata *a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v7 + 16))(v6);
  BigString.init<A>(_:)((uint64_t)v6, a2, &v48);
  unint64_t v8 = v48.n128_u64[1];
  unint64_t v9 = v48.n128_u64[0];
  __n128 v51 = v48;
  __int128 v52 = v49;
  __int128 v53 = v50;
  unint64_t v10 = v48.n128_u64[0];
  uint64_t v11 = v50;
  unint64_t v46 = *((void *)&v49 + 1);
  unint64_t v47 = v49;
  unint64_t v44 = *((void *)&v50 + 1);
  unint64_t v45 = v50;
  if (!v48.n128_u64[0])
  {
    unint64_t v43 = *((void *)&v53 + 1);
LABEL_20:
    swift_unknownObjectRetain();
    unint64_t v23 = sub_188D36DF0();
    LOBYTE(v14) = 0;
    unint64_t v18 = 0LL;
    goto LABEL_35;
  }

  if ((v50 & 0x8000000000000000LL) != 0)
  {
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    return;
  }

  int v12 = *(unsigned __int16 *)(v48.n128_u64[0] + 16);
  unint64_t v43 = *((void *)&v53 + 1);
  if (!v12 || !(void)v50) {
    goto LABEL_20;
  }
  uint64_t v13 = *(unsigned __int8 *)(v48.n128_u64[0] + 18);
  if (*(_BYTE *)(v48.n128_u64[0] + 18))
  {
    unint64_t v42 = v48.n128_u64[0];
    swift_unknownObjectRetain_n();
    uint64_t v14 = 0LL;
    unint64_t v15 = v10;
    do
    {
      uint64_t v16 = *(unsigned __int16 *)(v15 + 16);
      if (*(_WORD *)(v15 + 16))
      {
        uint64_t v19 = 0LL;
        unint64_t v20 = (uint64_t *)(v15 + 56);
        while (1)
        {
          uint64_t v21 = *v20;
          v20 += 5;
          uint64_t v22 = v14 - v21;
          if (__OFSUB__(v14, v21)) {
            break;
          }
          if (__OFADD__(v22, 1LL)) {
            goto LABEL_40;
          }
          if (v22 + 1 < 1)
          {
            uint64_t v16 = v19;
            goto LABEL_8;
          }

          ++v19;
          uint64_t v14 = v22;
          if (v16 == v19) {
            goto LABEL_17;
          }
        }

        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }

      uint64_t v22 = v14;
LABEL_17:
      if (v22) {
        goto LABEL_41;
      }
      uint64_t v14 = 0LL;
LABEL_8:
      char v17 = (4 * *(_BYTE *)(v15 + 18) + 8) & 0x3C;
      uint64_t v13 = ((-15LL << v17) - 1) & v13 | (v16 << v17);
      unint64_t v18 = *(void *)(v15 + 24 + 40 * v16);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      unint64_t v15 = v18;
    }

    while (*(_BYTE *)(v18 + 18));
    unint64_t v24 = v13 & 0xFFFFFFFFFFFFF0FFLL;
    unint64_t v9 = v42;
    uint64_t v25 = *(unsigned __int16 *)(v18 + 16);
    if (!*(_WORD *)(v18 + 16)) {
      goto LABEL_29;
    }
    goto LABEL_22;
  }

  swift_unknownObjectRetain_n();
  unint64_t v24 = 0LL;
  uint64_t v14 = 0LL;
  unint64_t v18 = v10;
  uint64_t v25 = *(unsigned __int16 *)(v10 + 16);
  if (*(_WORD *)(v10 + 16))
  {
LABEL_22:
    uint64_t v26 = 0LL;
    uint64_t v27 = (unsigned __int8 *)(v18 + 40);
    while (1)
    {
      unsigned int v28 = *v27;
      v27 += 24;
      uint64_t v29 = v14 - v28;
      if (__OFSUB__(v14, v28)) {
        break;
      }
      if (__OFADD__(v29, 1LL)) {
        goto LABEL_43;
      }
      if (v29 + 1 < 1)
      {
        uint64_t v25 = v26;
        goto LABEL_33;
      }

      ++v26;
      uint64_t v14 = v29;
      if (v25 == v26) {
        goto LABEL_30;
      }
    }

LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }

  __break(1u);
  return result;
}

    __break(1u);
  }

  return result;
}

            __break(1u);
            return (Swift::UInt8_optional)v24;
          }

    uint64_t v81 = v4;
    uint64_t v4 = (v9 >> 11) - v28;
    if (v7 > *(unsigned __int8 *)(v13 + 18))
    {
      __int128 v74 = (uint64_t *)&v95;
      __int128 v75 = v13 + 24;
      while (1)
      {
        uint64_t v85 = v4;
        uint64_t v4 = *(unsigned __int8 *)(v13 + 18);
        swift_unknownObjectRetain();
        if (v7 <= v4) {
          goto LABEL_95;
        }
        if (v8)
        {
          unint64_t v40 = (4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C;
          if (((v7 >> v40) & 0xF) != 0)
          {
            uint64_t v7 = ((((v7 >> v40) & 0xF) - 1) << v40) | ((-15LL << v40) - 1) & v7;
            __int128 v95 = v7;
            sub_188D087F8(v6);
            uint64_t v4 = v81;
            goto LABEL_75;
          }
        }

        uint64_t v4 = (4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C;
        uint64_t v5 = (v7 >> v4) & 0xF;
        if (*(_BYTE *)(v13 + 18)) {
          break;
        }
        if (!v5) {
          goto LABEL_87;
        }
        uint64_t v7 = ((v5 - 1) << v4) | ((-15LL << v4) - 1) & v7;
        __int128 v95 = v7;
        sub_188D087F8(v6);
        __int128 v96 = v13;
        unint64_t v8 = v13;
        uint64_t v4 = v81;
LABEL_76:
        if (v94 != v4) {
          goto LABEL_96;
        }
        if (v8)
        {
          __int128 v57 = v8 + 24 * ((v7 >> ((4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C)) & 0xF);
          __int128 v58 = *(void *)(v57 + 32);
          uint64_t v84 = *(void *)(v57 + 24);
          __int128 v59 = *(unsigned __int8 *)(v57 + 40);
          uint64_t v83 = *(unsigned __int8 *)(v57 + 41);
          uint64_t v11 = *(unsigned __int8 *)(v57 + 42);
          LODWORD(v82) = *(unsigned __int8 *)(v57 + 43);
          unint64_t v10 = *(unsigned __int8 *)(v57 + 44);
          unint64_t v9 = *(unsigned __int8 *)(v57 + 45);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v86 = v58;
        }

        else
        {
          v97[0] = v13;
          v97[1] = v79;
          v97[2] = v78;
          v97[3] = v77;
          v97[4] = v76;
          swift_unknownObjectRetain();
          uint64_t v5 = (unint64_t)v97;
          sub_188D36E50(v7, (uint64_t)v87);
          sub_188D087F8(v6);
          swift_bridgeObjectRelease();
          uint64_t v84 = v87[0];
          uint64_t v86 = v87[1];
          __int128 v59 = v88;
          uint64_t v83 = v89;
          uint64_t v11 = v90;
          LODWORD(v82) = v91;
          unint64_t v10 = v92;
          unint64_t v9 = v93;
        }

        __int128 v60 = v59;
        uint64_t v4 = v85 - v59;
        if (__OFSUB__(v85, v60)) {
          goto LABEL_97;
        }
        if (v10 < v60)
        {
          LODWORD(v5) = v11;
          uint64_t v27 = v9;
          goto LABEL_90;
        }

        LODWORD(v5) = v11;
        uint64_t v27 = v9;
      }

      if (v5 < *(unsigned __int16 *)(v13 + 16))
      {
        unint64_t v8 = *(void *)(v75 + 40 * ((v7 >> v4) & 0xF));
        unint64_t v41 = (4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C;
        unint64_t v10 = (v7 >> v41) & 0xF;
        if (*(_BYTE *)(v8 + 18))
        {
          uint64_t v11 = v8 + 24;
          if (v10 < *(unsigned __int16 *)(v8 + 16))
          {
            unint64_t v9 = *(void *)(v11 + 40 * ((v7 >> v41) & 0xF));
            unint64_t v42 = (4 * *(_BYTE *)(v9 + 18) + 8) & 0x3C;
            unint64_t v43 = (v7 >> v42) & 0xF;
            if (*(_BYTE *)(v9 + 18))
            {
              if (v43 < *(unsigned __int16 *)(v9 + 16))
              {
                unint64_t v44 = *(void *)(v9 + 24 + 40 * ((v7 >> v42) & 0xF));
                unint64_t v45 = *(unsigned __int8 *)(v44 + 18);
                unint64_t v46 = (4 * v45 + 8) & 0x3C;
                unint64_t v47 = (v7 >> v46) & 0xF;
                v87[0] = v47;
                if (v45)
                {
                  unint64_t v82 = v9 + 24;
                  uint64_t v83 = v42;
                  uint64_t v84 = (v7 >> v42) & 0xF;
                  __int128 v71 = v44 + 24;
                  __int128 v73 = (unsigned __int16 *)(v44 + 16);
                  __int128 v70 = v45;
                  sub_188D07F48(v6);
                  swift_unknownObjectRetain();
                  swift_unknownObjectRetain();
                  swift_unknownObjectRetain();
                  LOBYTE(v73) = sub_188DF1114(v73, v71, v87, (uint64_t)&v94, v70);
                  swift_unknownObjectRelease();
                  if ((v73 & 1) != 0)
                  {
LABEL_72:
                    swift_unknownObjectRelease();
LABEL_73:
                    swift_unknownObjectRelease();
LABEL_74:
                    uint64_t v4 = v81;
                    sub_188D087F8(v6);
                    sub_188D087F8(v6);
                    uint64_t v7 = v95;
LABEL_75:
                    unint64_t v8 = v96;
                    goto LABEL_76;
                  }

        __break(1u);
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }

LABEL_29:
  uint64_t v29 = v14;
LABEL_30:
  if (v29) {
    goto LABEL_46;
  }
  uint64_t v14 = 0LL;
LABEL_33:
  swift_unknownObjectRelease();
  if (v14 < 0) {
    goto LABEL_44;
  }
  unint64_t v23 = v24 | (v25 << 8);
LABEL_35:
  if (v10) {
    unint64_t v30 = (v11 << 11) | 0x300;
  }
  else {
    unint64_t v30 = 768LL;
  }
  uint64_t v31 = v14 | 0x300LL;
  unint64_t v32 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v30, 0LL, 0LL, 1LL);
  unint64_t v34 = v33;
  unint64_t v36 = v35;
  unint64_t v38 = v37;
  sub_188D087F8((uint64_t)&v48);
  *a3 = v9;
  a3[1] = v8;
  unint64_t v39 = v46;
  a3[2] = v47;
  a3[3] = v39;
  unint64_t v40 = v44;
  a3[4] = v45;
  a3[5] = v40;
  unint64_t v41 = v43;
  a3[6] = v31;
  a3[7] = v41;
  a3[8] = v23;
  a3[9] = v18;
  a3[10] = v32;
  a3[11] = v34;
  a3[12] = v36;
  a3[13] = v38;
}

        (*(void (**)(unint64_t, ValueMetadata *))(v48 + 8))(v46, a2);
        unint64_t v43 = *(uint64_t (**)(char **, unint64_t))(v9 + 8);
        return v43(v12, AssociatedTypeWitness);
      }
    }

    a3 = sub_188CF73DC((uint64_t)a3);
    *uint64_t v4 = a3;
    goto LABEL_7;
  }

  v20(v16, a1, a2);
  uint64_t result = swift_dynamicCast();
  int v12 = (char **)v52;
  uint64_t v29 = v53;
  unint64_t v30 = v53 - v52;
  if (__OFSUB__(v53, v52))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

  uint64_t v31 = v54;
  uint64_t AssociatedTypeWitness = (unint64_t)v4[1];
  if (v30 < 1)
  {
LABEL_15:
    if ((AssociatedTypeWitness & 0x8000000000000000LL) == 0)
    {
      if (!__OFSUB__(AssociatedTypeWitness, v30))
      {
        unint64_t v46 = AssociatedTypeWitness - v30;
        unint64_t v47 = (unint64_t)v29;
        unint64_t v30 = (uint64_t)v12;
        unint64_t v33 = v4;
        uint64_t v4 = (char **)(v31 + 32);
        Description = *(void *)(v31 + 16);
        uint64_t v29 = *v33;
        swift_bridgeObjectRetain();
        unint64_t v34 = swift_isUniquelyReferenced_nonNull_native();
        int v12 = v33;
        *unint64_t v33 = v29;
        if ((v34 & 1) != 0)
        {
LABEL_18:
          unint64_t v35 = *((void *)v29 + 2);
          __int128 v49 = v29 + 32;
          __int128 v50 = v35;
          __n128 v51 = AssociatedTypeWitness;
          sub_188DF548C(v30, v47, (uint64_t)v4, Description, v46);
          *int v12 = v29;
          swift_bridgeObjectRelease_n();
          return (*(uint64_t (**)(unint64_t, ValueMetadata *))(v48 + 8))(a1, a2);
        }

      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }

    __break(1u);
    goto LABEL_30;
  }

  unint64_t v24 = v88;
  unint64_t v23 = v89;
  uint64_t v25 = *(void *)(v88 + 72);
  uint64_t v26 = *(void (**)(char *))(v88 + 16);
  __int128 v75 = (uint64_t *)(v89 + v25 * v22);
  v26(v13);
  uint64_t v27 = (unsigned __int16)Rope._Node.header.getter();
  unsigned int v28 = *(void (**)(char *, uint64_t))(v24 + 8);
  uint64_t v29 = v21;
  unint64_t v30 = v82;
  v28(v13, v11);
  uint64_t v77 = v29;
  uint64_t v31 = (uint64_t *)(v23 + v25 * v29);
  ((void (*)(char *, uint64_t *, uint64_t))v26)(v13, v31, v11);
  LOWORD(v29) = Rope._Node.header.getter();
  __int128 v76 = v28;
  v28(v13, v11);
  __int128 v74 = (void (*)(char *, uint64_t *, uint64_t))v27;
  unint64_t v32 = v27 + (unsigned __int16)v29;
  unint64_t v33 = v87;
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v30 + 16))(v87, v30) < v32)
  {
    uint64_t v22 = v81;
    uint64_t v21 = v77;
    goto LABEL_8;
  }

  static Rope._Node.redistributeChildren(_:_:to:)(v75, v31, v32, v80, v79);
  Rope._UnsafeHandle._removeChild(at:)(v77, v78);
  v76(v13, v11);
  __int128 v67 = type metadata accessor for _RopePath(0LL, v33, v30, v66);
  __int128 v68 = v86;
  __int128 v69 = v85;
  _RopePath.subscript.setter(v81, v86, v67);
  __int128 v70 = v68 - 1;
  if ((v70 & 0xFFFFFF00) != 0)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }

  __int128 v71 = _RopePath.subscript.getter(v70, *v69, v33, v30);
  __int128 v61 = __OFADD__(v71, v74);
  __int128 v64 = (uint64_t)v74 + v71;
  if (!v61)
  {
    __int128 v65 = v70;
    __int128 v63 = v67;
    goto LABEL_21;
  }

    sub_188CF78D0();
    __int128 v60 = v77;
    sub_188DF84E0();
    __int128 v61 = sub_188DF7CC4();
    v31(v60, v4);
    v31(v45, v4);
    if ((v61 & 1) != 0) {
      goto LABEL_37;
    }
    goto LABEL_18;
  }

  if (v53 > 64) {
    goto LABEL_29;
  }
  swift_getAssociatedConformanceWitness();
  sub_188DF89CC();
  __int128 v54 = v77;
  sub_188DF896C();
  __int128 v55 = sub_188DF7CB8();
  v31(v54, v4);
  __int128 v56 = v82;
  __int128 v57 = v69;
  (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v69, v45, v4);
  if ((v55 & 1) == 0)
  {
    __n128 v51 = v57;
    goto LABEL_17;
  }

  __int128 v58 = sub_188DF8528();
  v31(v57, v4);
  if (v56 < v58) {
    goto LABEL_37;
  }
LABEL_18:
  sub_188DF8528();
  v31(v37, v4);
  return v36;
}

uint64_t sub_188D087F8(uint64_t a1)
{
  return a1;
}

uint64_t sub_188D08820(uint64_t a1)
{
  return a1;
}

uint64_t sub_188D08848()
{
  return sub_188DF8A5C();
}

unint64_t *sub_188D08870(unint64_t *result, uint64_t a2, ValueMetadata *a3)
{
  unint64_t v4 = v3[6];
  if (*result >> 10 < v4 >> 10)
  {
    __break(1u);
    goto LABEL_8;
  }

  unint64_t v5 = v3[10];
  if (v5 >> 10 < result[4] >> 10)
  {
LABEL_8:
    __break(1u);
    return result;
  }

  uint64_t v6 = v4 >> 11;
  uint64_t v7 = v5 >> 11;
  if (*v3) {
    uint64_t v8 = v3[4];
  }
  else {
    uint64_t v8 = 0LL;
  }
  sub_188D00660((uint64_t)v3, result, a2, a3);
  return (unint64_t *)sub_188D00468((uint64_t)v3, v8, v6, v7);
}

uint64_t sub_188D08900(uint64_t result, ValueMetadata *a2)
{
  unint64_t v4 = v2[10];
  unint64_t v5 = v2[6];
  if (v4 >> 10 < v5 >> 10)
  {
    __break(1u);
  }

  else
  {
    uint64_t v6 = v5 >> 11;
    uint64_t v7 = v4 >> 11;
    if (*v2) {
      uint64_t v8 = v2[4];
    }
    else {
      uint64_t v8 = 0LL;
    }
    sub_188D951A8(result, v4, v2[11], v2[12], v2[13], a2);
    return sub_188D00468((uint64_t)v2, v8, v6, v7);
  }

  return result;
}

uint64_t sub_188D08974( uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, ValueMetadata *a6)
{
  unint64_t v7 = v6[6];
  if (a2 >> 10 < v7 >> 10)
  {
    __break(1u);
    goto LABEL_8;
  }

  unint64_t v8 = v6[10];
  if (a2 >> 10 > v8 >> 10)
  {
LABEL_8:
    __break(1u);
    return result;
  }

  uint64_t v9 = v7 >> 11;
  uint64_t v10 = v8 >> 11;
  if (*v6) {
    uint64_t v11 = v6[4];
  }
  else {
    uint64_t v11 = 0LL;
  }
  sub_188D951A8(result, a2, a3, a4, a5, a6);
  return sub_188D00468((uint64_t)v6, v11, v9, v10);
}

unint64_t sub_188D089E8()
{
  unint64_t result = qword_18C749EF0;
  if (!qword_18C749EF0)
  {
    unint64_t result = MEMORY[0x1895D7620](&protocol conformance descriptor for BigSubstring, &type metadata for BigSubstring);
    atomic_store(result, (unint64_t *)&qword_18C749EF0);
  }

  return result;
}

uint64_t sub_188D08A2C()
{
  return MEMORY[0x189618028];
}

unint64_t sub_188D08A3C()
{
  unint64_t result = qword_18C749EF8;
  if (!qword_18C749EF8)
  {
    unint64_t result = MEMORY[0x1895D7620](&protocol conformance descriptor for BigSubstring, &type metadata for BigSubstring);
    atomic_store(result, (unint64_t *)&qword_18C749EF8);
  }

  return result;
}

uint64_t sub_188D08A80()
{
  return MEMORY[0x189618038];
}

uint64_t sub_188D08A8C()
{
  return MEMORY[0x189618030];
}

unint64_t sub_188D08A9C()
{
  unint64_t result = qword_18C749F00;
  if (!qword_18C749F00)
  {
    unint64_t result = MEMORY[0x1895D7620](&protocol conformance descriptor for BigSubstring, &type metadata for BigSubstring);
    atomic_store(result, (unint64_t *)&qword_18C749F00);
  }

  return result;
}

unint64_t sub_188D08AE4()
{
  unint64_t result = qword_18C749F08;
  if (!qword_18C749F08)
  {
    unint64_t result = MEMORY[0x1895D7620](&protocol conformance descriptor for BigSubstring, &type metadata for BigSubstring);
    atomic_store(result, (unint64_t *)&qword_18C749F08);
  }

  return result;
}

unint64_t sub_188D08B2C()
{
  unint64_t result = qword_18C749F10;
  if (!qword_18C749F10)
  {
    unint64_t result = MEMORY[0x1895D7620]( &protocol conformance descriptor for BigSubstring.Iterator,  &type metadata for BigSubstring.Iterator);
    atomic_store(result, (unint64_t *)&qword_18C749F10);
  }

  return result;
}

unint64_t sub_188D08B74()
{
  unint64_t result = qword_18C749F18;
  if (!qword_18C749F18)
  {
    unint64_t result = MEMORY[0x1895D7620](&protocol conformance descriptor for BigSubstring, &type metadata for BigSubstring);
    atomic_store(result, (unint64_t *)&qword_18C749F18);
  }

  return result;
}

unint64_t sub_188D08BBC()
{
  unint64_t result = qword_18C749F20;
  if (!qword_18C749F20)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C749F28);
    unint64_t v2 = sub_188D08C64();
    unint64_t result = MEMORY[0x1895D7620](MEMORY[0x189617A18], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_18C749F20);
  }

  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = MEMORY[0x1895D7614](255LL, (char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

unint64_t sub_188D08C64()
{
  unint64_t result = qword_18C749F30;
  if (!qword_18C749F30)
  {
    unint64_t result = MEMORY[0x1895D7620](&protocol conformance descriptor for BigSubstring, &type metadata for BigSubstring);
    atomic_store(result, (unint64_t *)&qword_18C749F30);
  }

  return result;
}

unint64_t sub_188D08CB0()
{
  unint64_t result = qword_18C749F38;
  if (!qword_18C749F38)
  {
    unint64_t result = MEMORY[0x1895D7620](&protocol conformance descriptor for BigSubstring, &type metadata for BigSubstring);
    atomic_store(result, (unint64_t *)&qword_18C749F38);
  }

  return result;
}

unint64_t sub_188D08CF8()
{
  unint64_t result = qword_18C749F40;
  if (!qword_18C749F40)
  {
    unint64_t result = MEMORY[0x1895D7620]( &protocol conformance descriptor for BigString.Index,  &type metadata for BigString.Index);
    atomic_store(result, (unint64_t *)&qword_18C749F40);
  }

  return result;
}

unint64_t sub_188D08D40()
{
  unint64_t result = qword_18C749F48;
  if (!qword_18C749F48)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C749F28);
    unint64_t result = MEMORY[0x1895D7620](MEMORY[0x189617A28], v1);
    atomic_store(result, (unint64_t *)&qword_18C749F48);
  }

  return result;
}

unint64_t sub_188D08D90()
{
  unint64_t result = qword_18C749F50;
  if (!qword_18C749F50)
  {
    unint64_t result = MEMORY[0x1895D7620](&protocol conformance descriptor for BigSubstring, &type metadata for BigSubstring);
    atomic_store(result, (unint64_t *)&qword_18C749F50);
  }

  return result;
}

uint64_t destroy for BigString()
{
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for BigSubstring(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  __int128 v3 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v3;
  __int128 v4 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v4;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for BigSubstring(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  __int128 v4 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v4;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  __int128 v5 = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v5;
  return a1;
}

__n128 __swift_memcpy112_8(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t assignWithTake for BigSubstring(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v4;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for BigSubstring(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 112)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BigSubstring(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 104) = 0LL;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 112) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 112) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for BigSubstring()
{
  return &type metadata for BigSubstring;
}

uint64_t initializeBufferWithCopyOfBuffer for BigString(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for BigSubstring.Iterator()
{
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for BigSubstring.Iterator(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for BigSubstring.Iterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  __int128 v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  return a1;
}

__n128 __swift_memcpy128_8(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  __int128 v6 = a2[5];
  __int128 v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for BigSubstring.Iterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  return a1;
}

uint64_t getEnumTagSinglePayload for BigSubstring.Iterator(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BigSubstring.Iterator( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 120) = 0LL;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 128) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 128) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for BigSubstring.Iterator()
{
  return &type metadata for BigSubstring.Iterator;
}

void *sub_188D09300(void *a1, uint64_t a2)
{
  return sub_188D09330(a1, a2);
}

void *sub_188D09314(void *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  BOOL v3 = __OFADD__(*result, v2);
  uint64_t v4 = *result + v2;
  if (v3) {
    __break(1u);
  }
  else {
    *__n128 result = v4;
  }
  return result;
}

void *sub_188D09330(void *result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 16);
  BOOL v3 = __OFADD__(*result, v2);
  uint64_t v4 = *result + v2;
  if (v3) {
    __break(1u);
  }
  else {
    *__n128 result = v4;
  }
  return result;
}

void *sub_188D0934C(void *a1, uint64_t a2)
{
  return sub_188D0937C(a1, a2);
}

void *sub_188D09360(void *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  BOOL v3 = __OFADD__(*result, v2);
  uint64_t v4 = *result + v2;
  if (v3) {
    __break(1u);
  }
  else {
    *__n128 result = v4;
  }
  return result;
}

void *sub_188D0937C(void *result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 18);
  BOOL v3 = __OFADD__(*result, v2);
  uint64_t v4 = *result + v2;
  if (v3) {
    __break(1u);
  }
  else {
    *__n128 result = v4;
  }
  return result;
}

void *sub_188D09398(void *a1, uint64_t a2)
{
  return sub_188D093C8(a1, a2);
}

void *sub_188D093AC(void *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  BOOL v3 = __OFADD__(*result, v2);
  uint64_t v4 = *result + v2;
  if (v3) {
    __break(1u);
  }
  else {
    *__n128 result = v4;
  }
  return result;
}

void *sub_188D093C8(void *result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 17);
  BOOL v3 = __OFADD__(*result, v2);
  uint64_t v4 = *result + v2;
  if (v3) {
    __break(1u);
  }
  else {
    *__n128 result = v4;
  }
  return result;
}

void *sub_188D093E4(void *a1, uint64_t a2)
{
  return sub_188D09414(a1, a2);
}

void *sub_188D093F8(void *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  BOOL v3 = __OFADD__(*result, v2);
  uint64_t v4 = *result + v2;
  if (v3) {
    __break(1u);
  }
  else {
    *__n128 result = v4;
  }
  return result;
}

void *sub_188D09414(void *result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 19);
  BOOL v3 = __OFADD__(*result, v2);
  uint64_t v4 = *result + v2;
  if (v3) {
    __break(1u);
  }
  else {
    *__n128 result = v4;
  }
  return result;
}

BOOL static BigString.Index.== infix(_:_:)( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (a5 ^ a1) < 0x400;
}

BOOL static BigString.Index.< infix(_:_:)( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return a1 >> 10 < a5 >> 10;
}

unint64_t BigString.Index.utf8Offset.getter(unint64_t a1)
{
  return a1 >> 11;
}

uint64_t BigString.Index._isUTF16TrailingSurrogate.getter(unint64_t a1)
{
  return (a1 >> 10) & 1;
}

uint64_t BigString.Index._isKnownScalarAligned.getter(unint64_t a1)
{
  return (a1 >> 8) & 1;
}

uint64_t BigString.Index._isKnownCharacterAligned.getter(unint64_t a1)
{
  return (a1 >> 9) & 1;
}

uint64_t BigString.Index.init(_utf8Offset:)(uint64_t a1)
{
  return a1 << 11;
}

uint64_t BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    return (a1 << 11) | 0x400;
  }
  else {
    return a1 << 11;
  }
}

BOOL sub_188D094B0(void *a1, void *a2)
{
  return (*a2 ^ *a1) < 0x400uLL;
}

BOOL sub_188D094C8(void *a1, void *a2)
{
  return *a1 >> 10 < *a2 >> 10;
}

BOOL sub_188D094E0(void *a1, void *a2)
{
  return *a2 >> 10 >= *a1 >> 10;
}

BOOL sub_188D094F8(void *a1, void *a2)
{
  return *a1 >> 10 >= *a2 >> 10;
}

BOOL sub_188D09510(void *a1, void *a2)
{
  return *a2 >> 10 < *a1 >> 10;
}

uint64_t BigString.Index.hash(into:)()
{
  return sub_188DF8A80();
}

uint64_t BigString.Index.hashValue.getter()
{
  return sub_188DF8A98();
}

uint64_t sub_188D09590()
{
  return sub_188DF8A98();
}

uint64_t sub_188D095D4()
{
  return sub_188DF8A80();
}

uint64_t sub_188D09600()
{
  return sub_188DF8A98();
}

uint64_t BigString.Index.description.getter()
{
  uint64_t v1 = sub_188DF88D0();
  sub_188DF7EE0();
  sub_188DF7EE0();
  swift_bridgeObjectRelease();
  return v1;
}

unint64_t sub_188D096E0()
{
  unint64_t result = qword_18C749F58;
  if (!qword_18C749F58)
  {
    unint64_t result = MEMORY[0x1895D7620]( &protocol conformance descriptor for BigString.Index,  &type metadata for BigString.Index);
    atomic_store(result, (unint64_t *)&qword_18C749F58);
  }

  return result;
}

uint64_t sub_188D09724()
{
  return BigString.Index.description.getter();
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t _s5IndexVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 > 0x7FFFFFFD && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 != v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t _s5IndexVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = a2 - 2147483646;
    *(void *)(result + 8) = 0LL;
    if (a3 > 0x7FFFFFFD) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if (a3 > 0x7FFFFFFD) {
      *(_BYTE *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for BigString.Index()
{
  return &type metadata for BigString.Index;
}

unint64_t sub_188D097FC( unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = (uint64_t)v5;
  unint64_t v7 = result;
  if (a4 == 1) {
    goto LABEL_8;
  }
  uint64_t v8 = a4;
  uint64_t v27 = a2;
  unint64_t v28 = a3;
  uint64_t v29 = a4;
  __int128 v11 = v5[2];
  __int128 v34 = v5[1];
  __int128 v35 = v11;
  __int128 v33 = *v5;
  if (*((void *)&v11 + 1) != a2)
  {
LABEL_8:
    char v15 = a5 & ((result & 0x400) == 0);
    __int128 v16 = v5[1];
    __int128 v30 = *v5;
    __int128 v31 = v16;
    __int128 v32 = v5[2];
    sub_188D07F48((uint64_t)v5);
    sub_188D09C38(v7 >> 11, v15);
    uint64_t v18 = v17;
    __n128 result = sub_188D087F8(v6);
    if (v18 < 0)
    {
      __break(1u);
      goto LABEL_36;
    }

    return v7 & 0xFFFFFFFFFFFFFC00LL | v18;
  }

  if ((a5 & 1) != 0)
  {
    if (result < 0x800 || (result & 0x4FF) != 0) {
      return v7;
    }
    __int128 v12 = v33;
    __int128 v13 = v34;
    uint64_t v25 = v35;
    if ((void)v33)
    {
      unint64_t v14 = *(unsigned __int8 *)(v33 + 18);
      __n128 result = swift_unknownObjectRetain();
    }

    else
    {
      unint64_t v14 = 0LL;
    }

    if (v14 < a3)
    {
      if (v8)
      {
        char v19 = (4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C;
        if (((a3 >> v19) & 0xF) != 0)
        {
          unint64_t v20 = ((((a3 >> v19) & 0xF) - 1) << v19) | ((-15LL << v19) - 1) & a3;
          sub_188D087F8(v6);
          goto LABEL_24;
        }
      }

      __int128 v30 = v33;
      __int128 v31 = v34;
      *(void *)&__int128 v32 = v35;
      swift_unknownObjectRetain();
      char v21 = sub_188DF1050((uint64_t)&v27);
      sub_188D087F8(v6);
      __n128 result = sub_188D087F8(v6);
      if ((v21 & 1) == 0) {
        goto LABEL_38;
      }
      if (v27 == a2)
      {
        unint64_t v20 = v28;
        uint64_t v8 = v29;
        if (!v29)
        {
          __int128 v36 = v12;
          __int128 v37 = v13;
          uint64_t v38 = v25;
          swift_unknownObjectRetain();
          sub_188D36E50(v20, (uint64_t)v26);
          sub_188D087F8(v6);
          unsigned int v22 = v26[16];
          swift_bridgeObjectRelease();
          return v7 & 0xFFFFFFFFFFFFFF00LL | v22;
        }

LABEL_24:
        unsigned int v22 = *(unsigned __int8 *)(v8 + 24 * ((v20 >> ((4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C)) & 0xF) + 40);
        return v7 & 0xFFFFFFFFFFFFFF00LL | v22;
      }

  __break(1u);
LABEL_25:
  uint64_t v8 = sub_188CF73DC((uint64_t)v8);
  *unint64_t v3 = v8;
LABEL_11:
  sub_188DF548C(v5, v9, (uint64_t)(v8 + 32), *((void *)v8 + 2), v7);
  *unint64_t v3 = v8;
  if (v7 < v5)
  {
    __break(1u);
    goto LABEL_27;
  }

  char v15 = swift_isUniquelyReferenced_nonNull_native();
  *unint64_t v3 = v8;
  if ((v15 & 1) == 0)
  {
LABEL_27:
    uint64_t v8 = sub_188CF73DC((uint64_t)v8);
    *unint64_t v3 = v8;
  }

  if (v6) {
    sub_188DE97E0(v5, v7);
  }
  else {
    sub_188DE990C(v5, v7);
  }
  *unint64_t v3 = v8;
}

    __n128 v48 = 0;
    return v48 & 1;
  }

    __break(1u);
    return;
  }

  __int128 v33 = *(void *)(v9 + 16 * v28);
  uint64_t v10 = (unsigned int *)*((unsigned __int8 *)a4 + 20);
  *a4 |= v28 << (char)v10;
  a4[1] = v33;
  *((_DWORD *)a4 + 4) = 0;
  swift_beginAccess();
  *((_BYTE *)a4 + 21) = *(_DWORD *)(v33 + 16) != 0;
  *((_BYTE *)a4 + 20) = (_BYTE)v10 + 5;
  __n128 result = v29 + *a5;
  if (!__OFADD__(v29, *a5))
  {
    __n128 result = sub_188D710A4(result);
    if ((result & 1) != 0)
    {
LABEL_32:
      *a5 = 0LL;
      char v21 = 1;
      goto LABEL_34;
    }

    __break(1u);
    goto LABEL_27;
  }

    uint64_t v138 = v115;
    uint64_t v139 = v116;
    uint64_t v140 = v117;
    unint64_t v39 = v115;
    if ((void)v115)
    {
      unint64_t v40 = *((void *)&v138 + 1);
      unint64_t v41 = v139;
      unint64_t v42 = v140;
      uint64_t v141 = v138;
      uint64_t v142 = v139;
      char v143 = v140;
      if ((void)v140)
      {
        __int128 v99 = v15;
        unint64_t v43 = *(unsigned __int8 *)(v115 + 18);
        swift_unknownObjectRetain();
        sub_188D36E50(v43, (uint64_t)&v112);
        unint64_t v44 = sub_188DC6D38(v112, *((unint64_t *)&v112 + 1));
        swift_bridgeObjectRelease();
        if ((v44 & 0x100000000LL) != 0) {
          goto LABEL_59;
        }
        *(void *)&__int128 v112 = v39;
        *((void *)&v112 + 1) = v40;
        uint64_t v113 = v41;
        unint64_t v114 = v42;
        swift_unknownObjectRetain();
        unint64_t v45 = v97;
        sub_188DF8B40();
        LOBYTE(v100) = 0;
        unint64_t v46 = v98;
        unint64_t v47 = sub_188D20C84(((void)v42 << 11) | 0x300LL, 0LL, 0LL, (uint64_t *)1, v44, v98);
        __n128 v48 = *(unsigned __int8 *)(v39 + 18);
        uint64_t v109 = *((void *)&v42 + 1);
        __int128 v110 = v48;
        uint64_t v111 = 0LL;
        MEMORY[0x1895F8858](v47);
        *(&v77 - 2) = (uint64_t)v45;
        *(&v77 - 1) = v46;
        uint64_t v107 = 0LL;
        unint64_t v108 = 1;
        sub_188D25420( &v100,  (uint64_t)&v109,  &v112,  (uint64_t)&v107,  (void (*)(void *__return_ptr))sub_188D955B4,  (uint64_t)(&v77 - 4));
        __int128 v49 = v112;
        __int128 v50 = v113;
        __n128 v51 = v114;
        v135[0] = v112;
        v135[1] = v113;
        uint64_t v136 = v114;
        Swift::Int v137 = *((void *)&v42 + 1) + 1LL;
        if (!(void)v112) {
          goto LABEL_42;
        }
        *(_OWORD *)&v128[40] = v112;
        uint64_t v129 = v113;
        uint64_t v130 = v114;
        __int128 v52 = *(unsigned __int16 *)(v112 + 16);
        if (!*(_WORD *)(v112 + 16)) {
          goto LABEL_42;
        }
        if ((void)v115)
        {
          uint64_t v131 = v115;
          uint64_t v132 = v116;
          uint64_t v133 = v117;
          if (*(_WORD *)(v115 + 16))
          {
            if (v52 == 1 && !*(_BYTE *)(v112 + 18))
            {
              __int128 v53 = ((-15LL << ((4 * *(_BYTE *)(v112 + 18) + 8) & 0x3C)) - 1) & *(unsigned __int8 *)(v112 + 18) | ((unint64_t)*(unsigned __int16 *)(v112 + 16) << ((4 * *(_BYTE *)(v112 + 18) + 8) & 0x3C));
              swift_unknownObjectRetain();
              if (!v53) {
                goto LABEL_57;
              }
              swift_unknownObjectRetain();
              sub_188D36E50(0LL, (uint64_t)&v100);
              swift_unknownObjectRelease();
              uint64_t v84 = v84 & 0xFFFF000000000000LL | v101 | ((unint64_t)v102 << 8) | ((unint64_t)v103 << 16) | ((unint64_t)v104 << 24) | ((unint64_t)v105 << 32) | ((unint64_t)v106 << 40);
              sub_188DF3724(v100, *((uint64_t *)&v100 + 1), v84);
              goto LABEL_41;
            }

            if ((uint64_t)v117 > 123)
            {
              v134[0] = v115;
              v134[1] = v116;
              v134[2] = v117;
              swift_unknownObjectRetain();
              sub_188DEEA7C((uint64_t)v134, (uint64_t *)v135, (uint64_t *)v124);
              __int128 v93 = v124[0];
              __int128 v90 = v124[1];
              __int128 v58 = v125;
              __int128 v59 = v126;
              sub_188D087F8((uint64_t)&v138);
              uint64_t v115 = v93;
              uint64_t v116 = v90;
              *(void *)&uint64_t v117 = v58;
              *((void *)&v117 + 1) = v59;
            }

            else
            {
              __int128 v54 = *(unsigned __int8 *)(v115 + 18);
              *(void *)&__int128 v93 = ((-15LL << ((4 * v54 + 8) & 0x3C)) - 1) & v54 | ((unint64_t)*(unsigned __int16 *)(v115 + 16) << ((4 * v54 + 8) & 0x3C));
              swift_unknownObjectRetain();
              swift_unknownObjectRetain();
              *(void *)&__int128 v90 = v54;
              if ((void)v93 == v54) {
                goto LABEL_61;
              }
              swift_unknownObjectRetain();
              sub_188D36E50(v90, (uint64_t)&v100);
              swift_unknownObjectRelease_n();
              *(void *)&__int128 v93 = v100;
              *((void *)&v89 + 1) = v101;
              *(void *)&__int128 v90 = *((void *)&v100 + 1);
              *(void *)&uint64_t v89 = v102;
              __int128 v88 = v103;
              uint64_t v87 = v104;
              unint64_t v82 = v105;
              __int128 v55 = v106;
              swift_unknownObjectRetain();
              swift_unknownObjectRelease();
              uint64_t v115 = v49;
              uint64_t v116 = v50;
              *(void *)&uint64_t v117 = v51;
              *((void *)&v117 + 1) = *((void *)&v42 + 1) + 1LL;
              uint64_t v83 = v83 & 0xFFFF000000000000LL | *((void *)&v89 + 1) | ((void)v89 << 8) | (v88 << 16) | (v87 << 24) | (v82 << 32) | (v55 << 40);
              sub_188DF38B4((void *)v93, v90, v83);
LABEL_41:
              swift_unknownObjectRelease();
LABEL_42:
              sub_188D087F8((uint64_t)&v138);
            }

      __n128 result = sub_188D37044(result, v5, v4);
      goto LABEL_13;
    }

LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

  __int128 v35 = v37;
  memcpy(v28, v29, v27);
LABEL_40:
  *(void *)((unint64_t)&v28[v27 + 7] & 0xFFFFFFFFFFFFF8LL) = *(void *)((unint64_t)&v29[v27 + 7] & 0xFFFFFFFFFFFFF8LL);
  swift_bridgeObjectRetain();
  return v35;
}

      memcpy(v26, v27, v25);
      goto LABEL_38;
    }
  }

  if ((_DWORD)v23) {
    uint64_t v25 = v24;
  }
  else {
    uint64_t v25 = v24 + 1;
  }
  memcpy(v21, v22, v25);
  uint64_t v26 = (_BYTE *)((unint64_t)&v21[v25 + v19] & v20);
  uint64_t v27 = (_BYTE *)((unint64_t)&v22[v25 + v19] & v20);
  if (!(_DWORD)v23) {
    goto LABEL_27;
  }
LABEL_24:
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v18 + 32))(v26, v27, v5);
LABEL_38:
  *(void *)((unint64_t)&v26[v25 + 7] & 0xFFFFFFFFFFFFF8LL) = *(void *)((unint64_t)&v27[v25 + 7] & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

        __break(1u);
        goto LABEL_38;
      }
    }

    else
    {
LABEL_35:
      __break(1u);
    }

    __break(1u);
    goto LABEL_37;
  }

  uint64_t v26 = *((void *)v9 + 9);
  uint64_t v27 = (void (*)(char *, uint64_t, uint64_t))*((void *)v9 + 2);
  while (1)
  {
    unint64_t v82 = (uint64_t (*)(char *, uint64_t))v24;
    v27(v20, a3 + v26 * v23, a5);
    unint64_t v28 = a3 + v26 * (v23 + 1);
    uint64_t v29 = v26;
    __int128 v30 = v79;
    v27(v79, v28, a5);
    __int128 v31 = sub_188DF7CC4();
    __int128 v32 = (void (*)(char *, uint64_t))*((void *)v9 + 1);
    v32(v30, a5);
    v32(v20, a5);
    if ((v31 & 1) != 0) {
      __int128 v33 = v23;
    }
    else {
      __int128 v33 = v23 + 1;
    }
    uint64_t v85 = v33;
    __int128 v34 = v23 + 2;
    v27(v20, a3 + v29 * v34, a5);
    v27(v30, a3 + v29 * v24, a5);
    __int128 v35 = sub_188DF7CC4();
    v32(v30, a5);
    v32(v20, a5);
    if ((v35 & 1) == 0) {
      __int128 v34 = (Swift::Int)v82;
    }
    v27(v20, a3 + v85 * v29, a5);
    v27(v30, a3 + v34 * v29, a5);
    __int128 v36 = sub_188DF7CC4();
    __int128 v37 = v30;
    uint64_t v26 = v29;
    v32(v37, a5);
    v32(v20, a5);
    uint64_t v38 = (v36 & 1) != 0 ? v85 : v34;
    v27(v20, a3 + v38 * v29, a5);
    unint64_t v39 = sub_188DF7CC4();
    __n128 result = ((uint64_t (*)(char *, uint64_t))v32)(v20, a5);
    if ((v39 & 1) == 0) {
      return result;
    }
    unint64_t v41 = *v83;
    a4 = v81;
    __n128 result = sub_188DF7D9C();
    if (!result)
    {
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }

    unint64_t v42 = v78;
    sub_188DF8378();
    __n128 result = sub_188DF7D9C();
    if (!result) {
      goto LABEL_34;
    }
    unint64_t v43 = result + v41 * v26;
    v27(v20, (uint64_t)v42, a5);
    sub_188D8A1FC((uint64_t)v20, v43, a5);
    v32(v42, a5);
    unint64_t v44 = v83;
    unint64_t v45 = level;
    *uint64_t v83 = v38;
    v44[1] = v45;
    unint64_t v46 = v38 - 1;
    if (v38 - 1 < 0) {
      unint64_t v46 = v38;
    }
    v27(v20, a3 + (v46 >> 1) * v26, a5);
    unint64_t v47 = sub_188DF7CC4();
    v32(v20, a5);
    if ((v47 & 1) != 0)
    {
      sub_188DF7D9C();
      sub_188DF89E4();
    }

    int v23 = (4 * v38) | 3;
    char v24 = 4 * v38 + 6;
    level += 2LL;
    uint64_t v9 = v80;
    if (v24 >= a4)
    {
      __n128 v48 = a3;
      char v21 = *v83;
      goto LABEL_21;
    }
  }

        __break(1u);
        goto LABEL_38;
      }
    }

    else
    {
LABEL_35:
      __break(1u);
    }

    __break(1u);
    goto LABEL_37;
  }

  uint64_t v26 = *((void *)v9 + 9);
  uint64_t v27 = (void (*)(char *, uint64_t, uint64_t))*((void *)v9 + 2);
  while (1)
  {
    unint64_t v82 = (uint64_t (*)(char *, uint64_t))v24;
    v27(v20, a3 + v26 * v23, a5);
    unint64_t v28 = a3 + v26 * (v23 + 1);
    uint64_t v29 = v26;
    __int128 v30 = v79;
    v27(v79, v28, a5);
    __int128 v31 = sub_188DF7CC4();
    __int128 v32 = (void (*)(char *, uint64_t))*((void *)v9 + 1);
    v32(v30, a5);
    v32(v20, a5);
    if ((v31 & 1) != 0) {
      __int128 v33 = v23 + 1;
    }
    else {
      __int128 v33 = v23;
    }
    uint64_t v85 = v33;
    __int128 v34 = v23 + 2;
    v27(v20, a3 + v29 * v34, a5);
    v27(v30, a3 + v29 * v24, a5);
    __int128 v35 = sub_188DF7CC4();
    v32(v30, a5);
    v32(v20, a5);
    if ((v35 & 1) != 0) {
      __int128 v34 = (Swift::Int)v82;
    }
    v27(v20, a3 + v85 * v29, a5);
    v27(v30, a3 + v34 * v29, a5);
    __int128 v36 = sub_188DF7CC4();
    __int128 v37 = v30;
    uint64_t v26 = v29;
    v32(v37, a5);
    v32(v20, a5);
    uint64_t v38 = (v36 & 1) != 0 ? v34 : v85;
    v27(v20, a3 + v38 * v29, a5);
    unint64_t v39 = sub_188DF7CC4();
    __n128 result = ((uint64_t (*)(char *, uint64_t))v32)(v20, a5);
    if ((v39 & 1) == 0) {
      return result;
    }
    unint64_t v41 = *v83;
    a4 = v81;
    __n128 result = sub_188DF7D9C();
    if (!result)
    {
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }

    unint64_t v42 = v78;
    sub_188DF8378();
    __n128 result = sub_188DF7D9C();
    if (!result) {
      goto LABEL_34;
    }
    unint64_t v43 = result + v41 * v26;
    v27(v20, (uint64_t)v42, a5);
    sub_188D8A1FC((uint64_t)v20, v43, a5);
    v32(v42, a5);
    unint64_t v44 = v83;
    unint64_t v45 = level;
    *uint64_t v83 = v38;
    v44[1] = v45;
    unint64_t v46 = v38 - 1;
    if (v38 - 1 < 0) {
      unint64_t v46 = v38;
    }
    v27(v20, a3 + (v46 >> 1) * v26, a5);
    unint64_t v47 = sub_188DF7CC4();
    v32(v20, a5);
    if ((v47 & 1) != 0)
    {
      sub_188DF7D9C();
      sub_188DF89E4();
    }

    int v23 = (4 * v38) | 3;
    char v24 = 4 * v38 + 6;
    level += 2LL;
    uint64_t v9 = v80;
    if (v24 >= a4)
    {
      __n128 v48 = a3;
      char v21 = *v83;
      goto LABEL_21;
    }
  }

      if ((a4 & 0x1000000000000000LL) == 0) {
        goto LABEL_38;
      }
      goto LABEL_21;
    }

    return swift_bridgeObjectRelease_n();
  }

  __break(1u);
  return result;
}

      __break(1u);
      goto LABEL_38;
    }

        __break(1u);
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }

LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  if (!a4)
  {
    __int128 v30 = v33;
    __int128 v31 = v34;
    *(void *)&__int128 v32 = v35;
    swift_unknownObjectRetain();
    sub_188D36E50(a3, (uint64_t)&v36);
    sub_188D087F8((uint64_t)v5);
    int v23 = v37;
    swift_bridgeObjectRelease();
    return v7;
  }

  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

    unint64_t v41 = 0;
    return v41 & 1;
  }

  __int128 v95 = a4;
  __int128 v49 = v90;
  if (qword_18C749D80 != -1) {
    swift_once();
  }
  __int128 v50 = MEMORY[0x18961AFC8] + 8LL;
  __n128 v51 = _HashNode.init(storage:count:)(_emptySingleton, 0LL, a5, MEMORY[0x18961AFC8] + 8LL, v49);
  __int128 v101 = v51;
  __int128 v102 = v52;
  v43(v36, v39, a6);
  swift_retain();
  sub_188DF7FDC();
  swift_getAssociatedConformanceWitness();
  __int128 v53 = v91;
  sub_188DF84D4();
  __int128 v54 = v53;
  __int128 v55 = (uint64_t (*)(char *, uint64_t, uint64_t))v92[6];
  __int128 v56 = v55(v54, 1LL, a5);
  __int128 v57 = (uint64_t)v88;
  if (v56 == 1)
  {
LABEL_12:
    (*(void (**)(char *, uint64_t))(v86 + 8))(v54, v87);
    __int128 v58 = (uint64_t)v95;
    if (!v101)
    {
LABEL_24:
      __int128 v73 = v97;
      __int128 v74 = v92;
      __int128 v75 = (uint64_t)v85;
      __int128 v76 = v84;
      while (1)
      {
        sub_188DF84D4();
        ((void (*)(uint64_t, char *, uint64_t))v74[4])(v75, v76, a5);
        uint64_t v77 = TreeSet.contains(_:)(v75, v73, v99, v58, a5, v49);
        ((void (*)(uint64_t, uint64_t))v74[1])(v75, a5);
        if (!v77) {
          goto LABEL_27;
        }
      }

      (*(void (**)(char *, uint64_t))(v89 + 8))(v98, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v86 + 8))(v76, v87);
      swift_release();
      unint64_t v41 = 1;
      return v41 & 1;
    }

    v48.i16[0] = v163.u8[0];
    v48.i16[1] = v163.u8[2];
    v48.i16[2] = v163.u8[4];
    v48.i16[3] = v163.u8[6];
    __int128 v49 = vmovl_u16(v48);
    v50.i64[0] = v49.u32[0];
    v50.i64[1] = v49.u32[1];
    __n128 v51 = v50;
    v50.i64[0] = v49.u32[2];
    v50.i64[1] = v49.u32[3];
    uint64_t v163 = (uint64x2_t)xmmword_188DF9320;
    uint64_t v159 = (uint64x2_t)xmmword_188DF9330;
    __int128 v52 = vorrq_s8( (int8x16_t)vshlq_u64(v51, (uint64x2_t)xmmword_188DF9330),  (int8x16_t)vshlq_u64(v50, (uint64x2_t)xmmword_188DF9320));
    __int128 v53 = sub_188D55584( v164,  v167,  v36,  *(void *)&vorr_s8(*(int8x8_t *)v52.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL)) | (v33 << 40) | v165);
    if ((v55 & 1) != 0) {
      break;
    }
    if (a2 >> 14 >= v53 >> 14)
    {
      __int128 v56 = &v20[*(int *)(v14 + 48)];
      __int128 v57 = sub_188DF7FD0();
      __int128 v58 = v160 + *(int *)(v14 + 48);
      sub_188DCAFBC(v57, v59, v60, v61);
      swift_bridgeObjectRelease();
      __int128 v62 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v166 + 32);
      __int128 v63 = v162;
      v62((unint64_t)v56, v58, v162);
      __int128 v64 = v161.i64[0] + *(int *)(v14 + 48);
      v62(v64, (uint64_t)v56, v63);
      return v62(a6, v64, v63);
    }

    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    ;
  }

  char v165 = &v180;
  uint64_t v27 = a3 + 24;
  int v168 = a3 + 24;
  unint64_t v20 = v176;
  __int128 v65 = v177;
  unint64_t v14 = v175;
  v179 = v177;
  uint64_t v180 = v175;
  uint64_t v181 = a4;
  while (a3)
  {
    __int128 v33 = *(unsigned __int8 *)(a3 + 18);
    if (v14 <= v33) {
      goto LABEL_90;
    }
    swift_unknownObjectRetain();
LABEL_45:
    if (v14 <= v33)
    {
      __break(1u);
LABEL_102:
      __break(1u);
      goto LABEL_103;
    }

    if (a4)
    {
      __int128 v66 = (4 * *((_BYTE *)a4 + 18) + 8) & 0x3C;
      if (((v14 >> v66) & 0xF) != 0)
      {
        unint64_t v14 = ((((v14 >> v66) & 0xF) - 1) << v66) | ((-15LL << v66) - 1) & v14;
        uint64_t v180 = v14;
        sub_188D087F8((uint64_t)v20);
        goto LABEL_83;
      }
    }

    __int128 v67 = (4 * *(_BYTE *)(a3 + 18) + 8) & 0x3C;
    a2 = (v14 >> v67) & 0xF;
    if (!*(_BYTE *)(a3 + 18))
    {
      if (!a2) {
        goto LABEL_113;
      }
      unint64_t v14 = ((a2 - 1) << v67) | ((-15LL << v67) - 1) & v14;
      uint64_t v180 = v14;
      sub_188D087F8((uint64_t)v20);
      uint64_t v181 = (uint64_t *)a3;
      a4 = (uint64_t *)a3;
      goto LABEL_84;
    }

    if (a2 < *(unsigned __int16 *)(a3 + 16))
    {
      __int128 v68 = *(void *)(v168 + 40 * ((v14 >> v67) & 0xF));
      __int128 v69 = (4 * *(_BYTE *)(v68 + 18) + 8) & 0x3C;
      __int128 v70 = (v14 >> v69) & 0xF;
      if (*(_BYTE *)(v68 + 18))
      {
        __int128 v71 = v68 + 24;
        if (v70 >= *(unsigned __int16 *)(v68 + 16))
        {
          sub_188D07F48((uint64_t)v176);
          swift_unknownObjectRetain();
          goto LABEL_65;
        }

        v161.i64[0] = v68 + 24;
        a4 = *(uint64_t **)(v71 + 40 * ((v14 >> v69) & 0xF));
        __int128 v72 = (4 * *((_BYTE *)a4 + 18) + 8) & 0x3C;
        __int128 v73 = (v14 >> v72) & 0xF;
        if (!*((_BYTE *)a4 + 18))
        {
          if (v73)
          {
            uint64_t v180 = ((v73 - 1) << v72) | ((-15LL << v72) - 1) & v14;
            uint64_t v181 = a4;
            sub_188D07F48((uint64_t)v176);
            swift_unknownObjectRetain();
            goto LABEL_80;
          }

          sub_188D07F48((uint64_t)v176);
          swift_unknownObjectRetain();
          __int128 v71 = v161.i64[0];
          goto LABEL_65;
        }

        __int128 v74 = a4 + 3;
        if (v73 < *((unsigned __int16 *)a4 + 8))
        {
          uint64_t v157 = a4;
          a4 = (uint64_t *)v74[5 * ((v14 >> v72) & 0xF)];
          __int128 v75 = *((unsigned __int8 *)a4 + 18);
          __int128 v76 = (4 * v75 + 8) & 0x3C;
          uint64_t v77 = (v14 >> v76) & 0xF;
          v199[0] = v77;
          if (v75)
          {
            uint64_t v158 = (unint64_t)v74;
            uint64_t v78 = (v14 >> v72) & 0xF;
            uint64_t v160 = v72;
            uint64_t v155 = a4 + 3;
            uint64_t v156 = (unsigned __int16 *)(a4 + 2);
            unsigned int v154 = v75;
            sub_188D07F48((uint64_t)v176);
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            LODWORD(v156) = sub_188DF1114(v156, (uint64_t)v155, v199, (uint64_t)&v179, v154);
            swift_unknownObjectRelease();
            if ((v156 & 1) != 0)
            {
              a4 = v181;
              goto LABEL_79;
            }

        uint64_t v29 = sub_188CF73DC((uint64_t)v29);
        *__int128 v12 = v29;
        goto LABEL_18;
      }

    *(_DWORD *)(v0 + 16) = 1;
    return v1;
  }

  if (*(_BYTE *)(v0 + 137))
  {
    uint64_t v6 = v0 + 32;
    unint64_t v7 = *(_BYTE *)(v0 + 136);
    while (1)
    {
      __int128 v35 = v4;
      uint64_t v8 = v4 - 5;
      uint64_t v9 = *(void *)(v0 + 24);
      uint64_t v10 = (v4 - 5) & 0x3F;
      __int128 v11 = v9;
      if ((v4 - 5) <= 0x3Fu)
      {
        __int128 v11 = ((-31LL << v10) - 1) & v9;
        *(void *)(v0 + 24) = v11;
      }

      __int128 v12 = v7 - 1;
      __int128 v13 = (v7 - 1);
      unint64_t v14 = v6;
      uint64_t v2 = *(void *)(v6 + 8 * v13);
      char v15 = ((v9 >> v8) & 0x1F) + 1;
      swift_beginAccess();
      __int128 v16 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(v2 + 20));
      v16.i16[0] = vaddlv_u8(v16);
      int v4 = v8;
      --v7;
      uint64_t v6 = v14;
      if (!(_BYTE)v8)
      {
        *(_BYTE *)(v0 + 137) = 0;
        *(void *)(v0 + 8) = v2;
        *(_BYTE *)(v0 + 136) = v12;
        goto LABEL_19;
      }
    }

    *(void *)(v0 + 8) = v2;
    unint64_t v28 = v11 | (v15 << v10);
    *(void *)(v0 + 24) = v28;
    *(void *)(v14 + 8 * v13) = v2;
    *(_BYTE *)(v0 + 136) = v7;
    uint64_t v29 = v35;
    *(_BYTE *)(v0 + 137) = v35;
    uint64_t v1 = *(void *)(v2 + 16LL * v15 + 32);
    *(void *)(v0 + 8) = v1;
    *(_DWORD *)(v0 + 16) = 0;
    swift_beginAccess();
    __int128 v30 = *(_DWORD *)(v1 + 16);
    __int128 v31 = (uint8x8_t)vcnt_s8((int8x8_t)v30);
    v31.i16[0] = vaddlv_u8(v31);
    if (v30 != *(_DWORD *)(v1 + 20)) {
      __int128 v30 = v31.i32[0];
    }
    *(_DWORD *)(v0 + 20) = v30;
    if (!v30)
    {
      do
      {
        *(void *)(v14 + 8LL * v7) = v1;
        v29 += 5;
        uint64_t v1 = *(void *)(v1 + 32);
        swift_beginAccess();
        __int128 v32 = *(_DWORD *)(v1 + 16);
        __int128 v33 = (uint8x8_t)vcnt_s8((int8x8_t)v32);
        v33.i16[0] = vaddlv_u8(v33);
        if (v32 != *(_DWORD *)(v1 + 20)) {
          __int128 v32 = v33.i32[0];
        }
        ++v7;
      }

      while (!v32);
      *(_DWORD *)(v0 + 20) = v32;
      *(void *)(v0 + 8) = v1;
      *(_BYTE *)(v0 + 137) = v29;
      *(_BYTE *)(v0 + 136) = v7;
      *(void *)(v0 + 24) = v28;
    }

    goto LABEL_36;
  }

    __int128 v31 = v23;
    __n128 result = sub_188D37044(a1, a4, a5);
    int v23 = v31;
    unint64_t v28 = v60;
    a1 = result;
    if ((a5 & 0x1000000000000000LL) != 0) {
      goto LABEL_37;
    }
    goto LABEL_26;
  }

  __int128 v55 = v26;
  __int128 v56 = v23;
  __int128 v32 = sub_188DF7FD0();
  uint64_t v26 = v33;
  uint64_t v6 = MEMORY[0x1895D6D14](a1, v32, v34, v35, v33);
  swift_bridgeObjectRelease();
  if (v30 < v6 >> 14)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  __int128 v36 = sub_188DF7FD0();
  __int128 v16 = (unint64_t)v59;
  sub_188DCAFBC(v36, v37, v38, v39);
  unint64_t v40 = sub_188DF7FD0();
  unint64_t v44 = sub_188DCB360(v40, v41, v42, v43);
  uint64_t v6 = v45;
  unint64_t v47 = v46;
  __n128 result = swift_bridgeObjectRelease();
  if ((v47 & 1) != 0)
  {
    if ((a1 & 0xC) != v31) {
      goto LABEL_28;
    }
    goto LABEL_61;
  }

  uint64_t v26 = v44 + 1;
  if (__OFADD__(v44, 1LL)) {
    goto LABEL_48;
  }
  if ((v26 & 0x8000000000000000LL) != 0)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }

  if (v26 <= 0xFF)
  {
    if ((a1 & 0xC) != v31) {
      goto LABEL_21;
    }
    goto LABEL_51;
  }

  *a1 = v9;
  a1[1] = v38;
  a1[2] = v39;
  a1[3] = v40;
  a1[4] = v41;
  a1[5] = v8;
  return result;
}

      __break(1u);
    }

    else
    {
      swift_unknownObjectRetain();
LABEL_28:
      char v24 = sub_188DBCDE8((uint64_t)(v9 + 2), (uint64_t)(v9 + 3), &v59);
      uint64_t v26 = v25;
      __int128 v62 = v9;
      __int128 v63 = *(_OWORD *)&v60[8];
      __int128 v64 = *(void *)&v60[24];
      __int128 v65 = v12;
      swift_unknownObjectRetain();
      sub_188DB9AF4(v24, a2, (uint64_t)&v54);
      unint64_t v28 = v54;
      uint64_t v27 = v55;
      uint64_t v29 = v56 | ((unint64_t)v57 << 32) | ((unint64_t)v58 << 40);
      __int128 v30 = sub_188D95994(v26, v54, v55);
      __int128 v31 = sub_188D82630(v30, v28, v27, v29);
      __int128 v50 = v32;
      __n128 v51 = HIBYTE(v32);
      __int128 v53 = HIWORD(v31);
      swift_bridgeObjectRetain();
      __int128 v33 = sub_188D0EFD0(v30, v28, v27);
      __int128 v35 = v34;
      __int128 v37 = v36;
      unint64_t v39 = v38;
      swift_bridgeObjectRelease();
      unint64_t v40 = MEMORY[0x1895D6684](v33, v35, v37, v39);
      unint64_t v42 = v41;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      unint64_t v43 = sub_188DF7FD0();
      unint64_t v45 = v44;
      unint64_t v47 = v46;
      __int128 v49 = v48;
      swift_bridgeObjectRelease();
      MEMORY[0x1895D6684](v43, v45, v47, v49);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_188DB77B8( v40,  v42,  (v50 << 16) & 0xFF0000LL | v53 | (v50 << 16) & 0xFF000000 | (v51 << 40) | ((unint64_t)BYTE2(v50) << 32));
      sub_188D087F8(v7);
      swift_unknownObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }

  return result;
}

            __int128 v33 = v55 + 1;
            if (v55 + 1 < (unint64_t)*(unsigned __int16 *)(v27 + 16))
            {
              __int128 v34 = (__int128 *)(v54 + 40LL * v33);
              __int128 v36 = *v34;
              __int128 v35 = v34[1];
              unint64_t v82 = *((void *)v34 + 4);
              v81[0] = v36;
              v81[1] = v35;
              __n128 result = v36;
              __int128 v37 = *(unsigned __int8 *)(v36 + 18) + 1;
              if (((v37 >> 8) & 1) != 0) {
                goto LABEL_57;
              }
              __int128 v67 = ((-256LL << (4 * (v37 & 0xF))) | 0xFF) & (v67 & ((-15LL << v53) - 1) | (v33 << v53));
              uint64_t v38 = v67;
              swift_unknownObjectRetain();
              uint64_t v10 = sub_188D7F6E0(v38);
              sub_188D087F8((uint64_t)v81);
              __int128 v68 = v10;
              goto LABEL_39;
            }

            swift_unknownObjectRelease();
            uint64_t v10 = v62;
LABEL_42:
            unint64_t v39 = v20 + 1;
            if (v20 + 1 < (unint64_t)*(unsigned __int16 *)(v10 + 16))
            {
              unint64_t v40 = v58 + 40LL * v39;
              unint64_t v42 = *(_OWORD *)v40;
              unint64_t v41 = *(_OWORD *)(v40 + 16);
              __int128 v80 = *(void *)(v40 + 32);
              v79[0] = v42;
              v79[1] = v41;
              __n128 result = v42;
              unint64_t v43 = *(unsigned __int8 *)(v42 + 18) + 1;
              if (((v43 >> 8) & 1) != 0) {
                goto LABEL_58;
              }
              __int128 v67 = ((-256LL << (4 * (v43 & 0xF))) | 0xFF) & (v67 & ((-15LL << v56) - 1) | (v39 << v56));
              unint64_t v44 = v67;
              swift_unknownObjectRetain();
              uint64_t v10 = sub_188D7F6E0(v44);
              sub_188D087F8((uint64_t)v79);
              __int128 v68 = v10;
              swift_unknownObjectRelease();
              uint64_t v8 = v63;
              goto LABEL_49;
            }

            swift_unknownObjectRelease();
LABEL_46:
            unint64_t v45 = v18 + 1;
            if (v18 + 1 >= (unint64_t)*(unsigned __int16 *)(v3 + 16))
            {
              sub_188D087F8((uint64_t)a1);
              uint64_t v29 = *(unsigned __int8 *)(v3 + 18);
              goto LABEL_51;
            }

            unint64_t v46 = v60 + 40LL * v45;
            __n128 v48 = *(_OWORD *)v46;
            unint64_t v47 = *(_OWORD *)(v46 + 16);
            uint64_t v78 = *(void *)(v46 + 32);
            v77[0] = v48;
            v77[1] = v47;
            __n128 result = v48;
            __int128 v49 = *(unsigned __int8 *)(v48 + 18) + 1;
            uint64_t v8 = v63;
            if (((v49 >> 8) & 1) != 0) {
              goto LABEL_56;
            }
            __int128 v67 = ((-256LL << (4 * (v49 & 0xF))) | 0xFF) & (v67 & ((-15LL << v17) - 1) | (v45 << v17));
            __int128 v50 = v67;
            swift_unknownObjectRetain();
            uint64_t v10 = sub_188D7F6E0(v50);
            sub_188D087F8((uint64_t)v77);
            __int128 v68 = v10;
            goto LABEL_49;
          }

          __int128 v31 = v22;
          __int128 v32 = ((v11 >> v26) & 0xF) + 1;
          if (v32 >= *(unsigned __int16 *)(v10 + 16))
          {
            __int128 v55 = (v11 >> v23) & 0xF;
            __int128 v56 = v19;
            __int128 v53 = v23;
            __int128 v54 = v22 + 24;
            __int128 v58 = v21;
            sub_188D07F48((uint64_t)a1);
            swift_unknownObjectRetain();
            uint64_t v27 = v31;
            swift_unknownObjectRetain();
            goto LABEL_36;
          }

          __int128 v67 = (v32 << v26) | ((-15LL << v26) - 1) & v11;
          __int128 v68 = v10;
          sub_188D07F48((uint64_t)a1);
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
LABEL_39:
          swift_unknownObjectRelease();
        }

        else
        {
          if (v24 + 1 >= (unint64_t)*(unsigned __int16 *)(v22 + 16))
          {
            __int128 v56 = (4 * *(_BYTE *)(v10 + 18) + 8) & 0x3C;
            __int128 v58 = v10 + 24;
            sub_188D07F48((uint64_t)a1);
            swift_unknownObjectRetain();
            goto LABEL_42;
          }

          __int128 v67 = ((v24 + 1) << v23) | ((-15LL << v23) - 1) & v11;
          __int128 v68 = v22;
          __int128 v30 = v22;
          sub_188D07F48((uint64_t)a1);
          swift_unknownObjectRetain();
          uint64_t v10 = v30;
        }

        uint64_t v8 = v63;
        swift_unknownObjectRelease();
      }

      else
      {
        if (v20 + 1 >= (unint64_t)*(unsigned __int16 *)(v10 + 16))
        {
          swift_unknownObjectRetain();
          goto LABEL_46;
        }

        __int128 v67 = ((v20 + 1) << v19) | ((-15LL << v19) - 1) & v11;
        __int128 v68 = v10;
        swift_unknownObjectRetain();
        uint64_t v8 = v63;
      }

    __break(1u);
    goto LABEL_37;
  }

  swift_unknownObjectRetain();
  sub_188DEEDC0(&v63, v58, a2);
  __int128 v12 = *((void *)&v63 + 1);
  __n128 v51 = v63;
  unint64_t v14 = *((void *)&v64 + 1);
  __int128 v13 = v64;
  char v15 = v65;
  __n128 result = swift_unknownObjectRelease();
  uint64_t v17 = v58[0];
  uint64_t v18 = v4[1];
  char v19 = __OFADD__(v18, v58[0]);
  unint64_t v20 = v18 + v58[0];
  if (v19)
  {
    __break(1u);
    goto LABEL_33;
  }

  char v21 = v58[1];
  unsigned int v22 = v58[2];
  int v23 = v58[3];
  v4[1] = v20;
  char v24 = v4[2];
  char v19 = __OFADD__(v24, v21);
  uint64_t v25 = v24 + v21;
  if (v19)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

  v4[2] = v25;
  uint64_t v26 = v4[3];
  char v19 = __OFADD__(v26, v22);
  uint64_t v27 = v26 + v22;
  if (v19)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  v4[3] = v27;
  unint64_t v28 = v4[4];
  char v19 = __OFADD__(v28, v23);
  uint64_t v29 = v28 + v23;
  if (v19)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  v4[4] = v29;
  __n128 result = v51;
  if (!v51)
  {
    *a1 = v17;
    a1[1] = v21;
    a1[2] = v22;
    a1[3] = v23;
    goto LABEL_31;
  }

  v57[0] = v51;
  v57[1] = v12;
  v57[2] = v13;
  v57[3] = v14;
  v57[4] = v15;
  if (*(_WORD *)(*v4 + 16LL) == 15)
  {
    __int128 v30 = v23;
    swift_unknownObjectRetain();
    __n128 result = sub_188DEE920(7LL, (uint64_t)&v63);
    __int128 v54 = v63;
    __int128 v55 = v64;
    __int128 v56 = v65;
    __int128 v31 = v17 - *((void *)&v63 + 1);
    if (!__OFSUB__(v17, *((void *)&v63 + 1)))
    {
      __int128 v32 = v21 - v64;
      if (!__OFSUB__(v21, (void)v64))
      {
        __int128 v33 = v22 - *((void *)&v64 + 1);
        if (!__OFSUB__(v22, *((void *)&v64 + 1)))
        {
          __int128 v34 = v30 - v65;
          if (!__OFSUB__(v30, v65))
          {
            sub_188DEF570((uint64_t)v57);
            swift_unknownObjectRelease();
            __int128 v12 = *((void *)&v54 + 1);
            __n128 result = v54;
            unint64_t v14 = *((void *)&v55 + 1);
            __int128 v13 = v55;
            char v15 = v56;
            *a1 = v31;
            a1[1] = v32;
            a1[2] = v33;
            a1[3] = v34;
LABEL_31:
            *a3 = result;
            a3[1] = v12;
            a3[2] = v13;
            a3[3] = v14;
            a3[4] = v15;
            return result;
          }

          goto LABEL_43;
        }

      __break(1u);
      goto LABEL_37;
    }

LABEL_39:
  __break(1u);
  return result;
}

        __n128 result = v17 - a9;
        if (!__OFSUB__(v17, a9)) {
          return result;
        }
        __break(1u);
      }

    __break(1u);
    goto LABEL_40;
  }

  __int128 v53 = v17 + v12;
  if (__OFADD__(v17, v12))
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }

  __int128 v54 = v21 + v13;
  if (__OFADD__(v21, v13))
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }

  char v19 = __OFADD__(v22, v14);
  __int128 v55 = v22 + v14;
  if (v19)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }

  __int128 v56 = v53;
  __int128 v57 = v23 + v15;
  if (!__OFADD__(v23, v15))
  {
    sub_188DF3BB4((uint64_t)v65, 0LL);
    swift_unknownObjectRelease();
    __n128 result = 0LL;
    __int128 v12 = 0LL;
    __int128 v13 = 0LL;
    unint64_t v14 = 0LL;
    char v15 = 0LL;
    *a1 = v56;
    a1[1] = v54;
    a1[2] = v55;
    a1[3] = v57;
    goto LABEL_30;
  }

_WORD *sub_188D09BC0(_WORD *result, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v4 = (unsigned __int16)*result;
  uint64_t v5 = *a3;
  if (*result)
  {
    __n128 result = 0LL;
    uint64_t v6 = (unsigned __int8 *)(a2 + 16);
    uint64_t v7 = ~a4 & 1LL;
    uint64_t v8 = *a3;
    while (1)
    {
      unsigned int v9 = *v6;
      v6 += 24;
      uint64_t v5 = v8 - v9;
      if (__OFSUB__(v8, v9)) {
        break;
      }
      if (__OFADD__(v5, v7)) {
        goto LABEL_11;
      }
      if (v5 + v7 < 1) {
        return result;
      }
      __n128 result = (_WORD *)((char *)result + 1);
      uint64_t v8 = v5;
      if ((_WORD *)v4 == result) {
        goto LABEL_7;
      }
    }

    __break(1u);
LABEL_11:
    __break(1u);
  }

  else
  {
LABEL_7:
    if (!v5) {
      return (_WORD *)(v4 - (a4 & 1));
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_188D09C38(uint64_t result, char a2)
{
  uint64_t v3 = *v2;
  if (*v2) {
    uint64_t v4 = v2[4];
  }
  else {
    uint64_t v4 = 0LL;
  }
  if ((result & 0x8000000000000000LL) == 0)
  {
    uint64_t v5 = result;
    if (v4 >= result)
    {
      uint64_t v6 = v2[5];
      if (v3 && *(_WORD *)(v3 + 16) && (v2[4] > result) | a2 & 1)
      {
        uint64_t v17 = result;
        uint64_t v8 = *(unsigned __int8 *)(v3 + 18);
        if (*(_BYTE *)(v3 + 18))
        {
          BOOL v9 = (a2 & 1) == 0;
          __n128 result = swift_unknownObjectRetain();
          while (1)
          {
            uint64_t v11 = *(unsigned __int16 *)(v3 + 16);
            if (*(_WORD *)(v3 + 16)) {
              break;
            }
            uint64_t v14 = 0LL;
LABEL_21:
            if (v5) {
              goto LABEL_35;
            }
            if ((a2 & 1) != 0)
            {
              if (!*(_WORD *)(v3 + 16)) {
                goto LABEL_34;
              }
              --v11;
              uint64_t v5 = v14;
            }

            else
            {
              uint64_t v5 = 0LL;
            }

LABEL_12:
            char v10 = (4 * *(_BYTE *)(v3 + 18) + 8) & 0x3C;
            uint64_t v8 = ((-15LL << v10) - 1) & v8 | (v11 << v10);
            uint64_t v3 = *(void *)(v3 + 24 + 40 * v11);
            swift_unknownObjectRetain();
            __n128 result = swift_unknownObjectRelease();
            if (!*(_BYTE *)(v3 + 18))
            {
              uint64_t v17 = v5;
              goto LABEL_29;
            }
          }

          uint64_t v12 = 0LL;
          __int128 v13 = (uint64_t *)(v3 + 56);
          while (1)
          {
            uint64_t v15 = *v13;
            v13 += 5;
            uint64_t v14 = v15;
            uint64_t v16 = v5 - v15;
            if (__OFSUB__(v5, v15)) {
              break;
            }
            if (__OFADD__(v16, v9)) {
              goto LABEL_33;
            }
            if (v16 + v9 < 1)
            {
              uint64_t v11 = v12;
              goto LABEL_12;
            }

            ++v12;
            uint64_t v5 = v16;
            if (v11 == v12)
            {
              uint64_t v5 = v16;
              goto LABEL_21;
            }
          }

          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
          goto LABEL_36;
        }

        swift_unknownObjectRetain();
LABEL_29:
        __n128 result = (uint64_t)sub_188D09BC0((_WORD *)(v3 + 16), v3 + 24, &v17, a2 & 1);
        if (result < 0) {
          goto LABEL_37;
        }
        swift_unknownObjectRelease();
      }

      else
      {
        sub_188D36DF0();
      }

      return v6;
    }
  }

    uint64_t v3 = sub_188CF73DC((uint64_t)v3);
    goto LABEL_9;
  }

  if ((uint64_t)(v6 - v7) >= 0)
  {
    swift_bridgeObjectRetain();
    sub_188D2EF64(v8, 0LL);
    uint64_t v3 = v10;
    goto LABEL_8;
  }

  __break(1u);
  return result;
}

      swift_storeEnumTagMultiPayload();
      return a1;
    }

    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

      swift_storeEnumTagMultiPayload();
      return a1;
    }

    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

      __break(1u);
      goto LABEL_13;
    }
  }

  else if (v3 < 0 || v3 >= (unint64_t)offsetBy)
  {
    goto LABEL_9;
  }

  _ = 0LL;
  LOBYTE(offsetBy) = 1;
LABEL_13:
  result.is_nil = offsetBy;
  result.value = _;
  return result;
}

  __break(1u);
  return result;
}

    uint64_t v7 = *v2;
    char v10 = v2[1];
    uint64_t v11 = sub_188DC9D84(v1, *v2, v10);
    if ((v10 & 0x1000000000000000LL) != 0)
    {
      uint64_t v17 = sub_188DF7E08();
    }

    else
    {
      uint64_t v12 = v11 >> 16;
      if ((v10 & 0x2000000000000000LL) != 0)
      {
        char v19 = v7;
        unint64_t v20 = v10 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v14 = *((unsigned __int8 *)&v19 + v12);
      }

      else
      {
        __int128 v13 = (v7 & 0x1000000000000000LL) != 0 ? (v10 & 0xFFFFFFFFFFFFFFFLL) + 32 : sub_188DF8684();
        uint64_t v14 = *(unsigned __int8 *)(v13 + v12);
      }

      uint64_t v15 = (char)v14;
      uint64_t v16 = __clz(v14 ^ 0xFF) - 24;
      if (v15 >= 0) {
        LOBYTE(v16) = 1;
      }
      uint64_t v17 = ((v12 + v16) << 16) | 5;
    }

    if (v17 >> 14 >= v1 >> 14) {
      break;
    }
    __break(1u);
LABEL_27:
    ;
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C74AA48);
  sub_188D6354C();
  sub_188DF7E20();
  return v9;
}

      __break(1u);
      goto LABEL_13;
    }
  }

  else if (v3 < 0 || v3 >= (unint64_t)offsetBy)
  {
    goto LABEL_9;
  }

  _ = 0LL;
  LOBYTE(offsetBy) = 1;
LABEL_13:
  result.is_nil = offsetBy;
  result.value = _;
  return result;
}

      __break(1u);
      goto LABEL_13;
    }
  }

  else if (v3 < 0 || v3 >= (unint64_t)offsetBy)
  {
    goto LABEL_9;
  }

  _ = 0LL;
  LOBYTE(offsetBy) = 1;
LABEL_13:
  result.is_nil = offsetBy;
  result.value = _;
  return result;
}

      uint64_t v7 = sub_188CF73DC((uint64_t)v7);
      *uint64_t v2 = v7;
      goto LABEL_9;
    }

    __break(1u);
    goto LABEL_13;
  }

  uint64_t v12 = __CFADD__(v11, v10);
  v11 += v10;
  if (v12)
  {
    __break(1u);
    goto LABEL_16;
  }

  if (v11 >= 0xFFFFFFFFFFFFFFC0LL)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  __n128 result = ((v11 + 63) >> 6) - *((void *)*v4 + 2);
  if (result >= 0)
  {
    sub_188D2EF64(result, 0LL);
    v4[1] = (char *)v11;
    goto LABEL_7;
  }

  __break(1u);
  return result;
}

    uint64_t v3 = sub_188CF73DC((uint64_t)v3);
    goto LABEL_9;
  }

  if ((uint64_t)(v6 - v7) >= 0)
  {
    swift_bridgeObjectRetain();
    sub_188D2EF64(v8, 0LL);
    uint64_t v3 = (char *)a3;
    goto LABEL_8;
  }

  __break(1u);
  return result;
}

      __break(1u);
      goto LABEL_13;
    }
  }

  else if (v3 < 0 || v3 >= (unint64_t)offsetBy)
  {
    goto LABEL_9;
  }

  _ = 0LL;
  LOBYTE(offsetBy) = 1;
LABEL_13:
  result.is_nil = offsetBy;
  result.value = _;
  return result;
}

      __break(1u);
      goto LABEL_13;
    }
  }

  else if (v8 < 0 || v8 >= (unint64_t)offsetBy)
  {
    goto LABEL_9;
  }

  uint64_t v6 = 0LL;
  uint64_t v7 = 1;
LABEL_13:
  result.value = v6;
  result.is_nil = v7;
  return result;
}

  __break(1u);
}

  __break(1u);
}

BOOL BitSet.isStrictSuperset(of:)(void *a1, void *a2)
{
  return BitSet.isStrictSubset(of:)(a2, a1);
}

BOOL BitSet.isStrictSuperset(of:)(void *a1, uint64_t a2, void *a3)
{
  return BitSet.isStrictSubset(of:)(a3, a1);
}

uint64_t BitSet.isStrictSuperset(of:)(uint64_t result, unint64_t a2, uint64_t *a3)
{
  uint64_t v3 = a3[2];
  if (result != a2)
  {
    if (v3)
    {
      uint64_t v5 = result;
      uint64_t v6 = (uint64_t)(a3 + 4);
      if (!a3[4])
      {
        if (v3 == 1) {
          return 0LL;
        }
        if (!a3[5])
        {
          if (v3 == 2) {
            return 0LL;
          }
          for (uint64_t i = 6LL; !a3[i]; ++i)
          {
            uint64_t v11 = i - 3;
            if (__OFADD__(i - 4, 1LL))
            {
LABEL_32:
              __break(1u);
              return result;
            }

            __n128 result = 0LL;
            if (v11 == v3) {
              return result;
            }
          }
        }
      }

      sub_188D755D4((uint64_t)(a3 + 4), a3[2], 0x8000000000000000LL, v5, &v12);
      if (v12 == v13)
      {
        sub_188D755D4(v6, v3, a2, 0x7FFFFFFFFFFFFFFFLL, &v12);
        __n128 result = 0LL;
        if (((a2 | v5) & 0x8000000000000000LL) != 0 || v12 == v13) {
          return result;
        }
        return _UnsafeBitSet.isSuperset(of:)(v5, a2, v6, v3);
      }

      if (((a2 | v5) & 0x8000000000000000LL) == 0) {
        return _UnsafeBitSet.isSuperset(of:)(v5, a2, v6, v3);
      }
    }

    return 0LL;
  }

  if (!v3) {
    return 0LL;
  }
  if (a3[4]) {
    return 1LL;
  }
  if (v3 == 1) {
    return 0LL;
  }
  if (a3[5]) {
    return 1LL;
  }
  if (v3 == 2) {
    return 0LL;
  }
  uint64_t v7 = 6LL;
  do
  {
    uint64_t v8 = a3[v7];
    __n128 result = v8 != 0;
    if (v8) {
      break;
    }
    uint64_t v9 = v7 - 3;
    if (__OFADD__(v7 - 4, 1LL))
    {
      __break(1u);
      goto LABEL_32;
    }

    ++v7;
  }

  while (v9 != v3);
  return result;
}

void *BitSet.isStrictSuperset<A>(of:)(uint64_t a1, uint64_t *a2, ValueMetadata *a3, uint64_t a4)
{
  Description = (void (**)(char *, void, ValueMetadata *))a3[-1].Description;
  __n128 result = (void *)MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)&v19[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *(void *)(v12 + 16);
  if (!v13) {
    goto LABEL_13;
  }
  if (a2[4]) {
    goto LABEL_3;
  }
  if (v13 == 1)
  {
LABEL_13:
    char v15 = 0;
    return (void *)(v15 & 1);
  }

  uint64_t v16 = 5LL;
  while (!a2[v16])
  {
    uint64_t v17 = v16 - 3;
    if (__OFADD__(v16 - 4, 1LL))
    {
      __break(1u);
      goto LABEL_20;
    }

    ++v16;
    if (v17 == v13) {
      goto LABEL_13;
    }
  }

uint64_t *sub_188D0A1B8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, BOOL *a5@<X8>)
{
  char v21 = a5;
  uint64_t v9 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v14 = (char *)&v20 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, a4);
  sub_188DF7FDC();
  swift_getAssociatedConformanceWitness();
  sub_188DF84D4();
  if ((v23 & 1) != 0)
  {
LABEL_2:
    (*(void (**)(char *, uint64_t))(v20 + 8))(v14, AssociatedTypeWitness);
    __n128 result = sub_188DA049C(*(uint64_t **)a1, *(void *)(a1 + 8), a3);
    BOOL v16 = (result & 1) == 0;
  }

  else
  {
    unint64_t v17 = v22;
    while ((v17 & 0x8000000000000000LL) == 0)
    {
      unint64_t v18 = v17 >> 6;
      if (v17 >> 6 >= *(void *)(a3 + 16)) {
        break;
      }
      uint64_t v19 = 1LL << v17;
      if ((*(void *)(a3 + 32 + 8 * v18) & v19) == 0) {
        break;
      }
      *(void *)(*(void *)a1 + 8 * v18) |= v19;
      sub_188DF84D4();
      unint64_t v17 = v22;
      if ((v23 & 1) != 0) {
        goto LABEL_2;
      }
    }

    __n128 result = (uint64_t *)(*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v14, AssociatedTypeWitness);
    BOOL v16 = 0;
  }

  *char v21 = v16;
  return result;
}

uint64_t *sub_188D0A3AC@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  return sub_188D0A1B8(a1, v2[4], v2[5], v2[2], a2);
}

uint64_t _AncestorHashSlots.path.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_AncestorHashSlots.path.modify())()
{
  return nullsub_1;
}

BOOL static _AncestorHashSlots.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t static _AncestorHashSlots.empty.getter()
{
  return 0LL;
}

uint64_t _AncestorHashSlots.subscript.getter(char a1, unint64_t a2)
{
  return (a2 >> a1) & 0x1F;
}

uint64_t _AncestorHashSlots.subscript.setter(uint64_t result, char a2)
{
  *v2 |= (unint64_t)result << a2;
  return result;
}

uint64_t (*_AncestorHashSlots.subscript.modify(uint64_t a1, char a2))(uint64_t result)
{
  *(void *)a1 = v2;
  *(_BYTE *)(a1 + 12) = a2;
  *(_DWORD *)(a1 + 8) = (*v2 >> a2) & 0x1F;
  return sub_188D0A44C;
}

uint64_t sub_188D0A44C(uint64_t result)
{
  **(void **)result |= (unint64_t)*(unsigned int *)(result + 8) << *(_BYTE *)(result + 12);
  return result;
}

unint64_t _AncestorHashSlots.appending(_:at:)(unsigned int a1, char a2, uint64_t a3)
{
  return ((unint64_t)a1 << a2) | a3;
}

uint64_t _AncestorHashSlots.clear(_:)(uint64_t result)
{
  return result;
}

uint64_t _AncestorHashSlots.clear(atOrBelow:)(uint64_t result)
{
  return result;
}

uint64_t _AncestorHashSlots.truncating(to:)(unsigned __int8 a1, uint64_t a2)
{
  if (a1 < 0x40u) {
    uint64_t v2 = ~(-1LL << a1);
  }
  else {
    uint64_t v2 = -1LL;
  }
  return v2 & a2;
}

BOOL _AncestorHashSlots.hasDataBelow(_:)(unsigned __int8 a1, unint64_t a2)
{
  return a1 < 0x40u && a2 >> a1 != 0;
}

uint64_t _AncestorHashSlots.isEqual(to:upTo:)(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  if (!a2) {
    return 1LL;
  }
  if (a2 >= 0x40u) {
    return a3 == a1;
  }
  return a3 << -a2 == a1 << -a2;
}

ValueMetadata *type metadata accessor for _AncestorHashSlots()
{
  return &type metadata for _AncestorHashSlots;
}

uint64_t sub_188D0A548()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_188D0A574@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_188D0C870(a1, a2);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v5;
  *(void *)(a3 + 16) = v7;
  *(_BYTE *)(a3 + 24) = v6 & 1;
  return result;
}

uint64_t sub_188D0A5A4()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_188D0A5B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_188DF88D0();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = a1;
  *(_BYTE *)(a2 + 24) = 0;
  return result;
}

uint64_t sub_188D0A608()
{
  return sub_188DF8B7C();
}

uint64_t sub_188D0A630()
{
  return sub_188DF8B88();
}

uint64_t TreeDictionary<>.encode(to:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = v9;
  v92[2] = a4;
  uint64_t v93 = a8;
  uint64_t v97 = a7;
  v92[1] = a3;
  uint64_t v94 = a2;
  __int128 v95 = a1;
  uint64_t v110 = a9;
  uint64_t v138 = *(void *)(a5 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](a1);
  __int128 v99 = (char *)v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = MEMORY[0x1895F8858](v13);
  unint64_t v108 = (char *)v92 - v16;
  uint64_t v107 = *(void *)(v17 - 8);
  uint64_t v18 = MEMORY[0x1895F8858](v15);
  __int128 v96 = (char *)v92 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = MEMORY[0x1895F8858](v18);
  __int128 v102 = (char *)v92 - v21;
  uint64_t v22 = MEMORY[0x1895F8858](v20);
  uint64_t v100 = (char *)v92 - v23;
  MEMORY[0x1895F8858](v22);
  uint64_t v25 = (char *)v92 - v24;
  TupleTypeMetadata2 = (void *)swift_getTupleTypeMetadata2();
  uint64_t v27 = sub_188DF8384();
  uint64_t v112 = *(void *)(v27 - 8);
  uint64_t v113 = v27;
  uint64_t v28 = MEMORY[0x1895F8858](v27);
  uint64_t v98 = (char *)v92 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = MEMORY[0x1895F8858](v28);
  __int128 v101 = (char *)v92 - v31;
  uint64_t v32 = MEMORY[0x1895F8858](v30);
  __int128 v34 = (char *)v92 - v33;
  uint64_t v35 = MEMORY[0x1895F8858](v32);
  uint64_t v111 = (uint64_t)v92 - v36;
  MEMORY[0x1895F8858](v35);
  uint64_t v38 = (char *)v92 - v37;
  uint64_t v109 = (void *)__swift_instantiateConcreteTypeFromMangledName(&qword_18C749F68);
  unint64_t v39 = (char *)*(v109 - 1);
  uint64_t v40 = MEMORY[0x1895F8858](v109);
  __int128 v104 = (void *)((char *)v92 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v42 = MEMORY[0x1895F8858](v40);
  __int128 v103 = (char *)v92 - v43;
  MEMORY[0x1895F8858](v42);
  __int128 v106 = TupleTypeMetadata2;
  if (a5 == MEMORY[0x189617FA8])
  {
    __int128 v99 = v39;
    uint64_t v62 = v95[3];
    __int128 v104 = (void *)v95[4];
    __int128 v63 = (char *)v92 - v44;
    __swift_project_boxed_opaque_existential_1(v95, v62);
    sub_188D0B2B4();
    uint64_t v105 = v63;
    sub_188DF8B10();
    uint64_t v64 = MEMORY[0x189617FA8];
    uint64_t v65 = v93;
    TreeDictionary.makeIterator()(v94, (uint64_t)&v126);
    __int128 v104 = (void *)type metadata accessor for TreeDictionary.Iterator(0LL, v64, a6, v65);
    swift_retain();
    while (1)
    {
      uint64_t v66 = v111;
      TreeDictionary.Iterator.next()(v104, v111);
      (*(void (**)(char *, uint64_t, uint64_t))(v112 + 32))(v38, v66, v113);
      if ((*(unsigned int (**)(char *, uint64_t, void *))(*(TupleTypeMetadata2 - 1) + 48LL))( v38,  1LL,  TupleTypeMetadata2) == 1)
      {
        __int128 v124 = v132;
        v125[0] = v133[0];
        *(_OWORD *)((char *)v125 + 11) = *(_OWORD *)((char *)v133 + 11);
        __int128 v120 = v128;
        __int128 v121 = v129;
        __int128 v122 = v130;
        __int128 v123 = v131;
        __int128 v118 = v126;
        __int128 v119 = v127;
        sub_188CFE7A8((uint64_t)&v118);
        return (*((uint64_t (**)(char *, void *))v99 + 1))(v105, v109);
      }

      __int128 v67 = &v38[*((int *)TupleTypeMetadata2 + 12)];
      uint64_t v68 = v107;
      (*(void (**)(char *, char *, uint64_t))(v107 + 32))(v25, v67, a6);
      (*(void (**)(char *, char *, uint64_t))(v138 + 32))(v108, v38, v64);
      swift_dynamicCast();
      uint64_t v134 = sub_188D0C870(v118, *((unint64_t *)&v118 + 1));
      uint64_t v135 = v69;
      uint64_t v136 = v70;
      LOBYTE(v137) = v71 & 1;
      sub_188DF88B8();
      if (v9) {
        break;
      }
      (*(void (**)(char *, uint64_t))(v68 + 8))(v25, a6);
      swift_bridgeObjectRelease();
      TupleTypeMetadata2 = v106;
    }

    (*(void (**)(char *, uint64_t))(v68 + 8))(v25, a6);
    __int128 v124 = v132;
    v125[0] = v133[0];
    *(_OWORD *)((char *)v125 + 11) = *(_OWORD *)((char *)v133 + 11);
    __int128 v120 = v128;
    __int128 v121 = v129;
    __int128 v122 = v130;
    __int128 v123 = v131;
    __int128 v118 = v126;
    __int128 v119 = v127;
    sub_188CFE7A8((uint64_t)&v118);
    (*((void (**)(char *, void *))v99 + 1))(v105, v109);
    return swift_bridgeObjectRelease();
  }

  else
  {
    unint64_t v45 = v95;
    uint64_t v105 = (char *)a6;
    if (a5 == MEMORY[0x189618740])
    {
      __int128 v99 = v39;
      __swift_project_boxed_opaque_existential_1(v95, v95[3]);
      sub_188D0B2B4();
      sub_188DF8B10();
      uint64_t v72 = MEMORY[0x189618740];
      uint64_t v73 = v93;
      TreeDictionary.makeIterator()(v94, (uint64_t)&v126);
      __int128 v104 = (void *)type metadata accessor for TreeDictionary.Iterator(0LL, v72, a6, v73);
      swift_retain();
      __int128 v74 = v100;
      while (1)
      {
        uint64_t v75 = v111;
        TreeDictionary.Iterator.next()(v104, v111);
        (*(void (**)(char *, uint64_t, uint64_t))(v112 + 32))(v34, v75, v113);
        if ((*(unsigned int (**)(char *, uint64_t, void *))(*(TupleTypeMetadata2 - 1) + 48LL))( v34,  1LL,  TupleTypeMetadata2) == 1)
        {
          __int128 v124 = v132;
          v125[0] = v133[0];
          *(_OWORD *)((char *)v125 + 11) = *(_OWORD *)((char *)v133 + 11);
          __int128 v120 = v128;
          __int128 v121 = v129;
          __int128 v122 = v130;
          __int128 v123 = v131;
          __int128 v118 = v126;
          __int128 v119 = v127;
          sub_188CFE7A8((uint64_t)&v118);
          return (*((uint64_t (**)(char *, void *))v99 + 1))(v103, v109);
        }

        __int128 v76 = &v34[*((int *)TupleTypeMetadata2 + 12)];
        uint64_t v77 = v107;
        (*(void (**)(char *, char *, uint64_t))(v107 + 32))(v74, v76, a6);
        (*(void (**)(char *, char *, uint64_t))(v138 + 32))(v108, v34, v72);
        swift_dynamicCast();
        uint64_t v78 = v118;
        uint64_t v134 = v118;
        uint64_t v134 = sub_188DF88D0();
        uint64_t v135 = v79;
        uint64_t v136 = v78;
        a6 = (uint64_t)v105;
        LOBYTE(v137) = 0;
        sub_188DF88B8();
        if (v9) {
          break;
        }
        (*(void (**)(char *, uint64_t))(v77 + 8))(v74, a6);
        swift_bridgeObjectRelease();
        TupleTypeMetadata2 = v106;
      }

      (*(void (**)(char *, uint64_t))(v77 + 8))(v74, a6);
      __int128 v124 = v132;
      v125[0] = v133[0];
      *(_OWORD *)((char *)v125 + 11) = *(_OWORD *)((char *)v133 + 11);
      __int128 v120 = v128;
      __int128 v121 = v129;
      __int128 v122 = v130;
      __int128 v123 = v131;
      __int128 v118 = v126;
      __int128 v119 = v127;
      sub_188CFE7A8((uint64_t)&v118);
      (*((void (**)(char *, void *))v99 + 1))(v103, v109);
      return swift_bridgeObjectRelease();
    }

    else
    {
      if (swift_conformsToProtocol2()) {
        uint64_t v46 = a5;
      }
      else {
        uint64_t v46 = 0LL;
      }
      uint64_t v47 = a5;
      if (v46)
      {
        __int128 v99 = v39;
        __swift_project_boxed_opaque_existential_1(v45, v45[3]);
        sub_188D0B2B4();
        sub_188DF8B10();
        uint64_t v48 = v93;
        TreeDictionary.makeIterator()(v94, (uint64_t)&v126);
        __int128 v106 = (void *)type metadata accessor for TreeDictionary.Iterator(0LL, a5, a6, v48);
        swift_retain();
        uint64_t v49 = v107;
        __int128 v50 = v102;
        while (1)
        {
          uint64_t v51 = v111;
          TreeDictionary.Iterator.next()(v106, v111);
          __int128 v52 = v101;
          (*(void (**)(char *, uint64_t, uint64_t))(v112 + 32))(v101, v51, v113);
          if ((*(unsigned int (**)(char *, uint64_t, void *))(*(TupleTypeMetadata2 - 1) + 48LL))( v52,  1LL,  TupleTypeMetadata2) == 1)
          {
            __int128 v124 = v132;
            v125[0] = v133[0];
            *(_OWORD *)((char *)v125 + 11) = *(_OWORD *)((char *)v133 + 11);
            __int128 v120 = v128;
            __int128 v121 = v129;
            __int128 v122 = v130;
            __int128 v123 = v131;
            __int128 v118 = v126;
            __int128 v119 = v127;
            sub_188CFE7A8((uint64_t)&v118);
            return (*((uint64_t (**)(void *, void *))v99 + 1))(v104, v109);
          }

          (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v50, &v52[*((int *)TupleTypeMetadata2 + 12)], a6);
          (*(void (**)(char *, char *, uint64_t))(v138 + 32))(v108, v52, v47);
          __swift_instantiateConcreteTypeFromMangledName(&qword_18C749F78);
          uint64_t v107 = v10;
          uint64_t v53 = v47;
          swift_dynamicCast();
          __swift_project_boxed_opaque_existential_1(&v118, *((uint64_t *)&v119 + 1));
          sub_188DF8888();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v118);
          sub_188D0B2F8((uint64_t)&v134, (uint64_t)&v118);
          __swift_project_boxed_opaque_existential_1(&v118, *((uint64_t *)&v119 + 1));
          uint64_t v54 = sub_188DF8B64();
          uint64_t v56 = v55;
          __swift_project_boxed_opaque_existential_1(&v118, *((uint64_t *)&v119 + 1));
          uint64_t v57 = sub_188DF8B70();
          char v59 = v58;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v118);
          uint64_t v114 = v54;
          uint64_t v115 = v56;
          __int128 v50 = v102;
          uint64_t v116 = v57;
          char v60 = v59 & 1;
          a6 = (uint64_t)v105;
          char v117 = v60;
          uint64_t v61 = v107;
          sub_188DF88B8();
          if (v61) {
            break;
          }
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v134);
          (*(void (**)(char *, uint64_t))(v49 + 8))(v50, a6);
          swift_bridgeObjectRelease();
          uint64_t v47 = v53;
          uint64_t v10 = 0LL;
        }

        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v134);
        (*(void (**)(char *, uint64_t))(v49 + 8))(v50, a6);
        __int128 v124 = v132;
        v125[0] = v133[0];
        *(_OWORD *)((char *)v125 + 11) = *(_OWORD *)((char *)v133 + 11);
        __int128 v120 = v128;
        __int128 v121 = v129;
        __int128 v122 = v130;
        __int128 v123 = v131;
        __int128 v118 = v126;
        __int128 v119 = v127;
        sub_188CFE7A8((uint64_t)&v118);
        (*((void (**)(void *, void *))v99 + 1))(v104, v109);
        return swift_bridgeObjectRelease();
      }

      else
      {
        __swift_project_boxed_opaque_existential_1(v45, v45[3]);
        uint64_t v81 = (uint64_t)v105;
        sub_188DF8AF8();
        uint64_t v82 = v93;
        TreeDictionary.makeIterator()(v94, (uint64_t)&v126);
        uint64_t v109 = (void *)type metadata accessor for TreeDictionary.Iterator(0LL, a5, v81, v82);
        swift_retain();
        uint64_t v83 = v107;
        uint64_t v84 = v99;
        while (1)
        {
          uint64_t v85 = v111;
          TreeDictionary.Iterator.next()(v109, v111);
          uint64_t v86 = v98;
          (*(void (**)(char *, uint64_t, uint64_t))(v112 + 32))(v98, v85, v113);
          uint64_t v87 = v106;
          __int128 v88 = &v86[*((int *)v87 + 12)];
          (*(void (**)(char *, char *, uint64_t))(v138 + 32))(v84, v86, v47);
          uint64_t v89 = *(void (**)(char *, char *, uint64_t))(v83 + 32);
          __int128 v90 = v96;
          v89(v96, v88, v81);
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v134, v137);
          sub_188DF8930();
          if (v9)
          {
            (*(void (**)(char *, uint64_t))(v107 + 8))(v90, v81);
            (*(void (**)(char *, uint64_t))(v138 + 8))(v99, v47);
            break;
          }

          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v134, v137);
          sub_188DF8930();
          __int128 v91 = v90;
          uint64_t v83 = v107;
          (*(void (**)(char *, uint64_t))(v107 + 8))(v91, v81);
          (*(void (**)(char *, uint64_t))(v138 + 8))(v99, v47);
        }

        __int128 v124 = v132;
        v125[0] = v133[0];
        *(_OWORD *)((char *)v125 + 11) = *(_OWORD *)((char *)v133 + 11);
        __int128 v120 = v128;
        __int128 v121 = v129;
        __int128 v122 = v130;
        __int128 v123 = v131;
        __int128 v118 = v126;
        __int128 v119 = v127;
        sub_188CFE7A8((uint64_t)&v118);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v134);
      }
    }
  }

unint64_t sub_188D0B2B4()
{
  unint64_t result = qword_18C749F70;
  if (!qword_18C749F70)
  {
    unint64_t result = MEMORY[0x1895D7620](&unk_188DF99F8, &type metadata for _DictionaryCodingKey);
    atomic_store(result, (unint64_t *)&qword_18C749F70);
  }

  return result;
}

uint64_t sub_188D0B2F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_188D0B33C(void *a1, uint64_t *a2, uint64_t a3)
{
  return TreeDictionary<>.encode(to:)( a1,  *v3,  v3[1],  v3[2],  a2[2],  a2[3],  *(void *)(a3 - 8),  a2[4],  *(void *)(a3 - 16));
}

uint64_t TreeDictionary<>.init(from:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v159 = a6;
  uint64_t v147 = a4;
  uint64_t v153 = a1;
  uint64_t v9 = sub_188DF8384();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  char v150 = (char *)v133 - v11;
  uint64_t v12 = sub_188DF8384();
  uint64_t v13 = MEMORY[0x1895F8858](v12);
  uint64_t v157 = (char *)v133 - v14;
  uint64_t v151 = *(void *)(a2 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](v13);
  uint64_t v144 = (char *)v133 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = MEMORY[0x1895F8858](v15);
  uint8x8_t v149 = (char *)v133 - v18;
  uint64_t v19 = MEMORY[0x1895F8858](v17);
  uint64_t v156 = (char *)v133 - v20;
  uint64_t v155 = *(void *)(a3 - 8);
  uint64_t v21 = MEMORY[0x1895F8858](v19);
  uint64_t v146 = (char *)v133 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = MEMORY[0x1895F8858](v21);
  unsigned int v148 = (char *)v133 - v24;
  uint64_t v25 = MEMORY[0x1895F8858](v23);
  uint64_t v145 = (char *)v133 - v26;
  MEMORY[0x1895F8858](v25);
  uint64_t v28 = (char *)v133 - v27;
  uint64_t v170 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C749F80);
  uint64_t v29 = *(void *)(v170 - 8);
  uint64_t v30 = MEMORY[0x1895F8858](v170);
  uint64_t v32 = (char *)v133 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = MEMORY[0x1895F8858](v30);
  uint64_t v152 = (char *)v133 - v34;
  MEMORY[0x1895F8858](v33);
  uint64_t v36 = (char *)v133 - v35;
  uint64_t v158 = a5;
  uint64_t v167 = TreeDictionary.init()(a2, a3, a5);
  uint64_t v168 = v37;
  uint64_t v169 = v38;
  if (a2 == MEMORY[0x189617FA8])
  {
    uint64_t v143 = v29;
    __int128 v76 = v153;
    a2 = v153[3];
    __swift_project_boxed_opaque_existential_1(v153, a2);
    sub_188D0B2B4();
    uint64_t v77 = v154;
    sub_188DF8AEC();
    if (!v77)
    {
      unsigned int v154 = v36;
      uint64_t v83 = sub_188DF88AC();
      uint64_t v84 = *(void *)(v83 + 16);
      uint64_t v152 = (char *)v83;
      if (v84)
      {
        uint64_t v85 = (_BYTE *)(v83 + 56);
        uint64_t v86 = v155;
        do
        {
          uint64_t v88 = *((void *)v85 - 2);
          char v89 = *v85;
          uint64_t v90 = *((void *)v85 - 1);
          *(void *)&__int128 v164 = *((void *)v85 - 3);
          uint64_t v87 = v164;
          *((void *)&v164 + 1) = v88;
          *(void *)&__int128 v165 = v90;
          BYTE8(v165) = v89;
          swift_bridgeObjectRetain();
          sub_188DF88A0();
          *(void *)&__int128 v164 = v87;
          *((void *)&v164 + 1) = v88;
          uint64_t v91 = (uint64_t)v156;
          uint64_t v92 = MEMORY[0x189617FA8];
          swift_dynamicCast();
          uint64_t v93 = v157;
          (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v157, v28, a3);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v86 + 56))(v93, 0LL, 1LL, a3);
          uint64_t v94 = (void *)type metadata accessor for TreeDictionary(0LL, v92, a3, v158);
          TreeDictionary.subscript.setter(v93, v91, v94);
          (*(void (**)(char *, uint64_t))(v86 + 8))(v28, a3);
          v85 += 32;
          --v84;
        }

        while (v84);
      }

      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v143 + 8))(v154, v170);
      uint64_t v75 = v153;
      goto LABEL_45;
    }

    swift_release();
LABEL_60:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v76);
    return a2;
  }

  unint64_t v39 = v153;
  if (a2 == MEMORY[0x189618740])
  {
    uint64_t v143 = v29;
    a2 = v153[3];
    __swift_project_boxed_opaque_existential_1(v153, a2);
    unint64_t v78 = sub_188D0B2B4();
    uint64_t v79 = v152;
    __int128 v80 = v154;
    sub_188DF8AEC();
    uint64_t v81 = v80;
    if (v80) {
      goto LABEL_23;
    }
    uint64_t v95 = sub_188DF88AC();
    uint64_t v96 = *(void *)(v95 + 16);
    uint64_t v151 = v95;
    if (v96)
    {
      char v150 = (char *)v78;
      uint64_t v97 = (_BYTE *)(v95 + 56);
      uint64_t v98 = v145;
      __int128 v99 = v79;
      while (1)
      {
        a2 = *((void *)v97 - 3);
        uint64_t v100 = *((void *)v97 - 2);
        uint64_t v101 = *((void *)v97 - 1);
        if ((*v97 & 1) != 0) {
          break;
        }
        *(void *)&__int128 v164 = *((void *)v97 - 3);
        *((void *)&v164 + 1) = v100;
        *(void *)&__int128 v165 = v101;
        BYTE8(v165) = 0;
        swift_bridgeObjectRetain();
        sub_188DF88A0();
        if (v81)
        {
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v143 + 8))(v99, v170);
          a2 = v167;
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_59;
        }

        *(void *)&__int128 v164 = v101;
        uint64_t v102 = (uint64_t)v156;
        uint64_t v103 = MEMORY[0x189618740];
        swift_dynamicCast();
        unsigned int v154 = 0LL;
        uint64_t v104 = v155;
        uint64_t v105 = v157;
        (*(void (**)(char *, char *, uint64_t))(v155 + 16))(v157, v98, a3);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v104 + 56))(v105, 0LL, 1LL, a3);
        __int128 v106 = (void *)type metadata accessor for TreeDictionary(0LL, v103, a3, v158);
        TreeDictionary.subscript.setter(v105, v102, v106);
        swift_bridgeObjectRelease();
        uint64_t v107 = *(void (**)(char *, uint64_t))(v104 + 8);
        uint64_t v81 = v154;
        __int128 v99 = v152;
        v107(v98, a3);
        v97 += 32;
        if (!--v96) {
          goto LABEL_41;
        }
      }

      uint64_t v112 = v99;
      uint64_t v113 = *((void *)v97 - 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      __swift_project_boxed_opaque_existential_1(v153, v153[3]);
      uint64_t v114 = (void *)sub_188DF88DC();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v114 = sub_188CF779C(0LL, v114[2] + 1LL, 1, v114);
      }
      unint64_t v116 = v114[2];
      unint64_t v115 = v114[3];
      if (v116 >= v115 >> 1) {
        uint64_t v114 = sub_188CF779C((void *)(v115 > 1), v116 + 1, 1, v114);
      }
      *((void *)&v165 + 1) = &type metadata for _DictionaryCodingKey;
      v166 = v150;
      uint64_t v117 = swift_allocObject();
      *(void *)&__int128 v164 = v117;
      *(void *)(v117 + 16) = a2;
      *(void *)(v117 + 24) = v113;
      *(void *)(v117 + 32) = v101;
      *(_BYTE *)(v117 + 40) = 1;
      v114[2] = v116 + 1;
      sub_188D0CBFC(&v164, (uint64_t)&v114[5 * v116 + 4]);
      uint64_t v118 = sub_188DF8654();
      swift_allocError();
      __int128 v120 = v119;
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C749F98);
      void *v120 = MEMORY[0x189618740];
      sub_188DF863C();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v118 - 8) + 104LL))( v120,  *MEMORY[0x189619358],  v118);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v143 + 8))(v112, v170);
      goto LABEL_25;
    }

    __int128 v99 = v79;
LABEL_41:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v143 + 8))(v99, v170);
    goto LABEL_44;
  }

  uint64_t v40 = swift_conformsToProtocol2();
  if (v40) {
    uint64_t v41 = v40;
  }
  else {
    uint64_t v41 = 0LL;
  }
  if (v40) {
    uint64_t v42 = a2;
  }
  else {
    uint64_t v42 = 0LL;
  }
  uint64_t v142 = v42;
  if (!v42)
  {
    __swift_project_boxed_opaque_existential_1(v39, v39[3]);
    uint64_t v82 = v154;
    sub_188DF8AD4();
    if (v82)
    {
LABEL_25:
      swift_release();
LABEL_59:
      __int128 v76 = v153;
      goto LABEL_60;
    }

    __swift_project_boxed_opaque_existential_1(&v164, *((uint64_t *)&v165 + 1));
    char v108 = sub_188DF88F4();
    if ((v109 & 1) == 0 && (v108 & 1) != 0)
    {
      a2 = sub_188DF8654();
      swift_allocError();
      uint64_t v111 = v110;
      __int128 v76 = v153;
      __swift_project_boxed_opaque_existential_1(v153, v153[3]);
      sub_188DF88DC();
      sub_188DF863C();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(a2 - 8) + 104LL))( v111,  *MEMORY[0x189619360],  a2);
      swift_willThrow();
LABEL_39:
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v164);
      goto LABEL_60;
    }

    __swift_project_boxed_opaque_existential_1(&v164, *((uint64_t *)&v165 + 1));
    if ((sub_188DF8918() & 1) == 0)
    {
      uint64_t v121 = v151;
      __int128 v122 = v144;
      __int128 v123 = v146;
      while (1)
      {
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v164, *((uint64_t *)&v165 + 1));
        sub_188DF8900();
        __swift_project_boxed_opaque_existential_1(&v164, *((uint64_t *)&v165 + 1));
        if ((sub_188DF8918() & 1) != 0) {
          break;
        }
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v164, *((uint64_t *)&v165 + 1));
        sub_188DF8900();
        uint64_t v124 = (uint64_t)v156;
        (*(void (**)(char *, char *, uint64_t))(v121 + 16))(v156, v122, a2);
        uint64_t v125 = v155;
        __int128 v126 = v157;
        (*(void (**)(char *, char *, uint64_t))(v155 + 16))(v157, v123, a3);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v125 + 56))(v126, 0LL, 1LL, a3);
        __int128 v127 = (void *)type metadata accessor for TreeDictionary(0LL, a2, a3, v158);
        TreeDictionary.subscript.setter(v126, v124, v127);
        __int128 v128 = *(void (**)(char *, uint64_t))(v125 + 8);
        uint64_t v121 = v151;
        v128(v123, a3);
        (*(void (**)(char *, uint64_t))(v121 + 8))(v122, a2);
        __swift_project_boxed_opaque_existential_1(&v164, *((uint64_t *)&v165 + 1));
        if ((sub_188DF8918() & 1) != 0) {
          goto LABEL_43;
        }
      }

      uint64_t v129 = sub_188DF8654();
      swift_allocError();
      uint64_t v131 = v130;
      __int128 v76 = v153;
      __swift_project_boxed_opaque_existential_1(v153, v153[3]);
      sub_188DF88DC();
      sub_188DF863C();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v129 - 8) + 104LL))( v131,  *MEMORY[0x189619360],  v129);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v121 + 8))(v144, a2);
      goto LABEL_39;
    }

LABEL_43:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v164);
LABEL_44:
    uint64_t v75 = v153;
    goto LABEL_45;
  }

  uint64_t v134 = v10;
  uint64_t v135 = v9;
  uint64_t v143 = v29;
  uint64_t v43 = v39[3];
  uint64_t v152 = (char *)v39[4];
  __swift_project_boxed_opaque_existential_1(v39, v43);
  unint64_t v44 = sub_188D0B2B4();
  unint64_t v45 = v154;
  sub_188DF8AEC();
  if (v45)
  {
LABEL_23:
    swift_release();
    __int128 v76 = v39;
    goto LABEL_60;
  }

  unint64_t v140 = v44;
  unsigned int v154 = 0LL;
  uint64_t v141 = v32;
  uint64_t v46 = sub_188DF88AC();
  uint64_t v47 = *(char **)(v46 + 16);
  v133[1] = v46;
  if (v47)
  {
    uint64_t v48 = v46;
    uint64_t v49 = v142;
    uint64_t v137 = sub_188DF8384();
    uint64_t v136 = *(void *)(v137 - 8);
    uint64_t v139 = *(void *)(v136 + 64);
    __int128 v50 = (unsigned __int8 *)(v48 + 56);
    uint64_t v51 = v151;
    uint64_t v138 = v41;
    while (1)
    {
      uint64_t v144 = v47;
      unint64_t v52 = *((void *)v50 - 2);
      uint64_t v53 = (char *)*((void *)v50 - 1);
      int v54 = *v50;
      uint64_t v145 = (char *)*((void *)v50 - 3);
      unint64_t v160 = (unint64_t)v145;
      unint64_t v161 = v52;
      uint64_t v146 = v53;
      uint64_t v162 = v53;
      LODWORD(v147) = v54;
      char v163 = v54;
      uint64_t v55 = MEMORY[0x1895F8858](v52);
      uint64_t v57 = (char *)v133 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v152 = (char *)v55;
      swift_bridgeObjectRetain_n();
      sub_188DF8894();
      uint64_t v58 = *(void *)(v49 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v57, 1LL, v49) == 1)
      {
        (*(void (**)(char *, uint64_t))(v136 + 8))(v57, v137);
        __int128 v164 = 0u;
        __int128 v165 = 0u;
        v166 = 0LL;
      }

      else
      {
        *((void *)&v165 + 1) = v49;
        v166 = (char *)v41;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v164);
        (*(void (**)(uint64_t *, char *, uint64_t))(v58 + 32))(boxed_opaque_existential_1, v57, v49);
      }

      char v60 = v148;
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C749F88);
      uint64_t v61 = v150;
      char v62 = swift_dynamicCast();
      __int128 v63 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v51 + 56);
      uint64_t v64 = v141;
      uint64_t v65 = v149;
      uint64_t v66 = v152;
      if ((v62 & 1) == 0)
      {
        v63(v61, 1LL, 1LL, a2);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v134 + 8))(v61, v135);
        *(void *)&__int128 v164 = v145;
        *((void *)&v164 + 1) = v66;
        *(void *)&__int128 v165 = v146;
        BYTE8(v165) = v147;
        unint64_t v160 = 0LL;
        unint64_t v161 = 0xE000000000000000LL;
        sub_188DF8600();
        swift_bridgeObjectRelease();
        unint64_t v160 = 0xD00000000000001ELL;
        unint64_t v161 = 0x8000000188E004D0LL;
        sub_188DF8B94();
        sub_188DF7EE0();
        swift_bridgeObjectRelease();
        sub_188DF8654();
        swift_allocError();
        sub_188D0CB50();
        a2 = v170;
        sub_188DF8630();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_willThrow();
        (*(void (**)(char *, uint64_t))(v143 + 8))(v64, a2);
        goto LABEL_25;
      }

      v63(v61, 0LL, 1LL, a2);
      (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v65, v61, a2);
      *(void *)&__int128 v164 = v145;
      *((void *)&v164 + 1) = v66;
      *(void *)&__int128 v165 = v146;
      BYTE8(v165) = v147;
      __int128 v67 = v154;
      sub_188DF88A0();
      unsigned int v154 = v67;
      if (v67) {
        break;
      }
      swift_bridgeObjectRelease();
      uint64_t v68 = (uint64_t)v156;
      (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v156, v65, a2);
      uint64_t v69 = v155;
      uint64_t v70 = v65;
      char v71 = v157;
      (*(void (**)(char *, char *, uint64_t))(v155 + 16))(v157, v60, a3);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v69 + 56))(v71, 0LL, 1LL, a3);
      uint64_t v72 = (void *)type metadata accessor for TreeDictionary(0LL, a2, a3, v158);
      TreeDictionary.subscript.setter(v71, v68, v72);
      uint64_t v73 = *(void (**)(char *, uint64_t))(v69 + 8);
      uint64_t v51 = v151;
      v73(v60, a3);
      __int128 v74 = v70;
      uint64_t v49 = v142;
      (*(void (**)(char *, uint64_t))(v51 + 8))(v74, a2);
      v50 += 32;
      uint64_t v47 = v144 - 1;
      uint64_t v41 = v138;
    }

    (*(void (**)(char *, uint64_t))(v51 + 8))(v65, a2);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v143 + 8))(v64, v170);
    a2 = v167;
    swift_bridgeObjectRelease();
    swift_release();
    __int128 v76 = v153;
    goto LABEL_60;
  }

      while (!sub_188D71CE0(a2, a4, v18, BYTE5(a4) & 1, a5, a7, v20, BYTE5(a7) & 1))
      {
LABEL_52:
        uint64_t v29 = sub_188D712CC(v16, a5, a6, a7 & 0x1FFFFFFFFFFLL, a2, a3, a4 & 0x1FFFFFFFFFFLL, a8);
        uint64_t v30 = __OFSUB__(0LL, v29);
        unint64_t result = -v29;
        if (!v30) {
          return result;
        }
        __break(1u);
LABEL_55:
LABEL_30:
        if ((a7 & 0xC000000000LL) == 0) {
          goto LABEL_42;
        }
        if (a2 == a5) {
          goto LABEL_32;
        }
      }

      return sub_188D712CC(v16, a2, a3, a4 & 0x1FFFFFFFFFFLL, a5, a6, a7 & 0x1FFFFFFFFFFLL, a8);
    }
  }

  return result;
}

            uint64_t v56 = v95;
            uint64_t v57 = *(void (**)(unint64_t, uint64_t))(v94 + 8);
            v57(v98, v95);
            v57((unint64_t)v97, v56);
            swift_unknownObjectRelease();
            uint64_t v17 = v96;
            uint64_t v15 = v99;
            goto LABEL_44;
          }

          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
        }

        else
        {
          swift_unknownObjectRetain();
        }

        sub_188D087F8((uint64_t)&v138);
        unint64_t v115 = v49;
        unint64_t v116 = v50;
        *(void *)&uint64_t v117 = v51;
        *((void *)&v117 + 1) = *((void *)&v42 + 1) + 1LL;
        goto LABEL_43;
      }
    }

  __break(1u);
  return result;
}

LABEL_19:
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v143 + 8))(v141, v170);
  uint64_t v75 = v153;
LABEL_45:
  a2 = v167;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
  return a2;
}

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (!v7) {
    goto LABEL_24;
  }
  swift_bridgeObjectRelease();
  uint64_t v17 = 1;
  return v17 & 1;
}

  __int128 v99 = v32[1];
  if (v99)
  {
    TupleTypeMetadata2 = a8;
    uint64_t v87 = v11;
    uint64_t v97 = 1;
    goto LABEL_23;
  }

          __break(1u);
LABEL_20:
          __break(1u);
          goto LABEL_21;
        }
      }

      __break(1u);
      goto LABEL_19;
    }
  }

  else
  {
    if (BYTE4(result) < result)
    {
      v2[5] = BYTE5(result);
      goto LABEL_12;
    }

    LODWORD(v3) = v2[5] + BYTE5(result);
    char v6 = v3 >> 8;
    __break(1u);
  }

  if ((v1 & 1) != 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  v2[4] = v6;
  LODWORD(v3) = v2[5] + v3;
  if (((v3 >> 8) & 1) == 0)
  {
LABEL_11:
    v2[5] = v3;
    goto LABEL_12;
  }

    uint64_t v15 = 1LL;
    goto LABEL_20;
  }

  if ((v2 & 0x1000000000000000LL) != 0) {
    uint64_t v7 = (v1 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else {
    uint64_t v7 = sub_188DF8684();
  }
  uint64_t v8 = (v6 >> 16) + v7;
  if ((*(_BYTE *)(v8 - 1) & 0xC0) != 0x80) {
    goto LABEL_19;
  }
  uint64_t v9 = 0LL;
  uint64_t v10 = v8 - 2;
  do
    uint64_t v11 = *(_BYTE *)(v10 + v9--) & 0xC0;
  while (v11 == 128);
LABEL_18:
  uint64_t v15 = 1 - v9;
LABEL_20:
  uint64_t v16 = (v6 - (v15 << 16)) & 0xFFFFFFFFFFFF0000LL | 5;
  return sub_188D63060(v16);
}

    uint64_t v13 = a2 < a6;
    if (((a4 ^ a8) & 1) != 0) {
      return a4;
    }
    return v13;
  }

  swift_beginAccess();
  uint64_t v1 = 0LL;
  uint64_t v18 = *(_DWORD *)(v2 + 16);
  uint64_t v19 = (uint8x8_t)vcnt_s8((int8x8_t)v18);
  v19.i16[0] = vaddlv_u8(v19);
  if (v18 != *(_DWORD *)(v2 + 20)) {
    uint64_t v18 = v19.i32[0];
  }
  *(_DWORD *)(v0 + 16) = v18;
  *(_DWORD *)(v0 + 20) = v18;
  *(_BYTE *)(v0 + 138) = 1;
  return v1;
}

    __break(1u);
    goto LABEL_20;
  }

  *uint64_t v1 = (uint64_t)v3;
  return sub_188D8FB84(&v18, v1);
}

  *uint64_t v1 = (uint64_t)v3;
  return sub_188D8FB84(&v18, v1);
}

    char v6 = sub_188CF73F0(0LL, v6[2] + 1LL, 1, v6);
    goto LABEL_13;
  }

  uint64_t v13 = *(void *)a3 + 24LL;
  if (*(_BYTE *)(*(void *)a3 + 18LL))
  {
    uint64_t v14 = (uint64_t *)(v13 + 40 * a1);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = v14[2];
    uint64_t v18 = v14[3];
    uint64_t v19 = v14[4];
    v44[0] = 0LL;
    swift_unknownObjectRetain_n();
    MEMORY[0x1895D76E0](v44, 8LL);
    uint64_t v20 = v44[0];
    char v6 = *(void **)(v3 + 96);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      char v6 = sub_188CF73F0(0LL, v6[2] + 1LL, 1, v6);
    }
    uint64_t v21 = v6[2];
    uint64_t v22 = v6[3];
    uint64_t v23 = v21 + 1;
    if (v21 >= v22 >> 1)
    {
      uint64_t v42 = v21 + 1;
      uint64_t v38 = v6;
      unint64_t v39 = v6[2];
      uint64_t v40 = sub_188CF73F0((void *)(v22 > 1), v21 + 1, 1, v38);
      uint64_t v21 = v39;
      uint64_t v23 = v42;
      char v6 = v40;
    }

    v6[2] = v23;
    uint64_t v24 = &v6[6 * v21];
    v24[4] = v15;
    v24[5] = v16;
    v24[6] = v17;
    v24[7] = v18;
    v24[8] = v19;
    v24[9] = v20;
    sub_188D087F8(v5);
    unint64_t result = swift_unknownObjectRelease();
    goto LABEL_16;
  }

  uint64_t v31 = v13 + 24 * a1;
  uint64_t v32 = *(void *)v31;
  uint64_t v33 = *(void *)(v31 + 8);
  uint64_t v34 = *(unsigned int *)(v31 + 16) | ((unint64_t)*(unsigned __int8 *)(v31 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(v31 + 21) << 40);
  swift_bridgeObjectRetain_n();
  sub_188DB77B8(v32, v33, v34);
  sub_188D087F8(v5);
  return swift_bridgeObjectRelease();
}

      sub_188DF84D4();
      if (v85(v46, 1LL, a5) == 1) {
        goto LABEL_9;
      }
    }

    ((void (*)(uint64_t, uint64_t))v75)(v48, a5);
    uint64_t v53 = 1;
LABEL_18:
    uint64_t v46 = v78;
    goto LABEL_19;
  }

  uint64_t v49 = v87;
  if ((v43 & 1) != 0)
  {
    do
    {
      TreeSet.Iterator.next()(v34, (uint64_t)v17);
      if (v85(v17, 1LL, a5) == 1)
      {
        uint64_t v64 = (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v17, v74);
        MEMORY[0x1895F8858](v64);
        uint64_t v65 = v77;
        *(&v69 - 8) = a5;
        *(&v69 - 7) = v65;
        uint64_t v66 = v81;
        *(&v69 - 6) = v84;
        *(&v69 - 5) = v66;
        *(&v69 - 4) = v86;
        *(&v69 - 3) = v49;
        *(&v69 - 2) = v76;
        __int128 v67 = sub_188DF8018();
        (*(void (**)(char *, uint64_t))(v40 + 8))(v75, a5);
        v97[0] = v105[0];
        *(_OWORD *)((char *)v97 + 11) = *(_OWORD *)((char *)v105 + 11);
        uint64_t v92 = v100;
        uint64_t v93 = v101;
        uint64_t v95 = v103;
        uint64_t v96 = v104;
        uint64_t v94 = v102;
        uint64_t v90 = v98;
        uint64_t v91 = v99;
        sub_188CFE7A8((uint64_t)&v90);
        uint64_t v38 = v67 ^ 1;
        return v38 & 1;
      }

      v82(v26, v17, a5);
      uint64_t v51 = sub_188DF8084();
      unint64_t v52 = *(void (**)(char *, uint64_t))(v40 + 8);
      v52(v26, a5);
    }

    while ((v51 & 1) != 0);
    v52(v75, a5);
    __int128 v50 = v103;
    uint64_t v96 = v104;
    v97[0] = v105[0];
    *(_OWORD *)((char *)v97 + 11) = *(_OWORD *)((char *)v105 + 11);
    uint64_t v92 = v100;
    uint64_t v93 = v101;
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v40 + 8))(v75, a5);
    uint64_t v96 = v104;
    v97[0] = v105[0];
    *(_OWORD *)((char *)v97 + 11) = *(_OWORD *)((char *)v105 + 11);
    uint64_t v92 = v100;
    uint64_t v93 = v101;
    __int128 v50 = v103;
  }

  uint64_t v94 = v102;
  uint64_t v95 = v50;
  uint64_t v90 = v98;
  uint64_t v91 = v99;
  sub_188CFE7A8((uint64_t)&v90);
  uint64_t v38 = 0;
  return v38 & 1;
}

      uint64_t v19 = sub_188DF85F4();
LABEL_17:
      uint64_t v20 = v19;
      swift_bridgeObjectRelease();
      return v20;
    }

    __break(1u);
    return result;
  }

  uint64_t v65 = TupleTypeMetadata2;
  uint64_t v66 = v108;
  __int128 v67 = v108 + *(int *)(TupleTypeMetadata2 + 48);
  Rope._Node._removeItem(at:)(v108, v67, v116, v124);
  uint64_t v68 = (char *)v107;
  __int128 v122 = (unint64_t *)((char *)v107 + *(int *)(v65 + 48));
  uint64_t v69 = v122;
  uint64_t v70 = v120;
  char v71 = *(void *)(v120 - 8);
  uint64_t v72 = *(void (**)(char *, uint64_t, uint64_t))(v71 + 16);
  v72((char *)v107, v66, v120);
  unint64_t v115 = *(char **)(AssociatedTypeWitness - 8);
  uint64_t v73 = (void (*)(unint64_t *, uint64_t, uint64_t))*((void *)v115 + 2);
  v73(v69, v67, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t))(v71 + 32))(v113, v68, v70);
  __int128 v74 = v118;
  uint64_t v75 = &v118[*(int *)(v65 + 48)];
  v72(v118, v66, v70);
  v73((unint64_t *)v75, v67, AssociatedTypeWitness);
  __int128 v76 = (void (**)(unint64_t *, uint64_t))v115;
  (*((void (**)(uint64_t, char *, uint64_t))v115 + 4))(v114, v75, AssociatedTypeWitness);
  uint64_t v77 = Rope._Node.isUndersized.getter();
  unint64_t v78 = (unsigned __int16)Rope._Node.header.getter();
  (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v66, v65);
  uint64_t v79 = v116 == v78;
  (*(void (**)(char *, uint64_t))(v71 + 8))(v74, v70);
  v76[1](v122, AssociatedTypeWitness);
LABEL_14:
  if (v79) {
    uint64_t v101 = 256;
  }
  else {
    uint64_t v101 = 0;
  }
  return v101 & 0xFFFFFFFE | v77 & 1;
}

    __break(1u);
    return result;
  }

  uint64_t v118 = v22;
  __int128 v119 = v15;
  char v62 = v124;
  __int128 v63 = (uint64_t (**)(uint64_t *, uint64_t))v123;
  (*((void (**)(uint64_t *, void *, uint64_t))v123 + 2))(v24, v9, a6);
  uint64_t v64 = *v24;
  uint64_t v65 = *v24 + 16;
  uint64_t v66 = v135;
  __int128 v120 = *(char **)(v135 - 8);
  __int128 v67 = v64 + ((v120[80] + 19LL) & ~(unint64_t)v120[80]);
  MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Item, v135);
  uint64_t v68 = v130;
  uint64_t v69 = (unsigned __int16 *)nullsub_1(v65, v67, v130, v66, v129);
  char v71 = v70;
  swift_unknownObjectRetain();
  uint64_t v72 = sub_188DD9AF4(v69, v71, v125, (uint64_t)v126, v68, v128, v127);
  __int128 v74 = v73;
  uint64_t v75 = v136;
  swift_unknownObjectRelease();
  unint64_t result = v63[1](v24, v75);
  if (v74)
  {
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v77 = v62;
  unint64_t v78 = swift_getAssociatedConformanceWitness();
  __int128 v80 = type metadata accessor for _RopePath(0LL, v62, v78, v79);
  _RopePath.subscript.setter(v72, 0, v80);
  uint64_t v81 = v72;
  __int128 v128 = v72;
  uint64_t v82 = TupleTypeMetadata2;
  uint64_t v83 = v66;
  uint64_t v84 = (uint64_t)v118;
  uint64_t v85 = (uint64_t)v118 + *(int *)(TupleTypeMetadata2 + 48);
  Rope._Node._removeItem(at:)((uint64_t)v118, v85, v81, v75);
  uint64_t v86 = v131;
  uint64_t v134 = (unint64_t *)&v131[*(int *)(v82 + 48)];
  uint64_t v87 = v134;
  uint64_t v88 = (void (**)(uint64_t, char *, uint64_t))v120;
  char v89 = (void (*)(char *, uint64_t, uint64_t))*((void *)v120 + 2);
  v89(v131, v84, v83);
  uint64_t v130 = *(void *)(v77 - 8);
  uint64_t v90 = *(void (**)(unint64_t *, uint64_t, uint64_t))(v130 + 16);
  v90(v87, v85, v77);
  v88[4](v121, v86, v83);
  uint64_t v91 = v133;
  uint64_t v92 = &v133[*(int *)(v82 + 48)];
  v89(v133, v84, v83);
  v90((unint64_t *)v92, v85, v77);
  uint64_t v93 = v130;
  (*(void (**)(uint64_t, char *, uint64_t))(v130 + 32))(v122, v92, v77);
  uint64_t v94 = Rope._Node.isUndersized.getter();
  uint64_t v95 = (unsigned __int16)Rope._Node.header.getter();
  (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v84, v82);
  uint64_t v96 = v128 == v95;
  (*((void (**)(char *, uint64_t))v120 + 1))(v91, v83);
  (*(void (**)(unint64_t *, uint64_t))(v93 + 8))(v134, v77);
LABEL_14:
  if (v96) {
    uint64_t v114 = 256;
  }
  else {
    uint64_t v114 = 0;
  }
  return v114 & 0xFFFFFFFE | v94 & 1;
}

        __break(1u);
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
    }

    __break(1u);
    goto LABEL_19;
  }

  a3.i32[0] = *(_DWORD *)(a2 + 26);
  uint64_t v23 = (int16x8_t)vmovl_u8(a3);
  uint64_t v24 = *(void *)(a2 + 32);
  uint64_t v25 = v23.u16[1] - v24;
  if (__OFSUB__(v23.u16[1], v24))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v26 = *(void *)(a2 + 40);
  uint64_t v15 = __OFSUB__(v23.u16[0], v26);
  uint64_t v27 = v23.u16[0] - v26;
  if (v15)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v28 = *(unsigned __int8 *)(a2 + 25);
  uint64_t v29 = *(void *)(a2 + 48);
  uint64_t v15 = __OFSUB__(v28, v29);
  uint64_t v30 = v28 - v29;
  if (v15)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v31 = *(unsigned __int8 *)(a2 + 24);
  uint64_t v32 = *(void *)(a2 + 56);
  uint64_t v15 = __OFSUB__(v31, v32);
  uint64_t v33 = v31 - v32;
  if (v15)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  uint64_t v34 = *(void *)(a2 + 8);
  unint64_t result = *(void *)(a2 + 16);
  *char v6 = v25;
  v6[1] = v27;
  v6[2] = v30;
  _OWORD v6[3] = v33;
  uint64_t v35 = v7 + 24LL * v8;
  *(void *)(v35 + 24) = v34;
  *(void *)(v35 + 32) = result;
  *(_BYTE *)(v35 + 40) = v31;
  *(_BYTE *)(v35 + 41) = v28;
  *(_DWORD *)(v35 + 42) = vmovn_s16(v23).u32[0];
  uint64_t v36 = v3[1];
  uint64_t v15 = __OFADD__(v36, v25);
  uint64_t v37 = v36 + v25;
  if (v15)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  v3[1] = v37;
  uint64_t v38 = v3[2];
  uint64_t v15 = __OFADD__(v38, v27);
  unint64_t v39 = v38 + v27;
  if (v15)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  v3[2] = v39;
  uint64_t v40 = v3[3];
  uint64_t v15 = __OFADD__(v40, v30);
  uint64_t v41 = v40 + v30;
  if (v15)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  v3[3] = v41;
  uint64_t v42 = v3[4];
  uint64_t v15 = __OFADD__(v42, v33);
  uint64_t v43 = v42 + v33;
  if (!v15)
  {
    v3[4] = v43;
    swift_bridgeObjectRetain();
    return v7;
  }

uint64_t sub_188D0C4D4@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = TreeDictionary<>.init(from:)(a1, a2[2], a2[3], *(void *)(a3 - 8), a2[4], *(void *)(a3 - 16));
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
  }

  return result;
}

unsigned __int8 *sub_188D0C510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_188DF7FC4();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000LL) == 0)
  {
    if ((v4 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }

  uint64_t v5 = sub_188DDD440();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v7 = (unsigned __int8 *)sub_188DF8684();
  }

unsigned __int8 *sub_188D0C5F4(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }

          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }

          if (result)
          {
            uint64_t v9 = 0LL;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0LL;
                  }
                  char v12 = -87;
                }

                else
                {
                  char v12 = -55;
                }
              }

              else
              {
                char v12 = -48;
              }

              uint64_t v13 = v9 * a3;
              uint64_t v9 = v13 - (v11 + v12);
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }

          return 0LL;
        }

        return 0LL;
      }

      __break(1u);
      goto LABEL_65;
    }

    if (a2)
    {
      unsigned __int8 v22 = a3 + 48;
      unsigned __int8 v23 = a3 + 55;
      unsigned __int8 v24 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v22 = 58;
      }

      else
      {
        unsigned __int8 v24 = 97;
        unsigned __int8 v23 = 65;
      }

      if (result)
      {
        uint64_t v25 = 0LL;
        do
        {
          unsigned int v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24) {
                return 0LL;
              }
              char v27 = -87;
            }

            else
            {
              char v27 = -55;
            }
          }

          else
          {
            char v27 = -48;
          }

          uint64_t v28 = v25 * a3;
          uint64_t v25 = v28 + (v26 + v27);
          ++result;
          --v3;
        }

        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }

      return 0LL;
    }

    return 0LL;
  }

  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }

  uint64_t v14 = a2 - 1;
  if (a2 == 1) {
    return 0LL;
  }
  unsigned __int8 v15 = a3 + 48;
  unsigned __int8 v16 = a3 + 55;
  unsigned __int8 v17 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v15 = 58;
  }

  else
  {
    unsigned __int8 v17 = 97;
    unsigned __int8 v16 = 65;
  }

  if (!result) {
    return 0LL;
  }
  uint64_t v9 = 0LL;
  uint64_t v18 = result + 1;
  do
  {
    unsigned int v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17) {
          return 0LL;
        }
        char v20 = -87;
      }

      else
      {
        char v20 = -55;
      }
    }

    else
    {
      char v20 = -48;
    }

    uint64_t v21 = v9 * a3;
    uint64_t v9 = v21 + (v19 + v20);
    ++v18;
    --v14;
  }

  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_188D0C870(uint64_t result, unint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = HIBYTE(a2) & 0xF;
  uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v6) {
    return v3;
  }
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    swift_bridgeObjectRetain();
    sub_188D0C510(v3, a2, 10LL);
    swift_bridgeObjectRelease();
    return v3;
  }

  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((result & 0x1000000000000000LL) != 0) {
      unsigned __int8 v7 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      unsigned __int8 v7 = (unsigned __int8 *)sub_188DF8684();
    }
    sub_188D0C5F4(v7, v5, 10LL);
    return v3;
  }

  v23[0] = result;
  v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (v4)
    {
      if (v4 != 1
        && (BYTE1(result) - 48) <= 9u
        && v4 != 2
        && (BYTE2(result) - 48) <= 9u)
      {
        uint64_t v8 = 10LL * (BYTE1(result) - 48) + (BYTE2(result) - 48);
        uint64_t v9 = v4 - 3;
        if (v9)
        {
          unint64_t v10 = (unsigned __int8 *)v23 + 3;
          do
          {
            unsigned int v11 = *v10 - 48;
            if (v11 > 9) {
              break;
            }
            uint64_t v12 = 10 * v8;
            uint64_t v8 = v12 + v11;
            ++v10;
            --v9;
          }

          while (v9);
        }
      }

      return v3;
    }
  }

  else
  {
    if (result != 45)
    {
      if (v4)
      {
        if ((result - 48) <= 9u && v4 != 1 && (BYTE1(result) - 48) <= 9u)
        {
          uint64_t v13 = 10LL * (result - 48) + (BYTE1(result) - 48);
          uint64_t v14 = v4 - 2;
          if (v14)
          {
            unsigned __int8 v15 = (unsigned __int8 *)v23 + 2;
            do
            {
              unsigned int v16 = *v15 - 48;
              if (v16 > 9) {
                break;
              }
              uint64_t v17 = 10 * v13;
              uint64_t v13 = v17 + v16;
              ++v15;
              --v14;
            }

            while (v14);
          }
        }
      }

      return v3;
    }

    if (v4)
    {
      if (v4 != 1
        && (BYTE1(result) - 48) <= 9u
        && v4 != 2
        && (BYTE2(result) - 48) <= 9u)
      {
        uint64_t v18 = -10LL * (BYTE1(result) - 48) - (BYTE2(result) - 48);
        uint64_t v19 = v4 - 3;
        if (v19)
        {
          char v20 = (unsigned __int8 *)v23 + 3;
          do
          {
            unsigned int v21 = *v20 - 48;
            if (v21 > 9) {
              break;
            }
            uint64_t v22 = 10 * v18;
            uint64_t v18 = v22 - v21;
            ++v20;
            --v19;
          }

          while (v19);
        }
      }

      return v3;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

unint64_t sub_188D0CB50()
{
  unint64_t result = qword_18C749F90;
  if (!qword_18C749F90)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C749F80);
    unint64_t result = MEMORY[0x1895D7620](MEMORY[0x189619B88], v1);
    atomic_store(result, (unint64_t *)&qword_18C749F90);
  }

  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }

  return v1;
}

uint64_t sub_188D0CBD8()
{
  return swift_deallocObject();
}

uint64_t sub_188D0CBFC(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t _s6_ChunkVwxx()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _DictionaryCodingKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _DictionaryCodingKey(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for _DictionaryCodingKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for _DictionaryCodingKey(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _DictionaryCodingKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for _DictionaryCodingKey()
{
  return &type metadata for _DictionaryCodingKey;
}

unint64_t sub_188D0CDAC()
{
  unint64_t result = qword_18C749FA0;
  if (!qword_18C749FA0)
  {
    unint64_t result = MEMORY[0x1895D7620](&unk_188DF99A8, &type metadata for _DictionaryCodingKey);
    atomic_store(result, (unint64_t *)&qword_18C749FA0);
  }

  return result;
}

unint64_t sub_188D0CDF4()
{
  unint64_t result = qword_18C749FA8;
  if (!qword_18C749FA8)
  {
    unint64_t result = MEMORY[0x1895D7620](&unk_188DF99D0, &type metadata for _DictionaryCodingKey);
    atomic_store(result, (unint64_t *)&qword_18C749FA8);
  }

  return result;
}

uint64_t Deque._Storage._buffer.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*Deque._Storage._buffer.modify())()
{
  return nullsub_1;
}

uint64_t Deque._Storage.description.getter()
{
  return 0x3C6575716544LL;
}

uint64_t sub_188D0CF3C()
{
  return Deque._Storage.description.getter();
}

uint64_t Deque._Storage.init()()
{
  if (qword_18C4FB1A0 != -1) {
    swift_once();
  }
  swift_retain();
  return sub_188DF8864();
}

uint64_t Deque._Storage.init(_:)()
{
  return sub_188DF8864();
}

uint64_t Deque._Storage.init(minimumCapacity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_188DF8864();
}

uint64_t Deque._Storage.capacity.getter(uint64_t a1, uint64_t a2)
{
  return v4;
}

uint64_t sub_188D0D09C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858]();
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL);
  uint64_t result = v17(v16 + ((v15 + 16) & ~v15), v13);
  if (v9) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a9, v13, a6);
  }
  return result;
}

uint64_t Deque._Storage.count.getter(uint64_t a1, uint64_t a2)
{
  return v4;
}

uint64_t sub_188D0D194@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(result + 8);
  return result;
}

uint64_t Deque._Storage.startSlot.getter(uint64_t a1, uint64_t a2)
{
  return v4;
}

uint64_t sub_188D0D204@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(result + 16);
  return result;
}

uint64_t Deque._Storage.read<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_188D0D328(a1, a2, a3, a4, a5, (uint64_t)sub_188D0D95C);
}

uint64_t sub_188D0D22C( uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  return sub_188D0D3C8(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_188D0D240( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void *)(a6 - 8);
  uint64_t result = MEMORY[0x1895F8858]();
  uint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = *(void *)(v19 + 64);
  uint64_t v22 = v20 + v21;
  if (__OFADD__(v20, v21))
  {
    __break(1u);
    goto LABEL_7;
  }

  uint64_t v23 = *(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL) + 1LL;
  BOOL v24 = __CFADD__(v22, v23);
  uint64_t v25 = v22 + v23;
  if (v24)
  {
LABEL_7:
    __break(1u);
    return result;
  }

  uint64_t result = v15(v13 + v20, v13 + ((v25 - 1) & -v23), (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (v9) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a9, v17, a6);
  }
  return result;
}

uint64_t Deque._Storage.update<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_188D0D328(a1, a2, a3, a4, a5, (uint64_t)sub_188D0D95C);
}

uint64_t sub_188D0D328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(qword_18C749FB0);
  return sub_188D0D240( a6,  (uint64_t)v12,  a3,  (uint64_t)&type metadata for _DequeBufferHeader,  a4,  v10,  a5,  MEMORY[0x18961A3E8],  (uint64_t)&v17);
}

uint64_t sub_188D0D3C8( uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t result = a3();
  if (v7) {
    *a7 = v7;
  }
  return result;
}

Swift::Bool __swiftcall Deque._Storage.isUnique()()
{
  return sub_188DF8870();
}

Swift::Void __swiftcall Deque._Storage.ensureUnique()()
{
  if ((sub_188DF8870() & 1) == 0) {
    Deque._Storage._makeUniqueCopy()();
  }
}

Swift::Void __swiftcall Deque._Storage._makeUniqueCopy()()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v12 = v4;
  uint64_t v7 = v4;
  uint64_t v8 = v0;
  uint64_t v9 = sub_188D0DA58;
  uint64_t v10 = &v11;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(qword_18C749FB0);
  sub_188D0D240( (uint64_t)sub_188D0D95C,  (uint64_t)v6,  v3,  (uint64_t)&type metadata for _DequeBufferHeader,  v4,  v5,  v2,  MEMORY[0x18961A3E8],  (uint64_t)v13);
  swift_release();
  *uint64_t v1 = v14;
}

double static Deque._Storage.growthFactor.getter()
{
  return 1.5;
}

Swift::Int __swiftcall Deque._Storage._growCapacity(to:linearly:)(Swift::Int to, Swift::Bool linearly)
{
  if (linearly)
  {
    sub_188D0D09C( (uint64_t)sub_188CF6460,  0LL,  v2,  (uint64_t)&type metadata for _DequeBufferHeader,  v3,  MEMORY[0x18961A520],  MEMORY[0x189618740],  MEMORY[0x18961A528],  v8);
    uint64_t v5 = v9;
    goto LABEL_7;
  }

  Swift::Int result = sub_188D0D09C( (uint64_t)sub_188CF6460,  0LL,  v2,  (uint64_t)&type metadata for _DequeBufferHeader,  v3,  MEMORY[0x18961A520],  MEMORY[0x189618740],  MEMORY[0x18961A528],  v8);
  double v7 = ceil((double)v9 * 1.5);
  if ((~*(void *)&v7 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }

  if (v7 <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  if (v7 >= 9.22337204e18)
  {
LABEL_13:
    __break(1u);
    return result;
  }

  uint64_t v5 = (uint64_t)v7;
LABEL_7:
  if (v5 <= to) {
    return to;
  }
  else {
    return v5;
  }
}

Swift::Void __swiftcall Deque._Storage.ensureUnique(minimumCapacity:linearGrowth:)( Swift::Int minimumCapacity, Swift::Bool linearGrowth)
{
  uint64_t v6 = *(void *)(v2 + 16);
  sub_188DF887C();
  char v7 = sub_188DF8870();
  sub_188D0D09C( (uint64_t)sub_188CF6460,  0LL,  *v3,  (uint64_t)&type metadata for _DequeBufferHeader,  v6,  MEMORY[0x18961A520],  MEMORY[0x189618740],  MEMORY[0x18961A528],  v8);
  if (v9 < minimumCapacity || (v7 & 1) == 0) {
    Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(minimumCapacity, linearGrowth);
  }
}

Swift::Void __swiftcall Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)( Swift::Int minimumCapacity, Swift::Bool linearGrowth)
{
  uint64_t v4 = v2;
  uint64_t v7 = *v3;
  uint64_t v8 = *(void *)(v2 + 16);
  uint64_t v9 = sub_188D0D09C( (uint64_t)sub_188CF6460,  0LL,  *v3,  (uint64_t)&type metadata for _DequeBufferHeader,  v8,  MEMORY[0x18961A520],  MEMORY[0x189618740],  MEMORY[0x18961A528],  v25);
  if (v28 >= minimumCapacity)
  {
    uint64_t v15 = MEMORY[0x1895F8858](v9);
    uint64_t v25 = v8;
    MEMORY[0x1895F8858](v15);
    uint64_t v21 = v8;
    uint64_t v22 = v4;
    uint64_t v23 = sub_188D0D9A0;
    uint64_t v24 = v16;
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(qword_18C749FB0);
    sub_188D0D240( (uint64_t)sub_188D0D95C,  (uint64_t)v20,  v7,  (uint64_t)&type metadata for _DequeBufferHeader,  v8,  v17,  v4,  MEMORY[0x18961A3E8],  (uint64_t)v27);
  }

  else
  {
    sub_188DF887C();
    char v10 = sub_188DF8870();
    uint64_t v11 = *v3;
    Swift::Int v12 = Deque._Storage._growCapacity(to:linearly:)(minimumCapacity, linearGrowth);
    uint64_t v25 = v8;
    uint64_t v26 = MEMORY[0x1895F8858](v12);
    MEMORY[0x1895F8858](v26);
    uint64_t v21 = v8;
    uint64_t v22 = v4;
    if ((v10 & 1) != 0)
    {
      uint64_t v23 = sub_188D0D9EC;
      uint64_t v24 = v13;
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(qword_18C749FB0);
      sub_188D0D240( (uint64_t)sub_188D0D95C,  (uint64_t)v20,  v11,  (uint64_t)&type metadata for _DequeBufferHeader,  v8,  v14,  v4,  MEMORY[0x18961A3E8],  (uint64_t)v27);
    }

    else
    {
      uint64_t v23 = sub_188D0D9D0;
      uint64_t v24 = v13;
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(qword_18C749FB0);
      sub_188D0D240( (uint64_t)sub_188D0D95C,  (uint64_t)v20,  v11,  (uint64_t)&type metadata for _DequeBufferHeader,  v8,  v18,  v4,  MEMORY[0x18961A3E8],  (uint64_t)v27);
    }
  }

  Swift::Int v19 = v28;
  swift_release();
  *uint64_t v3 = v19;
}

uint64_t sub_188D0D920@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_188DF866C();
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = result;
  return result;
}

uint64_t sub_188D0D95C(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_188D0D970(a1, a2, a3);
}

uint64_t sub_188D0D970(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = (*(uint64_t (**)(void))(v3 + 32))();
  if (v4) {
    *a3 = v4;
  }
  return result;
}

uint64_t sub_188D0D9A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result = Deque._UnsafeHandle.copyElements()(a1, a2, *(void *)(v4 + 16), a3);
  *a4 = result;
  return result;
}

uint64_t sub_188D0D9D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_188D0DA08(a1, a2, Deque._UnsafeHandle.copyElements(minimumCapacity:), a3);
}

uint64_t sub_188D0D9EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_188D0DA08(a1, a2, Deque._UnsafeHandle.moveElements(minimumCapacity:), a3);
}

uint64_t sub_188D0DA08@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void, uint64_t, uint64_t, void)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = a3(*(void *)(v4 + 24), a1, a2, *(void *)(v4 + 16));
  *a4 = result;
  return result;
}

uint64_t sub_188D0DA44()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for Deque._Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Deque._Storage);
}

uint64_t sub_188D0DA58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  return sub_188D0D9A0(a1, a2, a3, a4);
}

uint64_t OrderedSet.subtracting(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v12[0] = a1;
  v12[1] = a2;
  uint64_t v10 = type metadata accessor for OrderedSet(0LL, a5, a6, a4);
  MEMORY[0x1895D7620](&protocol conformance descriptor for OrderedSet<A>, v10);
  return OrderedSet._subtracting<A>(_:)((uint64_t)v12, a3, a4, a5, v10, a6);
}

{
  uint64_t v10;
  void v12[2];
  v12[0] = a1;
  v12[1] = a2;
  uint64_t v10 = type metadata accessor for OrderedSet(0LL, a5, a6, a4);
  MEMORY[0x1895D7620](&protocol conformance descriptor for OrderedSet<A>, v10);
  return OrderedSet._subtracting<A>(_:)((uint64_t)v12, a3, a4, a5, v10, a6);
}

uint64_t OrderedSet._subtracting<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (_s19CollectionsInternal4HeapV5countSivg_0() < 1)
  {
    uint64_t v12 = OrderedSet.init()();
    swift_release();
    swift_release();
    return v12;
  }

  else
  {
    uint64_t v8 = _s19CollectionsInternal4HeapV5countSivg_0();
    uint64_t v9 = MEMORY[0x1895F8858](v8);
    if (v9 < 0)
    {
      __break(1u);
    }

    else
    {
      unint64_t v10 = (unint64_t)(v9 + 63) >> 6;
      uint64_t v14 = 0LL;
      uint64_t v15 = 0LL;
      MEMORY[0x1895F8858](v9);
      type metadata accessor for OrderedSet(0LL, a4, a6, v11);
      sub_188DC1FD8(v10, (void (*)(char **))sub_188D0E0A4);
    }

    __break(1u);
    uint64_t result = sub_188D0E0C0(v14, v15);
    __break(1u);
  }

  return result;
}

Swift::UInt sub_188D0DCF4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X7>, Swift::UInt *a9@<X8>)
{
  uint64_t v51 = a9;
  uint64_t v57 = a7;
  uint64_t v48 = a4;
  uint64_t v56 = a2;
  uint64_t v50 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_188DF8384();
  uint64_t v17 = MEMORY[0x1895F8858](v16);
  Swift::Int v19 = (char *)&v46 - v18;
  uint64_t v20 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](v17);
  uint64_t v22 = (char *)&v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v54 = a8;
  uint64_t v49 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v47 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v25 = (char *)&v46 - v24;
  Swift::UInt result = _s19CollectionsInternal4HeapV5countSivg_0();
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    return result;
  }

  uint64_t v53 = a1;
  _UnsafeBitSet.insertAll(upTo:)(result);
  uint64_t v55 = a3;
  uint64_t v52 = _s19CollectionsInternal4HeapV5countSivg_0();
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, v48, v49);
  sub_188DF7FDC();
  swift_getAssociatedConformanceWitness();
  int v54 = v25;
  sub_188DF84D4();
  uint64_t v27 = v50;
  Swift::Int v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48);
  if (v28(v19, 1LL, a5) == 1)
  {
LABEL_3:
    (*(void (**)(char *, uint64_t))(v47 + 8))(v54, AssociatedTypeWitness);
    uint64_t v30 = *(int8x8_t **)v53;
    uint64_t v29 = *(void *)(v53 + 8);
    Swift::Int v31 = sub_188D10D98();
    uint64_t v32 = v56;
    swift_retain();
    uint64_t v33 = v55;
    swift_retain();
    Swift::UInt result = OrderedSet._extractSubset(using:count:extraCapacity:)(v30, v29, v52, 0LL, v31, v32, v33, a5, v57);
    Swift::UInt v34 = result;
    Swift::UInt v36 = v35;
    goto LABEL_4;
  }

  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
  v38(v15, v19, a5);
  while (1)
  {
    unint64_t v39 = OrderedSet._find(_:)();
    if ((v40 & 1) == 0 && (v39 & 0x8000000000000000LL) == 0 && (int64_t)(v39 >> 6) < *(void *)(v53 + 8))
    {
      uint64_t v41 = 8 * (v39 >> 6);
      uint64_t v42 = *(void *)(*(void *)v53 + v41);
      *(void *)(*(void *)v53 + v41) = v42 & ~(1LL << v39);
      if ((v42 & (1LL << v39)) != 0) {
        break;
      }
    }

LABEL_6:
    (*(void (**)(char *, uint64_t))(v27 + 8))(v15, a5);
    sub_188DF84D4();
    if (v28(v19, 1LL, a5) == 1) {
      goto LABEL_3;
    }
    v38(v15, v19, a5);
  }

  if (v52 != 1)
  {
    --v52;
    goto LABEL_6;
  }

  uint64_t v43 = OrderedSet.init()();
  uint64_t v44 = v27;
  Swift::UInt v34 = v43;
  Swift::UInt v36 = v45;
  (*(void (**)(char *, uint64_t))(v44 + 8))(v15, a5);
  Swift::UInt result = (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v54, AssociatedTypeWitness);
LABEL_4:
  uint64_t v37 = v51;
  *uint64_t v51 = v34;
  v37[1] = v36;
  return result;
}

      swift_unknownObjectRetain();
      sub_188D36E50(v21, (uint64_t)v219);
      swift_unknownObjectRelease();
      uint64_t v25 = LOBYTE(v219[1]);
      uint64_t v26 = BYTE4(v219[1]);
      swift_bridgeObjectRelease();
LABEL_7:
      if (v26 < v25 || v24 >= v21)
      {
        if (v24 < v21) {
          goto LABEL_103;
        }
        if (v22)
        {
          char v109 = &v22[3 * ((v21 >> ((4 * *((_BYTE *)v22 + 18) + 8) & 0x3C)) & 0xF)];
          uint64_t v111 = v109[3];
          uint64_t v110 = v109[4];
          uint64_t v112 = *((unsigned __int8 *)v109 + 40);
          v27.i32[0] = *(_DWORD *)((char *)v109 + 41);
          uint64_t v201 = vmovl_u8(v27);
          uint64_t v113 = *((unsigned __int8 *)v109 + 45);
          swift_bridgeObjectRetain();
          v114.i64[0] = v201.i64[0];
          goto LABEL_102;
        }

      if (v3 <= *(void *)(v0 + 16))
      {
        *(void *)(v0 + 8 * (v3 - 1) + 32) &= (-1LL << v2) - 1;
LABEL_12:
        *uint64_t v1 = v0;
        return result;
      }

      goto LABEL_15;
    }

  if ((a3 & 0xC) == v10)
  {
    Swift::UInt result = sub_188D37044(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000LL) == 0) {
      goto LABEL_8;
    }
  }

  else if ((a5 & 0x1000000000000000LL) == 0)
  {
LABEL_8:
    Swift::UInt result = (a3 >> 16) - (v8 >> 16);
LABEL_21:
    if (__OFADD__(v12, result))
    {
      __break(1u);
    }

    else if (v12 + result >= v12)
    {
      return sub_188DF8B28();
    }

    __break(1u);
    goto LABEL_26;
  }

  uint64_t v14 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000LL) == 0) {
    uint64_t v14 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v14 < v8 >> 16)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  if (v14 >= a3 >> 16)
  {
    Swift::UInt result = sub_188DF7F28();
    goto LABEL_21;
  }

  if (*(void *)(a1 + 8) == a3) {
    return result;
  }
  __break(1u);
LABEL_8:
  __break(1u);
  return result;
}

        *((_BYTE *)v1 + 20) = v9;
        *uint64_t v1 = i;
        v1[1] = v6;
        goto LABEL_28;
      }

      swift_beginAccess();
      uint64_t v3 = *(_DWORD *)(v11 + 16);
      if (v3) {
        goto LABEL_8;
      }
    }
  }

  return 0LL;
}

  uint64_t v13 = v7 + v12 * *(void *)(v8 + 72);
  (*(void (**)(char *))(v8 + 16))(v10);
  Swift::UInt result = sub_188D8A1FC((uint64_t)v10, v13, a4);
  a2[2] = v12;
  uint64_t v14 = a2[1];
  uint64_t v15 = __OFADD__(v14, 1LL);
  uint64_t v16 = v14 + 1;
  if (!v15)
  {
    a2[1] = v16;
    return result;
  }

  __break(1u);
LABEL_9:
  __break(1u);
  return result;
}

  Swift::UInt result = (char *)((a4 >> 8) & 0xF);
  if ((unint64_t)result < *(unsigned __int16 *)(v8 + 16))
  {
    Swift::UInt v34 = v8;
    Swift::UInt v35 = v26;
    Swift::UInt v36 = v27;
    Swift::UInt result = (char *)sub_188DB7464((uint64_t)result, (uint64_t)&v28, (uint64_t)v22);
    v4[5] = a3 + 1;
    uint64_t v14 = *(void *)&v31[1];
    uint64_t v15 = DWORD2(v31[1]);
    uint64_t v16 = WORD6(v31[1]);
    uint64_t v17 = *(_DWORD *)&v32[16];
    uint64_t v18 = *(_WORD *)&v32[20];
    Swift::Int v19 = v33;
    *(void *)uint64_t v7 = v28;
    *(_OWORD *)(v7 + 8) = v29;
    *(_OWORD *)(v7 + 24) = v30;
    *(_OWORD *)(v7 + 40) = v31[0];
    *((void *)v7 + 7) = v14;
    *((_WORD *)v7 + 34) = v16;
    *((_DWORD *)v7 + 16) = v15;
    *(_OWORD *)(v7 + 72) = *(_OWORD *)v32;
    *((_WORD *)v7 + 46) = v18;
    *((_DWORD *)v7 + 22) = v17;
    *((void *)v7 + 12) = v19;
    uint64_t v20 = v22[1];
    LOWORD(v15) = v24;
    *(void *)a2 = v22[0];
    *(void *)(a2 + 8) = v20;
    *(_DWORD *)(a2 + 16) = v23;
    *(_WORD *)(a2 + 20) = v15;
    return result;
  }

      sub_188DF84D4();
      uint64_t v29 = v23(v16, 1LL, a5);
      uint64_t v27 = v24;
      unint64_t v10 = v44;
      if (v29 == 1)
      {
        LOBYTE(v24) = 0;
        goto LABEL_19;
      }

      v28(v12, v16, a5);
    }
  }

  LOBYTE(v24) = 0;
  uint64_t v25 = v40;
  uint64_t v26 = v41;
LABEL_20:
  Swift::UInt result = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v48, v49);
  *uint64_t v26 = v24;
  return result;
}

      sub_188DB70AC((void *)v9, (uint64_t)&v64);
      uint64_t v6 = v60;
      if (!*(_BYTE *)(v60 + 18))
      {
        __int128 v63 = v3;
        goto LABEL_26;
      }
    }
  }

  if (a1) {
    goto LABEL_32;
  }
  *(void *)a2 = MEMORY[0x18961AFE8];
  *(_OWORD *)(a2 + 8) = 0uLL;
  *(_OWORD *)(a2 + 24) = 0uLL;
  *(_OWORD *)(a2 + 40) = 0uLL;
  *(_OWORD *)(a2 + 54) = 0uLL;
  *(void *)(a2 + 72) = 0LL;
  *(void *)(a2 + 80) = 0LL;
  *(void *)(a2 + 86) = 0LL;
  *(void *)(a2 + 96) = v5;
}

  if (!a2) {
    return v5;
  }
  if (a2 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = -a2;
  }
  uint64_t v24 = v8;
  if (a2 < 1)
  {
    uint64_t v24 = v8 - 1;
    uint64_t v11 = result >> 6;
    if (result < 0x40 || (result & 0x3F) != 0)
    {
      if (v11 >= a4) {
        goto LABEL_29;
      }
      uint64_t v13 = ~(-1LL << (result & 0x3F));
      uint64_t v12 = result >> 6;
    }

    else
    {
      uint64_t v12 = v11 - 1;
      if (v11 > a4)
      {
LABEL_28:
        uint64_t v11 = v12;
LABEL_29:
        uint64_t v20 = v11 << 6;
        uint64_t v21 = a3 - 8;
        do
        {
          uint64_t v22 = v11 - 1;
          if (v11 < 1)
          {
            __break(1u);
            goto LABEL_38;
          }

          Swift::UInt result = sub_188DAA7C4(&v24, *(void *)(v21 + 8 * v11));
          v20 -= 64LL;
          uint64_t v11 = v22;
        }

        while ((v23 & 1) != 0);
        if (v20 < 0) {
          goto LABEL_43;
        }
        return result + v20;
      }

      uint64_t v13 = -1LL;
    }

    Swift::UInt result = sub_188DAA7C4(&v24, *(void *)(a3 + 8 * v12) & v13);
    if ((v19 & 1) == 0) {
      return result + (v12 << 6);
    }
    goto LABEL_28;
  }

  uint64_t v9 = result >> 6;
  Swift::UInt result = sub_188DAA74C(&v24, *(void *)(a3 + 8 * v9) & (-1LL << result));
  if ((v10 & 1) == 0) {
    return result + (v5 & 0xFFFFFFFFFFFFFFC0LL);
  }
  if ((uint64_t)(v9 + 1) >= a4)
  {
LABEL_22:
    if (!v24) {
      return v4;
    }
    goto LABEL_44;
  }

  uint64_t v14 = ~v9 << 6;
  uint64_t v15 = ~v9 + a4;
  uint64_t v16 = (uint64_t *)(a3 + 8 * v9 + 8);
  while (1)
  {
    uint64_t v17 = *v16++;
    Swift::UInt result = sub_188DAA74C(&v24, v17);
    if ((v18 & 1) == 0) {
      break;
    }
    v14 -= 64LL;
    if (!--v15) {
      goto LABEL_22;
    }
  }

  if (v14 <= 0) {
    return result - v14;
  }
LABEL_45:
  __break(1u);
  return result;
}

Swift::UInt sub_188D0E080@<X0>(uint64_t a1@<X0>, Swift::UInt *a2@<X8>)
{
  return sub_188D0DCF4( a1,  *(void *)(v2 + 48),  *(void *)(v2 + 56),  *(void *)(v2 + 64),  *(void *)(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 32),  *(char **)(v2 + 40),  a2);
}

uint64_t sub_188D0E0A4(uint64_t a1)
{
  return sub_188DC1998( a1,  *(void *)(v1 + 24),  *(uint64_t (**)(uint64_t))(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 16));
}

uint64_t sub_188D0E0C0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();
    return swift_release();
  }

  return result;
}

uint64_t TreeSet._root.getter()
{
  return swift_retain();
}

uint64_t TreeSet._root.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*TreeSet._root.modify())()
{
  return nullsub_1;
}

uint64_t TreeSet._version.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t TreeSet._version.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*TreeSet._version.modify())()
{
  return nullsub_1;
}

uint64_t TreeSet.init(_new:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1;
}

uint64_t sub_188D0E1BC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t destroy for _RawHashNode()
{
  return swift_release();
}

void *sub_188D0E1F8(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_188D0E260(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

uint64_t _s8IteratorVwet_0(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t _s8IteratorVwst_0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t type metadata accessor for TreeSet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TreeSet);
}

uint64_t TreeSet.filter(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v39 = a3;
  v34[1] = a5;
  uint64_t v46 = a4;
  uint64_t v38 = a2;
  uint64_t v10 = MEMORY[0x18961AFC8] + 8LL;
  uint64_t v11 = type metadata accessor for _HashNode.Builder(0LL, a6, MEMORY[0x18961AFC8] + 8LL, a7);
  uint64_t v35 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  uint64_t v16 = (char *)v34 - v15;
  uint64_t v17 = sub_188DF8384();
  uint64_t v36 = *(void *)(v17 - 8);
  uint64_t v37 = v17;
  uint64_t v18 = MEMORY[0x1895F8858](v17);
  uint64_t v20 = (char *)v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v18);
  uint64_t v22 = (char *)v34 - v21;
  uint64_t v42 = a6;
  uint64_t v43 = a7;
  uint64_t v44 = a1;
  uint64_t v23 = v39;
  uint64_t v45 = v38;
  uint64_t v24 = v40;
  _HashNode.filter(_:_:)( 0,  (uint64_t (*)(char *, char *))sub_188D0E72C,  (uint64_t)v41,  v39,  v46,  a6,  v10,  a7,  (uint64_t)v34 - v21);
  if (!v24)
  {
    uint64_t v40 = a6;
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v20, v22, v37);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v20, 1LL, v11) == 1)
    {
      uint64_t v25 = v37;
      uint64_t v26 = *(void (**)(char *, uint64_t))(v36 + 8);
      v26(v22, v37);
      v26(v20, v25);
      swift_retain();
    }

    else
    {
      uint64_t v27 = v35;
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v16, v20, v11);
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v14, v16, v11);
      sub_188D9B09C(v11);
      uint64_t v29 = v28;
      uint64_t v31 = v30;
      (*(void (**)(char *, uint64_t))(v27 + 8))(v16, v11);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v22, v37);
      uint64_t v23 = TreeSet.init(_new:)(v29, v31, v40, a7);
      uint64_t v46 = v32;
    }
  }

  return v23;
}

uint64_t sub_188D0E59C(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *), uint64_t a4, uint64_t a5)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v11 = (char *)&v14 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16LL))((char *)&v14 - v10, a1, a5);
  char v12 = a3(v11);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, TupleTypeMetadata2);
  return v12 & 1;
}

uint64_t TreeSet.removeAll(where:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *v3;
  uint64_t v6 = v3[1];
  uint64_t v7 = v3[2];
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t v17 = *(void *)(a3 + 16);
  uint64_t v18 = v8;
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  swift_retain();
  uint64_t v9 = TreeSet.filter(_:)((uint64_t)sub_188D0E74C, (uint64_t)&v16, v5, v6, v7, v17, v8);
  if (v4) {
    return swift_release();
  }
  uint64_t v13 = v9;
  uint64_t v14 = v10;
  uint64_t v15 = v11;
  swift_release();
  uint64_t result = swift_release();
  *uint64_t v3 = v13;
  v3[1] = v14;
  v3[2] = v15;
  return result;
}

uint64_t sub_188D0E72C(uint64_t a1, uint64_t a2)
{
  return sub_188D0E59C(a1, a2, *(uint64_t (**)(char *))(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 16)) & 1;
}

BOOL sub_188D0E74C()
{
  return ((*(uint64_t (**)(void))(v0 + 32))() & 1) == 0;
}

uint64_t sub_188D0E774(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t result = sub_188DF7E74();
  if (result > 16) {
    goto LABEL_4;
  }
  if (!__OFSUB__(17LL, result))
  {
    MEMORY[0x1895D6834](32LL, 0xE100000000000000LL, 17 - result);
    swift_bridgeObjectRetain();
    sub_188DF7EE0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_4:
    sub_188D0EA14( 0xAuLL,  a1,  a2,  ((unint64_t)BYTE2(a3) << 16) | ((unint64_t)BYTE1(a3) << 8) | ((unint64_t)BYTE3(a3) << 24) | a3 & 0xFFFF000000FFLL);
    sub_188D0EEEC();
    sub_188DF7EE0();
    swift_bridgeObjectRelease();
    sub_188DF7EE0();
    swift_bridgeObjectRelease();
    sub_188DF7EE0();
    sub_188DF7EE0();
    swift_bridgeObjectRelease();
    sub_188DF7EE0();
    return 0x286B6E756843LL;
  }

  __break(1u);
  return result;
}

uint64_t sub_188D0EA14(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_188DF8B4C();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v66 = BYTE4(a4);
  uint64_t v12 = sub_188DF88D0();
  unint64_t v14 = v13;
  uint64_t result = sub_188DF7E74();
  uint64_t v61 = v9;
  uint64_t v62 = v8;
  unint64_t v63 = a1;
  if (result <= 2)
  {
    if (__OFSUB__(3LL, result))
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }

    uint64_t v66 = MEMORY[0x1895D6834](32LL, 0xE100000000000000LL, 3 - result);
    unint64_t v67 = v16;
    swift_bridgeObjectRetain();
    sub_188DF7EE0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v12 = v66;
    unint64_t v14 = v67;
  }

  uint64_t v66 = BYTE5(a4);
  sub_188DF88D0();
  uint64_t v18 = v17;
  unint64_t v19 = sub_188D55204(a2, a3, a4 & 0xFFFFFFFFFFFFLL);
  uint64_t v20 = MEMORY[0x1895D6684](v19);
  unint64_t v22 = v21;
  swift_bridgeObjectRelease();
  if ((v22 & 0x2000000000000000LL) != 0) {
    uint64_t v23 = HIBYTE(v22) & 0xF;
  }
  else {
    uint64_t v23 = v20 & 0xFFFFFFFFFFFFLL;
  }
  if (!v23)
  {
    swift_bridgeObjectRelease();
    uint64_t v66 = v12;
    unint64_t v67 = v14;
    sub_188DF7EE0();
    sub_188DF7EE0();
    swift_bridgeObjectRelease();
    return v66;
  }

  uint64_t v60 = v18;
  uint64_t v66 = v12;
  unint64_t v67 = v14;
  sub_188DF7EE0();
  unint64_t v24 = v66;
  unint64_t v25 = v67;
  swift_bridgeObjectRetain();
  sub_188DF8B40();
  unint64_t v64 = v24;
  unint64_t v65 = v25;
  swift_bridgeObjectRetain();
  unint64_t v26 = sub_188DF84C8();
  sub_188DCB360(v26, v27, v28, v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v30 = v63;
  uint64_t result = sub_188D620E0(v20, v22, (uint64_t)v11, v63);
  if (__OFSUB__(0LL, v30))
  {
    __break(1u);
    goto LABEL_27;
  }

  unint64_t v31 = result;
  unint64_t v32 = 15LL;
  uint64_t v33 = sub_188DF7E98();
  if ((v34 & 1) == 0) {
    unint64_t v32 = v33;
  }
  unint64_t v35 = v31 >> 14;
  if (v31 >> 14 < v32 >> 14)
  {
    sub_188D629E4(0x2E2E2EuLL, 0xE300000000000000LL);
    uint64_t v36 = MEMORY[0x189618078];
    unint64_t v37 = v32;
LABEL_19:
    unint64_t v39 = sub_188D0EFE8(v37, v20, v22, v36);
    uint64_t v41 = v40;
    uint64_t v43 = v42;
    uint64_t v45 = v44;
    swift_bridgeObjectRelease();
    unint64_t v46 = MEMORY[0x1895D6684](v39, v41, v43, v45);
    unint64_t v48 = v47;
    swift_bridgeObjectRelease();
    sub_188D620E0(v46, v48, (uint64_t)v11, 0x7FFFFFFFFFFFFFFFuLL);
    goto LABEL_20;
  }

  unint64_t v38 = 4 * v23;
  if (v35 >= v38)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    unint64_t v64 = 11554LL;
    unint64_t v65 = 0xE200000000000000LL;
    sub_188DF7EE0();
    swift_bridgeObjectRelease();
    sub_188D629E4(v64, v65);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v61 + 8))(v11, v62);
    return v66;
  }

  if (v35 == (unint64_t)MEMORY[0x1895D6750](v31, v20, v22) >> 14)
  {
    uint64_t v36 = MEMORY[0x189618078];
    unint64_t v37 = v31;
    goto LABEL_19;
  }

  if (v38 > (unint64_t)sub_188DF7E80() >> 14)
  {
    sub_188D629E4(0x2E2E2EuLL, 0xE300000000000000LL);
    unint64_t v37 = sub_188DF7E80();
    uint64_t v36 = MEMORY[0x189618078];
    goto LABEL_19;
  }

  unint64_t v49 = sub_188D0EFE8(v31, v20, v22, MEMORY[0x189618078]);
  unint64_t v51 = v50;
  unint64_t v53 = v52;
  unint64_t v55 = v54;
  swift_bridgeObjectRelease();
  uint64_t result = sub_188D0F1A0(v51, -3LL, v49, v53, v55);
  if ((v56 & 1) != 0) {
    uint64_t result = v49;
  }
  if (v51 >> 14 >= (unint64_t)result >> 14)
  {
    sub_188DF8438();
    swift_bridgeObjectRelease();
    unint64_t v57 = sub_188DF7FAC();
    unint64_t v59 = v58;
    sub_188D629E4(0x2E2E2EuLL, 0xE300000000000000LL);
    sub_188D620E0(v57, v59, (uint64_t)v11, 0x7FFFFFFFFFFFFFFFuLL);
    goto LABEL_20;
  }

LABEL_28:
  __break(1u);
  return result;
}

  if (v9 != a5)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }

  return result;
}

        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
    }

    __break(1u);
    goto LABEL_28;
  }

  a2 = MEMORY[0x1895D67BC](15LL, BYTE4(v6), a4, a5);
  unint64_t v28 = MEMORY[0x1895D67BC](15LL, v6 - (unint64_t)v12, a4, a5);
LABEL_12:
  if (v48 >> 14 <= a2 >> 14)
  {
    LODWORD(v6) = 0;
    LOBYTE(a5) = v23;
    LOBYTE(v29) = v23;
    return ((unint64_t)a5 << 40) | ((unint64_t)v29 << 32) | ((_DWORD)v6 << 24) | v23 & 0xFFFFFF;
  }

  unint64_t v29 = HIDWORD(v6);
  if (v48 >> 14 > v28 >> 14)
  {
    if (((v6 - v23) & 0xFFFFFF00) == 0)
    {
      a5 = v12 - (v6 - v23);
      if ((a5 & 0xFFFFFF00) == 0)
      {
        v6 >>= 24;
        return ((unint64_t)a5 << 40) | ((unint64_t)v29 << 32) | ((_DWORD)v6 << 24) | v23 & 0xFFFFFF;
      }

      goto LABEL_31;
    }

    goto LABEL_29;
  }

  unint64_t v30 = v24;
  uint64_t v44 = HIDWORD(v6);
  unint64_t v31 = sub_188DF7FD0();
  uint64_t v33 = v32;
  unint64_t v35 = v34;
  unint64_t v37 = v36;
  sub_188DF8B40();
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_188DCB360(v31, v33, v35, v37);
  a2 = v38;
  unint64_t v24 = v39;
  uint64_t result = swift_bridgeObjectRelease_n();
  if ((v24 & 1) == 0)
  {
    if ((v6 & 0x8000000000000000LL) == 0)
    {
      if (v6 <= 0xFF)
      {
        unint64_t v24 = 4LL << v30;
        if ((a2 & 0xC) != 4LL << v30) {
          goto LABEL_22;
        }
        goto LABEL_33;
      }

    unint64_t v28 = v13;
LABEL_29:
    if (v28) {
      goto LABEL_45;
    }
    unint64_t v13 = 0LL;
LABEL_32:
    swift_unknownObjectRelease();
    if (v13 < 0) {
      goto LABEL_43;
    }
    unint64_t v22 = v23 | (v24 << 8);
  }

  else
  {
LABEL_19:
    swift_unknownObjectRetain();
    unint64_t v22 = sub_188D36DF0();
    LOBYTE(v13) = 0;
    uint64_t v17 = 0LL;
  }

  if (v10) {
    unint64_t v29 = (v11 << 11) | 0x300;
  }
  else {
    unint64_t v29 = 768LL;
  }
  unint64_t v30 = v13 | 0x300LL;
  unint64_t v31 = sub_188DCF614(v29, 0LL, 0LL, 1LL);
  uint64_t v33 = v32;
  unint64_t v35 = v34;
  unint64_t v37 = v36;
  sub_188D087F8((uint64_t)&v47);
  *a3 = v9;
  a3[1] = v8;
  unint64_t v38 = v45;
  a3[2] = v46;
  a3[3] = v38;
  unint64_t v39 = v43;
  a3[4] = v44;
  a3[5] = v39;
  uint64_t v40 = v42;
  a3[6] = v30;
  a3[7] = v40;
  a3[8] = v22;
  a3[9] = v17;
  a3[10] = v31;
  a3[11] = v33;
  a3[12] = v35;
  a3[13] = v37;
}

    unint64_t v25 = v10;
LABEL_29:
    if (v25) {
      goto LABEL_45;
    }
    uint64_t v10 = 0LL;
LABEL_32:
    swift_unknownObjectRelease();
    if (v10 < 0) {
      goto LABEL_43;
    }
    unint64_t v19 = v20 | (v21 << 8);
  }

  else
  {
LABEL_19:
    swift_unknownObjectRetain();
    unint64_t v19 = sub_188D36DF0();
    LOBYTE(sub_188D08238((uint64_t)v9, v10) = 0;
    unint64_t v14 = 0LL;
  }

  if (v6) {
    unint64_t v26 = (v7 << 11) | 0x300;
  }
  else {
    unint64_t v26 = 768LL;
  }
  unint64_t v27 = v10 | 0x300LL;
  unint64_t v28 = sub_188DCF614(v26, 0LL, 0LL, 1LL);
  unint64_t v30 = v29;
  unint64_t v32 = v31;
  char v34 = v33;
  sub_188D087F8((uint64_t)&v39);
  *a3 = v5;
  a3[1] = v4;
  a3[2] = v38;
  a3[3] = v37;
  a3[4] = v8;
  a3[5] = v36;
  a3[6] = v27;
  a3[7] = *((void *)&v8 + 1);
  a3[8] = v19;
  a3[9] = v14;
  a3[10] = v28;
  a3[11] = v30;
  a3[12] = v32;
  a3[13] = v34;
}

    __break(1u);
    return result;
  }

  uint64_t v4 = v5;
  unint64_t v26 = *(_DWORD *)&v31[8];
  uint64_t result = sub_188D097FC(a1, a2, a3, a4, 0);
  if (v15 == 1)
  {
    __break(1u);
    goto LABEL_28;
  }

  unint64_t v16 = v13;
  if (v13 != *((void *)&v32 + 1)) {
    goto LABEL_20;
  }
  uint64_t v7 = result;
  uint64_t v17 = v14;
  uint64_t v6 = v15;
  uint64_t v8 = (16 * (int)result) & 0x4000LL | (result >> 8) & 3 | ((unint64_t)result << 16) | 4;
  if (v15)
  {
    uint64_t v18 = v15 + 24 * ((v14 >> ((4 * *(_BYTE *)(v15 + 18) + 8) & 0x3C)) & 0xF);
    uint64_t v9 = *(void *)(v18 + 24);
    uint64_t v5 = *(void *)(v18 + 32);
    unint64_t v19 = *(unsigned __int8 *)(v18 + 40);
    uint64_t result = swift_bridgeObjectRetain();
  }

  else
  {
    uint64_t v33 = *(void *)v31;
    char v34 = *(_OWORD *)&v31[8];
    unint64_t v35 = *(void *)&v31[24];
    uint64_t v36 = v32;
    swift_unknownObjectRetain();
    sub_188D36E50(v17, (uint64_t)v29);
    uint64_t result = sub_188D087F8(v5);
    uint64_t v9 = v29[0];
    uint64_t v5 = v29[1];
    unint64_t v19 = v30;
  }

  uint64_t v11 = v7;
  unint64_t v27 = v17;
  unint64_t v28 = v16;
  unint64_t v26 = v19;
  if ((v5 & 0x1000000000000000LL) != 0 && (v9 & 0x800000000000000LL) == 0) {
    goto LABEL_21;
  }
  if ((v5 & 0x1000000000000000LL) != 0) {
    goto LABEL_22;
  }
  swift_bridgeObjectRelease();
  uint64_t v20 = ((unint64_t)v7 << 16) + 65540;
  unint64_t v21 = v5 & 0x2000000000000000LL;
  unint64_t v22 = HIBYTE(v5) & 0xF;
  uint64_t v23 = v9 & 0xFFFFFFFFFFFFLL;
LABEL_12:
  if (v21) {
    unint64_t v24 = v22;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v20 >> 14 != 4 * v24) {
    return (v7 & 0xFFFFFFFFFFFFF800LL | BYTE2(v20)) + 2048;
  }
  swift_unknownObjectRetain();
  sub_188D36584(v28, v27, v6);
  sub_188D087F8(v4);
  return ((v7 >> 11) - v11 + v26) << 11;
}

  __break(1u);
  return result;
}

uint64_t sub_188D0EEEC()
{
  uint64_t result = sub_188DF7E74();
  if (result > 16) {
    goto LABEL_4;
  }
  if (!__OFSUB__(17LL, result))
  {
    MEMORY[0x1895D6834](32LL, 0xE100000000000000LL, 17 - result);
    swift_bridgeObjectRetain();
    sub_188DF7EE0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_4:
    sub_188DF7EE0();
    swift_bridgeObjectRelease();
    return 64LL;
  }

  __break(1u);
  return result;
}

unint64_t sub_188D0EFD0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_188D0EFE8(a1, a2, a3, MEMORY[0x189618078]);
}

unint64_t sub_188D0EFDC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_188D0EFE8(a1, a2, a3, MEMORY[0x189617D68]);
}

unint64_t sub_188D0EFE8( unint64_t result, uint64_t a2, unint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v4 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    uint64_t v4 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v4 >= result >> 14) {
    return a4();
  }
  __break(1u);
  return result;
}

uint64_t sub_188D0F038()
{
  return sub_188D0E774( *(void *)v0,  *(void *)(v0 + 8),  *(unsigned int *)(v0 + 16) | ((unint64_t)*(unsigned __int8 *)(v0 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 21) << 40));
}

unint64_t sub_188D0F054()
{
  unint64_t result = qword_18C74A0B8;
  if (!qword_18C74A0B8)
  {
    unint64_t result = MEMORY[0x1895D7620](MEMORY[0x18961A8F0], MEMORY[0x18961A8C8]);
    atomic_store(result, (unint64_t *)&qword_18C74A0B8);
  }

  return result;
}

unint64_t sub_188D0F098(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000LL) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 1) == 0 || (result & 0xC) == 4LL << v5) {
    goto LABEL_9;
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 < result >> 16)
  {
    __break(1u);
LABEL_9:
    unint64_t result = sub_188D0F134(result, a2, a3);
    if ((result & 1) == 0) {
      return result & 0xC | sub_188D36F34(result, a2, a3) & 0xFFFFFFFFFFFFFFF3LL | 1;
    }
  }

  return result;
}

unint64_t sub_188D0F134(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000LL) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4LL << v5) {
    unint64_t result = sub_188D37044(result, a2, a3);
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 < result >> 16) {
    __break(1u);
  }
  return result;
}

unint64_t sub_188D0F1A0( unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v7 = a3;
  uint64_t v10 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000LL) == 0) {
    LOBYTE(sub_188D08238((uint64_t)v9, v10) = 1;
  }
  uint64_t v11 = 4LL << v10;
  if ((a3 & 0xC) == 4LL << v10) {
LABEL_55:
  }
    unint64_t v7 = sub_188D37044(v7, a4, a5);
  unint64_t v12 = a1;
  if ((a1 & 0xC) == v11) {
    unint64_t v12 = sub_188D37044(a1, a4, a5);
  }
  unint64_t result = sub_188D0F098(a1, a4, a5);
  v7 >>= 14;
  if (a2 < 0)
  {
    uint64_t v11 = 0LL;
    a1 = v12 >> 14;
    uint64_t v20 = (char *)&v28 + 6;
    while (a1 < v7 || v7 < result >> 14)
    {
      if (result < 0x10000)
      {
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }

      if ((a5 & 0x1000000000000000LL) != 0)
      {
        unint64_t v27 = v20;
        unint64_t result = sub_188DF7E14();
        uint64_t v20 = v27;
      }

      else
      {
        unint64_t v21 = result >> 16;
        if ((a5 & 0x2000000000000000LL) != 0)
        {
          unint64_t v29 = a4;
          uint64_t v30 = a5 & 0xFFFFFFFFFFFFFFLL;
          if ((*((_BYTE *)&v29 + v21 - 1) & 0xC0) == 0x80)
          {
            uint64_t v24 = 0LL;
            do
              int v25 = v20[v21 + v24--] & 0xC0;
            while (v25 == 128);
            uint64_t v26 = 1 - v24;
          }

          else
          {
            uint64_t v26 = 1LL;
          }

          v21 -= v26;
        }

        else
        {
          uint64_t v22 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a4 & 0x1000000000000000LL) == 0)
          {
            unint64_t v28 = v20;
            uint64_t v22 = sub_188DF8684();
            uint64_t v20 = v28;
          }

          do
            int v23 = *(_BYTE *)(v22 - 1 + v21--) & 0xC0;
          while (v23 == 128);
        }

        unint64_t result = (v21 << 16) | 5;
      }

      if (--v11 <= a2)
      {
        if (a1 < v7 || result >> 14 >= v7) {
          return result;
        }
        return 0LL;
      }
    }

    return 0LL;
  }

  a1 = v12 >> 14;
  if (a2)
  {
    if ((a5 & 0x2000000000000000LL) != 0) {
      unint64_t v14 = HIBYTE(a5) & 0xF;
    }
    else {
      unint64_t v14 = a4 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v11 = a5 & 0xFFFFFFFFFFFFFFLL;
    while (v7 < a1 || result >> 14 < v7)
    {
      unint64_t v15 = result >> 16;
      if (result >> 16 >= v14)
      {
        __break(1u);
        goto LABEL_54;
      }

      if ((a5 & 0x1000000000000000LL) != 0)
      {
        unint64_t result = sub_188DF7E08();
        if (!--a2) {
          goto LABEL_26;
        }
      }

      else
      {
        if ((a5 & 0x2000000000000000LL) != 0)
        {
          unint64_t v29 = a4;
          uint64_t v30 = a5 & 0xFFFFFFFFFFFFFFLL;
          int v17 = *((unsigned __int8 *)&v29 + v15);
        }

        else
        {
          uint64_t v16 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a4 & 0x1000000000000000LL) == 0) {
            uint64_t v16 = sub_188DF8684();
          }
          int v17 = *(unsigned __int8 *)(v16 + v15);
        }

        int v18 = (char)v17;
        unsigned int v19 = __clz(v17 ^ 0xFF) - 24;
        if (v18 >= 0) {
          LOBYTE(v19) = 1;
        }
        unint64_t result = ((v15 + v19) << 16) | 5;
        if (!--a2) {
          goto LABEL_26;
        }
      }
    }

    return 0LL;
  }

uint64_t sub_188D0F484(_OWORD *a1, __int128 *a2)
{
  __int128 v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  __int128 v3 = *a2;
  __int128 v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  __int128 v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return _s19CollectionsInternal9BigStringV1loiySbAC_ACtFZ_0((uint64_t)v7, (uint64_t)v8) & 1;
}

BOOL sub_188D0F4C8(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  v6[0] = *a1;
  v6[1] = v2;
  v6[2] = a1[2];
  __int128 v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  v5[2] = a2[2];
  return (_s19CollectionsInternal9BigStringV1loiySbAC_ACtFZ_0((uint64_t)v5, (uint64_t)v6) & 1) == 0;
}

BOOL sub_188D0F514(_OWORD *a1, __int128 *a2)
{
  __int128 v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  __int128 v3 = *a2;
  __int128 v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  __int128 v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return (_s19CollectionsInternal9BigStringV1loiySbAC_ACtFZ_0((uint64_t)v7, (uint64_t)v8) & 1) == 0;
}

uint64_t sub_188D0F55C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  v6[0] = *a1;
  v6[1] = v2;
  v6[2] = a1[2];
  __int128 v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  v5[2] = a2[2];
  return _s19CollectionsInternal9BigStringV1loiySbAC_ACtFZ_0((uint64_t)v5, (uint64_t)v6) & 1;
}

uint64_t _s19CollectionsInternal9BigStringV1loiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a1 + 16);
  v27[0] = *(_OWORD *)a1;
  v27[1] = v4;
  v27[2] = *(_OWORD *)(a1 + 32);
  __int128 v5 = *(_OWORD *)(a2 + 16);
  v25[0] = *(_OWORD *)a2;
  v25[1] = v5;
  v25[2] = *(_OWORD *)(a2 + 32);
  sub_188D07F48(a1);
  sub_188D07F48(a2);
  BOOL v6 = sub_188CFE978((uint64_t)v25);
  sub_188D087F8(a2);
  sub_188D087F8(a1);
  if (v6)
  {
LABEL_24:
    char v17 = 0;
    return v17 & 1;
  }

  sub_188D011B8((uint64_t)v25, (uint64_t)v26);
  sub_188D011B8((uint64_t)v27, (uint64_t)v28);
  sub_188D07F48((uint64_t)v28);
  sub_188DA5124((__n128 *)a1, v22);
  sub_188D07F48((uint64_t)v26);
  sub_188DA5124((__n128 *)a2, v19);
  while ((v24 ^ v23) < 0x4000)
  {
    uint64_t v7 = 0LL;
    unint64_t v8 = v20;
    unint64_t v9 = v21;
    if ((v21 ^ v20) < 0x4000) {
      goto LABEL_19;
    }
    uint64_t v10 = 0LL;
LABEL_11:
    __n128 v29 = v19[0];
    __n128 v30 = v19[1];
    __n128 v31 = v19[2];
    __n128 v32 = v19[3];
    __n128 v33 = v19[4];
    unint64_t v34 = v8;
    unint64_t v35 = v9;
    sub_188DA4354();
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    if ((sub_188DA48EC(v13, v15) & 1) == 0) {
      unint64_t v20 = v21;
    }
    if (!v7)
    {
      uint64_t v7 = v16;
      goto LABEL_19;
    }

    if (!v16) {
      goto LABEL_23;
    }
    if ((v10 != v14 || v7 != v16) && (sub_188DF8978() & 1) == 0)
    {
      char v17 = sub_188DF8978();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return v17 & 1;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  __n128 v36 = v22[0];
  __n128 v37 = v22[1];
  __n128 v38 = v22[2];
  __n128 v39 = v22[3];
  __n128 v40 = v22[4];
  unint64_t v41 = v23;
  unint64_t v42 = v24;
  sub_188DA4354();
  uint64_t v10 = v11;
  uint64_t v7 = v12;
  if ((sub_188DA48EC(v11, v12) & 1) == 0) {
    unint64_t v23 = v24;
  }
  unint64_t v8 = v20;
  unint64_t v9 = v21;
  if ((v21 ^ v20) >= 0x4000) {
    goto LABEL_11;
  }
  if (v7)
  {
LABEL_23:
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_24;
  }

unint64_t sub_188D0F804()
{
  unint64_t result = qword_18C74A0C0;
  if (!qword_18C74A0C0)
  {
    unint64_t result = MEMORY[0x1895D7620](&protocol conformance descriptor for BigString, &type metadata for BigString);
    atomic_store(result, (unint64_t *)&qword_18C74A0C0);
  }

  return result;
}

BOOL TreeSet.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = sub_188DF5A9C();
  return _HashNode.containsKey(_:_:_:)(0LL, a1, v11, a2, a3, a5, MEMORY[0x18961AFC8] + 8LL, a6);
}

uint64_t TreeSet.insert(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v10 = (char *)&v24 - v9;
  uint64_t v11 = *(void *)(a3 + 24);
  uint64_t v12 = sub_188DF5A9C();
  uint64_t v13 = MEMORY[0x18961AFC8] + 8LL;
  uint64_t v14 = (void *)type metadata accessor for _HashNode(0LL, v7, MEMORY[0x18961AFC8] + 8LL, v11);
  if ((_HashNode.insert(_:_:_:)(0, a2, v15, v12, v14) & 1) != 0)
  {
    ++*(void *)(v3 + 16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
    return 1LL;
  }

  else
  {
    uint64_t v19 = v17;
    uint64_t v20 = nullsub_1(v16 + 16, v16 + 32, v7, v13, v11);
    sub_188D0FA40(v20, v21, v19, v7, v11, v10);
    uint64_t v22 = *(void *)(v7 - 8);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(a2, v7);
    uint64_t v18 = *v10;
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v22 + 32))(a1, &v10[*(int *)(TupleTypeMetadata2 + 48)], v7);
  }

  return v18;
}

uint64_t sub_188D0FA40@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, _BYTE *a6@<X8>)
{
  uint64_t v12 = &a6[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  *a6 = 0;
  uint64_t v13 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(a3, a1, a2, a4, MEMORY[0x18961AFC8] + 8LL, a5);
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16LL))(v12, v13, a4);
}

uint64_t TreeSet._insert(_:)(uint64_t a1, uint64_t a2)
{
  char v4 = sub_188D102C0(a1, a2);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(a2 + 16) - 8LL) + 8LL))(a1);
  return v4 & 1;
}

uint64_t TreeSet.remove(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v37 = a3;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = MEMORY[0x18961AFC8] + 8LL;
  swift_getTupleTypeMetadata2();
  uint64_t v36 = sub_188DF8384();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v8 = sub_188DF8384();
  uint64_t v34 = *(void *)(v8 - 8);
  unint64_t v35 = (void (*)(uint64_t, char *, uint64_t))v8;
  uint64_t v9 = MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)&v33 - v10;
  uint64_t v12 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v9);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v17 = (char *)&v33 - v16;
  uint64_t v18 = *(void *)(a2 + 24);
  unint64_t v19 = sub_188DF5A9C();
  uint64_t v20 = (void *)type metadata accessor for _HashNode(0LL, v5, v6, v18);
  _HashNode.remove(_:_:_:)(0LL, a1, v19, v20, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1LL, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(char *, void (*)(uint64_t, char *, uint64_t)))(v34 + 8))(v11, v35);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))( v37,  1LL,  1LL,  v5);
  }

  else
  {
    uint64_t v22 = *(int *)(TupleTypeMetadata2 + 48);
    unint64_t v23 = &v17[v22];
    uint64_t v24 = &v11[v22];
    uint64_t v25 = *(void *)(v5 - 8);
    uint64_t v26 = *(void (**)(uint64_t, char *, uint64_t))(v25 + 32);
    uint64_t v34 = v25;
    unint64_t v35 = v26;
    v26((uint64_t)v17, v11, v5);
    uint64_t v27 = v36;
    uint64_t v28 = *(void *)(v36 - 8);
    __n128 v33 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
    v33(v23, v24, v36);
    ++*(void *)(v38 + 16);
    __n128 v29 = &v15[*(int *)(TupleTypeMetadata2 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v15, v17, v5);
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v29, v23, v27);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, TupleTypeMetadata2);
    __n128 v30 = &v15[*(int *)(TupleTypeMetadata2 + 48)];
    __n128 v31 = v35;
    v35((uint64_t)v15, v17, v5);
    v33(v30, v23, v27);
    uint64_t v32 = v37;
    v31(v37, v15, v5);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v32, 0LL, 1LL, v5);
    return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v30, v27);
  }

uint64_t TreeSet.update(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = sub_188DF5A9C();
  v18[2] = v5;
  v18[3] = v6;
  v18[4] = a1;
  uint64_t v8 = MEMORY[0x18961AFC8] + 8LL;
  uint64_t v9 = (uint64_t *)type metadata accessor for _HashNode(0LL, v5, MEMORY[0x18961AFC8] + 8LL, v6);
  _HashNode.updateValue(_:forKey:_:_:)(0LL, a1, v7, (uint64_t)sub_188D1032C, (uint64_t)v18, v9);
  if ((v12 & 1) != 0)
  {
    uint64_t v13 = *(void *)(v5 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(a3, 1LL, 1LL, v5);
  }

  else
  {
    unsigned int v14 = v11;
    uint64_t v15 = nullsub_1(v10 + 16, v10 + 32, v5, v8, v6);
    sub_188D0FF1C(v15, v16, v14, a1, v5, a3);
    uint64_t v13 = *(void *)(v5 - 8);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(a1, v5);
}

uint64_t sub_188D0FF1C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v18 = a4;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v13 = (char *)&v17 - v12;
  uint64_t v14 = _HashNode.UnsafeHandle.itemPtr(at:)(a3, a1, a2);
  sub_188DF8378();
  uint64_t v15 = *(void *)(a5 - 8);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a6, v13, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v13, v18, a5);
  sub_188D8A1FC((uint64_t)v13, v14, TupleTypeMetadata2);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(a6, 0LL, 1LL, a5);
}

uint64_t sub_188D10054@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = TreeSet.init()(*(void *)(a1 + 16), *(void *)(a1 + 24));
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

BOOL sub_188D10084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return TreeSet.contains(_:)(a1, *v4, v4[1], a4, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t sub_188D10094@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_188D10120(a1, a2, TreeSet.union(_:), a3);
}

uint64_t sub_188D100A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = TreeSet._intersection<A>(_:)( *(char **)a1,  *(void *)(a1 + 8),  *(char **)v3,  *(void *)(v3 + 8),  *(void *)(v3 + 16),  *(void *)(a2 + 16),  (char *)(MEMORY[0x18961AFC8] + 8LL),  *(void *)(a2 + 24));
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t result = swift_release();
  *a3 = v5;
  a3[1] = v7;
  a3[2] = v9;
  return result;
}

uint64_t sub_188D10114@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_188D10120(a1, a2, TreeSet.symmetricDifference(_:), a3);
}

uint64_t sub_188D10120@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void, void, void, void, void, void, void, void)@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v6 = a3(*a1, a1[1], a1[2], *v4, v4[1], v4[2], *(void *)(a2 + 16), *(void *)(a2 + 24));
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t result = swift_release();
  *a4 = v6;
  a4[1] = v8;
  a4[2] = v10;
  return result;
}

uint64_t sub_188D1019C(uint64_t *a1, uint64_t a2)
{
  return TreeSet.formUnion(_:)(*a1, a1[1], a1[2], a2);
}

uint64_t sub_188D101B0(uint64_t a1, uint64_t a2)
{
  return TreeSet.formIntersection(_:)(*(char **)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), a2);
}

uint64_t sub_188D101C4(uint64_t *a1, uint64_t a2)
{
  return TreeSet.formSymmetricDifference(_:)(*a1, a1[1], a1[2], a2);
}

uint64_t sub_188D101D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = TreeSet.subtracting(_:)( *(void *)a1,  *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 8),  *(void *)(a1 + 16),  *v3,  v3[1],  v3[2],  *(void *)(a2 + 16),  *(void *)(a2 + 24));
  *a3 = result;
  a3[1] = v6;
  a3[2] = v7;
  return result;
}

uint64_t sub_188D1021C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_188D10240(a1, a2, a3, TreeSet.isSubset(of:));
}

uint64_t sub_188D10228(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_188D10240(a1, a2, a3, TreeSet.isDisjoint(with:));
}

uint64_t sub_188D10234(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_188D10240(a1, a2, a3, TreeSet.isSuperset(of:));
}

uint64_t sub_188D10240( void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void, void, void, void, void, void, void))
{
  return a4(*a1, a1[1], a1[2], *v4, v4[1], v4[2], *(void *)(a2 + 16), *(void *)(a2 + 24));
}

BOOL sub_188D10264()
{
  return TreeSet.isEmpty.getter(*v0, v0[1]);
}

uint64_t sub_188D10278@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result = TreeSet.init<A>(_:)(a1, *(void *)(a4 + 16), a2, *(void *)(a4 + 24), a3);
  *a5 = result;
  a5[1] = v7;
  a5[2] = v8;
  return result;
}

uint64_t sub_188D102AC(uint64_t a1, uint64_t a2)
{
  return TreeSet.subtract(_:)( *(void *)a1,  *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 8),  *(void *)(a1 + 16),  a2);
}

uint64_t sub_188D102C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = sub_188DF5A9C();
  uint64_t v6 = (void *)type metadata accessor for _HashNode(0LL, v3, MEMORY[0x18961AFC8] + 8LL, v4);
  return _HashNode.insert(_:_:_:)(0, a1, v7, v5, v6);
}

uint64_t sub_188D1032C(uint64_t a1)
{
  return sub_188CF8FC8(a1, *(void *)(v1 + 32), *(void *)(v1 + 16));
}

void sub_188D10338()
{
}

uint64_t OrderedSet.init<A>(uncheckedUniqueElements:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](a1);
  (*(void (**)(char *, uint64_t))(v7 + 16))((char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL), a1);
  uint64_t v9 = sub_188DF812C();
  uint64_t v19 = v9;
  uint64_t v10 = sub_188D10D98();
  uint64_t v11 = sub_188DF8738();
  uint64_t v12 = MEMORY[0x1895D7620](MEMORY[0x189619588], v11);
  uint64_t v13 = static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)( (uint64_t)&v19,  0LL,  1,  v10,  v11,  v12,  a4);
  uint64_t v14 = _s19CollectionsInternal4HeapV5countSivg_0();
  uint64_t v15 = 0LL;
  if (v14 >= 16)
  {
    swift_retain();
    uint64_t v15 = v13;
  }

  uint64_t v16 = OrderedSet.init(_uniqueElements:_:)(v9, v15);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, a3);
  return v16;
}

uint64_t OrderedSet.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](a1);
  uint64_t v13 = (char *)&v37[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = MEMORY[0x1895F8858](v11);
  uint64_t v16 = (char *)&v37[-1] - v15;
  MEMORY[0x1895F8858](v14);
  uint64_t v18 = (char *)&v37[-1] - v17;
  uint64_t v21 = type metadata accessor for OrderedSet(0LL, v19, v20, v20);
  if (v21 == a3)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v18, a1, a3);
    swift_dynamicCast();
    return v37[0];
  }

  uint64_t v22 = v21;
  uint64_t v36 = a5;
  unint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v23(v16, a1, a3);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A0C8);
  if (!swift_dynamicCast())
  {
    Swift::Int v33 = sub_188DF7FF4();
    v37[0] = OrderedSet.init(minimumCapacity:persistent:)(v33, 0, a2, a4);
    v37[1] = v34;
    OrderedSet.append<A>(contentsOf:)(a1, v22, a3);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, a3);
    return v37[0];
  }

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
  v23(v13, a1, a3);
  v23(v18, (uint64_t)v13, a3);
  uint64_t v24 = sub_188DF812C();
  v37[0] = v24;
  uint64_t v25 = sub_188D10D98();
  uint64_t v26 = sub_188DF8738();
  uint64_t v27 = MEMORY[0x1895D7620](MEMORY[0x189619588], v26);
  uint64_t v28 = static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)( (uint64_t)v37,  0LL,  1,  v25,  v26,  v27,  a4);
  uint64_t v29 = _s19CollectionsInternal4HeapV5countSivg_0();
  uint64_t v30 = 0LL;
  if (v29 >= 16)
  {
    swift_retain();
    uint64_t v30 = v28;
  }

  uint64_t v31 = OrderedSet.init(_uniqueElements:_:)(v24, v30);
  swift_release();
  uint64_t v32 = *(void (**)(char *, uint64_t))(v10 + 8);
  v32(v13, a3);
  v32((char *)a1, a3);
  return v31;
}

uint64_t OrderedSet.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v20[1] = v7;
  v20[2] = v8;
  v20[3] = v9;
  uint64_t v10 = sub_188DF8594();
  swift_unknownObjectRetain();
  MEMORY[0x1895D7620](MEMORY[0x189618F90], v10);
  uint64_t v11 = sub_188DF812C();
  v20[0] = v11;
  uint64_t v12 = sub_188D10D98();
  uint64_t v13 = sub_188DF8738();
  uint64_t v14 = MEMORY[0x1895D7620](MEMORY[0x189619588], v13);
  uint64_t v15 = static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)( (uint64_t)v20,  0LL,  1,  v12,  v13,  v14,  a6);
  uint64_t v16 = _s19CollectionsInternal4HeapV5countSivg_0();
  uint64_t v17 = 0LL;
  if (v16 >= 16)
  {
    swift_retain();
    uint64_t v17 = v15;
  }

  uint64_t v18 = OrderedSet.init(_uniqueElements:_:)(v11, v17);
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return v18;
}

uint64_t OrderedSet.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = sub_188D10DA0(a1, a2, a3);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t OrderedSet.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = sub_188D10EB8(a1, a2, a3, a4);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t OrderedSet.init<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(char *, uint64_t, uint64_t))
{
  unint64_t v58 = a5;
  uint64_t v59 = a4;
  uint64_t v57 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = sub_188DF8798();
  uint64_t v48 = *(void *)(v8 - 8);
  uint64_t v49 = v8;
  MEMORY[0x1895F8858](v8);
  unint64_t v47 = (char *)&v44 - v9;
  uint64_t v55 = swift_getAssociatedTypeWitness();
  uint64_t v50 = *(void *)(v55 - 8);
  MEMORY[0x1895F8858](v55);
  unint64_t v54 = (char *)&v44 - v10;
  uint64_t v11 = sub_188DF87A4();
  uint64_t v52 = *(void *)(v11 - 8);
  uint64_t v53 = v11;
  uint64_t v12 = MEMORY[0x1895F8858](v11);
  unint64_t v51 = (char *)&v44 - v13;
  uint64_t v56 = *(void *)(a3 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  uint64_t v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v18 = MEMORY[0x1895F8858](v14);
  uint64_t v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v18);
  uint64_t v22 = (char *)&v44 - v21;
  uint64_t v23 = sub_188D10D98();
  unint64_t v58 = (uint64_t (*)(char *, uint64_t, uint64_t))static _HashTable.create<A>(untilFirstDuplicateIn:scale:reservedScale:)( (uint64_t)v22,  a1,  0LL,  1,  v23,  a3,  v58,  v59);
  uint64_t v24 = a1;
  sub_188DF821C();
  LOBYTE(a1) = sub_188DF7D90();
  uint64_t v25 = v20;
  uint64_t v26 = *(void (**)(char *, uint64_t))(v17 + 8);
  v26(v25, AssociatedTypeWitness);
  if ((a1 & 1) != 0)
  {
    uint64_t v27 = v56;
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v16, v24, a3);
    uint64_t v28 = sub_188DF812C();
    uint64_t v29 = OrderedSet.init(_uniqueElements:_:)(v28, (uint64_t)v58);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v24, a3);
    v26(v22, AssociatedTypeWitness);
    return v29;
  }

  uint64_t v46 = v24;
  uint64_t result = sub_188DF7D90();
  if ((result & 1) != 0)
  {
    uint64_t v31 = v51;
    uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
    uint64_t v45 = v26;
    v44(v51, v22, AssociatedTypeWitness);
    uint64_t v32 = v53;
    MEMORY[0x1895D7620](MEMORY[0x1896196A8], v53);
    uint64_t v33 = (uint64_t)v54;
    sub_188DF8294();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v31, v32);
    uint64_t v34 = v55;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v36 = v57;
    uint64_t v53 = *(void *)(AssociatedConformanceWitness + 8);
    uint64_t v37 = sub_188DF812C();
    uint64_t v60 = OrderedSet.init(_uniqueElements:_:)(v37, (uint64_t)v58);
    uint64_t v61 = v38;
    swift_retain();
    uint64_t result = sub_188DF7D90();
    if ((result & 1) != 0)
    {
      __n128 v39 = v47;
      v44(v47, v22, AssociatedTypeWitness);
      uint64_t v40 = v49;
      MEMORY[0x1895D7620](MEMORY[0x189619690], v49);
      uint64_t v41 = v46;
      sub_188DF8294();
      (*(void (**)(char *, uint64_t))(v48 + 8))(v39, v40);
      uint64_t v43 = type metadata accessor for OrderedSet(0LL, v36, v59, v42);
      OrderedSet.append<A>(contentsOf:)(v33, v43, v34);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v41, a3);
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v33, v34);
      v45(v22, AssociatedTypeWitness);
      return v60;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_188D10D98()
{
  return 0LL;
}

uint64_t sub_188D10DA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_188DF8198();
  swift_bridgeObjectRetain();
  MEMORY[0x1895D7620](MEMORY[0x189618708], v4);
  uint64_t v5 = sub_188DF812C();
  uint64_t v14 = v5;
  uint64_t v6 = sub_188D10D98();
  uint64_t v7 = sub_188DF8738();
  uint64_t v8 = MEMORY[0x1895D7620](MEMORY[0x189619588], v7);
  uint64_t v9 = static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)((uint64_t)&v14, 0LL, 1, v6, v7, v8, a3);
  uint64_t v10 = _s19CollectionsInternal4HeapV5countSivg_0();
  uint64_t v11 = 0LL;
  if (v10 >= 16)
  {
    swift_retain();
    uint64_t v11 = v9;
  }

  uint64_t v12 = OrderedSet.init(_uniqueElements:_:)(v5, v11);
  swift_release();
  return v12;
}

uint64_t sub_188D10EB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_188DF7C1C();
  swift_bridgeObjectRetain();
  MEMORY[0x1895D7620](MEMORY[0x189617858], v6);
  sub_188DF812C();
  type metadata accessor for OrderedSet(0LL, a2, a4, v7);
  OrderedSet._regenerateHashTable()();
  return 0LL;
}

uint64_t TreeSet.formSymmetricDifference(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = TreeSet.symmetricDifference(_:)(a1, a2, a3, *v4, v4[1], v4[2], *(void *)(a4 + 16), *(void *)(a4 + 24));
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t result = swift_release();
  *uint64_t v4 = v5;
  v4[1] = v7;
  v4[2] = v9;
  return result;
}

uint64_t TreeSet.formSymmetricDifference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = TreeSet.symmetricDifference<A>(_:)(a1, a2, a3, *v5, v5[1], v5[2], *(void *)(a4 + 16), a5, *(void *)(a4 + 24));
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t result = swift_release();
  *uint64_t v5 = v6;
  v5[1] = v8;
  v5[2] = v10;
  return result;
}

uint64_t TreeSet.formSymmetricDifference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *v4;
  uint64_t v13 = (uint64_t (*)(void, void, void))v4[1];
  uint64_t v14 = (void (*)(char *, char *, uint64_t))v4[2];
  (*(void (**)(char *, uint64_t))(v9 + 16))(v11, a1);
  uint64_t v15 = TreeSet.symmetricDifference<A>(_:)( (uint64_t)v11,  v12,  v13,  v14,  *(void *)(a2 + 16),  a3,  *(void *)(a2 + 24),  a4);
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  swift_release();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, a3);
  *uint64_t v4 = v15;
  v4[1] = v17;
  v4[2] = v19;
  return result;
}

uint64_t OrderedSet.formUnion(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_release();
}

{
  void v5[2];
  v5[0] = a1;
  v5[1] = a2;
  MEMORY[0x1895D7620](&protocol conformance descriptor for OrderedSet<A>, a3);
  OrderedSet.append<A>(contentsOf:)((uint64_t)v5, a3, a3);
  swift_release();
  return swift_release();
}

uint64_t OrderedSet.formUnion<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a1, a3);
}

uint64_t sub_188D111C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[0] = a1;
  v5[1] = a2;
  MEMORY[0x1895D7620](&protocol conformance descriptor for OrderedSet<A>, a3);
  return OrderedSet.append<A>(contentsOf:)((uint64_t)v5, a3, a3);
}

uint64_t _HashNode.insert(_:_:_:)(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v26 = a4;
  uint64_t v5 = a5;
  uint64_t v23 = a3;
  unsigned int v25 = a1;
  uint64_t v7 = a5[2];
  uint64_t v8 = a5[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v24 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = MEMORY[0x1895F8858](v10);
  uint64_t v15 = (char *)&v22 - v14;
  uint64_t v16 = (char *)&v22 + *(int *)(v13 + 48) - v14;
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL);
  v17((char *)&v22 - v14, a2, v7);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL);
  v18(v16, v23, v8);
  uint64_t v19 = &v12[*(int *)(TupleTypeMetadata2 + 48)];
  v17(v12, (uint64_t)v15, v7);
  v18(v19, (uint64_t)v16, v8);
  uint64_t v28 = v7;
  uint64_t v29 = v8;
  uint64_t v30 = v5[4];
  uint64_t v31 = v12;
  LOBYTE(v5) = _HashNode.insert(_:_:_:_:)(v25, (uint64_t)v15, v26, (uint64_t)sub_188D148F0, (uint64_t)v27, v5);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v24 + 8);
  v20(v15, TupleTypeMetadata2);
  v20(v12, TupleTypeMetadata2);
  return v5 & 1;
}

uint64_t _HashNode.ensureUniqueAndAppendCollision(isUnique:_:)(int a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v22 = a3;
  int v24 = a1;
  uint64_t v6 = a4[2];
  uint64_t v7 = a4[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v23 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = MEMORY[0x1895F8858](v9);
  uint64_t v14 = (char *)&v22 - v13;
  uint64_t v15 = (char *)&v22 + *(int *)(v12 + 48) - v13;
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v16((char *)&v22 - v13, a2, v6);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL);
  v17(v15, v22, v7);
  uint64_t v18 = &v11[*(int *)(TupleTypeMetadata2 + 48)];
  v16(v11, (uint64_t)v14, v6);
  v17(v18, (uint64_t)v15, v7);
  uint64_t v26 = v6;
  uint64_t v27 = v7;
  uint64_t v28 = a4[4];
  uint64_t v29 = v11;
  uint64_t v19 = _HashNode.ensureUniqueAndAppendCollision(isUnique:_:)( v24,  (void (*)(uint64_t))sub_188D148F0,  (uint64_t)v25,  a4);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v23 + 8);
  v20(v14, TupleTypeMetadata2);
  v20(v11, TupleTypeMetadata2);
  return v19;
}

void _HashNode.updateValue(_:forKey:_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v11 = (char *)sub_188D115A8
      + 4
      * byte_188DF9C20[_HashNode.findForInsertion(_:_:_:)(a1, a2, a3, *v6, v6[1], a6[2], a6[3], a6[4]) >> 29];
  __asm { BR              X10 }

uint64_t sub_188D115A8()
{
  return 0LL;
}

uint64_t _HashNode.insert(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  Swift::Bool v13 = _HashNode.isUnique()();
  uint64_t v15 = *v6;
  uint64_t v14 = v6[1];
  uint64_t v16 = a6[2];
  uint64_t v17 = a6[4];
  if (v13)
  {
    uint64_t v18 = (char *)&loc_188D11810
        + 4
        * byte_188DF9C25[_HashNode.findForInsertion(_:_:_:)(a1, a2, a3, v15, v14, v16, a6[3], v17) >> 29];
    __asm { BR              X10 }
  }

  _HashNode.inserting(_:_:_:_:)(a1, a2, a3, a4, a5, v15, v14, v16, a6[3], v17);
  swift_release();
  *uint64_t v6 = v21;
  v6[1] = v22;
  return v20;
}

void sub_188D1188C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, unint64_t a15)
{
}

void _HashNode.inserting(_:_:_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10 = (char *)sub_188D11A7C
      + 4 * byte_188DF9C2A[_HashNode.findForInsertion(_:_:_:)(a1, a2, a3, a6, a7, a8, a9, a10) >> 29];
  __asm { BR              X10 }

uint64_t sub_188D11A7C()
{
  uint64_t result = swift_retain();
  *(_BYTE *)uint64_t v0 = 0;
  *(void *)(v0 + 8) = v1;
  *(void *)(v0 + 16) = v2;
  *(void *)(v0 + 24) = v1;
  *(_DWORD *)(v0 + 32) = HIDWORD(v3);
  return result;
}

uint64_t _HashNode.ensureUniqueAndInsertItem(isUnique:at:itemSlot:_:)( char a1, char a2, unsigned int a3, uint64_t (*a4)(uint64_t), uint64_t a5, void *a6)
{
  uint64_t v7 = v6;
  uint64_t v13 = *v6;
  uint64_t v12 = v6[1];
  uint64_t v14 = a6[2];
  uint64_t v15 = a6[3];
  if ((a1 & 1) != 0)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    uint64_t v17 = a6[4];
    if (_HashNode.hasFreeSpace(_:)(*(void *)(*(void *)(TupleTypeMetadata2 - 8) + 72LL)))
    {
      uint64_t v18 = (int *)nullsub_1(v13 + 16, v13 + 32, v14, v15, v17);
      uint64_t v20 = _HashNode.UnsafeHandle._makeRoomForNewItem(at:_:)(a3, a2, v18, v19);
      uint64_t result = a4(v20);
      v7[1] = v12 + 1;
    }

    else
    {
      return _HashNode.resizeNodeAndInsertItem(at:itemSlot:_:)(a2, a3, (uint64_t)a4, a5, a6);
    }
  }

  else
  {
    uint64_t v22 = _HashNode.copyNodeAndInsertItem(at:itemSlot:_:)(a2, a3, (uint64_t)a4, a5, v13, v12, v14, v15, a6[4]);
    uint64_t v24 = v23;
    uint64_t result = swift_release();
    *uint64_t v7 = v22;
    v7[1] = v24;
  }

  return result;
}

uint64_t _HashNode.ensureUniqueAndAppendCollision(isUnique:_:)( char a1, void (*a2)(uint64_t), uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v5;
  uint64_t v9 = v5[1];
  uint64_t v11 = a4[2];
  uint64_t v12 = a4[3];
  if ((a1 & 1) == 0)
  {
    uint64_t v20 = _HashNode.copyNodeAndAppendCollision(_:)((uint64_t)a2, a3, *v5, v5[1], v11, v12, a4[4]);
    uint64_t v22 = v21;
    uint64_t v9 = v23;
    swift_release();
    *uint64_t v5 = v20;
    v5[1] = v22;
    return v9;
  }

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v14 = a4[4];
  if (_HashNode.hasFreeSpace(_:)(*(void *)(*(void *)(TupleTypeMetadata2 - 8) + 72LL)))
  {
    uint64_t v16 = (int *)nullsub_1(v10 + 16, v10 + 32, v11, v12, v14);
    uint8x8_t v17 = (uint8x8_t)vcnt_s8((int8x8_t)*v16);
    v17.i16[0] = vaddlv_u8(v17);
    if (*v16 == v16[1]) {
      unsigned int v18 = *v16;
    }
    else {
      unsigned int v18 = v17.i32[0];
    }
    uint64_t v19 = _HashNode.UnsafeHandle._makeRoomForNewItem(at:_:)(v18, 255, v16, v15);
    a2(v19);
    v5[1] = v9 + 1;
    return v9;
  }

  return _HashNode.resizeNodeAndAppendCollision(_:)((uint64_t)a2, a3, a4);
}

uint64_t _HashNode.ensureUniqueAndSpawnChild(isUnique:level:replacing:itemSlot:newHash:_:)( int a1, int a2, unsigned int a3, unsigned int a4, unint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v59 = a6;
  uint64_t v60 = a7;
  unsigned int v57 = a3;
  int v54 = a2;
  LODWORD(v56) = a1;
  uint64_t v12 = a8[2];
  uint64_t v13 = a8[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v53 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v48 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = MEMORY[0x1895F8858](v14);
  uint64_t v49 = (uint64_t)&v48 - v17;
  MEMORY[0x1895F8858](v16);
  uint64_t v50 = (uint64_t)&v48 - v18;
  uint64_t v19 = *v8;
  uint64_t v20 = *v8 + 16;
  uint64_t v21 = *v8 + 32;
  uint64_t v52 = a8;
  uint64_t v22 = a8[4];
  uint64_t v23 = nullsub_1(v20, v21, v12, v13, v22);
  uint64_t v25 = v24;
  unsigned int v55 = a4;
  uint64_t result = sub_188D14208(v23, v12, (uint64_t *)&v61);
  unint64_t v27 = v61;
  unint64_t v58 = a5;
  if (v61 == a5)
  {
    uint64_t result = _HashNode.hasSingletonItem.getter(v19, v8[1], v12, v13, v22);
    if ((result & 1) != 0)
    {
      uint64_t v28 = v50;
      sub_188D142C4(v23, v25, v12, v13, v22, v50);
      swift_release();
      uint64_t v29 = static _HashNode._collisionNode(_:_:_:)( v58,  v28,  v28 + *(int *)(TupleTypeMetadata2 + 48),  v59,  v60,  v12,  v13,  v22);
      *uint64_t v8 = v29;
      v8[1] = v30;
      return v29;
    }
  }

  if ((v56 & 1) == 0)
  {
    uint64_t v44 = _HashNode.copyNodeAndSpawnChild(level:replacing:itemSlot:existingHash:newHash:_:)( v54,  v57,  v55,  v27,  v58,  v59,  v60,  v19,  v8[1],  v12,  v13,  v22);
    uint64_t v46 = v45;
    uint64_t v29 = v47;
    swift_release();
    *uint64_t v8 = v44;
    v8[1] = v46;
    return v29;
  }

  uint64_t v31 = *(void *)(v53 + 72);
  BOOL v32 = __OFSUB__(16LL, v31);
  uint64_t v33 = 16 - v31;
  if (!v32)
  {
    if (!_HashNode.hasFreeSpace(_:)(v33 & ~(v33 >> 63))) {
      return _HashNode.resizeNodeAndSpawnChild(level:replacing:itemSlot:existingHash:newHash:_:)( v54,  v57,  v55,  v27,  v58,  v59,  v60,  v52);
    }
    uint64_t v34 = TupleTypeMetadata2;
    uint64_t v35 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v36 = v49;
    unint64_t v56 = v27;
    uint64_t v37 = v49 + v35;
    _HashNode.removeItem(at:_:)(v49, v49 + v35, v57, v55, v52);
    int v38 = v54 + 5;
    uint64_t v39 = (uint64_t)v48;
    uint64_t v40 = (uint64_t)&v48[*(int *)(v34 + 48)];
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL))(v48, v36, v12);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL))(v40, v37, v13);
    uint64_t v41 = static _HashNode.build(level:item1:_:item2:_:)(v38, v39, v40, v56, v59, v60, v58, v12, v13, v22);
    uint64_t v29 = v42;
    sub_188DF6B94(v41, v43, v57, v52);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v36, v34);
    swift_release();
    return v29;
  }

  __break(1u);
  return result;
}

double _HashNode.inserting(_:_:_:)@<D0>( unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v33 = a5;
  *(void *)&__int128 v34 = a6;
  uint64_t v32 = a4;
  unsigned int v31 = a1;
  uint64_t v28 = a3;
  uint64_t v29 = a10;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v30 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = MEMORY[0x1895F8858](v15);
  uint64_t v20 = (char *)&v28 - v19;
  uint64_t v21 = (char *)&v28 + *(int *)(v18 + 48) - v19;
  uint64_t v22 = *(void *)(a7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 32))((char *)&v28 - v19, a2, a7);
  uint64_t v23 = *(void *)(a8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 32))(v21, v28, a8);
  uint64_t v24 = &v17[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v17, v20, a7);
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v24, v21, a8);
  uint64_t v36 = a7;
  uint64_t v37 = a8;
  uint64_t v38 = v29;
  uint64_t v39 = v17;
  _HashNode.inserting(_:_:_:_:)(v31, (uint64_t)v20, v32, (uint64_t)sub_188D148F0, (uint64_t)v35, v33, v34, a7, a8, v29);
  LOBYTE(a7) = v40;
  __int128 v34 = v41;
  uint64_t v25 = v42;
  LODWORD(v22) = v43;
  uint64_t v26 = *(void (**)(char *, uint64_t))(v30 + 8);
  v26(v20, TupleTypeMetadata2);
  v26(v17, TupleTypeMetadata2);
  *(_BYTE *)a9 = a7;
  double result = *(double *)&v34;
  *(_OWORD *)(a9 + 8) = v34;
  *(void *)(a9 + 24) = v25;
  *(_DWORD *)(a9 + 32) = v22;
  return result;
}

uint64_t _HashNode.copyNodeAndInsertItem(at:itemSlot:_:)( char a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16 = (_DWORD *)nullsub_1(a5 + 16, a5 + 32, a7, a8, a9);
  int v17 = v16[1];
  int v18 = *v16 | (1 << a1);
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = v16;
  uint64_t v26 = v19;
  int v27 = a2;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  return static _HashNode.allocate<A>(itemMap:childMap:count:extraBytes:initializingWith:)( v20,  (uint64_t)v16,  v18,  v17,  a6 + 1,  0LL,  sub_188D148A8,  (uint64_t)v22,  a7,  a8,  MEMORY[0x18961AFC8] + 8LL,  a9);
}

uint64_t _HashNode.copyNodeAndAppendCollision(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = nullsub_1(a3 + 16, a3 + 32, a5, a6, a7);
  uint64_t v15 = *v14;
  uint64_t v18 = a5;
  uint64_t v19 = a6;
  uint64_t v20 = a7;
  uint64_t v21 = v13;
  uint64_t v22 = v14;
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  return static _HashNode.allocateCollision<A>(count:_:extraBytes:initializingWith:)( v13,  a4 + 1,  v15,  0LL,  (uint64_t (*)(uint64_t))sub_188D14868,  (uint64_t)v17,  a5,  a6,  MEMORY[0x18961AFC8] + 8LL,  a7);
}

uint64_t _HashNode.copyNodeAndSpawnChild(level:replacing:itemSlot:existingHash:newHash:_:)( int a1, unsigned int a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v19 = nullsub_1(a8 + 16, a8 + 32, a10, a11, a12);
  sub_188D14428(v19, v20, a1, a3, a4, a6, a7, a5, (uint64_t)v26, a10, a11, a12);
  uint64_t v21 = v26[1];
  uint64_t v22 = swift_retain();
  uint64_t v23 = sub_188D14684(v22, v21, a2, a3, a8, a9, a10, a11, a12);
  swift_release_n();
  return v23;
}

__n128 sub_188D12764@<Q0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v17 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(a3, a1, a2, a10, a11, a12);
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  swift_retain();
  _HashNode.inserting(_:_:_:_:)(&v25, (a4 + 5), a5, a6, a7, a8, v18, v19, a10, a11, a12);
  char v20 = v25;
  __n128 v24 = v26;
  uint64_t v21 = v27;
  LODWORD(a6) = v28;
  swift_release();
  *(_BYTE *)a9 = v20;
  __n128 result = v24;
  *(__n128 *)(a9 + 8) = v24;
  *(void *)(a9 + 24) = v21;
  *(_DWORD *)(a9 + 32) = a6;
  return result;
}

uint64_t sub_188D12858@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t (*a13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v16 = (a4 + 5);
  _HashNode.UnsafeHandle.subscript.unsafeMutableAddressor(a3, a1, a2);
  uint64_t v17 = type metadata accessor for _HashNode(0LL, a10, a11, a12);
  uint64_t result = a13(v16, a5, a6, a7, a8, v17);
  *(_BYTE *)a9 = result & 1;
  *(void *)(a9 + 8) = v19;
  *(_DWORD *)(a9 + 16) = v20;
  return result;
}

uint64_t _HashNode.ensureUniqueAndInsertItem(isUnique:_:at:)( int a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v31 = a4;
  uint64_t v29 = a5;
  uint64_t v30 = a3;
  int v33 = a1;
  uint64_t v7 = a5[2];
  uint64_t v8 = a5[3];
  uint64_t v9 = a5;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v32 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = MEMORY[0x1895F8858](v11);
  uint64_t v16 = (char *)&v27 - v15;
  int v28 = (char *)&v27 + *(int *)(v14 + 48) - v15;
  uint64_t v17 = v28;
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL);
  v18((char *)&v27 - v15, a2, v7);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL);
  v19(v17, v30, v8);
  uint64_t v20 = v9[4];
  uint64_t v21 = (_DWORD *)nullsub_1(*v5 + 16LL, *v5 + 32LL, v7, v8, v20);
  LOBYTE(v9) = v31;
  v22.i32[0] = *v21 & ~(-1 << v31);
  uint8x8_t v23 = (uint8x8_t)vcnt_s8(v22);
  v23.i16[0] = vaddlv_u8(v23);
  LODWORD(v30) = v23.i32[0];
  __n128 v24 = &v13[*(int *)(TupleTypeMetadata2 + 48)];
  v18(v13, (uint64_t)v16, v7);
  v19(v24, (uint64_t)v28, v8);
  uint64_t v35 = v7;
  uint64_t v36 = v8;
  uint64_t v37 = v20;
  uint64_t v38 = v13;
  _HashNode.ensureUniqueAndInsertItem(isUnique:at:itemSlot:_:)(v33, (char)v9, v30, sub_188D14720, (uint64_t)v34, v29);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v32 + 8);
  v25(v16, TupleTypeMetadata2);
  return ((uint64_t (*)(char *, uint64_t))v25)(v13, TupleTypeMetadata2);
}

uint64_t _HashNode.resizeNodeAndInsertItem(at:itemSlot:_:)( char a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10 = v5[1];
  uint64_t v11 = a5[2];
  uint64_t v12 = a5[3];
  uint64_t v13 = a5[4];
  uint64_t v14 = (_DWORD *)nullsub_1(*v5 + 16, *v5 + 32, v11, v12, v13);
  int v15 = v14[1];
  int v16 = *v14 | (1 << a1);
  uint64_t v24 = v11;
  uint64_t v25 = v12;
  uint64_t v26 = v13;
  uint64_t v27 = v14;
  uint64_t v28 = v17;
  int v29 = a2;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  uint64_t v19 = static _HashNode.allocate<A>(itemMap:childMap:count:extraBytes:initializingWith:)( v18,  (uint64_t)v14,  v16,  v15,  v10 + 1,  0LL,  sub_188D14808,  (uint64_t)v23,  v11,  v12,  MEMORY[0x18961AFC8] + 8LL,  v13);
  uint64_t v21 = v20;
  uint64_t result = swift_release();
  *uint64_t v5 = v19;
  v5[1] = v21;
  return result;
}

uint64_t sub_188D12BB8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t (*a8)(uint64_t), uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v15 = _HashNode.UnsafeHandle.children.getter(a5, a6, a10, a11, a12);
  uint64_t v17 = v16;
  type metadata accessor for _HashNode(0LL, a10, a11, a12);
  UnsafeMutableBufferPointer.initialize(fromContentsOf:)(v15, v17, a1, a2);
  _HashNode.UnsafeHandle.reverseItems.getter();
  uint64_t v19 = v18;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v21 = sub_188DF83F0();
  MEMORY[0x1895D7620](MEMORY[0x189618B28], v21);
  sub_188DF7C88();
  sub_188DF7C88();
  uint64_t v22 = sub_188DF83E4();
  UnsafeMutableBufferPointer.initialize(fromContentsOf:)(a3, a4, v33, v34, v22, v23);
  uint64_t v24 = v19 - a7;
  MEMORY[0x1895D7620](MEMORY[0x189618B48], v21);
  sub_188DF8270();
  sub_188DF8270();
  uint64_t v25 = sub_188DF83E4();
  UnsafeMutableBufferPointer.initialize(fromContentsOf:)(a3, a4, v33, v34, v25, v26);
  uint64_t result = sub_188DF7D9C();
  if (result) {
    return a8(result + *(void *)(*(void *)(TupleTypeMetadata2 - 8) + 72LL) * v24);
  }
  __break(1u);
  return result;
}

void sub_188D12E40( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, void (*a8)(uint64_t), uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v15 = _HashNode.UnsafeHandle.children.getter(a5, a6, a10, a11, a12);
  uint64_t v17 = v16;
  type metadata accessor for _HashNode(0LL, a10, a11, a12);
  _sSr19CollectionsInternalE17moveInitializeAll14fromContentsOfySryxG_tF_0(v15, v17, a1, a2);
  _HashNode.UnsafeHandle.reverseItems.getter();
  uint64_t v19 = v18;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v21 = sub_188DF83F0();
  MEMORY[0x1895D7620](MEMORY[0x189618B28], v21);
  sub_188DF7C88();
  sub_188DF7C88();
  uint64_t v22 = sub_188DF83E4();
  sub_188D57F9C(a3, a4, v32, v33, v22, v23);
  MEMORY[0x1895D7620](MEMORY[0x189618B48], v21);
  sub_188DF8270();
  sub_188DF8270();
  uint64_t v24 = sub_188DF83E4();
  sub_188D57F9C(a3, a4, v32, v33, v24, v25);
  uint64_t v26 = sub_188DF7D9C();
  if (v26)
  {
    a8(v26 + *(void *)(*(void *)(TupleTypeMetadata2 - 8) + 72LL) * (v19 - a7));
    _HashNode.UnsafeHandle.clear()();
  }

  else
  {
    __break(1u);
  }

uint64_t sub_188D130E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v8 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = MEMORY[0x1895F8858](v8);
  uint64_t v13 = (char *)&v21 - v12;
  uint64_t v14 = *(int *)(v11 + 48);
  uint64_t v15 = (char *)&v21 + v14 - v12;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = *(void *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))((char *)&v21 - v12, a2, a3);
  uint64_t v18 = *(void *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v15, v16, a4);
  uint64_t v19 = &v10[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v10, v13, a3);
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v19, v15, a4);
  return sub_188D8A1FC((uint64_t)v10, v22, TupleTypeMetadata2);
}

uint64_t _HashNode.resizeNodeAndAppendCollision(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = v3[1];
  uint64_t v7 = a3[2];
  uint64_t v8 = a3[3];
  uint64_t v9 = a3[4];
  uint64_t v10 = nullsub_1(*v3 + 16, *v3 + 32, v7, v8, v9);
  uint64_t v12 = *v11;
  uint64_t v18 = v7;
  uint64_t v19 = v8;
  uint64_t v20 = v9;
  uint64_t v21 = v10;
  uint64_t v22 = v11;
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  uint64_t v13 = static _HashNode.allocateCollision<A>(count:_:extraBytes:initializingWith:)( v10,  v6 + 1,  v12,  0LL,  (uint64_t (*)(uint64_t))sub_188D147FC,  (uint64_t)v17,  v7,  v8,  MEMORY[0x18961AFC8] + 8LL,  v9);
  uint64_t v15 = v14;
  swift_release();
  *uint64_t v3 = v13;
  v3[1] = v15;
  return v6;
}

uint64_t sub_188D132D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = _HashNode.UnsafeHandle.reverseItems.getter();
  uint64_t v8 = v7;
  swift_getTupleTypeMetadata2();
  uint64_t v9 = sub_188DF83F0();
  MEMORY[0x1895D7620](MEMORY[0x189618B48], v9);
  sub_188DF8288();
  uint64_t v10 = sub_188DF83E4();
  UnsafeMutableBufferPointer.initialize(fromContentsOf:)(v6, v8, v10, v11);
  uint64_t result = sub_188DF7D9C();
  if (result) {
    return a5(result, v13);
  }
  __break(1u);
  return result;
}

void sub_188D133F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v5 = _HashNode.UnsafeHandle.reverseItems.getter();
  uint64_t v11 = v6;
  uint64_t v12 = v5;
  swift_getTupleTypeMetadata2();
  uint64_t v7 = sub_188DF83F0();
  MEMORY[0x1895D7620](MEMORY[0x189618B48], v7);
  sub_188DF8288();
  uint64_t v8 = sub_188DF83E4();
  _sSr19CollectionsInternalE17moveInitializeAll14fromContentsOfySryxG_tF_0(v12, v11, v8, v9);
  if (sub_188DF7D9C())
  {
    a5();
    _HashNode.UnsafeHandle.clear()();
  }

  else
  {
    __break(1u);
  }

uint64_t _HashNode._copyNodeAndReplaceItemWithNewChild(level:_:at:itemSlot:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10 = sub_188D14684(a2, a3, a4, a5, a6, a7, a8, a9, a10);
  swift_release();
  return v10;
}

uint64_t sub_188D13598@<X0>( int *a1@<X0>, uint64_t a2@<X1>, int a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>, uint64_t a9, uint64_t a10)
{
  uint64_t v30[2] = a6;
  int v31 = a3;
  BOOL v16 = _HashNode.UnsafeHandle.hasSingletonItem.getter(a1);
  if (v16 && (BOOL v16 = _HashNode.isCollisionNode.getter(a4, a5, a7, a9, a10)))
  {
    *a8 = a4;
    a8[1] = a5;
    return swift_retain();
  }

  else
  {
    v30[1] = v30;
    uint64_t v18 = MEMORY[0x1895F8858](v16);
    v25[2] = a7;
    _OWORD v25[3] = a9;
    v25[4] = a10;
    v25[5] = a1;
    v25[6] = a2;
    int v26 = v19;
    uint64_t v27 = a4;
    uint64_t v28 = a5;
    int v29 = v31;
    uint64_t result = static _HashNode.allocate<A>(itemMap:childMap:count:extraBytes:initializingWith:)( v23,  v18,  v20,  v21,  v22,  0LL,  sub_188D14814,  (uint64_t)v25,  a7,  a9,  MEMORY[0x18961AFC8] + 8LL,  a10);
    *a8 = result;
    a8[1] = v24;
  }

  return result;
}

uint64_t sub_188D136FC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v16 = type metadata accessor for _HashNode(255LL, a11, a12, a13);
  uint64_t v17 = sub_188DF83F0();
  MEMORY[0x1895D7620](MEMORY[0x189618B48], v17);
  sub_188DF8270();
  sub_188DF8270();
  uint64_t v18 = sub_188DF83E4();
  UnsafeMutableBufferPointer.initialize(fromContentsOf:)(a1, a2, v33, v34, v18, v19);
  MEMORY[0x1895D7620](MEMORY[0x189618B28], v17);
  sub_188DF7C88();
  sub_188DF7C88();
  uint64_t v20 = sub_188DF83E4();
  UnsafeMutableBufferPointer.initialize(fromContentsOf:)(a1, a2, v33, v34, v20, v21);
  v35[0] = a8;
  v35[1] = a9;
  sub_188DA6E38(a7, (uint64_t)v35, a1, a2, v16);
  swift_retain();
  swift_getTupleTypeMetadata2();
  uint64_t v22 = sub_188DF83F0();
  MEMORY[0x1895D7620](MEMORY[0x189618B28], v22);
  sub_188DF7C88();
  sub_188DF7C88();
  uint64_t v23 = sub_188DF83E4();
  UnsafeMutableBufferPointer.initialize(fromContentsOf:)(a3, a4, v33, v34, v23, v24);
  MEMORY[0x1895D7620](MEMORY[0x189618B48], v22);
  sub_188DF8270();
  sub_188DF8270();
  uint64_t v25 = sub_188DF83E4();
  return UnsafeMutableBufferPointer.initialize(fromContentsOf:)(a3, a4, v33, v34, v25, v26);
}

uint64_t _HashNode._resizeNodeAndReplaceItemWithNewChild(level:_:at:itemSlot:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5, void *a6)
{
  return sub_188D1473C(a2, a3, a4, a5, a6);
}

uint64_t sub_188D13AEC@<X0>( _DWORD *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, int8x8_t a10@<D0>, uint64_t a11, uint64_t a12)
{
  int v14 = *a1;
  int v13 = a1[1];
  a10.i32[0] = v13 & ((1 << a3) - 1);
  int8x8_t v15 = vcnt_s8(a10);
  uint64_t v19 = a8;
  uint64_t v20 = a11;
  v15.i16[0] = vaddlv_u8((uint8x8_t)v15);
  uint64_t v21 = a12;
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  __int32 v24 = v15.i32[0];
  uint64_t v25 = a6;
  uint64_t v26 = a7;
  int v27 = a4;
  uint64_t result = static _HashNode.allocate<A>(itemMap:childMap:count:extraBytes:initializingWith:)( v15,  (uint64_t)a1,  v14 & ~(1 << a3),  v13 | (1 << a3),  a5 + a7 - 1,  0LL,  sub_188D147F0,  (uint64_t)v18,  a8,  a11,  MEMORY[0x18961AFC8] + 8LL,  a12);
  *a9 = result;
  a9[1] = v17;
  return result;
}

void sub_188D13B9C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v32 = a2;
  uint64_t v16 = type metadata accessor for _HashNode(255LL, a11, a12, a13);
  uint64_t v17 = sub_188DF83F0();
  MEMORY[0x1895D7620](MEMORY[0x189618B48], v17);
  sub_188DF8270();
  sub_188DF8270();
  uint64_t v18 = sub_188DF83E4();
  sub_188D57F9C(a1, v32, v33, v34, v18, v19);
  MEMORY[0x1895D7620](MEMORY[0x189618B28], v17);
  sub_188DF7C88();
  sub_188DF7C88();
  uint64_t v20 = sub_188DF83E4();
  sub_188D57F9C(a1, a2, v33, v34, v20, v21);
  v35[0] = a8;
  v35[1] = a9;
  sub_188DA6E38(a7, (uint64_t)v35, a1, a2, v16);
  swift_retain();
  swift_getTupleTypeMetadata2();
  uint64_t v22 = sub_188DF83F0();
  MEMORY[0x1895D7620](MEMORY[0x189618B28], v22);
  sub_188DF7C88();
  sub_188DF7C88();
  uint64_t v23 = sub_188DF83E4();
  sub_188D57F9C(a3, a4, v33, v34, v23, v24);
  MEMORY[0x1895D7620](MEMORY[0x189618B48], v22);
  sub_188DF8270();
  sub_188DF8270();
  uint64_t v25 = sub_188DF83E4();
  sub_188D57F9C(a3, a4, v33, v34, v25, v26);
  _HashNode.UnsafeHandle.clear()();
}

uint64_t _HashNode.copyNodeAndPushItemIntoNewChild(level:_:at:itemSlot:)( unsigned int a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v48 = a7;
  int v41 = a5;
  unsigned int v47 = a4;
  uint64_t v44 = a2;
  uint64_t v45 = a3;
  unsigned int v43 = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v46 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v14 = TupleTypeMetadata2;
  uint64_t v39 = TupleTypeMetadata2;
  uint64_t v15 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  uint64_t v19 = (char *)&v36 - v18;
  uint64_t v42 = a6;
  uint64_t v40 = a10;
  uint64_t v20 = nullsub_1(a6 + 16, a6 + 32, a8, a9, a10);
  uint64_t v22 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(a5, v20, v21, a8, a9, a10);
  uint64_t v23 = swift_getTupleTypeMetadata2();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16LL))(v19, v22, v23);
  uint64_t v24 = *(int *)(v14 + 48);
  uint64_t v25 = &v19[v24];
  uint64_t v37 = &v19[v24];
  uint64_t v26 = &v17[v24];
  uint64_t v27 = *(void *)(a8 - 8);
  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
  v28(v17, v19, a8);
  uint64_t v29 = *(void *)(a9 - 8);
  uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
  v30(v26, v25, a9);
  uint64_t v31 = v40;
  uint64_t v38 = sub_188DF5A9C();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v17, a8);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v26, a9);
  uint64_t v32 = v39;
  uint64_t v33 = (uint64_t)&v17[*(int *)(v39 + 48)];
  v28(v17, v19, a8);
  v30((char *)v33, v37, a9);
  _HashNode.inserting(_:_:_:)(v43, (uint64_t)v17, v33, v38, v44, v45, a8, a9, (uint64_t)v49, v31);
  uint64_t v34 = sub_188D14684(v50, v51, v47, v41, v42, v48, a8, a9, v31);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v19, v32);
  return v34;
}

uint64_t sub_188D14208@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v9, v8, v13, v10, v11, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v14, a2);
  uint64_t v15 = sub_188DF5A9C();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, a2);
  *a3 = v15;
  return result;
}

uint64_t sub_188D142C4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(0LL, a1, a2, a3, a4, a5);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 16LL))( a6,  v7,  TupleTypeMetadata2);
}

uint64_t _HashNode.resizeNodeAndSpawnChild(level:replacing:itemSlot:existingHash:newHash:_:)( int a1, char a2, unsigned int a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v16 = a8[2];
  uint64_t v15 = a8[3];
  uint64_t v17 = a8[4];
  uint64_t v18 = nullsub_1(*v8 + 16LL, *v8 + 32LL, v16, v15, v17);
  sub_188D1456C(v18, v19, a1, a3, a4, a6, a7, a5, (uint64_t)v24, v16, v15, v17);
  uint64_t v20 = v24[2];
  sub_188D1473C(v24[0], v24[1], a2, a3, a8);
  return v20;
}

uint64_t sub_188D14428@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v32 = a7;
  unint64_t v33 = a8;
  unint64_t v30 = a5;
  uint64_t v31 = a6;
  uint64_t v29 = a2;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v18 = (char *)&v28 - v17;
  uint64_t v19 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(a4, a1, v29, a10, a11, a12);
  uint64_t v20 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v21 = (uint64_t)&v18[v20];
  uint64_t v22 = v19 + v20;
  (*(void (**)(char *))(*(void *)(a10 - 8) + 16LL))(v18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a11 - 8) + 16LL))(v21, v22, a11);
  uint64_t result = static _HashNode.build(level:item1:_:item2:_:)(a3 + 5, (uint64_t)v18, v21, v30, v31, v32, v33, a10, a11, a12);
  *(void *)a9 = result;
  *(void *)(a9 + 8) = v24;
  *(void *)(a9 + 16) = v25;
  *(_DWORD *)(a9 + 24) = v26;
  *(_DWORD *)(a9 + 28) = v27;
  return result;
}

uint64_t sub_188D1456C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unsigned int a4@<W3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v28 = a7;
  unint64_t v29 = a8;
  unint64_t v26 = a5;
  uint64_t v27 = a6;
  unsigned int v25 = a4;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v18 = (char *)&v24 - v17;
  _HashNode.UnsafeHandle.itemPtr(at:)(v25, a1, a2);
  sub_188DF8378();
  uint64_t result = static _HashNode.build(level:item1:_:item2:_:)( a3 + 5,  (uint64_t)v18,  (uint64_t)&v18[*(int *)(TupleTypeMetadata2 + 48)],  v26,  v27,  v28,  v29,  a10,  a11,  a12);
  *(void *)a9 = result;
  *(void *)(a9 + 8) = v20;
  *(void *)(a9 + 16) = v21;
  *(_DWORD *)(a9 + 24) = v22;
  *(_DWORD *)(a9 + 28) = v23;
  return result;
}

uint64_t sub_188D14684( uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15 = (int *)nullsub_1(a5 + 16, a5 + 32, a7, a8, a9);
  sub_188D13598(v15, v16, a4, a1, a2, a6, a7, &v18, a8, a9);
  return v18;
}

uint64_t sub_188D14720(uint64_t a1)
{
  return sub_188D130E0(a1, v1[5], v1[2], v1[3]);
}

uint64_t sub_188D1473C(uint64_t a1, uint64_t a2, char a3, int a4, void *a5)
{
  uint64_t v10 = v5[1];
  uint64_t v11 = a5[2];
  uint64_t v12 = a5[3];
  uint64_t v13 = a5[4];
  uint64_t v14 = (_DWORD *)nullsub_1(*v5 + 16LL, *v5 + 32LL, v11, v12, v13);
  sub_188D13AEC(v14, v15, a3, a4, v10, a1, a2, v11, v19, v16, v12, v13);
  swift_release();
  uint64_t result = swift_release();
  uint64_t v18 = v19[1];
  *uint64_t v5 = v19[0];
  v5[1] = v18;
  return result;
}

uint64_t sub_188D147F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_188D14820( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, _DWORD, void, void, void))sub_188D13B9C);
}

uint64_t sub_188D147FC(uint64_t a1, uint64_t a2)
{
  return sub_188D14874( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void, void))sub_188D133F4);
}

uint64_t sub_188D14808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_188D148B4( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void))sub_188D12E40);
}

uint64_t sub_188D14814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_188D14820( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, _DWORD, void, void, void))sub_188D136FC);
}

uint64_t sub_188D14820( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, _DWORD, void, void, void))
{
  return a5( a1,  a2,  a3,  a4,  *(void *)(v5 + 40),  *(void *)(v5 + 48),  *(unsigned int *)(v5 + 56),  *(void *)(v5 + 64),  *(void *)(v5 + 72),  *(_DWORD *)(v5 + 80),  *(void *)(v5 + 16),  *(void *)(v5 + 24),  *(void *)(v5 + 32));
}

uint64_t sub_188D14868(uint64_t a1, uint64_t a2)
{
  return sub_188D14874( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void, void))sub_188D132D8);
}

uint64_t sub_188D14874( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, void, void, void, void))
{
  return a3(a1, a2, v3[5], v3[6], v3[7], v3[8], v3[2], v3[3], v3[4]);
}

uint64_t sub_188D148A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_188D148B4( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void))sub_188D12BB8);
}

uint64_t sub_188D148B4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void))
{
  return a5( a1,  a2,  a3,  a4,  *(void *)(v5 + 40),  *(void *)(v5 + 48),  *(unsigned int *)(v5 + 56),  *(void *)(v5 + 64),  *(void *)(v5 + 72),  *(void *)(v5 + 16),  *(void *)(v5 + 24),  *(void *)(v5 + 32));
}

uint64_t _HashNode.union<A>(_:_:)( unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9)
{
  if (a5 < 1)
  {
    _HashNode.mapValuesToVoid(copy:extraBytes:)(0LL, 0LL, a2, a3, a6, a8, a9);
    char v18 = 1;
  }

  else if (a3 < 1)
  {
    _HashNode.mapValuesToVoid(copy:extraBytes:)(0LL, 0LL, a4, a5, a6, (uint64_t)a7, a9);
    char v18 = 0;
  }

  else if ((_BYTE)a1 || (_HashNode.hasSingletonItem.getter(a4, a5, a6, (uint64_t)a7, a9) & 1) == 0)
  {
    char v18 = _HashNode._union<A>(_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  }

  else
  {
    uint64_t v17 = nullsub_1(a4 + 16, a4 + 32, a6, a7, a9);
    sub_188D14A6C(v17, a2, a3, 0, a6, (uint64_t)a7, a8, v20, a9);
    char v18 = v20[0];
  }

  return v18 & 1;
}

uint64_t sub_188D14A6C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, unsigned int a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _BYTE *a8@<X8>, uint64_t a9)
{
  unsigned int v40 = a4;
  uint64_t v39 = a3;
  uint64_t v49 = a8;
  uint64_t v13 = *(void *)(a5 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](a1);
  int8x8_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14);
  char v18 = (char *)&v38 - v17;
  uint64_t v21 = _HashNode.UnsafeHandle.itemPtr(at:)(0, v19, v20);
  uint64_t v47 = _HashNode.mapValuesToVoid(copy:extraBytes:)(1LL, 0LL, a2, v39, a5, a7, a9);
  uint64_t v48 = v22;
  int v23 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v23(v18, v21, a5);
  v23(v16, v21, a5);
  uint64_t v24 = sub_188DF5A9C();
  unsigned int v25 = *(void (**)(char *, uint64_t))(v13 + 8);
  v25(v16, a5);
  uint64_t v42 = a5;
  uint64_t v43 = a6;
  uint64_t v38 = a6;
  uint64_t v39 = a7;
  uint64_t v44 = a7;
  uint64_t v45 = a9;
  uint64_t v46 = v21;
  unint64_t v26 = (uint64_t *)type metadata accessor for _HashNode(0LL, a5, MEMORY[0x18961AFC8] + 8LL, a9);
  _HashNode.updateValue(_:forKey:_:_:)(v40, (uint64_t)v18, v24, (uint64_t)sub_188D16B20, (uint64_t)v41, v26);
  LOBYTE(a6) = v27;
  uint64_t v29 = v28;
  unsigned int v31 = v30;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v25)(v18, a5);
  if ((a6 & 1) == 0)
  {
    uint64_t v33 = v38;
    uint64_t v34 = nullsub_1(v29 + 16, v29 + 32, a5, v38, a9);
    uint64_t result = sub_188D14C7C(v34, v35, 0LL, v29, v31, v21, a5, v33, v39, a9);
  }

  uint64_t v36 = v49;
  *uint64_t v49 = 1;
  uint64_t v37 = v48;
  *((void *)v36 + _HashNode.ensureUnique(isUnique:)(v1 & 1) = v47;
  *((void *)v36 + 2) = v37;
  return result;
}

uint64_t sub_188D14C7C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int v25 = a5;
  uint64_t v24 = a1;
  uint64_t v26 = a2;
  uint64_t v27 = a10;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v14 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  int8x8_t v16 = (char *)&v24 - v15;
  uint64_t v17 = *(int *)(v14 + 48);
  char v18 = &v16[v17];
  uint64_t v19 = a6 + v17;
  uint64_t v20 = *(void *)(a7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v16, a6, a7);
  uint64_t v21 = *(void *)(a8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v18, v19, a8);
  uint64_t v22 = _HashNode.UnsafeHandle.subscript.unsafeMutableAddressor(v25, v24, v26, a7, a8, v27);
  (*(void (**)(uint64_t, char *, uint64_t))(v20 + 40))(v22, v16, a7);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v21 + 40))( v22 + *(int *)(TupleTypeMetadata2 + 48),  v18,  a8);
}

uint64_t _HashNode._union<A>(_:_:)( unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9)
{
  if (a4 == a2)
  {
    _HashNode.mapValuesToVoid(copy:extraBytes:)(0LL, 0LL, a4, a5, a6, (uint64_t)a7, a9);
    char v17 = 0;
  }

  else if (_HashNode.isCollisionNode.getter(a4, a5, a6, (uint64_t)a7, a9) {
         || _HashNode.isCollisionNode.getter(a2, a3, a6, a8, a9))
  }
  {
    char v17 = _HashNode._union_slow<A>(_:_:)(a1, a2, a3, a4, a5, a6, (uint64_t)a7, a8, a9);
  }

  else
  {
    char v18 = (unsigned int *)nullsub_1(a4 + 16, a4 + 32, a6, a7, a9);
    sub_188D15090(v18, v19, a2, a4, a5, a1, a6, v21, a7, a8, a9);
    char v17 = v21[0];
  }

  return v17 & 1;
}

uint64_t _HashNode._union_slow<A>(_:_:)( unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  BOOL v17 = _HashNode.isCollisionNode.getter(a4, a5, a6, a7, a9);
  BOOL v18 = _HashNode.isCollisionNode.getter(a2, a3, a6, a8, a9);
  if (v17)
  {
    BOOL v19 = v18;
    uint64_t v20 = a4 + 16;
    uint64_t v21 = a4 + 32;
    if (v19)
    {
      nullsub_1(v20, v21, a6, a7, a9);
      uint64_t v29 = v22;
      uint64_t v23 = nullsub_1(a2 + 16, a2 + 32, a6, a8, a9);
      sub_188D15EA8(v23, v24, v29, a2, (uint64_t)v30, a3, a6, a7, a8, a9);
    }

    else
    {
      nullsub_1(v20, v21, a6, a7, a9);
      sub_188D16238(v27, a2, a3, a1, a4, a5, a6, (uint64_t)v30, a7, a8, a9);
    }
  }

  else
  {
    unsigned int v25 = (_DWORD *)nullsub_1(a4 + 16, a4 + 32, a6, a7, a9);
    sub_188D16714(v25, v26, a2, a3, a1, a4, a5, a6, (uint64_t)v30, a7, a8, a9);
  }

  return v30[0];
}

uint64_t sub_188D15090@<X0>( unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, int a6@<W6>, uint64_t a7@<X7>, _BYTE *a8@<X8>, void *a9, uint64_t a10, uint64_t a11)
{
  BOOL v17 = (_DWORD *)nullsub_1(a3 + 16, a3 + 32, a7, a10, a11);
  return sub_188D15138(v17, v18, a4, a5, a1, a2, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_188D15138@<X0>( _DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, _BYTE *a9@<X8>, void *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v206 = a6;
  uint64_t v210 = (_DWORD *)a4;
  unsigned int v197 = a9;
  uint64_t v195 = MEMORY[0x18961AFC8] + 8LL;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v193 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v18 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v192 = (char *)&v189 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = MEMORY[0x1895F8858](v18);
  unsigned int v191 = (char *)&v189 - v21;
  uint64_t v22 = MEMORY[0x1895F8858](v20);
  uint64_t v196 = (uint64_t)&v189 - v23;
  uint64_t v203 = *(void *)(a8 - 8);
  uint64_t v24 = MEMORY[0x1895F8858](v22);
  uint64_t v199 = (char *)&v189 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v24);
  uint64_t v204 = (char *)&v189 - v26;
  uint64_t v208 = a10;
  uint64_t v209 = a12;
  uint64_t result = _HashNode.mapValuesToVoid(copy:extraBytes:)(0LL, 0LL, a3, (uint64_t)v210, a8, (uint64_t)a10, a12);
  uint64_t v215 = result;
  uint64_t v216 = v29;
  unsigned int v30 = *a5;
  uint64_t v210 = a1;
  uint64_t v211 = a2;
  uint64_t v217 = a8;
  uint64_t v205 = a11;
  uint64_t v207 = a5;
  LODWORD(v200) = a7;
  if (!v30)
  {
    unsigned int v80 = a5[1];
    uint64_t v79 = a5;
    if (!v80)
    {
      unsigned int v126 = 0;
      LODWORD(v198) = 0;
      uint64_t v127 = v211;
      uint64_t v81 = a11;
      goto LABEL_36;
    }

    LODWORD(v198) = 0;
    unsigned int v201 = v200 + 5;
    uint64_t v81 = a11;
    goto LABEL_18;
  }

  LODWORD(v198) = 0;
  unsigned int v31 = 0;
  unsigned int v201 = a7 + 5;
  do
  {
    while (1)
    {
      unsigned int v33 = __clz(__rbit32(v30));
      v30 &= v30 - 1;
      int v34 = *a1;
      LODWORD(v202) = v33;
      int v35 = 1 << v33;
      if (((1 << v33) & v34) != 0) {
        break;
      }
      int v32 = a1[1];
      if ((v32 & v35) == 0) {
        goto LABEL_4;
      }
      HIDWORD(v202) = v30;
      v28.i32[0] = v32 & (v35 - 1);
      uint8x8_t v56 = (uint8x8_t)vcnt_s8(v28);
      v56.i16[0] = vaddlv_u8(v56);
      a2 = v211;
      uint64_t v57 = v205;
      uint64_t v58 = v209;
      uint64_t v59 = (uint64_t *)_HashNode.UnsafeHandle.childPtr(at:)(v56.u32[0], (uint64_t)v210, v211);
      uint64_t result = swift_getTupleTypeMetadata2();
      uint64_t v60 = *(void *)(*(void *)(result - 8) + 72LL);
      BOOL v61 = __OFSUB__(16LL, v60);
      uint64_t v62 = 16 - v60;
      if (v61)
      {
        __break(1u);
        return result;
      }

      Swift::Int v63 = v62 & ~(v62 >> 63);
      uint64_t v64 = v217;
      unint64_t v65 = (void *)type metadata accessor for _HashNode(0LL, v217, v195, v58);
      uint64_t v190 = v65;
      _HashNode.ensureUnique(isUnique:withFreeSpace:)(v198 & 1, v63);
      _HashNode.removeItem(at:)(v196, v66, v202, v65);
      uint64_t v67 = *v59;
      uint64_t v68 = v59[1];
      swift_retain();
      uint64_t v189 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0LL, 0LL, v67, v68, v64, v57, v58);
      uint64_t v198 = v69;
      swift_release();
      uint64_t v70 = v203;
      char v71 = *(void (**)(char *, uint64_t, uint64_t))(v203 + 16);
      uint64_t v72 = (uint64_t)v191;
      uint64_t v73 = v196;
      v71(v191, v196, v64);
      __int128 v74 = v192;
      v71(v192, v73, v64);
      uint64_t v75 = sub_188DF5A9C();
      (*(void (**)(char *, uint64_t))(v70 + 8))(v74, v64);
      _HashNode.inserting(_:_:_:)(v201, v72, v76, v75, v189, v198, v64, v195, (uint64_t)v212, v58);
      uint64_t v77 = v213;
      uint64_t v78 = v214;
      swift_release();
      sub_188DF6B94(v77, v78, v202, v190);
      swift_release();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v193 + 8))(v196, TupleTypeMetadata2);
      unsigned int v30 = HIDWORD(v202);
      if (!HIDWORD(v202))
      {
LABEL_32:
        uint64_t v79 = v207;
        unsigned int v80 = v207[1];
        LODWORD(v198) = 1;
        a1 = v210;
        if (!v80) {
          goto LABEL_33;
        }
        goto LABEL_15;
      }

LABEL_13:
      ++v31;
      LODWORD(v198) = 1;
      a1 = v210;
    }

    v28.i32[0] = (v35 - 1) & v34;
    uint8x8_t v36 = (uint8x8_t)vcnt_s8(v28);
    v36.i16[0] = vaddlv_u8(v36);
    unsigned int v37 = v36.i32[0];
    HIDWORD(v202) = v30;
    uint64_t v38 = _HashNode.UnsafeHandle.itemPtr(at:)(v31, (uint64_t)v207, v206);
    uint64_t v39 = _HashNode.UnsafeHandle.itemPtr(at:)(v37, (uint64_t)a1, a2);
    uint64_t v40 = v203;
    int v41 = v204;
    uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v203 + 16);
    v42(v204, v38, v217);
    uint64_t v43 = v199;
    v42(v199, v39, v217);
    uint64_t v44 = v217;
    LOBYTE(v38) = sub_188DF7D90();
    uint64_t v45 = *(void (**)(char *, uint64_t))(v40 + 8);
    v45(v43, v44);
    int v46 = v200;
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v45)(v41, v44);
    unsigned int v30 = HIDWORD(v202);
    if ((v38 & 1) == 0)
    {
      unsigned int v47 = v31;
      unsigned int v48 = v202;
      if ((v198 & 1) != 0)
      {
        v49.i32[0] = *(_DWORD *)nullsub_1(v215 + 16, v215 + 32, v217, MEMORY[0x18961AFC8] + 8LL, v209) & ~(-1 << (v48 & 0x1F));
        uint8x8_t v50 = (uint8x8_t)vcnt_s8(v49);
        v50.i16[0] = vaddlv_u8(v50);
        unsigned int v47 = v50.i32[0];
      }

      uint64_t v51 = v204;
      v42(v204, v39, v217);
      uint64_t v52 = v209;
      uint64_t v190 = (void *)sub_188DF5A9C();
      uint64_t v53 = ((uint64_t (*)(char *, uint64_t))v45)(v51, v217);
      MEMORY[0x1895F8858](v53);
      int v54 = v208;
      *(&v189 - 6) = v217;
      *(&v189 - 5) = (uint64_t)v54;
      *(&v189 - 4) = v205;
      *(&v189 - 3) = v52;
      uint64_t v188 = v39;
      unsigned int v55 = (void *)type metadata accessor for _HashNode(0LL, v217, MEMORY[0x18961AFC8] + 8LL, v52);
      uint64_t result = _HashNode.ensureUniqueAndSpawnChild(isUnique:level:replacing:itemSlot:newHash:_:)( v198 & 1,  v46,  v48,  v47,  (unint64_t)v190,  (uint64_t)sub_188D16B20,  (uint64_t)(&v189 - 8),  v55);
      a2 = v211;
      unsigned int v30 = HIDWORD(v202);
      if (!HIDWORD(v202)) {
        goto LABEL_32;
      }
      goto LABEL_13;
    }

      swift_storeEnumTagMultiPayload();
      return a1;
    }

    memcpy(a1, a2, *(void *)(v5 + 64));
  }

  return a1;
}

  __break(1u);
  return result;
}

    uint64_t result = (uint64_t)sub_188CF73DC(v0);
    uint64_t v0 = result;
    if (!v3) {
      goto LABEL_14;
    }
    goto LABEL_6;
  }

  if (!v3)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    uint64_t result = (uint64_t)sub_188CF73DC(v0);
    uint64_t v0 = result;
    uint64_t v8 = *(void *)(result + 16);
    if (!v8) {
      goto LABEL_18;
    }
    goto LABEL_11;
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_17;
  }
  uint64_t v8 = *(void *)(v0 + 16);
  if (v8)
  {
LABEL_11:
    *(void *)(v0 + 16) = v8 - 1;
    goto LABEL_12;
  }

    __break(1u);
    return result;
  }

  return result;
}

      __break(1u);
      goto LABEL_14;
    }

  if (v5)
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    return result;
  }

  uint64_t v11 = *(unsigned __int16 *)result;
LABEL_15:
  uint64_t v14 = *(void *)(a2 + 40 * v11);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 18);
  swift_unknownObjectRetain();
  int8x8_t v16 = v14 + 16;
  BOOL v17 = v14 + 24;
  if (v15) {
    uint64_t v18 = sub_188D84420(v16, v17, v5, a4);
  }
  else {
    uint64_t v18 = sub_188D848E4(v16, v17, v5, a4);
  }
  uint64_t v19 = v18;
  uint64_t result = swift_unknownObjectRelease();
  if ((v19 & 1) == 0) {
    return 0LL;
  }
  uint64_t v20 = v11 + 1;
  if (__OFADD__(v11, 1LL)) {
    goto LABEL_39;
  }
  if (v20 < v7)
  {
    int v32 = v7;
    unsigned int v33 = v6;
    do
    {
      uint64_t v22 = *(void *)(v6 + 40 * v20);
      if (*(_BYTE *)(v22 + 18))
      {
        swift_unknownObjectRetain();
        uint64_t v21 = sub_188D83DAC((_WORD *)(v22 + 16), v22 + 24, a4);
        swift_unknownObjectRelease();
        if ((v21 & 1) == 0) {
          return 0LL;
        }
      }

      else
      {
        uint64_t v23 = *(unsigned __int16 *)(v22 + 16);
        if (*(_WORD *)(v22 + 16))
        {
          swift_unknownObjectRetain();
          uint64_t v24 = v22 + 32;
          do
          {
            swift_bridgeObjectRetain();
            uint64_t v25 = sub_188DF7FD0();
            uint64_t v27 = v26;
            uint64_t v29 = v28;
            unsigned int v31 = v30;
            swift_bridgeObjectRelease();
            sub_188DCAB58(v25, v27, v29, v31);
            swift_bridgeObjectRelease();
            v24 += 24LL;
            --v23;
          }

          while (v23);
        }

        else
        {
          swift_unknownObjectRetain();
        }

        swift_unknownObjectRelease();
        uint64_t v7 = v32;
        uint64_t v6 = v33;
      }

      ++v20;
    }

    while (v20 != v7);
  }

  return 1LL;
}

  if (a3)
  {
LABEL_35:
    __break(1u);
    return result;
  }

  uint64_t v20 = *(unsigned __int16 *)a1;
LABEL_15:
  uint64_t v5 = a2 + 24 * v20;
  if (a3 >= *(unsigned __int8 *)(v5 + 19))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  uint64_t v4 = *(void *)v5;
  a1 = *(void *)(v5 + 8);
  uint64_t v13 = *(unsigned __int8 *)(v5 + 20);
  uint64_t v44 = a2;
  uint64_t v45 = result;
  if ((a1 & 0x1000000000000000LL) != 0)
  {
LABEL_30:
    uint64_t v24 = MEMORY[0x1895D67BC](15LL, v13, v4, a1);
    goto LABEL_21;
  }

  uint64_t v23 = HIBYTE(a1) & 0xF;
  if ((a1 & 0x2000000000000000LL) == 0) {
    uint64_t v23 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (v23 < v13)
  {
    __break(1u);
    goto LABEL_32;
  }

  uint64_t v24 = (v13 << 16) | 4;
LABEL_21:
  swift_bridgeObjectRetain();
  sub_188D0EFD0(v24, v4, a1);
  uint64_t v25 = sub_188DF8468();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v26 = *(void *)v5;
  uint64_t v27 = *(void *)(v5 + 8);
  swift_bridgeObjectRetain();
  int8x8_t v28 = sub_188D0EFD0(v25, v26, v27);
  unsigned int v30 = v29;
  int v32 = v31;
  int v34 = v33;
  swift_bridgeObjectRelease();
  sub_188DCAFBC(v28, v30, v32, v34);
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 40))(a4, v15, v45);
  if (__OFADD__(v20, 1LL))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }

  if (v20 + 1 < v16)
  {
    int v35 = ~v20 + v16;
    uint8x8_t v36 = v44 + 24 * v20 + 32;
    do
    {
      swift_bridgeObjectRetain();
      unsigned int v37 = sub_188DF7FD0();
      uint64_t v39 = v38;
      int v41 = v40;
      uint64_t v43 = v42;
      swift_bridgeObjectRelease();
      sub_188DCAB58(v37, v39, v41, v43);
      swift_bridgeObjectRelease();
      v36 += 24LL;
      --v35;
    }

    while (v35);
  }

  return 1LL;
}

  __break(1u);
  return result;
}

  if (v4) {
LABEL_20:
  }
    __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    __break(1u);
LABEL_14:
    uint64_t v27 = v10;
    uint64_t v10 = 0LL;
    *a1 = v23;
    a1[1] = v21;
    a1[2] = v22;
    a1[3] = v19;
    a1[4] = v18;
    a1[5] = v15;
    a1[6] = v20;
    a1[7] = v17;
    a1[8] = v16;
    a1[9] = v7;
    a1[10] = v9;
    a1[11] = (unint64_t)v8;
    a1[12] = (unint64_t)v27;
    a1[13] = (unint64_t)v11;
    a1[14] = v13;
    a1[15] = (unint64_t)v12;
    return (uint64_t)v10;
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

LABEL_4:
    ++v31;
    a1 = v210;
    a2 = v211;
  }

  while (v30);
  uint64_t v79 = v207;
  unsigned int v80 = v207[1];
  if (!v80)
  {
LABEL_33:
    unsigned int v126 = 0;
    uint64_t v127 = v211;
    uint64_t v81 = v205;
    goto LABEL_36;
  }

  if ((a7 & 0x10000000000LL) == 0)
  {
    uint64_t result = swift_beginAccess();
    if (*(_DWORD *)(a6 + 16) == *(_DWORD *)(a6 + 20))
    {
      if ((_DWORD)a7) {
        goto LABEL_7;
      }
    }

    else
    {
      v21.i32[0] = *(_DWORD *)(a6 + 20);
      uint64_t v25 = (uint8x8_t)vcnt_s8(v21);
      v25.i16[0] = vaddlv_u8(v25);
      if (v25.i32[0] != (_DWORD)a7) {
        goto LABEL_7;
      }
    }

    if ((a4 & 0x10000000000LL) == 0)
    {
      swift_beginAccess();
      if (*(_DWORD *)(a3 + 16) == *(_DWORD *)(a3 + 20))
      {
        if (!(_DWORD)a4) {
          goto LABEL_49;
        }
      }

      else
      {
        v26.i32[0] = *(_DWORD *)(a3 + 20);
        int8x8_t v28 = (uint8x8_t)vcnt_s8(v26);
        v28.i16[0] = vaddlv_u8(v28);
        if (v28.i32[0] == (_DWORD)a4) {
          goto LABEL_49;
        }
      }
    }

    if (BYTE4(a4) <= v16)
    {
      BOOL v17 = a4;
    }

    else
    {
      sub_188D70FD4((unsigned int *)(a8 + 16), a8 + 32, (a2 >> v16) & 0x1F, v16, a2, a3, a4 & 0x1FFFFFFFFFFLL, &v31);
      BOOL v17 = v31;
    }

    uint64_t v3 = -1LL;
  }

  if (v19) {
    uint64_t v11 = v18;
  }
  else {
    uint64_t v11 = 0LL;
  }
  uint64_t v20 = (v10 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8 * (4 - (__clz(v10) >> 3))));
  uint64_t v12 = MEMORY[0x1895D66FC](&v20);
  BigString.insert(contentsOf:at:)(v12, v13, v6, v2, v3, v4);
  sub_188DBB854((uint64_t *)v5, v21, v11, v7 >> 11, v6 >> 11);
  return swift_unknownObjectRelease();
}

    uint64_t v7 = v5 << 6;
    if ((v7 & 0x8000000000000000LL) == 0) {
      return __clz(__rbit64(v6)) + v7;
    }
    goto LABEL_12;
  }

  return result;
}

LABEL_15:
  uint64_t v81 = v205;
LABEL_18:
  uint64_t v82 = 0LL;
  uint64_t v200 = MEMORY[0x18961AFC8] + 8LL;
  while (2)
  {
    while (2)
    {
      unsigned int v101 = __clz(__rbit32(v80));
      v80 &= v80 - 1;
      int v102 = *a1;
      int v103 = 1 << v101;
      if (((1 << v101) & *a1) != 0)
      {
        unint64_t v202 = __PAIR64__(v80, v101);
        v28.i32[0] = (v103 - 1) & v102;
        uint8x8_t v83 = (uint8x8_t)vcnt_s8(v28);
        v83.i16[0] = vaddlv_u8(v83);
        uint64_t v84 = v209;
        uint64_t v85 = _HashNode.UnsafeHandle.itemPtr(at:)(v83.u32[0], (uint64_t)a1, v211);
        uint64_t v86 = v203;
        uint64_t v87 = (uint64_t)v204;
        uint64_t v88 = *(void (**)(char *, uint64_t, uint64_t))(v203 + 16);
        v88(v204, v85, v217);
        uint64_t v89 = sub_188DF5A9C();
        (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v87, v217);
        uint64_t v90 = v208;
        uint64_t v91 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v82, v79, v206, v217, v208, v84);
        uint64_t v93 = *v91;
        uint64_t v92 = v91[1];
        swift_retain();
        uint64_t v94 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0LL, 0LL, v93, v92, v217, (uint64_t)v90, v84);
        uint64_t v96 = v95;
        swift_release();
        v88((char *)v87, v85, v217);
        uint64_t v97 = MEMORY[0x18961AFC8] + 8LL;
        _HashNode.inserting(_:_:_:)(v201, v87, v98, v89, v94, v96, v217, MEMORY[0x18961AFC8] + 8LL, (uint64_t)v212, v84);
        LODWORD(v88) = v212[0];
        uint64_t v100 = v213;
        uint64_t v99 = v214;
        swift_release();
        if ((_DWORD)v88 == 1)
        {
          uint64_t v124 = (void *)type metadata accessor for _HashNode(0LL, v217, v97, v209);
          _HashNode.ensureUnique(isUnique:)(v198 & 1);
          sub_188D8ADD4(v202, v100, v99, v124);
          uint64_t result = swift_release();
          uint64_t v81 = v205;
          unsigned int v80 = HIDWORD(v202);
          if (!HIDWORD(v202)) {
            goto LABEL_34;
          }
          goto LABEL_30;
        }

        uint64_t v81 = v205;
        unsigned int v80 = HIDWORD(v202);
LABEL_21:
        uint64_t result = swift_release();
        a1 = v210;
        uint64_t v79 = v207;
LABEL_22:
        uint64_t v82 = (v82 + 1);
        if (!v80) {
          goto LABEL_35;
        }
        continue;
      }

      break;
    }

    int v104 = a1[1];
    if ((v104 & v103) == 0) {
      goto LABEL_22;
    }
    LODWORD(v202) = v101;
    v28.i32[0] = v104 & (v103 - 1);
    uint8x8_t v105 = (uint8x8_t)vcnt_s8(v28);
    v105.i16[0] = vaddlv_u8(v105);
    uint64_t v106 = v81;
    uint64_t v107 = v105.u32[0];
    char v108 = v79;
    uint64_t v110 = v208;
    uint64_t v109 = v209;
    uint64_t v111 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v82, v108, v206, v217, v208, v209);
    uint64_t v113 = *v111;
    uint64_t v112 = v111[1];
    uint64_t v114 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v107, a1, v211, v217, v106, v109);
    uint64_t v115 = *v114;
    uint64_t v116 = v114[1];
    swift_retain();
    swift_retain();
    uint64_t v188 = v109;
    uint64_t v117 = v112;
    uint64_t v118 = v217;
    uint64_t v119 = v106;
    LOBYTE(v110) = _HashNode._union<A>(_:_:)(v201, v115, v116, v113, v117, v217, v110, v106, v188);
    uint64_t v121 = v120;
    uint64_t v123 = v122;
    swift_release();
    swift_release();
    if ((v110 & 1) == 0)
    {
      uint64_t v81 = v119;
      goto LABEL_21;
    }

    uint64_t v125 = (void *)type metadata accessor for _HashNode(0LL, v118, v200, v209);
    _HashNode.ensureUnique(isUnique:)(v198 & 1);
    sub_188D8ADD4(v202, v121, v123, v125);
    uint64_t result = swift_release();
    uint64_t v81 = v119;
    if (v80)
    {
LABEL_30:
      uint64_t v82 = (v82 + 1);
      LODWORD(v198) = 1;
      a1 = v210;
      uint64_t v79 = v207;
      continue;
    }

    break;
  }

  uint64_t v19 = v4 - v5;
  if (v4 < v5)
  {
    if (v8 < 0xC) {
      goto LABEL_21;
    }
    uint64_t v20 = 8 * v4;
    v4 += v8 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v21 = v20 + 48;
    uint64_t v22 = (_OWORD *)(result + v20 + 48);
    uint64_t v23 = &a1->i8[v21];
    uint64_t v24 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      uint64_t v25 = *(_OWORD *)v23;
      *(v22 - _HashNode.ensureUnique(isUnique:)(v1 & 1) = *((_OWORD *)v23 - 1);
      *uint64_t v22 = v25;
      v22 += 2;
      v23 += 32;
      v24 -= 4LL;
    }

    while (v24);
    if (v8 != (v8 & 0xFFFFFFFFFFFFFFFCLL))
    {
LABEL_21:
      uint64_t v26 = v5 - v4;
      uint64_t v27 = 8 * v4 + 32;
      int8x8_t v28 = (void *)(result + v27);
      uint64_t v29 = (uint64_t *)((char *)a1->i64 + v27);
      do
      {
        unsigned int v30 = *v29++;
        *v28++ = v30;
        --v26;
      }

      while (v26);
    }

    goto LABEL_33;
  }

  if (v5 == v4) {
    goto LABEL_33;
  }
  if (v5 < v4)
  {
    if (v19 < 0xC) {
      goto LABEL_31;
    }
    unsigned int v31 = 8 * v5;
    v5 += v19 & 0xFFFFFFFFFFFFFFFCLL;
    int v32 = v31 + 48;
    unsigned int v33 = (_OWORD *)(result + v31 + 48);
    int v34 = &a2->i8[v32];
    int v35 = v19 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      uint8x8_t v36 = *(_OWORD *)v34;
      *(v33 - _HashNode.ensureUnique(isUnique:)(v1 & 1) = *((_OWORD *)v34 - 1);
      *unsigned int v33 = v36;
      v33 += 2;
      v34 += 32;
      v35 -= 4LL;
    }

    while (v35);
    if (v19 != (v19 & 0xFFFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      unsigned int v37 = v4 - v5;
      uint64_t v38 = 8 * v5 + 32;
      uint64_t v39 = (void *)(result + v38);
      uint64_t v40 = (uint64_t *)((char *)a2->i64 + v38);
      do
      {
        int v41 = *v40++;
        *v39++ = v41;
        --v37;
      }

      while (v37);
    }

  char *v35 = v19;
  return result;
}

  uint64_t v42 = v46;
  uint64_t v43 = v50;
  (*(void (**)(_BYTE *, uint64_t))(v46 + 8))(v49, v50);
  uint64_t v44 = 1LL;
  int v41 = v45;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(v41, v44, 1LL, v43);
}

    __break(1u);
    goto LABEL_16;
  }

  v0[2] = (v1 - 1) & v1;
  uint64_t v2 = v0[1] << 6;
  if (v2 < 0)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v3 = 0;
  uint64_t v4 = v2 | __clz(__rbit64(v1));
LABEL_17:
  result.value = v4;
  result.is_nil = v3;
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

      BOOL v17 = (int64_t)sub_188CF73DC(v17);
      *uint64_t v4 = v17;
      goto LABEL_8;
    }

  __break(1u);
  return result;
}

  uint64_t result = v6 - 1;
  if (__OFSUB__(v6, 1LL)) {
LABEL_21:
  }
    __break(1u);
  return result;
}

  uint64_t v18 = v4 - v5;
  if (v4 < v5)
  {
    bzero((void *)(v7 + 8 * v4 + 32), 8 * (v5 - v4));
    goto LABEL_26;
  }

  if (v5 == v4)
  {
LABEL_26:
    if (v6)
    {
      if (*(void *)(v7 + 32 + 8 * v6 - 8))
      {
        unsigned int v30 = v6;
LABEL_41:
        *(void *)(v7 + 16) = v30;
        return v7;
      }

      uint8x8_t v36 = v6;
      while (1)
      {
        unsigned int v30 = v36 - 1;
        if (v36 - 1 < 1) {
          break;
        }
        if (*(void *)(v7 + 16 + 8 * v36--))
        {
          if (v6 >= v30) {
            goto LABEL_41;
          }
          __break(1u);
          break;
        }
      }
    }

    unsigned int v30 = 0LL;
    goto LABEL_41;
  }

  if (v5 < v4)
  {
    if (v18 < 0xC) {
      goto LABEL_24;
    }
    uint64_t v19 = 8 * v5;
    v5 += v18 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v20 = v19 + 48;
    uint64_t v21 = (_OWORD *)(v7 + v19 + 48);
    uint64_t v22 = &a2->i8[v20];
    uint64_t v23 = v18 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      uint64_t v24 = *(_OWORD *)v22;
      *(v21 - _HashNode.ensureUnique(isUnique:)(v1 & 1) = *((_OWORD *)v22 - 1);
      *uint64_t v21 = v24;
      v21 += 2;
      v22 += 32;
      v23 -= 4LL;
    }

    while (v23);
    if (v18 != (v18 & 0xFFFFFFFFFFFFFFFCLL))
    {
LABEL_24:
      uint64_t v25 = v4 - v5;
      uint64_t v26 = 8 * v5 + 32;
      uint64_t v27 = (void *)(v7 + v26);
      int8x8_t v28 = (uint64_t *)((char *)a2->i64 + v26);
      do
      {
        uint64_t v29 = *v28++;
        *v27++ = v29;
        --v25;
      }

      while (v25);
    }

    goto LABEL_26;
  }

  __break(1u);
  return result;
}

  uint64_t v19 = v4 - v5;
  if (v4 < v5)
  {
    if (v8 < 0xC) {
      goto LABEL_21;
    }
    uint64_t v20 = 8 * v4;
    v4 += v8 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v21 = v20 + 48;
    uint64_t v22 = (_OWORD *)(result + v20 + 48);
    uint64_t v23 = &a1->i8[v21];
    uint64_t v24 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      uint64_t v25 = *(_OWORD *)v23;
      *(v22 - _HashNode.ensureUnique(isUnique:)(v1 & 1) = *((_OWORD *)v23 - 1);
      *uint64_t v22 = v25;
      v22 += 2;
      v23 += 32;
      v24 -= 4LL;
    }

    while (v24);
    if (v8 != (v8 & 0xFFFFFFFFFFFFFFFCLL))
    {
LABEL_21:
      uint64_t v26 = v5 - v4;
      uint64_t v27 = 8 * v4 + 32;
      int8x8_t v28 = (void *)(result + v27);
      uint64_t v29 = (uint64_t *)((char *)a1->i64 + v27);
      do
      {
        unsigned int v30 = *v29++;
        *v28++ = v30;
        --v26;
      }

      while (v26);
    }

    goto LABEL_33;
  }

  if (v5 == v4) {
    goto LABEL_33;
  }
  if (v5 < v4)
  {
    if (v19 < 0xC) {
      goto LABEL_31;
    }
    unsigned int v31 = 8 * v5;
    v5 += v19 & 0xFFFFFFFFFFFFFFFCLL;
    int v32 = v31 + 48;
    unsigned int v33 = (_OWORD *)(result + v31 + 48);
    int v34 = &a2->i8[v32];
    int v35 = v19 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      uint8x8_t v36 = *(_OWORD *)v34;
      *(v33 - _HashNode.ensureUnique(isUnique:)(v1 & 1) = *((_OWORD *)v34 - 1);
      *unsigned int v33 = v36;
      v33 += 2;
      v34 += 32;
      v35 -= 4LL;
    }

    while (v35);
    if (v19 != (v19 & 0xFFFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      unsigned int v37 = v4 - v5;
      uint64_t v38 = 8 * v5 + 32;
      uint64_t v39 = (void *)(result + v38);
      uint64_t v40 = (uint64_t *)((char *)a2->i64 + v38);
      do
      {
        int v41 = *v40++;
        *v39++ = v41;
        --v37;
      }

      while (v37);
    }

    uint64_t v29 = *(void *)(v4 + 8);
    unsigned int v30 = *(_OWORD *)(v4 + 16);
    unsigned int v31 = *(_OWORD *)(v4 + 32);
    *(_OWORD *)(v4 + 8) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(void *)(v4 + 40) = 0LL;
    if (v29)
    {
      *(void *)int v41 = v29;
      *(_OWORD *)&v41[8] = v30;
      *(_OWORD *)&v41[24] = v31;
      sub_188DDCB8C((unint64_t *)v41, a2, a3, a4);
    }

    *(_OWORD *)uint64_t v51 = v42;
    *(_OWORD *)&v51[16] = v43;
    int v32 = v44;
    goto LABEL_18;
  }

  if (*(_WORD *)(v42 + 16) == 1)
  {
    sub_188D36E50(0LL, (uint64_t)v41);
    sub_188DDC91C( *(uint64_t *)v41,  *(unint64_t *)&v41[8],  *(unsigned int *)&v41[16] | ((unint64_t)v41[20] << 32) | ((unint64_t)v41[21] << 40));
    int8x8_t v16 = a1;
LABEL_12:
    sub_188D087F8((uint64_t)v16);
    return result;
  }

  uint64_t v19 = *(void **)(v4 + 48);
  uint64_t v18 = *(void *)(v4 + 56);
  uint64_t v20 = *(unsigned __int16 *)(v4 + 68);
  uint64_t v21 = *(unsigned int *)(v4 + 64);
  *(void *)(v4 + 48) = 0LL;
  *(void *)(v4 + 56) = 0LL;
  *(void *)(v4 + 62) = 0LL;
  if (v18)
  {
    uint64_t v22 = (v21 | (v20 << 32)) & 0xFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    sub_188DF2BF8(v19, v18, v22, 0LL, v45);
    uint64_t v23 = v45[0];
    uint64_t v24 = v45[1];
    uint64_t v25 = v45[2];
    uint64_t v26 = v45[3];
    uint64_t v27 = v45[4];
    sub_188D011B8((uint64_t)v45, (uint64_t)&v46);
    if (v46)
    {
      *(void *)uint64_t v51 = v23;
      *(void *)&v51[8] = v24;
      *(void *)&v51[16] = v25;
      *(void *)&v51[24] = v26;
      *(void *)&v51[32] = v27;
      *(_OWORD *)int v41 = v42;
      *(_OWORD *)&char v41[16] = v43;
      *(void *)&v41[32] = v44;
      swift_unknownObjectRetain();
      sub_188DB7BE8(v41);
      sub_188DB7BE8(v51);
      swift_bridgeObjectRelease();
      int8x8_t v16 = v41;
      goto LABEL_12;
    }

    swift_bridgeObjectRelease();
  }

  unsigned int v33 = *(void *)(v5 + 8);
  uint64_t result = *(__n128 *)(v5 + 16);
  int v34 = *(_OWORD *)(v5 + 32);
  *(_OWORD *)(v5 + 8) = 0u;
  *(_OWORD *)(v5 + 24) = 0u;
  *(void *)(v5 + 40) = 0LL;
  if (v33)
  {
    *(void *)uint64_t v51 = v33;
    *(__n128 *)&v51[8] = result;
    *(_OWORD *)&v51[24] = v34;
    if (sub_188DEF4CC((uint64_t *)&v42))
    {
      uint64_t v38 = *(void *)v51;
      if (*(_WORD *)(*(void *)v51 + 16LL) != 15)
      {
        swift_unknownObjectRelease();
        *(void *)(v5 + 8) = v38;
        uint64_t result = *(__n128 *)&v51[8];
        uint64_t v40 = *(_OWORD *)&v51[24];
        *(_OWORD *)(v5 + 16) = *(_OWORD *)&v51[8];
        *(_OWORD *)(v5 + 32) = v40;
        return result;
      }
    }

    *(_OWORD *)int v41 = *(_OWORD *)v51;
    *(_OWORD *)&char v41[16] = *(_OWORD *)&v51[16];
    *(void *)&v41[32] = *(void *)&v51[32];
    sub_188DDCB8C((unint64_t *)v41, v35, v36, v37);
  }

  uint64_t v39 = v43;
  int v32 = v44;
  if (*(_WORD *)(v42 + 16) != 15)
  {
    *(_OWORD *)(v5 + 8) = v42;
    *(_OWORD *)(v5 + 24) = v39;
    *(void *)(v5 + 40) = v32;
    return result;
  }

  *(_OWORD *)uint64_t v51 = v42;
  *(_OWORD *)&v51[16] = v43;
LABEL_18:
  *(void *)&v51[32] = v32;
  sub_188DDCB8C((unint64_t *)v51, a2, a3, a4);
  return result;
}

  if (!v5)
  {
    uint64_t v10 = a5 - a4;
    if (!__OFSUB__(a5, a4))
    {
LABEL_17:
      sub_188DBC3D0(v6, v5, v10, 1, result, a2);
      return (unsigned __int16 *)v6;
    }

    goto LABEL_20;
  }

        __break(1u);
        goto LABEL_16;
      }
    }

    __break(1u);
    goto LABEL_15;
  }

  __break(1u);
  return result;
}

LABEL_34:
  LODWORD(v198) = 1;
  a1 = v210;
  uint64_t v79 = v207;
LABEL_35:
  unsigned int v126 = v79[1];
  uint64_t v127 = v211;
LABEL_36:
  int v128 = ~(v126 | *v79);
  unsigned int v129 = *a1 & v128;
  if (v129)
  {
    uint64_t v130 = __clz(__rbit32(v129));
    unsigned int v131 = (v129 - 1) & v129;
    v28.i32[0] = *a1 & ~(-1 << v130);
    uint8x8_t v132 = (uint8x8_t)vcnt_s8(v28);
    v132.i16[0] = vaddlv_u8(v132);
    uint64_t v133 = v127;
    uint64_t v134 = v217;
    uint64_t v135 = v209;
    uint64_t v136 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v132.u32[0], a1, v133, v217, v81, v209);
    uint64_t v138 = v203;
    uint64_t v137 = (uint64_t)v204;
    uint64_t v139 = *(void (**)(char *, uint64_t, uint64_t))(v203 + 16);
    v139(v204, v136, v134);
    unint64_t v140 = (unsigned int *)type metadata accessor for _HashNode(0LL, v134, MEMORY[0x18961AFC8] + 8LL, v135);
    _HashNode.ensureUniqueAndInsertItem(isUnique:_:at:)(v198 & 1, v137, v141, v130, v140);
    uint64_t v142 = *(uint64_t (**)(uint64_t, uint64_t))(v138 + 8);
    uint64_t result = v142(v137, v134);
    if (v131)
    {
      LODWORD(v206) = v128;
      uint64_t v207 = v140;
      uint64_t v208 = v139;
      uint64_t v144 = v209;
      a1 = v210;
      uint64_t v145 = v217;
      uint64_t v146 = v205;
      do
      {
        uint64_t v147 = __clz(__rbit32(v131));
        v131 &= v131 - 1;
        v143.i32[0] = *a1 & ~(-1 << v147);
        uint8x8_t v148 = (uint8x8_t)vcnt_s8(v143);
        v148.i16[0] = vaddlv_u8(v148);
        uint64_t v149 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v148.u32[0], a1, v211, v145, v146, v144);
        ((void (*)(uint64_t, uint64_t, uint64_t))v208)(v137, v149, v145);
        _HashNode.ensureUniqueAndInsertItem(isUnique:_:at:)(1, v137, v150, v147, v207);
        uint64_t result = v142(v137, v145);
      }

      while (v131);
      LODWORD(v198) = 1;
      uint64_t v127 = v211;
      int v128 = v206;
    }

    else
    {
      LODWORD(v198) = 1;
      a1 = v210;
      uint64_t v127 = v211;
    }
  }

  int v151 = a1[1];
  unsigned int v152 = v151 & v128;
  if ((v151 & v128) != 0)
  {
    uint64_t v153 = v217;
    uint64_t v154 = v209;
    uint64_t v208 = (void *)type metadata accessor for _HashNode(0LL, v217, MEMORY[0x18961AFC8] + 8LL, v209);
    char v155 = __clz(__rbit32(v152));
    unsigned int v156 = (v152 - 1) & v152;
    v157.i32[0] = v151 & ~(-1 << v155);
    uint8x8_t v158 = (uint8x8_t)vcnt_s8(v157);
    v158.i16[0] = vaddlv_u8(v158);
    uint64_t v159 = v158.u32[0];
    _HashNode.ensureUnique(isUnique:withFreeSpace:)(v198 & 1, 16LL);
    uint64_t v160 = v127;
    uint64_t v161 = v205;
    uint64_t v162 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v159, a1, v160, v153, v205, v154);
    uint64_t v163 = *v162;
    uint64_t v164 = v162[1];
    swift_retain();
    uint64_t v165 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0LL, 0LL, v163, v164, v153, v161, v154);
    uint64_t v167 = v166;
    swift_release();
    uint64_t v168 = v167;
    uint64_t v169 = v208;
    sub_188DF6B94(v165, v168, v155, v208);
    uint64_t result = swift_release();
    if (v156)
    {
      uint64_t v171 = (uint64_t)v210;
      uint64_t v172 = v205;
      do
      {
        char v173 = __clz(__rbit32(v156));
        v156 &= v156 - 1;
        v170.i32[0] = *(_DWORD *)(v171 + 4) & ~(-1 << v173);
        uint8x8_t v174 = (uint8x8_t)vcnt_s8(v170);
        v174.i16[0] = vaddlv_u8(v174);
        uint64_t v175 = v174.u32[0];
        _HashNode.ensureUnique(isUnique:withFreeSpace:)(1, 16LL);
        uint64_t v176 = v217;
        uint64_t v177 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v175, v171, v211, v217, v172, v154);
        uint64_t v178 = *v177;
        uint64_t v179 = v177[1];
        swift_retain();
        uint64_t v180 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0LL, 0LL, v178, v179, v176, v172, v154);
        uint64_t v181 = v169;
        uint64_t v183 = v182;
        swift_release();
        uint64_t v184 = v183;
        uint64_t v169 = v181;
        sub_188DF6B94(v180, v184, v173, v181);
        uint64_t result = swift_release();
      }

      while (v156);
    }

    char v185 = 1;
  }

  else
  {
    char v185 = v198;
  }

  uint64_t v186 = v197;
  *unsigned int v197 = v185 & 1;
  uint64_t v187 = v216;
  *((void *)v186 + _HashNode.ensureUnique(isUnique:)(v1 & 1) = v215;
  *((void *)v186 + 2) = v187;
  return result;
}

  __break(1u);
  return result;
}

    uint64_t v26 = v6;
    int8x8_t v28 = v7;
    uint64_t v21 = MEMORY[0x1895D67BC](15LL, v18, v7, v6);
    uint64_t v6 = v26;
    uint64_t v7 = v28;
    goto LABEL_27;
  }

  if ((v3 & 0x1000000000000000LL) != 0)
  {
LABEL_32:
    uint64_t v25 = v3;
    uint64_t v27 = v4;
    uint64_t v19 = MEMORY[0x1895D67BC](15LL, v16, v4, v3);
    uint64_t v3 = v25;
    uint64_t v4 = v27;
    goto LABEL_22;
  }

  if (v5 < (uint64_t)v16)
  {
    __break(1u);
    goto LABEL_34;
  }

  uint64_t v19 = (v16 << 16) | 4;
LABEL_22:
  uint64_t v20 = sub_188D0F098(v19, v4, v3);
  sub_188D33410(v1, v2, v20);
LABEL_28:
  uint64_t v23 = *(void *)(v2 + 8);
  uint64_t v24 = *(void *)v2 & 0xFFFFFFFFFFFFLL;
  if ((v23 & 0x2000000000000000LL) != 0) {
    uint64_t v24 = HIBYTE(v23) & 0xF;
  }
  return v24 == 0;
}

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

    __break(1u);
    goto LABEL_35;
  }

  int v32 = __CFADD__(AssociatedTypeWitness, v30);
  AssociatedTypeWitness += v30;
  if (v32)
  {
    __break(1u);
    goto LABEL_40;
  }

  if (AssociatedTypeWitness >= 0xFFFFFFFFFFFFFFC0LL)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t result = ((AssociatedTypeWitness + 63) >> 6) - *((void *)*v4 + 2);
  if (result >= 0)
  {
    sub_188D2EF64(result, 0LL);
    v4[1] = (char *)AssociatedTypeWitness;
    goto LABEL_15;
  }

        __break(1u);
        goto LABEL_35;
      }
    }

    __break(1u);
    goto LABEL_34;
  }

  uint8x8_t v50 = result;
  int8x8_t v16 = MEMORY[0x1895D67BC](15LL, BYTE4(v6), a4, a5);
  uint64_t v51 = v60;
  uint64_t result = MEMORY[0x1895D67BC](15LL, v6 - (unint64_t)v60, a4, a5);
  uint64_t v23 = v50;
  int8x8_t v28 = v51;
  uint64_t v26 = HIBYTE(a5) & 0xF;
  a2 = result;
LABEL_12:
  unsigned int v30 = a1 >> 14;
  if (a1 >> 14 > a2 >> 14)
  {
    LODWORD(v26) = 0;
    int8x8_t v28 = v23;
    LOBYTE(a5) = v23;
    return v23 & 0xFFFFFF | ((unint64_t)v28 << 40) | ((unint64_t)a5 << 32) | ((_DWORD)v26 << 24);
  }

  unsigned int v31 = 4LL << v25;
  if (v30 <= v16 >> 14)
  {
    if ((a1 & 0xC) != v31)
    {
      if ((a5 & 0x1000000000000000LL) != 0)
      {
LABEL_37:
        uint64_t v52 = a4 & 0xFFFFFFFFFFFFLL;
        if ((a5 & 0x2000000000000000LL) != 0) {
          uint64_t v52 = v26;
        }
        if (v52 < a1 >> 16)
        {
          __break(1u);
          goto LABEL_73;
        }

        unsigned int v31 = v23;
        unsigned int v48 = sub_188DF7F28();
        int8x8_t v28 = v60;
        LODWORD(v23) = v31;
LABEL_41:
        a5 = v24 - v48;
        if (__OFSUB__(v24, v48))
        {
          __break(1u);
        }

        else if ((a5 & 0x8000000000000000LL) == 0)
        {
          if (a5 <= 0xFF)
          {
            uint64_t v26 = v6 >> 24;
            return v23 & 0xFFFFFF | ((unint64_t)v28 << 40) | ((unint64_t)a5 << 32) | ((_DWORD)v26 << 24);
          }

          goto LABEL_47;
        }

        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  uint64_t v52 = sub_188DF7FD0();
  int v54 = v53;
  uint8x8_t v56 = v55;
  uint64_t v58 = v57;
  swift_bridgeObjectRelease();
  sub_188D9F294(v52, v54, v56, v58);
  return swift_bridgeObjectRelease();
}

uint64_t sub_188D15EA8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X3>, uint64_t a4@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v57 = *(void *)(a7 - 8);
  MEMORY[0x1895F8858](a1);
  uint8x8_t v56 = (char *)&v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*v21 == *v22)
  {
    uint64_t v68 = v10;
    int v54 = (_BYTE *)a5;
    Swift::Int v63 = v19;
    uint64_t v23 = v16;
    uint64_t v66 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0LL, 0LL, v18, v17, a7, v16, a10);
    uint64_t v67 = v24;
    uint64_t v62 = v23;
    uint64_t result = _HashNode.UnsafeHandle.reverseItems.getter();
    uint64_t v60 = v26;
    uint64_t v61 = result;
    uint64_t v27 = v63;
    unsigned int v28 = *v63;
    uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)*v63);
    v29.i16[0] = vaddlv_u8(v29);
    if (*v63 != v63[1]) {
      unsigned int v28 = v29.i32[0];
    }
    unsigned int v59 = v28;
    if (v28)
    {
      uint64_t v58 = (unint64_t *)a2;
      int v30 = 0;
      LODWORD(a2) = 0;
      uint64_t v53 = MEMORY[0x18961AFC8] + 8LL;
      do
      {
        int v55 = v30;
        LODWORD(result) = a2;
        while (1)
        {
          a2 = (result + 1);
          uint64_t v31 = _HashNode.UnsafeHandle.itemPtr(at:)(result, (uint64_t)v27, (uint64_t)v58);
          uint64_t v64 = v61;
          uint64_t v65 = v60;
          uint64_t v32 = MEMORY[0x1895F8858](v31);
          uint64_t v33 = v62;
          *(&v52 - 6) = a7;
          *(&v52 - 5) = v33;
          *(&v52 - 4) = a9;
          *(&v52 - 3) = a10;
          uint64_t v51 = v32;
          swift_getTupleTypeMetadata2();
          uint64_t v34 = sub_188DF83F0();
          MEMORY[0x1895D7620](MEMORY[0x189618B38], v34);
          uint64_t v35 = v68;
          char v36 = sub_188DF806C();
          uint64_t v68 = v35;
          if ((v36 & 1) == 0) {
            break;
          }
          uint64_t result = a2;
          uint64_t v27 = v63;
          if (a2 >= v59)
          {
            LOBYTE(v30) = v55;
            goto LABEL_14;
          }
        }

        uint64_t v37 = (uint64_t)v56;
        (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v56, v31, a7);
        uint64_t v38 = (void *)type metadata accessor for _HashNode(0LL, a7, v53, a10);
        _HashNode.ensureUniqueAndAppendCollision(isUnique:_:)(v55 & 1, v37, v39, v38);
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 8))(v37, a7);
        int v30 = 1;
        uint64_t v27 = v63;
      }

      while (a2 < v59);
    }

    else
    {
      LOBYTE(v30) = 0;
    }

uint64_t sub_188D16238@<X0>( void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, unsigned int a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16 = (int *)nullsub_1(a2 + 16, a2 + 32, a7, a10, a11);
  return sub_188D162E4(v16, v17, a1, a4, a5, a6, a2, a8, v18, a3, a7, a9, a10, a11);
}

uint64_t sub_188D162E4@<X0>( int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X3>, unsigned int a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, int8x8_t a9@<D0>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v67 = a6;
  uint64_t v68 = a8;
  uint64_t v71 = a5;
  uint64_t v17 = *a3 >> a4;
  unsigned int v66 = v17 & 0x1F;
  int v18 = *a1;
  int v19 = 1 << v17;
  if ((v19 & *a1) != 0)
  {
    uint64_t v64 = a12;
    uint64_t v65 = a10;
    uint64_t v61 = a7;
    uint64_t v63 = v14;
    a9.i32[0] = (v19 - 1) & v18;
    uint8x8_t v20 = (uint8x8_t)vcnt_s8(a9);
    v20.i16[0] = vaddlv_u8(v20);
    unsigned __int32 v62 = v20.i32[0];
    _HashNode.UnsafeHandle.itemPtr(at:)(v20.u32[0], (uint64_t)a1, a2);
    if (!_HashNode.UnsafeHandle.hasSingletonItem.getter(a1)) {
      goto LABEL_7;
    }
    uint64_t v21 = v64;
    v60[1] = v60;
    uint64_t v69 = _HashNode.UnsafeHandle.reverseItems.getter();
    uint64_t v70 = v22;
    MEMORY[0x1895F8858](v69);
    swift_getTupleTypeMetadata2();
    uint64_t v23 = sub_188DF83F0();
    MEMORY[0x1895D7620](MEMORY[0x189618B38], v23);
    if ((sub_188DF806C() & 1) != 0)
    {
      uint64_t v24 = v67;
      uint64_t v25 = v68;
      *(_BYTE *)uint64_t v68 = 0;
      uint64_t result = _HashNode.mapValuesToVoid(copy:extraBytes:)(0LL, 0LL, v71, v24, a11, v21, a14);
      *(void *)(v25 + 8) = result;
      *(void *)(v25 + 16) = v27;
    }

    else
    {
LABEL_7:
      uint64_t v42 = v67;
      uint64_t v41 = v68;
      unsigned int v43 = v66;
      uint64_t v44 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0LL, 0LL, v61, v65, a11, a13, a14);
      uint64_t v46 = v45;
      uint64_t v47 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0LL, 0LL, v71, v42, a11, v64, a14);
      uint64_t v49 = _HashNode.copyNodeAndPushItemIntoNewChild(level:_:at:itemSlot:)( a4,  v47,  v48,  v43,  v62,  v44,  v46,  a11,  MEMORY[0x18961AFC8] + 8LL,  a14);
      uint64_t v51 = v50;
      uint64_t result = swift_release();
      *(_BYTE *)uint64_t v41 = 1;
      *(void *)(v41 + 8) = v49;
      *(void *)(v41 + 16) = v51;
    }
  }

  else
  {
    int v28 = a1[1];
    if ((v28 & v19) != 0)
    {
      a9.i32[0] = v28 & (v19 - 1);
      uint8x8_t v29 = (uint8x8_t)vcnt_s8(a9);
      v29.i16[0] = vaddlv_u8(v29);
      LODWORD(v64) = v29.i32[0];
      uint64_t v65 = a10;
      uint64_t v31 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v29.u32[0], a1, a2, a11, a13, a14);
      uint64_t v32 = *v31;
      uint64_t v33 = v31[1];
      swift_retain();
      _HashNode._union<A>(_:_:)(a4 + 5, v32, v33, v71, v67, a11, a12, a13, a14);
      uint64_t v35 = v34;
      uint64_t v37 = v36;
      swift_release();
      uint64_t v38 = v68;
      *(void *)(v68 + 8) = _HashNode.mapValuesToVoid(copy:extraBytes:)(1LL, 0LL, a7, a10, a11, a13, a14);
      *(void *)(v38 + 16) = v39;
      uint64_t v40 = (void *)type metadata accessor for _HashNode(0LL, a11, MEMORY[0x18961AFC8] + 8LL, a14);
      sub_188D8AD24(v66, v64, v35, v37, v40);
      uint64_t result = swift_release();
      *(_BYTE *)uint64_t v38 = 1;
    }

    else
    {
      uint64_t v52 = _HashNode.mapValuesToVoid(copy:extraBytes:)(1LL, 16LL, a7, a10, a11, a13, a14);
      uint64_t v53 = v67;
      uint64_t v54 = v68;
      *(void *)(v68 + 8) = v52;
      *(void *)(v54 + 16) = v55;
      uint64_t v56 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0LL, 0LL, v71, v53, a11, a12, a14);
      uint64_t v58 = v57;
      unsigned int v59 = (void *)type metadata accessor for _HashNode(0LL, a11, MEMORY[0x18961AFC8] + 8LL, a14);
      sub_188DF6B94(v56, v58, v66, v59);
      uint64_t result = swift_release();
      *(_BYTE *)uint64_t v54 = 1;
    }
  }

  return result;
}

uint64_t sub_188D16714@<X0>( _DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return sub_188D167C0(v18, a5, a1, a2, a6, a7, a3, a9, v19, a4, a8, a10, a11, a12);
}

uint64_t sub_188D167C0@<X0>( void *a1@<X1>, unsigned int a2@<W2>, _DWORD *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, int8x8_t a9@<D0>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v17 = (*a1 >> a2) & 0x1FLL;
  int v18 = 1 << (*a1 >> a2);
  if ((v18 & *a3) != 0)
  {
    a9.i32[0] = (v18 - 1) & *a3;
    uint8x8_t v19 = (uint8x8_t)vcnt_s8(a9);
    v19.i16[0] = vaddlv_u8(v19);
    uint64_t v20 = a8;
    unsigned __int32 v52 = v19.i32[0];
    uint64_t v22 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0LL, 0LL, a5, a6, a11, a12, a14);
    uint64_t v24 = v23;
    uint64_t v25 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0LL, 0LL, a7, a10, a11, a13, a14);
    uint64_t v27 = _HashNode.copyNodeAndPushItemIntoNewChild(level:_:at:itemSlot:)( a2,  v25,  v26,  v17,  v52,  v22,  v24,  a11,  MEMORY[0x18961AFC8] + 8LL,  a14);
    uint64_t v29 = v28;
    uint64_t result = swift_release();
    *(_BYTE *)uint64_t v20 = 1;
LABEL_3:
    *(void *)(v20 + 8) = v27;
    *(void *)(v20 + 16) = v29;
    return result;
  }

  int v31 = a3[1];
  if ((v31 & v18) != 0)
  {
    a9.i32[0] = v31 & (v18 - 1);
    uint8x8_t v32 = (uint8x8_t)vcnt_s8(a9);
    v32.i16[0] = vaddlv_u8(v32);
    unsigned int v54 = v32.i32[0];
    uint64_t v34 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v32.u32[0], a3, a4, a11, a12, a14);
    uint64_t v36 = *v34;
    uint64_t v35 = v34[1];
    swift_retain();
    char v37 = _HashNode._union<A>(_:_:)(a2 + 5, a7, a10, v36, v35, a11, a12, a13, a14);
    uint64_t v39 = v38;
    uint64_t v41 = v40;
    swift_release();
    if ((v37 & 1) == 0)
    {
      *(_BYTE *)a8 = 0;
      uint64_t v27 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0LL, 0LL, a5, a6, a11, a12, a14);
      uint64_t v20 = a8;
      uint64_t v29 = v51;
      uint64_t result = swift_release();
      goto LABEL_3;
    }

    *(void *)(a8 + 8) = _HashNode.mapValuesToVoid(copy:extraBytes:)(1LL, 0LL, a5, a6, a11, a12, a14);
    *(void *)(a8 + 16) = v42;
    unsigned int v43 = (void *)type metadata accessor for _HashNode(0LL, a11, MEMORY[0x18961AFC8] + 8LL, a14);
    sub_188D8AD24(v17, v54, v39, v41, v43);
    uint64_t result = swift_release();
    *(_BYTE *)a8 = 1;
  }

  else
  {
    char v44 = (*a1 >> a2) & 0x1F;
    *(void *)(a8 + 8) = _HashNode.mapValuesToVoid(copy:extraBytes:)(1LL, 16LL, a5, a6, a11, a12, a14);
    *(void *)(a8 + 16) = v46;
    uint64_t v47 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0LL, 0LL, a7, a10, a11, a13, a14);
    uint64_t v49 = v48;
    uint64_t v50 = (void *)type metadata accessor for _HashNode(0LL, a11, MEMORY[0x18961AFC8] + 8LL, a14);
    sub_188DF6B94(v47, v49, v44, v50);
    uint64_t result = swift_release();
    *(_BYTE *)a8 = 1;
  }

  return result;
}

uint64_t sub_188D16B24(uint64_t a1)
{
  return sub_188CF8FC8(a1, *(void *)(v1 + 48), *(void *)(v1 + 16));
}

uint64_t _HashTable.Header._scaleAndSeed.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_HashTable.Header._scaleAndSeed.modify())()
{
  return nullsub_1;
}

uint64_t _HashTable.Header._reservedScaleAndBias.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _HashTable.Header._reservedScaleAndBias.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*_HashTable.Header._reservedScaleAndBias.modify())()
{
  return nullsub_1;
}

uint64_t _HashTable.Header.scale.getter(char a1)
{
  return a1 & 0x3F;
}

uint64_t _HashTable.Header.reservedScale.getter(uint64_t a1, char a2)
{
  return a2 & 0x3F;
}

uint64_t _HashTable.Header.bias.getter(uint64_t a1, uint64_t a2)
{
  return a2 >> 6;
}

uint64_t _HashTable.Header.reservedScale.setter(uint64_t result)
{
  *(void *)(v1 + 8) = *(void *)(v1 + 8) & 0xFFFFFFFFFFFFFFC0LL | result & 0x3F;
  return result;
}

void *(*_HashTable.Header.reservedScale.modify(uint64_t *a1))(void *result)
{
  *a1 = *(void *)(v1 + 8) & 0x3FLL;
  a1[1] = v1;
  return sub_188D16BC4;
}

void *sub_188D16BC4(void *result)
{
  *(void *)(result[1] + 8LL) = *(void *)(result[1] + 8LL) & 0xFFFFFFFFFFFFFFC0LL | *result & 0x3FLL;
  return result;
}

uint64_t _HashTable.Header.bias.setter(uint64_t result)
{
  uint64_t v2 = 1LL << *v1;
  BOOL v3 = __OFSUB__(v2, 1LL);
  uint64_t v4 = v2 - 1;
  if (v3)
  {
    __break(1u);
  }

  else
  {
    uint64_t v5 = (v4 & (result >> 63)) + result;
    if (v5 < v4) {
      uint64_t v4 = 0LL;
    }
    v1[1] = v1[1] & 0x3FLL | ((v5 - v4) << 6);
  }

  return result;
}

uint64_t (*_HashTable.Header.bias.modify(uint64_t *a1))(uint64_t *a1)
{
  *a1 = *(uint64_t *)(v1 + 8) >> 6;
  a1[1] = v1;
  return sub_188D16C34;
}

uint64_t sub_188D16C34(uint64_t *a1)
{
  return _HashTable.Header.bias.setter(*a1);
}

uint64_t _HashTable.Header.capacity.getter(uint64_t result)
{
  double v1 = (double)(1LL << (result & 0x3F)) * 0.75;
  if ((~*(void *)&v1 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }

  if (v1 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  if (v1 < 9.22337204e18) {
    return (uint64_t)v1;
  }
LABEL_9:
  __break(1u);
  return result;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t _s6HeaderVwet(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _s6HeaderVwst(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _HashTable.Header()
{
  return &type metadata for _HashTable.Header;
}

uint64_t BigString.description.getter()
{
  return _sSS19CollectionsInternalEySSAA9BigStringVcfC_0(v0);
}

uint64_t sub_188D16D44()
{
  __int128 v1 = v0[1];
  v3[0] = *v0;
  v3[1] = v1;
  v3[2] = v0[2];
  sub_188D07F48((uint64_t)v3);
  return _sSS19CollectionsInternalEySSAA9BigStringVcfC_0(v3);
}

uint64_t Optional._take()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 56LL))( v2,  1LL,  1LL);
}

uint64_t BitSet.symmetricDifference(_:)(int8x16_t *a1, int8x16_t *a2)
{
  unint64_t v4 = a2[1].u64[0];
  unint64_t v5 = a1[1].u64[0];
  if (v5 <= v4) {
    uint64_t v6 = a2[1].i64[0];
  }
  else {
    uint64_t v6 = a1[1].i64[0];
  }
  if (v6)
  {
    uint64_t result = sub_188DF80D8();
    *(void *)(result + 16) = v6;
  }

  else
  {
    uint64_t result = MEMORY[0x18961AFE8];
  }

  unint64_t v8 = v5 - v4;
  if (v5 >= v4) {
    unint64_t v9 = v4;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 < 0xA)
    {
      uint64_t v10 = 0LL;
LABEL_13:
      unint64_t v11 = v9 - v10;
      uint64_t v12 = 8 * v10 + 32;
      uint64_t v13 = (uint64_t *)(result + v12);
      uint64_t v14 = (uint64_t *)((char *)a1->i64 + v12);
      int v15 = (uint64_t *)((char *)a2->i64 + v12);
      do
      {
        uint64_t v17 = *v15++;
        uint64_t v16 = v17;
        uint64_t v18 = *v14++;
        *v13++ = v18 ^ v16;
        --v11;
      }

      while (v11);
      goto LABEL_15;
    }

    uint64_t v10 = 0LL;
    uint64_t v10 = v9 & 0x7FFFFFFFFFFFFFFCLL;
    unsigned int v43 = a2 + 3;
    char v44 = a1 + 3;
    uint64_t v45 = (int8x16_t *)(result + 48);
    uint64_t v46 = v9 & 0x7FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v47 = veorq_s8(*v44, *v43);
      v45[-1] = veorq_s8(v44[-1], v43[-1]);
      int8x16_t *v45 = v47;
      v43 += 2;
      v44 += 2;
      v45 += 2;
      v46 -= 4LL;
    }

    while (v46);
    if (v9 != v10) {
      goto LABEL_13;
    }
  }

uint64_t BitSet.symmetricDifference(_:)(int8x16_t *a1, uint64_t a2, int8x16_t *a3)
{
  return BitSet.symmetricDifference(_:)(a1, a3);
}

uint64_t BitSet.symmetricDifference(_:)(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v10 = (char *)a3;
  if (((a2 | result) & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }

  char v3 = (char *)a3;
  unint64_t v4 = a2;
  unint64_t v5 = result;
  if (result == a2)
  {
    swift_bridgeObjectRetain();
    return (uint64_t)v3;
  }

  unint64_t v6 = (a2 + 63) >> 6;
  unint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = v6 - v7;
  if (v6 <= v7)
  {
    swift_bridgeObjectRetain();
LABEL_8:
    char v9 = 1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
LABEL_9:
      _UnsafeBitSet.formSymmetricDifference(_:)(v5, v4);
      uint64_t v10 = v3;
      sub_188D8FB84(&v9, (uint64_t *)&v10);
      return (uint64_t)v10;
    }

uint64_t BitSet.symmetricDifference<A>(_:)(uint64_t a1, int8x16_t *a2, ValueMetadata *a3)
{
  Description = (void (**)(char *, void, ValueMetadata *))a3[-1].Description;
  MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C749F60);
  Description[2](v8, a1, a3);
  if ((ValueMetadata *)v9 == a3)
  {
    swift_dynamicCast();
    uint64_t v11 = BitSet.symmetricDifference(_:)(v13[0], v13[1], (uint64_t)a2);
  }

  else
  {
    uint64_t v10 = (int8x16_t *)BitSet.init<A>(_:)((uint64_t)v8, a3);
    uint64_t v11 = BitSet.symmetricDifference(_:)(v10, a2);
    swift_bridgeObjectRelease();
  }

  ((void (*)(uint64_t, ValueMetadata *))Description[1])(a1, a3);
  return v11;
}

unint64_t BigString.index(after:)( unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_188D17268(a1, a2, a3, a4, 1uLL);
}

unint64_t BigString.index(before:)( unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_188D17268(a1, a2, a3, a4, 0xFFFFFFFFFFFFFFFFLL);
}

unint64_t sub_188D17268( unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  return sub_188D047AC(a1, a2, a3, a4, a5) & 0xFFFFFFFFFFFFF8FFLL | 0x300;
}

unint64_t BigString.index(_:offsetBy:)( unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  return sub_188D047AC(a1, a2, a3, a4, a5) & 0xFFFFFFFFFFFFF8FFLL | 0x300;
}

unint64_t BigString.index(_:offsetBy:limitedBy:)( unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, int64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  if (a5 < 0)
  {
    if (a1 >> 10 < a6 >> 10
      || (uint64_t)_s19CollectionsInternal9BigStringV8distance4from2toSiAC5IndexV_AHtF_0(a1, a2, a3, a4, a6, a7, a8, a9) <= a5)
    {
      return sub_188D047AC(a1, a2, a3, a4, a5) & 0xFFFFFFFFFFFFF8FFLL | 0x300;
    }

    return 0LL;
  }

  if (a6 >> 10 >= a1 >> 10
    && (uint64_t)_s19CollectionsInternal9BigStringV8distance4from2toSiAC5IndexV_AHtF_0(a1, a2, a3, a4, a6, a7, a8, a9) < a5)
  {
    return 0LL;
  }

  return sub_188D047AC(a1, a2, a3, a4, a5) & 0xFFFFFFFFFFFFF8FFLL | 0x300;
}

uint64_t BigString.subscript.getter(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return v5;
}

unint64_t BigString.index(roundingUp:)( unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t result = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(a1, a2, a3, a4);
  if ((result ^ a1) >= 0x400) {
    return sub_188D047AC(result, v6, v7, v8, 1uLL) & 0xFFFFFFFFFFFFF8FFLL | 0x300;
  }
  return result;
}

uint64_t BigString.startIndex.getter()
{
  return 768LL;
}

uint64_t BigString.endIndex.getter()
{
  if (*v0) {
    return (v0[4] << 11) | 0x300LL;
  }
  else {
    return 768LL;
  }
}

BOOL BigString.isEmpty.getter()
{
  return !*v0 || v0[4] == 0LL;
}

uint64_t BigString.count.getter()
{
  if (*v0) {
    return v0[1];
  }
  else {
    return 0LL;
  }
}

__n128 BigString.subscript.getter@<Q0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 32);
  uint64_t v6 = *(void *)(v2 + 40);
  unint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  unint64_t v9 = a1[2];
  uint64_t v10 = a1[3];
  __n128 v23 = *(__n128 *)(v2 + 16);
  v25[0] = *(_OWORD *)v2;
  __int128 v24 = v25[0];
  v25[1] = v23;
  v25[2] = *(_OWORD *)(v2 + 32);
  sub_188D011B8((uint64_t)v25, (uint64_t)v26);
  sub_188D07F48((uint64_t)v26);
  unint64_t v11 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v7, v8, v9, v10);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  unint64_t v18 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(a1[4], a1[5], a1[6], a1[7]);
  __n128 result = v23;
  *(_OWORD *)a2 = v24;
  *(__n128 *)(a2 + 16) = v23;
  *(void *)(a2 + 32) = v5;
  *(void *)(a2 + 40) = v6;
  *(void *)(a2 + 48) = v11;
  *(void *)(a2 + 56) = v13;
  *(void *)(a2 + 64) = v15;
  *(void *)(a2 + 72) = v17;
  *(void *)(a2 + 80) = v18;
  *(void *)(a2 + 88) = v20;
  *(void *)(a2 + 96) = v21;
  *(void *)(a2 + 104) = v22;
  return result;
}

unint64_t sub_188D17528@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  return sub_188D17874(a1, 0xFFFFFFFFFFFFFFFFLL, a2);
}

unint64_t sub_188D17530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_188D178D8(a1, a2, a3, 0xFFFFFFFFFFFFFFFFLL);
}

void sub_188D17544(void *a1@<X8>)
{
  *a1 = 768LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  a1[3] = 1LL;
}

void sub_188D17558(uint64_t *a1@<X8>)
{
  if (*v1) {
    uint64_t v2 = (v1[4] << 11) | 0x300LL;
  }
  else {
    uint64_t v2 = 768LL;
  }
  *a1 = v2;
  a1[1] = 0LL;
  a1[2] = 0LL;
  a1[3] = 1LL;
}

void (*sub_188D17580(void *a1, unint64_t *a2))(void **a1)
{
  uint64_t v5 = malloc(0x48uLL);
  *a1 = v5;
  unint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  unint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  __int128 v10 = v2[1];
  *uint64_t v5 = *v2;
  v5[1] = v10;
  void v5[2] = v2[2];
  sub_188DCFAC4(v6, v7, v8, v9, &v14);
  uint64_t v11 = v14;
  uint64_t v12 = v15;
  *((void *)v5 + 8) = v15;
  *((void *)v5 + 6) = v11;
  *((void *)v5 + 7) = v12;
  return sub_188CFFE40;
}

__n128 sub_188D175FC@<Q0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[2];
  uint64_t v7 = a1[3];
  unint64_t v8 = a1[6];
  uint64_t v29 = a1[5];
  unint64_t v30 = a1[4];
  uint64_t v9 = a1[7];
  __int128 v10 = v2[1];
  v31[0] = *v2;
  __int128 v11 = *v2;
  __int128 v12 = v2[2];
  v31[1] = v10;
  v31[2] = v12;
  __n128 v27 = (__n128)v2[1];
  __int128 v28 = v11;
  uint64_t v13 = *((void *)v2 + 4);
  uint64_t v14 = *((void *)v2 + 5);
  sub_188D011B8((uint64_t)v31, (uint64_t)v32);
  sub_188D07F48((uint64_t)v32);
  unint64_t v15 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v4, v5, v6, v7);
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  unint64_t v22 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v30, v29, v8, v9);
  __n128 result = v27;
  *(_OWORD *)a2 = v28;
  *(__n128 *)(a2 + 16) = v27;
  *(void *)(a2 + 32) = v13;
  *(void *)(a2 + 40) = v14;
  *(void *)(a2 + 48) = v15;
  *(void *)(a2 + 56) = v17;
  *(void *)(a2 + 64) = v19;
  *(void *)(a2 + 72) = v21;
  *(void *)(a2 + 80) = v22;
  *(void *)(a2 + 88) = v24;
  *(void *)(a2 + 96) = v25;
  *(void *)(a2 + 104) = v26;
  return result;
}

uint64_t sub_188D176F4@<X0>(uint64_t a1@<X8>)
{
  __int128 v2 = *v1;
  __int128 v3 = v1[1];
  *(_OWORD *)a1 = *v1;
  *(_OWORD *)(a1 + 16) = v3;
  __int128 v4 = v1[2];
  *(_OWORD *)(a1 + 32) = v4;
  uint64_t v5 = 768LL;
  *(void *)(a1 + 48) = 768LL;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 1LL;
  if ((void)v2) {
    uint64_t v5 = ((void)v4 << 11) | 0x300LL;
  }
  *(void *)(a1 + 80) = v5;
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 104) = 1LL;
  return swift_unknownObjectRetain();
}

BOOL sub_188D17734()
{
  return !*v0 || v0[4] == 0LL;
}

uint64_t sub_188D1774C()
{
  if (*v0) {
    return v0[1];
  }
  else {
    return 0LL;
  }
}

unint64_t sub_188D1775C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result = sub_188D047AC(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
  *a3 = result & 0xFFFFFFFFFFFFF8FFLL | 0x300;
  a3[1] = v5;
  a3[2] = v6;
  a3[3] = v7;
  return result;
}

unint64_t sub_188D177B8@<X0>( uint64_t a1@<X0>, int64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t result = BigString.index(_:offsetBy:limitedBy:)( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  a2,  *(void *)a3,  *(void *)(a3 + 8),  *(void *)(a3 + 16),  *(void *)(a3 + 24));
  *a4 = result;
  a4[1] = v6;
  a4[2] = v7;
  a4[3] = v8;
  return result;
}

unint64_t sub_188D1781C(uint64_t a1, uint64_t a2)
{
  return _s19CollectionsInternal9BigStringV8distance4from2toSiAC5IndexV_AHtF_0( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)a2,  *(void *)(a2 + 8),  *(void *)(a2 + 16),  *(void *)(a2 + 24));
}

unint64_t sub_188D1786C@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  return sub_188D17874(a1, 1uLL, a2);
}

unint64_t sub_188D17874@<X0>(uint64_t a1@<X0>, unint64_t a2@<X3>, unint64_t *a3@<X8>)
{
  unint64_t result = sub_188D047AC(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
  *a3 = result & 0xFFFFFFFFFFFFF8FFLL | 0x300;
  a3[1] = v5;
  a3[2] = v6;
  a3[3] = v7;
  return result;
}

unint64_t sub_188D178D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_188D178D8(a1, a2, a3, 1uLL);
}

unint64_t sub_188D178D8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t result = sub_188D047AC(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a4);
  *(void *)a1 = result & 0xFFFFFFFFFFFFF8FFLL | 0x300;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  return result;
}

unint64_t sub_188D17938()
{
  unint64_t result = qword_18C74A0D0;
  if (!qword_18C74A0D0)
  {
    unint64_t result = MEMORY[0x1895D7620](&protocol conformance descriptor for BigString, &type metadata for BigString);
    atomic_store(result, (unint64_t *)&qword_18C74A0D0);
  }

  return result;
}

unint64_t sub_188D17980()
{
  unint64_t result = qword_18C74A0D8;
  if (!qword_18C74A0D8)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C74A0E0);
    unint64_t v2 = sub_188D179E4();
    unint64_t result = MEMORY[0x1895D7620](MEMORY[0x189617A18], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_18C74A0D8);
  }

  return result;
}

unint64_t sub_188D179E4()
{
  unint64_t result = qword_18C74A0E8;
  if (!qword_18C74A0E8)
  {
    unint64_t result = MEMORY[0x1895D7620](&protocol conformance descriptor for BigString, &type metadata for BigString);
    atomic_store(result, (unint64_t *)&qword_18C74A0E8);
  }

  return result;
}

unint64_t sub_188D17A2C()
{
  unint64_t result = qword_18C74A0F0;
  if (!qword_18C74A0F0)
  {
    unint64_t result = MEMORY[0x1895D7620](&protocol conformance descriptor for BigString, &type metadata for BigString);
    atomic_store(result, (unint64_t *)&qword_18C74A0F0);
  }

  return result;
}

unint64_t sub_188D17A74()
{
  unint64_t result = qword_18C74A0F8;
  if (!qword_18C74A0F8)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C74A0E0);
    unint64_t result = MEMORY[0x1895D7620](MEMORY[0x189617A28], v1);
    atomic_store(result, (unint64_t *)&qword_18C74A0F8);
  }

  return result;
}

uint64_t OrderedSet.subtract(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *v3;
  uint64_t v6 = v3[1];
  v11[0] = a1;
  v11[1] = a2;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(a3 + 24);
  MEMORY[0x1895D7620](&protocol conformance descriptor for OrderedSet<A>, a3);
  uint64_t result = OrderedSet._subtracting<A>(_:)((uint64_t)v11, v5, v6, v7, a3, v8);
  *__int128 v3 = result;
  v3[1] = v10;
  return result;
}

{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void v11[2];
  uint64_t v5 = *v3;
  uint64_t v6 = v3[1];
  v11[0] = a1;
  v11[1] = a2;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(a3 + 24);
  MEMORY[0x1895D7620](&protocol conformance descriptor for OrderedSet<A>, a3);
  uint64_t result = OrderedSet._subtracting<A>(_:)((uint64_t)v11, v5, v6, v7, a3, v8);
  *__int128 v3 = result;
  v3[1] = v10;
  return result;
}

uint64_t OrderedSet.subtract<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = OrderedSet._subtracting<A>(_:)(a1, *v3, v3[1], *(void *)(a2 + 16), a3, *(void *)(a2 + 24));
  *__int128 v3 = result;
  v3[1] = v5;
  return result;
}

uint64_t TreeDictionary.filter(_:)( uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v43 = (char *)a2;
  v38[1] = a5;
  uint64_t v45 = a4;
  uint64_t v42 = a3;
  uint64_t v12 = type metadata accessor for _HashNode.Builder(0LL, a6, a7, a8);
  uint64_t v39 = *(void *)(v12 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v12);
  unint64_t v15 = (char *)v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v17 = (char *)v38 - v16;
  uint64_t v18 = sub_188DF8384();
  uint64_t v40 = *(void *)(v18 - 8);
  uint64_t v41 = v18;
  uint64_t v19 = MEMORY[0x1895F8858](v18);
  uint64_t v21 = (char *)v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v19);
  __n128 v23 = (char *)v38 - v22;
  uint64_t v24 = a1;
  uint64_t v25 = v42;
  uint64_t v26 = v44;
  _HashNode.filter(_:_:)(0, v24, (uint64_t)v43, v42, v45, a6, a7, a8, (uint64_t)v38 - v22);
  if (!v26)
  {
    v38[0] = v17;
    unsigned int v43 = v15;
    uint64_t v44 = 0LL;
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v21, v23, v41);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v21, 1LL, v12) == 1)
    {
      __n128 v27 = *(void (**)(char *, uint64_t))(v40 + 8);
      __int128 v28 = v23;
      uint64_t v29 = v41;
      v27(v28, v41);
      v27(v21, v29);
      swift_retain();
    }

    else
    {
      uint64_t v30 = v39;
      uint64_t v31 = v38[0];
      (*(void (**)(void, char *, uint64_t))(v39 + 32))(v38[0], v21, v12);
      (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v43, v31, v12);
      sub_188D9B09C(v12);
      uint64_t v33 = v32;
      uint64_t v35 = v34;
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v31, v12);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v23, v41);
      uint64_t v25 = TreeDictionary.init(_new:)(v33, v35, a6, a7, a8);
      uint64_t v45 = v36;
    }
  }

  return v25;
}

uint64_t TreeDictionary.removeAll(where:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *v3;
  uint64_t v6 = v3[1];
  uint64_t v7 = v3[2];
  uint64_t v8 = a3[3];
  uint64_t v17 = a3[2];
  uint64_t v18 = v8;
  uint64_t v19 = a3[4];
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  swift_retain();
  uint64_t v9 = TreeDictionary.filter(_:)( (uint64_t (*)(char *, char *))sub_188D180B4,  (uint64_t)&v16,  v5,  v6,  v7,  v17,  v8,  v19);
  if (v4) {
    return swift_release();
  }
  uint64_t v13 = v9;
  uint64_t v14 = v10;
  uint64_t v15 = v11;
  swift_release();
  uint64_t result = swift_release();
  *__int128 v3 = v13;
  v3[1] = v14;
  v3[2] = v15;
  return result;
}

uint64_t sub_188D17EE0( uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, char *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v30 = a4;
  uint64_t v31 = a3;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v28 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = MEMORY[0x1895F8858](v11);
  uint64_t v16 = (char *)&v26 - v15;
  uint64_t v17 = (char *)&v26 + *(int *)(v14 + 48) - v15;
  uint64_t v29 = *(void *)(a5 - 8);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  v18((char *)&v26 - v15, a1, a5);
  uint64_t v27 = *(void *)(a6 - 8);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
  v19(v17, a2, a6);
  uint64_t v20 = &v13[*(int *)(TupleTypeMetadata2 + 48)];
  v18(v13, (uint64_t)v16, a5);
  v19(v20, (uint64_t)v17, a6);
  uint64_t v21 = v32;
  char v22 = v31(v13, v20);
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v16, TupleTypeMetadata2);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v20, a6);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v13, a5);
  }

  else
  {
    char v24 = v22;
    (*(void (**)(char *, uint64_t))(v28 + 8))(v16, TupleTypeMetadata2);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v20, a6);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v13, a5);
    char v23 = v24 ^ 1;
  }

  return v23 & 1;
}

uint64_t sub_188D180B4(uint64_t a1, uint64_t a2)
{
  return sub_188D17EE0( a1,  a2,  *(uint64_t (**)(char *, char *))(v2 + 40),  *(void *)(v2 + 48),  *(void *)(v2 + 16),  *(void *)(v2 + 24)) & 1;
}

Swift::Void __swiftcall OrderedSet.swapAt(_:_:)(Swift::Int a1, Swift::Int a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = v3;
    uint64_t v7 = *(void *)(v2 + 16);
    uint64_t v8 = sub_188DF8738();
    MEMORY[0x1895D7620](MEMORY[0x189619570], v8);
    sub_188DF7D30();
    if (*v3)
    {
      OrderedSet._ensureUnique()();
      uint64_t v9 = *v3;
      if (*v4)
      {
        swift_retain();
        sub_188D181C8((uint64_t *)(v9 + 16), v9 + 32, (uint64_t)v4, a1, a2, v7);
        swift_release();
      }

      else
      {
        __break(1u);
      }
    }
  }

uint64_t sub_188D181C8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *(void *)(a6 - 8);
  uint64_t v24 = a2;
  uint64_t v25 = v9;
  uint64_t v10 = MEMORY[0x1895F8858](a1);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v14 = (char *)&v22 - v13;
  uint64_t v23 = v15;
  sub_188DF8774();
  sub_188DF8774();
  uint64_t v16 = sub_188DF7C40();
  uint64_t result = *a1;
  uint64_t v18 = 1LL << *a1;
  uint64_t v19 = v18 - 1;
  if (__OFSUB__(v18, 1LL))
  {
    __break(1u);
  }

  else
  {
    uint64_t result = sub_188DF7C40();
    uint64_t v20 = 1LL << *a1;
    if (!__OFSUB__(v20, 1LL))
    {
      _HashTable.UnsafeHandle.swapBucketValues(for:withCurrentValue:and:withCurrentValue:)( v19 & v16,  a5,  (v20 - 1) & result,  v23,  a1,  v24);
      uint64_t v21 = *(void (**)(char *, uint64_t))(v25 + 8);
      v21(v12, a6);
      return ((uint64_t (*)(char *, uint64_t))v21)(v14, a6);
    }
  }

  __break(1u);
  return result;
}

uint64_t _HashTable.UnsafeHandle.swapBucketValues<A>(for:withCurrentValue:and:withCurrentValue:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v10 = sub_188DF7C40();
  uint64_t result = *a5;
  uint64_t v12 = 1LL << *a5;
  uint64_t v13 = v12 - 1;
  if (__OFSUB__(v12, 1LL))
  {
    __break(1u);
  }

  else
  {
    uint64_t result = sub_188DF7C40();
    uint64_t v14 = 1LL << *a5;
    if (!__OFSUB__(v14, 1LL)) {
      return _HashTable.UnsafeHandle.swapBucketValues(for:withCurrentValue:and:withCurrentValue:)( v13 & v10,  a2,  (v14 - 1) & result,  a4,  a5,  a6);
    }
  }

  __break(1u);
  return result;
}

void OrderedSet.partition(by:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
}

void OrderedSet._partition(by:callback:)( uint64_t (*a1)(char *), uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5)
{
  if (*v5)
  {
    OrderedSet._ensureUnique()();
    uint64_t v11 = *v5;
    if (*v5)
    {
      uint64_t v12 = *(void *)(a5 + 24);
      swift_retain();
      sub_188D18554((uint64_t *)(v11 + 16), v11 + 32, a1, a2, a3, a4, &v14, v12);
      swift_release();
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    uint64_t v13 = sub_188DF8738();
    MEMORY[0x1895D7620](MEMORY[0x189619568], v13);
    MEMORY[0x1895D7620](MEMORY[0x189619570], v13);
    sub_188DF7D54();
  }

uint64_t sub_188D18554@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(char *)@<X3>, uint64_t a4@<X4>, void (*a5)(uint64_t, uint64_t)@<X5>, uint64_t a6@<X6>, void *a7@<X8>, uint64_t a8)
{
  uint64_t v14 = sub_188DF8738();
  uint64_t result = sub_188DF86A8();
  if (!v8)
  {
    if (v19 == 1)
    {
      MEMORY[0x1895D7620](MEMORY[0x189619570], v14);
      uint64_t v16 = MEMORY[0x1895D7620](MEMORY[0x189619588], v14);
      return MutableCollection<>._partition(with:by:callback:)(a1, a2, a3, a4, a5, a6, v14, (uint64_t)a7, v16, a8);
    }

    else
    {
      *a7 = v18;
    }
  }

  return result;
}

uint64_t sub_188D1867C@<X0>( uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t (*a3)(char *)@<X3>, uint64_t a4@<X4>, void (*a5)(uint64_t, uint64_t)@<X5>, uint64_t a6@<X6>, void *a7@<X8>, uint64_t a8)
{
  uint64_t v13 = sub_188DF83F0();
  MEMORY[0x1895D7620](MEMORY[0x189618B30], v13);
  uint64_t v14 = MEMORY[0x1895D7620](MEMORY[0x189618B40], v13);
  uint64_t result = MutableCollection<>._partition(with:by:callback:)(a1, a2, a3, a4, a5, a6, v13, (uint64_t)&v19, v14, a8);
  if (!v18) {
    *a7 = v19;
  }
  return result;
}

uint64_t MutableCollection<>._partition(with:by:callback:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(char *)@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t, uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = v11;
  uint64_t v13 = a7;
  uint64_t v105 = a6;
  int v104 = a5;
  int v128 = a3;
  uint64_t v129 = a4;
  uint64_t v103 = a2;
  char v108 = a1;
  uint64_t v114 = a8;
  uint64_t v14 = *(void *)(a7 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](a1);
  uint64_t v107 = (char *)&v98 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = MEMORY[0x1895F8858](v15);
  uint64_t v117 = (char *)&v98 - v18;
  MEMORY[0x1895F8858](v17);
  uint64_t v127 = (char *)&v98 - v19;
  uint64_t v109 = v20;
  uint64_t v21 = *(void *)(v20 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v115 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v22 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v106 = (char *)&v98 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = MEMORY[0x1895F8858](v22);
  uint64_t v112 = (char *)&v98 - v25;
  uint64_t v26 = MEMORY[0x1895F8858](v24);
  uint64_t v116 = (char *)&v98 - v27;
  MEMORY[0x1895F8858](v26);
  uint64_t v113 = (char *)&v98 - v28;
  uint64_t v29 = swift_getAssociatedTypeWitness();
  uint64_t v125 = *(void *)(v29 - 8);
  uint64_t v30 = MEMORY[0x1895F8858](v29);
  uint64_t v111 = (char *)&v98 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = MEMORY[0x1895F8858](v30);
  uint64_t v120 = (char *)&v98 - v33;
  uint64_t v34 = MEMORY[0x1895F8858](v32);
  uint64_t v36 = (char *)&v98 - v35;
  MEMORY[0x1895F8858](v34);
  uint64_t v38 = (char *)&v98 - v37;
  sub_188DF81C8();
  uint64_t v130 = v10;
  sub_188DF821C();
  uint64_t v134 = v21;
  uint64_t v39 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint8x8_t v132 = v38;
  uint64_t v133 = v36;
  uint64_t v131 = v29;
  uint64_t v126 = v39;
  if ((sub_188DF7D90() & 1) != 0)
  {
LABEL_2:
    uint64_t v40 = v125;
    uint64_t v41 = *(void (**)(char *, uint64_t))(v125 + 8);
    uint64_t v42 = v114;
LABEL_17:
    uint64_t v96 = v131;
    v41(v133, v131);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v40 + 32))(v42, v132, v96);
  }

  else
  {
    uint64_t v101 = a10;
    uint64_t v119 = a9;
    uint64_t v122 = v14;
    uint64_t v43 = AssociatedTypeWitness;
    uint64_t v44 = v113;
    uint64_t v45 = v130;
    while (1)
    {
      uint64_t v46 = (void (*)(char *, void))sub_188DF82C4();
      uint64_t v47 = v115;
      uint64_t v124 = *(void *)(v115 + 16);
      ((void (*)(char *))v124)(v44);
      v46(v135, 0LL);
      char v48 = v128(v44);
      if (v12)
      {
        (*(void (**)(char *, uint64_t))(v47 + 8))(v44, v43);
        uint64_t v41 = *(void (**)(char *, uint64_t))(v125 + 8);
LABEL_19:
        uint64_t v97 = v131;
        v41(v133, v131);
        return ((uint64_t (*)(char *, uint64_t))v41)(v132, v97);
      }

      char v49 = v48;
      uint64_t v121 = *(void (**)(char *, uint64_t))(v47 + 8);
      v121(v44, v43);
      uint64_t v50 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
      if ((v49 & 1) != 0) {
        break;
      }
      uint64_t v94 = v127;
      v50(v127, v45, v13);
      sub_188DF8228();
      (*(void (**)(char *, uint64_t))(v14 + 8))(v94, v13);
LABEL_14:
      char v95 = sub_188DF7D90();
      uint64_t v14 = v122;
      if ((v95 & 1) != 0) {
        goto LABEL_2;
      }
    }

    uint64_t v136 = 0LL;
    uint64_t v51 = v127;
    do
    {
      unsigned __int32 v52 = v51;
      uint64_t v53 = v51;
      uint64_t v54 = v130;
      uint64_t v55 = v50;
      v50(v53, v130, v13);
      sub_188DF7C58();
      uint64_t v56 = *(void (**)(char *, uint64_t))(v122 + 8);
      v56(v52, v13);
      uint64_t v57 = v125;
      uint64_t v58 = v13;
      unsigned int v59 = v120;
      uint64_t v60 = v131;
      uint64_t v118 = *(void (**)(char *, char *, uint64_t))(v125 + 16);
      v118(v120, v132, v131);
      LOBYTE(v52) = sub_188DF7D90();
      uint64_t v41 = *(void (**)(char *, uint64_t))(v57 + 8);
      v41(v59, v60);
      if ((v52 & 1) != 0)
      {
        uint64_t v42 = v114;
        uint64_t v40 = v125;
        goto LABEL_17;
      }

      uint64_t v61 = v117;
      unsigned __int32 v62 = v55;
      v55(v117, v54, v58);
      uint64_t v63 = (void (*)(char *, void))sub_188DF82C4();
      uint64_t v64 = v116;
      uint64_t v65 = AssociatedTypeWitness;
      ((void (*)(char *))v124)(v116);
      v63(v135, 0LL);
      v56(v61, v58);
      uint64_t v66 = v136;
      char v67 = v128(v64);
      uint64_t v136 = v66;
      if (v66)
      {
        v121(v64, v65);
        goto LABEL_19;
      }

      char v68 = v67;
      uint64_t v13 = v58;
      v121(v64, v65);
      uint64_t v51 = v127;
      uint64_t v50 = v62;
    }

    while ((v68 & 1) != 0);
    uint64_t v110 = v56;
    uint64_t v69 = v120;
    uint64_t v70 = v131;
    int v102 = v62;
    uint64_t v71 = v118;
    v118(v120, v132, v131);
    uint64_t v72 = v111;
    v71(v111, v133, v70);
    uint64_t v73 = v130;
    sub_188DF7D0C();
    v41(v72, v70);
    v41(v69, v70);
    v102(v51, v73, v13);
    v118(v69, v132, v70);
    sub_188DF81C8();
    uint64_t v100 = sub_188DF81B0();
    v41(v72, v70);
    v41(v69, v70);
    v110(v51, v13);
    v102(v51, v73, v13);
    __int128 v74 = v118;
    v118(v69, v133, v70);
    sub_188DF81C8();
    uint64_t v99 = sub_188DF81B0();
    v41(v72, v70);
    v41(v69, v70);
    v110(v51, v13);
    v102(v51, v130, v13);
    v74(v69, v132, v70);
    uint64_t v75 = (void (*)(char *, void))sub_188DF82C4();
    uint64_t v76 = AssociatedTypeWitness;
    ((void (*)(char *))v124)(v112);
    v75(v135, 0LL);
    v41(v69, v70);
    uint64_t v77 = v51;
    uint64_t v78 = v76;
    v110(v77, v13);
    uint64_t v79 = v107;
    v102(v107, v130, v13);
    unsigned int v80 = v111;
    v118(v111, v133, v70);
    uint64_t v81 = (void (*)(char *, void))sub_188DF82C4();
    uint64_t v82 = v106;
    ((void (*)(char *))v124)(v106);
    v81(v135, 0LL);
    v41(v80, v70);
    v110(v79, v13);
    uint8x8_t v83 = v108;
    uint64_t v124 = sub_188DF7C40();
    uint64_t result = *v83;
    uint64_t v85 = 1LL << *v83;
    uint64_t v86 = v85 - 1;
    if (__OFSUB__(v85, 1LL))
    {
      __break(1u);
    }

    else
    {
      uint64_t result = sub_188DF7C40();
      uint64_t v87 = 1LL << *v83;
      if (!__OFSUB__(v87, 1LL))
      {
        uint64_t v88 = (v87 - 1) & result;
        uint64_t v89 = v86 & v124;
        uint64_t v90 = v99;
        uint64_t v91 = v100;
        _HashTable.UnsafeHandle.swapBucketValues(for:withCurrentValue:and:withCurrentValue:)( v89,  v99,  v88,  v100,  v83,  v103);
        uint64_t v92 = v121;
        v121(v82, v78);
        uint64_t v43 = v78;
        v92(v112, v78);
        v104(v91, v90);
        uint64_t v93 = v127;
        uint64_t v45 = v130;
        v62(v127, v130, v13);
        sub_188DF8228();
        uint64_t v12 = v136;
        uint64_t v44 = v113;
        v110(v93, v13);
        goto LABEL_14;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t _HashTable.UnsafeHandle.swapBucketValues(for:withCurrentValue:and:withCurrentValue:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v7 = a5;
  uint64_t v11 = _HashTable.UnsafeHandle._startIterator(bucket:)(a1, a5, a6);
  uint64_t v22 = v11;
  if (v11)
  {
    uint64_t v12 = v7;
    do
    {
      uint64_t v13 = -1LL << *v12;
      unint64_t v14 = (v13 ^ ~v11) + ((uint64_t)v12[1] >> 6);
      if (v14 >= ~v13) {
        uint64_t v15 = ~v13;
      }
      else {
        uint64_t v15 = 0LL;
      }
      if (v14 - v15 == a2) {
        break;
      }
      _HashTable.BucketIterator.advance()();
      uint64_t v12 = v7;
      uint64_t v11 = v22;
    }

    while (v22);
  }

  _HashTable.BucketIterator.currentValue.setter(a4, 0);
  uint64_t v16 = _HashTable.UnsafeHandle._startIterator(bucket:)(a3, v7, a6);
  uint64_t v21 = v7;
  for (uint64_t i = v16; i; v16 = i)
  {
    uint64_t v17 = -1LL << *v7;
    unint64_t v18 = (v17 ^ ~v16) + ((uint64_t)v7[1] >> 6);
    if (v18 >= ~v17) {
      uint64_t v19 = ~v17;
    }
    else {
      uint64_t v19 = 0LL;
    }
    if (v18 - v19 == a4) {
      break;
    }
    _HashTable.BucketIterator.advance()();
    uint64_t v7 = v21;
  }

  return _HashTable.BucketIterator.currentValue.setter(a2, 0);
}

void OrderedSet.sort(by:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = sub_188DF8738();
  MEMORY[0x1895D7620](MEMORY[0x189619570], v5);
  MEMORY[0x1895D7620](MEMORY[0x189619588], v5);
  sub_188DF7D6C();
  type metadata accessor for OrderedSet(0LL, v4, *(void *)(a3 + 24), v6);
  OrderedSet._regenerateExistingHashTable()();
}

void OrderedSet<>.sort()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = sub_188DF8738();
  MEMORY[0x1895D7620](MEMORY[0x189619570], v3);
  MEMORY[0x1895D7620](MEMORY[0x189619588], v3);
  sub_188DF7D60();
  type metadata accessor for OrderedSet(0LL, v2, *(void *)(a1 + 24), v4);
  OrderedSet._regenerateExistingHashTable()();
}

Swift::Void __swiftcall OrderedSet.shuffle()()
{
}

void OrderedSet.shuffle<A>(using:)()
{
  uint64_t v0 = sub_188DF8738();
  MEMORY[0x1895D7620](MEMORY[0x189619570], v0);
  MEMORY[0x1895D7620](MEMORY[0x189619588], v0);
  sub_188DF7D78();
  OrderedSet._regenerateExistingHashTable()();
}

Swift::Void __swiftcall OrderedSet.reverse()()
{
  uint64_t v0 = sub_188DF8738();
  MEMORY[0x1895D7620](MEMORY[0x189619568], v0);
  MEMORY[0x1895D7620](MEMORY[0x189619570], v0);
  sub_188DF7D48();
  OrderedSet._regenerateHashTable()();
}

uint64_t OrderedSet._halfStablePartition<A>(values:by:)( uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, char *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = v6 + 1;
  uint64_t v14 = *(void *)(a5 + 16);
  uint64_t result = _s19CollectionsInternal4HeapV5countSivg_0();
  if (result == a2)
  {
    uint64_t v33 = v6;
    uint64_t v40 = 0LL;
    sub_188DF8738();
    sub_188DF86D8();
    uint64_t v16 = *(void *)(*v13 + 16);
    uint64_t v17 = *(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL);
    uint64_t v18 = (v17 + 32) & ~v17;
    uint64_t v19 = v14;
    uint64_t v20 = a5;
    uint64_t v21 = a6;
    uint64_t v22 = a3;
    uint64_t v23 = a2;
    uint64_t v24 = *v13 + v18;
    uint64_t v38 = v24;
    uint64_t v39 = v16;
    uint64_t v34 = v16;
    uint64_t v35 = v19;
    uint64_t v25 = *(void *)(v20 + 24);
    sub_188D19728((uint64_t)&v38, &v40, v22, a4, a1, v23, v19, v21);
    if (v36)
    {
      sub_188D1A35C(&v38, v24, v34);
    }

    else
    {
      uint64_t v31 = v18;
      uint64_t v32 = v21;
      sub_188D1A35C(&v38, v24, v34);
      uint64_t v26 = v40;
      if (v26 >= _s19CollectionsInternal4HeapV5countSivg_0())
      {
        return _s19CollectionsInternal4HeapV5countSivg_0();
      }

      else
      {
        OrderedSet._ensureUnique()();
        uint64_t v27 = *v33;
        *uint64_t v33 = 0LL;
        sub_188DF86D8();
        uint64_t v28 = v33[1];
        uint64_t v29 = *(void *)(v28 + 16);
        uint64_t v30 = v28 + v31;
        uint64_t v38 = v28 + v31;
        uint64_t v39 = v29;
        sub_188D198C0(&v38, &v40, v22, a1, v23, v27, v35, &v37, v32, v25);
        sub_188D1A35C(&v38, v30, v29);
        uint64_t v24 = v37;
        swift_retain();
        swift_release();
        *uint64_t v33 = v27;
        swift_release();
      }
    }

    return v24;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void *sub_188D19728( uint64_t a1, uint64_t *a2, uint64_t (*a3)(char *, char *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v37 = a3;
  uint64_t v38 = a5;
  uint64_t v36 = a8;
  uint64_t v34 = *(void *)(a8 - 8);
  uint64_t v9 = ((uint64_t (*)(void))MEMORY[0x1895F8858])();
  uint64_t v33 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t result = (void *)MEMORY[0x1895F8858](v9);
  uint64_t v32 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *v15;
  if (*v15 < result[1])
  {
    uint64_t v17 = *(void *)(v12 + 72);
    uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    uint64_t v30 = v17;
    uint64_t v31 = v12;
    uint64_t v28 = result;
    uint64_t v19 = v32;
    uint64_t v18 = v33;
    uint64_t v21 = v34;
    uint64_t v20 = v35;
    do
    {
      v29(v19, *result + v30 * v16, v20);
      uint64_t v22 = v36;
      (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v18, v38 + *(void *)(v21 + 72) * v16, v36);
      uint64_t v23 = v39;
      char v24 = v37(v19, v18);
      uint64_t v25 = v22;
      uint64_t v26 = v31;
      (*(void (**)(char *, uint64_t))(v21 + 8))(v18, v25);
      uint64_t result = (void *)(*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v19, v20);
      uint64_t v39 = v23;
      if (v23 || (v24 & 1) != 0) {
        break;
      }
      uint64_t v16 = *a2 + 1;
      if (__OFADD__(*a2, 1LL))
      {
        __break(1u);
        return result;
      }

      *a2 = v16;
      uint64_t result = v28;
    }

    while (v16 < v28[1]);
  }

  return result;
}

uint64_t sub_188D198C0@<X0>( void *a1@<X0>, void *a2@<X1>, uint64_t (*a3)(char *, char *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, void *a8@<X8>, uint64_t a9, uint64_t a10)
{
  uint64_t v39 = a5;
  uint64_t v40 = a6;
  char v48 = a3;
  uint64_t v49 = a4;
  uint64_t v12 = a1;
  uint64_t v35 = a8;
  uint64_t v47 = *(void *)(a9 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](a1);
  uint64_t v46 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = *(void *)(v15 - 8);
  uint64_t result = MEMORY[0x1895F8858](v13);
  uint64_t v44 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = *v18;
  uint64_t v20 = *v18 + 1LL;
  if (__OFADD__(*v18, 1LL))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v21 = v12[1];
  if (v21 < v20)
  {
LABEL_20:
    __break(1u);
    return result;
  }

  if (v20 != v21)
  {
    uint64_t v37 = (uint64_t *)(v40 + 16);
    uint64_t v38 = a10;
    uint64_t v36 = v40 + 32;
    uint64_t v42 = v12;
    uint64_t v43 = a2;
    uint64_t v41 = v21;
    uint64_t v22 = v46;
    while (v20 < v21)
    {
      uint64_t v24 = *v12;
      uint64_t v25 = v44;
      uint64_t v26 = v45;
      (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v44, v24 + *(void *)(v45 + 72) * v20, a7);
      uint64_t v27 = v47;
      (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v22, v49 + *(void *)(v47 + 72) * v20, a9);
      uint64_t v28 = v50;
      uint64_t v29 = a7;
      char v30 = v48(v25, v22);
      (*(void (**)(char *))(v27 + 8))(v22);
      uint64_t v31 = *(uint64_t (**)(char *, uint64_t))(v26 + 8);
      uint64_t v32 = v29;
      uint64_t result = v31(v25, v29);
      uint64_t v50 = v28;
      if (v28) {
        return result;
      }
      if ((v30 & 1) != 0)
      {
        a7 = v29;
        uint64_t v12 = v42;
        uint64_t v23 = v43;
        uint64_t v21 = v41;
      }

      else
      {
        uint64_t v12 = v42;
        uint64_t v23 = v43;
        a7 = v32;
        sub_188DF83B4();
        uint64_t result = sub_188DF83B4();
        if (v40)
        {
          uint64_t v33 = v50;
          uint64_t result = sub_188D19B2C(v37, v36, (uint64_t)v12, (uint64_t)v23, v20, v32, a9, v38);
          uint64_t v50 = v33;
        }

        uint64_t v21 = v41;
        if (__OFADD__(*v23, 1LL)) {
          goto LABEL_18;
        }
        ++*v23;
      }

      if (v21 == ++v20)
      {
        uint64_t v19 = *v23;
        goto LABEL_15;
      }
    }

    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

uint64_t sub_188D19B2C( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v31 = a2;
  uint64_t v32 = a8;
  uint64_t v11 = *(void **)(a6 - 8);
  uint64_t v12 = MEMORY[0x1895F8858](a1);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  uint64_t v16 = (char *)&v29 - v15;
  uint64_t v18 = *v17;
  uint64_t v19 = v11[9];
  uint64_t v29 = *v20;
  uint64_t v21 = (void (*)(char *, uint64_t, uint64_t))v11[2];
  v21((char *)&v29 - v15, v18 + v19 * v29, v22);
  uint64_t v30 = a5;
  v21(v14, v18 + v19 * a5, a6);
  uint64_t v23 = sub_188DF7C40();
  uint64_t result = *a1;
  uint64_t v25 = 1LL << *a1;
  uint64_t v26 = v25 - 1;
  if (__OFSUB__(v25, 1LL))
  {
    __break(1u);
  }

  else
  {
    uint64_t result = sub_188DF7C40();
    uint64_t v27 = 1LL << *a1;
    if (!__OFSUB__(v27, 1LL))
    {
      _HashTable.UnsafeHandle.swapBucketValues(for:withCurrentValue:and:withCurrentValue:)( v26 & v23,  v30,  (v27 - 1) & result,  v29,  a1,  v31);
      uint64_t v28 = (void (*)(char *, uint64_t))v11[1];
      v28(v14, a6);
      return ((uint64_t (*)(char *, uint64_t))v28)(v16, a6);
    }
  }

  __break(1u);
  return result;
}

uint64_t OrderedSet._partition<A>(values:by:)( uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, char *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *v6;
  *uint64_t v6 = 0LL;
  uint64_t v10 = (uint64_t)(v6 + 1);
  uint64_t v11 = *(void *)(a5 + 16);
  sub_188DF8738();
  sub_188DF86D8();
  uint64_t v12 = v6[1];
  uint64_t v13 = *(void *)(v12 + 16);
  uint64_t v14 = *(unsigned __int8 *)(*(void *)(v11 - 8) + 80LL);
  uint64_t v15 = v12 + ((v14 + 32) & ~v14);
  v22[0] = v15;
  v22[1] = v13;
  sub_188D19DE4(v22, a1, a2, a3, a4, v9, v11, a6, &v23, *(void *)(a5 + 24));
  sub_188D1A35C(v22, v15, v13);
  if (!v21) {
    uint64_t v10 = v23;
  }
  swift_retain();
  swift_release();
  *uint64_t v6 = v9;
  swift_release();
  return v10;
}

uint64_t sub_188D19DE4@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(char *, char *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10)
{
  uint64_t v11 = v10;
  uint64_t v12 = a8;
  uint64_t v71 = a5;
  uint64_t v72 = a4;
  uint64_t v52 = a3;
  uint64_t v59 = a2;
  uint64_t v15 = a1;
  uint64_t v54 = a9;
  uint64_t v58 = *(void *)(a8 - 8);
  uint64_t v16 = MEMORY[0x1895F8858](a1);
  uint64_t v63 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = MEMORY[0x1895F8858](v16);
  uint64_t v57 = (char *)&v47 - v19;
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = MEMORY[0x1895F8858](v18);
  unsigned __int32 v62 = (char *)&v47 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v22);
  uint64_t v56 = (char *)&v47 - v24;
  uint64_t v76 = 0LL;
  uint64_t result = sub_188DF83CC();
  if (result)
  {
    uint64_t v26 = 0LL;
    uint64_t v50 = a10;
    uint64_t v27 = *(void *)(v21 + 72);
    uint64_t v49 = (uint64_t *)(a6 + 16);
    uint64_t v51 = a6;
    uint64_t v48 = a6 + 32;
    uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
    uint64_t v29 = v21;
    char v67 = v15;
    uint64_t v68 = v12;
    uint64_t v53 = v21;
    uint64_t v61 = a7;
    uint64_t v69 = v28;
    uint64_t v70 = v27;
    while (1)
    {
      uint64_t v60 = result;
      uint64_t v30 = v56;
      v28(v56, *v15 + v27 * v26, a7);
      uint64_t v31 = v58;
      uint64_t v32 = *(void *)(v58 + 72);
      uint64_t v73 = v26;
      uint64_t v55 = v32;
      uint64_t v33 = v57;
      uint64_t v66 = *(void (**)(char *, uint64_t, uint64_t))(v58 + 16);
      v66(v57, v59 + v32 * v26, v12);
      char v34 = v72(v30, v33);
      uint64_t v65 = *(void (**)(char *, uint64_t))(v31 + 8);
      v65(v33, v12);
      uint64_t v64 = *(uint64_t (**)(char *, uint64_t))(v29 + 8);
      uint64_t result = v64(v30, a7);
      uint64_t v74 = v11;
      if (v11) {
        break;
      }
      if ((v34 & 1) != 0)
      {
        uint64_t v35 = v60 - 1;
        if (__OFSUB__(v60, 1LL))
        {
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
          return result;
        }

        if (v73 == v35)
        {
          uint64_t result = v73;
          goto LABEL_23;
        }

        uint64_t v36 = v70 * v35;
        uint64_t v60 = -v55;
        uint64_t v37 = v59 + v55 * v35;
        while (1)
        {
          uint64_t v38 = v62;
          v69(v62, *v67 + v36, a7);
          uint64_t v39 = v63;
          uint64_t v40 = v68;
          v66(v63, v37, v68);
          uint64_t v41 = v74;
          char v42 = v72(v38, v39);
          uint64_t v43 = v40;
          a7 = v61;
          v65(v39, v43);
          uint64_t result = v64(v38, a7);
          uint64_t v74 = v41;
          if (v41) {
            return result;
          }
          if ((v42 & 1) == 0)
          {
            uint64_t v75 = v35;
            uint64_t v15 = v67;
            uint64_t v45 = v73;
            sub_188DF83B4();
            uint64_t v12 = v68;
            uint64_t result = sub_188DF83B4();
            if (v51)
            {
              uint64_t v46 = v74;
              uint64_t result = sub_188D1A1E8(v49, v48, (uint64_t)v15, (uint64_t)&v76, (uint64_t)&v75, a7);
              uint64_t v11 = v46;
            }

            else
            {
              uint64_t v11 = v74;
            }

            uint64_t v28 = v69;
            uint64_t v27 = v70;
            BOOL v44 = __OFADD__(v45, 1LL);
            uint64_t v26 = v45 + 1;
            if (!v44)
            {
              uint64_t result = v75;
              goto LABEL_20;
            }

            goto LABEL_28;
          }

          BOOL v44 = __OFSUB__(v35--, 1LL);
          if (v44)
          {
            __break(1u);
            goto LABEL_26;
          }

          v36 -= v70;
          v37 += v60;
          if (v73 == v35)
          {
            uint64_t result = v73;
            goto LABEL_23;
          }
        }
      }

      uint64_t v26 = v73 + 1;
      uint64_t v28 = v69;
      uint64_t v27 = v70;
      uint64_t result = v60;
      if (__OFADD__(v73, 1LL)) {
        goto LABEL_27;
      }
      uint64_t v15 = v67;
      uint64_t v12 = v68;
      uint64_t v11 = v74;
LABEL_20:
      uint64_t v76 = v26;
      uint64_t v29 = v53;
      if (v26 == result) {
        goto LABEL_23;
      }
    }
  }

  else
  {
LABEL_23:
    *uint64_t v54 = result;
  }

  return result;
}

uint64_t sub_188D1A1E8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v28 = a2;
  uint64_t v29 = a5;
  uint64_t v8 = *(void **)(a6 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v13 = (char *)&v26 - v12;
  uint64_t v15 = *v14;
  uint64_t v16 = v8[9];
  uint64_t v27 = *v17;
  uint64_t v18 = (void (*)(char *, uint64_t, uint64_t))v8[2];
  v18((char *)&v26 - v12, v15 + v16 * v27, v19);
  uint64_t v29 = *(void *)v29;
  v18(v11, v15 + v29 * v16, a6);
  uint64_t v20 = sub_188DF7C40();
  uint64_t result = *a1;
  uint64_t v22 = 1LL << *a1;
  uint64_t v23 = v22 - 1;
  if (__OFSUB__(v22, 1LL))
  {
    __break(1u);
  }

  else
  {
    uint64_t result = sub_188DF7C40();
    uint64_t v24 = 1LL << *a1;
    if (!__OFSUB__(v24, 1LL))
    {
      _HashTable.UnsafeHandle.swapBucketValues(for:withCurrentValue:and:withCurrentValue:)( v23 & v20,  v29,  (v24 - 1) & result,  v27,  a1,  v28);
      uint64_t v25 = (void (*)(char *, uint64_t))v8[1];
      v25(v11, a6);
      return ((uint64_t (*)(char *, uint64_t))v25)(v13, a6);
    }
  }

  __break(1u);
  return result;
}

void *sub_188D1A35C(void *result, uint64_t a2, uint64_t a3)
{
  if (*result)
  {
    if (*result == a2)
    {
      if (result[1] == a3)
      {
        uint64_t v3 = sub_188DF8738();
        return (void *)nullsub_1(v3, v4, v5, v6, v7);
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_188D1A3B0@<X0>(void *a1@<X8>)
{
  return sub_188D1867C( *(uint64_t **)(v1 + 32),  *(void *)(v1 + 40),  *(uint64_t (**)(char *))(v1 + 48),  *(void *)(v1 + 56),  *(void (**)(uint64_t, uint64_t))(v1 + 64),  *(void *)(v1 + 72),  a1,  *(void *)(v1 + 24));
}

uint64_t Rope.builder<A>(splittingAt:in:)@<X0>( void (*a1)(void, void)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v95 = a4;
  uint64_t v96 = a5;
  uint64_t v7 = a3;
  uint64_t v93 = a1;
  uint64_t v94 = a2;
  uint64_t v90 = a6;
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v85 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v86 = AssociatedTypeWitness;
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v84 = (char *)&v78 - v11;
  uint64_t v13 = type metadata accessor for Rope._Item(0LL, v9, v8, v12);
  uint64_t v82 = *(void *)(v13 - 8);
  uint64_t v83 = v13;
  uint64_t v14 = MEMORY[0x1895F8858](v13);
  uint64_t v81 = (char *)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = MEMORY[0x1895F8858](v14);
  uint64_t v80 = (uint64_t)&v78 - v17;
  MEMORY[0x1895F8858](v16);
  uint64_t v19 = (char *)&v78 - v18;
  uint64_t v21 = type metadata accessor for Rope._Node(255LL, v9, v8, v20);
  uint64_t v79 = sub_188DF8384();
  uint64_t v22 = *(void *)(v79 - 8);
  uint64_t v23 = MEMORY[0x1895F8858](v79);
  uint64_t v91 = (char *)&v78 - v24;
  uint64_t v25 = *(void *)(v21 - 8);
  uint64_t v26 = MEMORY[0x1895F8858](v23);
  uint64_t v28 = (char **)((char *)&v78 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  MEMORY[0x1895F8858](v26);
  uint64_t v92 = (char *)&v78 - v29;
  uint64_t v31 = type metadata accessor for Rope.Builder(0LL, v9, v8, v30);
  uint64_t v88 = *(void *)(v31 - 8);
  uint64_t v89 = v31;
  MEMORY[0x1895F8858](v31);
  uint64_t v33 = (uint64_t *)((char *)&v78 - v32);
  Rope._invalidateIndices()();
  uint64_t v97 = v33;
  char v34 = v33;
  uint64_t v35 = (void (*)(void, void))v8;
  uint64_t v87 = v9;
  Rope.Builder.init()(v9, v8, v36, v34);
  if ((Rope.isEmpty.getter(v7, v37, v38, v39) & 1) != 0)
  {
    if (!v93) {
      return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(v88 + 32))(v90, v97, v89);
    }
    __break(1u);
    goto LABEL_13;
  }

  v100[0] = (uint64_t)v93;
  uint64_t v41 = v91;
  uint64_t v7 = v79;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v91, v6, v79);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v41, 1LL, v21) == 1)
  {
LABEL_13:
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v91, v7);
    __break(1u);
    return result;
  }

  uint64_t v42 = v25;
  uint64_t v78 = v19;
  uint64_t v43 = v92;
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v92, v91, v21);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v6, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56))(v6, 1LL, 1LL, v21);
  if ((Rope._Node.header.getter() & 0xFF0000) != 0)
  {
    BOOL v44 = *(char **)(v25 + 16);
    uint64_t v93 = v35;
    uint64_t v45 = v43;
    uint64_t v46 = v87;
    do
    {
      ((void (*)(void *, char *, uint64_t))v44)(v28, v45, v21);
      uint64_t v47 = *v28 + 16LL;
      unint64_t v48 = *v28 + ((*(unsigned __int8 *)(v42 + 80) + 19LL) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80));
      MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, v21);
      uint64_t v49 = (unsigned __int16 *)nullsub_1(v47, v48, v46, v21, v93);
      uint64_t v51 = v50;
      swift_unknownObjectRetain();
      sub_188D1AC38( v49,  v51,  v100,  v94,  v46,  v95,  v96,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Node,  &v98,  (uint64_t)&protocol conformance descriptor for Rope<A>._Node);
      swift_unknownObjectRelease();
      (*(void (**)(void *, uint64_t))(v42 + 8))(v28, v21);
      v100[0] = v99;
      Rope._Node._innerSplit(at:into:)(v98, (uint64_t)v97, v21);
    }

    while ((Rope._Node.header.getter() & 0xFF0000) != 0);
    uint64_t v52 = v82;
    uint64_t v43 = v45;
    uint64_t v35 = v93;
  }

  else
  {
    BOOL v44 = *(char **)(v25 + 16);
    uint64_t v52 = v82;
  }

  uint64_t v91 = v44;
  ((void (*)(void *, char *, uint64_t))v44)(v28, v43, v21);
  uint64_t v53 = *v28 + 16LL;
  unint64_t v54 = *v28 + ((*(unsigned __int8 *)(v52 + 80) + 19LL) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80));
  uint64_t v55 = v83;
  MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Item, v83);
  uint64_t v56 = v87;
  uint64_t v57 = (unsigned __int16 *)nullsub_1(v53, v54, v87, v55, v35);
  uint64_t v59 = v58;
  swift_unknownObjectRetain();
  uint64_t v60 = v59;
  uint64_t v61 = v52;
  uint64_t v62 = v95;
  uint64_t v63 = v56;
  uint64_t v64 = v96;
  sub_188D1AC38( v57,  v60,  v100,  v94,  v63,  v95,  v96,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Item,  &v98,  (uint64_t)&protocol conformance descriptor for Rope<A>._Item);
  swift_unknownObjectRelease();
  uint64_t v93 = *(void (**)(void, void))(v42 + 8);
  v93(v28, v21);
  uint64_t v65 = v98;
  uint64_t v87 = v99;
  ((void (*)(void *, char *, uint64_t))v91)(v28, v92, v21);
  uint64_t v66 = (uint64_t)v78;
  Rope._Node._leafSplit(at:into:)(v65, (uint64_t)v97, v21, (uint64_t)v78);
  uint64_t v67 = (uint64_t)v84;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v64 + 32))(v87, v66, v62, v64);
  uint64_t v68 = v80;
  Rope._Item.split(at:)(v67, v55, v80);
  uint64_t v69 = *(void (**)(char *, uint64_t, uint64_t))(v52 + 16);
  uint64_t v70 = (uint64_t)v81;
  v69(v81, v68, v55);
  uint64_t v71 = v89;
  uint64_t v72 = (uint64_t)v97;
  Rope.Builder._insertAfterTip(_:)(v70, v89, v73, v74);
  v69((char *)v70, v66, v55);
  Rope.Builder._insertBeforeTip(_:)(v70, v71, v75, v76);
  uint64_t v77 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
  v77(v68, v55);
  (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v67, v86);
  v77(v66, v55);
  v93(v92, v21);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v88 + 32))(v90, v72, v71);
}

uint64_t Rope._Node._innerSplit(at:into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](a1);
  uint64_t v7 = MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v30 - v8;
  MEMORY[0x1895F8858](v7);
  uint64_t v11 = (char *)&v30 - v10;
  Rope._Node.ensureUnique()();
  if ((unsigned __int16)Rope._Node.header.getter() - 2LL == v4)
  {
    unsigned __int16 v12 = Rope._Node.header.getter();
    Rope._Node._removeNode(at:)(v12 - 1LL, a3, (uint64_t)v11);
    uint64_t v14 = type metadata accessor for Rope.Builder(0LL, *(void *)(a3 + 16), *(void *)(a3 + 24), v13);
    sub_188D45EB4((uint64_t)v11, v14, v15, v16);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v11, a3);
  }

  if (v4 == 1)
  {
    Rope._Node._removeNode(at:)(0LL, a3, (uint64_t)v11);
    uint64_t v18 = type metadata accessor for Rope.Builder(0LL, *(void *)(a3 + 16), *(void *)(a3 + 24), v17);
    Rope.Builder._insertBeforeTip(_:)((uint64_t)v11, v18, v19, v20);
    uint64_t v4 = 0LL;
  }

  Rope._Node._removeNode(at:)(v4, a3, (uint64_t)v9);
  sub_188DF89E4();
  if ((unsigned __int16)Rope._Node.header.getter())
  {
    if (v4)
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v11, v9, a3);
      uint64_t v23 = type metadata accessor for Rope.Builder(0LL, *(void *)(a3 + 16), *(void *)(a3 + 24), v22);
      Rope.Builder._insertBeforeTip(_:)((uint64_t)v11, v23, v24, v25);
    }

    else
    {
      uint64_t v26 = type metadata accessor for Rope.Builder(0LL, *(void *)(a3 + 16), *(void *)(a3 + 24), v21);
      sub_188D45EB4((uint64_t)v9, v26, v27, v28);
    }
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v9, a3);
}

uint64_t sub_188D1AC38@<X0>( unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)(void, uint64_t, uint64_t)@<X7>, uint64_t *a9@<X8>, uint64_t a10)
{
  uint64_t v18 = *a3;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v20 = a8(0LL, a5, AssociatedConformanceWitness);
  uint64_t v21 = MEMORY[0x1895D7620](a10, v20);
  uint64_t result = Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v18, a4, 1, a1, a2, a5, v20, a6, v21, a7);
  *a9 = result;
  a9[1] = v23;
  return result;
}

uint64_t Rope._Node._leafSplit(at:into:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v56 = a2;
  uint64_t v54 = a4;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  unsigned __int16 v12 = (char *)&v47 - v11;
  uint64_t v14 = type metadata accessor for Rope._Item(0LL, v8, v7, v13);
  uint64_t v52 = *(void *)(v14 - 8);
  uint64_t v53 = v14;
  uint64_t v15 = MEMORY[0x1895F8858](v14);
  uint64_t v51 = (uint64_t)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = MEMORY[0x1895F8858](v15);
  uint64_t v19 = (char *)&v47 - v18;
  uint64_t v20 = MEMORY[0x1895F8858](v17);
  uint64_t v47 = (char *)&v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = MEMORY[0x1895F8858](v20);
  uint64_t v49 = (char *)&v47 - v23;
  MEMORY[0x1895F8858](v22);
  uint64_t v25 = (char *)&v47 - v24;
  uint64_t v50 = v26;
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
  uint64_t v55 = v4;
  unint64_t v48 = v27;
  v27((char *)&v47 - v24, v4, a3);
  Rope._Node.ensureUnique()();
  if ((unsigned __int16)Rope._Node.header.getter() - 2LL == a1)
  {
    unsigned __int16 v28 = Rope._Node.header.getter();
    Rope._Node._removeItem(at:)((uint64_t)v19, (uint64_t)v12, v28 - 1LL, a3);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
    uint64_t v30 = type metadata accessor for Rope.Builder(0LL, v8, v7, v29);
    Rope.Builder._insertAfterTip(_:)((uint64_t)v19, v30, v31, v32);
  }

  if (a1 == 1)
  {
    Rope._Node._removeItem(at:)((uint64_t)v19, (uint64_t)v12, 0LL, a3);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
    uint64_t v34 = type metadata accessor for Rope.Builder(0LL, v8, v7, v33);
    sub_188D45FEC((uint64_t)v19, v34);
    (*(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8LL))(v19, v8);
    a1 = 0LL;
  }

  uint64_t v35 = v51;
  Rope._Node._removeItem(at:)(v51, (uint64_t)v12, a1, a3);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
  if ((unsigned __int16)Rope._Node.header.getter())
  {
    if (a1)
    {
      uint64_t v37 = (uint64_t)v49;
      v48(v49, v25, a3);
      uint64_t v39 = type metadata accessor for Rope.Builder(0LL, v8, v7, v38);
      Rope.Builder._insertBeforeTip(_:)(v37, v39, v40, v41);
    }

    else
    {
      uint64_t v42 = type metadata accessor for Rope.Builder(0LL, v8, v7, v36);
      sub_188D45EB4((uint64_t)v25, v42, v43, v44);
    }
  }

  uint64_t v45 = *(void (**)(char *, uint64_t))(v50 + 8);
  v45(v55, a3);
  v45(v25, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(v54, v35, v53);
}

uint64_t Rope.split(at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v57 = (char *)a5;
  uint64_t v8 = (void *)a4;
  uint64_t v51 = a1;
  uint64_t v52 = a2;
  uint64_t v10 = *(void *)(a6 + 16);
  uint64_t v11 = *(void *)(a6 + 24);
  uint64_t v12 = type metadata accessor for Rope._Item(0LL, v10, v11, a4);
  MEMORY[0x1895F8858](v12);
  uint64_t v49 = (uint64_t)&v46 - v13;
  uint64_t v15 = type metadata accessor for Rope._Node(255LL, v10, v11, v14);
  uint64_t v16 = sub_188DF8384();
  uint64_t v54 = *(uint64_t **)(v16 - 8);
  uint64_t v55 = (void *)v16;
  uint64_t v17 = MEMORY[0x1895F8858](v16);
  uint64_t v53 = (char *)&v46 - v18;
  uint64_t v56 = *(void *)(v15 - 8);
  uint64_t v19 = MEMORY[0x1895F8858](v17);
  uint64_t v47 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v19);
  uint64_t v22 = (char *)&v46 - v21;
  uint64_t v48 = type metadata accessor for Rope.Builder(0LL, v10, v11, v23);
  uint64_t v46 = *(void *)(v48 - 8);
  MEMORY[0x1895F8858](v48);
  uint64_t AssociatedTypeWitness = (uint64_t *)((char *)&v46 - v24);
  uint64_t v26 = v57;
  Rope.validate(_:)(a3, (uint64_t)v8, (uint64_t)v57, a6);
  uint64_t v50 = a6;
  uint64_t v27 = Rope.endIndex.getter(a6);
  uint64_t v28 = a3;
  unint64_t v29 = (unint64_t)v8;
  uint64_t v57 = (char *)AssociatedTypeWitness;
  Rope.Builder.init()(v10, v11, v32, AssociatedTypeWitness);
  uint64_t v26 = v53;
  uint64_t AssociatedTypeWitness = v54;
  uint64_t v8 = v55;
  ((void (*)(char *, void *, void *))v54[2])(v53, v6, v55);
  uint64_t v33 = v56;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v26, 1LL, v15) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v22, v26, v15);
    ((void (*)(void *, void *))AssociatedTypeWitness[1])(v6, v8);
    uint64_t v34 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(v33 + 56);
    uint64_t v55 = v6;
    v34(v6, 1LL, 1LL, v15);
    if ((Rope._Node.header.getter() & 0xFF0000) == 0)
    {
LABEL_7:
      unsigned int v39 = Rope._Node.header.getter() >> 16;
      uint64_t AssociatedTypeWitness = (uint64_t *)swift_getAssociatedTypeWitness();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v8 = (void *)_RopePath.subscript.getter(v39, v29, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness);
      if ((uint64_t)v8 < (unsigned __int16)Rope._Node.header.getter())
      {
        uint64_t v41 = v56;
        (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v47, v22, v15);
        uint64_t v42 = v49;
        uint64_t v43 = (uint64_t)v8;
        uint64_t v44 = (uint64_t)v57;
        Rope._Node._leafSplit(at:into:)(v43, (uint64_t)v57, v15, v49);
        (*(void (**)(char *, uint64_t))(v41 + 8))(v22, v15);
        Rope._invalidateIndices()();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 32))(v51, v44, v48);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))(v52, v42, v10);
      }

      goto LABEL_11;
    }

    uint64_t v8 = &protocol requirements base descriptor for RopeElement;
    uint64_t AssociatedTypeWitness = (uint64_t *)&associated type descriptor for RopeElement.Summary;
    uint64_t v26 = (char *)&associated conformance descriptor for RopeElement.RopeElement.Summary: RopeSummary;
    while (1)
    {
      unsigned int v35 = Rope._Node.header.getter() >> 16;
      uint64_t v36 = swift_getAssociatedTypeWitness();
      uint64_t v37 = swift_getAssociatedConformanceWitness();
      uint64_t v38 = _RopePath.subscript.getter(v35, v29, v36, v37);
      Rope._Node._innerSplit(at:into:)(v38, (uint64_t)v57, v15);
      if ((Rope._Node.header.getter() & 0xFF0000) == 0) {
        goto LABEL_7;
      }
    }

    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
  }

  uint64_t result = ((uint64_t (*)(char *, void *))AssociatedTypeWitness[1])(v26, v8);
  __break(1u);
  return result;
}

uint64_t Rope.split(at:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v13 = (char *)&v25 - v12;
  Rope.split(at:)(a4, (uint64_t)&v25 - v12, v14, v15, v16, a3);
  uint64_t v17 = *(void *)(a3 + 24);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 88))(a2, v7, v17);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 48);
  if ((v18(v7, v17) & 1) == 0)
  {
    uint64_t v20 = type metadata accessor for Rope.Builder(0LL, v7, v17, v19);
    sub_188D45FF8((uint64_t)v11, v20);
  }

  if ((v18(v7, v17) & 1) == 0)
  {
    uint64_t v22 = type metadata accessor for Rope.Builder(0LL, v7, v17, v21);
    sub_188D45FEC((uint64_t)v13, v22);
  }

  uint64_t v23 = *(void (**)(char *, uint64_t))(v8 + 8);
  v23(v11, v7);
  return ((uint64_t (*)(char *, uint64_t))v23)(v13, v7);
}

Swift::Void __swiftcall BigString._dump(heightLimit:)(Swift::Int heightLimit)
{
  uint64_t v2 = *v1;
  if (*v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_18C74A100);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_188DF9DB0;
    sub_188D07F48((uint64_t)v1);
    sub_188D1B80C();
    sub_188DF7EE0();
    swift_bridgeObjectRelease();
    *(void *)(v4 + 56) = MEMORY[0x189617FA8];
    *(void *)(v4 + 32) = 0LL;
    *(void *)(v4 + 40) = 0xE000000000000000LL;
    sub_188DF8A2C();
    swift_bridgeObjectRelease();
    if (heightLimit >= 1)
    {
      int v5 = *(unsigned __int8 *)(v2 + 18);
      swift_unknownObjectRetain();
      uint64_t v6 = (_WORD *)(v2 + 16);
      uint64_t v7 = v2 + 24;
      if (v5) {
        sub_188D1BA4C(v6, v7, heightLimit, 0LL, 0xE000000000000000LL);
      }
      else {
        sub_188D1BC54(v6, v7, 0LL, 0xE000000000000000LL);
      }
      sub_188D087F8((uint64_t)v1);
    }

    sub_188D087F8((uint64_t)v1);
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_18C74A100);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = MEMORY[0x189617FA8];
    *(_OWORD *)(v8 + 16) = xmmword_188DF9DB0;
    *(void *)(v8 + 56) = v9;
    *(void *)(v8 + 32) = 0x3E7974706D453CLL;
    *(void *)(v8 + 40) = 0xE700000000000000LL;
    sub_188DF8A2C();
    swift_bridgeObjectRelease();
  }

uint64_t sub_188D1B80C()
{
  uint64_t v1 = *v0;
  sub_188DF8600();
  if (*(_BYTE *)(v1 + 18))
  {
    sub_188DF88D0();
    sub_188DF7EE0();
    swift_bridgeObjectRelease();
  }

  sub_188DF7EE0();
  swift_bridgeObjectRelease();
  sub_188DF7EE0();
  sub_188CF78D0();
  sub_188DF7FA0();
  sub_188DF7EE0();
  swift_bridgeObjectRelease();
  sub_188DF7EE0();
  swift_bridgeObjectRelease();
  sub_188DF7EE0();
  sub_188DF878C();
  sub_188DF7EE0();
  sub_188DF88D0();
  sub_188DF7EE0();
  swift_bridgeObjectRelease();
  sub_188DF7EE0();
  sub_188DF88D0();
  sub_188DF7EE0();
  swift_bridgeObjectRelease();
  sub_188DF7EE0();
  return 0LL;
}

_WORD *sub_188D1BA4C(_WORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = (unsigned __int16)*result;
  if (*result)
  {
    uint64_t v16 = a3 - 1;
    if (__OFSUB__(a3, 1LL))
    {
      __break(1u);
    }

    else
    {
      uint64_t v7 = 0LL;
      do
      {
        __int128 v8 = *(_OWORD *)(a2 + 16);
        v17[0] = *(_OWORD *)a2;
        v17[1] = v8;
        uint64_t v18 = *(void *)(a2 + 32);
        uint64_t v9 = *(void *)&v17[0];
        sub_188D07F48((uint64_t)v17);
        swift_bridgeObjectRetain();
        sub_188DF88D0();
        sub_188DF7EE0();
        swift_bridgeObjectRelease();
        sub_188DF7EE0();
        swift_bridgeObjectRetain();
        sub_188DF7EE0();
        __swift_instantiateConcreteTypeFromMangledName(qword_18C74A100);
        uint64_t v10 = swift_allocObject();
        *(_OWORD *)(v10 + 16) = xmmword_188DF9DB0;
        swift_bridgeObjectRetain();
        sub_188D1B80C();
        sub_188DF7EE0();
        swift_bridgeObjectRelease();
        *(void *)(v10 + 56) = MEMORY[0x189617FA8];
        *(void *)(v10 + 32) = a4;
        *(void *)(v10 + 40) = a5;
        sub_188DF8A2C();
        swift_bridgeObjectRelease();
        if (v16 >= 1)
        {
          int v11 = *(unsigned __int8 *)(v9 + 18);
          swift_unknownObjectRetain();
          uint64_t v12 = (_WORD *)(v9 + 16);
          uint64_t v13 = v9 + 24;
          if (v11) {
            sub_188D1BA4C(v12, v13, v16, a4, a5);
          }
          else {
            sub_188D1BC54(v12, v13, a4, a5);
          }
          sub_188D087F8((uint64_t)v17);
        }

        ++v7;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = (_WORD *)sub_188D087F8((uint64_t)v17);
        a2 += 40LL;
      }

      while (v14 != v7);
    }
  }

  return result;
}

_WORD *sub_188D1BC54(_WORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (unsigned __int16)*result;
  if (*result)
  {
    uint64_t v7 = 0LL;
    uint64_t v8 = a2 + 21;
    uint64_t v9 = MEMORY[0x189617FA8];
    do
    {
      __swift_instantiateConcreteTypeFromMangledName(qword_18C74A100);
      uint64_t v10 = swift_allocObject();
      *(_OWORD *)(v10 + 16) = xmmword_188DF9DB0;
      swift_bridgeObjectRetain();
      sub_188DF88D0();
      sub_188DF7EE0();
      swift_bridgeObjectRelease();
      sub_188DF7EE0();
      swift_bridgeObjectRetain();
      sub_188DF878C();
      sub_188DF7EE0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)(v10 + 56) = v9;
      *(void *)(v10 + 32) = a3;
      *(void *)(v10 + 40) = a4;
      sub_188DF8A2C();
      uint64_t result = (_WORD *)swift_bridgeObjectRelease();
      v8 += 24LL;
      ++v7;
    }

    while (v4 != v7);
  }

  return result;
}

uint64_t sub_188D1BDE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    return a1;
  }
  uint64_t result = swift_arrayDestroy();
  if ((unsigned __int128)(a2 * (__int128)*(uint64_t *)(*(void *)(a3 - 8) + 72LL)) >> 64 == (a2
                                                                                            * *(void *)(*(void *)(a3 - 8) + 72LL)) >> 63)
    return a1;
  __break(1u);
  return result;
}

uint64_t sub_188D1BE44@<X0>( void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v25 = a5;
  uint64_t v26 = a2;
  uint64_t v28 = a4;
  uint64_t v27 = a1;
  uint64_t v24 = a3;
  uint64_t v9 = *(void *)(a3 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](a1);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1895F8858](v10);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v16);
  uint64_t v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v6);
  uint64_t v22 = 1LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1LL, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
    v27(v18, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if (v7) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v25, v12, v24);
    }
    uint64_t v22 = 0LL;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL))(a6, v22, 1LL);
}

uint64_t _UnsafeWrappedBuffer.first.getter()
{
  return *(void *)v0;
}

uint64_t _UnsafeWrappedBuffer.second.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t _UnsafeWrappedBuffer.init(_:_:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  *(void *)a6 = result;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = a4;
  *(_BYTE *)(a6 + 32) = a5 & 1;
  return result;
}

uint64_t _UnsafeWrappedBuffer.init(start:count:)@<X0>(uint64_t a1@<X8>)
{
  return sub_188D1C17C(MEMORY[0x189617C30], a1);
}

uint64_t _UnsafeWrappedBuffer.init(first:count:second:count:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_188DF7DA8();
  uint64_t v4 = v3;
  uint64_t result = sub_188DF7DA8();
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = result;
  *(void *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = 0;
  return result;
}

uint64_t _UnsafeWrappedBuffer.count.getter(uint64_t a1)
{
  return sub_188D1C3A8(a1, (void (*)(uint64_t, void))MEMORY[0x189617C50]);
}

uint64_t _UnsafeMutableWrappedBuffer.init(_:_:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  if ((a5 & 1) == 0 && a4 == 0) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = a3;
  }
  *(void *)a6 = result;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = v6;
  *(void *)(a6 + 24) = a4;
  *(_BYTE *)(a6 + 32) = a5 & 1 | (a4 == 0);
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.init(_:_:)@<X0>( uint64_t a1@<X4>, uint64_t a2@<X5>, char a3@<W6>, uint64_t a4@<X8>)
{
  BOOL v8 = (a3 & 1) == 0;
  uint64_t result = sub_188DF83E4();
  if (v8 && a2 == 0) {
    uint64_t v11 = 0LL;
  }
  else {
    uint64_t v11 = a1;
  }
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v10;
  *(void *)(a4 + 16) = v11;
  *(void *)(a4 + 24) = a2;
  *(_BYTE *)(a4 + 32) = a3 & 1 | (a2 == 0);
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_188DF83E4();
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = a2;
  if (v7) {
    uint64_t v8 = result;
  }
  else {
    uint64_t v8 = 0LL;
  }
  *(void *)(a3 + 16) = v8;
  *(void *)(a3 + 24) = v7;
  *(_BYTE *)(a3 + 32) = v7 == 0;
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.init(start:count:)@<X0>(uint64_t a1@<X8>)
{
  return sub_188D1C17C(MEMORY[0x189618AE0], a1);
}

uint64_t sub_188D1C17C@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t result = a1();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_BYTE *)(a2 + 32) = 1;
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.init(first:count:second:count:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_188DF83A8();
  uint64_t v4 = v3;
  uint64_t result = sub_188DF83A8();
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v4;
  if (v6) {
    uint64_t v7 = result;
  }
  else {
    uint64_t v7 = 0LL;
  }
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v6 == 0;
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.init(mutating:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_188DF83D8();
  uint64_t v8 = v7;
  sub_188DF7DCC();
  uint64_t v9 = sub_188DF8384();
  uint64_t v10 = *(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v23, a1 + 16, v9);
  v10(v19, (uint64_t)v23, v9);
  v18[2] = a2;
  uint64_t v11 = sub_188DF83F0();
  uint64_t result = sub_188D1BE44( (void (*)(char *, char *))sub_188D1C364,  (uint64_t)v18,  MEMORY[0x18961A520],  v11,  v12,  (uint64_t)&v20);
  uint64_t v14 = v20;
  uint64_t v15 = v21;
  if (v21) {
    uint64_t v16 = v20;
  }
  else {
    uint64_t v16 = 0LL;
  }
  if (v21) {
    char v17 = v22;
  }
  else {
    char v17 = 1;
  }
  if (!v22) {
    uint64_t v14 = v16;
  }
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v8;
  *(void *)(a3 + 16) = v14;
  *(void *)(a3 + 24) = v15;
  *(_BYTE *)(a3 + 32) = v17;
  return result;
}

uint64_t sub_188D1C32C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_188DF83D8();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_188D1C364@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_188DF83D8();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.count.getter(uint64_t a1)
{
  return sub_188D1C3A8(a1, (void (*)(uint64_t, void))MEMORY[0x189618B10]);
}

uint64_t sub_188D1C3A8(uint64_t a1, void (*a2)(uint64_t, void))
{
  uint64_t v3 = sub_188DF8384();
  uint64_t v4 = *(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 32LL);
  v4(v8, v2 + 16, v3);
  v4(v9, (uint64_t)v8, v3);
  if (v11) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = v10;
  }
  uint64_t v6 = *(void *)(v2 + 8);
  uint64_t result = v6 + v5;
  if (__OFADD__(v6, v5)) {
    __break(1u);
  }
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.prefix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *(void *)(v2 + 8);
  uint64_t v21 = *(void *)v2;
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  char v7 = *(_BYTE *)(v2 + 32);
  uint64_t v8 = sub_188DF83F0();
  uint64_t v9 = sub_188DF8384();
  uint64_t v10 = *(uint64_t (**)(char *, _BYTE *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v22, (_BYTE *)(v2 + 16), v9);
  uint64_t result = v10(v25, v22, v9);
  if (v27) {
    uint64_t v12 = 0LL;
  }
  else {
    uint64_t v12 = v26;
  }
  uint64_t v13 = *(void *)(v2 + 8);
  BOOL v14 = __OFADD__(v13, v12);
  uint64_t v15 = v13 + v12;
  if (v14)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  if (v15 <= a1)
  {
    char v18 = v7 & 1;
    uint64_t v13 = v20;
    uint64_t v16 = v21;
LABEL_14:
    *(void *)a2 = v16;
    *(void *)(a2 + 8) = v13;
    *(void *)(a2 + 16) = v5;
    *(void *)(a2 + 24) = v6;
    *(_BYTE *)(a2 + 32) = v18;
    return result;
  }

  uint64_t v16 = *(void *)v2;
  if (v13 >= a1)
  {
    v23[0] = *(void *)v2;
    v23[1] = v13;
    MEMORY[0x1895D7620](MEMORY[0x189618B48], v8);
    sub_188DF8270();
    uint64_t result = sub_188DF83E4();
    uint64_t v16 = result;
    uint64_t v13 = v19;
    uint64_t v5 = 0LL;
    uint64_t v6 = 0LL;
    char v18 = 1;
    goto LABEL_14;
  }

  uint64_t result = v10((char *)v23, v22, v9);
  if ((v24 & 1) == 0)
  {
    if (!__OFSUB__(a1, v13))
    {
      MEMORY[0x1895D7620](MEMORY[0x189618B48], v8);
      sub_188DF8270();
      uint64_t result = sub_188DF83E4();
      uint64_t v6 = v17;
      char v18 = v17 == 0;
      if (v17) {
        uint64_t v5 = result;
      }
      else {
        uint64_t v5 = 0LL;
      }
      goto LABEL_14;
    }

    goto LABEL_16;
  }

LABEL_17:
  __break(1u);
  return result;
}

    __break(1u);
    return result;
  }

  uint64_t v10 = -1LL << v6;
  uint64_t v9 = (void *)(v11 + 8 * v8);
LABEL_19:
  *v9 &= v10;
}

  __break(1u);
  return result;
}

    __break(1u);
  }

  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

      __break(1u);
      return;
    }

    __break(1u);
    goto LABEL_17;
  }

      __break(1u);
      goto LABEL_18;
    }

    __break(1u);
    goto LABEL_17;
  }

  uint64_t v12 = -by;
  if (__OFSUB__(0LL, by))
  {
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v2 = *((void *)v1 + 1);
  if (v2 < 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v4 = *(char **)v1;
  uint64_t v3 = v2 + by;
  if (v2 > v12)
  {
    uint64_t v13 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v1 = v4;
    if ((v13 & 1) != 0)
    {
LABEL_12:
      BOOL v14 = *((void *)v4 + 2);
      uint64_t v15 = v4 + 32;
      uint64_t v16 = v14;
      uint64_t v17 = v2;
      sub_188DF548C(v12, v2, (uint64_t)(v4 + 32), v14, 0LL);
      *(void *)uint64_t v1 = v4;
      sub_188D3C3F4(v3);
      return;
    }

  uint64_t v16 = sub_188DBC3D0(v7, v10, v12, 1, (unsigned __int16 *)result, a2);
  char v18 = v17;
  uint64_t v198 = a2;
  uint64_t v19 = a2 + 24 * v7;
  uint64_t v21 = *(void *)v19;
  uint64_t v20 = *(void *)(v19 + 8);
  char v22 = *(unsigned int *)(v19 + 16) | ((unint64_t)*(unsigned __int8 *)(v19 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(v19 + 21) << 40);
  uint64_t v23 = sub_188D95994(v10, *(void *)v19, v20);
  swift_bridgeObjectRetain();
  uint64_t v231 = sub_188D82630(v23, v21, v20, v22);
  uint64_t v25 = v24;
  if (v7 == v16)
  {
    swift_bridgeObjectRetain();
    uint64_t v26 = sub_188D0EFD0(v23, v21, v20);
    uint64_t v28 = v27;
    uint64_t v30 = v29;
    uint64_t v31 = v18;
    uint64_t v33 = v32;
    swift_bridgeObjectRelease();
    uint64_t v34 = MEMORY[0x1895D6684](v26, v28, v30, v33);
    uint64_t v36 = v35;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v37 = sub_188DF7FD0();
    unsigned int v39 = v38;
    uint64_t v41 = v40;
    uint64_t v43 = v42;
    swift_bridgeObjectRelease();
    MEMORY[0x1895D6684](v37, v39, v41, v43);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = v31 - v231;
    if (!__OFSUB__(v31, v231))
    {
      uint64_t v44 = (v25 << 16) & 0xFF0000LL | HIWORD(v231) | (v25 << 16) & 0xFF000000 | ((unint64_t)BYTE2(v25) << 32) | ((unint64_t)HIBYTE(v25) << 40);
      uint64_t v45 = sub_188D95994(result, v34, v36);
      uint64_t v46 = sub_188D82630(v45, v34, v36, v44);
      swift_bridgeObjectRetain();
      uint64_t v47 = sub_188D0EFD0(v45, v34, v36);
      uint64_t v49 = v48;
      uint64_t v51 = v50;
      uint64_t v53 = v52;
      swift_bridgeObjectRelease();
      MEMORY[0x1895D6684](v47, v49, v51, v53);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v54 = sub_188DF7FD0();
      uint64_t v56 = v55;
      uint64_t v58 = v57;
      uint64_t v60 = v59;
      swift_bridgeObjectRelease();
      uint64_t v61 = MEMORY[0x1895D6684](v54, v56, v58, v60);
      uint64_t v63 = v62;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_188DDC91C(v61, v63, v46 & 0xFFFFFFFFFFFFLL);
      return swift_bridgeObjectRelease();
    }

    goto LABEL_148;
  }

  uint64_t v208 = v18;
  uint64_t v209 = v16;
  v225 = HIBYTE(v24);
  swift_bridgeObjectRetain();
  uint64_t v64 = sub_188D0EFD0(v23, v21, v20);
  uint64_t v66 = v65;
  uint64_t v68 = v67;
  uint64_t v70 = v69;
  swift_bridgeObjectRelease();
  uint64_t v71 = MEMORY[0x1895D6684](v64, v66, v68, v70);
  uint64_t v73 = v72;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v74 = sub_188DF7FD0();
  uint64_t v76 = v75;
  uint64_t v78 = v77;
  uint64_t v80 = v79;
  swift_bridgeObjectRelease();
  MEMORY[0x1895D6684](v74, v76, v78, v80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t result = sub_188DDC91C( v71,  v73,  (v25 << 16) & 0xFF0000LL | HIWORD(v231) | (v25 << 16) & 0xFF000000 | (v225 << 40) | ((unint64_t)BYTE2(v25) << 32));
  uint64_t v81 = v7 + 1;
  if (!__OFADD__(v7, 1LL))
  {
    uint64_t v82 = v209;
    if (v209 < v81) {
      goto LABEL_150;
    }
    uint64_t v83 = v208;
    if (v81 == v209)
    {
LABEL_23:
      uint64_t v84 = v198 + 24 * v82;
      uint64_t v86 = *(void *)v84;
      uint64_t v85 = *(void *)(v84 + 8);
      uint64_t v87 = *(unsigned int *)(v84 + 16) | ((unint64_t)*(unsigned __int8 *)(v84 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(v84 + 21) << 40);
      uint64_t v88 = sub_188D95994(v83, *(void *)v84, v85);
      swift_bridgeObjectRetain();
      uint64_t v89 = sub_188D82630(v88, v86, v85, v87);
      swift_bridgeObjectRetain();
      uint64_t v90 = sub_188D0EFD0(v88, v86, v85);
      uint64_t v92 = v91;
      uint64_t v94 = v93;
      uint64_t v96 = v95;
      swift_bridgeObjectRelease();
      MEMORY[0x1895D6684](v90, v92, v94, v96);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v97 = sub_188DF7FD0();
      uint64_t v99 = v98;
      uint64_t v101 = v100;
      uint64_t v103 = v102;
      swift_bridgeObjectRelease();
      int v104 = MEMORY[0x1895D6684](v97, v99, v101, v103);
      uint64_t v106 = v105;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_188DDC91C(v104, v106, v89 & 0xFFFFFFFFFFFFLL);
      return swift_bridgeObjectRelease();
    }

    uint64_t v107 = (unsigned __int8 *)(v198 + 24 * v7 + 45);
    while (1)
    {
      if (v81 >= v82) {
        goto LABEL_136;
      }
      uint64_t v109 = *(void *)(v107 - 21);
      uint64_t v110 = *(void *)(v107 - 13);
      uint64_t v111 = (v110 & 0x2000000000000000LL) != 0 ? HIBYTE(v110) & 0xF : v109 & 0xFFFFFFFFFFFFLL;
      if (v111) {
        break;
      }
LABEL_26:
      ++v81;
      v107 += 24;
      if (v82 == v81) {
        goto LABEL_23;
      }
    }

    uint64_t v112 = *(v107 - 5);
    uint64_t result = *(v107 - 4);
    uint64_t v113 = *(v107 - 3);
    uint64_t v114 = *(v107 - 2);
    uint64_t v115 = *(v107 - 1);
    uint64_t v116 = *v107;
    uint64_t v117 = *(void *)(a5 + 48);
    uint64_t v118 = *(void *)(a5 + 56);
    uint64_t v119 = *(unsigned __int16 *)(a5 + 68);
    uint64_t v120 = *(unsigned int *)(a5 + 64);
    *(void *)(a5 + 48) = 0LL;
    *(void *)(a5 + 56) = 0LL;
    *(void *)(a5 + 62) = 0LL;
    if (!v118)
    {
      char v108 = v112 | (result << 8) | (v113 << 16) | (v114 << 24);
      *(void *)(a5 + 48) = v109;
      *(void *)(a5 + 56) = v110;
      *(_DWORD *)(a5 + 64) = v108;
      *(_WORD *)(a5 + 68) = (v108 | (v115 << 32) | (v116 << 40)) >> 32;
      uint64_t result = swift_bridgeObjectRetain();
      goto LABEL_26;
    }

    v236 = v117;
    v237 = v118;
    uint64_t v121 = v120 | (v119 << 32);
    LOWORD(v238) = v120;
    uint64_t v122 = v121 >> 8;
    uint64_t v123 = v121 >> 16;
    BYTE2(v238) = BYTE2(v120);
    uint64_t v124 = (v121 >> 24) & 0xFFFFFF;
    HIBYTE(v238) = BYTE3(v120);
    uint64_t v125 = BYTE4(v121);
    uint64_t v239 = WORD2(v121);
    uint64_t v126 = BYTE5(v121);
    uint64_t v232 = v109;
    uint64_t v233 = v110;
    LOBYTE(v234) = v112;
    BYTE1(v234) = result;
    BYTE2(v234) = v113;
    HIBYTE(v234) = v114;
    LOBYTE(v235) = v115;
    uint64_t v127 = v120;
    HIBYTE(v235) = v116;
    if (v120 >= 0x7CuLL && v112 >= 0x7C)
    {
      uint64_t v199 = WORD2(v121);
      uint64_t v203 = BYTE5(v121);
      uint64_t v219 = v121 >> 16;
      uint64_t v226 = v121 >> 8;
      uint64_t v210 = v117;
      uint64_t v214 = (v121 >> 24) & 0xFFFFFF;
      swift_bridgeObjectRetain();
LABEL_116:
      uint64_t v172 = *(void *)(a5 + 8);
      char v173 = *(void *)(a5 + 16);
      uint64_t v175 = *(void *)(a5 + 24);
      uint8x8_t v174 = *(void *)(a5 + 32);
      uint64_t v176 = *(void *)(a5 + 40);
      *(_OWORD *)(a5 + 8) = 0u;
      *(_OWORD *)(a5 + 24) = 0u;
      *(void *)(a5 + 40) = 0LL;
      if (!v172)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_18C4FB038);
        uint64_t v172 = swift_allocObject();
        uint64_t v176 = 0LL;
        uint8x8_t v174 = 0LL;
        uint64_t v175 = 0LL;
        char v173 = 0LL;
        *(_WORD *)(v172 + 16) = 0;
        *(_BYTE *)(v172 + 18) = 0;
      }

      if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
      {
        v241[5] = v172;
        v241[6] = v173;
        v241[7] = v175;
        v241[8] = v174;
        v241[9] = v176;
        sub_188D26268((uint64_t)v240);
        swift_unknownObjectRelease();
        uint64_t v172 = v240[0];
        char v173 = v240[1];
        uint64_t v175 = v240[2];
        uint8x8_t v174 = v240[3];
        uint64_t v176 = v240[4];
      }

      uint64_t result = v203;
      uint64_t v179 = *(unsigned __int16 *)(v172 + 16);
      uint64_t v180 = v172 + 24LL * *(unsigned __int16 *)(v172 + 16);
      *(void *)(v180 + 24) = v210;
      *(void *)(v180 + 32) = v118;
      *(_BYTE *)(v180 + 40) = v121;
      *(_BYTE *)(v180 + 4_HashNode.ensureUnique(isUnique:)(v1 & 1) = v226;
      *(_BYTE *)(v180 + 42) = v219;
      *(_BYTE *)(v180 + 43) = v214;
      *(_BYTE *)(v180 + 44) = v199;
      *(_BYTE *)(v180 + 45) = v203;
      if (v179 == 0xFFFF) {
        goto LABEL_143;
      }
      uint64_t v181 = v179 + 1;
      *(_WORD *)(v172 + 16) = v181;
      if (v181 == 15)
      {
        v241[0] = v172;
        v241[1] = v173 + v214;
        v241[2] = v175 + v219;
        v241[3] = v174 + v226;
        v241[4] = v176 + v121;
        sub_188DDCB8C(v241, v199, v177, v178);
      }

      else
      {
        *(void *)(a5 + 8) = v172;
        *(void *)(a5 + 16) = v173 + v214;
        *(void *)(a5 + 24) = v175 + v219;
        *(void *)(a5 + 32) = v174 + v226;
        *(void *)(a5 + 40) = v176 + v121;
      }

      uint64_t v83 = v208;
      uint64_t v82 = v209;
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v182 = v233;
      uint64_t v183 = v234;
      uint64_t v184 = ((unint64_t)HIBYTE(v235) << 40) | ((unint64_t)v235 << 32);
      *(void *)(a5 + 48) = v232;
      *(void *)(a5 + 56) = v182;
      *(_DWORD *)(a5 + 64) = v183;
      *(_WORD *)(a5 + 68) = WORD2(v184);
      goto LABEL_26;
    }

    if ((v118 & 0x2000000000000000LL) != 0) {
      int v128 = HIBYTE(v118) & 0xF;
    }
    else {
      int v128 = v117 & 0xFFFFFFFFFFFFLL;
    }
    if (!v128)
    {
      v236 = v109;
      v237 = v110;
      LOBYTE(v238) = v112;
      BYTE1(v238) = result;
      BYTE2(v238) = v113;
      HIBYTE(v238) = v114;
      uint64_t v134 = v116;
      uint64_t v135 = v115;
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v136 = v135;
      uint64_t v137 = v134;
      uint64_t v83 = v208;
      uint64_t v82 = v209;
LABEL_130:
      char v185 = v238;
      *(void *)(a5 + 48) = v109;
      *(void *)(a5 + 56) = v110;
      *(_DWORD *)(a5 + 64) = v185;
      *(_WORD *)(a5 + 68) = ((v137 << 40) | (unint64_t)(v136 << 32)) >> 32;
      goto LABEL_26;
    }

    uint64_t v129 = v120 + v112;
    uint64_t v130 = v129 - 124;
    uint64_t v131 = v129 - v127;
    if (v129 == v127) {
      goto LABEL_144;
    }
    if (v129 >= v127)
    {
      uint64_t v138 = (v110 & 0x1000000000000000LL) == 0 || (v109 & 0x800000000000000LL) != 0;
      if ((v110 & 0x1000000000000000LL) != 0)
      {
        uint64_t result = MEMORY[0x1895D67BC](15LL, v131, v109, v110);
        uint64_t v139 = result;
        uint64_t v82 = v209;
      }

      else
      {
        uint64_t v82 = v209;
        if ((v131 & 0x8000000000000000LL) != 0) {
          goto LABEL_152;
        }
        if (v111 < v131) {
          goto LABEL_153;
        }
        uint64_t v139 = (v131 << 16) | 4;
      }

      unint64_t v140 = 4LL << v138;
      if ((v139 & 0xC) == 4LL << v138 || (v139 & 1) == 0)
      {
        uint64_t v83 = v208;
        if ((v139 & 0xC) == v140)
        {
          uint64_t result = sub_188D37044(v139, v109, v110);
          uint64_t v139 = result;
          if (v111 < result >> 16) {
            goto LABEL_161;
          }
        }

        else if (v111 < v139 >> 16)
        {
          goto LABEL_161;
        }

        if ((v139 & 1) == 0) {
          uint64_t v139 = v139 & 0xC | sub_188D36F34(v139, v109, v110) & 0xFFFFFFFFFFFFFFF3LL | 1;
        }
      }

      else
      {
        uint64_t v83 = v208;
        if (v111 < v139 >> 16) {
          goto LABEL_155;
        }
      }

      swift_bridgeObjectRetain();
      sub_188D33624((uint64_t)&v236, (uint64_t)&v232, v139);
LABEL_112:
      uint64_t v171 = v232 & 0xFFFFFFFFFFFFLL;
      if ((v233 & 0x2000000000000000LL) != 0) {
        uint64_t v171 = HIBYTE(v233) & 0xF;
      }
      if (!v171)
      {
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v109 = v236;
        uint64_t v110 = v237;
        uint64_t v136 = v239;
        uint64_t v137 = HIBYTE(v239);
        goto LABEL_130;
      }

      uint64_t v118 = v237;
      LOBYTE(v12_HashNode.ensureUnique(isUnique:)(v1 & 1) = v238;
      LOBYTE(v226) = BYTE1(v238);
      LOBYTE(v219) = BYTE2(v238);
      uint64_t v210 = v236;
      LOBYTE(v214) = HIBYTE(v238);
      uint64_t v199 = v239;
      uint64_t v203 = HIBYTE(v239);
      goto LABEL_116;
    }

    uint8x8_t v132 = (v118 & 0x1000000000000000LL) == 0 || (v117 & 0x800000000000000LL) != 0;
    uint64_t v193 = v114;
    uint64_t v194 = v113;
    uint64_t v196 = v115;
    unsigned int v197 = v116;
    uint64_t v195 = result;
    if ((v118 & 0x1000000000000000LL) != 0)
    {
      uint64_t v211 = v117;
      uint64_t v188 = v132;
      uint64_t v189 = v128;
      uint64_t result = MEMORY[0x1895D67BC](15LL, v129, v117, v118);
      uint8x8_t v132 = v188;
      int v128 = v189;
      uint64_t v125 = BYTE4(v121);
      uint64_t v126 = BYTE5(v121);
      uint64_t v117 = v211;
      uint64_t v124 = (v121 >> 24) & 0xFFFFFF;
      uint64_t v133 = result;
      uint64_t v123 = v121 >> 16;
      uint64_t v122 = v121 >> 8;
    }

    else
    {
      uint64_t v133 = (v129 << 16) | 4;
    }

    if ((v133 & 0xC) == 4LL << v132 || (v133 & 1) == 0)
    {
      if ((v133 & 0xC) == 4LL << v132)
      {
        uint64_t v216 = v124;
        v221 = v123;
        v228 = v122;
        uint64_t v200 = v125;
        uint64_t v205 = v126;
        v212 = v117;
        uint64_t v190 = v128;
        uint64_t result = sub_188D37044(v133, v117, v118);
        int v128 = v190;
        uint64_t v125 = v200;
        uint64_t v126 = v205;
        uint64_t v117 = v212;
        LOBYTE(v124) = v216;
        uint64_t v133 = result;
        LOBYTE(v123) = v221;
        LOBYTE(v122) = v228;
        if (v190 < result >> 16) {
          goto LABEL_158;
        }
      }

      else if (v128 < v133 >> 16)
      {
        goto LABEL_158;
      }

      if ((v133 & 1) == 0)
      {
        uint64_t v217 = v124;
        v222 = v123;
        v229 = v122;
        uint64_t v186 = v133;
        unsigned int v201 = v125;
        uint64_t v206 = v126;
        uint64_t v213 = v117;
        unsigned int v191 = v128;
        uint8x8_t v148 = sub_188D36F34(v133, v117, v118);
        int v128 = v191;
        uint64_t v125 = v201;
        uint64_t v126 = v206;
        uint64_t v117 = v213;
        LOBYTE(v124) = v217;
        LOBYTE(v123) = v222;
        LOBYTE(v122) = v229;
        uint64_t v133 = v186 & 0xC | v148 & 0xFFFFFFFFFFFFFFF3LL | 1;
        if (v133 < 0x4000) {
          goto LABEL_72;
        }
        goto LABEL_96;
      }
    }

    else if (v128 < v133 >> 16)
    {
      goto LABEL_154;
    }

    if (v133 < 0x4000)
    {
LABEL_72:
      uint64_t v204 = v126;
      uint64_t v220 = v123;
      v227 = v122;
      uint64_t v215 = v124;
      uint64_t v141 = v125;
      swift_bridgeObjectRetain_n();
      uint64_t result = sub_188DF7FD0();
      if (v141 >= v121)
      {
        int8x8_t v143 = (v196 + v141) >> 8;
        uint64_t v83 = v208;
        uint64_t v142 = v197;
        if (v196 >= v112)
        {
          if ((v143 & 1) != 0) {
            goto LABEL_170;
          }
          LOBYTE(v239) = v196 + v141;
          uint64_t v142 = v204 + v197;
        }

        else
        {
          if ((v143 & 1) != 0) {
            goto LABEL_169;
          }
          LOBYTE(v239) = v196 + v141;
        }
      }

      else
      {
        uint64_t v142 = v197;
        uint64_t v83 = v208;
        if (v196 >= v112)
        {
          uint64_t v142 = v204 + v197;
        }
      }

      HIBYTE(v239) = v142;
      LOBYTE(v238) = v112 + v121;
      uint64_t v82 = v209;
      BYTE1(v238) = v195 + v227;
      BYTE2(v238) = v194 + v220;
      HIBYTE(v238) = v193 + v215;
      sub_188D2DC60();
      sub_188DF7EC8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v144 = v236;
      uint64_t v145 = v237;
      uint64_t v146 = v239;
      v236 = 0LL;
      v237 = 0xE000000000000000LL;
      uint64_t v147 = v238;
      uint64_t v238 = 0;
      uint64_t v239 = 0;
      uint64_t v232 = v144;
      uint64_t v233 = v145;
      uint64_t v234 = v147;
      uint64_t v235 = v146;
      goto LABEL_112;
    }

  uint64_t v15 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }

  if (v12 < v7)
  {
    uint64_t v16 = *(void *)(a2 + 40 * v12 + 32);
    if (v16 < v15)
    {
      uint64_t v17 = (uint64_t *)(a2 + 40 * v12 + 72);
      char v18 = v12;
      while (1)
      {
        uint64_t v19 = __OFSUB__(v15, v16);
        v15 -= v16;
        if (v19) {
          break;
        }
        if (v7 - 1 == v18)
        {
          char v18 = (unsigned __int16)*a1;
          goto LABEL_26;
        }

        ++v18;
        uint64_t v20 = *v17;
        v17 += 5;
        uint64_t v16 = v20;
        if (v20 >= v15) {
          goto LABEL_26;
        }
      }

      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
  }

  char v18 = v12;
LABEL_26:
  uint64_t v21 = (uint64_t *)(a2 + 40 * v12);
  if (v12 == v18)
  {
    if (v15 < v10 || *(void *)(a2 + 40 * v12 + 32) < v15 || v10 < 0) {
      goto LABEL_62;
    }
    if (v10 != v15)
    {
      char v22 = *v21;
      uint64_t v23 = *(unsigned __int8 *)(*v21 + 18);
      char v24 = *v21 + 24;
      swift_unknownObjectRetain();
      uint64_t v25 = v22 + 16;
      uint64_t v26 = v24;
      char v27 = v10;
      if (!v23)
      {
LABEL_32:
        sub_188DB169C(v25, v26, v27, v15, a5);
LABEL_52:
        swift_unknownObjectRelease();
        return;
      }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

      __break(1u);
      goto LABEL_18;
    }

    while (1)
    {
      char v11 = v7 + 1;
      if (__OFADD__(v7, 1LL)) {
        break;
      }
      if (v11 >= v8) {
        goto LABEL_13;
      }
      v0[2] = v11;
      uint64_t v10 = *(void *)(v9 + 8 * v11);
      v0[3] = v10;
      ++v7;
      if (v10) {
        goto LABEL_8;
      }
    }

    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  v0[3] = (v1 - 1) & v1;
  uint64_t v2 = v0[2] << 6;
  if (v2 < 0) {
    goto LABEL_15;
  }
  uint64_t v3 = 0;
  uint64_t v4 = v2 | __clz(__rbit64(v1));
LABEL_18:
  result.value = v4;
  result.is_nil = v3;
  return result;
}

        uint64_t v30 = -1LL;
      }
    }

      uint64_t v44 = -1LL;
      int v104 = -1LL;
      sub_188CF78D0();
      sub_188DF84E0();
      uint64_t v50 = sub_188DF7CC4();
      v43(v37, v4);
      v43(v34, v4);
      if ((v50 & 1) == 0) {
        return v44;
      }
      goto LABEL_18;
    }

    if (v47 >= 64) {
      goto LABEL_17;
    }
  }

  else if (sub_188DF8534() >= 64)
  {
    goto LABEL_17;
  }

  uint64_t v49 = sub_188DF8528();
LABEL_14:
  v43(v34, v4);
  if (v49 == -1) {
    return -1LL;
  }
LABEL_18:
  v103(v28, v102, v4);
  if ((sub_188DF8540() & 1) != 0)
  {
    uint64_t v51 = sub_188DF8534();
    uint64_t v52 = (uint64_t)v97;
    if (v51 < 64)
    {
LABEL_27:
      uint64_t v57 = sub_188DF8528();
      while (1)
      {
        v43(v28, v4);
        uint64_t v56 = v96;
        if (v57 < 0)
        {
          uint64_t v44 = 0LL;
          goto LABEL_50;
        }

  __break(1u);
  return result;
}

  char v24 = v30[4];
  uint64_t v42 = v30[1];
  if ((v42 ^ v24) < 0x4000)
  {
    uint64_t v40 = v30;
    return sub_188DB2AC0((uint64_t)v40);
  }

  *(void *)&uint64_t v141 = 0LL;
  *(void *)uint64_t v142 = MEMORY[0x18961AFE8];
  memset(&v142[8], 0, 62);
  int8x8_t v143 = 0LL;
  v144[0] = 0LL;
  *(void *)((char *)v144 + 6) = 0LL;
  v144[2] = MEMORY[0x18961AFE8];
  while (1)
  {
    uint64_t v43 = *v30;
    uint64_t v44 = v30[2];
    uint64_t v15 = v30[3];
    swift_bridgeObjectRetain();
    uint64_t v45 = sub_188DF848C();
    swift_bridgeObjectRelease();
    uint64_t v46 = v45 - 124;
    if (v45 >= 379) {
      uint64_t v46 = 255LL;
    }
    if (v45 <= 255) {
      uint64_t v47 = v45;
    }
    else {
      uint64_t v47 = v46;
    }
    uint64_t result = sub_188D8CFEC(v24, v42, v47, v44, v15);
    if ((v49 & 1) != 0 || (result ^ v48) < 0x4000)
    {
      if ((v24 ^ v42) >> 14) {
        goto LABEL_193;
      }
      uint64_t v115 = v130;
      uint64_t v116 = v130[1];
      *(_OWORD *)uint64_t v149 = *v130;
      *(_OWORD *)&v149[2] = v116;
      *(_OWORD *)&v149[4] = v130[2];
      sub_188D011B8((uint64_t)v149, (uint64_t)v157);
      sub_188D07F48((uint64_t)v157);
      sub_188DB8024(v145);
      sub_188DEEA7C((uint64_t)v149, v145, (uint64_t *)v146);
      unint64_t v140 = v146[1];
      uint64_t v141 = v146[0];
      uint64_t v117 = v147;
      uint64_t v118 = v148;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_188DB2AC0((uint64_t)v136);
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v119 = v140;
      *uint64_t v115 = v141;
      v115[1] = v119;
      *((void *)v115 + 4) = v117;
      *((void *)v115 + 5) = v118;
      return result;
    }

    v30[4] = v48;
    uint64_t v125 = v48;
    uint64_t v126 = result;
    uint64_t v127 = v43;
    int v128 = v15;
    uint64_t v129 = v44;
    uint64_t v50 = sub_188DF84BC();
    uint64_t v52 = v51;
    uint64_t v54 = v53;
    uint64_t v56 = v55;
    uint64_t v57 = sub_188D82544(v50, v51, v53, v55);
    uint64_t v58 = v141;
    sub_188D62E54(v50, v52, v54, v56);
    *(void *)&uint64_t v141 = v58;
    if ((v59 & 0x100) != 0) {
      break;
    }
    uint64_t v131 = v52;
    uint64_t v60 = v50;
    if ((v59 & 1) == 0)
    {
      uint64_t v122 = v42;
      swift_bridgeObjectRetain();
      uint64_t v61 = v131;
      uint64_t v62 = sub_188DF8480();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v63 = sub_188DF8480();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v64 = v63 >> 14;
      if (v63 >> 14 < v62 >> 14) {
        goto LABEL_187;
      }
      uint64_t v9 = v61 >> 14;
LABEL_84:
      if (v9 >= v64)
      {
        uint64_t v80 = sub_188DF84BC();
        BOOL v14 = v81;
        uint64_t v9 = v82;
        a1 = v83;
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v139 = v62;
        uint64_t v107 = 1LL;
        while (1)
        {
          if ((a1 & 0x1000000000000000LL) != 0)
          {
            uint64_t v94 = v80 >> 14;
            uint64_t v8 = v14 >> 14;
            if (v80 >> 14 >= v14 >> 14) {
              goto LABEL_144;
            }
            uint64_t v95 = 4LL << ((v9 & 0x800000000000000LL) != 0);
            uint64_t v96 = HIBYTE(a1) & 0xF;
            if ((a1 & 0x2000000000000000LL) == 0) {
              uint64_t v96 = v9 & 0xFFFFFFFFFFFFLL;
            }
            uint64_t v134 = v80 >> 14;
            uint64_t v135 = v96;
            uint64_t v97 = v80;
            uint64_t v137 = 4LL << ((v9 & 0x800000000000000LL) != 0);
            while (1)
            {
              uint64_t v98 = v97 & 0xC;
              uint64_t v99 = v98 == v95 || (v97 & 1) == 0;
              uint64_t v138 = v97;
              uint64_t v133 = v94;
              if (v99)
              {
                uint64_t v100 = v97;
                if (v98 == v95)
                {
                  uint64_t result = sub_188D37044(v138, v9, a1);
                  uint64_t v98 = v97 & 0xC;
                  uint64_t v100 = result;
                }

                uint64_t v101 = v134;
                if (v135 <= v100 >> 16) {
                  goto LABEL_189;
                }
                uint64_t v131 = v98;
                if ((v100 & 1) == 0) {
                  sub_188D36F34(v100, v9, a1);
                }
                uint64_t v15 = sub_188DF7E08();
                uint64_t result = v138;
                if (v131 == v137) {
                  uint64_t result = sub_188D37044(v138, v9, a1);
                }
                if (result >> 14 < v101 || result >> 14 >= v8) {
                  goto LABEL_190;
                }
                if ((result & 1) == 0) {
                  sub_188D36F34(result, v9, a1);
                }
              }

              else
              {
                if (v135 <= v97 >> 16) {
                  goto LABEL_191;
                }
                uint64_t result = sub_188DF7E08();
                if (v97 >> 14 < v134) {
                  goto LABEL_192;
                }
                uint64_t v15 = result;
                uint64_t result = v138;
                if (v97 >> 14 >= v8) {
                  goto LABEL_192;
                }
              }

              sub_188DF85F4();
              char v24 = v140;
              uint64_t result = sub_188DF8B34();
              uint64_t v89 = v15 >> 14;
              if ((result & 1) != 0) {
                break;
              }
              uint64_t v97 = v15;
              uint64_t v94 = v15 >> 14;
              uint64_t v95 = v137;
              if (v89 >= v8) {
                goto LABEL_144;
              }
            }

            if (v89 < v133) {
              goto LABEL_194;
            }
          }

          else
          {
            if ((a1 & 0x2000000000000000LL) != 0)
            {
              v149[0] = v9;
              v149[1] = a1 & 0xFFFFFFFFFFFFFFLL;
              uint64_t v84 = v149;
            }

            else if ((v9 & 0x1000000000000000LL) != 0)
            {
              uint64_t v84 = (void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 32);
            }

            else
            {
              uint64_t v84 = (void *)sub_188DF8684();
            }

            uint64_t v85 = v141;
            uint64_t v15 = sub_188D632DC((uint64_t)v84, v80, v14, v9, a1);
            char v24 = v86;
            *(void *)&uint64_t v141 = v85;
            LOBYTE(v146[0]) = v87 & 1;
            if ((v87 & 1) != 0)
            {
LABEL_144:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              uint64_t v15 = v126;
              int v104 = sub_188DF848C();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              uint64_t v139 = sub_188DF848C();
              swift_bridgeObjectRelease();
              uint64_t v57 = v104;
              uint64_t v65 = sub_188DF84BC();
              uint64_t v54 = v105;
              uint64_t v56 = v106;
              goto LABEL_146;
            }

            if ((v80 & 0xC) == 8)
            {
              int v102 = sub_188D37044(v80, v9, a1);
              uint64_t v8 = v15 + (v102 >> 16);
              if (__OFADD__(v15, v102 >> 16))
              {
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                __break(1u);
LABEL_164:
                __break(1u);
LABEL_165:
                __break(1u);
LABEL_166:
                __break(1u);
LABEL_167:
                __break(1u);
LABEL_168:
                __break(1u);
LABEL_169:
                __break(1u);
LABEL_170:
                __break(1u);
LABEL_171:
                __break(1u);
LABEL_172:
                __break(1u);
LABEL_173:
                __break(1u);
                goto LABEL_174;
              }
            }

            else
            {
              uint64_t v8 = v15 + (v80 >> 16);
              if (__OFADD__(v15, v80 >> 16)) {
                goto LABEL_160;
              }
            }

            if ((v8 & 0x8000000000000000LL) != 0) {
              goto LABEL_161;
            }
            if ((a1 & 0x2000000000000000LL) != 0) {
              uint64_t v15 = HIBYTE(a1) & 0xF;
            }
            else {
              uint64_t v15 = v9 & 0xFFFFFFFFFFFFLL;
            }
            if (v15 < v8) {
              goto LABEL_162;
            }
            if ((v80 & 0xC) == 8)
            {
              uint64_t v103 = sub_188D37044(v80, v9, a1);
              uint64_t v88 = v24 + (v103 >> 16);
              if (__OFADD__(v24, v103 >> 16)) {
                goto LABEL_163;
              }
            }

            else
            {
              uint64_t v88 = v24 + (v80 >> 16);
              if (__OFADD__(v24, v80 >> 16)) {
                goto LABEL_163;
              }
            }

            if ((v88 & 0x8000000000000000LL) != 0) {
              goto LABEL_164;
            }
            if (v15 < v88) {
              goto LABEL_165;
            }
            if (v88 < v8) {
              goto LABEL_166;
            }
            uint64_t v8 = v14 >> 14;
            uint64_t v89 = 4 * v88;
            uint64_t v15 = (v88 << 16) | 4;
          }

          if (v8 < v89) {
            goto LABEL_167;
          }
          uint64_t v80 = sub_188DF84BC();
          BOOL v14 = v90;
          uint64_t v9 = v91;
          char v24 = v92;
          uint64_t result = swift_bridgeObjectRelease();
          a1 = v24;
          if (__OFADD__(v107++, 1LL)) {
            goto LABEL_168;
          }
        }
      }

  __break(1u);
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.suffix(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t v5 = *(void *)(v2 + 24);
  char v6 = *(_BYTE *)(v2 + 32) & 1;
  if (v6) {
    uint64_t v7 = 0LL;
  }
  else {
    uint64_t v7 = *(void *)(v2 + 24);
  }
  BOOL v8 = __OFADD__(v4, v7);
  uint64_t v9 = v4 + v7;
  if (v8)
  {
    __break(1u);
  }

  else
  {
    uint64_t v10 = result;
    uint64_t result = *(void *)v2;
    uint64_t v11 = *(void *)(v2 + 16);
    if (v9 <= v10)
    {
LABEL_15:
      *(void *)a2 = result;
      *(void *)(a2 + 8) = v4;
      *(void *)(a2 + 16) = v11;
      *(void *)(a2 + 24) = v5;
      *(_BYTE *)(a2 + 32) = v6 & 1;
      return result;
    }

    if ((*(_BYTE *)(v2 + 32) & 1) != 0)
    {
      uint64_t v12 = sub_188DF83F0();
      MEMORY[0x1895D7620](MEMORY[0x189618B28], v12);
      sub_188DF7C88();
      uint64_t result = sub_188DF83E4();
LABEL_14:
      char v6 = 1;
      goto LABEL_15;
    }

    if (v5 >= v10)
    {
      uint64_t v14 = sub_188DF83F0();
      MEMORY[0x1895D7620](MEMORY[0x189618B28], v14);
      sub_188DF7C88();
      uint64_t result = sub_188DF83E4();
      uint64_t v11 = 0LL;
      uint64_t v5 = 0LL;
      goto LABEL_14;
    }

    if (!__OFSUB__(v10, v5))
    {
      uint64_t v13 = sub_188DF83F0();
      MEMORY[0x1895D7620](MEMORY[0x189618B28], v13);
      sub_188DF7C88();
      uint64_t result = sub_188DF83E4();
      char v6 = v5 == 0;
      if (!v5) {
        uint64_t v11 = 0LL;
      }
      goto LABEL_15;
    }
  }

  __break(1u);
  return result;
}

Swift::Void __swiftcall _UnsafeMutableWrappedBuffer.deinitialize()()
{
  uint64_t v2 = *(void *)(v0 + 16);
  sub_188D1BDE0(*v1, v1[1], v2);
  sub_188DF83F0();
  uint64_t v3 = sub_188DF8384();
  uint64_t v4 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v3 - 8) + 32LL);
  v4((uint64_t *)v5, v1 + 2, v3);
  v4(v6, (uint64_t *)v5, v3);
  if ((v7 & 1) == 0) {
    sub_188D1BDE0(v6[0], v6[1], v2);
  }
}

uint64_t _UnsafeMutableWrappedBuffer.initialize<A>(fromPrefixOf:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = sub_188DF8384();
  uint64_t v24 = *(void *)(v6 - 8);
  uint64_t v25 = v6;
  uint64_t v7 = MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v23 - v8;
  uint64_t v10 = *(void *)(v5 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](v7);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = MEMORY[0x1895F8858](v11);
  uint64_t v16 = (char *)&v23 - v15;
  int v30 = 0;
  uint64_t v17 = 0LL;
  uint64_t v18 = *(void *)(v4 + 8);
  uint64_t v26 = v18;
  uint64_t v27 = v4 + 16;
  do
  {
    if (v17 == v18)
    {
      if ((v30 & 1) != 0)
      {
        uint64_t v17 = v18;
        goto LABEL_15;
      }

      sub_188DF83F0();
      uint64_t v19 = sub_188DF8384();
      uint64_t v20 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32LL);
      v20(v31, v27, v19);
      v20(&v32, (uint64_t)v31, v19);
      if ((v34 & 1) != 0 || v33 < 1) {
        return v18;
      }
      uint64_t v17 = 0LL;
      int v30 = 1;
      uint64_t v18 = v33;
    }

    sub_188DF84D4();
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v16, v9, v5);
    uint64_t result = sub_188DF7D9C();
    if (!result) {
      goto LABEL_18;
    }
    uint64_t v21 = result + *(void *)(v10 + 72) * v17;
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v16, v5);
    sub_188D8A1FC((uint64_t)v13, v21, v5);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v16, v5);
  }

  while (!__OFADD__(v17++, 1LL));
  __break(1u);
LABEL_12:
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v9, v25);
  uint64_t v18 = v17;
  if ((v30 & 1) == 0) {
    return v18;
  }
LABEL_15:
  uint64_t v18 = v26 + v17;
  if (!__OFADD__(v26, v17)) {
    return v18;
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.initialize<A>(fromSequencePrefix:)( uint64_t a1, char *a2, void (*a3)(void, void), uint64_t a4, uint64_t a5)
{
  uint64_t v54 = a1;
  uint64_t v52 = (void (*)(char *, uint64_t))a3;
  uint64_t v9 = *((void *)a3 + 2);
  uint64_t v49 = sub_188DF8384();
  uint64_t v48 = *(void *)(v49 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](v49);
  uint64_t v60 = (char *)&v46 - v11;
  uint64_t v12 = *(void *)(v9 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v10);
  uint64_t v58 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v59 = (char *)&v46 - v15;
  uint64_t v57 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v53 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v16 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v61 = (char *)&v46 - v17;
  uint64_t v18 = *(void *)(a4 - 8);
  uint64_t v19 = MEMORY[0x1895F8858](v16);
  uint64_t v56 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v19);
  char v22 = (char *)&v46 - v21;
  sub_188DF83F0();
  uint64_t v23 = sub_188DF8384();
  uint64_t v24 = *(void (**)(char **, _BYTE *, uint64_t))(*(void *)(v23 - 8) + 32LL);
  uint64_t v25 = a2;
  v24((char **)v62, (_BYTE *)(v5 + 16), v23);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v26(v22, (uint64_t)v25, a4);
  uint64_t v51 = v24;
  v24((char **)v66, v62, v23);
  if (v66[16] == 1)
  {
    uint64_t v27 = v5;
    uint64_t v52 = *(void (**)(char *, uint64_t))(v18 + 8);
    v52(v22, a4);
    uint64_t v28 = a4;
  }

  else
  {
    uint64_t v50 = v25;
    uint64_t v27 = v5;
    uint64_t v47 = *(void *)(v5 + 8);
    uint64_t v29 = sub_188DF7FF4();
    int v30 = *(void (**)(char *, uint64_t))(v18 + 8);
    v30(v22, a4);
    uint64_t v28 = a4;
    if (v47 < v29)
    {
      uint64_t v31 = v50;
      v26(v56, (uint64_t)v50, a4);
      uint64_t v32 = v54;
      uint64_t v33 = (void (*)(uint64_t, uint64_t))v30;
      sub_188DF7FDC();
      uint64_t v34 = AssociatedTypeWitness;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v36 = _UnsafeMutableWrappedBuffer.initialize<A>(fromPrefixOf:)( v32,  (uint64_t)v52,  v34,  AssociatedConformanceWitness);
      v33((uint64_t)v31, v28);
      return v36;
    }

    uint64_t v52 = v30;
    uint64_t v25 = v50;
  }

  v26(v56, (uint64_t)v25, v28);
  uint64_t v37 = *(void (**)(char **, _BYTE *, uint64_t))(v27 + 8);
  uint64_t v36 = sub_188DF7FE8();
  if ((void (*)(char **, _BYTE *, uint64_t))v36 != v37
    || (v51(&v63, v62, v23), uint64_t v36 = (uint64_t)v37, (v65 & 1) != 0))
  {
    v52(v25, v28);
    uint64_t v38 = AssociatedTypeWitness;
LABEL_17:
    (*(void (**)(uint64_t, char *, uint64_t))(v53 + 32))(v54, v61, v38);
    return v36;
  }

  uint64_t v39 = v64;
  uint64_t v38 = AssociatedTypeWitness;
  if (v64 < 1)
  {
    uint64_t v39 = 0LL;
LABEL_16:
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v52)(v25, v28);
    uint64_t v36 = (uint64_t)v37 + v39;
    if (!__OFADD__(v37, v39)) {
      goto LABEL_17;
    }
  }

  else
  {
    uint64_t v50 = v25;
    uint64_t v51 = v37;
    uint64_t v56 = v63;
    swift_getAssociatedConformanceWitness();
    uint64_t v40 = 0LL;
    uint64_t v41 = v59;
    while (1)
    {
      uint64_t v42 = v60;
      sub_188DF84D4();
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v41, v42, v9);
      uint64_t result = sub_188DF7D9C();
      if (!result) {
        goto LABEL_22;
      }
      uint64_t v44 = result + *(void *)(v12 + 72) * v40;
      uint64_t v45 = (uint64_t)v58;
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v58, v41, v9);
      sub_188D8A1FC(v45, v44, v9);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v41, v9);
      if (v39 == ++v40)
      {
        uint64_t v25 = v50;
        uint64_t v37 = v51;
        goto LABEL_16;
      }
    }

    v52(v50, v28);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v42, v49);
    uint64_t v36 = (uint64_t)v51 + v40;
    if (!__OFADD__(v51, v40)) {
      goto LABEL_17;
    }
  }

  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.initialize<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v61 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = sub_188DF8798();
  uint64_t v51 = *(void *)(v11 - 8);
  uint64_t v52 = v11;
  MEMORY[0x1895F8858](v11);
  uint64_t v50 = (char *)&v45 - v12;
  uint64_t v60 = a4;
  uint64_t v58 = swift_getAssociatedTypeWitness();
  uint64_t v56 = *(void *)(v58 - 8);
  MEMORY[0x1895F8858](v58);
  uint64_t v57 = (char *)&v45 - v13;
  uint64_t v59 = (void (*)(uint64_t, uint64_t))AssociatedConformanceWitness;
  uint64_t v14 = sub_188DF87A4();
  uint64_t v54 = *(void *)(v14 - 8);
  uint64_t v55 = v14;
  uint64_t v15 = MEMORY[0x1895F8858](v14);
  uint64_t v53 = (char *)&v45 - v16;
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v18 = MEMORY[0x1895F8858](v15);
  uint64_t v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v18);
  char v22 = (char *)&v45 - v21;
  uint64_t v23 = *(void *)(a2 + 16);
  sub_188DF83F0();
  uint64_t v24 = sub_188DF8384();
  uint64_t v25 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v24 - 8) + 32LL);
  v25(v62, v5 + 2, v24);
  v25(v63, v62, v24);
  if ((v64 & 1) != 0)
  {
    uint64_t v26 = v61;
    UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(v61, *v5, v5[1], v23, a3, v60);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(v26, a3);
  }

  uint64_t v28 = v63[0];
  uint64_t v48 = v63[1];
  sub_188DF81C8();
  uint64_t v29 = *v5;
  uint64_t v30 = v5[1];
  uint64_t v49 = v29;
  sub_188DF81F8();
  uint64_t v31 = *(void (**)(char *, uint64_t))(v17 + 8);
  v31(v20, AssociatedTypeWitness);
  uint64_t v32 = (void (*)(uint64_t, uint64_t))*((void *)v59 + 1);
  uint64_t result = sub_188DF7D90();
  if ((result & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }

  uint64_t v46 = v28;
  uint64_t v47 = (uint64_t (*)(char *, uint64_t))v31;
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  uint64_t v34 = v53;
  uint64_t v45 = v33;
  v33(v53, v22, AssociatedTypeWitness);
  uint64_t v59 = v32;
  uint64_t v35 = v55;
  MEMORY[0x1895D7620](MEMORY[0x1896196A8], v55);
  uint64_t v36 = (uint64_t)v57;
  sub_188DF8294();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v34, v35);
  uint64_t v37 = v58;
  uint64_t v38 = swift_getAssociatedConformanceWitness();
  uint64_t v39 = v30;
  uint64_t v40 = v37;
  UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(v36, v49, v39, v23, v37, v38);
  uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
  v41(v36, v37);
  uint64_t result = sub_188DF7D90();
  if ((result & 1) == 0)
  {
LABEL_8:
    __break(1u);
    return result;
  }

  uint64_t v42 = v50;
  v45(v50, v22, AssociatedTypeWitness);
  uint64_t v59 = v41;
  uint64_t v43 = v52;
  MEMORY[0x1895D7620](MEMORY[0x189619690], v52);
  uint64_t v44 = v61;
  sub_188DF8294();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v42, v43);
  UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(v36, v46, v48, v23, v40, v38);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(v44, a3);
  v59(v36, v40);
  return v47(v22, AssociatedTypeWitness);
}

uint64_t _UnsafeMutableWrappedBuffer.assign<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  _UnsafeMutableWrappedBuffer.deinitialize()();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
  return _UnsafeMutableWrappedBuffer.initialize<A>(from:)((uint64_t)v10, a2, a3, a4);
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_188D1D474(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_188D1D494(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_BYTE *)(result + 32) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 33) = v3;
  return result;
}

uint64_t type metadata accessor for _UnsafeWrappedBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _UnsafeWrappedBuffer);
}

uint64_t type metadata accessor for _UnsafeMutableWrappedBuffer( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for _UnsafeMutableWrappedBuffer);
}

uint64_t OrderedDictionary.init()()
{
  uint64_t v0 = OrderedSet.init()();
  sub_188DF80C0();
  sub_188DF86C0();
  return v0;
}

uint64_t OrderedDictionary.init(minimumCapacity:persistent:)( Swift::Int a1, Swift::Bool a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = OrderedSet.init(minimumCapacity:persistent:)(a1, a2, a3, a5);
  sub_188DF80C0();
  sub_188DF86C0();
  sub_188DF8738();
  sub_188DF86CC();
  return v5;
}

uint64_t OrderedDictionary.init<A>(uniqueKeysWithValues:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v55 = a5;
  uint64_t v47 = a1;
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](a1);
  uint64_t v49 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = MEMORY[0x1895F8858](v11);
  uint64_t v15 = (char *)&v43 - v14;
  uint64_t v50 = *(void *)(v16 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v20 = sub_188DF8384();
  uint64_t v53 = *(void *)(v20 - 8);
  uint64_t v54 = v20;
  uint64_t v21 = MEMORY[0x1895F8858](v20);
  uint64_t v52 = (char *)&v43 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = MEMORY[0x1895F8858](v21);
  uint64_t v25 = (char *)&v43 - v24;
  uint64_t v26 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](v23);
  uint64_t v45 = (char *)&v43 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedConformanceWitness = a6;
  uint64_t v28 = v55;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v44 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v56 = (char *)&v43 - v29;
  if (sub_188DF7C28() == a4)
  {
    uint64_t v40 = v47;
    uint64_t v41 = sub_188D1E6DC(v47, a2, a3, a4, v28, AssociatedConformanceWitness);
    uint64_t v42 = v26;
    uint64_t v39 = v41;
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v40, a4);
    return v39;
  }

  else
  {
    uint64_t v30 = OrderedSet.init()();
    uint64_t v48 = v31;
    sub_188DF80C0();
    uint64_t v32 = sub_188DF86C0();
    uint64_t v58 = v30;
    uint64_t v59 = v48;
    uint64_t v48 = &v60;
    uint64_t v60 = v32;
    uint64_t v46 = a4;
    Swift::Int v43 = sub_188DF7FF4();
    type metadata accessor for OrderedDictionary(0LL, a2, a3, v55);
    OrderedDictionary.reserveCapacity(_:)(v43);
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v45, v47, a4);
    sub_188DF7FDC();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    while (1)
    {
      uint64_t v33 = v52;
      sub_188DF84D4();
      (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v25, v33, v54);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48LL))( v25,  1LL,  TupleTypeMetadata2) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v47, v46);
        (*(void (**)(char *, uint64_t))(v44 + 8))(v56, AssociatedTypeWitness);
        return v58;
      }

      uint64_t v34 = v26;
      uint64_t v35 = &v25[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v36 = v50;
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v18, v25, a2);
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v35, a3);
      type metadata accessor for OrderedSet(0LL, a2, v55, v37);
      uint64_t result = OrderedSet._append(_:)((uint64_t)v18);
      if ((result & 1) == 0) {
        break;
      }
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v49, v15, a3);
      sub_188DF8738();
      sub_188DF86FC();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v15, a3);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v18, a2);
      uint64_t v26 = v34;
    }

    __break(1u);
  }

  return result;
}

{
  return sub_188D1E084(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void))sub_188D1EA78);
}

uint64_t OrderedDictionary.init<A>(_uncheckedUniqueKeysWithValues:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_188D1E084(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void))sub_188D1E6DC);
}

uint64_t OrderedDictionary.init<A, B>(uniqueKeys:values:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v31 = a7;
  uint64_t v35 = a9;
  uint64_t v13 = *(void *)(a6 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](a1);
  uint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v20 = (char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = *(void (**)(char *))(v18 + 16);
  uint64_t v34 = v22;
  v21(v20);
  uint64_t v23 = sub_188DF812C();
  uint64_t v32 = v13;
  uint64_t v33 = a2;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a2, a6);
  sub_188DF812C();
  uint64_t v24 = _s19CollectionsInternal4HeapV5countSivg_0();
  uint64_t result = _s19CollectionsInternal4HeapV5countSivg_0();
  if (v24 == result)
  {
    uint64_t v36 = v23;
    uint64_t v26 = sub_188DF8738();
    uint64_t v27 = (uint64_t (*)(char *, uint64_t, uint64_t))MEMORY[0x1895D7620](MEMORY[0x189619588], v26);
    uint64_t v28 = OrderedSet.init<A>(_:)((uint64_t)&v36, a3, v26, v31, v27);
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v29 = _s19CollectionsInternal4HeapV5countSivg_0();
    uint64_t v30 = _s19CollectionsInternal4HeapV5countSivg_0();
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v33, a6);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v34, a5);
    swift_release();
    swift_release();
    uint64_t result = swift_release();
    if (v29 == v30) {
      return v28;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t OrderedDictionary.init<A>(_:uniquingKeysWith:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_188D1DC6C( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_188D792C8);
}

{
  return sub_188D1DC6C( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_188D797A8);
}

uint64_t sub_188D1DC6C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v16 = OrderedSet.init()();
  sub_188DF80C0();
  sub_188DF86C0();
  uint64_t v17 = type metadata accessor for OrderedDictionary(0LL, a4, a5, a7);
  a9(a1, a2, a3, v17, a6, a8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a6 - 8) + 8LL))(a1, a6);
  uint64_t result = v16;
  if (v20)
  {
    swift_release();
    swift_release();
    return swift_release();
  }

  return result;
}

uint64_t OrderedDictionary.init<A>(grouping:by:)( uint64_t *a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13 = sub_188D1EE1C(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (!v9) {
    uint64_t v10 = v13;
  }
  (*(void (**)(uint64_t *, uint64_t))(*(void *)(a6 - 8) + 8LL))(a1, a6);
  return v10;
}

uint64_t OrderedDictionary.init<A>(_grouping:by:)( uint64_t *a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13 = sub_188D1EE1C(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (!v9) {
    uint64_t v10 = v13;
  }
  (*(void (**)(uint64_t *, uint64_t))(*(void *)(a6 - 8) + 8LL))(a1, a6);
  return v10;
}

uint64_t OrderedDictionary.init<A>(grouping:by:)( uint64_t *a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = sub_188DF8120();
  uint64_t v16 = MEMORY[0x1895D7620](MEMORY[0x189618490], v15);
  uint64_t v17 = sub_188D1EE1C(a1, a2, a3, a4, v15, a5, a6, v16, a7);
  if (!v7) {
    a7 = v17;
  }
  (*(void (**)(uint64_t *, uint64_t))(*(void *)(a5 - 8) + 8LL))(a1, a5);
  return a7;
}

uint64_t sub_188D1DFC0(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v7 - v5, a2);
  return sub_188DF82D0();
}

uint64_t OrderedDictionary.init<A>(uncheckedUniqueKeysWithValues:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_188D1E084(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void))sub_188D1F27C);
}

{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t TupleTypeMetadata2;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v26 = a1;
  uint64_t v27 = a5;
  uint64_t v24 = a2;
  uint64_t v9 = sub_188DF860C();
  uint64_t v28 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v22 - v10;
  uint64_t v12 = a3;
  uint64_t v23 = a3;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v13 = sub_188DF8780();
  uint64_t v29 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v15 = (char *)&v22 - v14;
  sub_188DF8048();
  uint64_t v16 = (void *)swift_allocObject();
  uint64_t v17 = v24;
  v16[2] = v24;
  v16[3] = v12;
  uint64_t v18 = v27;
  v16[4] = a4;
  v16[5] = v18;
  v16[6] = a6;
  MEMORY[0x1895D7620](MEMORY[0x189619258], v9);
  sub_188DF8858();
  swift_release();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v9);
  uint64_t v19 = MEMORY[0x1895D7620](MEMORY[0x189619618], v13);
  uint64_t v20 = sub_188D1E6DC((uint64_t)v15, v17, v23, v13, v18, v19);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8LL))(v26, a4);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v15, v13);
  return v20;
}

uint64_t sub_188D1E084( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  uint64_t v9 = a7();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8LL))(a1, a4);
  return v9;
}

uint64_t sub_188D1E2E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v24 = a4;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v26 = TupleTypeMetadata2;
  uint64_t v9 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v13 = (char *)&v23 - v12;
  uint64_t v28 = a4 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  uint64_t v14 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v15 = &v13[v14];
  uint64_t v27 = &v13[v14];
  uint64_t v25 = a1;
  uint64_t v16 = a1 + v14;
  uint64_t v17 = *(void *)(a2 - 8);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v18(v13, a1, a2);
  uint64_t v19 = *(void *)(a3 - 8);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v20(v15, v16, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v24, v13, a2);
  uint64_t v21 = &v11[*(int *)(v26 + 48)];
  v18(v11, v25, a2);
  v20(v21, v16, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v28, v21, a3);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v11, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v27, a3);
}

uint64_t OrderedDictionary.init<A, B>(uncheckedUniqueKeys:values:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v41 = a4;
  uint64_t v42 = a2;
  uint64_t v12 = *(void *)(a6 - 8);
  uint64_t v39 = a9;
  uint64_t v40 = v12;
  uint64_t v13 = MEMORY[0x1895F8858](a1);
  uint64_t v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x1895F8858](v13);
  uint64_t v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v18);
  uint64_t v22 = (char *)&v39 - v21;
  uint64_t v23 = *(void (**)(char *))(v17 + 16);
  Swift::Int v43 = v24;
  v23((char *)&v39 - v21);
  ((void (*)(char *, char *, uint64_t))v23)(v20, v22, a5);
  uint64_t v25 = sub_188DF812C();
  uint64_t v44 = v25;
  uint64_t v26 = sub_188D10D98();
  uint64_t v27 = sub_188DF8738();
  uint64_t v28 = MEMORY[0x1895D7620](MEMORY[0x189619588], v27);
  uint64_t v29 = static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)( (uint64_t)&v44,  0LL,  1,  v26,  v27,  v28,  a7);
  uint64_t v30 = _s19CollectionsInternal4HeapV5countSivg_0();
  uint64_t v31 = 0LL;
  if (v30 >= 16)
  {
    swift_retain();
    uint64_t v31 = v29;
  }

  uint64_t v32 = OrderedSet.init(_uniqueElements:_:)(v25, v31);
  swift_release();
  uint64_t v33 = *(void (**)(char *, uint64_t))(v17 + 8);
  v33(v22, a5);
  uint64_t v34 = v40;
  uint64_t v35 = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v15, v42, a6);
  swift_retain();
  swift_retain();
  sub_188DF812C();
  uint64_t v36 = _s19CollectionsInternal4HeapV5countSivg_0();
  uint64_t v37 = _s19CollectionsInternal4HeapV5countSivg_0();
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v35, a6);
  v33(v43, a5);
  swift_release();
  uint64_t result = swift_release();
  if (v36 == v37) {
    return v32;
  }
  __break(1u);
  return result;
}

uint64_t sub_188D1E6DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v42 = a4;
  uint64_t v43 = a6;
  uint64_t v50 = a5;
  uint64_t AssociatedConformanceWitness = a1;
  uint64_t v9 = *(void *)(a3 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](a1);
  uint64_t v46 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  uint64_t v14 = (char *)&v38 - v13;
  uint64_t v45 = *(void *)(v15 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v19 = sub_188DF8384();
  uint64_t v48 = *(void *)(v19 - 8);
  uint64_t v49 = v19;
  uint64_t v20 = MEMORY[0x1895F8858](v19);
  uint64_t v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = MEMORY[0x1895F8858](v20);
  uint64_t v25 = (char *)&v38 - v24;
  uint64_t v40 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](v23);
  uint64_t v39 = (char *)&v38 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v41 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v51 = (char *)&v38 - v27;
  uint64_t v28 = OrderedSet.init()();
  uint64_t v30 = v29;
  sub_188DF80C0();
  uint64_t v31 = sub_188DF86C0();
  uint64_t v53 = v28;
  uint64_t v54 = v30;
  uint64_t v44 = &v55;
  uint64_t v55 = v31;
  uint64_t v32 = v42;
  Swift::Int v38 = sub_188DF7FF4();
  type metadata accessor for OrderedDictionary(0LL, a2, a3, v50);
  OrderedDictionary.reserveCapacity(_:)(v38);
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v39, AssociatedConformanceWitness, v32);
  sub_188DF7FDC();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  for (uint64_t i = v45; ; (*(void (**)(char *, uint64_t))(i + 8))(v17, a2))
  {
    sub_188DF84D4();
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v25, v22, v49);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48LL))( v25,  1LL,  TupleTypeMetadata2) == 1) {
      break;
    }
    uint64_t v34 = &v25[*(int *)(TupleTypeMetadata2 + 48)];
    (*(void (**)(char *, char *, uint64_t))(i + 32))(v17, v25, a2);
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v34, a3);
    uint64_t v36 = type metadata accessor for OrderedSet(0LL, a2, v50, v35);
    OrderedSet._appendNew(_:)((uint64_t)v17, v36);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v46, v14, a3);
    sub_188DF8738();
    sub_188DF86FC();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, a3);
  }

  (*(void (**)(char *, uint64_t))(v41 + 8))(v51, AssociatedTypeWitness);
  return v53;
}

uint64_t sub_188D1EA78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v35 = a6;
  uint64_t v42 = a5;
  uint64_t AssociatedConformanceWitness = a1;
  uint64_t v9 = *(void *)(a3 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](a1);
  uint64_t v39 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  uint64_t v14 = (char *)&v33 - v13;
  uint64_t v40 = *(void *)(v15 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v19 = sub_188DF8384();
  uint64_t v20 = MEMORY[0x1895F8858](v19);
  uint64_t v22 = (char *)&v33 - v21;
  uint64_t v37 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](v20);
  uint64_t v36 = (char *)&v33 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v33 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v43 = (char *)&v33 - v24;
  uint64_t v25 = OrderedSet.init()();
  uint64_t v27 = v26;
  sub_188DF80C0();
  uint64_t v28 = sub_188DF86C0();
  uint64_t v44 = v25;
  uint64_t v45 = v27;
  uint64_t v46 = v28;
  Swift::Int v34 = sub_188DF7FF4();
  type metadata accessor for OrderedDictionary(0LL, a2, a3, v42);
  OrderedDictionary.reserveCapacity(_:)(v34);
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v36, AssociatedConformanceWitness, a4);
  sub_188DF7FDC();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_188DF84D4();
  uint64_t v37 = *(void *)(*(void *)(TupleTypeMetadata2 - 8) + 48LL);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v37)(v22, 1LL, TupleTypeMetadata2) == 1)
  {
LABEL_5:
    (*(void (**)(char *, uint64_t))(v33 + 8))(v43, AssociatedTypeWitness);
    return v44;
  }

  else
  {
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
    while (1)
    {
      uint64_t v30 = &v22[*(int *)(TupleTypeMetadata2 + 48)];
      v29(v17, v22, a2);
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v30, a3);
      type metadata accessor for OrderedSet(0LL, a2, v42, v31);
      uint64_t result = OrderedSet._append(_:)((uint64_t)v17);
      if ((result & 1) == 0) {
        break;
      }
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v39, v14, a3);
      sub_188DF8738();
      sub_188DF86FC();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, a3);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v17, a2);
      sub_188DF84D4();
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_188D1EE1C( uint64_t *a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = v9;
  char v64 = a2;
  uint64_t v65 = a3;
  uint64_t v74 = a1;
  uint64_t v68 = a9;
  uint64_t v61 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v52 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v63 = v16;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v67 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v19 = (char *)&v51 - v18;
  uint64_t v20 = sub_188DF8384();
  uint64_t v21 = MEMORY[0x1895F8858](v20);
  uint64_t v54 = (char *)&v51 - v22;
  uint64_t v69 = a6;
  uint64_t v23 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](v21);
  uint64_t v25 = (char *)&v51 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v70 = swift_getAssociatedTypeWitness();
  uint64_t v55 = *(void *)(v70 - 8);
  MEMORY[0x1895F8858](v70);
  uint64_t v27 = (char *)&v51 - v26;
  uint64_t v53 = a4;
  uint64_t v28 = OrderedSet.init()();
  uint64_t v66 = v29;
  sub_188DF80C0();
  uint64_t v62 = a5;
  uint64_t v30 = sub_188DF86C0();
  uint64_t v71 = v28;
  uint64_t v72 = v66;
  uint64_t v73 = v30;
  uint64_t v31 = *(void (**)(char *, uint64_t *, uint64_t))(v23 + 16);
  uint64_t v32 = AssociatedTypeWitness;
  uint64_t v33 = v67;
  v31(v25, v74, v69);
  sub_188DF7FDC();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v66 = v27;
  uint64_t v35 = v54;
  uint64_t v36 = AssociatedConformanceWitness;
  sub_188DF84D4();
  uint64_t v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
  if (v37(v35, 1LL, v32) == 1)
  {
LABEL_5:
    (*(void (**)(char *, uint64_t))(v55 + 8))(v66, v70);
    return v71;
  }

  else
  {
    uint64_t v58 = v36;
    uint64_t v60 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
    uint64_t v56 = MEMORY[0x18961AFC8] + 8LL;
    uint64_t v38 = v53;
    uint64_t v39 = (uint64_t)v52;
    uint64_t v59 = v32;
    uint64_t v57 = v37;
    while (1)
    {
      v60(v19, v35, v32);
      uint64_t v40 = v64(v19);
      if (v10) {
        break;
      }
      uint64_t v74 = &v51;
      uint64_t v41 = MEMORY[0x1895F8858](v40);
      uint64_t v42 = v62;
      uint64_t v43 = v63;
      *(&v51 - 6) = v38;
      *(&v51 - 5) = v42;
      uint64_t v44 = v68;
      *(&v51 - 4) = v69;
      *(&v51 - 3) = a7;
      *(&v51 - 2) = v43;
      *(&v51 - _HashNode.ensureUnique(isUnique:)(v1 & 1) = v44;
      MEMORY[0x1895F8858](v41);
      *(&v51 - 8) = v38;
      *(&v51 - 7) = v45;
      *(&v51 - 6) = v46;
      *(&v51 - 5) = a7;
      *(&v51 - 4) = v47;
      *(&v51 - 3) = v48;
      *(&v51 - 2) = (uint64_t)v19;
      uint64_t v49 = type metadata accessor for OrderedDictionary(0LL, v38, v45, a7);
      uint64_t v32 = v59;
      OrderedDictionary.updateValue<A>(forKey:default:with:)( v39,  (void (*)(void))sub_188D1F2A0,  (uint64_t)(&v51 - 8),  (uint64_t (*)(unint64_t))sub_188D1F2C8,  (uint64_t)(&v51 - 10),  v49);
      uint64_t v10 = 0LL;
      uint64_t v33 = v67;
      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v39, v38);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v19, v32);
      sub_188DF84D4();
      if (v57(v35, 1LL, v32) == 1) {
        goto LABEL_5;
      }
    }

    (*(void (**)(char *, uint64_t))(v55 + 8))(v66, v70);
    swift_release();
    swift_release();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v19, v32);
  }

uint64_t sub_188D1F280()
{
  return swift_deallocObject();
}

uint64_t sub_188D1F290@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_188D1E2E4(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_188D1F2A0()
{
  return sub_188DF8330();
}

uint64_t sub_188D1F2C8(uint64_t a1)
{
  return sub_188D1DFC0(a1, *(void *)(v1 + 64));
}

uint64_t TreeSet.subtracting(_:)( uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return TreeSet._subtracting<A>(_:)(a1, a2, a4, a5, a6, a7, MEMORY[0x18961AFC8] + 8LL, a8);
}

uint64_t TreeSet._subtracting<A>(_:)( uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = _HashNode.subtracting<A>(_:_:)(0, a1, a2, a3, a4, a6, MEMORY[0x18961AFC8] + 8LL, a7, a8);
  uint64_t v17 = v16;
  swift_release();
  if (v15)
  {
    swift_release();
    return TreeSet.init(_new:)(v15, v17, a6, a8);
  }

  return a3;
}

uint64_t TreeSet.subtracting<A>(_:)( uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return TreeSet._subtracting<A>(_:)(a1, a2, a4, a5, a6, a7, a8, a9);
}

uint64_t TreeSet.subtracting<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t AssociatedConformanceWitness = a4;
  uint64_t v61 = a2;
  uint64_t v62 = a3;
  uint64_t v59 = a1;
  char v64 = (uint64_t (*)(char *, uint64_t, uint64_t))(MEMORY[0x18961AFC8] + 8LL);
  swift_getTupleTypeMetadata2();
  sub_188DF8384();
  swift_getTupleTypeMetadata2();
  uint64_t v12 = sub_188DF8384();
  uint64_t v53 = *(void *)(v12 - 8);
  uint64_t v54 = v12;
  MEMORY[0x1895F8858](v12);
  uint64_t v52 = (char *)&v50 - v13;
  uint64_t v57 = a8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v51 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v66 = (char *)&v50 - v14;
  uint64_t v63 = (void (*)(char *, char *, uint64_t))sub_188DF8384();
  uint64_t v56 = *((void *)v63 - 1);
  uint64_t v15 = MEMORY[0x1895F8858](v63);
  uint64_t v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = MEMORY[0x1895F8858](v15);
  uint64_t v20 = (char *)&v50 - v19;
  uint64_t v21 = *(void *)(a5 - 8);
  uint64_t v22 = MEMORY[0x1895F8858](v18);
  uint64_t v24 = (char *)&v50 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = MEMORY[0x1895F8858](v22);
  uint64_t v58 = (char *)&v50 - v26;
  uint64_t v27 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](v25);
  uint64_t v29 = (char *)&v50 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = type metadata accessor for TreeSet(0LL, a5, a7, v30);
  if (v31 == a6)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v29, v59, a6);
    swift_dynamicCast();
    uint64_t v33 = TreeSet._subtracting<A>(_:)(v67, v68, v61, v62, AssociatedConformanceWitness, a5, (uint64_t)v64, a7);
    goto LABEL_5;
  }

  uint64_t v55 = a7;
  uint64_t v67 = v61;
  uint64_t v68 = (void (*)(uint64_t, uint64_t, uint64_t))v62;
  uint64_t v69 = AssociatedConformanceWitness;
  MEMORY[0x1895D7620](&protocol conformance descriptor for TreeSet<A>, v31);
  sub_188DF8264();
  uint64_t v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  if (v32(v20, 1LL, a5) == 1)
  {
    (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v56 + 8))(v20, v63);
    uint64_t v33 = TreeSet.init()(a5, v55);
LABEL_5:
    swift_release();
    return v33;
  }

  uint64_t v35 = v58;
  uint64_t v63 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
  char v64 = (uint64_t (*)(char *, uint64_t, uint64_t))v32;
  v63(v58, v20, a5);
  uint64_t v36 = v59;
  uint64_t v37 = v57;
  uint64_t v38 = sub_188DF8000();
  if (v38 == 2)
  {
    uint64_t v67 = v61;
    uint64_t v68 = (void (*)(uint64_t, uint64_t, uint64_t))v62;
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v29, v36, a6);
    swift_retain();
    sub_188DF7FDC();
    uint64_t v39 = AssociatedTypeWitness;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    sub_188DF84D4();
    int v40 = v64(v17, 1LL, a5);
    uint64_t v42 = v54;
    uint64_t v41 = v55;
    uint64_t v62 = v21;
    uint64_t v43 = (uint64_t)v52;
    uint64_t v44 = v53;
    if (v40 != 1)
    {
      uint64_t v45 = MEMORY[0x18961AFC8] + 8LL;
      do
      {
        v63(v24, v17, a5);
        uint64_t v46 = sub_188DF5A9C();
        uint64_t v47 = (void *)type metadata accessor for _HashNode(0LL, a5, v45, v41);
        unint64_t v48 = v46;
        uint64_t v39 = AssociatedTypeWitness;
        _HashNode.remove(_:_:_:)(0LL, (uint64_t)v24, v48, v47, v43);
        (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v42);
        (*(void (**)(char *, uint64_t))(v62 + 8))(v24, a5);
        sub_188DF84D4();
      }

      while (v64(v17, 1LL, a5) != 1);
    }

    swift_release();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v66, v39);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v58, a5);
    return TreeSet.init(_new:)(v67, (uint64_t)v68, a5, v41);
  }

  else
  {
    MEMORY[0x1895F8858](v38);
    *(&v50 - 6) = a5;
    *(&v50 - 5) = a6;
    uint64_t v49 = v55;
    *(&v50 - 4) = v55;
    *(&v50 - 3) = v37;
    *(&v50 - 2) = v36;
    uint64_t v33 = TreeSet.filter(_:)( (uint64_t)sub_188D1F9A4,  (uint64_t)(&v50 - 8),  v61,  v62,  AssociatedConformanceWitness,  a5,  v49);
    swift_release();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v35, a5);
  }

  return v33;
}

BOOL sub_188D1F9A4()
{
  return (sub_188DF8084() & 1) == 0;
}

BOOL static BitArray.== infix(_:_:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return a2 == a4 && _s19CollectionsInternal6BitSetV2eeoiySbAC_ACtFZ_0(a1, a3);
}

BOOL _s19CollectionsInternal6BitSetV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  if (a1[4] != a2[4]) {
    return 0LL;
  }
  char v3 = a1 + 5;
  uint64_t v4 = a2 + 5;
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    uint64_t v8 = *v3++;
    uint64_t v7 = v8;
    uint64_t v9 = *v4++;
    --v5;
  }

  while (v7 == v9);
  return result;
}

BOOL sub_188D1FA60(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) == *(void *)(a2 + 8)
      && _s19CollectionsInternal6BitSetV2eeoiySbAC_ACtFZ_0(*(void **)a1, *(void **)a2);
}

uint64_t BitArray.description.getter(uint64_t result, uint64_t a2)
{
  if (a2 < 0)
  {
    __break(1u);
  }

  else if (a2)
  {
    MEMORY[0x1895F8858](result);
    return sub_188DF7E68();
  }

  else
  {
    return 0LL;
  }

  return result;
}

uint64_t sub_188D1FB04()
{
  uint64_t result = *(void *)(v0 + 8);
  if (result < 0)
  {
    __break(1u);
  }

  else if (result)
  {
    MEMORY[0x1895F8858](result);
    return sub_188DF7E68();
  }

  return result;
}

uint64_t BitArray.debugDescription.getter(uint64_t result, uint64_t a2)
{
  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    if (a2)
    {
      MEMORY[0x1895F8858](result);
      sub_188DF7E68();
    }

    sub_188DF7EE0();
    swift_bridgeObjectRelease();
    sub_188DF7EE0();
    return 0x7961727241746942LL;
  }

  return result;
}

uint64_t sub_188D1FC44()
{
  return BitArray.debugDescription.getter(*v0, v0[1]);
}

uint64_t sub_188D1FC4C(uint64_t a1)
{
  return sub_188D1FC60(a1);
}

uint64_t sub_188D1FC60(uint64_t a1)
{
  uint64_t result = *(void *)(v1 + 24);
  if (result < 0)
  {
    __break(1u);
  }

  else if (result)
  {
    unint64_t v4 = 0LL;
    uint64_t v5 = *(void *)(v1 + 16) + 32LL;
    uint64_t v6 = a1 - 1;
    do
    {
      uint64_t v7 = *(void *)(v5 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4;
      ++v4;
      if ((v7 & 1) != 0) {
        char v8 = 49;
      }
      else {
        char v8 = 48;
      }
      *(_BYTE *)(v6 + result) = v8;
      --v6;
    }

    while (result != v4);
  }

  return result;
}

uint64_t TreeSet.isEqualSet(to:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return _HashNode.isEqualSet<A>(to:by:)( a1,  a2,  (uint64_t)sub_188D1FD00,  0LL,  a4,  a5,  a7,  MEMORY[0x18961AFC8] + 8LL,  MEMORY[0x18961AFC8] + 8LL,  a8) & 1;
}

uint64_t sub_188D1FD00()
{
  return 1LL;
}

uint64_t TreeSet.isEqualSet<A>(to:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = a7;
  uint64_t v12 = a8;
  uint64_t v13 = a9;
  return _HashNode.isEqualSet<A>(to:by:)( a1,  a2,  (uint64_t)sub_188D1FD00,  (uint64_t)v10,  a4,  a5,  a7,  MEMORY[0x18961AFC8] + 8LL,  a8,  a9) & 1;
}

uint64_t TreeSet.isEqualSet<A>(to:)( void (*a1)(void, void, void), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, char *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v96 = a1;
  uint64_t v92 = *(void **)(a5 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](a1);
  uint64_t v85 = (char *)&v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = MEMORY[0x1895F8858](v15);
  uint64_t v88 = (char *)&v84 - v18;
  MEMORY[0x1895F8858](v17);
  uint64_t v94 = (char *)&v84 - v19;
  uint64_t v20 = sub_188DF8384();
  uint64_t v86 = *(void *)(v20 - 8);
  uint64_t v87 = v20;
  uint64_t v21 = MEMORY[0x1895F8858](v20);
  uint64_t v84 = (char *)&v84 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = MEMORY[0x1895F8858](v21);
  uint64_t v91 = (char *)&v84 - v24;
  MEMORY[0x1895F8858](v23);
  uint64_t v26 = (char *)&v84 - v25;
  uint64_t v93 = a8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v89 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v27 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v98 = (char *)&v84 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = MEMORY[0x1895F8858](v27);
  uint64_t v95 = (char *)&v84 - v30;
  uint64_t v31 = *((void *)a6 - 1);
  uint64_t v32 = MEMORY[0x1895F8858](v29);
  Swift::Int v34 = (char *)&v84 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v32);
  uint64_t v36 = (char *)&v84 - v35;
  if ((char *)type metadata accessor for TreeSet(0LL, a5, a7, v37) == a6)
  {
    (*(void (**)(char *, void, char *))(v31 + 16))(v36, v96, a6);
    swift_dynamicCast();
    char v41 = _HashNode.isEqualSet<A>(to:by:)( v101,  v102,  (uint64_t)sub_188D1FD00,  0LL,  a2,  a3,  a5,  MEMORY[0x18961AFC8] + 8LL,  MEMORY[0x18961AFC8] + 8LL,  a7);
    swift_release();
    return v41 & 1;
  }

  uint64_t v38 = a3;
  uint64_t v39 = v96;
  uint64_t v97 = a2;
  uint64_t v99 = v38;
  BOOL v40 = TreeSet.isEmpty.getter(a2, v38);
  if (v40)
  {
    MEMORY[0x1895F8858](v40);
    *(&v84 - 4) = (char *)a5;
    *(&v84 - 3) = a6;
    uint64_t v82 = a7;
    uint64_t v83 = v93;
    char v41 = sub_188DF8018();
    return v41 & 1;
  }

  uint64_t v42 = (uint64_t)a4;
  uint64_t v90 = a7;
  uint64_t v43 = *(void (**)(char *, void, char *))(v31 + 16);
  v43(v34, v39, a6);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A0C8);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v101);
    uint64_t v44 = sub_188DF7FF4();
    uint64_t v45 = TreeSet.count.getter(v97, v99);
    if (v45 >= v44)
    {
      uint64_t v98 = (char *)v45;
      v43(v36, v39, a6);
      sub_188DF7FDC();
      swift_getAssociatedConformanceWitness();
      sub_188DF84D4();
      uint64_t v46 = v92;
      uint64_t v47 = (unsigned int (*)(char *, uint64_t, uint64_t))v92[6];
      if (v47(v26, 1LL, a5) == 1)
      {
        unint64_t v48 = 0LL;
LABEL_31:
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v89 + 8))(v95, AssociatedTypeWitness);
        if ((uint64_t)v98 >= (uint64_t)v48)
        {
          char v41 = v48 == v98;
          return v41 & 1;
        }

        __break(1u);
        goto LABEL_41;
      }

      unint64_t v48 = 0LL;
      uint64_t v78 = (void (*)(uint64_t, char *, uint64_t))v46[4];
      uint64_t v79 = (uint64_t)v94;
      while (1)
      {
        v78(v79, v26, a5);
        BOOL v80 = TreeSet.contains(_:)(v79, v97, v99, v42, a5, v90);
        ((void (*)(uint64_t, uint64_t))v46[1])(v79, a5);
        if (!v80) {
          break;
        }
        ++v48;
        sub_188DF84D4();
        if (v47(v26, 1LL, a5) == 1) {
          goto LABEL_31;
        }
      }

      (*(void (**)(char *, uint64_t))(v89 + 8))(v95, AssociatedTypeWitness);
    }

LABEL_27:
    (*(void (**)(char *, uint64_t))(v89 + 8))(v98, AssociatedTypeWitness);
LABEL_35:
    swift_release();
    goto LABEL_36;
  }

  uint64_t v59 = v54;
  uint64_t v60 = v92;
  uint64_t v96 = (void (*)(void, void, void))v92[4];
  v96(v88, v59, a5);
  uint64_t v61 = sub_188DF5A9C();
  uint64_t result = _HashNode.containsKey(_:_:_:)(0LL, v57, v61, v97, v99, a5, v50, v49);
  if ((result & 1) == 0)
  {
    uint64_t v66 = (void (*)(uint64_t, uint64_t))v60[1];
LABEL_34:
    uint64_t v81 = v89;
    v66(v57, a5);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v98, AssociatedTypeWitness);
    goto LABEL_35;
  }

  if (v51)
  {
    uint64_t v63 = MEMORY[0x18961AFC8];
    char v64 = (void *)type metadata accessor for _HashNode(0LL, a5, MEMORY[0x18961AFC8] + 8LL, v49);
    uint64_t result = _HashNode.insert(_:_:_:)(0, v57, v65, v61, v64);
    if (!v101)
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }

    uint64_t v66 = (void (*)(uint64_t, uint64_t))v92[1];
    v66(v57, a5);
    uint64_t v67 = v102;
    if (v67 == TreeSet.count.getter(v97, v99))
    {
LABEL_23:
      swift_release();
      uint64_t v101 = 0LL;
      uint64_t v102 = 0LL;
      uint64_t v58 = (uint64_t)v95;
      goto LABEL_24;
    }

    uint64_t v68 = v63 + 8;
    while (1)
    {
      uint64_t v69 = v91;
      sub_188DF84D4();
      uint64_t v54 = v69;
      v96(v57, v69, a5);
      uint64_t v70 = sub_188DF5A9C();
      if (!_HashNode.containsKey(_:_:_:)(0LL, v57, v70, v97, v99, a5, v68, v49)) {
        goto LABEL_34;
      }
      uint64_t result = _HashNode.insert(_:_:_:)(0, v57, v71, v70, v64);
      if (!v101) {
        goto LABEL_41;
      }
      v66(v57, a5);
      uint64_t v72 = v102;
      if (v72 == TreeSet.count.getter(v97, v99)) {
        goto LABEL_23;
      }
    }
  }

  uint64_t v10 = MEMORY[0x1895D67BC](15LL);
LABEL_13:
  uint64_t v11 = sub_188D0F098(v10, v4, v6);
  uint64_t v12 = sub_188D82630( v11,  v4,  v6,  ((unint64_t)*(unsigned __int8 *)(v2 + 21) << 40) | ((unint64_t)*(unsigned int *)(v2 + 17) << 8) | v5);
  uint64_t v13 = v12;
  uint64_t v50 = v12 >> 8;
  uint64_t v51 = v12 >> 16;
  uint64_t v52 = v12 >> 24;
  uint64_t v53 = HIDWORD(v12);
  uint64_t v54 = v12 >> 40;
  uint64_t v55 = HIWORD(v12);
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_188D0EFD0(v11, v4, v6);
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  swift_bridgeObjectRelease();
  uint64_t v21 = MEMORY[0x1895D6684](v14, v16, v18, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_188DF7FD0();
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  swift_bridgeObjectRelease();
  uint64_t v29 = MEMORY[0x1895D6684](v22, v24, v26, v28);
  uint64_t v31 = v30;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)uint64_t v2 = v29;
  *(void *)(v2 + 8) = v31;
  *(_BYTE *)(v2 + 16) = v13;
  *(_BYTE *)(v2 + 17) = v50;
  *(_BYTE *)(v2 + 18) = v51;
  *(_BYTE *)(v2 + 19) = v52;
  *(_BYTE *)(v2 + 20) = v53;
  *(_BYTE *)(v2 + 2_HashNode.ensureUnique(isUnique:)(v1 & 1) = v54;
  uint64_t v58 = v21;
  if ((v13 & 0xFCu) < 0x7CuLL)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  sub_188D8C938(255LL, (unint64_t)v59);
  uint64_t result = sub_188D2DD1C((uint64_t)v59, (uint64_t)&v60);
  uint64_t v32 = v63;
  if (v63)
  {
    uint64_t v33 = v60;
    Swift::Int v34 = v61;
    uint64_t v35 = v62;
    uint64_t v36 = v64;
    int v56 = v65;
    uint64_t v37 = v66;
    uint64_t result = sub_188D82544(v60, v61, v62, v63);
    if (result <= 255)
    {
      uint64_t v38 = sub_188D82544(v33, v34, v35, v32);
      uint64_t v39 = sub_188DF7F7C();
      BOOL v40 = sub_188D62BEC(v33, v34, v35, v32);
      char v41 = sub_188D38104(v38, v39, v40, v36, v56, v37);
      sub_188D37FDC(v41 & 0xFFFFFFFFFFFFLL);
      sub_188D2DC60();
      sub_188DF7EC8();
      uint64_t result = sub_188D2DD64((uint64_t)v59);
      if (!((*(void *)(a1 + 8) ^ *(void *)(a1 + 32)) >> 14))
      {
        goto LABEL_33;
      }

  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
}

  if (!v29[v26]) {
    goto LABEL_35;
  }
  uint64_t v33 = (v29[v26] - 1) << (8 * v26);
  if ((_DWORD)v26)
  {
    else {
      Swift::Int v34 = 4;
    }
    __asm { BR              X11 }
  }

  if (v33 == -1)
  {
LABEL_35:
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v20 + 16))(v28, v29, v38);
    v28[v26] = 0;
    goto LABEL_39;
  }

  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

    if ((uint64_t)v9 < a4)
    {
      uint64_t v10 = -1LL;
      char v8 = v7 >> 6;
      return (a3[v8] & ((-1LL << v7) ^ v10)) == 0;
    }

    return 1LL;
  }

  return 0LL;
}

  __break(1u);
LABEL_28:
  char v3 = sub_188CF73DC((uint64_t)v3);
  *unint64_t v4 = v3;
LABEL_10:
  uint64_t v20 = *((void *)v3 + 2);
  uint64_t v42 = v3 + 32;
  uint64_t v43 = v20;
  uint64_t v44 = Description;
  sub_188DF548C(a2, v5, (uint64_t)(v3 + 32), v20, v8);
  *unint64_t v4 = v3;
  if (a3 == &type metadata for BitArray)
  {
    char v8 = v37;
    (*(void (**)(char *, uint64_t, ValueMetadata *))(v38 + 16))(v15, v37, &type metadata for BitArray);
    swift_dynamicCast();
    uint64_t v22 = v40;
    if ((v40 & 0x8000000000000000LL) == 0)
    {
      uint64_t v12 = v39 + 32;
      uint64_t v15 = (char *)*((void *)v39 + 2);
      uint64_t v5 = (unint64_t)*v4;
      swift_bridgeObjectRetain();
      uint64_t v25 = swift_isUniquelyReferenced_nonNull_native();
      *unint64_t v4 = (char *)v5;
      if ((v25 & 1) != 0)
      {
LABEL_17:
        uint64_t v26 = *(void *)(v5 + 16);
        uint64_t v27 = v4[1];
        uint64_t v42 = (char *)(v5 + 32);
        uint64_t v43 = v26;
        uint64_t v44 = (unint64_t)v27;
        sub_188DF548C(0LL, v22, (uint64_t)v12, (uint64_t)v15, a2);
        *unint64_t v4 = (char *)v5;
        swift_bridgeObjectRelease_n();
        return (*(uint64_t (**)(int64_t, ValueMetadata *))(v38 + 8))(v8, &type metadata for BitArray);
      }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  swift_bridgeObjectRelease();
  uint64_t v26 = v53 - (void)a5 + v54;
  uint64_t v65 = v8;
  uint64_t v66 = v14;
  uint64_t v27 = v55;
  uint64_t v53 = v9;
  uint64_t v54 = v6;
  while (1)
  {
    LODWORD(v14) = *(unsigned __int8 *)(v27 + 18);
    uint64_t v5 = *(unsigned __int16 *)(v27 + 16);
    swift_unknownObjectRetain_n();
    sub_188D087F8(v9);
    if (v61 >= (((-15LL << ((4 * v14 + 8) & 0x3C)) - 1) & v14 | (v5 << ((4 * v14 + 8) & 0x3C))))
    {
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
      goto LABEL_76;
    }

    if (v60)
    {
      uint64_t v28 = (4 * *(_BYTE *)(v60 + 18) + 8) & 0x3C;
      uint64_t v29 = ((v61 >> v28) & 0xF) + 1;
      if (v29 < *(unsigned __int16 *)(v60 + 16))
      {
        uint64_t v30 = (v29 << v28) | ((-15LL << v28) - 1) & v61;
        uint64_t v68 = v30;
        sub_188D087F8(v9);
        goto LABEL_40;
      }
    }

    uint64_t v31 = *(unsigned __int8 *)(v27 + 18);
    uint64_t v32 = (4 * v31 + 8) & 0x3C;
    v62[0] = (v61 >> v32) & 0xF;
    if (v31)
    {
      sub_188D07F48(v9);
      uint64_t v33 = sub_188D800A4(v55 + 24, v62, (uint64_t)&v67, v27, v31);
      sub_188D087F8(v9);
      if ((v33 & 1) != 0)
      {
        sub_188D087F8(v9);
        uint64_t v30 = v68;
        goto LABEL_40;
      }

      uint64_t v35 = *(unsigned __int8 *)(v27 + 18);
    }

    else
    {
      Swift::Int v34 = ((v61 >> v32) & 0xF) + 1;
      if (v34 < *(unsigned __int16 *)(v27 + 16))
      {
        uint64_t v30 = (v34 << v32) | ((-15LL << v32) - 1) & v61;
        uint64_t v68 = v30;
        sub_188D087F8(v9);
        uint64_t v69 = v27;
        goto LABEL_40;
      }

      uint64_t v35 = 0;
    }

    uint64_t v36 = *(unsigned __int16 *)(v27 + 16);
    uint64_t v37 = *(_BYTE *)(v27 + 18);
    swift_unknownObjectRetain();
    sub_188D087F8(v9);
    sub_188D087F8(v9);
    uint64_t v30 = ((-15LL << ((4 * v37 + 8) & 0x3C)) - 1) & v35 | (unint64_t)(v36 << ((4 * v37 + 8) & 0x3C));
    uint64_t v67 = v6;
    uint64_t v68 = v30;
    uint64_t v69 = 0LL;
LABEL_40:
    uint64_t v70 = v27;
    uint64_t v71 = v58;
    uint64_t v72 = v57;
    uint64_t v73 = v56;
    uint64_t v74 = v59;
    LODWORD(v14) = *(unsigned __int8 *)(v27 + 18);
    uint64_t v5 = *(unsigned __int16 *)(v27 + 16);
    swift_unknownObjectRetain_n();
    sub_188D087F8(v9);
    uint64_t result = sub_188D087F8(v9);
    if (v30 >= (((-15LL << ((4 * v14 + 8) & 0x3C)) - 1) & v14 | (v5 << ((4 * v14 + 8) & 0x3C))))
    {
      uint64_t v7 = 0LL;
      char v8 = v65;
      uint64_t v14 = v66;
      if ((v66 & 0x2000000000000000LL) != 0) {
        goto LABEL_68;
      }
LABEL_64:
      if ((v8 & 0xFFFFFFFFFFFFLL) == 0) {
        goto LABEL_85;
      }
      if ((v8 & 0x1000000000000000LL) == 0)
      {
        char v8 = sub_188DDD440();
        uint64_t v49 = v48;
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v14 = v49;
      }

      goto LABEL_69;
    }

    if (v67 != v6) {
      goto LABEL_73;
    }
    uint64_t v60 = v69;
    if (v69)
    {
      uint64_t v38 = v69 + 24 * ((v30 >> ((4 * *(_BYTE *)(v69 + 18) + 8) & 0x3C)) & 0xF);
      uint64_t v39 = *(void *)(v38 + 24);
      uint64_t v14 = *(void *)(v38 + 32);
      uint64_t v9 = *(unsigned __int8 *)(v38 + 40);
      uint64_t v7 = *(unsigned __int8 *)(v38 + 44);
      swift_bridgeObjectRetain();
    }

    else
    {
      swift_unknownObjectRetain();
      uint64_t v5 = (unint64_t)&v70;
      sub_188D36E50(v30, (uint64_t)v62);
      sub_188D087F8(v9);
      uint64_t v39 = v62[0];
      uint64_t v14 = v62[1];
      uint64_t v9 = v63;
      uint64_t v7 = v64;
    }

    uint64_t v61 = v30;
    uint64_t v52 = HIBYTE(v14) & 0xF;
    if ((v14 & 0x1000000000000000LL) != 0)
    {
      char v41 = v26;
      MEMORY[0x1895D67BC](15LL, v7, v39, v14);
    }

    else
    {
      BOOL v40 = v39 & 0xFFFFFFFFFFFFLL;
      if ((v14 & 0x2000000000000000LL) != 0) {
        BOOL v40 = HIBYTE(v14) & 0xF;
      }
      if (v40 < v7) {
        goto LABEL_74;
      }
      char v41 = v26;
    }

    swift_bridgeObjectRetain();
    sub_188DF7FD0();
    swift_bridgeObjectRelease();
    uint64_t v5 = (unint64_t)&v65;
    sub_188DF7EBC();
    swift_bridgeObjectRelease();
    if (v7 < v9) {
      break;
    }
    swift_bridgeObjectRelease();
    uint64_t v42 = __OFADD__(v41, v9);
    uint64_t v26 = v41 + v9;
    uint64_t v9 = v53;
    uint64_t v6 = v54;
    uint64_t v27 = v55;
    if (v42) {
      goto LABEL_75;
    }
  }

  uint64_t v26 = v41;
  if ((v14 & 0x1000000000000000LL) != 0)
  {
    uint64_t v50 = MEMORY[0x1895D67BC](15LL, v7, v39, v14);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v7 = v50 >> 16;
    char v8 = v65;
    uint64_t v14 = v66;
    if ((v66 & 0x2000000000000000LL) != 0) {
      goto LABEL_68;
    }
    goto LABEL_64;
  }

  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v47 = v39 & 0xFFFFFFFFFFFFLL;
  if ((v14 & 0x2000000000000000LL) != 0) {
    uint64_t v47 = HIBYTE(v14) & 0xF;
  }
  if (v47 < v7) {
    goto LABEL_87;
  }
  char v8 = v65;
  uint64_t v14 = v66;
  if ((v66 & 0x2000000000000000LL) == 0) {
    goto LABEL_64;
  }
LABEL_68:
  if ((v14 & 0xF00000000000000LL) == 0) {
    goto LABEL_86;
  }
LABEL_69:
  if (__OFADD__(v26, v7)) {
    goto LABEL_83;
  }
  uint64_t v45 = v68;
  uint64_t v46 = v69;
  uint64_t v6 = v67;
  uint64_t v44 = v7 | ((v26 + v7) << 11);
LABEL_71:
  *uint64_t v51 = v8;
  v51[1] = v14;
  v51[2] = v44 | 0x300;
  v51[3] = v6;
  v51[4] = v45;
  v51[5] = v46;
  return result;
}

  __break(1u);
  return result;
}

    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    uint64_t v12 = sub_188DF7F04();
LABEL_29:
    *(_BYTE *)(a2 + sub_188D08238((uint64_t)v10, v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }

    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_188D2063C()
{
  return 0LL;
}

uint64_t static _HashSlot.zero.getter()
{
  return 0LL;
}

uint64_t _HashSlot.value.getter(uint64_t result)
{
  return result;
}

BOOL static _HashSlot.== infix(_:_:)(int a1, int a2)
{
  return a1 == a2;
}

uint64_t _HashSlot._value.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_HashSlot._value.modify())()
{
  return nullsub_1;
}

BOOL sub_188D20684(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL static _HashSlot.< infix(_:_:)(unsigned int a1, unsigned int a2)
{
  return a1 < a2;
}

BOOL sub_188D206A4(_DWORD *a1, _DWORD *a2)
{
  return *a1 < *a2;
}

BOOL sub_188D206B8(_DWORD *a1, _DWORD *a2)
{
  return *a2 >= *a1;
}

BOOL sub_188D206CC(_DWORD *a1, _DWORD *a2)
{
  return *a1 >= *a2;
}

BOOL sub_188D206E0(_DWORD *a1, _DWORD *a2)
{
  return *a2 < *a1;
}

uint64_t _HashSlot.hash(into:)()
{
  return sub_188DF8A74();
}

uint64_t _HashSlot.hashValue.getter()
{
  return sub_188DF8A98();
}

uint64_t sub_188D2075C()
{
  return sub_188DF8A98();
}

uint64_t sub_188D207A0()
{
  return sub_188DF8A74();
}

uint64_t sub_188D207C8()
{
  return sub_188DF8A98();
}

uint64_t _HashSlot.description.getter()
{
  return sub_188DF88D0();
}

uint64_t sub_188D20844()
{
  return sub_188DF88D0();
}

uint64_t _HashSlot.advanced(by:)(int a1, int a2)
{
  return (a1 + a2);
}

uint64_t _HashSlot.distance(to:)(unsigned int a1, unsigned int a2)
{
  if (a2 >= a1) {
    return -(uint64_t)(a2 - a1);
  }
  else {
    return a1 - a2;
  }
}

_DWORD *sub_188D2089C@<X0>(_DWORD *result@<X0>, uint64_t *a2@<X8>)
{
  int v3 = *v2;
  else {
    uint64_t v4 = (*result - v3);
  }
  *a2 = v4;
  return result;
}

_DWORD *sub_188D208B8@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *v2 + *result;
  return result;
}

uint64_t sub_188D208CC(_DWORD *a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, _DWORD *a6)
{
  *a1 = *a4 + *a6;
  return 0LL;
}

uint64_t _HashSlot.next()(int a1)
{
  return (a1 + 1);
}

uint64_t _HashSlot.previous()(int a1)
{
  return (a1 - 1);
}

unint64_t sub_188D208FC()
{
  unint64_t result = qword_18C74A208;
  if (!qword_18C74A208)
  {
    unint64_t result = MEMORY[0x1895D7620](&protocol conformance descriptor for _HashSlot, &type metadata for _HashSlot);
    atomic_store(result, (unint64_t *)&qword_18C74A208);
  }

  return result;
}

unint64_t sub_188D20944()
{
  unint64_t result = qword_18C74A210;
  if (!qword_18C74A210)
  {
    unint64_t result = MEMORY[0x1895D7620](&protocol conformance descriptor for _HashSlot, &type metadata for _HashSlot);
    atomic_store(result, (unint64_t *)&qword_18C74A210);
  }

  return result;
}

uint64_t sub_188D20988()
{
  return MEMORY[0x189618758];
}

uint64_t sub_188D20994()
{
  return MEMORY[0x189618790];
}

ValueMetadata *type metadata accessor for _HashSlot()
{
  return &type metadata for _HashSlot;
}

uint64_t _UnsafeBitSet.Index.init(_:)(uint64_t result)
{
  if (result < 0) {
    __break(1u);
  }
  return result;
}

unint64_t _UnsafeBitSet.Index.endSplit.getter(unint64_t a1)
{
  return (a1 >> 6) - ((a1 > 0x3F) & ((a1 & 0x3F) == 0));
}

uint64_t _UnsafeBitSet.Index.bit.getter(char a1)
{
  return a1 & 0x3F;
}

uint64_t _UnsafeBitSet.Index.value.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_UnsafeBitSet.Index.value.modify())()
{
  return nullsub_1;
}

uint64_t _UnsafeBitSet.Index.init(word:bit:)(uint64_t result, uint64_t a2)
{
  if (((result << 6) & 0x8000000000000000LL) == 0) {
    return (result << 6) + a2;
  }
  __break(1u);
  return result;
}

uint64_t _UnsafeBitSet.Index.hashValue.getter()
{
  return sub_188DF8A98();
}

BOOL sub_188D20A68(void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL static _UnsafeBitSet.Index.< infix(_:_:)(unint64_t a1, unint64_t a2)
{
  return a1 < a2;
}

BOOL sub_188D20A88(void *a1, void *a2)
{
  return *a2 >= *a1;
}

BOOL sub_188D20A9C(void *a1, void *a2)
{
  return *a1 >= *a2;
}

BOOL sub_188D20AB0(void *a1, void *a2)
{
  return *a2 < *a1;
}

uint64_t sub_188D20AC4()
{
  return sub_188DF8A98();
}

uint64_t sub_188D20B08()
{
  return sub_188DF8A50();
}

uint64_t _UnsafeBitSet.Index.hash(into:)()
{
  return sub_188DF8A50();
}

uint64_t sub_188D20B54()
{
  return sub_188DF8A98();
}

BOOL static _UnsafeBitSet.Index.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

unint64_t _UnsafeBitSet.Index.word.getter(unint64_t a1)
{
  return a1 >> 6;
}

unint64_t _UnsafeBitSet.Index.split.getter(unint64_t a1)
{
  return a1 >> 6;
}

uint64_t _UnsafeBitSet.Index._successor()(uint64_t a1)
{
  BOOL v1 = __CFADD__(a1, 1LL);
  uint64_t result = a1 + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t _UnsafeBitSet.Index._predecessor()(uint64_t a1)
{
  BOOL v1 = a1 != 0;
  uint64_t result = a1 - 1;
  if (!v1) {
    __break(1u);
  }
  return result;
}

unint64_t sub_188D20BDC()
{
  unint64_t result = qword_18C74A218;
  if (!qword_18C74A218)
  {
    unint64_t result = MEMORY[0x1895D7620]( &protocol conformance descriptor for _UnsafeBitSet.Index,  &type metadata for _UnsafeBitSet.Index);
    atomic_store(result, (unint64_t *)&qword_18C74A218);
  }

  return result;
}

ValueMetadata *type metadata accessor for _UnsafeBitSet.Index()
{
  return &type metadata for _UnsafeBitSet.Index;
}

uint64_t RopeElement.rebalance(prevNeighbor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4 = (*(uint64_t (**)(uint64_t))(a3 + 72))(v3);
  if ((v4 & 1) != 0) {
    sub_188DF89E4();
  }
  return v4 & 1;
}

uint64_t sub_188D20C84@<X0>( unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X8>)
{
  unint64_t v168 = a5;
  uint64_t v12 = sub_188DF8B4C();
  uint64_t v166 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint8x8_t v174 = &v153[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  unint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4FB2A8);
  uint64_t v15 = MEMORY[0x1895F8858](v14);
  uint64_t v16 = MEMORY[0x1895F8858](v15);
  MEMORY[0x1895F8858](v16);
  uint64_t v20 = &v153[-v19];
  if (a1 < 0x400) {
    return sub_188DF8B40();
  }
  uint64_t v160 = v18;
  v161.i64[0] = v17;
  unint64_t v21 = sub_188D097FC(a1, a2, a3, (uint64_t)a4, 1);
  unint64_t v175 = v24;
  if (v23 == 1)
  {
    __break(1u);
LABEL_112:
    sub_188D087F8((uint64_t)v20);
LABEL_113:
    uint64_t result = sub_188D087F8((uint64_t)v20);
    __break(1u);
    return result;
  }

  __int128 v25 = v6[1];
  __int128 v182 = *v6;
  __int128 v183 = v25;
  uint64_t v176 = v6;
  __int128 v26 = v6[2];
  __int128 v184 = v26;
  unint64_t v27 = *((void *)&v26 + 1);
  if (v22 != *((void *)&v26 + 1))
  {
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
    goto LABEL_105;
  }

  unint64_t v28 = v21;
  a4 = (uint64_t *)v23;
  unint64_t v177 = v22;
  uint64_t v162 = v12;
  unint64_t v29 = v21;
  uint64_t v30 = (16 * (int)v21) & 0x4000LL;
  a3 = v182;
  uint64_t v171 = *((void *)&v183 + 1);
  uint64_t v172 = v183;
  uint64_t v170 = v184;
  uint64_t v173 = *((void *)&v182 + 1);
  if (!v23)
  {
    __int128 v215 = v182;
    __int128 v216 = v183;
    uint64_t v217 = v184;
    swift_unknownObjectRetain();
    sub_188D36E50(v175, (uint64_t)&v212);
    sub_188D087F8((uint64_t)v176);
    unint64_t v169 = *((void *)&v212 + 1);
    unint64_t v167 = v212;
    LODWORD(v165) = v213;
    v35.i32[0] = *(_DWORD *)((char *)&v213 + 1);
    uint64x2_t v163 = (uint64x2_t)vmovl_u8(v35);
    unint64_t v33 = BYTE5(v213);
    a2 = v30 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)v29 << 16);
    if (a3) {
      goto LABEL_6;
    }
LABEL_8:
    unsigned int v34 = 0;
    goto LABEL_9;
  }

  uint64_t v31 = v23 + 24 * ((v175 >> ((4 * *(_BYTE *)(v23 + 18) + 8) & 0x3C)) & 0xF);
  unint64_t v32 = *(void *)(v31 + 32);
  unint64_t v167 = *(void *)(v31 + 24);
  LODWORD(v165) = *(unsigned __int8 *)(v31 + 40);
  LODWORD(v26) = *(_DWORD *)(v31 + 41);
  uint64x2_t v163 = (uint64x2_t)vmovl_u8(*(uint8x8_t *)&v26);
  unint64_t v33 = *(unsigned __int8 *)(v31 + 45);
  unint64_t v169 = v32;
  swift_bridgeObjectRetain();
  a2 = v30 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)v29 << 16);
  if (!a3) {
    goto LABEL_8;
  }
LABEL_6:
  unsigned int v34 = *(unsigned __int8 *)(a3 + 18);
LABEL_9:
  unint64_t v36 = v169;
  if (v175 <= v34 && !a2)
  {
    swift_bridgeObjectRelease();
    return sub_188DF8B40();
  }

  unint64_t v164 = a2 & 0xFFFFFFFFFFFFFFFCLL | (v28 >> 8) & 3 | 4;
  if ((v168 & 0x100000000LL) != 0 || !a2) {
    goto LABEL_36;
  }
  v159.i64[0] = v33;
  unint64_t v38 = v169;
  unint64_t v39 = sub_188D0F098(v164, v167, v169);
  if (v39 < 0x4000) {
    goto LABEL_104;
  }
  unint64_t v33 = v39;
  unint64_t v27 = v38;
  if ((v38 & 0x1000000000000000LL) != 0)
  {
LABEL_105:
    unint64_t v29 = v167;
    unint64_t v107 = v27;
    unint64_t v108 = sub_188DF7E14();
    sub_188DC9D84(v108, v29, v107);
    sub_188DF85F4();
    goto LABEL_35;
  }

  unint64_t v29 = v39 >> 16;
  if ((v27 & 0x2000000000000000LL) != 0)
  {
    *(void *)&__int128 v212 = v167;
    *((void *)&v212 + _HashNode.ensureUnique(isUnique:)(v1 & 1) = v27 & 0xFFFFFFFFFFFFFFLL;
    if ((*((_BYTE *)&v212 + v29 - 1) & 0xC0) != 0x80) {
      goto LABEL_28;
    }
    uint64_t v41 = 0LL;
    do
      int v43 = *((_BYTE *)&v212 + v29 + v41-- - 2) & 0xC0;
    while (v43 == 128);
    goto LABEL_27;
  }

  if ((v167 & 0x1000000000000000LL) == 0) {
    goto LABEL_109;
  }
  for (uint64_t i = (v27 & 0xFFFFFFFFFFFFFFFLL) + 32; ; uint64_t i = sub_188DF8684())
  {
    if ((*(_BYTE *)(v29 + i - 1) & 0xC0) == 0x80)
    {
      uint64_t v41 = 0LL;
      do
        int v42 = *(_BYTE *)(v29 + i - 2 + v41--) & 0xC0;
      while (v42 == 128);
LABEL_27:
      uint64_t v44 = 1 - v41;
    }

    else
    {
LABEL_28:
      uint64_t v44 = 1LL;
    }

    unint64_t v45 = v167;
    sub_188DC9D84((v33 - (v44 << 16)) & 0xFFFFFFFFFFFF0000LL | 5, v167, v169);
    unint64_t v46 = v169;
    if ((v169 & 0x2000000000000000LL) != 0)
    {
      *(void *)&__int128 v212 = v45;
      *((void *)&v212 + _HashNode.ensureUnique(isUnique:)(v1 & 1) = v169 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v29 = v169;
      swift_bridgeObjectRetain();
    }

    else
    {
      if ((v45 & 0x1000000000000000LL) != 0)
      {
        unint64_t v158 = (v169 & 0xFFFFFFFFFFFFFFFLL) + 32;
      }

      else
      {
        uint64_t v109 = sub_188DF8684();
        unint64_t v46 = v169;
        unint64_t v158 = v109;
      }

      unint64_t v29 = v46;
      swift_bridgeObjectRetain();
    }

    sub_188DF8690();
    swift_bridgeObjectRelease();
LABEL_35:
    char v47 = sub_188DF8B1C();
    unint64_t v36 = v169;
    unint64_t v33 = v159.i64[0];
    if ((v47 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return sub_188DF8B40();
    }

LABEL_77:
            if (v78)
            {
              uint64_t v180 = v180 & ((-15LL << v160) - 1) | ((v78 - 1) << v160);
              unint64_t v85 = v158 + 40LL * ((int)v78 - 1);
              uint64_t v86 = *(void *)(v85 + 32);
              __int128 v87 = *(_OWORD *)(v85 + 16);
              __int128 v212 = *(_OWORD *)v85;
              __int128 v213 = v87;
              uint64_t v214 = v86;
              swift_unknownObjectRetain();
              a4 = sub_188DF0F88(v165);
              sub_188D087F8((uint64_t)&v212);
              uint64_t v181 = a4;
LABEL_79:
              swift_unknownObjectRelease();
LABEL_80:
              swift_unknownObjectRelease();
LABEL_81:
              uint64_t v20 = v176;
              goto LABEL_82;
            }

            swift_unknownObjectRelease();
            uint64_t v71 = v161.i64[0];
LABEL_65:
            if (v70)
            {
              uint64_t v180 = v180 & ((-15LL << v69) - 1) | ((v70 - 1) << v69);
              uint64_t v79 = v71 + 40LL * ((int)v70 - 1);
              uint64_t v80 = *(void *)(v79 + 32);
              __int128 v81 = *(_OWORD *)(v79 + 16);
              v210[0] = *(_OWORD *)v79;
              v210[1] = v81;
              uint64_t v211 = v80;
              swift_unknownObjectRetain();
              a4 = sub_188DF0F88(v165);
              sub_188D087F8((uint64_t)v210);
              uint64_t v181 = a4;
              goto LABEL_80;
            }

            swift_unknownObjectRelease();
LABEL_69:
            uint64_t v20 = v176;
            if (!a2) {
              goto LABEL_112;
            }
            goto LABEL_70;
          }

          if (v77)
          {
            uint64_t v180 = ((v77 - 1) << v76) | ((-15LL << v76) - 1) & v14;
            uint64_t v181 = a4;
            sub_188D07F48((uint64_t)v176);
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            goto LABEL_79;
          }
        }

        unint64_t v158 = (unint64_t)v74;
        uint64_t v78 = (v14 >> v72) & 0xF;
        uint64_t v160 = v72;
        sub_188D07F48((uint64_t)v176);
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        goto LABEL_77;
      }

      if (v70)
      {
        uint64_t v180 = ((v70 - 1) << v69) | ((-15LL << v69) - 1) & v14;
        uint64_t v181 = (uint64_t *)v68;
        swift_unknownObjectRetain();
        a4 = (uint64_t *)v68;
        goto LABEL_81;
      }

      swift_unknownObjectRetain();
      goto LABEL_69;
    }

    swift_unknownObjectRetain();
    if (!a2) {
      goto LABEL_112;
    }
LABEL_70:
    uint64_t v180 = v180 & ((-15LL << v67) - 1) | ((a2 - 1) << v67);
    unint64_t v82 = v168 + 40LL * ((int)a2 - 1);
    uint64_t v83 = *(void *)(v82 + 32);
    __int128 v84 = *(_OWORD *)(v82 + 16);
    v208[0] = *(_OWORD *)v82;
    v208[1] = v84;
    uint64_t v209 = v83;
    swift_unknownObjectRetain();
    a4 = sub_188DF0F88(v165);
    sub_188D087F8((uint64_t)v208);
    uint64_t v181 = a4;
LABEL_82:
    sub_188D087F8((uint64_t)v20);
    sub_188D087F8((uint64_t)v20);
    unint64_t v65 = v179;
    unint64_t v14 = v180;
LABEL_83:
    unint64_t v27 = v177;
    if (v65 != v177) {
      goto LABEL_102;
    }
LABEL_84:
    if (a4)
    {
      unint64_t v27 = (unint64_t)&a4[3 * ((v14 >> ((4 * *((_BYTE *)a4 + 18) + 8) & 0x3C)) & 0xF)];
      unint64_t v33 = *(unsigned __int8 *)(v27 + 40);
      unint64_t v29 = *(unsigned __int8 *)(v27 + 44);
    }

    else
    {
      unint64_t v203 = a3;
      uint64_t v204 = v173;
      uint64_t v205 = v172;
      uint64_t v206 = v171;
      uint64_t v207 = v170;
      swift_unknownObjectRetain();
      sub_188D36E50(v14, (uint64_t)v199);
      sub_188D087F8((uint64_t)v20);
      unint64_t v33 = v200;
      unint64_t v29 = BYTE4(v200);
      swift_bridgeObjectRelease();
    }
  }

  unint64_t v33 = 0LL;
  if (v14) {
    goto LABEL_45;
  }
  unint64_t v14 = 0LL;
LABEL_90:
  if (v14 >= v175) {
    goto LABEL_107;
  }
  uint64_t v165 = (uint64_t *)a6;
  if (a4)
  {
    uint64_t v88 = &a4[3 * ((v14 >> ((4 * *((_BYTE *)a4 + 18) + 8) & 0x3C)) & 0xF)];
    unint64_t v90 = v88[3];
    unint64_t v89 = v88[4];
    a6 = *((unsigned __int8 *)v88 + 40);
    v54.i32[0] = *(_DWORD *)((char *)v88 + 41);
    uint16x8_t v161 = vmovl_u8(v54);
    uint64_t v91 = *((unsigned __int8 *)v88 + 45);
    swift_bridgeObjectRetain();
    v92.i64[0] = v161.i64[0];
  }

  else
  {
    v199[0] = a3;
    v199[1] = v173;
    uint64_t v200 = v172;
    uint64_t v201 = v171;
    uint64_t v202 = v170;
    swift_unknownObjectRetain();
    sub_188D36E50(v14, (uint64_t)&v194);
    sub_188D087F8((uint64_t)v20);
    unint64_t v90 = v194;
    unint64_t v89 = v195;
    a6 = v196;
    v93.i32[0] = *(_DWORD *)((char *)&v196 + 1);
    uint16x8_t v92 = vmovl_u8(v93);
    uint64_t v91 = BYTE5(v196);
  }

  uint32x4_t v94 = vmovl_u16((uint16x4_t)(v92.i64[0] & 0xFF00FF00FF00FFLL));
  v95.i64[0] = v94.u32[0];
  v95.i64[1] = v94.u32[1];
  uint64x2_t v96 = v95;
  v95.i64[0] = v94.u32[2];
  v95.i64[1] = v94.u32[3];
  int8x16_t v97 = vorrq_s8((int8x16_t)vshlq_u64(v96, v159), (int8x16_t)vshlq_u64(v95, v163));
  unint64_t v29 = sub_188D552B8( v90,  v89,  *(void *)&vorr_s8(*(int8x8_t *)v97.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v97, v97, 8uLL)) | (v91 << 40) | a6);
  unint64_t v99 = v98;
  uint64_t v20 = v100;
  a2 = v101;
  swift_bridgeObjectRelease();
  sub_188DCAFBC(v29, v99, (unint64_t)v20, a2);
  swift_unknownObjectRetain();
  unint64_t v33 = (unint64_t)&v182;
  if (v14 >= sub_188D36DF0()) {
    goto LABEL_108;
  }
  uint64_t v102 = v165;
  uint64_t v103 = (uint64_t)v176;
  if (a4)
  {
    char v104 = (4 * *((_BYTE *)a4 + 18) + 8) & 0x3C;
    unint64_t v105 = ((v14 >> v104) & 0xF) + 1;
    if (v105 < *((unsigned __int16 *)a4 + 8))
    {
LABEL_97:
      unint64_t v14 = (v105 << v104) | ((-15LL << v104) - 1) & v14;
      uint64_t v180 = v14;
      goto LABEL_149;
    }
  }

  unint64_t v194 = a3;
  unint64_t v195 = v173;
  uint64_t v196 = v172;
  uint64_t v197 = v171;
  uint64_t v198 = v170;
  swift_unknownObjectRetain();
  char v106 = sub_188D7F780((uint64_t)&v179);
  sub_188D087F8(v103);
  if ((v106 & 1) == 0)
  {
    unint64_t v14 = sub_188D36DF0();
    uint64_t result = sub_188D087F8(v103);
    goto LABEL_114;
  }

  uint64_t result = sub_188D087F8(v103);
  unint64_t v14 = v180;
  while (2)
  {
    while (2)
    {
      while (2)
      {
        if (v14 >= v175)
        {
          uint64_t v130 = sub_188DF7FD0();
          uint64_t v132 = v131;
          uint64_t v134 = v133;
          uint64_t v136 = v135;
          swift_bridgeObjectRelease();
          uint64_t v137 = v130;
          uint64_t v138 = v174;
          sub_188DCAB58(v137, v132, v134, v136);
          swift_bridgeObjectRelease();
          return (*(uint64_t (**)(uint64_t *, _BYTE *, uint64_t))(v166 + 32))(v102, v138, v162);
        }

        if (v179 != v177)
        {
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }

        uint64_t v110 = v181;
        if (v181)
        {
          swift_bridgeObjectRetain();
        }

        else
        {
          unint64_t v189 = a3;
          uint64_t v190 = v173;
          uint64_t v191 = v172;
          uint64_t v192 = v171;
          uint64_t v193 = v170;
          swift_unknownObjectRetain();
          sub_188D36E50(v14, (uint64_t)v178);
          sub_188D087F8(v103);
        }

        uint64_t v111 = sub_188DF7FD0();
        uint64_t v113 = v112;
        uint64_t v115 = v114;
        uint64_t v117 = v116;
        swift_bridgeObjectRelease();
        sub_188DCAB58(v111, v113, v115, v117);
        uint64_t result = swift_bridgeObjectRelease();
        if (!a3) {
          goto LABEL_153;
        }
        int v118 = *(unsigned __int8 *)(a3 + 18);
        uint64_t v119 = *(unsigned __int16 *)(a3 + 16);
        swift_unknownObjectRetain_n();
        uint64_t v103 = (uint64_t)v176;
        uint64_t result = sub_188D087F8((uint64_t)v176);
        if (v110)
        {
          char v104 = (4 * *((_BYTE *)v110 + 18) + 8) & 0x3C;
          unint64_t v105 = ((v14 >> v104) & 0xF) + 1;
        }

        char v120 = (4 * *(_BYTE *)(a3 + 18) + 8) & 0x3C;
        uint64_t v121 = (v14 >> v120) & 0xF;
        if (!*(_BYTE *)(a3 + 18))
        {
          if (v121 + 1 < (unint64_t)*(unsigned __int16 *)(a3 + 16))
          {
            unint64_t v14 = ((v121 + 1) << v120) | ((-15LL << v120) - 1) & v14;
            uint64_t v180 = v14;
            uint64_t result = sub_188D087F8(v103);
            uint64_t v181 = (uint64_t *)a3;
            continue;
          }

          goto LABEL_151;
        }

        break;
      }

      uint64_t v122 = *(void *)(v168 + 40 * ((v14 >> v120) & 0xF));
      char v123 = (4 * *(_BYTE *)(v122 + 18) + 8) & 0x3C;
      uint64_t v124 = (v14 >> v123) & 0xF;
      if (*(_BYTE *)(v122 + 18))
      {
        uint64_t v125 = *(void *)(v122 + 24 + 40 * ((v14 >> v123) & 0xF));
        int v126 = *(unsigned __int8 *)(v125 + 18);
        char v127 = (4 * v126 + 8) & 0x3C;
        v178[0] = (v14 >> v127) & 0xF;
        if (v126)
        {
          v163.i64[0] = v122 + 24;
          sub_188D07F48((uint64_t)v176);
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          char v128 = sub_188D800A4(v125 + 24, v178, (uint64_t)&v179, v125, v126);
          swift_unknownObjectRelease();
          if ((v128 & 1) != 0)
          {
            unint64_t v14 = v180;
            uint64_t v103 = (uint64_t)v176;
LABEL_137:
            swift_unknownObjectRelease();
            uint64_t v102 = v165;
            goto LABEL_148;
          }
        }

        else
        {
          unint64_t v129 = ((v14 >> v127) & 0xF) + 1;
          if (v129 < *(unsigned __int16 *)(v125 + 16))
          {
            unint64_t v14 = (v129 << v127) | ((-15LL << v127) - 1) & v14;
            uint64_t v180 = v14;
            uint64_t v181 = (uint64_t *)v125;
            uint64_t v103 = (uint64_t)v176;
            sub_188D07F48((uint64_t)v176);
            swift_unknownObjectRetain();
            goto LABEL_137;
          }

          v163.i64[0] = v122 + 24;
          sub_188D07F48((uint64_t)v176);
          swift_unknownObjectRetain();
        }

        uint64_t v139 = v124 + 1;
        if (v124 + 1 < (unint64_t)*(unsigned __int16 *)(v122 + 16))
        {
          uint64_t v140 = v163.i64[0] + 40LL * v139;
          __int128 v142 = *(_OWORD *)v140;
          __int128 v141 = *(_OWORD *)(v140 + 16);
          uint64_t v188 = *(void *)(v140 + 32);
          v187[0] = v142;
          v187[1] = v141;
          uint64_t result = v142;
          unsigned int v143 = *(unsigned __int8 *)(v142 + 18) + 1;
          uint64_t v102 = v165;
          uint64_t v103 = (uint64_t)v176;
          if (((v143 >> 8) & 1) == 0)
          {
            uint64_t v180 = ((-256LL << (4 * (v143 & 0xF))) | 0xFF) & (v180 & ((-15LL << v123) - 1) | (v139 << v123));
            unint64_t v14 = v180;
            swift_unknownObjectRetain();
            uint64_t v144 = sub_188D7F6E0(v14);
            sub_188D087F8((uint64_t)v187);
            uint64_t v181 = (uint64_t *)v144;
            swift_unknownObjectRelease();
            goto LABEL_148;
          }

          goto LABEL_155;
        }

        swift_unknownObjectRelease();
        uint64_t v102 = v165;
        uint64_t v103 = (uint64_t)v176;
      }

      else
      {
        if (v124 + 1 < (unint64_t)*(unsigned __int16 *)(v122 + 16))
        {
          unint64_t v14 = ((v124 + 1) << v123) | ((-15LL << v123) - 1) & v14;
          uint64_t v180 = v14;
          uint64_t v181 = (uint64_t *)v122;
          swift_unknownObjectRetain();
          uint64_t v102 = v165;
          goto LABEL_148;
        }

        swift_unknownObjectRetain();
        uint64_t v102 = v165;
      }

      uint64_t v145 = v121 + 1;
      if (v121 + 1 >= (unint64_t)*(unsigned __int16 *)(a3 + 16))
      {
        sub_188D087F8(v103);
LABEL_151:
        int v151 = *(unsigned __int8 *)(a3 + 18);
        uint64_t v152 = *(unsigned __int16 *)(a3 + 16);
        swift_unknownObjectRetain();
        sub_188D087F8(v103);
        uint64_t result = sub_188D087F8(v103);
        unint64_t v14 = ((-15LL << ((4 * v151 + 8) & 0x3C)) - 1) & v151 | (unint64_t)(v152 << ((4 * v151 + 8) & 0x3C));
LABEL_114:
        unint64_t v179 = v177;
        uint64_t v180 = v14;
        uint64_t v181 = 0LL;
        continue;
      }

      break;
    }

    unint64_t v146 = v168 + 40LL * v145;
    __int128 v148 = *(_OWORD *)v146;
    __int128 v147 = *(_OWORD *)(v146 + 16);
    uint64_t v186 = *(void *)(v146 + 32);
    v185[0] = v148;
    v185[1] = v147;
    uint64_t result = v148;
    unsigned int v149 = *(unsigned __int8 *)(v148 + 18) + 1;
    if (((v149 >> 8) & 1) == 0)
    {
      uint64_t v180 = ((-256LL << (4 * (v149 & 0xF))) | 0xFF) & (v180 & ((-15LL << v120) - 1) | (v145 << v120));
      unint64_t v14 = v180;
      swift_unknownObjectRetain();
      uint64_t v150 = sub_188D7F6E0(v14);
      sub_188D087F8((uint64_t)v185);
      uint64_t v181 = (uint64_t *)v150;
LABEL_148:
      sub_188D087F8(v103);
LABEL_149:
      uint64_t result = sub_188D087F8(v103);
      continue;
    }

    break;
  }

    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v24 + 40))(v35, v36, v53);
    goto LABEL_78;
  }

    uint64_t v41 = 1;
    return v41 & 1;
  }

  unint64_t v53 = v7;
  uint64_t v20 = 0LL;
  unint64_t v21 = (void *)__clz(__rbit64(v19));
  unint64_t v22 = (v19 - 1) & v19;
LABEL_7:
  char v55 = (uint64_t)v21;
  swift_bridgeObjectRetain();
  uint64_t result = sub_188DF8000();
  if (result != 2)
  {
    if ((result & 1) == 0)
    {
LABEL_70:
      swift_bridgeObjectRelease();
      uint64_t v41 = 0;
      return v41 & 1;
    }

    int v43 = v54;
    while (1)
    {
      if (v22)
      {
        if (v20 << 6 < 0) {
          goto LABEL_81;
        }
        uint64_t v44 = __rbit64(v22);
        v22 &= v22 - 1;
        unint64_t v45 = (void *)((v20 << 6) | __clz(v44));
      }

      else
      {
        unint64_t v46 = v20 + 1;
        if (__OFADD__(v20, 1LL)) {
          goto LABEL_82;
        }
        char v47 = *((void *)a2 + 2);
        if (v46 >= v47) {
          goto LABEL_79;
        }
        uint16x4_t v48 = *(void *)&v43[8 * v46];
        if (!v48)
        {
          while (1)
          {
            uint64_t v20 = v46 + 1;
            if (__OFADD__(v46, 1LL)) {
              break;
            }
            if (v20 >= v47) {
              goto LABEL_79;
            }
            uint16x4_t v48 = *(void *)&v43[8 * v20];
            ++v46;
            if (v48) {
              goto LABEL_64;
            }
          }

          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          __break(1u);
LABEL_87:
          __break(1u);
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
          return result;
        }

        ++v20;
LABEL_64:
        if (v20 << 6 < 0) {
          goto LABEL_84;
        }
        unint64_t v22 = (v48 - 1) & v48;
        unint64_t v45 = (void *)(__clz(__rbit64(v48)) + (v20 << 6));
      }

      char v55 = (uint64_t)v45;
      uint64_t result = sub_188DF8084();
      if ((result & 1) == 0) {
        goto LABEL_70;
      }
    }
  }

  swift_bridgeObjectRelease();
  Description[2](v16, a1, a3);
  swift_bridgeObjectRetain();
  sub_188DF7FDC();
  swift_getAssociatedConformanceWitness();
  uint64_t v23 = v53;
  while (1)
  {
    while (1)
    {
      sub_188DF84D4();
      if ((v56 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t))(v23 + 8))(v10, AssociatedTypeWitness);
        goto LABEL_70;
      }

      unint64_t v24 = v55;
      if ((v55 & 0x8000000000000000LL) == 0)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_188CF73DC((uint64_t)a2);
          a2 = (char *)result;
        }

        __int128 v25 = *((void *)a2 + 2);
        if (v24 >> 6 < v25)
        {
          __int128 v26 = a2 + 32;
          unint64_t v27 = 8 * (v24 >> 6);
          unint64_t v28 = *(void *)&a2[v27 + 32];
          *(void *)&a2[v27 + 32] = v28 & ~(1LL << v24);
          if ((v28 & (1LL << v24)) != 0) {
            break;
          }
        }
      }
    }

    unint64_t v29 = v25 - 1;
    uint64_t v30 = v25 - 1;
    if (!*(void *)&v26[8 * v25 - 8])
    {
      uint64_t v30 = v25 - 2;
      if (!*(void *)&v26[8 * v30])
      {
        uint64_t v31 = v25;
        while (v31 - 2 >= 1)
        {
          if (*(void *)&a2[8 * v31-- + 8])
          {
            uint64_t v30 = v31 - 2;
            goto LABEL_23;
          }
        }

LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
  return result;
}

unint64_t sub_188D21F38( unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void *)(v6 + 32);
  if (*(void *)v6) {
    BOOL v8 = 2 * (v7 & 0x1FFFFFFFFFFFFFuLL) > a1 >> 10;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8) {
    return 0LL;
  }
  uint64_t v9 = v6;
  uint64_t v12 = *(void *)(v6 + 24);
  uint64_t v13 = *(void *)(v6 + 40);
  _OWORD v25[3] = *(void *)v6;
  __int128 v26 = *(_OWORD *)(v6 + 8);
  uint64_t v27 = v12;
  uint64_t v28 = v7;
  uint64_t v29 = v13;
  unint64_t result = sub_188D097FC(a1, a2, a3, a4, 0);
  if (v17 == 1) {
    goto LABEL_12;
  }
  uint64_t v18 = v15;
  v25[0] = v15;
  v25[1] = v16;
  v25[2] = v17;
  unint64_t v24 = (16 * (int)result) & 0x4000LL | ((unint64_t)result << 16) | (result >> 8) & 3 | 4;
  unint64_t result = MEMORY[0x1895F8858](result);
  v20[2] = &v24;
  v20[3] = a5;
  void v20[4] = a6;
  uint64_t v22 = 0LL;
  char v23 = 1;
  if (v19 != *(void *)(v9 + 40))
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }

  if (!*(void *)v9) {
    return 0LL;
  }
  sub_188D25420( &v21,  (uint64_t)v25,  (__int128 *)v9,  (uint64_t)&v22,  (void (*)(void *__return_ptr))sub_188D23DC0,  (uint64_t)v20);
  unint64_t result = v18 + 1;
  *(void *)(v9 + 40) = v18 + 1;
  if ((v23 & 1) != 0) {
    return 0LL;
  }
  return result;
}

uint64_t sub_188D2208C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v74 = a3;
  uint64_t v72 = a2;
  v61[0] = sub_188DF8B4C();
  uint64_t v63 = *(void *)(v61[0] - 8LL);
  MEMORY[0x1895F8858](v61[0]);
  uint64_t v62 = (char *)v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v7 = *(void *)v3;
  unint64_t v6 = *(void *)(v3 + 8);
  uint64_t v8 = *(void *)v3 & 0xFFFFFFFFFFFFLL;
  uint64_t v66 = v8;
  uint64_t v67 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000LL) != 0) {
    uint64_t v8 = HIBYTE(v6) & 0xF;
  }
  if ((v6 & 0x1000000000000000LL) != 0) {
    uint64_t v9 = (v7 >> 59) & 1;
  }
  else {
    uint64_t v9 = 1LL;
  }
  unint64_t v78 = v8;
  unint64_t v10 = 4 * v8;
  unint64_t v11 = a1 >> 14;
  swift_bridgeObjectRetain();
  unint64_t v75 = v10;
  unint64_t v77 = v3;
  unint64_t v73 = v7;
  v61[1] = a1;
  unint64_t v64 = a1 >> 14;
  uint64_t v65 = v9;
  if (a1 >> 14 >= v10)
  {
    unint64_t v69 = 0LL;
    unint64_t v12 = 0LL;
    LODWORD(v72) = 1;
    unint64_t v26 = v6;
    unint64_t v14 = a1;
    unint64_t v27 = a1 >> 14;
    int v68 = 1;
    int v76 = 1;
    goto LABEL_60;
  }

  unint64_t v12 = 0LL;
  uint64_t v13 = 4LL << v9;
  uint64_t v71 = v6 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v69 = 0LL;
  uint64_t v70 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  int v76 = 1;
  unint64_t v14 = a1;
  int v68 = 1;
  while (1)
  {
    unint64_t v15 = v14 & 0xC;
    BOOL v16 = (v14 & 1) == 0 || v15 == v13;
    BOOL v17 = v16;
    if (v16)
    {
      unint64_t v18 = v14;
      if (v15 == v13) {
        unint64_t v18 = sub_188D37044(v14, v7, v6);
      }
      if (v18 >> 16 >= v78)
      {
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
        goto LABEL_96;
      }

      if ((v18 & 1) == 0) {
        sub_188D36F34(v18, v7, v6);
      }
    }

    else if (v14 >> 16 >= v78)
    {
      goto LABEL_91;
    }

    if ((v6 & 0x1000000000000000LL) != 0)
    {
      sub_188DF85F4();
    }

    else
    {
      if ((v6 & 0x2000000000000000LL) != 0)
      {
        unint64_t v79 = v7;
        uint64_t v80 = v71;
      }

      else if ((v7 & 0x1000000000000000LL) == 0)
      {
        sub_188DF8684();
      }

      sub_188DF8690();
    }

    char v19 = sub_188DF8B34();
    if ((sub_188DF8B34() & 1) != 0) {
      break;
    }
    unint64_t v7 = v73;
    if ((v19 & 1) != 0)
    {
      unint64_t v3 = v77;
      unsigned int v20 = *(unsigned __int8 *)(v77 + 19) - 1;
      if ((v20 & 0xFFFFFF00) != 0) {
        goto LABEL_95;
      }
LABEL_38:
      *(_BYTE *)(v3 + 19) = v20;
      if (v17) {
        goto LABEL_39;
      }
      goto LABEL_45;
    }

    unint64_t v3 = v77;
    if (v17)
    {
LABEL_39:
      if (v15 == v13) {
        unint64_t v14 = sub_188D37044(v14, v7, v6);
      }
      if (v78 <= v14 >> 16) {
        goto LABEL_92;
      }
      if ((v14 & 1) == 0) {
        unint64_t v14 = v14 & 0xC | sub_188D36F34(v14, v7, v6) & 0xFFFFFFFFFFFFFFF3LL | 1;
      }
      goto LABEL_46;
    }

LABEL_45:
    if (v78 <= v14 >> 16) {
      goto LABEL_93;
    }
LABEL_46:
    if ((v6 & 0x1000000000000000LL) != 0)
    {
      unint64_t v14 = sub_188DF7E08();
    }

    else
    {
      unint64_t v21 = v14 >> 16;
      if ((v6 & 0x2000000000000000LL) != 0)
      {
        unint64_t v79 = v7;
        uint64_t v80 = v71;
        int v23 = *((unsigned __int8 *)&v79 + v21);
      }

      else
      {
        uint64_t v22 = v70;
        if ((v7 & 0x1000000000000000LL) == 0) {
          uint64_t v22 = sub_188DF8684();
        }
        int v23 = *(unsigned __int8 *)(v22 + v21);
      }

      int v24 = (char)v23;
      unsigned int v25 = __clz(v23 ^ 0xFF) - 24;
      if (v24 >= 0) {
        LOBYTE(v25) = 1;
      }
      unint64_t v14 = ((v21 + v25) << 16) | 5;
    }

    unint64_t v11 = v14 >> 14;
    if (v14 >> 14 >= v75)
    {
      LODWORD(v72) = 1;
      goto LABEL_59;
    }
  }

  if ((v76 & 1) != 0) {
    unint64_t v12 = v14;
  }
  unint64_t v7 = v73;
  if ((v19 & 1) == 0)
  {
    unint64_t v3 = v77;
    unsigned int v20 = *(unsigned __int8 *)(v77 + 19) + 1;
    if (((v20 >> 8) & 1) != 0) {
      goto LABEL_94;
    }
    int v76 = 0;
    int v68 = 0;
    unint64_t v69 = v14;
    goto LABEL_38;
  }

  LODWORD(v72) = 0;
  int v68 = 0;
  int v76 = 0;
  unint64_t v69 = v14;
  unint64_t v3 = v77;
LABEL_59:
  unint64_t v7 = *(void *)v3;
  unint64_t v26 = *(void *)(v3 + 8);
  unint64_t v27 = v64;
LABEL_60:
  uint64_t v28 = 11LL;
  if ((_DWORD)v65) {
    uint64_t v28 = 7LL;
  }
  uint64_t v71 = v28;
  unint64_t v15 = v3;
  unint64_t v29 = *(unsigned int *)(v3 + 16) | ((unint64_t)*(unsigned __int8 *)(v3 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(v3 + 21) << 40);
  if (v27 > sub_188D553D0(v7, v26, v29) >> 14) {
    goto LABEL_73;
  }
  if ((v76 & 1) == 0)
  {
    unint64_t v38 = v12;
LABEL_72:
    unint64_t v15 = v77;
    sub_188D55414(v38);
    goto LABEL_73;
  }

  unint64_t v30 = sub_188D553D0(v7, v26, v29);
  unint64_t v15 = v77;
  if (v11 < v30 >> 14) {
    goto LABEL_73;
  }
  if (v11 >= (unint64_t)sub_188D5537C(v7, v26, v29) >> 14)
  {
    unint64_t v38 = v71 | (v78 << 16);
    goto LABEL_72;
  }

  unint64_t v31 = v73;
  unint64_t v32 = sub_188DC9D84(v14, v73, v6);
  unint64_t v15 = v77;
  if ((v6 & 0x1000000000000000LL) != 0) {
    goto LABEL_97;
  }
  unint64_t v33 = v32 >> 16;
  uint64_t v34 = v61[0];
  uint8x8_t v35 = v62;
  if ((v6 & 0x2000000000000000LL) != 0)
  {
    unint64_t v79 = v31;
    uint64_t v80 = v6 & 0xFFFFFFFFFFFFFFLL;
    int v37 = *((unsigned __int8 *)&v79 + v33);
  }

  else
  {
    if ((v31 & 0x1000000000000000LL) != 0) {
      uint64_t v36 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v36 = sub_188DF8684();
    }
    int v37 = *(unsigned __int8 *)(v36 + v33);
  }

  uint64_t v45 = v63;
  int v46 = (char)v37;
  unsigned int v47 = __clz(v37 ^ 0xFF) - 24;
  if (v46 >= 0) {
    LOBYTE(v47) = 1;
  }
  unint64_t v48 = ((v33 + v47) << 16) | 5;
  while (1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v35, v74, v34);
    uint64_t v49 = *(void *)v15;
    unint64_t v50 = *(void *)(v15 + 8);
    swift_bridgeObjectRetain();
    unint64_t v51 = sub_188D0EFD0(v48, v49, v50);
    unint64_t v53 = v52;
    unint64_t v55 = v54;
    unint64_t v57 = v56;
    uint64_t v58 = v62;
    swift_bridgeObjectRelease();
    unint64_t v59 = sub_188DCAD80(v51, v53, v55, v57);
    LOBYTE(v53) = v60;
    uint64_t result = swift_bridgeObjectRelease();
    if ((v53 & 1) != 0)
    {
      __break(1u);
      return result;
    }

    sub_188D55414(v59);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v58, v34);
LABEL_73:
    uint64_t v39 = *(void *)v15;
    unint64_t v40 = *(void *)(v15 + 8);
    unint64_t v41 = *(unsigned int *)(v15 + 16) | ((unint64_t)*(unsigned __int8 *)(v15 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(v15 + 21) << 40);
    if ((v68 & 1) == 0) {
      goto LABEL_79;
    }
    unint64_t v42 = sub_188D553D0(v39, v40, v41);
    if (v75 == v42 >> 14)
    {
      unint64_t v69 = 15LL;
LABEL_79:
      sub_188D554C0(v69);
      break;
    }

    unint64_t v43 = sub_188D553D0(v39, v40, v41);
    if (v64 >= v43 >> 14)
    {
      sub_188DF7FD0();
      unint64_t v69 = sub_188DF8450();
      swift_bridgeObjectRelease();
      goto LABEL_79;
    }

        __break(1u);
LABEL_46:
        unint64_t v57 = sub_188DF8528();
        v43(v59, v4);
      }
    }

LABEL_96:
    __break(1u);
LABEL_97:
    unint64_t v48 = sub_188DF7E08();
    uint64_t v34 = v61[0];
    uint8x8_t v35 = v62;
    uint64_t v45 = v63;
  }

  swift_bridgeObjectRelease();
  if ((_DWORD)v72) {
    return 0LL;
  }
  else {
    return v14;
  }
}

    uint64_t v192 = v128;
    unsigned int v149 = v187 & 0xFFFF000000000000LL | (unsigned __int16)v121 & 0xFF00 | v121 & 0xFFFF0000 | v121 & 0xFFFF000000FFLL;
    uint64_t v150 = v117;
    int v151 = v133;
    swift_bridgeObjectRetain();
    uint64_t v187 = v149;
    uint64_t result = sub_188D82630(v151, v150, v118, v149);
    if (4 * v192 < v151 >> 14) {
      goto LABEL_159;
    }
    uint64_t v230 = result;
    uint64_t v207 = HIWORD(result);
    uint64_t v202 = HIWORD(v152);
    uint64_t v223 = v152;
    v218 = BYTE2(v152);
    swift_bridgeObjectRetain();
    sub_188DF7FD0();
    uint64_t result = swift_bridgeObjectRelease();
    LOBYTE(v235) = v202;
    if (v218 >= v207)
    {
      LOBYTE(v153) = v197;
      uint64x2_t v159 = (v196 + v202) >> 8;
      int v154 = v193;
      char v155 = v194;
      unsigned int v156 = v195;
      if (v196 >= v112)
      {
        int8x8_t v157 = v230;
        unint64_t v158 = v223;
        if ((v159 & 1) != 0) {
          goto LABEL_174;
        }
        LOBYTE(v235) = v196 + v202;
        uint64_t v153 = v197 + HIBYTE(v223);
        if (((v153 >> 8) & 1) != 0) {
          goto LABEL_175;
        }
      }

      else
      {
        int8x8_t v157 = v230;
        unint64_t v158 = v223;
        if ((v159 & 1) != 0) {
          goto LABEL_173;
        }
        LOBYTE(v235) = v196 + v202;
      }
    }

    else
    {
      LOBYTE(v153) = v197;
      int v154 = v193;
      char v155 = v194;
      unsigned int v156 = v195;
      int8x8_t v157 = v230;
      unint64_t v158 = v223;
      if (v196 >= v112)
      {
        uint64_t v153 = v197 + HIBYTE(v223);
        if (((v153 >> 8) & 1) != 0) {
          goto LABEL_172;
        }
      }
    }

    HIBYTE(v235) = v153;
    LOBYTE(v234) = v112 + v207;
    BYTE1(v234) = HIBYTE(v157) + v156;
    BYTE2(v234) = v155 + v158;
    HIBYTE(v234) = v154 + HIBYTE(v158);
    swift_bridgeObjectRetain();
    uint64_t v224 = sub_188DF7E74();
    uint64_t v160 = sub_188DF8498();
    unint64_t v11 = __OFADD__(v224, v160);
    uint64_t result = v224 + v160;
    if (v11) {
      goto LABEL_167;
    }
    MEMORY[0x1895D6690](result);
    sub_188D2DC60();
    sub_188DF7EC8();
    sub_188DF7EC8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t v232 = 0LL;
    uint64_t v233 = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    uint16x8_t v161 = sub_188DF7FD0();
    uint64x2_t v163 = v162;
    uint64_t v165 = v164;
    unint64_t v167 = v166;
    swift_bridgeObjectRelease();
    unint64_t v168 = MEMORY[0x1895D6684](v161, v163, v165, v167);
    uint64_t v170 = v169;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v236 = v168;
    v237 = v170;
    uint64_t v238 = v230;
    uint64_t v83 = v208;
    uint64_t v239 = WORD2(v230);
    unint64_t v82 = v209;
    goto LABEL_112;
  }

uint64_t sub_188D22708(uint64_t a1)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *((void *)v1 + 5);
  if (*(void *)v1) {
    uint64_t v2 = *(unsigned __int8 *)(v2 + 18);
  }
  v10[0] = *((void *)v1 + 5);
  v10[1] = v2;
  _OWORD v10[2] = 0LL;
  uint64_t result = MEMORY[0x1895F8858](a1);
  uint64_t v6[2] = result;
  _OWORD v6[3] = v5;
  uint64_t v8 = 0LL;
  char v9 = 1;
  if (v3 == *((void *)v1 + 5))
  {
    if (!*(void *)v1) {
      return 0LL;
    }
    sub_188D25420( &v7,  (uint64_t)v10,  v1,  (uint64_t)&v8,  (void (*)(void *__return_ptr))sub_188D23D84,  (uint64_t)v6);
    uint64_t result = v3 + 1;
    *((void *)v1 + 5) = v3 + 1;
    if ((v9 & 1) != 0) {
      return 0LL;
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_188D227E0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result = sub_188D2208C(0xFuLL, a1, a2);
  *(void *)a3 = result;
  *(_BYTE *)(a3 + 8) = v5 & 1;
  return result;
}

uint64_t sub_188D22814(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A220);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v187 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v196 = a1;
  uint64_t v203 = a2;
  uint64_t result = sub_188D22708(a1);
  v202.i64[0] = result;
  unint64_t v197 = v12;
  if (v10 != 1)
  {
    uint64_t v13 = v10;
    unint64_t v14 = v11;
    uint64_t v15 = *v3;
    if (!*v3) {
      goto LABEL_54;
    }
    uint64_t v16 = v3[1];
    uint64_t v17 = v3[2];
    uint64_t v18 = v3[3];
    uint64_t v19 = v3[4];
    uint64_t v208 = *v3;
    uint64_t v209 = v16;
    uint64_t v210 = v17;
    uint64_t v211 = v18;
    uint64_t v212 = v19;
    if (v16 < 1)
    {
LABEL_54:
      uint64_t v54 = sub_188DF8B4C();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v54 - 8) + 8LL))(v196, v54);
      goto LABEL_55;
    }

    unint64_t v199 = v11;
    uint64_t v194 = v10;
    uint64_t v20 = v3[5];
    uint64_t v234 = v15;
    uint64_t v235 = v16;
    uint64_t v236 = v17;
    uint64_t v237 = v18;
    uint64_t v238 = v19;
    uint64_t v239 = v20;
    swift_unknownObjectRetain();
    unint64_t v21 = sub_188D36DF0();
    swift_unknownObjectRelease();
    *(void *)&__int128 v213 = v20;
    *((void *)&v213 + _HashNode.ensureUnique(isUnique:)(v1 & 1) = v21;
    *(void *)&__int128 v214 = 0LL;
    uint64_t v198 = v3;
    unint64_t v195 = v8;
    if (v197 >= v21) {
      goto LABEL_101;
    }
    uint64_t v22 = 0LL;
    uint64_t v200 = (uint64_t *)&v213 + 1;
    v201.i64[0] = v15 + 24;
    uint64_t v23 = v20;
    unint64_t v24 = v197;
    while (1)
    {
      unint64_t v29 = *(unsigned __int8 *)(v15 + 18);
      swift_unknownObjectRetain();
      if (v21 <= v29)
      {
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
        goto LABEL_156;
      }

      if (v22)
      {
        char v30 = (4 * *((_BYTE *)v22 + 18) + 8) & 0x3C;
        if (((v21 >> v30) & 0xF) != 0) {
          break;
        }
      }

      char v31 = (4 * *(_BYTE *)(v15 + 18) + 8) & 0x3C;
      unint64_t v32 = (v21 >> v31) & 0xF;
      if (*(_BYTE *)(v15 + 18))
      {
        if (v32 >= *(unsigned __int16 *)(v15 + 16))
        {
          swift_unknownObjectRetain();
          if (!v32) {
            goto LABEL_162;
          }
          goto LABEL_38;
        }

        uint64_t v33 = *(void *)(v201.i64[0] + 40 * ((v21 >> v31) & 0xF));
        char v34 = (4 * *(_BYTE *)(v33 + 18) + 8) & 0x3C;
        unint64_t v35 = (v21 >> v34) & 0xF;
        if (!*(_BYTE *)(v33 + 18))
        {
          if (v35)
          {
            *((void *)&v213 + _HashNode.ensureUnique(isUnique:)(v1 & 1) = ((v35 - 1) << v34) | ((-15LL << v34) - 1) & v21;
            *(void *)&__int128 v214 = v33;
            swift_unknownObjectRetain();
            uint64_t v22 = (uint64_t *)v33;
            goto LABEL_39;
          }

          swift_unknownObjectRetain();
          goto LABEL_37;
        }

        uint64_t v36 = v33 + 24;
        if (v35 >= *(unsigned __int16 *)(v33 + 16))
        {
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          goto LABEL_33;
        }

        uint64_t v193 = v33 + 24;
        uint64_t v22 = *(uint64_t **)(v36 + 40 * ((v21 >> v34) & 0xF));
        uint64_t v37 = (4 * *((_BYTE *)v22 + 18) + 8) & 0x3C;
        unint64_t v38 = (v21 >> v37) & 0xF;
        if (!*((_BYTE *)v22 + 18))
        {
          if (v38)
          {
            *((void *)&v213 + _HashNode.ensureUnique(isUnique:)(v1 & 1) = ((v38 - 1) << v37) | ((-15LL << v37) - 1) & v21;
            *(void *)&__int128 v214 = v22;
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            goto LABEL_52;
          }

          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          uint64_t v36 = v193;
          goto LABEL_33;
        }

        uint64_t v39 = v22 + 3;
        if (v38 < *((unsigned __int16 *)v22 + 8))
        {
          uint64_t v190 = v22;
          uint64_t v22 = (uint64_t *)v39[5 * ((v21 >> v37) & 0xF)];
          int v40 = *((unsigned __int8 *)v22 + 18);
          char v41 = (4 * v40 + 8) & 0x3C;
          uint64_t v42 = (v21 >> v41) & 0xF;
          *(void *)&v219[0] = v42;
          if (v40)
          {
            uint64_t v191 = v39;
            uint64_t v192 = v37;
            uint64_t v43 = (v21 >> v37) & 0xF;
            uint64_t v188 = v22 + 3;
            unint64_t v189 = (unsigned __int16 *)(v22 + 2);
            HIDWORD(v187) = v40;
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            LODWORD(v189) = sub_188DF1114(v189, (uint64_t)v188, (uint64_t *)v219, (uint64_t)&v213, SBYTE4(v187));
            swift_unknownObjectRelease();
            if ((v189 & 1) != 0)
            {
              uint64_t v22 = (uint64_t *)v214;
              goto LABEL_48;
            }

LABEL_101:
        swift_unknownObjectRetain();
        sub_188D36E50(v21, (uint64_t)v219);
        swift_unknownObjectRelease();
        uint64_t v22 = 0LL;
        unint64_t v110 = *((void *)&v219[0] + 1);
        uint64_t v111 = *(void *)&v219[0];
        unsigned int v112 = LOBYTE(v219[1]);
        v115.i32[0] = *(_DWORD *)((char *)&v219[1] + 1);
        uint16x8_t v114 = vmovl_u8(v115);
        uint64_t v113 = BYTE5(v219[1]);
LABEL_102:
        uint32x4_t v116 = vmovl_u16((uint16x4_t)(v114.i64[0] & 0xFF00FF00FF00FFLL));
        v117.i64[0] = v116.u32[0];
        v117.i64[1] = v116.u32[1];
        uint64x2_t v118 = v117;
        v117.i64[0] = v116.u32[2];
        v117.i64[1] = v116.u32[3];
        int8x16_t v119 = vorrq_s8( (int8x16_t)vshlq_u64(v118, (uint64x2_t)xmmword_188DF9330),  (int8x16_t)vshlq_u64(v117, (uint64x2_t)xmmword_188DF9320));
        unint64_t v120 = sub_188D5537C( v111,  v110,  *(void *)&vorr_s8(*(int8x8_t *)v119.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v119, v119, 8uLL)) | (v113 << 40) | v112);
        swift_bridgeObjectRelease();
        if (v199 >> 14 < v120 >> 14)
        {
LABEL_103:
          if (v22)
          {
            uint64_t v121 = &v22[3 * ((v21 >> ((4 * *((_BYTE *)v22 + 18) + 8) & 0x3C)) & 0xF)];
            uint64_t v123 = v121[3];
            unint64_t v122 = v121[4];
            unsigned int v124 = *((unsigned __int8 *)v121 + 40);
            v27.i32[0] = *(_DWORD *)((char *)v121 + 41);
            uint16x8_t v202 = vmovl_u8(v27);
            uint64_t v125 = *((unsigned __int8 *)v121 + 45);
            swift_bridgeObjectRetain();
            v126.i64[0] = v202.i64[0];
          }

          else
          {
            swift_unknownObjectRetain();
            sub_188D36E50(v21, (uint64_t)v219);
            swift_unknownObjectRelease();
            unint64_t v122 = *((void *)&v219[0] + 1);
            uint64_t v123 = *(void *)&v219[0];
            unsigned int v124 = LOBYTE(v219[1]);
            v128.i32[0] = *(_DWORD *)((char *)&v219[1] + 1);
            uint16x8_t v126 = vmovl_u8(v128);
            uint64_t v125 = BYTE5(v219[1]);
          }

          unint64_t v129 = v195;
          if (v124 <= v126.u8[6])
          {
            uint64_t v142 = sub_188DF8B4C();
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v142 - 8) + 56LL))( v129,  1LL,  1LL,  v142);
          }

          else
          {
            uint32x4_t v130 = vmovl_u16((uint16x4_t)(v126.i64[0] & 0xFF00FF00FF00FFLL));
            v131.i64[0] = v130.u32[0];
            v131.i64[1] = v130.u32[1];
            uint64x2_t v132 = v131;
            v131.i64[0] = v130.u32[2];
            v131.i64[1] = v130.u32[3];
            int8x16_t v133 = vorrq_s8( (int8x16_t)vshlq_u64(v132, (uint64x2_t)xmmword_188DF9330),  (int8x16_t)vshlq_u64(v131, (uint64x2_t)xmmword_188DF9320));
            unint64_t v134 = sub_188D5537C( v123,  v122,  *(void *)&vorr_s8(*(int8x8_t *)v133.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v133, v133, 8uLL)) | (v125 << 40) | v124);
            swift_bridgeObjectRetain();
            unint64_t v135 = sub_188D0EFD0(v134, v123, v122);
            unint64_t v137 = v136;
            unint64_t v139 = v138;
            unint64_t v141 = v140;
            swift_bridgeObjectRelease();
            sub_188DCAFBC(v135, v137, v139, v141);
            uint64_t v142 = sub_188DF8B4C();
            (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v142 - 8) + 56LL))( v129,  0LL,  1LL,  v142);
          }

          unsigned int v143 = v198;
          swift_bridgeObjectRelease();
          sub_188DF8B4C();
          uint64_t v144 = *(void *)(v142 - 8);
          uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v144 + 48))(v129, 1LL, v142);
          if ((_DWORD)result == 1) {
            goto LABEL_164;
          }
          uint64_t v145 = *(void (**)(uint64_t, uint64_t))(v144 + 8);
          uint64_t v146 = v144;
          uint64_t v147 = v203;
          v145(v203, v142);
          v145(v196, v142);
          uint64_t v194 = v146;
          unint64_t v195 = (char *)v142;
          (*(void (**)(uint64_t, char *, uint64_t))(v146 + 32))(v147, v129, v142);
          __int128 v148 = v143[1];
          v219[0] = *v143;
          v219[1] = v148;
          v219[2] = v143[2];
          v202.i64[0] = *((void *)&v219[2] + 1);
          if ((void)v213 == *((void *)&v219[2] + 1))
          {
            uint64_t v149 = *(void *)&v219[0];
            uint64_t v200 = *(uint64_t **)&v219[1];
            v201.i64[0] = *((void *)&v219[0] + 1);
            uint64_t v198 = *(_OWORD **)&v219[2];
            unint64_t v199 = *((void *)&v219[1] + 1);
            unint64_t v150 = *((void *)&v213 + 1);
            swift_unknownObjectRetain_n();
            unint64_t v151 = sub_188D36DF0();
            sub_188D087F8((uint64_t)v219);
            if (v150 < v151)
            {
              if ((void)v214)
              {
                char v152 = (4 * *(_BYTE *)(v214 + 18) + 8) & 0x3C;
                unint64_t v153 = ((v150 >> v152) & 0xF) + 1;
                if (v153 < *(unsigned __int16 *)(v214 + 16))
                {
                  *((void *)&v213 + _HashNode.ensureUnique(isUnique:)(v1 & 1) = (v153 << v152) | ((-15LL << v152) - 1) & v150;
                  goto LABEL_117;
                }
              }

              uint64_t v225 = v149;
              *(void *)&__int128 v226 = v201.i64[0];
              *((void *)&v226 + _HashNode.ensureUnique(isUnique:)(v1 & 1) = v200;
              *(void *)&__int128 v227 = v199;
              *((void *)&v227 + _HashNode.ensureUnique(isUnique:)(v1 & 1) = v198;
              swift_unknownObjectRetain();
              char v154 = sub_188D7F780((uint64_t)&v213);
              sub_188D087F8((uint64_t)v219);
              if ((v154 & 1) != 0)
              {
LABEL_117:
                sub_188D087F8((uint64_t)v219);
                if (!v149) {
                  return (*(uint64_t (**)(uint64_t, uint64_t, char *))(v194 + 16))(v196, v203, v195);
                }
              }

              else
              {
                unint64_t v155 = sub_188D36DF0();
                sub_188D087F8((uint64_t)v219);
                *(void *)&__int128 v213 = v202.i64[0];
                *((void *)&v213 + _HashNode.ensureUnique(isUnique:)(v1 & 1) = v155;
                *(void *)&__int128 v214 = 0LL;
                if (!v149) {
                  return (*(uint64_t (**)(uint64_t, uint64_t, char *))(v194 + 16))(v196, v203, v195);
                }
              }

              unint64_t v197 = v149 + 24;
              unint64_t v156 = *((void *)&v213 + 1);
              while (1)
              {
                uint64_t v220 = v149;
                unint64_t v221 = v201.i64[0];
                v222 = v200;
                unint64_t v223 = v199;
                uint64_t v224 = v198;
                int v157 = *(unsigned __int8 *)(v149 + 18);
                uint64_t v158 = *(unsigned __int16 *)(v149 + 16);
                swift_unknownObjectRetain_n();
                sub_188D087F8((uint64_t)v219);
                sub_188D087F8((uint64_t)v219);
                if ((void)v213 != v202.i64[0]) {
                  goto LABEL_153;
                }
                uint64_t v159 = v214;
                if ((void)v214)
                {
                  swift_bridgeObjectRetain();
                }

                else
                {
                  swift_unknownObjectRetain();
                  sub_188D36E50(v156, (uint64_t)&v205);
                  sub_188D087F8((uint64_t)v219);
                }

                uint64_t v160 = sub_188DF7FD0();
                uint64_t v162 = v161;
                uint64_t v164 = v163;
                uint64_t v166 = v165;
                swift_bridgeObjectRelease();
                sub_188DCAB58(v160, v162, v164, v166);
                swift_bridgeObjectRelease();
                int v167 = *(unsigned __int8 *)(v149 + 18);
                uint64_t v168 = *(unsigned __int16 *)(v149 + 16);
                swift_unknownObjectRetain_n();
                sub_188D087F8((uint64_t)v219);
                sub_188D087F8((uint64_t)v219);
                if (v159)
                {
                  char v169 = (4 * *(_BYTE *)(v159 + 18) + 8) & 0x3C;
                  unint64_t v170 = ((v156 >> v169) & 0xF) + 1;
                  if (v170 < *(unsigned __int16 *)(v159 + 16))
                  {
                    unint64_t v156 = (v170 << v169) | ((-15LL << v169) - 1) & v156;
                    *((void *)&v213 + _HashNode.ensureUnique(isUnique:)(v1 & 1) = v156;
                    goto LABEL_122;
                  }
                }

                char v171 = (4 * *(_BYTE *)(v149 + 18) + 8) & 0x3C;
                uint64_t v172 = (v156 >> v171) & 0xF;
                if (*(_BYTE *)(v149 + 18))
                {
                  uint64_t v173 = *(void *)(v197 + 40 * ((v156 >> v171) & 0xF));
                  int v174 = *(unsigned __int8 *)(v173 + 18);
                  char v175 = (4 * v174 + 8) & 0x3C;
                  unint64_t v205 = (v156 >> v175) & 0xF;
                  if (v174)
                  {
                    sub_188D07F48((uint64_t)v219);
                    swift_unknownObjectRetain();
                    char v176 = sub_188D800A4(v173 + 24, (uint64_t *)&v205, (uint64_t)&v213, v173, v174);
                    swift_unknownObjectRelease();
                    if ((v176 & 1) != 0)
                    {
                      unint64_t v156 = *((void *)&v213 + 1);
                      goto LABEL_144;
                    }
                  }

                  else
                  {
                    unint64_t v177 = ((v156 >> v175) & 0xF) + 1;
                    if (v177 < *(unsigned __int16 *)(v173 + 16))
                    {
                      unint64_t v156 = (v177 << v175) | ((-15LL << v175) - 1) & v156;
                      *((void *)&v213 + _HashNode.ensureUnique(isUnique:)(v1 & 1) = v156;
                      *(void *)&__int128 v214 = v173;
                      swift_unknownObjectRetain();
                      goto LABEL_144;
                    }

                    swift_unknownObjectRetain();
                  }

                  uint64_t v179 = v172 + 1;
                  if (v172 + 1 < (unint64_t)*(unsigned __int16 *)(v149 + 16))
                  {
                    unint64_t v180 = v197 + 40LL * v179;
                    __int128 v182 = *(_OWORD *)v180;
                    __int128 v181 = *(_OWORD *)(v180 + 16);
                    v218 = *(_OWORD **)(v180 + 32);
                    __int128 v216 = v182;
                    __int128 v217 = v181;
                    unsigned int v183 = *(unsigned __int8 *)(v182 + 18) + 1;
                    if (((v183 >> 8) & 1) != 0) {
                      goto LABEL_159;
                    }
                    *((void *)&v213 + _HashNode.ensureUnique(isUnique:)(v1 & 1) = ((-256LL << (4 * (v183 & 0xF))) | 0xFF) & (*((void *)&v213 + 1) & ((-15LL << v171) - 1) | (v179 << v171));
                    unint64_t v156 = *((void *)&v213 + 1);
                    swift_unknownObjectRetain();
                    uint64_t v184 = sub_188D7F6E0(v156);
                    sub_188D087F8((uint64_t)&v216);
                    *(void *)&__int128 v214 = v184;
LABEL_144:
                    sub_188D087F8((uint64_t)v219);
LABEL_122:
                    sub_188D087F8((uint64_t)v219);
                    continue;
                  }

                  sub_188D087F8((uint64_t)v219);
                  int v178 = *(unsigned __int8 *)(v149 + 18);
                }

                else
                {
                  if (v172 + 1 < (unint64_t)*(unsigned __int16 *)(v149 + 16))
                  {
                    unint64_t v156 = ((v172 + 1) << v171) | ((-15LL << v171) - 1) & v156;
                    *((void *)&v213 + _HashNode.ensureUnique(isUnique:)(v1 & 1) = v156;
                    sub_188D087F8((uint64_t)v219);
                    *(void *)&__int128 v214 = v149;
                    continue;
                  }

                  int v178 = 0;
                }

                uint64_t v185 = *(unsigned __int16 *)(v149 + 16);
                char v186 = *(_BYTE *)(v149 + 18);
                swift_unknownObjectRetain();
                sub_188D087F8((uint64_t)v219);
                sub_188D087F8((uint64_t)v219);
                unint64_t v156 = ((-15LL << ((4 * v186 + 8) & 0x3C)) - 1) & v178 | (unint64_t)(v185 << ((4 * v186 + 8) & 0x3C));
                *(void *)&__int128 v213 = v202.i64[0];
                *((void *)&v213 + _HashNode.ensureUnique(isUnique:)(v1 & 1) = v156;
                *(void *)&__int128 v214 = 0LL;
              }
            }

LABEL_161:
            __break(1u);
LABEL_162:
            swift_unknownObjectRelease();
LABEL_163:
            uint64_t result = swift_unknownObjectRelease();
            __break(1u);
LABEL_164:
            __break(1u);
            return result;
          }

LABEL_160:
          __break(1u);
          goto LABEL_161;
        }

        uint64_t v127 = sub_188DF8B4C();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v127 - 8) + 8LL))(v196, v127);
        uint64_t v3 = v198;
        unint64_t v14 = v199;
        uint64_t v13 = v194;
LABEL_55:
        unint64_t v55 = v197;
        unint64_t v205 = v202.i64[0];
        uint64_t v206 = v197;
        uint64_t v207 = v13;
        __int128 v56 = *((_OWORD *)v3 + 2);
        v219[1] = *((_OWORD *)v3 + 1);
        v219[2] = v56;
        v219[0] = *(_OWORD *)v3;
        if (v202.i64[0] == *((void *)&v56 + 1))
        {
          if (v13)
          {
            unint64_t v57 = v13 + 24 * ((v197 >> ((4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C)) & 0xF);
            uint64_t v58 = *(void *)(v57 + 24);
            unint64_t v59 = *(void *)(v57 + 32);
            swift_bridgeObjectRetain();
          }

          else
          {
            uint64_t v225 = *(void *)&v219[0];
            __int128 v226 = *(_OWORD *)((char *)v219 + 8);
            __int128 v227 = *(_OWORD *)((char *)&v219[1] + 8);
            swift_unknownObjectRetain();
            sub_188D36E50(v55, (uint64_t)&v220);
            sub_188D087F8((uint64_t)v219);
            uint64_t v58 = v220;
            unint64_t v59 = v221;
          }

          sub_188D0EFDC(v14, v58, v59);
          unint64_t v61 = v60;
          swift_bridgeObjectRelease();
          unint64_t v62 = sub_188DF8420();
          if ((v63 & 1) != 0) {
            unint64_t v62 = v61;
          }
          if (v61 >> 14 >= v62 >> 14)
          {
            uint64_t v64 = sub_188DF8438();
            uint64_t v66 = v65;
            uint64_t v68 = v67;
            uint64_t v70 = v69;
            swift_bridgeObjectRelease();
            unint64_t v195 = v70;
            sub_188DCAB58(v64, v66, v68, v70);
            uint64_t v71 = *(void *)&v219[0];
            uint64_t v200 = *(uint64_t **)&v219[1];
            v201.i64[0] = *((void *)&v219[0] + 1);
            uint64_t v198 = *(_OWORD **)&v219[2];
            unint64_t v199 = *((void *)&v219[1] + 1);
            swift_unknownObjectRetain_n();
            unint64_t v72 = sub_188D36DF0();
            sub_188D087F8((uint64_t)v219);
            if (v55 < v72)
            {
              if (v13)
              {
                char v73 = (4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C;
                unint64_t v74 = ((v55 >> v73) & 0xF) + 1;
                if (v74 < *(unsigned __int16 *)(v13 + 16))
                {
                  uint64_t v206 = (v74 << v73) | ((-15LL << v73) - 1) & v55;
                  goto LABEL_67;
                }
              }

              uint64_t v220 = v71;
              unint64_t v221 = v201.i64[0];
              v222 = v200;
              unint64_t v223 = v199;
              uint64_t v224 = v198;
              swift_unknownObjectRetain();
              char v75 = sub_188D7F780((uint64_t)&v205);
              sub_188D087F8((uint64_t)v219);
              if ((v75 & 1) != 0)
              {
LABEL_67:
                sub_188D087F8((uint64_t)v219);
                if (!v71) {
                  goto LABEL_97;
                }
              }

              else
              {
                unint64_t v76 = sub_188D36DF0();
                sub_188D087F8((uint64_t)v219);
                unint64_t v205 = v202.i64[0];
                uint64_t v206 = v76;
                uint64_t v207 = 0LL;
                if (!v71)
                {
LABEL_97:
                  uint64_t v108 = sub_188DF8B4C();
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v108 - 8) + 16LL))(v196, v203, v108);
                  return swift_bridgeObjectRelease();
                }
              }

              unint64_t v197 = v71 + 24;
              unint64_t v77 = v206;
              while (1)
              {
                *(void *)&__int128 v216 = v71;
                *((void *)&v216 + _HashNode.ensureUnique(isUnique:)(v1 & 1) = v201.i64[0];
                *(void *)&__int128 v217 = v200;
                *((void *)&v217 + _HashNode.ensureUnique(isUnique:)(v1 & 1) = v199;
                v218 = v198;
                int v78 = *(unsigned __int8 *)(v71 + 18);
                uint64_t v79 = *(unsigned __int16 *)(v71 + 16);
                swift_unknownObjectRetain_n();
                sub_188D087F8((uint64_t)v219);
                sub_188D087F8((uint64_t)v219);
                if (v205 != v202.i64[0])
                {
                  __break(1u);
LABEL_150:
                  __break(1u);
                  goto LABEL_151;
                }

                uint64_t v80 = v207;
                if (v207)
                {
                  swift_bridgeObjectRetain();
                }

                else
                {
                  swift_unknownObjectRetain();
                  sub_188D36E50(v77, (uint64_t)v204);
                  sub_188D087F8((uint64_t)v219);
                }

                uint64_t v81 = sub_188DF7FD0();
                uint64_t v83 = v82;
                uint64_t v85 = v84;
                uint64_t v87 = v86;
                swift_bridgeObjectRelease();
                sub_188DCAB58(v81, v83, v85, v87);
                swift_bridgeObjectRelease();
                int v88 = *(unsigned __int8 *)(v71 + 18);
                uint64_t v89 = *(unsigned __int16 *)(v71 + 16);
                swift_unknownObjectRetain_n();
                sub_188D087F8((uint64_t)v219);
                sub_188D087F8((uint64_t)v219);
                if (v80)
                {
                  char v90 = (4 * *(_BYTE *)(v80 + 18) + 8) & 0x3C;
                  unint64_t v91 = ((v77 >> v90) & 0xF) + 1;
                  if (v91 < *(unsigned __int16 *)(v80 + 16))
                  {
                    unint64_t v77 = (v91 << v90) | ((-15LL << v90) - 1) & v77;
                    uint64_t v206 = v77;
                    goto LABEL_72;
                  }
                }

                char v92 = (4 * *(_BYTE *)(v71 + 18) + 8) & 0x3C;
                uint64_t v93 = (v77 >> v92) & 0xF;
                if (*(_BYTE *)(v71 + 18))
                {
                  uint64_t v94 = *(void *)(v197 + 40 * ((v77 >> v92) & 0xF));
                  int v95 = *(unsigned __int8 *)(v94 + 18);
                  char v96 = (4 * v95 + 8) & 0x3C;
                  v204[0] = (v77 >> v96) & 0xF;
                  if (v95)
                  {
                    sub_188D07F48((uint64_t)v219);
                    swift_unknownObjectRetain();
                    char v97 = sub_188D800A4(v94 + 24, v204, (uint64_t)&v205, v94, v95);
                    swift_unknownObjectRelease();
                    if ((v97 & 1) != 0)
                    {
                      unint64_t v77 = v206;
                      goto LABEL_94;
                    }
                  }

                  else
                  {
                    unint64_t v98 = ((v77 >> v96) & 0xF) + 1;
                    if (v98 < *(unsigned __int16 *)(v94 + 16))
                    {
                      unint64_t v77 = (v98 << v96) | ((-15LL << v96) - 1) & v77;
                      uint64_t v206 = v77;
                      uint64_t v207 = v94;
                      swift_unknownObjectRetain();
                      goto LABEL_94;
                    }

                    swift_unknownObjectRetain();
                  }

                  uint64_t v100 = v93 + 1;
                  if (v93 + 1 < (unint64_t)*(unsigned __int16 *)(v71 + 16))
                  {
                    unint64_t v101 = v197 + 40LL * v100;
                    __int128 v103 = *(_OWORD *)v101;
                    __int128 v102 = *(_OWORD *)(v101 + 16);
                    uint64_t v215 = *(void *)(v101 + 32);
                    __int128 v213 = v103;
                    __int128 v214 = v102;
                    unsigned int v104 = *(unsigned __int8 *)(v103 + 18) + 1;
                    if (((v104 >> 8) & 1) != 0) {
                      goto LABEL_155;
                    }
                    uint64_t v206 = ((-256LL << (4 * (v104 & 0xF))) | 0xFF) & (v206 & ((-15LL << v92) - 1) | (v100 << v92));
                    unint64_t v77 = v206;
                    swift_unknownObjectRetain();
                    uint64_t v105 = sub_188D7F6E0(v77);
                    sub_188D087F8((uint64_t)&v213);
                    uint64_t v207 = v105;
LABEL_94:
                    sub_188D087F8((uint64_t)v219);
LABEL_72:
                    sub_188D087F8((uint64_t)v219);
                    continue;
                  }

                  sub_188D087F8((uint64_t)v219);
                  int v99 = *(unsigned __int8 *)(v71 + 18);
                }

                else
                {
                  if (v93 + 1 < (unint64_t)*(unsigned __int16 *)(v71 + 16))
                  {
                    unint64_t v77 = ((v93 + 1) << v92) | ((-15LL << v92) - 1) & v77;
                    uint64_t v206 = v77;
                    sub_188D087F8((uint64_t)v219);
                    uint64_t v207 = v71;
                    continue;
                  }

                  int v99 = 0;
                }

                uint64_t v106 = *(unsigned __int16 *)(v71 + 16);
                char v107 = *(_BYTE *)(v71 + 18);
                swift_unknownObjectRetain();
                sub_188D087F8((uint64_t)v219);
                sub_188D087F8((uint64_t)v219);
                unint64_t v77 = ((-15LL << ((4 * v107 + 8) & 0x3C)) - 1) & v99 | (unint64_t)(v106 << ((4 * v107 + 8) & 0x3C));
                unint64_t v205 = v202.i64[0];
                uint64_t v206 = v77;
                uint64_t v207 = 0LL;
              }
            }

LABEL_158:
            __break(1u);
LABEL_159:
            __break(1u);
            goto LABEL_160;
          }

LABEL_157:
          __break(1u);
          goto LABEL_158;
        }

LABEL_156:
        __break(1u);
        goto LABEL_157;
      }
    }

    unint64_t v21 = ((((v21 >> v30) & 0xF) - 1) << v30) | ((-15LL << v30) - 1) & v21;
    *((void *)&v213 + _HashNode.ensureUnique(isUnique:)(v1 & 1) = v21;
    swift_unknownObjectRelease();
    if (v23 != v20) {
      goto LABEL_152;
    }
    goto LABEL_41;
  }

  return result;
}

uint64_t sub_188D23D84@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_188D2208C(0xFuLL, *(void *)(v1 + 16), *(void *)(v1 + 24));
  *(void *)a1 = result;
  *(_BYTE *)(a1 + 8) = v4 & 1;
  return result;
}

uint64_t sub_188D23DC0@<X0>(uint64_t a1@<X8>)
{
  char v4 = (unint64_t *)v1[2];
  uint64_t v3 = v1[3];
  uint64_t v5 = v1[4];
  unint64_t v6 = *v4;
  *char v4 = 4LL;
  uint64_t result = sub_188D2208C(v6, v3, v5);
  *(void *)a1 = result;
  *(_BYTE *)(a1 + 8) = v8 & 1;
  return result;
}

uint64_t TreeSet.isDisjoint(with:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return _HashNode.isDisjoint<A>(_:with:)( 0LL,  a1,  a2,  a4,  a5,  a7,  MEMORY[0x18961AFC8] + 8LL,  MEMORY[0x18961AFC8] + 8LL,  a8) & 1;
}

uint64_t TreeSet.isDisjoint<A>(with:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return _HashNode.isDisjoint<A>(_:with:)(0LL, a1, a2, a4, a5, a7, MEMORY[0x18961AFC8] + 8LL, a8, a9);
}

uint64_t TreeSet.isDisjoint<A>(with:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v18 = (char *)v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (TreeSet.isEmpty.getter(v19, v20))
  {
    char v22 = 1;
  }

  else
  {
    uint64_t v23 = type metadata accessor for TreeSet(0LL, a5, a7, v21);
    if (v23 == a6)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, a6);
      swift_dynamicCast();
      char v22 = _HashNode.isDisjoint<A>(_:with:)( 0LL,  v26[0],  v26[1],  a2,  a3,  a5,  MEMORY[0x18961AFC8] + 8LL,  MEMORY[0x18961AFC8] + 8LL,  a7);
      swift_release();
    }

    else
    {
      MEMORY[0x1895F8858](v23);
      v26[-8] = a5;
      v26[-7] = a6;
      v26[-6] = a7;
      v26[-5] = a8;
      v26[-4] = a2;
      v26[-3] = a3;
      uint64_t v25 = a4;
      char v22 = sub_188DF8018();
    }
  }

  return v22 & 1;
}

BOOL sub_188D24004(uint64_t a1)
{
  return !TreeSet.contains(_:)(a1, v1[6], v1[7], v1[8], v1[2], v1[4]);
}

uint64_t _HashNode.filter(_:_:)@<X0>( unsigned int a1@<W0>, uint64_t (*a2)(char *, char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  if (_HashNode.isCollisionNode.getter(a4, a5, a6, a7, a8)) {
    return _HashNode._filter_slow(_:_:)(a1, a2, a3, a4, a6, a7, a8, a9);
  }
  uint64_t v18 = (unsigned int *)nullsub_1(a4 + 16, a4 + 32, a6, a7, a8);
  return sub_188D241D4(v18, v19, a1, a2, a3, a6, a9, a7, a8);
}

uint64_t _HashNode._filter_slow(_:_:)@<X0>( unsigned int a1@<W0>, uint64_t (*a2)(char *, char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v15 = (unsigned int *)nullsub_1(a4 + 16, a4 + 32, a5, a6, a7);
  return sub_188D24930(v15, v16, a1, a2, a3, a5, a8, a6, a7);
}

uint64_t sub_188D241D4@<X0>( unsigned int *a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t (*a4)(char *, char *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = v9;
  uint64_t v11 = a6;
  uint64_t v93 = a4;
  uint64_t v94 = a5;
  uint64_t v98 = a2;
  int v95 = a1;
  uint64_t v76 = a7;
  uint64_t v13 = type metadata accessor for _HashNode.Builder(255LL, a6, a8, a9);
  uint64_t v14 = sub_188DF8384();
  uint64_t v81 = *(void *)(v14 - 8);
  uint64_t v82 = v14;
  uint64_t v15 = MEMORY[0x1895F8858](v14);
  uint64_t v80 = (char *)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  unint64_t v91 = (char *)&v76 - v17;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v18 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  unint64_t v77 = (char *)&v76 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v18);
  uint64_t v21 = (char *)&v76 - v20;
  uint64_t v22 = type metadata accessor for _HashNode.Builder.Kind(0LL, v11, a8, a9);
  uint64_t v23 = MEMORY[0x1895F8858](v22);
  uint64_t v25 = (char *)&v76 - v24;
  uint64_t v83 = *(void *)(v13 - 8);
  uint64_t v26 = MEMORY[0x1895F8858](v23);
  uint64_t v79 = (char *)&v76 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = MEMORY[0x1895F8858](v26);
  int v78 = (char *)&v76 - v29;
  MEMORY[0x1895F8858](v28);
  char v31 = (char *)&v76 - v30;
  swift_storeEnumTagMultiPayload();
  char v90 = v31;
  unsigned int v88 = a3;
  uint64_t v92 = a9;
  unint64_t v32 = v95;
  _HashNode.Builder.init(_:_:)(a3, (uint64_t)v25, v11, a8, a9, v31);
  unsigned int v33 = *v32;
  uint64_t v84 = v13;
  unsigned int v99 = v33;
  if (!v33)
  {
    uint64_t v100 = v9;
    unsigned int v99 = v32[1];
    if (v99) {
      goto LABEL_17;
    }
LABEL_39:
    uint64_t v67 = v83;
LABEL_41:
    (*(void (**)(_BYTE *, uint64_t))(v67 + 8))(v90, v13);
    uint64_t v73 = 1LL;
    uint64_t v74 = v13;
    uint64_t v75 = v76;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v67 + 56))(v75, v73, 1LL, v74);
  }

  int v97 = 0;
  unsigned int v34 = 0;
  unint64_t v35 = v21;
  while (1)
  {
    unsigned int v96 = v34;
    uint64_t v36 = _HashNode.UnsafeHandle.itemPtr(at:)(v34, (uint64_t)v32, v98);
    uint64_t v37 = *(int *)(TupleTypeMetadata2 + 48);
    unint64_t v38 = &v35[v37];
    uint64_t v39 = v36 + v37;
    int v40 = v35;
    uint64_t v41 = *(void *)(v11 - 8);
    uint64_t v86 = *(void (**)(char *, uint64_t, uint64_t))(v41 + 16);
    v86(v40, v36, v11);
    uint64_t v42 = v11;
    uint64_t v43 = *(void *)(a8 - 8);
    uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16);
    uint64_t v87 = v39;
    uint64_t v85 = v44;
    v44((uint64_t)v38, v39, a8);
    char v45 = v93(v40, v38);
    uint64_t v100 = v10;
    if (v10)
    {
      (*(void (**)(_BYTE *, uint64_t))(v83 + 8))(v90, v84);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v38, a8);
      return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v40, v42);
    }

    char v46 = v45;
    unsigned int v47 = __clz(__rbit32(v99));
    v99 &= v99 - 1;
    (*(void (**)(char *, uint64_t))(v43 + 8))(v38, a8);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v42);
    uint64_t v11 = v42;
    unint64_t v35 = v40;
    if ((v46 & 1) == 0) {
      break;
    }
    unint64_t v32 = v95;
    if ((v97 & 1) != 0)
    {
      uint64_t v48 = v77;
      uint64_t v49 = (uint64_t)&v77[*(int *)(TupleTypeMetadata2 + 48)];
      v86(v77, v36, v11);
      v85(v49, v87, a8);
      uint64_t v50 = (uint64_t)v48;
      uint64_t v13 = v84;
      _HashNode.Builder.addNewItem(_:_:at:)(v88, v50, v49, v47, v84);
      if (!v99) {
        goto LABEL_19;
      }
      goto LABEL_4;
    }

    if (!v99)
    {
      uint64_t v13 = v84;
      unsigned int v99 = v95[1];
      if (!v99) {
        goto LABEL_39;
      }
LABEL_17:
      TupleTypeMetadata2 = a8;
      uint64_t v87 = v11;
      int v97 = 0;
LABEL_23:
      uint64_t v52 = 0LL;
      unsigned int v96 = v88 + 5;
      while (1)
      {
        int v53 = v52;
        uint64_t v54 = v87;
        uint64_t v55 = TupleTypeMetadata2;
        uint64_t v56 = v92;
        unint64_t v57 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v52, v32, v98, v87, TupleTypeMetadata2, v92);
        uint64_t v59 = *v57;
        uint64_t v58 = v57[1];
        swift_retain();
        unint64_t v60 = v91;
        uint64_t v61 = v58;
        uint64_t v62 = v100;
        _HashNode.filter(_:_:)(v96, v93, v94, v59, v61, v54, v55, v56);
        uint64_t v100 = v62;
        if (v62)
        {
          (*(void (**)(_BYTE *, uint64_t))(v83 + 8))(v90, v13);
          return swift_release();
        }

        uint64_t v63 = __clz(__rbit32(v99));
        v99 &= v99 - 1;
        swift_release();
        uint64_t v64 = v80;
        uint64_t v65 = v81;
        uint64_t v66 = v82;
        (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v80, v60, v82);
        uint64_t v67 = v83;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48))(v64, 1LL, v13) == 1)
        {
          uint64_t v68 = *(void (**)(char *, uint64_t))(v65 + 8);
          v68(v64, v66);
          if ((v97 & 1) != 0)
          {
            uint64_t v70 = *v57;
            uint64_t v69 = v57[1];
            swift_retain();
            _HashNode.Builder.addNewChildNode(_:_:at:)(v88, v70, v69, v63, v84);
            v68(v91, v66);
            if (!v99)
            {
              uint64_t v13 = v84;
              goto LABEL_45;
            }

            int v97 = 1;
          }

          else
          {
            v68(v91, v66);
            if (!v99)
            {
              uint64_t v13 = v84;
              goto LABEL_41;
            }

            int v97 = 0;
          }

          uint64_t v13 = v84;
          unint64_t v32 = v95;
        }

        else
        {
          uint64_t v71 = v78;
          (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v78, v64, v13);
          unint64_t v32 = v95;
          if ((v97 & 1) == 0) {
            _HashNode.Builder.copyItemsAndChildren(_:from:upTo:)(v88, v95, v98, v63, v13);
          }
          uint64_t v72 = (uint64_t)v79;
          (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v79, v71, v13);
          _HashNode.Builder.addNewChildBranch(_:_:at:)(v88, v72, v63, v13);
          (*(void (**)(char *, uint64_t))(v67 + 8))(v71, v13);
          (*(void (**)(char *, uint64_t))(v65 + 8))(v91, v66);
          if (!v99) {
            goto LABEL_44;
          }
          int v97 = 1;
        }

        uint64_t v52 = (v53 + 1);
      }
    }

    int v97 = 0;
LABEL_5:
    uint64_t v10 = v100;
    unsigned int v34 = v96 + 1;
  }

  unint64_t v32 = v95;
  if ((v97 & 1) != 0)
  {
    if (!v99)
    {
      unsigned int v99 = v95[1];
      if (v99)
      {
        TupleTypeMetadata2 = a8;
        uint64_t v87 = v11;
        int v97 = 1;
        uint64_t v13 = v84;
        goto LABEL_23;
      }

      uint64_t v13 = v84;
      goto LABEL_44;
    }

    goto LABEL_4;
  }

  uint64_t v13 = v84;
  _HashNode.Builder.copyItems(_:from:upTo:)(v88, v95, v98, v47, v84);
  if (v99)
  {
LABEL_4:
    int v97 = 1;
    goto LABEL_5;
  }

LABEL_44:
  uint64_t v67 = v83;
LABEL_45:
  uint64_t v75 = v76;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v67 + 32))(v76, v90, v13);
  uint64_t v73 = 0LL;
  uint64_t v74 = v13;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v67 + 56))(v75, v73, 1LL, v74);
}

  sub_188D33624(a1, v1, v20);
LABEL_50:
  unint64_t v35 = *(void *)(a1 + 8);
  uint64_t v36 = *(void *)a1 & 0xFFFFFFFFFFFFLL;
  if ((v35 & 0x2000000000000000LL) != 0) {
    uint64_t v36 = HIBYTE(v35) & 0xF;
  }
  return v36 == 0;
}

  __break(1u);
LABEL_45:
  __break(1u);
}

    if (v16 + 0x4000000000000000LL < 0) {
      break;
    }
    v16 *= 2LL;
    if (v15 >= v17)
    {
      sub_188D087F8((uint64_t)v85);
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v73 = v118;
      uint64_t v74 = v119;
      uint64_t v76 = *((void *)&v120 + 1);
      uint64_t v75 = v120;
      a3 = v86;
      goto LABEL_54;
    }
  }

  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  swift_unknownObjectRelease();
  __break(1u);
LABEL_62:
  uint64_t result = swift_unknownObjectRelease();
  __break(1u);
  return result;
}

    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
  }

  __break(1u);
LABEL_49:
  __break(1u);
}

  if ((v18 & 0x2000000000000000LL) != 0) {
    goto LABEL_50;
  }
  if ((v16 & 0xFFFFFFFFFFFFLL) == 0)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }

      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }

  __break(1u);
LABEL_45:
  __break(1u);
}

        if (!v84) {
          goto LABEL_51;
        }
        uint64_t v87 = 0;
LABEL_30:
        unsigned int v88 = v189;
      }

      unsigned int v183 = v87;
      uint64_t v188 = v84;
      v46.i32[0] = (v95 - 1) & v94;
      unsigned int v96 = (uint8x8_t)vcnt_s8(v46);
      v96.i16[0] = vaddlv_u8(v96);
      int v97 = i;
      uint64_t v98 = v193;
      unsigned int v99 = v190;
      uint64_t v100 = _HashNode.UnsafeHandle.itemPtr(at:)(v96.u32[0], (uint64_t)v88, v187);
      unint64_t v101 = (uint64_t)v178;
      __int128 v102 = v179;
      __int128 v103 = *(void (**)(char *, uint64_t, uint64_t))(v179 + 16);
      v103(v178, v100, v98);
      unsigned int v104 = sub_188DF5A9C();
      uint64_t v105 = *(void (**)(uint64_t, uint64_t))(v102 + 8);
      v105(v101, v98);
      uint64_t v184 = v97;
      uint64_t v106 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v97, a4, v191, v98, v192, v99);
      char v107 = *v106;
      uint64_t v108 = v106[1];
      v103((char *)v101, v100, v98);
      uint64_t v109 = v192;
      swift_retain();
      unint64_t v110 = v180;
      _HashNode.removing(_:_:_:)(v173, v101, v104, v107, v108, v98, v109, v99, v180);
      swift_release();
      v105(v101, v98);
      uint64_t v111 = v169;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v169 - 8) + 48LL))(v110, 1LL, v169) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v161 + 8))(v110, v162);
        uint64_t v85 = v172;
        unsigned int v112 = v167;
        uint64_t i = v185;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v172 + 56))(v167, 1LL, 1LL, v185);
      }

      else
      {
        unint64_t v136 = v180 + *(int *)(v165 + 48);
        uint64_t v85 = v172;
        unsigned int v112 = v167;
        uint64_t i = v185;
        (*(void (**)(char *, uint64_t, uint64_t))(v172 + 32))(v167, v180 + *(int *)(v111 + 48), v185);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v85 + 56))(v112, 0LL, 1LL, i);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v109 - 8) + 8LL))(v136, v109);
        v105(v180, v193);
      }

      uint64x2_t v132 = v171;
      uint64x2_t v131 = v170;
      uint64_t v86 = v177;
      unint64_t v137 = v168;
      (*(void (**)(char *, char *, uint64_t))(v170 + 16))(v168, v112, v171);
      unint64_t v138 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v85 + 48))(v137, 1LL, i);
      a4 = v181;
      if (v138 != 1)
      {
        uint64_t v142 = v160;
        (*(void (**)(char *, char *, uint64_t))(v85 + 32))(v160, v137, i);
        unsigned int v143 = v85;
        char v175 = v112;
LABEL_47:
        uint64_t v144 = v176;
        uint64_t v145 = v182;
        if ((v183 & 1) == 0) {
          _HashNode.Builder.copyItemsAndChildren(_:from:upTo:)(v176, v181, v191, v182, i);
        }
        uint64_t v146 = (uint64_t)v164;
        (*(void (**)(char *, char *, uint64_t))(v143 + 16))(v164, v142, i);
        _HashNode.Builder.addNewChildBranch(_:_:at:)(v144, v146, v145, i);
        (*(void (**)(char *, uint64_t))(v143 + 8))(v142, i);
        (*(void (**)(char *, uint64_t))(v131 + 8))(v175, v132);
        uint64_t v85 = v143;
        a4 = v181;
        uint64_t v84 = v188;
        LODWORD(i) = v184;
        if (!v188) {
          goto LABEL_50;
        }
LABEL_29:
        uint64_t v87 = 1;
        goto LABEL_30;
      }

      unint64_t v139 = v112;
      unint64_t v140 = v137;
      unint64_t v141 = *(void (**)(char *, uint64_t))(v131 + 8);
      v141(v139, v132);
      v141(v140, v132);
      goto LABEL_40;
    }

uint64_t sub_188D24930@<X0>( unsigned int *a1@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, uint64_t (*a4)(char *, char *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9)
{
  uint64_t v55 = a4;
  uint64_t v56 = a5;
  uint64_t v45 = a7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v13 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  unsigned int v47 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v61 = (char *)&v45 - v15;
  uint64_t v16 = type metadata accessor for _HashNode.Builder.Kind(0LL, a6, a8, a9);
  MEMORY[0x1895F8858](v16);
  uint64_t v18 = (char *)&v45 - v17;
  uint64_t v50 = type metadata accessor for _HashNode.Builder(0LL, a6, a8, a9);
  uint64_t v46 = *(void *)(v50 - 8);
  MEMORY[0x1895F8858](v50);
  uint64_t v20 = (char *)&v45 - v19;
  swift_storeEnumTagMultiPayload();
  uint64_t v49 = v20;
  unsigned int v48 = a3;
  uint64_t v54 = a9;
  _HashNode.Builder.init(_:_:)(a3, (uint64_t)v18, a6, a8, a9, v20);
  int8x8_t v21 = (int8x8_t)*a1;
  unsigned int v22 = a1[1];
  unint64_t v57 = a1;
  uint8x8_t v23 = (uint8x8_t)vcnt_s8(v21);
  v23.i16[0] = vaddlv_u8(v23);
  if (v21.i32[0] != v22) {
    v21.i32[0] = v23.i32[0];
  }
  unsigned int v53 = v21.i32[0];
  if (v21.i32[0])
  {
    int v52 = 0;
    unsigned int v24 = 0;
    uint64_t v25 = v61;
    unint64_t v51 = a2;
    while (1)
    {
      LODWORD(v6_HashNode.ensureUnique(isUnique:)(v1 & 1) = v24;
      uint64_t v26 = _HashNode.UnsafeHandle.itemPtr(at:)(v24, (uint64_t)v57, (uint64_t)a2);
      uint64_t v27 = *(int *)(TupleTypeMetadata2 + 48);
      uint64_t v28 = &v25[v27];
      uint64_t v29 = v26 + v27;
      uint64_t v30 = v25;
      uint64_t v31 = *(void *)(a6 - 8);
      uint64_t v58 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 16);
      v58(v25, v26, a6);
      uint64_t v32 = a6;
      uint64_t v33 = *(void *)(a8 - 8);
      unsigned int v34 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 16);
      uint64_t v59 = v29;
      v34(v28, v29, a8);
      uint64_t v35 = v62;
      char v36 = v55(v30, v28);
      if (v35)
      {
        (*(void (**)(_BYTE *, uint64_t))(v46 + 8))(v49, v50);
        (*(void (**)(char *, uint64_t))(v33 + 8))(v28, a8);
        return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      }

      char v37 = v36;
      uint64_t v62 = 0LL;
      (*(void (**)(char *, uint64_t))(v33 + 8))(v28, a8);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      a6 = v32;
      uint64_t v25 = v30;
      if ((v37 & 1) == 0) {
        break;
      }
      unsigned int v24 = (_DWORD)v61 + 1;
      if ((v52 & 1) != 0)
      {
        uint64_t v38 = (uint64_t)v47;
        uint64_t v39 = (uint64_t)&v47[*(int *)(TupleTypeMetadata2 + 48)];
        v58(v47, v26, a6);
        v34((char *)v39, v59, a8);
        a2 = v51;
        _HashNode.Builder.addNewCollision(_:_:_:)(v48, v38, v39, *v51, v50);
LABEL_10:
        if (v24 >= v53)
        {
          uint64_t v41 = v45;
          uint64_t v42 = v46;
          uint64_t v43 = v50;
          (*(void (**)(uint64_t, _BYTE *, uint64_t))(v46 + 32))(v45, v49, v50);
          uint64_t v44 = 0LL;
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(v41, v44, 1LL, v43);
        }
      }

      else
      {
        a2 = v51;
        if (v24 >= v53) {
          goto LABEL_15;
        }
      }
    }

    unsigned int v24 = (_DWORD)v61 + 1;
    a2 = v51;
    if ((v52 & 1) == 0) {
      _HashNode.Builder.copyCollisions(from:upTo:)((uint64_t)v57, v51, (int)v61, v50);
    }
    int v52 = 1;
    goto LABEL_10;
  }

uint64_t Rope.mutatingForEach<A>(from:_:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = *(void *)(a4 + 24);
  void v14[2] = *(void *)(a4 + 16);
  v14[3] = a5;
  v14[4] = v12;
  v14[5] = a6;
  v14[6] = a2;
  _OWORD v14[7] = a3;
  return Rope._mutatingForEach(from:_:)(a1, (uint64_t)sub_188D24F34, (uint64_t)v14, a4);
}

uint64_t Rope.mutatingForEach<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v15[0] = Rope.startIndex.getter(a3);
  v15[1] = v10;
  v15[2] = v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56LL))(a5, 1LL, 1LL, a4);
  uint64_t v12 = *(void *)(a3 + 24);
  void v14[2] = *(void *)(a3 + 16);
  v14[3] = a4;
  v14[4] = v12;
  v14[5] = a5;
  v14[6] = a1;
  _OWORD v14[7] = a2;
  return Rope._mutatingForEach(from:_:)(v15, (uint64_t)sub_188D24F34, (uint64_t)v14, a3);
}

BOOL sub_188D24E24( uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = sub_188DF8384();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  uint64_t v16 = (char *)&v19 - v15;
  a3(a1);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 40))(a2, v16, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a2, v10);
  BOOL v17 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 48LL))(v14, 1LL, a6) == 1;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  return v17;
}

uint64_t Rope._mutatingForEach(from:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  uint64_t v9 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v28 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v29 = AssociatedTypeWitness;
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v28 - v11;
  uint64_t v32 = v9;
  uint64_t v33 = v8;
  uint64_t v14 = type metadata accessor for Rope._Node(255LL, v9, v8, v13);
  uint64_t v15 = sub_188DF8384();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x1895F8858](v15);
  uint64_t v19 = (char *)&v28 - v18;
  uint64_t v20 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](v17);
  unsigned int v22 = (char *)&v28 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v22, v5, a4);
  Rope.validate(_:)(*a1, a1[1], a1[2], a4);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, a4);
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v5, v15);
  uint8x8_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48LL);
  char v24 = 1;
  LODWORD(v22) = v23(v19, 1LL, v14);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  if ((_DWORD)v22 == 1) {
    return v24 & 1;
  }
  uint64_t result = v23(v5, 1LL, v14);
  if ((_DWORD)result != 1)
  {
    char v24 = Rope._Node.mutatingForEach(from:body:)((uint64_t)v12, (uint64_t)a1, v30, v31, v14);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v29);
    uint64_t v27 = type metadata accessor for Rope(0LL, v32, v33, v26);
    Rope._invalidateIndices()();
    *a1 = *(void *)&v5[*(int *)(v27 + 36)];
    return v24 & 1;
  }

  __break(1u);
  return result;
}

BOOL sub_188D25140(uint64_t a1)
{
  return sub_188D24E24( a1,  *(void *)(v1 + 40),  *(void (**)(uint64_t))(v1 + 48),  *(void *)(v1 + 56),  *(void *)(v1 + 16),  *(void *)(v1 + 24));
}

uint64_t sub_188D25150(_OWORD *a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    __int128 v8 = a3[1];
    __int128 v51 = *a3;
    __int128 v52 = v8;
    uint64_t v53 = *((void *)a3 + 4);
    sub_188D26268((uint64_t)v49);
    swift_unknownObjectRelease();
    __int128 v9 = v49[1];
    *a3 = v49[0];
    a3[1] = v9;
    *((void *)a3 + 4) = v50;
  }

  uint64_t result = *(void *)a3;
  int v11 = *(unsigned __int8 *)(*(void *)a3 + 18LL);
  uint64_t v12 = (unsigned __int16 *)(*(void *)a3 + 16LL);
  unint64_t v13 = *v12;
  char v14 = (4 * v11 + 8) & 0x3C;
  unint64_t v15 = (*(void *)(a2 + 8) >> v14) & 0xFLL;
  unint64_t v48 = v15;
  if (v15 > v13)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }

  if (v15 >= v13)
  {
    *a1 = 0u;
    a1[1] = 0u;
    char v22 = 1;
    return v22 & 1;
  }

  uint64_t v38 = a3;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  if (v11)
  {
    char v37 = a1;
    uint64_t v39 = ((-15LL << v14) - 1) & ((-256LL << ((4 * v11) & 0x3C)) | 0xFF);
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v20 = swift_unknownObjectRetain() + 40LL * v15 + 24;
    while (1)
    {
      uint64_t result = sub_188D25150(&v42, a2, v20, a4, a5);
      BOOL v21 = __OFADD__(v19, v42);
      v19 += v42;
      if (v21)
      {
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }

      BOOL v21 = __OFADD__(v18, v43);
      v18 += v43;
      if (v21) {
        goto LABEL_27;
      }
      BOOL v21 = __OFADD__(v17, v44);
      v17 += v44;
      if (v21) {
        goto LABEL_28;
      }
      BOOL v21 = __OFADD__(v16, v45);
      v16 += v45;
      if (v21) {
        goto LABEL_29;
      }
      char v22 = result;
      if ((result & 1) == 0) {
        break;
      }
      *(void *)(a2 + 8) = v39 & *(void *)(a2 + 8) | (++v15 << v14);
      v20 += 40LL;
      if (v13 == v15)
      {
        *(void *)(a2 + 16) = 0LL;
        break;
      }
    }

    uint64_t result = swift_unknownObjectRelease();
    *char v37 = v19;
    v37[1] = v18;
    v37[2] = v17;
    v37[3] = v16;
    uint64_t v23 = v38[1];
    BOOL v21 = __OFADD__(v23, v19);
    uint64_t v24 = v23 + v19;
    if (v21) {
      goto LABEL_31;
    }
    v38[1] = v24;
    uint64_t v25 = v38[2];
    BOOL v21 = __OFADD__(v25, v18);
    uint64_t v26 = v25 + v18;
    if (!v21)
    {
      void v38[2] = v26;
      uint64_t v27 = v38[3];
      BOOL v21 = __OFADD__(v27, v17);
      uint64_t v28 = v27 + v17;
      if (v21) {
        goto LABEL_33;
      }
      v38[3] = v28;
      uint64_t v29 = v38[4];
      BOOL v21 = __OFADD__(v29, v16);
      uint64_t v30 = v29 + v16;
      if (!v21)
      {
        v38[4] = v30;
        return v22 & 1;
      }

      goto LABEL_34;
    }

LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  *(void *)(a2 + 16) = result;
  uint64_t v31 = result + 24;
  swift_unknownObjectRetain();
  char v22 = sub_188D25D74(v12, v31, (uint64_t *)&v48, &v46, a2, 0, a4, a5);
  uint64_t result = swift_unknownObjectRelease();
  __int128 v32 = v46;
  __int128 v33 = v47;
  *a1 = v46;
  a1[1] = v33;
  uint64_t v34 = *((void *)a3 + 1);
  if (__OFADD__(v34, (void)v32))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  *((void *)a3 + _HashNode.ensureUnique(isUnique:)(v1 & 1) = v34 + v32;
  uint64_t v35 = *((void *)a3 + 2);
  if (__OFADD__(v35, *((void *)&v32 + 1)))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  *((void *)a3 + 2) = v35 + *((void *)&v32 + 1);
  if (__OFADD__(*((void *)a3 + 3), (void)v33))
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }

  *((void *)a3 + 3) = v33;
  uint64_t v36 = *((void *)a3 + 4);
  if (!__OFADD__(v36, *((void *)&v33 + 1)))
  {
    *((void *)a3 + 4) = v36 + *((void *)&v33 + 1);
    return v22 & 1;
  }

    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  *(void *)(a2 + 16) = result;
  __int128 v32 = result + 24;
  swift_unknownObjectRetain();
  uint64_t v23 = sub_188D264E0(v13, v32, (uint64_t *)&v50, &v48, a2, 0, a4, a5);
  uint64_t result = swift_unknownObjectRelease();
  __int128 v33 = v48;
  uint64_t v34 = v49;
  *a1 = v48;
  a1[1] = v34;
  uint64_t v35 = *((void *)a3 + 1);
  if (__OFADD__(v35, (void)v33))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  *((void *)a3 + _HashNode.ensureUnique(isUnique:)(v1 & 1) = v35 + v33;
  uint64_t v36 = *((void *)a3 + 2);
  if (__OFADD__(v36, *((void *)&v33 + 1)))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  *((void *)a3 + 2) = v36 + *((void *)&v33 + 1);
  if (__OFADD__(*((void *)a3 + 3), (void)v34))
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }

  *((void *)a3 + 3) = v34;
  char v37 = *((void *)a3 + 4);
  if (!__OFADD__(v37, *((void *)&v34 + 1)))
  {
    *((void *)a3 + 4) = v37 + *((void *)&v34 + 1);
    return v23 & 1;
  }

      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }

      __break(1u);
LABEL_33:
      uint64_t result = sub_188D37044(a2, a4, a5);
      a2 = result;
LABEL_22:
      uint64_t v41 = v48;
      if ((v48 & 0xC) == v24)
      {
        uint64_t result = sub_188D37044(v48, a4, a5);
        uint64_t v41 = result;
        if ((a5 & 0x1000000000000000LL) == 0) {
          goto LABEL_24;
        }
      }

      else if ((a5 & 0x1000000000000000LL) == 0)
      {
LABEL_24:
        a5 = (v41 >> 16) - (a2 >> 16);
        goto LABEL_40;
      }

      uint64_t v42 = a4 & 0xFFFFFFFFFFFFLL;
      if ((a5 & 0x2000000000000000LL) != 0) {
        uint64_t v42 = v25;
      }
      if (v42 < a2 >> 16)
      {
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }

      if (v42 < v41 >> 16)
      {
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }

      a5 = sub_188DF7F28();
LABEL_40:
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v47, v46);
      if ((a5 & 0x8000000000000000LL) != 0)
      {
        __break(1u);
      }

      else if (a5 <= 0xFF)
      {
        LOBYTE(v29) = v44;
        return ((unint64_t)a5 << 40) | ((unint64_t)v29 << 32) | ((_DWORD)v6 << 24) | v23 & 0xFFFFFF;
      }

      __break(1u);
      goto LABEL_46;
    }

    goto LABEL_30;
  }

    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

  uint64_t v5 = (void *)MEMORY[0x18961AFE8];
  uint64_t v10 = *(void *)(MEMORY[0x18961AFE8] + 24LL) >> 1;
LABEL_26:
  uint64_t v24 = v5[3];
  if (v24 < 2) {
    return (uint64_t)v5;
  }
  uint64_t v25 = v24 >> 1;
  uint64_t v23 = __OFSUB__(v25, v10);
  uint64_t v26 = v25 - v10;
  if (!v23)
  {
    void v5[2] = v26;
    return (uint64_t)v5;
  }

    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

  char v4 = (void *)MEMORY[0x18961AFE8];
  __int128 v8 = *(void *)(MEMORY[0x18961AFE8] + 24LL) >> 1;
LABEL_26:
  char v22 = v4[3];
  if (v22 < 2) {
    return (uint64_t)v4;
  }
  uint64_t v23 = v22 >> 1;
  BOOL v21 = __OFSUB__(v23, v8);
  uint64_t v24 = v23 - v8;
  if (!v21)
  {
    v4[2] = v24;
    return (uint64_t)v4;
  }

        uint64_t v28 = v95;
        v103(v95, v102, v4);
        if ((sub_188DF8540() & 1) != 0)
        {
          swift_getAssociatedConformanceWitness();
          sub_188DF89CC();
          uint64_t v28 = v95;
          sub_188DF896C();
          unint64_t v60 = sub_188DF7CD0();
          uint64_t result = ((uint64_t (*)(char *, uint64_t))v43)(v37, v4);
          if ((v60 & 1) == 0) {
            goto LABEL_77;
          }
        }

        if (sub_188DF8534() < 64)
        {
LABEL_48:
          uint64_t v44 = sub_188DF8528();
          goto LABEL_49;
        }

        v103(v93, (uint64_t)v28, v4);
        unsigned int v104 = -1LL;
        uint64_t v62 = sub_188DF8540();
        uint64_t v63 = sub_188DF8534();
        if ((v62 & 1) != 0)
        {
          if (v63 > 64) {
            goto LABEL_41;
          }
          swift_getAssociatedConformanceWitness();
          sub_188DF89CC();
          sub_188DF896C();
          uint64_t v64 = v93;
          uint64_t v65 = sub_188DF7CB8();
          v43(v37, v4);
          uint64_t v59 = (char *)v104;
          uint64_t v66 = v88;
          (*(void (**)(char *, char *, uint64_t))(v91 + 32))(v88, v64, v4);
          if ((v65 & 1) == 0)
          {
            v43(v66, v4);
            uint64_t v28 = v95;
            goto LABEL_48;
          }

          uint64_t v67 = sub_188DF8528();
          v43(v66, v4);
          uint64_t v28 = v95;
        }

        else
        {
          if (v63 >= 65)
          {
LABEL_41:
            sub_188CF78D0();
            sub_188DF84E0();
            uint64_t v59 = v93;
            uint64_t v68 = sub_188DF7CC4();
            v43(v37, v4);
            v43(v59, v4);
            if ((v68 & 1) == 0) {
              goto LABEL_48;
            }
            goto LABEL_45;
          }

          uint64_t v59 = v93;
          uint64_t v69 = sub_188DF8528();
          v43(v59, v4);
          if (v104 >= v69) {
            goto LABEL_48;
          }
        }

LABEL_38:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

          __break(1u);
          return result;
        }

          __break(1u);
          return result;
        }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }

uint64_t sub_188D25420( _OWORD *a1, uint64_t a2, __int128 *a3, uint64_t a4, void (*a5)(void *__return_ptr), uint64_t a6)
{
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    __int128 v9 = a3[1];
    __int128 v53 = *a3;
    __int128 v54 = v9;
    uint64_t v55 = *((void *)a3 + 4);
    sub_188D26268((uint64_t)v51);
    swift_unknownObjectRelease();
    __int128 v10 = v51[1];
    *a3 = v51[0];
    a3[1] = v10;
    *((void *)a3 + 4) = v52;
  }

  uint64_t result = *(void *)a3;
  int v12 = *(unsigned __int8 *)(*(void *)a3 + 18LL);
  unint64_t v13 = (unsigned __int16 *)(*(void *)a3 + 16LL);
  unint64_t v14 = *v13;
  char v15 = (4 * v12 + 8) & 0x3C;
  unint64_t v16 = (*(void *)(a2 + 8) >> v15) & 0xFLL;
  unint64_t v50 = v16;
  if (v16 > v14)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }

  if (v16 >= v14)
  {
    *a1 = 0u;
    a1[1] = 0u;
    char v23 = 1;
    return v23 & 1;
  }

  uint64_t v39 = a3;
  __int128 v48 = 0u;
  __int128 v49 = 0u;
  if (v12)
  {
    uint64_t v38 = a1;
    uint64_t v40 = ((-15LL << v15) - 1) & ((-256LL << ((4 * v12) & 0x3C)) | 0xFF);
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v20 = 0LL;
    uint64_t v21 = swift_unknownObjectRetain() + 40LL * v16 + 24;
    while (1)
    {
      uint64_t result = sub_188D25420(&v44, a2, v21, a4, a5, a6);
      BOOL v22 = __OFADD__(v20, v44);
      v20 += v44;
      if (v22)
      {
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }

      BOOL v22 = __OFADD__(v19, v45);
      v19 += v45;
      if (v22) {
        goto LABEL_27;
      }
      BOOL v22 = __OFADD__(v18, v46);
      v18 += v46;
      if (v22) {
        goto LABEL_28;
      }
      BOOL v22 = __OFADD__(v17, v47);
      v17 += v47;
      if (v22) {
        goto LABEL_29;
      }
      char v23 = result;
      if ((result & 1) == 0) {
        break;
      }
      *(void *)(a2 + 8) = v40 & *(void *)(a2 + 8) | (++v16 << v15);
      v21 += 40LL;
      if (v14 == v16)
      {
        *(void *)(a2 + 16) = 0LL;
        break;
      }
    }

    uint64_t result = swift_unknownObjectRelease();
    *uint64_t v38 = v20;
    v38[1] = v19;
    void v38[2] = v18;
    v38[3] = v17;
    uint64_t v24 = v39[1];
    BOOL v22 = __OFADD__(v24, v20);
    uint64_t v25 = v24 + v20;
    if (v22) {
      goto LABEL_31;
    }
    v39[1] = v25;
    uint64_t v26 = v39[2];
    BOOL v22 = __OFADD__(v26, v19);
    uint64_t v27 = v26 + v19;
    if (!v22)
    {
      v39[2] = v27;
      uint64_t v28 = v39[3];
      BOOL v22 = __OFADD__(v28, v18);
      uint64_t v29 = v28 + v18;
      if (v22) {
        goto LABEL_33;
      }
      v39[3] = v29;
      uint64_t v30 = v39[4];
      BOOL v22 = __OFADD__(v30, v17);
      uint64_t v31 = v30 + v17;
      if (!v22)
      {
        v39[4] = v31;
        return v23 & 1;
      }

      goto LABEL_34;
    }

uint64_t Rope._Node.mutatingForEach(from:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = v5;
  uint64_t v51 = a4;
  uint64_t v48 = a3;
  uint64_t v54 = a1;
  uint64_t v9 = *(void *)(a5 + 16);
  uint64_t v10 = *(void *)(a5 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v52 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  __int128 v49 = (char *)&v47 - v12;
  Rope._Node.ensureUnique()();
  unsigned int v13 = Rope._Node.header.getter();
  char v14 = BYTE2(v13);
  unsigned int v15 = HIWORD(v13);
  uint64_t v50 = a2;
  unint64_t v16 = *(void *)(a2 + 8);
  uint64_t v53 = v10;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v18 = _RopePath.subscript.getter(v15, v16, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v57 = v18;
  uint64_t result = Rope._Node.header.getter();
  if (v18 > (unsigned __int16)result)
  {
    __break(1u);
  }

  else
  {
    unsigned __int16 v20 = Rope._Node.header.getter();
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
    if (v18 >= v20)
    {
      v21(AssociatedTypeWitness, AssociatedConformanceWitness);
      return 1LL;
    }

    else
    {
      uint64_t v22 = (uint64_t)v49;
      v21(AssociatedTypeWitness, AssociatedConformanceWitness);
      if (v14)
      {
        uint64_t v23 = *v6 + 16;
        uint64_t v24 = *(unsigned __int8 *)(*(void *)(a5 - 8) + 80LL);
        uint64_t v25 = *v6 + ((v24 + 19) & ~v24);
        MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, a5);
        uint64_t v26 = a5;
        uint64_t v27 = v53;
        uint64_t v28 = (unsigned __int16 *)nullsub_1(v23, v25, v9, v26, v53);
        uint64_t v30 = v29;
        swift_unknownObjectRetain();
        sub_188D25B5C(v28, v30, &v57, v50, v48, v51, v22, v15, (char *)&v55, v9, v27);
        swift_unknownObjectRelease();
        uint64_t v31 = v55;
        uint64_t v32 = v52;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v54, v22, AssociatedTypeWitness);
        sub_188D25A58((uint64_t)v6, v22, v9, v27);
        (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v22, AssociatedTypeWitness);
      }

      else
      {
        uint64_t v33 = Rope._Node.asUnmanagedLeaf.getter();
        uint64_t v34 = v22;
        uint64_t v35 = v50;
        *(void *)(v50 + 16) = v33;
        uint64_t v36 = *v6;
        uint64_t v37 = *v6 + 16;
        uint64_t v38 = v53;
        uint64_t v40 = type metadata accessor for Rope._Item(0LL, v9, v53, v39);
        uint64_t v41 = *(unsigned __int8 *)(*(void *)(v40 - 8) + 80LL);
        uint64_t v42 = v36 + ((v41 + 19) & ~v41);
        MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Item, v40);
        uint64_t v43 = (unsigned __int16 *)nullsub_1(v37, v42, v9, v40, v38);
        uint64_t v45 = v44;
        swift_unknownObjectRetain();
        sub_188D25F20(v43, v45, &v57, v48, v51, v34, v35, 0, (char *)&v56, v9, v38);
        swift_unknownObjectRelease();
        uint64_t v31 = v56;
        uint64_t v46 = v52;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v54, v34, AssociatedTypeWitness);
        sub_188D25A58((uint64_t)v6, v34, v9, v38);
        (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v34, AssociatedTypeWitness);
      }
    }

    return v31;
  }

  return result;
}

uint64_t sub_188D25A58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v14 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v14 - v9, a2, AssociatedTypeWitness);
  type metadata accessor for Rope._Node(0LL, a3, a4, v11);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))( v10,  AssociatedTypeWitness,  AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
}

uint64_t sub_188D25B5C@<X0>( unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, Swift::UInt8 a8@<W7>, char *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v36 = a6;
  uint64_t v37 = a7;
  uint64_t v35 = a5;
  uint64_t v39 = a4;
  uint64_t v31 = a9;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v33 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v17 = (char *)&v30 - v16;
  uint64_t v19 = type metadata accessor for Rope._Node(0LL, a10, a11, v18);
  uint64_t v20 = MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, v19);
  uint64_t v38 = v19;
  uint64_t result = Rope._UnsafeHandle.mutableChildren.getter(a1, a2, a10, v19, a11, v20);
  uint64_t v34 = result;
  uint64_t v22 = *a3;
  uint64_t v32 = v23;
  if (v22 >= v23)
  {
LABEL_6:
    *(void *)(v39 + 16) = 0LL;
    char v29 = 1;
LABEL_8:
    *uint64_t v31 = v29;
  }

  else
  {
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
    while (1)
    {
      char v26 = Rope._Node.mutatingForEach(from:body:)(v17, v39, v35, v36, v38);
      uint64_t result = v25(v17, AssociatedTypeWitness, AssociatedConformanceWitness);
      if ((v26 & 1) == 0)
      {
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v17, AssociatedTypeWitness);
        char v29 = 0;
        goto LABEL_8;
      }

      if (__OFADD__(*a3, 1LL)) {
        break;
      }
      ++*a3;
      uint64_t v28 = type metadata accessor for _RopePath(0LL, AssociatedTypeWitness, AssociatedConformanceWitness, v27);
      _RopePath.clear(below:)(a8);
      _RopePath.subscript.setter(*a3, a8, v28);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v17, AssociatedTypeWitness);
      if (*a3 >= v32) {
        goto LABEL_6;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_188D25D74( unsigned __int16 *a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a1;
  uint64_t v9 = *a3;
  if (*a3 >= v8)
  {
    char v22 = 1;
    return v22 & 1;
  }

  else
  {
    uint64_t v15 = _s7BuilderVMa();
    uint64_t v43 = a8 + *(int *)(v15 + 20);
    uint64_t v42 = a8 + *(int *)(v15 + 24);
    uint64_t v39 = (-15LL << ((4 * a6 + 8) & 0x3C)) - 1;
    char v40 = (4 * a6 + 8) & 0x3C;
    while (1)
    {
      uint64_t v16 = (unsigned __int8 *)(a2 + 24 * v9);
      uint64_t v17 = v16[16];
      uint64_t v18 = v16[17];
      uint64_t v19 = v16[18];
      uint64_t v20 = v16[19];
      uint64_t result = sub_188D2208C(0xFuLL, v43, v42);
      *(void *)a7 = result;
      *(_BYTE *)(a7 + 8) = v22 & 1;
      uint64_t v23 = (unsigned __int8 *)(a2 + 24 * *a3);
      uint64_t v24 = v23[19] - v20;
      uint64_t v25 = *a4 + v24;
      if (__OFADD__(*a4, v24)) {
        break;
      }
      uint64_t v26 = v23[16];
      uint64_t v27 = v23[17];
      uint64_t v28 = v23[18] - v19;
      *a4 = v25;
      uint64_t v29 = a4[1];
      BOOL v30 = __OFADD__(v29, v28);
      uint64_t v31 = v29 + v28;
      if (v30) {
        goto LABEL_15;
      }
      uint64_t v32 = v27 - v18;
      a4[1] = v31;
      uint64_t v33 = a4[2];
      BOOL v30 = __OFADD__(v33, v32);
      uint64_t v34 = v33 + v32;
      if (v30) {
        goto LABEL_16;
      }
      uint64_t v35 = v26 - v17;
      a4[2] = v34;
      uint64_t v36 = a4[3];
      BOOL v30 = __OFADD__(v36, v35);
      uint64_t v37 = v36 + v35;
      if (v30) {
        goto LABEL_17;
      }
      a4[3] = v37;
      if ((v22 & 1) == 0) {
        return v22 & 1;
      }
      uint64_t v38 = *a3 + 1;
      if (__OFADD__(*a3, 1LL)) {
        goto LABEL_18;
      }
      *a3 = v38;
      if (v38 < 0) {
        goto LABEL_19;
      }
      *(void *)(a5 + 8) = *(void *)(a5 + 8) & v39 | (v38 << v40);
      uint64_t v9 = *a3;
      if (*a3 >= v8) {
        return v22 & 1;
      }
    }

    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }

  return result;
}

uint64_t sub_188D25F20@<X0>( unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, char *a9@<X8>, uint64_t a10, uint64_t a11)
{
  int v57 = a8;
  uint64_t v65 = a5;
  uint64_t v66 = a6;
  uint64_t v64 = (uint64_t (*)(uint64_t))a4;
  uint64_t v16 = type metadata accessor for Rope._Item(0LL, a10, a11, a4);
  uint64_t v17 = *(void **)(v16 - 8);
  MEMORY[0x1895F8858](v16);
  unint64_t v60 = (char *)v51 - v18;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v63 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v20 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v62 = (char *)v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = MEMORY[0x1895F8858](v20);
  uint64_t v61 = (uint64_t)v51 - v23;
  MEMORY[0x1895F8858](v22);
  uint64_t v68 = (uint64_t)v51 - v24;
  uint64_t v25 = MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Item, v16);
  uint64_t v58 = v16;
  uint64_t result = Rope._UnsafeHandle.mutableChildren.getter(a1, a2, a10, v16, a11, v25);
  uint64_t v59 = result;
  uint64_t v27 = *a3;
  uint64_t v56 = v28;
  if (v27 >= v28)
  {
    char v50 = 1;
LABEL_10:
    *a9 = v50;
  }

  else
  {
    v51[0] = a9;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    BOOL v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
    uint64_t v54 = v17[9];
    unsigned __int8 v55 = v30;
    uint64_t v31 = (void (*)(char *, uint64_t, uint64_t))v17[2];
    v51[1] = a7 + 8;
    uint64_t v52 = v31;
    uint64_t v53 = AssociatedConformanceWitness;
    while (1)
    {
      uint64_t v33 = v59;
      uint64_t v32 = v60;
      uint64_t v34 = AssociatedTypeWitness;
      uint64_t v35 = v54;
      uint64_t v36 = v59 + v54 * v27;
      uint64_t v37 = v58;
      uint64_t v38 = v52;
      v52(v60, v36, v58);
      Rope._Item.summary.getter(v37);
      uint64_t v39 = v17;
      char v40 = (void (*)(char *, uint64_t))v17[1];
      v40(v32, v37);
      int v67 = v64(v33 + *a3 * v35);
      uint64_t v41 = v33 + *a3 * v35;
      uint64_t AssociatedTypeWitness = v34;
      v38(v32, v41, v37);
      uint64_t v42 = a3;
      uint64_t v43 = v62;
      Rope._Item.summary.getter(v37);
      v40(v32, v37);
      uint64_t v44 = v61;
      uint64_t v45 = v53;
      RopeSummary.subtracting(_:)(v68, v34, v53, v61);
      uint64_t v46 = *(void (**)(char *, uint64_t))(v63 + 8);
      v46(v43, v34);
      v55(v44, v34, v45);
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v46)(v44, v34);
      if ((v67 & 1) == 0)
      {
        uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v46)(v68, v34);
        char v50 = 0;
        goto LABEL_9;
      }

      uint64_t v48 = *v42 + 1;
      if (__OFADD__(*v42, 1LL)) {
        break;
      }
      a3 = v42;
      *uint64_t v42 = v48;
      uint64_t v49 = type metadata accessor for _RopePath(0LL, v34, v45, v47);
      _RopePath.subscript.setter(v48, v57, v49);
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v46)(v68, v34);
      uint64_t v27 = *v42;
      uint64_t v17 = v39;
      if (*v42 >= v56)
      {
        char v50 = 1;
LABEL_9:
        a9 = (char *)v51[0];
        goto LABEL_10;
      }
    }

    __break(1u);
  }

  return result;
}

__n128 sub_188D26268@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  char v4 = *(_BYTE *)(*v1 + 18);
  if (v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A228);
    uint64_t v5 = swift_allocObject();
    *(_WORD *)(v5 + 16) = 0;
    *(_BYTE *)(v5 + 18) = v4;
    __int16 v6 = *(_WORD *)(v3 + 16);
    swift_beginAccess();
    *(_WORD *)(v5 + 16) = v6;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A230);
    swift_arrayInitWithCopy();
    sub_188D2644C(v5, &v11);
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4FB038);
    uint64_t v7 = swift_allocObject();
    *(_WORD *)(v7 + 16) = 0;
    *(_BYTE *)(v7 + 18) = 0;
    __int16 v8 = *(_WORD *)(v3 + 16);
    swift_beginAccess();
    *(_WORD *)(v7 + 16) = v8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4FB2B0);
    swift_arrayInitWithCopy();
    sub_188D263B8(v7, &v11);
  }

  __n128 result = v12;
  __int128 v10 = v13;
  *(void *)a1 = v11;
  *(__n128 *)(a1 + 8) = result;
  *(_OWORD *)(a1 + 24) = v10;
  return result;
}

uint64_t sub_188D263B8@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (*(_WORD *)(result + 16))
  {
    uint64_t v2 = 0LL;
    uint64_t v3 = 0LL;
    uint64_t v4 = 0LL;
    uint64_t v5 = 0LL;
    uint64_t v6 = 24LL * *(unsigned __int16 *)(result + 16);
    uint64_t v7 = (unsigned __int8 *)(result + 43);
    while (1)
    {
      uint64_t v8 = *v7;
      BOOL v9 = __OFADD__(v5, v8);
      v5 += v8;
      if (v9) {
        break;
      }
      uint64_t v10 = *(v7 - 1);
      BOOL v9 = __OFADD__(v4, v10);
      v4 += v10;
      if (v9) {
        goto LABEL_12;
      }
      uint64_t v11 = *(v7 - 2);
      BOOL v9 = __OFADD__(v3, v11);
      v3 += v11;
      if (v9) {
        goto LABEL_13;
      }
      uint64_t v12 = *(v7 - 3);
      BOOL v9 = __OFADD__(v2, v12);
      v2 += v12;
      if (v9) {
        goto LABEL_14;
      }
      v7 += 24;
      v6 -= 24LL;
      if (!v6) {
        goto LABEL_10;
      }
    }

    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }

  else
  {
    uint64_t v2 = 0LL;
    uint64_t v3 = 0LL;
    uint64_t v4 = 0LL;
    uint64_t v5 = 0LL;
LABEL_10:
    *a2 = result;
    a2[1] = v5;
    a2[2] = v4;
    a2[3] = v3;
    a2[4] = v2;
  }

  return result;
}

uint64_t sub_188D2644C@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (*(_WORD *)(result + 16))
  {
    uint64_t v2 = 0LL;
    uint64_t v3 = 0LL;
    uint64_t v4 = 0LL;
    uint64_t v5 = 0LL;
    uint64_t v6 = (void *)(result + 56);
    uint64_t v7 = 40LL * *(unsigned __int16 *)(result + 16);
    while (1)
    {
      uint64_t v8 = *(v6 - 3);
      BOOL v9 = __OFADD__(v5, v8);
      v5 += v8;
      if (v9) {
        break;
      }
      uint64_t v10 = *(v6 - 2);
      BOOL v9 = __OFADD__(v4, v10);
      v4 += v10;
      if (v9) {
        goto LABEL_12;
      }
      uint64_t v11 = *(v6 - 1);
      BOOL v9 = __OFADD__(v3, v11);
      v3 += v11;
      if (v9) {
        goto LABEL_13;
      }
      BOOL v9 = __OFADD__(v2, *v6);
      v2 += *v6;
      if (v9) {
        goto LABEL_14;
      }
      v6 += 5;
      v7 -= 40LL;
      if (!v7) {
        goto LABEL_10;
      }
    }

    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }

  else
  {
    uint64_t v2 = 0LL;
    uint64_t v3 = 0LL;
    uint64_t v4 = 0LL;
    uint64_t v5 = 0LL;
LABEL_10:
    *a2 = result;
    a2[1] = v5;
    a2[2] = v4;
    a2[3] = v3;
    a2[4] = v2;
  }

  return result;
}

uint64_t sub_188D264E0( unsigned __int16 *a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, char a6, uint64_t a7, void (*a8)(void *__return_ptr))
{
  void (*v18)(void *__return_ptr);
  uint64_t result;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v8 = *a3;
  if (*a3 >= *a1) {
    return 1LL;
  }
  uint64_t v36 = (-15LL << ((4 * a6 + 8) & 0x3C)) - 1;
  uint64_t v37 = (4 * a6 + 8) & 0x3C;
  uint64_t v38 = *a1;
  while (1)
  {
    __int128 v13 = (unsigned __int8 *)(a2 + 24 * v8);
    uint64_t v14 = v13[16];
    uint64_t v15 = v13[17];
    uint64_t v16 = v13[18];
    uint64_t v17 = v13[19];
    uint64_t v18 = a8;
    a8(&v40);
    __n128 result = v41;
    *(void *)a7 = v40;
    *(_BYTE *)(a7 + 8) = result;
    uint64_t v20 = (unsigned __int8 *)(a2 + 24 * *a3);
    uint64_t v21 = v20[19] - v17;
    uint64_t v22 = *a4 + v21;
    if (__OFADD__(*a4, v21)) {
      break;
    }
    uint64_t v23 = v20[16];
    uint64_t v24 = v20[17];
    uint64_t v25 = v20[18] - v16;
    *a4 = v22;
    uint64_t v26 = a4[1];
    uint64_t v27 = __OFADD__(v26, v25);
    uint64_t v28 = v26 + v25;
    if (v27) {
      goto LABEL_15;
    }
    uint64_t v29 = v24 - v15;
    a4[1] = v28;
    BOOL v30 = a4[2];
    uint64_t v27 = __OFADD__(v30, v29);
    uint64_t v31 = v30 + v29;
    if (v27) {
      goto LABEL_16;
    }
    uint64_t v32 = v23 - v14;
    a4[2] = v31;
    uint64_t v33 = a4[3];
    uint64_t v27 = __OFADD__(v33, v32);
    uint64_t v34 = v33 + v32;
    if (v27) {
      goto LABEL_17;
    }
    a4[3] = v34;
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t v35 = *a3 + 1;
    if (__OFADD__(*a3, 1LL)) {
      goto LABEL_18;
    }
    *a3 = v35;
    if (v35 < 0) {
      goto LABEL_19;
    }
    *(void *)(a5 + 8) = *(void *)(a5 + 8) & v36 | (v35 << v37);
    uint64_t v8 = *a3;
    a8 = v18;
    if (*a3 >= v38) {
      return result;
    }
  }

  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

Swift::Void __swiftcall _HashNode.dump(iterationOrder:limit:firstPrefix:restPrefix:depth:)( Swift::Bool iterationOrder, Swift::Int limit, Swift::String firstPrefix, Swift::String restPrefix, Swift::Int depth)
{
  uint64_t v6 = v5;
  object = restPrefix._object;
  uint64_t countAndFlagsBits = restPrefix._countAndFlagsBits;
  uint64_t v12 = nullsub_1(v5 + 16, v5 + 32, v16, v17, v18);
  sub_188D26714( v12,  v13,  iterationOrder,  limit,  v6,  v15,  firstPrefix._countAndFlagsBits,  firstPrefix._object,  countAndFlagsBits,  object,  depth);
}

uint64_t sub_188D26714( uint64_t a1, uint64_t a2, Swift::Bool a3, Swift::Int a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, void *a10, Swift::Int depth)
{
  v16._object = a8;
  v16._uint64_t countAndFlagsBits = a7;
  sub_188DF88D0();
  sub_188DF7EE0();
  swift_bridgeObjectRelease();
  sub_188DF7EE0();
  v13._uint64_t countAndFlagsBits = 0x203A746E756F63LL;
  v13._object = (void *)0xE700000000000000LL;
  v14._uint64_t countAndFlagsBits = a9;
  v14._object = a10;
  _HashNode.UnsafeHandle.dump(iterationOrder:limit:extra:firstPrefix:restPrefix:depth:)(a3, a4, v13, v16, v14, depth);
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall _HashNode.UnsafeHandle.dump(iterationOrder:limit:extra:firstPrefix:restPrefix:depth:)( Swift::Bool iterationOrder, Swift::Int limit, Swift::String extra, Swift::String firstPrefix, Swift::String restPrefix, Swift::Int depth)
{
  object = firstPrefix._object;
  uint64_t v8 = v41;
  if (iterationOrder)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!depth)
    {
      sub_188DF7EE0();
      sub_188DF7EE0();
    }

    sub_188DF7EE0();
    uint64_t countAndFlagsBits = firstPrefix._countAndFlagsBits;
    object = firstPrefix._object;
  }

  else
  {
    uint64_t countAndFlagsBits = firstPrefix._countAndFlagsBits;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  __swift_instantiateConcreteTypeFromMangledName(qword_18C74A100);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_188DF9DB0;
  sub_188DF8600();
  swift_bridgeObjectRelease();
  sub_188DF7EE0();
  swift_bridgeObjectRelease();
  sub_188DF7EE0();
  sub_188CF78D0();
  sub_188DF7FA0();
  sub_188DF7EE0();
  swift_bridgeObjectRelease();
  sub_188DF7EE0();
  swift_bridgeObjectRelease();
  sub_188DF7EE0();
  if ((v41[1] & *v41) != 0)
  {
    sub_188DF7FA0();
    uint64_t v11 = sub_188DF7E74();
    if (__OFSUB__(13LL, v11)) {
      goto LABEL_46;
    }
    MEMORY[0x1895D6828](48LL, 0xE100000000000000LL, (13 - v11) & ~((13 - v11) >> 63));
    swift_bridgeObjectRetain();
    sub_188DF7EE0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A238);
    sub_188D277D0();
    sub_188DF7FB8();
    sub_188DF7EE0();
    swift_bridgeObjectRelease();
    sub_188DF7EE0();
  }

  sub_188DF7EE0();
  swift_bridgeObjectRelease();
  sub_188DF7EE0();
  sub_188DF7EE0();
  sub_188DF88D0();
  sub_188DF7EE0();
  swift_bridgeObjectRelease();
  sub_188DF7EE0();
  sub_188DF88D0();
  sub_188DF7EE0();
  swift_bridgeObjectRelease();
  sub_188DF7EE0();
  *(void *)(v10 + 56) = MEMORY[0x189617FA8];
  *(void *)(v10 + 32) = countAndFlagsBits;
  *(void *)(v10 + 40) = object;
  sub_188DF8A2C();
  swift_bridgeObjectRelease();
  Swift::Int limita = limit - 1;
  if (limit < 1) {
    goto LABEL_33;
  }
  int v14 = *v41;
  __int32 v13 = v41[1];
  if (iterationOrder)
  {
    v12.i32[0] = *v41;
    int8x8_t v15 = vcnt_s8(v12);
    v15.i16[0] = vaddlv_u8((uint8x8_t)v15);
    if (v14 == v13) {
      __int32 v16 = *v41;
    }
    else {
      __int32 v16 = v15.i32[0];
    }
    if (v16)
    {
      uint64_t v17 = 0LL;
      do
      {
        uint64_t v18 = swift_allocObject();
        *(_OWORD *)(v18 + 16) = xmmword_188DF9DB0;
        swift_bridgeObjectRetain();
        sub_188DF7EE0();
        swift_bridgeObjectRelease();
        sub_188DF7EE0();
        sub_188DF88D0();
        sub_188DF7EE0();
        swift_bridgeObjectRelease();
        sub_188DF7EE0();
        sub_188D27620(v17, (uint64_t)v41, v42, v43, v44, v45);
        sub_188DF7EE0();
        swift_bridgeObjectRelease();
        *(void *)(v18 + 56) = MEMORY[0x189617FA8];
        *(void *)(v18 + 32) = 8224LL;
        *(void *)(v18 + 40) = 0xE200000000000000LL;
        sub_188DF8A2C();
        swift_bridgeObjectRelease();
        uint64_t v17 = (v17 + 1);
      }

      while (v16 != (_DWORD)v17);
      int v14 = *v41;
      __int32 v13 = v41[1];
    }

    if (v14 != v13 && v13)
    {
      if (__OFADD__(depth, 1LL)) {
        goto LABEL_47;
      }
      uint64_t v19 = 0LL;
      v15.i32[0] = v13;
      uint8x8_t v20 = (uint8x8_t)vcnt_s8(v15);
      v20.i16[0] = vaddlv_u8(v20);
      int v21 = v20.i32[0];
      if (v20.i32[0] <= 1u) {
        int v21 = 1;
      }
      int v35 = v21;
      do
      {
        int v37 = v19 + 1;
        _HashNode.UnsafeHandle.subscript.unsafeAddressor(v19, v41, v42, v43, v44, v45);
        swift_retain();
        swift_bridgeObjectRetain();
        sub_188DF7EE0();
        swift_bridgeObjectRelease();
        sub_188DF7EE0();
        sub_188DF88D0();
        sub_188DF7EE0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_188DF7EE0();
        swift_bridgeObjectRelease();
        sub_188DF7EE0();
        sub_188DF88D0();
        sub_188DF7EE0();
        swift_bridgeObjectRelease();
        v22._uint64_t countAndFlagsBits = 8224LL;
        v23._uint64_t countAndFlagsBits = 8224LL;
        v23._object = (void *)0xE200000000000000LL;
        v22._object = (void *)0xE200000000000000LL;
        _HashNode.dump(iterationOrder:limit:firstPrefix:restPrefix:depth:)(1, limita, v23, v22, depth + 1);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v19 = (v19 + 1);
      }

      while (v35 != v37);
    }

    goto LABEL_33;
  }

  if ((v13 & v14) != 0)
  {
    v12.i32[0] = *v41;
    uint8x8_t v24 = (uint8x8_t)vcnt_s8(v12);
    v24.i16[0] = vaddlv_u8(v24);
    if (v14 == v13) {
      __int32 v25 = *v41;
    }
    else {
      __int32 v25 = v24.i32[0];
    }
    if (v25)
    {
      uint64_t v26 = 0LL;
      do
      {
        int v27 = v26 + 1;
        uint64_t v28 = swift_allocObject();
        *(_OWORD *)(v28 + 16) = xmmword_188DF9DB0;
        swift_bridgeObjectRetain();
        sub_188DF7EE0();
        sub_188DF88D0();
        sub_188DF7EE0();
        swift_bridgeObjectRelease();
        sub_188DF7EE0();
        sub_188D27620(v26, (uint64_t)v41, v42, v43, v44, v45);
        sub_188DF7EE0();
        swift_bridgeObjectRelease();
        *(void *)(v28 + 56) = MEMORY[0x189617FA8];
        *(Swift::String *)(v28 + 32) = restPrefix;
        sub_188DF8A2C();
        swift_bridgeObjectRelease();
        uint64_t v26 = (v26 + 1);
      }

      while (v25 != v27);
    }

Swift::Void __swiftcall _HashNode.Storage.dump(iterationOrder:)(Swift::Bool iterationOrder)
{
  v3._uint64_t countAndFlagsBits = 0LL;
  v3._object = (void *)0xE000000000000000LL;
  v4._uint64_t countAndFlagsBits = 0LL;
  v4._object = (void *)0xE000000000000000LL;
  v5._uint64_t countAndFlagsBits = 0LL;
  v5._object = (void *)0xE000000000000000LL;
  _HashNode.UnsafeHandle.dump(iterationOrder:limit:extra:firstPrefix:restPrefix:depth:)( iterationOrder,  0x7FFFFFFFFFFFFFFFLL,  v3,  v4,  v5,  0LL);
}

uint64_t sub_188D27354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v31 = a5;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v28 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  int8x8_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = MEMORY[0x1895F8858](v10);
  int8x8_t v15 = (char *)&v26 - v14;
  __int32 v16 = (char *)&v26 + *(int *)(v13 + 48) - v14;
  uint64_t v30 = *(void *)(a3 - 8);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
  v17((char *)&v26 - v14, a1, a3);
  uint64_t v18 = *(void *)(a4 - 8);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v19(v16, a2, a4);
  uint64_t v29 = TupleTypeMetadata2;
  uint8x8_t v20 = &v12[*(int *)(TupleTypeMetadata2 + 48)];
  int v27 = v15;
  v17(v12, (uint64_t)v15, a3);
  v19(v20, (uint64_t)v16, a4);
  uint64_t v21 = sub_188DF5A9C();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v12, a3);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, a4);
  uint64_t v32 = v21;
  sub_188CF78D0();
  sub_188DF7FA0();
  uint64_t result = sub_188DF7E74();
  if (__OFSUB__(13LL, result))
  {
    __break(1u);
  }

  else
  {
    uint64_t v32 = MEMORY[0x1895D6828](48LL, 0xE100000000000000LL, (13 - result) & ~((13 - result) >> 63));
    unint64_t v33 = v23;
    swift_bridgeObjectRetain();
    sub_188DF7EE0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A238);
    sub_188D277D0();
    sub_188DF7FB8();
    uint64_t v32 = 0LL;
    unint64_t v33 = 0xE000000000000000LL;
    sub_188DF8600();
    sub_188DF7EE0();
    sub_188DF7EE0();
    swift_bridgeObjectRelease();
    sub_188DF7EE0();
    uint8x8_t v24 = v27;
    sub_188DF8948();
    sub_188DF7EE0();
    sub_188DF8948();
    uint64_t v25 = v32;
    (*(void (**)(char *, uint64_t))(v28 + 8))(v24, v29);
    return v25;
  }

  return result;
}

uint64_t sub_188D27620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v29 = a6;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v31 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  int8x8_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = MEMORY[0x1895F8858](v13);
  uint64_t v18 = (char *)&v28 - v17;
  uint64_t v19 = (char *)&v28 + *(int *)(v16 + 48) - v17;
  uint64_t v20 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(a1, a2, a3, a4, a5, a6);
  uint64_t v21 = v20 + *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v30 = *(void *)(a4 - 8);
  Swift::String v22 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
  v22(v18, v20, a4);
  uint64_t v23 = *(void *)(a5 - 8);
  uint8x8_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  v24(v19, v21, a5);
  uint64_t v25 = (uint64_t)&v15[*(int *)(TupleTypeMetadata2 + 48)];
  v22(v15, (uint64_t)v18, a4);
  v24((char *)v25, (uint64_t)v19, a5);
  uint64_t v26 = sub_188D27354((uint64_t)v15, v25, a4, a5, v29);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v18, TupleTypeMetadata2);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, a5);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v15, a4);
  return v26;
}

unint64_t sub_188D277D0()
{
  unint64_t result = qword_18C74A240;
  if (!qword_18C74A240)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C74A238);
    unint64_t result = MEMORY[0x1895D7620](MEMORY[0x189619928], v1);
    atomic_store(result, (unint64_t *)&qword_18C74A240);
  }

  return result;
}

uint64_t Rope.append(_:)(uint64_t a1, uint64_t a2)
{
  return sub_188D2816C(a1, a2, (void (*)(void))sub_188D29048);
}

uint64_t static Rope.join(_:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v145 = a5;
  uint64_t v9 = type metadata accessor for Rope._Node(255LL, a3, a4, a4);
  uint64_t v10 = sub_188DF8384();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v140 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  unint64_t v129 = (char *)&v119 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = MEMORY[0x1895F8858](v11);
  uint64_t v133 = (uint64_t)&v119 - v14;
  uint64_t v15 = MEMORY[0x1895F8858](v13);
  uint8x8_t v128 = (char *)&v119 - v16;
  uint64_t v17 = MEMORY[0x1895F8858](v15);
  uint64_t v135 = (uint64_t)&v119 - v18;
  uint64_t v141 = *(void *)(v10 - 8);
  uint64_t v19 = MEMORY[0x1895F8858](v17);
  unint64_t v136 = (char *)&v119 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = MEMORY[0x1895F8858](v19);
  uint64_t v23 = (char *)&v119 - v22;
  uint64_t v24 = MEMORY[0x1895F8858](v21);
  uint64_t v26 = (char *)&v119 - v25;
  uint64_t v144 = *(void *)(v9 - 8);
  uint64_t v27 = MEMORY[0x1895F8858](v24);
  uint64_t v127 = (char *)&v119 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = MEMORY[0x1895F8858](v27);
  uint64x2_t v131 = (char *)&v119 - v30;
  uint64_t v31 = MEMORY[0x1895F8858](v29);
  uint32x4_t v130 = (char *)&v119 - v32;
  uint64_t v33 = MEMORY[0x1895F8858](v31);
  uint64x2_t v132 = (char *)&v119 - v34;
  uint64_t v35 = MEMORY[0x1895F8858](v33);
  uint16x8_t v126 = (char *)&v119 - v36;
  uint64_t v37 = MEMORY[0x1895F8858](v35);
  uint64_t v142 = (uint64_t *)((char *)&v119 - v38);
  MEMORY[0x1895F8858](v37);
  char v40 = (char *)&v119 - v39;
  uint64_t v137 = a3;
  uint64_t v138 = a4;
  uint64_t v42 = type metadata accessor for Rope(0LL, a3, a4, v41);
  if ((Rope.isEmpty.getter(v42, v43, v44, v45) & 1) != 0)
  {
    uint64_t v49 = *(void *)(v42 - 8);
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(a2, v42);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 32))(v145, a1, v42);
  }

  uint64_t v139 = a2;
  if ((Rope.isEmpty.getter(v42, v46, v47, v48) & 1) != 0)
  {
    uint64_t v51 = *(void *)(v42 - 8);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(a1, v42);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 32))(v145, v139, v42);
  }

  uint64_t v52 = *(void (**)(char *, uint64_t, uint64_t))(v141 + 16);
  v52(v26, a1, v10);
  uint64_t v53 = v144;
  uint64_t v54 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v144 + 48);
  if (v54(v26, 1LL, v9) == 1)
  {
    (*(void (**)(char *, uint64_t))(v141 + 8))(v26, v10);
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v125 = a1;
  unsigned __int8 v55 = *(void (**)(char *, char *, uint64_t))(v53 + 32);
  v55(v40, v26, v9);
  uint64_t v121 = v10;
  unint64_t v122 = v52;
  v52(v23, v139, v10);
  uint64_t v123 = v54;
  unsigned int v56 = v54(v23, 1LL, v9);
  int v57 = v142;
  if (v56 == 1)
  {
LABEL_18:
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v141 + 8))(v23, v121);
    __break(1u);
    return result;
  }

  unint64_t v120 = v55;
  v55((char *)v142, v23, v9);
  unsigned int v58 = (Rope._Node.header.getter() >> 16);
  uint64_t v59 = Rope._Node.header.getter();
  uint64_t v60 = TupleTypeMetadata2;
  uint64_t v61 = *(int *)(TupleTypeMetadata2 + 48);
  unsigned int v124 = v40;
  if (v58 >= BYTE2(v59))
  {
    uint64_t v79 = v135;
    uint64_t v80 = v135 + v61;
    Rope._Node._graftBack(_:)(v135, v135 + v61, v57, v9);
    uint64_t v81 = v128;
    uint64_t v82 = &v128[*(int *)(v60 + 48)];
    uint64_t v83 = v121;
    v122(v128, v79, v121);
    uint64_t v84 = AssociatedTypeWitness;
    uint64_t v85 = *(void *)(AssociatedTypeWitness - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v82, v80, AssociatedTypeWitness);
    if (v123(v81, 1LL, v9) == 1)
    {
      (*(void (**)(char *, uint64_t))(v85 + 8))(v82, v84);
      (*(void (**)(char *, uint64_t))(v141 + 8))(v81, v83);
      uint64_t v86 = v144;
      uint64_t v87 = (uint64_t)v136;
      unsigned int v88 = v124;
      (*(void (**)(char *, char *, uint64_t))(v144 + 16))(v136, v124, v9);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v86 + 56))(v87, 0LL, 1LL, v9);
      Rope.init(root:)(v87, v137, v138, v89, v145);
      char v90 = *(void (**)(uint64_t, uint64_t))(*(void *)(v42 - 8) + 8LL);
      v90(v139, v42);
      v90(v125, v42);
      (*(void (**)(uint64_t, uint64_t))(v140 + 8))(v135, v60);
      int v78 = *(void (**)(uint64_t *, uint64_t))(v86 + 8);
      v78(v57, v9);
      unint64_t v91 = v88;
    }

    else
    {
      uint64_t v106 = v126;
      v120(v126, v81, v9);
      (*(void (**)(char *, uint64_t))(v85 + 8))(v82, v84);
      uint64_t v107 = v144;
      uint64_t v108 = *(void (**)(char *, char *, uint64_t))(v144 + 16);
      uint64_t v109 = (uint64_t)v130;
      unint64_t v110 = v124;
      v108(v130, v124, v9);
      uint64_t v111 = v131;
      v108(v131, v106, v9);
      unsigned int v112 = v132;
      uint64_t v113 = (uint64_t)v111;
      uint64_t v115 = v137;
      uint64_t v114 = v138;
      static Rope._Node.createInner(children:_:)(v109, v113, v137, v138);
      uint64_t v116 = (uint64_t)v136;
      v108(v136, v112, v9);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v107 + 56))(v116, 0LL, 1LL, v9);
      Rope.init(root:)(v116, v115, v114, v117, v145);
      uint64x2_t v118 = *(void (**)(uint64_t, uint64_t))(*(void *)(v42 - 8) + 8LL);
      v118(v139, v42);
      v118(v125, v42);
      int v78 = *(void (**)(uint64_t *, uint64_t))(v107 + 8);
      v78((uint64_t *)v112, v9);
      v78((uint64_t *)v106, v9);
      (*(void (**)(uint64_t, uint64_t))(v140 + 8))(v135, TupleTypeMetadata2);
      v78(v142, v9);
      unint64_t v91 = v110;
    }
  }

  else
  {
    uint64_t v62 = v133;
    uint64_t v63 = TupleTypeMetadata2;
    uint64_t v64 = v133 + v61;
    Rope._Node._graftFront(_:)(v133, v133 + v61, (uint64_t)v40, v9);
    uint64_t v65 = *(int *)(v63 + 48);
    uint64_t v66 = v129;
    int v67 = &v129[v65];
    uint64_t v68 = v121;
    v122(v129, v62, v121);
    uint64_t v69 = AssociatedTypeWitness;
    uint64_t v70 = *(void *)(AssociatedTypeWitness - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v67, v64, AssociatedTypeWitness);
    unsigned int v71 = v123(v66, 1LL, v9);
    uint64_t v72 = v145;
    if (v71 == 1)
    {
      (*(void (**)(char *, uint64_t))(v70 + 8))(v67, v69);
      (*(void (**)(char *, uint64_t))(v141 + 8))(v66, v68);
      uint64_t v73 = v144;
      uint64_t v74 = (uint64_t)v136;
      uint64_t v75 = v142;
      (*(void (**)(char *, uint64_t *, uint64_t))(v144 + 16))(v136, v142, v9);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v73 + 56))(v74, 0LL, 1LL, v9);
      Rope.init(root:)(v74, v137, v138, v76, v72);
      unint64_t v77 = *(void (**)(uint64_t, uint64_t))(*(void *)(v42 - 8) + 8LL);
      v77(v139, v42);
      v77(v125, v42);
      (*(void (**)(uint64_t, uint64_t))(v140 + 8))(v62, TupleTypeMetadata2);
      int v78 = *(void (**)(uint64_t *, uint64_t))(v73 + 8);
      v78(v75, v9);
    }

    else
    {
      uint64_t v92 = v127;
      v120(v127, v66, v9);
      (*(void (**)(char *, uint64_t))(v70 + 8))(v67, v69);
      uint64_t v93 = v144;
      uint64_t v94 = *(void (**)(char *, char *, uint64_t))(v144 + 16);
      int v95 = v130;
      v94(v130, v92, v9);
      unsigned int v96 = v131;
      int v97 = v142;
      v94(v131, (char *)v142, v9);
      uint64_t v98 = v132;
      uint64_t v99 = (uint64_t)v95;
      uint64_t v100 = (uint64_t)v96;
      uint64_t v102 = v137;
      uint64_t v101 = v138;
      static Rope._Node.createInner(children:_:)(v99, v100, v137, v138);
      uint64_t v103 = (uint64_t)v136;
      v94(v136, v98, v9);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v93 + 56))(v103, 0LL, 1LL, v9);
      Rope.init(root:)(v103, v102, v101, v104, v145);
      uint64_t v105 = *(void (**)(uint64_t, uint64_t))(*(void *)(v42 - 8) + 8LL);
      v105(v139, v42);
      v105(v125, v42);
      int v78 = *(void (**)(uint64_t *, uint64_t))(v93 + 8);
      v78((uint64_t *)v98, v9);
      v78((uint64_t *)v92, v9);
      (*(void (**)(uint64_t, uint64_t))(v140 + 8))(v133, TupleTypeMetadata2);
      v78(v97, v9);
    }

    unint64_t v91 = v124;
  }

  return ((uint64_t (*)(char *, uint64_t))v78)(v91, v9);
}

uint64_t Rope.prepend(_:)(uint64_t a1, uint64_t a2)
{
  return sub_188D2816C(a1, a2, (void (*)(void))sub_188D2921C);
}

{
  sub_188DC0BFC(a1, a2);
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a2 + 16) - 8LL) + 8LL))(a1);
}

uint64_t sub_188D2816C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
}

uint64_t Rope._append(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Rope._Node(0LL, *(void *)(a2 + 16), *(void *)(a2 + 24), v6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(a1, v7);
}

uint64_t Rope._prepend(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = type metadata accessor for Rope._Node(255LL, v6, v7, a4);
  uint64_t v9 = sub_188DF8384();
  uint64_t v10 = MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)&v19 - v11;
  uint64_t v13 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v12, a1, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v12, 0LL, 1LL, v8);
  Rope.init(root:)((uint64_t)v12, v6, v7, v17, (uint64_t)v15);
  sub_188D2921C((uint64_t)v15, a2);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(a1, v8);
}

uint64_t Rope._Node._graftBack(_:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  Swift::String v5 = v4;
  uint64_t v64 = a1;
  uint64_t v65 = a2;
  uint64_t v69 = *(void *)(a4 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](a1);
  v57[1] = (char *)v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  unsigned int v58 = (char *)v57 - v10;
  uint64_t v11 = sub_188DF8384();
  uint64_t v12 = *(void *)(a4 + 24);
  uint64_t v13 = *(void *)(a4 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v16 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v59 = (char *)v57 - v17;
  uint64_t v67 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v18 = MEMORY[0x1895F8858](v16);
  uint64_t v20 = (char *)v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = MEMORY[0x1895F8858](v18);
  uint64_t v60 = (char *)v57 - v22;
  uint64_t v61 = *(void *)(v11 - 8);
  uint64_t v62 = v11;
  uint64_t v23 = MEMORY[0x1895F8858](v21);
  uint64_t v63 = (char *)v57 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v23);
  uint64_t v26 = (void *)((char *)v57 - v25);
  Rope._Node.ensureUnique()();
  Rope._Node.ensureUnique()();
  uint64_t v68 = v5;
  LODWORD(v5) = Rope._Node.header.getter() >> 16;
  uint64_t v66 = a3;
  if ((Rope._Node.header.getter() >> 16) >= v5)
  {
    uint64_t v46 = v69;
    (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v20, &v68[*(int *)(a4 + 36)], AssociatedTypeWitness);
    uint64_t v47 = v66;
    if ((Rope._Node.rebalance(nextNeighbor:)(v66, a4) & 1) != 0)
    {
      uint64_t v48 = 1LL;
      uint64_t v50 = v64;
      uint64_t v49 = v65;
    }

    else
    {
      uint64_t v50 = v64;
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(v46 + 16))(v64, v47, a4);
      uint64_t v48 = 0LL;
      uint64_t v49 = v65;
    }

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56))(v50, v48, 1LL, a4);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    RopeSummary.subtracting(_:)((uint64_t)v20, AssociatedTypeWitness, AssociatedConformanceWitness, v49);
    return (*(uint64_t (**)(char *, uint64_t))(v67 + 8))(v20, AssociatedTypeWitness);
  }

  else
  {
    uint64_t v27 = *(void *)v68;
    unint64_t v28 = *(void *)v68 + ((*(unsigned __int8 *)(v69 + 80) + 19LL) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80));
    MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, a4);
    uint64_t v29 = (unsigned __int16 *)nullsub_1(v27 + 16, v28, v13, a4, v12);
    uint64_t v31 = v30;
    uint64_t v32 = (uint64_t)v59;
    uint64_t v33 = (uint64_t)&v59[*(int *)(TupleTypeMetadata2 + 48)];
    swift_unknownObjectRetain();
    sub_188D28F64(v32, v33, v29, v31, (uint64_t)v66, v13, v12);
    swift_unknownObjectRelease();
    uint64_t v34 = v61;
    uint64_t v35 = v32;
    uint64_t v36 = v62;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v61 + 32))(v26, v35, v62);
    uint64_t v37 = v60;
    uint64_t v67 = *(void *)(v67 + 32);
    ((void (*)(char *, uint64_t, uint64_t))v67)(v60, v33, AssociatedTypeWitness);
    uint64_t v38 = swift_getAssociatedConformanceWitness();
    uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v38 + 48);
    v39(v37, AssociatedTypeWitness, v38);
    char v40 = v63;
    (*(void (**)(char *, uint64_t *, uint64_t))(v34 + 16))(v63, v26, v36);
    BOOL v41 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v40, 1LL, a4) == 1;
    uint64_t v42 = v34;
    uint64_t v43 = v26;
    if (v41)
    {
      uint64_t v44 = *(void (**)(uint64_t *, uint64_t))(v34 + 8);
      v44(v43, v36);
      v44((uint64_t *)v63, v36);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v69 + 56))(v64, 1LL, 1LL, a4);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v67)(v65, v37, AssociatedTypeWitness);
    }

    else
    {
      uint64_t v66 = v26;
      uint64_t v51 = (uint64_t)v58;
      (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v58, v63, a4);
      BOOL v52 = Rope._Node.isFull.getter();
      uint64_t v53 = (uint64_t (*)(uint64_t, char *, uint64_t))v67;
      if (v52)
      {
        unsigned __int16 v54 = Rope._Node.header.getter();
        Rope._Node.split(keeping:)(v54 >> 1, a4);
      }

      v39((char *)(v51 + *(int *)(a4 + 36)), AssociatedTypeWitness, v38);
      sub_188D51868(v51, a4);
      uint64_t v56 = v69;
      (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v51, a4);
      (*(void (**)(uint64_t *, uint64_t))(v42 + 8))(v66, v62);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v56 + 56))(v64, 1LL, 1LL, a4);
      return v53(v65, v37, AssociatedTypeWitness);
    }
  }

uint64_t Rope._Node._graftFront(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::String v5 = v4;
  uint64_t v67 = a2;
  uint64_t v65 = a1;
  uint64_t v70 = *(void *)(a4 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](a1);
  uint64_t v60 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v61 = (char *)&v58 - v10;
  uint64_t v11 = sub_188DF8384();
  uint64_t v12 = *(void *)(a4 + 24);
  uint64_t v13 = *(void *)(a4 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v16 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v18 = (char *)&v58 - v17;
  uint64_t v19 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v68 = AssociatedTypeWitness;
  uint64_t v69 = v19;
  uint64_t v20 = MEMORY[0x1895F8858](v16);
  uint64_t v22 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = MEMORY[0x1895F8858](v20);
  uint64_t v62 = (char *)&v58 - v24;
  uint64_t v63 = *(void *)(v11 - 8);
  uint64_t v64 = v11;
  uint64_t v25 = MEMORY[0x1895F8858](v23);
  uint64_t v66 = (char *)&v58 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v25);
  unint64_t v28 = (char *)&v58 - v27;
  Rope._Node.ensureUnique()();
  Rope._Node.ensureUnique()();
  unsigned int v71 = v5;
  LODWORD(v5) = Rope._Node.header.getter() >> 16;
  if ((Rope._Node.header.getter() >> 16) >= v5)
  {
    uint64_t v66 = (char *)v13;
    uint64_t v47 = v69;
    uint64_t v46 = v70;
    uint64_t v48 = a3 + *(int *)(a4 + 36);
    uint64_t v49 = v68;
    (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v22, v48, v68);
    if ((Rope._Node.rebalance(prevNeighbor:)(a3, a4) & 1) != 0)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56))(v65, 1LL, 1LL, a4);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v47 + 32))(v67, v22, v49);
    }

    else
    {
      uint64_t v56 = v65;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v65, a3, a4);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v46 + 56))(v56, 0LL, 1LL, a4);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      RopeSummary.subtracting(_:)(v48, v49, AssociatedConformanceWitness, v67);
      return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v22, v49);
    }
  }

  else
  {
    uint64_t v29 = *v71;
    unint64_t v30 = *v71 + ((*(unsigned __int8 *)(v70 + 80) + 19LL) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80));
    MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, a4);
    uint64_t v31 = (unsigned __int16 *)nullsub_1(v29 + 16, v30, v13, a4, v12);
    uint64_t v33 = v32;
    uint64_t v34 = (uint64_t)&v18[*(int *)(TupleTypeMetadata2 + 48)];
    swift_unknownObjectRetain();
    sub_188D28EC0((uint64_t)v18, v34, v31, v33, a3, v13, v12);
    swift_unknownObjectRelease();
    uint64_t v35 = v63;
    uint64_t v36 = v64;
    (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v28, v18, v64);
    uint64_t v37 = v68;
    uint64_t v38 = v62;
    uint64_t v69 = *(void *)(v69 + 32);
    ((void (*)(char *, uint64_t, uint64_t))v69)(v62, v34, v68);
    uint64_t v39 = swift_getAssociatedConformanceWitness();
    char v40 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 48);
    v40(v38, v37, v39);
    BOOL v41 = v66;
    (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v66, v28, v36);
    uint64_t v42 = v70;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v41, 1LL, a4) == 1)
    {
      uint64_t v43 = *(void (**)(char *, uint64_t))(v35 + 8);
      v43(v28, v36);
      v43(v66, v36);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(v65, 1LL, 1LL, a4);
      uint64_t v44 = v67;
      uint64_t v45 = v38;
    }

    else
    {
      uint64_t v59 = v28;
      uint64_t v51 = v38;
      uint64_t v52 = (uint64_t)v61;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v61, v66, a4);
      BOOL v53 = Rope._Node.isFull.getter();
      uint64_t v54 = v65;
      if (v53)
      {
        unsigned __int16 v55 = Rope._Node.header.getter();
        Rope._Node.split(keeping:)(v55 >> 1, a4);
      }

      v40((char *)(v52 + *(int *)(a4 + 36)), v37, v39);
      sub_188D51994(v52, 0LL, a4);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v52, a4);
      (*(void (**)(char *, uint64_t))(v63 + 8))(v59, v64);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(v54, 1LL, 1LL, a4);
      uint64_t v44 = v67;
      uint64_t v45 = v51;
    }

    return ((uint64_t (*)(uint64_t, char *, uint64_t))v69)(v44, v45, v37);
  }

uint64_t sub_188D28EC0( uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = type metadata accessor for Rope._Node(0LL, a6, a7, a4);
  uint64_t v15 = MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, v14);
  Rope._UnsafeHandle.mutableChildren.getter(a3, a4, a6, v14, a7, v15);
  return Rope._Node._graftFront(_:)(a1, a2, a5, v14);
}

uint64_t sub_188D28F64( uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = type metadata accessor for Rope._Node(0LL, a6, a7, a4);
  uint64_t v15 = MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, v14);
  Rope._UnsafeHandle.mutableChildren.getter(a3, a4, a6, v14, a7, v15);
  uint64_t result = Rope._UnsafeHandle.childCount.getter(a3);
  if (!__OFSUB__(result, 1LL)) {
    return Rope._Node._graftBack(_:)(a1, a2, a5, v14);
  }
  __break(1u);
  return result;
}

uint64_t sub_188D29048(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)&v12 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))((char *)&v12 - v9, v2, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, a2);
  return static Rope.join(_:_:)((uint64_t)v10, (uint64_t)v8, *(void *)(a2 + 16), *(void *)(a2 + 24), v2);
}

uint64_t sub_188D29100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = type metadata accessor for Rope._Node(255LL, v6, v7, a4);
  uint64_t v9 = sub_188DF8384();
  uint64_t v10 = MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)&v19 - v11;
  uint64_t v13 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v12, a1, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v12, 0LL, 1LL, v8);
  Rope.init(root:)((uint64_t)v12, v6, v7, v17, (uint64_t)v15);
  sub_188D29048((uint64_t)v15, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, a2);
}

uint64_t sub_188D2921C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  uint64_t v5 = MEMORY[0x1895F8858](a1);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v9 = (char *)&v11 - v8;
  (*(void (**)(char *))(v4 + 16))((char *)&v11 - v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v7, v2, a2);
  return static Rope.join(_:_:)((uint64_t)v9, (uint64_t)v7, *(void *)(a2 + 16), *(void *)(a2 + 24), v2);
}

uint64_t TreeSet.union(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = a4;
  char v11 = _HashNode.union<A>(_:_:)( 0,  a1,  a2,  a4,  a5,  a7,  (void *)(MEMORY[0x18961AFC8] + 8LL),  MEMORY[0x18961AFC8] + 8LL,  a8);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  swift_release();
  if ((v11 & 1) != 0) {
    return TreeSet.init(_new:)(v13, v15, a7, a8);
  }
  swift_retain();
  swift_release();
  return v10;
}

uint64_t TreeSet.union<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = a4;
  char v11 = _HashNode.union<A>(_:_:)(0, a1, a2, a4, a5, a7, (void *)(MEMORY[0x18961AFC8] + 8LL), a8, a9);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  swift_release();
  if ((v11 & 1) != 0) {
    return TreeSet.init(_new:)(v13, v15, a7, a9);
  }
  swift_retain();
  swift_release();
  return v10;
}

uint64_t TreeSet.union<A>(_:)( uint64_t a1, void (*a2)(void, void, void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v43 = a4;
  uint64_t v44 = a2;
  uint64_t v42 = a1;
  uint64_t v45 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_188DF8384();
  MEMORY[0x1895F8858](v13);
  uint64_t v15 = (char *)&v37 - v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v40 = AssociatedTypeWitness;
  uint64_t v41 = v17;
  uint64_t v18 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v20 = (char *)&v37 - v19;
  uint64_t v21 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](v18);
  uint64_t v23 = (char *)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (type metadata accessor for TreeSet(0LL, a5, a7, v24) == a6)
  {
    uint64_t v34 = v42;
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v23, v42, a6);
    swift_dynamicCast();
    uint64_t v33 = TreeSet.union(_:)((uint64_t)v46, v47, v35, (uint64_t)v44, a3, v43, a5, a7);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v34, a6);
  }

  else
  {
    uint64_t v46 = v44;
    uint64_t v47 = a3;
    uint64_t v38 = v21;
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v23, v42, a6);
    swift_retain();
    sub_188DF7FDC();
    uint64_t v39 = a6;
    uint64_t v25 = v40;
    swift_getAssociatedConformanceWitness();
    sub_188DF84D4();
    uint64_t v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
    if (v26(v15, 1LL, a5) != 1)
    {
      uint64_t v44 = *(void (**)(void, void, void))(v45 + 32);
      uint64_t v43 = MEMORY[0x18961AFC8] + 8LL;
      do
      {
        v44(v12, v15, a5);
        uint64_t v27 = v20;
        uint64_t v28 = v25;
        uint64_t v29 = sub_188DF5A9C();
        unint64_t v30 = (void *)type metadata accessor for _HashNode(0LL, a5, v43, a7);
        uint64_t v31 = v29;
        uint64_t v25 = v28;
        uint64_t v20 = v27;
        _HashNode.insert(_:_:_:)(0, (uint64_t)v12, v32, v31, v30);
        (*(void (**)(char *, uint64_t))(v45 + 8))(v12, a5);
        sub_188DF84D4();
      }

      while (v26(v15, 1LL, a5) != 1);
    }

    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v42, v39);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v20, v25);
    return TreeSet.init(_new:)((uint64_t)v46, v47, a5, a7);
  }

  return v33;
}

uint64_t _HashNode.removeItem(at:_:)(uint64_t a1, uint64_t a2, char a3, unsigned int a4, void *a5)
{
  uint64_t v10 = a5[2];
  uint64_t v11 = a5[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v14 = &v17[-v13];
  uint64_t v18 = v10;
  uint64_t v19 = v11;
  uint64_t v20 = a5[4];
  _HashNode.removeItem<A>(at:_:by:)(a3, a4, (void (*)(unint64_t))sub_188D29C88, (uint64_t)v17, a5);
  uint64_t v15 = &v14[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(void *)(v10 - 8) + 32LL))(a1, v14, v10);
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(void *)(v11 - 8) + 32LL))(a2, v15, v11);
}

uint64_t _HashNode.removeItem(at:)(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  uint64_t v19 = a2;
  uint64_t v9 = a4[2];
  uint64_t v8 = a4[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v12 = (char *)&v18 - v11;
  uint64_t v13 = a4[4];
  v14.i32[0] = *(_DWORD *)nullsub_1(*v4 + 16LL, *v4 + 32LL, v9, v8, v13) & ~(-1 << a3);
  uint8x8_t v15 = (uint8x8_t)vcnt_s8(v14);
  v15.i16[0] = vaddlv_u8(v15);
  uint64_t v21 = v9;
  uint64_t v22 = v8;
  uint64_t v23 = v13;
  _HashNode.removeItem<A>(at:_:by:)( a3,  v15.u32[0],  (void (*)(unint64_t))sub_188D29C88,  (uint64_t)v20,  a4);
  uint64_t v16 = &v12[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(a1, v12, v9);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v8 - 8) + 32LL))(v19, v16, v8);
}

uint64_t _HashNode.UnsafeHandle._removeItem<A>(at:by:)( unsigned int a1, void (*a2)(unint64_t), uint64_t a3, unsigned int *a4, uint64_t a5)
{
  uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)*a4);
  v9.i16[0] = vaddlv_u8(v9);
  if (*a4 == a4[1]) {
    uint64_t v10 = *a4;
  }
  else {
    uint64_t v10 = v9.u32[0];
  }
  uint64_t v11 = *(void *)(*(void *)(swift_getTupleTypeMetadata2() - 8) + 72LL);
  uint64_t v12 = a4[2];
  a4[3] += v11;
  a2(a5 - v11 * v10 + v12 + (v10 + ~(unint64_t)a1) * v11);
  swift_getTupleTypeMetadata2();
  return sub_188DF836C();
}

uint64_t _HashNode.UnsafeHandle._removeChild(at:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)(a2 + 12) += 16;
  type metadata accessor for _HashNode(0LL, a4, a5, a6);
  sub_188DF8378();
  sub_188DF836C();
  return v7;
}

uint64_t _HashNode.removeItem<A>(at:_:by:)( char a1, unsigned int a2, void (*a3)(unint64_t), uint64_t a4, void *a5)
{
  uint64_t v10 = *v5;
  --v5[1];
  uint64_t v11 = (unsigned int *)nullsub_1(v10 + 16, v10 + 32, a5[2], a5[3], a5[4]);
  return sub_188D29C8C(v11, v12, a2, a3, a4, a1);
}

uint64_t sub_188D29C8C( unsigned int *a1, uint64_t a2, unsigned int a3, void (*a4)(unint64_t), uint64_t a5, char a6)
{
  uint64_t result = _HashNode.UnsafeHandle._removeItem<A>(at:by:)(a3, a4, a5, a1, a2);
  unsigned int v9 = *a1;
  if ((a1[1] & *a1) != 0)
  {
    int v10 = v9 - 1;
    a1[1] = v10;
  }

  else
  {
    int v10 = v9 & ((-1 << a6) - 1);
  }

  *a1 = v10;
  return result;
}

uint64_t _HashNode.removeChild(at:_:)(char a1, uint64_t a2, void *a3)
{
  uint64_t v6 = a3[2];
  uint64_t v7 = a3[3];
  uint64_t v8 = a3[4];
  uint64_t v9 = nullsub_1(*v3 + 16LL, *v3 + 32LL, v6, v7, v8);
  uint64_t result = _HashNode.UnsafeHandle._removeChild(at:)(a2, v9, v10, v6, v7, v8);
  *(_DWORD *)(v9 + 4) &= (-1 << a1) - 1;
  v3[1] -= v12;
  return result;
}

uint64_t _HashNode.removeSingletonItem()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v8 = a3[2];
  uint64_t v7 = a3[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v11 = (char *)&v19 - v10;
  v3[1] = 0LL;
  uint64_t v12 = *v3 + 16LL;
  uint64_t v13 = *v3 + 32LL;
  uint64_t v14 = a3[4];
  uint8x8_t v15 = (unsigned int *)nullsub_1(v12, v13, v8, v7, v14);
  sub_188D29EB8(v15, v16, v8, v7, v14, (uint64_t)v11);
  uint64_t v17 = &v11[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v8 - 8) + 32LL))(a1, v11, v8);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a2, v17, v7);
}

uint64_t sub_188D29EB8@<X0>( unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v13 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint8x8_t v15 = &v19[-v14];
  uint64_t v16 = &v19[*(int *)(v13 + 48) - v14];
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  _HashNode.UnsafeHandle._removeItem<A>(at:by:)( 0,  (void (*)(unint64_t))sub_188D29C88,  (uint64_t)v19,  a1,  a2);
  _HashNode.UnsafeHandle.clear()();
  uint64_t v17 = a6 + *(int *)(TupleTypeMetadata2 + 48);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(void *)(a3 - 8) + 32LL))(a6, v15, a3);
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(void *)(a4 - 8) + 32LL))(v17, v16, a4);
}

uint64_t _HashNode.removeSingletonChild()(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = nullsub_1(*v1 + 16LL, *v1 + 32LL, v2, v3, v4);
  uint64_t result = _HashNode.UnsafeHandle._removeChild(at:)(0LL, v5, v6, v2, v3, v4);
  *(_DWORD *)(v5 + 4) = 0;
  v1[1] = 0LL;
  return result;
}

uint64_t sub_188D2A068()
{
  return sub_188DF8378();
}

uint64_t _HashNode.isDisjoint<A>(_:with:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result = 1LL;
  if (a5 && a3)
  {
    if (a4 == a2) {
      return 0LL;
    }
    if (_HashNode.isCollisionNode.getter(a4, a5, a6, a7, a9))
    {
      uint64_t v18 = a1;
      uint64_t v19 = a2;
      uint64_t v20 = a3;
      uint64_t v21 = a4;
      uint64_t v22 = a5;
      uint64_t v23 = a6;
      uint64_t v24 = a7;
      uint64_t v25 = a8;
      return _HashNode._isDisjointCollision<A>(_:with:)(v18, v19, v20, v21, v22, v23, v24, v25, a9);
    }

    if (_HashNode.isCollisionNode.getter(a2, a3, a6, a8, a9))
    {
      uint64_t v18 = a1;
      uint64_t v19 = a4;
      uint64_t v20 = a5;
      uint64_t v21 = a2;
      uint64_t v22 = a3;
      uint64_t v23 = a6;
      uint64_t v24 = a8;
      uint64_t v25 = a7;
      return _HashNode._isDisjointCollision<A>(_:with:)(v18, v19, v20, v21, v22, v23, v24, v25, a9);
    }

    uint64_t v26 = nullsub_1(a4 + 16, a4 + 32, a6, a7, a9);
    sub_188D2A360(v26, v27, a2, a3, a1, a6, a7, a8, a9);
    return v28;
  }

  return result;
}

uint64_t _HashNode._isDisjointCollision<A>(_:with:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (_HashNode.isCollisionNode.getter(a2, a3, a6, a8, a9))
  {
    nullsub_1(a4 + 16, a4 + 32, a6, a7, a9);
    uint64_t v17 = v16;
    nullsub_1(a2 + 16, a2 + 32, a6, a8, a9);
    sub_188D2A9F0(v18, v17, v23);
    return v23[0];
  }

  else
  {
    unint64_t v20 = ((unint64_t)_HashNode.collisionHash.getter(a4, a5, a6, a7, a9) >> a1) & 0x1F;
    uint64_t v21 = nullsub_1(a2 + 16, a2 + 32, a6, a8, a9);
    sub_188D2ACBC(v21, v22, v20, a4, a5, a1, a6, a7, a8, a9);
    return v23[16];
  }

_DWORD *sub_188D2A360( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15 = nullsub_1(a3 + 16, a3 + 32, a6, a8, a9);
  return sub_188D2A404(v15, v16, a1, a2, a5, a6, a7, a8, a9);
}

_DWORD *sub_188D2A404( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v105 = a4;
  uint64_t v106 = a8;
  uint64_t v109 = a7;
  int v94 = a5;
  uint64_t v104 = a2;
  uint64_t v102 = *(void *)(a6 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](a1);
  uint64_t v12 = (char *)&v93 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = (_DWORD *)MEMORY[0x1895F8858](v10);
  uint64_t v101 = (char *)&v93 - v16;
  int v19 = *v17;
  int v18 = v17[1];
  uint64_t v107 = result;
  uint64_t v108 = v17;
  int v20 = v18 | v19;
  int v22 = *result;
  int v21 = result[1];
  if (((v21 | *result) & v20) == 0)
  {
    char v92 = 1;
    goto LABEL_25;
  }

  uint64_t v93 = v14;
  uint64_t v103 = a9;
  unsigned int v23 = v22 & v19;
  if ((v22 & v19) == 0)
  {
LABEL_7:
    unsigned int v37 = v21 & v19;
    if ((v21 & v19) != 0)
    {
      LODWORD(v96) = v94 + 5;
      uint64_t v38 = v108;
      uint64_t v39 = v105;
      uint64_t v40 = v103;
      uint64_t v41 = (uint64_t)v101;
      while (1)
      {
        int v42 = -1 << __clz(__rbit32(v37));
        v15.i32[0] = *v38 & ~v42;
        uint8x8_t v43 = (uint8x8_t)vcnt_s8(v15);
        v43.i16[0] = vaddlv_u8(v43);
        unsigned __int32 v98 = v43.i32[0];
        uint64_t v44 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v43.u32[0], v38, v39, a6, v109, v40);
        uint64_t v45 = v102;
        uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v102 + 16);
        v46(v41, v44, a6);
        uint64_t v47 = sub_188DF5A9C();
        uint64_t v48 = *(uint64_t (**)(uint64_t, uint64_t))(v45 + 8);
        uint64_t v99 = v47;
        uint64_t v100 = v48;
        __n128 v49 = ((__n128 (*)(uint64_t, uint64_t))v48)(v41, a6);
        uint64_t v50 = v106;
        v49.n128_u32[0] = v107[1] & ~v42;
        v49.n128_u64[0] = (unint64_t)vcnt_s8((int8x8_t)v49.n128_u64[0]);
        v49.n128_u16[0] = vaddlv_u8((uint8x8_t)v49.n128_u64[0]);
        uint64_t v51 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v49.n128_u32[0], v107, v104, a6, v106, v40);
        uint64_t v52 = *v51;
        int v97 = (void (*)(uint64_t, uint64_t, uint64_t))v51[1];
        uint64_t v53 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v98, v38, v39, a6, v109, v40);
        v46(v41, v53, a6);
        swift_retain();
        LOBYTE(v46) = _HashNode.containsKey(_:_:_:)(v96, v41, v99, v52, (uint64_t)v97, a6, v50, v40);
        swift_release();
        uint64_t result = (_DWORD *)v100(v41, a6);
        v37 &= v37 - 1;
        if (!v37) {
          goto LABEL_11;
        }
      }
    }

    else
    {
LABEL_11:
      int v54 = v108[1];
      unsigned int v55 = *v107 & v54;
      if (v55)
      {
        unsigned int v95 = v94 + 5;
        uint64_t v56 = v107;
        uint64_t v57 = v103;
        uint64_t v58 = v104;
        uint64_t v59 = (uint64_t)v101;
        while (1)
        {
          int v60 = -1 << __clz(__rbit32(v55));
          v15.i32[0] = v108[1] & ~v60;
          int8x8_t v61 = vcnt_s8(v15);
          v61.i16[0] = vaddlv_u8((uint8x8_t)v61);
          uint64_t v62 = v61.u32[0];
          v61.i32[0] = *v56 & ~v60;
          uint8x8_t v63 = (uint8x8_t)vcnt_s8(v61);
          v63.i16[0] = vaddlv_u8(v63);
          unsigned __int32 v98 = v63.i32[0];
          uint64_t v64 = v106;
          uint64_t v65 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v63.u32[0], v56, v58, a6, v106, v57);
          uint64_t v66 = v102;
          int v97 = *(void (**)(uint64_t, uint64_t, uint64_t))(v102 + 16);
          v97(v59, v65, a6);
          uint64_t v67 = sub_188DF5A9C();
          uint64_t v68 = *(uint64_t (**)(uint64_t, uint64_t))(v66 + 8);
          uint64_t v99 = v67;
          uint64_t v100 = v68;
          v68(v59, a6);
          uint64_t v69 = v62;
          uint64_t v70 = v109;
          unsigned int v71 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v69, v108, v105, a6, v109, v57);
          uint64_t v72 = *v71;
          uint64_t v96 = v71[1];
          uint64_t v73 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v98, v56, v58, a6, v64, v57);
          v97(v59, v73, a6);
          swift_retain();
          LOBYTE(v64) = _HashNode.containsKey(_:_:_:)(v95, v59, v99, v72, v96, a6, v70, v57);
          swift_release();
          uint64_t result = (_DWORD *)v100(v59, a6);
          if ((v64 & 1) != 0) {
            break;
          }
          v55 &= v55 - 1;
          if (!v55)
          {
            int v54 = v108[1];
            goto LABEL_16;
          }
        }
      }

      else
      {
LABEL_16:
        unsigned int v74 = v107[1] & v54;
        if (!v74)
        {
          char v92 = 1;
          goto LABEL_23;
        }

        uint64_t v75 = (v94 + 5);
        uint64_t v76 = v109;
        uint64_t v77 = v103;
        while (1)
        {
          int v78 = v107;
          int v79 = -1 << __clz(__rbit32(v74));
          v15.i32[0] = v108[1] & ~v79;
          int8x8_t v80 = vcnt_s8(v15);
          v80.i16[0] = vaddlv_u8((uint8x8_t)v80);
          uint64_t v81 = v80.u32[0];
          v80.i32[0] = v107[1] & ~v79;
          uint8x8_t v82 = (uint8x8_t)vcnt_s8(v80);
          v82.i16[0] = vaddlv_u8(v82);
          uint64_t v83 = v82.u32[0];
          uint64_t v84 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v81, v108, v105, a6, v76, v77);
          uint64_t v85 = *v84;
          uint64_t v86 = v84[1];
          uint64_t v87 = v78;
          uint64_t v88 = v106;
          uint64_t v89 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v83, v87, v104, a6, v106, v77);
          uint64_t v91 = *v89;
          uint64_t v90 = v89[1];
          swift_retain();
          swift_retain();
          LOBYTE(v86) = _HashNode.isDisjoint<A>(_:with:)(v75, v91, v90, v85, v86, a6, v76, v88, v77);
          swift_release();
          uint64_t result = (_DWORD *)swift_release();
          if ((v86 & 1) == 0) {
            break;
          }
          v74 &= v74 - 1;
          if (!v74)
          {
            char v92 = 1;
            goto LABEL_23;
          }
        }
      }
    }

    char v92 = 0;
LABEL_23:
    uint64_t v14 = v93;
    goto LABEL_25;
  }

  uint64_t v24 = v107;
  uint64_t v26 = v102;
  uint64_t v25 = v103;
  uint64_t v27 = v101;
  while (1)
  {
    int v28 = -1 << __clz(__rbit32(v23));
    v15.i32[0] = *v108 & ~v28;
    int8x8_t v29 = vcnt_s8(v15);
    v29.i16[0] = vaddlv_u8((uint8x8_t)v29);
    uint64_t v30 = v29.u32[0];
    v29.i32[0] = *v24 & ~v28;
    uint8x8_t v31 = (uint8x8_t)vcnt_s8(v29);
    v31.i16[0] = vaddlv_u8(v31);
    uint64_t v32 = v31.u32[0];
    uint64_t v33 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v30, v108, v105, a6, v109, v25);
    uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
    v34(v27, v33, a6);
    uint64_t v35 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v32, v24, v104, a6, v106, v25);
    v34(v12, v35, a6);
    LOBYTE(v32) = sub_188DF7D90();
    uint64_t v36 = *(void (**)(char *, uint64_t))(v26 + 8);
    v36(v12, a6);
    uint64_t result = (_DWORD *)((uint64_t (*)(char *, uint64_t))v36)(v27, a6);
    if ((v32 & 1) != 0) {
      break;
    }
    v23 &= v23 - 1;
    if (!v23)
    {
      int v19 = *v108;
      int v21 = v107[1];
      goto LABEL_7;
    }
  }

  char v92 = 0;
  uint64_t v14 = v93;
LABEL_25:
  *uint64_t v14 = v92;
  return result;
}

void sub_188D2A9F0(void *a1@<X1>, void *a2@<X3>, char *a3@<X8>)
{
  if (*a2 == *a1)
  {
    uint64_t v7 = a3;
    _HashNode.UnsafeHandle.reverseItems.getter();
    uint64_t v3 = _HashNode.UnsafeHandle.reverseItems.getter();
    MEMORY[0x1895F8858](v3);
    swift_getTupleTypeMetadata2();
    uint64_t v4 = sub_188DF83F0();
    MEMORY[0x1895D7620](MEMORY[0x189618B38], v4);
    char v5 = sub_188DF8018();
    a3 = v7;
    char v6 = v5 & 1;
  }

  else
  {
    char v6 = 1;
  }

  *a3 = v6;
}

BOOL sub_188D2AB44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v24 = a7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v14 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v17 = (char *)&v23 - v16;
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  uint64_t v18 = *(int *)(v15 + 48);
  int v19 = &v17[v18];
  uint64_t v20 = a1 + v18;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16LL))(v17, a1, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16LL))(v19, v20, a5);
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  uint64_t v27 = a6;
  uint64_t v28 = v24;
  int8x8_t v29 = v17;
  swift_getTupleTypeMetadata2();
  uint64_t v21 = sub_188DF83F0();
  MEMORY[0x1895D7620](MEMORY[0x189618B38], v21);
  LOBYTE(a_HashNode.ensureUnique(isUnique:)(v1 & 1) = sub_188DF806C();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, TupleTypeMetadata2);
  return (a1 & 1) == 0;
}

void sub_188D2ACBC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v14 = *(void *)(a7 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](a1);
  uint64_t v23 = (char *)&v38 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v24 = *(_DWORD *)(v15 + 4);
  int v26 = 1 << v25;
  if ((v24 & (1 << v25)) != 0)
  {
    v21.i32[0] = v24 & (v26 - 1);
    uint8x8_t v27 = (uint8x8_t)vcnt_s8(v21);
    v27.i16[0] = vaddlv_u8(v27);
    uint64_t v28 = (v18 + 5);
    uint64_t v29 = v17;
    uint64_t v40 = v10;
    uint64_t v30 = v20;
    uint64_t v31 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v27.u32[0], v16, v19, a7, a9, a10);
    uint64_t v33 = *v31;
    uint64_t v32 = v31[1];
    swift_retain();
    char v34 = _HashNode.isDisjoint<A>(_:with:)(v28, v33, v32, a4, v29, a7, a8, a9, a10);
    swift_release();
    *uint64_t v30 = v34 & 1;
  }

  else if ((*v16 & v26) != 0)
  {
    v21.i32[0] = *v16 & (v26 - 1);
    uint8x8_t v35 = (uint8x8_t)vcnt_s8(v21);
    v35.i16[0] = vaddlv_u8(v35);
    uint64_t v40 = v20;
    uint64_t v36 = _HashNode.UnsafeHandle.itemPtr(at:)(v35.u32[0], (uint64_t)v16, v19);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v23, v36, a7);
    uint64_t v39 = sub_188DF5A9C();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v23, a7);
    nullsub_1(a4 + 16, a4 + 32, a7, a8, a10);
    sub_188D2AEB8(v37, v39, v40);
  }

  else
  {
    *uint64_t v20 = 1;
  }

void sub_188D2AEB8(void *a1@<X1>, uint64_t a2@<X2>, BOOL *a3@<X8>)
{
  BOOL v4 = 1;
  if (*a1 == a2)
  {
    _OWORD v7[3] = v7;
    v7[0] = _HashNode.UnsafeHandle.reverseItems.getter();
    v7[1] = v5;
    MEMORY[0x1895F8858](v7[0]);
    swift_getTupleTypeMetadata2();
    uint64_t v6 = sub_188DF83F0();
    MEMORY[0x1895D7620](MEMORY[0x189618B38], v6);
    BOOL v4 = (sub_188DF806C() & 1) == 0;
  }

  *a3 = v4;
}

BOOL sub_188D2AFDC(uint64_t a1)
{
  return sub_188D2AB44(a1, v1[6], v1[7], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_188D2B000()
{
  return sub_188DF7D90() & 1;
}

uint64_t sub_188D2B03C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x18961A748];
  uint64_t v3 = sub_188DF8AB0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104LL))(a1, v2, v3);
}

uint64_t OrderedSet.customMirror.getter@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v22 = a4;
  uint64_t v23 = a5;
  uint64_t v8 = sub_188DF8AB0();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C749ED0);
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v24 = a2;
  uint64_t v15 = *MEMORY[0x18961A708];
  uint64_t v16 = sub_188DF8AA4();
  uint64_t v17 = *(void *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 104))(v14, v15, v16);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
  type metadata accessor for OrderedSet(0LL, a3, v22, v18);
  uint64_t v19 = sub_188DF8738();
  MEMORY[0x1895D7620](MEMORY[0x189619590], v19);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x18961A748], v8);
  swift_retain();
  swift_retain_n();
  return sub_188DF8ABC();
}

uint64_t sub_188D2B21C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return OrderedSet.customMirror.getter(*v2, v2[1], *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t BitSet.isEmpty.getter(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 1LL;
  }
  if (*(void *)(result + 32)) {
    return 0LL;
  }
  if (v1 == 1) {
    return 1LL;
  }
  for (uint64_t i = 5LL; ; ++i)
  {
    uint64_t v3 = *(void *)(result + 8 * i);
    BOOL v4 = v3 == 0;
    if (v3) {
      return v4;
    }
    uint64_t v5 = i - 3;
    if (__OFADD__(i - 4, 1LL)) {
      break;
    }
    if (v5 == v1) {
      return v4;
    }
  }

  __break(1u);
  return result;
}

uint64_t BitSet.underestimatedCount.getter(int8x8_t *a1)
{
  int8x8_t v1 = a1[2];
  if (!*(void *)&v1) {
    return 0LL;
  }
  uint64_t result = 0LL;
  BOOL v4 = a1 + 4;
  uint64_t v5 = 8LL * *(void *)&v1;
  while (1)
  {
    uint8x8_t v6 = (uint8x8_t)vcnt_s8(*v4);
    v6.i16[0] = vaddlv_u8(v6);
    BOOL v7 = __OFADD__(result, v6.u32[0]);
    result += v6.u32[0];
    if (v7) {
      break;
    }
    ++v4;
    v5 -= 8LL;
    if (!v5) {
      return result;
    }
  }

  __break(1u);
  return result;
}

uint64_t BitSet.count.getter(int8x8_t *a1)
{
  int8x8_t v1 = a1[2];
  if (!*(void *)&v1) {
    return 0LL;
  }
  uint64_t result = 0LL;
  BOOL v4 = a1 + 4;
  uint64_t v5 = 8LL * *(void *)&v1;
  while (1)
  {
    uint8x8_t v6 = (uint8x8_t)vcnt_s8(*v4);
    v6.i16[0] = vaddlv_u8(v6);
    BOOL v7 = __OFADD__(result, v6.u32[0]);
    result += v6.u32[0];
    if (v7) {
      break;
    }
    ++v4;
    v5 -= 8LL;
    if (!v5) {
      return result;
    }
  }

  __break(1u);
  return result;
}

uint64_t BitSet.makeIterator()()
{
  return swift_bridgeObjectRetain();
}

  ;
}

Swift::Bool_optional __swiftcall BitSet._customContainsEquatableElement(_:)(Swift::Int a1)
{
  else {
    return (Swift::Bool_optional)((*(void *)(v1 + 8 * ((unint64_t)a1 >> 6) + 32) >> a1) & 1LL);
  }
  return (Swift::Bool_optional)v2;
}

Swift::Int_optional __swiftcall BitSet.Iterator.next()()
{
  unint64_t v1 = v0[2];
  if (!v1)
  {
    uint64_t v5 = v0[1];
    uint64_t v6 = v5 + 1;
    if (!__OFADD__(v5, 1LL))
    {
      uint64_t v7 = *v0;
      uint64_t v8 = *(void *)(*v0 + 16LL);
      if (v6 < v8)
      {
        v0[1] = v6;
        unint64_t v9 = *(void *)(v7 + 8 * v6 + 32);
        v0[2] = v9;
        if (v9)
        {
LABEL_11:
          v0[2] = (v9 - 1) & v9;
          if (((v6 << 6) & 0x8000000000000000LL) == 0)
          {
            Swift::Bool v3 = 0;
            Swift::Int v4 = __clz(__rbit64(v9)) + (v6 << 6);
            goto LABEL_17;
          }

Swift::Int sub_188D2B47C@<X0>(uint64_t a1@<X8>)
{
  Swift::Int_optional v3 = BitSet.Iterator.next()();
  *(void *)a1 = v3.value;
  *(_BYTE *)(a1 + 8) = v3.is_nil;
  return v3.value;
}

void sub_188D2B4A8(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 16);
  if (v3) {
    uint64_t v3 = *(void *)(v2 + 32);
  }
  *a1 = v2;
  a1[1] = 0LL;
  a1[2] = v3;
}

Swift::Bool_optional sub_188D2B4C8(Swift::Int *a1)
{
  return BitSet._customContainsEquatableElement(_:)(*a1);
}

int64_t sub_188D2B4D4()
{
  int64_t v1 = sub_188DD5AE0(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

void *sub_188D2B508(void *a1, unint64_t *a2, uint64_t a3)
{
  return sub_188DC5D1C(a1, a2, a3, *v3);
}

unint64_t BitSet.startIndex.getter(unint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return v1 << 6;
  }
  unint64_t v2 = *(void *)(result + 32);
  if (v2)
  {
    uint64_t v3 = 0LL;
    return __clz(__rbit64(v2)) | v3;
  }

  uint64_t v4 = v1 - 1;
  if (v1 == 1) {
    return v1 << 6;
  }
  uint64_t v5 = (unint64_t *)(result + 40);
  uint64_t v3 = 64LL;
  while (1)
  {
    unint64_t v6 = *v5++;
    unint64_t v2 = v6;
    if (v6) {
      break;
    }
    v3 += 64LL;
    if (!--v4)
    {
      Swift::Int_optional result = v1 << 6;
      if (((v1 << 6) & 0x8000000000000000LL) == 0) {
        return result;
      }
      __break(1u);
      break;
    }
  }

  if (v3 < 0)
  {
    __break(1u);
    return result;
  }

  return __clz(__rbit64(v2)) | v3;
}

uint64_t BitSet.endIndex.getter(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16) << 6;
  if (result < 0) {
    __break(1u);
  }
  return result;
}

uint64_t BitSet.index(after:)(uint64_t a1, uint64_t a2)
{
  return sub_188D2B5A4(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void))_UnsafeBitSet.index(after:));
}

uint64_t BitSet.index(before:)(uint64_t a1, uint64_t a2)
{
  return sub_188D2B5A4(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void))_UnsafeBitSet.index(before:));
}

uint64_t sub_188D2B5A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void))
{
  return a3(a1, a2 + 32, *(void *)(a2 + 16));
}

uint64_t BitSet.distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_188D2B5D0( a1,  a2,  a3,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))_UnsafeBitSet.distance(from:to:));
}

uint64_t BitSet.index(_:offsetBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_188D2B5D0( a1,  a2,  a3,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))_UnsafeBitSet.index(_:offsetBy:));
}

uint64_t sub_188D2B5D0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, void))
{
  return a4(a1, a2, a3 + 32, *(void *)(a3 + 16));
}

Swift::UInt BitSet.index(_:offsetBy:limitedBy:)(Swift::UInt a1, uint64_t a2, Swift::UInt a3, uint64_t a4)
{
  Swift::UInt result = _UnsafeBitSet.index(_:offsetBy:limitedBy:)(a1, a2, a3, a4 + 32, *(void *)(a4 + 16));
  if ((v5 & 1) != 0) {
    return 0LL;
  }
  return result;
}

unint64_t BitSet._customIndexOfEquatableElement(_:)(unint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000LL) != 0
    || result >> 6 >= *(void *)(a2 + 16)
    || ((*(void *)(a2 + 8 * (result >> 6) + 32) >> result) & 1) == 0)
  {
    return 0LL;
  }

  return result;
}

unint64_t BitSet._customLastIndexOfEquatableElement(_:)(unint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  if (result >> 6 >= *(void *)(a2 + 16)) {
    return 0LL;
  }
  if ((*(void *)(a2 + 8 * (result >> 6) + 32) & (1LL << result)) == 0) {
    return 0LL;
  }
  return result;
}

unint64_t sub_188D2B6A8@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = BitSet.startIndex.getter(*v1);
  *a1 = result;
  return result;
}

void sub_188D2B6D0(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 16LL) << 6;
  if (v2 < 0) {
    __break(1u);
  }
  else {
    *a1 = v2;
  }
}

uint64_t (*sub_188D2B6EC(void *a1, void *a2))()
{
  *a1 = *a2;
  return nullsub_1;
}

unint64_t sub_188D2B708@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  unint64_t v6 = *v2;
  unint64_t result = BitSet.startIndex.getter(v6);
  unint64_t v8 = *(void *)(v6 + 16) << 6;
  if ((v8 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (v8 < result)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (v4 < result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  if (v8 >= v5)
  {
    *a2 = v4;
    a2[1] = v5;
    a2[2] = v6;
    return swift_bridgeObjectRetain();
  }

uint64_t sub_188D2B77C@<X0>(void *a1@<X8>)
{
  *a1 = sub_188DD4094(*v1);
  a1[1] = v3;
  a1[2] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_188D2B7A8()
{
  int8x8_t v1 = (*v0)[2];
  if (!*(void *)&v1) {
    return 0LL;
  }
  uint64_t result = 0LL;
  uint64_t v3 = *v0 + 4;
  uint64_t v4 = 8LL * *(void *)&v1;
  while (1)
  {
    uint8x8_t v5 = (uint8x8_t)vcnt_s8(*v3);
    v5.i16[0] = vaddlv_u8(v5);
    BOOL v6 = __OFADD__(result, v5.u32[0]);
    result += v5.u32[0];
    if (v6) {
      break;
    }
    ++v3;
    v4 -= 8LL;
    if (!v4) {
      return result;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_188D2B7F4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_188D2B80C(a1, (uint64_t (*)(void, void))BitSet._customIndexOfEquatableElement(_:), a2);
}

uint64_t sub_188D2B800@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_188D2B80C(a1, (uint64_t (*)(void, void))BitSet._customLastIndexOfEquatableElement(_:), a2);
}

uint64_t sub_188D2B80C@<X0>(void *a1@<X0>, uint64_t (*a2)(void, void)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result = a2(*a1, *v3);
  *(void *)a3 = result;
  *(_BYTE *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 9) = v7 & 1;
  return result;
}

void *sub_188D2B850(void *result, void *a2)
{
  if (*result < *a2 || *result >= a2[1]) {
    __break(1u);
  }
  return result;
}

void *sub_188D2B86C(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < *result) {
    __break(1u);
  }
  return result;
}

void *sub_188D2B888(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < result[1]) {
    __break(1u);
  }
  return result;
}

uint64_t sub_188D2B8A4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_188D2B8C8(a1, (uint64_t (*)(void, uint64_t, void))_UnsafeBitSet.index(after:), a2);
}

uint64_t sub_188D2B8B0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_188D2B908(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, void))_UnsafeBitSet.index(after:));
}

uint64_t sub_188D2B8BC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_188D2B8C8(a1, (uint64_t (*)(void, uint64_t, void))_UnsafeBitSet.index(before:), a2);
}

uint64_t sub_188D2B8C8@<X0>( void *a1@<X0>, uint64_t (*a2)(void, uint64_t, void)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result = a2(*a1, *(void *)v3 + 32LL, *(void *)(*(void *)v3 + 16LL));
  *a3 = result;
  return result;
}

uint64_t sub_188D2B8FC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_188D2B908(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, void))_UnsafeBitSet.index(before:));
}

uint64_t sub_188D2B908( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, void))
{
  uint64_t result = a4(*a1, *(void *)v4 + 32LL, *(void *)(*(void *)v4 + 16LL));
  *a1 = result;
  return result;
}

Swift::UInt sub_188D2B93C@<X0>(Swift::UInt *a1@<X0>, uint64_t a2@<X1>, Swift::UInt *a3@<X8>)
{
  Swift::UInt result = _UnsafeBitSet.index(_:offsetBy:)(*a1, a2, *(void *)v3 + 32LL, *(void *)(*(void *)v3 + 16LL));
  *a3 = result;
  return result;
}

Swift::UInt sub_188D2B970@<X0>(Swift::UInt *a1@<X0>, uint64_t a2@<X1>, Swift::UInt *a3@<X2>, uint64_t a4@<X8>)
{
  Swift::UInt result = _UnsafeBitSet.index(_:offsetBy:limitedBy:)( *a1,  a2,  *a3,  *(void *)v4 + 32LL,  *(void *)(*(void *)v4 + 16LL));
  if ((v7 & 1) != 0) {
    Swift::UInt v8 = 0LL;
  }
  else {
    Swift::UInt v8 = result;
  }
  *(void *)a4 = v8;
  *(_BYTE *)(a4 + 8) = v7 & 1;
  return result;
}

unint64_t sub_188D2B9B4(unint64_t *a1, unint64_t *a2)
{
  return _UnsafeBitSet.distance(from:to:)(*a1, *a2, *(void *)v2 + 32LL, *(void *)(*(void *)v2 + 16LL));
}

unint64_t sub_188D2B9D0()
{
  unint64_t result = qword_18C74A248;
  if (!qword_18C74A248)
  {
    unint64_t result = MEMORY[0x1895D7620]( &protocol conformance descriptor for BitSet.Iterator,  &type metadata for BitSet.Iterator);
    atomic_store(result, (unint64_t *)&qword_18C74A248);
  }

  return result;
}

unint64_t sub_188D2BA18()
{
  unint64_t result = qword_18C74A250;
  if (!qword_18C74A250)
  {
    unint64_t result = MEMORY[0x1895D7620](&protocol conformance descriptor for BitSet, &type metadata for BitSet);
    atomic_store(result, (unint64_t *)&qword_18C74A250);
  }

  return result;
}

unint64_t sub_188D2BA60()
{
  unint64_t result = qword_18C74A258;
  if (!qword_18C74A258)
  {
    unint64_t result = MEMORY[0x1895D7620](&protocol conformance descriptor for BitSet.Index, &type metadata for BitSet.Index);
    atomic_store(result, (unint64_t *)&qword_18C74A258);
  }

  return result;
}

uint64_t sub_188D2BAA4()
{
  return sub_188D2BAFC(&qword_18C74A260, &qword_18C74A268, MEMORY[0x189617A28]);
}

uint64_t sub_188D2BAD0()
{
  return sub_188D2BAFC(&qword_18C74A270, &qword_18C74A278, MEMORY[0x18961A5E8]);
}

uint64_t sub_188D2BAFC(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = MEMORY[0x1895D7620](a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_188D2BB40()
{
  return sub_188D2BBDC(&qword_18C74A280, &qword_18C74A268, MEMORY[0x189617A18]);
}

unint64_t sub_188D2BB6C()
{
  unint64_t result = qword_18C74A288;
  if (!qword_18C74A288)
  {
    unint64_t result = MEMORY[0x1895D7620](&protocol conformance descriptor for BitSet, &type metadata for BitSet);
    atomic_store(result, (unint64_t *)&qword_18C74A288);
  }

  return result;
}

uint64_t sub_188D2BBB0()
{
  return sub_188D2BBDC(&qword_18C74A290, &qword_18C74A278, MEMORY[0x18961A5C8]);
}

uint64_t sub_188D2BBDC(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    unint64_t v7 = sub_188D2BB6C();
    uint64_t result = MEMORY[0x1895D7620](a3, v6, &v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t _s8IteratorVwCP(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s8IteratorVwxx()
{
  return swift_bridgeObjectRelease();
}

void *_s8IteratorVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t _s8IteratorVwta_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for BitSet.Iterator()
{
  return &type metadata for BitSet.Iterator;
}

Swift::Void __swiftcall BitArray.truncateOrExtend(toCount:with:)(Swift::Int toCount, Swift::Bool with)
{
  if (toCount < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }

  unint64_t v3 = *(void *)(v2 + 8);
  if (v3 > toCount)
  {
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      sub_188D3C3F4(v3 - toCount);
      return;
    }

    goto LABEL_9;
  }

  if (v3 < toCount) {
    sub_188D3C4B4(toCount - v3, with);
  }
}

Swift::Void __swiftcall BitArray.insert(repeating:count:at:)(Swift::Bool repeating, Swift::Int count, Swift::Int at)
{
  if (count < at || (Swift::Int v5 = at, v7 = count, (at | count) < 0))
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  if (count < 1) {
    return;
  }
  unint64_t v3 = v4;
  uint64_t v10 = v4[1];
  unint64_t v11 = (unint64_t)&v10[count];
  if (__CFADD__(v10, count)) {
    goto LABEL_19;
  }
  if (v11 >= 0xFFFFFFFFFFFFFFC0LL)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  Swift::Bool v6 = repeating;
  uint64_t v12 = ((v11 + 63) >> 6) - *((void *)*v4 + 2);
  if (v12 < 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  sub_188D2EF64(v12, 0LL);
  v4[1] = (char *)v11;
  if ((v11 & 0x8000000000000000LL) != 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  unint64_t v9 = v11 - v7;
  if ((uint64_t)(v11 - v7) < v5)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  BOOL v13 = __OFADD__(v5, v7);
  v7 += v5;
  if (!v13)
  {
    Swift::UInt v8 = *v4;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v4 = v8;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }

Swift::Void __swiftcall BitArray.append(repeating:count:)(Swift::Bool repeating, Swift::Int count)
{
  if (count < 0)
  {
    __break(1u);
  }

  else if (count)
  {
    sub_188D3C4B4(count, repeating);
  }

uint64_t sub_188D2BEF4(unint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v4 = v1 + 16;
  uint64_t v5 = *(unsigned __int8 *)(v1 + 16);
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_188DF848C();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v8 = v5 + v6;
  if (__OFADD__(v5, v6))
  {
    __break(1u);
    goto LABEL_26;
  }

  if (v8 >= 256)
  {
    if ((unint64_t)v8 > 0x17A)
    {
      if ((_DWORD)v5 == 255) {
        return 0LL;
      }
      uint64_t v8 = 255LL;
      goto LABEL_21;
    }

    v8 -= 124LL;
  }

  if (v8 == v5) {
    return 0LL;
  }
  if (v8 > v5)
  {
LABEL_21:
    unint64_t v6 = a1;
    sub_188D8C938(v8 - v5, (unint64_t)v59);
    sub_188D2DD1C((uint64_t)v59, (uint64_t)&v60);
    a1 = v63;
    if (v63)
    {
      unint64_t v42 = v60;
      unint64_t v43 = v61;
      unint64_t v44 = v62;
      uint64_t v45 = v65;
      uint64_t v57 = v64;
      uint64_t v5 = v66;
      if ((uint64_t)sub_188D82544(v60, v61, v62, v63) <= 255)
      {
        unint64_t v46 = sub_188D82544(v42, v43, v44, a1);
        uint64_t v47 = sub_188DF7F7C();
        unint64_t v48 = sub_188D62BEC(v42, v43, v44, a1);
        int64_t v49 = sub_188D38104(v46, v47, v48, v57, v45, v5);
        sub_188D37FDC(v49 & 0xFFFFFFFFFFFFLL);
        sub_188D2DC60();
        sub_188DF7EC8();
        sub_188D2DD64((uint64_t)v59);
        return 0LL;
      }

LABEL_31:
    __break(1u);
    goto LABEL_32;
  }

      uint64_t v26 = v11;
LABEL_32:
      if (v26) {
        goto LABEL_45;
      }
      unint64_t v11 = 0LL;
LABEL_35:
      swift_unknownObjectRelease();
      if (v11 < 0) {
        goto LABEL_43;
      }
      unint64_t v10 = v21 | (v22 << 8);
      uint64_t v5 = v27;
LABEL_37:
      *a1 = v3;
      a1[1] = v4;
      a1[2] = v6;
      a1[3] = v5;
      a1[4] = v8;
      a1[5] = v7;
      a1[6] = v11 | 0x300LL;
      a1[7] = v7;
      a1[8] = v10;
      a1[9] = v12;
      return;
    }

            uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v114 + 8))((char *)v67, v117);
LABEL_33:
            __break(1u);
            return result;
          }
        }
      }

      int v97 = v124;
      v123(v24, v124, v21);
      sub_188DF8108();
      v57(v97, v21);
      a1 = v113;
      unint64_t v12 = v101;
      break;
    }

    uint64_t v66 = v119;
    uint64_t v67 = *(unsigned int (**)(void, void, void))(v119 + 48);
    if (v67(v60, 1LL, v9) == 1)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }

    uint64_t v68 = Rope._Node.rebalance(nextNeighbor:)(v65, v9);
    uint64_t v69 = *(void (**)(char *, char *, uint64_t))(v114 + 16);
    if ((v68 & 1) != 0)
    {
      uint64_t v70 = v105;
      v69(v105, v60, v117);
      unsigned int v71 = v67(v70, 1LL, v9);
      unint64_t v44 = v121;
      if (v71 != 1)
      {
        uint64_t v72 = v102;
        uint64_t v73 = v70;
        unsigned int v74 = *(void (**)(char *, char *, uint64_t))(v66 + 32);
        v74(v102, v73, v9);
        v57(v60, v21);
        (*(void (**)(uint64_t *, uint64_t))(v66 + 8))(v65, v9);
        v74((char *)v65, v72, v9);
        goto LABEL_23;
      }

      goto LABEL_32;
    }

    uint64_t v70 = v106;
    v69(v106, v60, v117);
    uint64_t v91 = v67(v70, 1LL, v9);
    unint64_t v44 = v121;
    if (v91 == 1)
    {
LABEL_32:
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v114 + 8))(v70, v117);
      goto LABEL_33;
    }

    uint64_t v123 = *(void (**)(char *, char *, uint64_t))(v66 + 32);
    char v92 = (uint64_t)v103;
    v123(v103, v70, v9);
    uint64_t v93 = (uint64_t)v104;
    ((void (*)(char *, uint64_t *, uint64_t))v118)(v104, v65, v9);
    static Rope._Node.createInner(children:_:)(v92, v93, v116, v115);
    v57(v60, v21);
    (*(void (**)(uint64_t *, uint64_t))(v66 + 8))(v65, v9);
    v123((char *)v65, v111, v9);
LABEL_23:
    uint16x8_t v126 = *v120;
    MEMORY[0x1895D7620](MEMORY[0x189618488], v44);
    int v94 = sub_188DF827C();
    a1 = v113;
    unint64_t v12 = v101;
    int64_t v49 = MEMORY[0x189618458];
    unint64_t v50 = MEMORY[0x189618490];
    if ((v94 & 1) == 0) {
      continue;
    }
    break;
  }

      uint64_t v5 = (unint64_t)sub_188CF73DC(v5);
      *unint64_t v4 = (char *)v5;
      goto LABEL_17;
    }

  __break(1u);
  return result;
}

    uint64_t v28 = v13;
LABEL_32:
    if (v28) {
      goto LABEL_48;
    }
    char v13 = 0LL;
LABEL_35:
    swift_unknownObjectRelease();
    if (v13 < 0) {
      goto LABEL_46;
    }
    unint64_t v12 = v23 | (v24 << 8);
  }

  if (v8) {
    uint64_t v29 = (v9 << 11) | 0x300;
  }
  else {
    uint64_t v29 = 768LL;
  }
  uint64_t v30 = v13 | 0x300LL;
  uint64_t v31 = sub_188DCF614(v29, 0LL, 0LL, 1LL);
  unint64_t v33 = v32;
  unint64_t v35 = v34;
  uint64_t v37 = v36;
  sub_188D087F8((uint64_t)&v42);
  *a3 = v7;
  a3[1] = v6;
  a3[2] = v41;
  a3[3] = v40;
  a3[4] = v10;
  a3[5] = v39;
  a3[6] = v30;
  a3[7] = *((void *)&v10 + 1);
  a3[8] = v12;
  a3[9] = v14;
  a3[10] = v31;
  a3[11] = v33;
  a3[12] = v35;
  a3[13] = v37;
}

      uint64_t v26 = v11;
LABEL_32:
      if (v26) {
        goto LABEL_45;
      }
      unint64_t v11 = 0LL;
LABEL_35:
      swift_unknownObjectRelease();
      if (v11 < 0) {
        goto LABEL_43;
      }
      unint64_t v10 = v21 | (v22 << 8);
      uint64_t v5 = v27;
LABEL_37:
      *a1 = v3;
      a1[1] = v4;
      a1[2] = v6;
      a1[3] = v5;
      a1[4] = v8;
      a1[5] = v7;
      a1[6] = v11 | 0x300LL;
      a1[7] = v7;
      a1[8] = v10;
      a1[9] = v12;
      return;
    }

uint64_t sub_188D2C3E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (void *)v5;
  uint64_t v7 = *(unsigned int *)(v5 + 18);
  uint64_t v8 = *(unsigned __int16 *)(v5 + 16);
  *(_WORD *)(v5 + 16) = a5;
  *(_BYTE *)(v5 + 18) = BYTE2(a5);
  *(_BYTE *)(v5 + 19) = BYTE3(a5);
  *(_BYTE *)(v5 + 20) = BYTE4(a5);
  *(_BYTE *)(v5 + 2_HashNode.ensureUnique(isUnique:)(v1 & 1) = BYTE5(a5);
  sub_188D37FDC(v8 | (v7 << 16));
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_188DF7E74();
  uint64_t v10 = sub_188DF8498();
  BOOL v11 = __OFADD__(v9, v10);
  uint64_t result = v9 + v10;
  if (v11)
  {
    __break(1u);
  }

  else
  {
    MEMORY[0x1895D6690](result);
    sub_188D2DC60();
    sub_188DF7EC8();
    sub_188DF7EC8();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease_n();
    *unint64_t v6 = 0LL;
    v6[1] = 0xE000000000000000LL;
  }

  return result;
}

uint64_t sub_188D2C524( uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = v10;
  unint64_t v18 = result;
  unint64_t v19 = *(void *)v11;
  unint64_t v20 = *(void *)(v11 + 8);
  uint64_t v21 = (*(void *)v11 >> 59) & 1LL;
  if ((v20 & 0x1000000000000000LL) == 0) {
    LOBYTE(v2_HashNode.ensureUnique(isUnique:)(v1 & 1) = 1;
  }
  unint64_t v22 = a8;
  if ((a8 & 0xC) == 4LL << v21)
  {
    uint64_t result = sub_188D37044(a8, *(void *)v11, *(void *)(v11 + 8));
    unint64_t v22 = result;
    uint64_t v43 = a6;
    if ((v20 & 0x1000000000000000LL) == 0) {
      goto LABEL_5;
    }
  }

  else
  {
    uint64_t v43 = a6;
    if ((v20 & 0x1000000000000000LL) == 0)
    {
LABEL_5:
      unint64_t v41 = v22 >> 16;
      goto LABEL_6;
    }
  }

  unint64_t v38 = v19 & 0xFFFFFFFFFFFFLL;
  if ((v20 & 0x2000000000000000LL) != 0) {
    unint64_t v38 = HIBYTE(v20) & 0xF;
  }
  if (v38 < v22 >> 16) {
    goto LABEL_29;
  }
  unint64_t v41 = sub_188DF7F28();
LABEL_6:
  unint64_t v23 = sub_188D82544(v18, a2, a3, a4);
  uint64_t v26 = *(unsigned __int8 *)(v11 + 16);
  if (__OFADD__(v26, v23))
  {
    __break(1u);
    goto LABEL_23;
  }

  if ((uint64_t)(v26 + v23) > 255)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  unint64_t v40 = v23;
  uint64_t v27 = sub_188D82630( a8,  v19,  v20,  ((unint64_t)*(unsigned __int8 *)(v11 + 21) << 40) | ((unint64_t)*(unsigned int *)(v11 + 17) << 8) | v26);
  unsigned __int16 v28 = HIWORD(v27);
  unsigned int v30 = v29;
  *(_WORD *)(v11 + 16) = v27;
  *(_BYTE *)(v11 + 18) = BYTE2(v27);
  *(_BYTE *)(v11 + 19) = BYTE3(v27);
  *(_BYTE *)(v11 + 20) = BYTE4(v27);
  *(_BYTE *)(v11 + 2_HashNode.ensureUnique(isUnique:)(v1 & 1) = BYTE5(v27);
  if ((uint64_t)sub_188D82544(v18, a2, a3, a4) > 255)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  uint64_t v39 = a7;
  unint64_t v31 = sub_188D82544(v18, a2, a3, a4);
  uint64_t v32 = sub_188DF7F7C();
  unint64_t v33 = sub_188D62BEC(v18, a2, a3, a4);
  int64_t v34 = sub_188D38104(v31, v32, v33, a5, v43, v39);
  sub_188D37FDC(v34 & 0xFFFFFFFFFFFFLL);
  sub_188D37FDC(((unint64_t)HIBYTE(v30) << 40) | ((unint64_t)BYTE2(v30) << 32) | (v30 << 16) & 0xFF000000 | (v30 << 16) & 0xFF0000LL | v28);
  sub_188D2DD8C();
  uint64_t result = sub_188DF7EEC();
  unint64_t v24 = v41 + v40;
  if (__OFADD__(v41, v40))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v25 = *(void *)v11;
  unint64_t v35 = *(void *)(v11 + 8);
  if ((v35 & 0x1000000000000000LL) != 0)
  {
LABEL_26:
    unint64_t v37 = MEMORY[0x1895D67BC](15LL, v24, v25);
    return sub_188D2208C(v37, a9, a10);
  }

  if ((v24 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    unint64_t v36 = HIBYTE(v35) & 0xF;
    if ((v35 & 0x2000000000000000LL) == 0) {
      unint64_t v36 = v25 & 0xFFFFFFFFFFFFLL;
    }
    if (v36 >= v24)
    {
      unint64_t v37 = (v24 << 16) | 4;
      return sub_188D2208C(v37, a9, a10);
    }
  }

  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_188D2C7E8@<X0>(void *a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  unint64_t v43 = a2;
  unint64_t v44 = a3;
  uint64_t v6 = sub_188DF8B4C();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  uint64_t v45 = (uint64_t)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)&v39 - v10;
  unint64_t v12 = a1[1];
  unint64_t v13 = a1[2];
  uint64_t v14 = a1[3];
  unint64_t v15 = a1[4];
  swift_bridgeObjectRetain();
  unint64_t v16 = sub_188DF848C();
  swift_bridgeObjectRelease();
  uint64_t v17 = *(unsigned __int8 *)(v4 + 16);
  BOOL v18 = __OFADD__(v17, v16);
  uint64_t v19 = v17 + v16;
  if (v18)
  {
    __break(1u);
    goto LABEL_16;
  }

  if (v19 > 255)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  unint64_t v20 = (char *)a1 + *(int *)(_s9_IngesterVMa() + 24);
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v21(v11, v20, v6);
  sub_188D8C938(v16, (unint64_t)v46);
  sub_188D2DD1C((uint64_t)v46, (uint64_t)v47);
  a1 = v48;
  if (!v48)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
    goto LABEL_12;
  }

  unint64_t v12 = v47[1];
  unint64_t v13 = v47[2];
  uint64_t v41 = v50;
  uint64_t v42 = v49;
  uint64_t v39 = v47[0];
  uint64_t v40 = v51;
  uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v21)(v45, v20, v6);
  uint64_t v14 = *(void *)v4;
  unint64_t v16 = *(void *)(v4 + 8);
  uint64_t v23 = (*(void *)v4 >> 59) & 1LL;
  if ((v16 & 0x1000000000000000LL) == 0) {
    LOBYTE(v23) = 1;
  }
  unint64_t v15 = v43;
  unint64_t v24 = v43;
  if ((v43 & 0xC) == 4LL << v23)
  {
LABEL_17:
    uint64_t result = sub_188D37044(v15, v14, v16);
    unint64_t v24 = result;
    if ((v16 & 0x1000000000000000LL) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }

  if ((v16 & 0x1000000000000000LL) == 0)
  {
LABEL_8:
    unint64_t v25 = v24 >> 16;
    goto LABEL_9;
  }

LABEL_18:
  unint64_t v38 = v14 & 0xFFFFFFFFFFFFLL;
  if ((v16 & 0x2000000000000000LL) != 0) {
    unint64_t v38 = HIBYTE(v16) & 0xF;
  }
  if (v38 < v24 >> 16) {
    goto LABEL_23;
  }
  unint64_t v25 = sub_188DF7F28();
LABEL_9:
  uint64_t v26 = v45;
  sub_188D2C524(v39, v12, v13, (unint64_t)a1, v42, v41, v40, v15, (uint64_t)v11, v45);
  char v28 = v27;
  uint64_t result = sub_188D2DD64((uint64_t)v46);
  if ((v28 & 1) == 0)
  {
    unsigned int v29 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v29(v26, v6);
    v29((uint64_t)v11, v6);
LABEL_12:
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A2A0);
    return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))( v44,  1LL,  1LL,  v30);
  }

  uint64_t v31 = *(unsigned __int8 *)(v4 + 16);
  uint64_t v32 = v31 - v25;
  if (!__OFSUB__(v31, v25))
  {
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A2A0);
    int64_t v34 = v44;
    unint64_t v35 = (char *)v44 + *(int *)(v33 + 64);
    unint64_t v36 = (char *)v44 + *(int *)(v33 + 48);
    *unint64_t v44 = v32;
    unint64_t v37 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v37(v36, v11, v6);
    v37(v35, (char *)v26, v6);
    return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56LL))( v34,  0LL,  1LL,  v33);
  }

  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

    __break(1u);
  }

        uint64_t v1 = sub_188CF73DC((uint64_t)v1);
        *uint64_t v5 = v1;
        goto LABEL_7;
      }

    __break(1u);
    goto LABEL_19;
  }

  __break(1u);
  return result;
}

    *uint64_t v1 = v3;
    uint64_t result = sub_188D8FB84(&v24, v1);
    BOOL v18 = *(void *)(*v1 + 16);
    if (!v18) {
      break;
    }
    uint64_t v19 = 0LL;
    unint64_t v20 = (int8x8_t *)(*v1 + 32);
    uint64_t v21 = 8 * v18;
    while (1)
    {
      unint64_t v22 = (uint8x8_t)vcnt_s8(*v20);
      v22.i16[0] = vaddlv_u8(v22);
      uint64_t v23 = __OFADD__(v19, v22.u32[0]);
      v19 += v22.u32[0];
      if (v23) {
        break;
      }
      ++v20;
      v21 -= 8LL;
      if (!v21) {
        goto LABEL_24;
      }
    }

    __break(1u);
LABEL_26:
    uint64_t v3 = (uint64_t)sub_188CF73DC(v3);
  }

  uint64_t v19 = 0LL;
LABEL_24:
  v1[1] = v19;
  return result;
}

    *uint64_t v1 = v3;
    uint64_t result = sub_188D8FB84(&v24, v1);
    BOOL v18 = *(void *)(*v1 + 16);
    if (!v18) {
      break;
    }
    uint64_t v19 = 0LL;
    unint64_t v20 = (int8x8_t *)(*v1 + 32);
    uint64_t v21 = 8 * v18;
    while (1)
    {
      unint64_t v22 = (uint8x8_t)vcnt_s8(*v20);
      v22.i16[0] = vaddlv_u8(v22);
      uint64_t v23 = __OFADD__(v19, v22.u32[0]);
      v19 += v22.u32[0];
      if (v23) {
        break;
      }
      ++v20;
      v21 -= 8LL;
      if (!v21) {
        goto LABEL_24;
      }
    }

    __break(1u);
LABEL_26:
    uint64_t v3 = (uint64_t)sub_188CF73DC(v3);
  }

  uint64_t v19 = 0LL;
LABEL_24:
  v1[1] = v19;
  return result;
}

uint64_t sub_188D2CADC@<X0>(void (*a1)(void)@<X0>, unint64_t a2@<X1>, unint64_t a3@<X8>)
{
  uint64_t v183 = sub_188DF8B4C();
  __int128 v181 = *(void **)(v183 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](v183);
  unint64_t v180 = (char *)&v163 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v7);
  uint64_t v182 = (uint64_t)&v163 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A298);
  MEMORY[0x1895F8858](v10);
  int v178 = (uint64_t *)((char *)&v163 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A2A0);
  unint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v179 = (char *)&v163 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v186 = (unint64_t *)v3;
  unint64_t v15 = *(unsigned __int8 *)(v3 + 16);
  unint64_t v177 = v3 + 16;
  unint64_t v16 = *(unint64_t **)a1;
  unint64_t v17 = *((void *)a1 + 1);
  uint64_t v185 = a1;
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_188DF848C();
  uint64_t result = swift_bridgeObjectRelease();
  if (v18 < 1)
  {
    (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(a3, 1LL, 1LL, v12);
    goto LABEL_66;
  }

  unint64_t v175 = v13;
  unint64_t v176 = v12;
  uint64_t v184 = (void *)a3;
  uint64_t v20 = v15 + v18;
  if (__OFADD__(v15, v18))
  {
    __break(1u);
  }

  else
  {
    unint64_t v16 = v186;
    unint64_t v17 = *v186;
    a3 = v186[1];
    uint64_t v21 = (*v186 >> 59) & 1;
    if ((a3 & 0x1000000000000000LL) == 0) {
      LOBYTE(v2_HashNode.ensureUnique(isUnique:)(v1 & 1) = 1;
    }
    unint64_t v22 = a2;
    if ((a2 & 0xC) != 4LL << v21)
    {
      if ((a3 & 0x1000000000000000LL) == 0) {
        goto LABEL_7;
      }
      goto LABEL_61;
    }
  }

  uint64_t result = sub_188D37044(a2, v17, a3);
  unint64_t v22 = result;
  if ((a3 & 0x1000000000000000LL) == 0)
  {
LABEL_7:
    uint64_t v23 = v22 >> 16;
    if (v20 > 255) {
      goto LABEL_8;
    }
LABEL_65:
    sub_188D2C7E8(v185, a2, v184);
    goto LABEL_66;
  }

LABEL_83:
  __break(1u);
  return result;
}

      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
      goto LABEL_89;
    }

uint64_t sub_188D2DB9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_bridgeObjectRelease();
}

unint64_t sub_188D2DC60()
{
  unint64_t result = qword_18C4FB2B8;
  if (!qword_18C4FB2B8)
  {
    unint64_t result = MEMORY[0x1895D7620](MEMORY[0x189618C60], MEMORY[0x189618C50]);
    atomic_store(result, (unint64_t *)&qword_18C4FB2B8);
  }

  return result;
}

uint64_t _s12InsertResultOMa()
{
  uint64_t result = qword_18C74A2B8;
  if (!qword_18C74A2B8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_188D2DCE0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_188D2DD1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(qword_18C4FB0D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_188D2DD64(uint64_t a1)
{
  return a1;
}

unint64_t sub_188D2DD8C()
{
  unint64_t result = qword_18C74A2B0;
  if (!qword_18C74A2B0)
  {
    unint64_t result = MEMORY[0x1895D7620](MEMORY[0x189618C68], MEMORY[0x189618C50]);
    atomic_store(result, (unint64_t *)&qword_18C74A2B0);
  }

  return result;
}

void *sub_188D2DDD0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (void *)(v11 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain();
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
      *((_WORD *)a1 + 10) = *((_WORD *)a2 + 10);
      swift_bridgeObjectRetain();
      uint64_t v13 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C74A2A8) + 48);
      uint64_t v14 = (void *)((char *)a1 + v13);
      unint64_t v15 = (void *)((char *)a2 + v13);
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A2A0);
      uint64_t v17 = *(void *)(v16 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16))
      {
        uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A298);
        memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
      }

      else
      {
        *uint64_t v14 = *v15;
        uint64_t v24 = *(int *)(v16 + 48);
        unint64_t v25 = (char *)v14 + v24;
        char v26 = (char *)v15 + v24;
        uint64_t v27 = sub_188DF8B4C();
        char v28 = *(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16LL);
        v28(v25, v26, v27);
        v28((char *)v14 + *(int *)(v16 + 64), (char *)v15 + *(int *)(v16 + 64), v27);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
      }

      goto LABEL_13;
    }

    if (!EnumCaseMultiPayload)
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A2A0);
      uint64_t v9 = *(void *)(v8 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(a2, 1LL, v8))
      {
        uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A298);
        memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
      }

      else
      {
        *a1 = *a2;
        uint64_t v19 = *(int *)(v8 + 48);
        uint64_t v20 = (char *)a1 + v19;
        uint64_t v21 = (char *)a2 + v19;
        uint64_t v22 = sub_188DF8B4C();
        uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16LL);
        v23(v20, v21, v22);
        v23((char *)a1 + *(int *)(v8 + 64), (char *)a2 + *(int *)(v8 + 64), v22);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0LL, 1LL, v8);
      }

uint64_t sub_188D2E02C(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    swift_bridgeObjectRelease();
    a1 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C74A2A8) + 48);
  }

  else if ((_DWORD)result)
  {
    return result;
  }

  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A2A0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48LL))(a1, 1LL, v3);
  if (!(_DWORD)result)
  {
    uint64_t v4 = a1 + *(int *)(v3 + 48);
    uint64_t v5 = sub_188DF8B4C();
    int v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
    v6(v4, v5);
    return ((uint64_t (*)(uint64_t, uint64_t))v6)(a1 + *(int *)(v3 + 64), v5);
  }

  return result;
}

void *sub_188D2E108(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
    *((_WORD *)a1 + 10) = *((_WORD *)a2 + 10);
    swift_bridgeObjectRetain();
    uint64_t v11 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C74A2A8) + 48);
    uint64_t v12 = (void *)((char *)a1 + v11);
    uint64_t v13 = (void *)((char *)a2 + v11);
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A2A0);
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A298);
      memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
    }

    else
    {
      *uint64_t v12 = *v13;
      uint64_t v22 = *(int *)(v14 + 48);
      uint64_t v23 = (char *)v12 + v22;
      uint64_t v24 = (char *)v13 + v22;
      uint64_t v25 = sub_188DF8B4C();
      char v26 = *(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16LL);
      v26(v23, v24, v25);
      v26((char *)v12 + *(int *)(v14 + 64), (char *)v13 + *(int *)(v14 + 64), v25);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
    }

    goto LABEL_11;
  }

  if (!EnumCaseMultiPayload)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A2A0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(a2, 1LL, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A298);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64LL));
    }

    else
    {
      *a1 = *a2;
      uint64_t v17 = *(int *)(v7 + 48);
      uint64_t v18 = (char *)a1 + v17;
      uint64_t v19 = (char *)a2 + v17;
      uint64_t v20 = sub_188DF8B4C();
      uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16LL);
      v21(v18, v19, v20);
      v21((char *)a1 + *(int *)(v7 + 64), (char *)a2 + *(int *)(v7 + 64), v20);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0LL, 1LL, v7);
    }

void *sub_188D2E33C(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_188D2E588((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      int v10 = *((_DWORD *)a2 + 4);
      *((_WORD *)a1 + 10) = *((_WORD *)a2 + 10);
      *((_DWORD *)a1 + 4) = v10;
      swift_bridgeObjectRetain();
      uint64_t v11 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C74A2A8) + 48);
      uint64_t v12 = (void *)((char *)a1 + v11);
      uint64_t v13 = (void *)((char *)a2 + v11);
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A2A0);
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
      {
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A298);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
      }

      else
      {
        *uint64_t v12 = *v13;
        uint64_t v22 = *(int *)(v14 + 48);
        uint64_t v23 = (char *)v12 + v22;
        uint64_t v24 = (char *)v13 + v22;
        uint64_t v25 = sub_188DF8B4C();
        char v26 = *(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16LL);
        v26(v23, v24, v25);
        v26((char *)v12 + *(int *)(v14 + 64), (char *)v13 + *(int *)(v14 + 64), v25);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
      }

      goto LABEL_12;
    }

    if (!EnumCaseMultiPayload)
    {
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A2A0);
      uint64_t v8 = *(void *)(v7 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(a2, 1LL, v7))
      {
        uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A298);
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64LL));
      }

      else
      {
        *a1 = *a2;
        uint64_t v17 = *(int *)(v7 + 48);
        uint64_t v18 = (char *)a1 + v17;
        uint64_t v19 = (char *)a2 + v17;
        uint64_t v20 = sub_188DF8B4C();
        uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16LL);
        v21(v18, v19, v20);
        v21((char *)a1 + *(int *)(v7 + 64), (char *)a2 + *(int *)(v7 + 64), v20);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0LL, 1LL, v7);
      }

uint64_t sub_188D2E588(uint64_t a1)
{
  uint64_t inserted = _s12InsertResultOMa();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(inserted - 8) + 8LL))(a1, inserted);
  return a1;
}

char *sub_188D2E5C4(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 14) = *(void *)(a2 + 14);
    uint64_t v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C74A2A8) + 48);
    uint64_t v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A2A0);
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13))
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A298);
      memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64LL));
    }

    else
    {
      *(void *)uint64_t v11 = *(void *)v12;
      uint64_t v21 = *(int *)(v13 + 48);
      uint64_t v22 = &v11[v21];
      uint64_t v23 = &v12[v21];
      uint64_t v24 = sub_188DF8B4C();
      uint64_t v25 = *(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32LL);
      v25(v22, v23, v24);
      v25(&v11[*(int *)(v13 + 64)], &v12[*(int *)(v13 + 64)], v24);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
    }

    goto LABEL_11;
  }

  if (!EnumCaseMultiPayload)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A2A0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1LL, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A298);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64LL));
    }

    else
    {
      *(void *)a1 = *(void *)a2;
      uint64_t v16 = *(int *)(v7 + 48);
      uint64_t v17 = &a1[v16];
      uint64_t v18 = &a2[v16];
      uint64_t v19 = sub_188DF8B4C();
      uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32LL);
      v20(v17, v18, v19);
      v20(&a1[*(int *)(v7 + 64)], &a2[*(int *)(v7 + 64)], v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0LL, 1LL, v7);
    }

char *sub_188D2E7EC(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_188D2E588((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 14) = *(void *)(a2 + 14);
      uint64_t v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C74A2A8) + 48);
      uint64_t v11 = &a1[v10];
      uint64_t v12 = &a2[v10];
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A2A0);
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13))
      {
        uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A298);
        memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64LL));
      }

      else
      {
        *(void *)uint64_t v11 = *(void *)v12;
        uint64_t v21 = *(int *)(v13 + 48);
        uint64_t v22 = &v11[v21];
        uint64_t v23 = &v12[v21];
        uint64_t v24 = sub_188DF8B4C();
        uint64_t v25 = *(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32LL);
        v25(v22, v23, v24);
        v25(&v11[*(int *)(v13 + 64)], &v12[*(int *)(v13 + 64)], v24);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
      }

      goto LABEL_12;
    }

    if (!EnumCaseMultiPayload)
    {
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A2A0);
      uint64_t v8 = *(void *)(v7 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1LL, v7))
      {
        uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A298);
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64LL));
      }

      else
      {
        *(void *)a1 = *(void *)a2;
        uint64_t v16 = *(int *)(v7 + 48);
        uint64_t v17 = &a1[v16];
        uint64_t v18 = &a2[v16];
        uint64_t v19 = sub_188DF8B4C();
        uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32LL);
        v20(v17, v18, v19);
        v20(&a1[*(int *)(v7 + 64)], &a2[*(int *)(v7 + 64)], v19);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0LL, 1LL, v7);
      }

uint64_t sub_188D2EA24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

uint64_t sub_188D2EA30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

uint64_t sub_188D2EA40()
{
  return swift_storeEnumTagMultiPayload();
}

void sub_188D2EA50()
{
  if (v1 <= 0x3F)
  {
    v2[4] = *(void *)(v0 - 8) + 64LL;
    swift_getTupleTypeLayout2();
    v2[5] = v2;
    swift_initEnumMetadataMultiPayload();
  }

void sub_188D2EACC()
{
  if (!qword_18C74A2C8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C74A2A0);
    unint64_t v0 = sub_188DF8384();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_18C74A2C8);
    }
  }

uint64_t OrderedDictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = sub_188D2EBC8(a1, a2, a3, a4);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_188D2EB6C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = sub_188D2EBC8(a1, a2[2], a2[3], a2[4]);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v4;
  a3[1] = v6;
  a3[2] = v8;
  return result;
}

uint64_t sub_188D2EBC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a1;
  swift_getTupleTypeMetadata2();
  uint64_t v7 = sub_188DF8120();
  uint64_t v8 = MEMORY[0x1895D7620](MEMORY[0x189618470], v7);
  return sub_188D1EA78((uint64_t)&v10, a2, a3, v7, a4, v8);
}

Swift::Bool __swiftcall BitSet.contains(_:)(Swift::Int a1)
{
  else {
    return (*(void *)(v1 + 8 * ((unint64_t)a1 >> 6) + 32) >> a1) & 1LL;
  }
  return v2;
}

Swift::tuple_inserted_Bool_memberAfterInsert_Int __swiftcall BitSet.insert(_:)(Swift::Int a1)
{
  if (a1 < 0)
  {
    __break(1u);
LABEL_9:
    uint64_t v3 = sub_188CF73DC((uint64_t)v3);
    goto LABEL_7;
  }

  Swift::Int v1 = a1;
  unint64_t v4 = (unint64_t)a1 >> 6;
  uint64_t v3 = *v2;
  unint64_t v5 = *((void *)*v2 + 2);
  BOOL v6 = (unint64_t)a1 >> 6 >= v5;
  uint64_t v7 = ((unint64_t)a1 >> 6) - v5;
  if (v6)
  {
    if (v7 < -1)
    {
      __break(1u);
      goto LABEL_11;
    }

    sub_188D2EF64(v7 + 1, 0LL);
    uint64_t v3 = *v2;
  }

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_9;
  }
LABEL_7:
  uint64_t v8 = &v3[8 * v4];
  uint64_t v9 = *((void *)v8 + 4);
  *((void *)v8 + 4) = v9 | (1LL << v1);
  LOBYTE(a_HashNode.ensureUnique(isUnique:)(v1 & 1) = (v9 & (1LL << v1)) == 0;
  *BOOL v2 = v3;
  Swift::Int v10 = v1;
LABEL_11:
  result.memberAfterInsert = v10;
  result.uint64_t inserted = a1;
  return result;
}

Swift::Int_optional __swiftcall BitSet.remove(_:)(Swift::Int a1)
{
  if (a1 < 0)
  {
    Swift::Int v7 = 0LL;
    char v8 = 1;
  }

  else
  {
    uint64_t v3 = (char *)*v1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v3 = sub_188CF73DC((uint64_t)v3);
    }
    if ((unint64_t)a1 >> 6 >= *((void *)v3 + 2))
    {
      BOOL v6 = 0;
    }

    else
    {
      unint64_t v4 = &v3[8 * ((unint64_t)a1 >> 6)];
      uint64_t v5 = *((void *)v4 + 4);
      BOOL v6 = (v5 & (1LL << a1)) != 0;
      *((void *)v4 + 4) = v5 & ~(1LL << a1);
    }

    BOOL v9 = v6;
    *Swift::Int v1 = (uint64_t)v3;
    sub_188D8FB84(&v9, v1);
    if (v6) {
      Swift::Int v7 = a1;
    }
    else {
      Swift::Int v7 = 0LL;
    }
    char v8 = !v6;
  }

  result.value = v7;
  result.is_nil = v8;
  return result;
}

Swift::Int_optional __swiftcall BitSet.update(with:)(Swift::Int with)
{
  Swift::Bool inserted = BitSet.insert(_:)(with).inserted;
  if (inserted) {
    Swift::Int v3 = with;
  }
  else {
    Swift::Int v3 = 0LL;
  }
  Swift::Bool v4 = !inserted;
  Swift::Int v5 = v3;
  result.value = v5;
  result.is_nil = v4;
  return result;
}

Swift::Bool __swiftcall BitSet._contains(_:)(Swift::UInt a1)
{
  if (a1 >> 6 >= *(void *)(v1 + 16)) {
    LOBYTE(v2) = 0;
  }
  else {
    return (*(void *)(v1 + 8 * (a1 >> 6) + 32) >> a1) & 1LL;
  }
  return v2;
}

Swift::Bool __swiftcall BitSet._insert(_:)(Swift::UInt a1)
{
  char v2 = a1;
  Swift::UInt v3 = a1 >> 6;
  Swift::Bool v4 = *v1;
  Swift::UInt v5 = *((void *)*v1 + 2);
  BOOL v6 = a1 >> 6 >= v5;
  uint64_t v7 = (a1 >> 6) - v5;
  if (v6)
  {
    if (v7 < -1)
    {
      __break(1u);
      return a1;
    }

    sub_188D2EF64(v7 + 1, 0LL);
    Swift::Bool v4 = *v1;
  }

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    Swift::Bool v4 = sub_188CF73DC((uint64_t)v4);
  }
  char v8 = &v4[8 * v3];
  uint64_t v9 = *((void *)v8 + 4);
  *((void *)v8 + 4) = v9 | (1LL << v2);
  LOBYTE(a_HashNode.ensureUnique(isUnique:)(v1 & 1) = (v9 & (1LL << v2)) == 0;
  *uint64_t v1 = v4;
  return a1;
}

Swift::Bool __swiftcall BitSet._remove(_:)(Swift::UInt a1)
{
  Swift::UInt v3 = (char *)*v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    Swift::UInt v3 = sub_188CF73DC((uint64_t)v3);
  }
  if (a1 >> 6 >= *((void *)v3 + 2))
  {
    Swift::Bool v7 = 0;
  }

  else
  {
    Swift::Bool v4 = &v3[8 * (a1 >> 6)];
    uint64_t v5 = 1LL << a1;
    uint64_t v6 = *((void *)v4 + 4);
    Swift::Bool v7 = (v6 & (1LL << a1)) != 0;
    *((void *)v4 + 4) = v6 & ~v5;
  }

  Swift::Bool v9 = v7;
  *uint64_t v1 = (uint64_t)v3;
  sub_188D8FB84(&v9, v1);
  return v7;
}

uint64_t sub_188D2EF64(uint64_t result, unint64_t a2)
{
  Swift::Bool v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  int64_t v6 = v5 + result;
  if (__OFADD__(v5, result))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v8 = result;
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (int64_t v10 = *((void *)v4 + 3) >> 1, v10 < v6))
  {
    if (v5 <= v6) {
      int64_t v11 = v6;
    }
    else {
      int64_t v11 = v5;
    }
    Swift::Bool v4 = sub_188CF7528(isUniquelyReferenced_nonNull_native, v11, 1, v4);
    int64_t v10 = *((void *)v4 + 3) >> 1;
  }

  uint64_t v12 = *((void *)v4 + 2);
  uint64_t v13 = v10 - v12;
  Swift::Int_optional result = (uint64_t)sub_188DD6C88(&v38, (unint64_t *)&v4[8 * v12 + 32], v10 - v12, v8, a2);
  if (result < v8) {
    goto LABEL_15;
  }
  if (result >= 1)
  {
    uint64_t v14 = *((void *)v4 + 2);
    BOOL v15 = __OFADD__(v14, result);
    uint64_t v16 = v14 + result;
    if (v15)
    {
      __break(1u);
LABEL_34:
      uint64_t v27 = v34 + v3 + 1;
      goto LABEL_35;
    }

    *((void *)v4 + 2) = v16;
  }

  if (result != v13)
  {
LABEL_13:
    *char v2 = v4;
    return result;
  }

uint64_t (*sub_188D2F1B8(uint64_t (*result)(), uint64_t a2, uint64_t a3, uint64_t a4))()
{
  if (a2 < 0 || a2 >= a3)
  {
    __break(1u);
  }

  else
  {
    *(void *)Swift::Int_optional result = a4;
    return nullsub_1;
  }

  return result;
}

uint64_t TreeSet.remove(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(a2 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = sub_188DF8384();
  uint64_t v10 = swift_getTupleTypeMetadata2();
  uint64_t v11 = MEMORY[0x1895F8858](v10);
  uint64_t v12 = MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v41 - v13;
  uint64_t result = MEMORY[0x1895F8858](v12);
  int64_t v19 = (char *)&v41 - v18;
  if (*(void *)a1 == *v3 && (uint64_t v20 = v3[2], *(void *)(a1 + 8) == v20))
  {
    uint64_t v41 = v17;
    unint64_t v42 = v16;
    uint64_t v43 = a3;
    v3[2] = v20 + 1;
    uint64_t v21 = &v19[*(int *)(v10 + 48)];
    uint64_t v45 = TupleTypeMetadata2;
    uint64_t v46 = v9;
    uint64_t v22 = *(char **)(a1 + 16);
    uint64_t v44 = *(void *)(a1 + 24);
    uint64_t v23 = *(unsigned int *)(a1 + 32);
    uint64_t v24 = a2;
    uint64_t v25 = *(unsigned __int8 *)(a1 + 36);
    int v26 = *(unsigned __int8 *)(a1 + 37);
    char v28 = (void *)type metadata accessor for _HashNode(0LL, v7, MEMORY[0x18961AFC8] + 8LL, *(void *)(v24 + 24));
    uint64_t v29 = v23 | (v25 << 32);
    int64_t v30 = v21;
    uint64_t v31 = 0x10000000000LL;
    if (!v26) {
      uint64_t v31 = 0LL;
    }
    uint64_t v32 = v22;
    uint64_t v33 = v46;
    _HashNode.remove(_:at:)(v19, v27, v21, 0LL, v32, v44, v29 | v31, v28);
    int64_t v34 = &v14[*(int *)(v10 + 48)];
    uint64_t v35 = *(void *)(v7 - 8);
    (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v14, v19, v7);
    uint64_t v36 = *(void *)(v33 - 8);
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v34, v30, v33);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v45 - 8) + 48LL))(v34, 1LL);
    if ((_DWORD)result == 1)
    {
      (*(void (**)(char *, uint64_t))(v41 + 8))(v14, v10);
      uint64_t v37 = *(int *)(v10 + 48);
      uint64_t v38 = v42;
      uint64_t v39 = &v42[v37];
      uint64_t v40 = *(void (**)(uint64_t, char *, uint64_t))(v35 + 32);
      v40((uint64_t)v42, v19, v7);
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v39, v30, v33);
      v40(v43, v38, v7);
      return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v39, v33);
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t TreeSet.update(_:at:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v6 = v4[2];
  if (*(void *)a2 != *v4 || *(void *)(a2 + 8) != v6 || (*(_BYTE *)(a2 + 37) & 1) == 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(a2 + 24);
    v4[2] = v6 + 1;
    uint64_t v11 = *(void *)(a3 + 16);
    uint64_t v12 = nullsub_1(v10 + 16, v10 + 32, v11, MEMORY[0x18961AFC8] + 8LL, *(void *)(a3 + 24));
    return sub_188D2F50C(v12, v9, v11, a4);
  }

  return result;
}

uint64_t sub_188D2F50C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, char *a4@<X8>)
{
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](a1);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v16 = _HashNode.UnsafeHandle.itemPtr(at:)(*(_DWORD *)(v13 + 32), v14, v15);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v17(a4, a2, a3);
  v17(v12, a2, a3);
  v17(v10, v16, a3);
  char v18 = sub_188DF7D90();
  int64_t v19 = *(void (**)(char *, uint64_t))(v7 + 8);
  v19(v10, a3);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v19)(v12, a3);
  if ((v18 & 1) != 0) {
    return sub_188DF89E4();
  }
  __break(1u);
  return result;
}

uint64_t Rope.append(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v64 = a1;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v7 = type metadata accessor for Rope._Node(0LL, v6, v5, a4);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](v7);
  uint64_t v60 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = MEMORY[0x1895F8858](v9);
  uint64_t v58 = (char *)&v53 - v12;
  uint64_t v13 = MEMORY[0x1895F8858](v11);
  uint64_t v59 = (char *)&v53 - v14;
  uint64_t v68 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v66 = v5;
  uint64_t v18 = type metadata accessor for Rope._Item(0LL, v6, v5, v17);
  uint64_t v19 = MEMORY[0x1895F8858](v18);
  uint64_t v63 = (uint64_t)&v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v19);
  uint64_t v62 = (uint64_t)&v53 - v21;
  uint64_t v22 = sub_188DF8384();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = MEMORY[0x1895F8858](v22);
  unint64_t v56 = (char *)&v53 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = MEMORY[0x1895F8858](v24);
  uint64_t v57 = (char *)&v53 - v27;
  uint64_t v28 = MEMORY[0x1895F8858](v26);
  uint64_t v61 = (uint64_t)&v53 - v29;
  uint64_t v30 = MEMORY[0x1895F8858](v28);
  MEMORY[0x1895F8858](v30);
  uint64_t v32 = (char *)&v53 - v31;
  Rope._invalidateIndices()();
  uint64_t v33 = *(void (**)(void))(v23 + 16);
  uint64_t v67 = v4;
  unint64_t v54 = v33;
  ((void (*)(char *, char *, uint64_t))v33)(v32, v4, v22);
  uint64_t v34 = v8;
  uint64_t v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  uint64_t v65 = v7;
  uint64_t v36 = v7;
  uint64_t v37 = v68;
  int v38 = v35(v32, 1LL, v36);
  uint64_t v39 = v32;
  uint64_t v40 = v64;
  unint64_t v55 = *(void (**)(char *, uint64_t))(v23 + 8);
  v55(v39, v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v16, v40, v6);
  if (v38 == 1)
  {
    uint64_t v41 = v62;
    uint64_t v42 = v66;
    Rope._Item.init(_:)((uint64_t)v16, v6, v62);
    static Rope._Node.createLeaf(_:)(v41, v6, v42);
  }

  uint64_t v62 = v23;
  uint64_t v43 = v34;
  uint64_t v44 = v63;
  Rope._Item.init(_:)((uint64_t)v16, v6, v63);
  uint64_t v45 = v65;
  if (v35(v67, 1LL, v65) == 1)
  {
    __break(1u);
LABEL_10:
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v55)(v44, v22);
    __break(1u);
    return result;
  }

  uint64_t v46 = v61;
  Rope._Node.append(_:)(v44, v45, v61);
  if (v35((char *)v46, 1LL, v45) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v40, v6);
    return ((uint64_t (*)(uint64_t, uint64_t))v55)(v46, v22);
  }

  unint64_t v48 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 32);
  unint64_t v49 = v59;
  v48(v59, v46, v45);
  uint64_t v44 = (uint64_t)v56;
  v54();
  uint64_t v50 = (uint64_t)v58;
  v48(v58, v44, v45);
  uint64_t v51 = (uint64_t)v60;
  (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v60, v49, v45);
  unint64_t v52 = v57;
  static Rope._Node.createInner(children:_:)(v50, v51, v6, v66);
  (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v40, v6);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v49, v45);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v52, 0LL, 1LL, v45);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v62 + 40))(v67, v52, v22);
}

uint64_t Rope._Node.append(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  Swift::Bool v4 = v3;
  uint64_t v89 = a3;
  uint64_t v7 = sub_188DF8384();
  uint64_t v83 = *(void *)(v7 - 8);
  uint64_t v84 = v7;
  uint64_t v8 = MEMORY[0x1895F8858](v7);
  uint64_t v81 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v82 = (uint64_t)&v74 - v10;
  uint64_t v11 = *(void *)(a2 + 16);
  uint64_t v12 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v90 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v85 = (char *)&v74 - v14;
  uint64_t v94 = *(void *)(a2 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](v13);
  uint64_t v80 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  unint64_t v91 = (char *)&v74 - v17;
  uint64_t v19 = type metadata accessor for Rope._Node._ModifyState(0LL, v11, v12, v18);
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1895F8858](v19);
  uint64_t v22 = (void (**)(uint64_t, uint64_t))((char *)&v74 - v21);
  uint64_t v24 = type metadata accessor for Rope._Item(0LL, v11, v12, v23);
  MEMORY[0x1895F8858](v24);
  uint64_t v26 = (char *)&v74 - v25;
  uint64_t v87 = v27;
  uint64_t v88 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))((char *)&v74 - v25, a1, v24);
  uint64_t v92 = v24;
  unint64_t v93 = v26;
  if ((Rope._Item.isUndersized.getter(v24) & 1) != 0 && !Rope._Node.isEmpty.getter())
  {
    Rope._Node._prepareModifyLast()(a2, v22);
    char v28 = Rope._Item.rebalance(nextNeighbor:)((uint64_t)v93, v92);
    sub_188D5015C(v4, v22, v11, v12);
    (*(void (**)(void *, uint64_t))(v20 + 8))(v22, v19);
    if ((v28 & 1) != 0)
    {
      uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v87 + 8);
      uint64_t v30 = v92;
      v29(v88, v92);
      uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v94 + 56);
LABEL_19:
      v31(v89, 1LL, 1LL, a2);
      return ((uint64_t (*)(char *, uint64_t))v29)(v93, v30);
    }
  }

  uint64_t v32 = v12;
  uint64_t v33 = v11;
  Rope._Node.ensureUnique()();
  uint64_t v34 = v94;
  uint64_t v35 = v91;
  (*(void (**)(char *, void *, uint64_t))(v94 + 16))(v91, v4, a2);
  int v36 = Rope._Node.header.getter();
  uint64_t v37 = *(void (**)(char *, uint64_t))(v34 + 8);
  v37(v35, a2);
  int v38 = v4;
  if ((v36 & 0xFF0000) != 0)
  {
    unint64_t v74 = (void (*)(uint64_t, uint64_t))v37;
    uint64_t v78 = (char *)v4 + *(int *)(a2 + 36);
    uint64_t v40 = v85;
    uint64_t v39 = AssociatedTypeWitness;
    uint64_t v41 = v90;
    (*(void (**)(char *))(v90 + 16))(v85);
    uint64_t v79 = v38;
    uint64_t v42 = *v38;
    uint64_t v43 = *v38 + 16LL;
    unint64_t v75 = (*(unsigned __int8 *)(v34 + 80) + 19LL) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
    uint64_t v44 = v42 + v75;
    uint64_t v77 = MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, a2);
    uint64_t v45 = (unsigned __int16 *)nullsub_1(v43, v44, v33, a2, v32);
    uint64_t v47 = v46;
    swift_unknownObjectRetain();
    uint64_t v48 = v82;
    uint64_t v49 = v47;
    uint64_t v50 = v33;
    uint64_t v51 = v33;
    unint64_t v52 = v40;
    uint64_t v76 = v32;
    sub_188D30228(v45, v49, (uint64_t)v93, v51, v32, v82);
    swift_unknownObjectRelease();
    uint64_t v53 = *(void (**)(char *, char *, uint64_t))(v41 + 24);
    uint64_t v54 = v39;
    v53(v78, v40, v39);
    uint64_t v56 = v83;
    uint64_t v55 = v84;
    uint64_t v57 = v81;
    (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v81, v48, v84);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v57, 1LL, a2) == 1)
    {
      uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v87 + 8);
      uint64_t v58 = v57;
      uint64_t v30 = v92;
      v29(v88, v92);
      uint64_t v59 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
      v59(v48, v55);
      v59((uint64_t)v58, v55);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v94 + 56))(v89, 1LL, 1LL, a2);
      (*(void (**)(char *, uint64_t))(v90 + 8))(v52, v54);
      return ((uint64_t (*)(char *, uint64_t))v29)(v93, v30);
    }

    uint64_t v64 = (uint64_t)v80;
    (*(void (**)(char *, char *, uint64_t))(v94 + 32))(v80, v57, a2);
    uint64_t v65 = v76;
    uint64_t v66 = (unsigned __int16 *)nullsub_1(*v79 + 16LL, *v79 + v75, v50, a2, v76);
    uint64_t v68 = v67;
    swift_unknownObjectRetain();
    sub_188D30448(v66, v68, v50, v65);
    swift_unknownObjectRelease();
    BOOL v69 = Rope._Node.isFull.getter();
    uint64_t v70 = v89;
    if (!v69)
    {
      sub_188D51868(v64, a2);
      uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v87 + 8);
      uint64_t v30 = v92;
      v29(v88, v92);
      v74(v64, a2);
      (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v82, v84);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v94 + 56))(v70, 1LL, 1LL, a2);
      (*(void (**)(char *, uint64_t))(v90 + 8))(v85, AssociatedTypeWitness);
      return ((uint64_t (*)(void, void))v29)(v93, v30);
    }

    uint64_t v71 = AssociatedTypeWitness;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))( v71,  AssociatedConformanceWitness);
    uint64_t v73 = result + 1;
    if (!__OFADD__(result, 1LL))
    {
      if (v73 < 0) {
        uint64_t v73 = result + 2;
      }
      Rope._Node.split(keeping:)(v73 >> 1, a2);
    }
  }

  else
  {
    if (!Rope._Node.isFull.getter())
    {
      sub_188D516E8((uint64_t)v93, a2);
      uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v87 + 8);
      uint64_t v30 = v92;
      v29(v88, v92);
      uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56);
      goto LABEL_19;
    }

    uint64_t v60 = AssociatedTypeWitness;
    uint64_t v61 = swift_getAssociatedConformanceWitness();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 16))(v60, v61);
    uint64_t v63 = result + 1;
    if (!__OFADD__(result, 1LL))
    {
      if (v63 < 0) {
        uint64_t v63 = result + 2;
      }
      Rope._Node.split(keeping:)(v63 >> 1, a2);
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_188D30228@<X0>( unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v29 = a3;
  uint64_t v30 = a6;
  uint64_t v28 = type metadata accessor for Rope._Item(0LL, a4, a5, a3);
  uint64_t v26 = *(void *)(v28 - 8);
  MEMORY[0x1895F8858](v28);
  uint64_t v27 = (char *)&v25 - v10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v14 = (char *)&v25 - v13;
  uint64_t v16 = type metadata accessor for Rope._Node(0LL, a4, a5, v15);
  MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, v16);
  uint64_t v17 = Rope._UnsafeHandle.childCount.getter(a1);
  BOOL v18 = __OFSUB__(v17, 1LL);
  uint64_t result = v17 - 1;
  if (v18)
  {
    __break(1u);
  }

  else
  {
    uint64_t v20 = Rope._UnsafeHandle.mutableChildPtr(at:)(result, (uint64_t)a1, a2, a4, v16) + *(int *)(v16 + 36);
    uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v21(v14, v20, AssociatedTypeWitness);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 56))( v14,  AssociatedTypeWitness,  AssociatedConformanceWitness);
    uint64_t v23 = *(void (**)(char *, uint64_t))(v12 + 8);
    v23(v14, AssociatedTypeWitness);
    uint64_t v24 = v27;
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v27, v29, v28);
    Rope._Node.append(_:)(v24, v16);
    v21(v14, v20, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))( v14,  AssociatedTypeWitness,  AssociatedConformanceWitness);
    return ((uint64_t (*)(char *, uint64_t))v23)(v14, AssociatedTypeWitness);
  }

  return result;
}

uint64_t sub_188D30448(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Rope._Node(0LL, a3, a4, a4);
  uint64_t v9 = *(void **)(v8 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](v8);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v14 = (char *)&v28 - v13;
  uint64_t v31 = MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, v8);
  uint64_t result = Rope._UnsafeHandle.mutableChildren.getter(a1, a2, a3, v8, a4, v31);
  if (__OFSUB__(v16, 2LL))
  {
    __break(1u);
  }

  else
  {
    uint64_t v17 = result;
    uint64_t v18 = v16;
    uint64_t v29 = a1;
    uint64_t v30 = a2;
    uint64_t v33 = a4;
    uint64_t v19 = v9[9];
    uint64_t v20 = (void (*)(char *))v9[2];
    uint64_t v28 = (uint64_t *)(result + v19 * (v16 - 2));
    v20(v14);
    int v32 = Rope._Node.header.getter();
    uint64_t v21 = (void (*)(char *, uint64_t))v9[1];
    v21(v14, v8);
    uint64_t v22 = v18 - 1;
    uint64_t v23 = (uint64_t *)(v17 + v19 * v22);
    ((void (*)(char *, uint64_t *, uint64_t))v20)(v12, v23, v8);
    LODWORD(v19) = (unsigned __int16)Rope._Node.header.getter();
    v21(v12, v8);
    uint64_t v24 = v19 + (unsigned __int16)v32;
    uint64_t v25 = v33;
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))( AssociatedTypeWitness,  AssociatedConformanceWitness);
    if (result >= v24)
    {
      static Rope._Node.redistributeChildren(_:_:to:)(v28, v23, v24, a3, v25);
      Rope._UnsafeHandle._removeChild(at:)(v22, v29);
      return ((uint64_t (*)(char *, uint64_t))v21)(v14, v8);
    }
  }

  return result;
}

uint64_t OrderedSet.isDisjoint(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v27[1] = a3;
  v27[2] = a1;
  uint64_t v8 = *(void *)(a5 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v13 = (char *)v27 - v12;
  uint64_t v28 = v14;
  uint64_t v15 = sub_188DF8738();
  MEMORY[0x1895D7620](MEMORY[0x189619590], v15);
  if ((sub_188DF827C() & 1) != 0) {
    goto LABEL_3;
  }
  uint64_t v28 = a2;
  if ((sub_188DF827C() & 1) != 0) {
    goto LABEL_3;
  }
  uint64_t v18 = _s19CollectionsInternal4HeapV5countSivg_0();
  if (_s19CollectionsInternal4HeapV5countSivg_0() >= v18)
  {
    uint64_t v24 = *(void *)(a4 + 16);
    if (v24)
    {
      swift_retain();
      swift_retain();
      uint64_t v25 = 0LL;
      uint64_t v26 = v24 - 1;
      do
      {
        sub_188DF8774();
        BOOL v22 = OrderedSet.contains(_:)();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v13, a5);
        if (v22) {
          break;
        }
        BOOL v23 = v26 == v25++;
      }

      while (!v23);
      goto LABEL_17;
    }
  }

  else
  {
    uint64_t v19 = *(void *)(a2 + 16);
    if (v19)
    {
      swift_retain();
      swift_retain();
      uint64_t v20 = 0LL;
      uint64_t v21 = v19 - 1;
      do
      {
        sub_188DF8774();
        BOOL v22 = OrderedSet.contains(_:)();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v11, a5);
        if (v22) {
          break;
        }
        BOOL v23 = v21 == v20++;
      }

      while (!v23);
LABEL_17:
      char v16 = !v22;
      swift_release();
      swift_release();
      return v16 & 1;
    }
  }

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  int64_t v37;
  unint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t, uint64_t);
  void v41[2];
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v10 = sub_188DF8384();
  uint64_t v11 = MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)v41 - v12;
  uint64_t v14 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](v11);
  char v16 = (char *)v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v47 = a3;
  uint64_t v17 = sub_188DF8738();
  MEMORY[0x1895D7620](MEMORY[0x189619590], v17);
  if ((sub_188DF827C() & 1) != 0 || (sub_188DF8168() & 1) != 0) {
    return 1LL;
  }
  uint64_t v20 = _s19CollectionsInternal4HeapV5countSivg_0();
  if (sub_188DF815C() >= v20)
  {
    uint64_t v24 = *(void *)(a3 + 16);
    if (v24)
    {
      swift_retain();
      swift_retain();
      sub_188DF8774();
      uint64_t v25 = sub_188DF8180();
      uint64_t v26 = *(void (**)(char *, uint64_t))(v14 + 8);
      v26(v16, a4);
      if ((v25 & 1) != 0)
      {
LABEL_13:
        swift_release();
        swift_release();
        return 0LL;
      }

      uint64_t v27 = 1LL;
      while (v24 != v27)
      {
        sub_188DF8774();
        ++v27;
        uint64_t v28 = sub_188DF8180();
        v26(v16, a4);
        if ((v28 & 1) != 0) {
          goto LABEL_13;
        }
      }

      swift_release();
      swift_release();
    }

    return 1LL;
  }

  uint64_t v45 = a3;
  uint64_t v46 = a2;
  uint64_t v44 = a5;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    swift_bridgeObjectRetain();
    sub_188DF85B8();
    uint64_t result = sub_188DF8174();
    a1 = v47;
    uint64_t v43 = v48;
    uint64_t v21 = v49;
    BOOL v22 = v50;
    BOOL v23 = v51;
  }

  else
  {
    uint64_t v29 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v30 = *(void *)(a1 + 56);
    uint64_t v43 = a1 + 56;
    uint64_t v21 = ~v29;
    uint64_t v31 = -v29;
    if (v31 < 64) {
      int v32 = ~(-1LL << v31);
    }
    else {
      int v32 = -1LL;
    }
    BOOL v23 = v32 & v30;
    uint64_t result = swift_bridgeObjectRetain();
    BOOL v22 = 0LL;
  }

  v41[1] = v21;
  uint64_t v42 = (unint64_t)(v21 + 64) >> 6;
  while (1)
  {
    int v36 = v22;
    if ((a1 & 0x8000000000000000LL) == 0) {
      break;
    }
    if (!sub_188DF85C4()) {
      goto LABEL_40;
    }
    sub_188DF8960();
    swift_unknownObjectRelease();
LABEL_21:
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v13, 0LL, 1LL, a4);
    uint64_t v35 = OrderedSet.contains(_:)();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v13, a4);
    if (v35)
    {
      sub_188D30F58();
      return 0LL;
    }
  }

  if (v23)
  {
    uint64_t v33 = __clz(__rbit64(v23));
    v23 &= v23 - 1;
    uint64_t v34 = v33 | (v22 << 6);
LABEL_20:
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))( v13,  *(void *)(a1 + 48) + *(void *)(v14 + 72) * v34,  a4);
    goto LABEL_21;
  }

  uint64_t v37 = v22 + 1;
  if (!__OFADD__(v22, 1LL))
  {
    if (v37 >= v42) {
      goto LABEL_40;
    }
    int v38 = *(void *)(v43 + 8 * v37);
    ++v22;
    if (!v38)
    {
      BOOL v22 = v36 + 2;
      if (v36 + 2 >= v42) {
        goto LABEL_40;
      }
      int v38 = *(void *)(v43 + 8 * v22);
      if (!v38)
      {
        BOOL v22 = v36 + 3;
        if (v36 + 3 >= v42) {
          goto LABEL_40;
        }
        int v38 = *(void *)(v43 + 8 * v22);
        if (!v38)
        {
          uint64_t v39 = v36 + 4;
          while (v42 != v39)
          {
            int v38 = *(void *)(v43 + 8 * v39++);
            if (v38)
            {
              BOOL v22 = v39 - 1;
              goto LABEL_35;
            }
          }

LABEL_40:
          uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
          uint64_t v18 = 1LL;
          v40(v13, 1LL, 1LL, a4);
          sub_188D30F58();
          return v18;
        }
      }
    }

    __break(1u);
    goto LABEL_41;
  }

  uint64_t v45 = v17 + v12;
  if (__OFADD__(v17, v12))
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }

  uint64_t v46 = v21 + v13;
  if (__OFADD__(v21, v13))
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }

  uint64_t v47 = v22 + v14;
  if (__OFADD__(v22, v14))
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }

  uint64_t v48 = v45;
  uint64_t v53 = v23 + v15;
  if (!__OFADD__(v23, v15))
  {
    uint64_t v49 = v46;
    sub_188DEF570((uint64_t)v57);
    uint64_t result = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    *a1 = v48;
    a1[1] = v49;
    a1[2] = v47;
    a1[3] = v53;
    goto LABEL_31;
  }

      __break(1u);
      goto LABEL_41;
    }

LABEL_35:
    BOOL v23 = (v38 - 1) & v38;
    uint64_t v34 = __clz(__rbit64(v38)) + (v22 << 6);
    goto LABEL_20;
  }

  __break(1u);
  return result;
}

  uint64_t result = (_DWORD *)nullsub_1(*a3 + 16LL, *a3 + 32LL, a7, a8, v14);
  uint64_t v115 = v203;
  uint64_t v116 = *v203;
  uint64_t v117 = ~(result[1] | *result);
  uint64_t v118 = *v203 & v117;
  if (v118)
  {
    LODWORD(v187) = ~(result[1] | *result);
    LODWORD(v192) = __clz(__rbit32(v118));
    uint64_t v119 = (v118 - 1) & v118;
    v114.i32[0] = v116 & ~(-1 << v192);
    uint64_t v120 = (uint8x8_t)vcnt_s8(v114);
    v120.i16[0] = vaddlv_u8(v120);
    uint64_t v121 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v120.u32[0], v203, v199, a7, a8, v14);
    unint64_t v122 = *(int *)(v196 + 48);
    uint64_t v123 = (uint64_t)v185;
    uint64_t v124 = a7;
    unint64_t v125 = a8;
    unint64_t v126 = (uint64_t)&v185[v122];
    char v186 = v121 + v122;
    unint64_t v127 = v188;
    uint64_t v193 = *(_BYTE **)(v188 + 16);
    ((void (*)(_BYTE *, uint64_t, uint64_t))v193)(v185, v121, v124);
    unint64_t v128 = *(void *)(v125 - 8);
    unint64_t v129 = *(void (**)(uint64_t, uint64_t, uint64_t))(v128 + 16);
    v129(v126, v186, v125);
    _HashNode.ensureUniqueAndInsertItem(isUnique:_:at:)(v25, v123, v126, v192, v197);
    uint32x4_t v130 = *(void (**)(uint64_t, uint64_t))(v128 + 8);
    uint64x2_t v131 = v125;
    v130(v126, v125);
    uint64x2_t v132 = *(uint64_t (**)(uint64_t))(v127 + 8);
    a7 = v195;
    uint64_t result = (_DWORD *)v132(v123);
    uint64_t v133 = v191 + 1;
    if (v119)
    {
      uint64_t v191 = (char *)v129;
      uint64_t v192 = (uint64_t)v130;
      do
      {
        uint64_t v134 = __clz(__rbit32(v119));
        v119 &= v119 - 1;
        v114.i32[0] = *v203 & ~(-1 << v134);
        uint64_t v135 = (uint8x8_t)vcnt_s8(v114);
        v135.i16[0] = vaddlv_u8(v135);
        __int16 v136 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v135.u32[0], v203, v199, a7, v131, v198);
        uint64_t v137 = *(int *)(v196 + 48);
        unint64_t v138 = v132;
        unint64_t v139 = v123 + v137;
        uint64_t v140 = v136 + v137;
        ((void (*)(uint64_t, uint64_t, uint64_t))v193)(v123, v136, a7);
        ((void (*)(uint64_t, uint64_t, uint64_t))v191)(v139, v140, v131);
        uint64_t v25 = 1;
        _HashNode.ensureUniqueAndInsertItem(isUnique:_:at:)(1, v123, v139, v134, v197);
        uint64_t v141 = v139;
        uint64x2_t v132 = v138;
        ((void (*)(uint64_t, uint64_t))v192)(v141, v131);
        uint64_t result = (_DWORD *)((uint64_t (*)(uint64_t, uint64_t))v138)(v123, a7);
        ++v133;
      }

      while (v119);
    }

    else
    {
      uint64_t v25 = 1;
    }

    a8 = v131;
    uint64_t v142 = v199;
    uint64_t v115 = v203;
    uint64_t v117 = (int)v187;
  }

  else
  {
    uint64_t v142 = v199;
    uint64_t v133 = v191;
  }

  unsigned int v143 = v133;
  uint64_t v144 = v115[1];
  uint64_t v145 = v144 & v117;
  if ((v144 & v117) != 0)
  {
    uint64_t v146 = a7;
    LODWORD(v196) = __clz(__rbit32(v145));
    uint64_t v147 = (v145 - 1) & v145;
    v114.i32[0] = v144 & ~(-1 << v196);
    uint64_t v148 = (uint8x8_t)vcnt_s8(v114);
    v148.i16[0] = vaddlv_u8(v148);
    uint64_t v149 = a8;
    unint64_t v150 = v148.u32[0];
    unint64_t v151 = v25;
    char v152 = v197;
    unint64_t v153 = v142;
    _HashNode.ensureUnique(isUnique:withFreeSpace:)(v151, 16LL);
    unint64_t v154 = v146;
    __int16 v155 = v149;
    uint64_t v156 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v150, v115, v153, v154, v149, v198);
    unint64_t v157 = *(void *)(v156 + 8);
    __int16 v158 = swift_retain();
    sub_188DF6B94(v158, v157, v196, v152);
    uint64_t result = (_DWORD *)swift_release();
    v143 += *(void *)(v156 + 8);
    if (v147)
    {
      uint64_t v160 = v203;
      do
      {
        uint64_t v161 = __clz(__rbit32(v147));
        v147 &= v147 - 1;
        v159.i32[0] = v160[1] & ~(-1 << v161);
        unint64_t v162 = (uint8x8_t)vcnt_s8(v159);
        v162.i16[0] = vaddlv_u8(v162);
        uint64_t v163 = v162.u32[0];
        _HashNode.ensureUnique(isUnique:withFreeSpace:)(1, 16LL);
        uint64_t v164 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v163, v160, v199, v195, v155, v198);
        unint64_t v165 = *(void *)(v164 + 8);
        unint64_t v166 = swift_retain();
        sub_188DF6B94(v166, v165, v161, v152);
        uint64_t result = (_DWORD *)swift_release();
        v143 += *(void *)(v164 + 8);
      }

      while (v147);
    }
  }

  *uint64_t v182 = v143;
  return result;
}

      __break(1u);
      goto LABEL_36;
    }

          uint64_t v29 = v52 + 1;
          if (v52 + 1 < (unint64_t)*(unsigned __int16 *)(v25 + 16))
          {
            uint64_t v30 = (__int128 *)(v50 + 40LL * v29);
            int v32 = *v30;
            uint64_t v31 = v30[1];
            unint64_t v74 = *((void *)v30 + 4);
            v73[0] = v32;
            v73[1] = v31;
            uint64_t v33 = *(unsigned __int8 *)(v32 + 18) + 1;
            if (((v33 >> 8) & 1) != 0) {
              goto LABEL_54;
            }
            uint64_t v66 = ((-256LL << (4 * (v33 & 0xF))) | 0xFF) & (v66 & ((-15LL << v49) - 1) | (v29 << v49));
            uint64_t v34 = v66;
            swift_unknownObjectRetain();
            uint64_t v6 = sub_188D7F6E0(v34);
            sub_188D087F8((uint64_t)v73);
            uint64_t v67 = v6;
            swift_unknownObjectRelease();
            goto LABEL_38;
          }

          swift_unknownObjectRelease();
          char v16 = v57;
LABEL_40:
          uint64_t v35 = v18 + 1;
          if (v18 + 1 < (unint64_t)*(unsigned __int16 *)(v16 + 16))
          {
            int v36 = (__int128 *)(v55 + 40LL * v35);
            int v38 = *v36;
            uint64_t v37 = v36[1];
            unint64_t v72 = *((void *)v36 + 4);
            v71[0] = v38;
            v71[1] = v37;
            uint64_t v39 = *(unsigned __int8 *)(v38 + 18) + 1;
            if (((v39 >> 8) & 1) != 0) {
              goto LABEL_53;
            }
            uint64_t v66 = ((-256LL << (4 * (v39 & 0xF))) | 0xFF) & (v66 & ((-15LL << v53) - 1) | (v35 << v53));
            uint64_t v40 = v66;
            swift_unknownObjectRetain();
            uint64_t v6 = sub_188D7F6E0(v40);
            sub_188D087F8((uint64_t)v71);
            uint64_t v67 = v6;
            swift_unknownObjectRelease();
            goto LABEL_47;
          }

          swift_unknownObjectRelease();
LABEL_44:
          uint64_t v41 = v15 + 1;
          if (v15 + 1 >= (unint64_t)*(unsigned __int16 *)(v4 + 16))
          {
            sub_188D087F8(v1);
            uint64_t v27 = *(unsigned __int8 *)(v4 + 18);
            goto LABEL_49;
          }

          uint64_t v42 = (__int128 *)(v59 + 40LL * v41);
          uint64_t v44 = *v42;
          uint64_t v43 = v42[1];
          uint64_t v70 = *((void *)v42 + 4);
          v69[0] = v44;
          v69[1] = v43;
          uint64_t v45 = *(unsigned __int8 *)(v44 + 18) + 1;
          if (((v45 >> 8) & 1) != 0) {
            goto LABEL_52;
          }
          uint64_t v66 = ((-256LL << (4 * (v45 & 0xF))) | 0xFF) & (v66 & ((-15LL << v14) - 1) | (v41 << v14));
          uint64_t v46 = v66;
          swift_unknownObjectRetain();
          uint64_t v6 = sub_188D7F6E0(v46);
          sub_188D087F8((uint64_t)v69);
          uint64_t v67 = v6;
          goto LABEL_47;
        }

        uint64_t v51 = v20;
        uint64_t v28 = ((v7 >> v24) & 0xF) + 1;
        if (v28 >= *(unsigned __int16 *)(v6 + 16))
        {
          unint64_t v52 = (v7 >> v21) & 0xF;
          uint64_t v49 = v21;
          uint64_t v50 = v20 + 24;
          uint64_t v55 = v19;
          uint64_t v53 = v17;
          sub_188D07F48(v1);
          swift_unknownObjectRetain();
          uint64_t v25 = v51;
          swift_unknownObjectRetain();
          goto LABEL_35;
        }

        uint64_t v66 = (v28 << v24) | ((-15LL << v24) - 1) & v7;
        uint64_t v67 = v6;
        sub_188D07F48(v1);
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
LABEL_32:
        swift_unknownObjectRelease();
LABEL_38:
        swift_unknownObjectRelease();
      }

      else
      {
        if (v18 + 1 >= (unint64_t)*(unsigned __int16 *)(v16 + 16))
        {
          swift_unknownObjectRetain();
          goto LABEL_44;
        }

        uint64_t v66 = ((v18 + 1) << v17) | ((-15LL << v17) - 1) & v7;
        uint64_t v67 = v16;
        swift_unknownObjectRetain();
        uint64_t v6 = v16;
      }

  __break(1u);
  return result;
}

    __break(1u);
    goto LABEL_36;
  }

  swift_unknownObjectRetain();
  sub_188DEF120(&v71, v66, a2);
  uint64_t v12 = *((void *)&v71 + 1);
  uint64_t v58 = v71;
  uint64_t v14 = *((void *)&v72 + 1);
  uint64_t v13 = v72;
  uint64_t v15 = v73;
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v17 = v66[0];
  uint64_t v18 = v4[1];
  uint64_t v19 = __OFADD__(v18, v66[0]);
  uint64_t v20 = v18 + v66[0];
  if (v19)
  {
    __break(1u);
    goto LABEL_32;
  }

  uint64_t v21 = v66[1];
  BOOL v22 = v66[2];
  BOOL v23 = v66[3];
  v4[1] = v20;
  uint64_t v24 = v4[2];
  uint64_t v19 = __OFADD__(v24, v21);
  uint64_t v25 = v24 + v21;
  if (v19)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }

  v4[2] = v25;
  uint64_t v26 = v4[3];
  uint64_t v19 = __OFADD__(v26, v22);
  uint64_t v27 = v26 + v22;
  if (v19)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

  v4[3] = v27;
  uint64_t v28 = v4[4];
  uint64_t v19 = __OFADD__(v28, v23);
  uint64_t v29 = v28 + v23;
  if (v19)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  v4[4] = v29;
  uint64_t result = v58;
  if (!v58)
  {
    *a1 = v17;
    a1[1] = v21;
    a1[2] = v22;
    a1[3] = v23;
    goto LABEL_30;
  }

  v65[0] = v58;
  v65[1] = v12;
  v65[2] = v13;
  v65[3] = v14;
  v65[4] = v15;
  if (*(_WORD *)(*v4 + 16) == 15)
  {
    uint64_t v30 = v23;
    swift_unknownObjectRetain();
    uint64_t result = sub_188DEE920(7LL, (uint64_t)&v71);
    uint64_t v31 = *v4;
    int v32 = v4[1];
    uint64_t v34 = v4[2];
    uint64_t v33 = v4[3];
    uint64_t v35 = v4[4];
    int v36 = v72;
    *(_OWORD *)Swift::Bool v4 = v71;
    *((_OWORD *)v4 + _HashNode.ensureUnique(isUnique:)(v1 & 1) = v36;
    v4[4] = v73;
    uint64_t v60 = v31;
    uint64_t v61 = v32;
    uint64_t v62 = v34;
    uint64_t v63 = v33;
    uint64_t v64 = v35;
    uint64_t v37 = v17 - v32;
    if (!__OFSUB__(v17, v32))
    {
      uint64_t v19 = __OFSUB__(v21, v34);
      int v38 = v21 - v34;
      if (!v19)
      {
        uint64_t v39 = v22 - v33;
        if (!__OFSUB__(v22, v33))
        {
          uint64_t v40 = v30 - v35;
          if (!__OFSUB__(v30, v35))
          {
            sub_188DF3BB4((uint64_t)v65, 0LL);
            swift_unknownObjectRelease_n();
            uint64_t result = v60;
            uint64_t v12 = v61;
            uint64_t v13 = v62;
            uint64_t v14 = v63;
            uint64_t v15 = v64;
            *a1 = v37;
            a1[1] = v38;
            a1[2] = v39;
            a1[3] = v40;
LABEL_30:
            *a3 = result;
            a3[1] = v12;
            a3[2] = v13;
            a3[3] = v14;
            a3[4] = v15;
            return result;
          }

          goto LABEL_42;
        }

uint64_t OrderedSet.isDisjoint<A>(with:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v33 = a2;
  uint64_t v34 = a6;
  uint64_t v29 = a1;
  uint64_t v11 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_188DF8384();
  uint64_t v15 = MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)&v28 - v16;
  uint64_t v18 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](v15);
  uint64_t v28 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = a5;
  uint64_t v32 = a7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v30 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  BOOL v22 = (char *)&v28 - v21;
  uint64_t v35 = a3;
  uint64_t v23 = sub_188DF8738();
  MEMORY[0x1895D7620](MEMORY[0x189619590], v23);
  if ((sub_188DF827C() & 1) != 0) {
    return 1LL;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v28, v29, v31);
  sub_188DF7FDC();
  swift_getAssociatedConformanceWitness();
  do
  {
    sub_188DF84D4();
    int v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v17, 1LL, a4);
    BOOL v24 = v25 == 1;
    if (v25 == 1) {
      break;
    }
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v17, a4);
    BOOL v26 = OrderedSet.contains(_:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, a4);
  }

  while (!v26);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v22, AssociatedTypeWitness);
  return v24;
}

uint64_t sub_188D30F58()
{
  return swift_release();
}

unint64_t sub_188D30F64()
{
  unint64_t result = qword_18C74A2D0[0];
  if (!qword_18C74A2D0[0])
  {
    unint64_t result = MEMORY[0x1895D7620](&protocol conformance descriptor for BigString, &type metadata for BigString);
    atomic_store(result, qword_18C74A2D0);
  }

  return result;
}

double sub_188D30FA8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  __int128 v4 = v6[1];
  *a3 = v6[0];
  a3[1] = v4;
  double result = *(double *)&v7;
  a3[2] = v7;
  return result;
}

uint64_t _HashTable.Bucket.offset.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_HashTable.Bucket.offset.modify())()
{
  return nullsub_1;
}

BOOL static _HashTable.Bucket.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

ValueMetadata *type metadata accessor for _HashTable.Bucket()
{
  return &type metadata for _HashTable.Bucket;
}

uint64_t TreeDictionary.subscript.setter(char *a1, uint64_t a2, void *a3)
{
  uint64_t v23 = a2;
  uint64_t v6 = a3[3];
  uint64_t v7 = sub_188DF8384();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](v7);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = MEMORY[0x1895F8858](v9);
  uint64_t v14 = (char *)&v23 - v13;
  uint64_t v15 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  BOOL v24 = a1;
  v18(v14, a1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1LL, v6) == 1)
  {
    uint64_t v19 = *(void (**)(char *, uint64_t))(v8 + 8);
    v19(v14, v7);
    uint64_t v20 = v23;
    TreeDictionary.removeValue(forKey:)(v23, a3, (uint64_t)v11);
    (*(void (**)(uint64_t))(*(void *)(a3[2] - 8LL) + 8LL))(v20);
    v19(v24, v7);
    return ((uint64_t (*)(char *, uint64_t))v19)(v11, v7);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v14, v6);
    uint64_t v22 = v23;
    sub_188D32644((uint64_t)v17, v23, a3);
    (*(void (**)(uint64_t))(*(void *)(a3[2] - 8LL) + 8LL))(v22);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v24, v7);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v6);
    ++*(void *)(v3 + 16);
  }

  return result;
}

uint64_t TreeDictionary.init(_new:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a1;
}

uint64_t TreeDictionary._root.getter()
{
  return swift_retain();
}

uint64_t TreeDictionary._root.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *char v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*TreeDictionary._root.modify())()
{
  return nullsub_1;
}

uint64_t TreeDictionary._version.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t TreeDictionary._version.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*TreeDictionary._version.modify())()
{
  return nullsub_1;
}

uint64_t TreeDictionary.subscript.getter@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v12 = sub_188DF5A9C();
  return _HashNode.get(_:_:_:)(0LL, a1, v12, a2, a3, a4, a5, a6);
}

uint64_t TreeDictionary._updateValue(_:forKey:)(uint64_t a1, uint64_t a2, void *a3)
{
  char v5 = sub_188D32644(a1, a2, a3);
  (*(void (**)(uint64_t))(*(void *)(a3[3] - 8LL) + 8LL))(a1);
  return v5 & 1;
}

uint64_t TreeDictionary.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v57 = a3;
  uint64_t v6 = a2[2];
  uint64_t v5 = a2[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v54 = sub_188DF8384();
  uint64_t v7 = swift_getTupleTypeMetadata2();
  uint64_t v8 = sub_188DF8384();
  uint64_t v51 = *(void *)(v8 - 8);
  uint64_t v52 = v8;
  uint64_t v9 = MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)&v43 - v10;
  uint64_t v12 = *(void *)(v7 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v9);
  uint64_t v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v17 = (char *)&v43 - v16;
  uint64_t v18 = a2[4];
  uint64_t v19 = a1;
  unint64_t v20 = sub_188DF5A9C();
  uint64_t v55 = v6;
  uint64_t v21 = (void *)type metadata accessor for _HashNode(0LL, v6, v5, v18);
  _HashNode.remove(_:_:_:)(0LL, v19, v20, v21, (uint64_t)v11);
  uint64_t v53 = v12;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1LL, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v51 + 8))(v11, v52);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))( v57,  1LL,  1LL,  v5);
  }

  else
  {
    uint64_t v23 = TupleTypeMetadata2;
    uint64_t v24 = *(int *)(TupleTypeMetadata2 + 48);
    int v25 = &v17[v24];
    uint64_t v26 = *(int *)(v7 + 48);
    uint64_t v27 = &v17[v26];
    uint64_t v45 = &v17[v26];
    uint64_t v46 = &v17[v24];
    uint64_t v44 = &v11[v26];
    uint64_t v28 = &v11[v24];
    uint64_t v29 = *(void *)(v55 - 8);
    uint64_t v51 = *(void *)(v29 + 32);
    uint64_t v52 = v29;
    ((void (*)(char *, char *))v51)(v17, v11);
    uint64_t v30 = *(void *)(v5 - 8);
    uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
    uint64_t v47 = v30;
    v50(v25, v28, v5);
    uint64_t v31 = v54;
    uint64_t v32 = *(void *)(v54 - 8);
    uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
    uint64_t v48 = v32;
    uint64_t v49 = v33;
    v33(v27, v44, v54);
    ++*((void *)v58 + 2);
    uint64_t v58 = &v15[*(int *)(v7 + 48)];
    uint64_t v34 = &v15[*(int *)(v23 + 48)];
    uint64_t v35 = v55;
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v15, v17, v55);
    int v36 = *(void (**)(char *, char *, uint64_t))(v30 + 16);
    uint64_t v37 = v46;
    v36(v34, v46, v5);
    int v38 = v45;
    (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v58, v45, v31);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v15, v7);
    uint64_t v39 = &v15[*(int *)(v7 + 48)];
    uint64_t v40 = &v15[*(int *)(TupleTypeMetadata2 + 48)];
    ((void (*)(char *, char *, uint64_t))v51)(v15, v17, v35);
    uint64_t v41 = (void (*)(uint64_t, char *, uint64_t))v50;
    v50(v40, v37, v5);
    v49(v39, v38, v31);
    uint64_t v42 = v57;
    v41(v57, v40, v5);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v47 + 56))(v42, 0LL, 1LL, v5);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v39, v31);
    return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v15, v35);
  }

void (*TreeDictionary.subscript.modify( void *a1, uint64_t a2, void *a3))(void **a1, uint64_t a2)
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  uint64_t v8 = a3[2];
  uint64_t v9 = a3[3];
  *uint64_t v7 = v3;
  v7[1] = v8;
  uint64_t v10 = a3[4];
  v7[2] = v9;
  _OWORD v7[3] = v10;
  uint64_t updated = type metadata accessor for _HashNode.ValueUpdateState(0LL, v8, v9, v10);
  void v7[4] = updated;
  uint64_t v12 = *(void *)(updated - 8);
  void v7[5] = v12;
  uint64_t v13 = malloc(*(void *)(v12 + 64));
  v7[6] = v13;
  ++*(void *)(v3 + 16);
  uint64_t v14 = sub_188DF5A9C();
  uint64_t v15 = (void *)type metadata accessor for _HashNode(0LL, v8, v9, v10);
  _HashNode.prepareValueUpdate(_:_:)(a2, v14, v15, (uint64_t)v13);
  return sub_188D317B4;
}

void sub_188D317B4(void **a1, uint64_t a2)
{
}

uint64_t sub_188D317C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t updated = type metadata accessor for _HashNode.ValueUpdateState(0LL, a3, a4, a5);
  MEMORY[0x1895F8858](updated);
  uint64_t v11 = (char *)&v15 - v10;
  (*(void (**)(char *, uint64_t))(v12 + 16))((char *)&v15 - v10, a2);
  uint64_t v13 = (uint64_t *)type metadata accessor for _HashNode(0LL, a3, a4, a5);
  return _HashNode.finalizeValueUpdate(_:)((uint64_t)v11, v13);
}

uint64_t TreeDictionary.subscript.getter@<X0>( uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8)
{
  uint64_t v22 = a3;
  uint64_t v23 = a2;
  uint64_t v13 = sub_188DF8384();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v16 = (char *)&v22 - v15;
  uint64_t v17 = sub_188DF5A9C();
  _HashNode.get(_:_:_:)(0LL, a1, v17, a4, a5, a6, a8, (uint64_t)v16);
  uint64_t v18 = *(void *)(a6 - 8);
  uint64_t v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, a6);
  if ((_DWORD)v19 != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 32))(a7, v16, a6);
  }
  v23(v19, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t TreeDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(a5[3] - 8LL) + 8LL))(a1);
  ++*(void *)(v5 + 16);
  return result;
}

void (*TreeDictionary.subscript.modify( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5))(void **a1, uint64_t a2)
{
  uint64_t v11 = malloc(0x38uLL);
  *a1 = v11;
  uint64_t v12 = a5[2];
  uint64_t v13 = a5[3];
  *uint64_t v11 = v5;
  v11[1] = v12;
  uint64_t v14 = a5[4];
  void v11[2] = v13;
  v11[3] = v14;
  uint64_t updated = type metadata accessor for _HashNode.DefaultedValueUpdateState(0LL, v12, v13, v14);
  __int128 v11[4] = updated;
  uint64_t v16 = *(void *)(updated - 8);
  void v11[5] = v16;
  uint64_t v17 = malloc(*(void *)(v16 + 64));
  v11[6] = v17;
  ++*(void *)(v5 + 16);
  uint64_t v18 = sub_188DF5A9C();
  uint64_t v19 = (void *)type metadata accessor for _HashNode(0LL, v12, v13, v14);
  _HashNode.prepareDefaultedValueUpdate(_:_:_:_:)(0LL, a2, a3, a4, v18, v19, (uint64_t)v17);
  swift_getTupleTypeMetadata2();
  return sub_188D31B1C;
}

void sub_188D31B1C(void **a1, uint64_t a2)
{
}

void sub_188D31B28(void **a1, uint64_t a2, void (*a3)(void, void *, void, void, void))
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[5];
  __int128 v4 = (void *)(*a1)[6];
  uint64_t v6 = (*a1)[4];
  a3(**a1, v4, (*a1)[1], (*a1)[2], (*a1)[3]);
  (*(void (**)(void *, uint64_t))(v5 + 8))(v4, v6);
  free(v4);
  free(v3);
}

uint64_t sub_188D31B84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t updated = type metadata accessor for _HashNode.DefaultedValueUpdateState(0LL, a3, a4, a5);
  uint64_t v10 = *(void *)(updated - 8);
  MEMORY[0x1895F8858](updated);
  uint64_t v12 = (char *)&v15 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v15 - v11, a2, updated);
  uint64_t v13 = (void *)type metadata accessor for _HashNode(0LL, a3, a4, a5);
  sub_188D4A1A4((uint64_t)v12, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, updated);
}

uint64_t TreeDictionary.index(forKey:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v16 = sub_188DF5A9C();
  uint64_t result = _HashNode.path(to:_:)(a1, v16, a2, a3, a5, a6, a7);
  uint64_t v20 = v19 & 0xFFFFFFFFFFLL | (((v19 >> 40) & 1) << 40);
  if (v18) {
    uint64_t v21 = a2;
  }
  else {
    uint64_t v21 = 0LL;
  }
  if (v18) {
    uint64_t v22 = a4;
  }
  else {
    uint64_t v22 = 0LL;
  }
  if (v18) {
    uint64_t v23 = result;
  }
  else {
    uint64_t v23 = 0LL;
  }
  *(void *)a8 = v21;
  *(void *)(a8 + 8) = v22;
  if (!v18) {
    uint64_t v20 = 0LL;
  }
  *(void *)(a8 + 16) = v23;
  *(void *)(a8 + 24) = v18;
  *(_DWORD *)(a8 + 32) = v20;
  *(_WORD *)(a8 + 36) = WORD2(v20);
  return result;
}

uint64_t TreeDictionary.updateValue(_:forKey:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = a3[2];
  uint64_t v10 = a3[4];
  uint64_t v11 = sub_188DF5A9C();
  uint64_t v12 = a3[3];
  uint64_t v23 = v9;
  uint64_t v24 = v12;
  uint64_t v25 = v10;
  uint64_t v26 = a2;
  uint64_t v27 = a1;
  uint64_t v13 = (uint64_t *)type metadata accessor for _HashNode(0LL, v9, v12, v10);
  _HashNode.updateValue(_:forKey:_:_:)(0LL, a2, v11, (uint64_t)sub_188D32770, (uint64_t)v22, v13);
  ++*(void *)(v4 + 16);
  if ((v16 & 1) != 0)
  {
    uint64_t v17 = *(void *)(v12 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(a4, 1LL, 1LL, v12);
  }

  else
  {
    unsigned int v18 = v15;
    uint64_t v19 = nullsub_1(v14 + 16, v14 + 32, v9, v12, v10);
    sub_188D31E38(v19, v20, v18, a1, v12, a4);
    uint64_t v17 = *(void *)(v12 - 8);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(a1, v12);
}

uint64_t sub_188D31E38@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W4>, uint64_t a4@<X5>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  uint64_t v9 = _HashNode.UnsafeHandle.itemPtr(at:)(a3, a1, a2);
  uint64_t v10 = v9 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  uint64_t v11 = *(void *)(a5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(a6, v10, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 24))(v10, a4, a5);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(a6, 0LL, 1LL, a5);
}

uint64_t sub_188D31F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v11 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v13 = (char *)&v16 - v12;
  uint64_t v14 = (char *)&v16 + *(int *)(v11 + 48) - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16LL))((char *)&v16 - v12, a2, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16LL))(v14, a3, a5);
  return sub_188D8A1FC((uint64_t)v13, a1, TupleTypeMetadata2);
}

uint64_t TreeDictionary.updateValue<A>(forKey:with:)@<X0>( uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v6 = v5;
  v21[0] = a5;
  v21[1] = a3;
  uint64_t v8 = a4[2];
  uint64_t v9 = a4[3];
  uint64_t v10 = a4[4];
  uint64_t updated = type metadata accessor for _HashNode.ValueUpdateState(0LL, v8, v9, v10);
  uint64_t v23 = *(void *)(updated - 8);
  uint64_t v12 = MEMORY[0x1895F8858](updated);
  uint64_t v14 = (char *)v21 - v13;
  uint64_t v15 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v17 = (char *)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a1, v8);
  ++*(void *)(v6 + 16);
  uint64_t v18 = sub_188DF5A9C();
  uint64_t v19 = (void *)type metadata accessor for _HashNode(0LL, v8, v9, v10);
  _HashNode.prepareValueUpdate(_:_:)((uint64_t)v17, v18, v19, (uint64_t)v14);
  v22(&v14[*(int *)(updated + 44)]);
  sub_188D317C0(v6, (uint64_t)v14, v8, v9, v10);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v14, updated);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v8);
}

uint64_t TreeDictionary.updateValue<A>(forKey:default:with:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v12 = a6[2];
  uint64_t v13 = a6[4];
  uint64_t v14 = sub_188DF5A9C();
  uint64_t v15 = a6[3];
  uint64_t v27 = v12;
  uint64_t v28 = v15;
  uint64_t v29 = a7;
  uint64_t v30 = v13;
  uint64_t v31 = a1;
  uint64_t v32 = a2;
  uint64_t v33 = a3;
  uint64_t v16 = (uint64_t *)type metadata accessor for _HashNode(0LL, v12, v15, v13);
  _HashNode.updateValue(_:forKey:_:_:)(0LL, a1, v14, (uint64_t)sub_188D32774, (uint64_t)v26, v16);
  uint64_t v18 = v17;
  uint64_t v20 = nullsub_1(v19 + 16, v19 + 32, v12, v15, v13);
  uint64_t v22 = _HashNode.UnsafeHandle.subscript.unsafeMutableAddressor(v18, v20, v21, v12, v15, v13);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return a4(v22 + *(int *)(TupleTypeMetadata2 + 48));
}

uint64_t sub_188D32290( uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v12 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v14 = (char *)&v21 - v13;
  uint64_t v15 = *(void *)(a6 - 8);
  uint64_t v16 = MEMORY[0x1895F8858](v12);
  uint64_t v18 = (char *)&v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a3(v16);
  uint64_t v19 = &v14[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16LL))(v14, a2, a5);
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v19, v18, a6);
  return sub_188D8A1FC((uint64_t)v14, a1, TupleTypeMetadata2);
}

uint64_t TreeDictionary.remove(at:)(char *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v52 = a1;
  uint64_t v53 = a2;
  uint64_t v6 = *(void *)(a4 + 16);
  uint64_t v7 = *(void *)(a4 + 24);
  uint64_t v51 = a4;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = sub_188DF8384();
  uint64_t v10 = TupleTypeMetadata2;
  uint64_t v11 = swift_getTupleTypeMetadata2();
  uint64_t v12 = MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = MEMORY[0x1895F8858](v12);
  uint64_t v18 = (char *)&v43 - v17;
  if (*(void *)a3 == *v4
    && (uint64_t v19 = v4[2], *(void *)(a3 + 8) == v19)
    && (int v20 = *(unsigned __int8 *)(a3 + 37), *(_BYTE *)(a3 + 37)))
  {
    uint64_t v49 = v10;
    uint64_t v50 = v9;
    uint64_t v44 = *(unsigned __int8 *)(a3 + 36);
    uint64_t v21 = v7;
    uint64_t v54 = v7;
    uint64_t v22 = *(unsigned int *)(a3 + 32);
    uint64_t v23 = *(void *)(a3 + 24);
    uint64_t v45 = *(char **)(a3 + 16);
    uint64_t v46 = (char *)v23;
    v4[2] = v19 + 1;
    uint64_t v24 = &v18[*(int *)(v10 + 48)];
    uint64_t v25 = &v18[*(int *)(result + 48)];
    uint64_t v26 = *(void *)(v51 + 32);
    uint64_t v27 = result;
    uint64_t v51 = v16;
    uint64_t v28 = (void *)type metadata accessor for _HashNode(0LL, v6, v21, v26);
    uint64_t v29 = 0x10000000000LL;
    if (!v20) {
      uint64_t v29 = 0LL;
    }
    Swift::Int v30 = v29 | v22 | (v44 << 32);
    uint64_t v47 = v25;
    uint64_t v48 = v24;
    uint64_t v31 = v25;
    _HashNode.remove(_:at:)(v18, v24, v25, 0LL, v45, (uint64_t)v46, v30, v28);
    uint64_t v46 = &v14[*(int *)(v27 + 48)];
    uint64_t v32 = &v14[*(int *)(v10 + 48)];
    uint64_t v33 = *(void *)(v6 - 8);
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v14, v18, v6);
    uint64_t v34 = *(void *)(v54 - 8);
    (*(void (**)(char *, char *))(v34 + 16))(v32, v24);
    uint64_t v35 = *(void *)(v50 - 8);
    int v36 = v31;
    uint64_t v37 = v50;
    (*(void (**)(char *, char *))(v35 + 16))(v46, v36);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v14, v27);
    int v38 = &v14[*(int *)(v27 + 48)];
    uint64_t v39 = &v14[*(int *)(v49 + 48)];
    uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
    v40(v14, v18, v6);
    uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
    uint64_t v42 = v54;
    v41(v39, v48, v54);
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v38, v47, v37);
    v40(v52, v14, v6);
    v41(v53, v39, v42);
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v38, v37);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_188D32644(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = a3[2];
  uint64_t v7 = a3[4];
  uint64_t v8 = sub_188DF5A9C();
  uint64_t v9 = a3[3];
  void v21[2] = v6;
  void v21[3] = v9;
  v21[4] = v7;
  v21[5] = a2;
  v21[6] = a1;
  uint64_t v10 = (uint64_t *)type metadata accessor for _HashNode(0LL, v6, v9, v7);
  _HashNode.updateValue(_:forKey:_:_:)(0LL, a2, v8, (uint64_t)sub_188D32770, (uint64_t)v21, v10);
  char v14 = v13;
  if ((v13 & 1) == 0)
  {
    uint64_t v15 = v12;
    uint64_t v16 = nullsub_1(v11 + 16, v11 + 32, v6, v9, v7);
    uint64_t v18 = _HashNode.UnsafeHandle.subscript.unsafeMutableAddressor(v15, v16, v17, v6, v9, v7);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24LL))( v18 + *(int *)(TupleTypeMetadata2 + 48),  a1,  v9);
  }

  return v14 & 1;
}

uint64_t sub_188D32774(uint64_t a1)
{
  return sub_188D32290( a1,  *(void *)(v1 + 48),  *(void (**)(uint64_t))(v1 + 56),  *(void *)(v1 + 64),  *(void *)(v1 + 16),  *(void *)(v1 + 24));
}

uint64_t sub_188D32788()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for TreeDictionary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TreeDictionary);
}

uint64_t sub_188D3279C(uint64_t a1)
{
  return sub_188D31F00(a1, v1[5], v1[6], v1[2], v1[3]);
}

uint64_t _Bitmap.makeIterator()(uint64_t result)
{
  return result;
}

unint64_t _Bitmap.Iterator.next()()
{
  unsigned int v1 = *v0;
  if (!*v0) {
    return 0LL;
  }
  uint64_t v2 = v0[1];
  unint64_t result = __clz(__rbit32(v1)) | (unint64_t)(v2 << 32);
  unsigned int *v0 = (v1 - 1) & v1;
  v0[1] = v2 + 1;
  return result;
}

uint64_t _Bitmap.contains(_:)(char a1, unsigned int a2)
{
  return (a2 >> a1) & 1;
}

uint64_t _Bitmap.slot(of:)(char a1, int a2, int8x8_t a3)
{
  a3.i32[0] = a2 & ~(-1 << a1);
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(a3);
  v3.i16[0] = vaddlv_u8(v3);
  return v3.u32[0];
}

uint64_t _Bitmap.union(_:)(unsigned int a1, int a2)
{
  return a2 | a1;
}

BOOL _Bitmap.isDisjoint(with:)(int a1, int a2)
{
  return (a2 & a1) == 0;
}

uint64_t _Bitmap.count.getter(__int32 a1, int8x8_t a2)
{
  a2.i32[0] = a1;
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(a2);
  v2.i16[0] = vaddlv_u8(v2);
  return v2.u32[0];
}

unint64_t _Bitmap.init(bitPattern:)(unint64_t result)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }

  if (HIDWORD(result)) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t static _Bitmap.capacity.getter()
{
  return 32LL;
}

uint64_t _Bitmap.inserting(_:)(char a1, unsigned int a2)
{
  return (1 << a1) | a2;
}

uint64_t _Bitmap.removing(_:)(char a1, unsigned int a2)
{
  return ((-1 << a1) - 1) & a2;
}

uint64_t _Bitmap.subtracting(_:)(int a1, int a2)
{
  return a2 & ~a1;
}

uint64_t _Bitmap.remove(_:)(uint64_t result)
{
  *v1 &= (-1 << result) - 1;
  return result;
}

uint64_t static _Bitmap.empty.getter()
{
  return 0LL;
}

uint64_t _Bitmap.intersection(_:)(unsigned int a1, int a2)
{
  return a2 & a1;
}

uint64_t _Bitmap._value.setter(uint64_t result)
{
  *unsigned int v1 = result;
  return result;
}

uint64_t (*_Bitmap._value.modify())()
{
  return nullsub_1;
}

uint64_t _Bitmap.init(_:)(char a1)
{
  return (1 << a1);
}

uint64_t _Bitmap.init(_:_:)(char a1, char a2)
{
  return (1 << a2) | (1 << a1);
}

uint64_t _Bitmap.init(upTo:)(char a1)
{
  return ~(-1 << a1);
}

BOOL static _Bitmap.== infix(_:_:)(int a1, int a2)
{
  return a1 == a2;
}

uint64_t _Bitmap.description.getter()
{
  uint64_t result = sub_188DF7E74();
  if (__OFSUB__(32LL, result))
  {
    __break(1u);
  }

  else
  {
    MEMORY[0x1895D6828](48LL, 0xE100000000000000LL, 32 - result);
    swift_bridgeObjectRetain();
    sub_188DF7EE0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A238);
    sub_188D277D0();
    uint64_t v1 = sub_188DF7FB8();
    sub_188DF7EE0();
    sub_188DF88D0();
    sub_188DF7EE0();
    swift_bridgeObjectRelease();
    sub_188DF7EE0();
    return v1;
  }

  return result;
}

uint64_t sub_188D32A5C()
{
  return _Bitmap.description.getter();
}

uint64_t static _Bitmap.bitWidth.getter()
{
  return 5LL;
}

uint64_t _Bitmap.capacity.getter()
{
  return 32LL;
}

BOOL _Bitmap.isEmpty.getter(int a1)
{
  return a1 == 0;
}

BOOL _Bitmap.hasExactlyOneMember.getter(int a1)
{
  return a1 && (a1 & (a1 - 1)) == 0;
}

uint64_t _Bitmap.first.getter(unsigned int a1)
{
  return __clz(__rbit32(a1)) & 0x1F | ((a1 == 0) << 8);
}

uint64_t _Bitmap.popFirst()()
{
  unsigned int v1 = *v0;
  if (*v0)
  {
    unsigned int v2 = __clz(__rbit32(v1));
    unsigned int *v0 = (v1 - 1) & v1;
  }

  else
  {
    unsigned int v2 = 0;
  }

  return v2 | ((v1 == 0) << 8);
}

uint64_t _Bitmap.insert(_:)(uint64_t result)
{
  *v1 |= 1 << result;
  return result;
}

Swift::UInt _Bitmap.bucket(at:)(Swift::Int ranked)
{
  Swift::UInt_optional v2 = UInt32._bit(ranked:)(ranked);
  if (v2.is_nil) {
    __break(1u);
  }
  return v2.value;
}

BOOL _Bitmap.isSubset(of:)(int a1, int a2)
{
  return (a2 & ~a1) == 0;
}

uint64_t _Bitmap.Iterator.bitmap.setter(uint64_t result)
{
  *unsigned int v1 = result;
  return result;
}

uint64_t (*_Bitmap.Iterator.bitmap.modify())()
{
  return nullsub_1;
}

unint64_t _Bitmap.Iterator.slot.getter(unint64_t a1)
{
  return HIDWORD(a1);
}

uint64_t _Bitmap.Iterator.slot.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 4) = result;
  return result;
}

uint64_t (*_Bitmap.Iterator.slot.modify())()
{
  return nullsub_1;
}

uint64_t _Bitmap.Iterator.init(_:)(uint64_t result)
{
  return result;
}

unint64_t sub_188D32B80()
{
  unint64_t result = qword_18C74A358;
  if (!qword_18C74A358)
  {
    unint64_t result = MEMORY[0x1895D7620](MEMORY[0x18961A888], MEMORY[0x18961A860]);
    atomic_store(result, (unint64_t *)&qword_18C74A358);
  }

  return result;
}

void sub_188D32BC4(uint64_t a1@<X8>)
{
  unsigned int v2 = *v1;
  if (*v1)
  {
    uint64_t v3 = v1[1];
    unint64_t v4 = __clz(__rbit32(v2)) | (unint64_t)(v3 << 32);
    *uint64_t v1 = (v2 - 1) & v2;
    v1[1] = v3 + 1;
  }

  else
  {
    unint64_t v4 = 0LL;
  }

  *(void *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v2 == 0;
}

uint64_t _Bitmap.underestimatedCount.getter(__int32 a1, int8x8_t a2)
{
  a2.i32[0] = a1;
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(a2);
  v2.i16[0] = vaddlv_u8(v2);
  return v2.u32[0];
}

unint64_t sub_188D32C20()
{
  unint64_t result = qword_18C74A360;
  if (!qword_18C74A360)
  {
    unint64_t result = MEMORY[0x1895D7620]( &protocol conformance descriptor for _Bitmap.Iterator,  &type metadata for _Bitmap.Iterator);
    atomic_store(result, (unint64_t *)&qword_18C74A360);
  }

  return result;
}

void sub_188D32C64(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_188D32C70()
{
  uint8x8_t v1 = (uint8x8_t)vcnt_s8((int8x8_t)*v0);
  v1.i16[0] = vaddlv_u8(v1);
  return v1.u32[0];
}

uint64_t sub_188D32C88(int8x8_t a1)
{
  return sub_188DAAA80(*v1, a1);
}

unsigned int *sub_188D32C90(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  return sub_188DC5F30(a1, a2, a3, *v3);
}

ValueMetadata *type metadata accessor for _Bitmap()
{
  return &type metadata for _Bitmap;
}

void *__swift_memcpy8_4(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for _Bitmap.Iterator(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for _Bitmap.Iterator(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _Bitmap.Iterator()
{
  return &type metadata for _Bitmap.Iterator;
}

uint64_t sub_188D32D10()
{
  return MEMORY[0x189617E08];
}

unint64_t sub_188D32D20()
{
  unint64_t result = qword_18C74A368[0];
  if (!qword_18C74A368[0])
  {
    unint64_t result = MEMORY[0x1895D7620](&unk_188DFFB50, &_s7SummaryVN);
    atomic_store(result, qword_18C74A368);
  }

  return result;
}

uint64_t sub_188D32D64(uint64_t result)
{
  uint64_t v2 = result;
  unint64_t v4 = *(void *)v1;
  unint64_t v3 = *(void *)(v1 + 8);
  if ((v3 & 0x2000000000000000LL) != 0) {
    uint64_t v5 = HIBYTE(v3) & 0xF;
  }
  else {
    uint64_t v5 = *(void *)v1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    __int16 v11 = *(_WORD *)(v1 + 20);
    uint64_t v12 = *(void *)(result + 8);
    uint64_t v13 = *(unsigned __int16 *)(result + 20);
    int v14 = *(_DWORD *)(result + 16);
    *(void *)uint64_t v1 = *(void *)result;
    *(void *)(v1 + 8) = v12;
    *(_WORD *)(v1 + 20) = v13;
    int v15 = *(_DWORD *)(v1 + 16);
    *(_DWORD *)(v1 + 16) = v14;
    *(void *)unint64_t result = v4;
    *(void *)(result + 8) = v3;
    *(_DWORD *)(result + 16) = v15;
    unint64_t result = 1LL;
    *(_WORD *)(v2 + 20) = v11;
    return result;
  }

  unint64_t v7 = *(void *)result;
  unint64_t v6 = *(void *)(result + 8);
  unint64_t v8 = *(void *)result & 0xFFFFFFFFFFFFLL;
  if ((v6 & 0x2000000000000000LL) != 0) {
    unint64_t v8 = HIBYTE(v6) & 0xF;
  }
  if (!v8) {
    return 1LL;
  }
  unint64_t v9 = *(unsigned __int8 *)(v1 + 16);
  uint64_t v10 = *(unsigned __int8 *)(result + 16);
  unint64_t v16 = v10 + v9;
  uint64_t v17 = v16 - 124;
  if (v16 >= 0x17B) {
    uint64_t v17 = 255LL;
  }
  if (v16 > 0xFF) {
    unint64_t v16 = v17;
  }
  unint64_t v18 = v16 - v9;
  if (v16 == v9)
  {
    __break(1u);
    goto LABEL_32;
  }

  if ((uint64_t)v16 >= (uint64_t)v9)
  {
    if ((v6 & 0x1000000000000000LL) == 0)
    {
      if ((v18 & 0x8000000000000000LL) != 0)
      {
        __break(1u);
      }

      else if (v8 >= v18)
      {
        unint64_t v21 = (v18 << 16) | 4;
LABEL_27:
        unint64_t v22 = sub_188D0F098(v21, v7, v6);
        sub_188D33624(v1, v2, v22);
        goto LABEL_28;
      }

      __break(1u);
      return result;
    }

BOOL sub_188D32F0C(uint64_t a1)
{
  unint64_t v4 = *(void *)v1;
  unint64_t v3 = *(void *)(v1 + 8);
  unint64_t v5 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000LL) == 0) {
    unint64_t v5 = *(void *)v1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    uint64_t v12 = *(unsigned __int16 *)(v1 + 20);
    uint64_t v13 = *(void *)(a1 + 8);
    __int16 v14 = *(_WORD *)(a1 + 20);
    int v15 = *(_DWORD *)(a1 + 16);
    *(void *)uint64_t v1 = *(void *)a1;
    *(void *)(v1 + 8) = v13;
    *(_WORD *)(v1 + 20) = v14;
    int v16 = *(_DWORD *)(v1 + 16);
    *(_DWORD *)(v1 + 16) = v15;
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v3;
    *(_DWORD *)(a1 + 16) = v16;
    BOOL result = 1LL;
    *(_WORD *)(a1 + 20) = v12;
    return result;
  }

  unint64_t v7 = *(void *)a1;
  unint64_t v6 = *(void *)(a1 + 8);
  unint64_t v8 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000LL) == 0) {
    unint64_t v8 = *(void *)a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v8) {
    return 1LL;
  }
  unint64_t v9 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v10 = *(unsigned __int8 *)(v1 + 16);
  unint64_t v17 = v10 + v9;
  uint64_t v18 = v17 - 124;
  if (v17 >= 0x17B) {
    uint64_t v18 = 255LL;
  }
  if (v17 <= 0xFF) {
    uint64_t v18 = v17;
  }
  unint64_t v19 = v10 - v18;
  if (v10 == v18)
  {
    __break(1u);
  }

  else
  {
    if (v10 <= v18)
    {
      unint64_t v19 = v17 - v18;
      if ((v6 & 0x1000000000000000LL) == 0)
      {
        if ((v19 & 0x8000000000000000LL) != 0)
        {
          __break(1u);
LABEL_58:
          __break(1u);
          goto LABEL_59;
        }

        if (v8 < v19)
        {
LABEL_59:
          __break(1u);
          goto LABEL_60;
        }

        unint64_t v25 = (v19 << 16) | 4;
LABEL_32:
        unint64_t v26 = sub_188D0F098(v25, v7, v6);
        if ((v26 ^ v25) >= 0x4000)
        {
          unint64_t v27 = sub_188DC9D84(v26, v7, v6);
          if ((v6 & 0x1000000000000000LL) != 0)
          {
            unint64_t v25 = sub_188DF7E08();
          }

          else
          {
            unint64_t v28 = v27 >> 16;
            if ((v6 & 0x2000000000000000LL) != 0)
            {
              unint64_t v37 = v7;
              uint64_t v38 = v6 & 0xFFFFFFFFFFFFFFLL;
              int v30 = *((unsigned __int8 *)&v37 + v28);
            }

            else
            {
              if ((v7 & 0x1000000000000000LL) != 0) {
                uint64_t v29 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
              }
              else {
                uint64_t v29 = sub_188DF8684();
              }
              int v30 = *(unsigned __int8 *)(v29 + v28);
            }

            int v33 = (char)v30;
            unsigned int v34 = __clz(v30 ^ 0xFF) - 24;
            if (v33 >= 0) {
              LOBYTE(v34) = 1;
            }
            unint64_t v25 = ((v28 + v34) << 16) | 5;
          }
        }

        sub_188D33410(a1, v1, v25);
        goto LABEL_50;
      }

LABEL_60:
      uint64_t v23 = sub_188DF8684();
      goto LABEL_27;
    }

    unint64_t v20 = sub_188DF7E08();
  }

void sub_188D331EC(void *a1@<X8>)
{
  uint64_t v2 = v1[16];
  uint64_t v3 = v1[17];
  uint64_t v4 = v1[18];
  *a1 = v1[19];
  a1[1] = v4;
  a1[2] = v3;
  a1[3] = v2;
}

BOOL sub_188D33208()
{
  unint64_t v1 = v0[1];
  uint64_t v2 = *v0 & 0xFFFFFFFFFFFFLL;
  if ((v1 & 0x2000000000000000LL) != 0) {
    uint64_t v2 = HIBYTE(v1) & 0xF;
  }
  return v2 == 0;
}

BOOL sub_188D33228()
{
  return *(unsigned __int8 *)(v0 + 16) < 0x7Cu;
}

uint64_t sub_188D33240@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *a1;
  uint64_t v6 = *(void *)v2;
  unint64_t v5 = *(void *)(v2 + 8);
  unint64_t v7 = sub_188D82630( *a1,  *(void *)v2,  v5,  *(unsigned int *)(v2 + 16) | ((unint64_t)*(unsigned __int8 *)(v2 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(v2 + 21) << 40));
  char v8 = v7;
  char v36 = v9;
  unint64_t v31 = v7 >> 8;
  unint64_t v32 = v7 >> 16;
  unint64_t v33 = v7 >> 24;
  unint64_t v34 = HIDWORD(v7);
  unint64_t v35 = v7 >> 40;
  unint64_t v37 = HIWORD(v7);
  unint64_t v38 = HIBYTE(v7);
  unsigned int v40 = HIWORD(v9);
  unsigned int v41 = v9 >> 8;
  unsigned int v39 = HIBYTE(v9);
  swift_bridgeObjectRetain();
  unint64_t v10 = sub_188D0EFD0(v4, v6, v5);
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = MEMORY[0x1895D6684](v10, v12, v14, v16);
  uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v20 = sub_188DF7FD0();
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = MEMORY[0x1895D6684](v20, v22, v24, v26);
  uint64_t v29 = v28;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)uint64_t v2 = v27;
  *(void *)(v2 + 8) = v29;
  *(_BYTE *)(v2 + 16) = v8;
  *(_BYTE *)(v2 + 17) = v31;
  *(_BYTE *)(v2 + 18) = v32;
  *(_BYTE *)(v2 + 19) = v33;
  *(_BYTE *)(v2 + 20) = v34;
  *(_BYTE *)(v2 + 2_HashNode.ensureUnique(isUnique:)(v1 & 1) = v35;
  *(void *)a2 = v17;
  *(void *)(a2 + 8) = v19;
  *(_BYTE *)(a2 + 16) = v37;
  *(_BYTE *)(a2 + 17) = v38;
  *(_BYTE *)(a2 + 18) = v36;
  *(_BYTE *)(a2 + 19) = v41;
  *(_BYTE *)(a2 + 20) = v40;
  *(_BYTE *)(a2 + 2_HashNode.ensureUnique(isUnique:)(v1 & 1) = v39;
  return result;
}

uint64_t sub_188D33410(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >= 0x4000)
  {
    uint64_t v15 = *(void *)a1;
    unint64_t v14 = *(void *)(a1 + 8);
    uint64_t v16 = sub_188D82630( a3,  *(void *)a1,  v14,  *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 21) << 40));
    unsigned int v18 = v17;
    uint64_t v19 = HIBYTE(v17);
    swift_bridgeObjectRetain();
    unint64_t v20 = sub_188D0EFD0(a3, v15, v14);
    uint64_t v22 = v21;
    uint64_t v24 = v23;
    uint64_t v36 = v25;
    swift_bridgeObjectRelease();
    sub_188D2C3E8( v20,  v22,  v24,  v36,  (v19 << 40) | ((unint64_t)BYTE2(v18) << 32) | (v18 << 16) & 0xFF000000 | (v18 << 16) & 0xFF0000LL | HIWORD(v16));
    swift_bridgeObjectRetain();
    uint64_t v26 = sub_188DF7FD0();
    uint64_t v28 = v27;
    uint64_t v30 = v29;
    uint64_t v32 = v31;
    swift_bridgeObjectRelease();
    uint64_t v33 = MEMORY[0x1895D6684](v26, v28, v30, v32);
    uint64_t v35 = v34;
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a1 = v33;
    *(void *)(a1 + 8) = v35;
    *(_WORD *)(a1 + 16) = v16;
    *(_BYTE *)(a1 + 18) = BYTE2(v16);
    *(_BYTE *)(a1 + 19) = BYTE3(v16);
    *(_BYTE *)(a1 + 20) = BYTE4(v16);
    *(_BYTE *)(a1 + 2_HashNode.ensureUnique(isUnique:)(v1 & 1) = BYTE5(v16);
  }

  else
  {
    uint64_t v5 = *(void *)a2;
    uint64_t v6 = *(void *)(a2 + 8);
    unint64_t v7 = *(unsigned int *)(a2 + 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 21) << 40);
    swift_bridgeObjectRetain();
    sub_188D2DB9C(v5, v6, v7);
    uint64_t result = swift_bridgeObjectRelease_n();
    unint64_t v9 = *(void *)a1;
    uint64_t v10 = *(void *)(a1 + 8);
    __int16 v11 = *(_WORD *)(a1 + 20);
    *(void *)a1 = 0LL;
    *(void *)(a1 + 8) = 0xE000000000000000LL;
    int v12 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = 0;
    *(_WORD *)(a1 + 20) = 0;
    *(void *)a2 = v9;
    *(void *)(a2 + 8) = v10;
    *(_DWORD *)(a2 + 16) = v12;
    *(_WORD *)(a2 + 20) = v11;
  }

  return result;
}

uint64_t sub_188D33624(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v6 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000LL) == 0) {
    uint64_t v6 = *(void *)a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v7 = a2 + 16;
  unint64_t v8 = *(unsigned int *)(a2 + 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 21) << 40);
  if (a3 >> 14 >= 4 * v6)
  {
    swift_bridgeObjectRetain();
    sub_188D2DB9C(v5, v4, v8);
    uint64_t result = swift_bridgeObjectRelease_n();
    *(void *)a2 = 0LL;
    *(void *)(a2 + 8) = 0xE000000000000000LL;
    *(_DWORD *)uint64_t v7 = 0;
    *(_WORD *)(v7 + 4) = 0;
  }

  else
  {
    uint64_t v10 = sub_188D82630(a3, *(void *)a2, v4, v8);
    char v23 = v11;
    unsigned int v25 = HIWORD(v11);
    unsigned int v26 = v11 >> 8;
    unsigned int v24 = HIBYTE(v11);
    swift_bridgeObjectRetain();
    sub_188DF7FD0();
    swift_bridgeObjectRelease();
    sub_188D37FDC(v10 & 0xFFFFFFFFFFFFLL);
    sub_188D2DC60();
    sub_188DF7EC8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    unint64_t v12 = sub_188D0EFD0(a3, v5, v4);
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    uint64_t v19 = MEMORY[0x1895D6684](v12, v14, v16, v18);
    uint64_t v21 = v20;
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a2 = v19;
    *(void *)(a2 + 8) = v21;
    *(_BYTE *)(a2 + 16) = BYTE6(v10);
    *(_BYTE *)(a2 + 17) = HIBYTE(v10);
    *(_BYTE *)(a2 + 18) = v23;
    *(_BYTE *)(a2 + 19) = v26;
    *(_BYTE *)(a2 + 20) = v25;
    *(_BYTE *)(a2 + 2_HashNode.ensureUnique(isUnique:)(v1 & 1) = v24;
  }

  return result;
}

uint64_t FixedWidthInteger._roundUpToPowerOfTwo()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v30 = a3;
  uint64_t v27 = a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v28 = (char *)&v24 - v8;
  uint64_t v9 = *(void *)(a1 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](v7);
  unsigned int v26 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)&v24 - v12;
  char v14 = sub_188DF8540();
  uint64_t v15 = v3;
  uint64_t v29 = v5;
  uint64_t v16 = sub_188DF8534();
  if ((v14 & 1) != 0)
  {
    if (v16 <= 64) {
      goto LABEL_3;
    }
  }

  else if (v16 <= 63)
  {
LABEL_3:
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v13, v3, a1);
    uint64_t v17 = sub_188DF8528();
    uint64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
    v18(v13, a1);
    if (v17 > 0) {
      goto LABEL_4;
    }
LABEL_8:
    swift_getAssociatedConformanceWitness();
    sub_188DF89CC();
    return sub_188DF896C();
  }

  uint64_t v31 = 0LL;
  sub_188CF7620();
  sub_188DF84E0();
  char v23 = sub_188DF7CC4();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v13, a1);
  if ((v23 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v24 = v15;
  uint64_t v25 = sub_188DF87D4();
  swift_getAssociatedConformanceWitness();
  sub_188DF89CC();
  uint64_t v19 = v26;
  sub_188DF896C();
  sub_188DF87F8();
  v18(v19, a1);
  uint64_t v20 = sub_188DF87EC();
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v18)(v13, a1);
  uint64_t v22 = v25 - v20;
  if (__OFSUB__(v25, v20))
  {
    __break(1u);
  }

  else
  {
    sub_188DF89CC();
    sub_188DF896C();
    uint64_t v31 = v22;
    sub_188CF7620();
    sub_188DF84F8();
    return ((uint64_t (*)(char *, uint64_t))v18)(v13, a1);
  }

  return result;
}

uint64_t TreeSet.makeIterator()@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v3 = v9[0];
  a2[6] = v8[6];
  a2[7] = v3;
  *(_OWORD *)((char *)a2 + 123) = *(_OWORD *)((char *)v9 + 11);
  __int128 v4 = v8[3];
  a2[2] = v8[2];
  a2[3] = v4;
  __int128 v5 = v8[5];
  a2[4] = v8[4];
  a2[5] = v5;
  __int128 v6 = v8[1];
  *a2 = v8[0];
  a2[1] = v6;
  return swift_retain();
}

uint64_t TreeSet.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(unsigned int *)(v2 + 16);
  if (v5 >= *(_DWORD *)(v2 + 20))
  {
    uint64_t v6 = _HashTreeIterator._next()();
    if (!v6)
    {
      uint64_t v18 = *(void *)(a1 + 16);
      uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL);
      uint64_t v16 = a2;
      uint64_t v17 = 1LL;
      return v15(v16, v17, 1LL, v18);
    }

    uint64_t v5 = v7;
  }

  else
  {
    uint64_t v6 = *(void *)(v2 + 8);
    *(_DWORD *)(v2 + 16) = v5 + 1;
  }

  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = MEMORY[0x18961AFC8] + 8LL;
  uint64_t v11 = nullsub_1(v6 + 16, v6 + 32, v8, MEMORY[0x18961AFC8] + 8LL, v9);
  uint64_t v13 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v5, v11, v12, v8, v10, v9);
  uint64_t v14 = *(void *)(v8 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(a2, v13, v8);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  uint64_t v16 = a2;
  uint64_t v17 = 0LL;
  uint64_t v18 = v8;
  return v15(v16, v17, 1LL, v18);
}

uint64_t TreeSet.Iterator._it.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_188D34044(v1, a1);
}

__n128 TreeSet.Iterator._it.setter(uint64_t a1)
{
  __int128 v3 = v1[7];
  v11[6] = v1[6];
  v12[0] = v3;
  *(_OWORD *)((char *)v12 + 1_HashNode.ensureUnique(isUnique:)(v1 & 1) = *(_OWORD *)((char *)v1 + 123);
  __int128 v4 = v1[3];
  void v11[2] = v1[2];
  v11[3] = v4;
  __int128 v5 = v1[5];
  __int128 v11[4] = v1[4];
  void v11[5] = v5;
  __int128 v6 = v1[1];
  v11[0] = *v1;
  v11[1] = v6;
  sub_188CFE7A8((uint64_t)v11);
  __int128 v7 = *(_OWORD *)(a1 + 112);
  v1[6] = *(_OWORD *)(a1 + 96);
  v1[7] = v7;
  *(_OWORD *)((char *)v1 + 123) = *(_OWORD *)(a1 + 123);
  __int128 v8 = *(_OWORD *)(a1 + 48);
  v1[2] = *(_OWORD *)(a1 + 32);
  v1[3] = v8;
  __int128 v9 = *(_OWORD *)(a1 + 80);
  v1[4] = *(_OWORD *)(a1 + 64);
  v1[5] = v9;
  __n128 result = *(__n128 *)(a1 + 16);
  *uint64_t v1 = *(_OWORD *)a1;
  v1[1] = result;
  return result;
}

uint64_t (*TreeSet.Iterator._it.modify())()
{
  return nullsub_1;
}

__n128 TreeSet.Iterator.init(_root:)@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&__int128 v17 = a1;
  *((void *)&v17 + _HashNode.ensureUnique(isUnique:)(v1 & 1) = a1;
  v18.n128_u32[0] = 0;
  swift_beginAccess();
  unsigned int v5 = *(_DWORD *)(a1 + 16);
  int v4 = *(_DWORD *)(a1 + 20);
  uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v6.i16[0] = vaddlv_u8(v6);
  __int32 v7 = v6.i32[0];
  if (v5 == v4) {
    __int32 v7 = *(_DWORD *)(a1 + 16);
  }
  v18.n128_u32[1] = v7;
  v18.n128_u64[1] = 0LL;
  *(void *)&__int128 v19 = a1;
  *((void *)&v19 + _HashNode.ensureUnique(isUnique:)(v1 & 1) = a1;
  *(void *)&__int128 v20 = a1;
  *((void *)&v20 + _HashNode.ensureUnique(isUnique:)(v1 & 1) = a1;
  *(void *)&__int128 v21 = a1;
  *((void *)&v21 + _HashNode.ensureUnique(isUnique:)(v1 & 1) = a1;
  *(void *)&__int128 v22 = a1;
  *((void *)&v22 + _HashNode.ensureUnique(isUnique:)(v1 & 1) = a1;
  *(void *)&__int128 v23 = a1;
  *((void *)&v23 + _HashNode.ensureUnique(isUnique:)(v1 & 1) = a1;
  *(void *)uint64_t v24 = a1;
  *(void *)&v24[8] = a1;
  *(void *)&v24[16] = a1;
  *(_WORD *)&v24[24] = 0;
  v24[26] = 0;
  if (!v5)
  {
    if (v4)
    {
      sub_188D81B68(0);
      if (!v18.n128_u32[1])
      {
        unsigned __int8 v12 = v24[24];
        char v13 = v24[25];
        uint64_t v14 = *((void *)&v17 + 1);
        do
        {
          *((void *)&v19 + v12) = v14;
          v13 += 5;
          uint64_t v14 = *(void *)(v14 + 32);
          swift_beginAccess();
          unsigned __int32 v15 = *(_DWORD *)(v14 + 16);
          uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
          v16.i16[0] = vaddlv_u8(v16);
          if (v15 != *(_DWORD *)(v14 + 20)) {
            unsigned __int32 v15 = v16.i32[0];
          }
          ++v12;
        }

        while (!v15);
        v18.n128_u32[0] = 0;
        v18.n128_u32[1] = v15;
        *((void *)&v17 + _HashNode.ensureUnique(isUnique:)(v1 & 1) = v14;
        v24[25] = v13;
        v24[24] = v12;
      }
    }

    else
    {
      v24[26] = 1;
    }
  }

  __int128 v8 = *(_OWORD *)v24;
  a2[6] = v23;
  a2[7] = v8;
  *(_OWORD *)((char *)a2 + 123) = *(_OWORD *)&v24[11];
  __int128 v9 = v20;
  a2[2] = v19;
  a2[3] = v9;
  __int128 v10 = v22;
  a2[4] = v21;
  a2[5] = v10;
  __n128 result = v18;
  *a2 = v17;
  a2[1] = v18;
  return result;
}

BOOL TreeSet._customContainsEquatableElement(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = sub_188DF5A9C();
  return _HashNode.containsKey(_:_:_:)(0LL, a1, v11, a2, a3, a5, MEMORY[0x18961AFC8] + 8LL, a6);
}

__n128 sub_188D33F58@<Q0>(uint64_t a1@<X8>)
{
  __int128 v3 = v8[0];
  *(_OWORD *)(a1 + 96) = v7[6];
  *(_OWORD *)(a1 + 112) = v3;
  *(_OWORD *)(a1 + 123) = *(_OWORD *)((char *)v8 + 11);
  __int128 v4 = v7[3];
  *(_OWORD *)(a1 + 32) = v7[2];
  *(_OWORD *)(a1 + 48) = v4;
  __int128 v5 = v7[5];
  *(_OWORD *)(a1 + 64) = v7[4];
  *(_OWORD *)(a1 + 80) = v5;
  __n128 result = (__n128)v7[1];
  *(_OWORD *)a1 = v7[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_188D33FC8(uint64_t a1)
{
  return sub_188DF8240();
}

BOOL sub_188D33FFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return TreeSet._customContainsEquatableElement(_:)(a1, *v4, v4[1], a4, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t sub_188D3400C(uint64_t a1)
{
  return sub_188DF824C();
}

uint64_t sub_188D34044(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_188D34080()
{
}

uint64_t initializeWithCopy for _HashTreeIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 135) = *(_DWORD *)(a2 + 135);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for _HashTreeIterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_BYTE *)(a1 + 137) = *(_BYTE *)(a2 + 137);
  *(_BYTE *)(a1 + 138) = *(_BYTE *)(a2 + 138);
  return a1;
}

__n128 __swift_memcpy139_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __int128 v2 = *(_OWORD *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 123) = *(_OWORD *)(a2 + 123);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for _HashTreeIterator(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  __int128 v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  *(_BYTE *)(a1 + 138) = *(_BYTE *)(a2 + 138);
  return a1;
}

uint64_t getEnumTagSinglePayload for _HashTreeIterator(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 139)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _HashTreeIterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 138) = 0;
    *(_WORD *)(result + 136) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 139) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 139) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t type metadata accessor for TreeSet.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TreeSet.Iterator);
}

uint64_t TreeDictionary.init()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_18C749D80 != -1) {
    swift_once();
  }
  uint64_t v6 = _HashNode.init(storage:count:)(_emptySingleton, 0LL, a1, a2, a3);
  uint64_t v8 = TreeDictionary.init(_new:)(v6, v7, a1, a2, a3);
  swift_retain();
  return v8;
}

uint64_t TreeDictionary.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = sub_188D351E4(a1, a2, a3, a4);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t TreeDictionary.init<A>(_uniqueKeysWithValues:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_188D1E084(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void))sub_188D34E1C);
}

uint64_t TreeDictionary.init(keys:valueGenerator:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD v17[2] = a6;
  v17[3] = a7;
  v17[4] = a8;
  v17[5] = a4;
  v17[6] = a5;
  _HashNode.mapValues<A>(_:)( (void (*)(char *, char *))sub_188D35254,  (uint64_t)v17,  a1,  a2,  a6,  MEMORY[0x18961AFC8] + 8LL,  a7,  a8);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t result = swift_release();
  if (!v8) {
    return TreeDictionary.init(_new:)(v13, v15, a6, a7, a8);
  }
  return result;
}

uint64_t sub_188D34504(uint64_t a1, uint64_t a2, void (*a3)(char *), uint64_t a4, uint64_t a5)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v11 = (char *)v13 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16LL))((char *)v13 - v10, a1, a5);
  a3(v11);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, TupleTypeMetadata2);
}

uint64_t TreeDictionary.init<A>(uniqueKeysWithValues:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_188D1E084(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void))sub_188D35274);
}

uint64_t TreeDictionary.init<A>(uniqueKeysWithValues:)( void (*a1)(char *, char *, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(char *, char *, uint64_t))
{
  uint64_t v12 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (type metadata accessor for TreeDictionary(0LL, v15, v16, v17) == a4)
  {
    (*(void (**)(char *, void, uint64_t))(v12 + 32))(v14, a1, a4);
    swift_dynamicCast();
    return v21;
  }

  else
  {
    if (sub_188DF7C28() == a4)
    {
      (*(void (**)(char *, void, uint64_t))(v12 + 16))(v14, a1, a4);
      swift_dynamicCast();
      uint64_t v18 = sub_188D351E4(v21, a2, a3, a5);
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v18 = sub_188D34E1C(a1, a2, a3, a4, a5, a6);
    }

    (*(void (**)(void (*)(char *, char *, uint64_t), uint64_t))(v12 + 8))(a1, a4);
  }

  return v18;
}

uint64_t TreeDictionary.init<A>(_:uniquingKeysWith:)( uint64_t a1, void (*a2)(char *, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = sub_188D35638(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!v8) {
    uint64_t v9 = v12;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a6 - 8) + 8LL))(a1, a6);
  return v9;
}

char *TreeDictionary.init<A>(_:uniquingKeysWith:)( uint64_t a1, void (*a2)(char *, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v33 = a3;
  uint64_t v28 = a7;
  uint64_t v32 = a2;
  uint64_t v27 = sub_188DF860C();
  uint64_t v29 = *(void *)(v27 - 8);
  MEMORY[0x1895F8858](v27);
  uint64_t v14 = (char *)v26 - v13;
  uint64_t v15 = a5;
  v26[0] = a5;
  v26[1] = swift_getTupleTypeMetadata2();
  uint64_t v16 = sub_188DF8780();
  uint64_t v31 = *(void *)(v16 - 8);
  MEMORY[0x1895F8858](v16);
  uint64_t v18 = (char *)v26 - v17;
  uint64_t v35 = a1;
  sub_188DF8048();
  __int128 v19 = (void *)swift_allocObject();
  uint64_t v19[2] = a4;
  v19[3] = v15;
  uint64_t v30 = a6;
  uint64_t v20 = v28;
  v19[4] = a6;
  __n128 v19[5] = v20;
  v19[6] = a8;
  uint64_t v21 = v27;
  MEMORY[0x1895D7620](MEMORY[0x189619258], v27);
  sub_188DF8858();
  swift_release();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v21);
  uint64_t v22 = MEMORY[0x1895D7620](MEMORY[0x189619618], v16);
  uint64_t v23 = v34;
  uint64_t v24 = sub_188D35638((uint64_t)v18, v32, v33, a4, v26[0], v16, v20, v22);
  if (!v23) {
    uint64_t v14 = (char *)v24;
  }
  (*(void (**)(char *, uint64_t))(v31 + 8))(v18, v16);
  (*(void (**)(uint64_t))(*(void *)(v30 - 8) + 8LL))(v35);
  return v14;
}

uint64_t sub_188D34A48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v24 = a4;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v26 = TupleTypeMetadata2;
  uint64_t v9 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v13 = (char *)&v23 - v12;
  uint64_t v28 = a4 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  uint64_t v14 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v15 = &v13[v14];
  uint64_t v27 = &v13[v14];
  uint64_t v25 = a1;
  uint64_t v16 = a1 + v14;
  uint64_t v17 = *(void *)(a2 - 8);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v18(v13, a1, a2);
  uint64_t v19 = *(void *)(a3 - 8);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v20(v15, v16, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v24, v13, a2);
  uint64_t v21 = &v11[*(int *)(v26 + 48)];
  v18(v11, v25, a2);
  v20(v21, v16, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v28, v21, a3);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v11, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v27, a3);
}

uint64_t TreeDictionary.init<A>(grouping:by:)( char **a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7, uint64_t a8, char *a9)
{
  uint64_t v13 = sub_188D35728(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (!v9) {
    uint64_t v10 = v13;
  }
  (*(void (**)(char **, char *))(*((void *)a6 - 1) + 8LL))(a1, a6);
  return v10;
}

uint64_t TreeDictionary.init<A>(_grouping:by:)( char **a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7, uint64_t a8, char *a9)
{
  uint64_t v13 = sub_188D35728(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (!v9) {
    uint64_t v10 = v13;
  }
  (*(void (**)(char **, char *))(*((void *)a6 - 1) + 8LL))(a1, a6);
  return v10;
}

char *TreeDictionary.init<A>(grouping:by:)( char **a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, char *a5, uint64_t a6, char *a7)
{
  uint64_t v15 = sub_188DF8120();
  uint64_t v16 = MEMORY[0x1895D7620](MEMORY[0x189618490], v15);
  uint64_t v17 = sub_188D35728(a1, a2, a3, a4, v15, a5, a6, v16, a7);
  if (!v7) {
    a7 = (char *)v17;
  }
  (*(void (**)(char **, char *))(*((void *)a5 - 1) + 8LL))(a1, a5);
  return a7;
}

uint64_t sub_188D34E1C( void (*a1)(char *, char *, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(char *, char *, uint64_t))
{
  uint64_t v61 = a6;
  uint64_t v62 = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v64 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v50 = (char *)v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v11);
  uint64_t v51 = (char *)v47 - v13;
  uint64_t v14 = sub_188DF8384();
  uint64_t v15 = MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)v47 - v16;
  uint64_t v18 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](v15);
  uint64_t v20 = (char *)v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v48 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v23 = (char *)v47 - v22;
  uint64_t v52 = a2;
  uint64_t v53 = a3;
  uint64_t v54 = a5;
  uint64_t v24 = TreeDictionary.init()(a2, a3, a5);
  v47[1] = v25;
  uint64_t v65 = v24;
  uint64_t v66 = v26;
  (*(void (**)(char *, void, uint64_t))(v18 + 16))(v20, v62, a4);
  uint64_t v56 = v23;
  sub_188DF7FDC();
  uint64_t v57 = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v49 = v17;
  uint64_t v63 = TupleTypeMetadata2;
  uint64_t v28 = v51;
  uint64_t v27 = v52;
  uint64_t v29 = v53;
  uint64_t v30 = v54;
  while (1)
  {
    sub_188DF84D4();
    uint64_t v31 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v32 = &v28[v31];
    uint64_t v33 = &v17[v31];
    uint64_t v34 = *(void **)(v27 - 8);
    uint64_t v62 = (void (*)(char *, char *, uint64_t))v34[4];
    v62(v28, v17, v27);
    uint64_t v35 = *(void **)(v29 - 8);
    uint64_t v61 = (void (*)(char *, char *, uint64_t))v35[4];
    v61(v32, v33, v29);
    uint64_t v36 = (uint64_t)v50;
    unint64_t v37 = &v50[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v58 = (void (*)(char *, char *, uint64_t))v34[2];
    v58(v50, v28, v27);
    unint64_t v38 = (void (*)(char *, char *, uint64_t))v35[2];
    v38(v37, v32, v29);
    uint64_t v39 = sub_188DF5A9C();
    unsigned int v40 = (void (*)(uint64_t, uint64_t))v34[1];
    uint64_t v59 = v39;
    uint64_t v60 = v40;
    v40(v36, v27);
    unsigned int v41 = (void (*)(char *, uint64_t))v35[1];
    v41(v37, v29);
    uint64_t v42 = v36 + *(int *)(v63 + 48);
    v58((char *)v36, v28, v27);
    v38((char *)v42, v32, v29);
    TupleTypeMetadata2 = v63;
    uint64_t v43 = (void *)type metadata accessor for _HashNode(0LL, v27, v29, v30);
    LOBYTE(v37) = _HashNode.insert(_:_:_:)(0, v36, v42, v59, v43);
    v41((char *)v42, v29);
    v60(v36, v27);
    uint64_t v44 = v36 + *(int *)(TupleTypeMetadata2 + 48);
    v62((char *)v36, v28, v27);
    v61((char *)v44, v32, v29);
    uint64_t v45 = v36;
    uint64_t v17 = v49;
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v45, TupleTypeMetadata2);
    if ((v37 & 1) == 0)
    {
      __break(1u);
      break;
    }
  }

  (*(void (**)(char *, uint64_t))(v48 + 8))(v56, v57);
  return v65;
}

uint64_t sub_188D351E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a1;
  uint64_t v7 = sub_188DF7C28();
  uint64_t v8 = (void (*)(char *, char *, uint64_t))MEMORY[0x1895D7620](MEMORY[0x189617920], v7);
  return sub_188D34E1C((void (*)(char *, char *, uint64_t))&v10, a2, a3, v7, a4, v8);
}

uint64_t sub_188D35254(uint64_t a1, uint64_t a2)
{
  return sub_188D34504(a1, a2, *(void (**)(char *))(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 16));
}

uint64_t sub_188D35274( void (*a1)(char *, char *, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(char *, char *, uint64_t))
{
  uint64_t v61 = a6;
  uint64_t v62 = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v64 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v50 = (char *)v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v11);
  uint64_t v51 = (char *)v47 - v13;
  uint64_t v14 = sub_188DF8384();
  uint64_t v15 = MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)v47 - v16;
  uint64_t v18 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](v15);
  uint64_t v20 = (char *)v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v48 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v23 = (char *)v47 - v22;
  uint64_t v52 = a2;
  uint64_t v53 = a3;
  uint64_t v54 = a5;
  uint64_t v24 = TreeDictionary.init()(a2, a3, a5);
  v47[1] = v25;
  uint64_t v65 = v24;
  uint64_t v66 = v26;
  (*(void (**)(char *, void, uint64_t))(v18 + 16))(v20, v62, a4);
  uint64_t v56 = v23;
  sub_188DF7FDC();
  uint64_t v57 = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v49 = v17;
  uint64_t v63 = TupleTypeMetadata2;
  uint64_t v28 = v51;
  uint64_t v27 = v52;
  uint64_t v29 = v53;
  uint64_t v30 = v54;
  while (1)
  {
    sub_188DF84D4();
    uint64_t v31 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v32 = &v28[v31];
    uint64_t v33 = &v17[v31];
    uint64_t v34 = *(void **)(v27 - 8);
    uint64_t v62 = (void (*)(char *, char *, uint64_t))v34[4];
    v62(v28, v17, v27);
    uint64_t v35 = *(void **)(v29 - 8);
    uint64_t v61 = (void (*)(char *, char *, uint64_t))v35[4];
    v61(v32, v33, v29);
    uint64_t v36 = (uint64_t)v50;
    unint64_t v37 = &v50[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v58 = (void (*)(char *, char *, uint64_t))v34[2];
    v58(v50, v28, v27);
    unint64_t v38 = (void (*)(char *, char *, uint64_t))v35[2];
    v38(v37, v32, v29);
    uint64_t v39 = sub_188DF5A9C();
    unsigned int v40 = (void (*)(uint64_t, uint64_t))v34[1];
    uint64_t v59 = v39;
    uint64_t v60 = v40;
    v40(v36, v27);
    unsigned int v41 = (void (*)(char *, uint64_t))v35[1];
    v41(v37, v29);
    uint64_t v42 = v36 + *(int *)(v63 + 48);
    v58((char *)v36, v28, v27);
    v38((char *)v42, v32, v29);
    TupleTypeMetadata2 = v63;
    uint64_t v43 = (void *)type metadata accessor for _HashNode(0LL, v27, v29, v30);
    LOBYTE(v37) = _HashNode.insert(_:_:_:)(0, v36, v42, v59, v43);
    v41((char *)v42, v29);
    v60(v36, v27);
    uint64_t v44 = v36 + *(int *)(TupleTypeMetadata2 + 48);
    v62((char *)v36, v28, v27);
    v61((char *)v44, v32, v29);
    uint64_t v45 = v36;
    uint64_t v17 = v49;
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v45, TupleTypeMetadata2);
    if ((v37 & 1) == 0)
    {
      __break(1u);
      break;
    }
  }

  (*(void (**)(char *, uint64_t))(v48 + 8))(v56, v57);
  return v65;
}

uint64_t sub_188D35638( uint64_t a1, void (*a2)(char *, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v19 = TreeDictionary.init()(a4, a5, a7);
  uint64_t v17 = (void *)type metadata accessor for TreeDictionary(0LL, a4, a5, a7);
  sub_188DF740C(a1, a2, a3, v17, a6, a8);
  uint64_t result = v19;
  if (v8) {
    return swift_release();
  }
  return result;
}

uint64_t sub_188D35708()
{
  return swift_deallocObject();
}

uint64_t sub_188D35718@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_188D34A48(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_188D35728( char **a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7, uint64_t a8, char *a9)
{
  uint64_t v10 = v9;
  uint64_t v51 = a4;
  uint64_t v59 = a2;
  uint64_t v60 = a3;
  uint64_t v70 = a1;
  uint64_t v63 = a9;
  uint64_t v64 = a5;
  uint64_t v57 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v58 = v15;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v49 = (char *)&v49 - v18;
  uint64_t v19 = sub_188DF8384();
  uint64_t v20 = MEMORY[0x1895F8858](v19);
  uint64_t v62 = (char *)&v49 - v21;
  uint64_t v65 = a6;
  uint64_t v22 = *((void *)a6 - 1);
  MEMORY[0x1895F8858](v20);
  uint64_t v24 = (char *)&v49 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v66 = swift_getAssociatedTypeWitness();
  uint64_t v50 = *(void *)(v66 - 8);
  MEMORY[0x1895F8858](v66);
  uint64_t v26 = (char *)&v49 - v25;
  uint64_t v67 = TreeDictionary.init()(v51, v64, a7);
  uint64_t v68 = v27;
  uint64_t v69 = v28;
  uint64_t v29 = *(void (**)(char *, char **, char *))(v22 + 16);
  uint64_t v30 = AssociatedTypeWitness;
  v29(v24, v70, v65);
  sub_188DF7FDC();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v61 = v26;
  uint64_t v32 = AssociatedConformanceWitness;
  uint64_t v33 = v62;
  sub_188DF84D4();
  uint64_t v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  if (v34(v33, 1LL, AssociatedTypeWitness) == 1)
  {
LABEL_5:
    (*(void (**)(char *, uint64_t))(v50 + 8))(v61, v66);
    return v67;
  }

  else
  {
    uint64_t v54 = v32;
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    uint64_t v55 = AssociatedTypeWitness;
    uint64_t v56 = v35;
    uint64_t v52 = MEMORY[0x18961AFC8] + 8LL;
    uint64_t v53 = v34;
    uint64_t v36 = v51;
    unint64_t v37 = v49;
    while (1)
    {
      v56(v37, v33, v30);
      uint64_t v38 = v59(v37);
      if (v10) {
        break;
      }
      uint64_t v70 = &v49;
      uint64_t v39 = MEMORY[0x1895F8858](v38);
      uint64_t v40 = v64;
      unsigned int v41 = v65;
      *(&v49 - 6) = (char *)v36;
      *(&v49 - 5) = (char *)v40;
      *(&v49 - 4) = v41;
      *(&v49 - 3) = (char *)a7;
      uint64_t v42 = v63;
      *(&v49 - 2) = v58;
      *(&v49 - _HashNode.ensureUnique(isUnique:)(v1 & 1) = v42;
      MEMORY[0x1895F8858](v39);
      *(&v49 - 8) = (char *)v36;
      *(&v49 - 7) = (char *)v43;
      *(&v49 - 6) = v44;
      *(&v49 - 5) = (char *)a7;
      *(&v49 - 4) = v45;
      *(&v49 - 3) = v46;
      *(&v49 - 2) = v37;
      uint64_t v47 = (void *)type metadata accessor for TreeDictionary(0LL, v36, v43, a7);
      uint64_t v30 = v55;
      uint64_t v33 = v62;
      TreeDictionary.updateValue<A>(forKey:default:with:)( (uint64_t)v14,  (uint64_t)sub_188D1F2A0,  (uint64_t)(&v49 - 8),  sub_188D1F2C8,  (uint64_t)(&v49 - 10),  v47,  v52);
      uint64_t v10 = 0LL;
      (*(void (**)(char *, uint64_t))(v57 + 8))(v14, v36);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v37, v30);
      sub_188DF84D4();
      if (v53(v33, 1LL, v30) == 1) {
        goto LABEL_5;
      }
    }

    (*(void (**)(char *, uint64_t))(v50 + 8))(v61, v66);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v37, v30);
  }

__n128 BigString.utf16.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 40);
  __n128 v6 = *(__n128 *)(v1 + 16);
  v8[0] = *(_OWORD *)v1;
  __int128 v7 = v8[0];
  v8[1] = v6;
  _OWORD v8[2] = *(_OWORD *)(v1 + 32);
  sub_188D011B8((uint64_t)v8, (uint64_t)v9);
  sub_188D07F48((uint64_t)v9);
  __n128 result = v6;
  *(_OWORD *)a1 = v7;
  *(__n128 *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v4;
  return result;
}

__n128 BigString.init(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

{
  __int128 v2;
  __n128 result;
  __int128 v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

{
  __int128 v2;
  __n128 result;
  __int128 v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

{
  __int128 v2;
  __n128 result;
  __int128 v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

uint64_t static BigString.UTF16View.== infix(_:_:)(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  v6[0] = *a1;
  v6[1] = v2;
  _OWORD v6[2] = a1[2];
  __int128 v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  void v5[2] = a2[2];
  return sub_188D97870(v6, v5) & 1;
}

BOOL BigString.UTF16View.isIdentical(to:)(_OWORD *a1)
{
  uint64_t v2 = (uint64_t)v1;
  __int128 v4 = v1[1];
  _OWORD v8[3] = *v1;
  _OWORD v8[4] = v4;
  v8[5] = v1[2];
  __int128 v5 = a1[1];
  v8[0] = *a1;
  v8[1] = v5;
  _OWORD v8[2] = a1[2];
  sub_188D07F48((uint64_t)v1);
  sub_188D07F48((uint64_t)a1);
  BOOL v6 = sub_188CFE978((uint64_t)v8);
  sub_188D087F8((uint64_t)a1);
  sub_188D087F8(v2);
  return v6;
}

uint64_t sub_188D35C84(_OWORD *a1, __int128 *a2)
{
  __int128 v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  __int128 v3 = *a2;
  __int128 v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  __int128 v5 = a2[2];
  v8[1] = v4;
  _OWORD v8[2] = v5;
  return sub_188D97870(v7, v8) & 1;
}

uint64_t BigString.UTF16View.hash(into:)()
{
  return sub_188D9EA00();
}

uint64_t BigString.UTF16View.hashValue.getter()
{
  return sub_188DF8A98();
}

uint64_t sub_188D35D50()
{
  return sub_188DF8A98();
}

uint64_t sub_188D35DA0()
{
  return sub_188D9EA00();
}

uint64_t sub_188D35DD8()
{
  return sub_188DF8A98();
}

void BigString.UTF16View.makeIterator()(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v7 = v1[5];
  if (!*v1) {
    goto LABEL_8;
  }
  if ((v8 & 0x8000000000000000LL) == 0)
  {
    if (*(_WORD *)(v3 + 16)) {
      BOOL v9 = v8 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      uint64_t v27 = v1[3];
      uint64_t v13 = *(unsigned __int8 *)(v3 + 18);
      if (*(_BYTE *)(v3 + 18))
      {
        swift_unknownObjectRetain_n();
        uint64_t v11 = 0LL;
        uint64_t v14 = v3;
        do
        {
          uint64_t v15 = *(unsigned __int16 *)(v14 + 16);
          if (*(_WORD *)(v14 + 16))
          {
            uint64_t v17 = 0LL;
            uint64_t v18 = (uint64_t *)(v14 + 56);
            while (1)
            {
              uint64_t v19 = *v18;
              v18 += 5;
              uint64_t v20 = v11 - v19;
              if (__OFSUB__(v11, v19)) {
                break;
              }
              if (__OFADD__(v20, 1LL)) {
                goto LABEL_39;
              }
              if (v20 + 1 < 1)
              {
                uint64_t v15 = v17;
                goto LABEL_12;
              }

              ++v17;
              uint64_t v11 = v20;
              if (v15 == v17) {
                goto LABEL_21;
              }
            }

            __break(1u);
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v20 = v11;
LABEL_21:
          if (v20) {
            goto LABEL_40;
          }
          uint64_t v11 = 0LL;
LABEL_12:
          char v16 = (4 * *(_BYTE *)(v14 + 18) + 8) & 0x3C;
          uint64_t v13 = ((-15LL << v16) - 1) & v13 | (v15 << v16);
          uint64_t v12 = *(void *)(v14 + 24 + 40 * v15);
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          uint64_t v14 = v12;
        }

        while (*(_BYTE *)(v12 + 18));
        unint64_t v21 = v13 & 0xFFFFFFFFFFFFF0FFLL;
        uint64_t v22 = *(unsigned __int16 *)(v12 + 16);
        if (!*(_WORD *)(v12 + 16)) {
          goto LABEL_31;
        }
        goto LABEL_24;
      }

      swift_unknownObjectRetain_n();
      unint64_t v21 = 0LL;
      uint64_t v11 = 0LL;
      uint64_t v12 = v3;
      uint64_t v22 = *(unsigned __int16 *)(v3 + 16);
      if (*(_WORD *)(v3 + 16))
      {
LABEL_24:
        uint64_t v23 = 0LL;
        uint64_t v24 = (unsigned __int8 *)(v12 + 40);
        while (1)
        {
          unsigned int v25 = *v24;
          v24 += 24;
          uint64_t v26 = v11 - v25;
          if (__OFSUB__(v11, v25)) {
            break;
          }
          if (__OFADD__(v26, 1LL)) {
            goto LABEL_42;
          }
          if (v26 + 1 < 1)
          {
            uint64_t v22 = v23;
            goto LABEL_35;
          }

          ++v23;
          uint64_t v11 = v26;
          if (v22 == v23) {
            goto LABEL_32;
          }
        }

LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }

  LODWORD(v20) = __clz(v19 ^ 0xFF) - 24;
  if ((_DWORD)v20 == 4)
  {
    if ((v4 & 0xC000) == 0)
    {
      unint64_t v21 = 16388;
      goto LABEL_59;
    }

    uint64_t v20 = 4LL;
  }

  else
  {
    uint64_t v20 = v20;
  }

  __break(1u);
  return result;
}

          uint64_t v24 = sub_188D37044(v3, v4, v0);
          if (v6 > v24 >> 16) {
            goto LABEL_38;
          }
          goto LABEL_42;
        }
      }

      else
      {
        uint64_t v15 = *(_OWORD *)(v0 + 8);
        char v16 = *(void *)(v0 + 24);
        uint64_t v30 = *(void *)v0;
        uint64_t v31 = v15;
        uint64_t v32 = v16;
        uint64_t v33 = v8;
        swift_unknownObjectRetain();
        sub_188D36E50(v2, (uint64_t)&v27);
        swift_unknownObjectRelease();
        uint64_t v0 = *((void *)&v27 + 1);
        uint64_t v4 = v27;
        unsigned int v25 = v28;
        uint64_t v14 = v3;
        if ((*((void *)&v27 + 1) & 0x1000000000000000LL) == 0) {
          goto LABEL_16;
        }
      }

      uint64_t v14 = v3;
      if ((v4 & 0x800000000000000LL) != 0) {
        goto LABEL_16;
      }
    }

    else
    {
      __break(1u);
    }

    uint64_t v14 = sub_188D37044(v3, v4, v0);
    goto LABEL_16;
  }

  LOBYTE(TreeSet.makeIterator()(*v1, v7) = 0;
LABEL_32:
  LOWORD(v24) = v7 | (unsigned __int16)(v10 << 8);
  return (Swift::UInt8_optional)v24;
}

      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }

      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }

        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }

      __break(1u);
      goto LABEL_42;
    }

        __break(1u);
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }

LABEL_8:
    sub_188D07F48((uint64_t)v1);
    unint64_t v10 = sub_188D36DF0();
    LOBYTE(sub_188D08238((uint64_t)v10, v11) = 0;
    uint64_t v12 = 0LL;
    goto LABEL_37;
  }

    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v48, v5);
    Rope.summary.getter(v5, v34, (uint64_t)v13);
    v45(v13, AssociatedTypeWitness, v46);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v13, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    ++v31;
    if (v33 == MEMORY[0x1895D69B4](v29, v5)) {
      return swift_bridgeObjectRelease();
    }
  }

  __break(1u);
  return result;
}

  uint64_t v55 = v157;
  if (v49 >= MEMORY[0x1895D699C](*(void *)v157, v45))
  {
    uint64_t v76 = v154;
    uint64_t v78 = v147;
    uint64_t v77 = v148;
    uint64_t v79 = v143;
    (*(void (**)(char *, char *, uint64_t))(v147 + 16))(v143, &v55[*(int *)(v154 + 36)], v148);
    uint64_t v80 = v150;
    uint64_t v81 = v151;
    uint64_t v82 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v151 + 48))(v79, 1LL, v150);
    uint64_t v83 = v159;
    if (v82 == 1)
    {
      (*(void (**)(char *, uint64_t))(v78 + 8))(v79, v77);
      uint64_t v84 = v145;
      uint64_t v85 = v146;
      uint64_t v86 = v144;
      uint64_t v87 = v149;
      uint64_t v88 = v160;
    }

    else
    {
      uint64_t v89 = v136;
      (*(void (**)(char *, char *, uint64_t))(v81 + 32))(v136, v79, v80);
      uint64_t v88 = v160;
      uint64_t v90 = v83;
      unint64_t v91 = v158;
      uint64_t v92 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v160 + 24))(&v89[*(int *)(v80 + 36)], v90, v160);
      unint64_t v93 = v81;
      uint64_t v87 = v149;
      if (a1 < v92)
      {
        uint64_t v94 = a1;
        unsigned int v95 = v80;
        uint64_t v96 = v153;
        if ((Rope._Node.forEachWhile<A>(from:in:_:)(v94, v91, v153, v152, v95, v90, v88) & 1) == 0)
        {
          (*(void (**)(char *, uint64_t))(v151 + 8))(v89, v95);
          return 0LL;
        }

        unint64_t v97 = &v55[*(int *)(v76 + 40)];
        __int16 v98 = v129;
        unint64_t v99 = v144;
        (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v129, v97, v144);
        unint64_t v100 = v145;
        unint64_t v101 = v146;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v145 + 48))(v98, 1LL, v146) == 1)
        {
          (*(void (**)(char *, uint64_t))(v151 + 8))(v89, v150);
          (*(void (**)(char *, uint64_t))(v87 + 8))(v98, v99);
        }

        else
        {
          uint64_t v124 = v128;
          (*(void (**)(char *, char *, uint64_t))(v100 + 32))(v128, v98, v101);
          unint64_t v125 = v100;
          unint64_t v126 = v138;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v137 + 56))(v138, 1LL, 1LL, v140);
          unint64_t v127 = v96(v124, v126);
          (*(void (**)(char *, uint64_t))(v139 + 8))(v126, v141);
          (*(void (**)(char *, uint64_t))(v125 + 8))(v124, v101);
          (*(void (**)(char *, uint64_t))(v151 + 8))(v89, v150);
          if ((v127 & 1) == 0) {
            return 0LL;
          }
        }

        return 1LL;
      }

      unint64_t v102 = v92;
      __n128 result = (*(uint64_t (**)(char *, uint64_t))(v93 + 8))(v89, v80);
      unint64_t v103 = __OFSUB__(a1, v102);
      a1 -= v102;
      if (v103)
      {
LABEL_39:
        __break(1u);
        return result;
      }

      uint64_t v85 = v146;
      uint64_t v83 = v90;
      uint64_t v86 = v144;
      uint64_t v84 = v145;
    }

    char v104 = &v55[*(int *)(v76 + 40)];
    unsigned int v105 = v142;
    (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v142, v104, v86);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48))(v105, 1LL, v85) == 1)
    {
      (*(void (**)(char *, uint64_t))(v87 + 8))(v105, v86);
    }

    else
    {
      unint64_t v106 = v134;
      (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v134, v105, v85);
      uint64_t v107 = v83;
      uint64_t v108 = v135;
      (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v88 + 32))(a1, v106, v107, v88);
      uint64_t v109 = v137;
      uint64_t v110 = v84;
      uint64_t v111 = v138;
      uint64_t v112 = v140;
      (*(void (**)(char *, char *, uint64_t))(v137 + 16))(v138, v108, v140);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v109 + 56))(v111, 0LL, 1LL, v112);
      unint64_t v113 = v153(v106, v111);
      (*(void (**)(char *, uint64_t))(v139 + 8))(v111, v141);
      (*(void (**)(char *, uint64_t))(v109 + 8))(v108, v112);
      (*(void (**)(char *, uint64_t))(v110 + 8))(v106, v85);
      __n128 result = 0LL;
      if ((v113 & 1) == 0) {
        return result;
      }
    }

    return 1LL;
  }

  sub_188DF8144();
  uint64_t v56 = a1;
  uint64_t v58 = v152;
  uint64_t v57 = v153;
  uint64_t v59 = Rope.forEachWhile<A>(from:in:_:)(v56, v158, v153, v152, v45, v159, v160);
  uint64_t v60 = *(void (**)(char *, uint64_t))(v156 + 8);
  v60(v47, v45);
  if ((v59 & 1) != 0)
  {
    uint64_t v61 = v49 + 1;
    uint64_t v62 = v157;
    if (v61 < MEMORY[0x1895D699C](*(void *)v157, v45))
    {
      do
      {
        uint64_t v63 = sub_188DF8144();
        MEMORY[0x1895F8858](v63);
        uint64_t v64 = v159;
        *(&v128 - 6) = v155;
        *(&v128 - 5) = (char *)v64;
        *(&v128 - 4) = (char *)v160;
        *(&v128 - 3) = (char *)v57;
        *(&v128 - 2) = (char *)v58;
        uint64_t v66 = Rope.forEachWhile(_:)((uint64_t (*)(char *))sub_188D460EC, (uint64_t)(&v128 - 8), v45, v65);
        v60(v47, v45);
        if ((v66 & 1) == 0) {
          return 0LL;
        }
      }

      while (++v61 < MEMORY[0x1895D699C](*(void *)v62, v45));
    }

    uint64_t v68 = v147;
    uint64_t v67 = v148;
    uint64_t v69 = v133;
    (*(void (**)(char *, char *, uint64_t))(v147 + 16))(v133, &v62[*(int *)(v154 + 36)], v148);
    uint64_t v70 = v150;
    uint64_t v71 = v151;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v151 + 48))(v69, 1LL, v150) == 1)
    {
      (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v67);
      uint64_t v73 = v145;
      unint64_t v72 = v146;
      unint64_t v74 = v144;
      unint64_t v75 = v149;
    }

    else
    {
      unint64_t v114 = v131;
      uint64_t v115 = (*(uint64_t (**)(char *, char *, uint64_t))(v71 + 32))(v131, v69, v70);
      MEMORY[0x1895F8858](v115);
      uint64_t v116 = v159;
      *(&v128 - 6) = v155;
      *(&v128 - 5) = (char *)v116;
      *(&v128 - 4) = (char *)v160;
      *(&v128 - 3) = (char *)v57;
      *(&v128 - 2) = (char *)v58;
      uint64_t v117 = Rope._Node.forEachWhile(_:)((uint64_t (*)(char *))sub_188D460EC, (uint64_t)(&v128 - 8), v70);
      uint64_t v118 = v70;
      uint64_t v119 = v117;
      (*(void (**)(char *, uint64_t))(v71 + 8))(v114, v118);
      uint64_t v73 = v145;
      unint64_t v72 = v146;
      unint64_t v74 = v144;
      unint64_t v75 = v149;
      if ((v119 & 1) == 0) {
        return 0LL;
      }
    }

    uint64_t v120 = v132;
    (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v132, &v62[*(int *)(v154 + 40)], v74);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v120, 1LL, v72) == 1)
    {
      (*(void (**)(char *, uint64_t))(v75 + 8))(v120, v74);
      return 1LL;
    }

    uint64_t v121 = v130;
    (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v130, v120, v72);
    unint64_t v122 = v138;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v137 + 56))(v138, 1LL, 1LL, v140);
    uint64_t v123 = v57(v121, v122);
    (*(void (**)(char *, uint64_t))(v139 + 8))(v122, v141);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v121, v72);
    if ((v123 & 1) != 0) {
      return 1LL;
    }
  }

  return 0LL;
}

  uint64_t v6 = ~(-1LL << v3);
  uint64_t v7 = (void *)(v8 + 8 * v5);
LABEL_10:
  *v7 |= v6;
  return result;
}

      uint64_t v11 = v8 >= v9;
    }

    else
    {
      unint64_t v10 = 0;
      if ((a8 & 1) != 0) {
        return 0LL;
      }
LABEL_24:
      uint64_t v11 = ((a1 >> v10) & 0x1F) >= a6;
    }

    uint64_t v14 = !v11;
    return v14 & 1;
  }

  else
  {
    if (a7)
    {
      if ((a4 & 1) != 0) {
        return 1LL;
      }
      unint64_t v10 = 0;
      return ((a5 >> v10) & 0x1F) > a2;
    }

    sub_188D07F48((uint64_t)v1);
    unint64_t v10 = sub_188D36DF0();
    LOBYTE(sub_188D08238((uint64_t)v10, v11) = 0;
    uint64_t v12 = 0LL;
    goto LABEL_37;
  }

    uint64_t v12 = sub_188DF7E08();
LABEL_9:
    sub_188DF8B34();
    if (v4 == v12 >> 14) {
      return swift_bridgeObjectRelease();
    }
  }

  if (v11 > v12 >> 16)
  {
LABEL_24:
    if ((a4 & 0x1000000000000000LL) == 0) {
      goto LABEL_25;
    }
    goto LABEL_8;
  }

  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

    uint64_t v11 = sub_188DF7E08();
LABEL_9:
    if (v4 <= v11 >> 14) {
      return 0LL;
    }
  }

  if ((a4 & 0x2000000000000000LL) != 0)
  {
    uint64_t v36 = a3;
    unint64_t v37 = v33;
  }

  else if ((a3 & 0x1000000000000000LL) == 0)
  {
    sub_188DF8684();
  }

  sub_188DF8690();
  uint64_t v7 = a1;
  __n128 result = sub_188DF8B34();
  if ((result & 1) == 0) {
    goto LABEL_18;
  }
LABEL_38:
  uint64_t v38 = v11;
  __n128 result = sub_188DF842C();
  uint64_t v18 = v38;
  if (v4 <= v38 >> 14) {
    return 1LL;
  }
  uint64_t v29 = 1LL;
  uint64_t v19 = v30;
LABEL_40:
  uint64_t v20 = v18;
  do
  {
    while (1)
    {
      unint64_t v21 = v20 & 0xC;
      uint64_t v22 = (v20 & 1) == 0 || v21 == v9;
      uint64_t v23 = v22;
      if (v22)
      {
        __n128 result = v20;
        if (v21 == v9) {
          __n128 result = sub_188D37044(v20, a3, a4);
        }
        if (result >> 14 < v19 || result >> 14 >= v4) {
          goto LABEL_89;
        }
        if ((result & 1) == 0) {
          sub_188D36F34(result, a3, a4);
        }
      }

      else
      {
        if (v20 >> 14 < v19) {
          goto LABEL_90;
        }
        __n128 result = v20;
        if (v20 >> 14 >= v4) {
          goto LABEL_90;
        }
      }

      if ((a4 & 0x1000000000000000LL) != 0)
      {
        sub_188DF85F4();
        __n128 result = sub_188DF8B34();
        if ((result & 1) != 0) {
          goto LABEL_83;
        }
      }

      else
      {
        if ((a4 & 0x2000000000000000LL) != 0)
        {
          uint64_t v36 = a3;
          unint64_t v37 = v33;
        }

        else if ((a3 & 0x1000000000000000LL) == 0)
        {
          sub_188DF8684();
        }

        sub_188DF8690();
        uint64_t v19 = v30;
        __n128 result = sub_188DF8B34();
        if ((result & 1) != 0)
        {
LABEL_83:
          uint64_t v38 = v20;
          __n128 result = sub_188DF842C();
          if (__OFADD__(v29++, 1LL)) {
            goto LABEL_93;
          }
          uint64_t v18 = v38;
          if (v4 <= v38 >> 14) {
            return v29;
          }
          goto LABEL_40;
        }
      }

      if (v23)
      {
        if (v21 == v9)
        {
          __n128 result = sub_188D37044(v20, a3, a4);
          uint64_t v20 = result;
        }

        if (v35 <= v20 >> 16) {
          goto LABEL_91;
        }
        if ((v20 & 1) == 0)
        {
          __n128 result = sub_188D36F34(v20, a3, a4);
          uint64_t v20 = v20 & 0xC | result & 0xFFFFFFFFFFFFFFF3LL | 1;
        }
      }

      else if (v35 <= v20 >> 16)
      {
        goto LABEL_92;
      }

      if ((a4 & 0x1000000000000000LL) == 0) {
        break;
      }
      __n128 result = sub_188DF7E08();
      uint64_t v20 = result;
      if (v4 <= result >> 14) {
        return v29;
      }
    }

    uint64_t v24 = v20 >> 16;
    if ((a4 & 0x2000000000000000LL) != 0)
    {
      uint64_t v36 = a3;
      unint64_t v37 = v33;
      unsigned int v25 = *((unsigned __int8 *)&v36 + v24);
    }

    else
    {
      __n128 result = v32;
      if ((a3 & 0x1000000000000000LL) == 0) {
        __n128 result = sub_188DF8684();
      }
      unsigned int v25 = *(unsigned __int8 *)(result + v24);
    }

    uint64_t v26 = (char)v25;
    uint64_t v27 = __clz(v25 ^ 0xFF) - 24;
    if (v26 >= 0) {
      LOBYTE(v27) = 1;
    }
    uint64_t v20 = ((v24 + v27) << 16) | 5;
  }

  while (v4 > v20 >> 14);
  return v29;
}

  uint64_t v7 = (v5 & (*result >> 63)) + *result;
  if (v7 < v5) {
    uint64_t v5 = 0LL;
  }
  v2[1] = v2[1] & 0x3FLL | ((v7 - v5) << 6);
  return result;
}

  *(_OWORD *)&v149[7] = v27;
  *(_OWORD *)&v149[9] = v28;
  v149[11] = v30;
  swift_unknownObjectRetain();
  uint64_t v32 = sub_188DF1050((uint64_t)v142);
  sub_188D087F8((uint64_t)v150);
  __n128 result = sub_188D087F8((uint64_t)v150);
  if ((v32 & 1) == 0)
  {
    __break(1u);
LABEL_184:
    __break(1u);
    goto LABEL_185;
  }

  if (*(void *)v142 != v29) {
    goto LABEL_184;
  }
  if (!(void)v27) {
    goto LABEL_195;
  }
  uint64_t v33 = v130;
  sub_188DF12BC(*(unint64_t *)&v142[8], (uint64_t)v142);
  uint64_t v30 = v136;
  uint64_t v34 = sub_188D2BEF4((unint64_t)v136);
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  sub_188DF153C((uint64_t)v149, (uint64_t)v142, v39);
  __n128 result = swift_bridgeObjectRelease();
  *((void *)v33 + 5) = v29 + 1;
  if (v36)
  {
    if ((v38 & 0xFCu) >= 0x7CuLL)
    {
      sub_188DEF688(v34, v36, v38 & 0xFFFFFFFFFFFFLL);
      uint64_t v40 = v136;
      return sub_188DB2AC0((uint64_t)v40);
    }

uint64_t BigString.UTF16View.startIndex.getter()
{
  return 768LL;
}

__n128 sub_188D36064@<Q0>(uint64_t a1@<X8>)
{
  __int128 v3 = v1[1];
  v7[0] = *v1;
  v7[1] = v3;
  v7[2] = v1[2];
  BigString.UTF16View.makeIterator()(v6);
  sub_188D087F8((uint64_t)v7);
  __int128 v4 = v6[3];
  *(_OWORD *)(a1 + 32) = v6[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v6[4];
  __n128 result = (__n128)v6[1];
  *(_OWORD *)a1 = v6[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_188D360C4()
{
  if (*v0) {
    return v0[3];
  }
  else {
    return 0LL;
  }
}

uint64_t sub_188D360D8()
{
  __int128 v1 = v0[1];
  v4[0] = *v0;
  v4[1] = v1;
  v4[2] = v0[2];
  uint64_t v2 = sub_188DD57A8(v4);
  sub_188D087F8((uint64_t)v4);
  return v2;
}

uint64_t sub_188D36120(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_188DC5A78(a1, a2, a3);
}

Swift::UInt16_optional __swiftcall BigString.UTF16View.Iterator.next()()
{
  uint64_t v5 = *(void *)(v1 + 32);
  if (*(void *)v1) {
    BOOL v6 = 2 * (v5 & 0x1FFFFFFFFFFFFFuLL) > *(void *)(v1 + 48) >> 10;
  }
  else {
    BOOL v6 = 0;
  }
  uint64_t v7 = !v6;
  if (!v6)
  {
    LOWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8) = 0;
    return (Swift::UInt16_optional)((unsigned __int16)v8 | ((_DWORD)v7 << 16));
  }

  unint64_t v9 = v1;
  uint64_t v10 = *(void *)(v1 + 72);
  if (v10 == 1)
  {
    __break(1u);
    return (Swift::UInt16_optional)v0;
  }

  if (*(void *)(v1 + 56) != *(void *)(v1 + 40))
  {
    __break(1u);
LABEL_47:
    unint64_t v8 = sub_188D37044(v4, v7, v1);
    goto LABEL_15;
  }

  uint64_t v32 = *(void *)(v1 + 56);
  int v31 = v7;
  unint64_t v3 = *(void *)(v1 + 64);
  unint64_t v4 = (16 * *(void *)(v1 + 48)) & 0x4000LL | ((unint64_t)*(void *)(v1 + 48) << 16) | (*(void *)(v1 + 48) >> 8) & 3LL | 4;
  if (v10)
  {
    unint64_t v11 = v10 + 24 * ((v3 >> ((4 * *(_BYTE *)(v10 + 18) + 8) & 0x3C)) & 0xF);
    uint64_t v7 = *(void *)(v11 + 24);
    unint64_t v1 = *(void *)(v11 + 32);
    unsigned int v30 = *(unsigned __int8 *)(v11 + 40);
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v12 = *(_OWORD *)(v1 + 8);
    uint64_t v13 = *(void *)(v1 + 24);
    uint64_t v36 = *(void *)v1;
    __int128 v37 = v12;
    uint64_t v38 = v13;
    uint64_t v39 = v5;
    swift_unknownObjectRetain();
    sub_188D36E50(v3, (uint64_t)&v33);
    swift_unknownObjectRelease();
    unint64_t v1 = *((void *)&v33 + 1);
    uint64_t v7 = v33;
    unsigned int v30 = v34;
  }

  LODWORD(v2) = (v1 >> 60) & ((v7 & 0x800000000000000LL) == 0);
  unint64_t v8 = v4;
  if ((_DWORD)v2 == 1) {
    goto LABEL_47;
  }
LABEL_15:
  if ((v1 & 0x2000000000000000LL) != 0) {
    unint64_t v14 = HIBYTE(v1) & 0xF;
  }
  else {
    unint64_t v14 = v7 & 0xFFFFFFFFFFFFLL;
  }
  if (v8 >> 16 >= v14)
  {
    __break(1u);
LABEL_49:
    unint64_t v8 = sub_188DF7F58();
    if ((v2 & 1) != 0) {
      goto LABEL_50;
    }
    goto LABEL_30;
  }

  if ((v1 & 0x1000000000000000LL) != 0) {
    goto LABEL_49;
  }
  if ((v8 & 1) == 0) {
    goto LABEL_52;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_188DF85DC();
    swift_bridgeObjectRelease();
    if ((v8 & 0xC000) != 0x4000)
    {
      if (WORD1(v15))
      {
        unint64_t v8 = (unsigned __int16)((v15 + 67043328) >> 10) + 55296;
        if ((v8 & 0x10000) == 0) {
          goto LABEL_29;
        }
        __break(1u);
      }

      unint64_t v8 = v15;
LABEL_29:
      if ((v2 & 1) == 0) {
        goto LABEL_30;
      }
LABEL_50:
      unint64_t v4 = sub_188D37044(v4, v7, v1);
      goto LABEL_30;
    }

    if (v15 < 0x10000)
    {
      __break(1u);
      goto LABEL_55;
    }

    unint64_t v8 = v15 & 0x3FF | 0xFFFFDC00;
    if ((v2 & 1) != 0) {
      goto LABEL_50;
    }
LABEL_30:
    unint64_t v2 = v4 >> 16;
    if (v4 >> 16 < v14) {
      break;
    }
    __break(1u);
LABEL_52:
    sub_188D36F34(v8, v7, v1);
  }

  if ((v1 & 0x1000000000000000LL) != 0)
  {
    unint64_t v17 = MEMORY[0x1895D67EC](v4, v7, v1);
    swift_bridgeObjectRelease();
    LODWORD(TreeSet.makeIterator()(*v1, v7) = v31;
    goto LABEL_60;
  }

  uint64_t v16 = (v1 >> 62) & 1;
  if ((v1 & 0x2000000000000000LL) == 0) {
    LOBYTE(v16) = v7 < 0;
  }
  if ((v16 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    unint64_t v17 = (v4 & 0xFFFFFFFFFFFF0000LL) + 65549;
    LODWORD(TreeSet.makeIterator()(*v1, v7) = v31;
    goto LABEL_60;
  }

  if ((v4 & 0xC001) != 0)
  {
    if ((v1 & 0x2000000000000000LL) == 0) {
      goto LABEL_38;
    }
LABEL_56:
    *(void *)&__int128 v33 = v7;
    *((void *)&v33 + _HashNode.ensureUnique(isUnique:)(v1 & 1) = v1 & 0xFFFFFFFFFFFFFFLL;
    int v19 = *((unsigned __int8 *)&v33 + v2);
    swift_bridgeObjectRelease();
    LODWORD(TreeSet.makeIterator()(*v1, v7) = v31;
    if ((v19 & 0x80) == 0) {
      goto LABEL_57;
    }
    goto LABEL_41;
  }

uint64_t sub_188D36584(uint64_t result, unint64_t a2, uint64_t a3)
{
  v15[0] = result;
  v15[1] = a2;
  v15[2] = a3;
  if (v3[5] != result)
  {
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v4 = (uint64_t)v3;
  uint64_t v7 = result;
  uint64_t v8 = *v3;
  uint64_t v9 = v3[1];
  uint64_t v10 = v3[2];
  uint64_t v11 = v3[3];
  uint64_t v12 = v3[4];
  swift_unknownObjectRetain();
  unint64_t v13 = sub_188D36DF0();
  __n128 result = sub_188D087F8(v4);
  if (v13 <= a2)
  {
LABEL_10:
    __break(1u);
    return result;
  }

  if (!a3 || ((a2 >> ((4 * *(_BYTE *)(a3 + 18) + 8) & 0x3C)) & 0xF) + 1 >= *(unsigned __int16 *)(a3 + 16))
  {
    uint64_t v15[3] = v8;
    v15[4] = v9;
    v15[5] = v10;
    v15[6] = v11;
    v15[7] = v12;
    swift_unknownObjectRetain();
    char v14 = sub_188D7F780((uint64_t)v15);
    sub_188D087F8(v4);
    if ((v14 & 1) != 0) {
      return v15[0];
    }
    else {
      sub_188D36DF0();
    }
  }

  return v7;
}

uint64_t sub_188D366B8@<X0>(uint64_t a1@<X8>)
{
  *(Swift::UInt16_optional *)&uint64_t result = BigString.UTF16View.Iterator.next()();
  *(_WORD *)a1 = result;
  *(_BYTE *)(a1 + 2) = BYTE2(result) & 1;
  return result;
}

uint64_t BigString.UTF16View.endIndex.getter()
{
  if (*v0) {
    return (v0[4] << 11) | 0x300LL;
  }
  else {
    return 768LL;
  }
}

uint64_t BigString.UTF16View.count.getter()
{
  if (*v0) {
    return v0[3];
  }
  else {
    return 0LL;
  }
}

unint64_t BigString.UTF16View.index(after:)( unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_188D36730(a1, a2, a3, a4, 1uLL);
}

unint64_t BigString.UTF16View.index(before:)( unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_188D36730(a1, a2, a3, a4, 0xFFFFFFFFFFFFFFFFLL);
}

unint64_t sub_188D36730( unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  return sub_188D05DA8(a1, a2, a3, a4, a5);
}

unint64_t BigString.UTF16View.index(_:offsetBy:)( unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  return sub_188D05DA8(a1, a2, a3, a4, a5);
}

unint64_t BigString.UTF16View.index(_:offsetBy:limitedBy:)( unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  if (a5 < 0)
  {
    return 0LL;
  }

  return sub_188D05DA8(a1, a2, a3, a4, a5);
}

unint64_t BigString.UTF16View.distance(from:to:)( unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  return sub_188D03720(a1, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t BigString.UTF16View.subscript.getter( unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_188DCF86C(a1, a2, a3, a4);
}

unint64_t BigString.UTF16View.subscript.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = (void *)result;
  __int128 v27 = *((_OWORD *)v2 + 1);
  uint64_t v5 = *v2;
  uint64_t v6 = v2[4];
  unint64_t v7 = *(void *)result;
  uint64_t v8 = *(void *)(result + 8);
  unint64_t v9 = *(void *)(result + 16);
  uint64_t v10 = *(void *)(result + 24);
  __int128 v25 = *(_OWORD *)v2;
  __int128 v26 = *((_OWORD *)v2 + 2);
  if ((*(void *)result & 0x400) != 0)
  {
    if (!*v2 || 2 * (v6 & 0x1FFFFFFFFFFFFFuLL) <= v7 >> 10)
    {
      __break(1u);
      goto LABEL_13;
    }

    swift_unknownObjectRetain();
    unint64_t v11 = sub_188D097FC(v7, v8, v9, v10, 0);
  }

  else
  {
    swift_unknownObjectRetain();
    unint64_t v11 = sub_188DCF614(v7, v8, v9, v10);
  }

  unint64_t v15 = v11;
  uint64_t v16 = v12;
  uint64_t v17 = v13;
  uint64_t v18 = v14;
  uint64_t result = v3[4];
  uint64_t v19 = v3[5];
  unint64_t v20 = v3[6];
  uint64_t v21 = v3[7];
  if ((result & 0x400) == 0)
  {
    uint64_t result = sub_188DCF614(result, v19, v20, v21);
LABEL_11:
    *(_OWORD *)a2 = v25;
    *(_OWORD *)(a2 + 16) = v27;
    *(_OWORD *)(a2 + 32) = v26;
    *(void *)(a2 + 48) = v15;
    *(void *)(a2 + 56) = v16;
    *(void *)(a2 + 64) = v17;
    *(void *)(a2 + 72) = v18;
    *(void *)(a2 + 80) = result;
    *(void *)(a2 + 88) = v22;
    *(void *)(a2 + 96) = v23;
    *(void *)(a2 + 104) = v24;
    return result;
  }

  if (v5 && 2 * (v6 & 0x1FFFFFFFFFFFFFuLL) > result >> 10)
  {
    uint64_t result = sub_188D097FC(result, v19, v20, v21, 0);
    goto LABEL_11;
  }

unint64_t sub_188D36A60@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  return sub_188D36C4C(a1, 0xFFFFFFFFFFFFFFFFLL, a2);
}

unint64_t sub_188D36A68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_188D36CA8(a1, a2, a3, 0xFFFFFFFFFFFFFFFFLL);
}

void (*sub_188D36A7C(void *a1, unint64_t *a2))(void **a1)
{
  uint64_t v5 = malloc(0x32uLL);
  *a1 = v5;
  unint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  unint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  __int128 v10 = v2[1];
  *uint64_t v5 = *v2;
  v5[1] = v10;
  void v5[2] = v2[2];
  *((_WORD *)v5 + 24) = sub_188DCF86C(v6, v7, v8, v9);
  return sub_188D36AE4;
}

void sub_188D36AE4(void **a1)
{
}

__n128 sub_188D36AEC@<Q0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3 = v6[5];
  *(_OWORD *)(a2 + 64) = v6[4];
  *(_OWORD *)(a2 + 80) = v3;
  *(_OWORD *)(a2 + 96) = v6[6];
  __int128 v4 = v6[1];
  *(_OWORD *)a2 = v6[0];
  *(_OWORD *)(a2 + 16) = v4;
  __n128 result = (__n128)v6[3];
  *(_OWORD *)(a2 + 32) = v6[2];
  *(__n128 *)(a2 + 48) = result;
  return result;
}

BOOL sub_188D36B38()
{
  return (v0[4] & 0x1FFFFFFFFFFFFFLL) == 0 || *v0 == 0LL;
}

unint64_t sub_188D36B50@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result = sub_188D05DA8(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
  *a3 = result;
  a3[1] = v5;
  a3[2] = v6;
  a3[3] = v7;
  return result;
}

unint64_t sub_188D36BA4@<X0>( uint64_t a1@<X0>, int64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t result = BigString.UTF16View.index(_:offsetBy:limitedBy:)( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  a2,  *(void *)a3,  *(void *)(a3 + 8),  *(void *)(a3 + 16),  *(void *)(a3 + 24));
  *a4 = result;
  a4[1] = v6;
  a4[2] = v7;
  a4[3] = v8;
  return result;
}

unint64_t sub_188D36BF4(uint64_t a1, uint64_t a2)
{
  return sub_188D03720( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)a2,  *(void *)(a2 + 8),  *(void *)(a2 + 16),  *(void *)(a2 + 24));
}

unint64_t sub_188D36C44@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  return sub_188D36C4C(a1, 1uLL, a2);
}

unint64_t sub_188D36C4C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X3>, unint64_t *a3@<X8>)
{
  unint64_t result = sub_188D05DA8(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
  *a3 = result;
  a3[1] = v5;
  a3[2] = v6;
  a3[3] = v7;
  return result;
}

unint64_t sub_188D36CA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_188D36CA8(a1, a2, a3, 1uLL);
}

unint64_t sub_188D36CA8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t result = sub_188D05DA8(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a4);
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  return result;
}

unint64_t BigString.UTF16View.index(roundingDown:)( unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if ((result & 0x400) == 0) {
    return sub_188DCF614(result, a2, a3, a4);
  }
  if (*v4) {
    BOOL v5 = 2 * (v4[4] & 0x1FFFFFFFFFFFFFuLL) > result >> 10;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5) {
    return sub_188D097FC(result, a2, a3, a4, 0);
  }
  __break(1u);
  return result;
}

unint64_t BigString.UTF16View.index(roundingUp:)( unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5 = result >> 10;
  if ((result & 0x400) == 0)
  {
    unint64_t result = sub_188DCF614(result, a2, a3, a4);
    if (v5 == result >> 10) {
      return result;
    }
    return sub_188D05DA8(result, v6, v7, v8, 1uLL);
  }

  if (*v4) {
    BOOL v9 = 2 * (v4[4] & 0x1FFFFFFFFFFFFFuLL) > v5;
  }
  else {
    BOOL v9 = 0;
  }
  if (!v9)
  {
    __break(1u);
    return result;
  }

  unint64_t result = sub_188D097FC(result, a2, a3, a4, 0);
  if (v5 != result >> 10) {
    return sub_188D05DA8(result, v6, v7, v8, 1uLL);
  }
  return result;
}

unint64_t sub_188D36DF0()
{
  unint64_t result = *v0;
  if (*v0)
  {
    int v2 = *(unsigned __int8 *)(result + 18);
    uint64_t v3 = *(unsigned __int16 *)(result + 16);
    swift_unknownObjectRetain();
    sub_188D087F8((uint64_t)v0);
    return ((-15LL << ((4 * v2 + 8) & 0x3C)) - 1) & v2 | (unint64_t)(v3 << ((4 * v2 + 8) & 0x3C));
  }

  return result;
}

unint64_t sub_188D36E50@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (((result >> ((4 * *(_BYTE *)(*(void *)v2 + 18LL) + 8) & 0x3C)) & 0xF) >= *(unsigned __int16 *)(*(void *)v2 + 16LL))
  {
    __break(1u);
  }

  else
  {
    uint64_t v4 = *(void *)v2 + 24LL;
    if (*(_BYTE *)(*(void *)v2 + 18LL))
    {
      unint64_t v5 = result;
      unint64_t v6 = v4 + 40 * ((result >> ((4 * *(_BYTE *)(*(void *)v2 + 18LL) + 8) & 0x3C)) & 0xF);
      __int128 v7 = *(_OWORD *)v6;
      __int128 v8 = *(_OWORD *)(v6 + 16);
      uint64_t v13 = *(void *)(v6 + 32);
      v12[0] = v7;
      v12[1] = v8;
      sub_188D07F48(v2);
      sub_188D07F48((uint64_t)v12);
      sub_188D36E50(v5);
      sub_188D087F8((uint64_t)v12);
      return sub_188D087F8(v2);
    }

    else
    {
      unint64_t v9 = v4 + 24 * ((result >> ((4 * *(_BYTE *)(*(void *)v2 + 18LL) + 8) & 0x3C)) & 0xF);
      uint64_t v10 = *(void *)(v9 + 8);
      __int16 v11 = *(_WORD *)(v9 + 20);
      *(void *)a2 = *(void *)v9;
      *(void *)(a2 + 8) = v10;
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(v9 + 16);
      *(_WORD *)(a2 + 20) = v11;
      return swift_bridgeObjectRetain();
    }
  }

  return result;
}

unint64_t sub_188D36F34(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000LL;
  }

  else
  {
    unint64_t v5 = result >> 16;
    if ((a3 & 0x1000000000000000LL) == 0)
    {
      void v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000LL) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((_BYTE *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            unint64_t v7 = v5 - 1;
            int v11 = *((_BYTE *)&v12 + v5-- + 7) & 0xC0;
          }

          while (v11 == 128);
          return v7 << 16;
        }

        goto LABEL_14;
      }

      if ((a2 & 0x1000000000000000LL) != 0)
      {
        uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 == (a2 & 0xFFFFFFFFFFFFLL)) {
          goto LABEL_14;
        }
      }

      else
      {
        unint64_t v12 = result >> 16;
        uint64_t v6 = sub_188DF8684();
        unint64_t v5 = v12;
        if (v12 == v10) {
          goto LABEL_14;
        }
      }

      if ((*(_BYTE *)(v6 + v5) & 0xC0) == 0x80)
      {
        do
        {
          unint64_t v7 = v5 - 1;
          int v8 = *(_BYTE *)(v6 - 1 + v5--) & 0xC0;
        }

        while (v8 == 128);
        return v7 << 16;
      }

uint64_t sub_188D37044(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000LL) == 0 || (a2 & 0x800000000000000LL) != 0)
  {
    uint64_t v10 = sub_188DF7F70();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000LL;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }

  else
  {
    uint64_t v5 = MEMORY[0x1895D67BC](15LL, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000LL;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }

unint64_t sub_188D370BC@<X0>( __int128 *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int128 v11 = *a1;
  __int128 v12 = a1[2];
  __int128 v19 = v12;
  __int128 v20 = a1[1];
  __int128 v18 = *a1;
  if ((a2 & 0x400) != 0)
  {
    unint64_t result = *(void *)a1;
    if ((void)v11) {
      BOOL v17 = 2 * ((unint64_t)v12 & 0x1FFFFFFFFFFFFFLL) > a2 >> 10;
    }
    else {
      BOOL v17 = 0;
    }
    if (!v17)
    {
      __break(1u);
      return result;
    }

    swift_unknownObjectRetain();
    unint64_t result = sub_188D097FC(a2, a3, a4, a5, 0);
  }

  else
  {
    swift_unknownObjectRetain();
    unint64_t result = sub_188DCF614(a2, a3, a4, a5);
  }

  *(_OWORD *)a6 = v18;
  *(_OWORD *)(a6 + 16) = v20;
  *(_OWORD *)(a6 + 32) = v19;
  *(void *)(a6 + 48) = result;
  *(void *)(a6 + 56) = v14;
  *(void *)(a6 + 64) = v15;
  *(void *)(a6 + 72) = v16;
  return result;
}

unint64_t sub_188D3719C()
{
  unint64_t result = qword_18C74A3F0;
  if (!qword_18C74A3F0)
  {
    unint64_t result = MEMORY[0x1895D7620]( &protocol conformance descriptor for BigString.UTF16View,  &type metadata for BigString.UTF16View);
    atomic_store(result, (unint64_t *)&qword_18C74A3F0);
  }

  return result;
}

unint64_t sub_188D371E4()
{
  unint64_t result = qword_18C74A3F8;
  if (!qword_18C74A3F8)
  {
    unint64_t result = MEMORY[0x1895D7620]( &protocol conformance descriptor for BigString.UTF16View.Iterator,  &type metadata for BigString.UTF16View.Iterator);
    atomic_store(result, (unint64_t *)&qword_18C74A3F8);
  }

  return result;
}

unint64_t sub_188D3722C()
{
  unint64_t result = qword_18C74A400;
  if (!qword_18C74A400)
  {
    unint64_t result = MEMORY[0x1895D7620]( &protocol conformance descriptor for BigString.UTF16View,  &type metadata for BigString.UTF16View);
    atomic_store(result, (unint64_t *)&qword_18C74A400);
  }

  return result;
}

unint64_t sub_188D37274()
{
  unint64_t result = qword_18C74A408;
  if (!qword_18C74A408)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C74A410);
    unint64_t v2 = sub_188D372D8();
    unint64_t result = MEMORY[0x1895D7620](MEMORY[0x189617A18], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_18C74A408);
  }

  return result;
}

unint64_t sub_188D372D8()
{
  unint64_t result = qword_18C74A418;
  if (!qword_18C74A418)
  {
    unint64_t result = MEMORY[0x1895D7620]( &protocol conformance descriptor for BigString.UTF16View,  &type metadata for BigString.UTF16View);
    atomic_store(result, (unint64_t *)&qword_18C74A418);
  }

  return result;
}

unint64_t sub_188D37320()
{
  unint64_t result = qword_18C74A420;
  if (!qword_18C74A420)
  {
    unint64_t result = MEMORY[0x1895D7620]( &protocol conformance descriptor for BigSubstring.UTF16View,  &type metadata for BigSubstring.UTF16View);
    atomic_store(result, (unint64_t *)&qword_18C74A420);
  }

  return result;
}

unint64_t sub_188D37368()
{
  unint64_t result = qword_18C74A428;
  if (!qword_18C74A428)
  {
    unint64_t result = MEMORY[0x1895D7620]( &protocol conformance descriptor for BigString.UTF16View,  &type metadata for BigString.UTF16View);
    atomic_store(result, (unint64_t *)&qword_18C74A428);
  }

  return result;
}

unint64_t sub_188D373B0()
{
  unint64_t result = qword_18C74A430;
  if (!qword_18C74A430)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C74A410);
    unint64_t result = MEMORY[0x1895D7620](MEMORY[0x189617A28], v1);
    atomic_store(result, (unint64_t *)&qword_18C74A430);
  }

  return result;
}

unint64_t sub_188D37400()
{
  unint64_t result = qword_18C74A438;
  if (!qword_18C74A438)
  {
    unint64_t result = MEMORY[0x1895D7620]( &protocol conformance descriptor for BigSubstring.UTF16View,  &type metadata for BigSubstring.UTF16View);
    atomic_store(result, (unint64_t *)&qword_18C74A438);
  }

  return result;
}

uint64_t initializeWithCopy for BigString(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for BigString(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for BigString(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for BigString(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BigString(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for BigString.UTF16View()
{
  return &type metadata for BigString.UTF16View;
}

uint64_t _s9UTF16ViewV8IteratorVwcp(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  __int128 v3 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v3;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t _s9UTF16ViewV8IteratorVwca(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  __int128 v4 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v4;
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t _s9UTF16ViewV8IteratorVwta(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return a1;
}

uint64_t _s9UTF16ViewV8IteratorVwet(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 80)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t _s9UTF16ViewV8IteratorVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 72) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 80) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 80) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for BigString.UTF16View.Iterator()
{
  return &type metadata for BigString.UTF16View.Iterator;
}

uint64_t TreeDictionary.customMirror.getter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = sub_188DF8AB0();
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C749ED0);
  MEMORY[0x1895F8858](v15);
  BOOL v17 = (char *)v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  void v23[3] = a1;
  v23[4] = a2;
  v23[5] = a3;
  v23[0] = a1;
  v23[1] = a2;
  void v23[2] = a3;
  uint64_t v18 = *MEMORY[0x18961A700];
  uint64_t v19 = sub_188DF8AA4();
  uint64_t v20 = *(void *)(v19 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 104))(v17, v18, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
  uint64_t v21 = type metadata accessor for TreeDictionary(0LL, a4, a5, a6);
  MEMORY[0x1895D7620](&protocol conformance descriptor for TreeDictionary<A, B>, v21);
  sub_188D2B03C((uint64_t)v14);
  swift_retain_n();
  return sub_188DF8ABC();
}

uint64_t sub_188D379D4(uint64_t *a1)
{
  return TreeDictionary.customMirror.getter(*v1, v1[1], v1[2], a1[2], a1[3], a1[4]);
}

BOOL BitSet.isSuperset(of:)(void *a1, void *a2)
{
  return BitSet.isSubset(of:)(a2, a1);
}

BOOL BitSet.isSuperset(of:)(void *a1, uint64_t a2, void *a3)
{
  return BitSet.isSubset(of:)(a3, a1);
}

uint64_t BitSet.isSuperset(of:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a1 == a2) {
    return 1LL;
  }
  if (((a2 | a1) & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  return _UnsafeBitSet.isSuperset(of:)(a1, a2, a3 + 32, *(void *)(a3 + 16));
}

uint64_t BitSet.isSuperset<A>(of:)(uint64_t a1, void *a2, ValueMetadata *a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v21 - v9;
  Description = (void (**)(char *, void, ValueMetadata *))a3[-1].Description;
  uint64_t v12 = MEMORY[0x1895F8858](v8);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  uint64_t v16 = (char *)&v21 - v15;
  if (a3 == &type metadata for BitSet)
  {
    Description[2]((char *)&v21 - v15, a1, &type metadata for BitSet);
LABEL_12:
    swift_dynamicCast();
    char v19 = BitSet.isSubset(of:)(a2, (void *)v21);
    swift_bridgeObjectRelease();
    return v19 & 1;
  }

  if (a3 == &type metadata for BitSet.Counted)
  {
    Description[2]((char *)&v21 - v15, a1, &type metadata for BitSet.Counted);
    goto LABEL_12;
  }

  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C749F60);
  uint64_t v18 = Description[2];
  if ((ValueMetadata *)v17 != a3)
  {
    v18(v16, a1, a3);
    sub_188DF7FDC();
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      sub_188DF84D4();
      if ((v22 & 1) != 0) {
        break;
      }
      if ((v21 & 0x8000000000000000LL) != 0 || v21 >> 6 >= a2[2] || ((a2[(v21 >> 6) + 4] >> v21) & 1) == 0)
      {
        (*(void (**)(char *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
        char v19 = 0;
        return v19 & 1;
      }
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
    goto LABEL_18;
  }

  v18(v14, a1, a3);
  swift_dynamicCast();
  if (v21 == v22)
  {
LABEL_18:
    char v19 = 1;
    return v19 & 1;
  }

  if (((v22 | v21) & 0x8000000000000000LL) != 0) {
    char v19 = 0;
  }
  else {
    char v19 = _UnsafeBitSet.isSuperset(of:)(v21, v22, (uint64_t)(a2 + 4), a2[2]);
  }
  return v19 & 1;
}

uint64_t BitArray.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_188DF8A50();
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    uint64_t v5 = a2 + 32;
    do
    {
      v5 += 8LL;
      uint64_t result = sub_188DF8A50();
      --v4;
    }

    while (v4);
  }

  return result;
}

uint64_t BitArray.hashValue.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = a1 + 32;
    do
    {
      v3 += 8LL;
      sub_188DF8A50();
      --v2;
    }

    while (v2);
  }

  return sub_188DF8A98();
}

uint64_t sub_188D37D84()
{
  return BitArray.hashValue.getter(*v0);
}

uint64_t sub_188D37D8C()
{
  uint64_t v1 = *v0;
  uint64_t result = sub_188DF8A50();
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3)
  {
    uint64_t v4 = v1 + 32;
    do
    {
      v4 += 8LL;
      uint64_t result = sub_188DF8A50();
      --v3;
    }

    while (v3);
  }

  return result;
}

uint64_t sub_188D37DD8()
{
  uint64_t v1 = *v0;
  sub_188DF8A38();
  sub_188DF8A50();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    do
    {
      v3 += 8LL;
      sub_188DF8A50();
      --v2;
    }

    while (v2);
  }

  return sub_188DF8A98();
}

unint64_t sub_188D37E44()
{
  unint64_t result = qword_18C74A440;
  if (!qword_18C74A440)
  {
    unint64_t result = MEMORY[0x1895D7620](&protocol conformance descriptor for BitArray, &type metadata for BitArray);
    atomic_store(result, (unint64_t *)&qword_18C74A440);
  }

  return result;
}

unint64_t sub_188D37E88()
{
  unint64_t v2 = v0[2];
  unint64_t v1 = v0[3];
  if (v2 >= v1) {
    return 0LL;
  }
  if (v0[3] > 0x3FuLL && (v0[3] & 0x3FLL) == 0) {
    unint64_t v4 = 64LL;
  }
  else {
    unint64_t v4 = v0[3] & 0x3FLL;
  }
  uint64_t v5 = (v0[3] >> 6) - ((v0[3] > 0x3FuLL) & ((v0[3] & 0x3FLL) == 0));
  if (v5 == v2 >> 6)
  {
    v0[3] = v2;
    if (v1 > 0x3F && (v1 & 0x3F) == 0) {
      uint64_t v6 = -1LL;
    }
    else {
      uint64_t v6 = ~(-1LL << v4);
    }
    if (v4 >= (v2 & 0x3F)) {
      return (*(void *)(*v0 + 8 * v5) & (unint64_t)v6) >> v2;
    }
    __break(1u);
    goto LABEL_19;
  }

  if (v1 < v4)
  {
LABEL_19:
    __break(1u);
    return result;
  }

  v0[3] = v1 - v4;
  uint64_t v7 = *(void *)(*v0 + 8 * v5);
  if (v1 > 0x3F && (v1 & 0x3F) == 0) {
    uint64_t v8 = -1LL;
  }
  else {
    uint64_t v8 = ~(-1LL << v4);
  }
  return v7 & v8;
}

uint64_t sub_188D37F3C(uint64_t a1)
{
  uint64_t v2 = 0LL;
  uint64_t v3 = 0LL;
  while (1)
  {
    uint64_t result = sub_188DF84D4();
    if (v7 == 2) {
      return v3;
    }
    uint64_t v5 = v2 + 1;
    if (v2 == -1) {
      break;
    }
    if ((v7 & 1) != 0) {
      uint64_t v6 = 1LL << v2;
    }
    else {
      uint64_t v6 = 0LL;
    }
    v3 |= v6;
    ++v2;
    if (v5 == a1) {
      return v3;
    }
  }

  __break(1u);
  return result;
}

unint64_t sub_188D37FDC(unint64_t result)
{
  unint64_t v3 = result >> 40;
  unsigned int v4 = *v2;
  unsigned int v5 = v2[4];
  if (v5 >= v4)
  {
    unsigned int v6 = v5 + BYTE4(result);
    unsigned int v1 = v6 >> 8;
    if (BYTE4(result) < result)
    {
      if ((v6 & 0x100) != 0)
      {
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }

      v2[4] = v6;
      v2[5] = BYTE5(result);
LABEL_12:
      unsigned int v7 = v4 + result;
      if (((v7 >> 8) & 1) != 0)
      {
        __break(1u);
      }

      else
      {
        *uint64_t v2 = v7;
        unsigned int v8 = v2[1] + BYTE1(result);
        if (((v8 >> 8) & 1) == 0)
        {
          v2[1] = v8;
          unsigned int v9 = v2[2] + BYTE2(result);
          if (((v9 >> 8) & 1) == 0)
          {
            v2[2] = v9;
            unsigned int v10 = v2[3] + BYTE3(result);
            if (((v10 >> 8) & 1) == 0)
            {
              v2[3] = v10;
              return result;
            }

            goto LABEL_20;
          }

LABEL_23:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

    __break(1u);
LABEL_24:
    __break(1u);
  }

  return result;
}

    uint64_t result = sub_188DF7EF8();
    uint64_t v38 = a5 + result;
    if (!__OFADD__(a5, result)) {
      goto LABEL_18;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  __int128 v37 = v52 | (v51 << 11);
LABEL_19:
  *(void *)(v6 + 48) = v37;
  *(void *)(v6 + 56) = v15;
  *(void *)(v6 + 64) = v13;
  *(void *)(v6 + 72) = TupleTypeMetadata2;
  ((void (*)(uint64_t, unsigned __int8 *, uint64_t))v16)(v43, v19, a4);
  return swift_bridgeObjectRelease();
}

    if (v4 <= v10 >> 16) {
      goto LABEL_33;
    }
    uint64_t result = sub_188DF7F04();
    unsigned int v10 = result;
LABEL_25:
    if (v14 != 48)
    {
      if (v14 != 49) {
        return 0LL;
      }
      if ((*a4 & 0x8000000000000000LL) != 0) {
        goto LABEL_34;
      }
      *(void *)(*v18 + ((*a4 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << *a4;
    }

    --*a4;
    if (4 * v4 == v10 >> 14) {
      return 1LL;
    }
  }

  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

      __break(1u);
      return;
    }

    __break(1u);
    goto LABEL_23;
  }

  unsigned int v4 = *((void *)v1 + 1);
  if ((v4 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_19;
  }

  unsigned int v5 = *(char **)v1;
  if (v4 <= by)
  {
    swift_bridgeObjectRelease();
    *(void *)unsigned int v1 = MEMORY[0x18961AFE8];
    *((void *)v1 + _HashNode.ensureUnique(isUnique:)(v1 & 1) = 0LL;
  }

  else
  {
    unsigned int v6 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)unsigned int v1 = v5;
    if ((v6 & 1) == 0)
    {
      unsigned int v5 = sub_188CF73DC((uint64_t)v5);
      *(void *)unsigned int v1 = v5;
    }

    unsigned int v7 = *((void *)v5 + 2);
    uint64_t v14 = v5 + 32;
    uint64_t v15 = v7;
    uint64_t v16 = v4;
    sub_188DF548C(v3, v4, (uint64_t)(v5 + 32), v7, 0LL);
    *(void *)unsigned int v1 = v5;
    sub_188D3C3F4(v4 - v3);
  }

  *(void *)(v6 + 72) = v8;
  *(void *)(v6 + 80) = a2;
  *(_DWORD *)(v6 + 88) = v7;
  *(_WORD *)(v6 + 92) = v10;
  return result;
}

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

    __break(1u);
    goto LABEL_24;
  }

  __break(1u);
  return result;
}

    __int128 v33 = v29 - v30;
    if (v29 - v30 >= 1)
    {
      __int128 v34 = v25 - v33;
      if (v25 < v33) {
        goto LABEL_86;
      }
      if (v25 < v34) {
        goto LABEL_87;
      }
      if (v34 < 0) {
        goto LABEL_88;
      }
      __int128 v35 = v23;
      uint64_t v36 = v25 - v33;
      if (__OFADD__(v25, v30 - v29)) {
        goto LABEL_89;
      }
      char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
      if (!(_DWORD)isUniquelyReferenced_nonNull_native || v36 > *((void *)a2 + 3) >> 1)
      {
        if (v25 <= v36) {
          uint64_t v38 = v25 - v33;
        }
        else {
          uint64_t v38 = v25;
        }
        a2 = sub_188CF7528(isUniquelyReferenced_nonNull_native, v38, 1, a2);
      }

      uint64_t v23 = v35;
      uint64_t result = (uint64_t)memmove(&a2[8 * v34 + 32], &a2[8 * v25 + 32], 8 * (*((void *)a2 + 2) - v25));
      __int128 v25 = *((void *)a2 + 2) - v33;
      *((void *)a2 + 2) = v25;
    }

    if (!v25) {
      break;
    }
    if (!*((void *)a2 + 4))
    {
      if (v25 == 1) {
        break;
      }
      uint64_t v39 = 5LL;
      while (!*(void *)&a2[8 * v39])
      {
        uint64_t v40 = v39 - 3;
        if (__OFADD__(v39 - 4, 1LL)) {
          goto LABEL_83;
        }
        ++v39;
        if (v40 == v25) {
          goto LABEL_78;
        }
      }
    }
  }

    (*(void (**)(char *, uint64_t))(v66 + 8))(v9, v36);
    swift_bridgeObjectRelease();
    goto LABEL_51;
  }

    char v104 = 0LL;
    sub_188CF7620();
    sub_188DF84E0();
    uint64_t v55 = sub_188DF7CC4();
    v43(v37, v4);
    v43(v28, v4);
    uint64_t v44 = 0LL;
    uint64_t v56 = v96;
    if ((v55 & 1) == 0) {
      goto LABEL_32;
    }
    goto LABEL_50;
  }

  uint64_t v53 = sub_188DF8540();
  uint64_t v54 = sub_188DF8534();
  uint64_t v52 = (uint64_t)v97;
  if ((v53 & 1) == 0)
  {
    if (v54 >= 64)
    {
      v43(v28, v4);
      uint64_t v56 = v96;
      goto LABEL_32;
    }

    goto LABEL_27;
  }

  if (v54 > 64) {
    goto LABEL_23;
  }
  swift_getAssociatedConformanceWitness();
  sub_188DF89CC();
  sub_188DF896C();
  uint64_t v58 = sub_188DF7CC4();
  v43(v37, v4);
  uint64_t v59 = v90;
  v103(v90, (uint64_t)v28, v4);
  if ((v58 & 1) == 0) {
    goto LABEL_46;
  }
  v43(v59, v4);
  uint64_t v44 = 0LL;
  uint64_t v56 = v96;
LABEL_49:
  v43(v28, v4);
LABEL_50:
  v103((char *)v52, v101, v4);
  uint64_t v70 = sub_188DF8540();
  uint64_t v71 = sub_188DF8534();
  if ((v70 & 1) != 0)
  {
    if (v71 <= 64)
    {
      swift_getAssociatedConformanceWitness();
      sub_188DF89CC();
      sub_188DF896C();
      unint64_t v72 = sub_188DF7CB8();
      v43(v37, v4);
      uint64_t v73 = v92;
      v103(v92, v52, v4);
      if ((v72 & 1) != 0) {
        sub_188DF8528();
      }
      v43(v73, v4);
      goto LABEL_59;
    }
  }

  else if (v71 < 65)
  {
    sub_188DF8528();
LABEL_59:
    v43((char *)v52, v4);
    goto LABEL_60;
  }

  unint64_t v74 = v52;
  uint64_t v52 = -1LL;
  char v104 = -1LL;
  sub_188CF78D0();
  sub_188DF84E0();
  unint64_t v75 = sub_188DF7CC4();
  v43(v37, v4);
  v43((char *)v74, v4);
  if ((v75 & 1) != 0) {
    return v44;
  }
LABEL_60:
  v103(v56, v101, v4);
  if ((sub_188DF8540() & 1) == 0
    || (swift_getAssociatedConformanceWitness(),
        sub_188DF89CC(),
        sub_188DF896C(),
        uint64_t v76 = sub_188DF7CD0(),
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v43)(v37, v4),
        (v76 & 1) != 0))
  {
    if (sub_188DF8534() < 64) {
      goto LABEL_74;
    }
    v103(v94, (uint64_t)v56, v4);
    char v104 = -1LL;
    uint64_t v77 = sub_188DF8540();
    uint64_t v78 = sub_188DF8534();
    if ((v77 & 1) != 0)
    {
      if (v78 <= 64)
      {
        swift_getAssociatedConformanceWitness();
        sub_188DF89CC();
        sub_188DF896C();
        uint64_t v79 = v94;
        uint64_t v80 = sub_188DF7CB8();
        v43(v37, v4);
        uint64_t v81 = v104;
        uint64_t v52 = (uint64_t)v89;
        (*(void (**)(char *, char *, uint64_t))(v91 + 32))(v89, v79, v4);
        if ((v80 & 1) == 0)
        {
LABEL_73:
          v43((char *)v52, v4);
          goto LABEL_74;
        }

        uint64_t v82 = sub_188DF8528();
        v43((char *)v52, v4);
        if (v81 < v82)
        {
LABEL_72:
          __break(1u);
          goto LABEL_73;
        }

  *(void *)(result + 16) = v7;
  return result;
}

BOOL sub_188D380D4(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return sub_188D380F0( *a1 | ((unint64_t)*(unsigned int *)(a1 + 1) << 16),  *a2 | ((unint64_t)*(unsigned int *)(a2 + 1) << 16));
}

BOOL sub_188D380F0(uint64_t a1, uint64_t a2)
{
  return (a1 & 0xFFFFFFFFFFFFLL) == (a2 & 0xFFFFFFFFFFFFLL);
}

int64_t sub_188D38104( int64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (result > 255)
  {
    __break(1u);
    goto LABEL_10;
  }

  if (a2 > 255)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  if (a3 > 255)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if (a4 > 255)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  if (a5 > 255)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if ((a2 | result | a3 | a4 | a5 | a6) < 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  if (a6 <= 255) {
    return result | (unint64_t)(unsigned __int16)(a2 << 8) | ((unint64_t)a3 << 16) & 0xFFFF0000FFFFFFFFLL | ((_DWORD)a4 << 24) | ((unint64_t)a5 << 32) & 0xFFFF00FFFFFFFFFFLL | ((unint64_t)a6 << 40);
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t __swift_memcpy6_1(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_WORD *)(result + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)uint64_t result = v2;
  return result;
}

uint64_t _s6CountsVwet(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 6)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _s6CountsVwst(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 6) = v3;
  return result;
}

ValueMetadata *_s6CountsVMa()
{
  return &_s6CountsVN;
}

unint64_t _s19CollectionsInternal9BigStringV6insert10contentsOf2atySsn_AC5IndexVtF_0( unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8)
{
  unint64_t v129 = a8;
  unint64_t v128 = a7;
  *(void *)&__int128 v127 = a6;
  *(void *)&__int128 v134 = a4;
  *(void *)&__int128 v133 = a3;
  uint64_t v121 = _s7BuilderVMa();
  MEMORY[0x1895F8858](v121);
  unint64_t v122 = (char *)&v114 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v125 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A2A0);
  uint64_t v13 = *(void *)(v125 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v125);
  uint64_t v117 = (void (**)(char *, char *, uint64_t))((char *)&v114 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  MEMORY[0x1895F8858](v14);
  uint64_t v118 = (uint64_t *)((char *)&v114 - v16);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A298);
  uint64_t v18 = MEMORY[0x1895F8858](v17);
  uint64_t v119 = (uint64_t *)((char *)&v114 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v20 = MEMORY[0x1895F8858](v18);
  uint64_t v123 = (uint64_t)&v114 - v21;
  uint64_t v22 = MEMORY[0x1895F8858](v20);
  uint64_t v120 = (uint64_t *)((char *)&v114 - v23);
  MEMORY[0x1895F8858](v22);
  uint64_t v124 = (uint64_t)&v114 - v24;
  *(void *)&__int128 v126 = _s12InsertResultOMa();
  uint64_t v25 = MEMORY[0x1895F8858](v126);
  __int128 v27 = (char *)&v114 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v25);
  uint64x2_t v132 = (char *)&v114 - v28;
  uint64_t v130 = sub_188DF8B4C();
  uint64_t v29 = *(void *)(v130 - 8);
  uint64_t v30 = MEMORY[0x1895F8858](v130);
  uint64_t v32 = (char *)&v114 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v30);
  __int128 v34 = (char *)&v114 - v33;
  uint64_t v35 = _s9_IngesterVMa();
  MEMORY[0x1895F8858](v35);
  __int128 v37 = (void (*)(void))((char *)&v114 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __int128 v38 = *v8;
  uint64_t v39 = *((void *)v8 + 4);
  if (*(void *)v8) {
    unint64_t v40 = 2 * (v39 & 0x1FFFFFFFFFFFFFLL);
  }
  else {
    unint64_t v40 = 0LL;
  }
  if (v40 < a5 >> 10)
  {
    __break(1u);
LABEL_40:
    sub_188D8D12C();
    uint64_t v48 = v116;
    goto LABEL_10;
  }

  if (!((a2 ^ a1) >> 14)) {
    return swift_bridgeObjectRelease();
  }
  if (a5 >> 10 == v40) {
    return _s19CollectionsInternal9BigStringV6append10contentsOfySsn_tF_0(a1, a2, v133, v134);
  }
  uint64_t v115 = v13;
  __int128 v42 = v8[1];
  uint64x2_t v131 = v8;
  uint64_t v43 = *((void *)v8 + 5);
  __int128 v145 = v38;
  __int128 v146 = v42;
  uint64_t v147 = v39;
  uint64_t v148 = v43;
  uint64_t v116 = v37;
  unint64_t v44 = sub_188D097FC(a5, v127, v128, v129, 1);
  a5 = (unint64_t)v45;
  v138[0] = 1;
  unint64_t v128 = v44;
  *(void *)&__int128 v127 = v46;
  unint64_t v129 = v47;
  sub_188D20C84(v44, v46, v47, v45, 0x100000000uLL, (unint64_t)v34);
  uint64_t v13 = v130;
  unint64_t v114 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
  v114(v32, v34, v130);
  uint64_t v48 = v116;
  *(void *)uint64_t v116 = a1;
  *((void *)v48 + _HashNode.ensureUnique(isUnique:)(v1 & 1) = a2;
  uint64_t v49 = v134;
  *((void *)v48 + 2) = v133;
  *((void *)v48 + 3) = v49;
  if ((v49 & 0x1000000000000000LL) != 0) {
    goto LABEL_40;
  }
LABEL_10:
  *((void *)v48 + 4) = a1;
  uint64_t v50 = (char *)v48 + *(int *)(v35 + 24);
  uint64_t v51 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
  v51(v50, v32, v13);
  unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v34, v13);
  if (a5 == 1)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }

  uint64_t v52 = a5;
  unint64_t result = v129;
  unint64_t v136 = v129;
  uint64_t v53 = v127;
  unint64_t v54 = (unint64_t)v132;
  unint64_t v55 = v128;
  if ((void)v127 != *((void *)v131 + 5))
  {
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }

  *(void *)&__int128 v134 = v51;
  if (!*(void *)v131)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }

  sub_188DF12BC(v129, (uint64_t)v138);
  unint64_t result = sub_188D2CADC( v116,  (16 * (int)v55) & 0x4000LL | ((unint64_t)v55 << 16) | (v55 >> 8) & 3 | 4,  v54);
  uint64_t v57 = v131;
  uint64_t v58 = v53 + 1;
  *((void *)v131 + 5) = v53 + 1;
  uint64_t v135 = v53 + 1;
  if (*v57)
  {
    uint64_t v59 = sub_188DF153C((uint64_t)v143, (uint64_t)v138, v56);
    uint64_t v137 = v59;
    swift_bridgeObjectRelease();
    sub_188D39478(v54, (uint64_t)v27);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload != 1)
      {
        uint64_t v78 = v131;
        __n128 v79 = sub_188D9E778(v55, v53, v129, v52, (uint64_t)v138);
        uint64_t v80 = v121;
        uint64_t v81 = (uint64_t)v122;
        uint64_t v82 = (void (*)(uint64_t, char *, uint64_t))v114;
        ((void (*)(char *, char *, uint64_t, __n128))v114)(&v122[*(int *)(v121 + 24)], v50, v13, v79);
        v82(v81 + *(int *)(v80 + 20), v50, v13);
        __int128 v83 = v141;
        *(_OWORD *)(v81 + 64) = v140;
        *(_OWORD *)(v81 + 80) = v83;
        *(void *)(v81 + 96) = v142;
        __int128 v84 = *(_OWORD *)&v138[16];
        *(_OWORD *)uint64_t v81 = *(_OWORD *)v138;
        *(_OWORD *)(v81 + 16) = v84;
        __int128 v85 = v139;
        *(_OWORD *)(v81 + 32) = *(_OWORD *)&v138[32];
        *(_OWORD *)(v81 + 48) = v85;
        uint64_t v86 = v116;
        sub_188DAFF54(v116);
        sub_188D435A0(v81, v81);
        sub_188DB8024((uint64_t *)v143);
        __int128 v134 = *(_OWORD *)v143;
        __int128 v133 = *(_OWORD *)&v143[16];
        uint64_t v87 = *(void *)&v143[32];
        uint64_t v88 = v144;
        sub_188D394BC(v81, (uint64_t (*)(void))_s7BuilderVMa);
        sub_188D394BC(v54, (uint64_t (*)(void))_s12InsertResultOMa);
        swift_unknownObjectRelease();
        __int128 v89 = v133;
        *uint64_t v78 = v134;
        v78[1] = v89;
        *((void *)v78 + 4) = v87;
        *((void *)v78 + 5) = v88;
        return sub_188D394BC((uint64_t)v86, (uint64_t (*)(void))_s9_IngesterVMa);
      }

      uint64_t v62 = *(void **)v27;
      uint64_t v61 = *((void *)v27 + 1);
      unint64_t v63 = v27[16];
      uint64_t v64 = *(unsigned int *)(v27 + 17);
      uint64_t v65 = v27[21];
      uint64_t v66 = (uint64_t)&v27[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C74A2A8) + 48)];
      uint64_t v67 = v123;
      unint64_t result = sub_188D394F8(v66, v123, &qword_18C74A298);
      *(_OWORD *)&v138[32] = v131[2];
      __int128 v68 = *v131;
      *(_OWORD *)&v138[16] = v131[1];
      *(_OWORD *)unint64_t v138 = v68;
      *(void *)&__int128 v133 = v58;
      if (v58 != *(void *)&v138[40]) {
        goto LABEL_41;
      }
      __int128 v127 = *(_OWORD *)&v138[8];
      __int128 v126 = *(_OWORD *)&v138[24];
      uint64_t v69 = *(void *)v138;
      swift_unknownObjectRetain_n();
      unint64_t v70 = sub_188D36DF0();
      unint64_t result = sub_188D087F8((uint64_t)v138);
      if (v129 >= v70)
      {
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }

      char v71 = (4 * *(_BYTE *)(v59 + 18) + 8) & 0x3C;
      unint64_t v72 = ((v129 >> v71) & 0xF) + 1;
      if (v72 >= *(unsigned __int16 *)(v59 + 16))
      {
        *(void *)unsigned int v143 = v69;
        *(_OWORD *)&v143[8] = v127;
        *(_OWORD *)&v143[24] = v126;
        swift_unknownObjectRetain();
        char v100 = sub_188D7F780((uint64_t)&v135);
        sub_188D087F8((uint64_t)v138);
        if ((v100 & 1) != 0)
        {
          unint64_t result = sub_188D087F8((uint64_t)v138);
          if (v135 != (void)v133)
          {
LABEL_43:
            __break(1u);
            goto LABEL_44;
          }

          unint64_t v73 = v136;
        }

        else
        {
          unint64_t v73 = sub_188D36DF0();
          sub_188D087F8((uint64_t)v138);
          uint64_t v135 = v133;
          unint64_t v136 = v73;
          uint64_t v137 = 0LL;
        }
      }

      else
      {
        unint64_t v73 = (v72 << v71) | ((-15LL << v71) - 1) & v129;
        unint64_t v136 = v73;
        sub_188D087F8((uint64_t)v138);
      }

      swift_bridgeObjectRetain();
      sub_188DF2A24(v62, v61, (v64 << 8) | (v65 << 40) | v63, v73);
      unint64_t v75 = v119;
      sub_188D3953C(v67, (uint64_t)v119);
      uint64_t v101 = v125;
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v115 + 48))(v75, 1LL, v125) == 1)
      {
        swift_bridgeObjectRelease();
        sub_188D2DCE0(v67, &qword_18C74A298);
        uint64_t v77 = (uint64_t)v132;
        goto LABEL_33;
      }

      unint64_t v129 = v63;
      uint64_t v102 = *(int *)(v101 + 48);
      uint64_t v103 = (uint64_t)v117;
      uint64_t v104 = (uint64_t)v117 + v102;
      uint64_t v105 = *(int *)(v101 + 64);
      uint64_t v106 = (uint64_t)v117 + v105;
      uint64_t v107 = (char *)v75 + v102;
      uint64_t v108 = (char *)v75 + v105;
      uint64_t v109 = *v75;
      *uint64_t v117 = v109;
      unint64_t v110 = v55;
      uint64_t v111 = v130;
      uint64_t v112 = (void (*)(uint64_t, char *, uint64_t))v134;
      ((void (*)(uint64_t, char *, uint64_t))v134)(v103 + v102, v107, v130);
      v112(v106, v108, v111);
      unint64_t result = swift_bridgeObjectRelease();
      unint64_t v113 = v132;
      if (__OFADD__(v109, v110 >> 11))
      {
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }

      sub_188D21F38(v129 | ((v109 + (v110 >> 11)) << 11), v133, v73, v137, v104, v106);
      sub_188D2DCE0(v103, &qword_18C74A2A0);
      sub_188D2DCE0(v123, &qword_18C74A298);
      uint64_t v99 = (uint64_t)v113;
    }

    else
    {
      uint64_t v74 = v124;
      sub_188D394F8((uint64_t)v27, v124, &qword_18C74A298);
      unint64_t v75 = v120;
      sub_188D3953C(v74, (uint64_t)v120);
      uint64_t v76 = v125;
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v115 + 48))(v75, 1LL, v125) == 1)
      {
        sub_188D2DCE0(v74, &qword_18C74A298);
        uint64_t v77 = v54;
LABEL_33:
        sub_188D394BC(v77, (uint64_t (*)(void))_s12InsertResultOMa);
        sub_188D2DCE0((uint64_t)v75, &qword_18C74A298);
LABEL_37:
        uint64_t v86 = v116;
        return sub_188D394BC((uint64_t)v86, (uint64_t (*)(void))_s9_IngesterVMa);
      }

      *(void *)&__int128 v133 = v58;
      uint64_t v90 = *(int *)(v76 + 48);
      unint64_t v91 = v75;
      uint64_t v92 = (uint64_t)v118;
      uint64_t v93 = *(int *)(v76 + 64);
      uint64_t v94 = (uint64_t)v118 + v93;
      unsigned int v95 = (char *)v75 + v93;
      uint64_t v96 = v13;
      uint64_t v97 = *v91;
      *uint64_t v118 = *v91;
      *(void *)&__int128 v127 = v92 + v90;
      __int16 v98 = (uint64_t (*)(uint64_t, char *, uint64_t))v134;
      ((void (*)(void))v134)();
      unint64_t result = v98(v94, v95, v96);
      if (__OFADD__(v55, v97))
      {
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }

      if (v55 + v97 < 0)
      {
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }

      sub_188D21F38( (v55 + v97) | ((((v55 + v97) & 0xFFFFFFFFFFFFLL)
                                       - v55
                                       + (v55 >> 11)) << 11),
        v133,
        v129,
        v59,
        v127,
        v94);
      sub_188D2DCE0(v92, &qword_18C74A2A0);
      sub_188D2DCE0(v124, &qword_18C74A298);
      uint64_t v99 = v54;
    }

    sub_188D394BC(v99, (uint64_t (*)(void))_s12InsertResultOMa);
    goto LABEL_37;
  }

LABEL_49:
  __break(1u);
  return result;
}

  unint64_t v46 = v55;
  memcpy(v36, v37, v35);
LABEL_78:
  *(void *)((unint64_t)&v36[v35 + 7] & 0xFFFFFFFFFFFFFFF8LL) = *(void *)((unint64_t)&v37[v35 + 7] & 0xFFFFFFFFFFFFF8LL);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v46;
}

  __break(1u);
}

  __break(1u);
}

    unint64_t result = a9 - v17;
    if (__OFSUB__(a9, v17))
    {
      __break(1u);
      goto LABEL_52;
    }

    return result;
  }

      sub_188D087F8((uint64_t)a1);
      goto LABEL_13;
    }

    if (v18 + 1 >= (unint64_t)*(unsigned __int16 *)(v3 + 16))
    {
      uint64_t v29 = 0;
LABEL_51:
      unsigned int v8 = v63;
      uint64_t v51 = *(unsigned __int16 *)(v3 + 16);
      uint64_t v52 = *(_BYTE *)(v3 + 18);
      swift_unknownObjectRetain();
      sub_188D087F8((uint64_t)a1);
      sub_188D087F8((uint64_t)a1);
      unsigned int v10 = 0LL;
      uint64_t v66 = v63;
      uint64_t v67 = ((-15LL << ((4 * v52 + 8) & 0x3C)) - 1) & v29 | (unint64_t)(v51 << ((4 * v52 + 8) & 0x3C));
      __int128 v68 = 0LL;
      goto LABEL_14;
    }

    uint64_t v67 = ((v18 + 1) << v17) | ((-15LL << v17) - 1) & v11;
    sub_188D087F8((uint64_t)a1);
    __int128 v68 = v3;
    unsigned int v10 = v3;
    unsigned int v8 = v63;
LABEL_14:
    sub_188DF7EE0();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v10) {
      goto LABEL_52;
    }
  }

  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
  return result;
}

uint64_t _s19CollectionsInternal9BigStringV6insert10contentsOf2atyACn_AC5IndexVtF_0( _OWORD *a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  unsigned int v6 = v5;
  uint64_t v12 = _s7BuilderVMa();
  uint64_t result = MEMORY[0x1895F8858](v12);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v16 = a2 >> 10;
  if (*v5) {
    unint64_t v17 = 2 * (v5[4] & 0x1FFFFFFFFFFFFFLL);
  }
  else {
    unint64_t v17 = 0LL;
  }
  if (v16 >= v17)
  {
    if (v16 == v17) {
      return _s19CollectionsInternal9BigStringV6append10contentsOfyACn_tF_0((uint64_t)a1);
    }
    __break(1u);
  }

  else
  {
    if (a2 < 0x400) {
      return sub_188DF010C(a1);
    }
    __int128 v18 = a1[1];
    v36[0] = *a1;
    v36[1] = v18;
    v36[2] = a1[2];
    if (*(void *)&v36[0])
    {
      uint64_t v37 = *(void *)&v36[0];
      __int128 v38 = *(_OWORD *)((char *)v36 + 8);
      __int128 v39 = *(_OWORD *)((char *)&v36[1] + 8);
      if (!*(_BYTE *)(*(void *)&v36[0] + 18LL) && *(_WORD *)(*(void *)&v36[0] + 16LL) == 1)
      {
        uint64_t result = sub_188D36DF0();
        if (result)
        {
          swift_unknownObjectRetain();
          sub_188D36E50(0LL, (uint64_t)v31);
          sub_188D087F8((uint64_t)a1);
          BigString.insert(contentsOf:at:)(*(uint64_t *)&v31[0], *((uint64_t *)&v31[0] + 1), a2, a3, a4, a5);
          return sub_188D087F8((uint64_t)a1);
        }

        goto LABEL_18;
      }
    }

    sub_188D9E778(a2, a3, a4, a5, (uint64_t)v31);
    uint64_t v19 = sub_188D3933C();
    uint64_t v20 = (uint64_t)&v15[*(int *)(v12 + 20)];
    sub_188DF8B40();
    uint64_t result = v19 - 1;
    if (!__OFSUB__(v19, 1LL))
    {
      sub_188D424A4(result, (uint64_t *)v31, v20);
      uint64_t v21 = &v15[*(int *)(v12 + 24)];
      uint64_t v22 = sub_188DF8B4C();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16LL))(v21, v20, v22);
      __int128 v23 = v31[5];
      *((_OWORD *)v15 + 4) = v31[4];
      *((_OWORD *)v15 + 5) = v23;
      *((void *)v15 + 12) = v32;
      __int128 v24 = v31[1];
      *(_OWORD *)uint64_t v15 = v31[0];
      *((_OWORD *)v15 + _HashNode.ensureUnique(isUnique:)(v1 & 1) = v24;
      __int128 v25 = v31[3];
      *((_OWORD *)v15 + 2) = v31[2];
      *((_OWORD *)v15 + 3) = v25;
      swift_unknownObjectRetain();
      sub_188DB0C20(a1);
      sub_188D435A0((uint64_t)v15, (uint64_t)v15);
      sub_188DB8024((uint64_t *)v33);
      __int128 v30 = v33[0];
      __int128 v29 = v33[1];
      uint64_t v26 = v34;
      uint64_t v27 = v35;
      sub_188D087F8((uint64_t)a1);
      sub_188D394BC((uint64_t)v15, (uint64_t (*)(void))_s7BuilderVMa);
      uint64_t result = swift_unknownObjectRelease();
      __int128 v28 = v29;
      *(_OWORD *)unsigned int v6 = v30;
      *((_OWORD *)v6 + _HashNode.ensureUnique(isUnique:)(v1 & 1) = v28;
      _OWORD v6[4] = v26;
      _OWORD v6[5] = v27;
      return result;
    }
  }

  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

void sub_188D39090( __int128 *a1, unint64_t *a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v14 = _s7BuilderVMa();
  MEMORY[0x1895F8858](v14);
  unint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v17 = a3 >> 10;
  if (*(void *)v7) {
    unint64_t v18 = 2 * (*(void *)(v7 + 32) & 0x1FFFFFFFFFFFFFLL);
  }
  else {
    unint64_t v18 = 0LL;
  }
  if (v17 >= v18)
  {
    if (v17 == v18)
    {
      sub_188DF02D8(a1, a2);
      return;
    }

    __break(1u);
  }

  else
  {
    if (a3 < 0x400)
    {
      sub_188DF05EC(a1, a2);
      return;
    }

    if ((a2[4] ^ *a2) < 0x800)
    {
      sub_188D087F8((uint64_t)a1);
      return;
    }

    sub_188D9E778(a3, a4, a5, a6, (uint64_t)v33);
    uint64_t v19 = sub_188D3933C();
    uint64_t v20 = (uint64_t)&v16[*(int *)(v14 + 20)];
    sub_188DF8B40();
    if (!__OFSUB__(v19, 1LL))
    {
      sub_188D424A4(v19 - 1, (uint64_t *)v33, v20);
      uint64_t v21 = &v16[*(int *)(v14 + 24)];
      uint64_t v22 = sub_188DF8B4C();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16LL))(v21, v20, v22);
      __int128 v23 = v33[5];
      *((_OWORD *)v16 + 4) = v33[4];
      *((_OWORD *)v16 + 5) = v23;
      *((void *)v16 + 12) = v34;
      __int128 v24 = v33[1];
      *(_OWORD *)unint64_t v16 = v33[0];
      *((_OWORD *)v16 + _HashNode.ensureUnique(isUnique:)(v1 & 1) = v24;
      __int128 v25 = v33[3];
      *((_OWORD *)v16 + 2) = v33[2];
      *((_OWORD *)v16 + 3) = v25;
      __int128 v26 = *a1;
      __int128 v27 = a1[2];
      v38[1] = a1[1];
      void v38[2] = v27;
      v38[0] = v26;
      sub_188D394F8((uint64_t)v38, (uint64_t)v39, qword_18C4FAFB0);
      sub_188D07F48((uint64_t)v39);
      sub_188DB0D24(a1, a2);
      sub_188D435A0((uint64_t)v16, (uint64_t)v16);
      sub_188DB8024((uint64_t *)v35);
      __int128 v32 = v35[0];
      __int128 v31 = v35[1];
      uint64_t v28 = v36;
      uint64_t v29 = v37;
      sub_188D087F8((uint64_t)a1);
      sub_188D394BC((uint64_t)v16, (uint64_t (*)(void))_s7BuilderVMa);
      swift_unknownObjectRelease();
      __int128 v30 = v31;
      *(_OWORD *)uint64_t v7 = v32;
      *(_OWORD *)(v7 + 16) = v30;
      *(void *)(v7 + 32) = v28;
      *(void *)(v7 + 40) = v29;
      return;
    }
  }

  __break(1u);
}

uint64_t sub_188D3933C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16LL);
  if (!v1)
  {
    uint64_t v2 = 0LL;
    uint64_t v3 = 0LL;
    uint64_t v4 = 0LL;
    uint64_t result = 0LL;
    if (!*(void *)(v0 + 8)) {
      goto LABEL_19;
    }
LABEL_15:
    uint64_t v12 = *(void *)(v0 + 16);
    BOOL v11 = __OFADD__(result, v12);
    result += v12;
    if (v11)
    {
LABEL_28:
      __break(1u);
    }

    else
    {
      uint64_t v13 = *(void *)(v0 + 24);
      BOOL v11 = __OFADD__(v4, v13);
      v4 += v13;
      if (!v11)
      {
        uint64_t v14 = *(void *)(v0 + 32);
        BOOL v11 = __OFADD__(v3, v14);
        v3 += v14;
        if (!v11)
        {
          uint64_t v15 = *(void *)(v0 + 40);
          BOOL v11 = __OFADD__(v2, v15);
          v2 += v15;
          if (!v11) {
            goto LABEL_19;
          }
LABEL_31:
          __break(1u);
LABEL_32:
          __break(1u);
          goto LABEL_33;
        }

uint64_t sub_188D39478(uint64_t a1, uint64_t a2)
{
  uint64_t inserted = _s12InsertResultOMa();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(inserted - 8) + 16LL))(a2, a1, inserted);
  return a2;
}

uint64_t sub_188D394BC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_188D394F8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_188D3953C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A298);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

_DWORD *_HashNode.merge(_:_:_:)( unsigned int a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, char *), uint64_t a5, void *a6)
{
  uint64_t v8 = v7;
  if (a3 < 1) {
    return 0LL;
  }
  uint64_t v9 = a3;
  uint64_t v11 = v6[1];
  if (v11 < 1)
  {
    swift_retain();
    swift_release();
    *uint64_t v6 = a2;
    v6[1] = v9;
  }

  else if ((_BYTE)a1 {
         || (uint64_t v16 = a6[4],
  }
             uint64_t v23 = a6[2],
             uint64_t v24 = *v6,
             uint64_t v22 = a6[3],
             (_HashNode.hasSingletonItem.getter(*v6, v11, v23, v22, v16) & 1) == 0))
  {
    uint64_t v19 = _HashNode._merge(_:_:_:)(a1, a2, v9, a4, a5, a6);
    if (!v7) {
      return v19;
    }
  }

  else
  {
    uint64_t v26 = a2;
    uint64_t v27 = v9;
    uint64_t v17 = nullsub_1(v24 + 16, v24 + 32, v23, v22, v16);
    uint64_t v9 = v18;
    swift_retain();
    sub_188D39700(v17, (uint64_t)&v26, 0, (void (*)(char *, char *))a4, a5, v23, v22, &v25, v16);
    swift_release();
    if (!v8)
    {
      uint64_t v9 = v25;
      uint64_t v21 = v27;
      *uint64_t v6 = v26;
      v6[1] = v21;
    }
  }

  return (_DWORD *)v9;
}

uint64_t sub_188D39700@<X0>( uint64_t a1@<X0>, uint64_t a2@<X2>, unsigned int a3@<W3>, void (*a4)(char *, char *)@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, void *a8@<X8>, uint64_t a9)
{
  __int128 v38 = a4;
  uint64_t v39 = a5;
  unsigned int v42 = a3;
  unint64_t v40 = a8;
  uint64_t v12 = *(void *)(a6 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](a1);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v17 = (char *)&v37 - v16;
  uint64_t v20 = _HashNode.UnsafeHandle.itemPtr(at:)(0, v18, v19);
  uint64_t v41 = *(void *)(a2 + 8);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v21(v17, v20, a6);
  v21(v15, v20, a6);
  uint64_t v22 = sub_188DF5A9C();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v12 + 8);
  v23(v15, a6);
  uint64_t v44 = a6;
  uint64_t v45 = a7;
  uint64_t v46 = a9;
  uint64_t v47 = v20;
  uint64_t v24 = (uint64_t *)type metadata accessor for _HashNode(0LL, a6, a7, a9);
  _HashNode.updateValue(_:forKey:_:_:)(v42, (uint64_t)v17, v22, (uint64_t)sub_188D148F0, (uint64_t)v43, v24);
  LOBYTE(v15) = v25;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v23)(v17, a6);
  if ((v15 & 1) != 0)
  {
    uint64_t v31 = 0LL;
  }

  else
  {
    uint64_t v32 = nullsub_1(v27 + 16, v27 + 32, a6, a7, a9);
    uint64_t v33 = v48;
    uint64_t result = sub_188D398E0(v32, v34, 0LL, v27, v29, v38, v39, v20, a6, a7);
    if (v33) {
      return result;
    }
    uint64_t v31 = 1LL;
  }

  BOOL v35 = __OFSUB__(v41, v31);
  uint64_t v36 = v41 - v31;
  if (v35) {
    __break(1u);
  }
  else {
    void *v40 = v36;
  }
  return result;
}

uint64_t sub_188D398E0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(char *, char *), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v30 = a7;
  uint64_t v31 = a6;
  uint64_t v11 = *(void *)(a10 - 8);
  uint64_t v12 = MEMORY[0x1895F8858](a1);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = MEMORY[0x1895F8858](v12);
  uint64_t v17 = (char *)&v30 - v16;
  MEMORY[0x1895F8858](v15);
  uint64_t v19 = (char *)&v30 - v18;
  uint64_t v23 = _HashNode.UnsafeHandle.itemPtr(at:)(v22, v20, v21);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  char v25 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v25(v17, a8 + *(int *)(TupleTypeMetadata2 + 48), a10);
  uint64_t v26 = v23 + *(int *)(TupleTypeMetadata2 + 48);
  v25(v14, v26, a10);
  uint64_t v27 = v32;
  v31(v17, v14);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v11 + 8);
  v28(v14, a10);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v28)(v17, a10);
  if (!v27) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 40))(v26, v19, a10);
  }
  return result;
}

_DWORD *_HashNode._merge(_:_:_:)( unsigned int a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, char *), uint64_t a5, void *a6)
{
  uint64_t v12 = a6[2];
  uint64_t v13 = a6[3];
  uint64_t v14 = a6[4];
  if (_HashNode.isCollisionNode.getter(*v6, v6[1], v12, v13, v14)
    || _HashNode.isCollisionNode.getter(a2, a3, v12, v13, v14))
  {
    return (_DWORD *)_HashNode._merge_slow(_:_:_:)(a1, a2, a3, a4, a5, a6);
  }

  uint64_t v16 = (int *)nullsub_1(a2 + 16, a2 + 32, v12, v13, v14);
  uint64_t result = sub_188D39DB0(v16, v17, v6, a4, a5, a1, v12, v13, &v20, v14);
  if (!v19) {
    return (_DWORD *)v20;
  }
  return result;
}

uint64_t _HashNode._merge_slow(_:_:_:)( unsigned int a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, char *), uint64_t a5, void *a6)
{
  uint64_t v9 = a6[2];
  uint64_t v10 = a6[3];
  uint64_t v11 = a6[4];
  uint64_t v12 = *v6;
  uint64_t v29 = v6[1];
  BOOL v13 = _HashNode.isCollisionNode.getter(*v6, v29, v9, v10, v11);
  BOOL v14 = _HashNode.isCollisionNode.getter(a2, a3, v9, v10, v11);
  if (!v13)
  {
    Swift::Bool v19 = _HashNode.isUnique()();
    nullsub_1(a2 + 16, a2 + 32, v9, v10, v11);
    uint64_t result = (uint64_t)sub_188D3BB14(v20, a1, v6, v19, a2, a3, a4, &v34, a5, v9, v10, v11);
    if (v32) {
      return result;
    }
    return v34;
  }

  if (!v14)
  {
    uint64_t v21 = (int *)nullsub_1(a2 + 16, a2 + 32, v9, v10, v11);
    uint64_t result = sub_188D3B538(v21, v22, v6, a1, (void (*)(char *, char *))a4, a5, a2, a3, &v34, v9, v10);
    if (v32) {
      return result;
    }
    return v34;
  }

  uint64_t v15 = _HashNode.collisionHash.getter(v12, v29, v9, v10, v11);
  if (v15 == _HashNode.collisionHash.getter(a2, a3, v9, v10, v11))
  {
    uint64_t v16 = (unsigned int *)nullsub_1(a2 + 16, a2 + 32, v9, v10, v11);
    uint64_t result = sub_188D3AEC8(v16, v17, v6, (void (*)(char *, char *))a4, a5, v9, v10, v11, &v34);
    if (!v32) {
      return v34;
    }
  }

  else
  {
    unint64_t v23 = _HashNode.collisionHash.getter(v12, v29, v9, v10, v11);
    unint64_t v24 = _HashNode.collisionHash.getter(a2, a3, v9, v10, v11);
    swift_retain();
    uint64_t v26 = sub_188DA84DC(a1, v12, v29, v23, a2, a3, v24, v9, v25, v10, v11);
    uint64_t v28 = v27;
    swift_release();
    swift_release();
    uint64_t result = a3;
    *uint64_t v6 = v26;
    v6[1] = v28;
  }

  return result;
}

_DWORD *sub_188D39DB0@<X0>( int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void (*a4)(uint64_t, char *)@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  uint64_t v192 = a5;
  unint64_t v187 = (void (*)(char *, char *))a4;
  uint64_t v199 = a2;
  unint64_t v203 = a1;
  uint64_t v182 = a9;
  uint64_t v14 = a10;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v184 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v16 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  unint64_t v177 = &v173[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v18 = MEMORY[0x1895F8858](v16);
  uint64_t v179 = &v173[-v19];
  uint64_t v20 = MEMORY[0x1895F8858](v18);
  uint64_t v185 = &v173[-v21];
  uint64_t v22 = MEMORY[0x1895F8858](v20);
  uint64_t v193 = &v173[-v23];
  uint64_t v188 = *(void *)(a7 - 8);
  MEMORY[0x1895F8858](v22);
  __int128 v181 = &v173[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v197 = (uint64_t *)type metadata accessor for _HashNode(0LL, a7, a8, a10);
  Swift::Bool v25 = _HashNode.isUnique()();
  uint64_t v26 = (unsigned int *)nullsub_1(*a3 + 16LL, *a3 + 32LL, a7, a8, a10);
  unsigned int v29 = *v26;
  unsigned int v28 = v26[1];
  unint64_t v194 = a3;
  uint64_t v195 = a7;
  uint64_t v198 = a10;
  uint64_t v196 = TupleTypeMetadata2;
  uint64_t v189 = a8;
  LODWORD(v186) = a6;
  if (v29)
  {
    uint64_t v30 = 0LL;
    unsigned int v176 = a6 + 5;
    uint64_t v31 = v203;
    while (2)
    {
      int v32 = *v31;
      uint64_t v191 = v30;
      while (1)
      {
        unsigned int v33 = __clz(__rbit32(v29));
        v29 &= v29 - 1;
        int v34 = 1 << v33;
        if (((1 << v33) & v32) != 0)
        {
          v27.i32[0] = (v34 - 1) & v32;
          uint8x8_t v36 = (uint8x8_t)vcnt_s8(v27);
          v36.i16[0] = vaddlv_u8(v36);
          uint64_t v37 = v195;
          uint64_t v38 = v189;
          uint64_t v183 = (_BYTE *)_HashNode.UnsafeHandle.itemPtr(at:)(v36.u32[0], (uint64_t)v31, v199);
          v39.i32[0] = *(_DWORD *)nullsub_1(*a3 + 16LL, *a3 + 32LL, v37, v38, v14) & ~(-1 << (v33 & 0x1F));
          uint8x8_t v40 = (uint8x8_t)vcnt_s8(v39);
          v40.i16[0] = vaddlv_u8(v40);
          LODWORD(v180) = v40.i32[0];
          uint64_t v41 = nullsub_1(*a3 + 16LL, *a3 + 32LL, v37, v38, v14);
          int v178 = v42;
          swift_retain();
          uint64_t v43 = v41;
          uint64_t v44 = v190;
          sub_188D3AB64(v43, (uint64_t)v183, v37, &v200);
          swift_release();
          if (v200 == 1)
          {
            _HashNode.ensureUnique(isUnique:)(v25);
            uint64_t v45 = v189;
            uint64_t v46 = nullsub_1(*a3 + 16LL, *a3 + 32LL, v37, v189, v14);
            uint64_t v171 = v14;
            uint64_t result = (_DWORD *)sub_188D3B3B8(v46, v47, v180, v187, v192, (uint64_t)v183, v37, v45);
            if (v44) {
              return result;
            }
            uint64_t v190 = 0LL;
            uint64_t v30 = v191;
          }

          else
          {
            uint64_t v190 = v44;
            uint64_t v74 = v188;
            unint64_t v75 = v181;
            uint64_t v76 = (uint64_t)v183;
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v188 + 16))(v181, v183, v37);
            int v178 = (void (*)(_BYTE *, _BYTE *, uint64_t))sub_188DF5A9C();
            uint64_t v77 = (*(uint64_t (**)(_BYTE *, uint64_t))(v74 + 8))(v75, v37);
            MEMORY[0x1895F8858](v77);
            uint64_t v169 = v37;
            uint64_t v170 = v189;
            uint64_t v171 = v14;
            uint64_t v172 = v76;
            _HashNode.ensureUniqueAndSpawnChild(isUnique:level:replacing:itemSlot:newHash:_:)( v25,  v186,  v33,  v180,  (unint64_t)v178,  (uint64_t)sub_188D148F0,  (uint64_t)&v173[-48],  v197);
            a3 = v194;
            uint64_t v30 = v191 + 1;
          }

          goto LABEL_18;
        }

        int v35 = v31[1];
        if ((v35 & v34) != 0) {
          break;
        }
        if (!v29) {
          goto LABEL_20;
        }
      }

      v27.i32[0] = v35 & (v34 - 1);
      uint8x8_t v49 = (uint8x8_t)vcnt_s8(v27);
      v49.i16[0] = vaddlv_u8(v49);
      uint64_t v50 = v195;
      uint64_t v51 = v189;
      uint64_t result = (_DWORD *)_HashNode.UnsafeHandle.childPtr(at:)(v49.u32[0], (uint64_t)v31, v199);
      uint64_t v52 = *(void *)(v184 + 72);
      BOOL v53 = __OFSUB__(16LL, v52);
      uint64_t v54 = 16 - v52;
      if (v53)
      {
        __break(1u);
        return result;
      }

      unint64_t v180 = result;
      unint64_t v55 = v197;
      _HashNode.ensureUnique(isUnique:withFreeSpace:)(v25, v54 & ~(v54 >> 63));
      uint64_t v56 = v196;
      uint64_t v183 = &v193[*(int *)(v196 + 48)];
      _HashNode.removeItem(at:)((uint64_t)v193, (uint64_t)v183, v33, v55);
      uint64_t v57 = *((void *)v180 + 1);
      unint64_t v175 = *(void (**)(_BYTE *, uint64_t))v180;
      uint64_t v200 = (uint64_t)v175;
      uint64_t v201 = v57;
      uint64_t v58 = v185;
      uint64_t v59 = &v185[*(int *)(v56 + 48)];
      uint64_t v60 = v188;
      unint64_t v180 = *(_DWORD **)(v188 + 16);
      ((void (*)(_BYTE *, _BYTE *, uint64_t))v180)(v185, v193, v50);
      uint64_t v61 = *(void *)(v51 - 8);
      int v178 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v61 + 16);
      v178(v59, v183, v51);
      swift_retain();
      unint64_t v175 = (void (*)(_BYTE *, uint64_t))sub_188DF5A9C();
      (*(void (**)(_BYTE *, uint64_t))(v60 + 8))(v58, v50);
      (*(void (**)(_BYTE *, uint64_t))(v61 + 8))(v59, v51);
      uint64_t v62 = v179;
      unint64_t v63 = &v179[*(int *)(v196 + 48)];
      uint64_t v64 = (uint64_t)v193;
      ((void (*)(_BYTE *, _BYTE *, uint64_t))v180)(v179, v193, v50);
      uint64_t v65 = ((uint64_t (*)(_BYTE *, _BYTE *, uint64_t))v178)(v63, v183, v51);
      MEMORY[0x1895F8858](v65);
      uint64_t v169 = v50;
      uint64_t v170 = v51;
      uint64_t v171 = v198;
      uint64_t v172 = (uint64_t)v62;
      _HashNode.updateValue(_:forKey:_:_:)(v176, v64, (uint64_t)v175, (uint64_t)sub_188D148F0, (uint64_t)&v173[-48], v197);
      LOBYTE(v64) = v66;
      uint64_t v68 = v67;
      unsigned int v174 = v69;
      unint64_t v70 = v62;
      uint64_t v71 = v196;
      unint64_t v175 = *(void (**)(_BYTE *, uint64_t))(v184 + 8);
      v175(v70, v196);
      if ((v64 & 1) != 0)
      {
        uint64_t v14 = v198;
        uint64_t v72 = v71;
        unint64_t v73 = v175;
      }

      else
      {
        uint64_t v78 = *(int *)(v71 + 48);
        uint64_t v79 = (uint64_t)v177;
        uint64_t v80 = &v177[v78];
        ((void (*)(_BYTE *, _BYTE *, uint64_t))v180)(v177, v193, v50);
        v178(v80, v183, v51);
        uint64_t v14 = v198;
        uint64_t v81 = nullsub_1(v68 + 16, v68 + 32, v50, v51, v198);
        uint64_t v171 = v14;
        uint64_t v82 = v190;
        sub_188D3C068(v81, v83, 0LL, v68, v174, (void (*)(uint64_t, char *))v187, v192, v79, v50, v51);
        if (v82)
        {
          uint64_t v167 = v196;
          unint64_t v168 = (void (*)(uint64_t, uint64_t))v175;
          v175(v193, v196);
          v168(v79, v167);
          return (_DWORD *)swift_release();
        }

        uint64_t v190 = 0LL;
        uint64_t v72 = v196;
        unint64_t v73 = v175;
        v175((_BYTE *)v79, v196);
      }

      __int128 v84 = v191 - 1;
      uint64_t v85 = v201;
      uint64_t v86 = swift_retain();
      a3 = v194;
      sub_188DF6B94(v86, v85, v33, v197);
      swift_release();
      v73(v193, v72);
      uint64_t v30 = &v84[v201];
      swift_release();
LABEL_18:
      Swift::Bool v25 = 1;
      uint64_t v31 = v203;
      if (v29) {
        continue;
      }
      break;
    }

    uint64_t v191 = v30;
LABEL_20:
    a8 = v189;
    a7 = v195;
    if (v28) {
      goto LABEL_23;
    }
  }

  else
  {
    uint64_t v191 = 0LL;
    while (v28)
    {
LABEL_23:
      while (1)
      {
        char v87 = __clz(__rbit32(v28));
        v28 &= v28 - 1;
        uint64_t v88 = a8;
        v89.i32[0] = *(_DWORD *)(nullsub_1(*a3 + 16LL, *a3 + 32LL, a7, a8, v14) + 4) & ~(-1 << v87);
        int8x8_t v90 = vcnt_s8(v89);
        v90.i16[0] = vaddlv_u8((uint8x8_t)v90);
        unsigned int v91 = v90.i32[0];
        int v92 = 1 << v87;
        if ((*v203 & (1 << v87)) != 0) {
          break;
        }
        int v93 = v203[1];
        if ((v93 & v92) != 0)
        {
          v90.i32[0] = v93 & (v92 - 1);
          uint8x8_t v109 = (uint8x8_t)vcnt_s8(v90);
          v109.i16[0] = vaddlv_u8(v109);
          LODWORD(v193) = v109.i32[0];
          _HashNode.ensureUnique(isUnique:)(v25);
          uint64_t v110 = nullsub_1(*a3 + 16LL, *a3 + 32LL, a7, v88, v14);
          uint64_t v111 = v190;
          uint64_t result = (_DWORD *)sub_188D3ADC0( v110,  v112,  v91,  v186,  (uint64_t)v203,  v199,  v193,  (uint64_t)v187,  &v200,  v192,  a7,  v88,  v14);
          if (v111) {
            return result;
          }
          uint64_t v113 = v200;
          a3[1] += v200;
          uint64_t v190 = 0LL;
          v191 += v113;
          Swift::Bool v25 = 1;
        }

        a8 = v88;
        if (!v28) {
          goto LABEL_35;
        }
      }

      v90.i32[0] = *v203 & (v92 - 1);
      uint8x8_t v94 = (uint8x8_t)vcnt_s8(v90);
      v94.i16[0] = vaddlv_u8(v94);
      uint64_t v95 = a7;
      uint64_t v96 = (_BYTE *)_HashNode.UnsafeHandle.itemPtr(at:)(v94.u32[0], (uint64_t)v203, v199);
      uint64_t v193 = v96;
      _HashNode.ensureUnique(isUnique:)(v25);
      uint64_t v97 = v188;
      __int16 v98 = v181;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v188 + 16))(v181, v96, v95);
      uint64_t v184 = sub_188DF5A9C();
      (*(void (**)(_BYTE *, uint64_t))(v97 + 8))(v98, v95);
      uint64_t v99 = v189;
      uint64_t v100 = nullsub_1(*a3 + 16LL, *a3 + 32LL, v95, v189, v14);
      unsigned int v101 = v91;
      a8 = v99;
      a7 = v95;
      uint64_t v102 = v190;
      sub_188D3AC80(v100, v103, v101, (uint64_t)v193, v184, v95, v99, (uint64_t)&v200, v14);
      if (v200 == 1)
      {
        ++a3[1];
        uint64_t v190 = v102;
        ++v191;
        Swift::Bool v25 = 1;
      }

      else
      {
        uint64_t v104 = v201;
        uint64_t v105 = a8;
        uint64_t v106 = v202;
        uint64_t v107 = nullsub_1(v201 + 16, v201 + 32, v95, v105, v14);
        uint64_t v170 = v105;
        uint64_t v171 = v14;
        a7 = v95;
        uint64_t result = (_DWORD *)sub_188D3B99C(v107, v108, 0LL, v104, v106, v187, v192, (uint64_t)v193, v95, v170);
        if (v102) {
          return result;
        }
        uint64_t v190 = 0LL;
        Swift::Bool v25 = 1;
        a8 = v88;
      }
    }
  }

uint64_t sub_188D3AB64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _BYTE *a4@<X8>)
{
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](a1);
  uint64_t v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v12 = (char *)v24 - v11;
  uint64_t v19 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v14, v13, v18, v15, v16, v17);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v20(v12, v19, a3);
  v20(v10, a2, a3);
  char v21 = sub_188DF7D90();
  uint64_t v22 = *(void (**)(char *, uint64_t))(v7 + 8);
  v22(v10, a3);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v22)(v12, a3);
  *a4 = v21 & 1;
  return result;
}

uint64_t sub_188D3AC80@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v31 = a5;
  uint64_t v29 = a2;
  uint64_t v15 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unsigned int v30 = v18 + 5;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v19, v20);
  uint64_t v33 = a6;
  uint64_t v34 = a7;
  uint64_t v35 = a9;
  uint64_t v36 = a4;
  _HashNode.UnsafeHandle.subscript.unsafeMutableAddressor(a3, a1, v29);
  char v21 = (uint64_t *)type metadata accessor for _HashNode(0LL, a6, a7, a9);
  _HashNode.updateValue(_:forKey:_:_:)(v30, (uint64_t)v17, v31, (uint64_t)sub_188D148F0, (uint64_t)v32, v21);
  char v23 = v22;
  uint64_t v25 = v24;
  LODWORD(a4) = v26;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, a6);
  *(_BYTE *)a8 = v23 & 1;
  *(void *)(a8 + 8) = v25;
  *(_DWORD *)(a8 + 16) = a4;
  return result;
}

uint64_t sub_188D3ADC0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v16 = (a4 + 5);
  uint64_t v17 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(a7, a5, a6, a11, a12, a13);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  _HashNode.UnsafeHandle.subscript.unsafeMutableAddressor(a3, a1, a2);
  uint64_t v20 = type metadata accessor for _HashNode(0LL, a11, a12, a13);
  swift_retain();
  uint64_t v21 = _HashNode.merge(_:_:_:)(v16, v19, v18, a8, a10, v20);
  uint64_t result = swift_release();
  if (!v25) {
    *a9 = v21;
  }
  return result;
}

uint64_t sub_188D3AEC8@<X0>( unsigned int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void (*a4)(char *, char *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v33 = a4;
  uint64_t v34 = a5;
  uint64_t v41 = a2;
  unsigned int v30 = a9;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v31 = (char *)&v30 - v14;
  int8x8_t v39 = (void *)type metadata accessor for _HashNode(0LL, a6, a7, a8);
  uint64_t result = _HashNode.isUnique()();
  int8x8_t v16 = (int8x8_t)*a1;
  unsigned int v17 = a1[1];
  uint8x8_t v40 = a1;
  uint8x8_t v18 = (uint8x8_t)vcnt_s8(v16);
  v18.i16[0] = vaddlv_u8(v18);
  if (v16.i32[0] != v17) {
    v16.i32[0] = v18.i32[0];
  }
  __int32 v38 = v16.i32[0];
  if (v16.i32[0])
  {
    char v19 = result;
    uint64_t v42 = 0LL;
    unsigned int v20 = 0;
    uint64_t v37 = a3[1];
    while (1)
    {
      uint64_t v25 = _HashNode.UnsafeHandle.itemPtr(at:)(v20, (uint64_t)v40, v41);
      nullsub_1(*a3 + 16LL, *a3 + 32LL, a6, a7, a8);
      swift_retain();
      uint64_t v26 = v43;
      sub_188D3B178(v25, a6, a7, a8, (uint64_t)&v44);
      swift_release();
      if (v45 == 1)
      {
        uint64_t v21 = (uint64_t)v31;
        uint64_t v22 = *(int *)(TupleTypeMetadata2 + 48);
        uint64_t v23 = (uint64_t)&v31[v22];
        uint64_t v35 = v25 + v22;
        uint64_t v43 = v26;
        uint64_t v36 = *(void *)(a6 - 8);
        (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v31, v25, a6);
        uint64_t v24 = *(void *)(a7 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v23, v35, a7);
        _HashNode.ensureUniqueAndAppendCollision(isUnique:_:)(v19 & 1, v21, v23, v39);
        (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, a7);
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 8))(v21, a6);
        ++v42;
      }

      else
      {
        uint64_t v27 = v44;
        _HashNode.ensureUnique(isUnique:)(v19 & 1);
        uint64_t v28 = nullsub_1(*a3 + 16LL, *a3 + 32LL, a6, a7, a8);
        uint64_t result = sub_188D3B3B8(v28, v29, v27, v33, v34, v25, a6, a7);
        uint64_t v43 = v26;
        if (v26) {
          return result;
        }
      }

      ++v20;
      char v19 = 1;
      if (v38 == v20) {
        goto LABEL_11;
      }
    }
  }

  uint64_t v42 = 0LL;
LABEL_11:
  *unsigned int v30 = v42;
  return result;
}

uint64_t sub_188D3B178@<X0>( uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  uint64_t v32 = a5;
  uint64_t v9 = _HashNode.UnsafeHandle.reverseItems.getter();
  uint64_t v11 = v10;
  swift_getTupleTypeMetadata2();
  uint64_t v12 = sub_188DF83F0();
  MEMORY[0x1895D7620](MEMORY[0x189618B28], v12);
  sub_188DF7C88();
  __int128 v26 = v28;
  __int128 v27 = v29;
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v25 = a1;
  MEMORY[0x1895D7620](MEMORY[0x189618B48], v12);
  uint64_t v13 = sub_188DF8A14();
  MEMORY[0x1895D7620](MEMORY[0x18961A5E8], v13);
  sub_188DF8234();
  *(void *)&__int128 v28 = v30;
  BYTE8(v28) = v31;
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = v9;
  uint64_t v21 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C74A448);
  return sub_188D1BE44( (void (*)(char *, char *))sub_188D3C2A4,  (uint64_t)v16,  MEMORY[0x18961A520],  (uint64_t)&type metadata for _HashSlot,  v14,  v32);
}

uint64_t sub_188D3B310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v4 + 16))(v6);
  char v7 = sub_188DF7D90();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a3);
  return v7 & 1;
}

uint64_t sub_188D3B3B8( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *, char *), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v29 = a5;
  uint64_t v30 = a4;
  uint64_t v10 = *(void *)(a8 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](a1);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = MEMORY[0x1895F8858](v11);
  int8x8_t v16 = (char *)&v29 - v15;
  MEMORY[0x1895F8858](v14);
  uint64_t v18 = (char *)&v29 - v17;
  uint64_t v22 = _HashNode.UnsafeHandle.itemPtr(at:)(v20, v19, v21);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v24 = v22 + *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v25(v16, v24, a8);
  v25(v13, a6 + *(int *)(TupleTypeMetadata2 + 48), a8);
  uint64_t v26 = v31;
  v30(v16, v13);
  __int128 v27 = *(void (**)(char *, uint64_t))(v10 + 8);
  v27(v13, a8);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v27)(v16, a8);
  if (!v26) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 40))(v24, v18, a8);
  }
  return result;
}

uint64_t sub_188D3B538@<X0>( int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, void (*a5)(char *, char *)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v89 = a8;
  uint64_t v90 = a7;
  uint64_t v86 = a5;
  uint64_t v87 = a6;
  uint64_t v92 = a2;
  uint64_t v15 = *(void *)(a10 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v17 = (char *)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = *v18;
  uint64_t v20 = v18[1];
  uint64_t v93 = v21;
  unint64_t v22 = _HashNode.collisionHash.getter(v19, v20, a10, a11, v21);
  int v24 = *a1;
  int v25 = 1 << (v22 >> a4);
  unsigned int v91 = a9;
  unsigned int v88 = (v22 >> a4) & 0x1F;
  if ((v25 & v24) != 0)
  {
    v23.i32[0] = (v25 - 1) & v24;
    uint8x8_t v26 = (uint8x8_t)vcnt_s8(v23);
    v26.i16[0] = vaddlv_u8(v26);
    unsigned int v84 = v26.i32[0];
    uint64_t v27 = v93;
    uint64_t v28 = _HashNode.UnsafeHandle.itemPtr(at:)(v26.u32[0], (uint64_t)a1, v92);
    uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
    v29(v17, v28, a10);
    uint64_t v85 = sub_188DF5A9C();
    uint64_t v92 = *(void *)(v15 + 8);
    ((void (*)(char *, uint64_t))v92)(v17, a10);
    uint64_t v30 = ((uint64_t (*)(char *, uint64_t, uint64_t))v29)(v17, v28, a10);
    MEMORY[0x1895F8858](v30);
    uint64_t v78 = a10;
    uint64_t v79 = a11;
    uint64_t v80 = v27;
    uint64_t v81 = v28;
    uint64_t v83 = v28;
    uint64_t v31 = (uint64_t *)type metadata accessor for _HashNode(0LL, a10, a11, v27);
    uint64_t v32 = a3;
    _HashNode.updateValue(_:forKey:_:_:)( (a4 + 5),  (uint64_t)v17,  v85,  (uint64_t)sub_188D14720,  (uint64_t)(&v82 - 6),  v31);
    LODWORD(v27) = v33;
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    ((void (*)(char *, uint64_t))v92)(v17, a10);
    LODWORD(v92) = v27;
    if ((v27 & 1) != 0)
    {
      __int32 v38 = v91;
      uint64_t v39 = v93;
LABEL_9:
      uint64_t v63 = v32[1];
      uint64_t v64 = swift_retain();
      uint64_t v65 = v89;
      uint64_t v66 = sub_188D14684(v64, v63, v88, v84, v90, v89, a10, a11, v39);
      uint64_t v67 = v32;
      uint64_t v69 = v68;
      swift_release();
      *uint64_t v67 = v66;
      v67[1] = v69;
      uint64_t result = swift_release();
      BOOL v70 = (v92 & 1) == 0;
      BOOL v58 = __OFSUB__(v65, v70);
      uint64_t v71 = v65 - v70;
      if (!v58)
      {
        *__int32 v38 = v71;
        return result;
      }

      __break(1u);
      goto LABEL_14;
    }

    uint64_t v39 = v93;
    uint64_t v60 = nullsub_1(v35 + 16, v35 + 32, a10, a11, v93);
    uint64_t v80 = v39;
    uint64_t v61 = v96;
    uint64_t result = sub_188D3B99C(v60, v62, 0LL, v35, v37, v86, v87, v83, a10, a11);
    __int32 v38 = v91;
    uint64_t v96 = v61;
    if (!v61) {
      goto LABEL_9;
    }
  }

  else
  {
    uint64_t v40 = v93;
    uint64_t v85 = v20;
    uint64_t v41 = a3;
    int v42 = a1[1];
    if ((v42 & v25) != 0)
    {
      uint64_t v43 = v90;
      v23.i32[0] = v42 & (v25 - 1);
      uint8x8_t v44 = (uint8x8_t)vcnt_s8(v23);
      v44.i16[0] = vaddlv_u8(v44);
      uint64_t v45 = (a4 + 5);
      unsigned int v84 = v44.i32[0];
      uint64_t v46 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v44.u32[0], a1, v92, a10, a11, v93);
      uint64_t v47 = *v46;
      uint64_t v48 = v46[1];
      uint8x8_t v49 = (void *)type metadata accessor for _HashNode(0LL, a10, a11, v40);
      swift_retain();
      uint64_t v50 = v96;
      _HashNode._merge(_:_:_:)(v45, v47, v48, v86, v87, v49);
      uint64_t result = swift_release();
      uint64_t v96 = v50;
      if (!v50)
      {
        uint64_t v52 = sub_188D10D98();
        uint64_t v94 = _HashNode.copy(withFreeSpace:)(v52, v43, v89, a10, a11, v40);
        uint64_t v95 = v53;
        uint64_t v55 = *v41;
        uint64_t v54 = v41[1];
        swift_retain();
        sub_188D8AD24(v88, v84, v55, v54, v49);
        swift_release();
        uint64_t v56 = v95;
        *uint64_t v41 = v94;
        v41[1] = v56;
        uint64_t result = swift_release();
        uint64_t v57 = v41[1];
        BOOL v58 = __OFSUB__(v57, v85);
        uint64_t v59 = v57 - v85;
        if (!v58)
        {
          *unsigned int v91 = v59;
          return result;
        }

uint64_t sub_188D3B99C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(char *, char *), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v30 = a7;
  uint64_t v31 = a6;
  uint64_t v11 = *(void *)(a10 - 8);
  uint64_t v12 = MEMORY[0x1895F8858](a1);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = MEMORY[0x1895F8858](v12);
  uint64_t v17 = (char *)&v30 - v16;
  MEMORY[0x1895F8858](v15);
  uint64_t v19 = (char *)&v30 - v18;
  uint64_t v23 = _HashNode.UnsafeHandle.itemPtr(at:)(v22, v20, v21);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v25 = v23 + *(int *)(TupleTypeMetadata2 + 48);
  uint8x8_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v26(v17, v25, a10);
  v26(v14, a8 + *(int *)(TupleTypeMetadata2 + 48), a10);
  uint64_t v27 = v32;
  v31(v17, v14);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v11 + 8);
  v28(v14, a10);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v28)(v17, a10);
  if (!v27) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 40))(v25, v19, a10);
  }
  return result;
}

_DWORD *sub_188D3BB14@<X0>( unint64_t *a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, int a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X6>, void (*a7)(uint64_t, char *)@<X7>, uint64_t *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v99 = a6;
  uint64_t v95 = a5;
  LODWORD(v94) = a4;
  uint64_t v88 = a9;
  uint64_t v89 = a7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v97 = *(void (**)(char *, uint64_t))(TupleTypeMetadata2 - 8);
  uint64_t v16 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v87 = (char *)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = MEMORY[0x1895F8858](v16);
  uint64_t v90 = (char *)&v82 - v19;
  uint64_t v20 = MEMORY[0x1895F8858](v18);
  unsigned int v22 = (char *)&v82 - v21;
  MEMORY[0x1895F8858](v20);
  int v24 = (char *)&v82 - v23;
  unint64_t v25 = *a1;
  uint64_t v93 = a2;
  unint64_t v26 = v25 >> a2;
  int v98 = (v25 >> a2) & 0x1F;
  uint64_t result = (_DWORD *)nullsub_1(*a3 + 16LL, *a3 + 32LL, a10, a11, a12);
  int v28 = 1 << v26;
  if ((*result & v28) != 0)
  {
    uint64_t v92 = a3;
    uint64_t v29 = *((void *)v97 + 9);
    BOOL v30 = __OFSUB__(16LL, v29);
    uint64_t v31 = 16 - v29;
    if (v30)
    {
      __break(1u);
    }

    else
    {
      uint64_t v85 = a8;
      Swift::Int v32 = v31 & ~(v31 >> 63);
      uint64_t v96 = a12;
      int v33 = (uint64_t *)type metadata accessor for _HashNode(0LL, a10, a11, a12);
      unsigned int v91 = v33;
      _HashNode.ensureUnique(isUnique:withFreeSpace:)(v94 & 1, v32);
      uint64_t v34 = TupleTypeMetadata2;
      uint64_t v35 = (uint64_t)&v24[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v86 = v24;
      _HashNode.removeItem(at:)((uint64_t)v24, v35, v98, v33);
      uint64_t v36 = &v22[*(int *)(v34 + 48)];
      uint64_t v37 = *(void *)(a10 - 8);
      __int32 v38 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
      v38(v22, v24, a10);
      uint64_t v39 = *(void *)(a11 - 8);
      uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 16);
      v40(v36, v35, a11);
      uint64_t v94 = sub_188DF5A9C();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v22, a10);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v36, a11);
      uint64_t v101 = v95;
      uint64_t v102 = v99;
      LODWORD(v93) = v93 + 5;
      uint64_t v41 = v90;
      int v42 = &v90[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v43 = (uint64_t)v86;
      uint64_t v83 = (void (*)(char *, uint64_t, uint64_t))v38;
      v38(v90, v86, a10);
      uint64_t v84 = v35;
      uint64_t v82 = v40;
      uint64_t v44 = ((uint64_t (*)(char *, uint64_t, uint64_t))v40)(v42, v35, a11);
      MEMORY[0x1895F8858](v44);
      uint64_t v78 = a10;
      uint64_t v79 = a11;
      uint64_t v80 = v96;
      uint64_t v81 = v41;
      swift_retain();
      uint64_t v45 = v43;
      _HashNode.updateValue(_:forKey:_:_:)( v93,  v43,  v94,  (uint64_t)sub_188D14720,  (uint64_t)(&v82 - 6),  v91);
      int v47 = v46;
      uint64_t v49 = v48;
      uint64_t v51 = v50;
      uint64_t v52 = (void (*)(char *, uint64_t))*((void *)v97 + 1);
      uint64_t v53 = v41;
      int v54 = v47;
      uint64_t v55 = TupleTypeMetadata2;
      v52(v53, TupleTypeMetadata2);
      if ((v54 & 1) == 0)
      {
        LODWORD(v95) = v54;
        uint64_t v97 = v52;
        uint64_t v56 = *(int *)(v55 + 48);
        uint64_t v57 = (uint64_t)v87;
        uint64_t v58 = v51;
        uint64_t v59 = &v87[v56];
        v83(v87, v45, a10);
        v82(v59, v84, a11);
        uint64_t v60 = v96;
        uint64_t v61 = nullsub_1(v49 + 16, v49 + 32, a10, a11, v96);
        uint64_t v80 = v60;
        uint64_t v62 = v100;
        sub_188D3C068(v61, v63, 0LL, v49, v58, v89, v88, v57, a10, a11);
        uint64_t v100 = v62;
        if (v62)
        {
          swift_release();
          uint64_t v64 = TupleTypeMetadata2;
          uint64_t v65 = (uint64_t (*)(uint64_t, uint64_t))v97;
          v97((char *)v45, TupleTypeMetadata2);
          return (_DWORD *)v65(v57, v64);
        }

        uint64_t v75 = v57;
        uint64_t v55 = TupleTypeMetadata2;
        uint64_t v52 = v97;
        v97((char *)v75, TupleTypeMetadata2);
        LOBYTE(v54) = v95;
      }

      sub_188DF6B94(v101, v102, v98, v91);
      swift_release();
      uint64_t result = (_DWORD *)((uint64_t (*)(uint64_t, uint64_t))v52)(v45, v55);
      BOOL v76 = (v54 & 1) == 0;
      BOOL v30 = __OFSUB__(v99, v76);
      uint64_t v77 = v99 - v76;
      if (!v30)
      {
        *uint64_t v85 = v77;
        return result;
      }
    }

    __break(1u);
    return result;
  }

  int v66 = *(_DWORD *)(nullsub_1(*a3 + 16LL, *a3 + 32LL, a10, a11, a12) + 4) & v28;
  uint64_t v67 = (void *)type metadata accessor for _HashNode(0LL, a10, a11, a12);
  if (v66)
  {
    _HashNode.ensureUnique(isUnique:)(v94 & 1);
    uint64_t v68 = nullsub_1(*a3 + 16LL, *a3 + 32LL, a10, a11, a12);
    uint64_t v69 = v100;
    uint64_t result = (_DWORD *)sub_188D3C1A0(v68, v70, v98, v93, v95, v99, (uint64_t)v89, v88, &v101, v71, a10, a11, a12);
    uint64_t v100 = v69;
    if (!v69)
    {
      uint64_t v72 = v101;
      a3[1] += v101;
      *a8 = v72;
    }
  }

  else
  {
    _HashNode.ensureUnique(isUnique:withFreeSpace:)(v94 & 1, 16LL);
    uint64_t v73 = swift_retain();
    uint64_t v74 = v99;
    sub_188DF6B94(v73, v99, v98, v67);
    uint64_t result = (_DWORD *)swift_release();
    *a8 = v74;
  }

  return result;
}

uint64_t sub_188D3C068( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, char *), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = *(void *)(a10 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](a1);
  uint64_t v15 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v17 = (char *)v27 - v16;
  uint64_t v21 = _HashNode.UnsafeHandle.itemPtr(at:)(v20, v18, v19);
  uint64_t v22 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  uint64_t v23 = a8 + v22;
  uint64_t v24 = v21 + v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v21 + v22, a10);
  uint64_t v25 = v27[1];
  a6(v23, v15);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, a10);
  if (!v25) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 40))(v24, v17, a10);
  }
  return result;
}

uint64_t sub_188D3C1A0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, int8x8_t a10@<D0>, uint64_t a11, uint64_t a12, uint64_t a13)
{
  a10.i32[0] = *(_DWORD *)(a1 + 4) & ~(-1 << a3);
  uint8x8_t v18 = (uint8x8_t)vcnt_s8(a10);
  v18.i16[0] = vaddlv_u8(v18);
  _HashNode.UnsafeHandle.childPtr(at:)(v18.u32[0], a1, a2);
  uint64_t v19 = type metadata accessor for _HashNode(0LL, a11, a12, a13);
  uint64_t result = _HashNode._merge(_:_:_:)((a4 + 5), a5, a6, a7, a8, v19);
  if (!v22) {
    *a9 = result;
  }
  return result;
}

uint64_t sub_188D3C284(uint64_t a1)
{
  return sub_188D3B310(a1, *(void *)(v1 + 40), *(void *)(v1 + 16)) & 1;
}

_DWORD *sub_188D3C2A4@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(v2 + 48) + ~*result;
  return result;
}

uint64_t OrderedSet.init(arrayLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1;
  uint64_t v5 = sub_188DF8120();
  uint64_t v6 = (uint64_t (*)(char *, uint64_t, uint64_t))MEMORY[0x1895D7620](MEMORY[0x189618480], v5);
  return OrderedSet.init<A>(_:)((uint64_t)&v8, a2, v5, a3, v6);
}

uint64_t sub_188D3C324@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = OrderedSet.init(arrayLiteral:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t _isCollectionsInternalCheckingEnabled.getter()
{
  return 0LL;
}

uint64_t static OrderedSet.== infix(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = type metadata accessor for OrderedSet(0LL, a5, a6, a4);
  MEMORY[0x1895D7620](&protocol conformance descriptor for OrderedSet<A>, v6);
  return sub_188DF8078() & 1;
}

uint64_t sub_188D3C3D4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static OrderedSet.== infix(_:_:)(*a1, a1[1], *a2, a2[1], *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t sub_188D3C3F4(uint64_t result)
{
  if (result < 1) {
    return result;
  }
  unint64_t v4 = v1[1];
  unint64_t v5 = v4 - result;
  if (v4 < result)
  {
    __break(1u);
    goto LABEL_12;
  }

  if (v5 >= 0xFFFFFFFFFFFFFFC0LL)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    uint64_t result = (uint64_t)sub_188CF73DC(v5);
    unint64_t v5 = result;
LABEL_8:
    if (v3 >= *(void *)(v5 + 16))
    {
      __break(1u);
    }

    else
    {
      *(void *)(v5 + 8 * v3 + 32) &= ~(-1LL << v2);
      *uint64_t v1 = v5;
    }

    return result;
  }

  unint64_t v6 = (v5 + 63) >> 6;
  unint64_t v7 = *(void *)(*v1 + 16);
  uint64_t result = v7 - v6;
  if (v7 > v6) {
    uint64_t result = sub_188DF6D8C(result);
  }
  v1[1] = v5;
  char v2 = v5 & 0x3F;
  if ((v5 & 0x3F) != 0)
  {
    unint64_t v3 = v5 >> 6;
    unint64_t v5 = *v1;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_13;
  }

  return result;
}

uint64_t sub_188D3C4B4(uint64_t result, char a2)
{
  if (result < 1) {
    return result;
  }
  unint64_t v7 = (unint64_t)v3[1];
  unint64_t v8 = v7 + result;
  if (__CFADD__(v7, result))
  {
    __break(1u);
    goto LABEL_19;
  }

  if (v8 >= 0xFFFFFFFFFFFFFFC0LL)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  char v2 = *v3;
  unint64_t v4 = *((void *)*v3 + 2);
  unint64_t v5 = (v8 + 63) >> 6;
  if ((a2 & 1) == 0)
  {
    uint64_t result = sub_188D2EF64(v5 - v4, 0LL);
LABEL_16:
    v3[1] = (char *)v8;
    return result;
  }

  unint64_t v6 = v7 >> 6;
  if (v7 >> 6 >= v4) {
    goto LABEL_9;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_22;
  }
  while (1)
  {
    if (v6 >= *((void *)v2 + 2))
    {
      __break(1u);
LABEL_24:
      uint64_t result = (uint64_t)sub_188CF73DC((uint64_t)v2);
      char v2 = (char *)result;
      goto LABEL_12;
    }

    *(void *)&v2[8 * v6 + 32] |= -1LL << v7;
    *unint64_t v3 = v2;
LABEL_9:
    uint64_t v9 = v5 - v4;
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    char v2 = sub_188CF73DC((uint64_t)v2);
  }

  unint64_t v7 = v8 >> 6;
  unint64_t v4 = -1LL;
  uint64_t result = sub_188D2EF64(v9, 0xFFFFFFFFFFFFFFFFLL);
  char v2 = *v3;
  if (v8 >> 6 >= *((void *)*v3 + 2)) {
    goto LABEL_16;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_24;
  }
LABEL_12:
  if (v7 < *((void *)v2 + 2))
  {
    *(void *)&v2[8 * v7 + 32] &= ~(v4 << (v8 & 0x3F));
    *unint64_t v3 = v2;
    goto LABEL_16;
  }

  __break(1u);
  return result;
}

uint64_t BitArray._storage.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*BitArray._storage.modify())()
{
  return nullsub_1;
}

uint64_t BitArray._count.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t BitArray._count.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*BitArray._count.modify())()
{
  return nullsub_1;
}

void *initializeBufferWithCopyOfBuffer for BitArray(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for BitArray(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

void *assignWithTake for BitArray(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for _RawHashNode(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _RawHashNode(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for BitArray()
{
  return &type metadata for BitArray;
}

uint64_t sub_188D3C7A8()
{
  uint64_t v4 = v1[1];
  BOOL v5 = v4 != 0;
  uint64_t v6 = v4 - 1;
  if (!v5)
  {
    __break(1u);
    goto LABEL_13;
  }

  v1[1] = v6;
  uint64_t v0 = *v1;
  unint64_t v3 = *(void *)(*v1 + 16);
  char v2 = v6 & 0x3F;
  if ((v6 & 0x3F) != 0)
  {
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      if (!v3)
      {
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
        goto LABEL_16;
      }

char *sub_188D3C888(char *result, char *a2)
{
  int64_t v2 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v3 = v2 + 1;
  if (__OFADD__(v2, 1LL))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v4 = MEMORY[0x18961AFE8];
  if (v2 == -1) {
    return (char *)v4;
  }
  uint64_t v6 = result;
  uint64_t v14 = MEMORY[0x18961AFE8];
  uint64_t result = sub_188D5A120(0LL, v3 & ~(v3 >> 63), 0);
  if ((v3 & 0x8000000000000000LL) == 0)
  {
    BOOL v7 = 0;
    uint64_t v4 = v14;
    uint64_t v8 = v6 - 1;
    while (a2 != v8)
    {
      if (v7) {
        goto LABEL_22;
      }
      uint64_t v13 = 0LL;
      uint64_t result = (char *)MEMORY[0x1895D76E0](&v13, 8LL);
      uint64_t v9 = v13;
      uint64_t v14 = v4;
      unint64_t v11 = *(void *)(v4 + 16);
      unint64_t v10 = *(void *)(v4 + 24);
      if (v11 >= v10 >> 1)
      {
        uint64_t result = sub_188D5A120((char *)(v10 > 1), v11 + 1, 1);
        uint64_t v4 = v14;
      }

      *(void *)(v4 + 16) = v11 + 1;
      *(void *)(v4 + 8 * v11 + 32) = v9;
      BOOL v7 = v6 == a2;
      if (v6 == a2)
      {
        uint64_t v6 = 0LL;
      }

      else if (__OFADD__(v6++, 1LL))
      {
        goto LABEL_18;
      }

      if (a2 == ++v8) {
        return (char *)v4;
      }
    }

    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

char *sub_188D3C9BC(char *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = result;
  uint64_t v5 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v6 = v5 + 1;
  if (__OFADD__(v5, 1LL))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v7 = v4;
  uint64_t v8 = MEMORY[0x18961AFE8];
  if (v5 == -1) {
    return (char *)v8;
  }
  uint64_t v10 = a3;
  uint64_t v20 = MEMORY[0x18961AFE8];
  uint64_t result = sub_188D5A120(0LL, v6 & ~(v6 >> 63), 0);
  if ((v6 & 0x8000000000000000LL) == 0)
  {
    BOOL v11 = 0;
    uint64_t v8 = v20;
    uint64_t v12 = v10 - 1;
    while (a4 != v12)
    {
      if (v11) {
        goto LABEL_24;
      }
      uint64_t v18 = v10;
      uint64_t result = (char *)((char *(*)(uint64_t *__return_ptr, uint64_t *))v17)(&v19, &v18);
      if (v7)
      {
        swift_release();
        return (char *)v8;
      }

      uint64_t v7 = 0LL;
      uint64_t v13 = v19;
      uint64_t v20 = v8;
      unint64_t v15 = *(void *)(v8 + 16);
      unint64_t v14 = *(void *)(v8 + 24);
      if (v15 >= v14 >> 1)
      {
        uint64_t result = sub_188D5A120((char *)(v14 > 1), v15 + 1, 1);
        uint64_t v8 = v20;
      }

      *(void *)(v8 + 16) = v15 + 1;
      *(void *)(v8 + 8 * v15 + 32) = v13;
      BOOL v11 = v10 == a4;
      if (v10 == a4)
      {
        uint64_t v10 = 0LL;
      }

      else if (__OFADD__(v10++, 1LL))
      {
        goto LABEL_20;
      }

      if (a4 == ++v12) {
        return (char *)v8;
      }
    }

    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

int64_t sub_188D3CB1C(unint64_t a1)
{
  if ((a1 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }

  if (!a1) {
    return MEMORY[0x18961AFE8];
  }
  unint64_t v3 = a1 >> 6;
  char v4 = a1 & 0x3F;
  BOOL v5 = (a1 & 0x3F) == 0 && a1 > 0x3F;
  int64_t v1 = v3 - v5;
  int64_t v2 = sub_188D3C888(0LL, (char *)(v3 - v5));
  if (v5)
  {
LABEL_13:
    int64_t result = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v6 = -1LL;
    if ((result & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_14;
  }

  uint64_t v6 = ~(-1LL << v4);
  int64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0) {
    goto LABEL_8;
  }
LABEL_14:
  int64_t result = (int64_t)sub_188CF73DC((uint64_t)v2);
  int64_t v2 = (char *)result;
LABEL_8:
  if (v1 >= *((void *)v2 + 2))
  {
    __break(1u);
  }

  else
  {
    *(void *)&v2[8 * v1 + 32] &= v6;
    return _s19CollectionsInternal6BitSetV6_wordsACSayAA07_UnsafecD0V5_WordVG_tcfC_0((int64_t)v2);
  }

  return result;
}

int64_t static BitSet.random<A>(upTo:using:)(unint64_t a1)
{
  if ((a1 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }

  if (!a1) {
    return MEMORY[0x18961AFE8];
  }
  char v3 = a1 & 0x3F;
  BOOL v4 = (a1 & 0x3F) == 0 && a1 > 0x3F;
  uint64_t v1 = (a1 >> 6) - v4;
  MEMORY[0x1895F8858](a1);
  _OWORD v10[2] = v5;
  void v10[3] = v6;
  v10[4] = v7;
  int64_t v2 = sub_188D3C9BC((char *)sub_188D3CD10, (uint64_t)v10, 0LL, v1);
  if (v4)
  {
LABEL_13:
    int64_t result = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = -1LL;
    if ((result & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_14;
  }

  uint64_t v8 = ~(-1LL << v3);
  int64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0) {
    goto LABEL_8;
  }
LABEL_14:
  int64_t result = (int64_t)sub_188CF73DC((uint64_t)v2);
  int64_t v2 = (char *)result;
LABEL_8:
  if (v1 >= *((void *)v2 + 2))
  {
    __break(1u);
  }

  else
  {
    *(void *)&v2[8 * v1 + 32] &= v8;
    return _s19CollectionsInternal6BitSetV6_wordsACSayAA07_UnsafecD0V5_WordVG_tcfC_0((int64_t)v2);
  }

  return result;
}

uint64_t sub_188D3CD10@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_188DF7C34();
  *a1 = v3;
  return result;
}

unint64_t sub_188D3CD88()
{
  unint64_t result = qword_18C74A450;
  if (!qword_18C74A450)
  {
    unint64_t result = MEMORY[0x1895D7620](MEMORY[0x189618D00], MEMORY[0x189618CD8]);
    atomic_store(result, (unint64_t *)&qword_18C74A450);
  }

  return result;
}

unint64_t sub_188D3CDCC()
{
  unint64_t result = qword_18C74A458;
  if (!qword_18C74A458)
  {
    unint64_t result = MEMORY[0x1895D7620](MEMORY[0x189618CE8], MEMORY[0x189618CD8]);
    atomic_store(result, (unint64_t *)&qword_18C74A458);
  }

  return result;
}

uint64_t OrderedDictionary.Elements._base.getter(uint64_t a1)
{
  return a1;
}

uint64_t OrderedDictionary.Elements._base.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = swift_release();
  *uint64_t v3 = a1;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

uint64_t (*OrderedDictionary.Elements._base.modify())()
{
  return nullsub_1;
}

uint64_t (*OrderedDictionary.elements.modify(void *a1, void *a2))()
{
  uint64_t v5 = (char *)malloc(0x38uLL);
  *a1 = v5;
  *(void *)uint64_t v5 = *(void *)v2;
  *(_OWORD *)(v5 + 8) = *(_OWORD *)(v2 + 8);
  uint64_t v6 = a2[2];
  *((void *)v5 + 3) = v2;
  *((void *)v5 + 4) = v6;
  *((void *)v5 + 5) = a2[4];
  uint64_t v7 = OrderedSet.init()();
  uint64_t v9 = v8;
  *((void *)v5 + 6) = a2[3];
  sub_188DF80C0();
  uint64_t v10 = sub_188DF86C0();
  *(void *)uint64_t v2 = v7;
  *(void *)(v2 + 8) = v9;
  *(void *)(v2 + 16) = v10;
  return sub_188D3CF5C;
}

uint64_t OrderedDictionary.Elements.keys.getter(uint64_t a1)
{
  return a1;
}

uint64_t _s19CollectionsInternal17OrderedDictionaryV8elementsAC8ElementsVyxq__Gvg_0(uint64_t a1)
{
  return a1;
}

uint64_t (*OrderedDictionary.Elements.values.modify(void *a1, void *a2))()
{
  uint64_t v5 = (char *)malloc(0x38uLL);
  *a1 = v5;
  *(void *)uint64_t v5 = *(void *)v2;
  *(_OWORD *)(v5 + 8) = *(_OWORD *)(v2 + 8);
  uint64_t v6 = a2[2];
  *((void *)v5 + 3) = v2;
  *((void *)v5 + 4) = v6;
  *((void *)v5 + 5) = a2[4];
  uint64_t v7 = OrderedSet.init()();
  uint64_t v9 = v8;
  *((void *)v5 + 6) = a2[3];
  sub_188DF80C0();
  uint64_t v10 = sub_188DF86C0();
  *(void *)uint64_t v2 = v7;
  *(void *)(v2 + 8) = v9;
  *(void *)(v2 + 16) = v10;
  return sub_188D3CF5C;
}

void sub_188D3D084(void **a1)
{
  uint64_t v1 = *a1;
  sub_188D3D0D8((void *)(*a1)[3], *a1);
  swift_release();
  swift_release();
  swift_release();
  free(v1);
}

uint64_t sub_188D3D0D8(void *a1, void *a2)
{
  uint64_t v2 = a2[1];
  uint64_t v3 = a2[2];
  *a1 = *a2;
  a1[1] = v2;
  a1[2] = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t _s19CollectionsInternal17OrderedDictionaryV8elementsAC8ElementsVyxq__Gvs_0( uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v4 = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v8 = OrderedSet.init()();
  uint64_t v10 = v9;
  sub_188DF80C0();
  uint64_t v11 = sub_188DF86C0();
  swift_release();
  swift_release();
  swift_release();
  *BOOL v4 = v8;
  v4[1] = v10;
  v4[2] = v11;
  v13[0] = a1;
  v13[1] = a2;
  void v13[2] = a3;
  sub_188D3D0D8(v4, v13);
  swift_release_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t OrderedDictionary.Elements.index(forKey:)()
{
  return OrderedSet._find(_:)();
}

uint64_t OrderedDictionary.Elements.underestimatedCount.getter()
{
  return _s19CollectionsInternal4HeapV5countSivg_0();
}

uint64_t OrderedDictionary.Elements.makeIterator()(uint64_t a1)
{
  return a1;
}

uint64_t sub_188D3D2DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = OrderedDictionary.Elements.makeIterator()(*v1);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  a1[1] = v5;
  a1[2] = v7;
  a1[3] = 0LL;
  return result;
}

uint64_t sub_188D3D354()
{
  return OrderedDictionary.Elements.underestimatedCount.getter();
}

uint64_t sub_188D3D360(uint64_t a1)
{
  return sub_188DF824C();
}

uint64_t OrderedDictionary.Elements.startIndex.getter()
{
  return 0LL;
}

Swift::Int __swiftcall OrderedDictionary.Elements.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1LL);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall OrderedDictionary.Elements.index(before:)(Swift::Int before)
{
  BOOL v1 = __OFSUB__(before, 1LL);
  Swift::Int result = before - 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall OrderedDictionary.Elements.formIndex(after:)(Swift::Int *after)
{
  if (__OFADD__(*after, 1LL)) {
    __break(1u);
  }
  else {
    ++*after;
  }
}

Swift::Void __swiftcall OrderedDictionary.Elements.formIndex(before:)(Swift::Int *before)
{
  if (__OFSUB__(*before, 1LL)) {
    __break(1u);
  }
  else {
    --*before;
  }
}

Swift::Int __swiftcall OrderedDictionary.Elements.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  BOOL v2 = __OFADD__(_, offsetBy);
  Swift::Int result = _ + offsetBy;
  if (v2) {
    __break(1u);
  }
  return result;
}

Swift::Int_optional __swiftcall OrderedDictionary.Elements.index(_:offsetBy:limitedBy:)( Swift::Int _, Swift::Int offsetBy, Swift::Int limitedBy)
{
  Swift::Int v3 = limitedBy - _;
  if (__OFSUB__(limitedBy, _))
  {
    __break(1u);
    goto LABEL_12;
  }

  if (offsetBy < 1)
  {
    if (v3 > 0 || v3 <= offsetBy)
    {
LABEL_9:
      BOOL v4 = __OFADD__(_, offsetBy);
      _ += offsetBy;
      if (!v4)
      {
        LOBYTE(offsetBy) = 0;
        goto LABEL_13;
      }

Swift::Int __swiftcall OrderedDictionary.Elements.distance(from:to:)(Swift::Int from, Swift::Int to)
{
  BOOL v2 = __OFSUB__(to, from);
  Swift::Int result = to - from;
  if (v2) {
    __break(1u);
  }
  return result;
}

uint64_t OrderedDictionary.Elements.subscript.getter()
{
  return sub_188DF8774();
}

uint64_t OrderedDictionary.Elements.subscript.getter@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t result = _s19CollectionsInternal4HeapV5countSivg_0();
  if (result < 0)
  {
    __break(1u);
  }

  else
  {
    *a6 = a3;
    a6[1] = a4;
    a6[2] = a5;
    a6[3] = a1;
    a6[4] = a2;
    swift_retain();
    swift_retain();
    return swift_retain();
  }

  return result;
}

uint64_t OrderedDictionary.Elements.isEmpty.getter()
{
  uint64_t v0 = sub_188DF8738();
  MEMORY[0x1895D7620](MEMORY[0x189619590], v0);
  return sub_188DF827C() & 1;
}

uint64_t OrderedDictionary.Elements._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[1] = a3;
  uint64_t v6 = a1;
  v5[0] = a2;
  uint64_t v3 = sub_188DF8738();
  MEMORY[0x1895D7620](MEMORY[0x189619590], v3);
  return sub_188D3E1E8((uint64_t)&v6, (uint64_t)v5);
}

void *sub_188D3D5EC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFSUB__(*result, 1LL)) {
    __break(1u);
  }
  else {
    *a2 = *result - 1LL;
  }
  return result;
}

void *sub_188D3D604(void *result)
{
  if (__OFSUB__(*result, 1LL)) {
    __break(1u);
  }
  else {
    --*result;
  }
  return result;
}

uint64_t sub_188D3D61C(void *a1, void *a2)
{
  BOOL v2 = __OFSUB__(*a2, *a1);
  uint64_t result = *a2 - *a1;
  if (v2) {
    __break(1u);
  }
  return result;
}

void sub_188D3D634(void *a1@<X8>)
{
  *a1 = 0LL;
}

uint64_t sub_188D3D63C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = _s19CollectionsInternal4HeapV5countSivg_0();
  *a1 = result;
  return result;
}

void (*sub_188D3D66C(uint64_t *a1, uint64_t a2, uint64_t a3))(uint64_t *a1)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(a3 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  uint64_t v7 = *(void *)(TupleTypeMetadata2 - 8);
  a1[1] = v7;
  size_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = (char *)malloc(v8);
  a1[2] = (uint64_t)v9;
  uint64_t v10 = (char *)malloc(v8);
  a1[3] = (uint64_t)v10;
  uint64_t v11 = &v10[*(int *)(TupleTypeMetadata2 + 48)];
  sub_188DF8774();
  sub_188DF8774();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 16LL))(v9, v10, v5);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v4 - 8) + 16LL))( &v9[*(int *)(TupleTypeMetadata2 + 48)],  v11,  v4);
  return sub_188D3D76C;
}

void sub_188D3D76C(uint64_t *a1)
{
  BOOL v2 = (void *)a1[2];
  BOOL v1 = (void *)a1[3];
  uint64_t v3 = *a1;
  uint64_t v4 = *(void (**)(void *, uint64_t))(a1[1] + 8);
  v4(v2, *a1);
  v4(v1, v3);
  free(v1);
  free(v2);
}

double sub_188D3D7BC@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  double result = *(double *)v6;
  __int128 v5 = v6[1];
  *(_OWORD *)a2 = v6[0];
  *(_OWORD *)(a2 + 16) = v5;
  *(void *)(a2 + 32) = v7;
  return result;
}

uint64_t sub_188D3D814(uint64_t a1)
{
  return sub_188DF81BC();
}

uint64_t sub_188D3D860()
{
  uint64_t v0 = sub_188DF8738();
  MEMORY[0x1895D7620](MEMORY[0x189619590], v0);
  return sub_188DF827C() & 1;
}

uint64_t sub_188D3D8BC()
{
  return _s19CollectionsInternal4HeapV5countSivg_0();
}

void sub_188D3D8CC(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_WORD *)(a1 + 8) = 256;
}

void *sub_188D3D8DC@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (__OFADD__(*result, a2)) {
    __break(1u);
  }
  else {
    *a3 = *result + a2;
  }
  return result;
}

uint64_t sub_188D3D8F4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_188D3E384(*a1, a2, *a3);
  *(void *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t sub_188D3D928(uint64_t *a1, __int128 *a2)
{
  uint64_t v5 = *a1;
  __int128 v4 = *a2;
  uint64_t v2 = sub_188DF8738();
  MEMORY[0x1895D7620](MEMORY[0x189619590], v2);
  return sub_188D3E1E8((uint64_t)&v5, (uint64_t)&v4);
}

void *sub_188D3D98C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFADD__(*result, 1LL)) {
    __break(1u);
  }
  else {
    *a2 = *result + 1LL;
  }
  return result;
}

void *sub_188D3D9A4(void *result)
{
  if (__OFADD__(*result, 1LL)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

uint64_t sub_188D3D9C0(void *a1, uint64_t a2)
{
  return sub_188D3DB2C( a1,  a2,  (uint64_t (*)(void, void, void, void, void, void))OrderedDictionary.Elements.description.getter);
}

uint64_t OrderedDictionary.Elements.debugDescription.getter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v13[0] = a1;
  v13[1] = a2;
  void v13[2] = a3;
  sub_188DF8600();
  swift_bridgeObjectRelease();
  sub_188DF8B94();
  sub_188DF7EE0();
  swift_bridgeObjectRelease();
  sub_188DF7EE0();
  sub_188DF8B94();
  sub_188DF7EE0();
  swift_bridgeObjectRelease();
  sub_188DF7EE0();
  uint64_t v9 = type metadata accessor for OrderedDictionary.Elements(0LL, a4, a5, a6);
  uint64_t v10 = MEMORY[0x1895D7620](&protocol conformance descriptor for OrderedDictionary<A, B>.Elements, v9);
  uint64_t v11 = _dictionaryDescription<A, B, C>(for:debug:typeName:)( (uint64_t)v13,  1,  0xD000000000000012LL,  0x8000000188E00560LL,  a4,  a5,  v9,  v10);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_188D3DB20(void *a1, uint64_t a2)
{
  return sub_188D3DB2C(a1, a2, OrderedDictionary.Elements.debugDescription.getter);
}

uint64_t sub_188D3DB2C( void *a1, uint64_t a2, uint64_t (*a3)(void, void, void, void, void, void))
{
  return a3(*v3, v3[1], v3[2], a1[2], a1[3], a1[4]);
}

uint64_t OrderedDictionary.Elements.customMirror.getter@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  v23[0] = a6;
  v23[1] = a7;
  uint64_t v12 = sub_188DF8AB0();
  MEMORY[0x1895F8858](v12);
  unint64_t v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C749ED0);
  MEMORY[0x1895F8858](v15);
  uint64_t v17 = (char *)v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v23[5] = a1;
  void v23[6] = a2;
  v23[7] = a3;
  void v23[2] = a1;
  void v23[3] = a2;
  v23[4] = a3;
  uint64_t v18 = *MEMORY[0x18961A6F8];
  uint64_t v19 = sub_188DF8AA4();
  uint64_t v20 = *(void *)(v19 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 104))(v17, v18, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
  uint64_t v21 = type metadata accessor for OrderedDictionary.Elements(0LL, a4, a5, v23[0]);
  MEMORY[0x1895D7620](&protocol conformance descriptor for OrderedDictionary<A, B>.Elements, v21);
  sub_188D2B03C((uint64_t)v14);
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  return sub_188DF8ABC();
}

uint64_t sub_188D3DCEC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return OrderedDictionary.Elements.customMirror.getter(*v2, v2[1], v2[2], a1[2], a1[3], a1[4], a2);
}

uint64_t static OrderedDictionary.Elements<>.== infix(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return static OrderedDictionary<>.== infix(_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_188D3DD10(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  return static OrderedDictionary.Elements<>.== infix(_:_:)(*a1, a1[1], a1[2], *a2, a2[1], a2[2], a3[2], a3[3], a3[4]) & 1;
}

uint64_t OrderedDictionary.Elements<>.hashValue.getter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_188DF8A98();
}

uint64_t sub_188D3DDEC(uint64_t *a1, uint64_t a2)
{
  return OrderedDictionary.Elements<>.hashValue.getter(*v2, v2[1], v2[2], a1[2], a1[3], a1[4], *(void *)(a2 - 8));
}

uint64_t sub_188D3DE08(uint64_t a1, void *a2, uint64_t a3)
{
  return OrderedDictionary.Elements<>.hash(into:)(a1, *v3, v3[1], v3[2], a2[2], a2[3], a2[4], *(void *)(a3 - 8));
}

uint64_t sub_188D3DE24(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  sub_188DF8A38();
  OrderedDictionary.Elements<>.hash(into:)(v7, *v3, v3[1], v3[2], a2[2], a2[3], a2[4], v5);
  return sub_188DF8A98();
}

Swift::Void __swiftcall OrderedDictionary.Elements.swapAt(_:_:)(Swift::Int a1, Swift::Int a2)
{
}

void *OrderedDictionary.Elements.partition(by:)( uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = (uint64_t *)type metadata accessor for OrderedDictionary(0LL, a3[2], a3[3], a3[4]);
  return OrderedDictionary.partition(by:)(a1, a2, v5);
}

uint64_t OrderedDictionary.Elements.sort(by:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_188D3E190(a1, a2, a3, OrderedDictionary.sort(by:));
}

uint64_t OrderedDictionary.Elements<>.sort()(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for OrderedDictionary(0LL, a1[2], a1[3], a1[4]);
  return OrderedDictionary<>.sort()(v3, a2);
}

Swift::Void __swiftcall OrderedDictionary.Elements.shuffle()()
{
}

uint64_t OrderedDictionary.Elements.shuffle<A>(using:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (void *)type metadata accessor for OrderedDictionary(0LL, a2[2], a2[3], a2[4]);
  return OrderedDictionary.shuffle<A>(using:)(a1, v3);
}

Swift::Void __swiftcall OrderedDictionary.Elements.reverse()()
{
}

uint64_t sub_188D3DF94(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2 = type metadata accessor for OrderedDictionary(0LL, a1[2], a1[3], a1[4]);
  return a2(v2);
}

Swift::Void __swiftcall OrderedDictionary.Elements.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
}

uint64_t OrderedDictionary.Elements.remove(at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = type metadata accessor for OrderedDictionary(0LL, a4[2], a4[3], a4[4]);
  return OrderedDictionary.remove(at:)(a1, a2, a3, v7);
}

uint64_t OrderedDictionary.Elements.removeSubrange(_:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_188D3E054( a1,  a2,  a3,  (uint64_t (*)(uint64_t, uint64_t, uint64_t))OrderedDictionary.removeSubrange(_:));
}

uint64_t sub_188D3E054( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = type metadata accessor for OrderedDictionary(0LL, a3[2], a3[3], a3[4]);
  return a4(a1, a2, v6);
}

uint64_t OrderedDictionary.Elements.removeSubrange<A>(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (uint64_t *)type metadata accessor for OrderedDictionary(0LL, a2[2], a2[3], a2[4]);
  return OrderedDictionary.removeSubrange<A>(_:)(a1, v3);
}

uint64_t OrderedDictionary.Elements.removeLast()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_188D3E054(a1, a2, a3, OrderedDictionary.removeLast());
}

Swift::Void __swiftcall OrderedDictionary.Elements.removeLast(_:)(Swift::Int a1)
{
}

uint64_t OrderedDictionary.Elements.removeFirst()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_188D3E054(a1, a2, a3, OrderedDictionary.removeFirst());
}

Swift::Void __swiftcall OrderedDictionary.Elements.removeFirst(_:)(Swift::Int a1)
{
}

uint64_t sub_188D3E12C(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v4 = type metadata accessor for OrderedDictionary(0LL, a2[2], a2[3], a2[4]);
  return a3(a1, v4);
}

uint64_t OrderedDictionary.Elements.removeAll(where:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_188D3E190( a1,  a2,  a3,  (uint64_t (*)(uint64_t, uint64_t, uint64_t))OrderedDictionary.removeAll(where:));
}

uint64_t sub_188D3E190( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = type metadata accessor for OrderedDictionary(0LL, a3[2], a3[3], a3[4]);
  return a4(a1, a2, v7);
}

uint64_t sub_188D3E1E8(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = sub_188DF7D84();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](v5);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v12 = (char *)&v16 - v11;
  char v13 = sub_188DF7CDC();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a2, v5);
  if ((v13 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
    goto LABEL_5;
  }

  char v14 = sub_188DF7CDC();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
  if ((v14 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_188D3E384(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
    goto LABEL_12;
  }

  if (a2 > 0)
  {
    return 0LL;
  }

  if (v3 <= 0 && v3 > a2) {
    return 0LL;
  }
LABEL_9:
  BOOL v4 = __OFADD__(result, a2);
  result += a2;
  if (v4) {
LABEL_12:
  }
    __break(1u);
  return result;
}

uint64_t type metadata accessor for OrderedDictionary.Elements( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for OrderedDictionary.Elements);
}

void sub_188D3E3E4()
{
}

void sub_188D3E3F4()
{
}

uint64_t sub_188D3E404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_188D3E4AC(a1, a2, a3, MEMORY[0x189618A58]);
}

unint64_t sub_188D3E410()
{
  unint64_t result = qword_18C74A460[0];
  if (!qword_18C74A460[0])
  {
    unint64_t result = MEMORY[0x1895D7620](MEMORY[0x189618768], MEMORY[0x189618740]);
    atomic_store(result, qword_18C74A460);
  }

  return result;
}

void sub_188D3E454()
{
}

void sub_188D3E464()
{
}

uint64_t sub_188D3E474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_188D3E4AC(a1, a2, a3, MEMORY[0x189618A40]);
}

void sub_188D3E480()
{
}

void sub_188D3E490()
{
}

uint64_t sub_188D3E4A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_188D3E4AC(a1, a2, a3, MEMORY[0x189618A60]);
}

uint64_t sub_188D3E4AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = sub_188D3E410();
  v8[0] = MEMORY[0x189618780];
  v8[1] = v6;
  return MEMORY[0x1895D7620](a4, a1, v8);
}

void sub_188D3E4F4()
{
}

uint64_t sub_188D3E504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 - 8) + 8LL);
  return MEMORY[0x1895D7620](&protocol conformance descriptor for <> OrderedDictionary<A, B>.Elements, a1, &v4);
}

uint64_t sub_188D3E540()
{
  return swift_release();
}

void *sub_188D3E570(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_188D3E5BC(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_188D3E630(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t sub_188D3E67C(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_188D3E6C4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t static TreeDictionary._isConsistencyCheckingEnabled.getter()
{
  return 0LL;
}

Swift::Void __swiftcall TreeDictionary._dump(iterationOrder:)(Swift::Bool iterationOrder)
{
  v1._uint64_t countAndFlagsBits = 0LL;
  v1._object = (void *)0xE000000000000000LL;
  v2._uint64_t countAndFlagsBits = 0LL;
  v2._object = (void *)0xE000000000000000LL;
  _HashNode.dump(iterationOrder:limit:firstPrefix:restPrefix:depth:)(iterationOrder, 0x7FFFFFFFFFFFFFFFLL, v1, v2, 0LL);
}

uint64_t static TreeDictionary._maxDepth.getter()
{
  return 13LL;
}

double TreeDictionary._statistics.getter@<D0>( char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, _OWORD *a6@<X8>)
{
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  sub_188DE71E8(0LL, &v13, a1, a2, a3, a4, a5);
  double result = *(double *)&v13;
  __int128 v8 = v14;
  __int128 v9 = v15;
  __int128 v10 = v16;
  __int128 v11 = v17;
  __int128 v12 = v18;
  *a6 = v13;
  a6[1] = v8;
  a6[2] = v9;
  a6[3] = v10;
  a6[4] = v11;
  a6[5] = v12;
  return result;
}

uint64_t TreeSet.customMirror.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_188DF8AB0();
  MEMORY[0x1895F8858](v10);
  __int128 v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C749ED0);
  MEMORY[0x1895F8858](v13);
  __int128 v15 = (char *)v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  _OWORD v22[3] = a1;
  _OWORD v22[4] = a2;
  __n128 v22[5] = a3;
  v22[0] = a1;
  v22[1] = a2;
  void v22[2] = a3;
  uint64_t v16 = *MEMORY[0x18961A708];
  uint64_t v17 = sub_188DF8AA4();
  uint64_t v18 = *(void *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 104))(v15, v16, v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
  uint64_t v20 = type metadata accessor for TreeSet(0LL, a4, a5, v19);
  MEMORY[0x1895D7620](&protocol conformance descriptor for TreeSet<A>, v20);
  sub_188D2B03C((uint64_t)v12);
  swift_retain_n();
  return sub_188DF8ABC();
}

uint64_t sub_188D3E95C(uint64_t a1)
{
  return TreeSet.customMirror.getter(*v1, v1[1], v1[2], *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t Rope.Builder.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  *a4 = sub_188DF80C0();
  __int128 v8 = (int *)type metadata accessor for Rope.Builder(0LL, a1, a2, v7);
  __int128 v9 = (char *)a4 + v8[9];
  uint64_t v11 = type metadata accessor for Rope._Node(0LL, a1, a2, v10);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v9, 1LL, 1LL, v11);
  __int128 v12 = (char *)a4 + v8[10];
  uint64_t v14 = type metadata accessor for Rope._Item(0LL, a1, a2, v13);
  __int128 v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL);
  v15(v12, 1LL, 1LL, v14);
  v15((char *)a4 + v8[11], 1LL, 1LL, v14);
  uint64_t v16 = v8[12];
  uint64_t result = sub_188DF80C0();
  *(uint64_t *)((char *)a4 + v16) = result;
  return result;
}

uint64_t Rope.Builder._insertAfterTip(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v54 = type metadata accessor for Rope._Node(255LL, v8, v9, a4);
  uint64_t v10 = sub_188DF8384();
  MEMORY[0x1895F8858](v10);
  uint64_t v53 = (char *)&v46 - v11;
  uint64_t v56 = type metadata accessor for Rope(0LL, v8, v9, v12);
  uint64_t v50 = *(void *)(v56 - 8);
  MEMORY[0x1895F8858](v56);
  uint64_t v52 = (char *)&v46 - v13;
  uint64_t v15 = type metadata accessor for Rope._Item(255LL, v8, v9, v14);
  uint64_t v16 = sub_188DF8384();
  uint64_t v58 = *(void *)(v16 - 8);
  uint64_t v17 = MEMORY[0x1895F8858](v16);
  uint64_t v19 = (char *)&v46 - v18;
  uint64_t v20 = *(void *)(v15 - 8);
  uint64_t v21 = MEMORY[0x1895F8858](v17);
  uint64_t v51 = (char *)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = MEMORY[0x1895F8858](v21);
  uint64_t v57 = (char *)&v46 - v24;
  MEMORY[0x1895F8858](v23);
  unint64_t v26 = (char *)&v46 - v25;
  if ((Rope._Item.isEmpty.getter(v15) & 1) != 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(a1, v15);
  }
  uint64_t v55 = a1;
  uint64_t v28 = v5 + *(int *)(a2 + 44);
  uint64_t v48 = v5;
  uint64_t v49 = v28;
  Optional._take()(v16, (uint64_t)v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1LL, v15) == 1)
  {
    uint64_t v29 = v58;
    (*(void (**)(char *, uint64_t))(v58 + 8))(v19, v16);
    uint64_t v30 = v55;
    uint64_t v31 = v16;
LABEL_13:
    uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
    uint64_t v45 = v49;
    v44(v49, v31);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v45, v30, v15);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(v45, 0LL, 1LL, v15);
  }

  uint64_t v47 = v16;
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v26, v19, v15);
  Swift::Int v32 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  int v33 = v57;
  uint64_t v30 = v55;
  v32(v57, v55, v15);
  if ((Rope._Item.isUndersized.getter(v15) & 1) != 0
    && (Rope._Item.rebalance(nextNeighbor:)((uint64_t)v26, v15) & 1) != 0)
  {
    uint64_t v34 = *(void (**)(char *, uint64_t))(v20 + 8);
    v34(v33, v15);
    v34(v26, v15);
LABEL_12:
    uint64_t v31 = v47;
    uint64_t v29 = v58;
    goto LABEL_13;
  }

  int v46 = v26;
  uint64_t v35 = (uint64_t *)(v48 + *(int *)(a2 + 48));
  uint64_t v59 = *v35;
  uint64_t v36 = v56;
  uint64_t v37 = sub_188DF8120();
  MEMORY[0x1895D7620](MEMORY[0x189618488], v37);
  if ((sub_188DF827C() & 1) != 0)
  {
    __int32 v38 = (void (*)(char *, char *, uint64_t))v32;
    uint64_t v39 = (uint64_t)v51;
    v38(v51, v46, v15);
    static Rope._Node.createLeaf(_:)(v39, v8, v9);
  }

  uint64_t v40 = swift_bridgeObjectRetain();
  uint64_t v41 = MEMORY[0x1895D699C](v40, v36);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v42 = (uint64_t)v46;
  if (!__OFSUB__(v41, 1LL))
  {
    sub_188DF80B4();
    sub_188D45DC0(v41 - 1, *v35);
    sub_188DC0BFC(v42, v36);
    uint64_t v43 = *(void (**)(char *, uint64_t))(v20 + 8);
    v43(v57, v15);
    v43((char *)v42, v15);
    uint64_t v30 = v55;
    goto LABEL_12;
  }

  __break(1u);
  return result;
}

uint64_t Rope.Builder._insertBeforeTip(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for Rope._Item(255LL, *(void *)(a2 + 16), *(void *)(a2 + 24), a4);
  uint64_t v7 = sub_188DF8384();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](v7);
  uint64_t v11 = (char *)&v34 - v10;
  uint64_t v12 = *(void *)(v6 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v9);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = MEMORY[0x1895F8858](v13);
  uint64_t v18 = (char *)&v34 - v17;
  MEMORY[0x1895F8858](v16);
  uint64_t v20 = (char *)&v34 - v19;
  if ((Rope._Item.isEmpty.getter(v6) & 1) != 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(a1, v6);
  }
  uint64_t v36 = v15;
  uint64_t v37 = a1;
  uint64_t v38 = v8;
  uint64_t v22 = (char *)(v39 + *(int *)(a2 + 40));
  Optional._take()(v7, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1LL, v6) == 1)
  {
    uint64_t v23 = *(void (**)(char *, uint64_t))(v38 + 8);
    v23(v11, v7);
    v23(v22, v7);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v22, v37, v6);
  }

  else
  {
    uint64_t v34 = v7;
    uint64_t v35 = v22;
    uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v24(v20, v11, v6);
    uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    uint64_t v26 = v37;
    v25(v18, v37, v6);
    if (((Rope._Item.isUndersized.getter(v6) & 1) != 0 || (Rope._Item.isUndersized.getter(v6) & 1) != 0)
      && (Rope._Item.rebalance(nextNeighbor:)((uint64_t)v18, v6) & 1) != 0)
    {
      uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      v27(v26, v6);
      v27((uint64_t)v18, v6);
      uint64_t v22 = v35;
      (*(void (**)(char *, uint64_t))(v38 + 8))(v35, v34);
      uint64_t v28 = v22;
      uint64_t v29 = v20;
    }

    else
    {
      uint64_t v30 = (uint64_t)v36;
      v25(v36, (uint64_t)v20, v6);
      Rope.Builder._appendNow(_:)(v30, a2, v31, v32);
      int v33 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      v33(v26, v6);
      v33((uint64_t)v20, v6);
      uint64_t v22 = v35;
      (*(void (**)(char *, uint64_t))(v38 + 8))(v35, v34);
      uint64_t v28 = v22;
      uint64_t v29 = v18;
    }

    v24(v28, v29, v6);
  }

  return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v22, 0LL, 1LL, v6);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t *v42;
  void (*v43)(char *, uint64_t, uint64_t);
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  unint64_t started;
  void *v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t);
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(char *, uint64_t, uint64_t);
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;
  void (*v111)(uint64_t, uint64_t, uint64_t);
  uint64_t v112;
  void (*v113)(uint64_t *, uint64_t);
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  void (*v131)(uint64_t, uint64_t);
  uint64_t v132;
  void (*v133)(uint64_t, uint64_t, uint64_t);
  uint64_t v134;
  char *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  unint64_t v138 = a2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = type metadata accessor for Rope._Node._ModifyState(0LL, v5, v6, a4);
  unsigned int v119 = *(void *)(v7 - 8);
  uint8x8_t v120 = v7;
  MEMORY[0x1895F8858](v7);
  unsigned int v118 = (uint64_t *)((char *)&v114 - v8);
  uint64_t v10 = type metadata accessor for Rope._Node(255LL, v5, v6, v9);
  uint64x2_t v132 = sub_188DF8384();
  uint64_t v126 = *(void *)(v132 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](v132);
  uint64_t v128 = (uint64_t)&v114 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = MEMORY[0x1895F8858](v11);
  int v117 = (uint64_t)&v114 - v14;
  MEMORY[0x1895F8858](v13);
  int v116 = (uint64_t)&v114 - v15;
  uint64_t v121 = v6;
  uint64_t v122 = v5;
  uint64_t v17 = type metadata accessor for Rope._Item(255LL, v5, v6, v16);
  uint64_t v136 = sub_188DF8384();
  uint64_t v125 = *(void *)(v136 - 8);
  uint64_t v18 = MEMORY[0x1895F8858](v136);
  unint64_t v129 = (char *)&v114 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = MEMORY[0x1895F8858](v18);
  uint64_t v124 = (uint64_t *)((char *)&v114 - v21);
  uint64_t v22 = *(void *)(v17 - 8);
  uint64_t v23 = MEMORY[0x1895F8858](v20);
  uint64_t v130 = (char *)&v114 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = MEMORY[0x1895F8858](v23);
  uint64_t v115 = (char *)&v114 - v26;
  uint64_t v27 = MEMORY[0x1895F8858](v25);
  uint64_t v127 = (uint64_t)&v114 - v28;
  uint64_t v29 = *(void *)(v10 - 8);
  uint64_t v30 = MEMORY[0x1895F8858](v27);
  uint64_t v123 = (char *)&v114 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = MEMORY[0x1895F8858](v30);
  uint64_t v34 = (char *)&v114 - v33;
  uint64_t v35 = MEMORY[0x1895F8858](v32);
  uint64_t v37 = (char *)&v114 - v36;
  uint64_t v38 = MEMORY[0x1895F8858](v35);
  uint64_t v40 = (char *)&v114 - v39;
  MEMORY[0x1895F8858](v38);
  uint64_t v42 = (uint64_t *)((char *)&v114 - v41);
  uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  uint8x8_t v135 = (char *)a1;
  v43((char *)&v114 - v41, a1, v10);
  v43(v40, (uint64_t)v42, v10);
  LODWORD(a_HashNode.ensureUnique(isUnique:)(v1 & 1) = Rope._Node.header.getter();
  uint64_t v134 = v29;
  uint64_t v44 = *(void (**)(char *, uint64_t))(v29 + 8);
  v44(v40, v10);
  __int128 v133 = (void (*)(uint64_t, uint64_t, uint64_t))v43;
  if ((a1 & 0xFF0000) == 0)
  {
    unint64_t v129 = v37;
    uint64_t v130 = v34;
    uint64_t v53 = v136;
    uint64_t v54 = v138;
    v43(v40, (uint64_t)v42, v10);
    uint64_t v55 = (unsigned __int16)Rope._Node.header.getter();
    v44(v40, v10);
    if (v55 == 1)
    {
      uint64_t v56 = v127;
      Rope._Node.firstItem.getter(v10, v127);
      Rope.Builder._insertBeforeTip(_:)(v56, v54, v57, v58);
      v44(v135, v10);
      return ((uint64_t (*)(uint64_t *, uint64_t))v44)(v42, v10);
    }

    uint64_t v82 = (uint64_t)v40;
    uint64_t v83 = v10;
    uint64_t v131 = (void (*)(uint64_t, uint64_t))v44;
    uint64_t v84 = (uint64_t)v124;
    Optional._take()(v53, (uint64_t)v124);
    uint64_t v85 = v84;
    uint64_t v86 = v22;
    uint64_t v87 = v84;
    uint64_t v88 = v17;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v87, 1LL, v17) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v85, v53);
      uint64_t v89 = v137;
      uint64_t v90 = v132;
      unsigned int v91 = v126;
    }

    else
    {
      uint64_t v92 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 32);
      uint64_t v93 = v115;
      v92(v115, v85, v17);
      uint64_t v94 = v127;
      (*(void (**)(uint64_t, char *, uint64_t))(v86 + 16))(v127, v93, v17);
      uint64_t v95 = v116;
      Rope._Node.prepend(_:)(v94, v83, v96, v116);
      uint64_t v97 = v134;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v134 + 48))(v95, 1LL, v83) != 1)
      {
        uint64_t v110 = (uint64_t)v129;
        (*(void (**)(char *, uint64_t, uint64_t))(v97 + 32))(v129, v95, v83);
        uint64_t v111 = v133;
        v133(v82, (uint64_t)v42, v83);
        uint64_t v112 = v138;
        Rope.Builder._insertBeforeTip(_:)(v82, v138);
        v111(v82, v110, v83);
        Rope.Builder._insertBeforeTip(_:)(v82, v112);
        uint64_t v108 = v131;
        v131((uint64_t)v135, v83);
        v108(v110, v83);
        (*(void (**)(char *, uint64_t))(v86 + 8))(v93, v88);
        return ((uint64_t (*)(uint64_t *, uint64_t))v108)(v42, v83);
      }

      (*(void (**)(char *, uint64_t))(v86 + 8))(v93, v88);
      unsigned int v91 = v126;
      uint64_t v90 = v132;
      (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v95, v132);
      uint64_t v89 = v137;
    }

    int v98 = v138;
    uint64_t v99 = &v89[*(int *)(v138 + 36)];
    uint64_t v100 = v117;
    Optional._take()(v90, v117);
    uint64_t v101 = v134;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v134 + 48))(v100, 1LL, v83) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v100, v90);
    }

    else
    {
      uint64_t v102 = v100;
      uint64_t v103 = (uint64_t)v130;
      uint64_t v137 = *(char **)(v101 + 32);
      ((void (*)(char *, uint64_t, uint64_t))v137)(v130, v102, v83);
      if ((Rope._Node.rebalance(nextNeighbor:)(v42, v83) & 1) != 0 && !Rope._Node.isFull.getter())
      {
        uint64_t v113 = (void (*)(uint64_t *, uint64_t))v131;
        v131((uint64_t)v135, v83);
        v113(v42, v83);
        (*(void (**)(char *, uint64_t))(v91 + 8))(v99, v90);
        ((void (*)(char *, uint64_t, uint64_t))v137)(v99, v103, v83);
        return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v134 + 56))(v99, 0LL, 1LL, v83);
      }

      v133(v82, v103, v83);
      Rope.Builder._appendNow(_:)(v82, v98, v104, v105);
      v131(v103, v83);
    }

    if (!Rope._Node.isFull.getter())
    {
      v131((uint64_t)v135, v83);
      (*(void (**)(char *, uint64_t))(v91 + 8))(v99, v90);
      uint8x8_t v109 = v134;
      (*(void (**)(char *, uint64_t *, uint64_t))(v134 + 32))(v99, v42, v83);
      return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v109 + 56))(v99, 0LL, 1LL, v83);
    }

    v133(v82, (uint64_t)v42, v83);
    Rope.Builder._appendNow(_:)(v82, v98, v106, v107);
    uint64_t v108 = v131;
    v131((uint64_t)v135, v83);
    return ((uint64_t (*)(uint64_t *, uint64_t))v108)(v42, v83);
  }

  uint64_t v45 = v10;
  int v46 = (uint64_t)v40;
  uint64_t v131 = (void (*)(uint64_t, uint64_t))v44;
  uint64_t v124 = v42;
  uint64_t v47 = (uint64_t)v129;
  uint64_t v48 = v136;
  Optional._take()(v136, (uint64_t)v129);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v47, 1LL, v17) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v47, v48);
    uint64_t v49 = v135;
    uint64_t v50 = v138;
    uint64_t v51 = (uint64_t)v124;
    uint64_t v52 = v132;
  }

  else
  {
    uint64_t v60 = v17;
    uint64_t v61 = (uint64_t)v130;
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 32))(v130, v47, v60);
    uint64_t v62 = Rope._Item.isUndersized.getter(v60);
    uint64_t v52 = v132;
    if ((v62 & 1) == 0) {
      goto LABEL_9;
    }
    uint64_t v63 = (uint64_t)v124;
    started = Rope._Node._startPath.getter();
    uint64_t v65 = v118;
    Rope._Node._prepareModify(at:)(started, v45, v118);
    int v66 = v120;
    uint64_t v67 = Rope._Item.rebalance(prevNeighbor:)((uint64_t)v130, v60);
    uint64_t v68 = v63;
    uint64_t v61 = (uint64_t)v130;
    sub_188D5015C(v68, v65, v122, v121);
    (*(void (**)(void *, uint64_t))(v119 + 8))(v65, v66);
    if ((v67 & 1) != 0)
    {
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v61, v60);
      uint64_t v49 = v135;
      uint64_t v50 = v138;
    }

    else
    {
LABEL_9:
      uint64_t v69 = v127;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v127, v61, v60);
      uint64_t v50 = v138;
      Rope.Builder._appendNow(_:)(v69, v138, v70, v71);
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v61, v60);
      uint64_t v49 = v135;
    }

    uint64_t v51 = (uint64_t)v124;
  }

  uint64_t v72 = (void (*)(uint64_t, char *, uint64_t))v133;
  uint64_t v73 = v128;
  Optional._take()(v52, v128);
  uint64_t v74 = v134;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v134 + 48))(v73, 1LL, v45) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v73, v52);
    uint64_t v75 = v131;
  }

  else
  {
    BOOL v76 = v123;
    (*(void (**)(char *, uint64_t, uint64_t))(v74 + 32))(v123, v73, v45);
    v72(v46, v76, v45);
    Rope.Builder._appendNow(_:)(v46, v50, v77, v78);
    uint64_t v79 = v76;
    uint64_t v75 = v131;
    v131((uint64_t)v79, v45);
  }

  v72(v46, (char *)v51, v45);
  Rope.Builder._appendNow(_:)(v46, v50, v80, v81);
  v75((uint64_t)v49, v45);
  return ((uint64_t (*)(uint64_t, uint64_t))v75)(v51, v45);
}

uint64_t Rope.Builder.insertAfterTip(_:)(uint64_t a1, uint64_t a2)
{
  return sub_188D3F1BC(a1, a2, (uint64_t (*)(char *, uint64_t))Rope.Builder._insertAfterTip(_:));
}

{
  return sub_188D44C00( a1,  a2,  (void (*)(void))sub_188D45E10,  (uint64_t (*)(void, void, void))type metadata accessor for Rope);
}

uint64_t Rope.Builder.insertBeforeTip(_:)(uint64_t a1, uint64_t a2)
{
  return sub_188D3F1BC(a1, a2, (uint64_t (*)(char *, uint64_t))Rope.Builder._insertBeforeTip(_:));
}

uint64_t sub_188D3F1BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, uint64_t))
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a2 + 16) - 8LL) + 8LL))(a1);
}

uint64_t Rope.Builder._insertAfterTip(_:)(uint64_t a1, uint64_t a2)
{
  return sub_188D44C00( a1,  a2,  (void (*)(void))sub_188D45EB4,  (uint64_t (*)(void, void, void))type metadata accessor for Rope._Node);
}

uint64_t Rope.init<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v76 = a6;
  uint64_t v77 = a1;
  uint64_t v78 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_188DF8384();
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)&v60 - v13;
  uint64_t v68 = a5;
  uint64_t v75 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v70 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v16 = (char *)&v60 - v15;
  uint64_t v71 = type metadata accessor for Rope.Builder(0LL, a2, a4, v17);
  uint64_t v69 = *(void *)(v71 - 8);
  MEMORY[0x1895F8858](v71);
  uint64_t v79 = (uint64_t *)((char *)&v60 - v18);
  uint64_t v20 = type metadata accessor for Rope(255LL, a2, a4, v19);
  uint64_t v21 = sub_188DF8384();
  uint64_t v65 = *(void *)(v21 - 8);
  uint64_t v66 = v21;
  uint64_t v22 = MEMORY[0x1895F8858](v21);
  uint64_t v24 = (char *)&v60 - v23;
  uint64_t v25 = *(void *)(a3 - 8);
  uint64_t v26 = MEMORY[0x1895F8858](v22);
  uint64_t v64 = (char *)&v60 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = MEMORY[0x1895F8858](v26);
  uint64_t v30 = (char *)&v60 - v29;
  uint64_t v31 = *(void *)(v20 - 8);
  uint64_t v32 = MEMORY[0x1895F8858](v28);
  uint64_t v74 = (char *)&v60 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v32);
  uint64_t v63 = (char *)&v60 - v34;
  uint64_t v67 = a4;
  uint64_t v36 = type metadata accessor for Rope._Node(0LL, a2, a4, v35);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56LL))(v76, 1LL, 1LL, v36);
  uint64_t v73 = v25;
  uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
  uint64_t v38 = v75;
  uint64_t v62 = v37;
  v37(v30, v77, v75);
  uint64_t v72 = v24;
  uint64_t v39 = v31;
  char v40 = swift_dynamicCast();
  uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56);
  if ((v40 & 1) != 0)
  {
    uint64_t v42 = v72;
    v41(v72, 0LL, 1LL, v20);
    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v77, v38);
    uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
    uint64_t v44 = v63;
    v43(v63, v42, v20);
    uint64_t v45 = (uint64_t)v74;
    v43(v74, v44, v20);
    uint64_t v46 = sub_188DF8384();
    uint64_t v47 = v76;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8LL))(v76, v46);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v43)(v47, v45, v20);
  }

  else
  {
    uint64_t v60 = v36;
    uint64_t v61 = v31;
    uint64_t v49 = v72;
    uint64_t v63 = (char *)v20;
    v41(v72, 1LL, 1LL, v20);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v49, v66);
    Rope.Builder.init()(a2, v67, v50, v79);
    v62(v64, v77, v38);
    sub_188DF7FDC();
    swift_getAssociatedConformanceWitness();
    sub_188DF84D4();
    uint64_t v51 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v78 + 48);
    int v52 = v51(v14, 1LL, a2);
    uint64_t v53 = v71;
    if (v52 != 1)
    {
      uint64_t v54 = *(void (**)(char *, char *, uint64_t))(v78 + 32);
      do
      {
        v54(v11, v14, a2);
        sub_188D46004((uint64_t)v11, v53, (uint64_t (*)(char *, uint64_t))Rope.Builder._insertBeforeTip(_:));
        (*(void (**)(char *, uint64_t))(v78 + 8))(v11, a2);
        sub_188DF84D4();
      }

      while (v51(v14, 1LL, a2) != 1);
    }

    (*(void (**)(char *, uint64_t))(v70 + 8))(v16, AssociatedTypeWitness);
    uint64_t v55 = (uint64_t)v74;
    uint64_t v56 = v79;
    Rope.Builder.finalize()(v53, v57, (uint64_t)v74);
    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v77, v75);
    (*(void (**)(uint64_t *, uint64_t))(v69 + 8))(v56, v53);
    uint64_t v58 = sub_188DF8384();
    uint64_t v59 = v76;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v58 - 8) + 8LL))(v76, v58);
    return (*(uint64_t (**)(uint64_t, uint64_t, char *))(v61 + 32))(v59, v55, v63);
  }

uint64_t Rope.Builder.finalize()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v132 = a3;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = type metadata accessor for Rope(255LL, v4, v5, a2);
  uint64_t v136 = sub_188DF8384();
  uint64_t v126 = *(void *)(v136 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](v136);
  uint64_t v141 = (char *)&v116 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = MEMORY[0x1895F8858](v7);
  uint64_t v121 = (char *)&v116 - v10;
  uint64_t v11 = *(char **)(v6 - 8);
  uint64_t v12 = MEMORY[0x1895F8858](v9);
  uint64_t v127 = (char *)&v116 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  uint64_t v138 = (uint64_t)&v116 - v15;
  uint64_t v16 = MEMORY[0x1895F8858](v14);
  uint64_t v140 = (char *)&v116 - v17;
  MEMORY[0x1895F8858](v16);
  uint64_t v139 = (char *)&v116 - v18;
  uint64_t v116 = type metadata accessor for Rope._Node(255LL, v4, v5, v19);
  uint64_t v123 = sub_188DF8384();
  uint64_t v20 = MEMORY[0x1895F8858](v123);
  uint64_t v130 = (uint64_t)&v116 - v21;
  uint64_t v117 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](v20);
  unsigned int v118 = (char *)&v116 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v128 = v4;
  uint64_t v131 = v5;
  uint64_t v24 = type metadata accessor for Rope._Item(255LL, v4, v5, v23);
  uint64_t v25 = sub_188DF8384();
  uint64_t v135 = *(void *)(v25 - 8);
  uint64_t v26 = MEMORY[0x1895F8858](v25);
  uint64_t v124 = (uint64_t)&v116 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = MEMORY[0x1895F8858](v26);
  uint64_t v129 = (uint64_t)&v116 - v29;
  uint64_t v30 = MEMORY[0x1895F8858](v28);
  uint64_t v32 = (char *)&v116 - v31;
  uint64_t v33 = *(void *)(v24 - 8);
  uint64_t v34 = MEMORY[0x1895F8858](v30);
  uint64_t v122 = (char *)&v116 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = MEMORY[0x1895F8858](v34);
  uint64_t v120 = (uint64_t)&v116 - v37;
  uint64_t v38 = MEMORY[0x1895F8858](v36);
  char v40 = (char *)&v116 - v39;
  uint64_t v41 = MEMORY[0x1895F8858](v38);
  uint64_t v43 = (char *)&v116 - v42;
  Optional._take()(v41, (uint64_t)v32);
  uint64_t v137 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
  int v44 = v137(v32, 1LL, v24);
  uint64_t v134 = v33;
  if (v44 == 1)
  {
    uint64_t v45 = v135;
    (*(void (**)(char *, uint64_t))(v135 + 8))(v32, v25);
    uint64_t v46 = v142;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v43, v32, v24);
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v40, v43, v24);
    uint64_t v47 = v142;
    Rope.Builder._insertBeforeTip(_:)((uint64_t)v40, a1, v48, v49);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v43, v24);
    uint64_t v45 = v135;
    uint64_t v46 = v47;
  }

  uint64_t v50 = v129;
  uint64_t v51 = v46 + *(int *)(a1 + 40);
  Optional._take()(v25, v129);
  int v52 = v137((char *)v50, 1LL, v24);
  uint64_t v133 = v24;
  uint64_t v125 = v25;
  unsigned int v119 = v40;
  uint64_t v129 = v51;
  if (v52 == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v50, v25);
  }

  else
  {
    uint64_t v53 = v134;
    uint64_t v54 = v50;
    uint64_t v55 = v120;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v134 + 32))(v120, v54, v24);
    if ((Rope._Item.isUndersized.getter(v24) & 1) != 0)
    {
      uint64_t v56 = v117;
      uint64_t v57 = *(void (**)(char *, uint64_t, uint64_t))(v117 + 16);
      uint64_t v58 = v118;
      uint64_t v59 = v142;
      v57(v118, v142, a1);
      char v63 = Rope.Builder.isPrefixEmpty.getter(a1, v60, v61, v62);
      uint64_t v64 = *(void (**)(char *, uint64_t))(v56 + 8);
      v64(v58, a1);
      if ((v63 & 1) != 0)
      {
        v57(v58, v59, a1);
        char v68 = Rope.Builder.isSuffixEmpty.getter(a1, v65, v66, v67);
        v64(v58, a1);
        if ((v68 & 1) != 0)
        {
          uint64_t v69 = (uint64_t)v119;
          (*(void (**)(char *, uint64_t, uint64_t))(v134 + 16))(v119, v120, v133);
          static Rope._Node.createLeaf(_:)(v69, v128, v131);
        }

        Suffix = Rope.Builder._firstSuffixItem.modify(v143, a1);
        uint64_t v77 = v120;
        uint64_t v78 = v133;
        char v79 = Rope._Item.rebalance(prevNeighbor:)(v120, v133);
        ((void (*)(void *, void))Suffix)(v143, 0LL);
        uint64_t v80 = v134;
        if ((v79 & 1) == 0)
        {
          uint64_t v81 = (uint64_t)v119;
          (*(void (**)(char *, uint64_t, uint64_t))(v134 + 16))(v119, v77, v78);
          Rope.Builder._appendNow(_:)(v81, a1, v82, v83);
        }

        (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v77, v78);
      }

      else
      {
        Prefix = Rope.Builder._lastPrefixItem.modify(v143, a1);
        uint64_t v73 = v120;
        uint64_t v74 = v133;
        char v75 = Rope._Item.rebalance(nextNeighbor:)(v120, v133);
        ((void (*)(void *, void))Prefix)(v143, 0LL);
        if ((v75 & 1) != 0)
        {
          (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v73, v74);
        }

        else
        {
          uint64_t v84 = v134;
          uint64_t v85 = (uint64_t)v119;
          (*(void (**)(char *, uint64_t, uint64_t))(v134 + 16))(v119, v73, v74);
          Rope.Builder._appendNow(_:)(v85, a1, v86, v87);
          (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v73, v74);
        }
      }
    }

    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v40, v55, v24);
      Rope.Builder._appendNow(_:)((uint64_t)v40, a1, v70, v71);
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v55, v24);
    }
  }

  uint64_t v88 = v121;
  uint64_t v89 = a1;
  uint64_t v90 = sub_188DF8120();
  while (1)
  {
    uint64_t v91 = MEMORY[0x1895D7620](MEMORY[0x189618458], v90);
    uint64_t v92 = MEMORY[0x1895D7620](MEMORY[0x189618490], v90);
    MEMORY[0x1895D6BB8](v90, v91, v92);
    uint64_t v93 = (unsigned int (*)(char *, uint64_t, uint64_t))*((void *)v11 + 6);
    if (v93(v88, 1LL, v6) == 1) {
      break;
    }
    uint64_t v94 = v139;
    (*((void (**)(char *, char *, uint64_t))v11 + 4))(v139, v88, v6);
    uint64_t v95 = (uint64_t)v140;
    (*((void (**)(char *, char *, uint64_t))v11 + 2))(v140, v94, v6);
    Rope.Builder.insertBeforeTip(_:)(v95, v89, v96, v97);
    (*((void (**)(char *, uint64_t))v11 + 1))(v94, v6);
  }

  uint64_t v139 = *(char **)(v126 + 8);
  uint64_t v140 = v11;
  ((void (*)(char *, uint64_t))v139)(v88, v136);
  uint64_t v98 = v124;
  uint64_t v99 = v125;
  Optional._take()(v125, v124);
  uint64_t v100 = v133;
  if (v137((char *)v98, 1LL, v133) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v135 + 8))(v98, v99);
  }

  else
  {
    uint64_t v101 = v134;
    (*(void (**)(char *, uint64_t, uint64_t))(v134 + 32))(v122, v98, v100);
    uint64_t v102 = (uint64_t)v119;
    uint64_t v103 = v122;
    (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v119, v122, v100);
    Rope.Builder._appendNow(_:)(v102, v89, v104, v105);
    (*(void (**)(char *, uint64_t))(v101 + 8))(v103, v100);
  }

  uint64_t v106 = v128;
  uint64_t v107 = v130;
  Optional._take()(v123, v130);
  Rope.init(root:)(v107, v106, v131, v108, v138);
  uint8x8_t v109 = v141;
  MEMORY[0x1895D6BB8](v90, v91, v92);
  uint64_t v110 = v109;
  unsigned int v111 = v93(v109, 1LL, v6);
  uint64_t v112 = (uint64_t)v127;
  uint64_t v113 = v140;
  if (v111 != 1)
  {
    int8x8_t v114 = (void (*)(uint64_t, char *, uint64_t))*((void *)v140 + 4);
    do
    {
      v114(v112, v110, v6);
      sub_188D2921C(v112, v6);
      (*((void (**)(uint64_t, uint64_t))v113 + 1))(v112, v6);
      MEMORY[0x1895D6BB8](v90, v91, v92);
      uint64_t v110 = v141;
    }

    while (v93(v141, 1LL, v6) != 1);
  }

  ((void (*)(char *, uint64_t))v139)(v110, v136);
  return (*((uint64_t (**)(uint64_t, uint64_t, uint64_t))v113 + 4))(v132, v138, v6);
}

uint64_t Rope.Builder._prefixTrees.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Rope.Builder._prefixTrees.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *Swift::String v1 = a1;
  return result;
}

uint64_t (*Rope.Builder._prefixTrees.modify())()
{
  return nullsub_1;
}

uint64_t Rope.Builder._prefixLeaf.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3 + *(int *)(a1 + 36);
  type metadata accessor for Rope._Node(255LL, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
  uint64_t v6 = sub_188DF8384();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a3, v5, v6);
}

uint64_t Rope.Builder._prefixLeaf.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v4 + *(int *)(a2 + 36);
  type metadata accessor for Rope._Node(255LL, *(void *)(a2 + 16), *(void *)(a2 + 24), a4);
  uint64_t v7 = sub_188DF8384();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40LL))(v6, a1, v7);
}

uint64_t (*Rope.Builder._prefixLeaf.modify())()
{
  return nullsub_1;
}

uint64_t Rope.Builder._prefix.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3 + *(int *)(a1 + 40);
  type metadata accessor for Rope._Item(255LL, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
  uint64_t v6 = sub_188DF8384();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a3, v5, v6);
}

uint64_t Rope.Builder._prefix.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v4 + *(int *)(a2 + 40);
  type metadata accessor for Rope._Item(255LL, *(void *)(a2 + 16), *(void *)(a2 + 24), a4);
  uint64_t v7 = sub_188DF8384();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40LL))(v6, a1, v7);
}

uint64_t (*Rope.Builder._prefix.modify())()
{
  return nullsub_1;
}

uint64_t Rope.Builder._suffix.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3 + *(int *)(a1 + 44);
  type metadata accessor for Rope._Item(255LL, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
  uint64_t v6 = sub_188DF8384();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a3, v5, v6);
}

uint64_t Rope.Builder._suffix.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v4 + *(int *)(a2 + 44);
  type metadata accessor for Rope._Item(255LL, *(void *)(a2 + 16), *(void *)(a2 + 24), a4);
  uint64_t v7 = sub_188DF8384();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40LL))(v6, a1, v7);
}

uint64_t (*Rope.Builder._suffix.modify())()
{
  return nullsub_1;
}

uint64_t Rope.Builder._suffixTrees.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Rope.Builder._suffixTrees.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a2 + 48);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + v0(v6, 0LL, 1LL, v4) = a1;
  return result;
}

uint64_t (*Rope.Builder._suffixTrees.modify())()
{
  return nullsub_1;
}

uint64_t Rope.Builder.isPrefixEmpty.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = type metadata accessor for Rope._Node(255LL, v7, v8, a4);
  uint64_t v34 = sub_188DF8384();
  uint64_t v32 = *(void *)(v34 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](v34);
  uint64_t v31 = (char *)&v31 - v11;
  uint64_t v33 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)&v31 - v12;
  uint64_t v15 = type metadata accessor for Rope._Item(255LL, v7, v8, v14);
  uint64_t v16 = sub_188DF8384();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1895F8858](v16);
  uint64_t v19 = (char *)&v31 - v18;
  uint64_t v20 = *(int *)(a1 + 40);
  uint64_t v35 = v5;
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v19, (char *)v5 + v20, v16);
  LODWORD(v15) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48LL))(v19, 1LL, v15);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  if ((_DWORD)v15 != 1) {
    goto LABEL_6;
  }
  uint64_t v21 = v34;
  uint64_t v22 = v35;
  uint64_t v24 = v31;
  uint64_t v23 = v32;
  (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v31, (char *)v35 + *(int *)(a1 + 36), v34);
  uint64_t v25 = v33;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v24, 1LL, v9) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v13, v24, v9);
    BOOL v27 = Rope._Node.isEmpty.getter();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v9);
    if (v27) {
      goto LABEL_5;
    }
LABEL_6:
    char v29 = 0;
    return v29 & 1;
  }

  (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v21);
LABEL_5:
  uint64_t v36 = *v22;
  type metadata accessor for Rope(255LL, v7, v8, v26);
  uint64_t v28 = sub_188DF8120();
  MEMORY[0x1895D7620](MEMORY[0x189618488], v28);
  char v29 = sub_188DF827C();
  return v29 & 1;
}

uint64_t Rope.Builder.isSuffixEmpty.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = type metadata accessor for Rope._Item(255LL, v6, v7, a4);
  uint64_t v9 = sub_188DF8384();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)v17 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)v17 - v11, v4 + *(int *)(a1 + 44), v9);
  LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))(v12, 1LL, v8);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if ((_DWORD)v8 == 1)
  {
    v17[1] = *(void *)(v4 + *(int *)(a1 + 48));
    type metadata accessor for Rope(255LL, v6, v7, v13);
    uint64_t v14 = sub_188DF8120();
    MEMORY[0x1895D7620](MEMORY[0x189618488], v14);
    char v15 = sub_188DF827C();
  }

  else
  {
    char v15 = 0;
  }

  return v15 & 1;
}

uint64_t Rope.Builder.prefixSummary.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v74 = a3;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v62 = a1;
  uint64_t v5 = type metadata accessor for Rope._Item(255LL, v4, v3, a2);
  uint64_t v58 = sub_188DF8384();
  uint64_t v64 = *(void *)(v58 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](v58);
  char v63 = (char *)&v55 - v7;
  uint64_t v65 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v57 = (char *)&v55 - v8;
  uint64_t v10 = type metadata accessor for Rope._Node(255LL, v4, v3, v9);
  uint64_t v59 = sub_188DF8384();
  uint64_t v70 = *(void *)(v59 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](v59);
  uint64_t v69 = (char *)&v55 - v12;
  uint64_t v60 = *(void *)(v10 - 8);
  uint64_t v61 = v10;
  MEMORY[0x1895F8858](v11);
  uint64_t v56 = (char *)&v55 - v13;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v71 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v16 = (char *)&v55 - v15;
  uint64_t v18 = type metadata accessor for Rope(0LL, v4, v3, v17);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x1895F8858](v18);
  uint64_t v22 = (char *)&v55 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v55 = v21;
  MEMORY[0x1895F8858](v20);
  uint64_t v24 = (char *)&v55 - v23;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v26 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
  uint64_t v73 = AssociatedTypeWitness;
  v26(AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v27 = *v67;
  uint64_t v28 = swift_bridgeObjectRetain();
  uint64_t v29 = MEMORY[0x1895D69B4](v28, v18);
  uint64_t v66 = v5;
  uint64_t v72 = AssociatedConformanceWitness;
  if (v29)
  {
    uint64_t v30 = 0LL;
    char v68 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
    while (1)
    {
      char v31 = sub_188DF80F0();
      sub_188DF809C();
      if ((v31 & 1) != 0)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))( v24,  v27 + ((*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))
        + *(void *)(v19 + 72) * v30,
          v18);
        uint64_t v32 = v30 + 1;
        if (__OFADD__(v30, 1LL)) {
          goto LABEL_11;
        }
      }

      else
      {
        uint64_t result = sub_188DF8624();
        if (v55 != 8)
        {
          __break(1u);
          return result;
        }

        uint64_t v75 = result;
        (*(void (**)(char *, uint64_t *, uint64_t))(v19 + 16))(v24, &v75, v18);
        swift_unknownObjectRelease();
        uint64_t v32 = v30 + 1;
        if (__OFADD__(v30, 1LL))
        {
LABEL_11:
          __break(1u);
LABEL_12:
          swift_bridgeObjectRelease();
          goto LABEL_14;
        }
      }

      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v22, v24, v18);
      Rope.summary.getter(v18, v33, (uint64_t)v16);
      uint64_t v34 = v73;
      v68(v16, v73, v72);
      uint64_t v35 = v34;
      uint64_t AssociatedConformanceWitness = (uint64_t)v69;
      (*(void (**)(char *, uint64_t))(v71 + 8))(v16, v35);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
      ++v30;
      BOOL v36 = v32 == MEMORY[0x1895D69B4](v27, v18);
      uint64_t v32 = v70;
      if (v36) {
        goto LABEL_12;
      }
    }
  }

  swift_bridgeObjectRelease();
  uint64_t AssociatedConformanceWitness = (uint64_t)v69;
  uint64_t v32 = v70;
LABEL_14:
  uint64_t v38 = v62;
  uint64_t v39 = v67;
  uint64_t v40 = v59;
  (*(void (**)(uint64_t, char *, uint64_t))(v32 + 16))( AssociatedConformanceWitness,  (char *)v67 + *(int *)(v62 + 36),  v59);
  uint64_t v41 = v60;
  uint64_t v42 = AssociatedConformanceWitness;
  uint64_t v43 = AssociatedConformanceWitness;
  uint64_t v44 = v61;
  int v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v42, 1LL, v61);
  uint64_t v47 = v64;
  uint64_t v46 = v65;
  if (v45 == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v43, v40);
  }

  else
  {
    uint64_t v48 = v56;
    (*(void (**)(char *, uint64_t, uint64_t))(v41 + 32))(v56, v43, v44);
    (*(void (**)(char *, uint64_t))(v72 + 48))(&v48[*(int *)(v44 + 36)], v73);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v48, v44);
  }

  uint64_t v49 = v58;
  uint64_t v50 = (char *)v39 + *(int *)(v38 + 40);
  uint64_t v51 = v63;
  (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v63, v50, v58);
  uint64_t v52 = v66;
  uint64_t v53 = v57;
  (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v57, v51, v52);
  Rope._Item.summary.getter(v52);
  uint64_t v54 = v73;
  (*(void (**)(char *, uint64_t))(v72 + 48))(v16, v73);
  (*(void (**)(char *, uint64_t))(v71 + 8))(v16, v54);
  return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v53, v52);
}

uint64_t Rope.Builder.suffixSummary.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v44 = a1;
  uint64_t v47 = a3;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = type metadata accessor for Rope(0LL, v3, v4, a2);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](v5);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v37 = v8;
  MEMORY[0x1895F8858](v7);
  uint64_t v48 = (char *)&v36 - v10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v43 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v36 - v12;
  uint64_t v15 = type metadata accessor for Rope._Item(255LL, v3, v4, v14);
  uint64_t v40 = sub_188DF8384();
  uint64_t v16 = *(void *)(v40 - 8);
  uint64_t v17 = MEMORY[0x1895F8858](v40);
  uint64_t v41 = (char *)&v36 - v18;
  uint64_t v19 = *(void *)(v15 - 8);
  MEMORY[0x1895F8858](v17);
  uint64_t v39 = (char *)&v36 - v20;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))( AssociatedTypeWitness,  AssociatedConformanceWitness);
  uint64_t v22 = (char *)v45 + *(int *)(v44 + 44);
  uint64_t v38 = v16;
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  uint64_t v24 = v40;
  uint64_t v25 = v41;
  v23(v41, v22, v40);
  uint64_t v42 = v19;
  int v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v25, 1LL, v15);
  uint64_t v46 = AssociatedConformanceWitness;
  if (v26 == 1)
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v25, v24);
    uint64_t v27 = v43;
  }

  else
  {
    uint64_t v28 = v39;
    (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v39, v25, v15);
    Rope._Item.summary.getter(v15);
    (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))( v13,  AssociatedTypeWitness,  AssociatedConformanceWitness);
    uint64_t v27 = v43;
    (*(void (**)(char *, uint64_t))(v43 + 8))(v13, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v28, v15);
  }

  uint64_t v29 = *(void *)((char *)v45 + *(int *)(v44 + 48));
  uint64_t v30 = swift_bridgeObjectRetain();
  if (!MEMORY[0x1895D69B4](v30, v5)) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v31 = 0LL;
  int v45 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 48);
  while (1)
  {
    char v32 = sub_188DF80F0();
    sub_188DF809C();
    if ((v32 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))( v48,  v29 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
      + *(void *)(v6 + 72) * v31,
        v5);
      uint64_t v33 = v31 + 1;
      if (__OFADD__(v31, 1LL)) {
        goto LABEL_13;
      }
      goto LABEL_8;
    }

    uint64_t result = sub_188DF8624();
    if (v37 != 8) {
      break;
    }
    uint64_t v49 = result;
    (*(void (**)(char *, uint64_t *, uint64_t))(v6 + 16))(v48, &v49, v5);
    swift_unknownObjectRelease();
    uint64_t v33 = v31 + 1;
    if (__OFADD__(v31, 1LL))
    {
LABEL_13:
      __break(1u);
      return swift_bridgeObjectRelease();
    }

uint64_t Rope.Builder._lastPrefixItem.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v50 = a3;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v47 = type metadata accessor for Rope(255LL, v5, v6, a2);
  uint64_t v7 = sub_188DF8384();
  MEMORY[0x1895F8858](v7);
  uint64_t v46 = (char *)&v42 - v8;
  uint64_t v10 = type metadata accessor for Rope._Node(255LL, v5, v6, v9);
  uint64_t v11 = sub_188DF8384();
  uint64_t v48 = *(void *)(v11 - 8);
  uint64_t v49 = v11;
  uint64_t v12 = MEMORY[0x1895F8858](v11);
  uint64_t v44 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  uint64_t v16 = (char *)&v42 - v15;
  uint64_t v17 = *(void *)(v10 - 8);
  uint64_t v18 = MEMORY[0x1895F8858](v14);
  uint64_t v43 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v18);
  int v45 = (char *)&v42 - v20;
  uint64_t v22 = type metadata accessor for Rope._Item(255LL, v5, v6, v21);
  uint64_t v23 = sub_188DF8384();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1895F8858](v23);
  int v26 = (char *)&v42 - v25;
  (*(void (**)(char *, char *, uint64_t))(v24 + 16))((char *)&v42 - v25, &v3[*(int *)(a1 + 40)], v23);
  uint64_t v27 = *(void *)(v22 - 8);
  uint64_t v28 = v50;
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  uint64_t v29 = v48;
  uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
  v30(v16, &v3[*(int *)(a1 + 36)], v49);
  uint64_t v31 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48);
  if (v31((uint64_t *)v16, 1LL, v10) == 1)
  {
    char v32 = v16;
    uint64_t v33 = *(void (**)(char *, uint64_t))(v29 + 8);
    v33(v32, v49);
    uint64_t v51 = *(void *)v3;
    uint64_t v34 = v47;
    uint64_t v35 = sub_188DF8120();
    MEMORY[0x1895D7620](MEMORY[0x189618458], v35);
    uint64_t v36 = &v51;
    uint64_t v37 = v46;
    sub_188DF7C64();
    uint64_t v38 = *(void *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v37, 1LL, v34) == 1)
    {
      __break(1u);
    }

    else
    {
      uint64_t v36 = (uint64_t *)v44;
      v30(v44, v37, v49);
      if (v31(v36, 1LL, v10) != 1)
      {
        uint64_t v39 = v43;
        (*(void (**)(char *, uint64_t *, uint64_t))(v17 + 32))(v43, v36, v10);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v37, v34);
        Rope._Node.lastItem.getter(v10, v28);
        return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v39, v10);
      }
    }

    uint64_t result = ((uint64_t (*)(uint64_t *, uint64_t))v33)(v36, v49);
    __break(1u);
  }

  else
  {
    uint64_t v41 = v45;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v45, v16, v10);
    Rope._Node.lastItem.getter(v10, v28);
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v41, v10);
  }

  return result;
}

void (*Rope.Builder._lastPrefixItem.modify(void *a1, uint64_t a2))(void ***a1)
{
  uint64_t v5 = malloc(0xA8uLL);
  *a1 = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v27 = *(void *)(a2 + 16);
  uint64_t v8 = type metadata accessor for Rope._Item(255LL, v27, v6, v7);
  uint64_t v9 = sub_188DF8384();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = malloc(*(void *)(v10 + 64));
  int v26 = v5;
  v5[16] = v11;
  uint64_t v12 = (void *)(v2 + *(int *)(a2 + 40));
  (*(void (**)(void))(v10 + 16))();
  uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL);
  int v14 = v13(v11, 1LL, v8);
  (*(void (**)(void *, uint64_t))(v10 + 8))(v11, v9);
  if (v14 != 1)
  {
    uint64_t result = (void (*)(void ***))v13(v12, 1LL, v8);
    if ((_DWORD)result != 1) {
      return (void (*)(void ***))sub_188D41E64;
    }
    goto LABEL_11;
  }

  uint64_t v16 = v2 + *(int *)(a2 + 36);
  uint64_t v17 = type metadata accessor for Rope._Node(0LL, v27, v6, v15);
  uint64_t v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48LL);
  if (v18(v16, 1LL, v17) || Rope._Node.isEmpty.getter())
  {
    uint64_t v20 = type metadata accessor for Rope(0LL, v27, v6, v19);
    uint64_t v21 = swift_bridgeObjectRetain();
    uint64_t v22 = MEMORY[0x1895D699C](v21, v20);
    uint64_t result = (void (*)(void ***))swift_bridgeObjectRelease();
    if (!__OFSUB__(v22, 1LL))
    {
      sub_188DF8120();
      v26[18] = sub_188DF8138();
      v26[19] = Rope.root.modify((uint64_t)(v26 + 4), v20, v24, v25);
      v26[20] = Rope._Node.lastItem.modify(v26 + 8, v17);
      return sub_188D41EC4;
    }

    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  uint64_t result = (void (*)(void ***))((uint64_t (*)(uint64_t, uint64_t, uint64_t))v18)(v16, 1LL, v17);
  if ((_DWORD)result != 1)
  {
    v26[17] = Rope._Node.lastItem.modify(v26 + 12, v17);
    return sub_188D41E8C;
  }

void sub_188D41E64(uint64_t a1)
{
  Swift::String v1 = *(void **)a1;
  free(*(void **)(*(void *)a1 + 128LL));
  free(v1);
}

void sub_188D41E8C(void ***a1)
{
  Swift::String v1 = *a1;
  ((void (*)(void **, void))(*a1)[17])(*a1 + 12, 0LL);
  free(v1[16]);
  free(v1);
}

void sub_188D41EC4(void ***a1)
{
  Swift::String v1 = *a1;
  uint64_t v2 = (uint64_t)(*a1 + 4);
  uint64_t v3 = (void (*)(uint64_t, void))(*a1)[19];
  uint64_t v4 = (void (*)(void **, void))(*a1)[18];
  ((void (*)(void **, void))(*a1)[20])(*a1 + 8, 0LL);
  v3(v2, 0LL);
  v4(v1, 0LL);
  free(v1[16]);
  free(v1);
}

uint64_t Rope.Builder._lastPrefixItem.setter(uint64_t a1, uint64_t a2)
{
  return sub_188D42418(a1, a2, (uint64_t (*)(_BYTE *))Rope.Builder._lastPrefixItem.modify);
}

uint64_t Rope.Builder._firstSuffixItem.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v34 = a3;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v7 = type metadata accessor for Rope._Node(255LL, v6, v5, a2);
  uint64_t v32 = sub_188DF8384();
  uint64_t v30 = *(char **)(v32 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](v32);
  uint64_t v28 = (char *)&v27 - v9;
  uint64_t v33 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v31 = (char *)&v27 - v10;
  uint64_t v12 = type metadata accessor for Rope(0LL, v6, v5, v11);
  uint64_t v29 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  int v14 = (char *)&v27 - v13;
  uint64_t v16 = type metadata accessor for Rope._Item(255LL, v6, v5, v15);
  uint64_t v17 = sub_188DF8384();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1895F8858](v17);
  uint64_t v20 = (char *)&v27 - v19;
  uint64_t v21 = v3;
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))((char *)&v27 - v19, &v3[*(int *)(a1 + 44)], v17);
  uint64_t v22 = *(void *)(v16 - 8);
  uint64_t v23 = v34;
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  if (__OFSUB__(MEMORY[0x1895D699C](*(void *)&v21[*(int *)(a1 + 48)], v12), 1LL))
  {
    __break(1u);
  }

  else
  {
    sub_188DF8144();
    uint64_t v20 = v30;
    uint64_t v21 = v28;
    uint64_t v18 = v32;
    (*((void (**)(char *, char *, uint64_t))v30 + 2))(v28, v14, v32);
    uint64_t v24 = v33;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v21, 1LL, v7) != 1)
    {
      uint64_t v25 = v31;
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v31, v21, v7);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v12);
      Rope._Node.firstItem.getter(v7, v23);
      return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v25, v7);
    }
  }

  uint64_t result = (*((uint64_t (**)(char *, uint64_t))v20 + 1))(v21, v18);
  __break(1u);
  return result;
}

void (*Rope.Builder._firstSuffixItem.modify(void *a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v5 = malloc(0x80uLL);
  *a1 = v5;
  uint64_t v23 = *(void *)(a2 + 24);
  uint64_t v24 = *(void *)(a2 + 16);
  uint64_t v7 = type metadata accessor for Rope._Item(255LL, v24, v23, v6);
  uint64_t v8 = sub_188DF8384();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = malloc(*(void *)(v9 + 64));
  v5[12] = v10;
  uint64_t v11 = (void *)(v2 + *(int *)(a2 + 44));
  (*(void (**)(void))(v9 + 16))();
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL);
  int v13 = v12(v10, 1LL, v7);
  (*(void (**)(void *, uint64_t))(v9 + 8))(v10, v8);
  if (v13 == 1)
  {
    uint64_t v15 = type metadata accessor for Rope(0LL, v24, v23, v14);
    uint64_t v16 = swift_bridgeObjectRetain();
    uint64_t v17 = MEMORY[0x1895D699C](v16, v15);
    uint64_t result = (void (*)(uint64_t))swift_bridgeObjectRelease();
    if (!__OFSUB__(v17, 1LL))
    {
      sub_188DF8120();
      v5[13] = sub_188DF8138();
      v5[14] = Rope.root.modify((uint64_t)(v5 + 4), v15, v19, v20);
      uint64_t v22 = type metadata accessor for Rope._Node(0LL, v24, v23, v21);
      v5[15] = Rope._Node.firstItem.modify(v5 + 8, v22);
      return (void (*)(uint64_t))sub_188D423AC;
    }

    __break(1u);
  }

  else
  {
    uint64_t result = (void (*)(uint64_t))v12(v11, 1LL, v7);
    if ((_DWORD)result != 1) {
      return sub_188D42384;
    }
  }

  __break(1u);
  return result;
}

void sub_188D42384(uint64_t a1)
{
  Swift::String v1 = *(void **)a1;
  free(*(void **)(*(void *)a1 + 96LL));
  free(v1);
}

void sub_188D423AC(void ***a1)
{
  Swift::String v1 = *a1;
  uint64_t v2 = (uint64_t)(*a1 + 4);
  uint64_t v3 = (void (*)(uint64_t, void))(*a1)[14];
  uint64_t v4 = (void (*)(void **, void))(*a1)[13];
  ((void (*)(void **, void))(*a1)[15])(*a1 + 8, 0LL);
  v3(v2, 0LL);
  v4(v1, 0LL);
  free(v1[12]);
  free(v1);
}

uint64_t Rope.Builder._firstSuffixItem.setter(uint64_t a1, uint64_t a2)
{
  return sub_188D42418(a1, a2, (uint64_t (*)(_BYTE *))Rope.Builder._firstSuffixItem.modify);
}

uint64_t sub_188D42418(uint64_t a1, uint64_t a2, uint64_t (*a3)(_BYTE *))
{
  uint64_t v5 = (void (*)(_BYTE *, void))a3(v12);
  uint64_t v7 = v6;
  uint64_t v9 = type metadata accessor for Rope._Item(0LL, *(void *)(a2 + 16), *(void *)(a2 + 24), v8);
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(v7, a1, v9);
  v5(v12, 0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
}

uint64_t sub_188D424A4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v8 = sub_188DF8B4C();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t result = MEMORY[0x1895F8858](v8);
  int v13 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *a2;
  unint64_t v15 = *(void *)(*a2 + 16);
  if (!v15) {
    goto LABEL_15;
  }
  unint64_t v16 = 0LL;
  uint64_t v4 = v14 + 32;
  uint64_t v17 = (uint64_t *)(v14 + 32);
  while (*v17)
  {
    uint64_t v18 = v17[1];
    if (a1 < v18) {
      goto LABEL_11;
    }
    BOOL v26 = __OFSUB__(a1, v18);
    a1 -= v18;
    if (v26)
    {
      __break(1u);
      goto LABEL_61;
    }

uint64_t Rope.Builder.forEachElementInPrefix<A>(from:in:_:)( uint64_t a1, void (*a2)(char *, uint64_t, uint64_t, uint64_t), uint64_t (*a3)(char *, char *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v158 = a2;
  uint64_t v159 = a6;
  uint64_t v152 = a4;
  uint64_t v153 = a3;
  uint64_t v11 = *(void *)(a5 + 16);
  uint64_t v10 = *(void *)(a5 + 24);
  uint64_t v154 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v137 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v135 = (char *)&v128 - v13;
  uint64_t v140 = v14;
  uint64_t v141 = sub_188DF8384();
  uint64_t v139 = *(void *)(v141 - 8);
  MEMORY[0x1895F8858](v141);
  uint64_t v138 = (char *)&v128 - v15;
  uint64_t v17 = type metadata accessor for Rope._Item(255LL, v11, v10, v16);
  uint64_t v144 = sub_188DF8384();
  uint64_t v149 = *(void *)(v144 - 8);
  uint64_t v18 = MEMORY[0x1895F8858](v144);
  uint64_t v142 = (char *)&v128 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = MEMORY[0x1895F8858](v18);
  uint64_t v129 = (char *)&v128 - v21;
  uint64_t v22 = MEMORY[0x1895F8858](v20);
  uint64_t v132 = (char *)&v128 - v23;
  uint64_t v145 = *(void *)(v17 - 8);
  uint64_t v146 = v17;
  uint64_t v24 = MEMORY[0x1895F8858](v22);
  uint64_t v134 = (char *)&v128 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = MEMORY[0x1895F8858](v24);
  uint64_t v128 = (char *)&v128 - v27;
  MEMORY[0x1895F8858](v26);
  uint64_t v130 = (char *)&v128 - v28;
  uint64_t v30 = type metadata accessor for Rope._Node(255LL, v11, v10, v29);
  uint64_t v31 = sub_188DF8384();
  uint64_t v147 = *(void *)(v31 - 8);
  uint64_t v148 = v31;
  uint64_t v32 = MEMORY[0x1895F8858](v31);
  unsigned int v143 = (char *)&v128 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = MEMORY[0x1895F8858](v32);
  uint64_t v133 = (char *)&v128 - v35;
  uint64_t v36 = *(void *)(v30 - 8);
  uint64_t v150 = v30;
  uint64_t v151 = v36;
  uint64_t v37 = MEMORY[0x1895F8858](v34);
  uint64_t v136 = (char *)&v128 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v37);
  uint64_t v131 = (char *)&v128 - v39;
  uint64_t v40 = swift_getAssociatedTypeWitness();
  uint64_t v41 = *(void *)(v40 - 8);
  MEMORY[0x1895F8858](v40);
  unint64_t v43 = (char *)&v128 - v42;
  uint64_t v155 = (char *)v11;
  uint64_t v45 = type metadata accessor for Rope(0LL, v11, v10, v44);
  uint64_t v156 = *(void *)(v45 - 8);
  MEMORY[0x1895F8858](v45);
  unint64_t v47 = (char *)&v128 - v46;
  uint64_t v157 = v7;
  uint64_t v48 = MEMORY[0x1895D699C](*(void *)v7, v45);
  uint64_t v160 = a7;
  uint64_t v49 = 0LL;
  if (v48 >= 1)
  {
    uint64_t v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(a7 + 24);
    uint64_t v51 = a1;
    while (1)
    {
      sub_188DF8144();
      Rope.summary.getter(v45, v52, (uint64_t)v43);
      (*(void (**)(char *, uint64_t))(v156 + 8))(v47, v45);
      uint64_t v53 = v50(v43, v159, v160);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v43, v40);
      a1 = v51 - v53;
      if (v51 < v53)
      {
        a1 = v51;
        goto LABEL_8;
      }

      if (__OFSUB__(v51, v53)) {
        break;
      }
      ++v49;
      v51 -= v53;
      if (v49 >= MEMORY[0x1895D699C](*(void *)v157, v45)) {
        goto LABEL_8;
      }
    }

    __break(1u);
    goto LABEL_39;
  }

uint64_t sub_188D4349C(uint64_t a1, uint64_t (*a2)(uint64_t, char *))
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = sub_188DF8384();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v10 - v7;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( (char *)&v10 - v7,  1LL,  1LL,  AssociatedTypeWitness);
  LOBYTE(AssociatedTypeWitness) = a2(a1, v8);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return AssociatedTypeWitness & 1;
}

uint64_t sub_188D435A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if (!*(void *)(a1 + 80)
    || (uint64_t v4 = _s7BuilderVMa(),
        uint64_t result = sub_188D2208C(0xFuLL, a2 + *(int *)(v4 + 20), a2 + *(int *)(v4 + 24)),
        (v6 & 1) != 0))
  {
    uint64_t v7 = *(void **)(v3 + 96);
    uint64_t v8 = v7[2] - 1LL;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_17:
    }
      uint64_t v7 = sub_188CF73C8(v7);
    char v9 = 0;
    uint64_t v15 = v3;
    *(void *)(v3 + 96) = v7;
    while (1)
    {
      uint64_t v10 = v8 - 1;
      if (v8 < 1)
      {
        uint64_t result = 0LL;
        uint64_t v10 = 0LL;
        char v11 = (v8 != 0) | v9;
        char v9 = 1;
        if ((v11 & 1) != 0) {
          break;
        }
      }

      if ((unint64_t)v8 >= v7[2])
      {
        __break(1u);
        goto LABEL_17;
      }

      uint64_t v12 = (__int128 *)&v7[6 * v8 + 4];
      uint64_t v13 = (void *)v12 + 5;
      uint64_t v3 = *((void *)v12 + 5);
      if (*(void *)v12)
      {
        uint64_t v14 = *(unsigned __int8 *)(*(void *)v12 + 18LL);
        uint64_t v19 = *((void *)v12 + 5);
        uint64_t v20 = v14;
      }

      else
      {
        uint64_t v19 = *((void *)v12 + 5);
        uint64_t v20 = 0LL;
      }

      uint64_t v21 = 0LL;
      uint64_t v17 = 0LL;
      char v18 = 1;
      if (*(void *)v12)
      {
        sub_188D25150(&v16, (uint64_t)&v19, v12, (uint64_t)&v17, a2);
        *uint64_t v13 = v3 + 1;
        uint64_t v8 = v10;
        if ((v18 & 1) == 0)
        {
          uint64_t result = v17;
          break;
        }
      }

      else
      {
        uint64_t v8 = v10;
      }
    }

    *(void *)(v15 + 96) = v7;
  }

  return result;
}

uint64_t Rope.Builder.mutatingForEachSuffix<A>(_:)@<X0>( void (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v74 = a1;
  uint64_t v75 = a2;
  char v66 = a5;
  uint64_t v8 = sub_188DF8384();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v72 = v8;
  uint64_t v73 = v9;
  uint64_t v10 = MEMORY[0x1895F8858](v8);
  uint64_t v70 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  uint64_t v69 = (char *)&v64 - v13;
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  uint64_t v68 = (char *)&v64 - v15;
  uint64_t v16 = *(void *)(a4 - 8);
  uint64_t v77 = a4;
  uint64_t v78 = v16;
  uint64_t v17 = MEMORY[0x1895F8858](v14);
  uint64_t v65 = (char *)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v17);
  uint64_t v67 = (char *)&v64 - v19;
  uint64_t v20 = *(void *)(a3 + 24);
  uint64_t v76 = *(void *)(a3 + 16);
  uint64_t v22 = type metadata accessor for Rope._Item(255LL, v76, v20, v21);
  uint64_t v23 = sub_188DF8384();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1895F8858](v23);
  uint64_t v26 = (char *)&v64 - v25;
  uint64_t v27 = (char *)(v5 + *(int *)(a3 + 44));
  (*(void (**)(char *, char *, uint64_t))(v24 + 16))((char *)&v64 - v25, v27, v23);
  uint64_t v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48LL);
  int v29 = v28(v26, 1LL, v22);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  uint64_t v31 = v5;
  BOOL v45 = v29 == 1;
  uint64_t v32 = v76;
  uint64_t v71 = v20;
  if (!v45)
  {
    uint64_t result = v28(v27, 1LL, v22);
    if ((_DWORD)result == 1)
    {
LABEL_21:
      __break(1u);
      return result;
    }

    uint64_t v34 = v68;
    v74((uint64_t)v27);
    uint64_t v35 = v77;
    uint64_t v36 = v78;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v34, 1LL, v77) != 1)
    {
      uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v36 + 32);
      char v62 = v67;
      v61(v67, v34, v35);
      uint64_t v63 = v66;
      v61(v66, v62, v35);
      return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v63, 0LL, 1LL, v35);
    }

    (*(void (**)(char *, uint64_t))(v73 + 8))(v34, v72);
    uint64_t v20 = v71;
    uint64_t v31 = v5;
  }

  uint64_t v37 = (uint64_t *)(v31 + *(int *)(a3 + 48));
  uint64_t v38 = type metadata accessor for Rope(0LL, v32, v20, v30);
  uint64_t v39 = swift_bridgeObjectRetain();
  uint64_t v40 = MEMORY[0x1895D699C](v39, v38);
  uint64_t result = swift_bridgeObjectRelease();
  int64_t v41 = v40 - 1;
  if (__OFSUB__(v40, 1LL))
  {
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v42 = sub_188DF8120();
  sub_188DF80B4();
  uint64_t v68 = (char *)v42;
  sub_188DF80B4();
  LODWORD(v67) = 0;
  uint64_t v44 = v77;
  uint64_t v43 = v78;
  BOOL v45 = v40 == 1;
  if (v41 <= 0) {
    goto LABEL_8;
  }
LABEL_7:
  for (uint64_t i = v41 - 1; ; uint64_t i = 0LL)
  {
    sub_188DF80B4();
    sub_188D45DC0(v41, *v37);
    swift_bridgeObjectRetain();
    v79[0] = Rope.startIndex.getter(v38);
    v79[1] = v48;
    void v79[2] = v49;
    uint64_t v50 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56);
    uint64_t v51 = v70;
    uint64_t v52 = v50(v70, 1LL, 1LL, v44);
    MEMORY[0x1895F8858](v52);
    *(&v64 - 6) = v76;
    *(&v64 - 5) = v44;
    *(&v64 - 4) = v71;
    *(&v64 - 3) = (uint64_t)v51;
    uint64_t v53 = v75;
    *(&v64 - 2) = (uint64_t)v74;
    *(&v64 - _HashNode.ensureUnique(isUnique:)(v1 & 1) = v53;
    Rope._mutatingForEach(from:_:)(v79, (uint64_t)sub_188D25140, (uint64_t)(&v64 - 8), v38);
    uint64_t v54 = v72;
    uint64_t v55 = v73;
    uint64_t v56 = v69;
    (*(void (**)(void))(v73 + 32))();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v56, 1LL, v44) != 1)
    {
      uint64_t v57 = v77;
      uint64_t v58 = *(void (**)(char *, char *, uint64_t))(v78 + 32);
      char v59 = v65;
      v58(v65, v56, v77);
      uint64_t v60 = v66;
      v58(v66, v59, v57);
      return v50(v60, 0LL, 1LL, v57);
    }

    (*(void (**)(char *, uint64_t))(v55 + 8))(v56, v54);
    int64_t v41 = i;
    BOOL v45 = i == 0;
    if (i > 0) {
      goto LABEL_7;
    }
LABEL_8:
    BOOL v47 = !v45;
    LODWORD(v67) = 1;
  }

  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v78 + 56))(v66, 1LL, 1LL, v77);
}

uint64_t Rope.Builder._appendNow(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = a1;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v35 = *(void *)(a2 + 24);
  uint64_t v7 = type metadata accessor for Rope._Node(255LL, v6, v35, a4);
  uint64_t v8 = sub_188DF8384();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](v8);
  uint64_t v12 = (char *)&v32 - v11;
  uint64_t v13 = *(void *)(v7 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v10);
  uint64_t v33 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = MEMORY[0x1895F8858](v14);
  uint64_t v18 = (char *)&v32 - v17;
  uint64_t v19 = *(int *)(a2 + 36);
  uint64_t v34 = v4;
  uint64_t v20 = v4 + v19;
  Optional._take()(v16, (uint64_t)v12);
  int v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1LL, v7);
  uint64_t v36 = v6;
  if (v21 == 1) {
    static Rope._Node.createLeaf()(v6, v35);
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v12, v7);
  uint64_t v22 = v35;
  uint64_t v23 = v37;
  sub_188D516E8(v37, v7);
  if (Rope._Node.isFull.getter())
  {
    uint64_t v25 = (uint64_t)v33;
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v33, v18, v7);
    Rope.Builder._appendNow(_:)(v25, a2, v26, v27);
    uint64_t v29 = type metadata accessor for Rope._Item(0LL, v36, v22, v28);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8LL))(v23, v29);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, v7);
  }

  else
  {
    uint64_t v31 = type metadata accessor for Rope._Item(0LL, v36, v22, v24);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8LL))(v23, v31);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v20, v8);
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v20, v18, v7);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v20, 0LL, 1LL, v7);
  }

{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(void);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t *v65;
  uint64_t v66;
  char *v67;
  char v68;
  void (*v69)(char *, char *, uint64_t);
  char *v70;
  unsigned int v71;
  char *v72;
  char *v73;
  void (*v74)(char *, char *, uint64_t);
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int (*v78)(void, uint64_t, uint64_t);
  char *v79;
  BOOL v80;
  void (*v81)(char *, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  char *v87;
  char *v88;
  char *v89;
  void (*v90)(uint64_t, char *, uint64_t);
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  char *v95;
  uint64_t result;
  char *v97;
  uint64_t v98;
  void (*v99)(char *, char *, uint64_t);
  void (*v100)(uint64_t, char *, uint64_t);
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(void);
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(char *, char *, uint64_t);
  char *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v5 = v4;
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v9 = type metadata accessor for Rope._Node(255LL, v8, v7, a4);
  char v117 = sub_188DF8384();
  int8x8_t v114 = *(void *)(v117 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](v117);
  uint64_t v12 = (char *)&v98 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = MEMORY[0x1895F8858](v10);
  uint64_t v108 = (char *)&v98 - v14;
  uint64_t v15 = MEMORY[0x1895F8858](v13);
  uint64_t v110 = (char *)&v98 - v16;
  uint64_t v17 = MEMORY[0x1895F8858](v15);
  uint64_t v106 = (char *)&v98 - v18;
  MEMORY[0x1895F8858](v17);
  uint64_t v105 = (char *)&v98 - v19;
  uint64_t v115 = v7;
  uint64_t v116 = v8;
  int v21 = type metadata accessor for Rope(0LL, v8, v7, v20);
  uint64_t v122 = *(void *)(v21 - 8);
  uint64_t v22 = MEMORY[0x1895F8858](v21);
  uint64_t v24 = (char *)&v98 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = MEMORY[0x1895F8858](v22);
  uint64_t v124 = (char *)&v98 - v26;
  uint64_t v27 = MEMORY[0x1895F8858](v25);
  uint64_t v107 = (char *)&v98 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = MEMORY[0x1895F8858](v27);
  uint64_t v112 = (char *)&v98 - v30;
  uint64_t v31 = MEMORY[0x1895F8858](v29);
  uint64_t v109 = (char *)&v98 - v32;
  uint64_t v33 = MEMORY[0x1895F8858](v31);
  uint64_t v104 = (char *)&v98 - v34;
  uint64_t v35 = MEMORY[0x1895F8858](v33);
  BOOL v103 = (char *)&v98 - v36;
  uint64_t v37 = MEMORY[0x1895F8858](v35);
  unsigned int v111 = (char *)&v98 - v38;
  uint64_t v39 = MEMORY[0x1895F8858](v37);
  uint64_t v102 = (char *)&v98 - v40;
  MEMORY[0x1895F8858](v39);
  uint64_t v42 = *(void (**)(void))(v41 + 16);
  uint64_t v125 = (uint64_t *)((char *)&v98 - v43);
  uint64_t v118 = v42;
  char v119 = v41;
  v42();
  uint64_t v44 = sub_188DF8120();
  uint64_t v126 = *v5;
  MEMORY[0x1895D7620](MEMORY[0x189618488], v44);
  if ((sub_188DF827C() & 1) != 0) {
    goto LABEL_2;
  }
  uint64_t v49 = MEMORY[0x189618458];
  uint64_t v50 = MEMORY[0x189618490];
  char v113 = a1;
  uint64_t v120 = v5;
  uint64_t v101 = v12;
  uint64_t v121 = v44;
  while (2)
  {
    uint64_t v51 = v9;
    MEMORY[0x1895D7620](v49, v44);
    MEMORY[0x1895D7620](v50, v44);
    uint64_t v52 = v124;
    sub_188DF8300();
    char v123 = *(void (**)(char *, char *, uint64_t))(v122 + 16);
    while (1)
    {
      v123(v24, v52, v21);
      uint64_t v56 = Rope._height.getter(v21, v53, v54, v55);
      uint64_t v57 = *(void (**)(char *, uint64_t))(v122 + 8);
      v57(v24, v21);
      uint64_t v126 = *v120;
      if ((sub_188DF827C() & 1) != 0)
      {
        uint64_t v95 = v124;
        BOOL v45 = (uint64_t)v125;
        sub_188D29100((uint64_t)v125, v21, v58, v59);
        v123(v24, v95, v21);
        sub_188DF8108();
        uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v119 + 8);
        uint64_t v9 = v51;
        v48(v113, v51);
        v57(v95, v21);
        return ((uint64_t (*)(uint64_t, uint64_t))v48)(v45, v9);
      }

      sub_188DF8300();
      uint64_t v52 = v124;
      sub_188D2921C((uint64_t)v24, v21);
      v57(v24, v21);
    }

    uint64_t v60 = v124;
    v123(v24, v124, v21);
    uint64_t v64 = Rope._height.getter(v21, v61, v62, v63);
    v57(v24, v21);
    uint64_t v9 = v51;
    uint64_t v65 = v125;
    if (v64 != (Rope._Node.header.getter() >> 16))
    {
      uint64_t v75 = Rope._Node.isFull.getter();
      uint64_t v76 = (uint64_t)v112;
      if (v75)
      {
        uint64_t v67 = (unsigned int (*)(void, void, void))v110;
        uint64_t v99 = *(void (**)(char *, char *, uint64_t))(v114 + 16);
        v99(v110, v124, v117);
        uint64_t v77 = v119;
        uint64_t v78 = *(unsigned int (**)(void, uint64_t, uint64_t))(v119 + 48);
        char v79 = v109;
        uint64_t v100 = *(void (**)(uint64_t, char *, uint64_t))(v77 + 32);
        v100((uint64_t)v109, (char *)v67, v9);
        uint64_t v80 = Rope._Node.isFull.getter();
        uint64_t v81 = *(void (**)(char *, uint64_t))(v77 + 8);
        v81(v79, v9);
        int v82 = (uint64_t)v125;
        if (!v80)
        {
          v123(v24, v124, v21);
          uint64_t v67 = (unsigned int (*)(void, void, void))Rope._height.getter(v21, v83, v84, v85);
          v57(v24, v21);
          uint64_t v86 = (Rope._Node.header.getter() >> 16) + 1;
          if (((v86 >> 8) & 1) != 0)
          {
            __break(1u);
            goto LABEL_29;
          }

          if (v67 == v86)
          {
            ((void (*)(uint64_t, uint64_t, uint64_t))v118)(v76, v82, v9);
            uint64_t v87 = v124;
            if (v78(v124, 1LL, v9) == 1)
            {
LABEL_30:
              __break(1u);
              goto LABEL_31;
            }

            sub_188D51868(v76, v9);
            v81((char *)v76, v9);
            uint64_t v67 = (unsigned int (*)(void, void, void))v108;
            v99(v108, v87, v117);
            if (v78((char *)v67, 1LL, v9) != 1)
            {
              uint64_t v88 = v107;
              uint64_t v89 = v67;
              uint64_t v90 = v100;
              v100((uint64_t)v107, (char *)v89, v9);
              v57(v87, v21);
              v81((char *)v82, v9);
              v90(v82, v88, v9);
              uint64_t v44 = v121;
              goto LABEL_23;
            }

LABEL_2:
  BOOL v45 = (uint64_t)v125;
  ((void (*)(char *, uint64_t *, uint64_t))v118)(v12, v125, v9);
  uint64_t v46 = v119;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v119 + 56))(v12, 0LL, 1LL, v9);
  Rope.init(root:)((uint64_t)v12, v116, v115, v47, (uint64_t)v24);
  sub_188DF8108();
  uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
  v48(a1, v9);
  return ((uint64_t (*)(void, void))v48)(v45, v9);
}

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v14, AssociatedTypeWitness);
  uint64_t v16 = 0;
LABEL_3:
  *uint64_t v28 = v16;
  return result;
}

uint64_t Rope.Builder.insertBeforeTip(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v29 = a2;
  uint64_t v30 = *(void *)(a2 + 24);
  uint64_t v31 = v6;
  uint64_t v7 = type metadata accessor for Rope._Node(0LL, v6, v30, a4);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v28 = (char *)&v27 - v9;
  uint64_t v10 = sub_188DF8384();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  uint64_t v16 = (char *)&v27 - v15;
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v17((char *)&v27 - v15, a1, v10);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  int v19 = v18(v16, 1LL, v7);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v11 + 8);
  v20(v16, v10);
  if (v19 == 1) {
    goto LABEL_4;
  }
  v17(v14, a1, v10);
  if (v18(v14, 1LL, v7) != 1)
  {
    uint64_t v22 = (uint64_t)v28;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v28, v14, v7);
    Rope.Builder._insertBeforeTip(_:)(v22, v29, v23, v24);
LABEL_4:
    uint64_t v25 = type metadata accessor for Rope(0LL, v31, v30, v21);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8LL))(a1, v25);
  }

  uint64_t result = ((uint64_t (*)(char *, uint64_t))v20)(v14, v10);
  __break(1u);
  return result;
}

uint64_t Rope.Builder.insertBeforeTip<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = a1;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v41 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_188DF8384();
  uint64_t v11 = MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)&v35 - v12;
  uint64_t v38 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v37 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v18 = (char *)&v35 - v17;
  uint64_t v40 = a2;
  uint64_t v20 = type metadata accessor for Rope(0LL, v7, *(void *)(a2 + 24), v19);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = MEMORY[0x1895F8858](v20);
  uint64_t v24 = (char *)&v35 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = MEMORY[0x1895F8858](v22);
  uint64_t v27 = (char *)&v35 - v26;
  if (v25 == a3)
  {
    uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
    uint64_t v32 = v39;
    v31((char *)&v35 - v26, v39, a3);
    v31(v24, (uint64_t)v27, a3);
    Rope.Builder.insertBeforeTip(_:)((uint64_t)v24, v40, v33, v34);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v32, a3);
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v27, a3);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v15, v39, a3);
    sub_188DF7FDC();
    uint64_t v36 = a3;
    swift_getAssociatedConformanceWitness();
    sub_188DF84D4();
    uint64_t v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
    if (v28(v13, 1LL, v7) != 1)
    {
      uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
      do
      {
        v29(v9, v13, v7);
        sub_188D46004((uint64_t)v9, v40, (uint64_t (*)(char *, uint64_t))Rope.Builder._insertBeforeTip(_:));
        (*(void (**)(char *, uint64_t))(v41 + 8))(v9, v7);
        sub_188DF84D4();
      }

      while (v28(v13, 1LL, v7) != 1);
    }

    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v39, v36);
    return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v18, AssociatedTypeWitness);
  }

uint64_t sub_188D44C00( uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t (*a4)(void, void, void))
{
  uint64_t v7 = a4(0LL, *(void *)(a2 + 16), *(void *)(a2 + 24));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(a1, v7);
}

uint64_t Rope.Builder._insertBeforeTip(slots:in:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v8 = *(void *)(a4 + 16);
  uint64_t v7 = *(void *)(a4 + 24);
  uint64_t v9 = type metadata accessor for Rope._Node(0LL, v8, v7, a4);
  uint64_t v50 = *(void *)(v9 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v14 = (char *)&v44 - v13;
  uint64_t v16 = type metadata accessor for Rope._Item(0LL, v8, v7, v15);
  uint64_t v17 = MEMORY[0x1895F8858](v16);
  uint64_t v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = MEMORY[0x1895F8858](v17);
  uint64_t v23 = (char *)&v44 - v22;
  uint64_t v48 = a2;
  uint64_t v24 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if (v24 < 1)
  {
    return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(a3, v9);
  }

  else
  {
    if (v24 != 1) {
      Rope._Node.copy(slots:)(a1, v48, v9);
    }
    uint64_t v46 = result;
    BOOL v47 = v21;
    uint64_t v25 = a3;
    uint64_t v26 = Rope._Node.header.getter();
    uint64_t v27 = *(void *)a3;
    if ((v26 & 0xFF0000) != 0)
    {
      BOOL v47 = v25;
      uint64_t v28 = a1;
      uint64_t v29 = v50;
      uint64_t v30 = v27 + ((*(unsigned __int8 *)(v50 + 80) + 19LL) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80));
      MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, v9);
      uint64_t v31 = (unsigned __int16 *)nullsub_1(v27 + 16, v30, v8, v9, v7);
      uint64_t v33 = v32;
      swift_unknownObjectRetain();
      sub_188D452E4( v31,  v33,  v28,  v8,  v7,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Node,  (uint64_t)&protocol conformance descriptor for Rope<A>._Node,  (uint64_t)v14);
      swift_unknownObjectRelease();
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v12, v14, v9);
      Rope.Builder._insertBeforeTip(_:)((uint64_t)v12, v49, v34, v35);
      uint64_t v36 = *(uint64_t (**)(char *, uint64_t))(v29 + 8);
      v36(v47, v9);
      return v36(v14, v9);
    }

    else
    {
      BOOL v45 = (unsigned __int16 *)(v27 + 16);
      uint64_t v37 = v46;
      uint64_t v38 = v27 + ((v47[80] + 19LL) & ~(unint64_t)v47[80]);
      MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Item, v46);
      BOOL v45 = (unsigned __int16 *)nullsub_1(v45, v38, v8, v37, v7);
      uint64_t v40 = v39;
      swift_unknownObjectRetain();
      sub_188D452E4( v45,  v40,  a1,  v8,  v7,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Item,  (uint64_t)&protocol conformance descriptor for Rope<A>._Item,  (uint64_t)v23);
      swift_unknownObjectRelease();
      uint64_t v41 = v47;
      (*((void (**)(char *, char *, uint64_t))v47 + 2))(v19, v23, v37);
      Rope.Builder._insertBeforeTip(_:)((uint64_t)v19, v49, v42, v43);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v25, v9);
      return (*((uint64_t (**)(char *, uint64_t))v41 + 1))(v23, v37);
    }
  }

  return result;
}

uint64_t Rope.Builder._insertAfterTip(slots:in:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a4 + 16);
  uint64_t v7 = *(void *)(a4 + 24);
  uint64_t v41 = a4;
  uint64_t v9 = type metadata accessor for Rope._Node(0LL, v8, v7, a4);
  uint64_t v43 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v39 - v10;
  uint64_t v13 = type metadata accessor for Rope._Item(0LL, v8, v7, v12);
  uint64_t v14 = MEMORY[0x1895F8858](v13);
  uint64_t v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = MEMORY[0x1895F8858](v14);
  uint64_t v20 = (char *)&v39 - v19;
  uint64_t v42 = a2;
  uint64_t v21 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if (v21 < 1)
  {
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(a3, v9);
  }

  else
  {
    if (v21 != 1) {
      Rope._Node.copy(slots:)(a1, v42, v9);
    }
    uint64_t v40 = v18;
    uint64_t v22 = a3;
    uint64_t v23 = Rope._Node.header.getter();
    uint64_t v24 = *(void *)a3;
    if ((v23 & 0xFF0000) != 0)
    {
      uint64_t v40 = v22;
      uint64_t v25 = v43;
      uint64_t v26 = v24 + ((*(unsigned __int8 *)(v43 + 80) + 19LL) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80));
      MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, v9);
      uint64_t v27 = (unsigned __int16 *)nullsub_1(v24 + 16, v26, v8, v9, v7);
      uint64_t v29 = v28;
      swift_unknownObjectRetain();
      sub_188D452E4( v27,  v29,  a1,  v8,  v7,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Node,  (uint64_t)&protocol conformance descriptor for Rope<A>._Node,  (uint64_t)v11);
      swift_unknownObjectRelease();
      sub_188D45EB4((uint64_t)v11, v41, v30, v31);
      uint64_t v32 = *(uint64_t (**)(char *, uint64_t))(v25 + 8);
      v32(v40, v9);
      return v32(v11, v9);
    }

    else
    {
      uint64_t v39 = v24 + 16;
      uint64_t v33 = v24 + ((v40[80] + 19LL) & ~(unint64_t)v40[80]);
      MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Item, v13);
      uint64_t v34 = (unsigned __int16 *)nullsub_1(v39, v33, v8, v13, v7);
      uint64_t v39 = v35;
      swift_unknownObjectRetain();
      sub_188D452E4( v34,  v39,  a1,  v8,  v7,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Item,  (uint64_t)&protocol conformance descriptor for Rope<A>._Item,  (uint64_t)v20);
      swift_unknownObjectRelease();
      uint64_t v36 = v40;
      (*((void (**)(char *, char *, uint64_t))v40 + 2))(v16, v20, v13);
      Rope.Builder._insertAfterTip(_:)((uint64_t)v16, v41, v37, v38);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v22, v9);
      return (*((uint64_t (**)(char *, uint64_t))v36 + 1))(v20, v13);
    }
  }

  return result;
}

uint64_t sub_188D452E4@<X0>( unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t (*a6)(void, uint64_t, uint64_t)@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v15 = a6(0LL, a4, a5);
  uint64_t v16 = MEMORY[0x1895D7620](a7, v15);
  uint64_t v17 = Rope._UnsafeHandle.children.getter(a1, a2, a4, v15, a5, v16);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16LL))( a8,  v17 + *(void *)(*(void *)(v15 - 8) + 72LL) * a3,  v15);
}

Swift::Void __swiftcall Rope.Builder._dump(heightLimit:)(Swift::Int heightLimit)
{
  uint64_t v4 = v3;
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v108 = (int *)v1;
  uint64_t v8 = type metadata accessor for Rope._Item(255LL, v6, v7, v2);
  uint64_t v96 = sub_188DF8384();
  uint64_t v105 = *(void *)(v96 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](v96);
  uint64_t v104 = (char *)&v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = MEMORY[0x1895F8858](v9);
  uint64_t v95 = (char *)&v91 - v12;
  uint64_t v106 = *(void *)(v8 - 8);
  uint64_t v107 = v8;
  uint64_t v13 = MEMORY[0x1895F8858](v11);
  uint64_t v98 = (char *)&v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v94 = (char *)&v91 - v15;
  uint64_t v17 = type metadata accessor for Rope._Node(255LL, v6, v7, v16);
  uint64_t v18 = sub_188DF8384();
  uint64_t v100 = *(void *)(v18 - 8);
  uint64_t v101 = v18;
  uint64_t v19 = MEMORY[0x1895F8858](v18);
  uint64_t v99 = (char *)&v91 - v20;
  uint64_t v102 = *(void *)(v17 - 8);
  BOOL v103 = (unsigned int (*)(void, void, void))v17;
  MEMORY[0x1895F8858](v19);
  uint64_t v93 = (char *)&v91 - v21;
  uint64_t v23 = type metadata accessor for Rope(0LL, v6, v7, v22);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = MEMORY[0x1895F8858](v23);
  uint64_t v27 = (char *)&v91 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v92 = v26;
  MEMORY[0x1895F8858](v25);
  uint64_t v29 = (void (*)(char *, char *, uint64_t))((char *)&v91 - v28);
  uint64_t v112 = *v4;
  uint64_t v30 = sub_188DF8120();
  MEMORY[0x1895D7620](MEMORY[0x189618480], v30);
  uint64_t v97 = v30;
  sub_188DF81BC();
  uint64_t v31 = v113;
  int64_t v32 = v114;
  if (v113 == v114)
  {
LABEL_6:
    uint64_t v42 = v99;
    uint64_t v41 = v100;
    uint64_t v43 = v101;
    (*(void (**)(char *, char *, uint64_t))(v100 + 16))(v99, (char *)v4 + v108[9], v101);
    uint64_t v45 = v102;
    uint64_t v44 = v103;
    int v46 = (*(uint64_t (**)(char *, uint64_t, void))(v102 + 48))(v42, 1LL, v103);
    Swift::Int v109 = heightLimit;
    if (v46 == 1)
    {
      (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
    }

    else
    {
      BOOL v47 = v42;
      uint64_t v48 = v93;
      (*(void (**)(char *, char *, unsigned int (*)(void, void, void)))(v45 + 32))( v93,  v47,  v44);
      __swift_instantiateConcreteTypeFromMangledName(qword_18C74A100);
      uint64_t v49 = swift_allocObject();
      *(_OWORD *)(v49 + 16) = xmmword_188DF9DB0;
      *(void *)(v49 + 56) = MEMORY[0x189617FA8];
      *(void *)(v49 + 32) = 0x676E696C64656553LL;
      *(void *)(v49 + 40) = 0xE90000000000003ALL;
      sub_188DF8A2C();
      swift_bridgeObjectRelease();
      v50._uint64_t countAndFlagsBits = 8224LL;
      v50._object = (void *)0xE200000000000000LL;
      v51._uint64_t countAndFlagsBits = 8224LL;
      v51._object = (void *)0xE200000000000000LL;
      Rope._Node.dump(heightLimit:firstPrefix:restPrefix:)(heightLimit, v50, v51);
      (*(void (**)(char *, unsigned int (*)(void, void, void)))(v45 + 8))(v48, v44);
    }

    uint64_t v52 = v106;
    uint64_t v53 = v107;
    uint64_t v54 = v95;
    uint64_t v55 = v96;
    uint64_t v56 = v105;
    uint64_t v57 = (char *)v4 + v108[10];
    uint64_t v110 = *(void (**)(char *, char *, uint64_t))(v105 + 16);
    v110(v95, v57, v96);
    BOOL v103 = *(unsigned int (**)(void, void, void))(v52 + 48);
    if (v103(v54, 1LL, v53) == 1)
    {
      (*(void (**)(char *, uint64_t))(v56 + 8))(v54, v55);
      uint64_t v58 = (_OWORD *)&unk_188DF9000;
      uint64_t v59 = MEMORY[0x189617FA8];
    }

    else
    {
      uint64_t v60 = v94;
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v94, v54, v53);
      __swift_instantiateConcreteTypeFromMangledName(qword_18C74A100);
      uint64_t v61 = swift_allocObject();
      uint64_t v58 = &unk_188DF9000;
      __int128 v111 = xmmword_188DF9DB0;
      *(_OWORD *)(v61 + 16) = xmmword_188DF9DB0;
      uint64_t v59 = MEMORY[0x189617FA8];
      *(void *)(v61 + 56) = MEMORY[0x189617FA8];
      *(void *)(v61 + 32) = 0x3A64656553LL;
      *(void *)(v61 + 40) = 0xE500000000000000LL;
      sub_188DF8A2C();
      swift_bridgeObjectRelease();
      uint64_t v62 = swift_allocObject();
      *(_OWORD *)(v62 + 16) = v111;
      uint64_t v113 = 0LL;
      int64_t v114 = 0xE000000000000000LL;
      sub_188DF7EE0();
      MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Item, v107);
      sub_188DF8954();
      uint64_t v63 = v113;
      int64_t v64 = v114;
      *(void *)(v62 + 56) = v59;
      *(void *)(v62 + 32) = v63;
      *(void *)(v62 + 40) = v64;
      sub_188DF8A2C();
      uint64_t v53 = v107;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v106 + 8))(v60, v53);
    }

    uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(qword_18C74A100);
    uint64_t v66 = swift_allocObject();
    __int128 v111 = v58[219];
    *(_OWORD *)(v66 + 16) = v111;
    *(void *)(v66 + 56) = v59;
    *(void *)(v66 + 32) = 2960685LL;
    *(void *)(v66 + 40) = 0xE300000000000000LL;
    sub_188DF8A2C();
    swift_bridgeObjectRelease();
    uint64_t v67 = v104;
    v110(v104, (char *)v4 + v108[11], v55);
    unsigned int v68 = v103(v67, 1LL, v53);
    uint64_t v110 = (void (*)(char *, char *, uint64_t))v65;
    if (v68 == 1)
    {
      (*(void (**)(char *, uint64_t))(v105 + 8))(v67, v55);
      uint64_t v69 = 0LL;
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v106 + 32))(v98, v67, v53);
      uint64_t v70 = v59;
      uint64_t v71 = v53;
      uint64_t v72 = swift_allocObject();
      *(_OWORD *)(v72 + 16) = v111;
      uint64_t v113 = 0x20786966667553LL;
      int64_t v114 = 0xE700000000000000LL;
      uint64_t v112 = 0LL;
      sub_188DF88D0();
      sub_188DF7EE0();
      swift_bridgeObjectRelease();
      sub_188DF7EE0();
      uint64_t v73 = v113;
      int64_t v74 = v114;
      *(void *)(v72 + 56) = v59;
      *(void *)(v72 + 32) = v73;
      *(void *)(v72 + 40) = v74;
      sub_188DF8A2C();
      swift_bridgeObjectRelease();
      uint64_t v75 = swift_allocObject();
      *(_OWORD *)(v75 + 16) = v111;
      uint64_t v113 = 0LL;
      int64_t v114 = 0xE000000000000000LL;
      sub_188DF7EE0();
      MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Item, v71);
      uint64_t v76 = v98;
      sub_188DF8954();
      uint64_t v77 = v113;
      int64_t v78 = v114;
      *(void *)(v75 + 56) = v70;
      *(void *)(v75 + 32) = v77;
      *(void *)(v75 + 40) = v78;
      sub_188DF8A2C();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v106 + 8))(v76, v71);
      uint64_t v69 = 1LL;
    }

    uint64_t v79 = v97;
    uint64_t v112 = *(uint64_t *)((char *)v4 + v108[12]);
    swift_bridgeObjectRetain();
    MEMORY[0x1895D7620](MEMORY[0x189618458], v79);
    sub_188DF7CA0();
    uint64_t v80 = v113;
    uint64_t v81 = swift_bridgeObjectRetain();
    uint64_t v82 = MEMORY[0x1895D69B4](v81, v23);
    swift_bridgeObjectRelease();
    if (!v82)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      return;
    }

    while (!__OFSUB__(v82--, 1LL))
    {
      char v84 = sub_188DF80F0();
      sub_188DF809C();
      if ((v84 & 1) != 0)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v24 + 16))( v27,  v80 + ((*(unsigned __int8 *)(v24 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))
        + *(void *)(v24 + 72) * v82,
          v23);
      }

      else
      {
        uint64_t v90 = sub_188DF8624();
        if (v92 != 8) {
          goto LABEL_29;
        }
        uint64_t v113 = v90;
        (*(void (**)(char *, uint64_t *, uint64_t))(v24 + 16))(v27, &v113, v23);
        swift_unknownObjectRelease();
      }

      uint64_t v85 = swift_allocObject();
      *(_OWORD *)(v85 + 16) = v111;
      uint64_t v112 = v69;
      uint64_t v113 = 0x20786966667553LL;
      int64_t v114 = 0xE700000000000000LL;
      sub_188DF88D0();
      sub_188DF7EE0();
      swift_bridgeObjectRelease();
      uint64_t v86 = v113;
      int64_t v87 = v114;
      *(void *)(v85 + 56) = MEMORY[0x189617FA8];
      *(void *)(v85 + 32) = v86;
      *(void *)(v85 + 40) = v87;
      sub_188DF8A2C();
      swift_bridgeObjectRelease();
      if (__OFADD__(v69, 1LL)) {
        goto LABEL_26;
      }
      v88._uint64_t countAndFlagsBits = 8224LL;
      v88._object = (void *)0xE200000000000000LL;
      v89._uint64_t countAndFlagsBits = 8224LL;
      v89._object = (void *)0xE200000000000000LL;
      Rope._dump(heightLimit:firstPrefix:restPrefix:)(v109, v88, v89);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v23);
      ++v69;
      if (!v82) {
        goto LABEL_24;
      }
    }

    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  if (v114 >= v113)
  {
    if (v113 >= v114) {
      goto LABEL_28;
    }
    __int128 v111 = xmmword_188DF9DB0;
    uint64_t v110 = v29;
    do
    {
      __swift_instantiateConcreteTypeFromMangledName(qword_18C74A100);
      uint64_t v33 = v4;
      Swift::Int v34 = heightLimit;
      uint64_t v35 = swift_allocObject();
      *(_OWORD *)(v35 + 16) = v111;
      uint64_t v113 = 0LL;
      int64_t v114 = 0xE000000000000000LL;
      sub_188DF7EE0();
      uint64_t v112 = v31;
      sub_188DF8954();
      sub_188DF7EE0();
      uint64_t v36 = v113;
      int64_t v37 = v114;
      *(void *)(v35 + 56) = MEMORY[0x189617FA8];
      *(void *)(v35 + 32) = v36;
      *(void *)(v35 + 40) = v37;
      sub_188DF8A2C();
      heightLimit = v34;
      uint64_t v4 = v33;
      swift_bridgeObjectRelease();
      uint64_t v38 = v110;
      sub_188DF8144();
      v39._uint64_t countAndFlagsBits = 8224LL;
      v39._object = (void *)0xE200000000000000LL;
      v40._uint64_t countAndFlagsBits = 8224LL;
      v40._object = (void *)0xE200000000000000LL;
      Rope._dump(heightLimit:firstPrefix:restPrefix:)(heightLimit, v39, v40);
      (*(void (**)(void (*)(char *, char *, uint64_t), uint64_t))(v24 + 8))(v38, v23);
      ++v31;
    }

    while (v32 != v31);
    goto LABEL_6;
  }

uint64_t type metadata accessor for Rope.Builder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Rope.Builder);
}

uint64_t sub_188D45DC0(unint64_t a1, uint64_t a2)
{
  uint64_t result = _swift_isClassOrObjCExistentialType();
  if ((a1 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }

  uint64_t v5 = a2 & 0xFFFFFFFFFFFFF8LL;
  if ((result & 1) == 0) {
    uint64_t v5 = a2;
  }
  if (*(void *)(v5 + 16) <= a1) {
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_188D45E10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = type metadata accessor for Rope(0LL, *(void *)(a2 + 16), *(void *)(a2 + 24), a4);
  MEMORY[0x1895F8858](v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v9 - v7, a1, v5);
  sub_188DF8120();
  return sub_188DF8108();
}

uint64_t sub_188D45EB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = type metadata accessor for Rope._Node(255LL, v6, v7, a4);
  uint64_t v9 = sub_188DF8384();
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v22 - v10;
  uint64_t v13 = type metadata accessor for Rope(0LL, v6, v7, v12);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v16 = (char *)&v22 - v15;
  uint64_t v17 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v11, a1, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v11, 0LL, 1LL, v8);
  Rope.init(root:)((uint64_t)v11, v6, v7, v18, (uint64_t)v16);
  sub_188D45E10((uint64_t)v16, a2, v19, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t sub_188D45FEC(uint64_t a1, uint64_t a2)
{
  return sub_188D46004(a1, a2, (uint64_t (*)(char *, uint64_t))Rope.Builder._insertBeforeTip(_:));
}

uint64_t sub_188D45FF8(uint64_t a1, uint64_t a2)
{
  return sub_188D46004(a1, a2, (uint64_t (*)(char *, uint64_t))Rope.Builder._insertAfterTip(_:));
}

uint64_t sub_188D46004(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, uint64_t))
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Rope._Item(0LL, v6, *(void *)(v10 + 24), v11);
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)&v16 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  Rope._Item.init(_:)((uint64_t)v9, v6, (uint64_t)v14);
  return a3(v14, a2);
}

uint64_t sub_188D460F0(uint64_t a1)
{
  return sub_188D4349C(a1, *(uint64_t (**)(uint64_t, char *))(v1 + 40)) & 1;
}

uint64_t sub_188D46114()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_188D4611C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  type metadata accessor for Rope._Node(255LL, v4, v5, a4);
  uint64_t result = sub_188DF8384();
  if (v8 <= 0x3F)
  {
    type metadata accessor for Rope._Item(255LL, v4, v5, v7);
    uint64_t result = sub_188DF8384();
    if (v9 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0LL;
    }
  }

  return result;
}

uint64_t *sub_188D461EC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(_DWORD *)(v7 + 80);
  uint64_t v10 = v9 | 7;
  uint64_t v11 = v9 + 8;
  size_t v12 = ((v9 + 8) & ~v9) + *(void *)(v7 + 64);
  uint64_t v13 = *(void *)(v5 - 8);
  uint64_t v14 = *(unsigned int *)(v13 + 84);
  uint64_t v15 = *(_DWORD *)(v13 + 80);
  uint64_t v52 = *(void *)(v13 + 64);
  uint64_t v53 = v5;
  if ((_DWORD)v14) {
    uint64_t v16 = *(void *)(v13 + 64);
  }
  else {
    uint64_t v16 = *(void *)(v13 + 64) + 1LL;
  }
  int v17 = (*(_DWORD *)(v13 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000;
  uint64_t v18 = *a2;
  *a1 = *a2;
  if ((v10 | v15) == 7
    && v17 == 0
    && ((v16 + 7 + ((v16 + v15 + ((v12 + v15 + ((v9 + 8) & ~(v9 | 7))) & ~v15)) & ~v15)) & 0xFFFFFFFFFFFFFFF8LL) + 8 <= 0x18)
  {
    uint64_t v46 = v13;
    uint64_t v48 = v16 + v15;
    Swift::String v50 = a1;
    size_t __n = v16;
    uint64_t v49 = v16 + 7;
    uint64_t v22 = ~v10;
    uint64_t v23 = ~v9;
    uint64_t v24 = (char *)a1 + v10;
    uint64_t v25 = (char *)a2 + v10;
    uint64_t v26 = (void *)((unint64_t)(v24 + 8) & v22);
    uint64_t v27 = (uint64_t *)((unint64_t)(v25 + 8) & v22);
    swift_bridgeObjectRetain();
    uint64_t v44 = v23;
    if ((v8 & 0x80000000) != 0)
    {
      int v29 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))( ((unint64_t)v27 + v11) & v23,  v8,  AssociatedTypeWitness);
    }

    else
    {
      uint64_t v28 = *v27;
      int v29 = v28 + 1;
    }

    uint64_t v30 = v46;
    uint64_t v31 = ~v15;
    if (v29)
    {
      memcpy(v26, v27, v12);
    }

    else
    {
      *uint64_t v26 = *v27;
      unint64_t v47 = ((unint64_t)v26 + v11) & v44;
      unint64_t v45 = ((unint64_t)v27 + v11) & v44;
      int64_t v32 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16);
      swift_unknownObjectRetain();
      v32(v47, v45, AssociatedTypeWitness);
    }

    uint64_t v33 = (char *)v27 + v12;
    Swift::Int v34 = (void *)(((unint64_t)v26 + v12 + v15) & v31);
    uint64_t v35 = (unsigned __int8 *)((unint64_t)&v33[v15] & v31);
    if ((_DWORD)v14)
    {
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v30 + 48))( (unint64_t)&v33[v15] & v31,  v14,  v53))
      {
        memcpy(v34, v35, __n);
      }

      else
      {
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v30 + 16))(v34, v35, v53);
      }

      uint64_t v21 = v50;
      Swift::String v39 = (_BYTE *)(((unint64_t)v34 + v48) & v31);
      Swift::String v40 = (_BYTE *)((unint64_t)&v35[v48] & v31);
      if (!(*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v30 + 48))(v40, v14, v53))
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v30 + 16))(v39, v40, v53);
LABEL_49:
        *(void *)((unint64_t)&v39[v49] & 0xFFFFFFFFFFFFF8LL) = *(void *)((unint64_t)&v40[v49] & 0xFFFFFFFFFFFFF8LL);
        swift_bridgeObjectRetain();
        return v21;
      }
    }

    else
    {
      char v36 = 8 * v52;
      uint64_t v21 = v50;
      if (!v35[v52]) {
        goto LABEL_37;
      }
      int v37 = (v35[v52] - 1) << v36;
      if ((_DWORD)v52)
      {
        else {
          int v38 = 4;
        }
        __asm { BR              X11 }
      }

      if (v37 == -1)
      {
LABEL_37:
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v30 + 16))(v34, v35, v53);
        *((_BYTE *)v34 + v52) = 0;
      }

      else
      {
        memcpy(v34, v35, __n);
      }

      Swift::String v39 = (_BYTE *)(((unint64_t)v34 + v48) & v31);
      Swift::String v40 = (_BYTE *)((unint64_t)&v35[v48] & v31);
      if (!v40[v52]) {
        goto LABEL_48;
      }
      int v41 = (v40[v52] - 1) << v36;
      if ((_DWORD)v52)
      {
        else {
          int v42 = 4;
        }
        __asm { BR              X11 }
      }

      if (v41 == -1)
      {
LABEL_48:
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v30 + 16))(v39, v40, v53);
        v39[v52] = 0;
        goto LABEL_49;
      }
    }

    memcpy(v39, v40, __n);
    goto LABEL_49;
  }

  uint64_t v21 = (uint64_t *)(v18 + (((v10 | v15) + 16) & ~(v10 | v15)));
  swift_retain();
  return v21;
}

uint64_t sub_188D465F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (uint64_t *)((a1 + (v7 | 7) + 8) & ~(v7 | 7));
  uint64_t v9 = ~v7;
  uint64_t v10 = v7 + 8;
  uint64_t v11 = (v7 + 8) & ~v7;
  uint64_t v12 = *(void *)(v6 + 64);
  if ((*(_DWORD *)(v6 + 84) & 0x80000000) != 0)
  {
    uint64_t v14 = v11 + v12;
    if (!(*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v8 + v10) & v9))
    {
LABEL_5:
      swift_unknownObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))( ((unint64_t)v8 + v10) & v9,  AssociatedTypeWitness);
    }
  }

  else
  {
    uint64_t v13 = *v8;
    uint64_t v14 = v11 + v12;
    if ((_DWORD)v13 == -1) {
      goto LABEL_5;
    }
  }

  uint64_t v15 = *(void *)(v4 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  unint64_t v17 = ((unint64_t)v8 + v14 + v16) & ~v16;
  uint64_t v18 = *(unsigned int *)(v15 + 84);
  uint64_t v19 = *(void *)(v15 + 64);
  if ((_DWORD)v18)
  {
    if ((*(unsigned int (**)(unint64_t, void, uint64_t))(v15 + 48))( v17,  *(unsigned int *)(v15 + 84),  v4))
    {
      goto LABEL_21;
    }

    goto LABEL_20;
  }

  if (!*(_BYTE *)(v17 + v19)) {
    goto LABEL_20;
  }
  int v20 = (*(unsigned __int8 *)(v17 + v19) - 1) << (8 * v19);
  if ((_DWORD)v19)
  {
    else {
      int v21 = 4;
    }
    __asm { BR              X11 }
  }

  if (v20 == -1) {
LABEL_20:
  }
    (*(void (**)(unint64_t, uint64_t))(v15 + 8))(v17, v4);
LABEL_21:
  if ((_DWORD)v18) {
    uint64_t v22 = v19;
  }
  else {
    uint64_t v22 = v19 + 1;
  }
  unint64_t v23 = (v22 + v16 + v17) & ~v16;
  if ((_DWORD)v18)
  {
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v15 + 48))(v23, v18, v4)) {
LABEL_36:
    }
      (*(void (**)(unint64_t, uint64_t))(v15 + 8))(v23, v4);
  }

  else
  {
    if (!*(_BYTE *)(v23 + v19)) {
      goto LABEL_36;
    }
    int v24 = (*(unsigned __int8 *)(v23 + v19) - 1) << (8 * v19);
    if ((_DWORD)v19)
    {
      else {
        int v25 = 4;
      }
      __asm { BR              X11 }
    }

    if (v24 == -1) {
      goto LABEL_36;
    }
  }

  return swift_bridgeObjectRelease();
}

void *sub_188D46884(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v38 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v7 | 7) + 8;
  int v37 = a1;
  uint64_t v9 = (void *)(((unint64_t)a1 + v8) & ~(v7 | 7));
  uint64_t v10 = (uint64_t *)(((unint64_t)a2 + v8) & ~(v7 | 7));
  uint64_t v11 = *(unsigned int *)(v6 + 84);
  uint64_t v12 = ~v7;
  uint64_t v13 = v7 + 8;
  uint64_t v14 = (v7 + 8) & ~v7;
  uint64_t v15 = *(void *)(v6 + 64);
  swift_bridgeObjectRetain();
  if ((v11 & 0x80000000) != 0)
  {
    int v18 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))( ((unint64_t)v10 + v13) & v12,  v11,  AssociatedTypeWitness);
    size_t v17 = v14 + v15;
    if (v18)
    {
LABEL_5:
      memcpy(v9, v10, v17);
      goto LABEL_8;
    }
  }

  else
  {
    uint64_t v16 = *v10;
    size_t v17 = v14 + v15;
    if ((_DWORD)v16 != -1) {
      goto LABEL_5;
    }
  }

  void *v9 = *v10;
  uint64_t v19 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
  swift_unknownObjectRetain();
  v19(((unint64_t)v9 + v13) & v12, ((unint64_t)v10 + v13) & v12, AssociatedTypeWitness);
LABEL_8:
  uint64_t v20 = *(void *)(v38 - 8);
  uint64_t v21 = *(unsigned __int8 *)(v20 + 80);
  uint64_t v22 = ~v21;
  unint64_t v23 = (_BYTE *)(((unint64_t)v9 + v17 + v21) & ~v21);
  int v24 = (_BYTE *)(((unint64_t)v10 + v17 + v21) & ~v21);
  uint64_t v25 = *(unsigned int *)(v20 + 84);
  size_t v26 = *(void *)(v20 + 64);
  if ((_DWORD)v25)
  {
    if (!(*(unsigned int (**)(_BYTE *, void, uint64_t))(v20 + 48))(v24, *(unsigned int *)(v20 + 84), v38))
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v20 + 16))(v23, v24, v38);
      size_t v27 = v26;
      uint64_t v28 = (_BYTE *)((unint64_t)&v23[v26 + v21] & v22);
      int v29 = (_BYTE *)((unint64_t)&v24[v26 + v21] & v22);
      goto LABEL_24;
    }
  }

  else
  {
    if (!v24[v26]) {
      goto LABEL_26;
    }
    int v30 = (v24[v26] - 1) << (8 * v26);
    if ((_DWORD)v26)
    {
      else {
        int v31 = 4;
      }
      __asm { BR              X11 }
    }

    if (v30 == -1)
    {
LABEL_26:
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v20 + 16))(v23, v24, v38);
      v23[v26] = 0;
      size_t v27 = v26 + 1;
      size_t v32 = v26 + 1 + v21;
      uint64_t v28 = (_BYTE *)((unint64_t)&v23[v32] & v22);
      int v29 = (_BYTE *)((unint64_t)&v24[v32] & v22);
      goto LABEL_27;
    }
  }

  if ((_DWORD)v25) {
    size_t v27 = v26;
  }
  else {
    size_t v27 = v26 + 1;
  }
  memcpy(v23, v24, v27);
  uint64_t v28 = (_BYTE *)((unint64_t)&v23[v27 + v21] & v22);
  int v29 = (_BYTE *)((unint64_t)&v24[v27 + v21] & v22);
  if ((_DWORD)v25)
  {
LABEL_24:
    if (!(*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v20 + 48))(v29, v25, v38))
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v20 + 16))(v28, v29, v38);
LABEL_39:
      uint64_t v35 = v37;
      goto LABEL_40;
    }

    goto LABEL_37;
  }

void *sub_188D46C40(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + 8;
  uint64_t v11 = (void *)(((unint64_t)a1 + v10) & ~(v9 | 7));
  uint64_t v12 = (uint64_t *)(((unint64_t)a2 + v10) & ~(v9 | 7));
  uint64_t v13 = *(unsigned int *)(v8 + 84);
  uint64_t v14 = ~v9;
  uint64_t v15 = v9 + 8;
  size_t v16 = ((v9 + 8) & ~v9) + *(void *)(v8 + 64);
  uint64_t v55 = a1;
  if ((v13 & 0x80000000) == 0)
  {
    uint64_t v17 = *v12;
    int v18 = v17 + 1;
    if (*v11 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
LABEL_8:
    if (v18) {
      goto LABEL_9;
    }
    *uint64_t v11 = *v12;
    unint64_t v21 = ((unint64_t)v11 + v15) & v14;
    unint64_t v22 = ((unint64_t)v12 + v15) & v14;
    unint64_t v23 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16);
    swift_unknownObjectRetain();
    v23(v21, v22, AssociatedTypeWitness);
    goto LABEL_12;
  }

  uint64_t v54 = v6;
  uint64_t v19 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
  int v20 = v19(((unint64_t)v11 + v15) & v14, v13, AssociatedTypeWitness);
  int v18 = v19(((unint64_t)v12 + v15) & v14, v13, AssociatedTypeWitness);
  uint64_t v6 = v54;
  if (v20) {
    goto LABEL_8;
  }
LABEL_5:
  if (v18)
  {
    swift_unknownObjectRelease();
    (*(void (**)(unint64_t, uint64_t))(v8 + 8))( ((unint64_t)v11 + v15) & v14,  AssociatedTypeWitness);
LABEL_9:
    memcpy(v11, v12, v16);
    goto LABEL_12;
  }

  *uint64_t v11 = *v12;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))( ((unint64_t)v11 + v15) & v14,  ((unint64_t)v12 + v15) & v14,  AssociatedTypeWitness);
LABEL_12:
  int v24 = (char *)v12 + v16;
  uint64_t v25 = *(void *)(v6 - 8);
  uint64_t v26 = *(unsigned __int8 *)(v25 + 80);
  uint64_t v27 = ~v26;
  uint64_t v28 = (_BYTE *)(((unint64_t)v11 + v16 + v26) & ~v26);
  int v29 = (_BYTE *)((unint64_t)&v24[v26] & ~v26);
  uint64_t v30 = *(unsigned int *)(v25 + 84);
  size_t v31 = *(void *)(v25 + 64);
  if ((_DWORD)v30)
  {
    size_t v32 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v25 + 48);
    int v33 = v32(v28, *(unsigned int *)(v25 + 84), v6);
    int v34 = v32(v29, v30, v6);
    if (v33)
    {
      if (!v34)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v25 + 16))(v28, v29, v6);
        size_t v35 = v31;
        char v36 = (_BYTE *)((unint64_t)&v28[v31 + v26] & v27);
        int v37 = (_BYTE *)((unint64_t)&v29[v31 + v26] & v27);
        goto LABEL_47;
      }

      goto LABEL_38;
    }
  }

  else
  {
    if (v28[v31])
    {
      int v38 = (v28[v31] - 1) << (8 * v31);
      if ((_DWORD)v31)
      {
        else {
          int v39 = 4;
        }
        __asm { BR              X12 }
      }

      if (v38 != -1)
      {
        if (!v29[v31] || (v29[v31] - 1) << (8 * v31) == -1)
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v25 + 16))(v28, v29, v6);
          v28[v31] = 0;
          size_t v35 = v31 + 1;
          size_t v47 = v31 + 1 + v26;
          char v36 = (_BYTE *)((unint64_t)&v28[v47] & v27);
          int v37 = (_BYTE *)((unint64_t)&v29[v47] & v27);
          goto LABEL_53;
        }

        goto LABEL_38;
      }
    }

    if (!v29[v31])
    {
LABEL_42:
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v25 + 24))(v28, v29, v6);
      goto LABEL_43;
    }

    int v40 = (v29[v31] - 1) << (8 * v31);
    if ((_DWORD)v31)
    {
      else {
        int v41 = 4;
      }
      __asm { BR              X11 }
    }

    int v34 = v40 + 1;
  }

  if (!v34) {
    goto LABEL_42;
  }
  (*(void (**)(_BYTE *, uint64_t))(v25 + 8))(v28, v6);
LABEL_38:
  if ((_DWORD)v30) {
    size_t v42 = v31;
  }
  else {
    size_t v42 = v31 + 1;
  }
  memcpy(v28, v29, v42);
LABEL_43:
  if ((_DWORD)v30) {
    size_t v35 = v31;
  }
  else {
    size_t v35 = v31 + 1;
  }
  char v36 = (_BYTE *)((unint64_t)&v28[v35 + v26] & v27);
  int v37 = (_BYTE *)((unint64_t)&v29[v35 + v26] & v27);
  if ((_DWORD)v30)
  {
LABEL_47:
    uint64_t v43 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v25 + 48);
    int v44 = v43(v36, v30, v6);
    int v45 = v43(v37, v30, v6);
    if (v44)
    {
      if (v45) {
        goto LABEL_49;
      }
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v25 + 16))(v36, v37, v6);
LABEL_77:
      uint64_t v46 = v55;
      goto LABEL_78;
    }

    goto LABEL_74;
  }

void *sub_188D4731C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v8 | 7) + 8;
  uint64_t v10 = (void *)(((unint64_t)a1 + v9) & ~(v8 | 7));
  uint64_t v11 = (uint64_t *)(((unint64_t)a2 + v9) & ~(v8 | 7));
  uint64_t v12 = ~v8;
  uint64_t v13 = v8 + 8;
  uint64_t v14 = (v8 + 8) & ~v8;
  uint64_t v15 = *(void *)(v7 + 64);
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) != 0)
  {
    size_t v17 = v14 + v15;
    if ((*(unsigned int (**)(unint64_t))(v7 + 48))(((unint64_t)v11 + v13) & v12))
    {
LABEL_5:
      memcpy(v10, v11, v17);
      goto LABEL_8;
    }
  }

  else
  {
    uint64_t v16 = *v11;
    size_t v17 = v14 + v15;
    if ((_DWORD)v16 != -1) {
      goto LABEL_5;
    }
  }

  *uint64_t v10 = *v11;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))( ((unint64_t)v10 + v13) & v12,  ((unint64_t)v11 + v13) & v12,  AssociatedTypeWitness);
LABEL_8:
  uint64_t v18 = *(void *)(v5 - 8);
  uint64_t v19 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v20 = ~v19;
  unint64_t v21 = (_BYTE *)(((unint64_t)v10 + v17 + v19) & ~v19);
  unint64_t v22 = (_BYTE *)(((unint64_t)v11 + v17 + v19) & ~v19);
  uint64_t v23 = *(unsigned int *)(v18 + 84);
  size_t v24 = *(void *)(v18 + 64);
  if ((_DWORD)v23)
  {
    if (!(*(unsigned int (**)(_BYTE *, void, uint64_t))(v18 + 48))(v22, *(unsigned int *)(v18 + 84), v5))
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v18 + 32))(v21, v22, v5);
      size_t v25 = v24;
      uint64_t v26 = (_BYTE *)((unint64_t)&v21[v24 + v19] & v20);
      uint64_t v27 = (_BYTE *)((unint64_t)&v22[v24 + v19] & v20);
      goto LABEL_24;
    }
  }

  else
  {
    if (!v22[v24]) {
      goto LABEL_26;
    }
    int v28 = (v22[v24] - 1) << (8 * v24);
    if ((_DWORD)v24)
    {
      else {
        int v29 = 4;
      }
      __asm { BR              X11 }
    }

    if (v28 == -1)
    {
LABEL_26:
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v18 + 32))(v21, v22, v5);
      v21[v24] = 0;
      size_t v25 = v24 + 1;
      size_t v30 = v24 + 1 + v19;
      uint64_t v26 = (_BYTE *)((unint64_t)&v21[v30] & v20);
      uint64_t v27 = (_BYTE *)((unint64_t)&v22[v30] & v20);
LABEL_27:
      if (!v27[v24]) {
        goto LABEL_35;
      }
      int v31 = (v27[v24] - 1) << (8 * v24);
      if ((_DWORD)v24)
      {
        else {
          int v32 = 4;
        }
        __asm { BR              X11 }
      }

      if (v31 == -1)
      {
LABEL_35:
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v18 + 32))(v26, v27, v5);
        v26[v24] = 0;
        goto LABEL_38;
      }

void *sub_188D476A8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = a1;
  uint64_t v53 = v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (v10 | 7) + 8;
  uint64_t v12 = (void *)(((unint64_t)a1 + v11) & ~(v10 | 7));
  uint64_t v13 = (uint64_t *)(((unint64_t)a2 + v11) & ~(v10 | 7));
  uint64_t v14 = *(unsigned int *)(v9 + 84);
  uint64_t v15 = ~v10;
  uint64_t v16 = v10 + 8;
  size_t v17 = ((v10 + 8) & ~v10) + *(void *)(v9 + 64);
  if ((v14 & 0x80000000) == 0)
  {
    uint64_t v18 = *v13;
    int v19 = v18 + 1;
    if (*v12 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
LABEL_8:
    if (v19) {
      goto LABEL_9;
    }
    *uint64_t v12 = *v13;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))( ((unint64_t)v12 + v16) & v15,  ((unint64_t)v13 + v16) & v15,  AssociatedTypeWitness);
    goto LABEL_12;
  }

  int v52 = v7;
  uint64_t v20 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
  int v21 = v20(((unint64_t)v12 + v16) & v15, v14, AssociatedTypeWitness);
  int v19 = v20(((unint64_t)v13 + v16) & v15, v14, AssociatedTypeWitness);
  uint64_t v7 = v52;
  if (v21) {
    goto LABEL_8;
  }
LABEL_5:
  if (v19)
  {
    swift_unknownObjectRelease();
    (*(void (**)(unint64_t, uint64_t))(v9 + 8))( ((unint64_t)v12 + v16) & v15,  AssociatedTypeWitness);
LABEL_9:
    memcpy(v12, v13, v17);
    goto LABEL_12;
  }

  *uint64_t v12 = *v13;
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 40))( ((unint64_t)v12 + v16) & v15,  ((unint64_t)v13 + v16) & v15,  AssociatedTypeWitness);
LABEL_12:
  unint64_t v22 = (char *)v13 + v17;
  uint64_t v23 = v53;
  uint64_t v24 = *(void *)(v53 - 8);
  uint64_t v25 = *(unsigned __int8 *)(v24 + 80);
  uint64_t v26 = ~v25;
  uint64_t v27 = (_BYTE *)(((unint64_t)v12 + v17 + v25) & ~v25);
  int v28 = (_BYTE *)((unint64_t)&v22[v25] & ~v25);
  uint64_t v29 = *(unsigned int *)(v24 + 84);
  size_t v30 = *(void *)(v24 + 64);
  if ((_DWORD)v29)
  {
    int v31 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v24 + 48);
    int v32 = v31(v27, *(unsigned int *)(v24 + 84), v53);
    int v33 = v31(v28, v29, v53);
    if (v32)
    {
      if (!v33)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v24 + 32))(v27, v28, v53);
        size_t v34 = v30;
        size_t v35 = (_BYTE *)((unint64_t)&v27[v30 + v25] & v26);
        char v36 = (_BYTE *)((unint64_t)&v28[v30 + v25] & v26);
        goto LABEL_48;
      }

      goto LABEL_39;
    }

    uint64_t v23 = v53;
    if (!v33)
    {
LABEL_43:
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v24 + 40))(v27, v28, v23);
      goto LABEL_44;
    }
  }

  else
  {
    if (v27[v30])
    {
      int v37 = (v27[v30] - 1) << (8 * v30);
      if ((_DWORD)v30)
      {
        else {
          int v38 = 4;
        }
        __asm { BR              X12 }
      }

      if (v37 != -1)
      {
        if (!v28[v30] || (v28[v30] - 1) << (8 * v30) == -1)
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v24 + 32))(v27, v28, v53);
          v27[v30] = 0;
          size_t v34 = v30 + 1;
          size_t v45 = v30 + 1 + v25;
          size_t v35 = (_BYTE *)((unint64_t)&v27[v45] & v26);
          char v36 = (_BYTE *)((unint64_t)&v28[v45] & v26);
          goto LABEL_53;
        }

        goto LABEL_39;
      }
    }

    if (!v28[v30]) {
      goto LABEL_43;
    }
    int v39 = (v28[v30] - 1) << (8 * v30);
    if ((_DWORD)v30)
    {
      else {
        int v40 = 4;
      }
      __asm { BR              X11 }
    }

    if (v39 == -1) {
      goto LABEL_43;
    }
  }

  (*(void (**)(_BYTE *, uint64_t))(v24 + 8))(v27, v23);
LABEL_39:
  if ((_DWORD)v29) {
    size_t v41 = v30;
  }
  else {
    size_t v41 = v30 + 1;
  }
  memcpy(v27, v28, v41);
LABEL_44:
  if ((_DWORD)v29) {
    size_t v34 = v30;
  }
  else {
    size_t v34 = v30 + 1;
  }
  size_t v35 = (_BYTE *)((unint64_t)&v27[v34 + v25] & v26);
  char v36 = (_BYTE *)((unint64_t)&v28[v34 + v25] & v26);
  if (!(_DWORD)v29)
  {
LABEL_53:
    char v46 = 8 * v30;
    if (v35[v30])
    {
      int v47 = (v35[v30] - 1) << v46;
      if ((_DWORD)v30)
      {
        else {
          int v48 = 4;
        }
        __asm { BR              X12 }
      }

      if (v47 != -1)
      {
        if (!v36[v30] || (v36[v30] - 1) << v46 == -1)
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v24 + 32))(v35, v36, v53);
          v35[v30] = 0;
          goto LABEL_78;
        }

        goto LABEL_76;
      }
    }

    if (!v36[v30]) {
      goto LABEL_77;
    }
    int v49 = (v36[v30] - 1) << v46;
    if ((_DWORD)v30)
    {
      else {
        int v50 = 4;
      }
      __asm { BR              X11 }
    }

    int v44 = v49 + 1;
LABEL_74:
    if (v44)
    {
      (*(void (**)(_BYTE *, uint64_t))(v24 + 8))(v35, v53);
      goto LABEL_76;
    }

LABEL_48:
  size_t v42 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v24 + 48);
  int v43 = v42(v35, v29, v53);
  int v44 = v42(v36, v29, v53);
  if (!v43) {
    goto LABEL_74;
  }
  if (v44)
  {
LABEL_76:
    memcpy(v35, v36, v34);
    goto LABEL_78;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v24 + 32))(v35, v36, v53);
LABEL_78:
  *(void *)((unint64_t)&v35[v34 + 7] & 0xFFFFFFFFFFFFFFF8LL) = *(void *)((unint64_t)&v36[v34 + 7] & 0xFFFFFFFFFFFFF8LL);
  swift_bridgeObjectRelease();
  return v7;
}

  __break(1u);
  return result;
}

uint64_t sub_188D47D4C(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    int v8 = 0x7FFFFFFF;
  }
  else {
    int v8 = *(_DWORD *)(v6 + 84);
  }
  unsigned int v9 = v8 - 1;
  uint64_t v10 = *(void *)(v5 - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  unsigned int v12 = v11 - 1;
  if (!v11) {
    unsigned int v12 = 0;
  }
  if (v9 <= v12) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = v9;
  }
  if (v13 <= 0x7FFFFFFF) {
    unsigned int v14 = 0x7FFFFFFF;
  }
  else {
    unsigned int v14 = v13;
  }
  if (v11) {
    uint64_t v15 = *(void *)(v10 + 64);
  }
  else {
    uint64_t v15 = *(void *)(v10 + 64) + 1LL;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v16 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v17 = v16 | 7;
  uint64_t v18 = v16 + 8;
  uint64_t v19 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v20 = ((v16 + 8) & ~v16) + *(void *)(v6 + 64) + v19;
  if (v14 < a2)
  {
    if (((((v15 + ((v15 + v19 + ((v20 + (v18 & ~v17)) & ~v19)) & ~v19) + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8) & 0xFFFFFFF8) != 0) {
      unsigned int v21 = 2;
    }
    else {
      unsigned int v21 = a2 - v14 + 1;
    }
    if (v21 >= 0x10000) {
      unsigned int v22 = 4;
    }
    else {
      unsigned int v22 = 2;
    }
    if (v21 < 0x100) {
      unsigned int v22 = 1;
    }
    if (v21 >= 2) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 0LL;
    }
    __asm { BR              X7 }
  }

  if ((v13 & 0x80000000) != 0)
  {
    uint64_t v26 = (uint64_t *)(((unint64_t)a1 + v17 + 8) & ~v17);
    if (v9 == v14)
    {
      if ((v7 & 0x80000000) != 0)
      {
        unsigned int v28 = (*(uint64_t (**)(unint64_t))(v6 + 48))(((unint64_t)v26 + v18) & ~v16);
      }

      else
      {
        uint64_t v27 = *v26;
        unsigned int v28 = v27 + 1;
      }

      goto LABEL_42;
    }

    if (v11 >= 2)
    {
      unsigned int v28 = (*(uint64_t (**)(unint64_t, void, uint64_t, uint64_t))(v10 + 48))( ((unint64_t)v26 + v20) & ~v19,  *(unsigned int *)(v10 + 84),  v5,  v15);
LABEL_42:
      if (v28 >= 2) {
        return v28 - 1;
      }
      else {
        return 0LL;
      }
    }

    return 0LL;
  }

  uint64_t v24 = *a1;
  return (v24 + 1);
}

void sub_188D47F60(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  int v8 = 0u;
  uint64_t v9 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v9 + 84) <= 0x7FFFFFFFu) {
    int v10 = 0x7FFFFFFF;
  }
  else {
    int v10 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v11 = *(void *)(v7 - 8);
  int v12 = *(_DWORD *)(v11 + 84);
  unsigned int v13 = v12 - 1;
  if (!v12) {
    unsigned int v13 = 0;
  }
  if (v10 - 1 <= v13) {
    unsigned int v14 = v13;
  }
  else {
    unsigned int v14 = v10 - 1;
  }
  if (v14 <= 0x7FFFFFFF) {
    unsigned int v15 = 0x7FFFFFFF;
  }
  else {
    unsigned int v15 = v14;
  }
  if (v12) {
    uint64_t v17 = *(void *)(v11 + 64);
  }
  else {
    uint64_t v17 = *(void *)(v11 + 64) + 1LL;
  }
  uint64_t v16 = *(unsigned __int8 *)(v9 + 80);
  size_t v18 = ((v17
        + ((v17
          + *(unsigned __int8 *)(v11 + 80)
          + ((((v16 + 8) & ~v16) + *(void *)(v9 + 64) + *(unsigned __int8 *)(v11 + 80) + ((v16 + 8) & ~(v16 | 7))) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))
        + 7) & 0xFFFFFFFFFFFFFFF8LL)
      + 8;
  if (v15 < a3)
  {
    if ((((_DWORD)v17
         + (((_DWORD)v17
           + *(unsigned __int8 *)(v11 + 80)
           + (((((_DWORD)v16 + 8) & ~(_DWORD)v16)
             + *(_DWORD *)(v9 + 64)
             + *(unsigned __int8 *)(v11 + 80)
             + (((_DWORD)v16 + 8) & ~(v16 | 7))) & ~*(unsigned __int8 *)(v11 + 80))) & ~*(unsigned __int8 *)(v11 + 80))
         + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      unsigned int v19 = a3 - v15 + 1;
    else {
      unsigned int v19 = 2;
    }
    if (v19 >= 0x10000) {
      int v20 = 4;
    }
    else {
      int v20 = 2;
    }
    if (v19 < 0x100) {
      int v20 = 1;
    }
    if (v19 >= 2) {
      int v8 = v20;
    }
    else {
      int v8 = 0;
    }
  }

  if (a2 > v15)
  {
    if ((_DWORD)v18)
    {
      unsigned int v21 = ~v15 + a2;
      bzero(a1, v18);
      *a1 = v21;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X24 }

uint64_t sub_188D480E4@<X0>( uint64_t result@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  *((_BYTE *)v28 + v30) = 0;
  if (!v27) {
    return result;
  }
  if ((v25 & 0x80000000) == 0)
  {
    if ((v27 & 0x80000000) != 0) {
      uint64_t v31 = v27 ^ 0x80000000;
    }
    else {
      uint64_t v31 = v27 - 1;
    }
LABEL_13:
    *unsigned int v28 = v31;
    return result;
  }

  unsigned int v28 = (void *)(((unint64_t)v28 + result + 8) & a7);
  if (v23 == v24)
  {
    if (v27 + 1 > v21)
    {
      if ((_DWORD)a2)
      {
        else {
          int v32 = 4;
        }
        bzero(v28, a2);
        __asm { BR              X10 }
      }

      return result;
    }

    if (v27 == -1) {
      return result;
    }
    if ((a8 & 0x80000000) == 0)
    {
      if (((v27 + 1) & 0x80000000) != 0) {
        uint64_t v31 = v27 - 0x7FFFFFFF;
      }
      else {
        uint64_t v31 = v27;
      }
      goto LABEL_13;
    }

    unint64_t v37 = ((unint64_t)v28 + v22) & a5;
    char v36 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56);
    uint64_t v34 = v27 + 1;
    a3 = a8;
    return v36(v37, v34, a3, a4);
  }

  int v33 = (void *)(((unint64_t)v28 + v26) & a6);
  uint64_t v34 = v27 + 1;
  if (v34 <= a3)
  {
    if (v27 == -1) {
      return result;
    }
    char v36 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    unint64_t v37 = (unint64_t)v33;
    a4 = v29;
    return v36(v37, v34, a3, a4);
  }

  if ((_DWORD)v18)
  {
    else {
      int v35 = 4;
    }
    bzero(v33, v18);
    __asm { BR              X10 }
  }

  return result;
}

void sub_188D48224()
{
  *uint64_t v1 = v0;
}

void sub_188D48254()
{
  *(_WORD *)uint64_t v1 = v0;
  *(_BYTE *)(v1 + 2) = BYTE2(v0);
}

void sub_188D48290()
{
  *uint64_t v1 = v0;
}

void sub_188D48298()
{
  *uint64_t v1 = v0;
}

void _HashNode.prepareValueUpdate(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a3[2];
  MEMORY[0x1895F8858](a1);
  int v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v11 + 16))(v10);
  uint64_t v12 = *v4;
  swift_beginAccess();
  _HashNode.ValueUpdateState.init(_:_:_:)( (uint64_t)v10,  a2,  0LL,  v12,  (unint64_t)(*(_DWORD *)(v12 + 16) != 0) << 40,  v8,  a3[3],  a3[4],  a4);
  _HashNode._prepareValueUpdate(_:)(a4, a3);
}

void _HashNode.prepareDefaultedValueUpdate(_:_:_:_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v31 = a4;
  uint64_t v32 = a3;
  uint64_t v35 = a7;
  uint64_t v12 = a6[2];
  uint64_t v11 = a6[3];
  uint64_t v13 = a6[4];
  uint64_t updated = type metadata accessor for _HashNode.DefaultedValueUpdateState(0LL, v12, v11, v13);
  void v24[2] = *(void *)(updated - 8);
  uint64_t v24[3] = updated;
  uint64_t v15 = MEMORY[0x1895F8858](updated);
  v24[1] = (char *)v24 - v16;
  uint64_t v17 = MEMORY[0x1895F8858](v15);
  uint64_t v29 = (char *)v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v17);
  unsigned int v28 = (char *)v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  BOOL v33 = _HashNode.isUnique()();
  uint64_t v21 = *v7;
  uint64_t v22 = v7[1];
  uint64_t v34 = v7;
  int v25 = a1;
  uint64_t v30 = a2;
  uint64_t v26 = a5;
  int v23 = (char *)sub_188D4851C
      + 4 * byte_188DFAD90[_HashNode.findForInsertion(_:_:_:)(a1, a2, a5, v21, v22, v12, v11, v13) >> 29];
  __asm { BR              X10 }

int *sub_188D4851C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v9 = HIDWORD(a3);
  int v10 = *(uint64_t **)(v8 - 104);
  _HashNode.ensureUnique(isUnique:)(*(_DWORD *)(v8 - 108) & 1);
  uint64_t v11 = *v10;
  uint64_t v12 = nullsub_1(v11 + 16, v11 + 32, v5, v4, v7);
  sub_188D49E64(v12, v13, v9);
  return _HashNode.DefaultedValueUpdateState.init(_:in:at:inserted:)( v3,  v3 + *(int *)(v6 + 48),  v11,  v9,  0,  v5,  v4,  v7,  *(char **)(v8 - 96));
}

uint64_t _HashNode.ensureUnique(level:at:)(int a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  unsigned int v11 = BYTE4(a4);
  Swift::Bool v12 = _HashNode.isUnique()();
  _HashNode.ensureUnique(isUnique:)(v12);
  uint64_t v13 = *(void *)v5 + 16LL;
  uint64_t v14 = *(void *)v5 + 32LL;
  uint64_t v15 = a5[2];
  uint64_t v16 = a5[3];
  uint64_t v17 = a5[4];
  uint64_t v18 = nullsub_1(v13, v14, v15, v16, v17);
  sub_188D489D8(v18, v19, a2, a3, a4 & 0x1FFFFFFFFFFLL, a1, v15, v16, (uint64_t)&v21, v17);
  return v21;
}

uint64_t sub_188D489D8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v16 = (a6 + 5);
  _HashNode.UnsafeHandle.subscript.unsafeMutableAddressor((a3 >> a6) & 0x1F, a1, a2);
  uint64_t v17 = type metadata accessor for _HashNode(0LL, a7, a8, a10);
  uint64_t result = _HashNode.ensureUnique(level:at:)(v16, a3, a4, a5 & 0x1FFFFFFFFFFLL, v17);
  *(void *)a9 = result;
  *(_DWORD *)(a9 + 8) = v19;
  return result;
}

uint64_t _HashNode.ValueUpdateState.key.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t _HashNode.ValueUpdateState.key.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8LL) + 40LL))(v2, a1);
}

uint64_t (*_HashNode.ValueUpdateState.key.modify())()
{
  return nullsub_1;
}

uint64_t _HashNode.ValueUpdateState.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 44);
  uint64_t v5 = sub_188DF8384();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t _HashNode.ValueUpdateState.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 44);
  uint64_t v5 = sub_188DF8384();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t (*_HashNode.ValueUpdateState.value.modify())()
{
  return nullsub_1;
}

uint64_t _HashNode.ValueUpdateState.hash.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 48));
}

uint64_t _HashNode.ValueUpdateState.path.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 52));
}

uint64_t _HashNode.ValueUpdateState.path.setter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4 + *(int *)(a4 + 52);
  *(void *)uint64_t v5 = result;
  *(void *)(v5 + 8) = a2;
  *(_DWORD *)(v5 + 16) = a3;
  *(_BYTE *)(v5 + 20) = BYTE4(a3);
  *(_BYTE *)(v5 + 2_HashNode.ensureUnique(isUnique:)(v1 & 1) = BYTE5(a3) & 1;
  return result;
}

uint64_t (*_HashNode.ValueUpdateState.path.modify())()
{
  return nullsub_1;
}

uint64_t _HashNode.ValueUpdateState.found.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 56));
}

uint64_t _HashNode.ValueUpdateState.found.setter(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(v2 + *(int *)(a2 + 56)) = result;
  return result;
}

uint64_t (*_HashNode.ValueUpdateState.found.modify())()
{
  return nullsub_1;
}

uint64_t _HashNode.ValueUpdateState.init(_:_:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  unint64_t v22 = HIDWORD(a5);
  uint64_t updated = (int *)type metadata accessor for _HashNode.ValueUpdateState(0LL, a6, a7, a8);
  uint64_t v17 = a9 + updated[11];
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a7 - 8) + 56LL);
  v18(v17, 1LL, 1LL, a7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32LL))(a9, a1, a6);
  uint64_t v19 = sub_188DF8384();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8LL))(v17, v19);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v18)(v17, 1LL, 1LL, a7);
  *(void *)(a9 + updated[12]) = a2;
  uint64_t v21 = a9 + updated[13];
  *(void *)uint64_t v21 = a3;
  *(void *)(v21 + 8) = a4;
  *(_DWORD *)(v21 + 16) = a5;
  *(_BYTE *)(v21 + 20) = v22;
  *(_BYTE *)(v21 + 2_HashNode.ensureUnique(isUnique:)(v1 & 1) = BYTE5(a5) & 1;
  *(_BYTE *)(a9 + updated[14]) = 0;
  return result;
}

void _HashNode._prepareValueUpdate(_:)(uint64_t a1, void *a2)
{
  uint64_t v5 = a2[3];
  uint64_t v6 = sub_188DF8384();
  uint64_t v15[3] = *(void *)(v6 - 8);
  v15[4] = v6;
  MEMORY[0x1895F8858](v6);
  v15[2] = (char *)v15 - v7;
  uint64_t v8 = a2[2];
  v15[0] = swift_getTupleTypeMetadata2();
  MEMORY[0x1895F8858](v15[0]);
  v15[1] = (char *)v15 - v9;
  BOOL v16 = _HashNode.isUnique()();
  uint64_t v10 = *v2;
  uint64_t v11 = v2[1];
  uint64_t v12 = a2[4];
  uint64_t updated = type metadata accessor for _HashNode.ValueUpdateState(0LL, v8, v5, v12);
  uint64_t v14 = (char *)sub_188D48E60
      + 4
      * byte_188DFAD95[_HashNode.findForInsertion(_:_:_:)( *(unsigned __int8 *)(a1 + *(int *)(updated + 52) + 20),  a1,  *(void *)(a1 + *(int *)(updated + 48)),  v10,  v11,  v8,  v5,  v12) >> 29];
  __asm { BR              X10 }

uint64_t sub_188D48E60(uint64_t result)
{
  *(_DWORD *)(v1 + 16) = HIDWORD(result);
  *(_BYTE *)(v1 + 2_HashNode.ensureUnique(isUnique:)(v1 & 1) = 1;
  return result;
}

uint64_t sub_188D4900C( uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = *(void *)_HashNode.UnsafeHandle.childPtr(at:)(a3, a1, a2);
  uint64_t v13 = a4 + *(int *)(type metadata accessor for _HashNode.ValueUpdateState(0LL, a5, a6, a7) + 52);
  char v14 = *(_BYTE *)(v13 + 20);
  *(void *)v13 |= (unint64_t)a3 << v14;
  *(void *)(v13 + 8) = v12;
  *(_DWORD *)(v13 + 16) = 0;
  swift_beginAccess();
  *(_BYTE *)(v13 + 2_HashNode.ensureUnique(isUnique:)(v1 & 1) = *(_DWORD *)(v12 + 16) != 0;
  *(_BYTE *)(v13 + 20) = v14 + 5;
  uint64_t v15 = type metadata accessor for _HashNode(0LL, a5, a6, a7);
  return _HashNode._prepareValueUpdate(_:)(a4, v15);
}

uint64_t _HashNode.finalizeValueUpdate(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a2[2];
  uint64_t v37 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](a1);
  char v36 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(void *)(v6 + 24);
  swift_getTupleTypeMetadata2();
  uint64_t v8 = sub_188DF8384();
  uint64_t v34 = *(void *)(v8 - 8);
  uint64_t v35 = v8;
  MEMORY[0x1895F8858](v8);
  uint64_t v33 = (uint64_t)&v33 - v9;
  uint64_t v10 = sub_188DF8384();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)&v33 - v12;
  int v38 = a2;
  uint64_t v14 = a2[4];
  uint64_t updated = (int *)type metadata accessor for _HashNode.ValueUpdateState(0LL, v4, v7, v14);
  int v16 = *(unsigned __int8 *)(a1 + updated[14]);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1 + updated[11], v10);
  int v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v13, 1LL, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (v17 == 1)
  {
    if ((v16 & 1) != 0)
    {
      uint64_t v18 = a1 + updated[13];
      unint64_t v19 = *(void *)v18;
      uint64_t v20 = *(void *)(v18 + 8);
      unint64_t v21 = *(unsigned int *)(v18 + 16) | ((unint64_t)*(unsigned __int8 *)(v18 + 20) << 32);
      BOOL v22 = *(_BYTE *)(v18 + 21) == 0;
      uint64_t v23 = 0x10000000000LL;
      if (v22) {
        uint64_t v23 = 0LL;
      }
      uint64_t v24 = v33;
      _HashNode._finalizeRemoval(_:_:at:)(0, *(void *)(a1 + updated[12]), v19, v20, v21 | v23, v38, v33);
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v24, v35);
    }
  }

  else if (v16)
  {
    uint64_t v25 = *(void *)(a1 + updated[13] + 8);
    uint64_t v26 = nullsub_1(v25 + 16, v25 + 32, v4, v7, v14);
    sub_188D493BC(v26, v27, a1, v4, v7, v14);
  }

  else
  {
    uint64_t v29 = (uint64_t)v36;
    uint64_t v28 = v37;
    uint64_t v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 16))(v36, a1, v4);
    MEMORY[0x1895F8858](v30);
    *(&v33 - 4) = v4;
    *(&v33 - 3) = v7;
    *(&v33 - 2) = v14;
    *(&v33 - _HashNode.ensureUnique(isUnique:)(v1 & 1) = a1;
    _HashNode.updateValue(_:forKey:_:_:)(0LL, v29, v31, (uint64_t)sub_188D4A184, (uint64_t)(&v33 - 6), v38);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v29, v4);
  }

  return (*(uint64_t (**)(uint64_t, int *))(*((void *)updated - 1) + 8LL))(a1, updated);
}

uint64_t sub_188D493BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v30 = a2;
  uint64_t v27 = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v29 = (char *)&v26 - v10;
  uint64_t v11 = sub_188DF8384();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v11);
  uint64_t v15 = (char *)&v26 - v14;
  uint64_t v16 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v28 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t updated = type metadata accessor for _HashNode.ValueUpdateState(0LL, a4, a5, a6);
  uint64_t v27 = _HashNode.UnsafeHandle.itemPtr(at:)(*(_DWORD *)(a3 + *(int *)(updated + 52) + 16), v27, v30);
  uint64_t v19 = *(int *)(updated + 44);
  uint64_t v30 = a3;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a3 + v19, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1LL, a5) == 1)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    __break(1u);
  }

  else
  {
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    unint64_t v21 = v28;
    v20(v28, v15, a5);
    uint64_t v22 = TupleTypeMetadata2;
    uint64_t v23 = (uint64_t)v29;
    uint64_t v24 = &v29[*(int *)(TupleTypeMetadata2 + 48)];
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16LL))(v29, v30, a4);
    v20(v24, v21, a5);
    return sub_188D8A1FC(v23, v27, v22);
  }

  return result;
}

uint64_t _HashNode._finalizeRemoval(_:_:at:)@<X0>( int a1@<W0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v36 = a7;
  uint64_t v34 = a4;
  uint64_t v35 = a2;
  uint64_t v11 = a6[2];
  uint64_t v12 = a6[3];
  int v13 = BYTE4(a5);
  swift_getTupleTypeMetadata2();
  uint64_t v14 = sub_188DF8384();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1895F8858](v14);
  uint64_t v18 = &v31[-v17];
  if (v13 == a1)
  {
    uint64_t v19 = MEMORY[0x1895F8858](v16);
    uint64_t v28 = v11;
    uint64_t v29 = v12;
    return _HashNode._removeItemFromUniqueLeafNode<A>(_:at:_:by:)( v19,  v36,  a1,  v20,  a5,  (void (*)(unint64_t))nullsub_1,  (uint64_t)&v31[-48],  a6,  MEMORY[0x18961AFC8] + 8LL);
  }

  else
  {
    int v32 = (a3 >> a1) & 0x1F;
    uint64_t v22 = *v37;
    uint64_t v33 = v16;
    uint64_t v23 = a6[4];
    uint64_t v24 = nullsub_1(v22 + 16, v22 + 32, v11, v12, v23);
    uint64_t v25 = v35;
    uint64_t v27 = sub_188D49958(v24, v26, (a3 >> a1) & 0x1F, a1, v35, a3, v34, a5 & 0x1FFFFFFFFFFLL, v11, v12, v23);
    MEMORY[0x1895F8858](v27);
    *(void *)&v31[-48] = v11;
    *(void *)&v31[-40] = v12;
    uint64_t v28 = v23;
    uint64_t v29 = v25;
    LOBYTE(v30) = a1;
    _HashNode._fixupUniqueAncestorAfterItemRemoval(_:at:_:remainder:)( a1,  (uint64_t (*)(uint64_t))sub_188D4A190,  (int *)&v31[-64],  v32,  (uint64_t)v18,  a6,  v36);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v15 + 8))(v18, v33);
  }

uint64_t sub_188D497AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v23 = a5;
  uint64_t v24 = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v10 = (char *)&v23 - v9;
  uint64_t v11 = sub_188DF8384();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v11);
  uint64_t v15 = (char *)&v23 - v14;
  uint64_t v16 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t updated = type metadata accessor for _HashNode.ValueUpdateState(0LL, a3, a4, v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2 + *(int *)(updated + 44), v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1LL, a4) == 1)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    __break(1u);
  }

  else
  {
    char v20 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    v20(v18, v15, a4);
    unint64_t v21 = &v10[*(int *)(TupleTypeMetadata2 + 48)];
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16LL))(v10, a2, a3);
    v20(v21, v18, a4);
    return sub_188D8A1FC((uint64_t)v10, v24, TupleTypeMetadata2);
  }

  return result;
}

uint64_t sub_188D49958( uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14 = (a4 + 5);
  _HashNode.UnsafeHandle.subscript.unsafeMutableAddressor(a3, a1, a2);
  uint64_t v15 = type metadata accessor for _HashNode(0LL, a9, a10, a11);
  return _HashNode._finalizeRemoval(_:_:at:)(v14, a5, a6, a7, a8 & 0x1FFFFFFFFFFLL, v15);
}

uint64_t _HashNode.DefaultedValueUpdateState.item.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(a3 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v12 = *(int *)(v9 + 48);
  uint64_t v13 = &v11[v12];
  uint64_t v14 = v3 + v12;
  uint64_t v15 = *(void *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v11, v3, v6);
  uint64_t v16 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v13, v14, v7);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a1, v11, v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 32))(a2, v13, v7);
}

uint64_t _HashNode.DefaultedValueUpdateState.item.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v8 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = MEMORY[0x1895F8858](v8);
  uint64_t v13 = (char *)&v21 - v12;
  uint64_t v14 = (char *)&v21 + *(int *)(v11 + 48) - v12;
  uint64_t v15 = *(void *)(v6 - 8);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 32);
  v16((char *)&v21 - v12, a1, v6);
  uint64_t v21 = *(void *)(v5 - 8);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 32);
  v17(v14, a2, v5);
  uint64_t v18 = &v10[*(int *)(TupleTypeMetadata2 + 48)];
  v16(v10, (uint64_t)v13, v6);
  v17(v18, (uint64_t)v14, v5);
  uint64_t v19 = v22;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 40))(v22, v10, v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v21 + 40))( v19 + *(int *)(TupleTypeMetadata2 + 48),  v18,  v5);
}

uint64_t (*_HashNode.DefaultedValueUpdateState.item.modify())()
{
  return nullsub_1;
}

uint64_t _HashNode.DefaultedValueUpdateState.node.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 44));
}

uint64_t _HashNode.DefaultedValueUpdateState.node.setter(uint64_t result, uint64_t a2)
{
  *(void *)(v2 + *(int *)(a2 + 44)) = result;
  return result;
}

uint64_t (*_HashNode.DefaultedValueUpdateState.node.modify())()
{
  return nullsub_1;
}

uint64_t _HashNode.DefaultedValueUpdateState.slot.getter(uint64_t a1)
{
  return *(unsigned int *)(v1 + *(int *)(a1 + 48));
}

uint64_t _HashNode.DefaultedValueUpdateState.slot.setter(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(v2 + *(int *)(a2 + 48)) = result;
  return result;
}

uint64_t (*_HashNode.DefaultedValueUpdateState.slot.modify())()
{
  return nullsub_1;
}

uint64_t _HashNode.DefaultedValueUpdateState.inserted.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 52));
}

uint64_t _HashNode.DefaultedValueUpdateState.inserted.setter(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(v2 + *(int *)(a2 + 52)) = result;
  return result;
}

uint64_t (*_HashNode.DefaultedValueUpdateState.inserted.modify())()
{
  return nullsub_1;
}

int *_HashNode.DefaultedValueUpdateState.init(_:in:at:inserted:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  uint64_t v27 = a8;
  uint64_t v28 = a3;
  int v29 = a4;
  int v30 = a5;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v15 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = MEMORY[0x1895F8858](v15);
  char v20 = (char *)&v26 - v19;
  uint64_t v21 = (char *)&v26 + *(int *)(v18 + 48) - v19;
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32LL);
  v22((char *)&v26 - v19, a1, a6);
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32LL);
  v23(v21, a2, a7);
  uint64_t v24 = &v17[*(int *)(TupleTypeMetadata2 + 48)];
  v22(v17, (uint64_t)v20, a6);
  v23(v24, (uint64_t)v21, a7);
  v22(a9, (uint64_t)v17, a6);
  v23(&a9[*(int *)(TupleTypeMetadata2 + 48)], (uint64_t)v24, a7);
  uint64_t result = (int *)type metadata accessor for _HashNode.DefaultedValueUpdateState(0LL, a6, a7, v27);
  *(void *)&a9[result[11]] = v28;
  *(_DWORD *)&a9[result[12]] = v29;
  a9[result[13]] = v30;
  return result;
}

uint64_t sub_188D49E64(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return sub_188DF8378();
}

uint64_t sub_188D49EE4( uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14 = (a4 + 5);
  _HashNode.UnsafeHandle.subscript.unsafeMutableAddressor(a3, a1, a2);
  uint64_t v15 = type metadata accessor for _HashNode(0LL, a9, a10, a11);
  return _HashNode.prepareDefaultedValueUpdate(_:_:_:_:)(v14, a5, a6, a7, a8, v15);
}

uint64_t _HashNode.finalizeDefaultedValueUpdate(_:)(uint64_t a1, void *a2)
{
  uint64_t updated = type metadata accessor for _HashNode.DefaultedValueUpdateState(0LL, a2[2], a2[3], a2[4]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(updated - 8) + 8LL))(a1, updated);
}

uint64_t sub_188D49FE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v13 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v17 = (char *)&v29 - v16;
  uint64_t updated = type metadata accessor for _HashNode.DefaultedValueUpdateState(0LL, a4, a5, a6);
  uint64_t v30 = _HashNode.UnsafeHandle.itemPtr(at:)(*(_DWORD *)(a3 + *(int *)(updated + 48)), a1, a2);
  uint64_t v19 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v20 = TupleTypeMetadata2;
  uint64_t v21 = &v17[v19];
  uint64_t v22 = a3;
  uint64_t v23 = a3 + v19;
  uint64_t v24 = *(void *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v17, v22, a4);
  uint64_t v25 = *(void *)(a5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v21, v23, a5);
  uint64_t v26 = v20;
  uint64_t v27 = &v15[*(int *)(v20 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v15, v17, a4);
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v27, v21, a5);
  return sub_188D8A1FC((uint64_t)v15, v30, v26);
}

uint64_t type metadata accessor for _HashNode.DefaultedValueUpdateState( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for _HashNode.DefaultedValueUpdateState);
}

uint64_t type metadata accessor for _HashNode.ValueUpdateState( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for _HashNode.ValueUpdateState);
}

uint64_t sub_188D4A184(uint64_t a1)
{
  return sub_188D497AC(a1, v1[5], v1[2], v1[3], v1[4]);
}

uint64_t sub_188D4A190()
{
  return (*(void *)(v0 + 40) >> *(_BYTE *)(v0 + 48)) & 0x1FLL;
}

uint64_t sub_188D4A1A4(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[2];
  uint64_t v4 = a2[3];
  uint64_t v5 = a2[4];
  uint64_t v6 = *(void *)(a1 + *(int *)(type metadata accessor for _HashNode.DefaultedValueUpdateState(0LL, v3, v4, v5) + 44));
  uint64_t v7 = nullsub_1(v6 + 16, v6 + 32, v3, v4, v5);
  return sub_188D49FE8(v7, v8, a1, v3, v4, v5);
}

uint64_t sub_188D4A224()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_188D4A22C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_188DF8384();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0LL;
    }
  }

  return result;
}

uint64_t *sub_188D4A2D8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  if (*(_DWORD *)(v7 + 84)) {
    size_t v10 = *(void *)(v7 + 64);
  }
  else {
    size_t v10 = *(void *)(v7 + 64) + 1LL;
  }
  unsigned int v11 = v8 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v11 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || ((((v10 + (v9 & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 23 > 0x18)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v14 + (((v11 | 7) + 16LL) & ~(unint64_t)(v11 | 7)));
    swift_retain();
  }

  else
  {
    uint64_t v15 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    uint64_t v16 = (const void *)(((unint64_t)a2 + v9) & v15);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v16, 1LL, v5))
    {
      memcpy((void *)(((unint64_t)v4 + v9) & v15), v16, v10);
    }

    else
    {
      (*(void (**)(unint64_t, const void *, uint64_t))(v7 + 16))( ((unint64_t)v4 + v9) & v15,  v16,  v5);
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v7 + 56))( ((unint64_t)v4 + v9) & v15,  0LL,  1LL,  v5);
    }

    uint64_t v17 = (void *)(((((unint64_t)v4 + v9) & v15) + v10 + 7) & 0xFFFFFFFFFFFFF8LL);
    uint64_t v18 = (void *)(((unint64_t)v16 + v10 + 7) & 0xFFFFFFFFFFFFFFF8LL);
    *uint64_t v17 = *v18;
    unint64_t v19 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v20 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    __int128 v21 = *(_OWORD *)v20;
    *(void *)(v19 + 14) = *(void *)(v20 + 14);
    *(_OWORD *)unint64_t v19 = v21;
    *(_BYTE *)(v19 + 22) = *(_BYTE *)(v20 + 22);
  }

  return v4;
}

uint64_t sub_188D4A460(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8LL);
  (*(void (**)(void))(v4 + 8))();
  uint64_t v5 = *(void *)(v4 + 64) + a1;
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = (v5 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1LL, v6);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(unint64_t, uint64_t))(v7 + 8))(v8, v6);
  }
  return result;
}

uint64_t sub_188D4A4E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v6 + 16))();
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (void *)((v11 + a1) & ~v10);
  uint64_t v13 = (const void *)((v11 + a2) & ~v10);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v13, 1LL, v8))
  {
    int v14 = *(_DWORD *)(v9 + 84);
    size_t v15 = *(void *)(v9 + 64);
    if (v14) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = v15 + 1;
    }
    memcpy(v12, v13, v16);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v12, v13, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v12, 0LL, 1LL, v8);
    int v14 = *(_DWORD *)(v9 + 84);
    size_t v15 = *(void *)(v9 + 64);
  }

  if (v14) {
    size_t v17 = v15;
  }
  else {
    size_t v17 = v15 + 1;
  }
  uint64_t v18 = (uint64_t)v12 + v17 + 7;
  unint64_t v19 = (void *)(((unint64_t)v13 + v17 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  v18 &= 0xFFFFFFFFFFFFF8uLL;
  *(void *)uint64_t v18 = *v19;
  unint64_t v20 = (v18 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v21 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  __int128 v22 = *(_OWORD *)v21;
  *(void *)(v20 + 14) = *(void *)(v21 + 14);
  *(_OWORD *)unint64_t v20 = v22;
  *(_BYTE *)(v20 + 22) = *(_BYTE *)(v21 + 22);
  return a1;
}

uint64_t sub_188D4A608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v6 + 24))();
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (void *)((v11 + a1) & ~v10);
  uint64_t v13 = (void *)((v11 + a2) & ~v10);
  int v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  int v15 = v14(v12, 1LL, v8);
  int v16 = v14(v13, 1LL, v8);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v12, v13, v8);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v12, 0LL, 1LL, v8);
      goto LABEL_10;
    }
  }

  else
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 24))(v12, v13, v8);
      goto LABEL_10;
    }

    (*(void (**)(void *, uint64_t))(v9 + 8))(v12, v8);
  }

  if (*(_DWORD *)(v9 + 84)) {
    size_t v17 = *(void *)(v9 + 64);
  }
  else {
    size_t v17 = *(void *)(v9 + 64) + 1LL;
  }
  memcpy(v12, v13, v17);
LABEL_10:
  if (*(_DWORD *)(v9 + 84)) {
    uint64_t v18 = *(void *)(v9 + 64);
  }
  else {
    uint64_t v18 = *(void *)(v9 + 64) + 1LL;
  }
  uint64_t v19 = (uint64_t)v12 + v18 + 7;
  unint64_t v20 = (void *)(((unint64_t)v13 + v18 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  v19 &= 0xFFFFFFFFFFFFF8uLL;
  *(void *)uint64_t v19 = *v20;
  unint64_t v21 = (v19 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v22 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)unint64_t v21 = *(void *)v22;
  *(void *)(v21 + 8) = *(void *)(v22 + 8);
  *(_DWORD *)(v21 + 16) = *(_DWORD *)(v22 + 16);
  *(_BYTE *)(v21 + 20) = *(_BYTE *)(v22 + 20);
  *(_BYTE *)(v21 + 2_HashNode.ensureUnique(isUnique:)(v1 & 1) = *(_BYTE *)(v22 + 21);
  *(_BYTE *)(v21 + 22) = *(_BYTE *)(v22 + 22);
  return a1;
}

uint64_t sub_188D4A78C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v6 + 32))();
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (void *)((v11 + a1) & ~v10);
  uint64_t v13 = (const void *)((v11 + a2) & ~v10);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v13, 1LL, v8))
  {
    int v14 = *(_DWORD *)(v9 + 84);
    size_t v15 = *(void *)(v9 + 64);
    if (v14) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = v15 + 1;
    }
    memcpy(v12, v13, v16);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v12, v13, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v12, 0LL, 1LL, v8);
    int v14 = *(_DWORD *)(v9 + 84);
    size_t v15 = *(void *)(v9 + 64);
  }

  if (v14) {
    size_t v17 = v15;
  }
  else {
    size_t v17 = v15 + 1;
  }
  uint64_t v18 = (uint64_t)v12 + v17 + 7;
  uint64_t v19 = (void *)(((unint64_t)v13 + v17 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  v18 &= 0xFFFFFFFFFFFFF8uLL;
  *(void *)uint64_t v18 = *v19;
  unint64_t v20 = (v18 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v21 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  __int128 v22 = *(_OWORD *)v21;
  *(void *)(v20 + 14) = *(void *)(v21 + 14);
  *(_OWORD *)unint64_t v20 = v22;
  *(_BYTE *)(v20 + 22) = *(_BYTE *)(v21 + 22);
  return a1;
}

uint64_t sub_188D4A8AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v6 + 40))();
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (void *)((v11 + a1) & ~v10);
  uint64_t v13 = (void *)((v11 + a2) & ~v10);
  int v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  int v15 = v14(v12, 1LL, v8);
  int v16 = v14(v13, 1LL, v8);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 32))(v12, v13, v8);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v12, 0LL, 1LL, v8);
      goto LABEL_10;
    }
  }

  else
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 40))(v12, v13, v8);
      goto LABEL_10;
    }

    (*(void (**)(void *, uint64_t))(v9 + 8))(v12, v8);
  }

  if (*(_DWORD *)(v9 + 84)) {
    size_t v17 = *(void *)(v9 + 64);
  }
  else {
    size_t v17 = *(void *)(v9 + 64) + 1LL;
  }
  memcpy(v12, v13, v17);
LABEL_10:
  if (*(_DWORD *)(v9 + 84)) {
    uint64_t v18 = *(void *)(v9 + 64);
  }
  else {
    uint64_t v18 = *(void *)(v9 + 64) + 1LL;
  }
  uint64_t v19 = (uint64_t)v12 + v18 + 7;
  unint64_t v20 = (void *)(((unint64_t)v13 + v18 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  v19 &= 0xFFFFFFFFFFFFF8uLL;
  *(void *)uint64_t v19 = *v20;
  unint64_t v21 = (v19 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v22 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)unint64_t v21 = *(void *)v22;
  *(void *)(v21 + 8) = *(void *)(v22 + 8);
  *(_DWORD *)(v21 + 16) = *(_DWORD *)(v22 + 16);
  *(_BYTE *)(v21 + 20) = *(_BYTE *)(v22 + 20);
  *(_BYTE *)(v21 + 2_HashNode.ensureUnique(isUnique:)(v1 & 1) = *(_BYTE *)(v22 + 21);
  *(_BYTE *)(v21 + 22) = *(_BYTE *)(v22 + 22);
  return a1;
}

uint64_t sub_188D4AA30(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  unsigned int v8 = v7 - 1;
  if (!v7) {
    unsigned int v8 = 0;
  }
  if (v8 <= v5) {
    unsigned int v9 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v9 = v8;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  uint64_t v10 = *(void *)(v6 + 64);
  if (!v7) {
    ++v10;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v12 = *(void *)(v4 + 64) + v11;
  uint64_t v13 = v10 + 7;
  if (v9 < a2 && *((_BYTE *)a1 + ((((v13 + (v12 & ~v11)) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 23)) {
    return v9 + *a1 + 1;
  }
  if (v5 == v9) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v15 = ((unint64_t)a1 + v12) & ~v11;
  if (v8 == v9)
  {
    if (v7 < 2) {
      return 0LL;
    }
    unsigned int v17 = (*(uint64_t (**)(unint64_t))(v6 + 48))(v15);
    if (v17 >= 2) {
      return v17 - 1;
    }
    else {
      return 0LL;
    }
  }

  else
  {
    unint64_t v16 = *(void *)(((((v13 + v15) & 0xFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFF8LL) + 8);
    if (v16 >= 0xFFFFFFFF) {
      LODWORD(v16) = -1;
    }
    return (v16 + 1);
  }

void sub_188D4AB54(_DWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 24) - 8LL);
  int v9 = *(_DWORD *)(v8 + 84);
  unsigned int v10 = v9 - 1;
  if (!v9) {
    unsigned int v10 = 0;
  }
  if (v10 <= v7) {
    unsigned int v11 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v11 = v10;
  }
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = v11;
  }
  uint64_t v13 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v14 = *(void *)(v6 + 64) + v13;
  uint64_t v16 = *(void *)(v8 + 64);
  if (!v9) {
    ++v16;
  }
  uint64_t v17 = v16 + 7;
  uint64_t v15 = v14 & ~v13;
  unint64_t v18 = ((((v17 + v15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 23;
  if (v12 < a2)
  {
    int v19 = ~v12 + a2;
    bzero(a1, ((((v17 + v15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 23);
    *a1 = v19;
    if (v12 < a3) {
      *((_BYTE *)a1 + v18) = 1;
    }
    return;
  }

  if (v12 < a3) {
    *((_BYTE *)a1 + v18) = 0;
  }
  if (a2)
  {
    if (v7 == v12)
    {
      unint64_t v20 = *(void (**)(void))(v6 + 56);
LABEL_21:
      v20();
      return;
    }

    unint64_t v21 = ((unint64_t)a1 + v14) & ~v13;
    if (v10 == v12)
    {
      unint64_t v20 = *(void (**)(void))(v8 + 56);
      goto LABEL_21;
    }

    unint64_t v22 = (((v17 + v21) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
    if ((a2 & 0x80000000) != 0)
    {
      *(_WORD *)(v22 + 20) = 0;
      *(_DWORD *)(v22 + 16) = 0;
      *(void *)unint64_t v22 = a2 ^ 0x80000000;
      *(void *)(v22 + 8) = 0LL;
    }

    else
    {
      *(void *)(v22 + 8) = a2 - 1;
    }
  }

uint64_t sub_188D4ACA8()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t v2 = swift_checkMetadataState();
    if (v3 > 0x3F)
    {
      return v2;
    }

    else
    {
      swift_getTupleTypeLayout2();
      __int128 v5[4] = v5;
      v5[5] = "\b";
      v5[6] = MEMORY[0x189617758] + 64LL;
      v5[7] = &unk_188DFADE0;
      swift_initStructMetadata();
      return 0LL;
    }
  }

  return v0;
}

uint64_t *sub_188D4AD7C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 & ~v8) + *(void *)(v7 + 64);
  int v11 = *(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80);
  if ((v11 & 0x1000F8) != 0 || ((((v10 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 11) & 0xFFFFFFFFFFFFFFF8LL | 5) > 0x18)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v13 + (((v11 & 0xF8 | 7u) + 16LL) & ~(unint64_t)(v11 & 0xF8 | 7u)));
    swift_retain();
  }

  else
  {
    uint64_t v14 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))( ((unint64_t)v4 + v9) & v14,  ((unint64_t)a2 + v9) & v14,  v5);
    uint64_t v15 = (void *)(((unint64_t)v4 + v10 + 7) & 0xFFFFFFFFFFFFF8LL);
    uint64_t v16 = (void *)(((unint64_t)a2 + v10 + 7) & 0xFFFFFFFFFFFFF8LL);
    *uint64_t v15 = *v16;
    unint64_t v17 = ((unint64_t)v15 + 11) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v18 = ((unint64_t)v16 + 11) & 0xFFFFFFFFFFFFFFF8LL;
    *(_DWORD *)unint64_t v17 = *(_DWORD *)v18;
    *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  }

  return v4;
}

uint64_t sub_188D4AEA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8LL);
  (*(void (**)(void))(v4 + 8))();
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 24) - 8LL) + 8LL))((*(void *)(v4 + 64) + a1 + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8LL) + 80LL)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8LL) + 80LL));
}

uint64_t sub_188D4AEFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v6 + 16))();
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8LL);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v7 + v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))((v7 + v9 + a1) & ~v9, (v7 + v9 + a2) & ~v9);
  uint64_t v11 = (v10 & ~v9) + *(void *)(v8 + 64) + 7;
  unsigned int v12 = (void *)((v11 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v13 = (void *)((v11 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *unsigned int v12 = *v13;
  unint64_t v14 = ((unint64_t)v12 + 11) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v15 = ((unint64_t)v13 + 11) & 0xFFFFFFFFFFFFFFF8LL;
  *(_DWORD *)unint64_t v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  return a1;
}

uint64_t sub_188D4AFB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v6 + 24))();
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8LL);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v7 + v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))((v7 + v9 + a1) & ~v9, (v7 + v9 + a2) & ~v9);
  uint64_t v11 = (v10 & ~v9) + *(void *)(v8 + 64) + 7;
  unsigned int v12 = (void *)((v11 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v13 = (void *)((v11 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *unsigned int v12 = *v13;
  unint64_t v14 = ((unint64_t)v12 + 11) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v15 = ((unint64_t)v13 + 11) & 0xFFFFFFFFFFFFFFF8LL;
  *(_DWORD *)unint64_t v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  return a1;
}

uint64_t sub_188D4B064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v6 + 32))();
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8LL);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v7 + v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))((v7 + v9 + a1) & ~v9, (v7 + v9 + a2) & ~v9);
  uint64_t v11 = (v10 & ~v9) + *(void *)(v8 + 64) + 7;
  unsigned int v12 = (void *)((v11 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v13 = (void *)((v11 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *unsigned int v12 = *v13;
  unint64_t v14 = ((unint64_t)v12 + 11) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v15 = ((unint64_t)v13 + 11) & 0xFFFFFFFFFFFFFFF8LL;
  *(_DWORD *)unint64_t v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  return a1;
}

uint64_t sub_188D4B118(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v6 + 40))();
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8LL);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v7 + v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))((v7 + v9 + a1) & ~v9, (v7 + v9 + a2) & ~v9);
  uint64_t v11 = (v10 & ~v9) + *(void *)(v8 + 64) + 7;
  unsigned int v12 = (void *)((v11 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v13 = (void *)((v11 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *unsigned int v12 = *v13;
  unint64_t v14 = ((unint64_t)v12 + 11) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v15 = ((unint64_t)v13 + 11) & 0xFFFFFFFFFFFFFFF8LL;
  *(_DWORD *)unint64_t v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  return a1;
}

uint64_t sub_188D4B1CC(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5) {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = v8;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = *(void *)(v4 + 64) + v10;
  uint64_t v12 = (v11 & ~v10) + *(void *)(v6 + 64);
  if (v9 < a2 && *((_BYTE *)a1 + ((((v12 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 11) & 0xFFFFFFFFFFFFFFF8LL | 5))) {
    return v9 + *a1 + 1;
  }
  if (v8 < 0x7FFFFFFF)
  {
    unint64_t v14 = *(void *)(((unint64_t)a1 + v12 + 7) & 0xFFFFFFFFFFFFF8LL);
    if (v14 >= 0xFFFFFFFF) {
      LODWORD(v14) = -1;
    }
    return (v14 + 1);
  }

  else if (v5 >= v7)
  {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }

  else
  {
    return (*(uint64_t (**)(unint64_t))(v6 + 48))(((unint64_t)a1 + v11) & ~v10);
  }

void sub_188D4B2B4(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 24) - 8LL);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= v7) {
    unsigned int v10 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  if (v10 <= 0x7FFFFFFF) {
    unsigned int v11 = 0x7FFFFFFF;
  }
  else {
    unsigned int v11 = v10;
  }
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = *(void *)(v6 + 64) + v12;
  size_t v14 = (v13 & ~v12) + *(void *)(v8 + 64);
  unint64_t v15 = (((v14 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 11) & 0xFFFFFFFFFFFFFFF8LL | 5;
  if (v11 >= a2)
  {
    if (v11 < a3) {
      a1[v15] = 0;
    }
    if (a2)
    {
      if (v10 < 0x7FFFFFFF)
      {
        if ((a2 & 0x80000000) != 0) {
          uint64_t v18 = a2 ^ 0x80000000;
        }
        else {
          uint64_t v18 = a2 - 1;
        }
        *(void *)((unint64_t)&a1[v14 + 7] & 0xFFFFFFFFFFFFFFF8LL) = v18;
      }

      else if (v10 >= a2)
      {
        if (v7 >= v9) {
          (*(void (**)(_BYTE *))(v6 + 56))(a1);
        }
        else {
          (*(void (**)(unint64_t))(v8 + 56))((unint64_t)&a1[v13] & ~v12);
        }
      }

      else if ((_DWORD)v14)
      {
        else {
          int v17 = 4;
        }
        bzero(a1, v14);
        __asm { BR              X10 }
      }
    }
  }

  else
  {
    unsigned int v16 = ~v11 + a2;
    bzero(a1, (((v14 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 11) & 0xFFFFFFFFFFFFFFF8LL | 5);
    *(_DWORD *)a1 = v16;
    if (v11 < a3) {
      a1[v15] = 1;
    }
  }

void sub_188D4B458()
{
  _WORD *v0 = v1;
  JUMPOUT(0x188D4B424LL);
}

void sub_188D4B460()
{
  *(_WORD *)uint64_t v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x188D4B424LL);
}

void sub_188D4B470()
{
  _DWORD *v0 = v1;
  JUMPOUT(0x188D4B424LL);
}

uint64_t _HashTable.Bucket.description.getter()
{
  return 0x402874656B637542LL;
}

uint64_t sub_188D4B4F4()
{
  return 0x402874656B637542LL;
}

double sub_188D4B574(void *a1, uint64_t a2)
{
  BOOL v3 = _HashTable.UnsafeHandle._startIterator(bucket:)(0LL, a1, a2) != 0;
  _HashTable.BucketIterator.advance()();
  return (double)v3 / (double)(1LL << *a1);
}

char *sub_188D4B608(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_188CF7664(0LL, (1LL << *a1) & ~(1LL << *a1 >> 63), 0, MEMORY[0x18961AFE8]);
  uint64_t v13 = _HashTable.UnsafeHandle._startIterator(bucket:)(0LL, a1, a2);
  if (v13)
  {
    uint64_t v5 = -1LL << *a1;
    unint64_t v6 = (v5 ^ ~v13) + ((uint64_t)a1[1] >> 6);
    if (v6 >= ~v5) {
      uint64_t v7 = ~v5;
    }
    else {
      uint64_t v7 = 0LL;
    }
    unint64_t v8 = v6 - v7;
  }

  else
  {
    unint64_t v8 = 0LL;
  }

  unint64_t v10 = *((void *)v4 + 2);
  unint64_t v9 = *((void *)v4 + 3);
  if (v10 >= v9 >> 1) {
    uint64_t v4 = sub_188CF7664((char *)(v9 > 1), v10 + 1, 1, v4);
  }
  *((void *)v4 + 2) = v10 + 1;
  unsigned int v11 = &v4[16 * v10];
  *((void *)v11 + 4) = v8;
  v11[40] = v13 == 0;
  _HashTable.BucketIterator.advance()();
  return v4;
}

uint64_t _HashTable.BucketIterator.description.getter()
{
  uint64_t result = sub_188DF7E74();
  if (result <= 3)
  {
    if (__OFSUB__(4LL, result))
    {
      __break(1u);
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }

    MEMORY[0x1895D6834](32LL, 0xE100000000000000LL, 4 - result);
    swift_bridgeObjectRetain();
    sub_188DF7EE0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (!*(void *)(v0 + 24) || (sub_188DF88D0(), uint64_t result = sub_188DF7E74(), result > 3))
  {
LABEL_8:
    sub_188D0F054();
    sub_188DF7FA0();
    uint64_t v2 = *(void *)(v0 + 40);
    uint64_t result = sub_188DF7E74();
    if (result >= v2)
    {
LABEL_11:
      sub_188DF8600();
      sub_188DF7EE0();
      sub_188DF88D0();
      sub_188DF7EE0();
      swift_bridgeObjectRelease();
      sub_188DF7EE0();
      sub_188DF7EE0();
      swift_bridgeObjectRelease();
      sub_188DF7EE0();
      sub_188DF7EE0();
      swift_bridgeObjectRelease();
      sub_188DF7EE0();
      sub_188DF7EE0();
      swift_bridgeObjectRelease();
      sub_188DF7EE0();
      sub_188DF88D0();
      sub_188DF7EE0();
      swift_bridgeObjectRelease();
      sub_188DF7EE0();
      return 0LL;
    }

    if (!__OFSUB__(v2, result))
    {
      MEMORY[0x1895D6834](48LL, 0xE100000000000000LL, v2 - result);
      swift_bridgeObjectRetain();
      sub_188DF7EE0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }

    goto LABEL_13;
  }

  if (!__OFSUB__(4LL, result))
  {
    MEMORY[0x1895D6834](32LL, 0xE100000000000000LL, 4 - result);
    swift_bridgeObjectRetain();
    sub_188DF7EE0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }

uint64_t static BitArray._isConsistencyCheckingEnabled.getter()
{
  return 0LL;
}

uint64_t _HashNode.UnsafeHandle.itemMap.getter(unsigned int *a1)
{
  return *a1;
}

uint64_t _HashNode.UnsafeHandle.itemPtr(at:)(unsigned int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 + *(unsigned int *)(a2 + 8);
  return v3 + *(void *)(*(void *)(swift_getTupleTypeMetadata2() - 8) + 72LL) * ~(unint64_t)a1;
}

uint64_t _HashNode.UnsafeHandle.childMap.getter(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t _HashNode.UnsafeHandle.childPtr(at:)(unsigned int a1, uint64_t a2, uint64_t a3)
{
  return a3 + 16LL * a1;
}

uint64_t _HashNode.UnsafeHandle.collisionHash.getter(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

uint64_t _HashNode.UnsafeHandle.reverseItems.getter()
{
  return sub_188DF83A8();
}

uint64_t _HashNode.UnsafeHandle.itemsEndSlot.getter(unsigned int *a1)
{
  uint8x8_t v1 = (uint8x8_t)vcnt_s8((int8x8_t)*a1);
  v1.i16[0] = vaddlv_u8(v1);
  if (*a1 == a1[1]) {
    return *a1;
  }
  else {
    return v1.u32[0];
  }
}

BOOL _HashNode.UnsafeHandle.isCollisionNode.getter(_DWORD *a1)
{
  return (a1[1] & *a1) != 0;
}

uint64_t _HashNode.UnsafeHandle.itemCount.getter(unsigned int *a1)
{
  uint8x8_t v1 = (uint8x8_t)vcnt_s8((int8x8_t)*a1);
  v1.i16[0] = vaddlv_u8(v1);
  if (*a1 == a1[1]) {
    return *a1;
  }
  else {
    return v1.u32[0];
  }
}

uint64_t _HashNode.UnsafeHandle.children.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_188DF83A8();
}

uint64_t static _HashNode.UnsafeHandle.update<A>(_:_:)( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  return sub_188D4BCD8(a1, a2);
}

{
  return sub_188D4BCD8(a1, a2);
}

uint64_t _HashNode.UnsafeHandle.itemMap.setter(uint64_t result, _DWORD *a2)
{
  *a2 = result;
  return result;
}

uint64_t _HashNode.UnsafeHandle.childMap.setter(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(a2 + 4) = result;
  return result;
}

uint64_t _HashNode.UnsafeHandle.bytesFree.getter(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t _HashNode.UnsafeHandle.bytesFree.setter(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

uint64_t _HashNode.UnsafeHandle.byteCapacity.getter(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

Swift::Void __swiftcall _HashNode.UnsafeHandle.clear()()
{
  *(void *)uint64_t v0 = 0LL;
  *(_DWORD *)(v0 + 12) = *(_DWORD *)(v0 + 8);
}

uint64_t static _HashNode.UnsafeHandle.read<A>(_:_:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  return sub_188D4BCD8(a1, a2);
}

{
  return sub_188D4BCD8(a1, a2);
}

uint64_t sub_188D4BCD8(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  return a2(a1 + 16, a1 + 32);
}

uint64_t _HashNode.UnsafeHandle.subscript.unsafeMutableAddressor(unsigned int a1, uint64_t a2, uint64_t a3)
{
  return a3 + 16LL * a1;
}

uint64_t _HashNode.UnsafeHandle.collisionCount.getter(unsigned int *a1)
{
  return *a1;
}

BOOL _HashNode.UnsafeHandle.hasSingletonItem.getter(int *a1)
{
  int v1 = *a1;
  int v2 = a1[1];
  BOOL v3 = (v1 & (v1 - 1)) == 0;
  if (*a1) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4) {
    BOOL v3 = 0;
  }
  if (v1 == v2) {
    return v1 == 1;
  }
  else {
    return v3;
  }
}

uint64_t _s19CollectionsInternal9_HashNodeV12UnsafeHandleV4itemx3key_q_5valuetAA01_C4SlotV_tcilu_0( unsigned int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 + *(unsigned int *)(a2 + 8);
  return v3 + *(void *)(*(void *)(swift_getTupleTypeMetadata2() - 8) + 72LL) * ~(unint64_t)a1;
}

uint64_t _HashNode.UnsafeHandle.childrenEndSlot.getter(_DWORD *a1)
{
  uint8x8_t v1 = (uint8x8_t)vcnt_s8((int8x8_t)a1[1]);
  v1.i16[0] = vaddlv_u8(v1);
  if (*a1 == a1[1]) {
    return 0LL;
  }
  else {
    return v1.u32[0];
  }
}

uint64_t _HashNode.UnsafeHandle.childCount.getter(_DWORD *a1, int8x8_t a2)
{
  if (*a1 == a1[1]) {
    return 0LL;
  }
  a2.i32[0] = a1[1];
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(a2);
  v3.i16[0] = vaddlv_u8(v3);
  return v3.u32[0];
}

uint64_t _HashNode.UnsafeHandle._childrenStart.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _HashNode.UnsafeHandle.collisionCount.setter(uint64_t result, _DWORD *a2)
{
  *a2 = result;
  a2[1] = result;
  return result;
}

BOOL _HashNode.UnsafeHandle.hasSingletonChild.getter(_DWORD *a1)
{
  int v1 = a1[1];
  if (*a1) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v1 == 0;
  }
  return !v2 && (v1 & (v1 - 1)) == 0;
}

uint64_t _HashNode.UnsafeHandle._memory.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _HashNode.UnsafeHandle.init(_:_:isMutable:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return nullsub_1(a1, a2, a4, a5, a6);
}

uint64_t (*_HashNode.UnsafeHandle.itemMap.modify(uint64_t a1, _DWORD *a2))(uint64_t result)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = *a2;
  return sub_188D4BE6C;
}

uint64_t sub_188D4BE6C(uint64_t result)
{
  **(_DWORD **)uint64_t result = *(_DWORD *)(result + 8);
  return result;
}

_DWORD *(*_HashNode.UnsafeHandle.childMap.modify(uint64_t a1, uint64_t a2))(_DWORD *result)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 4);
  return sub_188D4BE9C;
}

_DWORD *sub_188D4BE9C(_DWORD *result)
{
  *(_DWORD *)(*(void *)result + 4LL) = result[2];
  return result;
}

void *(*_HashNode.UnsafeHandle.bytesFree.modify(void *a1, uint64_t a2))(void *result)
{
  *a1 = *(unsigned int *)(a2 + 12);
  a1[1] = a2;
  return sub_188D4BEC8;
}

void *sub_188D4BEC8(void *result)
{
  *(_DWORD *)(result[1] + 12LL) = *result;
  return result;
}

int *(*_HashNode.UnsafeHandle.collisionCount.modify(void *a1, unsigned int *a2))(int *result)
{
  *a1 = *a2;
  a1[1] = a2;
  return sub_188D4BEF0;
}

int *sub_188D4BEF0(int *result)
{
  int v1 = (_DWORD *)*((void *)result + 1);
  int v2 = *result;
  *int v1 = *result;
  v1[1] = v2;
  return result;
}

uint64_t _HashNode.UnsafeHandle.collisionHash.setter(uint64_t result, uint64_t a2, void *a3)
{
  *a3 = result;
  return result;
}

uint64_t (*_HashNode.UnsafeHandle.collisionHash.modify( void *a1, uint64_t a2, void *a3))(uint64_t result)
{
  *a1 = *a3;
  a1[1] = a3;
  return sub_188D4BF20;
}

uint64_t sub_188D4BF20(uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

BOOL _HashNode.UnsafeHandle.hasChildren.getter(_DWORD *a1)
{
  int v1 = a1[1];
  return *a1 != v1 && v1 != 0;
}

Swift::UInt _HashNode.UnsafeHandle.childBucket(at:)(Swift::Int ranked, _DWORD *a2)
{
  if ((a2[1] & *a2) != 0) {
    return 255LL;
  }
  Swift::UInt_optional v2 = UInt32._bit(ranked:)(ranked);
  if (v2.is_nil) {
    __break(1u);
  }
  return v2.value;
}

uint64_t _HashNode.UnsafeHandle.subscript.getter()
{
  return swift_retain();
}

uint64_t _HashNode.UnsafeHandle.subscript.setter( uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = (void *)(a5 + 16LL * a3);
  *uint64_t v5 = a1;
  v5[1] = a2;
  return swift_release();
}

uint64_t (*_HashNode.UnsafeHandle.subscript.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

{
  swift_getTupleTypeMetadata2();
  return nullsub_1;
}

uint64_t _HashNode.UnsafeHandle._itemsEnd.getter(uint64_t a1, uint64_t a2)
{
  return a2 + *(unsigned int *)(a1 + 8);
}

BOOL _HashNode.UnsafeHandle.hasItems.getter(_DWORD *a1)
{
  return *a1 != 0;
}

Swift::UInt _HashNode.UnsafeHandle.itemBucket(at:)(Swift::Int ranked, _DWORD *a2)
{
  if ((a2[1] & *a2) != 0) {
    return 255LL;
  }
  Swift::UInt_optional v2 = UInt32._bit(ranked:)(ranked);
  if (v2.is_nil) {
    __break(1u);
  }
  return v2.value;
}

uint64_t _HashNode.UnsafeHandle.subscript.getter( uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  unsigned int v16 = (char *)&v25 - v15;
  uint64_t v17 = a5 + *(unsigned int *)(a4 + 8);
  uint64_t v18 = v17 + *(void *)(*(void *)(swift_getTupleTypeMetadata2() - 8) + 72LL) * ~(unint64_t)a3;
  uint64_t v19 = *(int *)(TupleTypeMetadata2 + 48);
  unint64_t v20 = &v16[v19];
  uint64_t v21 = v18 + v19;
  uint64_t v22 = *(void *)(a6 - 8);
  (*(void (**)(char *))(v22 + 16))(v16);
  uint64_t v23 = *(void *)(a7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v20, v21, a7);
  (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(a1, v16, a6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v23 + 32))(a2, v20, a7);
}

uint64_t _HashNode.UnsafeHandle.subscript.setter( uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v28 = a5;
  uint64_t v26 = a4;
  unsigned int v27 = a3;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v29 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v12 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  size_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = MEMORY[0x1895F8858](v12);
  uint64_t v17 = (char *)&v26 - v16;
  uint64_t v18 = (char *)&v26 + *(int *)(v15 + 48) - v16;
  uint64_t v19 = *(void (***)(void, void, void))(a6 - 8);
  ((void (**)(char *, uint64_t, uint64_t))v19)[4]((char *)&v26 - v16, a1, a6);
  unint64_t v20 = *(void (***)(void, void, void))(a7 - 8);
  ((void (**)(char *, uint64_t, uint64_t))v20)[4](v18, a2, a7);
  uint64_t v21 = &v14[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (**)(char *, char *, uint64_t))v19)[2](v14, v17, a6);
  ((void (**)(char *, char *, uint64_t))v20)[2](v21, v18, a7);
  uint64_t v22 = v28 + *(unsigned int *)(v26 + 8);
  unint64_t v23 = ~(unint64_t)v27;
  uint64_t v24 = v22 + *(void *)(*(void *)(swift_getTupleTypeMetadata2() - 8) + 72LL) * v23;
  ((void (**)(uint64_t, char *, uint64_t))v19)[5](v24, v14, a6);
  ((void (**)(uint64_t, char *, uint64_t))v20)[5](v24 + *(int *)(TupleTypeMetadata2 + 48), v21, a7);
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v17, TupleTypeMetadata2);
}

BOOL _HashNode.UnsafeHandle.isAtrophiedNode.getter( _DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int8x8_t v5 = (int8x8_t)a1[1];
  if (*a1) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5.i32[0] == 0;
  }
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  return !v6 && v7.i32[0] <= 1u && _HashNode.isCollisionNode.getter(*a2, a2[1], a3, a4, a5);
}

uint64_t _s12UnsafeHandleVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 != 1 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t _s12UnsafeHandleVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)uint64_t result = a2 - 2;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 2) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 2) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for _HashNode.UnsafeHandle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for _HashNode.UnsafeHandle);
}

void static Rope._Node.createLeaf(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_188D4C454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Rope._Node(0LL, v5, v4, a4);
  sub_188D516E8(v6, v7);
  uint64_t v9 = type metadata accessor for Rope._Item(0LL, v5, v4, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v6, v9);
}

Swift::Void __swiftcall Rope._Node.ensureUnique()()
{
  uint64_t v1 = v0;
  ((void (*)())MEMORY[0x1895F8858])();
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0) {
    Rope._Node.copy()(v1);
  }
}

BOOL Rope._Node.isSingleton.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v6 = *(unsigned __int8 *)(*(void *)v5 + 18LL);
  (*(void (**)(char *))(v2 + 16))(v4);
  if (v6) {
    BOOL v7 = 0LL;
  }
  else {
    BOOL v7 = *(unsigned __int16 *)(*(void *)v4 + 16LL) == 1;
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return v7;
}

BOOL Rope._Node.isLeaf.getter()
{
  return *(_BYTE *)(*(void *)v0 + 18LL) == 0;
}

uint64_t Rope._Node.readInner<A>(_:)(void (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *v3 + 16;
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v9 = v6 + ((v8 + 19) & ~v8);
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(a3 + 24);
  MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, a3);
  uint64_t v12 = nullsub_1(v7, v9, v10, a3, v11);
  uint64_t v14 = v13;
  swift_unknownObjectRetain();
  a1(v12, v14);
  return swift_unknownObjectRelease();
}

uint64_t Rope._Node.readLeaf<A>(_:)( void (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *v4;
  uint64_t v7 = *v4 + 16;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(a3 + 24);
  uint64_t v10 = type metadata accessor for Rope._Item(0LL, v8, v9, a4);
  uint64_t v11 = *(unsigned __int8 *)(*(void *)(v10 - 8) + 80LL);
  uint64_t v12 = v6 + ((v11 + 19) & ~v11);
  MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Item, v10);
  uint64_t v13 = nullsub_1(v7, v12, v8, v10, v9);
  uint64_t v15 = v14;
  swift_unknownObjectRetain();
  a1(v13, v15);
  return swift_unknownObjectRelease();
}

uint64_t Rope._Node.height.getter()
{
  return *(unsigned __int8 *)(*(void *)v0 + 18LL);
}

uint64_t Rope._Node.childCount.getter()
{
  return *(unsigned __int16 *)(*(void *)v0 + 16LL);
}

uint64_t Rope._Node._removeNode(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *v3 + 16LL;
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(a2 - 8) + 80LL);
  uint64_t v9 = *v3 + ((v8 + 19) & ~v8);
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v11 = *(void *)(a2 + 24);
  MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, a2);
  uint64_t v12 = (_WORD *)nullsub_1(v7, v9, v10, a2, v11);
  uint64_t v14 = v13;
  swift_unknownObjectRetain();
  sub_188D4E9B8( v12,  v14,  a1,  v10,  v11,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Node,  (uint64_t)&protocol conformance descriptor for Rope<A>._Node);
  swift_unknownObjectRelease();
  uint64_t v15 = a3 + *(int *)(a2 + 36);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 56);
  uint64_t v18 = swift_checkMetadataState();
  return v17(v15, v18, AssociatedConformanceWitness);
}

void Rope._Node.split(keeping:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v4 + 16);
  if (*(_BYTE *)(*(void *)v2 + 18LL)) {
    static Rope._Node.createInner(height:)(*(unsigned __int8 *)(*(void *)v2 + 18LL), v5, *(void *)(a2 + 24));
  }
  static Rope._Node.createLeaf()(v5, *(void *)(a2 + 24));
}

uint64_t Rope._Node._removeItem(at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *v4;
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v10 = type metadata accessor for Rope._Item(0LL, v7, v8, v9);
  uint64_t v11 = *(unsigned __int8 *)(*(void *)(v10 - 8) + 80LL);
  uint64_t v12 = v6 + ((v11 + 19) & ~v11);
  MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Item, v10);
  uint64_t v13 = (_WORD *)nullsub_1(v6 + 16, v12, v7, v10, v8);
  uint64_t v15 = v14;
  swift_unknownObjectRetain();
  sub_188D4E9B8( v13,  v15,  a3,  v7,  v8,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Item,  (uint64_t)&protocol conformance descriptor for Rope<A>._Item);
  swift_unknownObjectRelease();
  Rope._Item.summary.getter(v10);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 56);
  uint64_t v18 = swift_checkMetadataState();
  return v17(a2, v18, AssociatedConformanceWitness);
}

uint64_t Rope._Node.updateInner<A>(_:)(void (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *v3 + 16;
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v9 = v6 + ((v8 + 19) & ~v8);
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(a3 + 24);
  MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, a3);
  uint64_t v12 = nullsub_1(v7, v9, v10, a3, v11);
  uint64_t v14 = v13;
  swift_unknownObjectRetain();
  a1(v12, v14);
  return swift_unknownObjectRelease();
}

uint64_t Rope._Node.asUnmanagedLeaf.getter()
{
  return Rope._UnmanagedLeaf.init(_:)(*v0);
}

uint64_t Rope._Node.updateLeaf<A>(_:)( void (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *v4;
  uint64_t v7 = *v4 + 16;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(a3 + 24);
  uint64_t v10 = type metadata accessor for Rope._Item(0LL, v8, v9, a4);
  uint64_t v11 = *(unsigned __int8 *)(*(void *)(v10 - 8) + 80LL);
  uint64_t v12 = v6 + ((v11 + 19) & ~v11);
  MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Item, v10);
  uint64_t v13 = nullsub_1(v7, v12, v8, v10, v9);
  uint64_t v15 = v14;
  swift_unknownObjectRetain();
  a1(v13, v15);
  return swift_unknownObjectRelease();
}

uint64_t static Rope._Node.createInner(children:_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)result + 18LL) + 1;
  if (((v4 >> 8) & 1) == 0)
  {
    type metadata accessor for Rope._Node(0LL, a3, a4, a4);
    static Rope._Node.createInner(height:)(v4, a3, a4);
  }

  __break(1u);
  return result;
}

uint64_t Rope._Node.rebalance(prevNeighbor:)(uint64_t a1, uint64_t a2)
{
  char v3 = Rope._Node.rebalance(nextNeighbor:)(v2, a2);
  if ((v3 & 1) != 0) {
    sub_188DF89E4();
  }
  return v3 & 1;
}

BOOL Rope._Node.isEmpty.getter()
{
  return *(_WORD *)(*(void *)v0 + 16LL) == 0;
}

uint64_t Rope._Node.isUndersized.getter()
{
  uint64_t v1 = *(unsigned __int16 *)(*(void *)v0 + 16LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))( AssociatedTypeWitness,  AssociatedConformanceWitness);
  uint64_t v5 = result + 1;
  if (__OFADD__(result, 1LL))
  {
    __break(1u);
  }

  else
  {
    if (v5 < 0) {
      uint64_t v5 = result + 2;
    }
    return v1 < v5 >> 1;
  }

  return result;
}

uint64_t Rope._Node._insertNode(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a1, a3);
}

BOOL Rope._Node.isFull.getter()
{
  uint64_t v1 = *(unsigned __int16 *)(*(void *)v0 + 16LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))( AssociatedTypeWitness,  AssociatedConformanceWitness) == v1;
}

uint64_t Rope._Node.rebalance(nextNeighbor:)(uint64_t *a1, uint64_t a2)
{
  char v3 = v2;
  if (*(_WORD *)(*v2 + 16))
  {
    if ((Rope._Node.isUndersized.getter() & 1) != 0 || (Rope._Node.isUndersized.getter() & 1) != 0)
    {
      int64_t v6 = *(unsigned __int16 *)(*a1 + 16) + (unint64_t)*(unsigned __int16 *)(*v2 + 16);
      uint64_t v9 = a2 + 16;
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v7 = *(void *)(v9 + 8);
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16);
      if (v12(AssociatedTypeWitness, AssociatedConformanceWitness) >= v6)
      {
LABEL_13:
        static Rope._Node.redistributeChildren(_:_:to:)(v3, a1, v6, v8, v7);
        return *(_WORD *)(*a1 + 16) == 0;
      }

      uint64_t result = v12(AssociatedTypeWitness, AssociatedConformanceWitness);
      uint64_t v14 = result + 1;
      if (__OFADD__(result, 1LL))
      {
        __break(1u);
      }

      else
      {
        int64_t v6 = (unint64_t)v6 >> 1;
        if (v14 < 0) {
          uint64_t v14 = result + 2;
        }
        if (v6 >= v14 >> 1) {
          goto LABEL_13;
        }
        uint64_t result = v12(AssociatedTypeWitness, AssociatedConformanceWitness);
        uint64_t v15 = result + 1;
        if (!__OFADD__(result, 1LL))
        {
          if (v15 < 0) {
            uint64_t v15 = result + 2;
          }
          int64_t v6 = v15 >> 1;
          goto LABEL_13;
        }
      }

      __break(1u);
    }

    else
    {
      return 0LL;
    }
  }

  else
  {
    sub_188DF89E4();
    return 1LL;
  }

  return result;
}

uint64_t Rope._Node._appendNode(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
}

uint64_t (*Rope._Node.lastItem.modify(void *a1, uint64_t a2))()
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  *uint64_t v5 = v2;
  v5[1] = v6;
  void v5[2] = v7;
  uint64_t v9 = type metadata accessor for Rope._Node._ModifyState(0LL, v6, v7, v8);
  _OWORD v5[3] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  __int128 v5[4] = v10;
  uint64_t v11 = malloc(*(void *)(v10 + 64));
  v5[5] = v11;
  Rope._Node._prepareModifyLast()(a2, v11);
  return sub_188D4D294;
}

void static Rope._Node.redistributeChildren(_:_:to:)( uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = type metadata accessor for Rope._Node(0LL, a4, a5, a4);
  Rope._Node.ensureUnique()();
  Rope._Node.ensureUnique()();
  uint64_t v9 = *(unsigned __int16 *)(*a1 + 16);
  uint64_t v10 = *(unsigned __int16 *)(*a2 + 16) + v9;
  if (v10 >= a3) {
    uint64_t v10 = a3;
  }
  uint64_t v11 = v10 - v9;
  if (__OFSUB__(v10, v9))
  {
    __break(1u);
    goto LABEL_11;
  }

  if (!v11) {
    return;
  }
  if (v11 >= 1)
  {
    Rope._Node.appendChildren(movingFromPrefixOf:count:)(a2, v11, v8);
    return;
  }

  if (__OFSUB__(0LL, v11))
  {
LABEL_11:
    __break(1u);
    return;
  }

  Rope._Node.prependChildren(movingFromSuffixOf:count:)(a1, v9 - v10, v8);
}

uint64_t Rope._Node._appendItem(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Rope._Item(0LL, *(void *)(a2 + 16), *(void *)(a2 + 24), v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(a1, v5);
}

uint64_t Rope._Node.lastItem.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = Rope._Node.lastPath.getter(a1);
  return Rope._Node.subscript.getter(v4, a1, a2);
}

uint64_t Rope._Node.firstItem.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t started = Rope._Node._startPath.getter();
  return Rope._Node.subscript.getter(started, a1, a2);
}

void (*Rope._Node.firstItem.modify(void *a1, uint64_t a2))(void *a1)
{
  unint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  unint64_t started = Rope._Node._startPath.getter();
  v4[4] = Rope._Node.subscript.modify(v4, started, a2);
  return sub_188D4D464;
}

void sub_188D4D464(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 32LL))(*a1, 0LL);
  free(v1);
}

void static Rope._Node.createLeaf()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_188DF8384();
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = type metadata accessor for Rope._Item(255LL, a1, a2, v5);
  MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Item, v6);
  type metadata accessor for Rope._Storage();
}

uint64_t sub_188D4D54C()
{
  char v3 = (uint64_t *)static Rope._Storage.create(height:)();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(v1, AssociatedConformanceWitness);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v1 - 8) + 56LL))(v2, 0LL, 1LL, v1);
  return Rope._Node.init(leaf:summary:)(v3, v2, v5, v0);
}

void Rope._Node.copy(slots:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_188D4D634( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *(void *)(v11 - 160) = TupleTypeMetadata2;
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  *(void *)(v11 - 168) = (char *)&a9 - v13;
  uint64_t v14 = sub_188DF8384();
  MEMORY[0x1895F8858](v14);
  *(void *)(v11 - 128) = (char *)&a9 - v15;
  uint64_t v17 = type metadata accessor for Rope._Item(255LL, v9, v10, v16);
  uint64_t v18 = MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Item, v17);
  *(void *)(v11 - 112) = v9;
  *(void *)(v11 - 104) = v17;
  *(void *)(v11 - 96) = v10;
  *(void *)(v11 - 88) = v18;
  *(void *)(v11 - 176) = v18;
  type metadata accessor for Rope._Storage();
}

void sub_188D4D718()
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v7 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v9 = (char *)&v21 - v8;
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = *v3;
  if (*(_BYTE *)(v10 + 18))
  {
    uint64_t v11 = *(unsigned __int8 *)(*(void *)(v4 - 8) + 80LL);
    uint64_t v12 = nullsub_1(v10 + 16, v10 + ((v11 + 19) & ~v11), v0, v4, v1);
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)(v5 - 168) + *(int *)(*(void *)(v5 - 160) + 48LL);
    swift_unknownObjectRetain();
    sub_188D4E7C4( v15,  v12,  v14,  *(void *)(v5 - 144),  *(void *)(v5 - 136),  v0,  v1,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Node,  (uint64_t)&protocol conformance descriptor for Rope<A>._Node);
  }

  uint64_t v16 = *(unsigned __int8 *)(*(void *)(v2 - 8) + 80LL);
  uint64_t v17 = nullsub_1(v10 + 16, v10 + ((v16 + 19) & ~v16), v0, v2, v1);
  uint64_t v19 = v18;
  uint64_t v20 = (uint64_t)&v9[*(int *)(TupleTypeMetadata2 + 48)];
  swift_unknownObjectRetain();
  sub_188D4E7C4( v20,  v17,  v19,  *(void *)(v5 - 144),  *(void *)(v5 - 136),  v0,  v1,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Item,  (uint64_t)&protocol conformance descriptor for Rope<A>._Item);
}

void sub_188D4D8E4(uint64_t *a1)
{
  uint64_t v7 = *(void *)(v5 - 128);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v7, v4, v1);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56))(v7, 0LL, 1LL, v1);
  Rope._Node.init(leaf:summary:)(a1, v7, v8, *(uint64_t ***)(v5 - 120));
  JUMPOUT(0x188D4D948LL);
}

uint64_t Rope._Node.object.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t Rope._Node.object.setter(uint64_t a1)
{
  uint64_t result = swift_unknownObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*Rope._Node.object.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t Rope._Node.summary.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 36);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16LL))( a2,  v4,  AssociatedTypeWitness);
}

uint64_t Rope._Node.summary.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 36);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40LL))( v4,  a1,  AssociatedTypeWitness);
}

uint64_t (*Rope._Node.summary.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t Rope._Node.init(leaf:summary:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t **a4@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v29 = *a1;
  uint64_t v6 = *(void *)(v29 + class metadata base offset for Rope._Storage);
  uint64_t v7 = *(void *)(v29 + class metadata base offset for Rope._Storage + 16);
  uint64_t v8 = type metadata accessor for Rope._Node(0LL, v6, v7, a3);
  uint64_t v33 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (void *)((char *)v27 - v9);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v31 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  v27[1] = a1;
  uint64_t v28 = (char *)v27 - v12;
  *a4 = a1;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
  uint64_t v30 = (char *)a4 + *(int *)(v8 + 36);
  swift_retain();
  v14(AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v15 = v8;
  (*(void (**)(void *, uint64_t **, uint64_t))(v33 + 16))(v10, a4, v8);
  uint64_t v16 = v10;
  uint64_t v17 = *v10 + 16LL;
  uint64_t v18 = *(void *)(class metadata base offset for Rope._Storage + v29 + 8);
  uint64_t v19 = *(unsigned __int8 *)(*(void *)(v18 - 8) + 80LL);
  uint64_t v20 = *v10 + ((v19 + 19) & ~v19);
  MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Item, v18);
  uint64_t v21 = (unsigned __int16 *)nullsub_1(v17, v20, v6, v18, v7);
  uint64_t v23 = v22;
  swift_unknownObjectRetain();
  uint64_t v24 = v28;
  sub_188D4E014( v21,  v23,  v6,  v7,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Item,  (uint64_t)&protocol conformance descriptor for Rope<A>._Item);
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v25 = sub_188DF8384();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8LL))(v32, v25);
  (*(void (**)(void *, uint64_t))(v33 + 8))(v16, v15);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v31 + 40))(v30, v24, AssociatedTypeWitness);
}

uint64_t sub_188D4DCE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v14 - v8;
  uint64_t v11 = type metadata accessor for Rope._Item(0LL, a3, a4, v10);
  Rope._Item.summary.getter(v11);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))( v9,  AssociatedTypeWitness,  AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
}

uint64_t Rope._Node.init(inner:summary:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v5 = *(void *)(*a1 + class metadata base offset for Rope._Storage + 8);
  uint64_t v29 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v7 = (uint64_t *)((char *)&v24 - v6);
  uint64_t v9 = v8[2];
  uint64_t v10 = *v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v25 = (char *)&v24 - v12;
  *a3 = a1;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
  uint64_t v26 = (char *)a3 + *(int *)(v5 + 36);
  swift_retain();
  v14(AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v15 = v29;
  (*(void (**)(void *, void *, uint64_t))(v29 + 16))(v7, a3, v5);
  uint64_t v16 = *v7 + 16LL;
  unint64_t v17 = *v7 + ((*(unsigned __int8 *)(v15 + 80) + 19LL) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, v5);
  uint64_t v18 = (unsigned __int16 *)nullsub_1(v16, v17, v10, v5, v9);
  uint64_t v20 = v19;
  swift_unknownObjectRetain();
  uint64_t v21 = v25;
  sub_188D4E014( v18,  v20,  v10,  v9,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Node,  (uint64_t)&protocol conformance descriptor for Rope<A>._Node);
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v22 = sub_188DF8384();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8LL))(v28, v22);
  (*(void (**)(void *, uint64_t))(v29 + 8))(v7, v5);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v27 + 40))(v26, v21, AssociatedTypeWitness);
}

uint64_t sub_188D4E014( unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t), uint64_t a6)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v13 = a5(0LL, a3, a4);
  uint64_t v14 = MEMORY[0x1895D7620](a6, v13);
  Rope._UnsafeHandle.children.getter(a1, a2, a3, v13, a4, v14);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))( AssociatedTypeWitness,  AssociatedConformanceWitness);
  uint64_t v16 = sub_188DF7DCC();
  MEMORY[0x1895D7620](MEMORY[0x189617C70], v16);
  return sub_188DF8054();
}

uint64_t sub_188D4E180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 + *(int *)(type metadata accessor for Rope._Node(0LL, a3, a4, a4) + 36);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
  uint64_t v7 = swift_checkMetadataState();
  return v6(v4, v7, AssociatedConformanceWitness);
}

uint64_t sub_188D4E24C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 36);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16LL))( a2,  v4,  AssociatedTypeWitness);
}

uint64_t Rope._Node._headerPtr.getter()
{
  return *v0 + 16LL;
}

uint64_t Rope._Node.header.getter()
{
  return *(unsigned __int16 *)(*(void *)v0 + 16LL) | (*(unsigned __int8 *)(*(void *)v0 + 18LL) << 16);
}

uint64_t Rope._Node.asLeaf.getter()
{
  return swift_retain();
}

void static Rope._Node.createInner(height:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_188DF8384();
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = type metadata accessor for Rope._Node(255LL, a2, a3, v6);
  MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, v7);
  type metadata accessor for Rope._Storage();
}

uint64_t sub_188D4E388()
{
  uint64_t v3 = (void *)static Rope._Storage.create(height:)();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(v1, AssociatedConformanceWitness);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v1 - 8) + 56LL))(v2, 0LL, 1LL, v1);
  return Rope._Node.init(inner:summary:)(v3, v2, v0);
}

uint64_t sub_188D4E418(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for Rope._Node(0LL, a5, a6, a4);
  MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, v11);
  sub_188D8F900(a3, a1, a2, a5, v11);
  return sub_188D8F900(a4, a1, a2, a5, v11);
}

Swift::Bool __swiftcall Rope._Node.isUnique()()
{
  return swift_isUniquelyReferenced_nonNull();
}

void Rope._Node.copy()(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t v5 = sub_188DF8384();
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = *v1;
  if (*(_BYTE *)(*v1 + 18))
  {
    uint64_t v8 = *(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL);
    uint64_t v9 = v7 + ((v8 + 19) & ~v8);
    MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, a1);
    uint64_t v10 = nullsub_1(v7 + 16, v9, v4, a1, v3);
    uint64_t v12 = v11;
    swift_unknownObjectRetain();
    sub_188D4E73C( v10,  v12,  v4,  v3,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Node,  (uint64_t)&protocol conformance descriptor for Rope<A>._Node);
  }

  uint64_t v13 = type metadata accessor for Rope._Item(0LL, v4, v3, v6);
  uint64_t v14 = *(unsigned __int8 *)(*(void *)(v13 - 8) + 80LL);
  uint64_t v15 = v7 + ((v14 + 19) & ~v14);
  MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Item, v13);
  uint64_t v16 = nullsub_1(v7 + 16, v15, v4, v13, v3);
  uint64_t v18 = v17;
  swift_unknownObjectRetain();
  sub_188D4E73C( v16,  v18,  v4,  v3,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Item,  (uint64_t)&protocol conformance descriptor for Rope<A>._Item);
}

void sub_188D4E6CC()
{
  uint64_t v5 = *(uint64_t **)(v4 - 88);
  uint64_t v6 = v0 + *(int *)(v3 + 36);
  uint64_t v7 = *(void *)(v2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v1, v6, v2);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v1, 0LL, 1LL, v2);
  Rope._Node.init(leaf:summary:)(v5, v1, v8, *(uint64_t ***)(v4 - 96));
  JUMPOUT(0x188D4E71CLL);
}

void sub_188D4E73C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t), uint64_t a6)
{
  uint64_t v7 = a5(0LL, a3, a4);
  MEMORY[0x1895D7620](a6, v7);
  Rope._UnsafeHandle.copy()();
}

uint64_t sub_188D4E7A8(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

void sub_188D4E7C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void, uint64_t, uint64_t), uint64_t a9)
{
  uint64_t v9 = a8(0LL, a6, a7);
  MEMORY[0x1895D7620](a9, v9);
  Rope._UnsafeHandle.copy(slots:)();
}

uint64_t Rope._Node._insertItem(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Rope._Item(0LL, *(void *)(a3 + 16), *(void *)(a3 + 24), v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
}

uint64_t sub_188D4E8A8( _WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void, uint64_t, uint64_t), uint64_t a8)
{
  uint64_t v14 = a7(0LL, a5, a6);
  MEMORY[0x1895D7620](a8, v14);
  return sub_188D8F9A4(a3, a4, a1, a2, a5, v14);
}

uint64_t sub_188D4E934( _WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t), uint64_t a7)
{
  uint64_t v12 = a6(0LL, a4, a5);
  MEMORY[0x1895D7620](a7, v12);
  return sub_188D8F900(a3, a1, a2, a4, v12);
}

uint64_t sub_188D4E9B8( _WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t), uint64_t a7)
{
  uint64_t v10 = a6(0LL, a4, a5);
  MEMORY[0x1895D7620](a7, v10);
  return Rope._UnsafeHandle._removeChild(at:)(a3, a1);
}

uint64_t Rope._Node.prependChildren(movingFromSuffixOf:count:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_188D4EA5C( a1,  a2,  a3,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))Rope._UnsafeHandle._prependChildren(movingFromSuffixOf:count:));
}

uint64_t Rope._Node.appendChildren(movingFromPrefixOf:count:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_188D4EA5C( a1,  a2,  a3,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))Rope._UnsafeHandle._appendChildren(movingFromPrefixOf:count:));
}

uint64_t sub_188D4EA5C( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v28 = a4;
  uint64_t v29 = a2;
  uint64_t v30 = a1;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v27 - v11;
  uint64_t v13 = *v4;
  if (*(_BYTE *)(*v4 + 18))
  {
    uint64_t v14 = *(unsigned __int8 *)(*(void *)(a3 - 8) + 80LL);
    uint64_t v15 = v13 + ((v14 + 19) & ~v14);
    MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, a3);
    uint64_t v16 = nullsub_1(v13 + 16, v15, v7, a3, v6);
    uint64_t v18 = v17;
    swift_unknownObjectRetain();
    sub_188D4ECAC( v16,  v18,  v30,  v29,  v7,  v6,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Node,  (uint64_t)&protocol conformance descriptor for Rope<A>._Node,  v28);
  }

  else
  {
    uint64_t v27 = v13 + 16;
    uint64_t v19 = type metadata accessor for Rope._Item(0LL, v7, v6, v10);
    uint64_t v20 = *(unsigned __int8 *)(*(void *)(v19 - 8) + 80LL);
    uint64_t v21 = v13 + ((v20 + 19) & ~v20);
    MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Item, v19);
    uint64_t v22 = nullsub_1(v27, v21, v7, v19, v6);
    uint64_t v24 = v23;
    swift_unknownObjectRetain();
    sub_188D4ECAC( v22,  v24,  v30,  v29,  v7,  v6,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Item,  (uint64_t)&protocol conformance descriptor for Rope<A>._Item,  v28);
  }

  swift_unknownObjectRelease();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))( v12,  AssociatedTypeWitness,  AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 56))( v12,  AssociatedTypeWitness,  AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
}

uint64_t sub_188D4ECAC( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void, uint64_t, uint64_t), uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v13 = *a3;
  uint64_t v14 = *a3 + 16;
  uint64_t v15 = a7(0LL, a5, a6);
  uint64_t v16 = *(unsigned __int8 *)(*(void *)(v15 - 8) + 80LL);
  uint64_t v17 = v13 + ((v16 + 19) & ~v16);
  MEMORY[0x1895D7620](a8, v15);
  uint64_t v18 = nullsub_1(v14, v17, a5, v15, a6);
  uint64_t v20 = v19;
  swift_unknownObjectRetain();
  sub_188D4EDA0(v18, v20, a1, a2, a4, a5, a6, a7, a8, a9);
  return swift_unknownObjectRelease();
}

uint64_t sub_188D4EDA0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void, uint64_t, uint64_t), uint64_t a9, uint64_t (*a10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v17 = a8(0LL, a6, a7);
  uint64_t v19 = MEMORY[0x1895D7620](a9, v17);
  return a10(a1, a2, a5, a3, a4, a6, v17, a7, v19);
}

uint64_t Rope._Node._startPath.getter()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)v0 + 18LL);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return _RopePath.init(height:)(v1);
}

uint64_t Rope._Node.lastPath.getter(uint64_t a1)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)v1 + 18LL);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = _RopePath.init(height:)(v3);
  Rope._Node.descendToLastItem(under:)((uint64_t)&v5, a1);
  return v5;
}

uint64_t Rope._Node.descendToLastItem(under:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = (unsigned __int16 *)(*v2 + 16);
  uint64_t v7 = *v6 - 1LL;
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  int v10 = *(unsigned __int8 *)(*v2 + 18);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v14 = type metadata accessor for _RopePath(0LL, AssociatedTypeWitness, AssociatedConformanceWitness, v13);
  _RopePath.subscript.setter(v7, v10, v14);
  if (!v10) {
    return Rope._UnmanagedLeaf.init(_:)(v5);
  }
  uint64_t v15 = *(unsigned __int8 *)(*(void *)(a2 - 8) + 80LL);
  uint64_t v16 = v5 + ((v15 + 19) & ~v15);
  MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, a2);
  uint64_t v17 = (unsigned __int16 *)nullsub_1(v6, v16, v9, a2, v8);
  uint64_t v19 = v18;
  swift_unknownObjectRetain();
  sub_188D4F3AC(v17, v19, v7, a1, v9, v8, &v21);
  swift_unknownObjectRelease();
  return v21;
}

BOOL Rope._Node.isAtEnd(_:)(unint64_t a1)
{
  unsigned __int8 v3 = *(_BYTE *)(*(void *)v1 + 18LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return _RopePath.subscript.getter(v3, a1, AssociatedTypeWitness, AssociatedConformanceWitness) == *(unsigned __int16 *)(*(void *)v1 + 16LL);
}

uint64_t Rope._Node.descendToFirstItem(under:)(uint64_t result, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(*(void *)v2 + 18LL) + 1;
  if (((v3 >> 8) & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v5 = (unint64_t *)result;
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    type metadata accessor for _RopePath(0LL, AssociatedTypeWitness, AssociatedConformanceWitness, v8);
    _RopePath.clear(below:)(v3);
    return Rope._Node.unmanagedLeaf(at:)(*v5, a2);
  }

  return result;
}

uint64_t Rope._Node.unmanagedLeaf(at:)(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  unsigned __int8 v4 = *(_BYTE *)(*v2 + 18LL);
  if (!v4) {
    return Rope._UnmanagedLeaf.init(_:)(*v2);
  }
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = _RopePath.subscript.getter(v4, a1, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v12 = *(unsigned __int8 *)(*(void *)(a2 - 8) + 80LL);
  uint64_t v13 = v3 + ((v12 + 19) & ~v12);
  MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, a2);
  uint64_t v14 = (unsigned __int16 *)nullsub_1(v3 + 16, v13, v8, a2, v7);
  uint64_t v16 = v15;
  swift_unknownObjectRetain();
  sub_188D4F660(v14, v16, v11, a1, v8, v7, &v18);
  swift_unknownObjectRelease();
  return v18;
}

uint64_t sub_188D4F3AC@<X0>( unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14 = type metadata accessor for Rope._Node(0LL, a5, a6, a4);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)&v22 - v16;
  uint64_t v18 = MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, v14);
  uint64_t v19 = Rope._UnsafeHandle.children.getter(a1, a2, a5, v14, a6, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v19 + *(void *)(v15 + 72) * a3, v14);
  uint64_t v20 = Rope._Node.descendToLastItem(under:)(a4, v14);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  *a7 = v20;
  return result;
}

uint64_t Rope._unmanagedLeaf(at:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v26 = a1;
  uint64_t v6 = type metadata accessor for Rope._Node(255LL, *(void *)(a2 + 16), *(void *)(a2 + 24), a4);
  uint64_t v7 = sub_188DF8384();
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v25 = v7;
  uint64_t v8 = MEMORY[0x1895F8858](v7);
  int v10 = (char *)&v23 - v9;
  uint64_t v11 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v13 = (char *)&v23 - v12;
  unint64_t v17 = Rope._endPath.getter(a2, v14, v15, v16);
  swift_getAssociatedTypeWitness();
  unint64_t v18 = v26;
  swift_getAssociatedConformanceWitness();
  uint64_t v19 = 0LL;
  if (!static _RopePath.< infix(_:_:)(v18, v17)) {
    return v19;
  }
  uint64_t v21 = v24;
  uint64_t v20 = v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v10, v4, v25);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1LL, v6) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v10, v6);
    uint64_t v19 = Rope._Node.unmanagedLeaf(at:)(v18, v6);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v6);
    return v19;
  }

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v10, v20);
  __break(1u);
  return result;
}

uint64_t sub_188D4F660@<X0>( unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14 = type metadata accessor for Rope._Node(0LL, a5, a6, a4);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  unint64_t v17 = (char *)&v22 - v16;
  uint64_t v18 = MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, v14);
  uint64_t v19 = Rope._UnsafeHandle.children.getter(a1, a2, a5, v14, a6, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v19 + *(void *)(v15 + 72) * a3, v14);
  uint64_t v20 = Rope._Node.unmanagedLeaf(at:)(a4, v14);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  *a7 = v20;
  return result;
}

uint64_t Rope._Node.formSuccessor(of:)(uint64_t a1, uint64_t a2)
{
  int v5 = *(unsigned __int8 *)(*v2 + 18LL);
  unint64_t v6 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = _RopePath.subscript.getter(v5, v6, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v23 = v11;
  if (v5)
  {
    uint64_t v13 = *v2 + 16LL;
    uint64_t v14 = *(unsigned __int8 *)(*(void *)(a2 - 8) + 80LL);
    uint64_t v15 = *v2 + ((v14 + 19) & ~v14);
    MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, a2);
    uint64_t v16 = (unsigned __int16 *)nullsub_1(v13, v15, v8, a2, v7);
    uint64_t v18 = v17;
    swift_unknownObjectRetain();
    sub_188D4F900(v16, v18, &v23, a1, (uint64_t)v2, v5, v8, v7, (char *)&v22);
    swift_unknownObjectRelease();
    return v22;
  }

  else
  {
    uint64_t v20 = v11 + 1;
    if (v11 + 1 >= *(unsigned __int16 *)(*v2 + 16LL))
    {
      return 0LL;
    }

    else
    {
      uint64_t v21 = type metadata accessor for _RopePath(0LL, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
      _RopePath.subscript.setter(v20, 0, v21);
      *(void *)(a1 + 16) = Rope._UnmanagedLeaf.init(_:)(*v2);
      return 1LL;
    }
  }

uint64_t sub_188D4F900@<X0>( unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  int v35 = a6;
  uint64_t v36 = a5;
  uint64_t v37 = a9;
  uint64_t v15 = type metadata accessor for Rope._Node(0LL, a7, a8, a4);
  uint64_t v16 = *(void **)(v15 - 8);
  MEMORY[0x1895F8858](v15);
  uint64_t v18 = (char *)&v32 - v17;
  uint64_t v19 = MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, v15);
  uint64_t v20 = Rope._UnsafeHandle.children.getter(a1, a2, a7, v15, a8, v19);
  uint64_t v21 = *a3;
  uint64_t v22 = v16[9];
  uint64_t v33 = v20;
  uint64_t v34 = (void (*)(char *, uint64_t, uint64_t))v16[2];
  v34(v18, v20 + v22 * v21, v15);
  LOBYTE(a2) = Rope._Node.formSuccessor(of:)(a4, v15);
  uint64_t v23 = (uint64_t (*)(char *, uint64_t))v16[1];
  uint64_t result = v23(v18, v15);
  if ((a2 & 1) != 0) {
    goto LABEL_5;
  }
  uint64_t v25 = *a3 + 1;
  if (!__OFADD__(*a3, 1LL))
  {
    *a3 = v25;
    if (v25 >= *(unsigned __int16 *)(*(void *)v36 + 16LL))
    {
      char v31 = 0;
      goto LABEL_7;
    }

    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v29 = type metadata accessor for _RopePath(0LL, AssociatedTypeWitness, AssociatedConformanceWitness, v28);
    _RopePath.subscript.setter(v25, v35, v29);
    v34(v18, v33 + *a3 * v22, v15);
    uint64_t v30 = Rope._Node.descendToFirstItem(under:)(a4 + 8, v15);
    uint64_t result = v23(v18, v15);
    *(void *)(a4 + 16) = v30;
LABEL_5:
    char v31 = 1;
LABEL_7:
    *uint64_t v37 = v31;
    return result;
  }

  __break(1u);
  return result;
}

uint64_t Rope._Node.formPredecessor(of:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  int v6 = *(unsigned __int8 *)(*v2 + 18);
  unint64_t v7 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v12 = _RopePath.subscript.getter(v6, v7, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v23 = v12;
  if (v6)
  {
    uint64_t v14 = *(unsigned __int8 *)(*(void *)(a2 - 8) + 80LL);
    uint64_t v15 = v5 + ((v14 + 19) & ~v14);
    MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, a2);
    uint64_t v16 = (unsigned __int16 *)nullsub_1(v5 + 16, v15, v9, a2, v8);
    uint64_t v18 = v17;
    swift_unknownObjectRetain();
    sub_188D4FC8C(v16, v18, &v23, a1, v6, v9, v8, (char *)&v22);
    swift_unknownObjectRelease();
    return v22;
  }

  else
  {
    uint64_t v20 = v12 - 1;
    if (v12 < 1)
    {
      return 0LL;
    }

    else
    {
      uint64_t v21 = type metadata accessor for _RopePath(0LL, AssociatedTypeWitness, AssociatedConformanceWitness, v13);
      _RopePath.subscript.setter(v20, 0, v21);
      *(void *)(a1 + 16) = Rope._UnmanagedLeaf.init(_:)(v5);
      return 1LL;
    }
  }

uint64_t sub_188D4FC8C@<X0>( unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X8>)
{
  int v37 = a5;
  uint64_t v15 = type metadata accessor for Rope._Node(0LL, a6, a7, a4);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1895F8858](v15);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, v15);
  uint64_t result = Rope._UnsafeHandle.children.getter(a1, a2, a6, v15, a7, v19);
  uint64_t v21 = result;
  uint64_t v22 = *a3;
  if (*a3 < v23)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, result + *(void *)(v16 + 72) * v22, v15);
    char v24 = Rope._Node.formPredecessor(of:)(a4, v15);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    if ((v24 & 1) != 0) {
      goto LABEL_6;
    }
    uint64_t v22 = *a3;
  }

  uint64_t v25 = v22 - 1;
  if (v22 < 1)
  {
    char v33 = 0;
    goto LABEL_8;
  }

  *a3 = v25;
  uint64_t v36 = a8;
  uint64_t v26 = a4 + 8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v35 = a4;
  uint64_t v28 = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v31 = type metadata accessor for _RopePath(0LL, v28, AssociatedConformanceWitness, v30);
  _RopePath.subscript.setter(v25, v37, v31);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v21 + *(void *)(v16 + 72) * *a3, v15);
  uint64_t v32 = Rope._Node.descendToLastItem(under:)(v26, v15);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  *(void *)(v35 + 16) = v32;
  a8 = v36;
LABEL_6:
  char v33 = 1;
LABEL_8:
  *a8 = v33;
  return result;
}

uint64_t Rope._Node.subscript.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v32 = a3;
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v10 = *(unsigned __int8 *)(*v3 + 18);
  uint64_t v13 = *(void *)(v11 + 16);
  uint64_t v12 = *(void *)(v11 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v16 = _RopePath.subscript.getter(v10, a1, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t *, uint64_t))(v7 + 16))(v9, v4, a2);
  uint64_t v17 = *(unsigned __int16 *)(*(void *)v9 + 16LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, a2);
  if (v16 >= v17)
  {
    __break(1u);
  }

  else
  {
    uint64_t v20 = *v4;
    if (v10)
    {
      uint64_t v21 = v20 + ((*(unsigned __int8 *)(v7 + 80) + 19LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
      MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, a2);
      uint64_t v22 = (unsigned __int16 *)nullsub_1(v20 + 16, v21, v13, a2, v12);
      uint64_t v24 = v23;
      swift_unknownObjectRetain();
      sub_188D50444(v22, v24, v16, a1, v13, v12);
    }

    else
    {
      uint64_t v25 = type metadata accessor for Rope._Item(0LL, v13, v12, v19);
      uint64_t v26 = *(unsigned __int8 *)(*(void *)(v25 - 8) + 80LL);
      uint64_t v27 = v20 + ((v26 + 19) & ~v26);
      MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Item, v25);
      uint64_t v28 = (unsigned __int16 *)nullsub_1(v20 + 16, v27, v13, v25, v12);
      uint64_t v30 = v29;
      swift_unknownObjectRetain();
      sub_188D50540(v28, v30, v16, v13, v12, v32);
    }

    return swift_unknownObjectRelease();
  }

  return result;
}

uint64_t Rope._Node._prepareModifyLast()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(unsigned __int8 *)(*(void *)v2 + 18LL);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = _RopePath.init(height:)(v5);
  return Rope._Node._prepareModifyLast(_:)(&v7, a1, a2);
}

uint64_t Rope._Node.lastItem.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = type metadata accessor for Rope._Node._ModifyState(0LL, v7, v8, a4);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = (unint64_t *)((char *)&v18 - v11);
  Rope._Node._prepareModifyLast()(a2, (uint64_t *)((char *)&v18 - v11));
  uint64_t v13 = (char *)v12 + *(int *)(v9 + 36);
  uint64_t v15 = type metadata accessor for Rope._Item(0LL, v7, v8, v14);
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 24))(v13, a1, v15);
  sub_188D5089C(v4, v12, v7, v8);
  (*(void (**)(unint64_t *, uint64_t))(v10 + 8))(v12, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(a1, v15);
}

uint64_t (*Rope._Node.subscript.modify(void *a1, unint64_t a2, uint64_t a3))()
{
  uint64_t v7 = malloc(0x30uLL);
  *a1 = v7;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(a3 + 24);
  *uint64_t v7 = v3;
  v7[1] = v8;
  v7[2] = v9;
  uint64_t v11 = type metadata accessor for Rope._Node._ModifyState(0LL, v8, v9, v10);
  _OWORD v7[3] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  void v7[4] = v12;
  uint64_t v13 = malloc(*(void *)(v12 + 64));
  void v7[5] = v13;
  Rope._Node._prepareModify(at:)(a2, a3, v13);
  return sub_188D4D294;
}

void sub_188D502F0(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v2 = (unint64_t *)(*a1)[5];
  uint64_t v4 = (*a1)[3];
  sub_188D5089C(**a1, v2, (*a1)[1], (*a1)[2]);
  (*(void (**)(unint64_t *, uint64_t))(v3 + 8))(v2, v4);
  free(v2);
  free(v1);
}

uint64_t Rope._Node.firstItem.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = type metadata accessor for Rope._Node._ModifyState(0LL, v7, v8, a4);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = (unint64_t *)((char *)&v19 - v11);
  unint64_t started = Rope._Node._startPath.getter();
  Rope._Node._prepareModify(at:)(started, a2, v12);
  uint64_t v14 = (char *)v12 + *(int *)(v9 + 36);
  uint64_t v16 = type metadata accessor for Rope._Item(0LL, v7, v8, v15);
  uint64_t v17 = *(void *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 24))(v14, a1, v16);
  sub_188D5089C(v4, v12, v7, v8);
  (*(void (**)(unint64_t *, uint64_t))(v10 + 8))(v12, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(a1, v16);
}

uint64_t sub_188D50444(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for Rope._Node(0LL, a5, a6, a4);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v15 = (char *)&v19 - v14;
  uint64_t v16 = MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, v12);
  uint64_t v17 = Rope._UnsafeHandle.children.getter(a1, a2, a5, v12, a6, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v17 + *(void *)(v13 + 72) * a3, v12);
  Rope._Node.subscript.getter(a4, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t sub_188D50540@<X0>( unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = type metadata accessor for Rope._Item(0LL, a4, a5, a4);
  uint64_t v13 = MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Item, v12);
  uint64_t v14 = Rope._UnsafeHandle.children.getter(a1, a2, a4, v12, a5, v13);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL))( a6,  v14 + *(void *)(*(void *)(v12 - 8) + 72LL) * a3,  v12);
}

uint64_t Rope._Node._prepareModify(at:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int v38 = a3;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  int v37 = (char *)&v36 - v9;
  uint64_t v11 = type metadata accessor for Rope._Item(0LL, v7, v6, v10);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v11);
  uint64_t v36 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v16 = (char *)&v36 - v15;
  Rope._Node.ensureUnique()();
  int v17 = *(unsigned __int8 *)(*v3 + 18);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unint64_t v39 = a1;
  uint64_t result = _RopePath.subscript.getter(v17, a1, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v20 = *v3;
  uint64_t v21 = *v3;
  unsigned int v23 = *(unsigned __int16 *)(v21 + 16);
  uint64_t v22 = v21 + 16;
  if (result >= v23)
  {
    __break(1u);
  }

  else
  {
    uint64_t v24 = result;
    if (v17)
    {
      uint64_t v25 = *(unsigned __int8 *)(*(void *)(a2 - 8) + 80LL);
      uint64_t v26 = v20 + ((v25 + 19) & ~v25);
      MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, a2);
      uint64_t v27 = (unsigned __int16 *)nullsub_1(v22, v26, v7, a2, v6);
      uint64_t v29 = v28;
      swift_unknownObjectRetain();
      sub_188D50CA4(v27, v29, v24, v39, v7, v6);
      return swift_unknownObjectRelease();
    }

    else
    {
      uint64_t v30 = v20 + ((*(unsigned __int8 *)(v12 + 80) + 19LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
      MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Item, v11);
      uint64_t v31 = (unsigned __int16 *)nullsub_1(v22, v30, v7, v11, v6);
      uint64_t v33 = v32;
      swift_unknownObjectRetain();
      sub_188D510CC(v31, v33, v24, v7, v6, (uint64_t)v16);
      swift_unknownObjectRelease();
      uint64_t v34 = (uint64_t)v36;
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v36, v16, v11);
      uint64_t v35 = (uint64_t)v37;
      Rope._Item.summary.getter(v11);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
      return Rope._Node._ModifyState.init(path:item:summary:)(v39, v34, v35, v7, v6, v38);
    }
  }

  return result;
}

uint64_t sub_188D5089C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v14 - v9;
  uint64_t v12 = type metadata accessor for Rope._Node(0LL, a3, a4, v11);
  Rope._Node._finalizeModify(_:)((uint64_t)v10, a2, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
}

uint64_t Rope._Node.subscript.setter(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(a3 + 24);
  uint64_t v10 = type metadata accessor for Rope._Node._ModifyState(0LL, v8, v9, a4);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v13 = (unint64_t *)((char *)&v19 - v12);
  Rope._Node._prepareModify(at:)(a2, a3, (uint64_t *)((char *)&v19 - v12));
  uint64_t v14 = (char *)v13 + *(int *)(v10 + 36);
  uint64_t v16 = type metadata accessor for Rope._Item(0LL, v8, v9, v15);
  uint64_t v17 = *(void *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 24))(v14, a1, v16);
  sub_188D5089C(v4, v13, v8, v9);
  (*(void (**)(unint64_t *, uint64_t))(v11 + 8))(v13, v10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(a1, v16);
}

uint64_t Rope._Node._ModifyState.path.getter()
{
  return *(void *)v0;
}

uint64_t Rope._Node._ModifyState.path.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*Rope._Node._ModifyState.path.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t Rope._Node._ModifyState.item.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3 + *(int *)(a1 + 36);
  uint64_t v6 = type metadata accessor for Rope._Item(0LL, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a3, v5, v6);
}

uint64_t Rope._Node._ModifyState.item.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v4 + *(int *)(a2 + 36);
  uint64_t v7 = type metadata accessor for Rope._Item(0LL, *(void *)(a2 + 16), *(void *)(a2 + 24), a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40LL))(v6, a1, v7);
}

uint64_t (*Rope._Node._ModifyState.item.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t Rope._Node._ModifyState.summary.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16LL))( a2,  v4,  AssociatedTypeWitness);
}

uint64_t Rope._Node._ModifyState.summary.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40LL))( v4,  a1,  AssociatedTypeWitness);
}

uint64_t (*Rope._Node._ModifyState.summary.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t Rope._Node._ModifyState.init(path:item:summary:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  *a6 = a1;
  uint64_t v11 = type metadata accessor for Rope._Node._ModifyState(0LL, a4, a5, a4);
  uint64_t v12 = (char *)a6 + *(int *)(v11 + 36);
  uint64_t v14 = type metadata accessor for Rope._Item(0LL, a4, a5, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32LL))(v12, a2, v14);
  uint64_t v15 = (char *)a6 + *(int *)(v11 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32LL))( v15,  a3,  AssociatedTypeWitness);
}

uint64_t sub_188D50CA4(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for Rope._Node(0LL, a5, a6, a4);
  uint64_t v12 = MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, v11);
  Rope._UnsafeHandle.mutableChildren.getter(a1, a2, a5, v11, a6, v12);
  return Rope._Node._prepareModify(at:)(a4, v11);
}

uint64_t Rope._Node._prepareModifyLast(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  int v44 = a3;
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  size_t v41 = (char *)&v39 - v10;
  uint64_t v12 = type metadata accessor for Rope._Item(0LL, v8, v7, v11);
  uint64_t v39 = *(void *)(v12 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v12);
  int v40 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v16 = (char *)&v39 - v15;
  Rope._Node.ensureUnique()();
  uint64_t v17 = *v3;
  uint64_t v18 = *(unsigned __int16 *)(*v3 + 16) - 1LL;
  int v19 = *(unsigned __int8 *)(v17 + 18);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v22 = type metadata accessor for _RopePath(0LL, AssociatedTypeWitness, AssociatedConformanceWitness, v21);
  uint64_t v42 = v18;
  int v43 = a1;
  _RopePath.subscript.setter(v18, v19, v22);
  uint64_t v23 = *v4;
  uint64_t v24 = *v4 + 16;
  if (v19)
  {
    uint64_t v25 = *(unsigned __int8 *)(*(void *)(a2 - 8) + 80LL);
    uint64_t v26 = v23 + ((v25 + 19) & ~v25);
    MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, a2);
    uint64_t v27 = (unsigned __int16 *)nullsub_1(v24, v26, v8, a2, v7);
    uint64_t v29 = v28;
    swift_unknownObjectRetain();
    sub_188D51024(v27, v29, v42, (uint64_t)v43, v8, v7);
    return swift_unknownObjectRelease();
  }

  else
  {
    uint64_t v31 = v39;
    uint64_t v32 = v23 + ((*(unsigned __int8 *)(v39 + 80) + 19LL) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80));
    MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Item, v12);
    uint64_t v33 = (unsigned __int16 *)nullsub_1(v24, v32, v8, v12, v7);
    uint64_t v35 = v34;
    swift_unknownObjectRetain();
    sub_188D510CC(v33, v35, v42, v8, v7, (uint64_t)v16);
    swift_unknownObjectRelease();
    uint64_t v36 = *v43;
    uint64_t v37 = (uint64_t)v40;
    (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v40, v16, v12);
    uint64_t v38 = (uint64_t)v41;
    Rope._Item.summary.getter(v12);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v16, v12);
    return Rope._Node._ModifyState.init(path:item:summary:)(v36, v37, v38, v8, v7, v44);
  }

uint64_t sub_188D51024(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for Rope._Node(0LL, a5, a6, a4);
  uint64_t v12 = MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, v11);
  Rope._UnsafeHandle.mutableChildren.getter(a1, a2, a5, v11, a6, v12);
  return Rope._Node._prepareModifyLast(_:)(a4, v11);
}

uint64_t sub_188D510CC@<X0>( unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = type metadata accessor for Rope._Item(0LL, a4, a5, a4);
  uint64_t v13 = MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Item, v12);
  uint64_t v14 = Rope._UnsafeHandle.mutableChildren.getter(a1, a2, a4, v12, a5, v13);
  return sub_188D8EE74(a3, v14, v12, a6);
}

uint64_t Rope._Node._finalizeModify(_:)(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  int v50 = (char *)a1;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v48 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for Rope._UnmanagedLeaf(255LL, v6, v5, v8);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v10 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  int v44 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  uint64_t v14 = (char *)&v43 - v13;
  uint64_t v46 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v16 = (char *)&v43 - v15;
  int v49 = v3;
  uint64_t v17 = *v3;
  int v47 = a2;
  unint64_t v18 = *a2;
  LODWORD(a2) = *(unsigned __int8 *)(v17 + 18);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v45 = _RopePath.subscript.getter(a2, v18, AssociatedTypeWitness, AssociatedConformanceWitness);
  if ((_DWORD)a2)
  {
    uint64_t v43 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v21 = v48;
    uint64_t v22 = *v49 + 16LL;
    uint64_t v23 = *(unsigned __int8 *)(*(void *)(v48 - 8) + 80LL);
    uint64_t v24 = *v49 + ((v23 + 19) & ~v23);
    MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, v48);
    uint64_t v25 = (unsigned __int16 *)nullsub_1(v22, v24, v6, v21, v5);
    uint64_t v27 = v26;
    swift_unknownObjectRetain();
    sub_188D514DC(v25, v27, (uint64_t)v47, v6, v5, (uint64_t)v14);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))( v14,  AssociatedTypeWitness,  AssociatedConformanceWitness);
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v46 + 32);
    uint64_t v29 = v44;
    v28(v44, v14, AssociatedTypeWitness);
    uint64_t v30 = *(void *)&v14[v43];
    v28(v50, v29, AssociatedTypeWitness);
  }

  else
  {
    uint64_t v31 = type metadata accessor for Rope._Node._ModifyState(0LL, v6, v5, v20);
    uint64_t v32 = (uint64_t)v47;
    uint64_t v34 = type metadata accessor for Rope._Item(0LL, v6, v5, v33);
    Rope._Item.summary.getter(v34);
    RopeSummary.subtracting(_:)( v32 + *(int *)(v31 + 40),  AssociatedTypeWitness,  AssociatedConformanceWitness,  (uint64_t)v50);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v16, AssociatedTypeWitness);
    uint64_t v35 = v49;
    uint64_t v36 = *v49 + 16LL;
    uint64_t v37 = *(unsigned __int8 *)(*(void *)(v34 - 8) + 80LL);
    uint64_t v38 = *v49 + ((v37 + 19) & ~v37);
    MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Item, v34);
    uint64_t v39 = (unsigned __int16 *)nullsub_1(v36, v38, v6, v34, v5);
    uint64_t v41 = v40;
    swift_unknownObjectRetain();
    sub_188D515E4(v39, v41, v45, v32, v6, v5);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))( v50,  AssociatedTypeWitness,  AssociatedConformanceWitness);
    return Rope._UnmanagedLeaf.init(_:)(*v35);
  }

  return v30;
}

uint64_t sub_188D514DC@<X0>( unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v13 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  uint64_t v15 = type metadata accessor for Rope._Node(0LL, a4, a5, v14);
  uint64_t v16 = MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, v15);
  Rope._UnsafeHandle.mutableChildren.getter(a1, a2, a4, v15, a5, v16);
  uint64_t result = Rope._Node._finalizeModify(_:)(a6, a3, v15);
  *(void *)(a6 + v13) = result;
  return result;
}

uint64_t sub_188D515E4(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for Rope._Item(0LL, a5, a6, a4);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v15 = (char *)&v23 - v14;
  uint64_t v16 = MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Item, v12);
  uint64_t v17 = Rope._UnsafeHandle.mutableChildren.getter(a1, a2, a5, v12, a6, v16);
  uint64_t v19 = v18;
  uint64_t v21 = type metadata accessor for Rope._Node._ModifyState(0LL, a5, a6, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a4 + *(int *)(v21 + 36), v12);
  return sub_188DA6E38(a3, (uint64_t)v15, v17, v19, v12);
}

uint64_t sub_188D516E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v20 - v9;
  Rope._Node.ensureUnique()();
  uint64_t v12 = type metadata accessor for Rope._Item(0LL, v6, v5, v11);
  Rope._Item.summary.getter(v12);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))( v10,  AssociatedTypeWitness,  AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  uint64_t v14 = *v2 + 16LL;
  uint64_t v15 = *(unsigned __int8 *)(*(void *)(v12 - 8) + 80LL);
  uint64_t v16 = *v3 + ((v15 + 19) & ~v15);
  MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Item, v12);
  uint64_t v17 = (_WORD *)nullsub_1(v14, v16, v6, v12, v5);
  return sub_188D4E934( v17,  v18,  a1,  v6,  v5,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Item,  (uint64_t)&protocol conformance descriptor for Rope<A>._Item);
}

uint64_t type metadata accessor for Rope._Node(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Rope._Node);
}

uint64_t sub_188D51868(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  Rope._Node.ensureUnique()();
  uint64_t v6 = a1 + *(int *)(a2 + 36);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
  uint64_t v11 = swift_checkMetadataState();
  v10(v6, v11, AssociatedConformanceWitness);
  uint64_t v12 = *v2 + 16LL;
  uint64_t v13 = *(unsigned __int8 *)(*(void *)(a2 - 8) + 80LL);
  uint64_t v14 = *v3 + ((v13 + 19) & ~v13);
  MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, a2);
  uint64_t v15 = (_WORD *)nullsub_1(v12, v14, v8, a2, v7);
  return sub_188D4E934( v15,  v16,  a1,  v8,  v7,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Node,  (uint64_t)&protocol conformance descriptor for Rope<A>._Node);
}

uint64_t sub_188D51994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + *(int *)(a3 + 36);
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
  uint64_t v11 = swift_checkMetadataState();
  v10(v6, v11, AssociatedConformanceWitness);
  uint64_t v12 = *v3;
  uint64_t v13 = *(unsigned __int8 *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v14 = v12 + ((v13 + 19) & ~v13);
  MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Node, a3);
  uint64_t v15 = (_WORD *)nullsub_1(v12 + 16, v14, v8, a3, v7);
  uint64_t v17 = v16;
  swift_unknownObjectRetain();
  sub_188D4E8A8( v15,  v17,  a1,  a2,  v8,  v7,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Node,  (uint64_t)&protocol conformance descriptor for Rope<A>._Node);
  return swift_unknownObjectRelease();
}

uint64_t type metadata accessor for Rope._Node._ModifyState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Rope._Node._ModifyState);
}

uint64_t sub_188D51AF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = a2;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v21 - v9;
  Rope._Node.ensureUnique()();
  uint64_t v12 = type metadata accessor for Rope._Item(0LL, v6, v5, v11);
  Rope._Item.summary.getter(v12);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))( v10,  AssociatedTypeWitness,  AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  uint64_t v14 = *v3;
  uint64_t v15 = *(unsigned __int8 *)(*(void *)(v12 - 8) + 80LL);
  uint64_t v16 = v14 + ((v15 + 19) & ~v15);
  MEMORY[0x1895D7620](&protocol conformance descriptor for Rope<A>._Item, v12);
  uint64_t v17 = (_WORD *)nullsub_1(v14 + 16, v16, v6, v12, v5);
  uint64_t v19 = v18;
  swift_unknownObjectRetain();
  sub_188D4E8A8( v17,  v19,  a1,  v22,  v6,  v5,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Item,  (uint64_t)&protocol conformance descriptor for Rope<A>._Item);
  return swift_unknownObjectRelease();
}

uint64_t sub_188D51C98()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_188D51CB4()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *sub_188D51D40(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  unint64_t v7 = ((v6 + 8) & ~v6) + *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }

  else
  {
    uint64_t v12 = ~v6;
    uint64_t v13 = (char *)a1 + v6;
    uint64_t v14 = (char *)a2 + v6;
    uint64_t v15 = (unint64_t)(v13 + 8) & v12;
    uint64_t v16 = (unint64_t)(v14 + 8) & v12;
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_unknownObjectRetain();
    v17(v15, v16, AssociatedTypeWitness);
  }

  return a1;
}

uint64_t sub_188D51E1C(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8LL))( (a1 + *(unsigned __int8 *)(*(void *)(AssociatedTypeWitness - 8) + 80LL) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(AssociatedTypeWitness - 8) + 80LL),  AssociatedTypeWitness);
}

void *sub_188D51E7C(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  swift_unknownObjectRetain();
  v9(v7, v8, AssociatedTypeWitness);
  return a1;
}

void *sub_188D51F10(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 24))( ((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80),  ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80),  AssociatedTypeWitness);
  return a1;
}

void *sub_188D51F9C(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))( ((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80),  ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80),  AssociatedTypeWitness);
  return a1;
}

void *sub_188D5200C(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 40))( ((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80),  ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80),  AssociatedTypeWitness);
  return a1;
}

uint64_t sub_188D52090(void *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  if (a2 <= v6) {
    goto LABEL_24;
  }
  uint64_t v8 = ((v7 + 8) & ~v7) + *(void *)(v4 + 64);
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v12 = ((a2 - v6 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v12))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_24;
      }
      goto LABEL_15;
    }

    if (v12 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      goto LABEL_15;
    }

    if (v12 < 2)
    {
LABEL_24:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 8) & ~v7);
      }
      uint64_t v15 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }

  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((_BYTE *)a1 + v8)) {
    goto LABEL_24;
  }
LABEL_15:
  int v13 = (v10 - 1) << v9;
  if ((_DWORD)v8)
  {
    else {
      int v14 = 4;
    }
    __asm { BR              X12 }
  }

  return v6 + v13 + 1;
}

void sub_188D52218(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  size_t v8 = ((*(unsigned __int8 *)(v6 + 80) + 8LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)) + *(void *)(v6 + 64);
  if (a3 <= v7)
  {
    unsigned int v9 = 0u;
  }

  else if (v8 <= 3)
  {
    unsigned int v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      unsigned int v9 = 4u;
    }

    else if (v11 >= 0x100)
    {
      unsigned int v9 = 2;
    }

    else
    {
      unsigned int v9 = v11 > 1;
    }
  }

  else
  {
    unsigned int v9 = 1u;
  }

  if (v7 < a2)
  {
    int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }

        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }

        else
        {
          *a1 = v12;
        }
      }
    }

    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X13 }

uint64_t sub_188D52430()
{
  uint64_t AssociatedTypeWitness = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0LL;
    }
  }

  return AssociatedTypeWitness;
}

uint64_t *sub_188D524E8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = v9 + v12;
  if ((v12 | (unint64_t)v7) > 7
    || ((*(_DWORD *)(v11 + 80) | v7) & 0x100000) != 0
    || ((v13 + ((v7 + 8LL) & ~(unint64_t)v7)) & ~v12) + *(void *)(v11 + 64) > 0x18)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16
                   + (((v12 | v7) & 0xF8 ^ 0x1F8) & ((v12 | v7) + 16)));
    swift_retain();
  }

  else
  {
    uint64_t v17 = AssociatedTypeWitness;
    uint64_t v18 = ~v12;
    *a1 = *a2;
    uint64_t v19 = (char *)a2 + v8;
    uint64_t v20 = ((unint64_t)a1 + v8 + 8) & ~v8;
    uint64_t v21 = (unint64_t)(v19 + 8) & ~v8;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v20, v21, v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))((v20 + v13) & v18, (v21 + v13) & v18, v17);
  }

  return a1;
}

uint64_t sub_188D52620(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8LL);
  unint64_t v3 = (a1 + *(unsigned __int8 *)(v2 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  (*(void (**)(unint64_t, void))(v2 + 8))(v3, *(void *)(a2 + 16));
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8LL))( (v3 + v4 + *(unsigned __int8 *)(*(void *)(AssociatedTypeWitness - 8) + 80LL)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(AssociatedTypeWitness - 8) + 80LL),  AssociatedTypeWitness);
}

void *sub_188D526AC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = ((unint64_t)a1 + v5 + 8) & ~v5;
  uint64_t v7 = ((unint64_t)a2 + v5 + 8) & ~v5;
  (*(void (**)(uint64_t, uint64_t, void))(v4 + 16))(v6, v7, *(void *)(a3 + 16));
  uint64_t v8 = *(void *)(v4 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))( (v8 + *(unsigned __int8 *)(v10 + 80) + v6) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80),  (v8 + *(unsigned __int8 *)(v10 + 80) + v7) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80),  AssociatedTypeWitness);
  return a1;
}

void *sub_188D52768(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = ((unint64_t)a1 + v5 + 8) & ~v5;
  uint64_t v7 = ((unint64_t)a2 + v5 + 8) & ~v5;
  (*(void (**)(uint64_t, uint64_t, void))(v4 + 24))(v6, v7, *(void *)(a3 + 16));
  uint64_t v8 = *(void *)(v4 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 24))( (v8 + *(unsigned __int8 *)(v10 + 80) + v6) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80),  (v8 + *(unsigned __int8 *)(v10 + 80) + v7) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80),  AssociatedTypeWitness);
  return a1;
}

void *sub_188D52824(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = ((unint64_t)a1 + v5 + 8) & ~v5;
  uint64_t v7 = ((unint64_t)a2 + v5 + 8) & ~v5;
  (*(void (**)(uint64_t, uint64_t, void))(v4 + 32))(v6, v7, *(void *)(a3 + 16));
  uint64_t v8 = *(void *)(v4 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 32))( (v8 + *(unsigned __int8 *)(v10 + 80) + v6) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80),  (v8 + *(unsigned __int8 *)(v10 + 80) + v7) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80),  AssociatedTypeWitness);
  return a1;
}

void *sub_188D528E0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = ((unint64_t)a1 + v5 + 8) & ~v5;
  uint64_t v7 = ((unint64_t)a2 + v5 + 8) & ~v5;
  (*(void (**)(uint64_t, uint64_t, void))(v4 + 40))(v6, v7, *(void *)(a3 + 16));
  uint64_t v8 = *(void *)(v4 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 40))( (v8 + *(unsigned __int8 *)(v10 + 80) + v6) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80),  (v8 + *(unsigned __int8 *)(v10 + 80) + v7) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80),  AssociatedTypeWitness);
  return a1;
}

uint64_t sub_188D5299C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  else {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v12 = AssociatedTypeWitness;
  uint64_t v13 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v14 = *(void *)(v6 + 64);
  uint64_t v15 = *(unsigned __int8 *)(v9 + 80);
  if (a2 <= v11) {
    goto LABEL_23;
  }
  uint64_t v16 = ((v14 + v15 + ((v13 + 8) & ~v13)) & ~v15) + *(void *)(v9 + 64);
  char v17 = 8 * v16;
  if (v16 <= 3)
  {
    unsigned int v19 = ((a2 - v11 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v19))
    {
      int v18 = *(_DWORD *)(a1 + v16);
      if (!v18) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v19 > 0xFF)
    {
      int v18 = *(unsigned __int16 *)(a1 + v16);
      if (!*(_WORD *)(a1 + v16)) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v19 < 2)
    {
LABEL_23:
      if (v11)
      {
        uint64_t v22 = (a1 + v13 + 8) & ~v13;
        else {
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))((v22 + v14 + v15) & ~v15, v10, v12);
        }
      }

      return 0LL;
    }
  }

  int v18 = *(unsigned __int8 *)(a1 + v16);
  if (!*(_BYTE *)(a1 + v16)) {
    goto LABEL_23;
  }
LABEL_14:
  int v20 = (v18 - 1) << v17;
  if ((_DWORD)v16)
  {
    else {
      int v21 = 4;
    }
    __asm { BR              X12 }
  }

  return v11 + v20 + 1;
}

void sub_188D52B68(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v9 + 84) <= v8) {
    unsigned int v10 = v8;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v9 + 84);
  }
  size_t v11 = ((*(void *)(v7 + 64)
        + *(unsigned __int8 *)(v9 + 80)
  if (a3 <= v10)
  {
    unsigned int v12 = 0u;
  }

  else if (v11 <= 3)
  {
    unsigned int v14 = ((a3 - v10 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      unsigned int v12 = 4u;
    }

    else if (v14 >= 0x100)
    {
      unsigned int v12 = 2;
    }

    else
    {
      unsigned int v12 = v14 > 1;
    }
  }

  else
  {
    unsigned int v12 = 1u;
  }

  if (v10 < a2)
  {
    unsigned int v13 = ~v10 + a2;
    if (v11 < 4)
    {
      if ((_DWORD)v11)
      {
        int v15 = v13 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if ((_DWORD)v11 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }

        else if ((_DWORD)v11 == 2)
        {
          *(_WORD *)a1 = v15;
        }

        else
        {
          *a1 = v15;
        }
      }
    }

    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v13;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X15 }

void sub_188D52E1C()
{
  *(_WORD *)uint64_t v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x188D52E04LL);
}

void sub_188D52E2C()
{
  _WORD *v0 = v1;
  JUMPOUT(0x188D52E04LL);
}

void sub_188D52E34()
{
  _DWORD *v0 = v1;
  JUMPOUT(0x188D52E04LL);
}

uint64_t sub_188D52E40(uint64_t a1, uint64_t a2)
{
  return sub_188D4E180(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_188D52E58(uint64_t a1, uint64_t a2)
{
  return sub_188D4DCE4(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t static _HashTable.maximumUnhashedCount.getter()
{
  return 15LL;
}

uint64_t static _HashTable.minimumScale.getter()
{
  return 5LL;
}

uint64_t static _HashTable.maximumScale.getter()
{
  return 56LL;
}

uint64_t static _HashTable.minimumCapacity(forScale:)(uint64_t result)
{
  if (result < 5) {
    return 0LL;
  }
  double v1 = (double)(1LL << result) * 0.25;
  if ((~*(void *)&v1 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }

  if (v1 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  if (v1 < 9.22337204e18) {
    return (uint64_t)v1;
  }
LABEL_9:
  __break(1u);
  return result;
}

int64_t sub_188D52F00(int64_t result)
{
  if (result < 16) {
    return 0LL;
  }
  double v1 = ceil((double)result / 0.75);
  if ((~*(void *)&v1 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }

  if (v1 <= -9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if (v1 >= 9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v2 = result + 1;
  if (__OFADD__(result, 1LL))
  {
LABEL_13:
    __break(1u);
    return result;
  }

  return 64 - __clz(v2 - 1);
}

uint64_t _s19CollectionsInternal10_HashTableV15maximumCapacity8forScaleS2i_tFZ_0(uint64_t result)
{
  if (result < 5) {
    return 15LL;
  }
  double v1 = (double)(1LL << result) * 0.75;
  if ((~*(void *)&v1 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }

  if (v1 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  if (v1 < 9.22337204e18) {
    return (uint64_t)v1;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t static _HashStack.capacity.getter()
{
  return 13LL;
}

uint64_t _HashStack._contents.getter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v75 = a8;
  uint64_t v73 = a7;
  uint64_t v72 = a6;
  uint64_t v71 = a5;
  uint64_t v70 = a4;
  uint64_t v69 = a3;
  uint64_t v68 = a2;
  uint64_t v67 = a1;
  uint64_t v77 = a11;
  uint64_t v78 = a12;
  uint64_t v76 = a10;
  uint64_t v74 = a9;
  uint64_t v79 = a13;
  uint64_t v15 = *(void *)(a14 + 16);
  uint64_t v83 = v15;
  uint64_t v84 = v15;
  uint64_t v85 = v15;
  uint64_t v86 = v15;
  uint64_t v87 = v15;
  uint64_t v88 = v15;
  uint64_t v89 = v15;
  uint64_t v90 = v15;
  uint64_t v91 = v15;
  uint64_t v92 = v15;
  uint64_t v93 = v15;
  uint64_t v94 = v15;
  uint64_t v95 = v15;
  uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  char v17 = (int *)MEMORY[0x1895F8858](TupleTypeMetadata);
  unsigned int v19 = (char *)&v47 - v18;
  uint64_t v20 = v17[12];
  int v21 = &v19[v20];
  uint64_t v61 = &v19[v20];
  uint64_t v22 = v17[16];
  uint64_t v23 = &v19[v22];
  uint64_t v62 = &v19[v22];
  uint64_t v24 = v17[20];
  uint64_t v25 = &v19[v24];
  uint64_t v63 = &v19[v24];
  uint64_t v26 = v17[24];
  uint64_t v27 = &v19[v26];
  uint64_t v28 = v17[28];
  uint64_t v80 = &v19[v28];
  uint64_t v29 = v17[32];
  uint64_t v81 = &v19[v29];
  uint64_t v30 = v17[36];
  uint64_t v82 = &v19[v30];
  uint64_t v31 = v17[40];
  uint64_t v56 = &v19[v31];
  uint64_t v32 = v17[44];
  uint64_t v58 = &v19[v32];
  uint64_t v33 = v17[48];
  int64_t v64 = &v19[v33];
  uint64_t v34 = v17[52];
  uint64_t v65 = &v19[v34];
  uint64_t v35 = v17[56];
  uint64_t v66 = &v19[v35];
  uint64_t v36 = v14 + v20;
  uint64_t v37 = v14 + v22;
  uint64_t v48 = v14 + v24;
  uint64_t v49 = v14 + v26;
  uint64_t v50 = v14 + v28;
  uint64_t v51 = v14 + v29;
  uint64_t v52 = v14 + v30;
  uint64_t v53 = v14 + v31;
  uint64_t v54 = v14 + v32;
  uint64_t v55 = v14 + v33;
  uint64_t v57 = v14 + v34;
  uint64_t v59 = v14 + v35;
  uint64_t v60 = *(void *)(v15 - 8);
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 16);
  v38(v19, v14, v15);
  v38(v21, v36, v15);
  v38(v23, v37, v15);
  v38(v25, v48, v15);
  uint64_t v39 = v27;
  v38(v27, v49, v15);
  v38(v80, v50, v15);
  v38(v81, v51, v15);
  v38(v82, v52, v15);
  uint64_t v40 = v56;
  v38(v56, v53, v15);
  uint64_t v41 = v58;
  v38(v58, v54, v15);
  uint64_t v42 = v64;
  v38(v64, v55, v15);
  uint64_t v43 = v65;
  v38(v65, v57, v15);
  int v44 = v66;
  v38(v66, v59, v15);
  uint64_t v45 = *(void (**)(uint64_t, char *, uint64_t))(v60 + 32);
  v45(v67, v19, v15);
  v45(v68, v61, v15);
  v45(v69, v62, v15);
  v45(v70, v63, v15);
  v45(v71, v39, v15);
  v45(v72, v80, v15);
  v45(v73, v81, v15);
  v45(v75, v82, v15);
  v45(v74, v40, v15);
  v45(v76, v41, v15);
  v45(v77, v42, v15);
  v45(v78, v43, v15);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v45)(v79, v44, v15);
}

uint64_t _HashStack._contents.setter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, char *a7, char *a8, char *a9, char *a10, char *a11, char *a12, char *a13, uint64_t a14)
{
  uint64_t v53 = a8;
  uint64_t v49 = a7;
  uint64_t v48 = a6;
  uint64_t v47 = a5;
  uint64_t v41 = a4;
  uint64_t v40 = a3;
  uint64_t v39 = a2;
  uint64_t v38 = a1;
  uint64_t v57 = a12;
  uint64_t v55 = a11;
  uint64_t v54 = a10;
  uint64_t v52 = a9;
  uint64_t v60 = a13;
  uint64_t v14 = *(void *)(a14 + 16);
  uint64_t v65 = v14;
  uint64_t v66 = v14;
  uint64_t v67 = v14;
  uint64_t v68 = v14;
  uint64_t v69 = v14;
  uint64_t v70 = v14;
  uint64_t v71 = v14;
  uint64_t v72 = v14;
  uint64_t v73 = v14;
  uint64_t v74 = v14;
  uint64_t v75 = v14;
  uint64_t v76 = v14;
  uint64_t v77 = v14;
  uint64_t TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  uint64_t v16 = MEMORY[0x1895F8858](TupleTypeMetadata);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unsigned int v19 = (int *)MEMORY[0x1895F8858](v16);
  int v21 = (char *)&v37 - v20;
  uint64_t v42 = (char *)&v37 + v19[12] - v20;
  uint64_t v22 = v42;
  uint64_t v43 = (char *)&v37 + v19[16] - v20;
  uint64_t v23 = v43;
  int v44 = (char *)&v37 + v19[20] - v20;
  uint64_t v24 = v44;
  uint64_t v45 = (char *)&v37 + v19[24] - v20;
  uint64_t v25 = v45;
  uint64_t v46 = (char *)&v37 + v19[28] - v20;
  uint64_t v26 = v46;
  uint64_t v56 = (char *)&v37 + v19[32] - v20;
  uint64_t v58 = (char *)&v37 + v19[36] - v20;
  uint64_t v59 = (char *)&v37 + v19[40] - v20;
  uint64_t v61 = (char *)&v37 + v19[44] - v20;
  uint64_t v62 = (char *)&v37 + v19[48] - v20;
  uint64_t v63 = (char *)&v37 + v19[52] - v20;
  int64_t v64 = (char *)&v37 + v19[56] - v20;
  uint64_t v51 = *(void *)(v14 - 8);
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v51 + 32);
  v27((char *)&v37 - v20, v38, v14);
  v27(v22, v39, v14);
  v27(v23, v40, v14);
  v27(v24, v41, v14);
  v27(v25, v47, v14);
  v27(v26, (uint64_t)v48, v14);
  v27(v56, (uint64_t)v49, v14);
  v27(v58, (uint64_t)v53, v14);
  v27(v59, (uint64_t)v52, v14);
  v27(v61, (uint64_t)v54, v14);
  v27(v62, (uint64_t)v55, v14);
  v27(v63, (uint64_t)v57, v14);
  v27(v64, (uint64_t)v60, v14);
  uint64_t v49 = &v18[TupleTypeMetadata[12]];
  uint64_t v28 = v49;
  uint64_t v29 = &v18[TupleTypeMetadata[16]];
  uint64_t v30 = &v18[TupleTypeMetadata[20]];
  uint64_t v31 = &v18[TupleTypeMetadata[24]];
  uint64_t v32 = &v18[TupleTypeMetadata[28]];
  uint64_t v52 = &v18[TupleTypeMetadata[32]];
  uint64_t v53 = &v18[TupleTypeMetadata[36]];
  uint64_t v54 = &v18[TupleTypeMetadata[40]];
  uint64_t v55 = &v18[TupleTypeMetadata[44]];
  uint64_t v57 = &v18[TupleTypeMetadata[48]];
  uint64_t v60 = &v18[TupleTypeMetadata[52]];
  uint64_t v48 = &v18[TupleTypeMetadata[56]];
  v27(v18, (uint64_t)v21, v14);
  v27(v28, (uint64_t)v42, v14);
  v27(v29, (uint64_t)v43, v14);
  v27(v30, (uint64_t)v44, v14);
  v27(v31, (uint64_t)v45, v14);
  v27(v32, (uint64_t)v46, v14);
  v27(v52, (uint64_t)v56, v14);
  v27(v53, (uint64_t)v58, v14);
  v27(v54, (uint64_t)v59, v14);
  v27(v55, (uint64_t)v61, v14);
  v27(v57, (uint64_t)v62, v14);
  v27(v60, (uint64_t)v63, v14);
  uint64_t v33 = v48;
  v27(v48, (uint64_t)v64, v14);
  uint64_t v34 = *(void (**)(uint64_t, char *, uint64_t))(v51 + 40);
  uint64_t v35 = v50;
  v34(v50, v18, v14);
  v34(v35 + TupleTypeMetadata[12], v49, v14);
  v34(v35 + TupleTypeMetadata[16], v29, v14);
  v34(v35 + TupleTypeMetadata[20], v30, v14);
  v34(v35 + TupleTypeMetadata[24], v31, v14);
  v34(v35 + TupleTypeMetadata[28], v32, v14);
  v34(v35 + TupleTypeMetadata[32], v52, v14);
  v34(v35 + TupleTypeMetadata[36], v53, v14);
  v34(v35 + TupleTypeMetadata[40], v54, v14);
  v34(v35 + TupleTypeMetadata[44], v55, v14);
  v34(v35 + TupleTypeMetadata[48], v57, v14);
  v34(v35 + TupleTypeMetadata[52], v60, v14);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v34)(v35 + TupleTypeMetadata[56], v33, v14);
}

uint64_t (*_HashStack._contents.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t _HashStack._count.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 28));
}

uint64_t _HashStack._count.setter(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(v2 + *(int *)(a2 + 28)) = result;
  return result;
}

uint64_t (*_HashStack._count.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t _HashStack.init(filledWith:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a3, a1, a2);
  uint64_t TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v7(a3 + TupleTypeMetadata[12], a1, a2);
  v7(a3 + TupleTypeMetadata[16], a1, a2);
  v7(a3 + TupleTypeMetadata[20], a1, a2);
  v7(a3 + TupleTypeMetadata[24], a1, a2);
  v7(a3 + TupleTypeMetadata[28], a1, a2);
  v7(a3 + TupleTypeMetadata[32], a1, a2);
  v7(a3 + TupleTypeMetadata[36], a1, a2);
  v7(a3 + TupleTypeMetadata[40], a1, a2);
  v7(a3 + TupleTypeMetadata[44], a1, a2);
  v7(a3 + TupleTypeMetadata[48], a1, a2);
  v7(a3 + TupleTypeMetadata[52], a1, a2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a3 + TupleTypeMetadata[56], a1, a2);
  uint64_t result = type metadata accessor for _HashStack(0LL, a2, v9, v10);
  *(_BYTE *)(a3 + *(int *)(result + 28)) = 0;
  return result;
}

uint64_t type metadata accessor for _HashStack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _HashStack);
}

uint64_t _HashStack.capacity.getter()
{
  return 13LL;
}

uint64_t _HashStack.count.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 28));
}

BOOL _HashStack.isEmpty.getter(uint64_t a1)
{
  return *(_BYTE *)(v1 + *(int *)(a1 + 28)) == 0;
}

uint64_t _HashStack.subscript.getter(char a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(a2 + 16);
  char v8 = a1;
  uint64_t v9 = v7;
  uint64_t v10 = v7;
  uint64_t v11 = v7;
  uint64_t v12 = v7;
  uint64_t v13 = v7;
  uint64_t v14 = v7;
  uint64_t v15 = v7;
  uint64_t v16 = v7;
  uint64_t v17 = v7;
  uint64_t v18 = v7;
  uint64_t v19 = v7;
  uint64_t v20 = v7;
  uint64_t v21 = v7;
  uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  return sub_188D53D54( v2,  (uint64_t)sub_188D53CD0,  (uint64_t)&v6,  TupleTypeMetadata,  MEMORY[0x18961A520],  v7,  MEMORY[0x18961A528],  v4);
}

uint64_t sub_188D53CD0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v2 + 16) - 8LL) + 16LL))( a2,  result + *(void *)(*(void *)(*(void *)(v2 + 16) - 8LL) + 72LL) * *(unsigned __int8 *)(v2 + 24));
  }
  __break(1u);
  return result;
}

uint64_t _HashStack.subscript.setter(uint64_t a1, char a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a3 + 16) - 8LL) + 8LL))(a1);
}

uint64_t sub_188D53D54( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = MEMORY[0x1895F8858](a1);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = v16(v12, v12 + *(void *)(*(void *)(v15 - 8) + 64LL), v14);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  }
  return result;
}

void (*_HashStack.subscript.modify(void *a1, char a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  *uint64_t v7 = a3;
  v7[1] = v3;
  *((_BYTE *)v7 + 48) = a2;
  uint64_t v8 = *(void *)(a3 + 16);
  v7[2] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  _OWORD v7[3] = v9;
  size_t v10 = *(void *)(v9 + 64);
  void v7[4] = malloc(v10);
  void v7[5] = malloc(v10);
  _HashStack.subscript.getter(a2, a3);
  return sub_188D53E84;
}

void sub_188D53E84(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[4];
  uint64_t v4 = (void *)(*a1)[5];
  uint64_t v5 = (*a1)[2];
  uint64_t v6 = (*a1)[3];
  uint64_t v7 = **a1;
  char v8 = *((_BYTE *)*a1 + 48);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    sub_188D53FD4((uint64_t)v3, v8, v7);
    uint64_t v9 = *(void (**)(void *, uint64_t))(v6 + 8);
    v9(v3, v5);
  }

  else
  {
    sub_188D53FD4((*a1)[5], v8, v7);
    uint64_t v9 = *(void (**)(void *, uint64_t))(v6 + 8);
  }

  v9(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t _HashStack.push(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int *)(a2 + 28);
  char v4 = *(_BYTE *)(v2 + v3);
  uint64_t result = sub_188D53FD4(a1, v4, a2);
  *(_BYTE *)(v2 + v3) = v4 + 1;
  return result;
}

uint64_t _HashStack.pop()(uint64_t a1)
{
  uint64_t result = type metadata accessor for _HashStack(0LL, *(void *)(a1 + 16), v3, v4);
  --*(_BYTE *)(v1 + *(int *)(result + 28));
  return result;
}

uint64_t _HashStack.peek()(uint64_t a1)
{
  return _HashStack.subscript.getter(*(_BYTE *)(v1 + *(int *)(a1 + 28)) - 1, a1);
}

uint64_t sub_188D53FD4(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v8 = *(void *)(a3 + 16);
  char v9 = a2;
  uint64_t v10 = a1;
  uint64_t v11 = v8;
  uint64_t v12 = v8;
  uint64_t v13 = v8;
  uint64_t v14 = v8;
  uint64_t v15 = v8;
  uint64_t v16 = v8;
  uint64_t v17 = v8;
  uint64_t v18 = v8;
  uint64_t v19 = v8;
  uint64_t v20 = v8;
  uint64_t v21 = v8;
  uint64_t v22 = v8;
  uint64_t v23 = v8;
  uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  return sub_188D53D54( v3,  (uint64_t)sub_188D551BC,  (uint64_t)&v7,  TupleTypeMetadata,  MEMORY[0x18961A520],  MEMORY[0x18961AFC8] + 8LL,  MEMORY[0x18961A528],  v5);
}

uint64_t sub_188D54070()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout();
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

void *sub_188D54128(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = ~v7;
  BOOL v9 = v7 <= 7 && (*(_DWORD *)(v6 + 80) & 0x100000) == 0;
  if (v9
    && (uint64_t v10 = *(void *)(v6 + 64),
        uint64_t v11 = v10 + v7,
        uint64_t v12 = ((v10
              + v7
              + ((v10
                + v7
                + ((v10
                  + v7
                  + ((v10
                    + v7
                    + ((v10
                      + v7
                      + ((v10
                        + v7
                        + ((v10
                          + v7
                          + ((v10
                            + v7
                            + ((v10 + v7 + ((v10 + v7 + ((v10 + v7 + ((v10 + v7) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & ~v7)
            + v10,
        (unint64_t)(v12 + 1) <= 0x18))
  {
    uint64_t v13 = *(void (**)(void *, void *, uint64_t))(v6 + 16);
    v13(a1, a2, *(void *)(a3 + 16));
    v13((void *)(((unint64_t)v4 + v11) & v8), (void *)(((unint64_t)a2 + v11) & v8), v5);
    unint64_t v14 = (v11 + (((unint64_t)a2 + v11) & v8)) & v8;
    v13((void *)((v11 + (((unint64_t)v4 + v11) & v8)) & v8), (void *)v14, v5);
    unint64_t v15 = (v11 + v14) & v8;
    v13((void *)((v11 + ((v11 + (((unint64_t)v4 + v11) & v8)) & v8)) & v8), (void *)v15, v5);
    unint64_t v16 = (v11 + v15) & v8;
    v13((void *)((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v8)) & v8)) & v8)) & v8), (void *)v16, v5);
    uint64_t v17 = (v11 + v16) & v8;
    v13( (void *)((v11 + ((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v8)) & v8)) & v8)) & v8)) & v8),  (void *)v17,  v5);
    uint64_t v18 = (v11 + v17) & v8;
    v13( (void *)((v11 + ((v11 + ((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v8)) & v8)) & v8)) & v8)) & v8)) & v8),  (void *)v18,  v5);
    uint64_t v19 = (v11 + v18) & v8;
    v13( (void *)((v11 + ((v11 + ((v11 + ((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v8)) & v8)) & v8)) & v8)) & v8)) & v8)) & v8),  (void *)v19,  v5);
    uint64_t v20 = (v11 + v19) & v8;
    v13( (void *)((v11 + ((v11 + ((v11 + ((v11 + ((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v8)) & v8)) & v8)) & v8)) & v8)) & v8)) & v8)) & v8),  (void *)v20,  v5);
    uint64_t v21 = (v11 + v20) & v8;
    v13( (void *)((v11 + ((v11 + ((v11 + ((v11 + ((v11 + ((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v8)) & v8)) & v8)) & v8)) & v8)) & v8)) & v8)) & v8)) & v8),  (void *)v21,  v5);
    uint64_t v22 = (v11 + v21) & v8;
    v13( (void *)((v11 + ((v11 + ((v11 + ((v11 + ((v11 + ((v11 + ((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v8)) & v8)) & v8)) & v8)) & v8)) & v8)) & v8)) & v8)) & v8)) & v8),  (void *)v22,  v5);
    uint64_t v23 = (v11 + v22) & v8;
    v13( (void *)((v11 + ((v11 + ((v11 + ((v11 + ((v11 + ((v11 + ((v11 + ((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v8)) & v8)) & v8)) & v8)) & v8)) & v8)) & v8)) & v8)) & v8)) & v8)) & v8),  (void *)v23,  v5);
    v13( (void *)((v11 + ((v11 + ((v11 + ((v11 + ((v11 + ((v11 + ((v11 + ((v11 + ((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v8)) & v8)) & v8)) & v8)) & v8)) & v8)) & v8)) & v8)) & v8)) & v8)) & v8)) & v8),  (void *)((v11 + v23) & v8),  v5);
    *((_BYTE *)v4 + v12) = *((_BYTE *)a2 + v12);
  }

  else
  {
    uint64_t v24 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v24 + ((v7 + 16) & v8));
    swift_retain();
  }

  return v4;
}

uint64_t sub_188D543B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v20(a1, v3);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = v5 + v6;
  uint64_t v8 = (v5 + v6 + a1) & ~v6;
  v20(v8, v3);
  uint64_t v9 = (v7 + v8) & ~v6;
  v20(v9, v3);
  uint64_t v10 = (v7 + v9) & ~v6;
  v20(v10, v3);
  uint64_t v11 = (v7 + v10) & ~v6;
  v20(v11, v3);
  uint64_t v12 = (v7 + v11) & ~v6;
  v20(v12, v3);
  uint64_t v13 = (v7 + v12) & ~v6;
  v20(v13, v3);
  uint64_t v14 = (v7 + v13) & ~v6;
  v20(v14, v3);
  uint64_t v15 = (v7 + v14) & ~v6;
  v20(v15, v3);
  uint64_t v16 = (v7 + v15) & ~v6;
  v20(v16, v3);
  uint64_t v17 = (v7 + v16) & ~v6;
  v20(v17, v3);
  uint64_t v18 = (v7 + v17) & ~v6;
  v20(v18, v3);
  return ((uint64_t (*)(uint64_t, uint64_t))v20)((v7 + v18) & ~v6, v3);
}

uint64_t sub_188D54524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = v8 + v9;
  v7((v8 + v9 + a1) & ~v9, (v8 + v9 + a2) & ~v9, v5);
  uint64_t v11 = (v8 + v9 + ((v8 + v9 + a2) & ~v9)) & ~v9;
  v7((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9, v11, v5);
  uint64_t v12 = (v8 + v9 + v11) & ~v9;
  v7((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9, v12, v5);
  uint64_t v13 = (v8 + v9 + v12) & ~v9;
  v7((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9, v13, v5);
  uint64_t v14 = (v8 + v9 + v13) & ~v9;
  v7((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, v14, v5);
  uint64_t v15 = (v8 + v9 + v14) & ~v9;
  v7((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, v15, v5);
  uint64_t v16 = (v8 + v9 + v15) & ~v9;
  v7( (v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9,  v16,  v5);
  uint64_t v17 = (v8 + v9 + v16) & ~v9;
  v7( (v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9,  v17,  v5);
  uint64_t v18 = (v8 + v9 + v17) & ~v9;
  v7( (v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9,  v18,  v5);
  uint64_t v19 = (v8 + v9 + v18) & ~v9;
  v7( (v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9,  v19,  v5);
  uint64_t v20 = (v8 + v9 + v19) & ~v9;
  v7( (v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9,  v20,  v5);
  v7( (v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9,  (v10 + v20) & ~v9,  v5);
  uint64_t v21 = ((v10
        + ((v10
          + ((v10
            + ((v10
              + ((v10
                + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + (v10 & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)
      + v8;
  *(_BYTE *)(v21 + a_HashNode.ensureUnique(isUnique:)(v1 & 1) = *(_BYTE *)(v21 + a2);
  return a1;
}

uint64_t sub_188D54768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = v8 + v9;
  v7((v8 + v9 + a1) & ~v9, (v8 + v9 + a2) & ~v9, v5);
  uint64_t v11 = (v8 + v9 + ((v8 + v9 + a2) & ~v9)) & ~v9;
  v7((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9, v11, v5);
  uint64_t v12 = (v8 + v9 + v11) & ~v9;
  v7((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9, v12, v5);
  uint64_t v13 = (v8 + v9 + v12) & ~v9;
  v7((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9, v13, v5);
  uint64_t v14 = (v8 + v9 + v13) & ~v9;
  v7((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, v14, v5);
  uint64_t v15 = (v8 + v9 + v14) & ~v9;
  v7((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, v15, v5);
  uint64_t v16 = (v8 + v9 + v15) & ~v9;
  v7( (v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9,  v16,  v5);
  uint64_t v17 = (v8 + v9 + v16) & ~v9;
  v7( (v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9,  v17,  v5);
  uint64_t v18 = (v8 + v9 + v17) & ~v9;
  v7( (v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9,  v18,  v5);
  uint64_t v19 = (v8 + v9 + v18) & ~v9;
  v7( (v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9,  v19,  v5);
  uint64_t v20 = (v8 + v9 + v19) & ~v9;
  v7( (v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9,  v20,  v5);
  v7( (v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9,  (v10 + v20) & ~v9,  v5);
  uint64_t v21 = ((v10
        + ((v10
          + ((v10
            + ((v10
              + ((v10
                + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + (v10 & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)
      + v8;
  *(_BYTE *)(v21 + a_HashNode.ensureUnique(isUnique:)(v1 & 1) = *(_BYTE *)(v21 + a2);
  return a1;
}

uint64_t sub_188D549AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = v8 + v9;
  v7((v8 + v9 + a1) & ~v9, (v8 + v9 + a2) & ~v9, v5);
  uint64_t v11 = (v8 + v9 + ((v8 + v9 + a2) & ~v9)) & ~v9;
  v7((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9, v11, v5);
  uint64_t v12 = (v8 + v9 + v11) & ~v9;
  v7((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9, v12, v5);
  uint64_t v13 = (v8 + v9 + v12) & ~v9;
  v7((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9, v13, v5);
  uint64_t v14 = (v8 + v9 + v13) & ~v9;
  v7((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, v14, v5);
  uint64_t v15 = (v8 + v9 + v14) & ~v9;
  v7((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, v15, v5);
  uint64_t v16 = (v8 + v9 + v15) & ~v9;
  v7( (v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9,  v16,  v5);
  uint64_t v17 = (v8 + v9 + v16) & ~v9;
  v7( (v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9,  v17,  v5);
  uint64_t v18 = (v8 + v9 + v17) & ~v9;
  v7( (v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9,  v18,  v5);
  uint64_t v19 = (v8 + v9 + v18) & ~v9;
  v7( (v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9,  v19,  v5);
  uint64_t v20 = (v8 + v9 + v19) & ~v9;
  v7( (v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9,  v20,  v5);
  v7( (v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9,  (v10 + v20) & ~v9,  v5);
  uint64_t v21 = ((v10
        + ((v10
          + ((v10
            + ((v10
              + ((v10
                + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + (v10 & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)
      + v8;
  *(_BYTE *)(v21 + a_HashNode.ensureUnique(isUnique:)(v1 & 1) = *(_BYTE *)(v21 + a2);
  return a1;
}

uint64_t sub_188D54BF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = v8 + v9;
  v7((v8 + v9 + a1) & ~v9, (v8 + v9 + a2) & ~v9, v5);
  uint64_t v11 = (v8 + v9 + ((v8 + v9 + a2) & ~v9)) & ~v9;
  v7((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9, v11, v5);
  uint64_t v12 = (v8 + v9 + v11) & ~v9;
  v7((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9, v12, v5);
  uint64_t v13 = (v8 + v9 + v12) & ~v9;
  v7((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9, v13, v5);
  uint64_t v14 = (v8 + v9 + v13) & ~v9;
  v7((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, v14, v5);
  uint64_t v15 = (v8 + v9 + v14) & ~v9;
  v7((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, v15, v5);
  uint64_t v16 = (v8 + v9 + v15) & ~v9;
  v7( (v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9,  v16,  v5);
  uint64_t v17 = (v8 + v9 + v16) & ~v9;
  v7( (v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9,  v17,  v5);
  uint64_t v18 = (v8 + v9 + v17) & ~v9;
  v7( (v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9,  v18,  v5);
  uint64_t v19 = (v8 + v9 + v18) & ~v9;
  v7( (v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9,  v19,  v5);
  uint64_t v20 = (v8 + v9 + v19) & ~v9;
  v7( (v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9,  v20,  v5);
  v7( (v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9,  (v10 + v20) & ~v9,  v5);
  uint64_t v21 = ((v10
        + ((v10
          + ((v10
            + ((v10
              + ((v10
                + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + (v10 & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)
      + v8;
  *(_BYTE *)(v21 + a_HashNode.ensureUnique(isUnique:)(v1 & 1) = *(_BYTE *)(v21 + a2);
  return a1;
}

uint64_t sub_188D54E34(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = v7
     + ((v7
       + v8
       + ((v7
         + v8
         + ((v7
           + v8
           + ((v7
             + v8
             + ((v7
               + v8
               + ((v7
                 + v8
                 + ((v7
                   + v8
                   + ((v7 + v8 + ((v7 + v8 + ((v7 + v8 + ((v7 + v8 + ((v7 + v8) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)
     + 1;
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v12 = ((v6 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v12))
    {
      int v11 = *(_DWORD *)(a1 + v9);
      if (!v11) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v12 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v12 < 2)
    {
LABEL_18:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0LL;
    }
  }

  int v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9)) {
    goto LABEL_18;
  }
LABEL_11:
  int v13 = (v11 - 1) << v10;
  if (!(_DWORD)v9) {
    return v5 + v13 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_188D54F50 + 4 * byte_188DFAF60[(v9 - 1)]))();
}

void sub_188D54FA0(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = v8
      + ((v8
        + v9
        + ((v8
          + v9
          + ((v8
            + v9
            + ((v8
              + v9
              + ((v8
                + v9
                + ((v8
                  + v9
                  + ((v8
                    + v9
                    + ((v8 + v9 + ((v8 + v9 + ((v8 + v9 + ((v8 + v9 + ((v8 + v9) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)
      + 1;
  BOOL v11 = a3 >= v7;
  unsigned int v12 = a3 - v7;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v15 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v15))
      {
        unsigned int v13 = 4u;
      }

      else if (v15 >= 0x100)
      {
        unsigned int v13 = 2;
      }

      else
      {
        unsigned int v13 = v15 > 1;
      }
    }

    else
    {
      unsigned int v13 = 1u;
    }
  }

  else
  {
    unsigned int v13 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v14 = ~v7 + a2;
    if (v10 < 4)
    {
      if ((_DWORD)v8
         + (((_DWORD)v8
           + (_DWORD)v9
           + (((_DWORD)v8
             + (_DWORD)v9
             + (((_DWORD)v8
               + (_DWORD)v9
               + (((_DWORD)v8
                 + (_DWORD)v9
                 + (((_DWORD)v8
                   + (_DWORD)v9
                   + (((_DWORD)v8
                     + (_DWORD)v9
                     + (((_DWORD)v8
                       + (_DWORD)v9
                       + (((_DWORD)v8
                         + (_DWORD)v9
                         + (((_DWORD)v8
                           + (_DWORD)v9
                           + (((_DWORD)v8
                             + (_DWORD)v9
                             + (((_DWORD)v8 + (_DWORD)v9 + (((_DWORD)v8 + (_DWORD)v9) & ~(_DWORD)v9)) & ~(_DWORD)v9)) & ~(_DWORD)v9)) & ~(_DWORD)v9)) & ~(_DWORD)v9)) & ~(_DWORD)v9)) & ~(_DWORD)v9)) & ~(_DWORD)v9)) & ~(_DWORD)v9)) & ~(_DWORD)v9)) & ~(_DWORD)v9)) & ~(_DWORD)v9) != -1)
      {
        int v16 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if ((_DWORD)v10 == 3)
        {
          *a1 = v16;
          *((_BYTE *)a1 + 2) = BYTE2(v16);
        }

        else if ((_DWORD)v10 == 2)
        {
          *a1 = v16;
        }

        else
        {
          *(_BYTE *)a1 = v16;
        }
      }
    }

    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t sub_188D551BC(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)(v1 + 16) - 8LL) + 24LL))( result + *(void *)(*(void *)(*(void *)(v1 + 16) - 8LL) + 72LL) * *(unsigned __int8 *)(v1 + 24),  *(void *)(v1 + 32));
  }
  __break(1u);
  return result;
}

unint64_t sub_188D55204(unint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    uint64_t v6 = MEMORY[0x1895D67BC](15LL, BYTE4(a3), result, a2);
    goto LABEL_6;
  }

  unint64_t v5 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    unint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  }
  if (v5 >= BYTE4(a3))
  {
    uint64_t v6 = ((unint64_t)BYTE4(a3) << 16) | 4;
LABEL_6:
    swift_bridgeObjectRetain();
    unint64_t v7 = sub_188D0EFD0(v6, v4, a2);
    swift_bridgeObjectRelease();
    return v7;
  }

  __break(1u);
  return result;
}

unint64_t sub_188D552B8(unint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  unint64_t v5 = a3 - (unint64_t)BYTE5(a3);
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    unint64_t v7 = MEMORY[0x1895D67BC](15LL, v5, result, a2);
    goto LABEL_7;
  }

  if ((v5 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    unint64_t v6 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000LL) == 0) {
      unint64_t v6 = result & 0xFFFFFFFFFFFFLL;
    }
    if (v6 >= v5)
    {
      unint64_t v7 = (v5 << 16) | 4;
LABEL_7:
      swift_bridgeObjectRetain();
      unint64_t v8 = sub_188D0EFD0(v7, v4, a2);
      swift_bridgeObjectRelease();
      return v8;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_188D5537C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = a3 - (unint64_t)BYTE5(a3);
  if ((a2 & 0x1000000000000000LL) != 0) {
LABEL_10:
  }
    JUMPOUT(0x1895D67BCLL);
  if ((v4 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  unint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000LL) != 0) {
    unint64_t v5 = HIBYTE(a2) & 0xF;
  }
  if (v5 < v4) {
    goto LABEL_9;
  }
  return (v4 << 16) | 4;
}

unint64_t sub_188D553D0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x1000000000000000LL) != 0) {
LABEL_8:
  }
    JUMPOUT(0x1895D67BCLL);
  unint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000LL) != 0) {
    unint64_t v3 = HIBYTE(a2) & 0xF;
  }
  if (v3 < BYTE4(a3))
  {
    __break(1u);
    goto LABEL_8;
  }

  return ((unint64_t)BYTE4(a3) << 16) | 4;
}

unint64_t sub_188D55414(unint64_t result)
{
  unint64_t v2 = result;
  uint64_t v3 = *(void *)v1;
  unint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = (*(void *)v1 >> 59) & 1LL;
  if ((v4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4LL << v5)
  {
    uint64_t result = sub_188D37044(result, *(void *)v1, *(void *)(v1 + 8));
    unint64_t v2 = result;
    if ((v4 & 0x1000000000000000LL) == 0) {
      goto LABEL_5;
    }
  }

  else if ((v4 & 0x1000000000000000LL) == 0)
  {
LABEL_5:
    uint64_t result = v2 >> 16;
LABEL_6:
    if (result <= 0xFF)
    {
      *(_BYTE *)(v1 + 20) = result;
      return result;
    }

    goto LABEL_14;
  }

  unint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
  if ((v4 & 0x2000000000000000LL) != 0) {
    unint64_t v6 = HIBYTE(v4) & 0xF;
  }
  if (v6 < v2 >> 16) {
    goto LABEL_15;
  }
  uint64_t result = sub_188DF7F28();
  if ((result & 0x8000000000000000LL) == 0) {
    goto LABEL_6;
  }
  __break(1u);
LABEL_14:
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

unint64_t sub_188D554C0(unint64_t result)
{
  unint64_t v2 = result;
  uint64_t v3 = *(unsigned __int8 *)(v1 + 16);
  uint64_t v4 = *(void *)v1;
  unint64_t v5 = *(void *)(v1 + 8);
  uint64_t v6 = (*(void *)v1 >> 59) & 1LL;
  if ((v5 & 0x1000000000000000LL) == 0) {
    LOBYTE(v6) = 1;
  }
  if ((result & 0xC) == 4LL << v6)
  {
    uint64_t result = sub_188D37044(result, *(void *)v1, *(void *)(v1 + 8));
    unint64_t v2 = result;
    if ((v5 & 0x1000000000000000LL) == 0)
    {
LABEL_5:
      uint64_t result = v2 >> 16;
      unint64_t v7 = v3 - (v2 >> 16);
      if (!__OFSUB__(v3, v2 >> 16)) {
        goto LABEL_6;
      }
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }
  }

  else if ((v5 & 0x1000000000000000LL) == 0)
  {
    goto LABEL_5;
  }

  unint64_t v8 = v4 & 0xFFFFFFFFFFFFLL;
  if ((v5 & 0x2000000000000000LL) != 0) {
    unint64_t v8 = HIBYTE(v5) & 0xF;
  }
  if (v8 < v2 >> 16) {
    goto LABEL_18;
  }
  uint64_t result = sub_188DF7F28();
  unint64_t v7 = v3 - result;
  if (__OFSUB__(v3, result)) {
    goto LABEL_15;
  }
LABEL_6:
  if ((v7 & 0x8000000000000000LL) == 0)
  {
    if (v7 <= 0xFF)
    {
      *(_BYTE *)(v1 + 2_HashNode.ensureUnique(isUnique:)(v1 & 1) = v7;
      return result;
    }

    goto LABEL_17;
  }

unint64_t sub_188D55584(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t result = sub_188D0F098(a1, a2, a3);
  unint64_t v8 = result;
  if ((a3 & 0x1000000000000000LL) != 0)
  {
    unint64_t v21 = MEMORY[0x1895D67BC](15LL, BYTE4(a4), a2, a3);
    unint64_t v10 = v8 >> 14;
    if (v8 >> 14 > v21 >> 14)
    {
      unint64_t v12 = v21;
      unint64_t v13 = MEMORY[0x1895D67BC](15LL, a4 - (unint64_t)BYTE5(a4), a2, a3);
      if (v10 <= v13 >> 14) {
        goto LABEL_9;
      }
      return v13;
    }

    return 0LL;
  }

  unint64_t v9 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    unint64_t v9 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v9 < BYTE4(a4))
  {
    __break(1u);
    goto LABEL_19;
  }

  unint64_t v10 = result >> 14;
  int64_t v11 = a4 - (unint64_t)BYTE5(a4);
  if (v11 < 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  if (v9 >= v11)
  {
    unint64_t v12 = ((unint64_t)BYTE4(a4) << 16) | 4;
    unint64_t v13 = (v11 << 16) | 4;
    if (v10 <= v13 >> 14)
    {
LABEL_9:
      swift_bridgeObjectRetain();
      unint64_t v14 = sub_188D0EFD0(v12, a2, a3);
      uint64_t v16 = v15;
      uint64_t v18 = v17;
      uint64_t v20 = v19;
      swift_bridgeObjectRelease();
      unint64_t v13 = MEMORY[0x1895D6D14](v8, v14, v16, v18, v20);
      if (v10 == v13 >> 14) {
        unint64_t v13 = sub_188DF8450();
      }
      swift_bridgeObjectRelease();
    }

    return v13;
  }

uint64_t OrderedSet.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_188DF8A50();
  uint64_t v7 = *(void *)(a3 + 16);
  if (v7)
  {
    uint64_t v8 = *(void *)(a4 - 8);
    uint64_t v9 = a3 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    swift_retain();
    do
    {
      sub_188DF7C4C();
      v9 += v10;
      --v7;
    }

    while (v7);
    return swift_release();
  }

  return result;
}

uint64_t OrderedSet.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_188DF8A98();
}

uint64_t sub_188D55818(uint64_t a1)
{
  return OrderedSet.hashValue.getter(a1, *(void *)(v1 + 8), *(void *)(a1 + 16));
}

uint64_t sub_188D55824(uint64_t a1, uint64_t a2)
{
  return OrderedSet.hash(into:)(a1, a2, *(void *)(v2 + 8), *(void *)(a2 + 16));
}

uint64_t sub_188D55830(uint64_t a1, uint64_t a2)
{
  return sub_188DF8A98();
}

void sub_188D55874()
{
}

uint64_t OrderedSet.init()()
{
  return 0LL;
}

BOOL OrderedSet.contains(_:)()
{
  return (v1 & 1) == 0;
}

uint64_t OrderedSet.remove(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = OrderedSet._find(_:)();
  if ((v7 & 1) != 0)
  {
    uint64_t v8 = 1LL;
  }

  else
  {
    OrderedSet._removeExistingMember(at:in:)(v5, v6, a1);
    uint64_t v8 = 0LL;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a2, v8, 1LL, v4);
}

uint64_t sub_188D559A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_188DA9D20(a1, a2, v3[4], v3[6], v3[3], a3);
}

BOOL OrderedSet.isSuperset(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return OrderedSet.isSubset(of:)(a3, a4, a1, a2, a5);
}

{
  return OrderedSet.isSubset(of:)(a3, a4, a1, a2, a5);
}

{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v10 = _s19CollectionsInternal4HeapV5countSivg_0();
  if (v10 >= sub_188DF815C())
  {
    uint64_t v15 = a1;
    unint64_t v12 = sub_188DF8198();
    unint64_t v13 = MEMORY[0x1895D7620](MEMORY[0x189618708], v12);
    return OrderedSet._isSuperset<A>(of:)((uint64_t)&v15, a2, a3, a4, v12, a5, v13);
  }

  else
  {
    return 0;
  }

BOOL OrderedSet._isSuperset<A>(of:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  uint64_t v40 = a1;
  uint64_t v11 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  unint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_188DF8384();
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = (char *)&v33 - v15;
  uint64_t v37 = a7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v18 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v35 = (char *)&v33 - v19;
  uint64_t v20 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](v18);
  uint64_t v22 = (char *)&v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for OrderedSet(0LL, a4, a6, v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, v40, a5);
  if (v24 == a5)
  {
    swift_dynamicCast();
    BOOL v31 = OrderedSet.isSubset(of:)(v38, v39, v41, v42, a4);
    swift_release();
    swift_release();
  }

  else
  {
    uint64_t v34 = v17;
    uint64_t v40 = a6;
    uint64_t v25 = v35;
    sub_188DF7FDC();
    uint64_t v26 = AssociatedTypeWitness;
    swift_getAssociatedConformanceWitness();
    uint64_t v27 = v26;
    while (1)
    {
      uint64_t v28 = v25;
      uint64_t v29 = v27;
      sub_188DF84D4();
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v16, a4);
      BOOL v30 = OrderedSet.contains(_:)();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, a4);
      uint64_t v27 = v29;
      uint64_t v25 = v28;
      if (!v30)
      {
        (*(void (**)(char *, uint64_t))(v34 + 8))(v28, v27);
        return 0;
      }
    }

    (*(void (**)(char *, uint64_t))(v34 + 8))(v28, v29);
    return 1;
  }

  return v31;
}

uint64_t UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = sub_188DF8384();
  uint64_t v30 = *(void *)(v12 - 8);
  uint64_t v31 = v12;
  uint64_t v13 = MEMORY[0x1895F8858](v12);
  uint64_t v27 = (char *)&v24 - v14;
  uint64_t v26 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v25 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v19 = (char *)&v24 - v18;
  uint64_t v32 = a4;
  uint64_t v33 = a5;
  uint64_t v34 = a6;
  uint64_t v35 = a2;
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v36 = a3;
  if (sub_188DF8120() == a5) {
    sub_188DF89B4();
  }
  sub_188DF800C();
  if (v38 != 1) {
    return v37;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v16, a1, a5);
  uint64_t v20 = sub_188DF7FE8();
  swift_getAssociatedConformanceWitness();
  uint64_t v21 = v27;
  sub_188DF84D4();
  int v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 48LL))(v21, 1LL, a4);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v21, v31);
  if (v22 == 1)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v19, AssociatedTypeWitness);
    return v20;
  }

  __break(1u);
  return result;
}

uint64_t sub_188D55FC0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, void *a3@<X8>)
{
  uint64_t result = sub_188DF7D9C();
  if (!result)
  {
    a1 = 0LL;
    goto LABEL_7;
  }

  if (!a1)
  {
LABEL_7:
    *a3 = a1;
    return result;
  }

  if (a2 >= a1)
  {
    uint64_t result = sub_188DF7D9C();
    if (result) {
      uint64_t result = sub_188DF8348();
    }
    goto LABEL_7;
  }

  __break(1u);
  return result;
}

uint64_t sub_188D56060@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  return sub_188D55FC0(a1, *(void *)(v2 + 48), a2);
}

__n128 BigSubstring.UTF16View.init(_:in:)@<Q0>( __int128 *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5 = v8[5];
  *(_OWORD *)(a3 + 64) = v8[4];
  *(_OWORD *)(a3 + 80) = v5;
  *(_OWORD *)(a3 + 96) = v8[6];
  __int128 v6 = v8[1];
  *(_OWORD *)a3 = v8[0];
  *(_OWORD *)(a3 + 16) = v6;
  __n128 result = (__n128)v8[3];
  *(_OWORD *)(a3 + 32) = v8[2];
  *(__n128 *)(a3 + 48) = result;
  return result;
}

__n128 BigSubstring.UTF16View.init(_unchecked:in:)@<Q0>(_OWORD *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v3 = a1[1];
  *(_OWORD *)a3 = *a1;
  *(_OWORD *)(a3 + 16) = v3;
  __int128 v4 = *a2;
  __int128 v5 = a2[1];
  *(_OWORD *)(a3 + 32) = a1[2];
  *(_OWORD *)(a3 + 48) = v4;
  __n128 result = (__n128)a2[2];
  __int128 v7 = a2[3];
  *(_OWORD *)(a3 + 64) = v5;
  *(__n128 *)(a3 + 80) = result;
  *(_OWORD *)(a3 + 96) = v7;
  return result;
}

__n128 BigSubstring.utf16.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  __int128 v12 = *(_OWORD *)v1;
  __int128 v10 = *(_OWORD *)(v1 + 32);
  __int128 v11 = *(_OWORD *)(v1 + 16);
  __int128 v8 = *(_OWORD *)(v1 + 64);
  __int128 v9 = *(_OWORD *)(v1 + 48);
  __n128 v7 = *(__n128 *)(v1 + 80);
  uint64_t v4 = *(void *)(v1 + 96);
  uint64_t v5 = *(void *)(v2 + 104);
  sub_188D07F48(v2);
  *(_OWORD *)a1 = v12;
  *(_OWORD *)(a1 + 16) = v11;
  *(_OWORD *)(a1 + 32) = v10;
  *(_OWORD *)(a1 + 48) = v9;
  __n128 result = v7;
  *(_OWORD *)(a1 + 64) = v8;
  *(__n128 *)(a1 + 80) = v7;
  *(void *)(a1 + 96) = v4;
  *(void *)(a1 + 104) = v5;
  return result;
}

void BigString.init(_:)(__int128 *a1@<X0>, __int128 *a2@<X8>)
{
  __int128 v3 = a1[4];
  v11[0] = a1[3];
  v11[1] = v3;
  __int128 v4 = a1[6];
  __int128 v12 = a1[5];
  __int128 v13 = v4;
  if ((BYTE1(v11[0]) & 4) != 0 || (BYTE1(v12) & 4) != 0)
  {
    sub_188D087F8((uint64_t)a1);
    __int128 v6 = xmmword_188DFB040;
    __int128 v7 = 0uLL;
    __int128 v8 = 0uLL;
  }

  else
  {
    __int128 v5 = a1[1];
    v10[0] = *a1;
    v10[1] = v5;
    _OWORD v10[2] = a1[2];
    sub_188DDEAD8(v10, (unint64_t *)v11, v9);
    __int128 v6 = v9[0];
    __int128 v7 = v9[1];
    __int128 v8 = v9[2];
  }

  *a2 = v6;
  a2[1] = v7;
  a2[2] = v8;
}

{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v15[3];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20[3];
  __int128 v4 = a1[1];
  v20[0] = *a1;
  v20[1] = v4;
  __int128 v5 = a1[3];
  v20[2] = a1[2];
  __int128 v6 = a1[4];
  __int128 v7 = a1[5];
  uint64_t v16 = v5;
  uint64_t v17 = v6;
  __int128 v8 = a1[6];
  uint64_t v18 = v7;
  uint64_t v19 = v8;
  __int128 v9 = v5;
  sub_188D07F48((uint64_t)a1);
  __int128 v10 = sub_188DCF614(v9, *((uint64_t *)&v9 + 1), v17, *((uint64_t *)&v17 + 1));
  sub_188D087F8((uint64_t)a1);
  if ((v10 ^ (unint64_t)v9) > 0x3FF
    || (sub_188D07F48((uint64_t)a1),
        __int128 v11 = sub_188DCF614(v18, *((uint64_t *)&v18 + 1), v19, *((uint64_t *)&v19 + 1)),
        sub_188D087F8((uint64_t)a1),
        (v11 ^ (unint64_t)v18) > 0x3FF))
  {
    sub_188D087F8((uint64_t)a1);
    __int128 v12 = xmmword_188DFB040;
    __int128 v13 = 0uLL;
    uint64_t v14 = 0uLL;
  }

  else
  {
    sub_188DDEAD8(v20, (unint64_t *)&v16, v15);
    __int128 v12 = v15[0];
    __int128 v13 = v15[1];
    uint64_t v14 = v15[2];
  }

  *a2 = v12;
  a2[1] = v13;
  a2[2] = v14;
}

uint64_t BigSubstring.UTF16View.startIndex.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t BigSubstring.UTF16View.endIndex.getter()
{
  return *(void *)(v0 + 80);
}

uint64_t BigSubstring.UTF16View.base.getter@<X0>(_OWORD *a1@<X8>)
{
  __int128 v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v1[2];
  return swift_unknownObjectRetain();
}

unint64_t BigSubstring.UTF16View.subscript.getter( unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (result >> 10 >= *(void *)(v4 + 48) >> 10 && result >> 10 < *(void *)(v4 + 80) >> 10) {
    return sub_188DCF86C(result, a2, a3, a4);
  }
  __break(1u);
  return result;
}

BOOL BigSubstring.UTF16View.isIdentical(to:)(uint64_t a1)
{
  uint64_t v2 = (uint64_t)v1;
  __int128 v4 = v1[1];
  _OWORD v8[3] = *v1;
  _OWORD v8[4] = v4;
  v8[5] = v1[2];
  __int128 v5 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v5;
  void v8[2] = *(_OWORD *)(a1 + 32);
  sub_188D07F48((uint64_t)v1);
  sub_188D07F48(a1);
  BOOL v6 = sub_188CFE978((uint64_t)v8);
  sub_188D087F8(a1);
  sub_188D087F8(v2);
  return v6
      && (*(void *)(a1 + 48) ^ *(void *)(v2 + 48)) <= 1023LL
      && (*(void *)(v2 + 80) ^ *(void *)(a1 + 80)) < 0x400uLL;
}

unint64_t sub_188D56354(_OWORD *a1, __int128 *a2)
{
  __int128 v2 = a1[5];
  void v13[4] = a1[4];
  v13[5] = v2;
  __int128 v3 = a1[6];
  __int128 v4 = a1[1];
  v13[0] = *a1;
  v13[1] = v4;
  __int128 v5 = a1[3];
  void v13[2] = a1[2];
  void v13[3] = v5;
  __int128 v6 = *a2;
  __int128 v7 = a2[1];
  _OWORD v13[6] = v3;
  v14[0] = v6;
  __int128 v8 = a2[2];
  __int128 v9 = a2[3];
  __int128 v10 = a2[6];
  v14[5] = a2[5];
  v14[6] = v10;
  __int128 v11 = a2[4];
  v14[3] = v9;
  v14[4] = v11;
  v14[1] = v7;
  void v14[2] = v8;
  return _s19CollectionsInternal12BigSubstringV9UTF16ViewV2eeoiySbAE_AEtFZ_0((uint64_t)v13, v14) & 1;
}

uint64_t BigSubstring.UTF16View.hash(into:)()
{
  uint64_t v1 = (void *)v0;
  __int128 v2 = *(_OWORD *)(v0 + 16);
  v12[0] = *(_OWORD *)v0;
  v12[1] = v2;
  _OWORD v12[2] = *(_OWORD *)(v0 + 32);
  unint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = v1[7];
  unint64_t v5 = v1[8];
  uint64_t v6 = v1[9];
  unint64_t v7 = v1[10];
  sub_188D07F48((uint64_t)v1);
  sub_188D370BC(v12, v3, v4, v5, v6, (uint64_t)v11);
  unint64_t v8 = v11[6];
  sub_188D087F8((uint64_t)v1);
  while (v7 >> 10 > v8 >> 10)
  {
    *(Swift::UInt16_optional *)&int v9 = BigString.UTF16View.Iterator.next()();
    if ((v9 & 0x10000) != 0) {
      break;
    }
    sub_188DF8A68();
  }

  swift_unknownObjectRelease();
  return sub_188DF8A68();
}

void BigSubstring.UTF16View.makeIterator()(uint64_t a1@<X8>)
{
  __int128 v15 = *(_OWORD *)(v1 + 32);
  unint64_t v3 = *(void *)(v1 + 48);
  uint64_t v4 = *(void *)(v1 + 56);
  unint64_t v5 = *(void *)(v1 + 64);
  uint64_t v6 = *(void *)(v1 + 72);
  __int128 v13 = *(_OWORD *)(v1 + 16);
  __int128 v14 = *(_OWORD *)v1;
  __int128 v12 = *(_OWORD *)(v1 + 80);
  __int128 v11 = *(_OWORD *)(v1 + 96);
  if ((v3 & 0x400) == 0)
  {
    sub_188D07F48(v1);
    unint64_t v7 = sub_188DCF614(v3, v4, v5, v6);
LABEL_6:
    *(_OWORD *)a1 = v14;
    *(_OWORD *)(a1 + 16) = v13;
    *(_OWORD *)(a1 + 32) = v15;
    *(void *)(a1 + 48) = v7;
    *(void *)(a1 + 56) = v8;
    *(void *)(a1 + 64) = v9;
    *(void *)(a1 + 72) = v10;
    *(_OWORD *)(a1 + 80) = v12;
    *(_OWORD *)(a1 + 96) = v11;
    return;
  }

  if (*(void *)v1 && 2 * ((unint64_t)v15 & 0x1FFFFFFFFFFFFFLL) > v3 >> 10)
  {
    sub_188D07F48(v1);
    unint64_t v7 = sub_188D097FC(v3, v4, v5, v6, 0);
    goto LABEL_6;
  }

  __break(1u);
}

Swift::UInt16_optional __swiftcall BigSubstring.UTF16View.Iterator.next()()
{
  if (*(void *)(v0 + 48) >> 10 >= *(void *)(v0 + 80) >> 10)
  {
    int v3 = 0;
    int v2 = 1;
  }

  else
  {
    *(Swift::UInt16_optional *)&unsigned int v1 = BigString.UTF16View.Iterator.next()();
    int v2 = HIWORD(v1) & 1;
    int v3 = (unsigned __int16)v1;
  }

  return (Swift::UInt16_optional)(v3 | (v2 << 16));
}

uint64_t BigSubstring.UTF16View.hashValue.getter()
{
  __int128 v1 = *(_OWORD *)(v0 + 16);
  v11[0] = *(_OWORD *)v0;
  v11[1] = v1;
  _OWORD v11[2] = *(_OWORD *)(v0 + 32);
  unint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);
  unint64_t v4 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 72);
  unint64_t v6 = *(void *)(v0 + 80);
  sub_188D07F48(v0);
  sub_188D370BC(v11, v2, v3, v4, v5, (uint64_t)v10);
  unint64_t v7 = v10[6];
  sub_188D087F8(v0);
  while (v6 >> 10 > v7 >> 10)
  {
    *(Swift::UInt16_optional *)&int v8 = BigString.UTF16View.Iterator.next()();
    if ((v8 & 0x10000) != 0) {
      break;
    }
    sub_188DF8A68();
  }

  swift_unknownObjectRelease();
  sub_188DF8A68();
  return sub_188DF8A98();
}

uint64_t sub_188D56768()
{
  return sub_188DF8A98();
}

uint64_t sub_188D567CC()
{
  return BigSubstring.UTF16View.hash(into:)();
}

uint64_t sub_188D56814()
{
  return sub_188DF8A98();
}

uint64_t sub_188D56874@<X0>(uint64_t a1@<X8>)
{
  if (*(void *)(v1 + 48) >> 10 >= *(void *)(v1 + 80) >> 10)
  {
    uint64_t result = 0LL;
    LOBYTE(v0(v6, 0LL, 1LL, v4) = 1;
  }

  else
  {
    *(Swift::UInt16_optional *)&uint64_t result = BigString.UTF16View.Iterator.next()();
    unsigned int v4 = WORD1(result) & 1;
  }

  *(_WORD *)a1 = result;
  *(_BYTE *)(a1 + 2) = v4;
  return result;
}

__n128 sub_188D568C0@<Q0>(uint64_t a1@<X8>)
{
  __int128 v3 = *(_OWORD *)(v1 + 16);
  v21[0] = *(_OWORD *)v1;
  v21[1] = v3;
  void v21[2] = *(_OWORD *)(v1 + 32);
  unint64_t v4 = *(void *)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 56);
  unint64_t v6 = *(void *)(v1 + 64);
  uint64_t v7 = *(void *)(v1 + 72);
  __n128 v17 = *(__n128 *)(v1 + 80);
  uint64_t v9 = *(void *)(v1 + 96);
  uint64_t v8 = *(void *)(v1 + 104);
  sub_188D370BC(v21, v4, v5, v6, v7, (uint64_t)v18);
  __int128 v15 = v18[1];
  __int128 v16 = v18[0];
  __int128 v13 = v18[3];
  __int128 v14 = v18[2];
  uint64_t v10 = v19;
  uint64_t v11 = v20;
  sub_188D087F8((uint64_t)v21);
  *(_OWORD *)a1 = v16;
  *(_OWORD *)(a1 + 16) = v15;
  *(_OWORD *)(a1 + 32) = v14;
  *(_OWORD *)(a1 + 48) = v13;
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = v11;
  __n128 result = v17;
  *(__n128 *)(a1 + 80) = v17;
  *(void *)(a1 + 96) = v9;
  *(void *)(a1 + 104) = v8;
  return result;
}

unint64_t sub_188D56974()
{
  __int128 v1 = v0[5];
  _OWORD v6[4] = v0[4];
  _OWORD v6[5] = v1;
  v6[6] = v0[6];
  __int128 v2 = v0[1];
  v6[0] = *v0;
  v6[1] = v2;
  __int128 v3 = v0[3];
  _OWORD v6[2] = v0[2];
  _OWORD v6[3] = v3;
  unint64_t v4 = sub_188DD5F40((uint64_t)v6);
  sub_188D087F8((uint64_t)v6);
  return v4;
}

uint64_t sub_188D569CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_188DD6724(a1, a2, a3);
}

unint64_t BigSubstring.UTF16View.count.getter()
{
  unint64_t result = v0[6];
  unint64_t v2 = v0[10];
  if (v2 >> 10 >= result >> 10) {
    return sub_188D03720(result, v0[7], v0[8], v0[9], v2, v0[11], v0[12], v0[13]);
  }
  __break(1u);
  return result;
}

unint64_t BigSubstring.UTF16View.distance(from:to:)( unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  unint64_t v9 = result >> 10;
  unint64_t v10 = *(void *)(v8 + 48) >> 10;
  unint64_t v11 = *(void *)(v8 + 80) >> 10;
  if (v11 >= a5 >> 10 && a5 >> 10 >= v10 && v9 >= v10 && v11 >= v9) {
    return sub_188D03720(result, a2, a3, a4, a5, a6, a7, a8);
  }
  __break(1u);
  return result;
}

unint64_t BigSubstring.UTF16View.index(after:)( unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (result >> 10 < *(void *)(v4 + 80) >> 10) {
    return sub_188D05DA8(result, a2, a3, a4, 1uLL);
  }
  __break(1u);
  return result;
}

unint64_t BigSubstring.UTF16View.index(before:)( unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (*(void *)(v4 + 48) >> 10 < result >> 10) {
    return sub_188D05DA8(result, a2, a3, a4, 0xFFFFFFFFFFFFFFFFLL);
  }
  __break(1u);
  return result;
}

unint64_t BigSubstring.UTF16View.index(_:offsetBy:)( unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v6 = *(void *)(v5 + 48) >> 10;
  unint64_t v7 = *(void *)(v5 + 80) >> 10;
  if (result >> 10 < v6 || v7 < result >> 10)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }

  unint64_t result = sub_188D05DA8(result, a2, a3, a4, a5);
  if (result >> 10 < v6 || v7 < result >> 10) {
    goto LABEL_12;
  }
  return result;
}

unint64_t BigSubstring.UTF16View.index(_:offsetBy:limitedBy:)( unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v10 = *(void *)(v9 + 48) >> 10;
  unint64_t v11 = *(void *)(v9 + 80) >> 10;
  if (result >> 10 < v10 || v11 < result >> 10)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }

  unint64_t result = sub_188DCF834(result, a2, a3, a4, a5, a6, a7, a8, a9);
  if (v13 != 2 && (result >> 10 < v10 || v11 < result >> 10)) {
    goto LABEL_13;
  }
  return result;
}

unint64_t *BigSubstring.UTF16View.subscript.getter@<X0>( unint64_t *result@<X0>, _OWORD *a2@<X8>)
{
  if (*result >> 10 >= *(void *)(v2 + 48) >> 10 && *(void *)(v2 + 80) >> 10 >= result[4] >> 10)
  {
    uint64_t v5 = result;
    __int128 v6 = *(_OWORD *)(v2 + 16);
    v11[0] = *(_OWORD *)v2;
    v11[1] = v6;
    _OWORD v11[2] = *(_OWORD *)(v2 + 32);
    sub_188D07F48(v2);
    sub_188D57718(v11, v5, (uint64_t)v10);
    unint64_t result = (unint64_t *)sub_188D087F8(v2);
    __int128 v7 = v10[5];
    a2[4] = v10[4];
    a2[5] = v7;
    a2[6] = v10[6];
    __int128 v8 = v10[1];
    *a2 = v10[0];
    a2[1] = v8;
    __int128 v9 = v10[3];
    a2[2] = v10[2];
    a2[3] = v9;
  }

  else
  {
    __break(1u);
  }

  return result;
}

unint64_t sub_188D56D28@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = *(void *)a1;
  if (*(void *)(v2 + 48) >> 10 >= result >> 10)
  {
    __break(1u);
  }

  else
  {
    unint64_t result = sub_188D05DA8( result,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  0xFFFFFFFFFFFFFFFFLL);
    *a2 = result;
    a2[1] = v6;
    a2[2] = v7;
    a2[3] = v8;
  }

  return result;
}

unint64_t sub_188D56D94(uint64_t a1)
{
  unint64_t result = *(void *)a1;
  if (*(void *)(v1 + 48) >> 10 >= result >> 10)
  {
    __break(1u);
  }

  else
  {
    unint64_t result = sub_188D05DA8( result,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  0xFFFFFFFFFFFFFFFFLL);
    *(void *)a1 = result;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + 24) = v6;
  }

  return result;
}

unint64_t sub_188D56E08(void *a1, unint64_t *a2)
{
  uint64_t v5 = malloc(0x32uLL);
  *a1 = v5;
  unint64_t result = *a2;
  uint64_t v7 = a2[1];
  unint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  __int128 v10 = *(_OWORD *)(v2 + 16);
  *uint64_t v5 = *(_OWORD *)v2;
  v5[1] = v10;
  void v5[2] = *(_OWORD *)(v2 + 32);
  if (result >> 10 < *(void *)(v2 + 48) >> 10 || result >> 10 >= *(void *)(v2 + 80) >> 10)
  {
    __break(1u);
  }

  else
  {
    *((_WORD *)v5 + 24) = sub_188DCF86C(result, v7, v8, v9);
    return (unint64_t)sub_188D36AE4;
  }

  return result;
}

_OWORD *sub_188D56E94@<X0>(_OWORD *result@<X0>, _OWORD *a2@<X8>)
{
  __int128 v4 = result[1];
  v13[0] = *result;
  v13[1] = v4;
  __int128 v5 = result[3];
  __int128 v14 = result[2];
  __int128 v15 = v5;
  if (*(void *)&v13[0] >> 10 >= *(void *)(v2 + 48) >> 10
    && *(void *)(v2 + 80) >> 10 >= (unint64_t)v14 >> 10)
  {
    __int128 v7 = *(_OWORD *)(v2 + 16);
    v12[0] = *(_OWORD *)v2;
    v12[1] = v7;
    _OWORD v12[2] = *(_OWORD *)(v2 + 32);
    swift_unknownObjectRetain();
    sub_188D57718(v12, (unint64_t *)v13, (uint64_t)v11);
    unint64_t result = (_OWORD *)swift_unknownObjectRelease();
    __int128 v8 = v11[5];
    a2[4] = v11[4];
    a2[5] = v8;
    a2[6] = v11[6];
    __int128 v9 = v11[1];
    *a2 = v11[0];
    a2[1] = v9;
    __int128 v10 = v11[3];
    a2[2] = v11[2];
    a2[3] = v10;
  }

  else
  {
    __break(1u);
  }

  return result;
}

unint64_t sub_188D56F50()
{
  unint64_t result = v0[6];
  unint64_t v2 = v0[10];
  if (v2 >> 10 >= result >> 10) {
    return sub_188D03720(result, v0[7], v0[8], v0[9], v2, v0[11], v0[12], v0[13]);
  }
  __break(1u);
  return result;
}

unint64_t sub_188D56FB0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result = *(void *)a1;
  unint64_t v7 = *(void *)(v3 + 48) >> 10;
  unint64_t v8 = *(void *)(v3 + 80) >> 10;
  if (result >> 10 >= v7 && v8 >= result >> 10)
  {
    unint64_t result = sub_188D05DA8(result, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
    if (result >> 10 >= v7 && v8 >= result >> 10)
    {
      *a3 = result;
      a3[1] = v10;
      a3[2] = v11;
      a3[3] = v12;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

unint64_t sub_188D57048@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t result = *(void *)a1;
  unint64_t v8 = *(void *)(v4 + 48) >> 10;
  if (result >> 10 < v8 || (unint64_t v9 = *(void *)(v4 + 80) >> 10, v9 < result >> 10))
  {
    __break(1u);
  }

  else
  {
    unint64_t result = sub_188DCF834( result,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  a2,  *(void *)a3,  *(void *)(a3 + 8),  *(void *)(a3 + 16),  *(void *)(a3 + 24));
    if (v12 == 2 || result >> 10 >= v8 && v9 >= result >> 10)
    {
      *a4 = result;
      a4[1] = v10;
      a4[2] = v11;
      a4[3] = v12;
      return result;
    }
  }

  __break(1u);
  return result;
}

unint64_t sub_188D57100(uint64_t a1, uint64_t a2)
{
  unint64_t result = *(void *)a1;
  unint64_t v5 = *(void *)a2;
  unint64_t v6 = *(void *)(v2 + 80) >> 10;
  if (v6 >= *(void *)a2 >> 10)
  {
    unint64_t v7 = *(void *)(v2 + 48) >> 10;
    if (v5 >> 10 >= v7 && result >> 10 >= v7 && v6 >= result >> 10) {
      return sub_188D03720( result,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  v5,  *(void *)(a2 + 8),  *(void *)(a2 + 16),  *(void *)(a2 + 24));
    }
  }

  __break(1u);
  return result;
}

unint64_t sub_188D57190@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = *(void *)a1;
  if (result >> 10 >= *(void *)(v2 + 80) >> 10)
  {
    __break(1u);
  }

  else
  {
    unint64_t result = sub_188D05DA8(result, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), 1uLL);
    *a2 = result;
    a2[1] = v6;
    a2[2] = v7;
    a2[3] = v8;
  }

  return result;
}

unint64_t sub_188D571FC(uint64_t a1)
{
  unint64_t result = *(void *)a1;
  if (result >> 10 >= *(void *)(v1 + 80) >> 10)
  {
    __break(1u);
  }

  else
  {
    unint64_t result = sub_188D05DA8(result, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), 1uLL);
    *(void *)a1 = result;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + 24) = v6;
  }

  return result;
}

unint64_t BigSubstring.UTF16View.index(roundingDown:)( unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5 = result >> 10;
  if (result >> 10 < v4[6] >> 10 || v4[10] >> 10 < v5)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }

  if ((result & 0x400) == 0) {
    return sub_188DCF614(result, a2, a3, a4);
  }
  if (!*v4 || 2 * (v4[4] & 0x1FFFFFFFFFFFFFuLL) <= v5) {
    goto LABEL_12;
  }
  return sub_188D097FC(result, a2, a3, a4, 0);
}

unint64_t BigSubstring.UTF16View.index(roundingUp:)( unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (result >> 10 >= *(void *)(v4 + 48) >> 10 && *(void *)(v4 + 80) >> 10 >= result >> 10) {
    return sub_188DCFA60(result, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t _s19CollectionsInternal12BigSubstringV9UTF16ViewV2eeoiySbAE_AEtFZ_0( uint64_t a1, __int128 *a2)
{
  unint64_t v2 = *(void *)(a1 + 48);
  unint64_t v3 = *((void *)a2 + 6);
  if (((v2 >> 10) & 1) == ((v3 & 0x400) == 0)) {
    goto LABEL_24;
  }
  uint64_t v6 = *(void *)(a1 + 56);
  unint64_t v7 = *(void *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 72);
  unint64_t result = *(void *)(a1 + 80);
  uint64_t v10 = *(void *)(a1 + 88);
  unint64_t v11 = *(void *)(a1 + 96);
  uint64_t v12 = *(void *)(a1 + 104);
  unint64_t v13 = *((void *)a2 + 7);
  unint64_t v14 = *((void *)a2 + 8);
  unint64_t v15 = *((void *)a2 + 9);
  unint64_t v16 = *((void *)a2 + 10);
  uint64_t v17 = *((void *)a2 + 11);
  unint64_t v18 = v2 >> 10;
  unint64_t v19 = *((void *)a2 + 12);
  uint64_t v20 = *((void *)a2 + 13);
  unint64_t v81 = v3 >> 10;
  unint64_t v21 = result >> 10;
  if ((v2 & 0x400) == 0)
  {
    unint64_t v31 = v2 >> 10;
    if (v18 >= v21) {
      goto LABEL_25;
    }
    goto LABEL_10;
  }

  if (v18 >= v21)
  {
    __break(1u);
    goto LABEL_30;
  }

  unint64_t v61 = v2 >> 10;
  unint64_t v63 = result >> 10;
  uint64_t v68 = *(void *)(a1 + 104);
  unint64_t v70 = *(void *)(a1 + 96);
  uint64_t v72 = *(void *)(a1 + 88);
  uint64_t v74 = *((void *)a2 + 9);
  unint64_t v57 = *((void *)a2 + 12);
  unint64_t v59 = result;
  uint64_t v55 = *((void *)a2 + 13);
  uint64_t v66 = *((void *)a2 + 11);
  unint64_t v76 = *((void *)a2 + 8);
  unint64_t v78 = *((void *)a2 + 10);
  uint64_t v22 = v13;
  __int128 v23 = *(_OWORD *)(a1 + 16);
  v83[12] = *(_OWORD *)a1;
  v83[13] = v23;
  v83[14] = *(_OWORD *)(a1 + 32);
  uint64_t v24 = v6;
  unint64_t v25 = v7;
  uint64_t v26 = v9;
  unint64_t result = sub_188DCF86C(v2, v6, v7, v9);
  if (v81 >= v78 >> 10)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  __int128 v27 = a2[1];
  v83[9] = *a2;
  v83[10] = v27;
  v83[11] = a2[2];
  unint64_t result = sub_188D05DA8(v2, v24, v25, v26, 1uLL);
  unint64_t v51 = v29;
  uint64_t v53 = v28;
  uint64_t v49 = v30;
  unint64_t v21 = v63;
  if (v81 >= v63)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }

  unint64_t v2 = result;
  unint64_t v3 = sub_188D05DA8(v3, v22, v76, v74, 1uLL);
  unint64_t v31 = v2 >> 10;
  unint64_t v16 = v78;
  uint64_t v20 = v55;
  unint64_t v19 = v57;
  uint64_t v17 = v66;
  uint64_t v12 = v68;
  unint64_t v7 = v51;
  uint64_t v6 = v53;
  uint64_t v9 = v49;
  unint64_t result = v59;
  unint64_t v18 = v61;
  unint64_t v11 = v70;
  uint64_t v10 = v72;
  if (v2 >> 10 >= v63)
  {
LABEL_25:
    char v48 = v31 == v21 && (v3 ^ v16) < 0x400;
    return v48 & 1;
  }

unint64_t sub_188D57718@<X0>(__int128 *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5 = *a1;
  __int128 v6 = a1[2];
  unint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  unint64_t v9 = a2[2];
  uint64_t v10 = a2[3];
  __int128 v28 = v6;
  __int128 v29 = *a1;
  __int128 v27 = a1[1];
  if ((*a2 & 0x400) != 0)
  {
    unint64_t result = *(void *)a1;
    if ((void)v5) {
      BOOL v16 = 2 * ((unint64_t)v6 & 0x1FFFFFFFFFFFFFLL) > v7 >> 10;
    }
    else {
      BOOL v16 = 0;
    }
    if (!v16)
    {
      __break(1u);
      goto LABEL_15;
    }

    swift_unknownObjectRetain();
    unint64_t v11 = sub_188D097FC(v7, v8, v9, v10, 0);
  }

  else
  {
    swift_unknownObjectRetain();
    unint64_t v11 = sub_188DCF614(v7, v8, v9, v10);
  }

  unint64_t v17 = v11;
  uint64_t v18 = v12;
  uint64_t v19 = v13;
  uint64_t v20 = v14;
  unint64_t result = a2[4];
  uint64_t v21 = a2[5];
  unint64_t v22 = a2[6];
  uint64_t v23 = a2[7];
  if ((result & 0x400) == 0)
  {
    unint64_t result = sub_188DCF614(result, v21, v22, v23);
LABEL_14:
    *(_OWORD *)a3 = v29;
    *(_OWORD *)(a3 + 16) = v27;
    *(_OWORD *)(a3 + 32) = v28;
    *(void *)(a3 + 48) = v17;
    *(void *)(a3 + 56) = v18;
    *(void *)(a3 + 64) = v19;
    *(void *)(a3 + 72) = v20;
    *(void *)(a3 + 80) = result;
    *(void *)(a3 + 88) = v24;
    *(void *)(a3 + 96) = v25;
    *(void *)(a3 + 104) = v26;
    return result;
  }

  if ((void)v29 && 2 * ((unint64_t)v28 & 0x1FFFFFFFFFFFFFLL) > result >> 10)
  {
    unint64_t result = sub_188D097FC(result, v21, v22, v23, 0);
    goto LABEL_14;
  }

unint64_t sub_188D57850()
{
  unint64_t result = qword_18C74A7F0;
  if (!qword_18C74A7F0)
  {
    unint64_t result = MEMORY[0x1895D7620]( &protocol conformance descriptor for BigSubstring.UTF16View,  &type metadata for BigSubstring.UTF16View);
    atomic_store(result, (unint64_t *)&qword_18C74A7F0);
  }

  return result;
}

unint64_t sub_188D57898()
{
  unint64_t result = qword_18C74A7F8;
  if (!qword_18C74A7F8)
  {
    unint64_t result = MEMORY[0x1895D7620]( &protocol conformance descriptor for BigSubstring.UTF16View.Iterator,  &type metadata for BigSubstring.UTF16View.Iterator);
    atomic_store(result, (unint64_t *)&qword_18C74A7F8);
  }

  return result;
}

unint64_t sub_188D578E0()
{
  unint64_t result = qword_18C74A800;
  if (!qword_18C74A800)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C74A808);
    unint64_t v2 = sub_188D37320();
    unint64_t result = MEMORY[0x1895D7620](MEMORY[0x189617A18], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_18C74A800);
  }

  return result;
}

unint64_t sub_188D57948()
{
  unint64_t result = qword_18C74A810;
  if (!qword_18C74A810)
  {
    unint64_t result = MEMORY[0x1895D7620]( &protocol conformance descriptor for BigSubstring.UTF16View,  &type metadata for BigSubstring.UTF16View);
    atomic_store(result, (unint64_t *)&qword_18C74A810);
  }

  return result;
}

unint64_t sub_188D57990()
{
  unint64_t result = qword_18C74A818;
  if (!qword_18C74A818)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C74A808);
    unint64_t result = MEMORY[0x1895D7620](MEMORY[0x189617A28], v1);
    atomic_store(result, (unint64_t *)&qword_18C74A818);
  }

  return result;
}

ValueMetadata *type metadata accessor for BigSubstring.UTF16View()
{
  return &type metadata for BigSubstring.UTF16View;
}

ValueMetadata *type metadata accessor for BigSubstring.UTF16View.Iterator()
{
  return &type metadata for BigSubstring.UTF16View.Iterator;
}

uint64_t Slice.initializeAll<A>(fromContentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_188DF83E4();
  return UnsafeMutableBufferPointer.initialize(fromContentsOf:)(a1, a2, a3, a4, v8, v9);
}

uint64_t Slice.moveInitializeAll<A>(fromContentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_188DF83E4();
  return sub_188D57F9C(a1, a2, a3, a4, v8, v9);
}

uint64_t Slice.initializeAll<A>(fromContentsOf:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_188DF83E4();
  return UnsafeMutableBufferPointer.initialize(fromContentsOf:)(a1, a2, v4, v5);
}

uint64_t Slice.moveInitializeAll<A>(fromContentsOf:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_188DF83E4();
  return _sSr19CollectionsInternalE17moveInitializeAll14fromContentsOfySryxG_tF_0(a1, a2, v4, v5);
}

uint64_t UnsafeMutableBufferPointer.initialize(fromContentsOf:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 < 1) {
    return 0LL;
  }
  uint64_t v4 = a2;
  if (a4 >= a2)
  {
    sub_188DF7D9C();
    sub_188DF7D9C();
    sub_188DF8348();
    return v4;
  }

  __break(1u);
  return result;
}

uint64_t UnsafeMutableBufferPointer.initialize(fromContentsOf:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = sub_188DF83F0();
  MEMORY[0x1895D7620](MEMORY[0x189618B48], v7);
  uint64_t v8 = sub_188DF8A14();
  MEMORY[0x1895D7620](MEMORY[0x18961A5E8], v8);
  uint64_t result = sub_188DF8258();
  if (result < 1) {
    return 0LL;
  }
  uint64_t v10 = result;
  if (result <= a6)
  {
    sub_188DF7D9C();
    sub_188DF8A08();
    sub_188DF7D9C();
    sub_188DF89F0();
    sub_188DF8348();
    return v10;
  }

  __break(1u);
  return result;
}

uint64_t Slice.initialize<A>(fromContentsOf:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_188DF83E4();
  uint64_t v6 = UnsafeMutableBufferPointer.initialize(fromContentsOf:)(a1, a2, v4, v5);
  uint64_t v7 = sub_188DF83F0();
  MEMORY[0x1895D7620](MEMORY[0x189618B48], v7);
  sub_188DF8A14();
  sub_188DF89F0();
  uint64_t result = v9 + v6;
  if (__OFADD__(v9, v6)) {
    __break(1u);
  }
  return result;
}

uint64_t Slice.initialize<A>(fromContentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_188DF83E4();
  uint64_t v10 = UnsafeMutableBufferPointer.initialize(fromContentsOf:)(a1, a2, a3, a4, v8, v9);
  uint64_t v11 = sub_188DF83F0();
  MEMORY[0x1895D7620](MEMORY[0x189618B48], v11);
  sub_188DF8A14();
  sub_188DF89F0();
  uint64_t result = v13 + v10;
  if (__OFADD__(v13, v10)) {
    __break(1u);
  }
  return result;
}

uint64_t _sSr19CollectionsInternalE17moveInitializeAll14fromContentsOfySryxG_tF_0( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!result) {
    return 0LL;
  }
  uint64_t v4 = a2;
  if (!a2) {
    return v4;
  }
  if (a4 >= a2)
  {
    if (a3) {
      sub_188DF836C();
    }
    return v4;
  }

  __break(1u);
  return result;
}

uint64_t sub_188D57F9C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a3) {
    return 0LL;
  }
  uint64_t v6 = a2 - result;
  if (a2 == result) {
    return v6;
  }
  if (v6 <= a6)
  {
    if (a5) {
      sub_188DF836C();
    }
    return v6;
  }

  __break(1u);
  return result;
}

uint64_t Slice.initializeAll<A>(fromContentsOf:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return sub_188D58084(a1, a2, a3, a4, a5, AssociatedTypeWitness, a6, a7);
}

uint64_t sub_188D58084( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = sub_188DF83E4();
  uint64_t v15 = sub_188D58108(a1, v13, v14, a6, a7, a8);
  BOOL v16 = __OFADD__(a2, v15);
  uint64_t result = a2 + v15;
  if (v16) {
    __break(1u);
  }
  return result;
}

uint64_t sub_188D58108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v32 = a1;
  uint64_t v11 = sub_188DF8384();
  uint64_t v30 = *(void *)(v11 - 8);
  uint64_t v31 = v11;
  uint64_t v12 = MEMORY[0x1895F8858](v11);
  __int128 v29 = (char *)&v25 - v13;
  uint64_t v14 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](v12);
  BOOL v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v25 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v19 = (char *)&v25 - v18;
  uint64_t v26 = a4;
  uint64_t v27 = a2;
  uint64_t v33 = a4;
  uint64_t v34 = a5;
  uint64_t v35 = a6;
  uint64_t v36 = a2;
  uint64_t v20 = v32;
  uint64_t v28 = a3;
  uint64_t v37 = a3;
  sub_188DF800C();
  if (v39 != 1) {
    return v38;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v20, a5);
  uint64_t v21 = sub_188DF7FE8();
  swift_getAssociatedConformanceWitness();
  unint64_t v22 = v29;
  sub_188DF84D4();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v19, AssociatedTypeWitness);
  int v23 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v26 - 8) + 48LL))(v22, 1LL);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v22, v31);
  if (v23 != 1)
  {
    __break(1u);
    return v38;
  }

  return v21;
}

uint64_t sub_188D58324@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (!result)
  {
    uint64_t v5 = 0LL;
    goto LABEL_7;
  }

  uint64_t v5 = a2;
  if (!a2)
  {
LABEL_7:
    *a3 = v5;
    return result;
  }

  if (*(void *)(v3 + 48) >= a2)
  {
    if (*(void *)(v3 + 40)) {
      uint64_t result = sub_188DF8348();
    }
    goto LABEL_7;
  }

  __break(1u);
  return result;
}

uint64_t *_emptyDequeStorage.unsafeMutableAddressor()
{
  if (qword_18C4FB1A0 != -1) {
    swift_once();
  }
  return &_emptyDequeStorage;
}

void _DequeBuffer.deinit()
{
}

uint64_t *sub_188D5841C(uint64_t *result)
{
  uint64_t v2 = result[1];
  uint64_t v1 = result[2];
  if (__OFADD__(v1, v2))
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  uint64_t v3 = *result;
  if (*result >= v1 + v2) {
    return (uint64_t *)sub_188DF8360();
  }
  uint64_t v4 = v3 - v1;
  if (__OFSUB__(v3, v1)) {
    goto LABEL_7;
  }
  sub_188DF8360();
  uint64_t result = (uint64_t *)(v2 - v4);
  if (!__OFSUB__(v2, v4)) {
    return (uint64_t *)sub_188DF8360();
  }
LABEL_8:
  __break(1u);
  return result;
}

void _DequeBuffer.__deallocating_deinit()
{
}

uint64_t sub_188D584CC()
{
  return swift_deallocClassInstance();
}

uint64_t _DequeBuffer.description.getter()
{
  return v1;
}

uint64_t sub_188D58520@<X0>(void *a1@<X8>)
{
  HIBYTE(v4[1]) = -18;
  sub_188DF8B94();
  sub_188DF7EE0();
  swift_bridgeObjectRelease();
  sub_188DF7EE0();
  _DequeBufferHeader.description.getter();
  sub_188DF7EE0();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v3 = v4[1];
  *a1 = v4[0];
  a1[1] = v3;
  return result;
}

uint64_t sub_188D585FC()
{
  return _DequeBuffer.description.getter();
}

void *sub_188D5861C()
{
  uint64_t result = (void *)swift_allocObject();
  result[3] = 0LL;
  result[4] = 0LL;
  result[2] = 0LL;
  _emptyDequeStorage = (uint64_t)result;
  return result;
}

uint64_t sub_188D58654()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for _DequeBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _DequeBuffer);
}

uint64_t _RawHashNode.storage.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*_RawHashNode.storage.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t _RawHashNode.count.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _RawHashNode.count.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*_RawHashNode.count.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

BOOL _RawHashNode.isIdentical(to:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t _RawHashNode.validatePath(_:)(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (BYTE4(a3))
  {
    unint64_t v7 = result;
    unsigned __int8 v8 = 0;
    unint64_t v9 = HIDWORD(a3);
    while (1)
    {
      uint64_t result = swift_beginAccess();
      uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(a4 + 20));
      v10.i16[0] = vaddlv_u8(v10);
      if (*(_DWORD *)(a4 + 16) == *(_DWORD *)(a4 + 20) || v10.i32[0] <= ((v7 >> v8) & 0x1F)) {
        break;
      }
      a4 = *(void *)(a4 + 16 * ((v7 >> v8) & 0x1F) + 32);
      v8 += 5;
    }

    __break(1u);
    goto LABEL_19;
  }

void *initializeBufferWithCopyOfBuffer for _RawHashNode(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

void *assignWithCopy for _RawHashNode(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  return a1;
}

void *assignWithTake for _RawHashNode(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for _RawHashNode()
{
  return &type metadata for _RawHashNode;
}

uint64_t RopeSummary.subtracting(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 56))(a1, a2, a3);
}

uint64_t static RopeSummary.minNodeSize.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(a2 + 16))();
  uint64_t v3 = result + 1;
  if (__OFADD__(result, 1LL))
  {
    __break(1u);
  }

  else
  {
    if (v3 < 0) {
      uint64_t v3 = result + 2;
    }
    return v3 >> 1;
  }

  return result;
}

unint64_t static RopeSummary.nodeSizeBitWidth.getter(uint64_t a1, uint64_t a2)
{
  return 64 - __clz((*(uint64_t (**)(void))(a2 + 16))());
}

uint64_t RopeSummary.adding(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 48))(a1, a2, a3);
}

Swift::Int_optional __swiftcall BitSet.min()()
{
  unint64_t v1 = v0;
  Swift::Int v2 = BitSet.startIndex.getter(v0);
  uint64_t v4 = *(void *)(v1 + 16) << 6;
  if (v4 < 0)
  {
    __break(1u);
  }

  else
  {
    Swift::Bool v3 = v2 == v4;
    if (v2 == v4) {
      Swift::Int v2 = 0LL;
    }
  }

  result.value = v2;
  result.is_nil = v3;
  return result;
}

Swift::Int_optional __swiftcall BitSet.max()()
{
  uint64_t v1 = v0[2];
  if (!v1) {
    goto LABEL_6;
  }
  uint64_t v2 = (uint64_t)(v0 + 4);
  if (v0[4]) {
    goto LABEL_3;
  }
  if (v1 == 1)
  {
LABEL_6:
    unint64_t v3 = 0LL;
    char v4 = 1;
    goto LABEL_7;
  }

  if (!v0[5])
  {
    if (v1 == 2) {
      goto LABEL_6;
    }
    uint64_t v5 = 6LL;
    while (!v0[v5])
    {
      uint64_t v6 = v5 - 3;
      if (__OFADD__(v5 - 4, 1LL)) {
        goto LABEL_16;
      }
      unint64_t v3 = 0LL;
      ++v5;
      char v4 = 1;
      if (v6 == v1) {
        goto LABEL_7;
      }
    }
  }

uint64_t static _DequeSlot.zero.getter()
{
  return 0LL;
}

uint64_t _DequeSlot.position.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_DequeSlot.position.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

CollectionsInternal::_DequeSlot __swiftcall _DequeSlot.advanced(by:)(Swift::Int by)
{
  return (CollectionsInternal::_DequeSlot)(v1 + by);
}

CollectionsInternal::_DequeSlot __swiftcall _DequeSlot.orIfZero(_:)(CollectionsInternal::_DequeSlot result)
{
  if (v1.position > 0) {
    return v1;
  }
  return result;
}

uint64_t _DequeSlot.description.getter()
{
  return 64LL;
}

uint64_t sub_188D58BA0()
{
  return 64LL;
}

BOOL static _DequeSlot.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

BOOL static _DequeSlot.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 < a2;
}

BOOL sub_188D58C1C(void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL sub_188D58C30(void *a1, void *a2)
{
  return *a2 >= *a1;
}

BOOL sub_188D58C44(void *a1, void *a2)
{
  return *a1 >= *a2;
}

BOOL sub_188D58C58(void *a1, void *a2)
{
  return *a2 < *a1;
}

uint64_t Range<>._count.getter(uint64_t a1, uint64_t a2)
{
  BOOL v2 = __OFSUB__(a2, a1);
  uint64_t result = a2 - a1;
  if (v2) {
    __break(1u);
  }
  return result;
}

unint64_t sub_188D58C80()
{
  unint64_t result = qword_18C74A820[0];
  if (!qword_18C74A820[0])
  {
    unint64_t result = MEMORY[0x1895D7620](&protocol conformance descriptor for _DequeSlot, &type metadata for _DequeSlot);
    atomic_store(result, qword_18C74A820);
  }

  return result;
}

ValueMetadata *type metadata accessor for _DequeSlot()
{
  return &type metadata for _DequeSlot;
}

char *sub_188D58CD4(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    uint64_t v5 = (char *)MEMORY[0x18961AFE8];
  }
  else {
    uint64_t v5 = sub_188CF7528(0LL, a2 & ~(a2 >> 63), 0, MEMORY[0x18961AFE8]);
  }
  while (1)
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    if ((sub_188DF8918() & 1) != 0) {
      break;
    }
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, a1[3]);
    uint64_t v6 = sub_188DF890C();
    if (v3)
    {
      swift_bridgeObjectRelease();
      return v5;
    }

    uint64_t v7 = v6;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v5 = sub_188CF7528(0LL, *((void *)v5 + 2) + 1LL, 1, v5);
    }
    unint64_t v9 = *((void *)v5 + 2);
    unint64_t v8 = *((void *)v5 + 3);
    if (v9 >= v8 >> 1) {
      uint64_t v5 = sub_188CF7528((char *)(v8 > 1), v9 + 1, 1, v5);
    }
    *((void *)v5 + 2) = v9 + 1;
    *(void *)&v5[8 * v9 + 32] = v7;
  }

  return v5;
}

uint64_t OrderedDictionary.makeIterator()(uint64_t a1)
{
  return a1;
}

uint64_t OrderedDictionary.Iterator._base.getter(uint64_t a1)
{
  return a1;
}

uint64_t OrderedDictionary.Iterator._position.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t OrderedDictionary.Iterator._position.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t (*OrderedDictionary.Iterator._position.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

  ;
}

uint64_t OrderedDictionary.Iterator.next()@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v7 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  unint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v7);
  uint64_t v11 = (char *)&v23 - v10;
  uint64_t v12 = *(void *)(v2 + 24);
  swift_retain();
  uint64_t v13 = _s19CollectionsInternal4HeapV5countSivg_0();
  swift_release();
  if (v12 >= v13)
  {
    uint64_t v22 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))( a2,  1LL,  1LL,  v22);
  }

  else
  {
    int v23 = &v11[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v24 = a2;
    swift_retain();
    swift_retain();
    sub_188DF8774();
    swift_release();
    swift_release();
    swift_retain();
    unsigned int v14 = v23;
    sub_188DF8774();
    swift_release();
    *(void *)(v2 + 24) = v12 + 1;
    uint8x8_t v15 = &v9[*(int *)(TupleTypeMetadata2 + 48)];
    BOOL v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v4 - 8) + 32LL);
    v16(v9, v11, v4);
    unint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 32LL);
    v17(v15, v14, v5);
    uint64_t v18 = swift_getTupleTypeMetadata2();
    uint64_t v19 = v24;
    uint64_t v20 = &v24[*(int *)(v18 + 48)];
    v16(v24, v9, v4);
    v17(v20, v15, v5);
    return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))( v19,  0LL,  1LL,  v18);
  }

uint64_t OrderedDictionary.underestimatedCount.getter()
{
  return _s19CollectionsInternal4HeapV5countSivg_0();
}

void sub_188D59110()
{
}

__n128 sub_188D59120@<Q0>(uint64_t a1@<X8>)
{
  *(void *)a1 = *(void *)v1;
  __n128 result = *(__n128 *)(v1 + 8);
  *(__n128 *)(a1 + 8) = result;
  *(void *)(a1 + 24) = 0LL;
  return result;
}

uint64_t sub_188D59138()
{
  uint64_t v0 = sub_188D59330();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

void *sub_188D59180(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_188D591CC(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  return a1;
}

uint64_t sub_188D59248(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t sub_188D5929C(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_188D592E4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t type metadata accessor for OrderedDictionary.Iterator( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for OrderedDictionary.Iterator);
}

uint64_t BitSet.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = sub_188DF8A50();
  if (v3)
  {
    uint64_t v5 = a2 + 32;
    do
    {
      v5 += 8LL;
      uint64_t result = sub_188DF8A50();
      --v3;
    }

    while (v3);
  }

  return result;
}

uint64_t BitSet.hashValue.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_188DF8A50();
  if (v2)
  {
    uint64_t v3 = a1 + 32;
    do
    {
      v3 += 8LL;
      sub_188DF8A50();
      --v2;
    }

    while (v2);
  }

  return sub_188DF8A98();
}

uint64_t sub_188D593EC()
{
  return BitSet.hashValue.getter(*v0);
}

uint64_t sub_188D593F4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 16);
  uint64_t result = sub_188DF8A50();
  if (v2)
  {
    uint64_t v4 = v1 + 32;
    do
    {
      v4 += 8LL;
      uint64_t result = sub_188DF8A50();
      --v2;
    }

    while (v2);
  }

  return result;
}

uint64_t sub_188D59444()
{
  uint64_t v1 = *v0;
  sub_188DF8A38();
  uint64_t v2 = *(void *)(v1 + 16);
  sub_188DF8A50();
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    do
    {
      v3 += 8LL;
      sub_188DF8A50();
      --v2;
    }

    while (v2);
  }

  return sub_188DF8A98();
}

uint64_t Rope._Item.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 32LL))(a3, a1);
}

uint64_t Rope.summary.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v29 = *(void *)(a1 + 16);
  uint64_t v30 = a3;
  uint64_t v6 = type metadata accessor for Rope._Node(0LL, v29, v5, a2);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v28 = (char *)&v27 - v8;
  uint64_t v9 = sub_188DF8384();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](v9);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v11);
  uint8x8_t v15 = (char *)&v27 - v14;
  BOOL v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v27 = v4;
  v16((char *)&v27 - v14, v4, v9);
  unint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v18 = v17(v15, 1LL, v6);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v15, v9);
  if (v18 == 1)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))( AssociatedTypeWitness,  AssociatedConformanceWitness);
  }

  else
  {
    uint64_t v23 = v30;
    v16(v13, v27, v9);
    if (v17(v13, 1LL, v6) == 1)
    {
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v19)(v13, v9);
      __break(1u);
    }

    else
    {
      uint64_t v24 = v28;
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v28, v13, v6);
      uint64_t v25 = &v24[*(int *)(v6 + 36)];
      uint64_t v26 = swift_getAssociatedTypeWitness();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v26 - 8) + 16LL))(v23, v25, v26);
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v24, v6);
    }
  }

  return result;
}

uint64_t Rope._Item.split(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 + 24) + 88LL))(v6, v4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a3, v8, v4);
}

uint64_t Rope._Item.summary.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 40LL))(*(void *)(a1 + 16));
}

uint64_t Rope._Item.isUndersized.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 56LL))(*(void *)(a1 + 16));
}

uint64_t Rope._Item.rebalance(nextNeighbor:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 24) + 72LL))(a1, *(void *)(a2 + 16));
}

uint64_t Rope._Item.isEmpty.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48LL))(*(void *)(a1 + 16));
}

uint64_t Rope._Item.rebalance(prevNeighbor:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 24) + 80LL))(a1, *(void *)(a2 + 16));
}

uint64_t Sequence<>._sum()()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))( AssociatedTypeWitness,  AssociatedConformanceWitness);
  return sub_188DF8054();
}

uint64_t sub_188D598E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v13 - v8;
  uint64_t v10 = *(void (**)(void))(a5 + 24);
  swift_checkMetadataState();
  v10();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))( v9,  AssociatedTypeWitness,  AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
}

uint64_t sub_188D59A08(uint64_t a1, uint64_t a2)
{
  return sub_188D598E0(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t Rope._Item.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t Rope._Item.value.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8LL) + 40LL))(v2, a1);
}

uint64_t (*Rope._Item.value.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t Rope._Item.description.getter()
{
  return 0LL;
}

uint64_t sub_188D59AB4()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *sub_188D59B20(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(void *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }

  else
  {
    uint64_t v8 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }

  return v3;
}

uint64_t sub_188D59B90(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8LL) + 8LL))();
}

uint64_t sub_188D59BA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_188D59BD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_188D59C00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_188D59C30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_188D59C60(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 < 2)
    {
LABEL_18:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0LL;
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_18;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (!(_DWORD)v7) {
    return v5 + v11 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_188D59D10 + 4 * byte_188DFB510[(v7 - 1)]))();
}

void sub_188D59D60(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        unsigned int v11 = 4u;
      }

      else if (v13 >= 0x100)
      {
        unsigned int v11 = 2;
      }

      else
      {
        unsigned int v11 = v13 > 1;
      }
    }

    else
    {
      unsigned int v11 = 1u;
    }
  }

  else
  {
    unsigned int v11 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }

        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }

    else
    {
      bzero(a1, *(void *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t type metadata accessor for Rope._Item(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Rope._Item);
}

uint64_t sub_188D59F24(unint64_t a1)
{
  if ((a1 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }

  if (!a1) {
    return MEMORY[0x18961AFE8];
  }
  unint64_t v3 = a1 >> 6;
  char v4 = a1 & 0x3F;
  BOOL v5 = (a1 & 0x3F) == 0 && a1 > 0x3F;
  int64_t v1 = v3 - v5;
  uint64_t v2 = sub_188D3C888(0LL, (char *)(v3 - v5));
  if (v5)
  {
LABEL_13:
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v6 = -1LL;
    if ((result & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_14;
  }

  uint64_t v6 = ~(-1LL << v4);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0) {
    goto LABEL_8;
  }
LABEL_14:
  uint64_t result = (uint64_t)sub_188CF73DC((uint64_t)v2);
  uint64_t v2 = (char *)result;
LABEL_8:
  if (v1 < *((void *)v2 + 2))
  {
    *(void *)&v2[8 * v1 + 32] &= v6;
    return (uint64_t)v2;
  }

  __break(1u);
  return result;
}

uint64_t static BitArray.randomBits<A>(count:using:)(unint64_t a1)
{
  if ((a1 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }

  if (!a1) {
    return MEMORY[0x18961AFE8];
  }
  char v3 = a1 & 0x3F;
  BOOL v4 = (a1 & 0x3F) == 0 && a1 > 0x3F;
  uint64_t v1 = (a1 >> 6) - v4;
  MEMORY[0x1895F8858](a1);
  _OWORD v10[2] = v5;
  __int128 v10[3] = v6;
  v10[4] = v7;
  uint64_t v2 = sub_188D3C9BC((char *)sub_188D3CD10, (uint64_t)v10, 0LL, v1);
  if (v4)
  {
LABEL_13:
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = -1LL;
    if ((result & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_14;
  }

  uint64_t v8 = ~(-1LL << v3);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0) {
    goto LABEL_8;
  }
LABEL_14:
  uint64_t result = (uint64_t)sub_188CF73DC((uint64_t)v2);
  uint64_t v2 = (char *)result;
LABEL_8:
  if (v1 < *((void *)v2 + 2))
  {
    *(void *)&v2[8 * v1 + 32] &= v8;
    return (uint64_t)v2;
  }

  __break(1u);
  return result;
}

char *sub_188D5A120(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_188D5A13C(a1, a2, a3, *v3);
  *char v3 = result;
  return result;
}

char *sub_188D5A13C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_18C749DC0);
    unsigned int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }

  else
  {
    unsigned int v10 = (char *)MEMORY[0x18961AFE8];
  }

  unsigned int v13 = v10 + 32;
  int v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, 8 * v8);
  }

  swift_release();
  return v10;
}

Swift::Int __swiftcall FixedWidthInteger._rank(ofBit:)(Swift::UInt ofBit)
{
  uint64_t v3 = v1;
  Swift::UInt v25 = ofBit;
  uint64_t v4 = *(void *)(*(void *)(v2 + 8) + 24LL);
  v22[1] = *(void *)(v2 + 8);
  uint64_t v5 = *(void *)(v4 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v24 = *(void *)(v3 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](v7);
  unsigned int v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = MEMORY[0x1895F8858](v8);
  unsigned int v13 = (char *)v22 - v12;
  uint64_t v14 = MEMORY[0x1895F8858](v11);
  BOOL v16 = (char *)v22 - v15;
  MEMORY[0x1895F8858](v14);
  uint64_t v23 = (char *)v22 - v17;
  v22[0] = v5;
  swift_getAssociatedConformanceWitness();
  sub_188DF89CC();
  sub_188DF896C();
  Swift::UInt v26 = v25;
  sub_188CF78D0();
  sub_188DF84E0();
  sub_188DF8804();
  int v18 = *(void (**)(char *, uint64_t))(v24 + 8);
  v18(v10, v3);
  v18(v13, v3);
  sub_188DF89CC();
  sub_188DF896C();
  uint64_t v19 = v23;
  sub_188DF87F8();
  v18(v13, v3);
  v18(v16, v3);
  sub_188DF84EC();
  Swift::Int v20 = sub_188DF87E0();
  v18(v16, v3);
  v18(v19, v3);
  return v20;
}

Swift::UInt_optional __swiftcall UInt32._bit(ranked:)(Swift::Int ranked)
{
  v2.i32[0] = (unsigned __int16)v1;
  int8x8_t v3 = vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8((uint8x8_t)v3);
  __int32 v4 = v3.i32[0];
  BOOL v5 = v3.i32[0] <= ranked;
  unsigned int v6 = ranked - v4;
  v3.i32[0] = (v1 >> (16 * v5));
  int8x8_t v7 = vcnt_s8(v3);
  v7.i16[0] = vaddlv_u8((uint8x8_t)v7);
  if (v6 >= v7.i32[0]) {
    unsigned int v8 = (16 * v5) | 8;
  }
  else {
    unsigned int v8 = 16 * v5;
  }
  if (v6 >= v7.i32[0]) {
    __int32 v9 = v7.i32[0];
  }
  else {
    __int32 v9 = 0;
  }
  unsigned int v10 = v6 - v9;
  v7.i32[0] = (v1 >> v8) & 0xF;
  int8x8_t v11 = vcnt_s8(v7);
  v11.i16[0] = vaddlv_u8((uint8x8_t)v11);
  __int32 v12 = v11.i32[0];
  if (v10 < v11.i32[0]) {
    __int32 v12 = 0;
  }
  else {
    v8 |= 4u;
  }
  unsigned int v13 = v10 - v12;
  v11.i32[0] = (v1 >> v8) & 3;
  uint8x8_t v14 = (uint8x8_t)vcnt_s8(v11);
  v14.i16[0] = vaddlv_u8(v14);
  __int32 v15 = v14.i32[0];
  if (v13 < v14.i32[0]) {
    __int32 v15 = 0;
  }
  else {
    v8 |= 2u;
  }
  unsigned int v16 = v13 - v15;
  unsigned int v17 = (v1 >> v8) & 1;
  if (v16 <= v17)
  {
    if (v16 >= v17) {
      ++v8;
    }
    Swift::Bool v19 = ((1 << v8) & v1) == 0;
    if (v19) {
      Swift::UInt v18 = 0LL;
    }
    else {
      Swift::UInt v18 = v8;
    }
  }

  else
  {
    Swift::UInt v18 = 0LL;
    Swift::Bool v19 = 1;
  }

  result.value = v18;
  result.is_nil = v19;
  return result;
}

uint64_t FixedWidthInteger._nonzeroBitCount.getter()
{
  return sub_188DF84E0();
}

Swift::UInt_optional __swiftcall UInt._bit(ranked:)(Swift::Int ranked)
{
  uint8x8_t v2 = (uint8x8_t)vcnt_s8((int8x8_t)v1);
  v2.i16[0] = vaddlv_u8(v2);
  uint64_t v3 = v2.u32[0];
  BOOL v4 = v2.u32[0] <= (unint64_t)ranked;
  unint64_t v5 = ranked - v3;
  uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)(unsigned __int16)(v1 >> (32 * v4)));
  v6.i16[0] = vaddlv_u8(v6);
  if (v5 >= v6.u32[0]) {
    uint64_t v7 = (32LL * v4) | 0x10;
  }
  else {
    uint64_t v7 = 32LL * v4;
  }
  if (v5 >= v6.u32[0]) {
    uint64_t v8 = v6.u32[0];
  }
  else {
    uint64_t v8 = 0LL;
  }
  unint64_t v9 = v5 - v8;
  uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)(v1 >> v7));
  v10.i16[0] = vaddlv_u8(v10);
  uint64_t v11 = v10.u32[0];
  if (v9 < v10.u32[0]) {
    uint64_t v11 = 0LL;
  }
  else {
    v7 |= 8uLL;
  }
  unint64_t v12 = v9 - v11;
  uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)((v1 >> v7) & 0xF));
  v13.i16[0] = vaddlv_u8(v13);
  uint64_t v14 = v13.u32[0];
  if (v12 < v13.u32[0]) {
    uint64_t v14 = 0LL;
  }
  else {
    v7 |= 4uLL;
  }
  unint64_t v15 = v12 - v14;
  uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)((v1 >> v7) & 3));
  v16.i16[0] = vaddlv_u8(v16);
  Swift::UInt v17 = v7 + 2;
  if (v15 >= v16.u32[0])
  {
    uint64_t v18 = v16.u32[0];
  }

  else
  {
    Swift::UInt v17 = v7;
    uint64_t v18 = 0LL;
  }

  unint64_t v19 = v15 - v18;
  unint64_t v20 = (v1 >> v17) & 1;
  if (v19 <= v20 && (v19 < v20 ? (Swift::UInt v21 = v17) : (Swift::UInt v21 = v17 + 1), ((v1 >> v21) & 1) != 0))
  {
    Swift::Bool v22 = 0;
  }

  else
  {
    Swift::UInt v21 = 0LL;
    Swift::Bool v22 = 1;
  }

  result.value = v21;
  result.is_nil = v22;
  return result;
}

Swift::UInt_optional __swiftcall UInt16._bit(ranked:)(Swift::Int ranked)
{
  v2.i32[0] = v1;
  int8x8_t v3 = vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8((uint8x8_t)v3);
  __int16 v4 = v3.i16[0];
  BOOL v5 = v3.i32[0] <= (unsigned __int16)ranked;
  unsigned __int16 v6 = ranked - v4;
  v3.i32[0] = (v1 >> (8 * v5)) & 0xF;
  int8x8_t v7 = vcnt_s8(v3);
  v7.i16[0] = vaddlv_u8((uint8x8_t)v7);
  else {
    int v8 = 8 * v5;
  }
  else {
    __int16 v9 = 0;
  }
  unsigned __int16 v10 = v6 - v9;
  v7.i32[0] = (v1 >> v8) & 3;
  uint8x8_t v11 = (uint8x8_t)vcnt_s8(v7);
  v11.i16[0] = vaddlv_u8(v11);
  else {
    int v12 = v8;
  }
  else {
    __int16 v13 = 0;
  }
  unsigned __int16 v14 = v10 - v13;
  unsigned int v15 = (v1 >> v12) & 1;
  if (v15 >= v14)
  {
    int v18 = v12 | (v15 <= v14);
    int v19 = v1 >> v18;
    Swift::Bool v17 = (v19 & 1) == 0;
    Swift::UInt v16 = (v19 << 31 >> 31) & v18;
  }

  else
  {
    Swift::UInt v16 = 0LL;
    Swift::Bool v17 = 1;
  }

  result.value = v16;
  result.is_nil = v17;
  return result;
}

uint64_t BitArray.count.getter(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x8000000000000000LL) == 0) {
    return a2;
  }
  __break(1u);
  return result;
}

void sub_188D5A820(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = 0LL;
}

uint64_t sub_188D5A830()
{
  uint64_t result = *(void *)(v0 + 8);
  if (result < 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_188D5A840()
{
  uint64_t v1 = sub_188DD5A28(*v0, v0[1]);
  swift_bridgeObjectRelease();
  return v1;
}

void *sub_188D5A874(void *a1, _BYTE *a2, uint64_t a3)
{
  return sub_188DC5C78(a1, a2, a3, *v3, v3[1]);
}

uint64_t BitArray.startIndex.getter()
{
  return 0LL;
}

uint64_t BitArray.endIndex.getter(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x8000000000000000LL) == 0) {
    return a2;
  }
  __break(1u);
  return result;
}

Swift::Int __swiftcall BitArray.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1LL);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall BitArray.index(before:)(Swift::Int before)
{
  BOOL v1 = __OFSUB__(before, 1LL);
  Swift::Int result = before - 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall BitArray.formIndex(after:)(Swift::Int *after)
{
  if (__OFADD__(*after, 1LL)) {
    __break(1u);
  }
  else {
    ++*after;
  }
}

Swift::Void __swiftcall BitArray.formIndex(before:)(Swift::Int *before)
{
  if (__OFSUB__(*before, 1LL)) {
    __break(1u);
  }
  else {
    --*before;
  }
}

Swift::Int __swiftcall BitArray.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  BOOL v2 = __OFADD__(_, offsetBy);
  Swift::Int result = _ + offsetBy;
  if (v2) {
    __break(1u);
  }
  return result;
}

Swift::Int_optional __swiftcall BitArray.index(_:offsetBy:limitedBy:)( Swift::Int _, Swift::Int offsetBy, Swift::Int limitedBy)
{
  Swift::Int v3 = sub_188D5B190(_, offsetBy, limitedBy);
  Swift::Bool v5 = v4 & 1;
  result.value = v3;
  result.is_nil = v5;
  return result;
}

Swift::Int __swiftcall BitArray.distance(from:to:)(Swift::Int from, Swift::Int to)
{
  BOOL v2 = __OFSUB__(to, from);
  Swift::Int result = to - from;
  if (v2) {
    __break(1u);
  }
  return result;
}

unint64_t BitArray.subscript.getter(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (result < a3)
  {
    return (*(void *)(a2 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL) + 32) >> result) & 1LL;
  }

  __break(1u);
  return result;
}

uint64_t BitArray.subscript.setter(char a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    unint64_t v4 = a2;
    if (v3[1] > a2)
    {
      char v2 = a1;
      uint64_t v5 = *v3;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      *Swift::Int v3 = v5;
      if ((result & 1) != 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_9:
  uint64_t result = (uint64_t)sub_188CF73DC(v5);
  uint64_t v5 = result;
  *Swift::Int v3 = result;
LABEL_4:
  uint64_t v7 = *(void *)(v5 + 32 + 8 * (v4 >> 6));
  uint64_t v8 = v7 | (1LL << (v4 & 0x3F));
  if ((v2 & 1) == 0) {
    uint64_t v8 = v7 & ((-1LL << (v4 & 0x3F)) - 1);
  }
  *(void *)(v5 + 32 + 8 * (v4 >> 6)) = v8;
  *Swift::Int v3 = v5;
  return result;
}

uint64_t (*BitArray.subscript.modify( uint64_t (*result)(uint64_t a1), unint64_t a2))(uint64_t a1)
{
  *(void *)uint64_t result = a2;
  *((void *)result + _HashNode.ensureUnique(isUnique:)(v1 & 1) = v2;
  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (v2[1] > a2)
  {
    *((_BYTE *)result + 16) = (*(void *)(*v2 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL) + 32) >> a2) & 1;
    return sub_188D5AA40;
  }

  __break(1u);
  return result;
}

uint64_t sub_188D5AA40(uint64_t a1)
{
  return BitArray.subscript.setter(*(_BYTE *)(a1 + 16), *(void *)a1);
}

uint64_t sub_188D5AA68(char *a1, unint64_t *a2)
{
  return BitArray.subscript.setter(*a1, *a2);
}

uint64_t (*sub_188D5AA74( uint64_t (*result)(uint64_t a1), unint64_t *a2))(uint64_t a1)
{
  unint64_t v3 = *a2;
  *(void *)uint64_t result = v2;
  *((void *)result + _HashNode.ensureUnique(isUnique:)(v1 & 1) = v3;
  if ((v3 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (v3 < v2[1])
  {
    *((_BYTE *)result + 16) = (*(void *)(*v2 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8LL) + 32) >> v3) & 1;
    return sub_188D5AAC4;
  }

  __break(1u);
  return result;
}

uint64_t sub_188D5AAC4(uint64_t a1)
{
  return BitArray.subscript.setter(*(_BYTE *)(a1 + 16), *(void *)(a1 + 8));
}

uint64_t sub_188D5AAE8(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease();
}

void (*sub_188D5AB20( void (***a1)(unint64_t **a1, char a2), uint64_t *a2))(void *a1)
{
  unint64_t v4 = (void (**)(unint64_t **, char))malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_188D5AB98(v4, *a2, a2[1]);
  return sub_188D5AB6C;
}

void sub_188D5AB6C(void *a1)
{
  BOOL v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

void (*sub_188D5AB98( void (**a1)(unint64_t **a1, char a2), uint64_t a2, uint64_t a3))(unint64_t **a1, char a2)
{
  uint64_t result = (void (*)(unint64_t **, char))malloc(0x38uLL);
  *a1 = result;
  *((void *)result + 5) = a3;
  *((void *)result + 6) = v3;
  *((void *)result + 4) = a2;
  uint64_t v8 = v3[1];
  if (v8 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }

  if (a2 < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if (v8 >= a3)
  {
    __int16 v9 = result;
    uint64_t v10 = *v3;
    *(void *)__int16 v9 = a2;
    *((void *)v9 + _HashNode.ensureUnique(isUnique:)(v1 & 1) = a3;
    *((void *)v9 + 2) = v10;
    *((void *)v9 + 3) = v8;
    swift_bridgeObjectRetain();
    return sub_188D5AC24;
  }

void sub_188D5AC24(unint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = **a1;
  uint64_t v4 = (*a1)[1];
  uint64_t v5 = (*a1)[2];
  unint64_t v6 = (*a1)[3];
  uint64_t v7 = (*a1)[5];
  uint64_t v8 = (*a1)[6];
  unint64_t v9 = (*a1)[4];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    sub_188D5AE90(v8, v9, v7, v3, v4, v5, v6);
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_188D5AE90((*a1)[6], v9, v7, v3, v4, v5, v6);
  }

  swift_bridgeObjectRelease();
  free(v2);
}

uint64_t sub_188D5ACCC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_188D5B03C(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

unint64_t sub_188D5ACF4(unint64_t *a1, unint64_t *a2)
{
  return sub_188D72FE4(*a1, *a2);
}

uint64_t sub_188D5AD00()
{
  return sub_188DF7D24();
}

uint64_t sub_188D5AD20()
{
  return sub_188DF7D18();
}

void sub_188D5AD40(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  if (v2 < 0) {
    __break(1u);
  }
  else {
    *a1 = v2;
  }
}

_BYTE *sub_188D5AD54(_BYTE *result, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if ((*a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (v3 < v2[1])
  {
    *uint64_t result = (*(void *)(*v2 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8LL) + 32) >> v3) & 1;
    return nullsub_1;
  }

  __break(1u);
  return result;
}

uint64_t *sub_188D5ADA4@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2[1];
  if (v3 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }

  uint64_t v4 = *result;
  if (*result < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  uint64_t v5 = result[1];
  if (v3 >= v5)
  {
    uint64_t v6 = *v2;
    *a2 = v4;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v3;
    return (uint64_t *)swift_bridgeObjectRetain();
  }

void sub_188D5ADDC(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  if (v2 < 0)
  {
    __break(1u);
  }

  else
  {
    *a1 = 0LL;
    a1[1] = v2;
  }

BOOL sub_188D5ADF0()
{
  uint64_t v1 = *(void *)(v0 + 8);
  if ((v1 & 0x8000000000000000LL) == 0) {
    return v1 == 0;
  }
  __break(1u);
  return result;
}

uint64_t sub_188D5AE08@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_188D5B190(*a1, a2, *a3);
  *(void *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t *sub_188D5AE3C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = a2[1];
  if (*result >= *a2)
  {
    BOOL v5 = __OFSUB__(v2, v3);
    BOOL v4 = v2 - v3 < 0;
  }

  else
  {
    BOOL v5 = 0;
    BOOL v4 = 0;
  }

  if (v4 == v5) {
    __break(1u);
  }
  return result;
}

void *sub_188D5AE58(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < *result) {
    __break(1u);
  }
  return result;
}

void *sub_188D5AE74(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < result[1]) {
    __break(1u);
  }
  return result;
}

uint64_t sub_188D5AE90( uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  unint64_t v7 = *(void *)(result + 8);
  if ((v7 & 0x8000000000000000LL) != 0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  if ((a2 & 0x8000000000000000LL) != 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }

  if ((uint64_t)v7 < a3)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }

  unint64_t v9 = a4;
  if (a2 != a3)
  {
    uint64_t v26 = a5 - a4;
    if (a5 == a4)
    {
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }

    if ((uint64_t)a2 >= a3)
    {
LABEL_41:
      __break(1u);
      return result;
    }

    uint64_t v10 = 0LL;
    uint64_t v11 = *(void *)result;
    uint64_t v27 = a6 + 32;
    unint64_t v24 = a4 + a3 - a2;
    Swift::UInt v25 = (void *)result;
    if (a7 >= a4) {
      unint64_t v12 = a7 - a4;
    }
    else {
      unint64_t v12 = 0LL;
    }
    BOOL v13 = v7 >= a2;
    unint64_t v14 = v7 - a2;
    if (v13) {
      unint64_t v15 = v14;
    }
    else {
      unint64_t v15 = 0LL;
    }
    uint64_t v16 = ~a2 + a3;
    while (1)
    {
      unint64_t v17 = v9 + v10;
      if ((v9 & 0x8000000000000000LL) != 0) {
        goto LABEL_31;
      }
      if (v12 == v10) {
        goto LABEL_32;
      }
      unint64_t v18 = a2 + v10;
      if (((a2 + v10) & 0x8000000000000000LL) != 0) {
        goto LABEL_33;
      }
      if (v15 == v10) {
        goto LABEL_34;
      }
      unint64_t v19 = *(void *)(v27 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8LL));
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_188CF73DC(v11);
        uint64_t v11 = result;
      }

      uint64_t v20 = *(void *)(v11 + 32 + 8 * (v18 >> 6));
      uint64_t v21 = v20 & ((-1LL << (v18 & 0x3F)) - 1);
      uint64_t v22 = v20 | (1LL << (v18 & 0x3F));
      if (((v19 >> (v17 & 0x3F)) & 1) != 0) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = v21;
      }
      *(void *)(v11 + 32 + 8 * (v18 >> 6)) = v23;
      if (v16 == v10)
      {
        unint64_t v9 = v24;
        *Swift::UInt v25 = v11;
        goto LABEL_28;
      }

      if (v26 == ++v10) {
        goto LABEL_35;
      }
    }

    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

uint64_t sub_188D5B03C(uint64_t result)
{
  unint64_t v9 = (uint64_t (*)(BOOL *))result;
  unint64_t v3 = v1[1];
  if ((v3 & 0x8000000000000000LL) != 0)
  {
LABEL_17:
    __break(1u);
  }

  else
  {
    unint64_t v4 = 0LL;
    if (v3)
    {
      unint64_t v5 = v1[1];
      while (1)
      {
        if (v4 == v3)
        {
LABEL_16:
          __break(1u);
          goto LABEL_17;
        }

        uint64_t v6 = *v1 + 32LL;
        BOOL v11 = (*(void *)(v6 + 8 * (v4 >> 6)) & (1LL << v4)) != 0;
        uint64_t result = v9(&v11);
        if (v2) {
          return v4;
        }
        if ((result & 1) != 0) {
          break;
        }
        uint64_t v1 = v8;
LABEL_13:
      }

      while ((uint64_t)v4 < (uint64_t)--v5)
      {
        if (v5 >= v3)
        {
          __break(1u);
          goto LABEL_16;
        }

        BOOL v10 = (*(void *)(v6 + 8 * (v5 >> 6)) & (1LL << v5)) != 0;
        uint64_t result = v9(&v10);
        if ((result & 1) == 0)
        {
          uint64_t v1 = v8;
          char v7 = (*(void *)(v6 + 8 * (v4 >> 6)) & (1LL << v4)) != 0;
          BitArray.subscript.setter((*(void *)(v6 + 8 * (v5 >> 6)) & (1LL << v5)) != 0, v4);
          uint64_t result = BitArray.subscript.setter(v7, v5);
          goto LABEL_13;
        }
      }
    }

    return v4;
  }

  return result;
}

uint64_t sub_188D5B190(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
    goto LABEL_12;
  }

  if (a2 >= 1)
  {
    return 0LL;
  }

  if (v3 <= 0 && v3 > a2) {
    return 0LL;
  }
LABEL_9:
  BOOL v4 = __OFADD__(result, a2);
  result += a2;
  if (v4) {
LABEL_12:
  }
    __break(1u);
  return result;
}

uint64_t sub_188D5B1E4()
{
  return sub_188D2BAFC(&qword_18C74A8A8, &qword_18C74A8B0, MEMORY[0x189619678]);
}

unint64_t sub_188D5B214()
{
  unint64_t result = qword_18C74A8B8;
  if (!qword_18C74A8B8)
  {
    unint64_t result = MEMORY[0x1895D7620](&protocol conformance descriptor for BitArray, &type metadata for BitArray);
    atomic_store(result, (unint64_t *)&qword_18C74A8B8);
  }

  return result;
}

uint64_t sub_188D5B258()
{
  return sub_188D5B4C8(&qword_18C74A8C0, MEMORY[0x189618A58]);
}

uint64_t sub_188D5B27C()
{
  return sub_188D5B3F4(&qword_18C74A8C8, (uint64_t (*)(void))sub_188D5B2A8, MEMORY[0x18961A5E0]);
}

unint64_t sub_188D5B2A8()
{
  unint64_t result = qword_18C74A8D8;
  if (!qword_18C74A8D8)
  {
    unint64_t result = MEMORY[0x1895D7620](&protocol conformance descriptor for BitArray, &type metadata for BitArray);
    atomic_store(result, (unint64_t *)&qword_18C74A8D8);
  }

  return result;
}

unint64_t sub_188D5B2F0()
{
  unint64_t result = qword_18C74A8E0;
  if (!qword_18C74A8E0)
  {
    unint64_t result = MEMORY[0x1895D7620](&protocol conformance descriptor for BitArray, &type metadata for BitArray);
    atomic_store(result, (unint64_t *)&qword_18C74A8E0);
  }

  return result;
}

uint64_t sub_188D5B334()
{
  return sub_188D5B3F4(&qword_18C74A8E8, (uint64_t (*)(void))sub_188D5B360, MEMORY[0x18961A5D0]);
}

unint64_t sub_188D5B360()
{
  unint64_t result = qword_18C74A8F0;
  if (!qword_18C74A8F0)
  {
    unint64_t result = MEMORY[0x1895D7620](&protocol conformance descriptor for BitArray, &type metadata for BitArray);
    atomic_store(result, (unint64_t *)&qword_18C74A8F0);
  }

  return result;
}

uint64_t sub_188D5B3A4()
{
  return sub_188D5B4C8(&qword_18C74A8F8, MEMORY[0x189618A40]);
}

uint64_t sub_188D5B3C8()
{
  return sub_188D5B3F4(&qword_18C74A900, (uint64_t (*)(void))sub_188D5B214, MEMORY[0x18961A5C8]);
}

uint64_t sub_188D5B3F4(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C74A8D0);
    uint64_t v8 = a2();
    uint64_t result = MEMORY[0x1895D7620](a3, v7, &v8);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_188D5B460()
{
  unint64_t result = qword_18C74A908;
  if (!qword_18C74A908)
  {
    unint64_t result = MEMORY[0x1895D7620](&protocol conformance descriptor for BitArray, &type metadata for BitArray);
    atomic_store(result, (unint64_t *)&qword_18C74A908);
  }

  return result;
}

uint64_t sub_188D5B4A4()
{
  return sub_188D5B4C8((unint64_t *)&qword_18C74A910, MEMORY[0x189618A60]);
}

uint64_t sub_188D5B4C8(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C749F60);
    unint64_t v6 = sub_188D3E410();
    v7[0] = MEMORY[0x189618780];
    v7[1] = v6;
    uint64_t result = MEMORY[0x1895D7620](a2, v5, v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_188D5B534()
{
  return sub_188D2BAFC(qword_18C74A918, &qword_18C74A8D0, MEMORY[0x18961A5E8]);
}

uint64_t OrderedDictionary<>.encode(to:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v39 = a7;
  uint64_t v40 = a8;
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v34 = a2;
  uint64_t v37 = a9;
  uint64_t v12 = *(void *)(a6 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](a1);
  uint64_t v38 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1895F8858](v13);
  unint64_t v18 = (char *)v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v20 = sub_188DF8384();
  uint64_t v42 = *(void *)(v20 - 8);
  uint64_t v43 = v20;
  uint64_t v21 = MEMORY[0x1895F8858](v20);
  uint64_t v41 = (char *)v31 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v21);
  unint64_t v24 = (char *)v31 - v23;
  uint64_t v25 = a1[3];
  v31[1] = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v25);
  sub_188DF8AF8();
  uint64_t v44 = v34;
  uint64_t v45 = v32;
  uint64_t v46 = v33;
  uint64_t v47 = 0LL;
  uint64_t v40 = type metadata accessor for OrderedDictionary.Iterator(0LL, a5, a6, v40);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v35 = v24;
  for (uint64_t i = TupleTypeMetadata2; ; TupleTypeMetadata2 = i)
  {
    uint64_t v26 = v41;
    OrderedDictionary.Iterator.next()(v40, v41);
    (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v24, v26, v43);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48LL))( v24,  1LL,  TupleTypeMetadata2) == 1) {
      break;
    }
    uint64_t v27 = &v24[*(int *)(TupleTypeMetadata2 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v24, a5);
    uint64_t v28 = v38;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v38, v27, a6);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v48, v49);
    uint64_t v29 = v50;
    sub_188DF8930();
    if (v29)
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v28, a6);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, a5);
      break;
    }

    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v48, v49);
    sub_188DF8930();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v28, a6);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, a5);
    uint64_t v50 = 0LL;
    unint64_t v24 = v35;
  }

  swift_release();
  swift_release();
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
}

uint64_t sub_188D5B8B0(void *a1, uint64_t *a2, uint64_t a3)
{
  return OrderedDictionary<>.encode(to:)( a1,  *v3,  v3[1],  v3[2],  a2[2],  a2[3],  *(void *)(a3 - 8),  a2[4],  *(void *)(a3 - 16));
}

uint64_t OrderedDictionary<>.init(from:)( char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v58 = a6;
  uint64_t v59 = a4;
  uint64_t v53 = a5;
  uint64_t v51 = sub_188DF8648();
  uint64_t v50 = *(void *)(v51 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](v51);
  uint64_t v49 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v60 = a3;
  uint64_t v11 = *(void *)(a3 - 8);
  uint64_t v12 = MEMORY[0x1895F8858](v9);
  uint64_t v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = MEMORY[0x1895F8858](v12);
  uint64_t v17 = (char *)&v47 - v16;
  uint64_t v52 = a2;
  uint64_t v18 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](v15);
  uint64_t v20 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, *((void *)a1 + 3));
  uint64_t v21 = v61;
  sub_188DF8AD4();
  if (v21)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return (uint64_t)v14;
  }

  unint64_t v61 = v17;
  uint64_t v54 = v14;
  uint64_t v55 = v11;
  uint64_t v56 = v18;
  unint64_t v57 = v20;
  char v48 = a1;
  uint64_t v22 = v52;
  uint64_t v23 = v53;
  uint64_t v14 = (char *)OrderedSet.init()();
  uint64_t v25 = v24;
  sub_188DF80C0();
  uint64_t v26 = sub_188DF86C0();
  uint64_t v67 = v14;
  uint64_t v68 = v25;
  uint64_t v69 = v26;
  __swift_project_boxed_opaque_existential_1(v65, v66);
  if ((sub_188DF8918() & 1) != 0)
  {
LABEL_4:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
    return (uint64_t)v14;
  }

  while (1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v65, v66);
    sub_188DF8900();
    swift_retain();
    swift_retain();
    OrderedSet._find(_:)();
    char v29 = v28;
    uint64_t v31 = v30;
    swift_release();
    swift_release();
    __swift_project_boxed_opaque_existential_1(v65, v66);
    if ((v29 & 1) == 0) {
      break;
    }
    if ((sub_188DF8918() & 1) != 0)
    {
      uint64_t v44 = sub_188DF8654();
      swift_allocError();
      uint64_t v46 = v45;
      __swift_project_boxed_opaque_existential_1(v65, v66);
      sub_188DF88DC();
      sub_188DF863C();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v44 - 8) + 104LL))( v46,  *MEMORY[0x189619360],  v44);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v57, v22);
      uint64_t v14 = v48;
      goto LABEL_13;
    }

    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v65, v66);
    uint64_t v32 = v60;
    sub_188DF8900();
    uint64_t v33 = v56;
    type metadata accessor for OrderedSet(0LL, v22, v23, v34);
    uint64_t v35 = (uint64_t)v57;
    OrderedSet._appendNew(_:in:)((uint64_t)v57, v31);
    uint64_t v36 = v55;
    (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v54, v61, v32);
    sub_188DF8738();
    uint64_t v37 = v61;
    sub_188DF86FC();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v32);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v35, v22);
    __swift_project_boxed_opaque_existential_1(v65, v66);
    if ((sub_188DF8918() & 1) != 0)
    {
      uint64_t v14 = v67;
      goto LABEL_4;
    }
  }

  sub_188DF88DC();
  unint64_t v63 = 0LL;
  unint64_t v64 = 0xE000000000000000LL;
  sub_188DF8600();
  swift_bridgeObjectRelease();
  unint64_t v63 = 0xD000000000000018LL;
  unint64_t v64 = 0x8000000188E005F0LL;
  __swift_project_boxed_opaque_existential_1(v65, v66);
  uint64_t result = sub_188DF88E8();
  uint64_t v14 = v48;
  if (!__OFSUB__(result, 1LL))
  {
    uint64_t v62 = result - 1;
    sub_188DF88D0();
    sub_188DF7EE0();
    swift_bridgeObjectRelease();
    uint64_t v38 = v49;
    sub_188DF863C();
    uint64_t v39 = sub_188DF8654();
    swift_allocError();
    uint64_t v41 = v40;
    uint64_t v42 = v50;
    uint64_t v43 = v51;
    (*(void (**)(uint64_t, char *, uint64_t))(v50 + 16))(v40, v38, v51);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v39 - 8) + 104LL))( v41,  *MEMORY[0x189619360],  v39);
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v38, v43);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v57, v22);
LABEL_13:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    swift_release();
    swift_release();
    swift_release();
    return (uint64_t)v14;
  }

  __break(1u);
  return result;
}

uint64_t sub_188D5BEBC@<X0>(char *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = OrderedDictionary<>.init(from:)(a1, a2[2], a2[3], *(void *)(a3 - 8), a2[4], *(void *)(a3 - 16));
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
  }

  return result;
}

uint64_t BigString.debugDescription.getter()
{
  uint64_t v1 = sub_188DF7DFC();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_188D5BF48()
{
  __int128 v1 = v0[1];
  v4[0] = *v0;
  v4[1] = v1;
  void v4[2] = v0[2];
  sub_188D07F48((uint64_t)v4);
  _sSS19CollectionsInternalEySSAA9BigStringVcfC_0(v4);
  uint64_t v2 = sub_188DF7DFC();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t _HashNodeHeader.init(byteCapacity:)()
{
  return 0LL;
}

uint64_t _HashNodeHeader.byteCapacity.getter(uint64_t a1, unsigned int a2)
{
  return a2;
}

unint64_t _HashNodeHeader.bytesFree.getter(uint64_t a1, unint64_t a2)
{
  return HIDWORD(a2);
}

BOOL _HashNodeHeader.hasItems.getter(int a1)
{
  return a1 != 0;
}

BOOL _HashNodeHeader.hasChildren.getter(uint64_t a1)
{
  return (_DWORD)a1 != HIDWORD(a1) && HIDWORD(a1) != 0;
}

uint64_t _HashNodeHeader.itemCount.getter(uint64_t result)
{
  uint8x8_t v1 = (uint8x8_t)vcnt_s8((int8x8_t)result);
  v1.i16[0] = vaddlv_u8(v1);
  if ((_DWORD)result == HIDWORD(result)) {
    return result;
  }
  else {
    return v1.u32[0];
  }
}

uint64_t _HashNodeHeader.childCount.getter(uint64_t a1, int8x8_t a2)
{
  if ((_DWORD)a1 == HIDWORD(a1)) {
    return 0LL;
  }
  a2.i32[0] = HIDWORD(a1);
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(a2);
  v3.i16[0] = vaddlv_u8(v3);
  return v3.u32[0];
}

uint64_t _HashNodeHeader.bytesFree.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 12) = result;
  return result;
}

BOOL _HashNodeHeader.isCollisionNode.getter(unint64_t a1)
{
  return (a1 & HIDWORD(a1)) != 0;
}

uint64_t _HashNodeHeader.collisionCount.getter(uint64_t result)
{
  return result;
}

uint64_t _HashNodeHeader.collisionCount.setter(uint64_t result)
{
  *uint64_t v1 = result;
  v1[1] = result;
  return result;
}

uint64_t _HashNodeHeader.childrenEndSlot.getter(unint64_t a1)
{
  uint8x8_t v1 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(a1));
  v1.i16[0] = vaddlv_u8(v1);
  if ((_DWORD)a1 == HIDWORD(a1)) {
    return 0LL;
  }
  else {
    return v1.u32[0];
  }
}

uint64_t _HashNodeHeader.itemsEndSlot.getter(uint64_t result)
{
  uint8x8_t v1 = (uint8x8_t)vcnt_s8((int8x8_t)result);
  v1.i16[0] = vaddlv_u8(v1);
  if ((_DWORD)result == HIDWORD(result)) {
    return result;
  }
  else {
    return v1.u32[0];
  }
}

Swift::Void __swiftcall _HashNodeHeader.clear()()
{
  *(void *)uint64_t v0 = 0LL;
  *(_DWORD *)(v0 + 12) = *(_DWORD *)(v0 + 8);
}

BOOL _HashNodeHeader.hasSingletonItem.getter(uint64_t a1)
{
  BOOL v1 = (a1 & ((_DWORD)a1 - 1)) == 0;
  if (HIDWORD(a1)) {
    BOOL v1 = 0;
  }
  if (!(_DWORD)a1) {
    BOOL v1 = 0;
  }
  if ((_DWORD)a1 == HIDWORD(a1)) {
    return (_DWORD)a1 == 1;
  }
  else {
    return v1;
  }
}

BOOL _HashNodeHeader.hasSingletonChild.getter(uint64_t a1)
{
  if (HIDWORD(a1)) {
    BOOL v1 = (HIDWORD(a1) & (HIDWORD(a1) - 1)) == 0;
  }
  else {
    BOOL v1 = 0;
  }
  return !(_DWORD)a1 && v1;
}

uint64_t _HashNodeHeader.itemMap.setter(uint64_t result)
{
  *BOOL v1 = result;
  return result;
}

uint64_t (*_HashNodeHeader.itemMap.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

unint64_t _HashNodeHeader.childMap.getter(unint64_t a1)
{
  return HIDWORD(a1);
}

uint64_t _HashNodeHeader.childMap.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 4) = result;
  return result;
}

uint64_t (*_HashNodeHeader.childMap.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t _HashNodeHeader._byteCapacity.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _HashNodeHeader._byteCapacity.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*_HashNodeHeader._byteCapacity.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

unint64_t _HashNodeHeader._bytesFree.getter(uint64_t a1, unint64_t a2)
{
  return HIDWORD(a2);
}

uint64_t _HashNodeHeader._bytesFree.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 12) = result;
  return result;
}

uint64_t (*_HashNodeHeader._bytesFree.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

void *(*_HashNodeHeader.bytesFree.modify(void *a1))(void *result)
{
  *a1 = *(unsigned int *)(v1 + 12);
  a1[1] = v1;
  return sub_188D4BEC8;
}

BOOL _HashNodeHeader.isEmpty.getter(uint64_t a1)
{
  return a1 == 0;
}

int *(*_HashNodeHeader.collisionCount.modify(void *a1))(int *result)
{
  *a1 = *v1;
  a1[1] = v1;
  return sub_188D4BEF0;
}

__n128 __swift_memcpy16_4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

ValueMetadata *type metadata accessor for _HashNodeHeader()
{
  return &type metadata for _HashNodeHeader;
}

Swift::Void __swiftcall TreeSet._invalidateIndices()()
{
}

BOOL TreeSet.isEmpty.getter(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

uint64_t TreeSet.count.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

BOOL TreeSet._isValid(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return *a1 == a2 && a1[1] == a4;
}

uint64_t TreeSet.Index._root.getter()
{
  return *(void *)v0;
}

uint64_t TreeSet.Index._version.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t TreeSet.Index._version.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*TreeSet.Index._version.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t TreeSet.Index._path.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t TreeSet.Index._path.setter(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + ++*(void *)(v0 + 16) = result;
  *(void *)(v3 + 24) = a2;
  *(_DWORD *)(v3 + 32) = a3;
  *(_BYTE *)(v3 + 36) = BYTE4(a3);
  *(_BYTE *)(v3 + 37) = BYTE5(a3) & 1;
  return result;
}

uint64_t (*TreeSet.Index._path.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t TreeSet.Index.init(_root:version:path:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = result;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + ++*(void *)(v0 + 16) = a3;
  *(void *)(a6 + 24) = a4;
  *(_DWORD *)(a6 + 32) = a5;
  *(_BYTE *)(a6 + 36) = BYTE4(a5);
  *(_BYTE *)(a6 + 37) = BYTE5(a5) & 1;
  return result;
}

uint64_t static TreeSet.Index.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (*(void *)result == *(void *)a2 && *(void *)(result + 8) == *(void *)(a2 + 8))
  {
    if (*(unsigned __int8 *)(result + 36) == *(unsigned __int8 *)(a2 + 36)
      && *(void *)(result + 16) == *(void *)(a2 + 16)
      && *(_DWORD *)(result + 32) == *(_DWORD *)(a2 + 32))
    {
      return (((*(_BYTE *)(result + 37) & 1) == 0) ^ *(unsigned __int8 *)(a2 + 37)) & 1;
    }

    else
    {
      return 0LL;
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

BOOL static TreeSet.Index.< infix(_:_:)(BOOL result, uint64_t a2)
{
  if (*(void *)result == *(void *)a2 && *(void *)(result + 8) == *(void *)(a2 + 8)) {
    return sub_188D71CE0( *(void *)(result + 16),  *(_DWORD *)(result + 32),  *(_BYTE *)(result + 36),  *(_BYTE *)(result + 37) & 1,  *(void *)(a2 + 16),  *(_DWORD *)(a2 + 32),  *(_BYTE *)(a2 + 36),  *(_BYTE *)(a2 + 37) & 1);
  }
  __break(1u);
  return result;
}

uint64_t TreeSet.Index.hash(into:)()
{
  return sub_188DF8A5C();
}

uint64_t TreeSet.Index.hashValue.getter()
{
  return sub_188DF8A98();
}

uint64_t sub_188D5C41C()
{
  return sub_188DF8A98();
}

uint64_t TreeSet.Index.description.getter()
{
  uint64_t v1 = 0x10000000000LL;
  if (!*(_BYTE *)(v0 + 37)) {
    uint64_t v1 = 0LL;
  }
  return _UnsafePath.description.getter( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(unsigned int *)(v0 + 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 36) << 32) | v1);
}

uint64_t TreeSet.Index.debugDescription.getter()
{
  uint64_t v1 = 0x10000000000LL;
  if (!*(_BYTE *)(v0 + 37)) {
    uint64_t v1 = 0LL;
  }
  return _UnsafePath.description.getter( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(unsigned int *)(v0 + 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 36) << 32) | v1);
}

uint64_t TreeSet.startIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result = swift_beginAccess();
  if (*(_DWORD *)(a1 + 16))
  {
    char v7 = 0;
    char v8 = 1;
    uint64_t v9 = a1;
  }

  else
  {
    char v7 = 0;
    uint64_t v9 = a1;
    do
    {
      uint64_t result = swift_beginAccess();
      int v10 = *(_DWORD *)(v9 + 20);
      BOOL v11 = *(_DWORD *)(v9 + 16) == v10 || v10 == 0;
      char v8 = !v11;
      if (v11) {
        break;
      }
      uint64_t v9 = *(void *)(v9 + 32);
      uint64_t result = swift_beginAccess();
      v7 += 5;
    }

    while (!*(_DWORD *)(v9 + 16));
  }

  *(void *)a3 = a1;
  *(void *)(a3 + 8) = a2;
  *(void *)(a3 + ++*(void *)(v0 + 16) = 0LL;
  *(void *)(a3 + 24) = v9;
  *(_DWORD *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 36) = v7;
  *(_BYTE *)(a3 + 37) = v8;
  return result;
}

uint64_t TreeSet.endIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result = swift_beginAccess();
  uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(a1 + 20));
  v7.i16[0] = vaddlv_u8(v7);
  __int32 v8 = v7.i32[0];
  if (*(_DWORD *)(a1 + 16) == *(_DWORD *)(a1 + 20)) {
    __int32 v8 = 0;
  }
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = a2;
  *(void *)(a3 + ++*(void *)(v0 + 16) = 0LL;
  *(void *)(a3 + 24) = a1;
  *(_DWORD *)(a3 + 32) = v8;
  *(_WORD *)(a3 + 36) = 0;
  return result;
}

uint64_t TreeSet.subscript.getter@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  if (*(void *)result != a2 || *(void *)(result + 8) != a3 || (*(_BYTE *)(result + 37) & 1) == 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v11 = result;
    uint64_t v12 = MEMORY[0x18961AFC8] + 8LL;
    uint64_t v13 = nullsub_1(*(void *)(result + 24) + 16LL, *(void *)(result + 24) + 32LL, a4, MEMORY[0x18961AFC8] + 8LL, a5);
    uint64_t v15 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(*(unsigned int *)(v11 + 32), v13, v14, a4, v12, a5);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16LL))(a6, v15, a4);
  }

  return result;
}

uint64_t TreeSet.formIndex(after:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)result == a2 && *(void *)(result + 8) == a4)
  {
    uint64_t result = _UnsafePath.findSuccessorItem(under:)(a2);
    if ((result & 1) != 0) {
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

__n128 TreeSet.index(after:)@<Q0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)a1;
  *(_OWORD *)&_BYTE v12[16] = v6;
  *(void *)&v12[30] = *(void *)(a1 + 30);
  TreeSet.formIndex(after:)((uint64_t)v12, a2, a3, a4);
  uint64_t v7 = *(void *)&v12[24];
  int v8 = *(_DWORD *)&v12[32];
  char v9 = v12[36];
  char v10 = v12[37];
  __n128 result = *(__n128 *)&v12[8];
  *(void *)a5 = *(void *)v12;
  *(__n128 *)(a5 + 8) = result;
  *(void *)(a5 + 24) = v7;
  *(_DWORD *)(a5 + 32) = v8;
  *(_BYTE *)(a5 + 36) = v9;
  *(_BYTE *)(a5 + 37) = v10;
  return result;
}

uint64_t TreeSet.distance(from:to:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)result == a3 && *(void *)(result + 8) == a5 && *(void *)a2 == a3 && *(void *)(a2 + 8) == a5)
  {
    uint64_t v8 = 0x10000000000LL;
    if (*(_BYTE *)(result + 37)) {
      uint64_t v9 = 0x10000000000LL;
    }
    else {
      uint64_t v9 = 0LL;
    }
    if (!*(_BYTE *)(a2 + 37)) {
      uint64_t v8 = 0LL;
    }
    return _RawHashNode.distance(_:from:to:)( 0LL,  *(void *)(result + 16),  *(void *)(result + 24),  *(unsigned int *)(result + 32) | ((unint64_t)*(unsigned __int8 *)(result + 36) << 32) | v9,  *(void *)(a2 + 16),  *(void *)(a2 + 24),  *(unsigned int *)(a2 + 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 36) << 32) | v8,  a3,  a4);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t TreeSet.index(_:offsetBy:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  if (*(void *)result == a3 && *(void *)(result + 8) == a4)
  {
    __int128 v8 = *(_OWORD *)(result + 16);
    *(_OWORD *)uint64_t v15 = *(_OWORD *)result;
    *(_OWORD *)&v15[16] = v8;
    *(void *)&v15[30] = *(void *)(result + 30);
    uint64_t v14 = a2;
    __n128 result = sub_188D71600(0, (uint64_t)&v15[16], &v14, a3);
    if ((result & 1) != 0 || a2 >= 1 && !v14)
    {
      uint64_t v9 = *(void *)&v15[24];
      int v10 = *(_DWORD *)&v15[32];
      char v11 = v15[36];
      char v12 = v15[37];
      __int128 v13 = *(_OWORD *)&v15[8];
      *(void *)a5 = *(void *)v15;
      *(_OWORD *)(a5 + 8) = v13;
      *(void *)(a5 + 24) = v9;
      *(_DWORD *)(a5 + 32) = v10;
      *(_BYTE *)(a5 + 36) = v11;
      *(_BYTE *)(a5 + 37) = v12;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t TreeSet.index(_:offsetBy:limitedBy:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  if (*(void *)result == a4 && *(void *)(result + 8) == a5 && *(void *)a3 == a4 && *(void *)(a3 + 8) == a5)
  {
    *(_OWORD *)uint64_t v16 = *(_OWORD *)result;
    *(_OWORD *)&_BYTE v16[16] = *(_OWORD *)(result + 16);
    *(void *)&v16[30] = *(void *)(result + 30);
    if (*(_BYTE *)(a3 + 37)) {
      uint64_t v10 = 0x10000000000LL;
    }
    else {
      uint64_t v10 = 0LL;
    }
    __n128 result = _RawHashNode.seek(_:_:offsetBy:limitedBy:)( 0,  (uint64_t)&v16[16],  a2,  *(void *)(a3 + 16),  *(void *)(a3 + 24),  *(unsigned int *)(a3 + 32) | ((unint64_t)*(unsigned __int8 *)(a3 + 36) << 32) | v10,  a4);
    if ((result & 1) != 0)
    {
      uint64_t v11 = *(void *)v16;
      __int128 v14 = *(_OWORD *)&v16[8];
      uint64_t v12 = *(void *)&v16[24];
      if (v16[37]) {
        uint64_t v15 = 0x10000000000LL;
      }
      else {
        uint64_t v15 = 0LL;
      }
      unint64_t v13 = *(unsigned int *)&v16[32] | ((unint64_t)v16[36] << 32) | v15;
    }

    else
    {
      if ((result & 0x100) == 0) {
        goto LABEL_23;
      }
      uint64_t v11 = 0LL;
      uint64_t v12 = 0LL;
      unint64_t v13 = 0LL;
      __int128 v14 = 0uLL;
    }

    *(void *)a6 = v11;
    *(_OWORD *)(a6 + 8) = v14;
    *(void *)(a6 + 24) = v12;
    *(_DWORD *)(a6 + 32) = v13;
    *(_WORD *)(a6 + 36) = WORD2(v13);
    return result;
  }

  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t TreeSet._index(of:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14 = sub_188DF5A9C();
  uint64_t result = _HashNode.path(to:_:)(a1, v14, a2, a3, a5, MEMORY[0x18961AFC8] + 8LL, a6);
  uint64_t v18 = v17 & 0xFFFFFFFFFFLL | (((v17 >> 40) & 1) << 40);
  if (v16) {
    uint64_t v19 = a2;
  }
  else {
    uint64_t v19 = 0LL;
  }
  if (v16) {
    uint64_t v20 = a4;
  }
  else {
    uint64_t v20 = 0LL;
  }
  if (v16) {
    uint64_t v21 = result;
  }
  else {
    uint64_t v21 = 0LL;
  }
  *(void *)a7 = v19;
  *(void *)(a7 + 8) = v20;
  if (!v16) {
    uint64_t v18 = 0LL;
  }
  *(void *)(a7 + ++*(void *)(v0 + 16) = v21;
  *(void *)(a7 + 24) = v16;
  *(_DWORD *)(a7 + 32) = v18;
  *(_WORD *)(a7 + 36) = WORD2(v18);
  return result;
}

double _s19CollectionsInternal7TreeSetV30_customIndexOfEquatableElementyAC0F0Vyx_GSgSgxF_0@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v8 = v13;
  __int16 v9 = v14;
  double result = *(double *)v12;
  __int128 v11 = v12[1];
  *(_OWORD *)a7 = v12[0];
  *(_OWORD *)(a7 + ++*(void *)(v0 + 16) = v11;
  *(_WORD *)(a7 + 36) = v9;
  *(_DWORD *)(a7 + 32) = v8;
  return result;
}

uint64_t _s19CollectionsInternal7TreeSetV10firstIndex2ofAC0F0Vyx_GSgx_tF_0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11 = sub_188DF8384();
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(void *)(v11 - 8) + 32LL))(a7, v13, v11);
}

void *TreeSet._failEarlyRangeCheck(_:bounds:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_188D5CF30(a1, a3, a4, a5);
}

{
  return sub_188D5CF48(a1, a3, a4, a5);
}

uint64_t sub_188D5CB54@<X0>(uint64_t a1@<X8>)
{
  return TreeSet.startIndex.getter(*v1, v1[2], a1);
}

uint64_t sub_188D5CB60@<X0>(uint64_t a1@<X8>)
{
  return TreeSet.endIndex.getter(*v1, v1[2], a1);
}

void (*sub_188D5CB6C(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v7 = (char *)malloc(0x50uLL);
  *a1 = v7;
  __int128 v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
  *((_OWORD *)v7 + _HashNode.ensureUnique(isUnique:)(v1 & 1) = v8;
  *(void *)(v7 + 30) = *(void *)(a2 + 30);
  *((void *)v7 + 9) = sub_188D5CC10( (uint64_t *)v7 + 5,  (uint64_t)v7,  *v3,  v3[1],  v3[2],  *(void *)(a3 + 16),  *(void *)(a3 + 24));
  return sub_188D5CBE4;
}

void sub_188D5CBE4(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  (*(void (**)(uint64_t))(*(void *)a1 + 72LL))(*(void *)a1 + 40LL);
  free(v1);
}

void (*sub_188D5CC10( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))(void *a1)
{
  uint64_t v13 = *(void *)(a6 - 8);
  *a1 = a6;
  a1[1] = v13;
  __int16 v14 = malloc(*(void *)(v13 + 64));
  a1[2] = (uint64_t)v14;
  TreeSet.subscript.getter(a2, a3, a5, a6, a7, (uint64_t)v14);
  return sub_188D5CC98;
}

void sub_188D5CC98(void *a1)
{
  uint64_t v1 = (void *)a1[2];
  (*(void (**)(void *, void))(a1[1] + 8LL))(v1, *a1);
  free(v1);
}

BOOL sub_188D5CCD0(uint64_t a1)
{
  return TreeSet.isEmpty.getter(a1, *(void *)(v1 + 8));
}

uint64_t sub_188D5CCD8()
{
  return *(void *)(v0 + 8);
}

double sub_188D5CCE4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = v10;
  __int16 v6 = v11;
  double result = *(double *)v9;
  __int128 v8 = v9[1];
  *(_OWORD *)a3 = v9[0];
  *(_OWORD *)(a3 + ++*(void *)(v0 + 16) = v8;
  *(_WORD *)(a3 + 36) = v6;
  *(_DWORD *)(a3 + 32) = v5;
  return result;
}

double sub_188D5CD38@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result = *(double *)&v7;
  __int128 v6 = *(_OWORD *)v8;
  *(_OWORD *)a3 = v7;
  *(_OWORD *)(a3 + ++*(void *)(v0 + 16) = v6;
  *(void *)(a3 + 30) = *(void *)&v8[14];
  return result;
}

uint64_t sub_188D5CD80@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = *v5;
  uint64_t v8 = v5[2];
  uint64_t v9 = *(void *)(a4 + 16);
  uint64_t v10 = *(void *)(a4 + 24);
  TreeSet.index(_:offsetBy:limitedBy:)(a1, a2, a3, v7, v8, (uint64_t)v14);
  type metadata accessor for TreeSet.Index(255LL, v9, v10, v11);
  uint64_t v12 = sub_188DF8384();
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(void *)(v12 - 8) + 32LL))(a5, v14, v12);
}

uint64_t sub_188D5CDF8(uint64_t a1, uint64_t a2)
{
  return TreeSet.distance(from:to:)(a1, a2, *v2, v2[1], v2[2]);
}

void *sub_188D5CE08(__int128 *a1)
{
  __int128 v2 = a1[1];
  __int128 v4 = *a1;
  v5[0] = v2;
  *(void *)((char *)v5 + 14) = *(void *)((char *)a1 + 30);
  return sub_188D5CF30(&v4, *v1, v1[1], v1[2]);
}

void *sub_188D5CE48(_OWORD *a1)
{
  __int128 v2 = a1[3];
  _OWORD v5[2] = a1[2];
  v6[0] = v2;
  *(_OWORD *)((char *)v6 + 14) = *(_OWORD *)((char *)a1 + 62);
  __int128 v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  return sub_188D5CF48(v5, *v1, v1[1], v1[2]);
}

__n128 sub_188D5CE90@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[3];
  int v5 = *((_DWORD *)a1 + 8);
  char v6 = *((_BYTE *)a1 + 36);
  char v7 = *((_BYTE *)a1 + 37);
  uint64_t v8 = *v2;
  uint64_t v9 = v2[1];
  uint64_t v10 = v2[2];
  uint64_t v16 = *a1;
  __n128 v17 = *(__n128 *)(a1 + 1);
  uint64_t v18 = v4;
  int v19 = v5;
  char v20 = v6;
  char v21 = v7;
  TreeSet.formIndex(after:)((uint64_t)&v16, v8, v9, v10);
  uint64_t v11 = v18;
  int v12 = v19;
  char v13 = v20;
  char v14 = v21;
  __n128 result = v17;
  *(void *)a2 = v16;
  *(__n128 *)(a2 + 8) = result;
  *(void *)(a2 + 24) = v11;
  *(_DWORD *)(a2 + 32) = v12;
  *(_BYTE *)(a2 + 36) = v13;
  *(_BYTE *)(a2 + 37) = v14;
  return result;
}

uint64_t sub_188D5CF24(uint64_t a1)
{
  return TreeSet.formIndex(after:)(a1, *v1, v1[1], v1[2]);
}

void *sub_188D5CF30(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*result != a2 || result[1] != a4) {
    __break(1u);
  }
  return result;
}

void *sub_188D5CF48(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*result != a2 || result[1] != a4 || result[5] != a2 || result[6] != a4) {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for TreeSet.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TreeSet.Index);
}

void sub_188D5CF78()
{
}

void sub_188D5CF88()
{
}

void sub_188D5CF98()
{
}

void sub_188D5CFA8()
{
}

void sub_188D5CFB8()
{
}

__n128 __swift_memcpy38_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 30) = *(void *)(a2 + 30);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + ++*(void *)(v0 + 16) = v3;
  return result;
}

uint64_t sub_188D5CFDC(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 38)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t sub_188D5D024(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + ++*(void *)(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_WORD *)(result + 36) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 38) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 38) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t Heap._UnsafeHandle.buffer.setter(uint64_t result, uint64_t a2)
{
  *uint64_t v2 = result;
  v2[1] = a2;
  return result;
}

uint64_t (*Heap._UnsafeHandle.buffer.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

void *Heap._update<A>(_:)(void (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  sub_188DF8738();
  sub_188DF86D8();
  uint64_t v6 = *(void *)(*(void *)v3 + 16LL);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL);
  v9[0] = *(void *)v3 + ((v7 + 32) & ~v7);
  v9[1] = v6;
  a1(v9[0], v6);
  return sub_188D1A35C(v9, v9[0], v6);
}

uint64_t Heap._UnsafeHandle.count.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t Heap._UnsafeHandle.subscript.getter@<X0>( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16LL))( a4,  a2 + *(void *)(*(void *)(a3 - 8) + 72LL) * a1,  a3);
}

void (*Heap._UnsafeHandle.subscript.modify(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_188DF8408();
  return sub_188D4D464;
}

uint64_t Heap._UnsafeHandle.subscript.setter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 40LL))( a4 + *(void *)(*(void *)(a6 - 8) + 72LL) * a2,  a1,  a6);
}

uint64_t Heap._UnsafeHandle.ptr(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_188DF7D9C();
  if (result) {
    result += *(void *)(*(void *)(a5 - 8) + 72LL) * a1;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t Heap._UnsafeHandle.extract(_:)()
{
  uint64_t result = sub_188DF7D9C();
  if (result) {
    return sub_188DF8378();
  }
  __break(1u);
  return result;
}

uint64_t Heap._UnsafeHandle.initialize(_:to:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = sub_188DF7D9C();
  if (result)
  {
    uint64_t v13 = result + *(void *)(v9 + 72) * a1;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a3, a6);
    sub_188D8A1FC((uint64_t)v11, v13, a6);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a3, a6);
  }

  else
  {
    __break(1u);
  }

  return result;
}

Swift::Void __swiftcall Heap._UnsafeHandle.swapAt(_:_:)( CollectionsInternal::_HeapNode a1, CollectionsInternal::_HeapNode a2)
{
}

uint64_t Heap._UnsafeHandle.swapAt(_:with:)()
{
  return sub_188DF89E4();
}

CollectionsInternal::_HeapNode __swiftcall Heap._UnsafeHandle.minValue(_:_:)( CollectionsInternal::_HeapNode a1, CollectionsInternal::_HeapNode a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  Swift::Int level = a1.level;
  Swift::Int v25 = a2.level;
  Swift::Int offset = a2.offset;
  Swift::Int v7 = a1.offset;
  uint64_t v8 = *(void **)(v3 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](a1.offset);
  uint64_t v11 = (char *)&level - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = MEMORY[0x1895F8858](v9);
  uint64_t v14 = (char *)&level - v13;
  uint64_t v15 = v8[9];
  __n128 v17 = (void (*)(char *, uint64_t, uint64_t))v8[2];
  v17((char *)&level - v13, v16 + v15 * v12, v18);
  v17(v11, v5 + v15 * offset, v4);
  char v19 = sub_188DF7CC4();
  char v20 = (void (*)(char *, uint64_t))v8[1];
  v20(v11, v4);
  v20(v14, v4);
  if ((v19 & 1) != 0) {
    Swift::Int v21 = v7;
  }
  else {
    Swift::Int v21 = offset;
  }
  if ((v19 & 1) != 0) {
    Swift::Int v22 = level;
  }
  else {
    Swift::Int v22 = v25;
  }
  result.Swift::Int level = v22;
  result.Swift::Int offset = v21;
  return result;
}

CollectionsInternal::_HeapNode __swiftcall Heap._UnsafeHandle.maxValue(_:_:)( CollectionsInternal::_HeapNode a1, CollectionsInternal::_HeapNode a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  Swift::Int level = a1.level;
  Swift::Int v25 = a2.level;
  Swift::Int offset = a2.offset;
  Swift::Int v7 = a1.offset;
  uint64_t v8 = *(void **)(v3 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](a1.offset);
  uint64_t v11 = (char *)&level - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = MEMORY[0x1895F8858](v9);
  uint64_t v14 = (char *)&level - v13;
  uint64_t v15 = v8[9];
  __n128 v17 = (void (*)(char *, uint64_t, uint64_t))v8[2];
  v17((char *)&level - v13, v16 + v15 * v12, v18);
  v17(v11, v5 + v15 * offset, v4);
  char v19 = sub_188DF7CC4();
  char v20 = (void (*)(char *, uint64_t))v8[1];
  v20(v11, v4);
  v20(v14, v4);
  if ((v19 & 1) != 0) {
    Swift::Int v21 = offset;
  }
  else {
    Swift::Int v21 = v7;
  }
  if ((v19 & 1) != 0) {
    Swift::Int v22 = v25;
  }
  else {
    Swift::Int v22 = level;
  }
  result.Swift::Int level = v22;
  result.Swift::Int offset = v21;
  return result;
}

Swift::Void __swiftcall Heap._UnsafeHandle.bubbleUp(_:)(CollectionsInternal::_HeapNode a1)
{
  uint64_t v29 = v2;
  uint64_t v30 = v4;
  uint64_t v5 = v3;
  uint64_t v6 = v1;
  char level = a1.level;
  uint64_t offset = a1.offset;
  uint64_t v9 = *(void **)(v3 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](a1.offset);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = MEMORY[0x1895F8858](v10);
  uint64_t v15 = (char *)&v27 - v14;
  if (v13)
  {
    uint64_t v16 = offset - 1;
    if (offset - 1 < 0) {
      uint64_t v16 = offset;
    }
    uint64_t v17 = v16 >> 1;
    uint64_t v18 = v9[9];
    char v19 = (void (*)(char *, uint64_t, uint64_t))v9[2];
    v19((char *)&v27 - v14, v6 + v18 * offset, v5);
    uint64_t v28 = v18;
    v19(v12, v6 + v18 * v17, v5);
    if ((level & 1) != 0) {
      char v20 = sub_188DF7CC4();
    }
    else {
      char v20 = sub_188DF7CB8();
    }
    char v21 = v20;
    Swift::Int v22 = (void (*)(char *, uint64_t))v9[1];
    v22(v12, v5);
    v22(v15, v5);
    if ((v21 & 1) != 0)
    {
      --level;
      sub_188DF83B4();
      uint64_t offset = v17;
    }

    if ((level & 1) != 0)
    {
      if (offset >= 3)
      {
        do
        {
          unint64_t v25 = offset - 3;
          uint64_t v26 = v28;
          v19(v15, v6 + v28 * offset, v5);
          v19(v12, v6 + ((unint64_t)(offset - 3) >> 2) * v26, v5);
          LOBYTE(v26) = sub_188DF7CB8();
          v22(v12, v5);
          v22(v15, v5);
          if ((v26 & 1) == 0) {
            break;
          }
          sub_188DF83B4();
          uint64_t offset = (unint64_t)(offset - 3) >> 2;
        }

        while (v25 > 0xB);
      }
    }

    else if (offset >= 3)
    {
      do
      {
        unint64_t v23 = offset - 3;
        uint64_t v24 = v28;
        v19(v15, v6 + v28 * offset, v5);
        v19(v12, v6 + ((unint64_t)(offset - 3) >> 2) * v24, v5);
        LOBYTE(v24) = sub_188DF7CC4();
        v22(v12, v5);
        v22(v15, v5);
        if ((v24 & 1) == 0) {
          break;
        }
        sub_188DF83B4();
        uint64_t offset = (unint64_t)(offset - 3) >> 2;
      }

      while (v23 > 0xB);
    }
  }

Swift::Void __swiftcall Heap._UnsafeHandle.trickleDownMin(_:)(CollectionsInternal::_HeapNode a1)
{
  uint64_t v97 = v3;
  uint64_t v4 = v2;
  uint64_t v5 = v1;
  Swift::Int level = a1.level;
  Swift::Int offset = a1.offset;
  uint64_t v8 = *(void **)(v2 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](a1.offset);
  uint64_t v82 = (char *)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = MEMORY[0x1895F8858](v9);
  uint64_t v13 = (char *)&v82 - v12;
  uint64_t v14 = MEMORY[0x1895F8858](v11);
  uint64_t v16 = (char *)&v82 - v15;
  uint64_t v17 = MEMORY[0x1895F8858](v14);
  uint64_t v85 = (char *)&v82 - v18;
  uint64_t v19 = MEMORY[0x1895F8858](v17);
  uint64_t v86 = (char *)&v82 - v20;
  uint64_t v21 = MEMORY[0x1895F8858](v19);
  uint64_t v90 = (char *)&v82 - v22;
  MEMORY[0x1895F8858](v21);
  uint64_t v24 = (char *)&v82 - v23;
  uint64_t v88 = v25;
  if (!sub_188DF7D9C())
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }

  uint64_t v26 = v8[9];
  uint64_t v95 = v24;
  sub_188DF8378();
  uint64_t v27 = (4 * offset) | 3;
  uint64_t v28 = 4 * offset + 6;
  uint64_t v89 = v5;
  uint64_t v94 = v26;
  if (v28 < v5)
  {
    uint64_t v83 = v16;
    uint64_t v84 = v13;
    uint64_t v29 = (void (*)(char *, uint64_t, uint64_t))v8[2];
    uint64_t v87 = v8;
    while (1)
    {
      Swift::Int v91 = level;
      Swift::Int v92 = offset;
      uint64_t v30 = v94;
      uint64_t v31 = v88;
      uint64_t v32 = (uint64_t)v90;
      uint64_t v33 = v28;
      uint64_t v93 = (void (*)(uint64_t, uint64_t))v28;
      v29(v90, v88 + v27 * v94, v4);
      uint64_t v34 = v86;
      v29(v86, v31 + (v27 + 1) * v30, v4);
      char v35 = sub_188DF7CC4();
      uint64_t v36 = (void (*)(char *, uint64_t))v8[1];
      v36(v34, v4);
      v36((char *)v32, v4);
      if ((v35 & 1) != 0) {
        uint64_t v37 = (void (*)(void, void, void))v27;
      }
      else {
        uint64_t v37 = (void (*)(void, void, void))(v27 + 1);
      }
      uint64_t v96 = (uint64_t)v37;
      uint64_t v38 = v27 + 2;
      v29((char *)v32, v31 + v38 * v30, v4);
      v29(v34, v31 + v33 * v30, v4);
      char v39 = sub_188DF7CC4();
      v36(v34, v4);
      v36((char *)v32, v4);
      if ((v39 & 1) == 0) {
        uint64_t v38 = (uint64_t)v93;
      }
      v29((char *)v32, v31 + v96 * v30, v4);
      v29(v34, v31 + v38 * v30, v4);
      char v40 = sub_188DF7CC4();
      v36(v34, v4);
      v36((char *)v32, v4);
      if ((v40 & 1) != 0) {
        uint64_t v41 = v96;
      }
      else {
        uint64_t v41 = v38;
      }
      uint64_t v42 = v31 + v41 * v30;
      uint64_t v43 = (void (*)(char *, char *, uint64_t))v29;
      v29((char *)v32, v42, v4);
      char v44 = sub_188DF7CC4();
      v36((char *)v32, v4);
      if ((v44 & 1) == 0)
      {
        uint64_t v8 = v87;
        uint64_t v13 = v84;
        uint64_t v53 = v95;
        Swift::Int offset = v92;
        goto LABEL_32;
      }

      uint64_t v45 = v89;
      if (!sub_188DF7D9C()) {
        break;
      }
      uint64_t v46 = v85;
      sub_188DF8378();
      uint64_t v47 = sub_188DF7D9C();
      if (!v47) {
        goto LABEL_43;
      }
      uint64_t v48 = v94;
      uint64_t v49 = v47 + v92 * v94;
      v29((char *)v32, (uint64_t)v46, v4);
      sub_188D8A1FC(v32, v49, v4);
      v36(v46, v4);
      uint64_t v50 = v41 - 1;
      if (v41 - 1 < 0) {
        uint64_t v50 = v41;
      }
      v29((char *)v32, v31 + (v50 >> 1) * v48, v4);
      char v51 = sub_188DF7CC4();
      v36((char *)v32, v4);
      if ((v51 & 1) != 0)
      {
        sub_188DF7D9C();
        sub_188DF89E4();
      }

      uint64_t v27 = (4 * v41) | 3;
      uint64_t v28 = 4 * v41 + 6;
      Swift::Int level = v91 + 2;
      Swift::Int offset = v41;
      uint64_t v8 = v87;
      if (v28 >= v45)
      {
        Swift::Int v52 = v91 + 4;
        Swift::Int offset = v41;
        uint64_t v16 = v83;
        uint64_t v13 = v84;
        uint64_t v26 = v94;
        goto LABEL_23;
      }
    }

    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }

  Swift::Int v52 = level + 2;
LABEL_23:
  uint64_t v54 = (2 * offset) | 1;
  if (v54 >= v89)
  {
    uint64_t v43 = (void (*)(char *, char *, uint64_t))v8[2];
    uint64_t v53 = v95;
    v43(v13, v95, v4);
    goto LABEL_33;
  }

  uint64_t v83 = v16;
  uint64_t v84 = v13;
  Swift::Int v55 = offset;
  Swift::Int v56 = level + 1;
  uint64_t v57 = v27;
  uint64_t v58 = v88;
  Swift::Int v59 = Heap._UnsafeHandle._minDescendant(c0:gc0:)( *(CollectionsInternal::_HeapNode *)&v54,  *(CollectionsInternal::_HeapNode *)(&v52 - 1)).offset;
  Swift::Int v60 = v59 * v26;
  uint64_t v61 = (uint64_t)v90;
  uint64_t v96 = v8[2];
  ((void (*)(char *, uint64_t, uint64_t))v96)(v90, v58 + v60, v4);
  uint64_t v62 = v61;
  LOBYTE(v6_HashNode.ensureUnique(isUnique:)(v1 & 1) = sub_188DF7CC4();
  uint64_t v87 = v8;
  unint64_t v63 = (void (*)(uint64_t, uint64_t))v8[1];
  v63(v62, v4);
  if ((v61 & 1) == 0)
  {
    uint64_t v8 = v87;
    uint64_t v13 = v84;
    uint64_t v53 = v95;
    Swift::Int offset = v55;
    goto LABEL_31;
  }

  uint64_t v93 = v63;
  if (!sub_188DF7D9C())
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }

  Swift::Int v92 = v60;
  unint64_t v64 = v83;
  sub_188DF8378();
  uint64_t v65 = sub_188DF7D9C();
  if (!v65)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }

  uint64_t v66 = v94;
  uint64_t v67 = v65 + v55 * v94;
  uint64_t v68 = (void (*)(char *, char *, uint64_t))v96;
  ((void (*)(uint64_t, char *, uint64_t))v96)(v62, v64, v4);
  sub_188D8A1FC(v62, v67, v4);
  uint64_t v69 = v64;
  unint64_t v70 = v93;
  v93((uint64_t)v69, v4);
  if (v59 < v27)
  {
    Swift::Int offset = v59;
    uint64_t v8 = v87;
    uint64_t v13 = v84;
    uint64_t v53 = v95;
    uint64_t v43 = v68;
    v68(v84, v95, v4);
    goto LABEL_33;
  }

  uint64_t v75 = v62;
  uint64_t v76 = v59 - 1;
  if (v59 - 1 < 0) {
    uint64_t v76 = v59;
  }
  Swift::Int offset = v76 >> 1;
  v68((char *)v75, (char *)(v88 + (v76 >> 1) * v66), v4);
  char v77 = sub_188DF7CC4();
  v70(v75, v4);
  if ((v77 & 1) == 0)
  {
    Swift::Int offset = v59;
    uint64_t v8 = v87;
    uint64_t v13 = v84;
    uint64_t v53 = v95;
LABEL_31:
    uint64_t v43 = (void (*)(char *, char *, uint64_t))v96;
LABEL_32:
    v43(v13, v53, v4);
LABEL_33:
    uint64_t v71 = sub_188DF7D9C();
    if (v71)
    {
      uint64_t v72 = v71 + offset * v94;
      uint64_t v73 = (uint64_t)v90;
      v43(v90, v13, v4);
      sub_188D8A1FC(v73, v72, v4);
      uint64_t v74 = (void (*)(char *, uint64_t))v8[1];
      v74(v13, v4);
      v74(v53, v4);
      return;
    }

    goto LABEL_45;
  }

  if (!sub_188DF7D9C())
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }

  unint64_t v78 = v82;
  sub_188DF8378();
  uint64_t v79 = sub_188DF7D9C();
  if (v79)
  {
    uint64_t v80 = v79 + v92;
    uint64_t v81 = (uint64_t)v90;
    uint64_t v43 = (void (*)(char *, char *, uint64_t))v96;
    ((void (*)(char *, char *, uint64_t))v96)(v90, v78, v4);
    sub_188D8A1FC(v81, v80, v4);
    v70((uint64_t)v78, v4);
    uint64_t v8 = v87;
    uint64_t v13 = v84;
    uint64_t v53 = v95;
    v43(v84, v95, v4);
    goto LABEL_33;
  }

uint64_t Heap._UnsafeHandle._trickleDownMin(node:value:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v87 = a6;
  uint64_t v84 = a2;
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(a5 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](a1);
  uint64_t v76 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  char v77 = (char *)&v76 - v13;
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  unint64_t v78 = (char *)&v76 - v15;
  uint64_t v16 = MEMORY[0x1895F8858](v14);
  uint64_t v79 = (char *)&v76 - v17;
  uint64_t v18 = (Swift::Int *)MEMORY[0x1895F8858](v16);
  uint64_t v20 = (char *)&v76 - v19;
  Swift::Int v21 = *v18;
  Swift::Int v22 = v18[1];
  uint64_t v83 = v18;
  Swift::Int v23 = (4 * v21) | 3;
  Swift::Int level = v22 + 2;
  uint64_t v24 = 4 * v21 + 6;
  uint64_t v80 = v9;
  uint64_t v81 = v25;
  if (v24 >= v25)
  {
    uint64_t v48 = a3;
LABEL_21:
    uint64_t result = (2 * v21) | 1;
    if (result >= a4) {
      return result;
    }
    uint64_t v49 = v83[1] + 1;
    v50.Swift::Int offset = v23;
    v50.Swift::Int level = level;
    CollectionsInternal::_HeapNode v51 = Heap._UnsafeHandle._minDescendant(c0:gc0:)(*(CollectionsInternal::_HeapNode *)&result, v50);
    Swift::Int level = v51.level;
    Swift::Int v52 = v80;
    Swift::Int v53 = *((void *)v80 + 9);
    uint64_t v54 = (void (*)(char *, uint64_t, uint64_t))*((void *)v80 + 2);
    v54(v20, v48 + v51.offset * v53, a5);
    char v55 = sub_188DF7CC4();
    Swift::Int v56 = (uint64_t (*)(char *, uint64_t))*((void *)v52 + 1);
    uint64_t result = v56(v20, a5);
    if ((v55 & 1) == 0) {
      return result;
    }
    uint64_t v82 = v56;
    Swift::Int v85 = v53;
    uint64_t v80 = v54;
    Swift::Int v57 = *v83;
    uint64_t result = sub_188DF7D9C();
    if (result)
    {
      uint64_t v58 = v77;
      sub_188DF8378();
      uint64_t v59 = v48;
      uint64_t result = sub_188DF7D9C();
      if (result)
      {
        Swift::Int v60 = v85;
        uint64_t v61 = result + v57 * v85;
        uint64_t v62 = v80;
        v80(v20, (uint64_t)v58, a5);
        sub_188D8A1FC((uint64_t)v20, v61, a5);
        unint64_t v63 = v58;
        unint64_t v64 = v62;
        uint64_t v65 = v82;
        uint64_t result = v82(v63, a5);
        uint64_t v66 = v83;
        Swift::Int v67 = level;
        *uint64_t v83 = v51.offset;
        v66[1] = v67;
        if (v51.offset < v23) {
          return result;
        }
        Swift::Int offset = v51.offset - 1;
        if (v51.offset - 1 < 0) {
          Swift::Int offset = v51.offset;
        }
        uint64_t v69 = offset >> 1;
        v64(v20, v59 + (offset >> 1) * v60, a5);
        char v70 = sub_188DF7CC4();
        uint64_t result = v65(v20, a5);
        if ((v70 & 1) == 0) {
          return result;
        }
        Swift::Int v71 = *v83;
        uint64_t result = sub_188DF7D9C();
        if (result)
        {
          uint64_t v72 = v76;
          sub_188DF8378();
          uint64_t result = sub_188DF7D9C();
          if (result)
          {
            Swift::Int v73 = level - 1;
            uint64_t v74 = result + v71 * v85;
            v64(v20, (uint64_t)v72, a5);
            sub_188D8A1FC((uint64_t)v20, v74, a5);
            uint64_t result = v82(v72, a5);
            uint64_t v75 = v83;
            *uint64_t v83 = v69;
            v75[1] = v73;
            return result;
          }

CollectionsInternal::_HeapNode __swiftcall Heap._UnsafeHandle._minDescendant(c0:gc0:)( CollectionsInternal::_HeapNode c0, CollectionsInternal::_HeapNode gc0)
{
  uint64_t v5 = v4;
  Swift::Int v6 = v3;
  uint64_t v7 = v2;
  Swift::Int offset = gc0.offset;
  Swift::Int v9 = c0.offset;
  uint64_t v10 = *(void **)(v4 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](c0.offset);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v11);
  uint64_t v18 = (char *)&v39 - v17;
  if (v19 >= v20)
  {
    if (v9 + 1 < v6)
    {
      uint64_t v27 = v10[9];
      Swift::Int v43 = v14;
      Swift::Int v28 = (void (*)(char *, uint64_t, uint64_t))v10[2];
      v28((char *)&v39 - v17, v7 + v27 * v9, v5);
      v28(v13, v7 + v27 * (v9 + 1), v5);
      LOBYTE(v27) = sub_188DF7CC4();
      uint64_t v29 = (void (*)(char *, uint64_t))v10[1];
      v29(v13, v5);
      v29(v18, v5);
      if ((v27 & 1) == 0) {
        ++v9;
      }
      Swift::Int v14 = v43;
    }
  }

  else
  {
    uint64_t v21 = v10[9];
    Swift::Int v22 = (void (*)(char *, uint64_t, uint64_t))v10[2];
    Swift::Int v44 = v15;
    if (offset + 2 >= v6)
    {
      uint64_t v42 = v16;
      Swift::Int v43 = v14;
      v22((char *)&v39 - v17, v7 + v21 * (v9 + 1), v5);
      uint64_t v40 = v21;
      Swift::Int v41 = v22;
      v22(v13, v7 + v21 * offset, v5);
      char v30 = sub_188DF7CC4();
      char v31 = (void (*)(char *, uint64_t))v10[1];
      v31(v13, v5);
      v31(v18, v5);
      if ((v30 & 1) != 0) {
        ++v9;
      }
      else {
        Swift::Int v9 = offset;
      }
      Swift::Int v32 = v44;
      if ((v30 & 1) != 0) {
        Swift::Int v32 = v43;
      }
      Swift::Int v33 = offset + 1;
      if (v33 >= v6)
      {
        Swift::Int v14 = v32;
      }

      else
      {
        uint64_t v35 = v40;
        Swift::Int v34 = v41;
        Swift::Int v36 = v32;
        v41(v18, v7 + v9 * v40, v5);
        v34(v13, v7 + v35 * v33, v5);
        LOBYTE(v35) = sub_188DF7CC4();
        v31(v13, v5);
        v31(v18, v5);
        Swift::Int v14 = v44;
        if ((v35 & 1) != 0) {
          Swift::Int v14 = v36;
        }
        else {
          Swift::Int v9 = v33;
        }
      }
    }

    else
    {
      Swift::Int v43 = offset + 2;
      v22((char *)&v39 - v17, v7 + v21 * offset, v5);
      v22(v13, v7 + v21 * (offset + 1), v5);
      char v23 = sub_188DF7CC4();
      uint64_t v24 = (void (*)(char *, uint64_t))v10[1];
      v24(v13, v5);
      v24(v18, v5);
      if ((v23 & 1) != 0) {
        Swift::Int v9 = offset;
      }
      else {
        Swift::Int v9 = offset + 1;
      }
      v22(v18, v7 + v9 * v21, v5);
      Swift::Int v25 = v43;
      v22(v13, v7 + v21 * v43, v5);
      char v26 = sub_188DF7CC4();
      v24(v13, v5);
      v24(v18, v5);
      Swift::Int v14 = v44;
      if ((v26 & 1) == 0) {
        Swift::Int v9 = v25;
      }
    }
  }

  Swift::Int v37 = v9;
  result.Swift::Int level = v14;
  result.Swift::Int offset = v37;
  return result;
}

Swift::Void __swiftcall Heap._UnsafeHandle.trickleDownMax(_:)(CollectionsInternal::_HeapNode a1)
{
  uint64_t v97 = v3;
  uint64_t v4 = v2;
  uint64_t v5 = v1;
  Swift::Int level = a1.level;
  Swift::Int offset = a1.offset;
  uint64_t v8 = *(void **)(v2 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](a1.offset);
  uint64_t v82 = (char *)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = MEMORY[0x1895F8858](v9);
  uint64_t v13 = (char *)&v82 - v12;
  uint64_t v14 = MEMORY[0x1895F8858](v11);
  uint64_t v16 = (char *)&v82 - v15;
  uint64_t v17 = MEMORY[0x1895F8858](v14);
  Swift::Int v85 = (char *)&v82 - v18;
  uint64_t v19 = MEMORY[0x1895F8858](v17);
  uint64_t v86 = (char *)&v82 - v20;
  uint64_t v21 = MEMORY[0x1895F8858](v19);
  uint64_t v90 = (char *)&v82 - v22;
  MEMORY[0x1895F8858](v21);
  uint64_t v24 = (char *)&v82 - v23;
  uint64_t v88 = v25;
  if (!sub_188DF7D9C())
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }

  uint64_t v26 = v8[9];
  uint64_t v95 = v24;
  sub_188DF8378();
  uint64_t v27 = (4 * offset) | 3;
  uint64_t v28 = 4 * offset + 6;
  uint64_t v89 = v5;
  uint64_t v94 = v26;
  if (v28 < v5)
  {
    uint64_t v83 = v16;
    uint64_t v84 = v13;
    uint64_t v29 = (void (*)(char *, uint64_t, uint64_t))v8[2];
    uint64_t v87 = v8;
    while (1)
    {
      Swift::Int v91 = level;
      Swift::Int v92 = offset;
      uint64_t v30 = v94;
      uint64_t v31 = v88;
      uint64_t v32 = (uint64_t)v90;
      uint64_t v33 = v28;
      uint64_t v93 = (void (*)(uint64_t, uint64_t))v28;
      v29(v90, v88 + v27 * v94, v4);
      Swift::Int v34 = v86;
      v29(v86, v31 + (v27 + 1) * v30, v4);
      char v35 = sub_188DF7CC4();
      Swift::Int v36 = (void (*)(char *, uint64_t))v8[1];
      v36(v34, v4);
      v36((char *)v32, v4);
      if ((v35 & 1) != 0) {
        Swift::Int v37 = (void (*)(void, void, void))(v27 + 1);
      }
      else {
        Swift::Int v37 = (void (*)(void, void, void))v27;
      }
      uint64_t v96 = (uint64_t)v37;
      uint64_t v38 = v27 + 2;
      v29((char *)v32, v31 + v38 * v30, v4);
      v29(v34, v31 + v33 * v30, v4);
      char v39 = sub_188DF7CC4();
      v36(v34, v4);
      v36((char *)v32, v4);
      if ((v39 & 1) != 0) {
        uint64_t v38 = (uint64_t)v93;
      }
      v29((char *)v32, v31 + v96 * v30, v4);
      v29(v34, v31 + v38 * v30, v4);
      char v40 = sub_188DF7CC4();
      v36(v34, v4);
      v36((char *)v32, v4);
      if ((v40 & 1) != 0) {
        uint64_t v41 = v38;
      }
      else {
        uint64_t v41 = v96;
      }
      uint64_t v42 = v31 + v41 * v30;
      Swift::Int v43 = (void (*)(char *, char *, uint64_t))v29;
      v29((char *)v32, v42, v4);
      char v44 = sub_188DF7CC4();
      v36((char *)v32, v4);
      if ((v44 & 1) == 0)
      {
        uint64_t v8 = v87;
        uint64_t v13 = v84;
        Swift::Int v53 = v95;
        Swift::Int offset = v92;
        goto LABEL_32;
      }

      uint64_t v45 = v89;
      if (!sub_188DF7D9C()) {
        break;
      }
      uint64_t v46 = v85;
      sub_188DF8378();
      uint64_t v47 = sub_188DF7D9C();
      if (!v47) {
        goto LABEL_43;
      }
      uint64_t v48 = v94;
      uint64_t v49 = v47 + v92 * v94;
      v29((char *)v32, (uint64_t)v46, v4);
      sub_188D8A1FC(v32, v49, v4);
      v36(v46, v4);
      uint64_t v50 = v41 - 1;
      if (v41 - 1 < 0) {
        uint64_t v50 = v41;
      }
      v29((char *)v32, v31 + (v50 >> 1) * v48, v4);
      char v51 = sub_188DF7CC4();
      v36((char *)v32, v4);
      if ((v51 & 1) != 0)
      {
        sub_188DF7D9C();
        sub_188DF89E4();
      }

      uint64_t v27 = (4 * v41) | 3;
      uint64_t v28 = 4 * v41 + 6;
      Swift::Int level = v91 + 2;
      Swift::Int offset = v41;
      uint64_t v8 = v87;
      if (v28 >= v45)
      {
        Swift::Int v52 = v91 + 4;
        Swift::Int offset = v41;
        uint64_t v16 = v83;
        uint64_t v13 = v84;
        uint64_t v26 = v94;
        goto LABEL_23;
      }
    }

    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }

  Swift::Int v52 = level + 2;
LABEL_23:
  uint64_t v54 = (2 * offset) | 1;
  if (v54 >= v89)
  {
    Swift::Int v43 = (void (*)(char *, char *, uint64_t))v8[2];
    Swift::Int v53 = v95;
    v43(v13, v95, v4);
    goto LABEL_33;
  }

  uint64_t v83 = v16;
  uint64_t v84 = v13;
  Swift::Int v55 = offset;
  Swift::Int v56 = level + 1;
  uint64_t v57 = v27;
  uint64_t v58 = v88;
  Swift::Int v59 = Heap._UnsafeHandle._maxDescendant(c0:gc0:)( *(CollectionsInternal::_HeapNode *)&v54,  *(CollectionsInternal::_HeapNode *)(&v52 - 1)).offset;
  Swift::Int v60 = v59 * v26;
  uint64_t v61 = (uint64_t)v90;
  uint64_t v96 = v8[2];
  ((void (*)(char *, uint64_t, uint64_t))v96)(v90, v58 + v60, v4);
  uint64_t v62 = v61;
  LOBYTE(v6_HashNode.ensureUnique(isUnique:)(v1 & 1) = sub_188DF7CC4();
  uint64_t v87 = v8;
  unint64_t v63 = (void (*)(uint64_t, uint64_t))v8[1];
  v63(v62, v4);
  if ((v61 & 1) == 0)
  {
    uint64_t v8 = v87;
    uint64_t v13 = v84;
    Swift::Int v53 = v95;
    Swift::Int offset = v55;
    goto LABEL_31;
  }

  uint64_t v93 = v63;
  if (!sub_188DF7D9C())
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }

  Swift::Int v92 = v60;
  unint64_t v64 = v83;
  sub_188DF8378();
  uint64_t v65 = sub_188DF7D9C();
  if (!v65)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }

  uint64_t v66 = v94;
  uint64_t v67 = v65 + v55 * v94;
  uint64_t v68 = (void (*)(char *, char *, uint64_t))v96;
  ((void (*)(uint64_t, char *, uint64_t))v96)(v62, v64, v4);
  sub_188D8A1FC(v62, v67, v4);
  uint64_t v69 = v64;
  char v70 = v93;
  v93((uint64_t)v69, v4);
  if (v59 < v27)
  {
    Swift::Int offset = v59;
    uint64_t v8 = v87;
    uint64_t v13 = v84;
    Swift::Int v53 = v95;
    Swift::Int v43 = v68;
    v68(v84, v95, v4);
    goto LABEL_33;
  }

  uint64_t v75 = v62;
  uint64_t v76 = v59 - 1;
  if (v59 - 1 < 0) {
    uint64_t v76 = v59;
  }
  Swift::Int offset = v76 >> 1;
  v68((char *)v75, (char *)(v88 + (v76 >> 1) * v66), v4);
  char v77 = sub_188DF7CC4();
  v70(v75, v4);
  if ((v77 & 1) == 0)
  {
    Swift::Int offset = v59;
    uint64_t v8 = v87;
    uint64_t v13 = v84;
    Swift::Int v53 = v95;
LABEL_31:
    Swift::Int v43 = (void (*)(char *, char *, uint64_t))v96;
LABEL_32:
    v43(v13, v53, v4);
LABEL_33:
    uint64_t v71 = sub_188DF7D9C();
    if (v71)
    {
      uint64_t v72 = v71 + offset * v94;
      uint64_t v73 = (uint64_t)v90;
      v43(v90, v13, v4);
      sub_188D8A1FC(v73, v72, v4);
      uint64_t v74 = (void (*)(char *, uint64_t))v8[1];
      v74(v13, v4);
      v74(v53, v4);
      return;
    }

    goto LABEL_45;
  }

  if (!sub_188DF7D9C())
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }

  unint64_t v78 = v82;
  sub_188DF8378();
  uint64_t v79 = sub_188DF7D9C();
  if (v79)
  {
    uint64_t v80 = v79 + v92;
    uint64_t v81 = (uint64_t)v90;
    Swift::Int v43 = (void (*)(char *, char *, uint64_t))v96;
    ((void (*)(char *, char *, uint64_t))v96)(v90, v78, v4);
    sub_188D8A1FC(v81, v80, v4);
    v70((uint64_t)v78, v4);
    uint64_t v8 = v87;
    uint64_t v13 = v84;
    Swift::Int v53 = v95;
    v43(v84, v95, v4);
    goto LABEL_33;
  }

uint64_t Heap._UnsafeHandle._trickleDownMax(node:value:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v87 = a6;
  uint64_t v84 = a2;
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(a5 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](a1);
  uint64_t v76 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  char v77 = (char *)&v76 - v13;
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  unint64_t v78 = (char *)&v76 - v15;
  uint64_t v16 = MEMORY[0x1895F8858](v14);
  uint64_t v79 = (char *)&v76 - v17;
  uint64_t v18 = (Swift::Int *)MEMORY[0x1895F8858](v16);
  uint64_t v20 = (char *)&v76 - v19;
  Swift::Int v21 = *v18;
  Swift::Int v22 = v18[1];
  uint64_t v83 = v18;
  Swift::Int v23 = (4 * v21) | 3;
  Swift::Int level = v22 + 2;
  uint64_t v24 = 4 * v21 + 6;
  uint64_t v80 = v9;
  uint64_t v81 = v25;
  if (v24 >= v25)
  {
    uint64_t v48 = a3;
LABEL_21:
    uint64_t result = (2 * v21) | 1;
    if (result >= a4) {
      return result;
    }
    uint64_t v49 = v83[1] + 1;
    v50.Swift::Int offset = v23;
    v50.Swift::Int level = level;
    CollectionsInternal::_HeapNode v51 = Heap._UnsafeHandle._maxDescendant(c0:gc0:)(*(CollectionsInternal::_HeapNode *)&result, v50);
    Swift::Int level = v51.level;
    Swift::Int v52 = v80;
    Swift::Int v53 = *((void *)v80 + 9);
    uint64_t v54 = (void (*)(char *, uint64_t, uint64_t))*((void *)v80 + 2);
    v54(v20, v48 + v51.offset * v53, a5);
    char v55 = sub_188DF7CC4();
    Swift::Int v56 = (uint64_t (*)(char *, uint64_t))*((void *)v52 + 1);
    uint64_t result = v56(v20, a5);
    if ((v55 & 1) == 0) {
      return result;
    }
    uint64_t v82 = v56;
    Swift::Int v85 = v53;
    uint64_t v80 = v54;
    Swift::Int v57 = *v83;
    uint64_t result = sub_188DF7D9C();
    if (result)
    {
      uint64_t v58 = v77;
      sub_188DF8378();
      uint64_t v59 = v48;
      uint64_t result = sub_188DF7D9C();
      if (result)
      {
        Swift::Int v60 = v85;
        uint64_t v61 = result + v57 * v85;
        uint64_t v62 = v80;
        v80(v20, (uint64_t)v58, a5);
        sub_188D8A1FC((uint64_t)v20, v61, a5);
        unint64_t v63 = v58;
        unint64_t v64 = v62;
        uint64_t v65 = v82;
        uint64_t result = v82(v63, a5);
        uint64_t v66 = v83;
        Swift::Int v67 = level;
        *uint64_t v83 = v51.offset;
        v66[1] = v67;
        if (v51.offset < v23) {
          return result;
        }
        Swift::Int offset = v51.offset - 1;
        if (v51.offset - 1 < 0) {
          Swift::Int offset = v51.offset;
        }
        uint64_t v69 = offset >> 1;
        v64(v20, v59 + (offset >> 1) * v60, a5);
        char v70 = sub_188DF7CC4();
        uint64_t result = v65(v20, a5);
        if ((v70 & 1) == 0) {
          return result;
        }
        Swift::Int v71 = *v83;
        uint64_t result = sub_188DF7D9C();
        if (result)
        {
          uint64_t v72 = v76;
          sub_188DF8378();
          uint64_t result = sub_188DF7D9C();
          if (result)
          {
            Swift::Int v73 = level - 1;
            uint64_t v74 = result + v71 * v85;
            v64(v20, (uint64_t)v72, a5);
            sub_188D8A1FC((uint64_t)v20, v74, a5);
            uint64_t result = v82(v72, a5);
            uint64_t v75 = v83;
            *uint64_t v83 = v69;
            v75[1] = v73;
            return result;
          }

CollectionsInternal::_HeapNode __swiftcall Heap._UnsafeHandle._maxDescendant(c0:gc0:)( CollectionsInternal::_HeapNode c0, CollectionsInternal::_HeapNode gc0)
{
  uint64_t v5 = v4;
  Swift::Int v6 = v3;
  uint64_t v7 = v2;
  Swift::Int offset = gc0.offset;
  Swift::Int v9 = c0.offset;
  uint64_t v10 = *(void **)(v4 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](c0.offset);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v11);
  uint64_t v18 = (char *)&v39 - v17;
  if (v19 >= v20)
  {
    if (v9 + 1 < v6)
    {
      uint64_t v27 = v10[9];
      Swift::Int v43 = v14;
      Swift::Int v28 = (void (*)(char *, uint64_t, uint64_t))v10[2];
      v28((char *)&v39 - v17, v7 + v27 * v9, v5);
      v28(v13, v7 + v27 * (v9 + 1), v5);
      LOBYTE(v27) = sub_188DF7CC4();
      uint64_t v29 = (void (*)(char *, uint64_t))v10[1];
      v29(v13, v5);
      v29(v18, v5);
      if ((v27 & 1) != 0) {
        ++v9;
      }
      Swift::Int v14 = v43;
    }
  }

  else
  {
    uint64_t v21 = v10[9];
    Swift::Int v22 = (void (*)(char *, uint64_t, uint64_t))v10[2];
    Swift::Int v44 = v15;
    if (offset + 2 >= v6)
    {
      uint64_t v42 = v16;
      Swift::Int v43 = v14;
      v22((char *)&v39 - v17, v7 + v21 * (v9 + 1), v5);
      uint64_t v40 = v21;
      Swift::Int v41 = v22;
      v22(v13, v7 + v21 * offset, v5);
      char v30 = sub_188DF7CC4();
      char v31 = (void (*)(char *, uint64_t))v10[1];
      v31(v13, v5);
      v31(v18, v5);
      if ((v30 & 1) != 0) {
        Swift::Int v9 = offset;
      }
      else {
        ++v9;
      }
      Swift::Int v32 = v44;
      if ((v30 & 1) == 0) {
        Swift::Int v32 = v43;
      }
      Swift::Int v33 = offset + 1;
      if (v33 >= v6)
      {
        Swift::Int v14 = v32;
      }

      else
      {
        uint64_t v35 = v40;
        Swift::Int v34 = v41;
        Swift::Int v36 = v32;
        v41(v18, v7 + v9 * v40, v5);
        v34(v13, v7 + v35 * v33, v5);
        LOBYTE(v35) = sub_188DF7CC4();
        v31(v13, v5);
        v31(v18, v5);
        Swift::Int v14 = v44;
        if ((v35 & 1) != 0) {
          Swift::Int v9 = v33;
        }
        else {
          Swift::Int v14 = v36;
        }
      }
    }

    else
    {
      Swift::Int v43 = offset + 2;
      v22((char *)&v39 - v17, v7 + v21 * offset, v5);
      v22(v13, v7 + v21 * (offset + 1), v5);
      char v23 = sub_188DF7CC4();
      uint64_t v24 = (void (*)(char *, uint64_t))v10[1];
      v24(v13, v5);
      v24(v18, v5);
      if ((v23 & 1) != 0) {
        Swift::Int v9 = offset + 1;
      }
      else {
        Swift::Int v9 = offset;
      }
      v22(v18, v7 + v9 * v21, v5);
      Swift::Int v25 = v43;
      v22(v13, v7 + v21 * v43, v5);
      char v26 = sub_188DF7CC4();
      v24(v13, v5);
      v24(v18, v5);
      Swift::Int v14 = v44;
      if ((v26 & 1) != 0) {
        Swift::Int v9 = v25;
      }
    }
  }

  Swift::Int v37 = v9;
  result.Swift::Int level = v14;
  result.Swift::Int offset = v37;
  return result;
}

Swift::Void __swiftcall Heap._UnsafeHandle.heapify()()
{
  if (v0 >= 0) {
    uint64_t v3 = v0;
  }
  else {
    uint64_t v3 = v0 + 1;
  }
  if (v0 < 2)
  {
    __break(1u);
  }

  else
  {
    uint64_t v17 = v1;
    uint64_t v18 = v2;
    uint64_t v4 = v3 >> 1;
    uint64_t v5 = (v3 >> 1) - 1;
    unint64_t v6 = 64 - __clz(v3 >> 1);
    do
    {
      uint64_t v7 = v6 - 1;
      uint64_t v8 = -1LL << (v6 - 1);
      uint64_t v9 = ~v8;
      uint64_t v10 = (1LL << v6) - 2;
      if (v10 >= v4) {
        uint64_t v10 = v5;
      }
      BOOL v11 = v4 <= v9;
      if (v4 > v9) {
        uint64_t v12 = ~v8;
      }
      else {
        uint64_t v12 = 0LL;
      }
      if (v4 > v9) {
        uint64_t v13 = v7;
      }
      else {
        uint64_t v13 = 0LL;
      }
      if (v11) {
        uint64_t v10 = 0LL;
      }
      v15[0] = v12;
      v15[1] = v13;
      char v14 = v11;
      v15[2] = v10;
      uint64_t v15[3] = v13;
      char v16 = v14;
      Heap._UnsafeHandle._heapify(_:_:)(v7, (uint64_t)v15);
      unint64_t v6 = v7;
    }

    while (v7 > 0);
  }

void Heap._UnsafeHandle._heapify(_:_:)(char a1, uint64_t a2)
{
  if ((v10 & 1) == 0)
  {
    Swift::Int v3 = v8[0];
    Swift::Int v4 = v8[1];
    Swift::Int v5 = v9;
    if ((a1 & 1) != 0)
    {
      if (v9 >= v8[0])
      {
        do
        {
          v7.Swift::Int offset = v3;
          v7.Swift::Int level = v4;
          Heap._UnsafeHandle.trickleDownMax(_:)(v7);
          ++v3;
        }

        while (v5 >= v3);
      }
    }

    else if (v9 >= v8[0])
    {
      do
      {
        v6.Swift::Int offset = v3;
        v6.Swift::Int level = v4;
        Heap._UnsafeHandle.trickleDownMin(_:)(v6);
        ++v3;
      }

      while (v5 >= v3);
    }
  }

uint64_t sub_188D5FA74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(qword_18C74A9A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for Heap._UnsafeHandle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Heap._UnsafeHandle);
}

uint64_t BitArray.init(stringLiteral:)(unint64_t a1, unint64_t a2)
{
  uint64_t result = _s19CollectionsInternal8BitArrayVyACSgSScfC_0(a1, a2);
  if (!result)
  {
    uint64_t result = sub_188DF881C();
    __break(1u);
  }

  return result;
}

uint64_t sub_188D5FB38@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = _s19CollectionsInternal8BitArrayVyACSgSScfC_0(*a1, a1[1]);
  if (result)
  {
    *a2 = result;
    a2[1] = v4;
  }

  else
  {
    uint64_t result = sub_188DF881C();
    __break(1u);
  }

  return result;
}

unint64_t sub_188D5FBC0()
{
  unint64_t result = qword_18C74AA28;
  if (!qword_18C74AA28)
  {
    unint64_t result = MEMORY[0x1895D7620](&protocol conformance descriptor for BitArray, &type metadata for BitArray);
    atomic_store(result, (unint64_t *)&qword_18C74AA28);
  }

  return result;
}

unint64_t sub_188D5FC08()
{
  unint64_t result = qword_18C74AA30;
  if (!qword_18C74AA30)
  {
    unint64_t result = MEMORY[0x1895D7620](&protocol conformance descriptor for BitArray, &type metadata for BitArray);
    atomic_store(result, (unint64_t *)&qword_18C74AA30);
  }

  return result;
}

uint64_t _HashNode.intersection<A>(_:_:)( unsigned int a1, char *a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8, uint64_t a9)
{
  uint64_t v35 = a5;
  Swift::Int v36 = a8;
  uint64_t v33 = a3;
  Swift::Int v34 = a4;
  Swift::Int v32 = a2;
  unsigned int v31 = a1;
  uint64_t v11 = type metadata accessor for _HashNode.Builder(0LL, a6, a7, a9);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v11);
  Swift::Int v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  char v30 = (char *)&v29 - v16;
  uint64_t v17 = sub_188DF8384();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x1895F8858](v17);
  uint64_t v21 = (char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v19);
  char v23 = (char *)&v29 - v22;
  _HashNode._intersection<A>(_:_:)(v31, v32, v33, v34, v35, a6, a7, v36, (_BYTE *)&v29 - v22, a9);
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v23, v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v21, 1LL, v11) == 1)
  {
    uint64_t v24 = *(void (**)(char *, uint64_t))(v18 + 8);
    v24(v23, v17);
    v24(v21, v17);
    return 0LL;
  }

  else
  {
    char v26 = v30;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v30, v21, v11);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v26, v11);
    sub_188D9B09C(v11);
    uint64_t v25 = v27;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v26, v11);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v17);
  }

  return v25;
}

uint64_t _HashNode._intersection<A>(_:_:)@<X0>( unsigned int a1@<W0>, char *a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X7>, _BYTE *a9@<X8>, uint64_t a10)
{
  if (a4 == a2)
  {
    uint64_t v20 = type metadata accessor for _HashNode.Builder(0LL, a6, a7, a10);
    return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))( a9,  1LL,  1LL,  v20);
  }

  else if (_HashNode.isCollisionNode.getter((uint64_t)a4, a5, a6, a7, a10) {
         || _HashNode.isCollisionNode.getter((uint64_t)a2, a3, a6, (uint64_t)a8, a10))
  }
  {
    return _HashNode._intersection_slow<A>(_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }

  else
  {
    uint64_t v21 = (unsigned int *)nullsub_1(a4 + 16, a4 + 32, a6, a7, a10);
    return sub_188D6013C(v21, v22, (uint64_t)a2, a1, a6, (uint64_t)a9, a7, (uint64_t)a8, a10);
  }

uint64_t _HashNode._intersection_slow<A>(_:_:)@<X0>( unsigned int a1@<W0>, char *a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X7>, _BYTE *a9@<X8>, uint64_t a10)
{
  BOOL v17 = _HashNode.isCollisionNode.getter((uint64_t)a4, a5, a6, a7, a10);
  BOOL v18 = _HashNode.isCollisionNode.getter((uint64_t)a2, a3, a6, (uint64_t)a8, a10);
  uint64_t v19 = (int *)nullsub_1(a4 + 16, a4 + 32, a6, a7, a10);
  if (!v17) {
    return sub_188D617C4(v19, (uint64_t)v20, a2, a3, a1, a6, a7, a8, a9, a10);
  }
  if (!v18) {
    return sub_188D611D8((char *)v19, v20, (uint64_t)a2, a1, a4, a5, a6, a9, a7, (uint64_t)a8, a10);
  }
  uint64_t v21 = v19;
  uint64_t v22 = v20;
  uint64_t v23 = nullsub_1(a2 + 16, a2 + 32, a6, a8, a10);
  return sub_188D60D90(v23, v24, a1, v21, v22, a6, (uint64_t)a9, a7, (uint64_t)a8, a10);
}

uint64_t sub_188D6013C@<X0>( unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W4>, uint64_t a5@<X7>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14 = (_DWORD *)nullsub_1(a3 + 16, a3 + 32, a5, a8, a9);
  return sub_188D601E4(v14, v15, a4, a1, a2, a5, a6, a7, a8, a9);
}

uint64_t sub_188D601E4@<X0>( _DWORD *a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v178 = a5;
  unint64_t v175 = a1;
  uint64_t v172 = a9;
  uint64_t v173 = a2;
  uint64_t v14 = type metadata accessor for _HashNode.Builder(255LL, a6, a8, a10);
  uint64_t v153 = sub_188DF8384();
  uint64_t v152 = *(void *)(v153 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](v153);
  uint64_t v150 = (char *)&v146 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  uint64_t v158 = (char *)&v146 - v17;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v155 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v18 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v154 = (char *)&v146 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = MEMORY[0x1895F8858](v18);
  uint64_t v159 = (char *)&v146 - v21;
  uint64_t v169 = *(void *)(a6 - 8);
  uint64_t v22 = MEMORY[0x1895F8858](v20);
  char v161 = (char *)&v146 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v22);
  unint64_t v168 = (char *)&v146 - v24;
  uint64_t v25 = type metadata accessor for _HashNode.Builder.Kind(0LL, a6, a8, a10);
  uint64_t v26 = MEMORY[0x1895F8858](v25);
  Swift::Int v28 = (char *)&v146 - v27;
  uint64_t v151 = *(void *)(v14 - 8);
  uint64_t v29 = MEMORY[0x1895F8858](v26);
  uint64_t v149 = (char *)&v146 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = MEMORY[0x1895F8858](v29);
  uint64_t v148 = (char *)&v146 - v32;
  MEMORY[0x1895F8858](v31);
  Swift::Int v34 = (char *)&v146 - v33;
  swift_storeEnumTagMultiPayload();
  uint64_t v170 = v34;
  uint64_t v35 = (uint64_t)v28;
  uint64_t v36 = a10;
  uint64_t v180 = a6;
  uint64_t v37 = a6;
  uint64_t v38 = v14;
  uint64_t v174 = a8;
  _HashNode.Builder.init(_:_:)(a3, v35, v37, a8, a10, v34);
  unsigned int v40 = *a4;
  uint64_t v164 = v14;
  uint64_t v176 = a10;
  unint64_t v177 = a4;
  unsigned int v167 = a3;
  uint64_t v147 = a7;
  if (v40)
  {
    char v41 = 0;
    unsigned int v42 = 0;
    unsigned int v163 = a3 + 5;
    Swift::Int v43 = v175;
    while (1)
    {
      unsigned int v44 = __clz(__rbit32(v40));
      v40 &= v40 - 1;
      uint64_t v45 = _HashNode.UnsafeHandle.itemPtr(at:)(v42, (uint64_t)v177, v178);
      int v46 = *v43;
      unsigned int v171 = v44;
      int v47 = 1 << v44;
      unsigned int v179 = v42;
      uint64_t v166 = v45;
      if (((1 << v44) & v46) != 0)
      {
        v39.i32[0] = (v47 - 1) & v46;
        uint8x8_t v48 = (uint8x8_t)vcnt_s8(v39);
        v48.i16[0] = vaddlv_u8(v48);
        LODWORD(v165) = v40;
        char v49 = v41;
        uint64_t v50 = v48.u32[0];
        CollectionsInternal::_HeapNode v51 = v43;
        Swift::Int v52 = v168;
        uint64_t v53 = v169;
        uint64_t v54 = *(void (**)(char *, uint64_t, uint64_t))(v169 + 16);
        uint64_t v55 = v180;
        v54(v168, v45, v180);
        uint64_t v56 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v50, v51, v173, v55, v172, v36);
        Swift::Int v57 = v161;
        uint8x8_t v162 = (void (*)(char *))v54;
        v54(v161, v56, v55);
        char v58 = sub_188DF7D90();
        uint64_t v59 = *(void (**)(char *, uint64_t))(v53 + 8);
        Swift::Int v60 = v57;
        char v41 = v49;
        unsigned int v40 = v165;
        v59(v60, v55);
        v59(v52, v55);
        if ((v58 & 1) == 0) {
          goto LABEL_14;
        }
      }

      else
      {
        int v61 = v43[1];
        if ((v61 & v47) == 0) {
          goto LABEL_14;
        }
        v39.i32[0] = v61 & (v47 - 1);
        uint8x8_t v62 = (uint8x8_t)vcnt_s8(v39);
        v62.i16[0] = vaddlv_u8(v62);
        uint64_t v63 = v62.u32[0];
        uint64_t v65 = (uint64_t)v168;
        uint64_t v64 = v169;
        uint64_t v66 = *(void (**)(char *, uint64_t, uint64_t))(v169 + 16);
        uint64_t v67 = v166;
        uint64_t v68 = v180;
        v66(v168, v166, v180);
        uint64_t v69 = v176;
        uint64_t v157 = sub_188DF5A9C();
        uint64_t v165 = *(void (**)(uint64_t, uint64_t))(v64 + 8);
        v165(v65, v68);
        uint64_t v70 = v172;
        Swift::Int v71 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v63, v175, v173, v68, v172, v69);
        uint64_t v72 = *v71;
        uint64_t v156 = v71[1];
        uint8x8_t v162 = (void (*)(char *))v66;
        v66((char *)v65, v67, v68);
        swift_retain();
        uint64_t v73 = v164;
        LOBYTE(v70) = _HashNode.containsKey(_:_:_:)(v163, v65, v157, v72, v156, v68, v70, v69);
        swift_release();
        uint64_t v74 = v68;
        uint64_t v38 = v73;
        v165(v65, v74);
        if ((v70 & 1) == 0)
        {
LABEL_14:
          if ((v41 & 1) != 0)
          {
            if (!v40)
            {
LABEL_20:
              uint64_t v79 = v38;
              a4 = v177;
              unsigned int v80 = v177[1];
              Swift::Int v43 = v175;
              if (v80)
              {
                char v81 = 1;
                goto LABEL_26;
              }

LABEL_51:
              uint64_t v141 = v151;
              uint64_t v142 = v147;
              uint64_t v38 = v79;
              (*(void (**)(uint64_t, _BYTE *, uint64_t))(v151 + 32))(v147, v170, v79);
              uint64_t v143 = 0LL;
              return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v141 + 56))(v142, v143, 1LL, v38);
            }
          }

          else
          {
            _HashNode.Builder.copyItems(_:from:upTo:)(v167, v177, v178, v171, v38);
            if (!v40) {
              goto LABEL_20;
            }
          }

          char v41 = 1;
          Swift::Int v43 = v175;
          uint64_t v36 = v176;
          goto LABEL_5;
        }
      }

      if ((v41 & 1) != 0)
      {
        uint64_t v75 = (uint64_t)v159;
        uint64_t v76 = *(int *)(TupleTypeMetadata2 + 48);
        uint64_t v77 = (uint64_t)&v159[v76];
        uint64_t v78 = v166 + v76;
        v162(v159);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v174 - 8) + 16LL))(v77, v78, v174);
        _HashNode.Builder.addNewItem(_:_:at:)(v167, v75, v77, v171, v38);
        if (!v40) {
          goto LABEL_20;
        }
        char v41 = 1;
        Swift::Int v43 = v175;
      }

      else
      {
        Swift::Int v43 = v175;
        if (!v40)
        {
          a4 = v177;
          unsigned int v80 = v177[1];
          if (v80)
          {
            uint64_t v79 = v38;
            char v81 = 0;
LABEL_26:
            unsigned int v179 = 0;
            while (2)
            {
              uint64_t v109 = __clz(__rbit32(v80));
              v80 &= v80 - 1;
              int v110 = *v43;
              int v111 = 1 << v109;
              if (((1 << v109) & *v43) != 0)
              {
                unsigned int v171 = v80;
                if ((v81 & 1) == 0)
                {
                  _HashNode.Builder.copyItemsAndChildren(_:from:upTo:)(v167, a4, v178, v109, v79);
                  int v110 = *v43;
                }

                LODWORD(v166) = v109;
                v39.i32[0] = v110 & (v111 - 1);
                uint8x8_t v82 = (uint8x8_t)vcnt_s8(v39);
                v82.i16[0] = vaddlv_u8(v82);
                uint64_t v83 = v180;
                uint64_t v84 = v176;
                uint64_t v85 = _HashNode.UnsafeHandle.itemPtr(at:)(v82.u32[0], (uint64_t)v43, v173);
                uint64_t v86 = (uint64_t)v168;
                uint64_t v87 = v169;
                uint64_t v88 = *(void (**)(char *, uint64_t, uint64_t))(v169 + 16);
                v88(v168, v85, v83);
                uint64_t v165 = (void (*)(uint64_t, uint64_t))sub_188DF5A9C();
                uint64_t v89 = *(void (**)(uint64_t, uint64_t))(v87 + 8);
                v89(v86, v83);
                uint64_t v90 = v174;
                Swift::Int v91 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v179, a4, v178, v83, v174, v84);
                uint64_t v92 = *v91;
                uint64_t v93 = v91[1];
                uint8x8_t v162 = (void (*)(char *))v88;
                v88((char *)v86, v85, v83);
                swift_retain();
                uint64_t v94 = _HashNode.lookup(_:_:_:)(v163, v86, (uint64_t)v165, v92, v93, v83, v90, v84);
                uint64_t v96 = v95;
                swift_release();
                v89(v86, v83);
                if (v94)
                {
                  uint64_t v97 = v180;
                  uint64_t v98 = nullsub_1(v94 + 16, v94 + 32, v180, v90, v84);
                  uint64_t v100 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v96, v98, v99, v97, v90, v84);
                  uint64_t v101 = swift_getTupleTypeMetadata2();
                  uint64_t v102 = v154;
                  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v101 - 8) + 16LL))(v154, v100, v101);
                  uint64_t v104 = v159;
                  uint64_t v103 = TupleTypeMetadata2;
                  uint64_t v105 = *(int *)(TupleTypeMetadata2 + 48);
                  uint64_t v106 = &v102[v105];
                  uint64_t v107 = (uint64_t)&v159[v105];
                  ((void (*)(char *, char *, uint64_t))v162)(v159, v102, v97);
                  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v90 - 8) + 16LL))(v107, v106, v90);
                  uint64_t v108 = (uint64_t)v104;
                  uint64_t v79 = v164;
                  _HashNode.Builder.addNewItem(_:_:at:)(v167, v108, v107, v166, v164);
                  (*(void (**)(char *, uint64_t))(v155 + 8))(v102, v103);
                }

                else
                {
                  uint64_t v79 = v164;
                }

                a4 = v177;
                Swift::Int v43 = v175;
                unsigned int v80 = v171;
                if (!v171) {
                  goto LABEL_51;
                }
                break;
              }

              int v112 = v43[1];
              if ((v112 & v111) != 0)
              {
                LODWORD(v166) = v109;
                unsigned int v171 = v80;
                v39.i32[0] = v112 & (v111 - 1);
                uint8x8_t v113 = (uint8x8_t)vcnt_s8(v39);
                v113.i16[0] = vaddlv_u8(v113);
                uint64_t v114 = v113.u32[0];
                uint64_t v115 = v180;
                uint64_t v116 = v174;
                uint64_t v117 = v176;
                uint64_t v118 = (void (*)(uint64_t, uint64_t))_HashNode.UnsafeHandle.subscript.unsafeAddressor( v179,  a4,  v178,  v180,  v174,  v176);
                uint64_t v119 = *(void *)v118;
                uint64_t v120 = *((void *)v118 + 1);
                uint64_t v165 = v118;
                uint64_t v121 = v172;
                uint64_t v122 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v114, v43, v173, v115, v172, v117);
                uint64_t v123 = *v122;
                uint64_t v124 = v122[1];
                swift_retain();
                swift_retain();
                uint64_t v145 = v117;
                uint64_t v125 = v158;
                uint64_t v126 = v115;
                uint64_t v38 = v164;
                _HashNode._intersection<A>(_:_:)(v163, v123, v124, v119, v120, v126, v116, v121, v145);
                swift_release();
                swift_release();
                uint64_t v127 = v152;
                uint64_t v128 = v150;
                uint64_t v129 = v153;
                (*(void (**)(char *, char *, uint64_t))(v152 + 16))(v150, v125, v153);
                uint64_t v130 = v151;
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v151 + 48))(v128, 1LL, v38) == 1)
                {
                  uint64_t v131 = *(void (**)(char *, uint64_t))(v127 + 8);
                  v131(v128, v129);
                  int v132 = v166;
                  if ((v81 & 1) != 0)
                  {
                    uint64_t v133 = v129;
                    uint64_t v135 = *(void *)v165;
                    uint64_t v134 = *((void *)v165 + 1);
                    swift_retain();
                    uint64_t v79 = v38;
                    _HashNode.Builder.addNewChildNode(_:_:at:)(v167, v135, v134, v132, v38);
                    v131(v158, v133);
                    a4 = v177;
                    unsigned int v80 = v171;
                    if (!v171) {
                      goto LABEL_51;
                    }
                    break;
                  }

                  v131(v158, v129);
                  a4 = v177;
                  unsigned int v80 = v171;
                  if (!v171) {
                    goto LABEL_52;
                  }
                  uint64_t v79 = v38;
                  char v81 = 0;
LABEL_31:
                  ++v179;
                  continue;
                }

                uint64_t v79 = v38;
                uint64_t v136 = v148;
                (*(void (**)(char *, char *, uint64_t))(v130 + 32))(v148, v128, v38);
                uint64_t v137 = v130;
                a4 = v177;
                uint64_t v138 = v167;
                int v139 = v166;
                if ((v81 & 1) == 0) {
                  _HashNode.Builder.copyItemsAndChildren(_:from:upTo:)(v167, v177, v178, v166, v79);
                }
                uint64_t v140 = (uint64_t)v149;
                (*(void (**)(char *, char *, uint64_t))(v137 + 16))(v149, v136, v79);
                _HashNode.Builder.addNewChildBranch(_:_:at:)(v138, v140, v139, v79);
                (*(void (**)(char *, uint64_t))(v137 + 8))(v136, v79);
                (*(void (**)(char *, uint64_t))(v152 + 8))(v158, v153);
                unsigned int v80 = v171;
                if (!v171) {
                  goto LABEL_51;
                }
              }

              else
              {
                if ((v81 & 1) == 0) {
                  _HashNode.Builder.copyItemsAndChildren(_:from:upTo:)(v167, a4, v178, v109, v79);
                }
                if (!v80) {
                  goto LABEL_51;
                }
              }

              break;
            }

            char v81 = 1;
            goto LABEL_31;
          }

          goto LABEL_52;
        }

        char v41 = 0;
      }

      uint64_t v36 = v176;
LABEL_5:
      unsigned int v42 = v179 + 1;
    }
  }

  unsigned int v80 = a4[1];
  Swift::Int v43 = v175;
  if (v80)
  {
    uint64_t v79 = v14;
    char v81 = 0;
    unsigned int v163 = v167 + 5;
    goto LABEL_26;
  }

            if ((v41 & 0x2000000000000000LL) != 0)
            {
              uint64_t v134 = v39;
              uint64_t v135 = v41 & 0xFFFFFFFFFFFFFFLL;
              swift_bridgeObjectRetain();
              sub_188DF8690();
              swift_bridgeObjectRelease();
            }

            else
            {
              if ((v39 & 0x1000000000000000LL) == 0) {
                sub_188DF8684();
              }
              swift_bridgeObjectRetain();
              sub_188DF8690();
              swift_bridgeObjectRelease();
              int v46 = v123;
            }

            goto LABEL_68;
          }
        }

        break;
      }

      if (v56 >> 14 < v52) {
        goto LABEL_159;
      }
      unint64_t result = v56;
      if (v56 >> 14 >= v46) {
        goto LABEL_159;
      }
      if ((v41 & 0x1000000000000000LL) != 0) {
        goto LABEL_66;
      }
      goto LABEL_51;
    }

    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      Swift::Int v43 = sub_188DF8480();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      unsigned int v44 = sub_188DF8480();
      unint64_t result = swift_bridgeObjectRelease();
      uint64_t v45 = v44 >> 14;
      if (v44 >> 14 >= v43 >> 14)
      {
        int v46 = v37 >> 14;
LABEL_73:
        if (v46 >= v45)
        {
          int v61 = sub_188DF84BC();
          uint64_t v63 = v62;
          uint64_t v65 = v64;
          uint64_t v67 = v66;
          unint64_t result = swift_bridgeObjectRelease();
          uint64_t v99 = 1LL;
          while (1)
          {
            if ((v67 & 0x1000000000000000LL) != 0)
            {
              char v81 = v63 >> 14;
              if (v61 >> 14 >= v63 >> 14) {
                goto LABEL_134;
              }
              uint64_t v88 = v61 >> 14;
              uint64_t v89 = 4LL << ((v65 & 0x800000000000000LL) != 0);
              uint64_t v90 = HIBYTE(v67) & 0xF;
              if ((v67 & 0x2000000000000000LL) == 0) {
                uint64_t v90 = v65 & 0xFFFFFFFFFFFFLL;
              }
              uint64_t v127 = v61 >> 14;
              uint64_t v129 = v90;
              Swift::Int v91 = v61;
              while (1)
              {
                uint64_t v92 = v91 & 0xC;
                uint64_t v93 = v92 == v89 || (v91 & 1) == 0;
                uint64_t v126 = v88;
                if (v93)
                {
                  uint64_t v94 = v91;
                  if (v92 == v89)
                  {
                    unint64_t result = sub_188D37044(v91, v65, v67);
                    uint64_t v92 = v91 & 0xC;
                    uint64_t v94 = result;
                  }

                  if (v129 <= v94 >> 16) {
                    goto LABEL_173;
                  }
                  uint64_t v124 = v92;
                  if ((v94 & 1) == 0) {
                    sub_188D36F34(v94, v65, v67);
                  }
                  uint64_t v95 = sub_188DF7E08();
                  unint64_t result = v91;
                  if (v124 == 4LL << ((v65 & 0x800000000000000LL) != 0)) {
                    unint64_t result = sub_188D37044(v91, v65, v67);
                  }
                  if (result >> 14 < v127 || result >> 14 >= v81) {
                    goto LABEL_174;
                  }
                  if ((result & 1) == 0) {
                    sub_188D36F34(result, v65, v67);
                  }
                }

                else
                {
                  if (v129 <= v91 >> 16) {
                    goto LABEL_175;
                  }
                  unint64_t result = sub_188DF7E08();
                  if (v91 >> 14 < v127) {
                    goto LABEL_176;
                  }
                  uint64_t v95 = result;
                  unint64_t result = v91;
                  if (v91 >> 14 >= v81) {
                    goto LABEL_176;
                  }
                }

                sub_188DF85F4();
                unint64_t result = sub_188DF8B34();
                uint8x8_t v82 = v95 >> 14;
                if ((result & 1) != 0) {
                  break;
                }
                Swift::Int v91 = v95;
                uint64_t v88 = v95 >> 14;
                uint64_t v89 = 4LL << ((v65 & 0x800000000000000LL) != 0);
                if (v82 >= v81) {
                  goto LABEL_134;
                }
              }

              if (v82 < v126) {
                goto LABEL_179;
              }
            }

            else
            {
              if ((v67 & 0x2000000000000000LL) != 0)
              {
                uint64_t v134 = v65;
                uint64_t v135 = v67 & 0xFFFFFFFFFFFFFFLL;
                uint64_t v69 = &v134;
                uint64_t v70 = v61;
                Swift::Int v71 = v63;
                uint64_t v72 = v65;
                uint64_t v73 = v67;
                uint64_t v68 = v133;
              }

              else
              {
                uint64_t v68 = v133;
                if ((v65 & 0x1000000000000000LL) != 0) {
                  uint64_t v69 = (void *)((v67 & 0xFFFFFFFFFFFFFFFLL) + 32);
                }
                else {
                  uint64_t v69 = (void *)sub_188DF8684();
                }
                uint64_t v70 = v61;
                Swift::Int v71 = v63;
                uint64_t v72 = v65;
                uint64_t v73 = v67;
              }

              uint64_t v74 = sub_188D632DC((uint64_t)v69, v70, v71, v72, v73);
              uint64_t v76 = v75;
              LOBYTE(v138) = v77 & 1;
              uint64_t v133 = v68;
              if ((v77 & 1) != 0)
              {
LABEL_134:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRetain();
                uint64_t v128 = sub_188DF848C();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRetain();
                int v132 = sub_188DF848C();
                swift_bridgeObjectRelease();
                uint64_t v35 = sub_188DF84BC();
                uint64_t v37 = v96;
                int8x8_t v39 = v97;
                char v41 = v98;
                goto LABEL_135;
              }

              unint64_t result = v61;
              if ((v61 & 0xC) == 8)
              {
                unint64_t result = sub_188D37044(v61, v65, v67);
                uint64_t v78 = v74 + (result >> 16);
                if (__OFADD__(v74, result >> 16))
                {
LABEL_148:
                  __break(1u);
LABEL_149:
                  __break(1u);
LABEL_150:
                  __break(1u);
LABEL_151:
                  __break(1u);
LABEL_152:
                  __break(1u);
LABEL_153:
                  __break(1u);
LABEL_154:
                  __break(1u);
LABEL_155:
                  __break(1u);
LABEL_156:
                  __break(1u);
LABEL_157:
                  __break(1u);
LABEL_158:
                  __break(1u);
LABEL_159:
                  __break(1u);
LABEL_160:
                  __break(1u);
LABEL_161:
                  __break(1u);
LABEL_162:
                  __break(1u);
                  goto LABEL_163;
                }
              }

              else
              {
                uint64_t v78 = v74 + (v61 >> 16);
                if (__OFADD__(v74, v61 >> 16)) {
                  goto LABEL_148;
                }
              }

              if ((v78 & 0x8000000000000000LL) != 0) {
                goto LABEL_149;
              }
              if ((v67 & 0x2000000000000000LL) != 0) {
                uint64_t v79 = HIBYTE(v67) & 0xF;
              }
              else {
                uint64_t v79 = v65 & 0xFFFFFFFFFFFFLL;
              }
              if (v79 < v78) {
                goto LABEL_150;
              }
              unint64_t result = v61;
              if ((v61 & 0xC) == 8)
              {
                unint64_t result = sub_188D37044(v61, v65, v67);
                unsigned int v80 = v76 + (result >> 16);
                if (__OFADD__(v76, result >> 16)) {
                  goto LABEL_151;
                }
              }

              else
              {
                unsigned int v80 = v76 + (v61 >> 16);
                if (__OFADD__(v76, v61 >> 16)) {
                  goto LABEL_151;
                }
              }

              if ((v80 & 0x8000000000000000LL) != 0) {
                goto LABEL_152;
              }
              if (v79 < v80) {
                goto LABEL_153;
              }
              if (v80 < v78) {
                goto LABEL_154;
              }
              char v81 = v63 >> 14;
              uint8x8_t v82 = 4 * v80;
            }

            if (v81 < v82) {
              goto LABEL_155;
            }
            int v61 = sub_188DF84BC();
            uint64_t v63 = v83;
            uint64_t v65 = v84;
            uint64_t v86 = v85;
            unint64_t result = swift_bridgeObjectRelease();
            uint64_t v67 = v86;
            if (__OFADD__(v99++, 1LL)) {
              goto LABEL_156;
            }
          }
        }

        goto LABEL_170;
      }

      goto LABEL_171;
    }

      sub_188DB27A8(v25, v26, v27, v15, a5);
      goto LABEL_52;
    }
  }

  else
  {
    if (v10 < 0) {
      goto LABEL_63;
    }
    Swift::Int v28 = *(void *)(a2 + 40 * v12 + 32);
    if (v28 < v10) {
      goto LABEL_63;
    }
    if (v10 != v28)
    {
      uint64_t v29 = *v21;
      uint64_t v30 = *(unsigned __int8 *)(*v21 + 18);
      uint64_t v31 = *v21 + 24;
      swift_unknownObjectRetain();
      uint64_t v32 = v29 + 16;
      if (v30) {
        sub_188DB27A8(v32, v31, v10, v28, a5);
      }
      else {
        sub_188DB169C(v32, v31, v10, v28, a5);
      }
      swift_unknownObjectRelease();
    }

    uint64_t v33 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      goto LABEL_64;
    }
    if (v18 < v33)
    {
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }

    if (v33 != v18)
    {
      if (v33 >= v18)
      {
LABEL_68:
        __break(1u);
        return;
      }

      Swift::Int v34 = ~v12 + v18;
      uint64_t v35 = a2 + 40 * v12 + 40;
      do
      {
        uint64_t v36 = *(_OWORD *)(v35 + 16);
        v44[0] = *(_OWORD *)v35;
        v44[1] = v36;
        uint64_t v45 = *(void *)(v35 + 32);
        swift_unknownObjectRetain();
        sub_188DB7BE8(v44, v37, v38, v39);
        v35 += 40LL;
        --v34;
      }

      while (v34);
    }

    if (v15 < 0) {
      goto LABEL_66;
    }
    unsigned int v40 = (void *)(a2 + 40 * v18);
    if (v40[4] < v15) {
      goto LABEL_66;
    }
    if (v15)
    {
      char v41 = *v40;
      unsigned int v42 = *(unsigned __int8 *)(*v40 + 18LL);
      Swift::Int v43 = *v40 + 24LL;
      swift_unknownObjectRetain();
      uint64_t v25 = v41 + 16;
      uint64_t v26 = v43;
      uint64_t v27 = 0LL;
      if (!v42) {
        goto LABEL_32;
      }
      goto LABEL_51;
    }
  }

    uint64_t v151 = v86;
    uint64_t v149 = v185;
    (*(void (**)(char *, uint64_t))(v85 + 8))(v151, v185);
    uint64_t v150 = 1LL;
    uint64_t v147 = v155;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v85 + 56))(v147, v150, 1LL, v149);
  }

  uint64_t v188 = 0;
  char v49 = 0;
  uint64_t v173 = v47 + 5;
  while (1)
  {
    while (1)
    {
      uint64_t v50 = __clz(__rbit32(v48));
      v48 &= v48 - 1;
      CollectionsInternal::_HeapNode v51 = _HashNode.UnsafeHandle.itemPtr(at:)(v49, (uint64_t)a4, v191);
      Swift::Int v52 = v189;
      uint64_t v53 = *v189;
      uint64_t v54 = 1 << v50;
      uint64_t v183 = v50;
      uint64_t v182 = v51;
      if (((1 << v50) & v53) != 0) {
        break;
      }
      uint64_t v67 = v189[1];
      if ((v67 & v54) == 0)
      {
        if ((v188 & 1) != 0)
        {
          uint64_t v174 = *(void (**)(char *))(v179 + 16);
          goto LABEL_19;
        }

    uint64_t v22 = 0;
    return v22 & 1;
  }

  unint64_t result = (uint64_t)sub_188CF61CC(v68);
  if ((v34 & 1) == 0)
  {
    uint64_t v35 = sub_188CF7528(0LL, ((result & (unint64_t)~(result >> 63)) + 64) >> 6, 0, MEMORY[0x18961AFE8]);
    uint64_t v69 = v35;
    v26(v21, a1, a3);
    sub_188DF7FDC();
    uint64_t v36 = v67;
    swift_getAssociatedConformanceWitness();
    unint64_t result = sub_188DF84D4();
    uint64_t v37 = v68;
    if ((v71 & 1) != 0)
    {
LABEL_22:
      if (!v35) {
        goto LABEL_71;
      }
    }

    else
    {
      uint64_t v38 = v68 + 4;
      while ((v70 & 0x8000000000000000LL) == 0)
      {
        int8x8_t v39 = v70 >> 6;
        if (v70 >> 6 >= *(void *)&v37[2]) {
          break;
        }
        unsigned int v40 = 1LL << v70;
        if ((*(void *)&v38[v39] & (1LL << v70)) == 0) {
          break;
        }
        if (!v35) {
          goto LABEL_88;
        }
        uint64_t v35 = v69;
        char v41 = *((void *)v69 + 2);
        unsigned int v42 = v39 >= v41;
        Swift::Int v43 = v39 - v41;
        if (v42)
        {
          if (v43 < -1) {
            goto LABEL_85;
          }
          sub_188D2EF64(v43 + 1, 0LL);
          uint64_t v35 = v69;
        }

        unint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          unint64_t result = (uint64_t)sub_188CF73DC((uint64_t)v35);
          uint64_t v35 = (char *)result;
        }

        unsigned int v44 = (int8x8_t *)(v35 + 32);
        *(void *)&v35[8 * v39 + 32] |= v40;
        uint64_t v69 = v35;
        uint64_t v45 = *((void *)v35 + 2);
        if (v45)
        {
          int v46 = 0LL;
          int v47 = 8 * v45;
          do
          {
            uint8x8_t v48 = (uint8x8_t)vcnt_s8(*v44);
            v48.i16[0] = vaddlv_u8(v48);
            uint64_t v33 = __OFADD__(v46, v48.u32[0]);
            v46 += v48.u32[0];
            if (v33)
            {
LABEL_81:
              __break(1u);
              goto LABEL_82;
            }

            ++v44;
            v47 -= 8LL;
          }

          while (v47);
          char v49 = v37[2];
          if (v49) {
            goto LABEL_44;
          }
          if (!v46)
          {
LABEL_70:
            swift_bridgeObjectRelease();
            uint64_t v69 = 0LL;
LABEL_71:
            while (1)
            {
              sub_188DF84D4();
              if ((v71 & 1) != 0) {
                break;
              }
              if ((v70 & 0x8000000000000000LL) != 0
                || v70 >> 6 >= *(void *)&v37[2]
                || ((*(void *)&v37[(v70 >> 6) + 4] >> v70) & 1) == 0)
              {
                goto LABEL_23;
              }
            }

            (*(void (**)(char *, uint64_t))(v66 + 8))(v9, v36);
            swift_bridgeObjectRelease();
            uint64_t v22 = 1;
            return v22 & 1;
          }
        }

        else
        {
          char v49 = v37[2];
          if (!*(void *)&v49) {
            goto LABEL_70;
          }
          int v46 = 0LL;
LABEL_44:
          uint64_t v50 = 0LL;
          CollectionsInternal::_HeapNode v51 = 8LL * *(void *)&v49;
          Swift::Int v52 = v37 + 4;
          do
          {
            uint64_t v53 = (uint8x8_t)vcnt_s8(*v52);
            v53.i16[0] = vaddlv_u8(v53);
            uint64_t v33 = __OFADD__(v50, v53.u32[0]);
            v50 += v53.u32[0];
            if (v33)
            {
              __break(1u);
              goto LABEL_81;
            }

            ++v52;
            v51 -= 8LL;
          }

          while (v51);
          if (v46 == v50) {
            goto LABEL_70;
          }
        }

        unint64_t result = sub_188DF84D4();
        if ((v71 & 1) != 0) {
          goto LABEL_22;
        }
      }
    }

    uint64_t v97 = v188;
    uint64_t v98 = v189;
    if ((sub_188DF7D90() & 1) != 0)
    {
      uint64_t v99 = v177;
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v177, v97, v98);
      uint64_t v100 = v179;
      MEMORY[0x1895D7620](MEMORY[0x1896196A8], v179);
      sub_188DF8294();
      (*(void (**)(char *, uint64_t))(v178 + 8))(v99, v100);
      sub_188DF7FDC();
      uint64_t v101 = swift_getAssociatedConformanceWitness();
      uint64_t v102 = v190;
      unint64_t v194 = (char *)v101;
      sub_188DF84D4();
      uint64_t v103 = v181;
      uint64_t v192 = *(char **)(v197 + 48);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v192)(v102, 1LL, v181) != 1)
      {
        uint64_t v191 = *(void (**)(char *, char *, uint64_t))(v197 + 32);
        uint64_t v104 = 1LL;
        do
        {
          v191(v195, v102, v103);
          uint64_t v105 = sub_188DF7C40();
          uint64_t v106 = *a3;
          uint64_t v107 = 1LL << *a3;
          uint64_t v108 = v107 - 1;
          if (__OFSUB__(v107, 1LL)) {
            goto LABEL_158;
          }
          uint64_t v109 = v108 & v105;
          int v110 = _HashTable.UnsafeHandle._startIterator(bucket:)(v108 & v105, a3, a4);
          uint64_t v199 = a3;
          uint64_t v200 = a4;
          if (!v110) {
            goto LABEL_172;
          }
          uint8x8_t v113 = -1LL << *a3;
          uint64_t v114 = ~v113;
          uint64_t v115 = (uint64_t)a3[1] >> 6;
          uint64_t v116 = (v113 ^ ~v110) + v115;
          if (v116 >= ~v113) {
            uint64_t v117 = ~v113;
          }
          else {
            uint64_t v117 = 0LL;
          }
          if (v116 - v117 != v104)
          {
            uint64_t v118 = 0;
            uint64_t v119 = v106 & 0x3F;
            uint64_t v120 = __OFADD__(v119 << v119, 64LL);
            uint64_t v121 = (v119 << v119) + 126;
            if ((v119 << v119) + 64 >= 1) {
              uint64_t v121 = (v119 << v119) + 63;
            }
            uint64_t v122 = v121 >> 6;
            while (1)
            {
              if (++v109 == v107)
              {
                if ((v118 & 1) != 0) {
                  goto LABEL_174;
                }
                uint64_t v109 = 0LL;
                uint64_t v118 = 1;
              }

              if (v112 >= v119)
              {
                unsigned int v40 = __OFSUB__(v112, v119);
                v112 -= v119;
                if (v40)
                {
                  __break(1u);
LABEL_151:
                  __break(1u);
LABEL_152:
                  __break(1u);
LABEL_153:
                  __break(1u);
LABEL_154:
                  __break(1u);
                  goto LABEL_155;
                }

                uint64_t v129 = v111 >> v119;
              }

              else
              {
                uint64_t v123 = (v109 * v119) >> 6;
                if (v112)
                {
                  if (v120) {
                    goto LABEL_156;
                  }
                  if (v123 + 1 == v122) {
                    uint64_t v123 = 0LL;
                  }
                  else {
                    ++v123;
                  }
                }

                uint64_t v124 = v119 - v112;
                if (__OFSUB__(v119, v112)) {
                  goto LABEL_151;
                }
                if (v123 == 2 && v119 == 5) {
                  uint64_t v126 = 32LL;
                }
                else {
                  uint64_t v126 = 64LL;
                }
                unsigned int v40 = __OFSUB__(v126, v124);
                uint64_t v127 = v126 - v124;
                if (v40) {
                  goto LABEL_153;
                }
                uint64_t v128 = *(void *)(a4 + 8 * v123);
                v111 |= v128 << v112;
                uint64_t v129 = v128 >> v124;
                int v112 = v127;
              }

              int v110 = v111 & v108;
              if ((v111 & v108) == 0) {
                goto LABEL_172;
              }
              uint64_t v130 = (v110 ^ v114) + v115;
              if (v130 >= v114) {
                uint64_t v131 = v114;
              }
              else {
                uint64_t v131 = 0LL;
              }
              int v111 = v129;
              if (v130 - v131 == v104)
              {
                int v111 = v129;
                goto LABEL_93;
              }
            }
          }

          uint64_t v118 = 0;
LABEL_93:
          uint64_t v205 = v118;
          uint64_t v201 = v109;
          unsigned int v202 = v110;
          unint64_t v203 = v111;
          uint64_t v204 = v112;
          int v132 = v115 + (v110 ^ v108);
          if (v132 >= v108) {
            uint64_t v133 = v107 - 1;
          }
          else {
            uint64_t v133 = 0LL;
          }
          uint64_t v134 = v132 - v133;
          if (__OFSUB__(v134, 1LL)) {
            goto LABEL_160;
          }
          _HashTable.BucketIterator.currentValue.setter(v134 - 1, 0);
          (*(void (**)(char *, uint64_t))(v197 + 8))(v195, v103);
          unsigned int v40 = __OFADD__(v104++, 1LL);
          if (v40) {
            goto LABEL_161;
          }
          uint64_t v102 = v190;
          sub_188DF84D4();
        }

        while (((unsigned int (*)(char *, uint64_t, uint64_t))v192)(v102, 1LL, v103) != 1);
      }

      (*(void (**)(char *, uint64_t))(v180 + 8))(v193, v198);
      return v186(v188, v189);
    }

    goto LABEL_170;
  }

  Swift::Int v71 = sub_188DF81E0();
  uint64_t v72 = v71 - a1;
  if (__OFSUB__(v71, a1)) {
    goto LABEL_168;
  }
  if (__OFSUB__(v72, 1LL))
  {
LABEL_169:
    __break(1u);
LABEL_170:
    __break(1u);
LABEL_171:
    __break(1u);
LABEL_172:
    __break(1u);
    goto LABEL_173;
  }

  if (_s19CollectionsInternal10_HashTableV15maximumCapacity8forScaleS2i_tFZ_0(*a3 & 0x3FLL) / 3 < v72 - 1)
  {
    uint64_t v73 = _HashTable.UnsafeHandle._startIterator(bucket:)(0LL, a3, a4);
    uint64_t v74 = 0LL;
    uint64_t v199 = a3;
    uint64_t v200 = a4;
    uint64_t v201 = 0LL;
    unsigned int v202 = v73;
    unint64_t v203 = v75;
    uint64_t v204 = v76;
    uint64_t v205 = 0;
    while (1)
    {
      if (v202)
      {
        unsigned int v80 = v199;
        char v81 = ~(-1LL << *v199);
        uint8x8_t v82 = (uint64_t)v199[1] >> 6;
        uint64_t v83 = v82 + (v202 ^ v81);
        uint64_t v84 = v83 >= v81 ? ~(-1LL << *v199) : 0LL;
        uint64_t v85 = v83 - v84;
        if (v85 >= a1)
        {
          unsigned int v40 = __OFADD__(v85, 1LL);
          uint64_t v86 = v85 + 1;
          if (v40) {
            goto LABEL_165;
          }
          uint64_t v87 = *v199 & 0x3FLL;
          uint64_t v88 = ((v81 & ((v86 - v82) >> 63)) + v86 - v82) ^ v81;
          uint64_t v89 = v88 ^ v202;
          uint64_t v90 = v87 * v74;
          Swift::Int v91 = (v87 * v74) >> 6;
          uint64_t v92 = (v87 * v74) & 0x3F;
          uint64_t v93 = v200;
          *(void *)(v200 + 8 * v91) ^= (v88 ^ v202) << v90;
          uint64_t v94 = *v80 & 0x3FLL;
          if (64 - v92 < v94)
          {
            uint64_t v95 = v94 << v94;
            unsigned int v40 = __OFADD__(v95, 64LL);
            uint64_t v96 = v95 + 64;
            if (v40)
            {
              __break(1u);
              goto LABEL_51;
            }

            uint64_t v77 = v96 - 1;
            uint64_t v67 = v96 < 1;
            uint64_t v78 = v96 + 62;
            if (!v67) {
              uint64_t v78 = v77;
            }
            if (v91 + 1 == v78 >> 6) {
              uint64_t v79 = 0LL;
            }
            else {
              uint64_t v79 = v91 + 1;
            }
            *(void *)(v93 + 8 * v79) ^= v89 >> (64 - v92);
          }

          unsigned int v202 = v88;
        }
      }

      _HashTable.BucketIterator.advance()();
      uint64_t v74 = v201;
      if (!v201) {
        return v186(v188, v189);
      }
    }
  }

  uint64_t v135 = v188;
  uint64_t v136 = v189;
  if ((sub_188DF7D90() & 1) == 0) {
    goto LABEL_171;
  }
  uint64_t v137 = v174;
  (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v174, v135, v136);
  uint64_t v138 = v176;
  MEMORY[0x1895D7620](MEMORY[0x189619690], v176);
  sub_188DF8294();
  (*(void (**)(char *, uint64_t))(v175 + 8))(v137, v138);
  sub_188DF7FDC();
  int v139 = swift_getAssociatedConformanceWitness();
  uint64_t v140 = v191;
  uint64_t v195 = (char *)v139;
  sub_188DF84D4();
  uint64_t v141 = v181;
  uint64_t v193 = *(char **)(v197 + 48);
  if (((unsigned int (*)(void, uint64_t, uint64_t))v193)(v140, 1LL, v181) == 1)
  {
LABEL_148:
    (*(void (**)(char *, uint64_t))(v180 + 8))(v192, v198);
    return v186(v188, v189);
  }

  uint64_t v190 = *(char **)(v197 + 32);
  while (1)
  {
    ((void (*)(char *, void, uint64_t))v190)(v194, v140, v141);
    uint64_t v142 = sub_188DF7C40();
    uint64_t v143 = *a3;
    uint64_t v144 = 1LL << *a3;
    uint64_t v145 = v144 - 1;
    if (__OFSUB__(v144, 1LL)) {
      goto LABEL_159;
    }
    uint64_t v146 = v145 & v142;
    uint64_t v147 = _HashTable.UnsafeHandle._startIterator(bucket:)(v145 & v142, a3, a4);
    uint64_t v199 = a3;
    uint64_t v200 = a4;
    if (!v147) {
      break;
    }
    uint64_t v150 = -1LL << *a3;
    uint64_t v151 = ~v150;
    uint64_t v152 = (uint64_t)a3[1] >> 6;
    uint64_t v153 = (v150 ^ ~v147) + v152;
    if (v153 >= ~v150) {
      uint64_t v154 = ~v150;
    }
    else {
      uint64_t v154 = 0LL;
    }
    if (v153 - v154 != a1)
    {
      uint64_t v155 = 0;
      uint64_t v156 = v143 & 0x3F;
      uint64_t v157 = __OFADD__(v156 << v156, 64LL);
      uint64_t v158 = (v156 << v156) + 126;
      if ((v156 << v156) + 64 >= 1) {
        uint64_t v158 = (v156 << v156) + 63;
      }
      uint64_t v159 = v158 >> 6;
      while (1)
      {
        if (++v146 == v144)
        {
          if ((v155 & 1) != 0) {
            goto LABEL_174;
          }
          uint64_t v146 = 0LL;
          uint64_t v155 = 1;
        }

        if (v149 >= v156)
        {
          unsigned int v40 = __OFSUB__(v149, v156);
          v149 -= v156;
          if (v40) {
            goto LABEL_152;
          }
          uint64_t v166 = v148 >> v156;
        }

        else
        {
          uint64_t v160 = (v146 * v156) >> 6;
          if (v149)
          {
            if (v157) {
              goto LABEL_157;
            }
            if (v160 + 1 == v159) {
              uint64_t v160 = 0LL;
            }
            else {
              ++v160;
            }
          }

          char v161 = v156 - v149;
          if (__OFSUB__(v156, v149)) {
            goto LABEL_154;
          }
          if (v160 == 2 && v156 == 5) {
            unsigned int v163 = 32LL;
          }
          else {
            unsigned int v163 = 64LL;
          }
          unsigned int v40 = __OFSUB__(v163, v161);
          uint64_t v164 = v163 - v161;
          if (v40)
          {
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
LABEL_159:
            __break(1u);
LABEL_160:
            __break(1u);
LABEL_161:
            __break(1u);
LABEL_162:
            __break(1u);
LABEL_163:
            __break(1u);
LABEL_164:
            __break(1u);
LABEL_165:
            __break(1u);
LABEL_166:
            __break(1u);
LABEL_167:
            __break(1u);
LABEL_168:
            __break(1u);
            goto LABEL_169;
          }

          uint64_t v165 = *(void *)(a4 + 8 * v160);
          v148 |= v165 << v149;
          uint64_t v166 = v165 >> v161;
          uint64_t v149 = v164;
        }

        uint64_t v147 = v148 & v145;
        if ((v148 & v145) == 0) {
          goto LABEL_173;
        }
        unsigned int v167 = (v147 ^ v151) + v152;
        if (v167 >= v151) {
          unint64_t v168 = v151;
        }
        else {
          unint64_t v168 = 0LL;
        }
        uint64_t v148 = v166;
        if (v167 - v168 == a1)
        {
          uint64_t v148 = v166;
          goto LABEL_142;
        }
      }
    }

    uint64_t v155 = 0;
LABEL_142:
    uint64_t v205 = v155;
    uint64_t v201 = v146;
    unsigned int v202 = v147;
    unint64_t v203 = v148;
    uint64_t v204 = v149;
    uint64_t v169 = v152 + (v147 ^ v145);
    if (v169 >= v145) {
      uint64_t v170 = v144 - 1;
    }
    else {
      uint64_t v170 = 0LL;
    }
    unsigned int v171 = v169 - v170;
    uint64_t v140 = v191;
    if (__OFADD__(v171, 1LL)) {
      goto LABEL_162;
    }
    _HashTable.BucketIterator.currentValue.setter(v171 + 1, 0);
    (*(void (**)(char *, uint64_t))(v197 + 8))(v194, v141);
    unsigned int v40 = __OFADD__(a1++, 1LL);
    if (v40) {
      goto LABEL_163;
    }
    sub_188DF84D4();
  }