void sub_100076ACC(_Unwind_Exception *a1)
{
  void *v1;
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100076AE0(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  v4[0] = a2;
  v4[1] = a3;
  return sub_100076B14((std::string *)(a1 + 8), (void (**)(uint64_t, uint64_t *, std::string *, void))a1, v4);
}

uint64_t sub_100076B14( std::string *__str, void (**a2)(uint64_t, uint64_t *, std::string *, void), unsigned int **a3)
{
  v4 = *a2;
  uint64_t v5 = **a3;
  uint64_t v6 = *(void *)a3[1];
  if (v6) {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24LL))(v6);
  }
  uint64_t v9 = v6;
  std::string::basic_string(&__p, __str);
  v4(v5, &v9, &__p, LODWORD(__str[1].__r_.__value_.__l.__data_));
  uint64_t result = v9;
  if (v9) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  return result;
}

void sub_100076BA8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8LL))(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100076BE0(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v7 = *a2;
  std::string::basic_string(&__p, (const std::string *)(a2 + 1));
  int v9 = *((_DWORD *)a2 + 8);
  sub_100076C70(a1, (uint64_t)&v7, a3);
  return 1LL;
}

void sub_100076C54( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_100076C70(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v5 = *(void *)a2;
  uint64_t result = std::string::basic_string((std::string *)(v5 + 8), (const std::string *)(a2 + 8));
  *((_DWORD *)v5 + 8) = *(_DWORD *)(a2 + 32);
  *a3 = v5;
  return result;
}

void sub_100076CC0(_Unwind_Exception *a1)
{
}

_DWORD *sub_100076CD4(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t v5 = (void **)sub_100076D7C((uint64_t)a1, &v11, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    uint64_t v6 = operator new(0x20uLL);
    v9[1] = a1 + 1;
    v6[7] = *a3;
    char v10 = 1;
    sub_10000AF70(a1, v11, (void **)v7, v6);
    v9[0] = 0LL;
    sub_10000D0A8(v9, 0LL);
  }

  return v6;
}

void *sub_100076D7C(uint64_t a1, void *a2, unsigned int *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t result = (void *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    unsigned int v6 = *a3;
    do
    {
      while (1)
      {
        uint64_t v7 = (void *)v4;
        unsigned int v8 = *(_DWORD *)(v4 + 28);
        if (v6 >= v8) {
          break;
        }
        uint64_t v4 = *v7;
        uint64_t result = v7;
        if (!*v7) {
          goto LABEL_10;
        }
      }

      if (v8 >= v6) {
        break;
      }
      uint64_t result = v7 + 1;
      uint64_t v4 = v7[1];
    }

    while (v4);
  }

  else
  {
    uint64_t v7 = result;
  }

uint64_t *sub_100076DCC(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2) {
    sub_100076E04(a1, *a2, (uint64_t)(a2 + 1));
  }
  return a1;
}

uint64_t *sub_100076E04(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t **)result;
  uint64_t v9 = a2;
  if (!result[2]) {
    goto LABEL_11;
  }
  sub_100076F44(&v6, result);
  while (1)
  {
    uint64_t v5 = (uint64_t)v8;
    if (!v8 || v9 == a3) {
      break;
    }
    *((_DWORD *)v8 + 7) = *(_DWORD *)(v9 + 28);
    sub_100076EC8(v4, v5);
    unsigned int v8 = v7;
    if (v7) {
      uint64_t v7 = sub_100076FF4((uint64_t)v7);
    }
    sub_10000B338((uint64_t)&v9);
  }

  for (uint64_t result = (uint64_t *)sub_100077048((uint64_t)&v6); ; uint64_t result = (uint64_t *)sub_10000B338((uint64_t)&v9))
  {
    a2 = v9;
LABEL_11:
    if (a2 == a3) {
      break;
    }
    sub_100077098(v4, (_DWORD *)(a2 + 28));
  }

  return result;
}

uint64_t sub_100076EC8(uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = sub_100076FA8((uint64_t)a1, &v6, (_DWORD *)(a2 + 28));
  sub_10000AF70(a1, v6, (void **)v4, (void *)a2);
  return a2;
}

void *sub_100076F14(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 8);
  *(void *)(a1 + 16) = result;
  if (result)
  {
    uint64_t result = sub_100076FF4((uint64_t)result);
    *(void *)(a1 + 8) = result;
  }

  return result;
}

uint64_t **sub_100076F44(uint64_t **a1, uint64_t *a2)
{
  *a1 = a2;
  a1[1] = (uint64_t *)sub_100076F7C(a2);
  sub_100076F14((uint64_t)a1);
  return a1;
}

uint64_t sub_100076F7C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  *a1 = (uint64_t)(a1 + 1);
  *(void *)(v2 + 16) = 0LL;
  a1[2] = 0LL;
  a1[1] = 0LL;
  if (*(void *)(v1 + 8)) {
    return *(void *)(v1 + 8);
  }
  else {
    return v1;
  }
}

void *sub_100076FA8(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  v3 = (void *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    do
    {
      while (1)
      {
        v3 = v4;
        if (*a3 >= *((_DWORD *)v4 + 7)) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v4;
        uint64_t v6 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }

      uint64_t v4 = (uint64_t *)v4[1];
    }

    while (v4);
    uint64_t v6 = v3 + 1;
  }

  else
  {
    uint64_t v6 = v3;
  }

void *sub_100076FF4(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 16);
  if (result)
  {
    v3 = (void *)*result;
    if (*result == a1)
    {
      *uint64_t result = 0LL;
      while (1)
      {
        uint64_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          uint64_t result = v4;
          uint64_t v4 = (void *)*v4;
        }

        while (v4);
      }
    }

    else
    {
      for (result[1] = 0LL; v3; v3 = (void *)result[1])
      {
        do
        {
          uint64_t result = v3;
          v3 = (void *)*v3;
        }

        while (v3);
      }
    }
  }

  return result;
}

uint64_t sub_100077048(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    while (1)
    {
      v3 = (void *)v2[2];
      if (!v3) {
        break;
      }
      *(void *)(a1 + 8) = v3;
      uint64_t v2 = v3;
    }

    sub_10000D0FC(*(void *)a1, v2);
  }

  return a1;
}

_DWORD *sub_100077098(uint64_t **a1, _DWORD *a2)
{
  uint64_t v4 = a1 + 1;
  uint64_t v5 = operator new(0x20uLL);
  v9[1] = v4;
  v5[7] = *a2;
  char v10 = 1;
  uint64_t v6 = sub_100076FA8((uint64_t)a1, &v8, v5 + 7);
  sub_10000AF70(a1, v8, (void **)v6, v5);
  v9[0] = 0LL;
  sub_10000D0A8(v9, 0LL);
  return v5;
}

void sub_100077124()
{
}

void *sub_100077138(void *a1, uint64_t *a2)
{
  uint64_t v4 = sub_10000C8F8(a1);
  sub_100077180((uint64_t)v4, *a2, (uint64_t)(a2 + 1));
  return a1;
}

void sub_10007716C(_Unwind_Exception *a1)
{
}

uint64_t sub_100077180(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a2;
  if (a2 != a3)
  {
    uint64_t v4 = (uint64_t **)result;
    uint64_t v5 = (void *)(result + 8);
    do
    {
      sub_1000771E8(v4, v5, (unint64_t *)(a2 + 28), (_OWORD *)(a2 + 28));
      uint64_t result = sub_10000B338((uint64_t)&v6);
      a2 = v6;
    }

    while (v6 != a3);
  }

  return result;
}

char *sub_1000771E8(uint64_t **a1, void *a2, unint64_t *a3, _OWORD *a4)
{
  uint64_t v6 = (void **)sub_100077298(a1, a2, &v14, &v13, a3);
  uint64_t v7 = (char *)*v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    uint64_t v7 = (char *)operator new(0x40uLL);
    v11[1] = a1 + 1;
    __int128 v9 = a4[1];
    *(_OWORD *)(v7 + 28) = *a4;
    *(_OWORD *)(v7 + 44) = v9;
    char v12 = 1;
    sub_10000AF70(a1, v14, (void **)v8, v7);
    v11[0] = 0LL;
    sub_10000D0A8(v11, 0LL);
  }

  return v7;
}

void **sub_100077298(void **result, void *a2, void *a3, void *a4, unint64_t *a5)
{
  uint64_t v8 = (uint64_t)result;
  __int128 v9 = result + 1;
  if (result + 1 != a2)
  {
    if ((unint64_t v10 = bswap64(*a5), v11 = bswap64(*(void *)((char *)a2 + 28)), v10 == v11)
      && (unint64_t v10 = bswap64(a5[1]), v11 = bswap64(*(void *)((char *)a2 + 36)), v10 == v11)
      || (v10 < v11 ? (int v14 = -1) : (int v14 = 1), (v14 & 0x80000000) == 0))
    {
      unint64_t v15 = bswap64(*(void *)((char *)a2 + 28));
      unint64_t v16 = bswap64(*a5);
      if (v15 == v16 && (unint64_t v15 = bswap64(*(void *)((char *)a2 + 36)), v16 = bswap64(a5[1]), v15 == v16)
        || (v15 < v16 ? (int v20 = -1) : (int v20 = 1), (v20 & 0x80000000) == 0))
      {
        *a3 = a2;
        *a4 = a2;
        return (void **)a4;
      }

      v23 = a2;
      sub_10000B338((uint64_t)&v23);
      a4 = v23;
      if (v23 == v9
        || ((unint64_t v17 = bswap64(*a5), v18 = bswap64(*(void *)((char *)v23 + 28)), v17 != v18)
         || (unint64_t v17 = bswap64(a5[1]), v18 = bswap64(*(void *)((char *)v23 + 36)), v17 != v18)
          ? (v17 < v18
           ? (int v19 = -1)
           : (int v19 = 1))
          : (int v19 = 0),
            v19 < 0))
      {
        if (a2[1])
        {
          *a3 = v23;
        }

        else
        {
          *a3 = a2;
          return (void **)(a2 + 1);
        }

        return (void **)a4;
      }

      return (void **)sub_1000774AC(v8, a3, a5);
    }
  }

  v23 = a2;
  if (*result != a2)
  {
    uint64_t result = sub_10000CB60(&v23);
    unint64_t v12 = bswap64(*(void *)((char *)*result + 28));
    unint64_t v13 = bswap64(*a5);
    if (v12 == v13)
    {
      unint64_t v12 = bswap64(*(void *)((char *)*result + 36));
      unint64_t v13 = bswap64(a5[1]);
      if (v12 == v13) {
        return (void **)sub_1000774AC(v8, a3, a5);
      }
    }

    int v21 = v12 < v13 ? -1 : 1;
    if ((v21 & 0x80000000) == 0) {
      return (void **)sub_1000774AC(v8, a3, a5);
    }
  }

  if (!*a2)
  {
    *a3 = a2;
    return (void **)a2;
  }

  v22 = v23;
  *a3 = v23;
  if (v22) {
    return (void **)(v22 + 1);
  }
  __break(0x5516u);
  return result;
}

void *sub_1000774AC(uint64_t a1, void *a2, unint64_t *a3)
{
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t result = (void *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    do
    {
      while (1)
      {
        uint64_t v6 = v4;
        unint64_t v7 = bswap64(*a3);
        unint64_t v8 = bswap64(*(void *)((char *)v6 + 28));
        if (v7 == v8)
        {
          unint64_t v7 = bswap64(a3[1]);
          unint64_t v8 = bswap64(*(void *)((char *)v6 + 36));
          if (v7 == v8) {
            break;
          }
        }

        int v9 = v7 < v8 ? -1 : 1;
        if ((v9 & 0x80000000) == 0) {
          break;
        }
        uint64_t v4 = (void *)*v6;
        uint64_t result = v6;
        if (!*v6) {
          goto LABEL_20;
        }
      }

      unint64_t v10 = bswap64(*(void *)((char *)v6 + 28));
      unint64_t v11 = bswap64(*a3);
      if (v10 == v11)
      {
        unint64_t v10 = bswap64(*(void *)((char *)v6 + 36));
        unint64_t v11 = bswap64(a3[1]);
        if (v10 == v11) {
          break;
        }
      }

      int v12 = v10 < v11 ? -1 : 1;
      if ((v12 & 0x80000000) == 0) {
        break;
      }
      uint64_t result = v6 + 1;
      uint64_t v4 = (void *)v6[1];
    }

    while (v4);
  }

  else
  {
    uint64_t v6 = result;
  }

LABEL_20:
  *a2 = v6;
  return result;
}

  int v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_txDelayavg));
  [v3 setObject:v14 forKey:@"tx_delayavg"];

  has = (__int16)self->_has;
  if ((has & 0x200) != 0) {
    goto LABEL_21;
  }
LABEL_10:
  if ((has & 4) != 0)
  {
LABEL_11:
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_rxSuccessRate));
    [v3 setObject:v5 forKey:@"rx_success_rate"];
  }

  return v3;
}

  PBDataWriterWriteUint32Field(v5, self->_txDelayavg, 8LL);
  has = (__int16)self->_has;
  if ((has & 0x200) != 0) {
    goto LABEL_21;
  }
LABEL_10:
  if ((has & 4) != 0) {
LABEL_11:
  }
    PBDataWriterWriteUint32Field(v5, self->_rxSuccessRate, 10LL);
LABEL_12:
}

  v4[6] = self->_txDelayavg;
  *((_WORD *)v4 + 24) |= 0x10u;
  has = (__int16)self->_has;
  if ((has & 0x200) != 0) {
    goto LABEL_21;
  }
LABEL_10:
  if ((has & 4) != 0)
  {
LABEL_11:
    v4[4] = self->_rxSuccessRate;
    *((_WORD *)v4 + 24) |= 4u;
  }

  *((_DWORD *)result + 6) = self->_txDelayavg;
  *((_WORD *)result + 24) |= 0x10u;
  has = (__int16)self->_has;
  if ((has & 0x200) == 0)
  {
LABEL_10:
    if ((has & 4) == 0) {
      return result;
    }
    goto LABEL_11;
  }

  self->_txDelayavg = *((_DWORD *)v4 + 6);
  *(_WORD *)&self->_has |= 0x10u;
  uint64_t v5 = *((_WORD *)v4 + 24);
  if ((v5 & 0x200) != 0) {
    goto LABEL_21;
  }
LABEL_10:
  if ((v5 & 4) != 0)
  {
LABEL_11:
    self->_rxSuccessRate = *((_DWORD *)v4 + 4);
    *(_WORD *)&self->_has |= 4u;
  }

  unint64_t v13 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v13)
  {
    int v14 = v13;
    if (sub_10015A058(3))
    {
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        sub_10020B930(v4, v5, v14);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  return 2LL;
}

  int v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", self->_rttAvgVal));
  [v3 setObject:v9 forKey:@"rtt_avg_val"];

  has = (__int16)self->_has;
  if ((has & 0x40) == 0)
  {
LABEL_5:
    if ((has & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }

  PBDataWriterWriteUint32Field(v5, self->_rttAvgVal, 3LL);
  has = (__int16)self->_has;
  if ((has & 0x40) == 0)
  {
LABEL_5:
    if ((has & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }

  v4[9] = self->_rttAvgVal;
  *((_WORD *)v4 + 34) |= 0x80u;
  has = (__int16)self->_has;
  if ((has & 0x40) == 0)
  {
LABEL_5:
    if ((has & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }

  *((_DWORD *)result + 9) = self->_rttAvgVal;
  *((_WORD *)result + 34) |= 0x80u;
  has = (__int16)self->_has;
  if ((has & 0x40) == 0)
  {
LABEL_5:
    if ((has & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }

  uint64_t v6 = 0LL;
  if ((has & 0x20) != 0)
  {
LABEL_6:
    unint64_t v7 = 2654435761LL * self->_retryIntervalMin;
    if ((has & 0x10) != 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }

  self->_rttAvgVal = *((_DWORD *)v4 + 9);
  *(_WORD *)&self->_has |= 0x80u;
  uint64_t v5 = *((_WORD *)v4 + 34);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }

  unint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_coexRxGrantedRequests));
  [v3 setObject:v18 forKey:@"coex_rx_granted_requests"];

  if ((*(_WORD *)&self->_has & 1) != 0)
  {
LABEL_8:
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_coexRxDeniedRequests));
    [v3 setObject:v5 forKey:@"coex_rx_denied_requests"];
  }
}

  v4[15] = self->_coexRxGrantedRequests;
  *((_WORD *)v4 + 50) |= 2u;
  if ((*(_WORD *)&self->_has & 1) != 0)
  {
LABEL_8:
    v4[14] = self->_coexRxDeniedRequests;
    *((_WORD *)v4 + 50) |= 1u;
  }
}

  int v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", self->_rxErrFcs));
  [v3 setObject:v14 forKey:@"rx_err_fcs"];

  has = (__int16)self->_has;
  if ((has & 0x200) == 0)
  {
LABEL_7:
    if ((has & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }

  v4[11] = self->_rxErrFcs;
  *((_WORD *)v4 + 40) |= 8u;
  has = (__int16)self->_has;
  if ((has & 0x200) == 0)
  {
LABEL_7:
    if ((has & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }

  unint64_t v7 = 0LL;
  if ((has & 0x20) != 0)
  {
LABEL_10:
    unint64_t v8 = 2654435761LL * self->_rxErrNoframe;
    if ((has & 4) != 0) {
      goto LABEL_11;
    }
LABEL_22:
    int v9 = 0LL;
    if ((has & 0x40) != 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }

    sub_100147B4C(a3, &v29);
    int v14 = v29.__r_.__value_.__s.__size_;
    if ((char)v29.__r_.__value_.__s.__size_ < 0)
    {
      unint64_t v15 = (std::string *)v29.__r_.__value_.__r.__words[0];
      if (strcasecmp(v29.__r_.__value_.__l.__data_, "disabled")
        && strcasecmp((const char *)v15, "off")
        && strcasecmp((const char *)v15, "no")
        && strcasecmp((const char *)v15, "0"))
      {
        if (!strcasecmp((const char *)v15, "short")
          || !strcasecmp((const char *)v15, "on")
          || !strcasecmp((const char *)v15, "yes"))
        {
          goto LABEL_62;
        }

        unint64_t v16 = v15;
        goto LABEL_46;
      }
    }

    else if (strcasecmp((const char *)&v29, "disabled") {
           && strcasecmp((const char *)&v29, "off")
    }
           && strcasecmp((const char *)&v29, "no")
           && strcasecmp((const char *)&v29, "0"))
    {
      if (!strcasecmp((const char *)&v29, "short")
        || !strcasecmp((const char *)&v29, "on")
        || !strcasecmp((const char *)&v29, "yes"))
      {
        goto LABEL_62;
      }

      unint64_t v15 = &v29;
      unint64_t v16 = &v29;
LABEL_46:
      if (strcasecmp((const char *)v16, "1"))
      {
        if (strcasecmp((const char *)v15, "long"))
        {
          if ((v14 & 0x80) == 0) {
            return sub_100006FF8(a4);
          }
LABEL_55:
          operator delete(v29.__r_.__value_.__l.__data_);
          return sub_100006FF8(a4);
        }

        v24 = 1;
LABEL_51:
        if (v24 == *(_DWORD *)(v8 + 8))
        {
          if ((v14 & 0x80) == 0) {
            return sub_100006FF8(a4);
          }
        }

        else
        {
          *(_DWORD *)(v8 + 8) = v24;
          sub_10010AA58(a1);
          if ((v29.__r_.__value_.__s.__size_ & 0x80) == 0) {
            return sub_100006FF8(a4);
          }
        }

        goto LABEL_55;
      }

  *(void *)uint64_t v2 = 0xFFFFFFFFLL;
  return v4;
}

    sub_1001676C0(20, (uint64_t)__p, (uint64_t)a1, (uint64_t)"boost::filesystem::temp_directory_path");
    goto LABEL_18;
  }

  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
}

      unint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue( -[ThreadNetworkManagerInstance getCurrentCredentialsDataSet]( self,  "getCurrentCredentialsDataSet"));
      int v14 = v18;
      if (v18)
      {
        int v19 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s dataSetArray](v18, "dataSetArray"));
        int v20 = [v19 length] == 0;

        if (!v20)
        {
          int v21 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s dataSetArray](v14, "dataSetArray"));
          if ([v21 length])
          {
            v22 = (void *)objc_claimAutoreleasedReturnValue([v4 credentialsDataSet]);
            v23 = (void *)objc_claimAutoreleasedReturnValue([v22 dataSetArray]);
            if ([v23 length])
            {
              v24 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s dataSetArray](v14, "dataSetArray"));
              uint64_t v2 = objc_claimAutoreleasedReturnValue([v4 credentialsDataSet]);
              v25 = (void *)objc_claimAutoreleasedReturnValue([(id)v2 dataSetArray]);
              v26 = [v24 isEqualToData:v25];

              if (v26)
              {
                v27 = sub_1000160F4("com.apple.wpantund.tnm", "commissioning");
                v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
                LOBYTE(v2) = 1;
                if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 136315394;
                  v62 = "-[ThreadNetworkManagerInstance updatePreferredNetworkForDatasetChange]";
                  v63 = 1024;
                  v64 = 4710;
                  _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_INFO,  " %s:%d No need to update preferred network !",  buf,  0x12u);
                }

                goto LABEL_55;
              }

uint64_t sub_100077574(uint64_t a1, unint64_t *a2)
{
  v3 = sub_1000775B8(a1, a2);
  sub_100011568(a1, v3);
  return 1LL;
}

void *sub_1000775B8(uint64_t a1, unint64_t *a2)
{
  v3 = (void *)(a1 + 8);
  uint64_t result = sub_10007763C(a1, a2, *(void **)(a1 + 8), (void *)(a1 + 8));
  if (v3 == result) {
    return v3;
  }
  unint64_t v5 = bswap64(*a2);
  unint64_t v6 = bswap64(*(void *)((char *)result + 28));
  if (v5 != v6 || (unint64_t v5 = bswap64(a2[1]), v6 = bswap64(*(void *)((char *)result + 36)), v5 != v6))
  {
    int v7 = v5 < v6 ? -1 : 1;
    if (v7 < 0) {
      return v3;
    }
  }

  return result;
}

void *sub_10007763C(uint64_t a1, unint64_t *a2, void *a3, void *a4)
{
  uint64_t result = a4;
  if (a3)
  {
    do
    {
      unint64_t v5 = bswap64(*(void *)((char *)a3 + 28));
      unint64_t v6 = bswap64(*a2);
      if (v5 == v6 && (unint64_t v5 = bswap64(*(void *)((char *)a3 + 36)), v6 = bswap64(a2[1]), v5 == v6))
      {
        int v7 = 0;
      }

      else if (v5 < v6)
      {
        int v7 = -1;
      }

      else
      {
        int v7 = 1;
      }

      BOOL v8 = v7 < 0;
      if (v7 >= 0) {
        int v9 = a3;
      }
      else {
        int v9 = a3 + 1;
      }
      if (!v8) {
        uint64_t result = a3;
      }
      a3 = (void *)*v9;
    }

    while (*v9);
  }

  return result;
}

void *sub_1000776A4(void *a1, uint64_t *a2)
{
  uint64_t v4 = sub_10000C8F8(a1);
  sub_1000776EC((uint64_t)v4, *a2, (uint64_t)(a2 + 1));
  return a1;
}

void sub_1000776D8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000776EC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a2;
  if (a2 != a3)
  {
    uint64_t v4 = (uint64_t **)result;
    unint64_t v5 = (void *)(result + 8);
    do
    {
      sub_100077754(v4, v5, (unint64_t *)(a2 + 28), a2 + 28);
      uint64_t result = sub_10000B338((uint64_t)&v6);
      a2 = v6;
    }

    while (v6 != a3);
  }

  return result;
}

char *sub_100077754(uint64_t **a1, void *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v6 = (void **)sub_100077298(a1, a2, &v13, &v12, a3);
  int v7 = (char *)*v6;
  if (!*v6)
  {
    BOOL v8 = v6;
    int v7 = (char *)operator new(0x30uLL);
    v10[1] = a1 + 1;
    *(_OWORD *)(v7 + 28) = *(_OWORD *)a4;
    *((_DWORD *)v7 + 11) = *(_DWORD *)(a4 + 16);
    char v11 = 1;
    sub_10000AF70(a1, v13, (void **)v8, v7);
    v10[0] = 0LL;
    sub_10000D0A8(v10, 0LL);
  }

  return v7;
}

uint64_t sub_100077808(uint64_t result, _BYTE *a2)
{
  uint64_t v2 = *(_BYTE **)(result + 8);
  *uint64_t v2 = *a2;
  *(void *)(result + 8) = v2 + 1;
  return result;
}

uint64_t sub_10007781C(uint64_t *a1, _BYTE *a2)
{
  uint64_t v2 = a1[1] - *a1;
  unint64_t v3 = v2 + 1;
  if (v2 == -1)
  {
    __break(0x5500u);
LABEL_10:
    sub_10000CCF0();
  }

  if ((v3 & 0x8000000000000000LL) != 0) {
    goto LABEL_10;
  }
  unint64_t v6 = a1[2] - *a1;
  if (2 * v6 > v3) {
    unint64_t v3 = 2 * v6;
  }
  if (v6 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v7 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v7 = v3;
  }
  sub_100035540(v10, v7, v2, (uint64_t)(a1 + 2));
  *v11++ = *a2;
  sub_1000357E4(a1, v10);
  uint64_t v8 = a1[1];
  sub_100035598((uint64_t)v10);
  return v8;
}

void sub_1000778C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1000778DC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8)) {
    std::mutex::unlock(*(std::mutex **)a1);
  }
  return a1;
}

uint64_t sub_10007790C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
}

  ;
}

void sub_100077944( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

uint64_t sub_100077964(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v8[0] = 0LL;
  sub_100007640((uint64_t)v8, a3);
  sub_1000342C8(a1, a2, v8);
  sub_100006E7C(v8);
  *(void *)a1 = off_1002B06C0;
  sub_10000D19C((void *)(a1 + 136), a4);
  *(_DWORD *)(a1 + 160) = sub_1000D8DE8(a2);
  return a1;
}

void sub_1000779EC(_Unwind_Exception *a1)
{
}

void sub_100077A24(uint64_t a1, int a2)
{
  if (a2 != 12)
  {
    int v4 = sub_1000D8DE8(*(void *)(a1 + 56));
    if (!sub_1000B5098(v4)) {
      sub_1000DA700(*(void *)(a1 + 56), *(unsigned int *)(a1 + 160));
    }
  }

uint64_t sub_100077A74( uint64_t a1, unsigned int a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v16 = sub_10004ECBC(a2, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  unsigned int v17 = *(unsigned __int16 *)(a1 + 8);
  uint64_t result = 3LL;
  if (v17 <= 0xFD)
  {
    if (*(unsigned __int16 *)(a1 + 8) > 0xA1u)
    {
      if (*(unsigned __int16 *)(a1 + 8) > 0xCCu)
      {
        if (v17 != 205)
        {
          if (v17 != 216)
          {
            if (v17 != 231) {
              goto LABEL_314;
            }
            goto LABEL_147;
          }

          goto LABEL_135;
        }

LABEL_121:
        if (*(_DWORD *)(a1 + 128))
        {
          v44 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v44)
          {
          }

          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            sub_1001FB53C();
          }
        }

        sub_10000AC00(&buf, "NCP:Channel");
        uint64_t v45 = sub_100037208(a1 + 136, (const void **)&buf.__r_.__value_.__l.__data_);
        if (!v45) {
          goto LABEL_141;
        }
        sub_10000AC00(&v92, "NCP:Channel");
        v46 = sub_10000ED88((uint64_t **)(a1 + 136), (__n128 *)&v92);
        sub_1001472F4(v46);
        sub_100034C60("CiiC", (uint64_t *)&buf, 0x80u);
        sub_100006EFC(a1 + 104, (__n128 *)&buf);
        __p.n128_u64[0] = (unint64_t)&buf;
        sub_100006F6C((void ***)&__p);
        *(_WORD *)(a1 + 98) = 0;
        *(_WORD *)(a1 + 8) = 216;
LABEL_135:
        unsigned int v19 = *(_DWORD *)(a1 + 128);
        if (v19)
        {
          v47 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v47)
          {
            goto LABEL_302;
          }

          if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            goto LABEL_302;
          }
          goto LABEL_301;
        }

  self->_energyDetectedRequests = v5[4];
  *(void *)&self->_has |= 4uLL;
  int v9 = *((void *)v5 + 31);
  if ((v9 & 2) != 0) {
    goto LABEL_122;
  }
LABEL_68:
  if ((v9 & 0x20) != 0)
  {
LABEL_69:
    self->_radioStatusDoubleNotification = v5[7];
    *(void *)&self->_has |= 0x20uLL;
  }

LABEL_141:
        sub_10000AC00(&buf, "Network:PANID");
        uint64_t v48 = sub_100037208(a1 + 136, (const void **)&buf.__r_.__value_.__l.__data_);
        if (!v48)
        {
LABEL_153:
          sub_10000AC00(&buf, "Network:XPANID");
          uint64_t v51 = sub_100037208(a1 + 136, (const void **)&buf.__r_.__value_.__l.__data_);
          if (!v51)
          {
LABEL_165:
            sub_10000AC00(&buf, "Network:Name");
            uint64_t v55 = sub_100037208(a1 + 136, (const void **)&buf.__r_.__value_.__l.__data_);
            if (!v55)
            {
LABEL_179:
              sub_10000AC00(&buf, "Network:Key");
              uint64_t v58 = sub_100037208(a1 + 136, (const void **)&buf.__r_.__value_.__l.__data_);
              if (!v58)
              {
LABEL_191:
                sub_10000AC00(&buf, "Network:KeyIndex");
                uint64_t v61 = sub_100037208(a1 + 136, (const void **)&buf.__r_.__value_.__l.__data_);
                if (!v61)
                {
LABEL_203:
                  sub_10000AC00(&buf, "IPv6:MeshLocalAddress");
                  uint64_t v64 = sub_100037208(a1 + 136, (const void **)&buf.__r_.__value_.__l.__data_);
                  if (v64)
                  {
                    sub_10000AC00(&buf, "IPv6:MeshLocalAddress");
                    v65 = sub_10000ED88((uint64_t **)(a1 + 136), (__n128 *)&buf);
                    v92.__r_.__value_.__r.__words[0] = sub_1001474A0(v65);
                    v92.__r_.__value_.__l.__size_ = v66;
                    sub_100034C60("Cii6C", (uint64_t *)&buf, 0x80u);
                    sub_100006EFC(a1 + 104, (__n128 *)&buf);
                    __p.n128_u64[0] = (unint64_t)&buf;
                    sub_100006F6C((void ***)&__p);
                    *(_WORD *)(a1 + 98) = 0;
                    *(_WORD *)(a1 + 8) = 318;
                    goto LABEL_7;
                  }

                  sub_10000AC00(&buf, "IPv6:MeshLocalPrefix");
                  uint64_t v67 = sub_100037208(a1 + 136, (const void **)&buf.__r_.__value_.__l.__data_);
                  if (!v67)
                  {
LABEL_237:
                    sub_100034C60("Ciib", (uint64_t *)&buf, 0x80u);
                    sub_100006EFC(a1 + 104, (__n128 *)&buf);
                    v92.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
                    sub_100006F6C((void ***)&v92);
                    *(_WORD *)(a1 + 98) = 0;
                    *(_WORD *)(a1 + 8) = 350;
LABEL_238:
                    unsigned int v19 = *(_DWORD *)(a1 + 128);
                    if (v19 && v19 != 10)
                    {
                      v72 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                      if (v72)
                      {
                        goto LABEL_302;
                      }

                      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                        goto LABEL_302;
                      }
                      goto LABEL_301;
                    }

                    sub_100034C60("Ciib", (uint64_t *)&buf, 0x80u);
                    sub_100006EFC(a1 + 104, (__n128 *)&buf);
                    v92.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
                    sub_100006F6C((void ***)&v92);
                    *(_WORD *)(a1 + 98) = 0;
                    *(_WORD *)(a1 + 8) = 362;
                    goto LABEL_242;
                  }

                  sub_10000AC00(&buf, "IPv6:MeshLocalPrefix");
                  v68 = sub_10000ED88((uint64_t **)(a1 + 136), (__n128 *)&buf);
                  v92.__r_.__value_.__r.__words[0] = sub_1001474A0(v68);
                  v92.__r_.__value_.__l.__size_ = v69;
                  sub_100034C60("Cii6C", (uint64_t *)&buf, 0x80u);
                  sub_100006EFC(a1 + 104, (__n128 *)&buf);
                  __p.n128_u64[0] = (unint64_t)&buf;
                  sub_100006F6C((void ***)&__p);
                  *(_WORD *)(a1 + 98) = 0;
                  *(_WORD *)(a1 + 8) = 334;
LABEL_231:
                  unsigned int v19 = *(_DWORD *)(a1 + 128);
                  if (v19)
                  {
                    v70 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                    if (v70)
                    {
                      goto LABEL_302;
                    }

                    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_302;
                    }
                    goto LABEL_301;
                  }

                  goto LABEL_237;
                }

                sub_10000AC00(&v92, "Network:KeyIndex");
                v62 = sub_10000ED88((uint64_t **)(a1 + 136), (__n128 *)&v92);
                sub_1001472F4(v62);
                sub_100034C60("CiiL", (uint64_t *)&buf, 0x80u);
                sub_100006EFC(a1 + 104, (__n128 *)&buf);
                __p.n128_u64[0] = (unint64_t)&buf;
                sub_100006F6C((void ***)&__p);
                *(_WORD *)(a1 + 98) = 0;
                *(_WORD *)(a1 + 8) = 300;
LABEL_197:
                unsigned int v19 = *(_DWORD *)(a1 + 128);
                if (v19)
                {
                  v63 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                  if (v63)
                  {
                    goto LABEL_302;
                  }

                  if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_302;
                  }
                  goto LABEL_301;
                }

                goto LABEL_203;
              }

              sub_10000AC00(&v92, "Network:Key");
              v59 = sub_10000ED88((uint64_t **)(a1 + 136), (__n128 *)&v92);
              sub_100147058(v59, (uint64_t)&buf);
              sub_100034C60("CiiD", (uint64_t *)&v92, 0x80u);
              sub_100006EFC(a1 + 104, (__n128 *)&v92);
              __p.n128_u64[0] = (unint64_t)&v92;
              sub_100006F6C((void ***)&__p);
              v92.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
              sub_100006F6C((void ***)&v92);
              *(_WORD *)(a1 + 98) = 0;
              *(_WORD *)(a1 + 8) = 286;
LABEL_185:
              unsigned int v19 = *(_DWORD *)(a1 + 128);
              if (v19)
              {
                v60 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                if (v60)
                {
                  goto LABEL_302;
                }

                if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_302;
                }
                goto LABEL_301;
              }

              goto LABEL_191;
            }

            sub_10000AC00(&__p, "Network:Name");
            v56 = sub_10000ED88((uint64_t **)(a1 + 136), &__p);
            sub_100147B4C(v56, &v92);
            sub_100034C60("CiiU", (uint64_t *)&buf, 0x80u);
            sub_100006EFC(a1 + 104, (__n128 *)&buf);
            p_std::string buf = &buf;
            sub_100006F6C((void ***)&p_buf);
            if (v91 < 0) {
              operator delete((void *)__p.n128_u64[0]);
            }
            *(_WORD *)(a1 + 98) = 0;
            *(_WORD *)(a1 + 8) = 268;
LABEL_173:
            unsigned int v19 = *(_DWORD *)(a1 + 128);
            if (v19)
            {
              v57 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
              if (v57)
              {
                goto LABEL_302;
              }

              if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                goto LABEL_302;
              }
              goto LABEL_301;
            }

            goto LABEL_179;
          }

          sub_10000AC00(&buf, "Network:XPANID");
          v52 = sub_10000ED88((uint64_t **)(a1 + 136), (__n128 *)&buf);
          v53 = sub_1001476B4(v52, 1);
          __p.n128_u64[0] = (unint64_t)v53;
          sub_100159934((uint64_t)&__p, 8uLL);
          sub_100034C60("CiiD", (uint64_t *)&buf, 0x80u);
          sub_100006EFC(a1 + 104, (__n128 *)&buf);
          v92.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
          sub_100006F6C((void ***)&v92);
          *(_WORD *)(a1 + 98) = 0;
          *(_WORD *)(a1 + 8) = 254;
LABEL_159:
          unsigned int v19 = *(_DWORD *)(a1 + 128);
          if (v19)
          {
            v54 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
            if (v54)
            {
              goto LABEL_302;
            }

            if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              goto LABEL_302;
            }
            goto LABEL_301;
          }

          goto LABEL_165;
        }

        sub_10000AC00(&v92, "Network:PANID");
        v49 = sub_10000ED88((uint64_t **)(a1 + 136), (__n128 *)&v92);
        sub_1001472F4(v49);
        sub_100034C60("CiiS", (uint64_t *)&buf, 0x80u);
        sub_100006EFC(a1 + 104, (__n128 *)&buf);
        __p.n128_u64[0] = (unint64_t)&buf;
        sub_100006F6C((void ***)&__p);
        *(_WORD *)(a1 + 98) = 0;
        *(_WORD *)(a1 + 8) = 231;
LABEL_147:
        unsigned int v19 = *(_DWORD *)(a1 + 128);
        if (v19)
        {
          v50 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v50)
          {
            goto LABEL_302;
          }

          if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            goto LABEL_302;
          }
          goto LABEL_301;
        }

        goto LABEL_153;
      }

      if (v17 != 162)
      {
        if (v17 != 192) {
          goto LABEL_314;
        }
        goto LABEL_114;
      }

      goto LABEL_100;
    }

    if (*(unsigned __int16 *)(a1 + 8) > 0x5Fu)
    {
      if (v17 != 96)
      {
        if (v17 != 110) {
          goto LABEL_314;
        }
LABEL_71:
        if (*(_DWORD *)(a1 + 128))
        {
          v31 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v31)
          {
          }

          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            sub_1001FB53C();
          }
        }

        *(_DWORD *)(a1 + 160) = sub_1000D8DE8(*(void *)(a1 + 56));
        sub_1000DA700(*(void *)(a1 + 56), 6LL);
        sub_10000AC00(&buf, "Network:NodeType");
        uint64_t v32 = sub_100037208(a1 + 136, (const void **)&buf.__r_.__value_.__l.__data_);
        if (!v32)
        {
LABEL_106:
          sub_10000AC00(&buf, "Network:NodeType");
          uint64_t v41 = sub_100037208(a1 + 136, (const void **)&buf.__r_.__value_.__l.__data_);
          if (!v41) {
            goto LABEL_120;
          }
          sub_10000AC00(&v92, "Network:NodeType");
          v42 = sub_10000ED88((uint64_t **)(a1 + 136), (__n128 *)&v92);
          sub_100147B4C(v42, &buf);
          sub_1000B5270((char *)&buf);
          sub_100054334(*(void *)(a1 + 56));
          sub_100034C60("CiiC", (uint64_t *)&buf, 0x80u);
          sub_100006EFC(a1 + 104, (__n128 *)&buf);
          v92.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
          sub_100006F6C((void ***)&v92);
          *(_WORD *)(a1 + 98) = 0;
          *(_WORD *)(a1 + 8) = 192;
LABEL_114:
          unsigned int v19 = *(_DWORD *)(a1 + 128);
          if (v19)
          {
            v43 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
            if (v43)
            {
              goto LABEL_302;
            }

            if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              goto LABEL_302;
            }
LABEL_214:
            sub_1001FB53C();
            goto LABEL_302;
          }

          __break(0x5515u);
LABEL_142:
          __break(0x5512u);
        }

        v78 = 0;
        unsigned int v19 = (std::string *)((char *)p_buf + size);
LABEL_34:
        int v22 = (std::string *)((char *)p_buf + size);
LABEL_35:
        uint64_t v14 = v23;
        unint64_t v18 = v20 != v17;
      }

      else
      {
        v78 = 0;
        unint64_t v18 = 0;
        uint64_t v82 = 0;
        unsigned int v19 = (std::string *)((char *)p_buf + size);
        int v20 = (std::string *)((char *)p_buf + size);
        uint64_t v21 = (std::string *)((char *)p_buf + size);
        int v22 = (std::string *)((char *)p_buf + size);
      }

      v33 = v10;
      if (size >= 31)
      {
        v81 = v18;
        unsigned int v76 = v14;
        uint64_t v37 = size;
        uint64_t v38 = p_buf;
        do
        {
          uint64_t v39 = memchr(v38, 99, v37 - 30);
          if (!v39) {
            break;
          }
          uint64_t v35 = (std::string *)v39;
          if (*v39 == 0x746F745F78656F63LL
            && v39[1] == 0x746E6172675F6C61LL
            && v39[2] == 0x69685F656D69745FLL
            && *(void *)((char *)v39 + 23) == 0x6D6172676F747369LL)
          {
            goto LABEL_52;
          }

          uint64_t v38 = (std::string *)((char *)v39 + 1);
          uint64_t v37 = (char *)v17 - ((char *)&v35->__r_.__value_.__l.__data_ + 1);
        }

        while (v37 > 30);
        uint64_t v35 = (std::string *)((char *)p_buf + size);
LABEL_52:
        int v34 = v35 != v17;
        if (size >= 42)
        {
          v43 = p_buf;
          do
          {
            v44 = (std::string *)memchr(v43, 99, size - 41);
            if (!v44) {
              break;
            }
            uint64_t v36 = v44;
            if (!memcmp(v44, "coex_aborts_due_to_grant_revokes_histogram", 0x2AuLL)) {
              goto LABEL_58;
            }
            v43 = (std::string *)((char *)&v36->__r_.__value_.__l.__data_ + 1);
            size = (char *)v17 - ((char *)&v36->__r_.__value_.__l.__data_ + 1);
          }

          while (size > 41);
        }

        uint64_t v36 = v17;
LABEL_58:
        uint64_t v14 = v76;
        unint64_t v18 = v81;
      }

      else
      {
        int v34 = 0;
        uint64_t v35 = (std::string *)((char *)p_buf + size);
        uint64_t v36 = (std::string *)((char *)p_buf + size);
      }

      if (v20 != p_buf) {
        unint64_t v18 = 0;
      }
      if (v18 && v90 != -1LL && v14 != -1LL)
      {
        if (!v14) {
          goto LABEL_141;
        }
        unint64_t v10 = v33;
        std::string::basic_string(&__str, &buf, v90 + 1, v14 - 1, (std::allocator<char> *)&v95);
        uint64_t v45 = std::stoi(&__str, 0LL, 10);
        if ((v45 & 0xFCu) <= 0x13)
        {
          v46 = sub_1000BE984(4, uint64);
          v47 = v45;
          if (v45 >= 0x14u) {
            goto LABEL_142;
          }
          uint64_t v48 = v99;
          goto LABEL_104;
        }

        goto LABEL_105;
      }

      v49 = v82;
      if (v21 != p_buf) {
        v49 = 0;
      }
      if (v49 && v90 != -1LL && v14 != -1LL)
      {
        if (!v14) {
          goto LABEL_141;
        }
        unint64_t v10 = v33;
        std::string::basic_string(&__str, &buf, v90 + 1, v14 - 1, (std::allocator<char> *)&v95);
        v50 = std::stoi(&__str, 0LL, 10);
        if ((v50 & 0xFCu) <= 0x13)
        {
          v46 = sub_1000BE984(4, uint64);
          v47 = v50;
          if (v50 > 0x13u) {
            goto LABEL_142;
          }
          uint64_t v48 = v100;
          goto LABEL_104;
        }

LABEL_120:
          sub_100034C60("CiiC", (uint64_t *)&buf, 0x80u);
          sub_100006EFC(a1 + 104, (__n128 *)&buf);
          v92.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
          sub_100006F6C((void ***)&v92);
          *(_WORD *)(a1 + 98) = 0;
          *(_WORD *)(a1 + 8) = 205;
          goto LABEL_121;
        }

        sub_10000AC00(&v92, "Network:NodeType");
        v33 = sub_10000ED88((uint64_t **)(a1 + 136), (__n128 *)&v92);
        sub_100147B4C(v33, &buf);
        int v34 = sub_1000B5270((char *)&buf);
        unsigned int v19 = 2;
        switch(v34)
        {
          case 1:
          case 7:
            uint64_t v35 = *(void *)(a1 + 56) + 72792LL;
            LODWORD(buf.__r_.__value_.__l.__data_) = 48;
            uint64_t v36 = sub_100007684(v35, (unsigned int *)&buf);
            goto LABEL_96;
          case 2:
            goto LABEL_97;
          case 3:
            uint64_t v37 = *(void *)(a1 + 56) + 72792LL;
            LODWORD(buf.__r_.__value_.__l.__data_) = 49;
            goto LABEL_297;
          case 6:
            uint64_t v38 = *(void *)(a1 + 56) + 72792LL;
            LODWORD(buf.__r_.__value_.__l.__data_) = 15296;
            uint64_t v36 = sub_100007684(v38, (unsigned int *)&buf);
LABEL_96:
            if (!v36)
            {
LABEL_297:
              unsigned int v19 = 14;
              goto LABEL_302;
            }

      if (v88 < 0)
      {
        if (*((void *)&buf + 1) != 16LL) {
          goto LABEL_194;
        }
        v46 = (uint64_t *)buf;
        if (*(void *)buf == 0x7463657269446E49LL && *(void *)(buf + 8) == 0x5D305B7972746552LL) {
          goto LABEL_186;
        }
        if (*(void *)buf == 0x7463657269446E49LL && *(void *)(buf + 8) == 0x5D315B7972746552LL) {
          goto LABEL_187;
        }
        if (*(void *)buf == 0x7463657269446E49LL && *(void *)(buf + 8) == 0x5D325B7972746552LL) {
          goto LABEL_188;
        }
        if (*(void *)buf == 0x7463657269446E49LL && *(void *)(buf + 8) == 0x5D335B7972746552LL) {
          goto LABEL_189;
        }
        if (*(void *)buf == 0x7463657269446E49LL && *(void *)(buf + 8) == 0x5D345B7972746552LL) {
          goto LABEL_190;
        }
        if (*(void *)buf == 0x7463657269446E49LL && *(void *)(buf + 8) == 0x5D355B7972746552LL) {
          goto LABEL_191;
        }
        if (*(void *)buf == 0x7463657269446E49LL && *(void *)(buf + 8) == 0x5D365B7972746552LL) {
          goto LABEL_192;
        }
      }

      else
      {
        if (v88 != 16) {
          goto LABEL_195;
        }
        if ((void)buf == 0x7463657269446E49LL && *((void *)&buf + 1) == 0x5D305B7972746552LL)
        {
LABEL_186:
          v84 = sub_1000BE984(4, uint64);
          goto LABEL_193;
        }

        if ((void)buf == 0x7463657269446E49LL && *((void *)&buf + 1) == 0x5D315B7972746552LL)
        {
LABEL_187:
          v81 = sub_1000BE984(4, uint64);
          goto LABEL_193;
        }

        if ((void)buf == 0x7463657269446E49LL && *((void *)&buf + 1) == 0x5D325B7972746552LL)
        {
LABEL_188:
          v78 = sub_1000BE984(4, uint64);
          goto LABEL_193;
        }

        if ((void)buf == 0x7463657269446E49LL && *((void *)&buf + 1) == 0x5D335B7972746552LL)
        {
LABEL_189:
          uint64_t v75 = sub_1000BE984(4, uint64);
          goto LABEL_193;
        }

        if ((void)buf == 0x7463657269446E49LL && *((void *)&buf + 1) == 0x5D345B7972746552LL)
        {
LABEL_190:
          v73 = sub_1000BE984(4, uint64);
          goto LABEL_193;
        }

        if ((void)buf == 0x7463657269446E49LL && *((void *)&buf + 1) == 0x5D355B7972746552LL)
        {
LABEL_191:
          v72 = sub_1000BE984(4, uint64);
          goto LABEL_193;
        }

        if ((void)buf == 0x7463657269446E49LL && *((void *)&buf + 1) == 0x5D365B7972746552LL)
        {
LABEL_192:
          std::string::size_type v69 = sub_1000BE984(4, uint64);
          goto LABEL_193;
        }

        v46 = (uint64_t *)&buf;
      }

      uint64_t v55 = *v46;
      v54 = v46[1];
      if (v55 == 0x7463657269446E49LL && v54 == 0x5D375B7972746552LL) {
        std::string::size_type v66 = sub_1000BE984(4, uint64);
      }
LABEL_193:
      if (v88 < 0) {
LABEL_194:
      }
        operator delete((void *)buf);
LABEL_195:
      if (count == ++v12)
      {
        count = 0LL;
        HIDWORD(v94) = v68;
        LODWORD(v94) = v77;
        *(void *)((char *)&v94 + 4) = __PAIR64__(v71, v74);
        HIDWORD(v93) = v82;
        LODWORD(v93) = v63;
        *(void *)((char *)&v93 + 4) = __PAIR64__(v85, v62);
        HIDWORD(v92) = v64;
        LODWORD(v92) = v70;
        *(void *)((char *)&v92 + 4) = __PAIR64__(v65, v67);
        HIDWORD(v91) = v76;
        LODWORD(v91) = v83;
        *(void *)((char *)&v91 + 4) = __PAIR64__(v79, v80);
        HIDWORD(v90) = v66;
        LODWORD(v90) = v73;
        *(void *)((char *)&v90 + 4) = __PAIR64__(v69, v72);
        HIDWORD(v89) = v75;
        LODWORD(v89) = v84;
        *(void *)((char *)&v89 + 4) = __PAIR64__(v78, v81);
        goto LABEL_201;
      }
    }

    if (v88 != 14) {
      goto LABEL_108;
    }
LABEL_56:
    goto LABEL_81;
  }

  unint64_t v6 = sub_1000160F4("com.apple.wpantund.awd", "default");
  size_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
    sub_10020D6C8();
  }

  uint64_t v8 = 0LL;
  count = 1LL;
LABEL_201:
  for (i = 0LL; i != 64; i += 4LL)
  {
    uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)((char *)&v91 + i)));
    [v4 addObject:v58];
  }

  for (j = 0LL; j != 32; j += 4LL)
  {
    v60 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)((char *)&v89 + j)));
    [v5 addObject:v60];
  }

  [v86 setObject:v4 forKey:@"tx_direct_retry_attempts_histogram"];
  [v86 setObject:v5 forKey:@"tx_indirect_retry_attempts_histogram"];

  return count;
}

      v40 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(3, uint64));
      uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
      if (v64 >= 0) {
        v42 = &buf;
      }
      else {
        v42 = (__int128 *)buf;
      }
      v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v42));
      [v4 setObject:v41 forKey:v43];

      if (v64 < 0) {
        operator delete((void *)buf);
      }
      if (count == ++v10) {
        goto LABEL_128;
      }
    }
  }

  unint64_t v6 = 0LL;
  v60 = 0LL;
  uint64_t v61 = 0LL;
  v59 = 0LL;
LABEL_128:
  v44 = v61 + HIDWORD(v60);
  if (__OFADD__((_DWORD)v61, HIDWORD(v60))) {
    goto LABEL_142;
  }
  uint64_t v45 = 100;
  if (v44)
  {
    v46 = 100LL * (int)v61;
    uint64_t v45 = v46 / v44;
  }

  v47 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", sub_1000BE984(4, v45));
  uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
  [v4 setObject:v48 forKey:@"tx_success_rate"];

  v49 = HIDWORD(v61) + HIDWORD(v59);
  if (__OFADD__(HIDWORD(v61), HIDWORD(v59))) {
    goto LABEL_142;
  }
  v50 = 100;
  if (v49)
  {
    uint64_t v51 = 100LL * SHIDWORD(v61);
    v50 = v51 / v49;
  }

  v52 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", sub_1000BE984(4, v50));
  v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
  [v4 setObject:v53 forKey:@"tx_app_success_perc"];

  v54 = v60 + v59;
  if (__OFADD__((_DWORD)v60, (_DWORD)v59)) {
LABEL_142:
  }
    __break(0x5500u);
  uint64_t v55 = 100;
  if (!v54)
  {
LABEL_140:
    v57 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", sub_1000BE984(4, v55));
    uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue(v57);
    [v4 setObject:v58 forKey:@"rx_success_rate"];

LABEL_141:
    return;
  }

  v56 = 100LL * (int)v60;
  if (v56 == (int)v56)
  {
    uint64_t v55 = v56 / v54;
    goto LABEL_140;
  }

  self->_sleepState = v5[38];
  *(void *)&self->_has |= 0x200000000uLL;
  int v9 = *((void *)v5 + 31);
  if ((v9 & 4) == 0)
  {
LABEL_67:
    if ((v9 & 2) == 0) {
      goto LABEL_68;
    }
LABEL_122:
    self->_energyDetectedEvents = v5[3];
    *(void *)&self->_has |= 2uLL;
    if ((*((void *)v5 + 31) & 0x20) == 0) {
      goto LABEL_70;
    }
    goto LABEL_69;
  }

    if ((v85 & 0x80000000) == 0)
    {
      if (v85 != 16) {
        goto LABEL_195;
      }
      if ((void)buf != 0x7463657269446E49LL || *((void *)&buf + 1) != 0x5D305B7972746552LL)
      {
        if ((void)buf != 0x7463657269446E49LL || *((void *)&buf + 1) != 0x5D315B7972746552LL)
        {
          if ((void)buf != 0x7463657269446E49LL || *((void *)&buf + 1) != 0x5D325B7972746552LL)
          {
            if ((void)buf != 0x7463657269446E49LL || *((void *)&buf + 1) != 0x5D335B7972746552LL)
            {
              if ((void)buf != 0x7463657269446E49LL || *((void *)&buf + 1) != 0x5D345B7972746552LL)
              {
                if ((void)buf != 0x7463657269446E49LL || *((void *)&buf + 1) != 0x5D355B7972746552LL)
                {
                  if ((void)buf != 0x7463657269446E49LL || *((void *)&buf + 1) != 0x5D365B7972746552LL)
                  {
                    uint64_t v45 = (uint64_t *)&buf;
                    goto LABEL_180;
                  }

                  goto LABEL_192;
                }

                goto LABEL_191;
              }

              goto LABEL_190;
            }

            goto LABEL_189;
          }

          goto LABEL_188;
        }

        goto LABEL_187;
      }

      goto LABEL_186;
    }

    if (*((void *)&buf + 1) == 16LL)
    {
      uint64_t v45 = (uint64_t *)buf;
      if (*(void *)buf != 0x7463657269446E49LL || *(void *)(buf + 8) != 0x5D305B7972746552LL)
      {
        if (*(void *)buf != 0x7463657269446E49LL || *(void *)(buf + 8) != 0x5D315B7972746552LL)
        {
          if (*(void *)buf != 0x7463657269446E49LL || *(void *)(buf + 8) != 0x5D325B7972746552LL)
          {
            if (*(void *)buf != 0x7463657269446E49LL || *(void *)(buf + 8) != 0x5D335B7972746552LL)
            {
              if (*(void *)buf != 0x7463657269446E49LL || *(void *)(buf + 8) != 0x5D345B7972746552LL)
              {
                if (*(void *)buf != 0x7463657269446E49LL || *(void *)(buf + 8) != 0x5D355B7972746552LL)
                {
                  if (*(void *)buf != 0x7463657269446E49LL || *(void *)(buf + 8) != 0x5D365B7972746552LL)
                  {
LABEL_180:
                    v54 = *v45;
                    v53 = v45[1];
                    if (v54 == 0x7463657269446E49LL && v53 == 0x5D375B7972746552LL) {
                      uint64_t v64 = sub_1000BE984(4, uint64);
                    }
LABEL_193:
                    if ((v85 & 0x80000000) == 0) {
                      goto LABEL_195;
                    }
                    goto LABEL_194;
                  }

LABEL_97:
            uint64_t v39 = *(void *)(a1 + 56) + 72792LL;
            LODWORD(buf.__r_.__value_.__l.__data_) = 32;
            if (sub_100007684(v39, (unsigned int *)&buf))
            {
              sub_100034C60("Ciib", (uint64_t *)&buf, 0x80u);
              sub_100006EFC(a1 + 104, (__n128 *)&buf);
              v92.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
              sub_100006F6C((void ***)&v92);
            }

            *(_WORD *)(a1 + 98) = 0;
            *(_WORD *)(a1 + 8) = 162;
            break;
          default:
            goto LABEL_302;
        }

      v78 = *(unsigned int *)(v2 + 2);
      if (v78 >= 2)
      {
        *((_WORD *)v2 + 11) = word_100227BB4[(*(_BYTE *)(a1 + (v78 - 2) + 67458) ^ *((_WORD *)v2 + 11))] ^ HIBYTE(*((_WORD *)v2 + 11));
      }

      *(_DWORD *)(v2 + 2) = v78 + 1;
      *(_BYTE *)(a1 + v78 + 67458) = v39;
    }

    v81 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (!v81)
    {
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_21;
      }
      goto LABEL_85;
    }

    uint64_t v82 = v81;
LABEL_21:
    uint64_t v14 = 0;
LABEL_22:
    void *v3 = v14;
  }

          uint64_t result = PBReaderRecallMark(a2, v75);
          continue;
        }

        uint64_t v64 = 0;
        v65 = 0;
        uint64_t v55 = 0LL;
        uint64_t result = v3 + 8;
        while (1)
        {
          std::string::size_type v66 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          uint64_t v67 = v66 + 1;
          if (v66 == -1) {
            break;
          }
          if (v67 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            goto LABEL_128;
          }
          v68 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v66);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v67;
          v55 |= (unint64_t)(v68 & 0x7F) << v64;
          if ((v68 & 0x80) == 0) {
            goto LABEL_129;
          }
          v64 += 7;
          uint64_t v11 = v65++ >= 9;
          if (v11) {
            goto LABEL_127;
          }
        }

  uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_txErrorInvalidAck));
  [v3 setObject:v45 forKey:@"tx_error_invalid_ack"];

  uint64_t v8 = self->_has;
  if ((*(void *)&v8 & 0x200000000000LL) == 0)
  {
LABEL_40:
    if ((*(void *)&v8 & 0x10000000000LL) == 0) {
      goto LABEL_41;
    }
    goto LABEL_99;
  }

  PBDataWriterWriteUint32Field(v7, self->_txErrorInvalidAck, 36LL);
  unint64_t v6 = self->_has;
  if ((*(void *)&v6 & 0x200000000000LL) == 0)
  {
LABEL_40:
    if ((*(void *)&v6 & 0x10000000000LL) == 0) {
      goto LABEL_41;
    }
    goto LABEL_99;
  }

  v4[49] = self->_txErrorInvalidAck;
  *((void *)v4 + 31) |= 0x100000000000uLL;
  unint64_t v6 = self->_has;
  if ((*(void *)&v6 & 0x200000000000LL) == 0)
  {
LABEL_40:
    if ((*(void *)&v6 & 0x10000000000LL) == 0) {
      goto LABEL_41;
    }
    goto LABEL_99;
  }

  *((_DWORD *)v6 + 45) = self->_txErrorAckNoMem;
  v6[31] |= 0x10000000000uLL;
  unint64_t v10 = self->_has;
  if ((*(_BYTE *)&v10 & 0x80) == 0)
  {
LABEL_40:
    if ((*(_DWORD *)&v10 & 0x40000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_99;
  }

  uint64_t v11 = 0LL;
  if ((*(_DWORD *)&v4 & 0x40000000) != 0)
  {
LABEL_45:
    uint64_t v12 = 2654435761LL * self->_rxErrorReceiveFailed;
    if ((*(_DWORD *)&v4 & 0x10000000) != 0) {
      goto LABEL_46;
    }
    goto LABEL_99;
  }

  self->_txErrorTxAbortedRxAck = v5[60];
  *(void *)&self->_has |= 0x80000000000000uLL;
  int v9 = *((void *)v5 + 31);
  if ((v9 & 0x4000000000000LL) == 0)
  {
LABEL_44:
    if ((v9 & 0x100000000000000LL) == 0) {
      goto LABEL_45;
    }
    goto LABEL_99;
  }

    -[AWDCountersIpv6S setTxDelaymin:](v10, "setTxDelaymin:", sub_1000BE984(3, uint64));
    goto LABEL_101;
  }

  unint64_t v5 = 0LL;
LABEL_106:
  uint64_t result = -[AWDCountersIpv6S txSuccess](v10, "txSuccess");
  uint64_t v38 = 100LL * result;
  if ((v38 & 0xFFFFFFFF00000000LL) != 0) {
    goto LABEL_112;
  }
  uint64_t v39 = -[AWDCountersIpv6S txSuccess](v10, "txSuccess");
  uint64_t result = -[AWDCountersIpv6S txFailure](v10, "txFailure");
  if (__CFADD__(v39, (_DWORD)result)) {
    goto LABEL_113;
  }
  -[AWDCountersIpv6S setTxSuccessRate:](v10, "setTxSuccessRate:", v38 / (v39 + result));
  -[AWDCountersIpv6S setTxSuccessRate:]( v10,  "setTxSuccessRate:",  sub_1000BE984(4, -[AWDCountersIpv6S txSuccessRate](v10, "txSuccessRate")));
  uint64_t result = -[AWDCountersIpv6S rxSuccess](v10, "rxSuccess");
  v40 = 100LL * result;
  if ((v40 & 0xFFFFFFFF00000000LL) != 0)
  {
LABEL_112:
    __break(0x550Cu);
    goto LABEL_113;
  }

  uint64_t v41 = -[AWDCountersIpv6S rxSuccess](v10, "rxSuccess");
  uint64_t result = -[AWDCountersIpv6S rxFailure](v10, "rxFailure");
  if (!__CFADD__(v41, (_DWORD)result))
  {
    -[AWDCountersIpv6S setRxSuccessRate:](v10, "setRxSuccessRate:", v40 / (v41 + result));
    -[AWDCountersIpv6S setRxSuccessRate:]( v10,  "setRxSuccessRate:",  sub_1000BE984(4, -[AWDCountersIpv6S rxSuccessRate](v10, "rxSuccessRate")));
    [v42 setSCntrsIp:v10];

    unint64_t v6 = 0LL;
LABEL_111:

    return v6;
  }

LABEL_98:
LABEL_99:

LABEL_100:
    char v89 = v21 + 1;
    if (__OFADD__((_DWORD)v21, 1)) {
LABEL_138:
    }
      __break(0x5500u);
    uint64_t v21 = v89;
  }

  while (v142 > v89);
  if (-[NSMutableArray count](v139, "count"))
  {
    if (-[NSMutableArray count](v139, "count") == (id)1)
    {
      v90 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
      char v91 = (os_log_s *)objc_claimAutoreleasedReturnValue(v90);
      if (os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG)) {
        sub_1001EF490();
      }
      std::string v92 = 1;
      goto LABEL_113;
    }

    if ((unint64_t)-[NSMutableArray count](v139, "count") >= 2)
    {
      -[NSMutableArray sortUsingSelector:](v139, "sortUsingSelector:", "localizedCaseInsensitiveCompare:");
      for (i = 0LL; i < (int)-[NSMutableArray count](v139, "count"); ++i)
      {
        v113 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray objectAtIndex:](v139, "objectAtIndex:", i));
        if (v142 <= 4)
        {
          v114 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
          v115 = (os_log_s *)objc_claimAutoreleasedReturnValue(v114);
          if (os_log_type_enabled(v115, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v144 = 136316162;
            v145 = "-[ThreadNetworkManagerInstance checkAndUpdateNetworkParamsFromMdnsScan:borderAgentID:leaderBorderAgen"
                   "tID:isNwFound:numAppleBRs:numThirdPartyBRs:isLeaderAppleDevice:numThreadNwsFound:shouldRunPeriodicTdm:]";
            v146 = 1024;
            LODWORD(v147) = 6803;
            WORD2(v147) = 2112;
            *(void *)((char *)&v147 + 6) = v136;
            HIWORD(v147) = 1024;
            *(_DWORD *)v148 = i;
            *(_WORD *)&v148[4] = 2112;
            *(void *)&v148[6] = v113;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v115,  OS_LOG_TYPE_DEBUG,  "%s:%d: currentBAIdStr=%@, index=%d baIdStrArray=%@ ",  v144,  0x2Cu);
          }
        }
      }

      v119 = -[NSMutableArray count](v139, "count");
      if (v119 >= 1)
      {
        v120 = 0LL;
        if (v119 == 1) {
          v121 = 1LL;
        }
        else {
          v121 = 2LL;
        }
        do
        {
          v122 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray objectAtIndexedSubscript:](v139, "objectAtIndexedSubscript:", v120));
          v123 = [v136 isEqualToString:v122];

          if (v123) {
            *a11 = 1;
          }
          ++v120;
        }

        while (v121 != v120);
      }
    }
  }

  else
  {
    v103 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
    char v91 = (os_log_s *)objc_claimAutoreleasedReturnValue(v103);
    if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR)) {
      sub_1001EF418();
    }
    std::string v92 = 0;
LABEL_113:

    *a11 = v92;
  }

  *a10 = -[os_log_s count](v131, "count");
  v104 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
  v105 = (os_log_s *)objc_claimAutoreleasedReturnValue(v104);
  if (os_log_type_enabled(v105, OS_LOG_TYPE_INFO))
  {
    v106 = *a7;
    v107 = *a8;
    v108 = *a9;
    v109 = *a10;
    v110 = *a6;
    v111 = *a11;
    *(_DWORD *)v144 = 136316930;
    v145 = "-[ThreadNetworkManagerInstance checkAndUpdateNetworkParamsFromMdnsScan:borderAgentID:leaderBorderAgentID:isNw"
           "Found:numAppleBRs:numThirdPartyBRs:isLeaderAppleDevice:numThreadNwsFound:shouldRunPeriodicTdm:]";
    v146 = 1024;
    LODWORD(v147) = 6818;
    WORD2(v147) = 1024;
    *(_DWORD *)((char *)&v147 + 6) = v106;
    WORD5(v147) = 1024;
    HIDWORD(v147) = v107;
    *(_WORD *)v148 = 1024;
    *(_DWORD *)&v148[2] = v108;
    *(_WORD *)&v148[6] = 1024;
    *(_DWORD *)&v148[8] = v109;
    *(_WORD *)&v148[12] = 1024;
    *(_DWORD *)&v148[14] = v110;
    v149 = 1024;
    LODWORD(v150) = v111;
    _os_log_impl( (void *)&_mh_execute_header,  v105,  OS_LOG_TYPE_INFO,  "%s:%d: numAppleBRs=%d, numThirdPartyBRs=%d, isLeaderAppleDevice=%d, numThreadNetworks=%d isCurrentNodeMeshcopEntry Found=%d shouldRunTdm=%d",  v144,  0x36u);
  }

  -[ThreadNetworkfinder clear](self->_BAFinder, "clear");
  v102 = 1;
LABEL_128:

LABEL_129:
  return v102;
}

LABEL_100:
        unsigned int v19 = *(_DWORD *)(a1 + 128);
        if (v19)
        {
          v40 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v40)
          {
            goto LABEL_302;
          }

          if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            goto LABEL_302;
          }
          goto LABEL_214;
        }

        goto LABEL_106;
      }
    }

    else
    {
      if (*(_WORD *)(a1 + 8))
      {
        if (v17 != 82) {
          goto LABEL_314;
        }
      }

      else
      {
        uint64_t v21 = *(void *)(a1 + 56);
        if (!*(_BYTE *)(v21 + 1376))
        {
          buf.__r_.__value_.__r.__words[0] = 0LL;
          (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)a1 + 32LL))(a1, 3LL, &buf);
          goto LABEL_54;
        }

        if (sub_1000D8DE8(v21) == 2)
        {
          buf.__r_.__value_.__r.__words[0] = 0LL;
          (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)a1 + 32LL))(a1, 4LL, &buf);
          goto LABEL_54;
        }

        sub_100159FC0(a1, 30.0);
        *(_WORD *)(a1 + 8) = 82;
      }

      int v22 = sub_1000D8DE8(*(void *)(a1 + 56));
      if (sub_1000B50E8(v22)
        || (*(unsigned int (**)(void))(**(void **)(a1 + 56) + 160LL))(*(void *)(a1 + 56)))
      {
        if (!sub_100159F84(a1))
        {
          sub_10015A00C(a1);
          v23 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v23)
          {
            v24 = v23;
          }

          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            sub_1001FB53C();
          }

          unsigned int v19 = 1;
          goto LABEL_302;
        }

        return 0LL;
      }

      sub_10015A00C(a1);
      int v25 = sub_1000D8DE8(*(void *)(a1 + 56));
      if (sub_1000B5098(v25))
      {
        buf.__r_.__value_.__r.__words[0] = 0LL;
        (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)a1 + 32LL))(a1, 10LL, &buf);
LABEL_54:
        if (buf.__r_.__value_.__r.__words[0]) {
          (*(void (**)(std::string::size_type))(*(void *)buf.__r_.__value_.__l.__data_ + 8LL))(buf.__r_.__value_.__r.__words[0]);
        }
LABEL_287:
        uint64_t result = 2LL;
        goto LABEL_314;
      }

      *(_WORD *)(a1 + 8) = 96;
    }

    if (a2 == 2) {
      return 0LL;
    }
    v26 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v26)
    {
      v27 = v26;
      if (sub_10015A058(6) && os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_INFO,  "Task Join, Clear DataSet",  (uint8_t *)&buf,  2u);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    uint64_t v28 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 24LL))(*(void *)(a1 + 56));
    (*(void (**)(uint64_t))(*(void *)v28 + 392LL))(v28);
    uint64_t v29 = *(void *)(a1 + 56);
    *(_DWORD *)(v29 + 74008) = 0;
    *(void *)(v29 + 74000) = 0LL;
    sub_100070BF0(v29, (void *)(v29 + 73976));
    v30 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v30)
    {
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    sub_100034C60("Ci", (uint64_t *)&buf, 0x80u);
    sub_100006EFC(a1 + 104, (__n128 *)&buf);
    v92.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
    sub_100006F6C((void ***)&v92);
    *(_WORD *)(a1 + 98) = 0;
    *(_WORD *)(a1 + 8) = 110;
    goto LABEL_71;
  }

  if (*(unsigned __int16 *)(a1 + 8) > 0x14Du)
  {
    if (*(unsigned __int16 *)(a1 + 8) > 0x169u)
    {
      switch(v17)
      {
        case 0x16Au:
LABEL_242:
          if ((int)sub_10003453C(a1, a2, a3, v11, v12, v13, v14, v15) >= 2)
          {
            if (*(_DWORD *)(a1 + 128))
            {
              v71 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
              if (v71)
              {
              }

              else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                sub_1001FB53C();
              }
            }

            sub_100034C60("Ciib", (uint64_t *)&buf, 0x80u);
            sub_100006EFC(a1 + 104, (__n128 *)&buf);
            v92.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
            sub_100006F6C((void ***)&v92);
            *(_WORD *)(a1 + 98) = 0;
            *(_WORD *)(a1 + 8) = 374;
            goto LABEL_255;
          }

          return 0LL;
        case 0x176u:
LABEL_255:
          unsigned int v19 = *(_DWORD *)(a1 + 128);
          if (v19)
          {
            v73 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
            if (v73)
            {
              goto LABEL_302;
            }

            if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              goto LABEL_302;
            }
            goto LABEL_301;
          }

          sub_100159FC0(a1, 60.0);
          unsigned int v19 = 0;
          *(_WORD *)(a1 + 8) = 385;
          goto LABEL_263;
        case 0x181u:
          unsigned int v19 = 1;
LABEL_263:
          if ((v16 & 0xFFFFFFF8) != 0x68)
          {
            int v74 = sub_1000D8DE8(*(void *)(a1 + 56));
            if (!sub_1000B5098(v74))
            {
              if (sub_100159F84(a1)) {
                return 0LL;
              }
              sub_10015A00C(a1);
              v81 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
              if (v81)
              {
                goto LABEL_302;
              }

              if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                goto LABEL_302;
              }
LABEL_301:
              sub_1001FB53C();
              goto LABEL_302;
            }
          }

          sub_10015A00C(a1);
          if ((v16 & 0xFFFFFFFE) == 0x68)
          {
            sub_1000DA700(*(void *)(a1 + 56), 7LL);
            uint64_t v75 = 12LL;
          }

          else
          {
            unsigned int v76 = (unsigned __int16)v16 | 0xEA0000;
            if (!v16) {
              unsigned int v76 = 0;
            }
            if ((v16 & 0xFFFFFFF8) == 0x68) {
              uint64_t v75 = 18LL;
            }
            else {
              uint64_t v75 = v76;
            }
          }

          buf.__r_.__value_.__r.__words[0] = 0LL;
          (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)a1 + 32LL))(a1, v75, &buf);
          if (buf.__r_.__value_.__r.__words[0]) {
            (*(void (**)(std::string::size_type))(*(void *)buf.__r_.__value_.__l.__data_ + 8LL))(buf.__r_.__value_.__r.__words[0]);
          }
          uint64_t v77 = *(void *)(a1 + 56);
          *(_BYTE *)(v77 + 73905) = 0;
          sub_100070C70(v77, (uint64_t *)(v77 + 73976));
          v78 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v78)
          {
            if (sub_10015A058(5) && os_log_type_enabled(v78, OS_LOG_TYPE_INFO))
            {
              std::string::size_type v79 = *(void *)(*(void *)(a1 + 56) + 73992LL);
              LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v79;
              _os_log_impl( (void *)&_mh_execute_header,  v78,  OS_LOG_TYPE_INFO,  "Finished Join Network Task, Time taken[%llu msec]",  (uint8_t *)&buf,  0xCu);
            }
          }

          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            sub_1001FB53C();
          }

          v80 = *(void **)(a1 + 56);
          if (v80[9249] >> 4 >= 0x271uLL)
          {
            sub_10000AC00(v88, "Performance");
            sub_10000AC00(v86, "Data Stall");
            sub_10000AC00(v84, "Form Network Takes Long Time");
            (*(void (**)(void *, void **, void **, void **, void, uint64_t))(*v80 + 72LL))( v80,  v88,  v86,  v84,  0LL,  1LL);
            if (v85 < 0) {
              operator delete(v84[0]);
            }
            if (v87 < 0) {
              operator delete(v86[0]);
            }
            if (v89 < 0) {
              operator delete(v88[0]);
            }
          }

          goto LABEL_287;
      }

      goto LABEL_314;
    }

    if (v17 != 334)
    {
      if (v17 != 350) {
        goto LABEL_314;
      }
      goto LABEL_238;
    }

    goto LABEL_231;
  }

  if (*(unsigned __int16 *)(a1 + 8) <= 0x11Du)
  {
    if (v17 != 254)
    {
      if (v17 != 268) {
        goto LABEL_314;
      }
      goto LABEL_173;
    }

    goto LABEL_159;
  }

  switch(v17)
  {
    case 0x11Eu:
      goto LABEL_185;
    case 0x12Cu:
      goto LABEL_197;
    case 0x13Eu:
LABEL_7:
      unsigned int v19 = *(_DWORD *)(a1 + 128);
      if (v19)
      {
        int v20 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v20)
        {
          goto LABEL_302;
        }

        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          goto LABEL_301;
        }
LABEL_302:
        if (v19 <= 1) {
          uint64_t v82 = 1LL;
        }
        else {
          uint64_t v82 = v19;
        }
        v83 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v83)
        {
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FB53C();
        }

        buf.__r_.__value_.__r.__words[0] = 0LL;
        (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)a1 + 32LL))(a1, v82, &buf);
        if (buf.__r_.__value_.__r.__words[0]) {
          (*(void (**)(std::string::size_type))(*(void *)buf.__r_.__value_.__l.__data_ + 8LL))(buf.__r_.__value_.__r.__words[0]);
        }
        uint64_t result = 3LL;
        break;
      }

      goto LABEL_237;
  }

  uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_receivedFrames));
  [v3 setObject:v48 forKey:@"received_frames"];

  uint64_t v8 = self->_has;
  if ((*(_DWORD *)&v8 & 0x40000000) == 0)
  {
LABEL_43:
    if ((*(_DWORD *)&v8 & 0x10000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_102;
  }

  PBDataWriterWriteUint32Field(v7, self->_receivedFrames, 39LL);
  unint64_t v6 = self->_has;
  if ((*(_DWORD *)&v6 & 0x40000000) == 0)
  {
LABEL_43:
    if ((*(_DWORD *)&v6 & 0x10000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_102;
  }

  v4[9] = self->_receivedFrames;
  *((void *)v4 + 31) |= 0x80uLL;
  unint64_t v6 = self->_has;
  if ((*(_DWORD *)&v6 & 0x40000000) == 0)
  {
LABEL_43:
    if ((*(_DWORD *)&v6 & 0x10000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_102;
  }

  *((_DWORD *)v6 + 30) = self->_rxErrorInvalidFrame;
  v6[31] |= 0x10000000uLL;
  unint64_t v10 = self->_has;
  if ((*(_DWORD *)&v10 & 0x800000) == 0)
  {
LABEL_43:
    if ((*(_DWORD *)&v10 & 0x8000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_102;
  }

  uint64_t v14 = 0LL;
  if ((*(_DWORD *)&v4 & 0x8000000) != 0)
  {
LABEL_48:
    uint64_t v15 = 2654435761LL * self->_rxErrorInvalidFcs;
    if ((*(_DWORD *)&v4 & 0x2000000) != 0) {
      goto LABEL_49;
    }
    goto LABEL_102;
  }

  self->_txErrorNotGranted = v5[51];
  *(void *)&self->_has |= 0x400000000000uLL;
  int v9 = *((void *)v5 + 31);
  if ((v9 & 0x100000000000LL) == 0)
  {
LABEL_47:
    if ((v9 & 0x200000000000LL) == 0) {
      goto LABEL_48;
    }
    goto LABEL_102;
  }

              -[AWDCountersIpv6S setRxSuccess:](v10, "setRxSuccess:", sub_1000BE984(3, uint64));
              goto LABEL_101;
            }

LABEL_314:
  *(_WORD *)(a1 + 8) = 0;
  return result;
}

void sub_100079358( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, uint64_t a28, int a29, __int16 a30, char a31, char a32, void *__p, uint64_t a34, int a35, __int16 a36, char a37, char a38)
{
}

uint64_t sub_1000794A4(void *a1)
{
  *a1 = off_1002B06C0;
  sub_10000D448((uint64_t)(a1 + 17));
  return sub_100034374((uint64_t)a1);
}

void sub_1000794D4(void *a1)
{
  *a1 = off_1002B06C0;
  sub_10000D448((uint64_t)(a1 + 17));
  uint64_t v2 = (void *)sub_100034374((uint64_t)a1);
  operator delete(v2);
}

  ;
}

void *sub_10007951C(void *a1, uint64_t a2)
{
  *a1 = off_1002B0710;
  a1[2] = 0LL;
  a1[1] = a1 + 2;
  a1[3] = 0LL;
  a1[5] = 0LL;
  a1[6] = 0LL;
  a1[7] = 0LL;
  a1[8] = a2;
  int v4 = sub_10012E6F8();
  a1[4] = v4;
  sub_10012F678((uint64_t)v4, a2);
  unint64_t v5 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v5)
  {
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  return a1;
}

void sub_1000795E8(_Unwind_Exception *a1)
{
}

uint64_t sub_100079614(uint64_t a1)
{
  *(void *)a1 = off_1002B0710;
  uint64_t v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v2)
  {
    if (sub_10015A058(5) && os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v4 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "WPANTUND InternalClientInterface - Deleted",  v4,  2u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  sub_10000AD30(a1 + 8);
  return a1;
}

void sub_1000796E8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100079614(a1);
  operator delete(v1);
}

uint64_t sub_1000796FC()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_100079708()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_100079710(uint64_t a1, void *a2)
{
  (*(void (**)(std::string *__return_ptr, void *))(*(void *)a2 + 360LL))(&__str, a2);
  int v4 = (uint64_t *)sub_10012E6F8();
  sub_10012E748(v4, (uint64_t)a2);
  unint64_t v5 = (void *)(a1 + 40);
  std::string::operator=((std::string *)(a1 + 40), &__str);
  *sub_10000A3B0((uint64_t **)(a1 + 8), &__str) = a2;
  unint64_t v6 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v6)
  {
    if (sub_10015A058(5) && os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 136315138;
      unint64_t v10 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "WPANTUND InternalClientInterface Server - Interface added %s",  buf,  0xCu);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  return 0LL;
}

void sub_100079854( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t sub_10007987C(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 8) = (char *)off_1002AECF8 + 1;
  *(void *)(result + 40) = result + 40;
  *(void *)(result + 48) = result + 40;
  *(void *)(result + 56) = 0LL;
  *(_DWORD *)(result + 64) = 30;
  *(void *)(result + 72) = 0LL;
  *(_DWORD *)(result + 104) = 0;
  *(void *)(result + 112) = 0LL;
  *(_DWORD *)(result + 144) = 0;
  return result;
}

uint64_t sub_1000798B8(uint64_t a1, uint64_t *a2)
{
  return a1;
}

uint64_t *sub_1000798E0(uint64_t *a1, uint64_t *a2)
{
  v4[0] = 0LL;
  sub_100007640((uint64_t)v4, a2);
  sub_1000355E0(v4, a1);
  sub_100006E7C(v4);
  return a1;
}

void sub_100079928( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10007993C(uint64_t a1, uint64_t *a2)
{
  v4[0] = 0LL;
  sub_100007640((uint64_t)v4, a2);
  sub_100045084(v4, v5);
  sub_1000799BC((uint64_t *)(a1 + 8), v5);
  sub_1000075F0(v5);
  sub_1000075F0(v4);
  return a1;
}

void sub_100079998(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_1000075F0((uint64_t *)va1);
  sub_1000075F0((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000799BC(uint64_t *a1, uint64_t *a2)
{
  v4[0] = 0LL;
  sub_100007640((uint64_t)v4, a2);
  sub_10004BFE4(v5, v4);
  sub_1000355E0((uint64_t *)v5, a1);
  sub_100006E7C(v5);
  sub_1000075F0(v4);
  return a1;
}

void sub_100079A1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_100006E7C((uint64_t *)va1);
  sub_1000075F0((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100079A40(uint64_t a1, uint64_t a2)
{
  return a1;
}

void *sub_100079A70(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_10007B210(a1, 0LL, 0LL, a3);
  uint64_t v6 = *a2;
  *(void *)(v6 + 8) = result;
  *uint64_t result = v6;
  *a2 = (uint64_t)result;
  result[1] = a2;
  uint64_t v7 = *(void *)(a1 + 16);
  BOOL v8 = __CFADD__(v7, 1LL);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(0x5500u);
  }
  else {
    *(void *)(a1 + 16) = v9;
  }
  return result;
}

uint64_t sub_100079AC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 64) = a2;
  return result;
}

uint64_t sub_100079AD0(uint64_t a1, const std::string *a2)
{
  if (v7 < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_100079B40( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100079B74(uint64_t a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = a1;
  std::string::basic_string((std::string *)(a3 + 8), &__str);
}

void sub_100079BE0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100079C14(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  else {
    uint64_t v5 = *(void *)a3;
  }
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  spinel_datatype_iter_start((uint64_t)&v32, a1, a2, v5);
  uint64_t v31 = 0LL;
  int v13 = *(char *)v33;
  if (v13 > 97)
  {
    switch(*(_BYTE *)v33)
    {
      case 'b':
        v36.n128_u8[0] = 0;
        if (spinel_datatype_iter_unpack((uint64_t)&v32, v6, v7, v8, v9, v10, v11, v12, &v36))
        {
          uint64_t v15 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v15)
          {
          }

          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            goto LABEL_136;
          }
        }

        else
        {
          sub_100020B4C(&v31, &v36);
        }

        break;
      case 'c':
        LOBYTE(v38) = 0;
        if (spinel_datatype_iter_unpack((uint64_t)&v32, v6, v7, v8, v9, v10, v11, v12, &v38))
        {
          unsigned int v19 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v19)
          {
          }

          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            goto LABEL_136;
          }
        }

        else
        {
          v36.n128_u32[0] = (char)v38;
          sub_100017730(&v31, &v36);
        }

        break;
      case 'd':
      case 'f':
      case 'g':
      case 'h':
      case 'j':
      case 'k':
        break;
      case 'e':
        uint64_t v35 = 0LL;
        if (spinel_datatype_iter_unpack((uint64_t)&v32, v6, v7, v8, v9, v10, v11, v12, &v35))
        {
          int v20 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v20)
          {
          }

          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            goto LABEL_136;
          }
        }

        else
        {
          uint64_t v37 = 0LL;
          __n128 v36 = 0uLL;
          sub_100018E8C(&v36, v35, (uint64_t)v35 + 6, 6uLL);
          sub_100017FCC(&v31, &v36);
LABEL_97:
          uint64_t v38 = &v36;
          sub_100006F6C((void ***)&v38);
        }

        break;
      case 'i':
        v36.n128_u32[0] = 0;
        if (spinel_datatype_iter_unpack((uint64_t)&v32, v6, v7, v8, v9, v10, v11, v12, &v36))
        {
          uint64_t v21 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v21)
          {
          }

          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            goto LABEL_136;
          }
        }

        else
        {
LABEL_92:
          sub_100017F70(&v31, &v36);
        }

        break;
      case 'l':
        v36.n128_u32[0] = 0;
        if (spinel_datatype_iter_unpack((uint64_t)&v32, v6, v7, v8, v9, v10, v11, v12, &v36))
        {
          int v22 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v22)
          {
          }

          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            goto LABEL_136;
          }
        }

        else
        {
          sub_100017730(&v31, &v36);
        }

        break;
      default:
        if (v13 == 115)
        {
          v36.n128_u16[0] = 0;
          if (spinel_datatype_iter_unpack((uint64_t)&v32, v6, v7, v8, v9, v10, v11, v12, &v36))
          {
            uint64_t v28 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
            if (v28)
            {
            }

            else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              goto LABEL_136;
            }
          }

          else
          {
            sub_10007B0C8(&v31, &v36);
          }
        }

        else if (v13 == 120)
        {
          v36.n128_u64[0] = 0LL;
          if (spinel_datatype_iter_unpack((uint64_t)&v32, v6, v7, v8, v9, v10, v11, v12, &v36))
          {
            unsigned int v17 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
            if (v17)
            {
            }

            else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              goto LABEL_136;
            }
          }

          else
          {
            sub_10007B124(&v31, (uint64_t *)&v36);
          }
        }

        break;
    }
  }

  else
  {
    if (v13 <= 82)
    {
      switch(*(_BYTE *)v33)
      {
        case 'C':
          v36.n128_u8[0] = 0;
          if (spinel_datatype_iter_unpack((uint64_t)&v32, v6, v7, v8, v9, v10, v11, v12, &v36))
          {
            uint64_t v14 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
            if (v14)
            {
            }

            else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              goto LABEL_136;
            }
          }

          else
          {
            sub_1000176D4(&v31, &v36);
          }

          break;
        case 'D':
          uint64_t v35 = 0LL;
          if (!spinel_datatype_iter_unpack((uint64_t)&v32, v6, v7, v8, v9, v10, v11, v12, &v35))
          {
            sub_100018E5C(&v36, v35, (uint64_t)v35 + v34);
            sub_100017FCC(&v31, &v36);
            goto LABEL_97;
          }

          v23 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v23)
          {
          }

          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            goto LABEL_136;
          }

          break;
        case 'E':
          uint64_t v35 = 0LL;
          if (!spinel_datatype_iter_unpack((uint64_t)&v32, v6, v7, v8, v9, v10, v11, v12, &v35))
          {
            uint64_t v37 = 0LL;
            __n128 v36 = 0uLL;
            sub_100018E8C(&v36, v35, (uint64_t)v35 + 8, 8uLL);
            sub_100017FCC(&v31, &v36);
            goto LABEL_97;
          }

          v24 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v24)
          {
          }

          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            goto LABEL_136;
          }

          break;
        case 'F':
        case 'G':
        case 'H':
        case 'I':
        case 'J':
        case 'K':
          goto LABEL_137;
        case 'L':
          v36.n128_u32[0] = 0;
          int v25 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v25)
          {
          }

          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            goto LABEL_136;
          }

          break;
        default:
          if (v13 == 54)
          {
            uint64_t v38 = 0LL;
            if (!spinel_datatype_iter_unpack((uint64_t)&v32, v6, v7, v8, v9, v10, v11, v12, &v38))
            {
              sub_100108154(v38, &v36);
              sub_1000175B4(&v31, (uint64_t)&v36);
              goto LABEL_104;
            }

            unint64_t v18 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
            if (v18)
            {
            }

            else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              goto LABEL_136;
            }
          }

          break;
      }

      goto LABEL_137;
    }

    switch(v13)
    {
      case 'S':
        v36.n128_u16[0] = 0;
        if (!spinel_datatype_iter_unpack((uint64_t)&v32, v6, v7, v8, v9, v10, v11, v12, &v36))
        {
          sub_100017678(&v31, &v36);
          break;
        }

        v26 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (!v26)
        {
          if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            break;
          }
          goto LABEL_136;
        }

        break;
      case 'U':
        uint64_t v38 = 0LL;
        if (!spinel_datatype_iter_unpack((uint64_t)&v32, v6, v7, v8, v9, v10, v11, v12, &v38))
        {
          sub_10000AC00(&v36, (char *)v38);
          sub_1000175B4(&v31, (uint64_t)&v36);
LABEL_104:
          if (SHIBYTE(v37) < 0) {
            operator delete((void *)v36.n128_u64[0]);
          }
          break;
        }

        v27 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (!v27)
        {
          if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            break;
          }
          goto LABEL_136;
        }

        break;
      case 'X':
        v36.n128_u64[0] = 0LL;
        if (!spinel_datatype_iter_unpack((uint64_t)&v32, v6, v7, v8, v9, v10, v11, v12, &v36))
        {
          sub_100017620(&v31, (uint64_t *)&v36);
          break;
        }

        int v16 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v16)
        {
          break;
        }

        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          break;
        }
LABEL_136:
        sub_1001FB53C();
        break;
      default:
        break;
    }
  }

LABEL_137:
  uint64_t v29 = *a4;
  *a4 = v31;
  uint64_t v31 = 0LL;
  if (v29)
  {
    (*(void (**)(uint64_t))(*(void *)v29 + 8LL))(v29);
    if (v31) {
      (*(void (**)(uint64_t))(*(void *)v31 + 8LL))(v31);
    }
  }

  return 0LL;
}

void sub_10007A5C0( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8LL))(a12);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x10007A5A8LL);
}

uint64_t *sub_10007A6B8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  std::string::basic_string(&__p, (const std::string *)(a2 + 8));
  sub_10007B3D0(v6, &v4);
  sub_10007B35C((uint64_t *)v6, a1);
  sub_10004BED0(v6);
  return a1;
}

void sub_10007A728( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10007A754(uint64_t a1, uint64_t *a2)
{
  return a1;
}

uint64_t *sub_10007A77C(uint64_t *a1, uint64_t *a2)
{
  v4[0] = 0LL;
  sub_100007640((uint64_t)v4, a2);
  sub_10007B35C(v4, a1);
  sub_10004BED0(v4);
  return a1;
}

void sub_10007A7C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10007A7D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 104) = a2;
  return result;
}

uint64_t sub_10007A7E0(uint64_t a1, uint64_t *a2, int a3)
{
  *(_DWORD *)(a1 + 144) = a3;
  return a1;
}

uint64_t *sub_10007A810(uint64_t *a1, uint64_t *a2)
{
  v4[0] = 0LL;
  sub_100007640((uint64_t)v4, a2);
  sub_10007B8F4(v4, a1);
  sub_10004BF94(v4);
  return a1;
}

void sub_10007A858( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_10007A86C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = operator new(0x100uLL);
  sub_10007A8C8((uint64_t)v4, a1);
  return sub_10007BA00(a2, (uint64_t)v4);
}

void sub_10007A8B0(_Unwind_Exception *a1)
{
}

uint64_t sub_10007A8C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  v6[0] = 0LL;
  sub_100007640((uint64_t)v6, (uint64_t *)(a2 + 8));
  sub_1000342C8(a1, v4, v6);
  sub_100006E7C(v6);
  *(void *)a1 = off_1002B0768;
  sub_10007BB40((uint64_t *)(a1 + 136), a2 + 40);
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 160) = 0LL;
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 104);
  sub_100007640(a1 + 176, (uint64_t *)(a2 + 72));
  *(void *)(a1 + 208) = 0LL;
  sub_100007640(a1 + 208, (uint64_t *)(a2 + 112));
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 244) = 1;
  *(void *)(a1 + 248) = 0LL;
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 64);
  return a1;
}

void sub_10007A988(_Unwind_Exception *a1)
{
}

uint64_t sub_10007A9CC( uint64_t a1, unsigned int a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a3;
  __int16 v11 = 0;
  v44 = a3;
  int v12 = *(unsigned __int16 *)(a1 + 8);
  uint64_t result = 3LL;
  if (v12 <= 345)
  {
    if (v12)
    {
      if (v12 != 318)
      {
        if (v12 != 327) {
          goto LABEL_83;
        }
        goto LABEL_19;
      }
    }

    else
    {
      *(_DWORD *)(a1 + 244) = 1;
      *(_WORD *)(a1 + 8) = 318;
    }

    if (a2 == 2) {
      return 0LL;
    }
    if (!*(_DWORD *)(a1 + 168)) {
      goto LABEL_22;
    }
    sub_100034C60("Ciib", (uint64_t *)&v43, 0x80u);
    sub_100006EFC(a1 + 104, &v43);
    uint64_t v45 = &v43;
    sub_100006F6C((void ***)&v45);
    *(_WORD *)(a1 + 98) = 0;
    *(_WORD *)(a1 + 8) = 327;
LABEL_19:
    int v14 = *(_DWORD *)(a1 + 128);
    *(_DWORD *)(a1 + 244) = v14;
    if (v14 && v14 != 9)
    {
      unsigned int v17 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v17)
      {
        unint64_t v18 = v17;
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_58:
        sub_1001FB53C();
      }

LABEL_76:
        uint64_t v41 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v41)
        {
          v42 = v41;
          if (sub_10015A058(3))
          {
            if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
              sub_10020715C(a1, v42);
            }
          }
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FB53C();
        }

        (*(void (**)(uint64_t, void, uint64_t))(*(void *)a1 + 32LL))( a1,  *(unsigned int *)(a1 + 244),  a1 + 248);
        __int16 v11 = 0;
        uint64_t result = 3LL;
        goto LABEL_83;
      }

      return 0LL;
    }

  v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_txDelayMax));
  [v3 setObject:v24 forKey:@"tx_delay_max"];

  uint64_t v8 = self->_has;
  if ((*(void *)&v8 & 0x2000000000LL) == 0)
  {
LABEL_19:
    if ((*(void *)&v8 & 0x1000000000LL) == 0) {
      goto LABEL_20;
    }
    goto LABEL_78;
  }

  PBDataWriterWriteUint32Field(v7, self->_txDelayMax, 15LL);
  uint64_t v6 = self->_has;
  if ((*(void *)&v6 & 0x2000000000LL) == 0)
  {
LABEL_19:
    if ((*(void *)&v6 & 0x1000000000LL) == 0) {
      goto LABEL_20;
    }
    goto LABEL_78;
  }

  v4[43] = self->_txDelayMax;
  *((void *)v4 + 31) |= 0x4000000000uLL;
  uint64_t v6 = self->_has;
  if ((*(void *)&v6 & 0x2000000000LL) == 0)
  {
LABEL_19:
    if ((*(void *)&v6 & 0x1000000000LL) == 0) {
      goto LABEL_20;
    }
    goto LABEL_78;
  }

  *((_DWORD *)v6 + 41) = self->_txDelay90perc;
  v6[31] |= 0x1000000000uLL;
  uint64_t v10 = self->_has;
  if ((*(_BYTE *)&v10 & 8) == 0)
  {
LABEL_19:
    if ((*(_WORD *)&v10 & 0x200) == 0) {
      goto LABEL_20;
    }
    goto LABEL_78;
  }

  v46 = 0LL;
  if ((*(_WORD *)&v4 & 0x200) != 0)
  {
LABEL_24:
    uint64_t v45 = 2654435761LL * self->_receivingTime;
    if ((*(void *)&v4 & 0x800000000LL) != 0) {
      goto LABEL_25;
    }
    goto LABEL_78;
  }

  self->_retryIntervalMax = v5[14];
  *(void *)&self->_has |= 0x1000uLL;
  uint64_t v9 = *((void *)v5 + 31);
  if ((v9 & 0x800) == 0)
  {
LABEL_23:
    if ((v9 & 0x400) == 0) {
      goto LABEL_24;
    }
    goto LABEL_78;
  }

          v133 = (void *)v49;
LABEL_77:
          uint64_t v55 = v12 + v15;
          if (__CFADD__(v12, (_DWORD)v15)) {
            goto LABEL_151;
          }
          int v12 = v55 + 2;
          if (v55 >= 0xFFFFFFFE) {
            goto LABEL_151;
          }
          if (v12 >= v5) {
            goto LABEL_82;
          }
          continue;
        }

        __break(0x5512u);
        return result;
      case 4:
        v42 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
        __n128 v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
        if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          v135 = "-[ThreadNetworkManagerInstance validateDataSetTLVs:creds:]";
          v136 = 1024;
          *(_DWORD *)v137 = 2580;
          _os_log_error_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_ERROR,  "%s: #MOS : ==> Decoded pskc Line : %d",  buf,  0x12u);
        }

        if ((_DWORD)v15 != 16)
        {
          v98 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
          char v89 = (os_log_s *)objc_claimAutoreleasedReturnValue(v98);
          if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR)) {
            sub_1001ED548();
          }
          goto LABEL_147;
        }

        v44 = objc_claimAutoreleasedReturnValue( +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  &v4[v14],  16LL));

        uint64_t v45 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
        uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315395;
          v135 = "-[ThreadNetworkManagerInstance validateDataSetTLVs:creds:]";
          v136 = 2117;
          *(void *)v137 = v44;
          _os_log_error_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "%s: #MOS : PSKc : %{sensitive}@",  buf,  0x16u);
        }

        v131 = (void *)v44;
        goto LABEL_75;
      case 5:
        uint64_t v51 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
        v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
        if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          v135 = "-[ThreadNetworkManagerInstance validateDataSetTLVs:creds:]";
          v136 = 1024;
          *(_DWORD *)v137 = 2596;
          _os_log_error_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_ERROR,  "%s: #MOS : ==> Decoded master key Line : %d",  buf,  0x12u);
        }

        if ((_DWORD)v15 != 16)
        {
          v97 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
          char v89 = (os_log_s *)objc_claimAutoreleasedReturnValue(v97);
          if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR)) {
            sub_1001ED5BC();
          }
          goto LABEL_147;
        }

        v53 = objc_claimAutoreleasedReturnValue( +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  &v4[v14],  16LL));

        v54 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
        uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315395;
          v135 = "-[ThreadNetworkManagerInstance validateDataSetTLVs:creds:]";
          v136 = 2117;
          *(void *)v137 = v53;
          _os_log_error_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "%s: #MOS : Master Key: %{sensitive}@",  buf,  0x16u);
        }

        v132 = (void *)v53;
        goto LABEL_75;
      case 6:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
        goto LABEL_31;
      case 7:
        uint64_t v32 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
        __int128 v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          v135 = "-[ThreadNetworkManagerInstance validateDataSetTLVs:creds:]";
          v136 = 1024;
          *(_DWORD *)v137 = 2626;
          _os_log_error_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_ERROR,  "%s: #MOS : ==> Decoded mesh local prefix Line : %d",  buf,  0x12u);
        }

        if ((_DWORD)v15 == 8) {
          goto LABEL_77;
        }
        v100 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
        char v89 = (os_log_s *)objc_claimAutoreleasedReturnValue(v100);
        if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR)) {
          sub_1001ED718();
        }
        goto LABEL_147;
      case 0xC:
        uint64_t v30 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
        uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          v135 = "-[ThreadNetworkManagerInstance validateDataSetTLVs:creds:]";
          v136 = 1024;
          *(_DWORD *)v137 = 2611;
          _os_log_error_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_ERROR,  "%s: #MOS : ==> Decoded security policy Line : %d",  buf,  0x12u);
        }

        if ((v15 - 3) >= 2)
        {
          v103 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
          char v89 = (os_log_s *)objc_claimAutoreleasedReturnValue(v103);
          if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR)) {
            sub_1001ED6A4();
          }
          goto LABEL_147;
        }

        if (!v4[v14])
        {
          if (v12 >= 0xFFFFFFFD) {
            goto LABEL_151;
          }
          if (!v4[v12 + 3])
          {
            v121 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
            char v89 = (os_log_s *)objc_claimAutoreleasedReturnValue(v121);
            if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR)) {
              sub_1001ED630();
            }
            goto LABEL_147;
          }
        }

        goto LABEL_77;
      default:
        if (v17 != 53)
        {
LABEL_31:
          uint64_t v29 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
          uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 136315650;
            v135 = "-[ThreadNetworkManagerInstance validateDataSetTLVs:creds:]";
            v136 = 1024;
            *(_DWORD *)v137 = v17;
            *(_WORD *)&v137[4] = 1024;
            *(_DWORD *)&v137[6] = 2636;
            int v22 = v21;
            v23 = "%s: #MOS : ==> Unknown type : %d, Line : %d";
            v24 = 24;
LABEL_33:
            _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, v23, buf, v24);
          }

LABEL_83:
  *(_WORD *)(a1 + 8) = v11;
  return result;
}

      uint64_t v40 = 1LL;
      goto LABEL_84;
    }

    uint64_t v21 = a2 >= v14;
    a2 = a2 - v14;
    if (!v21)
    {
      uint64_t v38 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      uint64_t v39 = v38;
      if (v38)
      {
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        goto LABEL_82;
      }

      goto LABEL_83;
    }

    int v22 = (int)v53;
    if (v11 > 4 || ((1LL << v11) & 0x19) == 0)
    {
      sub_10000AC00(__s, *v13);
      sub_10000D650(&v55, (const std::string::value_type *)__s);
    }

    if (v22 >= 4)
    {
      v23 = 0;
      v24 = 0LL;
      int v25 = v22 >> 2;
      while (1)
      {
        if (v12 < v24 || v12 - v24 < 8)
        {
          __break(1u);
LABEL_90:
          __break(0x5500u);
        }

        if (!*v13) {
          goto LABEL_11;
        }
        uint64_t v26 = spinel_datatype_unpack(v54, v53, "L", v15, v16, v17, v18, v19, (uint64_t)&v52);
        if (!v26) {
          break;
        }
        if (v53 < v26)
        {
          uint64_t v36 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v36)
          {
            goto LABEL_83;
          }

          if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            goto LABEL_83;
          }
          goto LABEL_82;
        }

        v54 = (_WORD *)((char *)v54 + v26);
        v53 -= v26;
        if ((v8 & 1) != 0)
        {
          memset(__s, 0, 24);
          if (v11 <= 4 && ((1LL << v11) & 0x19) != 0)
          {
            sub_10000AC00(&__p, *v13);
            sub_100014D08((uint64_t)__s, (__int128 *)&__p);
            v24 += 8LL;
            ++v13;
          }

          else
          {
            sub_10000AC00(&v48, *v13);
            sub_10000AC00(v46, "[");
            uint64_t v28 = sub_10000D650(&v48, (const std::string::value_type *)v46);
            uint64_t v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
            v49.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
            *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
            v28->__r_.__value_.__l.__size_ = 0LL;
            v28->__r_.__value_.__l.__cap_ = 0LL;
            v28->__r_.__value_.__r.__words[0] = 0LL;
            std::to_string(&v45, v23);
            uint64_t v30 = sub_10000D650(&v49, (const std::string::value_type *)&v45);
            uint64_t v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
            v50.__r_.__value_.__l.__cap_ = v30->__r_.__value_.__l.__cap_;
            *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v31;
            v30->__r_.__value_.__l.__size_ = 0LL;
            v30->__r_.__value_.__l.__cap_ = 0LL;
            v30->__r_.__value_.__r.__words[0] = 0LL;
            sub_10000AC00(v43, "]");
            uint64_t v32 = sub_10000D650(&v50, (const std::string::value_type *)v43);
            __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v33;
            v32->__r_.__value_.__l.__size_ = 0LL;
            v32->__r_.__value_.__l.__cap_ = 0LL;
            v32->__r_.__value_.__r.__words[0] = 0LL;
            sub_100014D08((uint64_t)__s, (__int128 *)&__p);
            if (v44 < 0) {
              operator delete(v43[0]);
            }
            if (v47 < 0) {
              operator delete(v46[0]);
            }
          }

          uint64_t v27 = sub_100070EE8(&v56, __s);
          sub_100017F70(v27, &v52);
        }

        else
        {
          if (v11 <= 4 && ((1LL << v11) & 0x19) != 0)
          {
            std::string::append(&v55, "\n");
            sub_10000AC00(&__p, *v13);
            sub_10000D650(&v55, (const std::string::value_type *)&__p);
            std::string::append(&v55, ": ");
            v24 += 8LL;
            ++v13;
          }

          else
          {
            std::string::append(&v55, " [");
            std::to_string(&__p, v23);
            sub_10000D650(&v55, (const std::string::value_type *)&__p);
            std::string::append(&v55, ": ");
          }

          snprintf((char *)__s, 0x190uLL, "%u", v52);
          std::string::append(&v55, (const std::string::value_type *)__s);
          if (v11 > 4 || ((1LL << v11) & 0x19) == 0) {
            std::string::append(&v55, "]");
          }
        }

        unsigned int v34 = v23 + 1;
        if (__OFADD__(v23, 1)) {
          goto LABEL_90;
        }
        ++v23;
        if (v25 <= v34) {
          goto LABEL_11;
        }
      }

      uint64_t v35 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v35)
      {
        goto LABEL_83;
      }

      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_83;
      }
LABEL_82:
      sub_1001FB53C();
      goto LABEL_83;
    }

    __int128 v33 = *v17;
    unsigned int v34 = v17[1];
    uint64_t v35 = v17[2];
    if (v33 != 0x5F6C6572745F7872LL || v34 != 0x5F64696C61766E69LL || v35 != 0x73746B705F6B6361LL) {
      goto LABEL_96;
    }
LABEL_91:
    sub_1000BE984(3, uint64);
    goto LABEL_96;
  }

  uint64_t v6 = 0LL;
  v52 = 0LL;
  v53 = 0LL;
LABEL_104:
  v42 = v53 + HIDWORD(v53);
  if (__CFADD__((_DWORD)v53, HIDWORD(v53)) || (__n128 v43 = HIDWORD(v52) + v52, __CFADD__(HIDWORD(v52), (_DWORD)v52)))
  {
    __break(0x5500u);
    goto LABEL_119;
  }

  if (v42 && dword_1002D1220)
  {
    v44 = 100LL * v42;
    if ((v44 & 0xFFFFFFFF00000000LL) != 0) {
      goto LABEL_119;
    }
    uint64_t v45 = v44 / dword_1002D1220;
    if (!v43) {
      goto LABEL_115;
    }
  }

  else
  {
    uint64_t v45 = 0;
    if (!v43)
    {
LABEL_115:
      v47 = 0;
      goto LABEL_116;
    }
  }

  if (!dword_1002D1224) {
    goto LABEL_115;
  }
  v46 = 100LL * v43;
  if ((v46 & 0xFFFFFFFF00000000LL) == 0)
  {
    v47 = v46 / dword_1002D1224;
LABEL_116:
    uint64_t v48 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", sub_1000BE984(3, v45));
    v49 = (void *)objc_claimAutoreleasedReturnValue(v48);
    [v4 setObject:v49 forKey:@"tx_trel_traffic_percentage"];

    v50 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", sub_1000BE984(3, v47));
    uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
    [v4 setObject:v51 forKey:@"rx_trel_traffic_percentage"];

LABEL_117:
    return;
  }

    if (buf[23] == 11) {
      goto LABEL_169;
    }
    if (buf[23] != 15) {
      goto LABEL_211;
    }
LABEL_163:
    if (*(void *)buf == 0x615F686361747461LL && *(void *)&buf[7] == 0x7374706D65747461LL) {
      goto LABEL_219;
    }
    if ((buf[23] & 0x80) == 0)
    {
LABEL_168:
      if (buf[23] != 11) {
        goto LABEL_211;
      }
LABEL_169:
      v60 = (uint64_t *)buf;
      goto LABEL_207;
    }

    goto LABEL_171;
  }

  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_txErrorTimeslotEnded));
  [v3 setObject:v31 forKey:@"tx_error_timeslot_ended"];

  uint64_t v8 = self->_has;
  if ((*(void *)&v8 & 0x800000000000LL) == 0)
  {
LABEL_26:
    if ((*(void *)&v8 & 0x20000000000LL) == 0) {
      goto LABEL_27;
    }
    goto LABEL_85;
  }

  PBDataWriterWriteUint32Field(v7, self->_txErrorTimeslotEnded, 22LL);
  uint64_t v6 = self->_has;
  if ((*(void *)&v6 & 0x800000000000LL) == 0)
  {
LABEL_26:
    if ((*(void *)&v6 & 0x20000000000LL) == 0) {
      goto LABEL_27;
    }
    goto LABEL_85;
  }

  v4[53] = self->_txErrorTimeslotEnded;
  *((void *)v4 + 31) |= 0x1000000000000uLL;
  uint64_t v6 = self->_has;
  if ((*(void *)&v6 & 0x800000000000LL) == 0)
  {
LABEL_26:
    if ((*(void *)&v6 & 0x20000000000LL) == 0) {
      goto LABEL_27;
    }
    goto LABEL_85;
  }

  *((_DWORD *)v6 + 46) = self->_txErrorBusyChannelCcaNotStarted;
  v6[31] |= 0x20000000000uLL;
  uint64_t v10 = self->_has;
  if ((*(void *)&v10 & 0x40000000000LL) == 0)
  {
LABEL_26:
    if ((*(void *)&v10 & 0x80000000000LL) == 0) {
      goto LABEL_27;
    }
    goto LABEL_85;
  }

  uint64_t v39 = 0LL;
  if ((*(void *)&v4 & 0x80000000000LL) != 0)
  {
LABEL_31:
    uint64_t v38 = 2654435761LL * self->_txErrorChannelAccessFailure;
    if ((*(void *)&v4 & 0x2000000000000LL) != 0) {
      goto LABEL_32;
    }
    goto LABEL_85;
  }

  self->_listeningTime = v5[5];
  *(void *)&self->_has |= 8uLL;
  uint64_t v9 = *((void *)v5 + 31);
  if ((v9 & 0x200) == 0)
  {
LABEL_30:
    if ((v9 & 0x800000000LL) == 0) {
      goto LABEL_31;
    }
    goto LABEL_85;
  }

LABEL_84:
  sub_10000D448((uint64_t)&v100);
  sub_10000D448((uint64_t)&v102);

  if (v104) {
    (*(void (**)(uint64_t))(*(void *)v104 + 8LL))(v104);
  }
  int v74 = v105;
  v105 = 0LL;

  uint64_t v75 = v106;
  v106 = 0LL;

  if (SHIBYTE(v109) < 0) {
    operator delete((void *)v108);
  }
}

uint64_t sub_10007AF2C(void *a1)
{
  if (!*a1)
  {
    std::runtime_error::runtime_error(&v2, "call to empty boost::function");
    v2.__vftable = (std::runtime_error_vtbl *)&off_1002AD8D8;
    sub_10000706C(&v2);
  }

  return (*(uint64_t (**)(void *))((*a1 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 1);
}

void sub_10007AF8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
}

uint64_t sub_10007AFA0(void *a1)
{
  if (!*a1)
  {
    std::runtime_error::runtime_error(&v2, "call to empty boost::function");
    v2.__vftable = (std::runtime_error_vtbl *)&off_1002AD8D8;
    sub_10000706C(&v2);
  }

  return (*(uint64_t (**)(void *))((*a1 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 1);
}

void sub_10007B000( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
}

uint64_t sub_10007B014(void *a1)
{
  *a1 = off_1002B0768;
  uint64_t v2 = a1[31];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  sub_10004BF94(a1 + 26);
  sub_10004BED0(a1 + 22);
  sub_10004BEF8(a1 + 17);
  return sub_100034374((uint64_t)a1);
}

void sub_10007B06C(void *a1)
{
  *a1 = off_1002B0768;
  uint64_t v2 = a1[31];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  sub_10004BF94(a1 + 26);
  sub_10004BED0(a1 + 22);
  sub_10004BEF8(a1 + 17);
  uint64_t v3 = (void *)sub_100034374((uint64_t)a1);
  operator delete(v3);
}

uint64_t *sub_10007B0C8(uint64_t *a1, _WORD *a2)
{
  uint64_t v4 = operator new(0x10uLL);
  *(void *)uint64_t v4 = &off_1002B07B8;
  uint64_t v4[4] = *a2;
  uint64_t v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  return a1;
}

uint64_t *sub_10007B124(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = operator new(0x10uLL);
  uint64_t v5 = *a2;
  *uint64_t v4 = &off_1002B0800;
  v4[1] = v5;
  uint64_t v6 = *a1;
  *a1 = (uint64_t)v4;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  return a1;
}

void *sub_10007B184()
{
}

_WORD *sub_10007B190(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &off_1002B07B8;
  result[4] = *(_WORD *)(a1 + 8);
  return result;
}

void *sub_10007B1D0()
{
}

void *sub_10007B1DC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1002B0800;
  result[1] = v3;
  return result;
}

void *sub_10007B210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = 1LL;
  uint64_t v7 = operator new(0x28uLL);
  int v12 = v7;
  *uint64_t v7 = a2;
  v7[1] = a3;
  sub_10000CBF8(v7 + 2, a4);
  uint64_t v8 = v12;
  int v12 = 0LL;
  sub_10000C7B0((uint64_t)v10);
  return v8;
}

void sub_10007B278(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

std::string *sub_10007B28C(std::string *a1, const std::string *a2)
{
  return a1;
}

void sub_10007B2D8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_10007B2F4(std::string *a1, const std::string *a2)
{
  return a1;
}

void sub_10007B340( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10007B35C(uint64_t *result, uint64_t *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    v4[0] = 0LL;
    sub_10007B85C(v4, result);
    sub_10007B85C(v3, a2);
    sub_10007B85C(a2, v4);
    return sub_10004BED0(v4);
  }

  return result;
}

void sub_10007B3BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t (***sub_10007B3D0(uint64_t (***a1)(), uint64_t *a2))()
{
  uint64_t v4 = *a2;
  std::string::basic_string(&__p, (const std::string *)(a2 + 1));
  sub_10007B448(a1, (uint64_t)&v4);
  return a1;
}

void sub_10007B42C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t (***sub_10007B448(uint64_t (***a1)(), uint64_t a2))()
{
  *a1 = 0LL;
  uint64_t v4 = *(void *)a2;
  std::string::basic_string(&__p, (const std::string *)(a2 + 8));
  sub_10007B4C0(a1, &v4);
  return a1;
}

void sub_10007B4A4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007B4C0(uint64_t (***a1)(), uint64_t *a2)
{
  uint64_t v5 = *a2;
  std::string::basic_string(&__p, (const std::string *)(a2 + 1));
  int v3 = sub_10007B5A4((uint64_t)off_1002B0838, (uint64_t)&v5, a1 + 1);
  if (v3) {
    uint64_t v4 = off_1002B0838;
  }
  else {
    uint64_t v4 = 0LL;
  }
  *a1 = v4;
}

void sub_10007B538( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007B554(uint64_t *a1, _WORD *a2, int a3)
{
  if (a3 == 4)
  {
    a2[4] = 0;
  }

  else
  {
    sub_10007B624(a1, a2, a3);
  }

uint64_t sub_10007B574( uint64_t (***a1)(void, void, uint64_t, void), uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v6 = a2;
  int v5 = a3;
  return sub_10007B72C(*a1, (uint64_t)&v6, (uint64_t)&v5, a4);
}

uint64_t sub_10007B5A4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v7 = *(void *)a2;
  std::string::basic_string(&__p, (const std::string *)(a2 + 8));
  uint64_t v5 = sub_10007B784(a1, &v7, a3);
  return v5;
}

void sub_10007B608( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007B624(uint64_t *a1, _WORD *a2, int a3)
{
  switch(a3)
  {
    case 0:
      uint64_t v5 = *a1;
      uint64_t v6 = (char *)operator new(0x20uLL);
      *(void *)uint64_t v6 = *(void *)v5;
      std::string::basic_string((std::string *)(v6 + 8), (const std::string *)(v5 + 8));
      *(void *)a2 = v6;
      break;
    case 1:
      *(void *)a2 = *a1;
      *a1 = 0LL;
      break;
    case 2:
      uint64_t v7 = *(void *)a2;
      if (*(void *)a2)
      {
        operator delete((void *)v7);
      }

      goto LABEL_9;
    case 3:
      uint64_t v8 = (const char *)(*(void *)(*(void *)a2 + 8LL) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)((unint64_t)"N5boost3_bi6bind_tIiPFiPKhjRKNSt3__112basic_stringIcNS4_11char_traitsI"
                                                  "cEENS4_9allocatorIcEEEERNS_3anyEENS0_5list4INS_3argILi1EEENSI_ILi2EEEN"
                                                  "S0_5valueISA_EENSI_ILi3EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp( v8,  (const char *)((unint64_t)"N5boost3_bi6bind_tIiPFiPKhjRKNSt3__112basic_stringIcNS4_11char_traitsIcEE NS4_9allocatorIcEEEERNS_3anyEENS0_5list4INS_3argILi1EEENSI_ILi2EEENS0_5va lueISA_EENSI_ILi3EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = *a1;
      }

      else
      {
LABEL_9:
        *(void *)a2 = 0LL;
      }

      break;
    default:
      a2[4] = 0;
      break;
  }

void sub_10007B718(_Unwind_Exception *a1)
{
}

uint64_t sub_10007B72C( uint64_t (**a1)(void, void, uint64_t, void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[0] = a2;
  v5[1] = a3;
  v5[2] = a4;
  return sub_10007B764((uint64_t)(a1 + 1), a1, (uint64_t)v5);
}

uint64_t sub_10007B764(uint64_t a1, uint64_t (**a2)(void, void, uint64_t, void), uint64_t a3)
{
  return (*a2)(**(void **)a3, **(unsigned int **)(a3 + 8), a1, *(void *)(a3 + 16));
}

uint64_t sub_10007B784(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a2;
  std::string::basic_string(&__p, (const std::string *)(a2 + 1));
  sub_10007B800(a1, (uint64_t)&v6, a3);
  return 1LL;
}

void sub_10007B7E4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_10007B800(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v5 = *(void *)a2;
  uint64_t result = std::string::basic_string((std::string *)(v5 + 8), (const std::string *)(a2 + 8));
  *a3 = v5;
  return result;
}

void sub_10007B848(_Unwind_Exception *a1)
{
}

uint64_t *sub_10007B85C(uint64_t *result, uint64_t *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = *a2;
    if (*a2)
    {
      *uint64_t result = v3;
      if ((v3 & 1) != 0)
      {
        __int128 v4 = *(_OWORD *)(a2 + 1);
        result[3] = a2[3];
        *(_OWORD *)(result + 1) = v4;
      }

      else
      {
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL))( a2 + 1,  result + 1,  1LL);
      }

      *a2 = 0LL;
    }

    else
    {
      return sub_100006EA4(result);
    }
  }

  return result;
}

void sub_10007B8D0(void *a1)
{
  void *v1 = 0LL;
  __cxa_rethrow();
}

void sub_10007B8E0(_Unwind_Exception *a1)
{
}

uint64_t *sub_10007B8F4(uint64_t *result, uint64_t *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    v4[0] = 0LL;
    sub_10007B968(v4, result);
    sub_10007B968(v3, a2);
    sub_10007B968(a2, v4);
    return sub_10004BF94(v4);
  }

  return result;
}

void sub_10007B954( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_10007B968(uint64_t *result, uint64_t *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = *a2;
    if (*a2)
    {
      *uint64_t result = v3;
      if ((v3 & 1) != 0)
      {
        __int128 v4 = *(_OWORD *)(a2 + 1);
        result[3] = a2[3];
        *(_OWORD *)(result + 1) = v4;
      }

      else
      {
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL))( a2 + 1,  result + 1,  1LL);
      }

      *a2 = 0LL;
    }

    else
    {
      return sub_100006EA4(result);
    }
  }

  return result;
}

void sub_10007B9DC(void *a1)
{
  void *v1 = 0LL;
  __cxa_rethrow();
}

void sub_10007B9EC(_Unwind_Exception *a1)
{
}

uint64_t *sub_10007BA00(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0LL;
  __int128 v4 = a1 + 1;
  sub_10007BA88(&v7, a2);
  uint64_t v5 = *v4;
  *__int128 v4 = v7;
  uint64_t v7 = v5;
  sub_10000F9EC(&v7);
  if (a2) {
    sub_100043218((uint64_t *)(a2 + 24), (uint64_t)a1, a2);
  }
  return a1;
}

void sub_10007BA74(_Unwind_Exception *a1)
{
}

void *sub_10007BA88(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  __int128 v4 = operator new(0x18uLL);
  v4[1] = 0x100000001LL;
  *__int128 v4 = &off_1002B0868;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_10007BAD4(void *a1)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  __cxa_rethrow();
}

void sub_10007BAF4(_Unwind_Exception *a1)
{
}

uint64_t sub_10007BB10(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t sub_10007BB28()
{
  return 0LL;
}

uint64_t sub_10007BB30()
{
  return 0LL;
}

uint64_t sub_10007BB38()
{
  return 0LL;
}

uint64_t *sub_10007BB40(uint64_t *a1, uint64_t a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
    sub_10007BBAC(a1, i + 16);
  return a1;
}

void sub_10007BB98(_Unwind_Exception *a1)
{
}

void *sub_10007BBAC(uint64_t *a1, uint64_t a2)
{
  uint64_t result = sub_10007B210((uint64_t)a1, 0LL, 0LL, a2);
  uint64_t v4 = *a1;
  *uint64_t result = *a1;
  result[1] = a1;
  *(void *)(v4 + 8) = result;
  *a1 = (uint64_t)result;
  uint64_t v5 = a1[2];
  BOOL v6 = __CFADD__(v5, 1LL);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(0x5500u);
  }
  else {
    a1[2] = v7;
  }
  return result;
}

void sub_10007BE4C(uint64_t a1, uint64_t a2)
{
LABEL_1:
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
    || *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
  {
    return;
  }

  char v4 = 0;
  unsigned int v5 = 0;
  unint64_t v6 = 0LL;
  while (1)
  {
    uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
    unint64_t v8 = v7 + 1;
    if (v7 == -1) {
      break;
    }
    if (v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
    {
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      uint64_t v12 = OBJC_IVAR___PBDataReader__error;
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v11 = 0LL;
      }
      else {
        unint64_t v11 = v6;
      }
LABEL_14:
      if (*(_BYTE *)(a2 + v12)) {
        BOOL v13 = 1;
      }
      else {
        BOOL v13 = (v11 & 7) == 4;
      }
      if (v13) {
        return;
      }
      switch((v11 >> 3))
      {
        case 1u:
          char v14 = 0;
          unsigned int v15 = 0;
          uint64_t v16 = 0LL;
          *(_BYTE *)(a1 + 40) |= 1u;
          while (1)
          {
            uint64_t v17 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v18 = v17 + 1;
            if (v17 == -1) {
              goto LABEL_43;
            }
            if (v18 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v19 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18;
            v16 |= (unint64_t)(v19 & 0x7F) << v14;
            if ((v19 & 0x80) == 0) {
              goto LABEL_38;
            }
            v14 += 7;
            BOOL v10 = v15++ >= 9;
            if (v10)
            {
              uint64_t v16 = 0LL;
              goto LABEL_40;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v16 = 0LL;
          }
LABEL_40:
          *(void *)(a1 + 8) = v16;
          goto LABEL_1;
        case 2u:
          int v20 = objc_alloc_init(&OBJC_CLASS___AWDHeaderInfoS);
          objc_storeStrong((id *)(a1 + 16), v20);
          sub_10012DC90((uint64_t)v20, a2);
          if ((v21 & 1) == 0) {
            goto LABEL_42;
          }
          goto LABEL_36;
        case 3u:
          int v20 = objc_alloc_init(&OBJC_CLASS___AWDCountersNetworkS);
          objc_storeStrong((id *)(a1 + 24), v20);
          goto LABEL_36;
        case 4u:
          int v20 = objc_alloc_init(&OBJC_CLASS___AWDCountersRadioS);
          objc_storeStrong((id *)(a1 + 32), v20);
          if (!PBReaderPlaceMark(a2, v23) || (sub_100116BC4((uint64_t)v20, a2), (v22 & 1) == 0))
          {
LABEL_42:

            return;
          }

uint64_t sub_10007CE14(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  char v4 = &selRef_setNodeCounts_count_;
  unsigned int v5 = &OBJC_IVAR___AWDCountersIpv6S__txSuccess;
  unint64_t v6 = &OBJC_IVAR___AWDCountersIpv6S__txFailure;
  uint64_t v7 = &OBJC_IVAR___AWDCountersIpv6S__rxSuccess;
LABEL_2:
  while (2)
  {
    int v8 = OBJC_IVAR___PBDataReader__error;
    if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
      && !*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
    {
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        uint64_t v12 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v13 = v12 + 1;
        if (v12 == -1)
        {
LABEL_118:
          __break(0x5500u);
          return result;
        }

        if (v13 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v14 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v12);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v13;
        v11 |= (unint64_t)(v14 & 0x7F) << v9;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v9 += 7;
        if (v10++ >= 9)
        {
          unint64_t v16 = 0LL;
          int v8 = OBJC_IVAR___PBDataReader__error;
          uint64_t v17 = OBJC_IVAR___PBDataReader__error;
          goto LABEL_16;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
      uint64_t v17 = OBJC_IVAR___PBDataReader__error;
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v16 = 0LL;
      }
      else {
        unint64_t v16 = v11;
      }
      int v8 = OBJC_IVAR___PBDataReader__error;
LABEL_16:
      if (*(_BYTE *)(a2 + v17)) {
        BOOL v18 = 1;
      }
      else {
        BOOL v18 = (v16 & 7) == 4;
      }
      if (!v18)
      {
        switch((v16 >> 3))
        {
          case 1u:
            char v19 = 0;
            unsigned int v20 = 0;
            uint64_t v21 = 0LL;
            *(_WORD *)(v3 + *((int *)v4 + 844)) |= 0x100u;
            while (1)
            {
              uint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              unint64_t v23 = v22 + 1;
              if (v22 == -1) {
                goto LABEL_118;
              }
              if (v23 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                uint64_t v26 = v5;
                goto LABEL_103;
              }

              char v24 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23;
              v21 |= (unint64_t)(v24 & 0x7F) << v19;
              if ((v24 & 0x80) == 0) {
                break;
              }
              v19 += 7;
              BOOL v25 = v20++ > 8;
              if (v25)
              {
                LODWORD(v21) = 0;
                uint64_t v26 = v5;
                goto LABEL_106;
              }
            }

            uint64_t v26 = v5;
            goto LABEL_104;
          case 2u:
            char v32 = 0;
            unsigned int v33 = 0;
            uint64_t v21 = 0LL;
            *(_WORD *)(v3 + *((int *)v4 + 844)) |= 0x80u;
            while (2)
            {
              uint64_t v34 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              unint64_t v35 = v34 + 1;
              if (v34 == -1) {
                goto LABEL_118;
              }
              if (v35 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                uint64_t v26 = v6;
                goto LABEL_103;
              }

              char v36 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v35;
              v21 |= (unint64_t)(v36 & 0x7F) << v32;
              if (v36 < 0)
              {
                v32 += 7;
                BOOL v25 = v33++ > 8;
                if (v25)
                {
                  LODWORD(v21) = 0;
                  uint64_t v26 = v6;
                  goto LABEL_106;
                }

                continue;
              }

              break;
            }

            uint64_t v26 = v6;
            goto LABEL_104;
          case 3u:
            char v37 = 0;
            unsigned int v38 = 0;
            uint64_t v21 = 0LL;
            *(_WORD *)(v3 + *((int *)v4 + 844)) |= 2u;
            while (2)
            {
              uint64_t v39 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              unint64_t v40 = v39 + 1;
              if (v39 == -1) {
                goto LABEL_118;
              }
              if (v40 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                uint64_t v26 = v7;
                goto LABEL_103;
              }

              char v41 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v39);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v40;
              v21 |= (unint64_t)(v41 & 0x7F) << v37;
              if (v41 < 0)
              {
                v37 += 7;
                BOOL v25 = v38++ > 8;
                if (v25)
                {
                  LODWORD(v21) = 0;
                  uint64_t v26 = v7;
                  goto LABEL_106;
                }

                continue;
              }

              break;
            }

            uint64_t v26 = v7;
            goto LABEL_104;
          case 4u:
            char v42 = 0;
            unsigned int v43 = 0;
            uint64_t v21 = 0LL;
            *(_WORD *)(v3 + *((int *)v4 + 844)) |= 1u;
            while (2)
            {
              uint64_t v44 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              unint64_t v45 = v44 + 1;
              if (v44 == -1) {
                goto LABEL_118;
              }
              if (v45 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                uint64_t v26 = &OBJC_IVAR___AWDCountersIpv6S__rxFailure;
                goto LABEL_103;
              }

              char v46 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v44);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v45;
              v21 |= (unint64_t)(v46 & 0x7F) << v42;
              if (v46 < 0)
              {
                v42 += 7;
                BOOL v25 = v43++ > 8;
                if (v25)
                {
                  LODWORD(v21) = 0;
                  uint64_t v26 = &OBJC_IVAR___AWDCountersIpv6S__rxFailure;
                  goto LABEL_106;
                }

                continue;
              }

              break;
            }

            uint64_t v26 = &OBJC_IVAR___AWDCountersIpv6S__rxFailure;
            goto LABEL_104;
          case 5u:
            char v47 = 0;
            unsigned int v48 = 0;
            uint64_t v21 = 0LL;
            *(_WORD *)(v3 + *((int *)v4 + 844)) |= 8u;
            while (2)
            {
              uint64_t v49 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              unint64_t v50 = v49 + 1;
              if (v49 == -1) {
                goto LABEL_118;
              }
              if (v50 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                uint64_t v26 = &OBJC_IVAR___AWDCountersIpv6S__txAppPktSucess;
                goto LABEL_103;
              }

              char v51 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v49);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v50;
              v21 |= (unint64_t)(v51 & 0x7F) << v47;
              if (v51 < 0)
              {
                v47 += 7;
                BOOL v25 = v48++ > 8;
                if (v25)
                {
                  LODWORD(v21) = 0;
                  uint64_t v26 = &OBJC_IVAR___AWDCountersIpv6S__txAppPktSucess;
                  goto LABEL_106;
                }

                continue;
              }

              break;
            }

            uint64_t v26 = &OBJC_IVAR___AWDCountersIpv6S__txAppPktSucess;
            goto LABEL_104;
          case 6u:
            char v52 = 0;
            unsigned int v53 = 0;
            uint64_t v21 = 0LL;
            *(_WORD *)(v3 + *((int *)v4 + 844)) |= 0x40u;
            while (2)
            {
              uint64_t v54 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              unint64_t v55 = v54 + 1;
              if (v54 == -1) {
                goto LABEL_118;
              }
              if (v55 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                uint64_t v26 = &OBJC_IVAR___AWDCountersIpv6S__txDelaymin;
                goto LABEL_103;
              }

              char v56 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v54);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v55;
              v21 |= (unint64_t)(v56 & 0x7F) << v52;
              if (v56 < 0)
              {
                v52 += 7;
                BOOL v25 = v53++ > 8;
                if (v25)
                {
                  LODWORD(v21) = 0;
                  uint64_t v26 = &OBJC_IVAR___AWDCountersIpv6S__txDelaymin;
                  goto LABEL_106;
                }

                continue;
              }

              break;
            }

            uint64_t v26 = &OBJC_IVAR___AWDCountersIpv6S__txDelaymin;
            goto LABEL_104;
          case 7u:
            char v57 = 0;
            unsigned int v58 = 0;
            uint64_t v21 = 0LL;
            *(_WORD *)(v3 + *((int *)v4 + 844)) |= 0x20u;
            while (2)
            {
              uint64_t v59 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              unint64_t v60 = v59 + 1;
              if (v59 == -1) {
                goto LABEL_118;
              }
              if (v60 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                uint64_t v26 = &OBJC_IVAR___AWDCountersIpv6S__txDelaymax;
                goto LABEL_103;
              }

              char v61 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v59);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v60;
              v21 |= (unint64_t)(v61 & 0x7F) << v57;
              if (v61 < 0)
              {
                v57 += 7;
                BOOL v25 = v58++ > 8;
                if (v25)
                {
                  LODWORD(v21) = 0;
                  uint64_t v26 = &OBJC_IVAR___AWDCountersIpv6S__txDelaymax;
                  goto LABEL_106;
                }

                continue;
              }

              break;
            }

            uint64_t v26 = &OBJC_IVAR___AWDCountersIpv6S__txDelaymax;
            goto LABEL_104;
          case 8u:
            char v62 = 0;
            unsigned int v63 = 0;
            uint64_t v21 = 0LL;
            *(_WORD *)(v3 + *((int *)v4 + 844)) |= 0x10u;
            while (2)
            {
              uint64_t v64 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              unint64_t v65 = v64 + 1;
              if (v64 == -1) {
                goto LABEL_118;
              }
              if (v65 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                uint64_t v26 = &OBJC_IVAR___AWDCountersIpv6S__txDelayavg;
                goto LABEL_103;
              }

              char v66 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v64);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v65;
              v21 |= (unint64_t)(v66 & 0x7F) << v62;
              if (v66 < 0)
              {
                v62 += 7;
                BOOL v25 = v63++ > 8;
                if (v25)
                {
                  LODWORD(v21) = 0;
                  uint64_t v26 = &OBJC_IVAR___AWDCountersIpv6S__txDelayavg;
                  goto LABEL_106;
                }

                continue;
              }

              break;
            }

            uint64_t v26 = &OBJC_IVAR___AWDCountersIpv6S__txDelayavg;
            goto LABEL_104;
          case 9u:
            char v67 = 0;
            unsigned int v68 = 0;
            uint64_t v21 = 0LL;
            *(_WORD *)(v3 + *((int *)v4 + 844)) |= 0x200u;
            while (2)
            {
              uint64_t v69 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              unint64_t v70 = v69 + 1;
              if (v69 == -1) {
                goto LABEL_118;
              }
              if (v70 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                uint64_t v26 = &OBJC_IVAR___AWDCountersIpv6S__txSuccessRate;
                goto LABEL_103;
              }

              char v71 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v69);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v70;
              v21 |= (unint64_t)(v71 & 0x7F) << v67;
              if (v71 < 0)
              {
                v67 += 7;
                BOOL v25 = v68++ > 8;
                if (v25)
                {
                  LODWORD(v21) = 0;
                  uint64_t v26 = &OBJC_IVAR___AWDCountersIpv6S__txSuccessRate;
                  goto LABEL_106;
                }

                continue;
              }

              break;
            }

            uint64_t v26 = &OBJC_IVAR___AWDCountersIpv6S__txSuccessRate;
            goto LABEL_104;
          case 0xAu:
            char v72 = 0;
            unsigned int v73 = 0;
            uint64_t v21 = 0LL;
            *(_WORD *)(v3 + *((int *)v4 + 844)) |= 4u;
            break;
          default:
            uint64_t v27 = v5;
            uint64_t v28 = v6;
            uint64_t v29 = v7;
            uint64_t v30 = v4;
            uint64_t v31 = v3;
            uint64_t result = PBReaderSkipValueWithTag(a2);
            uint64_t v3 = v31;
            char v4 = v30;
            uint64_t v7 = v29;
            unint64_t v6 = v28;
            unsigned int v5 = v27;
            if ((result & 1) != 0) {
              continue;
            }
            return 0LL;
        }

        while (1)
        {
          uint64_t v74 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v75 = v74 + 1;
          if (v74 == -1) {
            goto LABEL_118;
          }
          if (v75 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v76 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v74);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v75;
          v21 |= (unint64_t)(v76 & 0x7F) << v72;
          if ((v76 & 0x80) == 0)
          {
            uint64_t v26 = &OBJC_IVAR___AWDCountersIpv6S__rxSuccessRate;
LABEL_104:
            if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
              LODWORD(v21) = 0;
            }
            goto LABEL_106;
          }

          v72 += 7;
          BOOL v25 = v73++ > 8;
          if (v25)
          {
            LODWORD(v21) = 0;
            uint64_t v26 = &OBJC_IVAR___AWDCountersIpv6S__rxSuccessRate;
LABEL_106:
            *(_DWORD *)(v3 + *v26) = v21;
            goto LABEL_2;
          }
        }

        uint64_t v26 = &OBJC_IVAR___AWDCountersIpv6S__rxSuccessRate;
LABEL_103:
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
        goto LABEL_104;
      }
    }

    return *(unsigned __int8 *)(a2 + v8) == 0;
  }

LABEL_53:
  return v8;
}

                      sub_1001098F8(a1 + 6800, a3);
                      return 0LL;
                    }

      if (!memcmp(&buf, "CCAEnergyDetect[0x8] [-55dBm-50dBm)", 0x23uLL)) {
        goto LABEL_62;
      }
      p_std::string buf = &buf;
LABEL_60:
      if (!memcmp(p_buf, "CCAEnergyDetect[0x9] [-50dBm-45dBm)", 0x23uLL))
      {
        LODWORD(v26) = sub_1000BE984(4, uint64);
        goto LABEL_63;
      }
    }

    if (sub_1000B55AC(&buf, "CCAEnergyDetect[0xA] [-45dBm-40dBm)"))
    {
      unint64_t v35 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(&buf, "CCAEnergyDetect[0xB] [ >=  -40dBm]"))
    {
      uint64_t v34 = sub_1000BE984(4, uint64);
    }

  if (*(void *)(a1 + 80) && *(void *)(a1 + 88))
  {
    uint64_t v31 = *(dispatch_queue_s **)(v2 + 24);
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 1174405120LL;
    v37[2] = sub_100163A70;
    v37[3] = &unk_1002B4A78;
    v37[4] = v11;
    unsigned int v38 = v10;
    if (v10)
    {
      char v32 = (unint64_t *)&v10->__shared_weak_owners_;
      do
        unsigned int v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }

    uint64_t v34 = *(void **)(a1 + 72);
    uint64_t v39 = v34;
    if (v34) {
      xpc_retain(v34);
    }
    else {
      uint64_t v39 = xpc_null_create();
    }
    std::string::basic_string(&v40, (const std::string *)(a1 + 48));
    unint64_t v35 = *(void **)(a1 + 80);
    if (v35) {
      unint64_t v35 = _Block_copy(v35);
    }
    char v36 = *(dispatch_object_s **)(a1 + 88);
    aBlock = v35;
    char v42 = v36;
    if (v36) {
      dispatch_retain(v36);
    }
    dispatch_group_notify(v9, v31, v37);
    if (v42) {
      dispatch_release(v42);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    xpc_release(v39);
    uint64_t v39 = 0LL;
    if (v38) {
      std::__shared_weak_count::__release_weak(v38);
    }
  }

  dispatch_release(v9);
  if (v53) {
    sub_10000ABAC(v53);
  }
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  xpc_release(v62);
}

void *sub_10007E0C8(void *a1)
{
  a1[8] = a1 + 8;
  a1[9] = a1 + 8;
  a1[10] = 0LL;
  sub_10007E0F8((uint64_t)a1);
  return a1;
}

void sub_10007E0F8(uint64_t a1)
{
  *(void *)(a1 + 4) = 0LL;
  *(_WORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 20) = 0;
  *(_BYTE *)(a1 + 22) = 0;
  *(_BYTE *)(a1 + 24) &= 0xE0u;
  *(_DWORD *)(a1 + 28) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(void *)(a1 + 48) = 0LL;
  *(_BYTE *)(a1 + 56) &= ~1u;
  *(_BYTE *)(a1 + 61) &= ~1u;
  *(_DWORD *)(a1 + 57) = 0;
  sub_1000714B8((uint64_t *)(a1 + 64));
  *(_DWORD *)(a1 + 88) = 0;
}

uint64_t sub_10007E16C(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, int a5)
{
  v10[0] = 0LL;
  sub_100007640((uint64_t)v10, a3);
  sub_1000342C8(a1, a2, v10);
  sub_100006E7C(v10);
  *(void *)a1 = off_1002B08C8;
  *(_DWORD *)(a1 + 136) = a4;
  *(void *)(a1 + 144) = a1 + 144;
  *(void *)(a1 + 152) = a1 + 144;
  *(void *)(a1 + 160) = 0LL;
  *(_DWORD *)(a1 + 168) = a5;
  return a1;
}

void sub_10007E1F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10007E208(int a1, _WORD *a2, uint64_t a3, uint64_t *a4)
{
  if (!(_DWORD)a3) {
    return 0LL;
  }
  while (2)
  {
    sub_10007E0C8(v25);
    int v13 = spinel_datatype_unpack(a2, a3, "d", v8, v9, v10, v11, v12, (uint64_t)&v22);
    if (v13 > 0)
    {
      switch(a1)
      {
        case 0:
          int v14 = sub_10007E568(v22, v21, (uint64_t)v25);
          goto LABEL_9;
        case 1:
          int v14 = sub_10007E780(v22, v21, (uint64_t)v25);
          goto LABEL_9;
        case 2:
          int v14 = sub_10007E930(v22, v21, (uint64_t)v25);
          goto LABEL_9;
        case 3:
          int v14 = sub_10007EC3C(v22, v21, (uint64_t)v25);
          goto LABEL_9;
        case 4:
          int v14 = sub_10007EB3C(v22, v21, (uint64_t)v25);
LABEL_9:
          if (!v14) {
            goto LABEL_10;
          }
          uint64_t v17 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v17)
          {
            if (sub_10015A058(4) && os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string buf = 67109378;
              *(_DWORD *)char v24 = 127;
              *(_WORD *)&v24[4] = 2080;
              *(void *)&v24[6] = "(ret) == 0";
              BOOL v18 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/wpantund/src/ncp-spinel/SpinelNCPTaskGetNetwor"
                    "kTopology.cpp:%d: Requirement Failed (%s)";
              goto LABEL_22;
            }

            goto LABEL_28;
          }

          if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            goto LABEL_28;
          }
          break;
        default:
LABEL_10:
          sub_10007ED70(a4, v25);
          BOOL v15 = a3 >= v13;
          a3 = (a3 - v13);
          if (!v15) {
            __break(0x5515u);
          }
          a2 = (_WORD *)((char *)a2 + v13);
          sub_1000714B8(v26);
          if (!(_DWORD)a3) {
            return 0LL;
          }
          continue;
      }

      goto LABEL_26;
    }

    break;
  }

  uint64_t v17 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v17)
  {
    *(_DWORD *)std::string buf = 67109378;
    *(_DWORD *)char v24 = 102;
    *(_WORD *)&v24[4] = 2080;
    *(void *)&v24[6] = "len > 0";
    BOOL v18 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/wpantund/src/ncp-spinel/SpinelNCPTaskGetNetworkTopology."
          "cpp:%d: Requirement Failed (%s)";
LABEL_22:
    char v19 = v17;
    uint32_t v20 = 18;
    goto LABEL_27;
  }

  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
LABEL_26:
    *(_DWORD *)std::string buf = 136315394;
    *(void *)char v24 = "com.apple.wpantund.ncp";
    *(_WORD *)&v24[8] = 2080;
    *(void *)&v24[10] = "default";
    char v19 = (os_log_s *)&_os_log_default;
    BOOL v18 = "Logging Module is not defined for SubSystem: %s, Category: %s";
    uint32_t v20 = 22;
LABEL_27:
    _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, v18, buf, v20);
  }

void sub_10007E54C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
}

uint64_t sub_10007E568(_WORD *a1, uint64_t a2, uint64_t a3)
{
  char v24 = 0LL;
  sub_10007E0F8(a3);
  *(_DWORD *)a3 = 0;
  uint64_t result = spinel_datatype_unpack(a1, a2, "ESLLCCcCc", v6, v7, v8, v9, v10, (uint64_t)&v24);
  if ((int)result <= 0)
  {
    BOOL v18 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v18)
    {
      char v19 = v18;
      return 1LL;
    }

    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
LABEL_18:
    }
      sub_1001FB53C();
    return 1LL;
  }

  *(void *)(a3 + 4) = *v24;
  *(_BYTE *)(a3 + 24) = (v23 >> 2) & 2 | v23 & 4 | *(_BYTE *)(a3 + 24) & 0xE1 | (4 * v23) & 8 | (16 * (v23 & 1));
  uint64_t v17 = (a2 - result);
  if (a2 >= result)
  {
    if (!(_DWORD)v17) {
      return 0LL;
    }
    if ((int)spinel_datatype_unpack( (_WORD *)((char *)a1 + result),  v17,  "CCCLSS",  v12,  v13,  v14,  v15,  v16,  a3 + 23) > 0)
    {
      uint64_t result = 0LL;
      *(_BYTE *)(a3 + 24) |= 1u;
      *(_BYTE *)(a3 + 44) = *(_BYTE *)(a3 + 44) & 0xFE | v22 & 1;
      return result;
    }

    uint32_t v20 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v20)
    {
      unsigned int v21 = v20;
      if (sub_10015A058(4))
      {
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
          sub_100207424();
        }
      }

      return 1LL;
    }

    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    return 1LL;
  }

  __break(0x5515u);
  return result;
}

uint64_t sub_10007E780(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = 0LL;
  uint64_t v28 = 0LL;
  sub_10007E0F8(a3);
  *(_DWORD *)a3 = 1;
  uint64_t result = spinel_datatype_unpack(a1, a2, "ES", v6, v7, v8, v9, v10, (uint64_t)&v28);
  if ((int)result <= 0)
  {
    unsigned __int8 v23 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v23)
    {
      char v24 = v23;
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    return 1LL;
  }

  *(void *)(a3 + 4) = *v28;
  BOOL v17 = a2 >= result;
  uint64_t v18 = (a2 - result);
  if (v17)
  {
    if (!(_DWORD)v18) {
      return 0LL;
    }
    char v19 = (_WORD *)((char *)a1 + result);
    uint32_t v20 = (uint64_t *)(a3 + 64);
    while (1)
    {
      int v21 = spinel_datatype_unpack(v19, v18, "6", v12, v13, v14, v15, v16, (uint64_t)&v27);
      if (v21 <= 0) {
        break;
      }
      unsigned int v22 = v21;
      uint64_t result = (uint64_t)sub_10007EE24(v20, v27);
      BOOL v17 = v18 >= v22;
      uint64_t v18 = v18 - v22;
      if (!v17) {
        goto LABEL_24;
      }
      char v19 = (_WORD *)((char *)v19 + v22);
      if (!(_DWORD)v18) {
        return 0LL;
      }
    }

    BOOL v25 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v25)
    {
      uint64_t v26 = v25;
      if (sub_10015A058(4))
      {
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
          sub_100207514();
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    return 1LL;
  }

uint64_t sub_10007E930(_WORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v23 = 0LL;
  sub_10007E0F8(a3);
  *(_DWORD *)a3 = 2;
  uint64_t result = spinel_datatype_unpack(a1, a2, "ESLCcCbLLc", v6, v7, v8, v9, v10, (uint64_t)&v23);
  if ((int)result <= 0)
  {
    uint64_t v18 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v18)
    {
      char v19 = v18;
      return 1LL;
    }

    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
LABEL_18:
    }
      sub_1001FB53C();
    return 1LL;
  }

  *(void *)(a3 + 4) = *v23;
  *(_BYTE *)(a3 + 24) = (v22 >> 2) & 2 | v22 & 4 | *(_BYTE *)(a3 + 24) & 0xE1 | (4 * v22) & 8 | (16 * (v22 & 1));
  *(_BYTE *)(a3 + 56) &= ~1u;
  uint64_t v17 = (a2 - result);
  if (a2 >= result)
  {
    if (!(_DWORD)v17) {
      return 0LL;
    }
    if ((int)spinel_datatype_unpack( (_WORD *)((char *)a1 + result),  v17,  "C",  v12,  v13,  v14,  v15,  v16,  a3 + 23) > 0)
    {
      uint64_t result = 0LL;
      *(_BYTE *)(a3 + 24) |= 1u;
      return result;
    }

    uint32_t v20 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v20)
    {
      int v21 = v20;
      if (sub_10015A058(4))
      {
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
          sub_100207604();
        }
      }

      return 1LL;
    }

    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    return 1LL;
  }

  __break(0x5515u);
  return result;
}

uint64_t sub_10007EB3C(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = 0LL;
  sub_10007E0F8(a3);
  *(_DWORD *)a3 = 4;
  if ((int)spinel_datatype_unpack(a1, a2, "ESSScc", v6, v7, v8, v9, v10, (uint64_t)&v14) <= 0)
  {
    uint64_t v12 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v12)
    {
      uint64_t v13 = v12;
      if (sub_10015A058(4))
      {
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          sub_1002076F4();
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    return 1LL;
  }

  else
  {
    uint64_t result = 0LL;
    *(void *)(a3 + 4) = *v14;
  }

  return result;
}

uint64_t sub_10007EC3C(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = 0LL;
  sub_10007E0F8(a3);
  *(_DWORD *)a3 = 3;
  if ((int)spinel_datatype_unpack(a1, a2, "ESCCCCCCb", v6, v7, v8, v9, v10, (uint64_t)&v15) <= 0)
  {
    uint64_t v12 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v12)
    {
      uint64_t v13 = v12;
      if (sub_10015A058(4))
      {
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          sub_10020776C();
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    return 1LL;
  }

  else
  {
    uint64_t result = 0LL;
    *(void *)(a3 + 4) = *v15;
    *(_DWORD *)(a3 + 16) = v14;
    *(_BYTE *)(a3 + 61) &= ~1u;
  }

  return result;
}

void *sub_10007ED70(uint64_t *a1, __int128 *a2)
{
  uint64_t result = sub_100080BEC((uint64_t)a1, 0LL, 0LL, a2);
  uint64_t v4 = *a1;
  *uint64_t result = *a1;
  result[1] = a1;
  *(void *)(v4 + 8) = result;
  *a1 = (uint64_t)result;
  uint64_t v5 = a1[2];
  BOOL v6 = __CFADD__(v5, 1LL);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(0x5500u);
  }
  else {
    a1[2] = v7;
  }
  return result;
}

uint64_t sub_10007EDC0(_WORD *a1, uint64_t a2, uint64_t *a3)
{
  return sub_10007E208(0, a1, a2, a3);
}

uint64_t sub_10007EDD4(_WORD *a1, uint64_t a2, uint64_t *a3)
{
  return sub_10007E208(1, a1, a2, a3);
}

uint64_t sub_10007EDE8(_WORD *a1, uint64_t a2, uint64_t *a3)
{
  return sub_10007E208(2, a1, a2, a3);
}

uint64_t sub_10007EDFC(_WORD *a1, uint64_t a2, uint64_t *a3)
{
  return sub_10007E208(4, a1, a2, a3);
}

uint64_t sub_10007EE10(_WORD *a1, uint64_t a2, uint64_t *a3)
{
  return sub_10007E208(3, a1, a2, a3);
}

void *sub_10007EE24(uint64_t *a1, _OWORD *a2)
{
  uint64_t result = sub_100080D60((uint64_t)a1, 0LL, 0LL, a2);
  uint64_t v4 = *a1;
  *uint64_t result = *a1;
  result[1] = a1;
  *(void *)(v4 + 8) = result;
  *a1 = (uint64_t)result;
  uint64_t v5 = a1[2];
  BOOL v6 = __CFADD__(v5, 1LL);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(0x5500u);
  }
  else {
    a1[2] = v7;
  }
  return result;
}

uint64_t sub_10007EE74(unsigned int a1)
{
  if (a1 > 4) {
    return 0LL;
  }
  else {
    return *(unsigned int *)&aR_1[4 * a1];
  }
}

uint64_t sub_10007EE94( uint64_t a1, unsigned int a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v39 = a3;
  int v11 = *(unsigned __int16 *)(a1 + 8);
  uint64_t result = 3LL;
  if (v11 <= 551)
  {
    if (v11)
    {
      if (v11 != 544) {
        goto LABEL_77;
      }
      goto LABEL_16;
    }

    uint64_t v13 = *(void *)(a1 + 56);
    if (*(_BYTE *)(v13 + 1376))
    {
      if (sub_1000D8DE8(v13) != 2)
      {
        sub_100159FC0(a1, 30.0);
        *(_WORD *)(a1 + 8) = 544;
LABEL_16:
        int v14 = sub_1000D8DE8(*(void *)(a1 + 56));
        if (sub_1000B50E8(v14)
          || (*(unsigned int (**)(void))(**(void **)(a1 + 56) + 160LL))(*(void *)(a1 + 56)))
        {
          if (!sub_100159F84(a1))
          {
            sub_10015A00C(a1);
            uint64_t v15 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
            if (v15)
            {
              uint64_t v16 = v15;
            }

            else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              sub_1001FB53C();
            }

            unsigned int v17 = 1;
            goto LABEL_65;
          }

          return 0LL;
        }

        sub_10015A00C(a1);
        *(_WORD *)(a1 + 8) = 552;
        goto LABEL_24;
      }

      v37.n128_u64[0] = 0LL;
      (*(void (**)(uint64_t, uint64_t, __n128 *))(*(void *)a1 + 32LL))(a1, 4LL, &v37);
    }

    else
    {
      v37.n128_u64[0] = 0LL;
      (*(void (**)(uint64_t, uint64_t, __n128 *))(*(void *)a1 + 32LL))(a1, 3LL, &v37);
    }

    if (v37.n128_u64[0]) {
      (*(void (**)(unint64_t))(*(void *)v37.n128_u64[0] + 8LL))(v37.n128_u64[0]);
    }
    goto LABEL_14;
  }

  if (v11 != 552)
  {
    if (v11 != 559) {
      goto LABEL_77;
    }
    goto LABEL_26;
  }

void sub_10007F480( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18)
{
  if (__p) {
    (*(void (**)(void *))(*(void *)__p + 8LL))(__p);
  }
  sub_10000C178(&a18);
  _Unwind_Resume(a1);
}

void *sub_10007F534@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __s[0] = 0;
  __str[0] = 0;
  switch(*(_DWORD *)a1)
  {
    case 0:
      if ((*(_BYTE *)(a1 + 24) & 1) != 0) {
        snprintf( __str,  0x100uLL,  ", ThreadVersion:%u, Synchronized:%u, CslChannel:%u, CslTimeout: %u, CslPeriod: %u, CslPhase: %u",  *(unsigned __int8 *)(a1 + 23),  *(_BYTE *)(a1 + 44) & 1,  *(unsigned __int8 *)(a1 + 33),  *(_DWORD *)(a1 + 36),  *(unsigned __int16 *)(a1 + 40),  *(unsigned __int16 *)(a1 + 42));
      }
      uint64_t v4 = *(unsigned __int8 *)(a1 + 4);
      uint64_t v5 = *(unsigned __int8 *)(a1 + 5);
      uint64_t v6 = *(unsigned __int8 *)(a1 + 6);
      uint64_t v7 = *(unsigned __int8 *)(a1 + 7);
      if ((*(_BYTE *)(a1 + 24) & 2) != 0) {
        uint64_t v8 = "yes";
      }
      else {
        uint64_t v8 = "no";
      }
      if ((*(_BYTE *)(a1 + 24) & 8) != 0) {
        uint64_t v9 = "yes";
      }
      else {
        uint64_t v9 = "no";
      }
      if ((*(_BYTE *)(a1 + 24) & 4) != 0) {
        uint64_t v10 = "yes";
      }
      else {
        uint64_t v10 = "no";
      }
      if ((*(_BYTE *)(a1 + 24) & 0x10) != 0) {
        int v11 = "yes";
      }
      else {
        int v11 = "no";
      }
      uint64_t v54 = v11;
      unint64_t v55 = __str;
      char v52 = v9;
      unsigned int v53 = v10;
      uint64_t v50 = *(unsigned int *)(a1 + 16);
      char v51 = v8;
      uint64_t v48 = *(char *)(a1 + 22);
      uint64_t v49 = *(unsigned int *)(a1 + 28);
      uint64_t v46 = *(unsigned __int8 *)(a1 + 20);
      uint64_t v47 = *(char *)(a1 + 21);
      uint64_t v44 = *(unsigned __int16 *)(a1 + 12);
      uint64_t v45 = *(unsigned __int8 *)(a1 + 32);
      uint64_t v42 = *(unsigned __int8 *)(a1 + 10);
      uint64_t v43 = *(unsigned __int8 *)(a1 + 11);
      uint64_t v40 = *(unsigned __int8 *)(a1 + 8);
      uint64_t v41 = *(unsigned __int8 *)(a1 + 9);
      uint64_t v12 = "%02X%02X%02X%02X%02X%02X%02X%02X, RLOC16:%04x, NetDataVer:%d, LQIn:%d, AveRssi:%d, LastRssi:%d, Timeout:%u, "
            "Age:%u, RxOnIdle:%s, FTD:%s, SecDataReq:%s, FullNetData:%s%s";
      goto LABEL_59;
    case 1:
      if (*(void *)(a1 + 80)) {
        uint64_t v13 = ", IPv6Addrs:[";
      }
      else {
        uint64_t v13 = "";
      }
      unsigned int v14 = snprintf( __s,  0x320uLL,  "%02X%02X%02X%02X%02X%02X%02X%02X, RLOC16:%04x%s",  *(unsigned __int8 *)(a1 + 4),  *(unsigned __int8 *)(a1 + 5),  *(unsigned __int8 *)(a1 + 6),  *(unsigned __int8 *)(a1 + 7),  *(unsigned __int8 *)(a1 + 8),  *(unsigned __int8 *)(a1 + 9),  *(unsigned __int8 *)(a1 + 10),  *(unsigned __int8 *)(a1 + 11),  *(unsigned __int16 *)(a1 + 12),  v13);
      if (v14 < 0x320)
      {
        size_t v15 = 800LL - v14;
        uint64_t v16 = &__s[v14];
        uint64_t v17 = *(void *)(a1 + 72);
        if (v17 == a1 + 64)
        {
LABEL_32:
          if (!*(void *)(a1 + 80)) {
            return sub_10000AC00(a2, __s);
          }
          unsigned int v21 = snprintf(v16, v15, "]");
          if ((v21 & 0x80000000) == 0 && v15 > v21) {
            return sub_10000AC00(a2, __s);
          }
          unsigned __int8 v22 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v22)
          {
            return sub_10000AC00(a2, __s);
          }

          if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            return sub_10000AC00(a2, __s);
          }
        }

        else
        {
          uint64_t v18 = "";
          while (1)
          {
            sub_100108154((void *)(v17 + 16), __p);
            if (v58 >= 0) {
              char v19 = __p;
            }
            else {
              char v19 = (void **)__p[0];
            }
            unsigned int v20 = snprintf(v16, v15, "%s%s", v18, (const char *)v19);
            if (v58 < 0) {
              operator delete(__p[0]);
            }
            if ((v20 & 0x80000000) != 0 || v15 <= v20) {
              break;
            }
            v16 += v20;
            v15 -= v20;
            uint64_t v17 = *(void *)(v17 + 8);
            uint64_t v18 = ", ";
            if (v17 == a1 + 64) {
              goto LABEL_32;
            }
          }

          uint64_t v39 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v39)
          {
            return sub_10000AC00(a2, __s);
          }

          if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            return sub_10000AC00(a2, __s);
          }
        }

        sub_1001FB53C();
        return sub_10000AC00(a2, __s);
      }

      __n128 v37 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v37)
      {
        uint64_t v38 = v37;
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }

      return sub_10000AC00(a2, __s);
    case 2:
      if ((*(_BYTE *)(a1 + 24) & 1) != 0) {
        snprintf(__str, 0x100uLL, ", ThreadVersion:%u", *(unsigned __int8 *)(a1 + 23));
      }
      uint64_t v4 = *(unsigned __int8 *)(a1 + 4);
      uint64_t v5 = *(unsigned __int8 *)(a1 + 5);
      uint64_t v6 = *(unsigned __int8 *)(a1 + 6);
      uint64_t v7 = *(unsigned __int8 *)(a1 + 7);
      uint64_t v23 = "yes";
      if ((*(_BYTE *)(a1 + 56) & 1) != 0) {
        int v24 = "yes";
      }
      else {
        int v24 = "no";
      }
      if ((*(_BYTE *)(a1 + 24) & 2) != 0) {
        BOOL v25 = "yes";
      }
      else {
        BOOL v25 = "no";
      }
      if ((*(_BYTE *)(a1 + 24) & 8) != 0) {
        uint64_t v26 = "yes";
      }
      else {
        uint64_t v26 = "no";
      }
      if ((*(_BYTE *)(a1 + 24) & 4) != 0) {
        int v27 = "yes";
      }
      else {
        int v27 = "no";
      }
      if ((*(_BYTE *)(a1 + 24) & 0x10) == 0) {
        uint64_t v23 = "no";
      }
      unint64_t v55 = (char *)v23;
      char v56 = __str;
      unsigned int v53 = v26;
      uint64_t v54 = v27;
      char v51 = v24;
      char v52 = v25;
      uint64_t v49 = *(unsigned int *)(a1 + 48);
      uint64_t v50 = *(unsigned int *)(a1 + 52);
      uint64_t v47 = *(char *)(a1 + 22);
      uint64_t v48 = *(unsigned int *)(a1 + 16);
      uint64_t v45 = *(unsigned __int8 *)(a1 + 20);
      uint64_t v46 = *(char *)(a1 + 21);
      uint64_t v43 = *(unsigned __int8 *)(a1 + 11);
      uint64_t v44 = *(unsigned __int16 *)(a1 + 12);
      uint64_t v41 = *(unsigned __int8 *)(a1 + 9);
      uint64_t v42 = *(unsigned __int8 *)(a1 + 10);
      uint64_t v40 = *(unsigned __int8 *)(a1 + 8);
      uint64_t v12 = "%02X%02X%02X%02X%02X%02X%02X%02X, RLOC16:%04x, LQIn:%d, AveRssi:%d, LastRssi:%d, Age:%u, LinkFC:%u, MleFC:%u"
            ", IsChild:%s, RxOnIdle:%s, FTD:%s, SecDataReq:%s, FullNetData:%s%s";
      goto LABEL_59;
    case 3:
      uint64_t v4 = *(unsigned __int8 *)(a1 + 4);
      uint64_t v5 = *(unsigned __int8 *)(a1 + 5);
      uint64_t v6 = *(unsigned __int8 *)(a1 + 6);
      uint64_t v7 = *(unsigned __int8 *)(a1 + 7);
      uint64_t v28 = *(unsigned __int8 *)(a1 + 8);
      uint64_t v29 = *(unsigned __int8 *)(a1 + 9);
      uint64_t v30 = *(unsigned __int8 *)(a1 + 10);
      uint64_t v31 = *(unsigned __int8 *)(a1 + 11);
      uint64_t v32 = *(unsigned __int16 *)(a1 + 12);
      uint64_t v33 = *(unsigned __int8 *)(a1 + 57);
      uint64_t v34 = *(unsigned __int8 *)(a1 + 58);
      unint64_t v35 = "yes";
      if ((*(_BYTE *)(a1 + 61) & 1) == 0) {
        unint64_t v35 = "no";
      }
      uint64_t v50 = *(unsigned int *)(a1 + 16);
      char v51 = v35;
      uint64_t v48 = *(unsigned __int8 *)(a1 + 20);
      uint64_t v49 = *(unsigned __int8 *)(a1 + 60);
      uint64_t v46 = v34;
      uint64_t v47 = *(unsigned __int8 *)(a1 + 59);
      uint64_t v44 = v32;
      uint64_t v45 = v33;
      uint64_t v42 = v30;
      uint64_t v43 = v31;
      uint64_t v40 = v28;
      uint64_t v41 = v29;
      uint64_t v12 = "%02X%02X%02X%02X%02X%02X%02X%02X, RLOC16:%04x, RouterId:%d, NextHop:%d, PathCost:%d, LQIn:%d, LQOut:%d, Age:%d, LinkEst:%s";
LABEL_59:
      snprintf( __s,  0x320uLL,  v12,  v4,  v5,  v6,  v7,  v40,  v41,  v42,  v43,  v44,  v45,  v46,  v47,  v48,  v49,  v50,  v51,  v52,  v53,  v54,  v55,  v56);
      return sub_10000AC00(a2, __s);
    case 4:
      snprintf( __s,  0x320uLL,  "%02X%02X%02X%02X%02X%02X%02X%02X, RLOC16:%04x, FrameErrRate:%.2lf%%, MsgErrorRate:%.2lf%%, AveRssi:%d, LastRssi:%d, ",  *(unsigned __int8 *)(a1 + 4),  *(unsigned __int8 *)(a1 + 5),  *(unsigned __int8 *)(a1 + 6));
      return sub_10000AC00(a2, __s);
    default:
      __s[0] = 0;
      return sub_10000AC00(a2, __s);
  }

void *sub_10007FB18(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100080DC4((uint64_t)a1, 0LL, 0LL, a2);
  uint64_t v4 = *a1;
  *uint64_t result = *a1;
  result[1] = a1;
  *(void *)(v4 + 8) = result;
  *a1 = (uint64_t)result;
  uint64_t v5 = a1[2];
  BOOL v6 = __CFADD__(v5, 1LL);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(0x5500u);
  }
  else {
    a1[2] = v7;
  }
  return result;
}

void sub_10007FB68(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 8) = 0LL;
  *(void *)a2 = a2 + 8;
  unsigned int v3 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 != 3)
  {
    unint64_t v18 = __rev16(*(unsigned __int16 *)(a1 + 10)) | ((unint64_t)*(unsigned __int8 *)(a1 + 9) << 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 8) << 24) | ((unint64_t)*(unsigned __int8 *)(a1 + 7) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 6) << 40) | ((unint64_t)*(unsigned __int8 *)(a1 + 5) << 48) | ((unint64_t)*(unsigned __int8 *)(a1 + 4) << 56);
    if (v3 <= 4 && ((1 << v3) & 0x15) != 0)
    {
      sub_1000804D8(&__p, "ExtAddress", (uint64_t *)&v18);
      sub_100080E28((uint64_t **)a2, (const void **)&__p, &__p);
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
      }
      if (v20 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      sub_100080538(&__p, "RLOC16", (_WORD *)(a1 + 12));
      sub_100080E28((uint64_t **)a2, (const void **)&__p, &__p);
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
      }
      if (v20 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      sub_10008059C(&__p, "AverageRssi", (_BYTE *)(a1 + 21));
      sub_100080E28((uint64_t **)a2, (const void **)&__p, &__p);
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
      }
      if (v20 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      sub_100080600(&__p, "LastRssi", (_BYTE *)(a1 + 22));
      sub_100080E28((uint64_t **)a2, (const void **)&__p, &__p);
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
      }
      if (v20 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      unsigned int v3 = *(_DWORD *)a1;
    }

    if ((v3 | 2) == 2)
    {
      sub_100080664(&__p, "LinkQualityIn", (_BYTE *)(a1 + 20));
      sub_100080E28((uint64_t **)a2, (const void **)&__p, &__p);
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
      }
      if (v20 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      sub_1000806C8(&__p, "Age", (_DWORD *)(a1 + 16));
      sub_100080E28((uint64_t **)a2, (const void **)&__p, &__p);
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
      }
      if (v20 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      v15.n128_u8[0] = (*(_BYTE *)(a1 + 24) & 2) != 0;
      sub_10008072C(&__p, "RxOnWhenIdle", &v15);
      sub_100080E28((uint64_t **)a2, (const void **)&__p, &__p);
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
      }
      if (v20 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      v15.n128_u8[0] = (*(_BYTE *)(a1 + 24) & 8) != 0;
      sub_100080790(&__p, "FullThreadDevice", &v15);
      sub_100080E28((uint64_t **)a2, (const void **)&__p, &__p);
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
      }
      if (v20 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      v15.n128_u8[0] = (*(_BYTE *)(a1 + 24) & 4) != 0;
      sub_1000807F4(&__p, "SecureDataRequest", &v15);
      sub_100080E28((uint64_t **)a2, (const void **)&__p, &__p);
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
      }
      if (v20 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      v15.n128_u8[0] = (*(_BYTE *)(a1 + 24) & 0x10) != 0;
      sub_100080858(&__p, "FullNetworkData", &v15);
      sub_100080E28((uint64_t **)a2, (const void **)&__p, &__p);
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
      }
      if (v20 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      unsigned int v3 = *(_DWORD *)a1;
    }

    if (!v3)
    {
      sub_1000808BC(&__p, "Timeout", (_DWORD *)(a1 + 28));
      sub_100080E28((uint64_t **)a2, (const void **)&__p, &__p);
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
      }
      if (v20 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      sub_100080920(&__p, "NetworkDataVersion", (_BYTE *)(a1 + 32));
      sub_100080E28((uint64_t **)a2, (const void **)&__p, &__p);
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
      }
      if (v20 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      unsigned int v3 = *(_DWORD *)a1;
    }

    if (v3 == 2)
    {
      sub_100080984(&__p, "LinkFrameCounter", (_DWORD *)(a1 + 48));
      sub_100080E28((uint64_t **)a2, (const void **)&__p, &__p);
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
      }
      if (v20 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      sub_1000809E8(&__p, "MleFrameCounter", (_DWORD *)(a1 + 52));
      sub_100080E28((uint64_t **)a2, (const void **)&__p, &__p);
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
      }
      if (v20 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      v15.n128_u8[0] = *(_BYTE *)(a1 + 56) & 1;
      sub_100080A4C(&__p, "IsChild", &v15);
      sub_100080E28((uint64_t **)a2, (const void **)&__p, &__p);
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
      }
      if (v20 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      unsigned int v3 = *(_DWORD *)a1;
    }

    if (v3 == 4)
    {
      sub_100080AB0(&__p, "FrameErrorRate", (_WORD *)(a1 + 88));
      sub_100080E28((uint64_t **)a2, (const void **)&__p, &__p);
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
      }
      if (v20 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      sub_100080B14(&__p, "MessageErrorRate", (_WORD *)(a1 + 90));
      sub_100080E28((uint64_t **)a2, (const void **)&__p, &__p);
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
      }
      if (v20 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      unsigned int v3 = *(_DWORD *)a1;
    }

    if (v3 == 1)
    {
      sub_1000804D8(&__p, "ExtAddress", (uint64_t *)&v18);
      sub_100080E28((uint64_t **)a2, (const void **)&__p, &__p);
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
      }
      if (v20 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      __p.n128_u8[0] = 0;
      if (!*(void *)(a1 + 80) || (uint64_t v5 = a1 + 64, v6 = *(void *)(a1 + 72), v6 == a1 + 64))
      {
LABEL_97:
        sub_10000AC00(v13, (char *)&__p);
        sub_100080B78(&v15, "IPv6Addresses", (uint64_t)v13);
        sub_100080E28((uint64_t **)a2, (const void **)&v15, &v15);
        if (v17) {
          (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
        }
        if (v16 < 0) {
          operator delete((void *)v15.n128_u64[0]);
        }
        if (v14 < 0) {
          operator delete(v13[0]);
        }
      }

      else
      {
        uint64_t v7 = "";
        p_p = &__p;
        size_t v9 = 800LL;
        while (1)
        {
          sub_100108154((void *)(v6 + 16), &v15);
          if (v16 >= 0) {
            uint64_t v10 = &v15;
          }
          else {
            uint64_t v10 = (__n128 *)v15.n128_u64[0];
          }
          unsigned int v11 = snprintf((char *)p_p, v9, "%s%s", v7, (const char *)v10);
          if (v16 < 0) {
            operator delete((void *)v15.n128_u64[0]);
          }
          if ((v11 & 0x80000000) != 0 || v9 <= v11) {
            break;
          }
          p_p = (__n128 *)((char *)p_p + v11);
          v9 -= v11;
          uint64_t v6 = *(void *)(v6 + 8);
          uint64_t v7 = ", ";
          if (v6 == v5) {
            goto LABEL_97;
          }
        }

        uint64_t v12 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v12)
        {
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FB53C();
        }
      }
    }
  }

void sub_100080348( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23)
{
}

uint64_t sub_100080430(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return a1;
}

uint64_t sub_100080474(void *a1)
{
  *a1 = off_1002B08C8;
  sub_100071430(a1 + 18);
  return sub_100034374((uint64_t)a1);
}

void sub_1000804A4(void *a1)
{
  *a1 = off_1002B08C8;
  sub_100071430(a1 + 18);
  uint64_t v2 = (void *)sub_100034374((uint64_t)a1);
  operator delete(v2);
}

void *sub_1000804D8(void *a1, char *a2, uint64_t *a3)
{
  uint64_t v5 = operator new(0x10uLL);
  uint64_t v6 = *a3;
  *uint64_t v5 = &off_1002AE088;
  v5[1] = v6;
  a1[3] = v5;
  return a1;
}

void sub_10008051C(_Unwind_Exception *exception_object)
{
}

void *sub_100080538(void *a1, char *a2, _WORD *a3)
{
  uint64_t v5 = operator new(0x10uLL);
  *(void *)uint64_t v5 = &off_1002AE0D0;
  v5[4] = *a3;
  a1[3] = v5;
  return a1;
}

void sub_100080580(_Unwind_Exception *exception_object)
{
}

void *sub_10008059C(void *a1, char *a2, _BYTE *a3)
{
  uint64_t v5 = operator new(0x10uLL);
  *(void *)uint64_t v5 = &off_1002B01F0;
  _BYTE v5[8] = *a3;
  a1[3] = v5;
  return a1;
}

void sub_1000805E4(_Unwind_Exception *exception_object)
{
}

void *sub_100080600(void *a1, char *a2, _BYTE *a3)
{
  uint64_t v5 = operator new(0x10uLL);
  *(void *)uint64_t v5 = &off_1002B01F0;
  _BYTE v5[8] = *a3;
  a1[3] = v5;
  return a1;
}

void sub_100080648(_Unwind_Exception *exception_object)
{
}

void *sub_100080664(void *a1, char *a2, _BYTE *a3)
{
  uint64_t v5 = operator new(0x10uLL);
  *(void *)uint64_t v5 = &off_1002AE118;
  _BYTE v5[8] = *a3;
  a1[3] = v5;
  return a1;
}

void sub_1000806AC(_Unwind_Exception *exception_object)
{
}

void *sub_1000806C8(void *a1, char *a2, _DWORD *a3)
{
  uint64_t v5 = operator new(0x10uLL);
  *(void *)uint64_t v5 = &off_1002AE1C8;
  v5[2] = *a3;
  a1[3] = v5;
  return a1;
}

void sub_100080710(_Unwind_Exception *exception_object)
{
}

void *sub_10008072C(void *a1, char *a2, _BYTE *a3)
{
  uint64_t v5 = operator new(0x10uLL);
  *(void *)uint64_t v5 = &off_1002AEA00;
  _BYTE v5[8] = *a3;
  a1[3] = v5;
  return a1;
}

void sub_100080774(_Unwind_Exception *exception_object)
{
}

void *sub_100080790(void *a1, char *a2, _BYTE *a3)
{
  uint64_t v5 = operator new(0x10uLL);
  *(void *)uint64_t v5 = &off_1002AEA00;
  _BYTE v5[8] = *a3;
  a1[3] = v5;
  return a1;
}

void sub_1000807D8(_Unwind_Exception *exception_object)
{
}

void *sub_1000807F4(void *a1, char *a2, _BYTE *a3)
{
  uint64_t v5 = operator new(0x10uLL);
  *(void *)uint64_t v5 = &off_1002AEA00;
  _BYTE v5[8] = *a3;
  a1[3] = v5;
  return a1;
}

void sub_10008083C(_Unwind_Exception *exception_object)
{
}

void *sub_100080858(void *a1, char *a2, _BYTE *a3)
{
  uint64_t v5 = operator new(0x10uLL);
  *(void *)uint64_t v5 = &off_1002AEA00;
  _BYTE v5[8] = *a3;
  a1[3] = v5;
  return a1;
}

void sub_1000808A0(_Unwind_Exception *exception_object)
{
}

void *sub_1000808BC(void *a1, char *a2, _DWORD *a3)
{
  uint64_t v5 = operator new(0x10uLL);
  *(void *)uint64_t v5 = &off_1002AE1C8;
  v5[2] = *a3;
  a1[3] = v5;
  return a1;
}

void sub_100080904(_Unwind_Exception *exception_object)
{
}

void *sub_100080920(void *a1, char *a2, _BYTE *a3)
{
  uint64_t v5 = operator new(0x10uLL);
  *(void *)uint64_t v5 = &off_1002AE118;
  _BYTE v5[8] = *a3;
  a1[3] = v5;
  return a1;
}

void sub_100080968(_Unwind_Exception *exception_object)
{
}

void *sub_100080984(void *a1, char *a2, _DWORD *a3)
{
  uint64_t v5 = operator new(0x10uLL);
  *(void *)uint64_t v5 = &off_1002AE1C8;
  v5[2] = *a3;
  a1[3] = v5;
  return a1;
}

void sub_1000809CC(_Unwind_Exception *exception_object)
{
}

void *sub_1000809E8(void *a1, char *a2, _DWORD *a3)
{
  uint64_t v5 = operator new(0x10uLL);
  *(void *)uint64_t v5 = &off_1002AE1C8;
  v5[2] = *a3;
  a1[3] = v5;
  return a1;
}

void sub_100080A30(_Unwind_Exception *exception_object)
{
}

void *sub_100080A4C(void *a1, char *a2, _BYTE *a3)
{
  uint64_t v5 = operator new(0x10uLL);
  *(void *)uint64_t v5 = &off_1002AEA00;
  _BYTE v5[8] = *a3;
  a1[3] = v5;
  return a1;
}

void sub_100080A94(_Unwind_Exception *exception_object)
{
}

void *sub_100080AB0(void *a1, char *a2, _WORD *a3)
{
  uint64_t v5 = operator new(0x10uLL);
  *(void *)uint64_t v5 = &off_1002AE0D0;
  v5[4] = *a3;
  a1[3] = v5;
  return a1;
}

void sub_100080AF8(_Unwind_Exception *exception_object)
{
}

void *sub_100080B14(void *a1, char *a2, _WORD *a3)
{
  uint64_t v5 = operator new(0x10uLL);
  *(void *)uint64_t v5 = &off_1002AE0D0;
  v5[4] = *a3;
  a1[3] = v5;
  return a1;
}

void sub_100080B5C(_Unwind_Exception *exception_object)
{
}

void *sub_100080B78(void *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v5 = &off_1002AE030;
  *(_OWORD *)(v5 + 8) = *(_OWORD *)a3;
  *((void *)v5 + 3) = *(void *)(a3 + 16);
  *(void *)a3 = 0LL;
  *(void *)(a3 + 8) = 0LL;
  *(void *)(a3 + 16) = 0LL;
  a1[3] = v5;
  return a1;
}

void sub_100080BD0(_Unwind_Exception *exception_object)
{
}

void *sub_100080BEC(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v7 = a1 + 16;
  uint64_t v12 = 1LL;
  uint64_t v8 = operator new(0x70uLL);
  uint64_t v13 = v8;
  *uint64_t v8 = a2;
  v8[1] = a3;
  sub_100080C74(v7, (uint64_t)(v8 + 2), a4);
  size_t v9 = v13;
  uint64_t v13 = 0LL;
  sub_100080D2C((uint64_t)v11);
  return v9;
}

void sub_100080C60(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_100080C74(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5 = *a3;
  __int128 v6 = a3[1];
  __int128 v7 = a3[2];
  *(_OWORD *)(a2 + 46) = *(__int128 *)((char *)a3 + 46);
  *(_OWORD *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 32) = v7;
  *(_OWORD *)a2 = v5;
  uint64_t result = sub_100080CC0((uint64_t *)(a2 + 64), (uint64_t)(a3 + 4));
  *(_DWORD *)(a2 + 88) = *((_DWORD *)a3 + 22);
  return result;
}

uint64_t *sub_100080CC0(uint64_t *a1, uint64_t a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
    sub_10007EE24(a1, (_OWORD *)(i + 16));
  return a1;
}

void sub_100080D18(_Unwind_Exception *a1)
{
}

void sub_100080D2C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    if (*(void *)(a1 + 8) >= 0x24924924924924AuLL) {
      __break(0x550Cu);
    }
    else {
      operator delete(v2);
    }
  }

void *sub_100080D60(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v10 = 1LL;
  __int128 v7 = operator new(0x20uLL);
  *__int128 v7 = a2;
  v7[1] = a3;
  *((_OWORD *)v7 + 1) = *a4;
  uint64_t v11 = 0LL;
  sub_100010990((uint64_t)v9);
  return v7;
}

void *sub_100080DC4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v10 = 1LL;
  __int128 v7 = operator new(0x28uLL);
  *__int128 v7 = a2;
  v7[1] = a3;
  sub_100044D20(v7 + 2, a4);
  uint64_t v11 = 0LL;
  sub_10000C7B0((uint64_t)v9);
  return v7;
}

void *sub_100080E28(uint64_t **a1, const void **a2, __n128 *a3)
{
  __int128 v5 = sub_10000AE50((uint64_t)a1, &v10, a2);
  __int128 v6 = (void *)*v5;
  if (!*v5)
  {
    __int128 v7 = (void **)v5;
    sub_100080EB8((uint64_t)a1, a3, (uint64_t)v9);
    sub_10000AF70(a1, v10, v7, (void *)v9[0]);
    __int128 v6 = v9[0];
    v9[0] = 0LL;
    sub_10000D3A4(v9, 0LL);
  }

  return v6;
}

__n128 sub_100080EB8@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  __int128 v6 = (__n128 *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  __n128 result = *a2;
  a2->n128_u64[0] = 0LL;
  a2->n128_u64[1] = 0LL;
  unint64_t v8 = a2[1].n128_u64[0];
  unint64_t v9 = a2[1].n128_u64[1];
  a2[1].n128_u64[0] = 0LL;
  a2[1].n128_u64[1] = 0LL;
  v6[2] = result;
  v6[3].n128_u64[0] = v8;
  v6[3].n128_u64[1] = v9;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

size_t sub_100080F10(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v5 timeIntervalSince1970];
  __int128 v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSince1970:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSince1970:"));

  __int128 v7 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
  -[NSDateFormatter setDateFormat:](v7, "setDateFormat:", @"YYYY-MM-dd'T'HH:mm:ss.SSS");
  unint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(-[NSDateFormatter stringFromDate:](v7, "stringFromDate:", v6));
  unint64_t v9 = objc_alloc(&OBJC_CLASS___NSString);
  uint64_t v10 = -[NSString initWithFormat:](v9, "initWithFormat:", @"%@%s%s%@", @"fillmore_", a3, "_", v8);
  uint64_t v11 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@%@",  @"/var/mobile/Library/Logs/CrashReporter/CoreThread/crashes/",  v10);
  uint64_t v12 = objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  uint64_t v13 = (void *)qword_1002C9FA8;
  qword_1002C9FA8 = v12;

  unsigned __int8 v22 = 0;
  unsigned int v14 = [(id)qword_1002C9FA8 fileExistsAtPath:@"/var/mobile/Library/Logs/CrashReporter/CoreThread/crashes/" isDirectory:&v22];
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109376;
    *(_DWORD *)int v24 = v14;
    *(_WORD *)&v24[4] = 1024;
    *(_DWORD *)&v24[6] = v22;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "Directory Existence, isFile: %d, isDir: %d",  buf,  0xEu);
  }

  if (!v22)
  {
    id v21 = 0LL;
    [(id)qword_1002C9FA8 createDirectoryAtPath:@"/var/mobile/Library/Logs/CrashReporter/CoreThread/crashes/" withIntermediateDirectories:1 attributes:0 error:&v21];
    char v19 = (NSString *)v21;
    if (v19)
    {
      char v20 = v19;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 138412546;
        *(void *)int v24 = @"/var/mobile/Library/Logs/CrashReporter/CoreThread/crashes/";
        *(_WORD *)&v24[8] = 2112;
        BOOL v25 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "error creating directory %@: %@",  buf,  0x16u);
      }

      uint64_t v18 = 0LL;
      goto LABEL_15;
    }
  }

  __n128 v15 = v11;
  char v16 = -[NSString cStringUsingEncoding:](v15, "cStringUsingEncoding:", 4LL);
  size_t result = strlen(v16);
  if (result != -1LL)
  {
    memcpy(a1, v16, result + 1);
    uint64_t v18 = 1LL;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 138412546;
      *(void *)int v24 = v15;
      *(_WORD *)&v24[8] = 2112;
      BOOL v25 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "New created file - file_path:%@, fileName: %@",  buf,  0x16u);
    }

void sub_100081248(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000812AC(const char *a1, const void *a2, unsigned int a3)
{
  uint64_t v5 = fopen(a1, "a+b");
  if (v5)
  {
    __int128 v6 = v5;
    unsigned __int16 v7 = fwrite(a2, 1uLL, a3, v5);
    fflush(v6);
    fclose(v6);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)unint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "File Open Error", v9, 2u);
    }

    return 0;
  }

  return v7;
}

uint64_t sub_100081364(std::string *a1)
{
  uint64_t v2 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@",  @"/var/mobile/Library/Logs/CrashReporter/CoreThread/sniffer/");
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 138412546;
    *(void *)char v16 = @"/var/mobile/Library/Logs/CrashReporter/CoreThread/sniffer/";
    *(_WORD *)&v16[8] = 2112;
    uint64_t v17 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "SNIFFER_TLF::creating directory path %@: %@",  buf,  0x16u);
  }

  uint64_t v3 = objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  uint64_t v4 = (void *)qword_1002C9FA8;
  qword_1002C9FA8 = v3;

  unsigned __int8 v14 = 0;
  unsigned int v5 = [(id)qword_1002C9FA8 fileExistsAtPath:@"/var/mobile/Library/Logs/CrashReporter/CoreThread/sniffer/" isDirectory:&v14];
  if (v14)
  {
    unsigned int v6 = v5;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 67109376;
      *(_DWORD *)char v16 = v6;
      *(_WORD *)&v16[4] = 1024;
      *(_DWORD *)&v16[6] = v14;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "SNIFFER_TLF::Sniffer: Directory exists, isFile: %d, isDir: %d",  buf,  0xEu);
    }

    goto LABEL_10;
  }

  id v13 = 0LL;
  [(id)qword_1002C9FA8 createDirectoryAtPath:v2 withIntermediateDirectories:1 attributes:0 error:&v13];
  unsigned __int16 v7 = (NSString *)v13;
  if (!v7)
  {
LABEL_10:
    if ((char)a1->__r_.__value_.__s.__size_ < 0)
    {
      *a1->__r_.__value_.__l.__data_ = 0;
      a1->__r_.__value_.__l.__size_ = 0LL;
    }

    else
    {
      a1->__r_.__value_.__s.__data_[0] = 0;
      a1->__r_.__value_.__s.__size_ = 0;
    }

    uint64_t v10 = v2;
    std::string::assign(a1, -[NSString cStringUsingEncoding:](v10, "cStringUsingEncoding:", 4LL));
    uint64_t v9 = 1LL;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      if ((a1->__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v11 = a1;
      }
      else {
        uint64_t v11 = (std::string *)a1->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 138412802;
      *(void *)char v16 = @"/var/mobile/Library/Logs/CrashReporter/CoreThread/sniffer/";
      *(_WORD *)&v16[8] = 2112;
      uint64_t v17 = v10;
      __int16 v18 = 2080;
      char v19 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "SNIFFER_TLF::directory path %@: %@ : %s",  buf,  0x20u);
    }

    goto LABEL_18;
  }

  unint64_t v8 = v7;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 138412546;
    *(void *)char v16 = @"/var/mobile/Library/Logs/CrashReporter/CoreThread/sniffer/";
    *(_WORD *)&v16[8] = 2112;
    uint64_t v17 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "SNIFFER_TLF::sniffer: error creating directory %@: %@",  buf,  0x16u);
  }

  uint64_t v9 = 0LL;
LABEL_18:

  return v9;
}

void sub_100081634(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100081658(std::string *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v2 timeIntervalSince1970];
  id v7 = (id)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSince1970:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSince1970:"));

  uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
  -[NSDateFormatter setDateFormat:](v3, "setDateFormat:", @"YYYY-MM-dd'T'HH:mm:ss.SSS");
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[NSDateFormatter stringFromDate:](v3, "stringFromDate:", v7));
  unsigned int v5 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:", @"%@%s%@%s", @"/var/mobile/Library/Logs/CrashReporter/CoreThread/sniffer/", "sniffer_logs_", v4, ".pcapng");
  unsigned int v6 = -[NSString cStringUsingEncoding:](v5, "cStringUsingEncoding:", 4LL);
  if ((char)a1->__r_.__value_.__s.__size_ < 0)
  {
    *a1->__r_.__value_.__l.__data_ = 0;
    a1->__r_.__value_.__l.__size_ = 0LL;
  }

  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1->__r_.__value_.__s.__size_ = 0;
  }

  std::string::assign(a1, v6);
}

void sub_100081768( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

void sub_1000817B0()
{
  v0 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:", @"%@%s", @"/var/mobile/Library/Logs/CrashReporter/CoreThread/sniffer/", "sniffer_logs.pcapng");
  uint64_t v1 = -[NSString cStringUsingEncoding:](v0, "cStringUsingEncoding:", 4LL);
  sub_10000AC00(v5, v1);
  if ((v7.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v2 = &v7;
  }
  else {
    uint64_t v2 = (std::string *)v7.__r_.__value_.__r.__words[0];
  }
  sub_10000AC00(__p, (char *)v2);
  sub_10016B0B0((const char *)v5, 0LL, (int *)buf);
  if (*(_DWORD *)buf < 2u)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v9 = v1;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "SNIFFER_TLF::backup_current_sniffer_file sfile[%s] does not exist ",  buf,  0xCu);
    }
  }

  else
  {
    sub_10016E1A0((uint64_t)v5, (uint64_t)__p, 0LL);
  }

  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_100081924( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }

  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10008198C(std::string *a1)
{
  uint64_t v2 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@",  @"/var/db/com.apple.threadradiod/");
  uint64_t v3 = objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  char v4 = (void *)qword_1002C9FA8;
  qword_1002C9FA8 = v3;

  unsigned __int8 v12 = 0;
  unsigned int v5 = [(id)qword_1002C9FA8 fileExistsAtPath:@"/var/db/com.apple.threadradiod/" isDirectory:&v12];
  if (v12)
  {
    unsigned int v6 = v5;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 67109376;
      *(_DWORD *)unsigned __int8 v14 = v6;
      *(_WORD *)&v14[4] = 1024;
      *(_DWORD *)&v14[6] = v12;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "Settings: Directory exists, isFile: %d, isDir: %d",  buf,  0xEu);
    }

    goto LABEL_8;
  }

  id v11 = 0LL;
  [(id)qword_1002C9FA8 createDirectoryAtPath:v2 withIntermediateDirectories:1 attributes:0 error:&v11];
  id v7 = v11;
  if (!v7)
  {
LABEL_8:
    if ((char)a1->__r_.__value_.__s.__size_ < 0)
    {
      *a1->__r_.__value_.__l.__data_ = 0;
      a1->__r_.__value_.__l.__size_ = 0LL;
    }

    else
    {
      a1->__r_.__value_.__s.__data_[0] = 0;
      a1->__r_.__value_.__s.__size_ = 0;
    }

    std::string::assign(a1, -[NSString cStringUsingEncoding:](v2, "cStringUsingEncoding:", 4LL));
    uint64_t v9 = 1LL;
    goto LABEL_12;
  }

  unint64_t v8 = v7;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 138412546;
    *(void *)unsigned __int8 v14 = @"/var/db/com.apple.threadradiod/";
    *(_WORD *)&v14[8] = 2112;
    __n128 v15 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "Settings: error creating directory %@: %@",  buf,  0x16u);
  }

  uint64_t v9 = 0LL;
LABEL_12:

  return v9;
}

void sub_100081B94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100081BB8(void *a1)
{
  id v1 = a1;
  memset(&v66, 0, sizeof(v66));
  std::string::append(&v66, "AWDFlagstoneEngagementMetrics:: ");
  if ([v1 hasHeader])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 header]);
    unsigned int v3 = [v2 hasDaemonVersion];

    if (v3)
    {
      std::string::append(&v66, "DaemonVersion=");
      char v4 = (void *)objc_claimAutoreleasedReturnValue([v1 header]);
      id v5 = objc_claimAutoreleasedReturnValue([v4 daemonVersion]);
      std::string::append(&v66, (const std::string::value_type *)[v5 UTF8String]);

      std::string::append(&v66, "::");
    }

    unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v1 header]);
    unsigned int v7 = [v6 hasVendorVersion];

    if (v7)
    {
      std::string::append(&v66, "VendorVersion=");
      unint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v1 header]);
      id v9 = objc_claimAutoreleasedReturnValue([v8 vendorVersion]);
      std::string::append(&v66, (const std::string::value_type *)[v9 UTF8String]);

      std::string::append(&v66, "::");
    }
  }

  if ([v1 hasSCntrsEngagement])
  {
    std::string::append(&v66, "RouterNodesCount=");
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsEngagement]);
    std::to_string(&v67, [v10 routerNodesCount]);
    sub_10000D650(&v66, (const std::string::value_type *)&v67);

    std::string::append(&v66, "::");
    std::string::append(&v66, "ChildNodesCount=");
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsEngagement]);
    std::to_string(&v67, [v11 childNodesCount]);
    sub_10000D650(&v66, (const std::string::value_type *)&v67);

    std::string::append(&v66, "::");
  }

  if ([v1 hasSCntrsDiscoveryJoin])
  {
    unsigned __int8 v12 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsDiscoveryJoin]);
    BOOL v13 = [v12 accessoryNodesCountHistogramsCount] == 0;

    if (!v13)
    {
      std::string::append(&v66, "AccessoryNodesCountHistograms=");
      for (unint64_t i = 0LL; i != 0x80000000; ++i)
      {
        __n128 v15 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsDiscoveryJoin]);
        BOOL v16 = (unint64_t)[v15 accessoryNodesCountHistogramsCount] > i;

        if (!v16)
        {
          std::string::append(&v66, "::");
          goto LABEL_21;
        }

        std::string::append(&v66, "[");
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsDiscoveryJoin]);
        std::to_string(&v67, *((_DWORD *)[v17 accessoryNodesCountHistograms] + i));
        sub_10000D650(&v66, (const std::string::value_type *)&v67);

        std::string::append(&v66, "]");
      }

void sub_100082584( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1000828F0(void *a1)
{
  id v1 = a1;
  memset(&v94, 0, sizeof(v94));
  std::string::append(&v94, "AWDFlagstoneNetworkRadioMetrics:: ");
  if ([v1 hasHeader])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 header]);
    unsigned int v3 = [v2 hasDaemonVersion];

    if (v3)
    {
      std::string::append(&v94, "DaemonVersion=");
      char v4 = (void *)objc_claimAutoreleasedReturnValue([v1 header]);
      id v5 = objc_claimAutoreleasedReturnValue([v4 daemonVersion]);
      std::string::append(&v94, (const std::string::value_type *)[v5 UTF8String]);

      std::string::append(&v94, "::");
    }

    unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v1 header]);
    unsigned int v7 = [v6 hasVendorVersion];

    if (v7)
    {
      std::string::append(&v94, "VendorVersion=");
      unint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v1 header]);
      id v9 = objc_claimAutoreleasedReturnValue([v8 vendorVersion]);
      std::string::append(&v94, (const std::string::value_type *)[v9 UTF8String]);

      std::string::append(&v94, "::");
    }
  }

  if ([v1 hasSCntrsNetwork])
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsNetwork]);
    BOOL v11 = [v10 packetRssiNbrRouterHistogramsCount] == 0;

    if (!v11)
    {
      std::string::append(&v94, "PacketRssiNbrRouterHistograms=");
      for (unint64_t i = 0LL; i != 0x80000000; ++i)
      {
        BOOL v13 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsNetwork]);
        BOOL v14 = (unint64_t)[v13 packetRssiNbrRouterHistogramsCount] > i;

        if (!v14)
        {
          std::string::append(&v94, "::");
          goto LABEL_15;
        }

        std::string::append(&v94, "[");
        __n128 v15 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsNetwork]);
        std::to_string(&v95, *((_DWORD *)[v15 packetRssiNbrRouterHistograms] + i));
        sub_10000D650(&v94, (const std::string::value_type *)&v95);

        std::string::append(&v94, "]");
      }

void sub_10008444C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100084EB4(void *a1)
{
  id v1 = a1;
  memset(&v77, 0, sizeof(v77));
  std::string::append(&v77, "AWDFlagstoneMACMetrics:: ");
  if ([v1 hasHeader])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 header]);
    unsigned int v3 = [v2 hasDaemonVersion];

    if (v3)
    {
      std::string::append(&v77, "DaemonVersion=");
      char v4 = (void *)objc_claimAutoreleasedReturnValue([v1 header]);
      id v5 = objc_claimAutoreleasedReturnValue([v4 daemonVersion]);
      std::string::append(&v77, (const std::string::value_type *)[v5 UTF8String]);

      std::string::append(&v77, "::");
    }

    unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v1 header]);
    unsigned int v7 = [v6 hasVendorVersion];

    if (v7)
    {
      std::string::append(&v77, "VendorVersion=");
      unint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v1 header]);
      id v9 = objc_claimAutoreleasedReturnValue([v8 vendorVersion]);
      std::string::append(&v77, (const std::string::value_type *)[v9 UTF8String]);

      std::string::append(&v77, "::");
    }
  }

  if ([v1 hasSCntrsMacRx])
  {
    std::string::append(&v77, "rx_total");
    std::string::append(&v77, "=");
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacRx]);
    std::to_string(&v78, [v10 rxTotal]);
    sub_10000D650(&v77, (const std::string::value_type *)&v78);

    std::string::append(&v77, "::");
    std::string::append(&v77, "rx_data");
    std::string::append(&v77, "=");
    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacRx]);
    std::to_string(&v78, [v11 rxData]);
    sub_10000D650(&v77, (const std::string::value_type *)&v78);

    std::string::append(&v77, "::");
    std::string::append(&v77, "rx_unicast");
    std::string::append(&v77, "=");
    unsigned __int8 v12 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacRx]);
    std::to_string(&v78, [v12 rxUnicast]);
    sub_10000D650(&v77, (const std::string::value_type *)&v78);

    std::string::append(&v77, "::");
    std::string::append(&v77, "rx_broadcast");
    std::string::append(&v77, "=");
    BOOL v13 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacRx]);
    std::to_string(&v78, [v13 rxBroadcast]);
    sub_10000D650(&v77, (const std::string::value_type *)&v78);

    std::string::append(&v77, "::");
    std::string::append(&v77, "rx_err_fcs");
    std::string::append(&v77, "=");
    BOOL v14 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacRx]);
    std::to_string(&v78, [v14 rxErrFcs]);
    sub_10000D650(&v77, (const std::string::value_type *)&v78);

    std::string::append(&v77, "::");
    std::string::append(&v77, "rx_err_unknown_neighbor");
    std::string::append(&v77, "=");
    __n128 v15 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacRx]);
    std::to_string(&v78, [v15 rxErrUnknownNeighbor]);
    sub_10000D650(&v77, (const std::string::value_type *)&v78);

    std::string::append(&v77, "::");
    std::string::append(&v77, "rx_err_invalid_src_addr");
    std::string::append(&v77, "=");
    BOOL v16 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacRx]);
    std::to_string(&v78, [v16 rxErrInvalidSrcAddr]);
    sub_10000D650(&v77, (const std::string::value_type *)&v78);

    std::string::append(&v77, "::");
    std::string::append(&v77, "rx_err_security");
    std::string::append(&v77, "=");
    BOOL v17 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacRx]);
    std::to_string(&v78, [v17 rxErrSecurity]);
    sub_10000D650(&v77, (const std::string::value_type *)&v78);

    std::string::append(&v77, "::");
    std::string::append(&v77, "rx_err_noframe");
    std::string::append(&v77, "=");
    unint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacRx]);
    std::to_string(&v78, [v18 rxErrNoframe]);
    sub_10000D650(&v77, (const std::string::value_type *)&v78);

    std::string::append(&v77, "::");
    std::string::append(&v77, "rx_err_duplicated");
    std::string::append(&v77, "=");
    unsigned int v19 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacRx]);
    std::to_string(&v78, [v19 rxErrDuplicated]);
    sub_10000D650(&v77, (const std::string::value_type *)&v78);

    std::string::append(&v77, "::");
    std::string::append(&v77, "rx_err_other");
    std::string::append(&v77, "=");
    BOOL v20 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacRx]);
    std::to_string(&v78, [v20 rxErrOther]);
    sub_10000D650(&v77, (const std::string::value_type *)&v78);

    std::string::append(&v77, "::");
    std::string::append(&v77, "RxPacketCountHistograms=");
    unint64_t v21 = 0LL;
    while (1)
    {
      float v22 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacRx]);
      BOOL v23 = (unint64_t)[v22 rxPacketCountHistogramsCount] > v21;

      if (!v23) {
        break;
      }
      std::string::append(&v77, "[");
      unint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacRx]);
      std::to_string(&v78, *((_DWORD *)[v24 rxPacketCountHistograms] + v21));
      sub_10000D650(&v77, (const std::string::value_type *)&v78);

      std::string::append(&v77, "]");
      if (++v21 == 0x80000000)
      {
LABEL_106:
        __break(0x5500u);
        goto LABEL_107;
      }
    }

    std::string::append(&v77, "::");
    std::string::append(&v77, "rx_err_percentage");
    std::string::append(&v77, "=");
    BOOL v25 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacRx]);
    std::to_string(&v78, [v25 rxErrPercentage]);
    sub_10000D650(&v77, (const std::string::value_type *)&v78);

    std::string::append(&v77, "::");
  }

  if ([v1 hasSCntrsMacTx])
  {
    std::string::append(&v77, "tx_total");
    std::string::append(&v77, "=");
    BOOL v26 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacTx]);
    std::to_string(&v78, [v26 txTotal]);
    sub_10000D650(&v77, (const std::string::value_type *)&v78);

    std::string::append(&v77, "::");
    std::string::append(&v77, "tx_data");
    std::string::append(&v77, "=");
    BOOL v27 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacTx]);
    std::to_string(&v78, [v27 txData]);
    sub_10000D650(&v77, (const std::string::value_type *)&v78);

    std::string::append(&v77, "::");
    std::string::append(&v77, "tx_unicast");
    std::string::append(&v77, "=");
    unint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacTx]);
    std::to_string(&v78, [v28 txUnicast]);
    sub_10000D650(&v77, (const std::string::value_type *)&v78);

    std::string::append(&v77, "::");
    std::string::append(&v77, "tx_broadcast");
    std::string::append(&v77, "=");
    BOOL v29 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacTx]);
    std::to_string(&v78, [v29 txBroadcast]);
    sub_10000D650(&v77, (const std::string::value_type *)&v78);

    std::string::append(&v77, "::");
    std::string::append(&v77, "tx_err_cca");
    std::string::append(&v77, "=");
    unint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacTx]);
    std::to_string(&v78, [v30 txErrCca]);
    sub_10000D650(&v77, (const std::string::value_type *)&v78);

    std::string::append(&v77, "::");
    std::string::append(&v77, "tx_err_abort");
    std::string::append(&v77, "=");
    BOOL v31 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacTx]);
    std::to_string(&v78, [v31 txErrAbort]);
    sub_10000D650(&v77, (const std::string::value_type *)&v78);

    std::string::append(&v77, "::");
    std::string::append(&v77, "tx_err_busy_channel");
    std::string::append(&v77, "=");
    BOOL v32 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacTx]);
    std::to_string(&v78, [v32 txErrBusyChannel]);
    sub_10000D650(&v77, (const std::string::value_type *)&v78);

    std::string::append(&v77, "::");
    std::string::append(&v77, "tx_err_cca_percentage");
    std::string::append(&v77, "=");
    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacTx]);
    std::to_string(&v78, [v33 txErrCcaPercentage]);
    sub_10000D650(&v77, (const std::string::value_type *)&v78);

    std::string::append(&v77, "::");
    std::string::append(&v77, "tx_err_abort_percentage");
    std::string::append(&v77, "=");
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacTx]);
    std::to_string(&v78, [v34 txErrAbortPercentage]);
    sub_10000D650(&v77, (const std::string::value_type *)&v78);

    std::string::append(&v77, "::");
    std::string::append(&v77, "tx_err_busy_channel_percentage");
    std::string::append(&v77, "=");
    unint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacTx]);
    std::to_string(&v78, [v35 txErrBusyChannelPercentage]);
    sub_10000D650(&v77, (const std::string::value_type *)&v78);

    std::string::append(&v77, "::");
    std::string::append(&v77, "tx_err_percentage");
    std::string::append(&v77, "=");
    BOOL v36 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacTx]);
    std::to_string(&v78, [v36 txErrPercentage]);
    sub_10000D650(&v77, (const std::string::value_type *)&v78);

    std::string::append(&v77, "::");
    std::string::append(&v77, "tx_direct_max_retry_expiry");
    std::string::append(&v77, "=");
    unint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacTx]);
    std::to_string(&v78, [v37 txDirectMaxRetryExpiry]);
    sub_10000D650(&v77, (const std::string::value_type *)&v78);

    std::string::append(&v77, "::");
    std::string::append(&v77, "tx_indirect_max_retry_expiry");
    std::string::append(&v77, "=");
    uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacTx]);
    std::to_string(&v78, [v38 txIndirectMaxRetryExpiry]);
    sub_10000D650(&v77, (const std::string::value_type *)&v78);

    std::string::append(&v77, "::");
    std::string::append(&v77, "TxPacketCountHistograms=");
    unint64_t v39 = 0LL;
    while (1)
    {
      BOOL v40 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacTx]);
      BOOL v41 = (unint64_t)[v40 txPacketCountHistogramsCount] > v39;

      if (!v41) {
        break;
      }
      std::string::append(&v77, "[");
      uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacTx]);
      std::to_string(&v78, *((_DWORD *)[v42 txPacketCountHistograms] + v39));
      sub_10000D650(&v77, (const std::string::value_type *)&v78);

      std::string::append(&v77, "]");
      if (++v39 == 0x80000000) {
        goto LABEL_106;
      }
    }

    std::string::append(&v77, "::");
    std::string::append(&v77, "TxDirectRetryAttemptsHistograms=");
    unint64_t v43 = 0LL;
    while (1)
    {
      uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacTx]);
      BOOL v45 = (unint64_t)[v44 txDirectRetryAttemptsHistogramsCount] > v43;

      if (!v45) {
        break;
      }
      std::string::append(&v77, "[");
      unint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacTx]);
      std::to_string(&v78, *((_DWORD *)[v46 txDirectRetryAttemptsHistograms] + v43));
      sub_10000D650(&v77, (const std::string::value_type *)&v78);

      std::string::append(&v77, "]");
      if (++v43 == 0x80000000) {
        goto LABEL_106;
      }
    }

    std::string::append(&v77, "::");
    std::string::append(&v77, "TxIndirectRetryAttemptsHistograms=");
    unint64_t v47 = 0LL;
    while (1)
    {
      uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacTx]);
      BOOL v49 = (unint64_t)[v48 txIndirectRetryAttemptsHistogramsCount] > v47;

      if (!v49) {
        break;
      }
      std::string::append(&v77, "[");
      uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacTx]);
      std::to_string(&v78, *((_DWORD *)[v50 txIndirectRetryAttemptsHistograms] + v47));
      sub_10000D650(&v77, (const std::string::value_type *)&v78);

      std::string::append(&v77, "]");
      if (++v47 == 0x80000000) {
        goto LABEL_106;
      }
    }

    std::string::append(&v77, "::");
    std::string::append(&v77, "TxCcaEnergyDetectHistograms=");
    unint64_t v51 = 0LL;
    while (1)
    {
      char v52 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacTx]);
      BOOL v53 = (unint64_t)[v52 txCcaEnergyDetectedHistogramsCount] > v51;

      if (!v53) {
        break;
      }
      std::string::append(&v77, "[");
      BOOL v54 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacTx]);
      std::to_string(&v78, *((_DWORD *)[v54 txCcaEnergyDetectedHistograms] + v51));
      sub_10000D650(&v77, (const std::string::value_type *)&v78);

      std::string::append(&v77, "]");
      if (++v51 == 0x80000000) {
        goto LABEL_106;
      }
    }

    std::string::append(&v77, "::");
    std::string::append(&v77, "TxNoAckErrorHistograms=");
    unint64_t v55 = 0LL;
    while (1)
    {
      char v56 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacTx]);
      BOOL v57 = (unint64_t)[v56 txDirectNoackHistogramsCount] > v55;

      if (!v57) {
        break;
      }
      std::string::append(&v77, "[");
      BOOL v58 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacTx]);
      std::to_string(&v78, *((_DWORD *)[v58 txDirectNoackHistograms] + v55));
      sub_10000D650(&v77, (const std::string::value_type *)&v78);

      std::string::append(&v77, "]");
      if (++v55 == 0x80000000) {
        goto LABEL_106;
      }
    }

    std::string::append(&v77, "::");
    std::string::append(&v77, "TxChannelAccessFailureErrorHistograms=");
    unint64_t v59 = 0LL;
    while (1)
    {
      unint64_t v60 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacTx]);
      BOOL v61 = (unint64_t)[v60 txDirectChannelaccessfailureHistogramsCount] > v59;

      if (!v61) {
        break;
      }
      std::string::append(&v77, "[");
      char v62 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacTx]);
      std::to_string(&v78, *((_DWORD *)[v62 txDirectChannelaccessfailureHistograms] + v59));
      sub_10000D650(&v77, (const std::string::value_type *)&v78);

      std::string::append(&v77, "]");
      if (++v59 == 0x80000000) {
        goto LABEL_106;
      }
    }

    std::string::append(&v77, "::");
    std::string::append(&v77, "TxCsmaBackoffHistograms=");
    unint64_t v63 = 0LL;
    while (1)
    {
      uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacTx]);
      BOOL v65 = (unint64_t)[v64 txCsmaBackoffHistogramsCount] > v63;

      if (!v65) {
        break;
      }
      std::string::append(&v77, "[");
      std::string v66 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacTx]);
      std::to_string(&v78, *((_DWORD *)[v66 txCsmaBackoffHistograms] + v63));
      sub_10000D650(&v77, (const std::string::value_type *)&v78);

      std::string::append(&v77, "]");
      if (++v63 == 0x80000000) {
        goto LABEL_106;
      }
    }

LABEL_107:
    std::string::append(&v77, "::");
    std::string::append(&v77, "csl_tx_total");
    std::string::append(&v77, "=");
    std::string v67 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacTx]);
    std::to_string(&v78, [v67 cslTxTotal]);
    sub_10000D650(&v77, (const std::string::value_type *)&v78);

    std::string::append(&v77, "::");
    std::string::append(&v77, "csl_tx_err_noack");
    std::string::append(&v77, "=");
    unsigned int v68 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacTx]);
    std::to_string(&v78, [v68 cslTxErrNoack]);
    sub_10000D650(&v77, (const std::string::value_type *)&v78);

    std::string::append(&v77, "::");
    std::string::append(&v77, "csl_tx_err_cca");
    std::string::append(&v77, "=");
    uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacTx]);
    std::to_string(&v78, [v69 cslTxErrCca]);
    sub_10000D650(&v77, (const std::string::value_type *)&v78);

    std::string::append(&v77, "::");
    std::string::append(&v77, "csl_tx_err_abort");
    std::string::append(&v77, "=");
    unint64_t v70 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacTx]);
    std::to_string(&v78, [v70 cslTxErrAbort]);
    sub_10000D650(&v77, (const std::string::value_type *)&v78);

    std::string::append(&v77, "::");
    std::string::append(&v77, "csl_tx_err_busy_channel");
    std::string::append(&v77, "=");
    char v71 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacTx]);
    std::to_string(&v78, [v71 cslTxErrBusyChannel]);
    sub_10000D650(&v77, (const std::string::value_type *)&v78);

    std::string::append(&v77, "::");
    std::string::append(&v77, "tx_csl_loss_of_sync_csl_timeout");
    std::string::append(&v77, "=");
    char v72 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacTx]);
    std::to_string(&v78, [v72 cslLossOfSyncDueToCslTimeout]);
    sub_10000D650(&v77, (const std::string::value_type *)&v78);

    std::string::append(&v77, "::");
    std::string::append(&v77, "tx_csl_loss_of_sync_max_retx");
    std::string::append(&v77, "=");
    unsigned int v73 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMacTx]);
    std::to_string(&v78, [v73 cslLossOfSyncDueToMaxRetx]);
    sub_10000D650(&v77, (const std::string::value_type *)&v78);
  }

  uint64_t v74 = sub_1000160F4("com.apple.wpantund.awd", "default");
  unint64_t v75 = (os_log_s *)objc_claimAutoreleasedReturnValue(v74);
  if (os_log_type_enabled(v75, OS_LOG_TYPE_INFO))
  {
    char v76 = &v77;
    if ((v77.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      char v76 = (std::string *)v77.__r_.__value_.__r.__words[0];
    }
    LODWORD(v78.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v78.__r_.__value_.__r.__words + 4) = (std::string::size_type)v76;
    _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_INFO, "AWDMetricsLogger : %s", (uint8_t *)&v78, 0xCu);
  }
}

      id v9 = v89 + 1;
      id v5 = v91;
      if (v89 + 1 == count) {
        goto LABEL_127;
      }
    }

    if (!v14) {
      goto LABEL_141;
    }
    uint64_t v10 = v33;
    std::string::basic_string(&__str, &buf, v90 + 1, v14 - 1, (std::allocator<char> *)&v95);
    BOOL v53 = std::stoi(&__str, 0LL, 10);
    if ((v53 & 0xFCu) > 0x13) {
      goto LABEL_105;
    }
    unint64_t v46 = sub_1000BE984(4, uint64);
    unint64_t v47 = v53;
    if (v53 > 0x13u) {
      goto LABEL_142;
    }
    uint64_t v48 = v101;
    goto LABEL_104;
  }

  id v5 = 0LL;
LABEL_127:
  for (unint64_t i = 0LL; i != 80; i += 4LL)
  {
    unint64_t v63 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)&v99[i]));
    [v88 addObject:v63];
  }

  [v75 setObject:v88 forKey:@"coex_rx_total_grant_duty_cycle_histogram"];
  for (uint64_t j = 0LL; j != 80; j += 4LL)
  {
    BOOL v65 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)&v100[j]));
    [v87 addObject:v65];
  }

  [v75 setObject:v87 forKey:@"coex_tx_total_grant_duty_cycle_histogram"];
  for (k = 0LL; k != 80; k += 4LL)
  {
    std::string v67 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)&v102[k]));
    [v86 addObject:v67];
  }

  [v75 setObject:v86 forKey:@"coex_rx_unsolicited_grant_duty_cycle_histogram"];
  for (m = 0LL; m != 80; m += 4LL)
  {
    uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)&v101[m]));
    [v85 addObject:v69];
  }

  [v75 setObject:v85 forKey:@"coex_tx_unsolicited_grant_duty_cycle_histogram"];
  for (n = 0LL; n != 64; n += 4LL)
  {
    char v71 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)&v98[n]));
    [v84 addObject:v71];
  }

  [v75 setObject:v84 forKey:@"coex_total_grant_time_histogram"];
  for (iunint64_t i = 0LL; ii != 44; ii += 4LL)
  {
    unsigned int v73 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)((char *)v97 + ii)));
    [v83 addObject:v73];
  }

  [v75 setObject:v83 forKey:@"coex_aborts_due_to_grant_revokes_histogram"];
  unsigned int v6 = 0LL;
LABEL_140:

  sub_10000D448((uint64_t)&v93);
  return v6;
}

  unint64_t v55 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_rxErrorTimeslotEnded));
  [v3 setObject:v55 forKey:@"rx_error_timeslot_ended"];

  unint64_t v8 = self->_has;
  if ((*(_DWORD *)&v8 & 0x40000) == 0)
  {
LABEL_50:
    if ((*(_DWORD *)&v8 & 0x1000000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_109;
  }

  PBDataWriterWriteUint32Field(v7, self->_rxErrorTimeslotEnded, 46LL);
  unsigned int v6 = self->_has;
  if ((*(_DWORD *)&v6 & 0x40000) == 0)
  {
LABEL_50:
    if ((*(_DWORD *)&v6 & 0x1000000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_109;
  }

  v4[34] = self->_rxErrorTimeslotEnded;
  *((void *)v4 + 31) |= (unint64_t)&_mh_execute_header;
  unsigned int v6 = self->_has;
  if ((*(_DWORD *)&v6 & 0x40000) == 0)
  {
LABEL_50:
    if ((*(_DWORD *)&v6 & 0x1000000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_109;
  }

  *((_DWORD *)v6 + 26) = self->_rxErrorDelayedTimeslotEnded;
  v6[31] |= 0x1000000uLL;
  uint64_t v10 = self->_has;
  if ((*(_DWORD *)&v10 & 0x20000000) == 0)
  {
LABEL_50:
    if ((*(_DWORD *)&v10 & 0x4000000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_109;
  }

  unint64_t v21 = 0LL;
  if ((*(_DWORD *)&v4 & 0x4000000) != 0)
  {
LABEL_55:
    float v22 = 2654435761LL * self->_rxErrorInvalidData;
    if ((*(_DWORD *)&v4 & 0x400000) != 0) {
      goto LABEL_56;
    }
    goto LABEL_109;
  }

  self->_rxErrorDelayedTimeout = v5[25];
  *(void *)&self->_has |= 0x800000uLL;
  id v9 = *((void *)v5 + 31);
  if ((v9 & 0x8000000) == 0)
  {
LABEL_54:
    if ((v9 & 0x2000000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_109;
  }

              if (buf[23] == 10)
              {
LABEL_141:
              }
            }

            goto LABEL_157;
          }

          if (*(void *)buf == 0x625F7272655F7874LL
            && *(void *)&buf[8] == 0x6E6168635F797375LL
            && *(void *)&buf[11] == 0x6C656E6E6168635FLL)
          {
            goto LABEL_138;
          }
        }

        else
        {
          switch(buf[23])
          {
            case 7:
              goto LABEL_12;
            case 8:
              if (*(void *)buf == 0x6C61746F745F7874LL) {
                goto LABEL_101;
              }
              goto LABEL_157;
            case 0xA:
              if (buf[23] != 7) {
                goto LABEL_107;
              }
              goto LABEL_12;
            case 0xC:
              if (buf[23] != 12)
              {
                if (buf[23] == 10) {
                  goto LABEL_141;
                }
                if (buf[23] == 7)
                {
LABEL_12:
                  if (*(_DWORD *)buf == 1683978356 && *(_DWORD *)&buf[3] == 1635017060) {
                    goto LABEL_99;
                  }
                }

                goto LABEL_157;
              }

              break;
            default:
              goto LABEL_157;
          }
        }

        if (buf[23] == 12)
        {
          BOOL v32 = buf;
LABEL_153:
          BOOL v45 = *(void *)v32;
          unint64_t v46 = *((_DWORD *)v32 + 2);
          if (v45 == 0x745F78745F6C7363LL && v46 == 1818326127)
          {
            -[AWDCountersMacTxS setCslTxTotal:](v11, "setCslTxTotal:", sub_1000BE984(4, uint64));
            goto LABEL_171;
          }
        }

        goto LABEL_109;
      }

      BOOL v53 = v75;
      if (v20 != p_buf) {
        BOOL v53 = 0;
      }
      if (v53 && v79 != -1LL && v15 != -1LL)
      {
        if (!v15) {
          goto LABEL_143;
        }
        std::string::basic_string(&__str, &buf, v79 + 1, v15 - 1, (std::allocator<char> *)&v84);
        BOOL v54 = std::stoi(&__str, 0LL, 10);
        if ((v54 & 0xFCu) > 0x13) {
          goto LABEL_107;
        }
        uint64_t v48 = sub_1000BE984(4, uint64);
        BOOL v49 = v54;
        if (v54 > 0x13u) {
          goto LABEL_144;
        }
        uint64_t v50 = v91;
        goto LABEL_106;
      }

      if (v23 != v18 && v23 == p_buf && v79 != -1LL && v15 != -1LL) {
        break;
      }
      char v56 = v35 == p_buf && v34;
      if (v56 && v79 != -1LL && v15 != -1LL)
      {
        if (!v15) {
          goto LABEL_143;
        }
        std::string::basic_string(&__str, &buf, v79 + 1, v15 - 1, (std::allocator<char> *)&v84);
        BOOL v57 = std::stoi(&__str, 0LL, 10);
        if ((v57 & 0xF0) != 0) {
          goto LABEL_107;
        }
        uint64_t v48 = sub_1000BE984(4, uint64);
        BOOL v49 = v57;
        if (v57 > 0xFu) {
          goto LABEL_144;
        }
        uint64_t v50 = v87;
LABEL_106:
        *(_DWORD *)&v50[4 * v49] = v48;
        goto LABEL_107;
      }

      if (v36 != v18 && v36 == p_buf && v79 != -1LL && v15 != -1LL)
      {
        if (!v15) {
          goto LABEL_143;
        }
        std::string::basic_string(&__str, &buf, v79 + 1, v15 - 1, (std::allocator<char> *)&v84);
        unint64_t v63 = std::stoi(&__str, 0LL, 10);
        if (v63 <= 0xA) {
          *((_DWORD *)v86 + v63) = sub_1000BE984(4, uint64);
        }
        goto LABEL_107;
      }

void sub_100086464( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100086B98(void *a1)
{
  id v1 = a1;
  memset(&v56, 0, sizeof(v56));
  std::string::append(&v56, "AWDFlagstoneCoexMetrics:: ");
  if ([v1 hasHeader])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 header]);
    unsigned int v3 = [v2 hasDaemonVersion];

    if (v3)
    {
      std::string::append(&v56, "DaemonVersion=");
      char v4 = (void *)objc_claimAutoreleasedReturnValue([v1 header]);
      id v5 = objc_claimAutoreleasedReturnValue([v4 daemonVersion]);
      std::string::append(&v56, (const std::string::value_type *)[v5 UTF8String]);

      std::string::append(&v56, "::");
    }

    unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v1 header]);
    unsigned int v7 = [v6 hasVendorVersion];

    if (v7)
    {
      std::string::append(&v56, "VendorVersion=");
      unint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v1 header]);
      id v9 = objc_claimAutoreleasedReturnValue([v8 vendorVersion]);
      std::string::append(&v56, (const std::string::value_type *)[v9 UTF8String]);

      std::string::append(&v56, "::");
    }
  }

  if ([v1 hasSCntrsCoex])
  {
    std::string::append(&v56, "coex_unsolicited_grants");
    std::string::append(&v56, "=");
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsCoex]);
    std::to_string(&v57, [v10 coexUnsolicitedGrants]);
    sub_10000D650(&v56, (const std::string::value_type *)&v57);

    std::string::append(&v56, "::");
    std::string::append(&v56, "coex_tx_requests");
    std::string::append(&v56, "=");
    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsCoex]);
    std::to_string(&v57, [v11 coexTxRequests]);
    sub_10000D650(&v56, (const std::string::value_type *)&v57);

    std::string::append(&v56, "::");
    std::string::append(&v56, "coex_tx_granted_requests");
    std::string::append(&v56, "=");
    unsigned __int8 v12 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsCoex]);
    std::to_string(&v57, [v12 coexTxGrantedRequests]);
    sub_10000D650(&v56, (const std::string::value_type *)&v57);

    std::string::append(&v56, "::");
    std::string::append(&v56, "coex_tx_denied_requests");
    std::string::append(&v56, "=");
    BOOL v13 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsCoex]);
    std::to_string(&v57, [v13 coexTxDeniedRequests]);
    sub_10000D650(&v56, (const std::string::value_type *)&v57);

    std::string::append(&v56, "::");
    std::string::append(&v56, "coex_rx_requests");
    std::string::append(&v56, "=");
    BOOL v14 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsCoex]);
    std::to_string(&v57, [v14 coexRxRequests]);
    sub_10000D650(&v56, (const std::string::value_type *)&v57);

    std::string::append(&v56, "::");
    std::string::append(&v56, "coex_rx_granted_requests");
    std::string::append(&v56, "=");
    __n128 v15 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsCoex]);
    std::to_string(&v57, [v15 coexRxGrantedRequests]);
    sub_10000D650(&v56, (const std::string::value_type *)&v57);

    std::string::append(&v56, "::");
    std::string::append(&v56, "coex_rx_denied_requests");
    std::string::append(&v56, "=");
    BOOL v16 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsCoex]);
    std::to_string(&v57, [v16 coexRxDeniedRequests]);
    sub_10000D650(&v56, (const std::string::value_type *)&v57);

    std::string::append(&v56, "::");
    std::string::append(&v56, "coex_rx_grant_time_histogram");
    std::string::append(&v56, "=");
    unint64_t v17 = 0LL;
    while (1)
    {
      unint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsCoex]);
      BOOL v19 = (unint64_t)[v18 coexRxGrantTimeHistogramsCount] > v17;

      if (!v19) {
        break;
      }
      std::string::append(&v56, "[");
      BOOL v20 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsCoex]);
      std::to_string(&v57, *((_DWORD *)[v20 coexRxGrantTimeHistograms] + v17));
      sub_10000D650(&v56, (const std::string::value_type *)&v57);

      std::string::append(&v56, "]");
      if (++v17 == 0x80000000)
      {
LABEL_78:
        __break(0x5500u);
        goto LABEL_79;
      }
    }

    std::string::append(&v56, "::");
    std::string::append(&v56, "coex_tx_grant_time_histogram");
    std::string::append(&v56, "=");
    unint64_t v21 = 0LL;
    while (1)
    {
      float v22 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsCoex]);
      BOOL v23 = (unint64_t)[v22 coexTxGrantTimeHistogramsCount] > v21;

      if (!v23) {
        break;
      }
      std::string::append(&v56, "[");
      unint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsCoex]);
      std::to_string(&v57, *((_DWORD *)[v24 coexTxGrantTimeHistograms] + v21));
      sub_10000D650(&v56, (const std::string::value_type *)&v57);

      std::string::append(&v56, "]");
      if (++v21 == 0x80000000) {
        goto LABEL_78;
      }
    }

    std::string::append(&v56, "::");
    std::string::append(&v56, "coex_tx_granted_requests_percentage");
    std::string::append(&v56, "=");
    BOOL v25 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsCoex]);
    std::to_string(&v57, [v25 txGrantedReqPercentage]);
    sub_10000D650(&v56, (const std::string::value_type *)&v57);

    std::string::append(&v56, "::");
    std::string::append(&v56, "coex_tx_denied_requests_percentage");
    std::string::append(&v56, "=");
    BOOL v26 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsCoex]);
    std::to_string(&v57, [v26 txDeniedReqPercentage]);
    sub_10000D650(&v56, (const std::string::value_type *)&v57);

    std::string::append(&v56, "::");
    std::string::append(&v56, "coex_rx_granted_requests_percentage");
    std::string::append(&v56, "=");
    BOOL v27 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsCoex]);
    std::to_string(&v57, [v27 rxGrantedReqPercentage]);
    sub_10000D650(&v56, (const std::string::value_type *)&v57);

    std::string::append(&v56, "::");
    std::string::append(&v56, "coex_rx_denied_requests_percentage");
    std::string::append(&v56, "=");
    unint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsCoex]);
    std::to_string(&v57, [v28 rxDeniedReqPercentage]);
    sub_10000D650(&v56, (const std::string::value_type *)&v57);

    std::string::append(&v56, "::");
  }

  if ([v1 hasSHistCoex])
  {
    std::string::append(&v56, "coex_tx_unsolicited_grant_duty_cycle_histogram");
    std::string::append(&v56, "=");
    unint64_t v29 = 0LL;
    while (1)
    {
      unint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v1 sHistCoex]);
      BOOL v31 = (unint64_t)[v30 coexTxUnsolicitedGrantDutyCycleHistogramsCount] > v29;

      if (!v31) {
        break;
      }
      std::string::append(&v56, "[");
      BOOL v32 = (void *)objc_claimAutoreleasedReturnValue([v1 sHistCoex]);
      std::to_string(&v57, *((_DWORD *)[v32 coexTxUnsolicitedGrantDutyCycleHistograms] + v29));
      sub_10000D650(&v56, (const std::string::value_type *)&v57);

      std::string::append(&v56, "]");
      if (++v29 == 0x80000000) {
        goto LABEL_78;
      }
    }

    std::string::append(&v56, "::");
    std::string::append(&v56, "coex_rx_unsolicited_grant_duty_cycle_histogram");
    std::string::append(&v56, "=");
    unint64_t v33 = 0LL;
    while (1)
    {
      uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v1 sHistCoex]);
      BOOL v35 = (unint64_t)[v34 coexRxUnsolicitedGrantDutyCycleHistogramsCount] > v33;

      if (!v35) {
        break;
      }
      std::string::append(&v56, "[");
      BOOL v36 = (void *)objc_claimAutoreleasedReturnValue([v1 sHistCoex]);
      std::to_string(&v57, *((_DWORD *)[v36 coexRxUnsolicitedGrantDutyCycleHistograms] + v33));
      sub_10000D650(&v56, (const std::string::value_type *)&v57);

      std::string::append(&v56, "]");
      if (++v33 == 0x80000000) {
        goto LABEL_78;
      }
    }

    std::string::append(&v56, "::");
    std::string::append(&v56, "coex_tx_total_grant_duty_cycle_histogram");
    std::string::append(&v56, "=");
    unint64_t v37 = 0LL;
    while (1)
    {
      uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v1 sHistCoex]);
      BOOL v39 = (unint64_t)[v38 coexTxTotalGrantDutyCycleHistogramsCount] > v37;

      if (!v39) {
        break;
      }
      std::string::append(&v56, "[");
      BOOL v40 = (void *)objc_claimAutoreleasedReturnValue([v1 sHistCoex]);
      std::to_string(&v57, *((_DWORD *)[v40 coexTxTotalGrantDutyCycleHistograms] + v37));
      sub_10000D650(&v56, (const std::string::value_type *)&v57);

      std::string::append(&v56, "]");
      if (++v37 == 0x80000000) {
        goto LABEL_78;
      }
    }

    std::string::append(&v56, "::");
    std::string::append(&v56, "coex_rx_total_grant_duty_cycle_histogram");
    std::string::append(&v56, "=");
    unint64_t v41 = 0LL;
    while (1)
    {
      uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([v1 sHistCoex]);
      BOOL v43 = (unint64_t)[v42 coexRxTotalGrantDutyCycleHistogramsCount] > v41;

      if (!v43) {
        break;
      }
      std::string::append(&v56, "[");
      uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v1 sHistCoex]);
      std::to_string(&v57, *((_DWORD *)[v44 coexRxTotalGrantDutyCycleHistograms] + v41));
      sub_10000D650(&v56, (const std::string::value_type *)&v57);

      std::string::append(&v56, "]");
      if (++v41 == 0x80000000) {
        goto LABEL_78;
      }
    }

    std::string::append(&v56, "::");
    std::string::append(&v56, "coex_total_grant_time_histogram");
    std::string::append(&v56, "=");
    unint64_t v45 = 0LL;
    while (1)
    {
      unint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v1 sHistCoex]);
      BOOL v47 = (unint64_t)[v46 coexTotalGrantTimeHistogramsCount] > v45;

      if (!v47) {
        break;
      }
      std::string::append(&v56, "[");
      uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue([v1 sHistCoex]);
      std::to_string(&v57, *((_DWORD *)[v48 coexTotalGrantTimeHistograms] + v45));
      sub_10000D650(&v56, (const std::string::value_type *)&v57);

      std::string::append(&v56, "]");
      if (++v45 == 0x80000000) {
        goto LABEL_78;
      }
    }

    std::string::append(&v56, "::");
    std::string::append(&v56, "coex_aborts_due_to_grant_revokes_histogram");
    std::string::append(&v56, "=");
    unint64_t v49 = 0LL;
    while (1)
    {
      uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([v1 sHistCoex]);
      BOOL v51 = (unint64_t)[v50 coexAbortsDueToGrantRevokesHistogramsCount] > v49;

      if (!v51) {
        break;
      }
      std::string::append(&v56, "[");
      char v52 = (void *)objc_claimAutoreleasedReturnValue([v1 sHistCoex]);
      std::to_string(&v57, *((_DWORD *)[v52 coexAbortsDueToGrantRevokesHistograms] + v49));
      sub_10000D650(&v56, (const std::string::value_type *)&v57);

      std::string::append(&v56, "]");
      if (++v49 == 0x80000000) {
        goto LABEL_78;
      }
    }

LABEL_79:
    std::string::append(&v56, "::");
  }

  BOOL v53 = sub_1000160F4("com.apple.wpantund.awd", "default");
  BOOL v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
  if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
  {
    unint64_t v55 = &v56;
    if ((v56.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      unint64_t v55 = (std::string *)v56.__r_.__value_.__r.__words[0];
    }
    LODWORD(v57.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v57.__r_.__value_.__r.__words + 4) = (std::string::size_type)v55;
    _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_INFO, "AWDMetricsLogger : %s", (uint8_t *)&v57, 0xCu);
  }
}

  BOOL v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_listeningTime));
  [v3 setObject:v27 forKey:@"listening_time"];

  unint64_t v8 = self->_has;
  if ((*(_WORD *)&v8 & 0x200) == 0)
  {
LABEL_22:
    if ((*(void *)&v8 & 0x800000000LL) == 0) {
      goto LABEL_23;
    }
    goto LABEL_81;
  }

  PBDataWriterWriteUint32Field(v7, self->_listeningTime, 18LL);
  unsigned int v6 = self->_has;
  if ((*(_WORD *)&v6 & 0x200) == 0)
  {
LABEL_22:
    if ((*(void *)&v6 & 0x800000000LL) == 0) {
      goto LABEL_23;
    }
    goto LABEL_81;
  }

  uint64_t v4[5] = self->_listeningTime;
  *((void *)v4 + 31) |= 8uLL;
  unsigned int v6 = self->_has;
  if ((*(_WORD *)&v6 & 0x200) == 0)
  {
LABEL_22:
    if ((*(void *)&v6 & 0x800000000LL) == 0) {
      goto LABEL_23;
    }
    goto LABEL_81;
  }

  *((_DWORD *)v6 + 40) = self->_transmittingTime;
  v6[31] |= 0x800000000uLL;
  uint64_t v10 = self->_has;
  if ((*(void *)&v10 & 0x400000000LL) == 0)
  {
LABEL_22:
    if ((*(void *)&v10 & 0x1000000000000LL) == 0) {
      goto LABEL_23;
    }
    goto LABEL_81;
  }

  BOOL v43 = 0LL;
  if ((*(void *)&v4 & 0x1000000000000LL) != 0)
  {
LABEL_27:
    uint64_t v42 = 2654435761LL * self->_txErrorTimeslotEnded;
    if ((*(void *)&v4 & 0x800000000000LL) != 0) {
      goto LABEL_28;
    }
    goto LABEL_81;
  }

  self->_txDelayMin = v5[44];
  *(void *)&self->_has |= 0x8000000000uLL;
  id v9 = *((void *)v5 + 31);
  if ((v9 & 0x4000000000LL) == 0)
  {
LABEL_26:
    if ((v9 & 0x2000000000LL) == 0) {
      goto LABEL_27;
    }
    goto LABEL_81;
  }

void sub_1000878FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100087CE8(void *a1)
{
  id v1 = a1;
  memset(&v32, 0, sizeof(v32));
  std::string::append(&v32, "AWDFlagstoneIPMLEMetrics:: ");
  if ([v1 hasHeader])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 header]);
    unsigned int v3 = [v2 hasDaemonVersion];

    if (v3)
    {
      std::string::append(&v32, "DaemonVersion=");
      char v4 = (void *)objc_claimAutoreleasedReturnValue([v1 header]);
      id v5 = objc_claimAutoreleasedReturnValue([v4 daemonVersion]);
      std::string::append(&v32, (const std::string::value_type *)[v5 UTF8String]);

      std::string::append(&v32, "::");
    }

    unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v1 header]);
    unsigned int v7 = [v6 hasVendorVersion];

    if (v7)
    {
      std::string::append(&v32, "VendorVersion=");
      unint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v1 header]);
      id v9 = objc_claimAutoreleasedReturnValue([v8 vendorVersion]);
      std::string::append(&v32, (const std::string::value_type *)[v9 UTF8String]);

      std::string::append(&v32, "::");
    }
  }

  if ([v1 hasSCntrsIp])
  {
    std::string::append(&v32, "TxSuccess=");
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsIp]);
    std::to_string(&v33, [v10 txSuccess]);
    sub_10000D650(&v32, (const std::string::value_type *)&v33);

    std::string::append(&v32, "::");
    std::string::append(&v32, "TxFailure=");
    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsIp]);
    std::to_string(&v33, [v11 txFailure]);
    sub_10000D650(&v32, (const std::string::value_type *)&v33);

    std::string::append(&v32, "::");
    std::string::append(&v32, "RxSuccess=");
    unsigned __int8 v12 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsIp]);
    std::to_string(&v33, [v12 rxSuccess]);
    sub_10000D650(&v32, (const std::string::value_type *)&v33);

    std::string::append(&v32, "::");
    std::string::append(&v32, "RxFailure=");
    BOOL v13 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsIp]);
    std::to_string(&v33, [v13 rxFailure]);
    sub_10000D650(&v32, (const std::string::value_type *)&v33);

    std::string::append(&v32, "::");
    std::string::append(&v32, "RxSuccessRate=");
    BOOL v14 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsIp]);
    std::to_string(&v33, [v14 rxSuccessRate]);
    sub_10000D650(&v32, (const std::string::value_type *)&v33);

    std::string::append(&v32, "::");
    std::string::append(&v32, "TxApplicationPktSuccesss=");
    __n128 v15 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsIp]);
    std::to_string(&v33, [v15 txAppPktSucess]);
    sub_10000D650(&v32, (const std::string::value_type *)&v33);

    std::string::append(&v32, "::");
    std::string::append(&v32, "TxDelayMin=");
    BOOL v16 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsIp]);
    std::to_string(&v33, [v16 txDelaymin]);
    sub_10000D650(&v32, (const std::string::value_type *)&v33);

    std::string::append(&v32, "::");
    std::string::append(&v32, "TxDelayMax=");
    unint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsIp]);
    std::to_string(&v33, [v17 txDelaymax]);
    sub_10000D650(&v32, (const std::string::value_type *)&v33);

    std::string::append(&v32, "::");
    std::string::append(&v32, "TxDelayAvg=");
    unint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsIp]);
    std::to_string(&v33, [v18 txDelayavg]);
    sub_10000D650(&v32, (const std::string::value_type *)&v33);

    std::string::append(&v32, "::");
    std::string::append(&v32, "TxSuccessRate=");
    BOOL v19 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsIp]);
    std::to_string(&v33, [v19 txSuccessRate]);
    sub_10000D650(&v32, (const std::string::value_type *)&v33);
  }

  if ([v1 hasSCntrsMle])
  {
    std::string::append(&v32, "disabled_role_count");
    std::string::append(&v32, "=");
    BOOL v20 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMle]);
    std::to_string(&v33, [v20 disabledRoleCount]);
    sub_10000D650(&v32, (const std::string::value_type *)&v33);

    std::string::append(&v32, "::");
    std::string::append(&v32, "detached_role_count");
    std::string::append(&v32, "=");
    unint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMle]);
    std::to_string(&v33, [v21 detachedRoleCount]);
    sub_10000D650(&v32, (const std::string::value_type *)&v33);

    std::string::append(&v32, "::");
    std::string::append(&v32, "child_role_count");
    std::string::append(&v32, "=");
    float v22 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMle]);
    std::to_string(&v33, [v22 childRoleCount]);
    sub_10000D650(&v32, (const std::string::value_type *)&v33);

    std::string::append(&v32, "::");
    std::string::append(&v32, "router_role_count");
    std::string::append(&v32, "=");
    BOOL v23 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMle]);
    std::to_string(&v33, [v23 routerRoleCount]);
    sub_10000D650(&v32, (const std::string::value_type *)&v33);

    std::string::append(&v32, "::");
    std::string::append(&v32, "leader_role_count");
    std::string::append(&v32, "=");
    unint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMle]);
    std::to_string(&v33, [v24 leaderRoleCount]);
    sub_10000D650(&v32, (const std::string::value_type *)&v33);

    std::string::append(&v32, "::");
    std::string::append(&v32, "attach_attempts");
    std::string::append(&v32, "=");
    BOOL v25 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMle]);
    std::to_string(&v33, [v25 attachAttempts]);
    sub_10000D650(&v32, (const std::string::value_type *)&v33);

    std::string::append(&v32, "::");
    std::string::append(&v32, "partition_id_changes_count");
    std::string::append(&v32, "=");
    BOOL v26 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMle]);
    std::to_string(&v33, [v26 partitionIdChangesCount]);
    sub_10000D650(&v32, (const std::string::value_type *)&v33);

    std::string::append(&v32, "::");
    std::string::append(&v32, "better_partition_attach_attempts");
    std::string::append(&v32, "=");
    BOOL v27 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMle]);
    std::to_string(&v33, [v27 betterPartitionAttachAttempts]);
    sub_10000D650(&v32, (const std::string::value_type *)&v33);

    std::string::append(&v32, "::");
    std::string::append(&v32, "parent_changes_count");
    std::string::append(&v32, "=");
    unint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsMle]);
    std::to_string(&v33, [v28 parentChangesCount]);
    sub_10000D650(&v32, (const std::string::value_type *)&v33);
  }

  unint64_t v29 = sub_1000160F4("com.apple.wpantund.awd", "default");
  unint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
  {
    BOOL v31 = &v32;
    if ((v32.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      BOOL v31 = (std::string *)v32.__r_.__value_.__r.__words[0];
    }
    LODWORD(v33.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v33.__r_.__value_.__r.__words + 4) = (std::string::size_type)v31;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "AWDMetricsLogger : %s", (uint8_t *)&v33, 0xCu);
  }
}

void sub_10008863C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1000889B0(void *a1)
{
  id v1 = a1;
  memset(&v18, 0, sizeof(v18));
  std::string::append(&v18, "AWDFlagstonePowerMetrics:: ");
  if ([v1 hasHeader])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 header]);
    unsigned int v3 = [v2 hasDaemonVersion];

    if (v3)
    {
      std::string::append(&v18, "DaemonVersion=");
      char v4 = (void *)objc_claimAutoreleasedReturnValue([v1 header]);
      id v5 = objc_claimAutoreleasedReturnValue([v4 daemonVersion]);
      std::string::append(&v18, (const std::string::value_type *)[v5 UTF8String]);

      std::string::append(&v18, "::");
    }

    unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v1 header]);
    unsigned int v7 = [v6 hasVendorVersion];

    if (v7)
    {
      std::string::append(&v18, "VendorVersion=");
      unint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v1 header]);
      id v9 = objc_claimAutoreleasedReturnValue([v8 vendorVersion]);
      std::string::append(&v18, (const std::string::value_type *)[v9 UTF8String]);

      std::string::append(&v18, "::");
    }
  }

  if ([v1 hasSCntrsPower])
  {
    std::string::append(&v18, "hostWakeupsCount=");
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsPower]);
    std::to_string(&v19, [v10 hostWakeupsCount]);
    sub_10000D650(&v18, (const std::string::value_type *)&v19);

    std::string::append(&v18, "::");
    std::string::append(&v18, "hostWakeupsCountHistograms=");
    unint64_t v11 = 0LL;
    while (1)
    {
      unsigned __int8 v12 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsPower]);
      BOOL v13 = (unint64_t)[v12 hostWakeupsCountHistogramsCount] > v11;

      if (!v13) {
        break;
      }
      std::string::append(&v18, "[");
      BOOL v14 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsPower]);
      std::to_string(&v19, *((_DWORD *)[v14 hostWakeupsCountHistograms] + v11));
      sub_10000D650(&v18, (const std::string::value_type *)&v19);

      std::string::append(&v18, "]");
      if (++v11 == 0x80000000)
      {
        __break(0x5500u);
        break;
      }
    }
  }

  __n128 v15 = sub_1000160F4("com.apple.wpantund.awd", "default");
  BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    unint64_t v17 = &v18;
    if ((v18.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      unint64_t v17 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    LODWORD(v19.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v19.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "AWDMetricsLogger : %s", (uint8_t *)&v19, 0xCu);
  }
}

void sub_100088CD4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100088DA4(void *a1)
{
  id v1 = a1;
  memset(&v17, 0, sizeof(v17));
  std::string::append(&v17, "AWDFlagstoneStabilityMetrics:: ");
  if ([v1 hasHeader])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 header]);
    unsigned int v3 = [v2 hasDaemonVersion];

    if (v3)
    {
      std::string::append(&v17, "DaemonVersion=");
      char v4 = (void *)objc_claimAutoreleasedReturnValue([v1 header]);
      id v5 = objc_claimAutoreleasedReturnValue([v4 daemonVersion]);
      std::string::append(&v17, (const std::string::value_type *)[v5 UTF8String]);

      std::string::append(&v17, "::");
    }

    unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v1 header]);
    unsigned int v7 = [v6 hasVendorVersion];

    if (v7)
    {
      std::string::append(&v17, "VendorVersion=");
      unint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v1 header]);
      id v9 = objc_claimAutoreleasedReturnValue([v8 vendorVersion]);
      std::string::append(&v17, (const std::string::value_type *)[v9 UTF8String]);

      std::string::append(&v17, "::");
    }
  }

  if ([v1 hasSCntrsStability])
  {
    std::string::append(&v17, "ncpResetType=");
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsStability]);
    std::to_string(&v18, (int)[v10 ncpResetType]);
    sub_10000D650(&v17, (const std::string::value_type *)&v18);

    std::string::append(&v17, "::");
    std::string::append(&v17, "ncpCrashReason=");
    std::string::append(&v17, "[");
    unint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsStability]);
    id v12 = objc_claimAutoreleasedReturnValue([v11 ncpCrashReason]);
    std::string::append(&v17, (const std::string::value_type *)[v12 UTF8String]);

    std::string::append(&v17, "]");
    std::string::append(&v17, "isMtbfQualified=");
    std::string::append(&v17, "[");
    BOOL v13 = (void *)objc_claimAutoreleasedReturnValue([v1 sCntrsStability]);
    std::to_string(&v18, (int)[v13 isMtbfQualified]);
    sub_10000D650(&v17, (const std::string::value_type *)&v18);

    std::string::append(&v17, "]");
  }

  BOOL v14 = sub_1000160F4("com.apple.wpantund.awd", "default");
  __n128 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    BOOL v16 = &v17;
    if ((v17.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      BOOL v16 = (std::string *)v17.__r_.__value_.__r.__words[0];
    }
    LODWORD(v18.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v18.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "AWDMetricsLogger : %s", (uint8_t *)&v18, 0xCu);
  }
}

void sub_1000890D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1000891C0(void *a1)
{
  id v1 = a1;
  memset(&v9, 0, sizeof(v9));
  std::string::append(&v9, "AWDFlagstoneTopologyMetrics:: ");
  if ([v1 hasHeader])
  {
    std::string::append(&v9, "NodeCountArray");
    std::string::append(&v9, "=");
    unint64_t v2 = 0LL;
    while ((unint64_t)[v1 nodeCountsCount] > v2)
    {
      std::string::append(&v9, "[");
      std::to_string(&v10, *((_DWORD *)[v1 nodeCounts] + v2));
      sub_10000D650(&v9, (const std::string::value_type *)&v10);
      std::string::append(&v9, "]");
      if (++v2 == 0x80000000)
      {
LABEL_25:
        __break(0x5500u);
        goto LABEL_26;
      }
    }

    std::string::append(&v9, "::");
    std::string::append(&v9, "RouterCountArray");
    std::string::append(&v9, "=");
    unint64_t v3 = 0LL;
    while ((unint64_t)[v1 routerCountsCount] > v3)
    {
      std::string::append(&v9, "[");
      std::to_string(&v10, *((_DWORD *)[v1 routerCounts] + v3));
      sub_10000D650(&v9, (const std::string::value_type *)&v10);
      std::string::append(&v9, "]");
      if (++v3 == 0x80000000) {
        goto LABEL_25;
      }
    }

    std::string::append(&v9, "::");
    std::string::append(&v9, "FedCountArray");
    std::string::append(&v9, "=");
    unint64_t v4 = 0LL;
    while ((unint64_t)[v1 fEDCountsCount] > v4)
    {
      std::string::append(&v9, "[");
      std::to_string(&v10, *((_DWORD *)[v1 fEDCounts] + v4));
      sub_10000D650(&v9, (const std::string::value_type *)&v10);
      std::string::append(&v9, "]");
      if (++v4 == 0x80000000) {
        goto LABEL_25;
      }
    }

    std::string::append(&v9, "::");
    std::string::append(&v9, "SedCountArray");
    std::string::append(&v9, "=");
    unint64_t v5 = 0LL;
    while ((unint64_t)[v1 sEDCountsCount] > v5)
    {
      std::string::append(&v9, "[");
      std::to_string(&v10, *((_DWORD *)[v1 sEDCounts] + v5));
      sub_10000D650(&v9, (const std::string::value_type *)&v10);
      std::string::append(&v9, "]");
      if (++v5 == 0x80000000) {
        goto LABEL_25;
      }
    }

void sub_100089640( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }

  _Unwind_Resume(a1);
}

void sub_1000896C0(void *a1)
{
  id v1 = a1;
  memset(&v13, 0, sizeof(v13));
  std::string::append(&v13, "AWDFlagstoneCTCSNumberOfThirdPartyBRs:: ");
  if ([v1 hasHeader])
  {
    unint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 header]);
    unsigned int v3 = [v2 hasDaemonVersion];

    if (v3)
    {
      std::string::append(&v13, "DaemonVersion=");
      unint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v1 header]);
      id v5 = objc_claimAutoreleasedReturnValue([v4 daemonVersion]);
      std::string::append(&v13, (const std::string::value_type *)[v5 UTF8String]);

      std::string::append(&v13, "::");
    }

    unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v1 header]);
    unsigned int v7 = [v6 hasVendorVersion];

    if (v7)
    {
      std::string::append(&v13, "VendorVersion=");
      unint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v1 header]);
      id v9 = objc_claimAutoreleasedReturnValue([v8 vendorVersion]);
      std::string::append(&v13, (const std::string::value_type *)[v9 UTF8String]);

      std::string::append(&v13, "::");
    }
  }

  if ([v1 hasNumberOfThirdPartyBorderRouters])
  {
    std::string::append(&v13, "numThirdPartyBRs=");
    std::to_string(&v14, [v1 numberOfThirdPartyBorderRouters]);
    sub_10000D650(&v13, (const std::string::value_type *)&v14);
    std::string::append(&v13, "::");
  }

  std::string v10 = sub_1000160F4("com.apple.wpantund.awd", "default");
  unint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    id v12 = &v13;
    if ((v13.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      id v12 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    LODWORD(v14.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v14.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "AWDMetricsLogger : %s", (uint8_t *)&v14, 0xCu);
  }
}

void sub_100089910( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1000899A8(void *a1)
{
  id v1 = a1;
  memset(&v13, 0, sizeof(v13));
  std::string::append(&v13, "AWDFlagstoneCTCSNumberOfPreferredNetworksByBorderRouters:: ");
  if ([v1 hasHeader])
  {
    unint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 header]);
    unsigned int v3 = [v2 hasDaemonVersion];

    if (v3)
    {
      std::string::append(&v13, "DaemonVersion=");
      unint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v1 header]);
      id v5 = objc_claimAutoreleasedReturnValue([v4 daemonVersion]);
      std::string::append(&v13, (const std::string::value_type *)[v5 UTF8String]);

      std::string::append(&v13, "::");
    }

    unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v1 header]);
    unsigned int v7 = [v6 hasVendorVersion];

    if (v7)
    {
      std::string::append(&v13, "VendorVersion=");
      unint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v1 header]);
      id v9 = objc_claimAutoreleasedReturnValue([v8 vendorVersion]);
      std::string::append(&v13, (const std::string::value_type *)[v9 UTF8String]);

      std::string::append(&v13, "::");
    }
  }

  if ([v1 hasNumberOfPreferredNwByAppleBorderRouters])
  {
    std::string::append(&v13, "numPreferredNwByAppleBorderRouters=");
    std::to_string(&v14, [v1 numberOfPreferredNwByAppleBorderRouters]);
    sub_10000D650(&v13, (const std::string::value_type *)&v14);
    std::string::append(&v13, "::");
  }

  if ([v1 hasNumberOfPreferredNwByThirdPartyBorderRouters])
  {
    std::string::append(&v13, "hasNumberOfPreferredNwByThirdPartyBorderRouters=");
    std::to_string(&v14, (int)[v1 hasNumberOfPreferredNwByThirdPartyBorderRouters]);
    sub_10000D650(&v13, (const std::string::value_type *)&v14);
    std::string::append(&v13, "::");
  }

  std::string v10 = sub_1000160F4("com.apple.wpantund.awd", "default");
  unint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    id v12 = &v13;
    if ((v13.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      id v12 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    LODWORD(v14.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v14.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "AWDMetricsLogger : %s", (uint8_t *)&v14, 0xCu);
  }
}

void sub_100089C50( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void *sub_100089CF0( uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4, __int16 a5, int a6, char a7, char a8, __int16 a9)
{
  v19[0] = 0LL;
  sub_100007640((uint64_t)v19, a3);
  sub_1000342C8(a1, a2, v19);
  size_t result = sub_100006E7C(v19);
  int v17 = 0;
  *(void *)a1 = &off_1002B0918;
  *(_BYTE *)(a1 + 168) = 0;
  *(_WORD *)(a1 + 170) = a5;
  *(_DWORD *)(a1 + 172) = a6;
  *(_BYTE *)(a1 + 176) = a7;
  *(_BYTE *)(a1 + 177) = a8;
  *(_WORD *)(a1 + 178) = a9;
  *(_BYTE *)(a1 + 180) = 0;
  while (((a4 >> v17) & 1) == 0)
  {
LABEL_5:
    if (++v17 == 32) {
      return (void *)a1;
    }
  }

  unint64_t v18 = *(unsigned __int8 *)(a1 + 168);
  *(_BYTE *)(a1 + 168) = v18 + 1;
  if (v18 < 0x20)
  {
    *(_BYTE *)(a1 + v18 + 136) = v17;
    goto LABEL_5;
  }

  __break(0x5512u);
  return result;
}

void sub_100089DD4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_100089DE8( uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4, __int16 a5, int a6, char a7, char a8, __int16 a9)
{
  return sub_100089CF0(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_100089DF8( uint64_t a1, unsigned int a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = a3;
  std::string v66 = a3;
  int v11 = *(unsigned __int16 *)(a1 + 8);
  uint64_t result = 3LL;
  if (v11 <= 139)
  {
    if (v11 > 107)
    {
      if (v11 != 108)
      {
        if (v11 != 120)
        {
          if (v11 != 130) {
            goto LABEL_109;
          }
LABEL_20:
          LODWORD(v13) = *(_DWORD *)(a1 + 128);
          if ((_DWORD)v13)
          {
            std::string v14 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
            if (v14)
            {
              goto LABEL_163;
            }

            if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              goto LABEL_163;
            }
            goto LABEL_181;
          }

          sub_100034C60("CiiS", &v67.__sig, 0x80u);
          sub_100006EFC(a1 + 104, (__n128 *)&v67);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
          sub_100006F6C((void ***)&__p);
          *(_WORD *)(a1 + 98) = 0;
          *(_WORD *)(a1 + 8) = 140;
LABEL_58:
          LODWORD(v13) = *(_DWORD *)(a1 + 128);
          if ((_DWORD)v13)
          {
            unint64_t v21 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
            if (v21)
            {
              goto LABEL_163;
            }

            if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              goto LABEL_163;
            }
            goto LABEL_181;
          }

          unsigned int v22 = sub_1000D8DE8(*(void *)(a1 + 56));
          if ((sub_1000B50B8(v22) & 1) == 0)
          {
            sub_100034C60("Ciib", &v67.__sig, 0x80u);
            sub_100006EFC(a1 + 104, (__n128 *)&v67);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
            sub_100006F6C((void ***)&__p);
            *(_WORD *)(a1 + 98) = 0;
            *(_WORD *)(a1 + 8) = 151;
LABEL_66:
            LODWORD(v13) = *(_DWORD *)(a1 + 128);
            if ((_DWORD)v13 && (_DWORD)v13 != 10)
            {
              BOOL v26 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
              if (v26)
              {
                goto LABEL_163;
              }

              if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                goto LABEL_163;
              }
              goto LABEL_181;
            }

            *(_BYTE *)(a1 + 180) = 1;
          }

LABEL_70:
          sub_100034C60("CiiS", &v67.__sig, 0x80u);
          sub_100006EFC(a1 + 104, (__n128 *)&v67);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
          sub_100006F6C((void ***)&__p);
          *(_WORD *)(a1 + 98) = 0;
          *(_WORD *)(a1 + 8) = 164;
LABEL_71:
          LODWORD(v13) = *(_DWORD *)(a1 + 128);
          if (!(_DWORD)v13)
          {
            if (*(_DWORD *)(a1 + 172) > 2u)
            {
              LODWORD(v13) = 2;
              goto LABEL_163;
            }

            sub_100034C60("CiiC", &v67.__sig, 0x80u);
            sub_100006EFC(a1 + 104, (__n128 *)&v67);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
            sub_100006F6C((void ***)&__p);
            *(_WORD *)(a1 + 98) = 0;
            *(_WORD *)(a1 + 8) = 188;
            goto LABEL_79;
          }

          BOOL v23 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v23)
          {
            goto LABEL_163;
          }

          if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            goto LABEL_163;
          }
LABEL_181:
          sub_1001FB53C();
          goto LABEL_163;
        }

    fprintf( v22,  "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/wpantund/src/ncp-spinel/spinel-extra.c:%d: Requirement Failed (%s)\n",  v24,  v23);
    return 9LL;
  }

  switch(*v3)
  {
    case 'c':
      goto LABEL_33;
    case 'd':
      goto LABEL_25;
    case 'e':
      if (v8 > 5)
      {
        std::string v19 = v8 - 6;
        BOOL v20 = v1 + 6;
        goto LABEL_54;
      }

      unsigned int v22 = __stderrp;
      BOOL v23 = "scratchpad.data_len >= sizeof(spinel_eui48_t)";
      unint64_t v24 = 120;
      goto LABEL_70;
    case 'f':
    case 'g':
    case 'h':
    case 'j':
    case 'k':
      return result;
    case 'i':
      uint64_t result = (size_t)spinel_packed_uint_decode(v1, v8, 0LL);
      if ((int)result < 1)
      {
        unsigned int v22 = __stderrp;
        BOOL v23 = "pui_len > 0";
        unint64_t v24 = 128;
        goto LABEL_70;
      }

      std::string v19 = v8 - result;
      if (__OFSUB__((_DWORD)v8, (_DWORD)result)) {
        goto LABEL_74;
      }
      break;
    case 'l':
      goto LABEL_36;
    default:
      if (v18 != 85) {
        return result;
      }
      uint64_t result = strnlen(v1, v8);
      int v25 = result + 1;
      if (result == -1LL) {
        goto LABEL_75;
      }
      std::string v19 = v8 - v25;
      if (v8 < v25) {
        goto LABEL_74;
      }
      BOOL v20 = &v1[v25];
      goto LABEL_54;
  }

          BOOL v20 = *(void *)&__p[8];
        }

        if (v20 == 8)
        {
          if (**(void **)__p == 0x697373527473614CLL)
          {
LABEL_98:
            uint64_t v35 = xpc_dictionary_get_int64(v17, "value");
            *(_WORD *)((char *)&unk_1002CA1D0 + v15 + 300) = v35;
            goto LABEL_185;
          }

  unint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", self->_rtt90perc));
  [v3 setObject:v18 forKey:@"rtt_90perc"];

  unint64_t v8 = self->_has;
  if ((*(_WORD *)&v8 & 0x2000) == 0)
  {
LABEL_13:
    if ((*(_WORD *)&v8 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_72;
  }

  PBDataWriterWriteUint32Field(v7, self->_rtt90perc, 9LL);
  unsigned int v6 = self->_has;
  if ((*(_WORD *)&v6 & 0x2000) == 0)
  {
LABEL_13:
    if ((*(_WORD *)&v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_72;
  }

  uint8_t v4[16] = self->_rtt90perc;
  *((void *)v4 + 31) |= 0x4000uLL;
  unsigned int v6 = self->_has;
  if ((*(_WORD *)&v6 & 0x2000) == 0)
  {
LABEL_13:
    if ((*(_WORD *)&v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_72;
  }

  *((_DWORD *)v6 + 14) = self->_retryIntervalMax;
  v6[31] |= 0x1000uLL;
  std::string v10 = self->_has;
  if ((*(_WORD *)&v10 & 0x800) == 0)
  {
LABEL_13:
    if ((*(_WORD *)&v10 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_72;
  }

  uint64_t v52 = 0LL;
  if ((*(_WORD *)&v4 & 0x400) != 0)
  {
LABEL_18:
    uint64_t v51 = 2654435761LL * self->_retryInterval90perc;
    if ((*(void *)&v4 & 0x8000000000LL) != 0) {
      goto LABEL_19;
    }
    goto LABEL_72;
  }
}

LABEL_162:
        LODWORD(v13) = 0;
        goto LABEL_163;
      }

      return 0LL;
    }

    sub_10015A00C(a1);
    *(_WORD *)(a1 + 8) = 97;
    goto LABEL_11;
  }

  if (v11 <= 187)
  {
    if (v11 != 140)
    {
      if (v11 != 151)
      {
        if (v11 != 164) {
          goto LABEL_109;
        }
        goto LABEL_71;
      }

      goto LABEL_66;
    }

    goto LABEL_58;
  }

  if (v11 > 296)
  {
    if (v11 != 297)
    {
      if (v11 != 320) {
        goto LABEL_109;
      }
      uint64_t v13 = 0LL;
      goto LABEL_168;
    }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_163:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          char v89 = 0LL;
        }
        else {
          char v89 = v60;
        }
LABEL_166:
        uint64_t result = PBRepeatedUInt32Add(result, v89);
        continue;
      case 2u:
        if (v14 != 2)
        {
          uint64_t v64 = 0;
          BOOL v65 = 0;
          __int16 v60 = 0LL;
          uint64_t result = v3 + 128;
          while (1)
          {
            std::string v66 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            pthread_mutex_t v67 = v66 + 1;
            if (v66 == -1) {
              goto LABEL_169;
            }
            if (v67 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              goto LABEL_162;
            }
            unsigned int v68 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v66);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v67;
            v60 |= (unint64_t)(v68 & 0x7F) << v64;
            if ((v68 & 0x80) == 0) {
              goto LABEL_163;
            }
            v64 += 7;
            int v11 = v65++ >= 9;
            if (v11) {
              goto LABEL_161;
            }
          }
        }

        uint64_t result = PBReaderPlaceMark(a2, v90);
        if (!(_DWORD)result) {
          return result;
        }
        while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
             && !*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        {
          BOOL v23 = 0;
          unint64_t v24 = 0;
          int v25 = 0LL;
          while (1)
          {
            BOOL v26 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            uint64_t v27 = v26 + 1;
            if (v26 == -1) {
              goto LABEL_169;
            }
            if (v27 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            uint64_t v28 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27;
            v25 |= (unint64_t)(v28 & 0x7F) << v23;
            if ((v28 & 0x80) == 0) {
              goto LABEL_51;
            }
            v23 += 7;
            int v11 = v24++ >= 9;
            if (v11)
            {
              uint64_t v29 = 0LL;
              goto LABEL_54;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_51:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v29 = 0LL;
          }
          else {
            uint64_t v29 = v25;
          }
LABEL_54:
          uint64_t result = PBRepeatedUInt32Add(v3 + 128, v29);
        }

        goto LABEL_119;
      case 3u:
        if (v14 != 2)
        {
          uint64_t v69 = 0;
          unint64_t v70 = 0;
          __int16 v60 = 0LL;
          uint64_t result = v3 + 56;
          while (1)
          {
            char v71 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            char v72 = v71 + 1;
            if (v71 == -1) {
              goto LABEL_169;
            }
            if (v72 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              goto LABEL_162;
            }
            unsigned int v73 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v71);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v72;
            v60 |= (unint64_t)(v73 & 0x7F) << v69;
            if ((v73 & 0x80) == 0) {
              goto LABEL_163;
            }
            v69 += 7;
            int v11 = v70++ >= 9;
            if (v11) {
              goto LABEL_161;
            }
          }
        }

        uint64_t result = PBReaderPlaceMark(a2, v90);
        if (!(_DWORD)result) {
          return result;
        }
        while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
             && !*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        {
          uint64_t v30 = 0;
          uint64_t v31 = 0;
          std::string v32 = 0LL;
          while (1)
          {
            unsigned int v33 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            uint64_t v34 = v33 + 1;
            if (v33 == -1) {
              goto LABEL_169;
            }
            if (v34 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            uint64_t v35 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34;
            v32 |= (unint64_t)(v35 & 0x7F) << v30;
            if ((v35 & 0x80) == 0) {
              goto LABEL_67;
            }
            v30 += 7;
            int v11 = v31++ >= 9;
            if (v11)
            {
              BOOL v36 = 0LL;
              goto LABEL_70;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_67:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            BOOL v36 = 0LL;
          }
          else {
            BOOL v36 = v32;
          }
LABEL_70:
          uint64_t result = PBRepeatedUInt32Add(v3 + 56, v36);
        }

        goto LABEL_119;
      case 4u:
        if (v14 != 2)
        {
          uint64_t v74 = 0;
          unint64_t v75 = 0;
          __int16 v60 = 0LL;
          uint64_t result = v3 + 104;
          while (1)
          {
            char v76 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            std::string v77 = v76 + 1;
            if (v76 == -1) {
              goto LABEL_169;
            }
            if (v77 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              goto LABEL_162;
            }
            std::string v78 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v76);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v77;
            v60 |= (unint64_t)(v78 & 0x7F) << v74;
            if ((v78 & 0x80) == 0) {
              goto LABEL_163;
            }
            v74 += 7;
            int v11 = v75++ >= 9;
            if (v11) {
              goto LABEL_161;
            }
          }
        }

        uint64_t result = PBReaderPlaceMark(a2, v90);
        if (!(_DWORD)result) {
          return result;
        }
        while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
             && !*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        {
          uint64_t v37 = 0;
          uint64_t v38 = 0;
          uint64_t v39 = 0LL;
          while (1)
          {
            uint64_t v40 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            uint64_t v41 = v40 + 1;
            if (v40 == -1) {
              goto LABEL_169;
            }
            if (v41 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            uint64_t v42 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v40);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v41;
            v39 |= (unint64_t)(v42 & 0x7F) << v37;
            if ((v42 & 0x80) == 0) {
              goto LABEL_83;
            }
            v37 += 7;
            int v11 = v38++ >= 9;
            if (v11)
            {
              uint64_t v43 = 0LL;
              goto LABEL_86;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_83:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v43 = 0LL;
          }
          else {
            uint64_t v43 = v39;
          }
LABEL_86:
          uint64_t result = PBRepeatedUInt32Add(v3 + 104, v43);
        }

        goto LABEL_119;
      case 5u:
        if (v14 == 2)
        {
          uint64_t result = PBReaderPlaceMark(a2, v90);
          if (!(_DWORD)result) {
            return result;
          }
          while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
               && !*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          {
            uint64_t v44 = 0;
            uint64_t v45 = 0;
            uint64_t v46 = 0LL;
            while (1)
            {
              uint64_t v47 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              uint64_t v48 = v47 + 1;
              if (v47 == -1) {
                goto LABEL_169;
              }
              if (v48 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                break;
              }
              uint64_t v49 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v47);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v48;
              v46 |= (unint64_t)(v49 & 0x7F) << v44;
              if ((v49 & 0x80) == 0) {
                goto LABEL_99;
              }
              v44 += 7;
              int v11 = v45++ >= 9;
              if (v11)
              {
                uint64_t v50 = 0LL;
                goto LABEL_102;
              }
            }

            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_99:
            if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
              uint64_t v50 = 0LL;
            }
            else {
              uint64_t v50 = v46;
            }
LABEL_102:
            uint64_t result = PBRepeatedUInt32Add(v3 + 32, v50);
          }

      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
LABEL_164:
      if (count == ++v11) {
        goto LABEL_167;
      }
    }
  }

  id v5 = 0LL;
LABEL_167:
  [v56 setSCntrsMle:v10];

  unsigned int v6 = 0LL;
LABEL_168:

  return v6;
}

LABEL_145:
  if (*(_BYTE *)(a1 + 180))
  {
    sub_100034C60("Ciib", &v67.__sig, 0x80u);
    sub_100006EFC(a1 + 104, (__n128 *)&v67);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
    sub_100006F6C((void ***)&__p);
    *(_WORD *)(a1 + 98) = 0;
    *(_WORD *)(a1 + 8) = 297;
    unint64_t v8 = v66;
    goto LABEL_147;
  }

  uint64_t v13 = 0LL;
LABEL_156:
  v67.__sig = 0LL;
  (*(void (**)(uint64_t, uint64_t, pthread_mutex_t *))(*(void *)a1 + 32LL))(a1, v13, &v67);
LABEL_157:
  if (v67.__sig) {
    (*(void (**)(uint64_t))(*(void *)v67.__sig + 8LL))(v67.__sig);
  }
  uint64_t result = 2LL;
LABEL_109:
  *(_WORD *)(a1 + 8) = 0;
  return result;
}

void sub_10008ABF0()
{
  uint64_t v1 = *(void *)(v0 - 112);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  JUMPOUT(0x10008AC40LL);
}

void sub_10008AC10( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_10008AC48(uint64_t a1, pthread_mutex_t *a2)
{
  return sub_10008ACF8(*(void *)(a1 + 8), a2);
}

uint64_t *sub_10008AC50(uint64_t a1, pthread_mutex_t *a2)
{
  return sub_10008BB70(*(void *)(a1 + 8), a2);
}

void sub_10008AC5C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100034374(a1);
  operator delete(v1);
}

std::string *sub_10008AC70( std::string *a1, const std::string *a2, std::string::size_type *a3, __int16 a4, std::string::value_type a5, std::string::value_type a6)
{
  uint64_t result = sub_10008ACC4(a1, a2, a3);
  LOWORD(result[1].__r_.__value_.__r.__words[1]) = a4;
  result[1].__r_.__value_.__s.__data_[10] = a5;
  result[1].__r_.__value_.__s.__data_[11] = a6;
  result[1].__r_.__value_.__s.__data_[12] = 0x80;
  result[1].__r_.__value_.__s.__data_[14] = 0;
  *(std::string::size_type *)((char *)&result[1].__r_.__value_.__r.__words[1] + 7) = 0LL;
  result[2].__r_.__value_.__s.__data_[2] = 0;
  HIDWORD(result[2].__r_.__value_.__r.__words[0]) = 0;
  return result;
}

std::string *sub_10008ACC4(std::string *a1, const std::string *a2, std::string::size_type *a3)
{
  uint64_t result = std::string::basic_string(a1, a2);
  if (a3) {
    std::string::size_type v5 = *a3;
  }
  else {
    std::string::size_type v5 = 0LL;
  }
  result[1].__r_.__value_.__r.__words[0] = v5;
  return result;
}

uint64_t *sub_10008ACF8(uint64_t a1, pthread_mutex_t *a2)
{
  __int128 v14 = 0uLL;
  sub_100010030(&v17, *(pthread_mutex_t **)(a1 + 24));
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    unsigned int v5 = atomic_load((unsigned int *)(v4 + 8));
    if (v5 == 1) {
      sub_10002C4E8((uint64_t *)a1, &v17, 0LL, 1);
    }
  }

  sub_10008AE9C(&v14, (uint64_t *)a1);
  sub_10000F788(v19);
  sub_10000F8D8(&v17);
  LOBYTE(v17) = 0;
  v19[8] = (pthread_mutex_t *)10;
  v19[9] = (pthread_mutex_t *)&v18;
  v19[10] = 0LL;
  v19[11] = a2;
  v19[12] = 0LL;
  v19[13] = 0LL;
  uint64_t v6 = *(void *)v14;
  v13[0] = (uint64_t)&v17;
  v13[1] = a1;
  v13[2] = v6;
  uint64_t v7 = *(void *)(v14 + 16);
  *(void *)&__int128 v11 = *(void *)(v6 + 8);
  *((void *)&v11 + 1) = v6;
  *(void *)&__int128 v12 = &v17;
  *((void *)&v12 + 1) = v6;
  sub_10008B160((uint64_t *)&v11);
  *(void *)&__int128 v9 = *(void *)v14;
  *((void *)&v9 + 1) = v9;
  *(void *)&__int128 v10 = &v17;
  *((void *)&v10 + 1) = v9;
  sub_10008B160((uint64_t *)&v9);
  v16[0] = v11;
  v16[1] = v12;
  v15[0] = v9;
  v15[1] = v10;
  sub_10008AEF8(v7, (uint64_t *)v16, v15);
  sub_10008B940(v13);
  sub_10008BAA4((uint64_t)&v17);
  return sub_10000F9EC((uint64_t *)&v14 + 1);
}

void sub_10008AE54( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31)
{
}

__int128 *sub_10008AE9C(__int128 *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3)
  {
    unsigned int v5 = (unsigned int *)(v3 + 8);
    do
      unsigned int v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  __int128 v7 = *a1;
  *(void *)a1 = v4;
  *((void *)a1 + 1) = v3;
  *((void *)&v9 + 1) = *((void *)&v7 + 1);
  sub_10000F9EC((uint64_t *)&v9 + 1);
  return a1;
}

uint64_t *sub_10008AEF8(uint64_t a1, uint64_t *a2, void *a3)
{
  while (*a2 != *a3)
  {
    sub_10008AF48(a2);
    uint64_t result = sub_10008B124(a2);
  }

  return result;
}

uint64_t sub_10008AF48(void *a1)
{
  unint64_t v2 = (_BYTE *)a1[2];
  if (!*v2)
  {
    sub_10008AFD4((uint64_t)(v2 + 272), *a1 + 16LL);
    if (!*v2) {
      *unint64_t v2 = 1;
    }
  }

  return a1[2] + 1LL;
}

uint64_t sub_10008AFD4(uint64_t a1, uint64_t a2)
{
  return sub_10008B0A4((uint64_t)&v3, (void *)(*(void *)(*(void *)a2 + 32LL) + 24LL));
}

void *sub_10008B004(uint64_t *a1)
{
  return sub_10000F8D8(v3);
}

void sub_10008B080(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10008B0A4(uint64_t a1, void *a2)
{
  return sub_10008B0B0(a2);
}

uint64_t sub_10008B0B0(void *a1)
{
  if (!*a1)
  {
    std::runtime_error::runtime_error(&v2, "call to empty boost::function");
    v2.__vftable = (std::runtime_error_vtbl *)&off_1002AD8D8;
    sub_10000706C(&v2);
  }

  return (*(uint64_t (**)(void *))((*a1 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 1);
}

void sub_10008B110( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
}

uint64_t *sub_10008B124(uint64_t *a1)
{
  *a1 = *(void *)(*a1 + 8);
  uint64_t result = sub_10008B160(a1);
  char v3 = (_BYTE *)a1[2];
  if (*v3) {
    _BYTE *v3 = 0;
  }
  return result;
}

uint64_t *sub_10008B160(uint64_t *result)
{
  uint64_t v1 = *result;
  if (*result != result[3])
  {
    std::runtime_error v2 = result;
    if (v1 == result[1]) {
      goto LABEL_12;
    }
    while (1)
    {
      sub_10008B464((uint64_t *)(v2[2] + 8), *(void *)(v2[2] + 264));
      sub_10000F810(v12, *(void *)(*v2 + 16));
      sub_10008B320(*(uint64_t **)(*v2 + 16), v12, v2[2] + 8);
      uint64_t v3 = *(void *)(*v2 + 16);
      uint64_t v4 = v2[2];
      if (*(_BYTE *)(v3 + 24))
      {
        int v5 = *(_DWORD *)(v4 + 280);
        BOOL v6 = __CFADD__(v5, 1);
        int v7 = v5 + 1;
        if (v6) {
          goto LABEL_15;
        }
        *(_DWORD *)(v4 + 280) = v7;
      }

      else
      {
        int v8 = *(_DWORD *)(v4 + 284);
        BOOL v6 = __CFADD__(v8, 1);
        int v9 = v8 + 1;
        if (v6) {
LABEL_15:
        }
          __break(0x5500u);
        *(_DWORD *)(v4 + 284) = v9;
      }

      if (!sub_10008B410(v3)) {
        break;
      }
      sub_10000FE20(&v13);
      uint64_t result = sub_10000F8D8(v12);
      uint64_t v10 = v2[1];
      uint64_t v1 = *(void *)(*v2 + 8);
      *std::runtime_error v2 = v1;
      if (v1 == v10) {
        goto LABEL_12;
      }
    }

    sub_10008B444(v2, v12, *v2);
    sub_10000FE20(&v13);
    uint64_t result = sub_10000F8D8(v12);
    uint64_t v1 = v2[1];
    if (*v2 == v1)
    {
LABEL_12:
      uint64_t v11 = v2[3];
      if (v11 != v1)
      {
        sub_10000F810(v12, *(void *)(v11 + 16));
        sub_10008B444(v2, v12, v2[1]);
        sub_10000FE20(&v13);
        return sub_10000F8D8(v12);
      }
    }
  }

  return result;
}

void sub_10008B2EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_10008B320(uint64_t *result, void *a2, uint64_t a3)
{
  uint64_t v3 = (_DWORD **)result[4];
  if (v3)
  {
    BOOL v6 = result;
    for (unint64_t i = *v3; i != v3[1]; i += 6)
    {
      sub_100012108(i, (uint64_t)v9);
      if (sub_100011134((uint64_t)i, (uint64_t)&v8))
      {
        sub_10000F6C4(v6, a2);
        return sub_1000122FC((uint64_t)v9);
      }

      sub_10008B4F8(a3, v9);
      uint64_t result = sub_1000122FC((uint64_t)v9);
      uint64_t v3 = (_DWORD **)v6[4];
    }
  }

  return result;
}

void sub_10008B3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

BOOL sub_10008B410(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    return 1LL;
  }
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0LL;
  }
  unsigned int v2 = atomic_load((unsigned int *)(v1 + 8));
  return v2 != 0;
}

uint64_t *sub_10008B444(void *a1, void *a2, uint64_t a3)
{
  a1[3] = a3;
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  if (v4 == a3) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = *(void *)(a3 + 16);
  }
  return sub_10008B8F8(v3, a2, v5);
}

uint64_t *sub_10008B464(uint64_t *result, unint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t result = sub_10008B4AC(result, a2);
    unint64_t v4 = v3[32];
    BOOL v5 = v4 >= a2;
    unint64_t v6 = v4 - a2;
    if (v5) {
      v3[32] = v6;
    }
    else {
      __break(0x5515u);
    }
  }

  return result;
}

uint64_t *sub_10008B4AC(uint64_t *result, uint64_t a2)
{
  if (a2 - 1 >= 0)
  {
    uint64_t v2 = result[31] + 24 * result[32];
    unint64_t v3 = v2 + 24 * ~a2;
    unint64_t v4 = v2 - 24;
    do
    {
      uint64_t result = sub_1000122FC(v4);
      v4 -= 24LL;
    }

    while (v4 > v3);
  }

  return result;
}

uint64_t sub_10008B4F8(uint64_t result, _DWORD *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 256);
  if (v4 != *(void *)(result + 240)) {
    return sub_10008B544(v3, a2);
  }
  if (v4 != -1)
  {
    sub_10008B584(result, v4 + 1);
    return sub_10008B544(v3, a2);
  }

  __break(0x5500u);
  return result;
}

uint64_t sub_10008B544(uint64_t a1, _DWORD *a2)
{
  uint64_t result = sub_10008B5B0(*(void *)(a1 + 248) + 24LL * *(void *)(a1 + 256), a2);
  uint64_t v4 = *(void *)(a1 + 256);
  BOOL v5 = __CFADD__(v4, 1LL);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(0x5500u);
  }
  else {
    *(void *)(a1 + 256) = v6;
  }
  return result;
}

void sub_10008B584(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 240);
  if (v2 < a2)
  {
    if (v2 >> 62)
    {
      __break(0x550Cu);
    }

    else
    {
      unint64_t v3 = 4 * v2;
      if (v3 > a2) {
        a2 = v3;
      }
      sub_10008B650(a1, a2);
    }
  }

uint64_t sub_10008B5B0(uint64_t a1, _DWORD *a2)
{
  int v7 = (void *)(a1 + 8);
  int v5 = *a2;
  uint64_t v4 = a2 + 2;
  if (v5 == v5 >> 31) {
    sub_10008B628(&v7, v4);
  }
  else {
    *(void *)(a1 + 8) = (*(uint64_t (**)(void))(*(void *)*v4 + 16LL))(*v4);
  }
  *(_DWORD *)a1 = *a2 ^ ((int)*a2 >> 31);
  return a1;
}

void **sub_10008B628(void **result, void *a2)
{
  unint64_t v2 = *result;
  uint64_t v3 = a2[1];
  *unint64_t v2 = *a2;
  v2[1] = v3;
  if (v3)
  {
    uint64_t v4 = (unsigned int *)(v3 + 8);
    do
      unsigned int v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  return result;
}

void sub_10008B650(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_10008B698(a1, a2);
  sub_10008B738(a1);
  *(void *)(a1 + 240) = a2;
  *(void *)(a1 + 248) = v4;
}

uint64_t sub_10008B698(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = a1;
  if (a2 >= 0xB) {
    uint64_t v4 = (uint64_t)sub_100011C1C(a1, a2);
  }
  LOBYTE(v6[0]) = 0;
  v6[1] = a1;
  v6[2] = sub_10008B760;
  v6[3] = 0LL;
  uint64_t v6[4] = v4;
  v6[5] = a2;
  sub_10008B78C(*(void *)(a1 + 248), *(void *)(a1 + 248) + 24LL * *(void *)(a1 + 256), v4);
  LOBYTE(v6[0]) = 1;
  sub_10008B820(v6);
  return v4;
}

void sub_10008B724( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10008B738(uint64_t a1)
{
  if (*(void *)(a1 + 248)) {
    sub_10008B894(a1);
  }
}

void sub_10008B760(int a1, void *__p, unint64_t a3)
{
  if (a3 >= 0xB)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL) {
      __break(0x550Cu);
    }
    else {
      operator delete(__p);
    }
  }

uint64_t sub_10008B78C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0LL;
    do
    {
      sub_10008B5B0(a3 + v6, (_DWORD *)(a1 + v6));
      v6 += 24LL;
    }

    while (a1 + v6 != a2);
    a3 += v6;
  }

  return a3;
}

void sub_10008B7E8(void *a1)
{
  for (; v2; v2 -= 24LL)
  {
    sub_1000122FC(v1);
    v1 += 24LL;
  }

  __cxa_rethrow();
}

void sub_10008B80C(_Unwind_Exception *a1)
{
}

void *sub_10008B820(void *a1)
{
  return a1;
}

void *sub_10008B848(void *result)
{
  if (!*(_BYTE *)result) {
    return (void *)sub_10008B870(result);
  }
  return result;
}

void sub_10008B864(void *a1)
{
}

uint64_t sub_10008B870(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *, void, void))a1[2];
  uint64_t v2 = a1[3];
  uint64_t v3 = (void *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0) {
    uint64_t v1 = *(uint64_t (**)(void *, void, void))(*v3 + v1);
  }
  return v1(v3, a1[4], a1[5]);
}

void sub_10008B894(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 256);
  if (v2) {
    sub_10008B4AC((uint64_t *)a1, v2);
  }
  unint64_t v3 = *(void *)(a1 + 240);
  if (v3 >= 0xB)
  {
    if (v3 >= 0xAAAAAAAAAAAAAABLL) {
      __break(0x550Cu);
    }
    else {
      operator delete(*(void **)(a1 + 248));
    }
  }

uint64_t *sub_10008B8F8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result = *(uint64_t **)(a1 + 288);
  if (result) {
    uint64_t result = sub_10000FB70(result, a2);
  }
  *(void *)(a1 + 288) = a3;
  if (a3)
  {
    int v6 = *(_DWORD *)(a3 + 28);
    BOOL v7 = __CFADD__(v6, 1);
    int v8 = v6 + 1;
    if (v7) {
      __break(0x5500u);
    }
    else {
      *(_DWORD *)(a3 + 28) = v8;
    }
  }

  return result;
}

uint64_t *sub_10008B940(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 284) > *(_DWORD *)(*a1 + 280)) {
    sub_10008B980(a1[1], a1[2]);
  }
  return a1;
}

void *sub_10008B980(uint64_t a1, uint64_t a2)
{
  if (**(void **)a1 == a2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4 || (unsigned int v5 = atomic_load((unsigned int *)(v4 + 8)), v5 != 1))
    {
      int v6 = (uint64_t *)operator new(0x20uLL);
      sub_10002C6B8(v6, *(void *)a1, **(void **)a1);
      sub_10002C344((void *)a1, (uint64_t)v6, v7);
    }

    int v9 = *(uint64_t **)(**(void **)a1 + 8LL);
    sub_10002C3E0((uint64_t *)a1, v10, 0LL, &v9, 0);
  }

  sub_10000F788(&v11);
  return sub_10000F8D8(v10);
}

void sub_10008BA68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, ...)
{
}

uint64_t sub_10008BAA4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 288);
  if (v2)
  {
    sub_10000F810(v4, v2);
    sub_10000FB70(*(uint64_t **)(a1 + 288), v4);
    sub_10000FE20(&v5);
    sub_10000F8D8(v4);
  }

  sub_10008BB48(a1 + 8);
  if (*(_BYTE *)a1) {
    *(_BYTE *)a1 = 0;
  }
  return a1;
}

void sub_10008BB3C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006EEC(a1);
}

uint64_t sub_10008BB48(uint64_t a1)
{
  return a1;
}

uint64_t *sub_10008BB70(uint64_t a1, pthread_mutex_t *a2)
{
  __int128 v14 = 0uLL;
  sub_100010030(&v17, *(pthread_mutex_t **)(a1 + 24));
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    unsigned int v5 = atomic_load((unsigned int *)(v4 + 8));
    if (v5 == 1) {
      sub_10002DB80((uint64_t *)a1, &v17, 0LL, 1);
    }
  }

  sub_10008AE9C(&v14, (uint64_t *)a1);
  sub_10000F788(v19);
  sub_10000F8D8(&v17);
  LOBYTE(v17) = 0;
  v19[8] = (pthread_mutex_t *)10;
  v19[9] = (pthread_mutex_t *)&v18;
  v19[10] = 0LL;
  v19[11] = a2;
  v19[12] = 0LL;
  v19[13] = 0LL;
  uint64_t v6 = *(void *)v14;
  v13[0] = (uint64_t)&v17;
  v13[1] = a1;
  v13[2] = v6;
  uint64_t v7 = *(void *)(v14 + 16);
  *(void *)&__int128 v11 = *(void *)(v6 + 8);
  *((void *)&v11 + 1) = v6;
  *(void *)&__int128 v12 = &v17;
  *((void *)&v12 + 1) = v6;
  sub_10008BEDC((uint64_t *)&v11);
  *(void *)&__int128 v9 = *(void *)v14;
  *((void *)&v9 + 1) = v9;
  *(void *)&__int128 v10 = &v17;
  *((void *)&v10 + 1) = v9;
  sub_10008BEDC((uint64_t *)&v9);
  v16[0] = v11;
  v16[1] = v12;
  v15[0] = v9;
  v15[1] = v10;
  sub_10008BD14(v7, (uint64_t *)v16, v15);
  sub_10008C18C(v13);
  sub_10008C2F0((uint64_t)&v17);
  return sub_10000F9EC((uint64_t *)&v14 + 1);
}

void sub_10008BCCC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31)
{
}

uint64_t *sub_10008BD14(uint64_t a1, uint64_t *a2, void *a3)
{
  while (*a2 != *a3)
  {
    sub_10008BD64(a2);
    uint64_t result = sub_10008BEA0(a2);
  }

  return result;
}

uint64_t sub_10008BD64(void *a1)
{
  uint64_t v2 = (_BYTE *)a1[2];
  if (!*v2)
  {
    sub_10008BDF0((uint64_t)(v2 + 272), *a1 + 16LL);
    if (!*v2) {
      *uint64_t v2 = 1;
    }
  }

  return a1[2] + 1LL;
}

uint64_t sub_10008BDF0(uint64_t a1, uint64_t a2)
{
  return sub_10008BE20((uint64_t)&v3, (void *)(*(void *)(*(void *)a2 + 32LL) + 24LL));
}

uint64_t sub_10008BE20(uint64_t a1, void *a2)
{
  return sub_10008BE2C(a2);
}

uint64_t sub_10008BE2C(void *a1)
{
  if (!*a1)
  {
    std::runtime_error::runtime_error(&v2, "call to empty boost::function");
    v2.__vftable = (std::runtime_error_vtbl *)&off_1002AD8D8;
    sub_10000706C(&v2);
  }

  return (*(uint64_t (**)(void *))((*a1 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 1);
}

void sub_10008BE8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
}

uint64_t *sub_10008BEA0(uint64_t *a1)
{
  *a1 = *(void *)(*a1 + 8);
  uint64_t result = sub_10008BEDC(a1);
  char v3 = (_BYTE *)a1[2];
  if (*v3) {
    _BYTE *v3 = 0;
  }
  return result;
}

uint64_t *sub_10008BEDC(uint64_t *result)
{
  uint64_t v1 = *result;
  if (*result != result[3])
  {
    std::runtime_error v2 = result;
    if (v1 == result[1]) {
      goto LABEL_12;
    }
    while (1)
    {
      sub_10008B464((uint64_t *)(v2[2] + 8), *(void *)(v2[2] + 264));
      sub_10000F810(v12, *(void *)(*v2 + 16));
      sub_10008C09C(*(uint64_t **)(*v2 + 16), v12, v2[2] + 8);
      uint64_t v3 = *(void *)(*v2 + 16);
      uint64_t v4 = v2[2];
      if (*(_BYTE *)(v3 + 24))
      {
        int v5 = *(_DWORD *)(v4 + 280);
        BOOL v6 = __CFADD__(v5, 1);
        int v7 = v5 + 1;
        if (v6) {
          goto LABEL_15;
        }
        *(_DWORD *)(v4 + 280) = v7;
      }

      else
      {
        int v8 = *(_DWORD *)(v4 + 284);
        BOOL v6 = __CFADD__(v8, 1);
        int v9 = v8 + 1;
        if (v6) {
LABEL_15:
        }
          __break(0x5500u);
        *(_DWORD *)(v4 + 284) = v9;
      }

      if (!sub_10008B410(v3)) {
        break;
      }
      sub_10000FE20(&v13);
      uint64_t result = sub_10000F8D8(v12);
      uint64_t v10 = v2[1];
      uint64_t v1 = *(void *)(*v2 + 8);
      *std::runtime_error v2 = v1;
      if (v1 == v10) {
        goto LABEL_12;
      }
    }

    sub_10008B444(v2, v12, *v2);
    sub_10000FE20(&v13);
    uint64_t result = sub_10000F8D8(v12);
    uint64_t v1 = v2[1];
    if (*v2 == v1)
    {
LABEL_12:
      uint64_t v11 = v2[3];
      if (v11 != v1)
      {
        sub_10000F810(v12, *(void *)(v11 + 16));
        sub_10008B444(v2, v12, v2[1]);
        sub_10000FE20(&v13);
        return sub_10000F8D8(v12);
      }
    }
  }

  return result;
}

void sub_10008C068(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_10008C09C(uint64_t *result, void *a2, uint64_t a3)
{
  uint64_t v3 = (_DWORD **)result[4];
  if (v3)
  {
    BOOL v6 = result;
    for (unint64_t i = *v3; i != v3[1]; i += 6)
    {
      sub_100012108(i, (uint64_t)v9);
      if (sub_100011134((uint64_t)i, (uint64_t)&v8))
      {
        sub_10000F6C4(v6, a2);
        return sub_1000122FC((uint64_t)v9);
      }

      sub_10008B4F8(a3, v9);
      uint64_t result = sub_1000122FC((uint64_t)v9);
      uint64_t v3 = (_DWORD **)v6[4];
    }
  }

  return result;
}

void sub_10008C168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t *sub_10008C18C(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 284) > *(_DWORD *)(*a1 + 280)) {
    sub_10008C1CC(a1[1], a1[2]);
  }
  return a1;
}

void *sub_10008C1CC(uint64_t a1, uint64_t a2)
{
  if (**(void **)a1 == a2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4 || (unsigned int v5 = atomic_load((unsigned int *)(v4 + 8)), v5 != 1))
    {
      BOOL v6 = (uint64_t *)operator new(0x20uLL);
      sub_10002DD50(v6, *(void *)a1, **(void **)a1);
      sub_10002D9DC((void *)a1, (uint64_t)v6, v7);
    }

    int v9 = *(uint64_t **)(**(void **)a1 + 8LL);
    sub_10002DA78((uint64_t *)a1, v10, 0LL, &v9, 0);
  }

  sub_10000F788(&v11);
  return sub_10000F8D8(v10);
}

void sub_10008C2B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, ...)
{
}

uint64_t sub_10008C2F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 288);
  if (v2)
  {
    sub_10000F810(v4, v2);
    sub_10000FB70(*(uint64_t **)(a1 + 288), v4);
    sub_10000FE20(&v5);
    sub_10000F8D8(v4);
  }

  sub_10008BB48(a1 + 8);
  if (*(_BYTE *)a1) {
    *(_BYTE *)a1 = 0;
  }
  return a1;
}

void sub_10008C388(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006EEC(a1);
}

_BYTE *sub_10008C394(_BYTE *result)
{
  result[8] = 0;
  result[24] = 0;
  result[56] = 0;
  result[88] = 0;
  result[120] = 0;
  result[144] = 0;
  result[152] = 0;
  result[158] = 0;
  result[161] = 0;
  result[192] = 0;
  result[204] = 0;
  result[212] = 0;
  result[240] = 0;
  result[264] = 0;
  return result;
}

void sub_10008C3D0(uint64_t a1, uint64_t **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    sub_10000AC00(&__p, "Dataset:ActiveTimestamp");
    uint64_t v4 = sub_10000ED88(a2, (__n128 *)&__p);
    sub_100017620(v4, (uint64_t *)a1);
  }

  if (*(_BYTE *)(a1 + 24))
  {
    sub_10000AC00(&__p, "Dataset:PendingTimestamp");
    uint64_t v5 = sub_10000ED88(a2, (__n128 *)&__p);
    sub_100017620(v5, (uint64_t *)(a1 + 16));
  }

  if (*(_BYTE *)(a1 + 56))
  {
    sub_10000AC00(&__p, "Dataset:MasterKey");
    BOOL v6 = sub_10000ED88(a2, (__n128 *)&__p);
    sub_10008C89C(v6, a1 + 32);
  }

  if (*(_BYTE *)(a1 + 88))
  {
    sub_10000AC00(&__p, "Dataset:NetworkName");
    uint64_t v7 = sub_10000ED88(a2, (__n128 *)&__p);
    sub_10008C8EC(v7, (const std::string *)(a1 + 64));
  }

  if (*(_BYTE *)(a1 + 120))
  {
    sub_10000AC00(&__p, "Dataset:ExtendedPanId");
    char v8 = sub_10000ED88(a2, (__n128 *)&__p);
    sub_10008C89C(v8, a1 + 96);
  }

  if (*(_BYTE *)(a1 + 144))
  {
    int v9 = (char *)operator new(0x18uLL);
    *(void *)int v9 = &off_1002B0998;
    *(_OWORD *)(v9 + 8) = *(_OWORD *)(a1 + 128);
    unsigned int v22 = v9;
    sub_100147B4C((uint64_t *)&v22, &__p);
    sub_10000AC00(&v20, "Dataset:MeshLocalPrefix");
    uint64_t v10 = sub_10000ED88(a2, &v20);
    sub_1000175B4(v10, (uint64_t)&__p);
    if (v21 < 0) {
      operator delete((void *)v20.n128_u64[0]);
    }
    if (v22) {
      (*(void (**)(char *))(*(void *)v22 + 8LL))(v22);
    }
  }

  if (*(_BYTE *)(a1 + 152))
  {
    sub_10000AC00(&__p, "Dataset:Delay");
    uint64_t v11 = sub_10000ED88(a2, (__n128 *)&__p);
    sub_100017F70(v11, (_DWORD *)(a1 + 148));
  }

  if (*(_BYTE *)(a1 + 158))
  {
    sub_10000AC00(&__p, "Dataset:PanId");
    __int128 v12 = sub_10000ED88(a2, (__n128 *)&__p);
    sub_100017678(v12, (_WORD *)(a1 + 156));
  }

  if (*(_BYTE *)(a1 + 161))
  {
    sub_10000AC00(&__p, "Dataset:Channel");
    uint64_t v13 = sub_10000ED88(a2, (__n128 *)&__p);
    sub_1000176D4(v13, (_BYTE *)(a1 + 160));
  }

  if (*(_BYTE *)(a1 + 192))
  {
    sub_10000AC00(&__p, "Dataset:PSKc");
    __int128 v14 = sub_10000ED88(a2, (__n128 *)&__p);
    sub_10008C89C(v14, a1 + 168);
  }

  if (*(_BYTE *)(a1 + 204))
  {
    sub_10000AC00(&__p, "Dataset:ChannelMaskPage0");
    __n128 v15 = sub_10000ED88(a2, (__n128 *)&__p);
    sub_100017F70(v15, (_DWORD *)(a1 + 200));
  }

  if (*(_BYTE *)(a1 + 240))
  {
    sub_10000AC00(&__p, "Dataset:RawTlvs");
    uint64_t v16 = sub_10000ED88(a2, (__n128 *)&__p);
    sub_10008C89C(v16, a1 + 216);
  }

  if (*(_BYTE *)(a1 + 212))
  {
    sub_10000AC00(&__p, "Dataset:SecPolicy:KeyRotation");
    uint64_t v17 = sub_10000ED88(a2, (__n128 *)&__p);
    sub_100017678(v17, (_WORD *)(a1 + 208));
    sub_10000AC00(&__p, "Dataset:SecPolicy:Flags");
    uint64_t v18 = sub_10000ED88(a2, (__n128 *)&__p);
    sub_1000176D4(v18, (_BYTE *)(a1 + 210));
  }

  if (*(_BYTE *)(a1 + 264))
  {
    sub_100108154((void *)(a1 + 248), &__p);
    sub_10000AC00(&v20, "Dataset:DestIpAddress");
    std::string v19 = sub_10000ED88(a2, &v20);
    sub_1000175B4(v19, (uint64_t)&__p);
    if (v21 < 0) {
      operator delete((void *)v20.n128_u64[0]);
    }
  }

void sub_10008C7E8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10008C89C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v6;
  uint64_t v6 = *a1;
  uint64_t v4 = v6;
  *a1 = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  return a1;
}

uint64_t *sub_10008C8EC(uint64_t *a1, const std::string *a2)
{
  uint64_t v3 = v6;
  uint64_t v6 = *a1;
  uint64_t v4 = v6;
  *a1 = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  return a1;
}

void sub_10008C93C(uint64_t a1, uint64_t *a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    snprintf(__str, 0x100uLL, "%-32s =  0x%08X%08X", "Dataset:ActiveTimestamp", HIDWORD(*(void *)a1), *(void *)a1);
    sub_10000AC00(&__p, __str);
    sub_100044B24(a2, (uint64_t)&__p);
  }

  if (*(_BYTE *)(a1 + 24))
  {
    snprintf( __str,  0x100uLL,  "%-32s =  0x%08X%08X",  "Dataset:PendingTimestamp",  HIDWORD(*(void *)(a1 + 16)),  *(void *)(a1 + 16));
    sub_10000AC00(&__p, __str);
    sub_100044B24(a2, (uint64_t)&__p);
  }

  if (*(_BYTE *)(a1 + 161))
  {
    snprintf(__str, 0x100uLL, "%-32s =  %d", "Dataset:Channel", *(unsigned __int8 *)(a1 + 160));
    sub_10000AC00(&__p, __str);
    sub_100044B24(a2, (uint64_t)&__p);
  }

  if (*(_BYTE *)(a1 + 88))
  {
    uint64_t v4 = (const char *)(a1 + 64);
    snprintf(__str, 0x100uLL, "%-32s =  %s", "Dataset:NetworkName", v4);
    sub_10000AC00(&__p, __str);
    sub_100044B24(a2, (uint64_t)&__p);
  }

  if (*(_BYTE *)(a1 + 158))
  {
    snprintf(__str, 0x100uLL, "%-32s =  0x%02X", "Dataset:PanId", *(unsigned __int16 *)(a1 + 156));
    sub_10000AC00(&__p, __str);
    sub_100044B24(a2, (uint64_t)&__p);
  }

  if (*(_BYTE *)(a1 + 120))
  {
    sub_100073BB0(&v13, a1 + 96);
    sub_100147B4C((uint64_t *)&v13, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    snprintf(__str, 0x100uLL, "%-32s =  0x%s", "Dataset:ExtendedPanId", (const char *)p_p);
    if (v13) {
      (*(void (**)(char *))(*(void *)v13 + 8LL))(v13);
    }
    sub_10000AC00(&__p, __str);
    sub_100044B24(a2, (uint64_t)&__p);
  }

  if (*(_BYTE *)(a1 + 56))
  {
    sub_100073BB0(&v13, a1 + 32);
    sub_100147B4C((uint64_t *)&v13, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v6 = &__p;
    }
    else {
      uint64_t v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    snprintf(__str, 0x100uLL, "%-32s =  [%{sensitive}s]", "Dataset:MasterKey", v6);
    if (v13) {
      (*(void (**)(char *))(*(void *)v13 + 8LL))(v13);
    }
    sub_10000AC00(&__p, __str);
    sub_100044B24(a2, (uint64_t)&__p);
  }

  if (*(_BYTE *)(a1 + 144))
  {
    uint64_t v7 = (char *)operator new(0x18uLL);
    *(void *)uint64_t v7 = &off_1002B0998;
    *(_OWORD *)(v7 + 8) = *(_OWORD *)(a1 + 128);
    uint64_t v13 = v7;
    sub_100147B4C((uint64_t *)&v13, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      char v8 = &__p;
    }
    else {
      char v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    snprintf(__str, 0x100uLL, "%-32s =  %s/64", "Dataset:MeshLocalPrefix", (const char *)v8);
    if (v13) {
      (*(void (**)(char *))(*(void *)v13 + 8LL))(v13);
    }
    sub_10000AC00(&__p, __str);
    sub_100044B24(a2, (uint64_t)&__p);
  }

  if (*(_BYTE *)(a1 + 152))
  {
    snprintf(__str, 0x100uLL, "%-32s =  %d", "Dataset:Delay", *(_DWORD *)(a1 + 148));
    sub_10000AC00(&__p, __str);
    sub_100044B24(a2, (uint64_t)&__p);
  }

  if (*(_BYTE *)(a1 + 204))
  {
    snprintf(__str, 0x100uLL, "%-32s =  0x%08X", "Dataset:ChannelMaskPage0", *(_DWORD *)(a1 + 200));
    sub_10000AC00(&__p, __str);
    sub_100044B24(a2, (uint64_t)&__p);
  }

  if (*(_BYTE *)(a1 + 192))
  {
    sub_100073BB0(&v13, a1 + 168);
    sub_100147B4C((uint64_t *)&v13, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v9 = &__p;
    }
    else {
      int v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    snprintf(__str, 0x100uLL, "%-32s =  [%{sensitive}s]", "Dataset:PSKc", v9);
    if (v13) {
      (*(void (**)(char *))(*(void *)v13 + 8LL))(v13);
    }
    sub_10000AC00(&__p, __str);
    sub_100044B24(a2, (uint64_t)&__p);
  }

  if (*(_BYTE *)(a1 + 212))
  {
    snprintf(__str, 0x100uLL, "%-32s =  %d", "Dataset:SecPolicy:KeyRotation", *(unsigned __int16 *)(a1 + 208));
    sub_10000AC00(&__p, __str);
    sub_100044B24(a2, (uint64_t)&__p);
    snprintf(__str, 0x100uLL, "%-32s =  0x%0X", "Dataset:SecPolicy:Flags", *(unsigned __int8 *)(a1 + 210));
    sub_10000AC00(&__p, __str);
    sub_100044B24(a2, (uint64_t)&__p);
  }

  if (*(_BYTE *)(a1 + 240))
  {
    sub_100073BB0(&v13, a1 + 216);
    sub_100147B4C((uint64_t *)&v13, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v10 = &__p;
    }
    else {
      uint64_t v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    snprintf(__str, 0x100uLL, "%-32s =  [%{sensitive}s]", "Dataset:RawTlvs", v10);
    if (v13) {
      (*(void (**)(char *))(*(void *)v13 + 8LL))(v13);
    }
    sub_10000AC00(&__p, __str);
    sub_100044B24(a2, (uint64_t)&__p);
  }

  if (*(_BYTE *)(a1 + 264))
  {
    uint64_t v11 = (char *)operator new(0x18uLL);
    *(void *)uint64_t v11 = &off_1002B0998;
    *(_OWORD *)(v11 + 8) = *(_OWORD *)(a1 + 248);
    uint64_t v13 = v11;
    sub_100147B4C((uint64_t *)&v13, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v12 = &__p;
    }
    else {
      __int128 v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    snprintf(__str, 0x100uLL, "%-32s =  %s", "Dataset:DestIpAddress", (const char *)v12);
    if (v13) {
      (*(void (**)(char *))(*(void *)v13 + 8LL))(v13);
    }
    sub_10000AC00(&__p, __str);
    sub_100044B24(a2, (uint64_t)&__p);
  }

void sub_10008D098( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10008D124(_BYTE *a1, _WORD *a2, uint64_t a3)
{
  if (!(_DWORD)a3) {
    return 0LL;
  }
  while (1)
  {
    int v11 = spinel_datatype_unpack(a2, a3, "d", v6, v7, v8, v9, v10, (uint64_t)&v26);
    if (v11 <= 0) {
      break;
    }
    unsigned int v17 = v11;
    uint64_t result = sub_10008D2A8((uint64_t)a1, v26, v25, v12, v13, v14, v15, v16);
    if ((_DWORD)result)
    {
      uint64_t v20 = result;
      BOOL v23 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v23)
      {
        unint64_t v24 = v23;
        if (sub_10015A058(4))
        {
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
            sub_100208198();
          }
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }

      goto LABEL_21;
    }

    BOOL v19 = a3 >= v17;
    a3 = a3 - v17;
    if (!v19)
    {
      __break(0x5515u);
      return result;
    }

    a2 = (_WORD *)((char *)a2 + v17);
    if (!(_DWORD)a3) {
      return 0LL;
    }
  }

  char v21 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v21)
  {
    unsigned int v22 = v21;
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  uint64_t v20 = 1LL;
LABEL_21:
  sub_10008C394(a1);
  return v20;
}

uint64_t sub_10008D2A8( uint64_t a1, _WORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((int)spinel_datatype_unpack(a2, a3, "iD", a4, a5, a6, a7, a8, (uint64_t)&v56) <= 0)
  {
    uint64_t v14 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v14)
    {
      uint64_t v15 = v14;
      return 1LL;
    }

    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_16;
    }
    return 1LL;
  }

  if (v56 > 97)
  {
    switch(v56)
    {
      case 5404:
        if ((int)spinel_datatype_unpack(v55, v54, "X", v9, v10, v11, v12, v13, (uint64_t)&__str) > 0)
        {
          uint64_t result = 0LL;
          *(void *)a1 = __str.__r_.__value_.__r.__words[0];
          *(_BYTE *)(a1 + 8) = 1;
          return result;
        }

        BOOL v23 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v23)
        {
          unint64_t v24 = v23;
          return 1LL;
        }

        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          return 1LL;
        }
        goto LABEL_150;
      case 5405:
        if ((int)spinel_datatype_unpack(v55, v54, "X", v9, v10, v11, v12, v13, (uint64_t)&__str) > 0)
        {
          uint64_t result = 0LL;
          *(void *)(a1 + 16) = __str.__r_.__value_.__r.__words[0];
          *(_BYTE *)(a1 + 24) = 1;
          return result;
        }

        unsigned int v25 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v25)
        {
          BOOL v26 = v25;
          return 1LL;
        }

        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          return 1LL;
        }
        goto LABEL_150;
      case 5406:
        if ((int)spinel_datatype_unpack(v55, v54, "L", v9, v10, v11, v12, v13, (uint64_t)&__str) > 0)
        {
          uint64_t result = 0LL;
          *(_DWORD *)(a1 + 148) = __str.__r_.__value_.__l.__data_;
          *(_BYTE *)(a1 + 152) = 1;
          return result;
        }

        uint64_t v27 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v27)
        {
          uint64_t v28 = v27;
          return 1LL;
        }

        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          return 1LL;
        }
        goto LABEL_150;
      case 5407:
        if ((int)spinel_datatype_unpack(v55, v54, "SC", v9, v10, v11, v12, v13, (uint64_t)&__str) > 0)
        {
          uint64_t result = 0LL;
          *(_DWORD *)(a1 + 208) = __str.__r_.__value_.__l.__data_;
          *(_BYTE *)(a1 + 212) = 1;
          return result;
        }

        uint64_t v29 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v29)
        {
          uint64_t v30 = v29;
          return 1LL;
        }

        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          return 1LL;
        }
        goto LABEL_150;
      case 5408:
        if (v54)
        {
          sub_100018E5C(&__str, v55, (uint64_t)v55 + v54);
          sub_100074D90((uint64_t *)(a1 + 216), (uint64_t)&__str);
LABEL_44:
          p_str = &__str;
          sub_100006F6C((void ***)&p_str);
          return 0LL;
        }

        uint64_t v31 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v31)
        {
          std::string v32 = v31;
          return 1LL;
        }

        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          return 1LL;
        }
        goto LABEL_16;
      case 5409:
      case 5410:
      case 5411:
      case 5412:
      case 5413:
      case 5414:
        goto LABEL_53;
      case 5415:
        if ((int)spinel_datatype_unpack(v55, v54, "6", v9, v10, v11, v12, v13, (uint64_t)&__str) > 0)
        {
          uint64_t result = 0LL;
          *(_OWORD *)(a1 + 248) = *(_OWORD *)__str.__r_.__value_.__l.__data_;
          *(_BYTE *)(a1 + 264) = 1;
          return result;
        }

        unsigned int v33 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v33)
        {
          uint64_t v34 = v33;
          return 1LL;
        }

        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          return 1LL;
        }
        goto LABEL_150;
      default:
        if (v56 != 98) {
          goto LABEL_53;
        }
        if ((int)spinel_datatype_unpack(v55, v54, "6C", v9, v10, v11, v12, v13, (uint64_t)&__str) <= 0)
        {
          uint64_t v49 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v49)
          {
            uint64_t v50 = v49;
            return 1LL;
          }

          if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            return 1LL;
          }
        }

        else
        {
          if (p_str == 64)
          {
            uint64_t result = 0LL;
            *(_OWORD *)(a1 + 128) = *(_OWORD *)__str.__r_.__value_.__l.__data_;
            *(_BYTE *)(a1 + 144) = 1;
            return result;
          }

          uint64_t v51 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v51)
          {
            uint64_t v52 = v51;
            return 1LL;
          }

          if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            return 1LL;
          }
        }

        break;
    }

    goto LABEL_150;
  }

  if (v56 > 67)
  {
    switch(v56)
    {
      case 'D':
        if ((int)spinel_datatype_unpack(v55, v54, "U", v9, v10, v11, v12, v13, (uint64_t)&p_str) > 0)
        {
          sub_10000AC00(&__str, (char *)p_str);
          std::string::operator=((std::string *)(a1 + 64), &__str);
          *(_BYTE *)(a1 + 88) = 1;
          return 0LL;
        }

        uint64_t v35 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v35)
        {
          BOOL v36 = v35;
          return 1LL;
        }

        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          return 1LL;
        }
        break;
      case 'E':
        if (v54)
        {
          sub_100018E5C(&__str, v55, (uint64_t)v55 + v54);
          sub_100074D90((uint64_t *)(a1 + 96), (uint64_t)&__str);
          goto LABEL_44;
        }

        uint64_t v37 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v37)
        {
          uint64_t v38 = v37;
          return 1LL;
        }

        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          return 1LL;
        }
        break;
      case 'F':
        if (v54)
        {
          sub_100018E5C(&__str, v55, (uint64_t)v55 + v54);
          sub_100074D90((uint64_t *)(a1 + 32), (uint64_t)&__str);
          goto LABEL_44;
        }

        uint64_t v39 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v39)
        {
          uint64_t v40 = v39;
          return 1LL;
        }

        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          return 1LL;
        }
        break;
      case 'K':
        if (v54)
        {
          sub_100018E5C(&__str, v55, (uint64_t)v55 + v54);
          sub_100074D90((uint64_t *)(a1 + 168), (uint64_t)&__str);
          goto LABEL_44;
        }

        uint64_t v41 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v41)
        {
          uint64_t v42 = v41;
          return 1LL;
        }

        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          return 1LL;
        }
        break;
      default:
        goto LABEL_53;
    }

void sub_10008DD60(_Unwind_Exception *a1)
{
  *(void *)(v2 - 24) = v1;
  sub_100006F6C((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_10008DD84( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x10008DD7CLL);
}

void sub_10008DD9C(uint64_t a1, void *a2, int a3)
{
  a2[1] = *a2;
  if (*(_BYTE *)(a1 + 8))
  {
    if (a3) {
      sub_100034C60("t(iX)", (uint64_t *)v13, 0x151Cu);
    }
    else {
      sub_100034C60("t(i)", (uint64_t *)v13, 0x151Cu);
    }
    sub_1000350D0((uint64_t)a2, v13);
    v11[0] = (char *)v13;
    sub_100006F6C((void ***)v11);
  }

  if (*(_BYTE *)(a1 + 24))
  {
    if (a3) {
      sub_100034C60("t(iX)", (uint64_t *)v13, 0x151Du);
    }
    else {
      sub_100034C60("t(i)", (uint64_t *)v13, 0x151Du);
    }
    sub_1000350D0((uint64_t)a2, v13);
    v11[0] = (char *)v13;
    sub_100006F6C((void ***)v11);
  }

  if (*(_BYTE *)(a1 + 56))
  {
    if (a3) {
      sub_100034C60("t(iD)", (uint64_t *)v13, 0x46u);
    }
    else {
      sub_100034C60("t(i)", (uint64_t *)v13, 0x46u);
    }
    sub_1000350D0((uint64_t)a2, v13);
    v11[0] = (char *)v13;
    sub_100006F6C((void ***)v11);
  }

  if (*(_BYTE *)(a1 + 88))
  {
    if (a3) {
      sub_100034C60("t(iU)", (uint64_t *)v13, 0x44u);
    }
    else {
      sub_100034C60("t(i)", (uint64_t *)v13, 0x44u);
    }
    sub_1000350D0((uint64_t)a2, v13);
    v11[0] = (char *)v13;
    sub_100006F6C((void ***)v11);
  }

  if (*(_BYTE *)(a1 + 120))
  {
    if (a3) {
      sub_100034C60("t(iD)", (uint64_t *)v13, 0x45u);
    }
    else {
      sub_100034C60("t(i)", (uint64_t *)v13, 0x45u);
    }
    sub_1000350D0((uint64_t)a2, v13);
    v11[0] = (char *)v13;
    sub_100006F6C((void ***)v11);
  }

  if (*(_BYTE *)(a1 + 144))
  {
    if (a3) {
      sub_100034C60("t(i6C)", (uint64_t *)v13, 0x62u);
    }
    else {
      sub_100034C60("t(i)", (uint64_t *)v13, 0x62u);
    }
    sub_1000350D0((uint64_t)a2, v13);
    v11[0] = (char *)v13;
    sub_100006F6C((void ***)v11);
  }

  if (*(_BYTE *)(a1 + 152))
  {
    if (a3) {
      sub_100034C60("t(iL)", (uint64_t *)v13, 0x151Eu);
    }
    else {
      sub_100034C60("t(i)", (uint64_t *)v13, 0x151Eu);
    }
    sub_1000350D0((uint64_t)a2, v13);
    v11[0] = (char *)v13;
    sub_100006F6C((void ***)v11);
  }

  if (*(_BYTE *)(a1 + 158))
  {
    if (a3) {
      sub_100034C60("t(iS)", (uint64_t *)v13, 0x36u);
    }
    else {
      sub_100034C60("t(i)", (uint64_t *)v13, 0x36u);
    }
    sub_1000350D0((uint64_t)a2, v13);
    v11[0] = (char *)v13;
    sub_100006F6C((void ***)v11);
  }

  if (*(_BYTE *)(a1 + 161))
  {
    if (a3) {
      sub_100034C60("t(iC)", (uint64_t *)v13, 0x21u);
    }
    else {
      sub_100034C60("t(i)", (uint64_t *)v13, 0x21u);
    }
    sub_1000350D0((uint64_t)a2, v13);
    v11[0] = (char *)v13;
    sub_100006F6C((void ***)v11);
  }

  if (*(_BYTE *)(a1 + 192))
  {
    if (a3) {
      sub_100034C60("t(iD)", (uint64_t *)v13, 0x4Bu);
    }
    else {
      sub_100034C60("t(i)", (uint64_t *)v13, 0x4Bu);
    }
    sub_1000350D0((uint64_t)a2, v13);
    v11[0] = (char *)v13;
    sub_100006F6C((void ***)v11);
  }

  if (*(_BYTE *)(a1 + 204))
  {
    if (a3)
    {
      int v6 = 0;
      unsigned __int8 v7 = 0;
      unsigned int v8 = *(_DWORD *)(a1 + 200);
      do
      {
        if (((v8 >> v6) & 1) != 0)
        {
          if (v7 >= 0x20u) {
            __break(0x5512u);
          }
          uint64_t v9 = v7++;
          *((_BYTE *)v13 + v9) = v6;
        }

        ++v6;
      }

      while (v6 != 32);
      sub_100034C60("t(iD)", (uint64_t *)v11, 0x22u);
      sub_1000350D0((uint64_t)a2, v11);
      uint64_t v12 = v11;
      uint64_t v10 = (void ***)&v12;
    }

    else
    {
      sub_100034C60("t(i)", (uint64_t *)v13, 0x22u);
      sub_1000350D0((uint64_t)a2, v13);
      v11[0] = (char *)v13;
      uint64_t v10 = (void ***)v11;
    }

    sub_100006F6C(v10);
  }

  if (*(_BYTE *)(a1 + 212))
  {
    if (a3) {
      sub_100034C60("t(iSC)", (uint64_t *)v13, 0x151Fu);
    }
    else {
      sub_100034C60("t(i)", (uint64_t *)v13, 0x151Fu);
    }
    sub_1000350D0((uint64_t)a2, v13);
    v11[0] = (char *)v13;
    sub_100006F6C((void ***)v11);
  }

  if (*(_BYTE *)(a1 + 240))
  {
    sub_100034C60("t(iD)", (uint64_t *)v13, 0x1520u);
    sub_1000350D0((uint64_t)a2, v13);
    v11[0] = (char *)v13;
    sub_100006F6C((void ***)v11);
  }

  if (*(_BYTE *)(a1 + 264))
  {
    sub_100034C60("t(i6)", (uint64_t *)v13, 0x1527u);
    sub_1000350D0((uint64_t)a2, v13);
    v11[0] = (char *)v13;
    sub_100006F6C((void ***)v11);
  }

void sub_10008E460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

BOOL sub_10008E500(_BYTE *a1)
{
  return a1[8]
      || a1[24]
      || a1[56]
      || a1[88]
      || a1[120]
      || a1[144]
      || a1[152]
      || a1[158]
      || a1[161]
      || a1[192]
      || a1[204]
      || a1[212]
      || a1[240]
      || a1[264] != 0;
}

_UNKNOWN **sub_10008E588()
{
}

__n128 sub_10008E594(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_1002B0998;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void *sub_10008E5CC(void *a1, uint64_t a2)
{
  a1[3] = 0LL;
  *a1 = off_1002B09F0;
  a1[1] = a2;
  a1[2] = a1 + 3;
  uint64_t v3 = (uint64_t)(a1 + 2);
  a1[4] = 0LL;
  a1[6] = 0LL;
  a1[5] = a1 + 6;
  uint64_t v4 = (uint64_t)(a1 + 5);
  a1[7] = 0LL;
  a1[9] = 0LL;
  a1[8] = a1 + 9;
  a1[10] = 0LL;
  a1[11] = 0LL;
  a1[12] = 0LL;
  a1[13] = 0LL;
  sub_10000AC00(__p, "vendor:pmu_wake:start");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:pmu_wake:result");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:coex:rx_mode");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:coex:tx_mode");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:coex:grant:timeout");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:coex:RxThrottle:RxReq:TxAckOnGrant");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:coex:RxThrottle:NoRxReq:TxAckOnUnsolGrant");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:coex:RxThrottle:RxReq:TxAlwaysAck");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:coex:RxThrottle:Timeout");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:uart:disable:start");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:coex:enabled");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:fem:enabled");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:csma:min:be");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:csma:max:be");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:csma:max:backoffs");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:csma:cca:idleattempts");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:csma:sliding:window:enabled");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:ifs:mode");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:ifs:min:sifs");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:ifs:min:lifs");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:ifs:retx:min:sifs");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:ifs:retx:min:lifs");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:ifs:ackturnaround:time");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:ifs:ackturnaround:mode");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:ifs:ackturnaround:enable");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:ifs:ackdata");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:version");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:coex:counters");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:coex:counters:asvalmap");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:coex:histograms");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:coex:histograms:asvalmap");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:radio:counters");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:radio:counters:asvalmap");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:ncp:state:dump");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:radio:stats");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:radio:stats:asvalmap");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:assigned:hw:mac");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:power:limit:table");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:power:limit:table:active:id");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:power:limit:table:version");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:power:limit:table:power:limit");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:power:mapping:table:power:test");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:power:mapping:table:version");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:power:mapping:table");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:power:limit:table:active:zone");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:current:power:info");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:power:mapping:set:to:default");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:NCP:RSSI:Offset");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:logging:mapping:table");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:unsol:filternotif");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:MAC:packet:SizeHistogram");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:MAC:packet:SizeHistogram:AsValMap");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:MAC:packet:LQIHistogram");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:MAC:packet:LQIHistogram:AsValMap");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:MAC:packet:ErrorHistogram");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:MAC:packet:ErrorHistogram:AsValMap");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:MAC:packet:RSSIHistogram");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:MAC:packet:RSSIHistogram:AsValMap");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:joiner:RSSIHistogram");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:joiner:RSSIHistogram:AsValMap");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:linkloss:counters");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:linkloss:counters:AsValMap");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:deepsleep:filter:list");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:deepsleep:loglevel");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:deepsleep:region:loglevels");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:mle:adv:tx:num");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:neighbor:count:histogram");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:neighbor:count:histogram:AsValMap");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:cca:energydetected:histogram");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:cca:energydetected:histogram:AsValMap");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:csma:backoff:histogram");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:csma:backoff:histogram:AsValMap");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "ip_tx_app_pkt_success");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "ip_tx_delay_min");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "ip_tx_delay_max");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "ip_tx_delay_avg");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:ncp:buffer:thresh");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:ncp:logsdropped:filter:threshold");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:ncp:logsdropped:filter:timeout:ms");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:ncp:logsdropped:counter");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:min:mac:interframedelay");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:openthread:radio:counters");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:openthread:radio:counters:AsValMap");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:tx:application:pkt:counters");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:tx:application:pkt:counters:asvalmap");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:coex:csl:reqahead:timeinus");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:coex:min:csl:reqahead:timeinus");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "vendor:csl:tx:schedframe:reqahead:timeinus");
  sub_10007166C(v3, (const void **)__p, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (!a1[7])
  {
    sub_10000AC00(__p, "vendor:assert");
    sub_10007166C(v4, (const void **)__p, (uint64_t)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    sub_10000AC00(__p, "vendor:hard:fault");
    sub_10007166C(v4, (const void **)__p, (uint64_t)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    sub_10000AC00(__p, "vendor:stack:overflow");
    sub_10007166C(v4, (const void **)__p, (uint64_t)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    sub_10000AC00(__p, "vendor:power:mapping:table:clear");
    sub_10007166C(v4, (const void **)__p, (uint64_t)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    sub_10000AC00(__p, "vendor:power:mapping:table:flash:data");
    sub_10007166C(v4, (const void **)__p, (uint64_t)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    sub_10000AC00(__p, "vendor:power:mapping:table:flash:data:isvalid?");
    sub_10007166C(v4, (const void **)__p, (uint64_t)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    sub_10000AC00(__p, "vendor:fault:info");
    sub_10007166C(v4, (const void **)__p, (uint64_t)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    sub_10000AC00(__p, "vendor:validate:settings");
    sub_10007166C(v4, (const void **)__p, (uint64_t)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    sub_10000AC00(__p, "vendor:last:host:wake:reason");
    sub_10007166C(v4, (const void **)__p, (uint64_t)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    sub_10000AC00(__p, "vendor:cntr:stats:reset");
    sub_10007166C(v4, (const void **)__p, (uint64_t)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    sub_10000AC00(__p, "vendor:networkdiagnosticsreq");
    sub_10007166C(v4, (const void **)__p, (uint64_t)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v5 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v5)
  {
    if (sub_10015A058(6) && os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "SpinelNCPVendorCustom Created",  (uint8_t *)__p,  2u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  return a1;
}

void sub_10008F970( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_100016450(v17);
  sub_10000AD30(v16);
  sub_10000AD30(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_10008FCD4(uint64_t a1)
{
  *(void *)a1 = off_1002B09F0;
  sub_100016450(a1 + 64);
  sub_10000AD30(a1 + 40);
  sub_10000AD30(a1 + 16);
  return a1;
}

void sub_10008FD2C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10008FCD4(a1);
  operator delete(v1);
}

BOOL sub_10008FD40(const char *a1)
{
  uint64_t v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v2)
  {
    uint64_t v3 = v2;
    if (sub_10015A058(6) && os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Vendor setup_property_supported_by_class",  v5,  2u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  if (a1[23] < 0)
  {
    a1 = *(const char **)a1;
    if (!strcasecmp(a1, "vendor:pmu_wake:start")
      || !strcasecmp(a1, "vendor:pmu_wake:result")
      || !strcasecmp(a1, "vendor:coex:rx_mode")
      || !strcasecmp(a1, "vendor:coex:rx_threshold:upperbound")
      || !strcasecmp(a1, "vendor:coex:rx_threshold:lowerbound")
      || !strcasecmp(a1, "vendor:coex:tx_mode")
      || !strcasecmp(a1, "vendor:coex:grant:timeout")
      || !strcasecmp(a1, "vendor:coex:RxThrottle:RxReq:TxAckOnGrant")
      || !strcasecmp(a1, "vendor:coex:RxThrottle:NoRxReq:TxAckOnUnsolGrant")
      || !strcasecmp(a1, "vendor:coex:RxThrottle:RxReq:TxAlwaysAck")
      || !strcasecmp(a1, "vendor:coex:RxThrottle:Timeout")
      || !strcasecmp(a1, "vendor:uart:disable:start")
      || !strcasecmp(a1, "vendor:coex:enabled")
      || !strcasecmp(a1, "vendor:fem:enabled")
      || !strcasecmp(a1, "vendor:csma:min:be")
      || !strcasecmp(a1, "vendor:csma:max:be")
      || !strcasecmp(a1, "vendor:csma:max:backoffs")
      || !strcasecmp(a1, "vendor:csma:cca:idleattempts")
      || !strcasecmp(a1, "vendor:csma:sliding:window:enabled")
      || !strcasecmp(a1, "vendor:ifs:mode")
      || !strcasecmp(a1, "vendor:ifs:min:sifs")
      || !strcasecmp(a1, "vendor:ifs:min:lifs")
      || !strcasecmp(a1, "vendor:ifs:retx:min:sifs")
      || !strcasecmp(a1, "vendor:ifs:retx:min:lifs")
      || !strcasecmp(a1, "vendor:ifs:ackturnaround:time")
      || !strcasecmp(a1, "vendor:ifs:ackturnaround:mode")
      || !strcasecmp(a1, "vendor:ifs:ackturnaround:enable")
      || !strcasecmp(a1, "vendor:ifs:ackdata")
      || !strcasecmp(a1, "vendor:version")
      || !strcasecmp(a1, "vendor:coex:counters")
      || !strcasecmp(a1, "vendor:coex:counters:asvalmap")
      || !strcasecmp(a1, "vendor:radio:counters")
      || !strcasecmp(a1, "vendor:radio:counters:asvalmap")
      || !strcasecmp(a1, "vendor:coex:histograms")
      || !strcasecmp(a1, "vendor:coex:histograms:asvalmap")
      || !strcasecmp(a1, "vendor:ncp:state:dump")
      || !strcasecmp(a1, "vendor:radio:stats")
      || !strcasecmp(a1, "vendor:radio:stats:asvalmap")
      || !strcasecmp(a1, "vendor:assert")
      || !strcasecmp(a1, "vendor:hard:fault")
      || !strcasecmp(a1, "vendor:stack:overflow")
      || !strcasecmp(a1, "vendor:assigned:hw:mac")
      || !strcasecmp(a1, "vendor:power:limit:table")
      || !strcasecmp(a1, "vendor:power:limit:table:active:id")
      || !strcasecmp(a1, "vendor:power:limit:table:version")
      || !strcasecmp(a1, "vendor:power:limit:table:power:limit")
      || !strcasecmp(a1, "vendor:power:mapping:table:power:test")
      || !strcasecmp(a1, "vendor:power:mapping:table:version")
      || !strcasecmp(a1, "vendor:power:mapping:table")
      || !strcasecmp(a1, "vendor:power:limit:table:active:zone")
      || !strcasecmp(a1, "vendor:current:power:info")
      || !strcasecmp(a1, "vendor:power:mapping:set:to:default")
      || !strcasecmp(a1, "vendor:NCP:RSSI:Offset")
      || !strcasecmp(a1, "vendor:mle:adv:tx:num")
      || !strcasecmp(a1, "vendor:power:mapping:table:clear")
      || !strcasecmp(a1, "vendor:power:mapping:table:flash:data")
      || !strcasecmp(a1, "vendor:power:mapping:table:flash:data:isvalid?")
      || !strcasecmp(a1, "vendor:logging:mapping:table")
      || !strcasecmp(a1, "vendor:unsol:filternotif")
      || !strcasecmp(a1, "vendor:deepsleep:filter:list")
      || !strcasecmp(a1, "vendor:deepsleep:loglevel")
      || !strcasecmp(a1, "vendor:last:host:wake:reason")
      || !strcasecmp(a1, "vendor:deepsleep:region:loglevels")
      || !strcasecmp(a1, "vendor:fault:info")
      || !strcasecmp(a1, "vendor:validate:settings")
      || !strcasecmp(a1, "vendor:MAC:packet:SizeHistogram")
      || !strcasecmp(a1, "vendor:MAC:packet:SizeHistogram:AsValMap")
      || !strcasecmp(a1, "vendor:MAC:packet:LQIHistogram")
      || !strcasecmp(a1, "vendor:MAC:packet:LQIHistogram:AsValMap")
      || !strcasecmp(a1, "vendor:MAC:packet:ErrorHistogram")
      || !strcasecmp(a1, "vendor:MAC:packet:ErrorHistogram:AsValMap")
      || !strcasecmp(a1, "vendor:MAC:packet:RSSIHistogram")
      || !strcasecmp(a1, "vendor:MAC:packet:RSSIHistogram:AsValMap")
      || !strcasecmp(a1, "vendor:joiner:RSSIHistogram"))
    {
      return 1LL;
    }
  }

  else if (!strcasecmp(a1, "vendor:pmu_wake:start") {
         || !strcasecmp(a1, "vendor:pmu_wake:result")
  }
         || !strcasecmp(a1, "vendor:coex:rx_mode")
         || !strcasecmp(a1, "vendor:coex:rx_threshold:upperbound")
         || !strcasecmp(a1, "vendor:coex:rx_threshold:lowerbound")
         || !strcasecmp(a1, "vendor:coex:tx_mode")
         || !strcasecmp(a1, "vendor:coex:grant:timeout")
         || !strcasecmp(a1, "vendor:coex:RxThrottle:RxReq:TxAckOnGrant")
         || !strcasecmp(a1, "vendor:coex:RxThrottle:NoRxReq:TxAckOnUnsolGrant")
         || !strcasecmp(a1, "vendor:coex:RxThrottle:RxReq:TxAlwaysAck")
         || !strcasecmp(a1, "vendor:coex:RxThrottle:Timeout")
         || !strcasecmp(a1, "vendor:uart:disable:start")
         || !strcasecmp(a1, "vendor:coex:enabled")
         || !strcasecmp(a1, "vendor:fem:enabled")
         || !strcasecmp(a1, "vendor:csma:min:be")
         || !strcasecmp(a1, "vendor:csma:max:be")
         || !strcasecmp(a1, "vendor:csma:max:backoffs")
         || !strcasecmp(a1, "vendor:csma:cca:idleattempts")
         || !strcasecmp(a1, "vendor:csma:sliding:window:enabled")
         || !strcasecmp(a1, "vendor:ifs:mode")
         || !strcasecmp(a1, "vendor:ifs:min:sifs")
         || !strcasecmp(a1, "vendor:ifs:min:lifs")
         || !strcasecmp(a1, "vendor:ifs:retx:min:sifs")
         || !strcasecmp(a1, "vendor:ifs:retx:min:lifs")
         || !strcasecmp(a1, "vendor:ifs:ackturnaround:time")
         || !strcasecmp(a1, "vendor:ifs:ackturnaround:mode")
         || !strcasecmp(a1, "vendor:ifs:ackturnaround:enable")
         || !strcasecmp(a1, "vendor:ifs:ackdata")
         || !strcasecmp(a1, "vendor:version")
         || !strcasecmp(a1, "vendor:coex:counters")
         || !strcasecmp(a1, "vendor:coex:counters:asvalmap")
         || !strcasecmp(a1, "vendor:radio:counters")
         || !strcasecmp(a1, "vendor:radio:counters:asvalmap")
         || !strcasecmp(a1, "vendor:coex:histograms")
         || !strcasecmp(a1, "vendor:coex:histograms:asvalmap")
         || !strcasecmp(a1, "vendor:ncp:state:dump")
         || !strcasecmp(a1, "vendor:radio:stats")
         || !strcasecmp(a1, "vendor:radio:stats:asvalmap")
         || !strcasecmp(a1, "vendor:assert")
         || !strcasecmp(a1, "vendor:hard:fault")
         || !strcasecmp(a1, "vendor:stack:overflow")
         || !strcasecmp(a1, "vendor:assigned:hw:mac")
         || !strcasecmp(a1, "vendor:power:limit:table")
         || !strcasecmp(a1, "vendor:power:limit:table:active:id")
         || !strcasecmp(a1, "vendor:power:limit:table:version")
         || !strcasecmp(a1, "vendor:power:limit:table:power:limit")
         || !strcasecmp(a1, "vendor:power:mapping:table:power:test")
         || !strcasecmp(a1, "vendor:power:mapping:table:version")
         || !strcasecmp(a1, "vendor:power:mapping:table")
         || !strcasecmp(a1, "vendor:power:limit:table:active:zone")
         || !strcasecmp(a1, "vendor:current:power:info")
         || !strcasecmp(a1, "vendor:power:mapping:set:to:default")
         || !strcasecmp(a1, "vendor:NCP:RSSI:Offset")
         || !strcasecmp(a1, "vendor:mle:adv:tx:num")
         || !strcasecmp(a1, "vendor:power:mapping:table:clear")
         || !strcasecmp(a1, "vendor:power:mapping:table:flash:data")
         || !strcasecmp(a1, "vendor:power:mapping:table:flash:data:isvalid?")
         || !strcasecmp(a1, "vendor:logging:mapping:table")
         || !strcasecmp(a1, "vendor:unsol:filternotif")
         || !strcasecmp(a1, "vendor:deepsleep:filter:list")
         || !strcasecmp(a1, "vendor:deepsleep:loglevel")
         || !strcasecmp(a1, "vendor:last:host:wake:reason")
         || !strcasecmp(a1, "vendor:deepsleep:region:loglevels")
         || !strcasecmp(a1, "vendor:fault:info")
         || !strcasecmp(a1, "vendor:validate:settings")
         || !strcasecmp(a1, "vendor:MAC:packet:SizeHistogram")
         || !strcasecmp(a1, "vendor:MAC:packet:SizeHistogram:AsValMap")
         || !strcasecmp(a1, "vendor:MAC:packet:LQIHistogram")
         || !strcasecmp(a1, "vendor:MAC:packet:LQIHistogram:AsValMap")
         || !strcasecmp(a1, "vendor:MAC:packet:ErrorHistogram")
         || !strcasecmp(a1, "vendor:MAC:packet:ErrorHistogram:AsValMap")
         || !strcasecmp(a1, "vendor:MAC:packet:RSSIHistogram")
         || !strcasecmp(a1, "vendor:MAC:packet:RSSIHistogram:AsValMap")
         || !strcasecmp(a1, "vendor:joiner:RSSIHistogram"))
  {
    return 1LL;
  }

  if (strcasecmp(a1, "vendor:joiner:RSSIHistogram:AsValMap")
    && strcasecmp(a1, "vendor:linkloss:counters")
    && strcasecmp(a1, "vendor:linkloss:counters:AsValMap")
    && strcasecmp(a1, "vendor:neighbor:count:histogram")
    && strcasecmp(a1, "vendor:neighbor:count:histogram:AsValMap")
    && strcasecmp(a1, "vendor:cca:energydetected:histogram")
    && strcasecmp(a1, "vendor:cca:energydetected:histogram:AsValMap")
    && strcasecmp(a1, "vendor:csma:backoff:histogram")
    && strcasecmp(a1, "vendor:csma:backoff:histogram:AsValMap")
    && strcasecmp(a1, "vendor:cntr:stats:reset")
    && strcasecmp(a1, "ip_tx_app_pkt_success")
    && strcasecmp(a1, "ip_tx_delay_min")
    && strcasecmp(a1, "ip_tx_delay_max")
    && strcasecmp(a1, "ip_tx_delay_avg")
    && strcasecmp(a1, "vendor:networkdiagnosticsreq")
    && strcasecmp(a1, "vendor:ncp:buffer:thresh")
    && strcasecmp(a1, "vendor:ncp:logsdropped:filter:threshold")
    && strcasecmp(a1, "vendor:ncp:logsdropped:filter:timeout:ms")
    && strcasecmp(a1, "vendor:ncp:logsdropped:counter")
    && strcasecmp(a1, "vendor:min:mac:interframedelay")
    && strcasecmp(a1, "vendor:openthread:radio:counters")
    && strcasecmp(a1, "vendor:openthread:radio:counters:AsValMap")
    && strcasecmp(a1, "vendor:tx:application:pkt:counters")
    && strcasecmp(a1, "vendor:tx:application:pkt:counters:asvalmap")
    && strcasecmp(a1, "vendor:coex:csl:reqahead:timeinus")
    && strcasecmp(a1, "vendor:coex:min:csl:reqahead:timeinus"))
  {
    return strcasecmp(a1, "vendor:csl:tx:schedframe:reqahead:timeinus") == 0;
  }

  return 1LL;
}

uint64_t sub_100090BAC(uint64_t a1)
{
  return a1 + 16;
}

BOOL sub_100090BB4(uint64_t a1, const void **a2)
{
  return sub_100037208(a1 + 16, a2) || sub_100037208(a1 + 40, a2) != 0;
}

void sub_100090BFC(uint64_t a1, char *a2, uint64_t *a3)
{
  if ((a2[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a2, "vendor:pmu_wake:result"))
    {
      if (strcasecmp(a2, "vendor:coex:rx_mode")
        && strcasecmp(a2, "vendor:coex:tx_mode")
        && strcasecmp(a2, "vendor:coex:enabled")
        && strcasecmp(a2, "vendor:fem:enabled")
        && strcasecmp(a2, "vendor:csma:min:be")
        && strcasecmp(a2, "vendor:csma:max:be"))
      {
        if (!strcasecmp(a2, "vendor:csma:max:backoffs")) {
          goto LABEL_195;
        }
        if (strcasecmp(a2, "vendor:csma:sliding:window:enabled"))
        {
          if (!strcasecmp(a2, "vendor:csma:cca:idleattempts") || !strcasecmp(a2, "vendor:ifs:mode")) {
            goto LABEL_195;
          }
          if (strcasecmp(a2, "vendor:ifs:min:sifs")
            && strcasecmp(a2, "vendor:ifs:min:lifs")
            && strcasecmp(a2, "vendor:ifs:retx:min:sifs")
            && strcasecmp(a2, "vendor:ifs:retx:min:lifs")
            && strcasecmp(a2, "vendor:ifs:ackturnaround:time"))
          {
            if (!strcasecmp(a2, "vendor:ifs:ackturnaround:mode") || !strcasecmp(a2, "vendor:ifs:ackturnaround:enable")) {
              goto LABEL_195;
            }
            if (strcasecmp(a2, "vendor:version"))
            {
              if (!strcasecmp(a2, "vendor:assert")) {
                goto LABEL_216;
              }
              if (strcasecmp(a2, "vendor:hard:fault") && strcasecmp(a2, "vendor:stack:overflow"))
              {
                if (strcasecmp(a2, "vendor:power:limit:table:active:id"))
                {
                  if (strcasecmp(a2, "vendor:power:limit:table:version"))
                  {
                    if (strcasecmp(a2, "vendor:power:limit:table:power:limit")
                      && strcasecmp(a2, "vendor:power:mapping:table:power:test")
                      && strcasecmp(a2, "vendor:NCP:RSSI:Offset"))
                    {
                      if (strcasecmp(a2, "vendor:power:mapping:table:flash:data:isvalid?")
                        && strcasecmp(a2, "vendor:deepsleep:loglevel")
                        && strcasecmp(a2, "vendor:mle:adv:tx:num"))
                      {
                        if (!strcasecmp(a2, "vendor:last:host:wake:reason")
                          || !strcasecmp(a2, "vendor:coex:grant:timeout"))
                        {
                          goto LABEL_216;
                        }

                        if (strcasecmp(a2, "vendor:coex:RxThrottle:RxReq:TxAckOnGrant"))
                        {
                          if (!strcasecmp(a2, "vendor:coex:RxThrottle:Timeout")) {
                            goto LABEL_216;
                          }
                          if (strcasecmp(a2, "vendor:coex:RxThrottle:NoRxReq:TxAckOnUnsolGrant")
                            && strcasecmp(a2, "vendor:coex:RxThrottle:RxReq:TxAlwaysAck"))
                          {
                            if (strcasecmp(a2, "ip_tx_app_pkt_success")
                              && strcasecmp(a2, "ip_tx_delay_min")
                              && strcasecmp(a2, "ip_tx_delay_max")
                              && strcasecmp(a2, "ip_tx_delay_avg")
                              && strcasecmp(a2, "vendor:min:mac:interframedelay"))
                            {
                              if (strcasecmp(a2, "vendor:coex:counters"))
                              {
                                if (strcasecmp(a2, "vendor:coex:counters:asvalmap"))
                                {
                                  if (strcasecmp(a2, "vendor:coex:histograms"))
                                  {
                                    if (strcasecmp(a2, "vendor:coex:histograms:asvalmap"))
                                    {
                                      if (strcasecmp(a2, "vendor:coex:csl:reqahead:timeinus")
                                        && strcasecmp(a2, "vendor:coex:min:csl:reqahead:timeinus")
                                        && strcasecmp(a2, "vendor:csl:tx:schedframe:reqahead:timeinus"))
                                      {
                                        if (strcasecmp(a2, "vendor:ncp:logsdropped:counter")
                                          && strcasecmp(a2, "vendor:ncp:logsdropped:filter:threshold")
                                          && strcasecmp(a2, "vendor:ncp:logsdropped:filter:timeout:ms"))
                                        {
                                          if (strcasecmp(a2, "vendor:ncp:buffer:thresh"))
                                          {
                                            if (strcasecmp(a2, "vendor:ncp:state:dump"))
                                            {
                                              if (strcasecmp(a2, "vendor:radio:stats"))
                                              {
                                                if (strcasecmp(a2, "vendor:radio:stats:asvalmap"))
                                                {
                                                  if (strcasecmp(a2, "vendor:radio:counters"))
                                                  {
                                                    if (strcasecmp(a2, "vendor:radio:counters:asvalmap"))
                                                    {
                                                      if (strcasecmp(a2, "vendor:assigned:hw:mac"))
                                                      {
                                                        if (strcasecmp(a2, "vendor:power:limit:table"))
                                                        {
                                                          if (strcasecmp(a2, "vendor:power:limit:table:active:zone"))
                                                          {
                                                            if (strcasecmp(a2, "vendor:power:mapping:table:version"))
                                                            {
                                                              if (strcasecmp(a2, "vendor:power:mapping:table"))
                                                              {
                                                                if (strcasecmp(a2, "vendor:current:power:info"))
                                                                {
                                                                  if (strcasecmp(a2, "vendor:logging:mapping:table"))
                                                                  {
                                                                    if (strcasecmp(a2, "vendor:fault:info"))
                                                                    {
                                                                      if (strcasecmp(a2, "vendor:validate:settings"))
                                                                      {
                                                                        if (strcasecmp( a2,  "vendor:power:mapping:table:flash:data"))
                                                                        {
                                                                          if (strcasecmp( a2,  "vendor:MAC:packet:LQIHistogram"))
                                                                          {
                                                                            if (strcasecmp( a2,  "vendor:MAC:packet:LQIHistogram:AsValMap"))
                                                                            {
                                                                              if (strcasecmp( a2,  "vendor:MAC:packet:ErrorHistogram"))
                                                                              {
                                                                                if (strcasecmp( a2,  "vendor:MAC:packet:ErrorHistogram:AsValMap"))
                                                                                {
                                                                                  if (strcasecmp( a2,  "vendor:MAC:packet:SizeHistogram"))
                                                                                  {
                                                                                    if (strcasecmp( a2,  "vendor:MAC:packet:SizeHistogram:AsValMap"))
                                                                                    {
                                                                                      if (strcasecmp( a2,  "vendor:MAC:packet:RSSIHistogram"))
                                                                                      {
                                                                                        if (strcasecmp( a2,  "vendor:MAC:packet:RSSIHistogram:AsValMap"))
                                                                                        {
                                                                                          if (strcasecmp( a2,  "vendor:joiner:RSSIHistogram"))
                                                                                          {
                                                                                            if (strcasecmp( a2,  "vendor:joiner:RSSIHistogram:AsValMap"))
                                                                                            {
                                                                                              if (strcasecmp( a2,  "vendor:linkloss:counters"))
                                                                                              {
                                                                                                if (strcasecmp(a2, "vendor:linkloss:counters:AsValMap"))
                                                                                                {
                                                                                                  if (strcasecmp(a2, "vendor:tx:application:pkt:counters"))
                                                                                                  {
                                                                                                    if (strcasecmp(a2, "vendor:tx:application:pkt:counters:asvalmap"))
                                                                                                    {
                                                                                                      if (strcasecmp(a2, "vendor:neighbor:count:histogram"))
                                                                                                      {
                                                                                                        if (strcasecmp(a2, "vendor:neighbor:count:histogram:AsValMap"))
                                                                                                        {
                                                                                                          if (strcasecmp(a2, "vendor:cca:energydetected:histogram"))
                                                                                                          {
                                                                                                            if (strcasecmp(a2, "vendor:cca:energydetected:histogram:AsValMap"))
                                                                                                            {
                                                                                                              if (strcasecmp(a2, "vendor:csma:backoff:histogram"))
                                                                                                              {
                                                                                                                if (strcasecmp(a2, "vendor:csma:backoff:histogram:AsValMap"))
                                                                                                                {
                                                                                                                  if (strcasecmp(a2, "vendor:openthread:radio:counters"))
                                                                                                                  {
                                                                                                                    int v6 = a2;
                                                                                                                    if (strcasecmp(a2, "vendor:openthread:radio:counters:AsValMap")) {
                                                                                                                      goto LABEL_91;
                                                                                                                    }
                                                                                                                    goto LABEL_185;
                                                                                                                  }

LABEL_268:
                                                                                                                  uint64_t v211 = *(void *)(a1 + 8);
                                                                                                                  sub_1000798B4((uint64_t)&v225, v211);
                                                                                                                  uint64_t v212 = sub_1000798B8((uint64_t)&v225, a3);
                                                                                                                  sub_100034C60("Cii", (uint64_t *)&__p, 0x80u);
                                                                                                                  uint64_t v213 = sub_100079A40(v212, (uint64_t)&__p);
                                                                                                                  *((void *)&v231 + 1) = sub_10009E890;
                                                                                                                  uint64_t v232 = 0LL;
                                                                                                                  *(void *)&__int128 v231 = (char *)off_1002B0308 + 1;
                                                                                                                  uint64_t v214 = sub_10007A754(v213, (uint64_t *)&v231);
                                                                                                                  sub_10007A86C(v214, &v229);
                                                                                                                  sub_10004E9A4(v211, &v229);
                                                                                                                  goto LABEL_225;
                                                                                                                }

LABEL_267:
                                                                                                                uint64_t v207 = *(void *)(a1 + 8);
                                                                                                                sub_1000798B4((uint64_t)&v225, v207);
                                                                                                                uint64_t v208 = sub_1000798B8((uint64_t)&v225, a3);
                                                                                                                sub_100034C60("Cii", (uint64_t *)&__p, 0x80u);
                                                                                                                uint64_t v209 = sub_100079A40(v208, (uint64_t)&__p);
                                                                                                                *((void *)&v231 + 1) = sub_10009E294;
                                                                                                                uint64_t v232 = 1LL;
                                                                                                                *(void *)&__int128 v231 = (char *)off_1002B0308 + 1;
                                                                                                                uint64_t v210 = sub_10007A754(v209, (uint64_t *)&v231);
                                                                                                                sub_10007A86C(v210, &v229);
                                                                                                                sub_10004E9A4(v207, &v229);
                                                                                                                goto LABEL_225;
                                                                                                              }

LABEL_266:
                                                                                                              uint64_t v203 = *(void *)(a1 + 8);
                                                                                                              sub_1000798B4((uint64_t)&v225, v203);
                                                                                                              uint64_t v204 = sub_1000798B8((uint64_t)&v225, a3);
                                                                                                              sub_100034C60("Cii", (uint64_t *)&__p, 0x80u);
                                                                                                              uint64_t v205 = sub_100079A40(v204, (uint64_t)&__p);
                                                                                                              *((void *)&v231 + 1) = sub_10009E294;
                                                                                                              uint64_t v232 = 0LL;
                                                                                                              *(void *)&__int128 v231 = (char *)off_1002B0308 + 1;
                                                                                                              uint64_t v206 = sub_10007A754(v205, (uint64_t *)&v231);
                                                                                                              sub_10007A86C(v206, &v229);
                                                                                                              sub_10004E9A4(v203, &v229);
                                                                                                              goto LABEL_225;
                                                                                                            }

LABEL_265:
                                                                                                            uint64_t v199 = *(void *)(a1 + 8);
                                                                                                            sub_1000798B4((uint64_t)&v225, v199);
                                                                                                            uint64_t v200 = sub_1000798B8((uint64_t)&v225, a3);
                                                                                                            sub_100034C60("Cii", (uint64_t *)&__p, 0x80u);
                                                                                                            uint64_t v201 = sub_100079A40(v200, (uint64_t)&__p);
                                                                                                            *((void *)&v231 + 1) = sub_10009DC88;
                                                                                                            uint64_t v232 = 1LL;
                                                                                                            *(void *)&__int128 v231 = (char *)off_1002B0308 + 1;
                                                                                                            uint64_t v202 = sub_10007A754(v201, (uint64_t *)&v231);
                                                                                                            sub_10007A86C(v202, &v229);
                                                                                                            sub_10004E9A4(v199, &v229);
                                                                                                            goto LABEL_225;
                                                                                                          }

  v305 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) getNumberOfRecordsForKeychainAccessGroup:@"0000000000" count:400]);
  v306 = sub_1001768B4(1);
  v307 = (os_log_s *)objc_claimAutoreleasedReturnValue(v306);
  if (os_log_type_enabled(v307, OS_LOG_TYPE_ERROR)) {
    sub_100196D84(v305);
  }

  *(void *)&v427 = [v305 count];
  *((void *)&v426 + 1) = &v358[-v427];
  if (v15) {
    [*(id *)(a1 + 32) sendCAMetricsForCleanUpRecordInfo:&v426];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();

  uint64_t v2 = v309;
  v272 = v384;
LABEL_270:

  objc_autoreleasePoolPop(v2);
}

LABEL_264:
                                                                                                          uint64_t v195 = *(void *)(a1 + 8);
                                                                                                          sub_1000798B4((uint64_t)&v225, v195);
                                                                                                          uint64_t v196 = sub_1000798B8((uint64_t)&v225, a3);
                                                                                                          sub_100034C60("Cii", (uint64_t *)&__p, 0x80u);
                                                                                                          uint64_t v197 = sub_100079A40(v196, (uint64_t)&__p);
                                                                                                          *((void *)&v231 + 1) = sub_10009DC88;
                                                                                                          uint64_t v232 = 0LL;
                                                                                                          *(void *)&__int128 v231 = (char *)off_1002B0308 + 1;
                                                                                                          uint64_t v198 = sub_10007A754(v197, (uint64_t *)&v231);
                                                                                                          sub_10007A86C(v198, &v229);
                                                                                                          sub_10004E9A4(v195, &v229);
                                                                                                          goto LABEL_225;
                                                                                                        }

                                  uint64_t v92 = *(void *)(a1 + 8);
                                  sub_1000798B4((uint64_t)&__p, v92);
                                  uint64_t v93 = sub_10007993C((uint64_t)&__p, a4);
                                  sub_1001472F4(a3);
                                  sub_100034C60("Ciic", (uint64_t *)&buf, 0x80u);
                                  uint64_t v94 = sub_100079A40(v93, (uint64_t)&buf);
                                  sub_10007A86C(v94, &v184);
                                  sub_10004E9A4(v92, &v184);
                                  goto LABEL_258;
                                }

LABEL_263:
                                                                                                        uint64_t v191 = *(void *)(a1 + 8);
                                                                                                        sub_1000798B4((uint64_t)&v225, v191);
                                                                                                        uint64_t v192 = sub_1000798B8((uint64_t)&v225, a3);
                                                                                                        sub_100034C60("Cii", (uint64_t *)&__p, 0x80u);
                                                                                                        uint64_t v193 = sub_100079A40(v192, (uint64_t)&__p);
                                                                                                        *((void *)&v231 + 1) = sub_10009D5A0;
                                                                                                        uint64_t v232 = 1LL;
                                                                                                        *(void *)&__int128 v231 = (char *)off_1002B0308 + 1;
                                                                                                        uint64_t v194 = sub_10007A754(v193, (uint64_t *)&v231);
                                                                                                        sub_10007A86C(v194, &v229);
                                                                                                        sub_10004E9A4(v191, &v229);
                                                                                                        goto LABEL_225;
                                                                                                      }

LABEL_262:
                                                                                                      uint64_t v187 = *(void *)(a1 + 8);
                                                                                                      sub_1000798B4((uint64_t)&v225, v187);
                                                                                                      uint64_t v188 = sub_1000798B8((uint64_t)&v225, a3);
                                                                                                      sub_100034C60("Cii", (uint64_t *)&__p, 0x80u);
                                                                                                      uint64_t v189 = sub_100079A40(v188, (uint64_t)&__p);
                                                                                                      *((void *)&v231 + 1) = sub_10009D5A0;
                                                                                                      uint64_t v232 = 0LL;
                                                                                                      *(void *)&__int128 v231 = (char *)off_1002B0308 + 1;
                                                                                                      uint64_t v190 = sub_10007A754(v189, (uint64_t *)&v231);
                                                                                                      sub_10007A86C(v190, &v229);
                                                                                                      sub_10004E9A4(v187, &v229);
                                                                                                      goto LABEL_225;
                                                                                                    }

LABEL_261:
                                                                                                    uint64_t v183 = *(void *)(a1 + 8);
                                                                                                    sub_1000798B4((uint64_t)&v225, v183);
                                                                                                    uint64_t v184 = sub_1000798B8((uint64_t)&v225, a3);
                                                                                                    sub_100034C60("Cii", (uint64_t *)&__p, 0x80u);
                                                                                                    uint64_t v185 = sub_100079A40(v184, (uint64_t)&__p);
                                                                                                    *((void *)&v231 + 1) = sub_10009D29C;
                                                                                                    uint64_t v232 = 1LL;
                                                                                                    *(void *)&__int128 v231 = (char *)off_1002B0308 + 1;
                                                                                                    uint64_t v186 = sub_10007A754(v185, (uint64_t *)&v231);
                                                                                                    sub_10007A86C(v186, &v229);
                                                                                                    sub_10004E9A4(v183, &v229);
                                                                                                    goto LABEL_225;
                                                                                                  }

LABEL_260:
                                                                                                  uint64_t v179 = *(void *)(a1 + 8);
                                                                                                  sub_1000798B4( (uint64_t)&v225,  v179);
                                                                                                  uint64_t v180 = sub_1000798B8((uint64_t)&v225, a3);
                                                                                                  sub_100034C60( "Cii",  (uint64_t *)&__p,  0x80u);
                                                                                                  uint64_t v181 = sub_100079A40(v180, (uint64_t)&__p);
                                                                                                  *((void *)&v231 + 1) = sub_10009D29C;
                                                                                                  uint64_t v232 = 0LL;
                                                                                                  *(void *)&__int128 v231 = (char *)off_1002B0308 + 1;
                                                                                                  uint64_t v182 = sub_10007A754(v181, (uint64_t *)&v231);
                                                                                                  sub_10007A86C( v182,  &v229);
                                                                                                  sub_10004E9A4( v179,  &v229);
                                                                                                  goto LABEL_225;
                                                                                                }

LABEL_259:
                                                                                                uint64_t v175 = *(void *)(a1 + 8);
                                                                                                sub_1000798B4( (uint64_t)&v225,  v175);
                                                                                                uint64_t v176 = sub_1000798B8((uint64_t)&v225, a3);
                                                                                                sub_100034C60( "Cii",  (uint64_t *)&__p,  0x80u);
                                                                                                uint64_t v177 = sub_100079A40(v176, (uint64_t)&__p);
                                                                                                *((void *)&v231 + 1) = sub_10009D08C;
                                                                                                uint64_t v232 = 1LL;
                                                                                                *(void *)&__int128 v231 = (char *)off_1002B0308 + 1;
                                                                                                uint64_t v178 = sub_10007A754(v177, (uint64_t *)&v231);
                                                                                                sub_10007A86C( v178,  &v229);
                                                                                                sub_10004E9A4( v175,  &v229);
                                                                                                goto LABEL_225;
                                                                                              }

                                uint64_t v181 = bswap64((unint64_t)sub_1001476B4(a3, 1));
                                uint64_t v91 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                                if (v91)
                                {
                                  if (sub_10015A058(6) && os_log_type_enabled(v91, OS_LOG_TYPE_INFO))
                                  {
                                    LODWORD(__p.__r_.__value_.__l.__data_) = 134217984;
                                    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v181;
                                    _os_log_impl( (void *)&_mh_execute_header,  v91,  OS_LOG_TYPE_INFO,  "Got Hw Addr: %llx",  (uint8_t *)&__p,  0xCu);
                                  }
                                }

                                else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                {
                                  sub_1001FB53C();
                                }

                                uint64_t v95 = *(void *)(a1 + 8);
                                sub_1000798B4((uint64_t)&__p, v95);
                                uint64_t v96 = sub_10007993C((uint64_t)&__p, a4);
                                sub_100034C60("CiiE", (uint64_t *)&buf, 0x80u);
                                uint64_t v97 = sub_100079A40(v96, (uint64_t)&buf);
                                sub_10007A86C(v97, &v184);
                                sub_10004E9A4(v95, &v184);
                                goto LABEL_258;
                              }

LABEL_258:
                                                                                              uint64_t v171 = *(void *)(a1 + 8);
                                                                                              sub_1000798B4( (uint64_t)&v225,  v171);
                                                                                              uint64_t v172 = sub_1000798B8((uint64_t)&v225, a3);
                                                                                              sub_100034C60( "Cii",  (uint64_t *)&__p,  0x80u);
                                                                                              uint64_t v173 = sub_100079A40(v172, (uint64_t)&__p);
                                                                                              *((void *)&v231 + 1) = sub_10009D08C;
                                                                                              uint64_t v232 = 0LL;
                                                                                              *(void *)&__int128 v231 = (char *)off_1002B0308 + 1;
                                                                                              uint64_t v174 = sub_10007A754(v173, (uint64_t *)&v231);
                                                                                              sub_10007A86C(v174, &v229);
                                                                                              sub_10004E9A4(v171, &v229);
                                                                                              goto LABEL_225;
                                                                                            }

LABEL_257:
                                                                                            uint64_t v167 = *(void *)(a1 + 8);
                                                                                            sub_1000798B4( (uint64_t)&v225,  v167);
                                                                                            uint64_t v168 = sub_1000798B8( (uint64_t)&v225,  a3);
                                                                                            sub_100034C60( "Cii",  (uint64_t *)&__p,  0x80u);
                                                                                            uint64_t v169 = sub_100079A40( v168,  (uint64_t)&__p);
                                                                                            *((void *)&v231 + 1) = sub_10009CDBC;
                                                                                            uint64_t v232 = 1LL;
                                                                                            *(void *)&__int128 v231 = (char *)off_1002B0308 + 1;
                                                                                            uint64_t v170 = sub_10007A754( v169,  (uint64_t *)&v231);
                                                                                            sub_10007A86C(v170, &v229);
                                                                                            sub_10004E9A4(v167, &v229);
                                                                                            goto LABEL_225;
                                                                                          }

                                                        uint64_t v88 = *(void *)(a1 + 8);
                                                        sub_1000798B4((uint64_t)&__p, v88);
                                                        uint64_t v89 = sub_10007993C((uint64_t)&__p, a4);
                                                        sub_1001472F4(a3);
                                                        sub_100034C60("CiiC", (uint64_t *)&buf, 0x80u);
                                                        uint64_t v90 = sub_100079A40(v89, (uint64_t)&buf);
                                                        sub_10007A86C(v90, &v184);
                                                        sub_10004E9A4(v88, &v184);
                                                        goto LABEL_258;
                                                      }

                                                      goto LABEL_394;
                                                    }

LABEL_256:
                                                                                          uint64_t v163 = *(void *)(a1 + 8);
                                                                                          sub_1000798B4( (uint64_t)&v225,  v163);
                                                                                          uint64_t v164 = sub_1000798B8( (uint64_t)&v225,  a3);
                                                                                          sub_100034C60( "Cii",  (uint64_t *)&__p,  0x80u);
                                                                                          uint64_t v165 = sub_100079A40( v164,  (uint64_t)&__p);
                                                                                          *((void *)&v231 + 1) = sub_10009CDBC;
                                                                                          uint64_t v232 = 0LL;
                                                                                          *(void *)&__int128 v231 = (char *)off_1002B0308 + 1;
                                                                                          uint64_t v166 = sub_10007A754( v165,  (uint64_t *)&v231);
                                                                                          sub_10007A86C(v166, &v229);
                                                                                          sub_10004E9A4(v163, &v229);
                                                                                          goto LABEL_225;
                                                                                        }

LABEL_255:
                                                                                        uint64_t v159 = *(void *)(a1 + 8);
                                                                                        sub_1000798B4( (uint64_t)&v225,  v159);
                                                                                        uint64_t v160 = sub_1000798B8( (uint64_t)&v225,  a3);
                                                                                        sub_100034C60( "Cii",  (uint64_t *)&__p,  0x80u);
                                                                                        uint64_t v161 = sub_100079A40( v160,  (uint64_t)&__p);
                                                                                        *((void *)&v231 + 1) = sub_10009C85C;
                                                                                        uint64_t v232 = 1LL;
                                                                                        *(void *)&__int128 v231 = (char *)off_1002B0308 + 1;
                                                                                        uint64_t v162 = sub_10007A754( v161,  (uint64_t *)&v231);
                                                                                        sub_10007A86C(v162, &v229);
                                                                                        sub_10004E9A4(v159, &v229);
                                                                                        goto LABEL_225;
                                                                                      }

LABEL_254:
                                                                                      uint64_t v155 = *(void *)(a1 + 8);
                                                                                      sub_1000798B4( (uint64_t)&v225,  v155);
                                                                                      uint64_t v156 = sub_1000798B8( (uint64_t)&v225,  a3);
                                                                                      sub_100034C60( "Cii",  (uint64_t *)&__p,  0x80u);
                                                                                      uint64_t v157 = sub_100079A40( v156,  (uint64_t)&__p);
                                                                                      *((void *)&v231 + 1) = sub_10009C85C;
                                                                                      uint64_t v232 = 0LL;
                                                                                      *(void *)&__int128 v231 = (char *)off_1002B0308 + 1;
                                                                                      uint64_t v158 = sub_10007A754( v157,  (uint64_t *)&v231);
                                                                                      sub_10007A86C(v158, &v229);
                                                                                      sub_10004E9A4(v155, &v229);
                                                                                      goto LABEL_225;
                                                                                    }

LABEL_253:
                                                                                    uint64_t v151 = *(void *)(a1 + 8);
                                                                                    sub_1000798B4((uint64_t)&v225, v151);
                                                                                    uint64_t v152 = sub_1000798B8( (uint64_t)&v225,  a3);
                                                                                    sub_100034C60( "Cii",  (uint64_t *)&__p,  0x80u);
                                                                                    uint64_t v153 = sub_100079A40( v152,  (uint64_t)&__p);
                                                                                    *((void *)&v231 + 1) = sub_10009C2FC;
                                                                                    uint64_t v232 = 1LL;
                                                                                    *(void *)&__int128 v231 = (char *)off_1002B0308 + 1;
                                                                                    uint64_t v154 = sub_10007A754( v153,  (uint64_t *)&v231);
                                                                                    sub_10007A86C(v154, &v229);
                                                                                    sub_10004E9A4(v151, &v229);
                                                                                    goto LABEL_225;
                                                                                  }

LABEL_252:
                                                                                  uint64_t v147 = *(void *)(a1 + 8);
                                                                                  sub_1000798B4((uint64_t)&v225, v147);
                                                                                  uint64_t v148 = sub_1000798B8( (uint64_t)&v225,  a3);
                                                                                  sub_100034C60( "Cii",  (uint64_t *)&__p,  0x80u);
                                                                                  uint64_t v149 = sub_100079A40( v148,  (uint64_t)&__p);
                                                                                  *((void *)&v231 + 1) = sub_10009C2FC;
                                                                                  uint64_t v232 = 0LL;
                                                                                  *(void *)&__int128 v231 = (char *)off_1002B0308 + 1;
                                                                                  uint64_t v150 = sub_10007A754( v149,  (uint64_t *)&v231);
                                                                                  sub_10007A86C(v150, &v229);
                                                                                  sub_10004E9A4(v147, &v229);
                                                                                  goto LABEL_225;
                                                                                }

LABEL_251:
                                                                                uint64_t v143 = *(void *)(a1 + 8);
                                                                                sub_1000798B4((uint64_t)&v225, v143);
                                                                                uint64_t v144 = sub_1000798B8((uint64_t)&v225, a3);
                                                                                sub_100034C60( "Cii",  (uint64_t *)&__p,  0x80u);
                                                                                uint64_t v145 = sub_100079A40( v144,  (uint64_t)&__p);
                                                                                *((void *)&v231 + 1) = sub_10009BD60;
                                                                                uint64_t v232 = 1LL;
                                                                                *(void *)&__int128 v231 = (char *)off_1002B0308
                                                                                                 + 1;
                                                                                uint64_t v146 = sub_10007A754( v145,  (uint64_t *)&v231);
                                                                                sub_10007A86C(v146, &v229);
                                                                                sub_10004E9A4(v143, &v229);
                                                                                goto LABEL_225;
                                                                              }

LABEL_250:
                                                                              uint64_t v139 = *(void *)(a1 + 8);
                                                                              sub_1000798B4((uint64_t)&v225, v139);
                                                                              uint64_t v140 = sub_1000798B8((uint64_t)&v225, a3);
                                                                              sub_100034C60( "Cii",  (uint64_t *)&__p,  0x80u);
                                                                              uint64_t v141 = sub_100079A40(v140, (uint64_t)&__p);
                                                                              *((void *)&v231 + 1) = sub_10009BD60;
                                                                              uint64_t v232 = 0LL;
                                                                              *(void *)&__int128 v231 = (char *)off_1002B0308
                                                                                               + 1;
                                                                              uint64_t v142 = sub_10007A754( v141,  (uint64_t *)&v231);
                                                                              sub_10007A86C(v142, &v229);
                                                                              sub_10004E9A4(v139, &v229);
                                                                              goto LABEL_225;
                                                                            }

      if (*(void *)buf == 0x6369766544646E45LL
        && *(void *)&buf[8] == 0x4374656B63615065LL
        && *(void *)&buf[15] == 0x5D355B746E756F43LL)
      {
        goto LABEL_303;
      }

      if (*(void *)buf == 0x6369766544646E45LL
        && *(void *)&buf[8] == 0x4374656B63615065LL
        && *(void *)&buf[15] == 0x5D365B746E756F43LL)
      {
        goto LABEL_304;
      }

      if (*(void *)buf == 0x6369766544646E45LL
        && *(void *)&buf[8] == 0x4374656B63615065LL
        && *(void *)&buf[15] == 0x5D355B746E756F43LL)
      {
        goto LABEL_303;
      }

      if (*(void *)buf == 0x6369766544646E45LL
        && *(void *)&buf[8] == 0x4374656B63615065LL
        && *(void *)&buf[15] == 0x5D365B746E756F43LL)
      {
        goto LABEL_304;
      }

LABEL_249:
                                                                            uint64_t v135 = *(void *)(a1 + 8);
                                                                            sub_1000798B4((uint64_t)&v225, v135);
                                                                            uint64_t v136 = sub_1000798B8((uint64_t)&v225, a3);
                                                                            sub_100034C60("Cii", (uint64_t *)&__p, 0x80u);
                                                                            uint64_t v137 = sub_100079A40(v136, (uint64_t)&__p);
                                                                            *((void *)&v231 + 1) = sub_10009BA90;
                                                                            uint64_t v232 = 1LL;
                                                                            *(void *)&__int128 v231 = (char *)off_1002B0308 + 1;
                                                                            uint64_t v138 = sub_10007A754(v137, (uint64_t *)&v231);
                                                                            sub_10007A86C(v138, &v229);
                                                                            sub_10004E9A4(v135, &v229);
                                                                            goto LABEL_225;
                                                                          }

                            memset(&buf, 0, sizeof(buf));
                            sub_1000A37D8(&buf, (uint64_t)a3);
                            sub_100034C60("Cii", &v184, 0x80u);
                            sub_100033680(&__p, (uint64_t)&buf);
                            sub_100034D38((uint64_t)&v184, (uint64_t *)&__p, 68);
                            if (__p.__r_.__value_.__r.__words[0]) {
                              (*(void (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_
                            }
                                                                             + 8LL))(__p.__r_.__value_.__r.__words[0]);
                            goto LABEL_251;
                          }

LABEL_248:
                                                                          uint64_t v131 = *(void *)(a1 + 8);
                                                                          sub_1000798B4((uint64_t)&v225, v131);
                                                                          uint64_t v132 = sub_1000798B8((uint64_t)&v225, a3);
                                                                          sub_100034C60("Cii", (uint64_t *)&__p, 0x80u);
                                                                          uint64_t v133 = sub_100079A40(v132, (uint64_t)&__p);
                                                                          *((void *)&v231 + 1) = sub_10009BA90;
                                                                          uint64_t v232 = 0LL;
                                                                          *(void *)&__int128 v231 = (char *)off_1002B0308 + 1;
                                                                          uint64_t v134 = sub_10007A754(v133, (uint64_t *)&v231);
                                                                          sub_10007A86C(v134, &v229);
                                                                          sub_10004E9A4(v131, &v229);
                                                                          goto LABEL_225;
                                                                        }

LABEL_247:
                                                                        uint64_t v127 = *(void *)(a1 + 8);
                                                                        sub_1000798B4((uint64_t)&v225, v127);
                                                                        uint64_t v128 = sub_1000798B8((uint64_t)&v225, a3);
                                                                        sub_100034C60("Cii", (uint64_t *)&__p, 0x80u);
                                                                        uint64_t v129 = sub_100079A40(v128, (uint64_t)&__p);
                                                                        *(void *)&__int128 v231 = (char *)off_1002B02C8 + 1;
                                                                        *((void *)&v231 + 1) = sub_10009B630;
                                                                        uint64_t v130 = sub_10007A754(v129, (uint64_t *)&v231);
                                                                        sub_10007A86C(v130, &v229);
                                                                        sub_10004E9A4(v127, &v229);
                                                                        goto LABEL_225;
                                                                      }

LABEL_246:
                                                                      uint64_t v123 = *(void *)(a1 + 8);
                                                                      sub_1000798B4((uint64_t)&v225, v123);
                                                                      uint64_t v124 = sub_1000798B8((uint64_t)&v225, a3);
                                                                      sub_100034C60("Cii", (uint64_t *)&__p, 0x80u);
                                                                      uint64_t v125 = sub_100079A40(v124, (uint64_t)&__p);
                                                                      *(void *)&__int128 v231 = (char *)off_1002B02C8 + 1;
                                                                      *((void *)&v231 + 1) = sub_10009B434;
                                                                      uint64_t v126 = sub_10007A754(v125, (uint64_t *)&v231);
                                                                      sub_10007A86C(v126, &v229);
                                                                      sub_10004E9A4(v123, &v229);
                                                                      goto LABEL_225;
                                                                    }

LABEL_245:
                                                                    uint64_t v119 = *(void *)(a1 + 8);
                                                                    sub_1000798B4((uint64_t)&v225, v119);
                                                                    uint64_t v120 = sub_1000798B8((uint64_t)&v225, a3);
                                                                    sub_100034C60("Cii", (uint64_t *)&__p, 0x80u);
                                                                    uint64_t v121 = sub_100079A40(v120, (uint64_t)&__p);
                                                                    *(void *)&__int128 v231 = (char *)off_1002B02C8 + 1;
                                                                    *((void *)&v231 + 1) = sub_10009B0B0;
                                                                    uint64_t v122 = sub_10007A754(v121, (uint64_t *)&v231);
                                                                    sub_10007A86C(v122, &v229);
                                                                    sub_10004E9A4(v119, &v229);
                                                                    goto LABEL_225;
                                                                  }

LABEL_244:
                                                                  uint64_t v115 = *(void *)(a1 + 8);
                                                                  sub_1000798B4((uint64_t)&v225, v115);
                                                                  uint64_t v116 = sub_1000798B8((uint64_t)&v225, a3);
                                                                  sub_100034C60("Cii", (uint64_t *)&__p, 0x80u);
                                                                  uint64_t v117 = sub_100079A40(v116, (uint64_t)&__p);
                                                                  *(void *)&__int128 v231 = (char *)off_1002B02C8 + 1;
                                                                  *((void *)&v231 + 1) = sub_10009ABD0;
                                                                  uint64_t v118 = sub_10007A754(v117, (uint64_t *)&v231);
                                                                  sub_10007A86C(v118, &v229);
                                                                  sub_10004E9A4(v115, &v229);
                                                                  goto LABEL_225;
                                                                }

LABEL_243:
                                                                uint64_t v111 = *(void *)(a1 + 8);
                                                                sub_1000798B4((uint64_t)&v225, v111);
                                                                uint64_t v112 = sub_1000798B8((uint64_t)&v225, a3);
                                                                sub_100034C60("Cii", (uint64_t *)&__p, 0x80u);
                                                                uint64_t v113 = sub_100079A40(v112, (uint64_t)&__p);
                                                                *(void *)&__int128 v231 = (char *)off_1002B02C8 + 1;
                                                                *((void *)&v231 + 1) = sub_10009A9C4;
                                                                uint64_t v114 = sub_10007A754(v113, (uint64_t *)&v231);
                                                                sub_10007A86C(v114, &v229);
                                                                sub_10004E9A4(v111, &v229);
                                                                goto LABEL_225;
                                                              }

LABEL_242:
                                                              uint64_t v107 = *(void *)(a1 + 8);
                                                              sub_1000798B4((uint64_t)&v225, v107);
                                                              uint64_t v108 = sub_1000798B8((uint64_t)&v225, a3);
                                                              sub_100034C60("Cii", (uint64_t *)&__p, 0x80u);
                                                              uint64_t v109 = sub_100079A40(v108, (uint64_t)&__p);
                                                              *(void *)&__int128 v231 = (char *)off_1002B02C8 + 1;
                                                              *((void *)&v231 + 1) = sub_100099F7C;
                                                              uint64_t v110 = sub_10007A754(v109, (uint64_t *)&v231);
                                                              sub_10007A86C(v110, &v229);
                                                              sub_10004E9A4(v107, &v229);
                                                              goto LABEL_225;
                                                            }

    if (sub_1000B55AC(&buf, "RxPacketCount[10]"))
    {
      DWORD2(v90) = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(&buf, "RxPacketCount[11]"))
    {
      HIDWORD(v90) = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(&buf, "RxPacketCount[12]"))
    {
      LODWORD(v91) = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(&buf, "RxPacketCount[13]"))
    {
      DWORD1(v91) = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(&buf, "RxPacketCount[14]"))
    {
      DWORD2(v91) = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(&buf, "RxPacketCount[15]"))
    {
      uint64_t v85 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(&buf, "RxPacketCount[16]"))
    {
      uint64_t v83 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(&buf, "RxPacketCount[17]"))
    {
      uint64_t v81 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(&buf, "RxPacketCount[18]"))
    {
      uint64_t v79 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(&buf, "RxPacketCount[19]"))
    {
      uint64_t v77 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(&buf, "RxPacketCount[20]"))
    {
      uint64_t v75 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(&buf, "RxPacketCount[21]"))
    {
      uint64_t v72 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(&buf, "RxPacketCount[22]"))
    {
      uint64_t v70 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(&buf, "RxPacketCount[23]"))
    {
      uint64_t v68 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(&buf, "RxPacketCount[24]"))
    {
      uint64_t v66 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(&buf, "RxPacketCount[25]"))
    {
      uint64_t v64 = sub_1000BE984(4, uint64);
    }

LABEL_241:
                                                            uint64_t v103 = *(void *)(a1 + 8);
                                                            sub_1000798B4((uint64_t)&v225, v103);
                                                            uint64_t v104 = sub_1000798B8((uint64_t)&v225, a3);
                                                            sub_100034C60("Cii", (uint64_t *)&__p, 0x80u);
                                                            uint64_t v105 = sub_100079A40(v104, (uint64_t)&__p);
                                                            *(void *)&__int128 v231 = (char *)off_1002B02C8 + 1;
                                                            *((void *)&v231 + 1) = sub_100099CD4;
                                                            uint64_t v106 = sub_10007A754(v105, (uint64_t *)&v231);
                                                            sub_10007A86C(v106, &v229);
                                                            sub_10004E9A4(v103, &v229);
                                                            goto LABEL_225;
                                                          }

      if ((__s1[23] & 0x80000000) != 0) {
        operator delete(*(void **)__s1);
      }
      if (count == ++v10)
      {
        count = 0LL;
        goto LABEL_245;
      }
    }
  }

  uint64_t v5 = sub_1000160F4("com.apple.wpantund.awd", "default");
  int v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_ERROR)) {
    sub_100212EDC();
  }
  count = 1LL;
LABEL_245:

LABEL_246:
  return count;
}

LABEL_240:
                                                          uint64_t v99 = *(void *)(a1 + 8);
                                                          sub_1000798B4((uint64_t)&v225, v99);
                                                          uint64_t v100 = sub_1000798B8((uint64_t)&v225, a3);
                                                          sub_100034C60("Cii", (uint64_t *)&__p, 0x80u);
                                                          uint64_t v101 = sub_100079A40(v100, (uint64_t)&__p);
                                                          *(void *)&__int128 v231 = (char *)off_1002B02C8 + 1;
                                                          *((void *)&v231 + 1) = sub_100099A00;
                                                          uint64_t v102 = sub_10007A754(v101, (uint64_t *)&v231);
                                                          sub_10007A86C(v102, &v229);
                                                          sub_10004E9A4(v99, &v229);
                                                          goto LABEL_225;
                                                        }

LABEL_239:
                                                        uint64_t v95 = *(void *)(a1 + 8);
                                                        sub_1000798B4((uint64_t)&v225, v95);
                                                        uint64_t v96 = sub_1000798B8((uint64_t)&v225, a3);
                                                        sub_100034C60("Cii", (uint64_t *)&__p, 0x80u);
                                                        uint64_t v97 = sub_100079A40(v96, (uint64_t)&__p);
                                                        *(void *)&__int128 v231 = (char *)off_1002B02C8 + 1;
                                                        *((void *)&v231 + 1) = sub_100099468;
                                                        uint64_t v98 = sub_10007A754(v97, (uint64_t *)&v231);
                                                        sub_10007A86C(v98, &v229);
                                                        sub_10004E9A4(v95, &v229);
                                                        goto LABEL_225;
                                                      }

LABEL_237:
                                                    uint64_t v87 = *(void *)(a1 + 8);
                                                    sub_1000798B4((uint64_t)&v225, v87);
                                                    uint64_t v88 = sub_1000798B8((uint64_t)&v225, a3);
                                                    sub_100034C60("Cii", (uint64_t *)&__p, 0x80u);
                                                    uint64_t v89 = sub_100079A40(v88, (uint64_t)&__p);
                                                    *((void *)&v231 + 1) = sub_100098F4C;
                                                    uint64_t v232 = 1LL;
                                                    *(void *)&__int128 v231 = (char *)off_1002B0308 + 1;
                                                    uint64_t v90 = sub_10007A754(v89, (uint64_t *)&v231);
                                                    sub_10007A86C(v90, &v229);
                                                    sub_10004E9A4(v87, &v229);
                                                    goto LABEL_225;
                                                  }

LABEL_236:
                                                  uint64_t v83 = *(void *)(a1 + 8);
                                                  sub_1000798B4((uint64_t)&v225, v83);
                                                  uint64_t v84 = sub_1000798B8((uint64_t)&v225, a3);
                                                  sub_100034C60("Cii", (uint64_t *)&__p, 0x80u);
                                                  uint64_t v85 = sub_100079A40(v84, (uint64_t)&__p);
                                                  *((void *)&v231 + 1) = sub_100098F4C;
                                                  uint64_t v232 = 0LL;
                                                  *(void *)&__int128 v231 = (char *)off_1002B0308 + 1;
                                                  uint64_t v86 = sub_10007A754(v85, (uint64_t *)&v231);
                                                  sub_10007A86C(v86, &v229);
                                                  sub_10004E9A4(v83, &v229);
                                                  goto LABEL_225;
                                                }

LABEL_235:
                                                uint64_t v79 = *(void *)(a1 + 8);
                                                sub_1000798B4((uint64_t)&v225, v79);
                                                uint64_t v80 = sub_1000798B8((uint64_t)&v225, a3);
                                                sub_100034C60("Cii", (uint64_t *)&__p, 0x80u);
                                                uint64_t v81 = sub_100079A40(v80, (uint64_t)&__p);
                                                *((void *)&v231 + 1) = sub_100098B28;
                                                uint64_t v232 = 1LL;
                                                *(void *)&__int128 v231 = (char *)off_1002B0308 + 1;
                                                uint64_t v82 = sub_10007A754(v81, (uint64_t *)&v231);
                                                sub_10007A86C(v82, &v229);
                                                sub_10004E9A4(v79, &v229);
                                                goto LABEL_225;
                                              }

LABEL_234:
                                              uint64_t v75 = *(void *)(a1 + 8);
                                              sub_1000798B4((uint64_t)&v225, v75);
                                              uint64_t v76 = sub_1000798B8((uint64_t)&v225, a3);
                                              sub_100034C60("Cii", (uint64_t *)&__p, 0x80u);
                                              uint64_t v77 = sub_100079A40(v76, (uint64_t)&__p);
                                              *((void *)&v231 + 1) = sub_100098B28;
                                              uint64_t v232 = 0LL;
                                              *(void *)&__int128 v231 = (char *)off_1002B0308 + 1;
                                              uint64_t v78 = sub_10007A754(v77, (uint64_t *)&v231);
                                              sub_10007A86C(v78, &v229);
                                              sub_10004E9A4(v75, &v229);
                                              goto LABEL_225;
                                            }

LABEL_233:
                                            uint64_t v71 = *(void *)(a1 + 8);
                                            sub_1000798B4((uint64_t)&v225, v71);
                                            uint64_t v72 = sub_1000798B8((uint64_t)&v225, a3);
                                            sub_100034C60("Cii", (uint64_t *)&__p, 0x80u);
                                            uint64_t v73 = sub_100079A40(v72, (uint64_t)&__p);
                                            *((void *)&v231 + 1) = sub_100096798;
                                            uint64_t v232 = 0LL;
                                            *(void *)&__int128 v231 = (char *)off_1002B0308 + 1;
                                            uint64_t v74 = sub_10007A754(v73, (uint64_t *)&v231);
                                            sub_10007A86C(v74, &v229);
                                            sub_10004E9A4(v71, &v229);
                                            goto LABEL_225;
                                          }

                          sub_100147B4C(a3, &__p);
                          uint64_t v76 = sub_1000A36C4((uint64_t **)(a1 + 64), a2);
                          sub_100014D08((uint64_t)v76, (__int128 *)&__p);
                          uint64_t v77 = (char *)sub_1000A36C4((uint64_t **)(a1 + 64), a2);
                          if (v77[23] >= 0) {
                            uint64_t v78 = v77;
                          }
                          else {
                            uint64_t v78 = *(char **)v77;
                          }
                          sub_10010FFCC("vendor:deepsleep:loglevel", v78);
                          uint64_t v79 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                          if (!v79)
                          {
                            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                              sub_1001FB53C();
                            }
                            goto LABEL_257;
                          }

                          uint64_t v80 = (char)a2->__r_.__value_.__s.__size_;
                          uint64_t v81 = (std::string *)a2->__r_.__value_.__r.__words[0];
                          sub_100147B4C(a3, &__p);
                          uint64_t v82 = (char *)(v80 >= 0 ? a2 : v81);
                          uint64_t v83 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
                              ? &__p
                              : (std::string *)__p.__r_.__value_.__r.__words[0];
                          LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
                          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v82;
                          WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
                          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v83;
                          _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_INFO,  "Saved Vendor Settings property to restore it later: %s, value %s",  (uint8_t *)&buf,  0x16u);
                          goto LABEL_443;
                        }

LABEL_232:
                                          uint64_t v67 = *(void *)(a1 + 8);
                                          sub_1000798B4((uint64_t)&v225, v67);
                                          uint64_t v68 = sub_1000798B8((uint64_t)&v225, a3);
                                          sub_100034C60("Cii", (uint64_t *)&__p, 0x80u);
                                          uint64_t v69 = sub_100079A40(v68, (uint64_t)&__p);
                                          *(void *)&__int128 v231 = (char *)off_1002B0348 + 1;
                                          *((void *)&v231 + 1) = sub_100096528;
                                          uint64_t v70 = sub_10007A754(v69, (uint64_t *)&v231);
                                          sub_10007A86C(v70, &v229);
                                          sub_10004E9A4(v67, &v229);
                                          goto LABEL_225;
                                        }

                                        goto LABEL_216;
                                      }

                                      goto LABEL_196;
                                    }

LABEL_224:
                                    uint64_t v63 = *(void *)(a1 + 8);
                                    sub_1000798B4((uint64_t)&v225, v63);
                                    uint64_t v64 = sub_1000798B8((uint64_t)&v225, a3);
                                    sub_100034C60("Cii", (uint64_t *)&__p, 0x80u);
                                    uint64_t v65 = sub_100079A40(v64, (uint64_t)&__p);
                                    *((void *)&v231 + 1) = sub_100095E94;
                                    uint64_t v232 = 1LL;
                                    *(void *)&__int128 v231 = (char *)off_1002B0308 + 1;
                                    uint64_t v66 = sub_10007A754(v65, (uint64_t *)&v231);
                                    sub_10007A86C(v66, &v229);
                                    sub_10004E9A4(v63, &v229);
                                    goto LABEL_225;
                                  }

LABEL_223:
                                  uint64_t v59 = *(void *)(a1 + 8);
                                  sub_1000798B4((uint64_t)&v225, v59);
                                  uint64_t v60 = sub_1000798B8((uint64_t)&v225, a3);
                                  sub_100034C60("Cii", (uint64_t *)&__p, 0x80u);
                                  uint64_t v61 = sub_100079A40(v60, (uint64_t)&__p);
                                  *((void *)&v231 + 1) = sub_100095E94;
                                  uint64_t v232 = 0LL;
                                  *(void *)&__int128 v231 = (char *)off_1002B0308 + 1;
                                  uint64_t v62 = sub_10007A754(v61, (uint64_t *)&v231);
                                  sub_10007A86C(v62, &v229);
                                  sub_10004E9A4(v59, &v229);
                                  goto LABEL_225;
                                }

LABEL_222:
                                uint64_t v55 = *(void *)(a1 + 8);
                                sub_1000798B4((uint64_t)&v225, v55);
                                uint64_t v56 = sub_1000798B8((uint64_t)&v225, a3);
                                sub_100034C60("Cii", (uint64_t *)&__p, 0x80u);
                                uint64_t v57 = sub_100079A40(v56, (uint64_t)&__p);
                                *((void *)&v231 + 1) = sub_1000956EC;
                                uint64_t v232 = 1LL;
                                *(void *)&__int128 v231 = (char *)off_1002B0308 + 1;
                                uint64_t v58 = sub_10007A754(v57, (uint64_t *)&v231);
                                sub_10007A86C(v58, &v229);
                                sub_10004E9A4(v55, &v229);
                                goto LABEL_225;
                              }

LABEL_221:
                              uint64_t v51 = *(void *)(a1 + 8);
                              sub_1000798B4((uint64_t)&v225, v51);
                              uint64_t v52 = sub_1000798B8((uint64_t)&v225, a3);
                              sub_100034C60("Cii", (uint64_t *)&__p, 0x80u);
                              uint64_t v53 = sub_100079A40(v52, (uint64_t)&__p);
                              *((void *)&v231 + 1) = sub_1000956EC;
                              uint64_t v232 = 0LL;
                              *(void *)&__int128 v231 = (char *)off_1002B0308 + 1;
                              uint64_t v54 = sub_10007A754(v53, (uint64_t *)&v231);
                              sub_10007A86C(v54, &v229);
                              sub_10004E9A4(v51, &v229);
                              goto LABEL_225;
                            }

LABEL_216:
                            uint64_t v46 = *(void *)(a1 + 8);
                            sub_1000798B4((uint64_t)&v225, v46);
                            uint64_t v47 = sub_1000798B8((uint64_t)&v225, a3);
                            sub_100034C60("Cii", (uint64_t *)&v231, 0x80u);
                            uint64_t v48 = sub_100079A40(v47, (uint64_t)&v231);
                            sub_10000AC00(&__p, "L");
                            uint64_t v49 = sub_100079AD0(v48, &__p);
                            sub_10007A86C(v49, &v229);
                            sub_10004E9A4(v46, &v229);
                            goto LABEL_217;
                          }
                        }
                      }

                      goto LABEL_195;
                    }

LABEL_207:
                    uint64_t v42 = *(void *)(a1 + 8);
                    sub_1000798B4((uint64_t)&v225, v42);
                    uint64_t v43 = sub_1000798B8((uint64_t)&v225, a3);
                    sub_100034C60("Cii", (uint64_t *)&v231, 0x80u);
                    uint64_t v44 = sub_100079A40(v43, (uint64_t)&v231);
                    sub_10000AC00(&__p, "c");
                    uint64_t v45 = sub_100079AD0(v44, &__p);
                    sub_10007A86C(v45, &v229);
                    sub_10004E9A4(v42, &v229);
                    goto LABEL_217;
                  }

                  sub_100147B4C(a3, &__p);
                  uint64_t v58 = sub_1000A36C4((uint64_t **)(a1 + 64), a2);
                  sub_100014D08((uint64_t)v58, (__int128 *)&__p);
                  uint64_t v59 = (char *)sub_1000A36C4((uint64_t **)(a1 + 64), a2);
                  if (v59[23] >= 0) {
                    uint64_t v60 = v59;
                  }
                  else {
                    uint64_t v60 = *(char **)v59;
                  }
                  sub_10010FFCC("vendor:ifs:ackturnaround:time", v60);
                  uint64_t v61 = *(void *)(a1 + 8);
                  sub_1000798B4((uint64_t)&__p, v61);
                  uint64_t v62 = sub_10007993C((uint64_t)&__p, a4);
                  sub_1001472F4(a3);
                  sub_100034C60("CiiS", (uint64_t *)&buf, 0x80u);
                  uint64_t v63 = sub_100079A40(v62, (uint64_t)&buf);
                  sub_10007A86C(v63, &v184);
                  sub_10004E9A4(v61, &v184);
                  goto LABEL_258;
                }

LABEL_206:
                  uint64_t v38 = *(void *)(a1 + 8);
                  sub_1000798B4((uint64_t)&v225, v38);
                  uint64_t v39 = sub_1000798B8((uint64_t)&v225, a3);
                  sub_100034C60("Cii", (uint64_t *)&v231, 0x80u);
                  uint64_t v40 = sub_100079A40(v39, (uint64_t)&v231);
                  sub_10000AC00(&__p, "U");
                  uint64_t v41 = sub_100079AD0(v40, &__p);
                  sub_10007A86C(v41, &v229);
                  sub_10004E9A4(v38, &v229);
                  goto LABEL_217;
                }

                goto LABEL_195;
              }

LABEL_203:
              uint64_t v34 = *(void *)(a1 + 8);
              sub_1000798B4((uint64_t)&v225, v34);
              uint64_t v35 = sub_1000798B8((uint64_t)&v225, a3);
              sub_100034C60("Cii", (uint64_t *)&v231, 0x80u);
              uint64_t v36 = sub_100079A40(v35, (uint64_t)&v231);
              sub_10000AC00(&__p, "");
              uint64_t v37 = sub_100079AD0(v36, &__p);
              sub_10007A86C(v37, &v229);
              sub_10004E9A4(v34, &v229);
              goto LABEL_217;
            }

            goto LABEL_201;
          }

          goto LABEL_196;
        }

LABEL_194:
        uint64_t v22 = *(void *)(a1 + 8);
        sub_1000798B4((uint64_t)&v225, v22);
        uint64_t v23 = sub_1000798B8((uint64_t)&v225, a3);
        sub_100034C60("Cii", (uint64_t *)&v231, 0x80u);
        uint64_t v24 = sub_100079A40(v23, (uint64_t)&v231);
        sub_10000AC00(&__p, "b");
        uint64_t v25 = sub_100079AD0(v24, &__p);
        sub_10007A86C(v25, &v229);
        sub_10004E9A4(v22, &v229);
LABEL_217:
        sub_10000F9EC(&v230);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v231;
        p_p = (void ***)&__p;
        goto LABEL_220;
      }

      goto LABEL_187;
    }

    operator delete((void *)buf);
LABEL_195:
    ++v11;
  }

  while (count != v11);
  HIDWORD(v91) = v66;
  LODWORD(v91) = v75;
  *(void *)((char *)&v91 + 4) = __PAIR64__(v69, v72);
  HIDWORD(v90) = v80;
  LODWORD(v90) = HIDWORD(v61);
  *(void *)((char *)&v90 + 4) = __PAIR64__(v83, v61);
  HIDWORD(v89) = v62;
  LODWORD(v89) = v68;
  *(void *)((char *)&v89 + 4) = __PAIR64__(v63, v65);
  HIDWORD(v88) = v74;
  LODWORD(v88) = v82;
  *(void *)((char *)&v88 + 4) = __PAIR64__(v77, v78);
  HIDWORD(v87) = v64;
  LODWORD(v87) = v71;
  *(void *)((char *)&v87 + 4) = __PAIR64__(v67, v70);
  HIDWORD(v86) = v73;
  LODWORD(v86) = v81;
  *(void *)((char *)&v86 + 4) = __PAIR64__(v76, v79);
LABEL_201:
  for (unint64_t i = 0LL; i != 64; i += 4LL)
  {
    uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "sCntrsMacTx", v61));
    [v57 addTxDirectRetryAttemptsHistogram:*(unsigned int *)((char *)&v88 + i)];
  }

  for (uint64_t j = 0LL; j != 32; j += 4LL)
  {
    uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([v4 sCntrsMacTx]);
    [v59 addTxIndirectRetryAttemptsHistogram:*(unsigned int *)((char *)&v86 + j)];
  }

  unsigned __int8 v7 = 0LL;
LABEL_206:

  return v7;
}

LABEL_186:
    uint64_t v13 = *(void *)(a1 + 8);
    sub_1000798B4((uint64_t)&v225, v13);
    uint64_t v14 = sub_1000798B8((uint64_t)&v225, a3);
    sub_100034C60("Cii", (uint64_t *)&v231, 0x80u);
    uint64_t v15 = sub_100079A40(v14, (uint64_t)&v231);
    sub_10000AC00(&__p, "L");
    uint64_t v16 = sub_100079AD0(v15, &__p);
    sub_10007A86C(v16, &v229);
    sub_10004E9A4(v13, &v229);
LABEL_188:
    sub_10000F9EC(&v230);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v231;
    sub_100006F6C((void ***)&__p);
    sub_10004BF94(v228);
    sub_10004BED0(v227);
    sub_10004BEF8(v226);
    p_unsigned __int8 size = &v225.__r_.__value_.__l.__size_;
    goto LABEL_191;
  }

  int v6 = *(const char **)a2;
  if (!strcasecmp(v6, "vendor:coex:rx_mode")
    || !strcasecmp(v6, "vendor:coex:tx_mode")
    || !strcasecmp(v6, "vendor:coex:enabled")
    || !strcasecmp(v6, "vendor:fem:enabled")
    || !strcasecmp(v6, "vendor:csma:min:be")
    || !strcasecmp(v6, "vendor:csma:max:be"))
  {
LABEL_187:
    uint64_t v17 = *(void *)(a1 + 8);
    sub_1000798B4((uint64_t)&v225, v17);
    uint64_t v18 = sub_1000798B8((uint64_t)&v225, a3);
    sub_100034C60("Cii", (uint64_t *)&v231, 0x80u);
    uint64_t v19 = sub_100079A40(v18, (uint64_t)&v231);
    sub_10000AC00(&__p, "C");
    uint64_t v20 = sub_100079AD0(v19, &__p);
    sub_10007A86C(v20, &v229);
    sub_10004E9A4(v17, &v229);
    goto LABEL_188;
  }

  if (!strcasecmp(v6, "vendor:csma:max:backoffs")) {
    goto LABEL_195;
  }
  if (!strcasecmp(v6, "vendor:csma:sliding:window:enabled")) {
    goto LABEL_194;
  }
  if (!strcasecmp(v6, "vendor:csma:cca:idleattempts") || !strcasecmp(v6, "vendor:ifs:mode")) {
    goto LABEL_195;
  }
  if (!strcasecmp(v6, "vendor:ifs:min:sifs")
    || !strcasecmp(v6, "vendor:ifs:min:lifs")
    || !strcasecmp(v6, "vendor:ifs:retx:min:sifs")
    || !strcasecmp(v6, "vendor:ifs:retx:min:lifs")
    || !strcasecmp(v6, "vendor:ifs:ackturnaround:time"))
  {
    goto LABEL_196;
  }

  if (!strcasecmp(v6, "vendor:ifs:ackturnaround:mode") || !strcasecmp(v6, "vendor:ifs:ackturnaround:enable")) {
    goto LABEL_195;
  }
  if (!strcasecmp(v6, "vendor:version"))
  {
LABEL_201:
    v223[0] = 0LL;
    sub_100007640((uint64_t)v223, a3);
    sub_100095670(a1, v223);
    p_unsigned __int8 size = v223;
LABEL_191:
    sub_100006E7C(p_size);
    return;
  }

  if (!strcasecmp(v6, "vendor:assert")) {
    goto LABEL_216;
  }
  if (!strcasecmp(v6, "vendor:hard:fault") || !strcasecmp(v6, "vendor:stack:overflow")) {
    goto LABEL_203;
  }
  if (!strcasecmp(v6, "vendor:power:limit:table:active:id")) {
    goto LABEL_195;
  }
  if (!strcasecmp(v6, "vendor:power:limit:table:version")) {
    goto LABEL_206;
  }
  if (!strcasecmp(v6, "vendor:power:limit:table:power:limit")
    || !strcasecmp(v6, "vendor:power:mapping:table:power:test")
    || !strcasecmp(v6, "vendor:NCP:RSSI:Offset"))
  {
    goto LABEL_207;
  }

  if (!strcasecmp(v6, "vendor:power:mapping:table:flash:data:isvalid?")
    || !strcasecmp(v6, "vendor:deepsleep:loglevel")
    || !strcasecmp(v6, "vendor:mle:adv:tx:num"))
  {
    goto LABEL_195;
  }

  if (!strcasecmp(v6, "vendor:last:host:wake:reason") || !strcasecmp(v6, "vendor:coex:grant:timeout")) {
    goto LABEL_216;
  }
  if (!strcasecmp(v6, "vendor:coex:RxThrottle:RxReq:TxAckOnGrant")) {
    goto LABEL_195;
  }
  if (!strcasecmp(v6, "vendor:coex:RxThrottle:Timeout")) {
    goto LABEL_216;
  }
  if (!strcasecmp(v6, "vendor:coex:RxThrottle:NoRxReq:TxAckOnUnsolGrant")
    || !strcasecmp(v6, "vendor:coex:RxThrottle:RxReq:TxAlwaysAck"))
  {
LABEL_195:
    uint64_t v26 = *(void *)(a1 + 8);
    sub_1000798B4((uint64_t)&v225, v26);
    uint64_t v27 = sub_1000798B8((uint64_t)&v225, a3);
    sub_100034C60("Cii", (uint64_t *)&v231, 0x80u);
    uint64_t v28 = sub_100079A40(v27, (uint64_t)&v231);
    sub_10000AC00(&__p, "C");
    uint64_t v29 = sub_100079AD0(v28, &__p);
    sub_10007A86C(v29, &v229);
    sub_10004E9A4(v26, &v229);
    goto LABEL_217;
  }

  if (!strcasecmp(v6, "ip_tx_app_pkt_success")
    || !strcasecmp(v6, "ip_tx_delay_min")
    || !strcasecmp(v6, "ip_tx_delay_max")
    || !strcasecmp(v6, "ip_tx_delay_avg")
    || !strcasecmp(v6, "vendor:min:mac:interframedelay"))
  {
    goto LABEL_216;
  }

  if (!strcasecmp(v6, "vendor:coex:counters")) {
    goto LABEL_221;
  }
  if (!strcasecmp(v6, "vendor:coex:counters:asvalmap")) {
    goto LABEL_222;
  }
  if (!strcasecmp(v6, "vendor:coex:histograms")) {
    goto LABEL_223;
  }
  if (!strcasecmp(v6, "vendor:coex:histograms:asvalmap")) {
    goto LABEL_224;
  }
  if (!strcasecmp(v6, "vendor:coex:csl:reqahead:timeinus")
    || !strcasecmp(v6, "vendor:coex:min:csl:reqahead:timeinus")
    || !strcasecmp(v6, "vendor:csl:tx:schedframe:reqahead:timeinus"))
  {
LABEL_196:
    uint64_t v30 = *(void *)(a1 + 8);
    sub_1000798B4((uint64_t)&v225, v30);
    uint64_t v31 = sub_1000798B8((uint64_t)&v225, a3);
    sub_100034C60("Cii", (uint64_t *)&v231, 0x80u);
    uint64_t v32 = sub_100079A40(v31, (uint64_t)&v231);
    sub_10000AC00(&__p, "S");
    uint64_t v33 = sub_100079AD0(v32, &__p);
    sub_10007A86C(v33, &v229);
    sub_10004E9A4(v30, &v229);
    goto LABEL_217;
  }

  if (!strcasecmp(v6, "vendor:ncp:logsdropped:counter")
    || !strcasecmp(v6, "vendor:ncp:logsdropped:filter:threshold")
    || !strcasecmp(v6, "vendor:ncp:logsdropped:filter:timeout:ms"))
  {
    goto LABEL_216;
  }

  if (!strcasecmp(v6, "vendor:ncp:buffer:thresh")) {
    goto LABEL_232;
  }
  if (!strcasecmp(v6, "vendor:ncp:state:dump")) {
    goto LABEL_233;
  }
  if (!strcasecmp(v6, "vendor:radio:stats")) {
    goto LABEL_234;
  }
  if (!strcasecmp(v6, "vendor:radio:stats:asvalmap")) {
    goto LABEL_235;
  }
  if (!strcasecmp(v6, "vendor:radio:counters")) {
    goto LABEL_236;
  }
  if (!strcasecmp(v6, "vendor:radio:counters:asvalmap")) {
    goto LABEL_237;
  }
  if (!strcasecmp(v6, "vendor:assigned:hw:mac")) {
    goto LABEL_238;
  }
  if (!strcasecmp(v6, "vendor:power:limit:table")) {
    goto LABEL_239;
  }
  if (!strcasecmp(v6, "vendor:power:limit:table:active:zone")) {
    goto LABEL_240;
  }
  if (!strcasecmp(v6, "vendor:power:mapping:table:version")) {
    goto LABEL_241;
  }
  if (!strcasecmp(v6, "vendor:power:mapping:table")) {
    goto LABEL_242;
  }
  if (!strcasecmp(v6, "vendor:current:power:info")) {
    goto LABEL_243;
  }
  if (!strcasecmp(v6, "vendor:logging:mapping:table")) {
    goto LABEL_244;
  }
  if (!strcasecmp(v6, "vendor:fault:info")) {
    goto LABEL_245;
  }
  if (!strcasecmp(v6, "vendor:validate:settings")) {
    goto LABEL_246;
  }
  if (!strcasecmp(v6, "vendor:power:mapping:table:flash:data")) {
    goto LABEL_247;
  }
  if (!strcasecmp(v6, "vendor:MAC:packet:LQIHistogram")) {
    goto LABEL_248;
  }
  if (!strcasecmp(v6, "vendor:MAC:packet:LQIHistogram:AsValMap")) {
    goto LABEL_249;
  }
  if (!strcasecmp(v6, "vendor:MAC:packet:ErrorHistogram")) {
    goto LABEL_250;
  }
  if (!strcasecmp(v6, "vendor:MAC:packet:ErrorHistogram:AsValMap")) {
    goto LABEL_251;
  }
  if (!strcasecmp(v6, "vendor:MAC:packet:SizeHistogram")) {
    goto LABEL_252;
  }
  if (!strcasecmp(v6, "vendor:MAC:packet:SizeHistogram:AsValMap")) {
    goto LABEL_253;
  }
  if (!strcasecmp(v6, "vendor:MAC:packet:RSSIHistogram")) {
    goto LABEL_254;
  }
  if (!strcasecmp(v6, "vendor:MAC:packet:RSSIHistogram:AsValMap")) {
    goto LABEL_255;
  }
  if (!strcasecmp(v6, "vendor:joiner:RSSIHistogram")) {
    goto LABEL_256;
  }
  if (!strcasecmp(v6, "vendor:joiner:RSSIHistogram:AsValMap")) {
    goto LABEL_257;
  }
  if (!strcasecmp(v6, "vendor:linkloss:counters")) {
    goto LABEL_258;
  }
  if (!strcasecmp(v6, "vendor:linkloss:counters:AsValMap")) {
    goto LABEL_259;
  }
  if (!strcasecmp(v6, "vendor:tx:application:pkt:counters")) {
    goto LABEL_260;
  }
  if (!strcasecmp(v6, "vendor:tx:application:pkt:counters:asvalmap")) {
    goto LABEL_261;
  }
  if (!strcasecmp(v6, "vendor:neighbor:count:histogram")) {
    goto LABEL_262;
  }
  if (!strcasecmp(v6, "vendor:neighbor:count:histogram:AsValMap")) {
    goto LABEL_263;
  }
  if (!strcasecmp(v6, "vendor:cca:energydetected:histogram")) {
    goto LABEL_264;
  }
  if (!strcasecmp(v6, "vendor:cca:energydetected:histogram:AsValMap")) {
    goto LABEL_265;
  }
  if (!strcasecmp(v6, "vendor:csma:backoff:histogram")) {
    goto LABEL_266;
  }
  if (!strcasecmp(v6, "vendor:csma:backoff:histogram:AsValMap")) {
    goto LABEL_267;
  }
  if (!strcasecmp(v6, "vendor:openthread:radio:counters")) {
    goto LABEL_268;
  }
  if (!strcasecmp(v6, "vendor:openthread:radio:counters:AsValMap"))
  {
LABEL_185:
    uint64_t v9 = *(void *)(a1 + 8);
    sub_1000798B4((uint64_t)&v225, v9);
    uint64_t v10 = sub_1000798B8((uint64_t)&v225, a3);
    sub_100034C60("Cii", (uint64_t *)&__p, 0x80u);
    uint64_t v11 = sub_100079A40(v10, (uint64_t)&__p);
    *((void *)&v231 + 1) = sub_10009E890;
    uint64_t v232 = 1LL;
    *(void *)&__int128 v231 = (char *)off_1002B0308 + 1;
    uint64_t v12 = sub_10007A754(v11, (uint64_t *)&v231);
    sub_10007A86C(v12, &v229);
    sub_10004E9A4(v9, &v229);
LABEL_225:
    sub_10000F9EC(&v230);
    p_p = (void ***)sub_10004BED0(&v231);
    *(void *)&__int128 v231 = &__p;
LABEL_220:
    sub_100006F6C(p_p);
    sub_1000454AC(&v225);
    return;
  }

      uint64_t v81 = sub_1000BE984(4, uint64);
      goto LABEL_193;
    }

LABEL_91:
  if (!strcasecmp(v6, "vendor:ifs:ackdata"))
  {
    uint64_t v215 = *(void *)(a1 + 8);
    sub_1000798B4((uint64_t)&v225, v215);
    uint64_t v216 = sub_1000798B8((uint64_t)&v225, a3);
    sub_100034C60("Cii", (uint64_t *)&__p, 0x80u);
    uint64_t v217 = sub_100079A40(v216, (uint64_t)&__p);
    *((void *)&v231 + 1) = sub_10009ECEC;
    uint64_t v232 = 1LL;
    *(void *)&__int128 v231 = (char *)off_1002B0308 + 1;
    uint64_t v218 = sub_10007A754(v217, (uint64_t *)&v231);
    sub_10007A86C(v218, &v229);
    sub_10004E9A4(v215, &v229);
    goto LABEL_225;
  }

  unsigned __int8 v7 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v7)
  {
    char v8 = v7;
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  sub_10000AC00(&v225, "Cannot get property value for ");
  v219 = sub_10000D650(&v225, a2);
  std::string::size_type v220 = v219->__r_.__value_.__r.__words[0];
  *(void *)&__int128 v231 = v219->__r_.__value_.__l.__size_;
  *(void *)((char *)&v231 + 7) = *(std::string::size_type *)((char *)&v219->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 size = v219->__r_.__value_.__s.__size_;
  v219->__r_.__value_.__l.__size_ = 0LL;
  v219->__r_.__value_.__l.__cap_ = 0LL;
  v219->__r_.__value_.__r.__words[0] = 0LL;
  v222 = operator new(0x20uLL);
  void *v222 = &off_1002AE030;
  v222[1] = v220;
  v222[2] = v231;
  *(void *)((char *)v222 + 23) = *(void *)((char *)&v231 + 7);
  *((_BYTE *)v222 + 31) = size;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v222;
  sub_10003446C(a3);
  if (__p.__r_.__value_.__r.__words[0]) {
    (*(void (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 8LL))(__p.__r_.__value_.__r.__words[0]);
  }
}

  uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_txErrorTxAbortedCsmaPrepare));
  [v3 setObject:v39 forKey:@"tx_error_tx_aborted_csma_prepare"];

  char v8 = self->_has;
  if ((*(void *)&v8 & 0x40000000000000LL) == 0)
  {
LABEL_34:
    if ((*(void *)&v8 & 0x80000000000000LL) == 0) {
      goto LABEL_35;
    }
    goto LABEL_93;
  }

  PBDataWriterWriteUint32Field(v7, self->_txErrorTxAbortedCsmaPrepare, 30LL);
  int v6 = self->_has;
  if ((*(void *)&v6 & 0x40000000000000LL) == 0)
  {
LABEL_34:
    if ((*(void *)&v6 & 0x80000000000000LL) == 0) {
      goto LABEL_35;
    }
    goto LABEL_93;
  }

  v4[58] = self->_txErrorTxAbortedCsmaPrepare;
  *((void *)v4 + 31) |= 0x20000000000000uLL;
  int v6 = self->_has;
  if ((*(void *)&v6 & 0x40000000000000LL) == 0)
  {
LABEL_34:
    if ((*(void *)&v6 & 0x80000000000000LL) == 0) {
      goto LABEL_35;
    }
    goto LABEL_93;
  }

  *((_DWORD *)v6 + 60) = self->_txErrorTxAbortedRxAck;
  v6[31] |= 0x80000000000000uLL;
  uint64_t v10 = self->_has;
  if ((*(void *)&v10 & 0x4000000000000LL) == 0)
  {
LABEL_34:
    if ((*(void *)&v10 & 0x100000000000000LL) == 0) {
      goto LABEL_35;
    }
    goto LABEL_93;
  }

  uint64_t v5 = 0LL;
  if ((*(void *)&v4 & 0x100000000000000LL) != 0)
  {
LABEL_39:
    int v6 = 2654435761LL * self->_txErrorTxAbortedTx;
    if ((*(void *)&v4 & 0x400000000000LL) != 0) {
      goto LABEL_40;
    }
    goto LABEL_93;
  }

  self->_txErrorChannelAccessFailure = v5[48];
  *(void *)&self->_has |= 0x80000000000uLL;
  uint64_t v9 = *((void *)v5 + 31);
  if ((v9 & 0x2000000000000LL) == 0)
  {
LABEL_38:
    if ((v9 & 0x10000000000000LL) == 0) {
      goto LABEL_39;
    }
    goto LABEL_93;
  }

void sub_100094DF8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a16) {
    (*(void (**)(void *))(*(void *)a16 + 8LL))(a16);
  }
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100095668()
{
}

uint64_t sub_100095670(uint64_t a1, void *a2)
{
  uint64_t result = v4;
  if (v4) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  return result;
}

void sub_1000956CC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000956EC( _WORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a4;
  unint64_t v11 = 0LL;
  v58[0] = v58;
  v58[1] = v58;
  v58[2] = 0LL;
  v57[0] = 0LL;
  v57[1] = 0LL;
  uint64_t v56 = v57;
  memset(&v55, 0, sizeof(v55));
  do
  {
    uint64_t v54 = 0LL;
    unsigned int v53 = 0;
    if (v11 > 3)
    {
      unint64_t v12 = 24LL;
      uint64_t v13 = off_1002B0B30;
    }

    else
    {
      unint64_t v12 = *(void *)&aX_3[8 * v11];
      uint64_t v13 = off_1002B15E0[v11];
    }

    unsigned int v14 = spinel_datatype_unpack(a1, a2, "d", a4, a5, a6, a7, a8, (uint64_t)&v54);
    unsigned int v20 = v14;
    if (!v14)
    {
      uint64_t v37 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v37)
      {
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        goto LABEL_82;
      }

void sub_100095D6C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, void *__p, uint64_t a39, int a40, __int16 a41, char a42, char a43, char a44, uint64_t a45, uint64_t a46, uint64_t a47)
{
  if (a43 < 0) {
    operator delete(__p);
  }
  sub_10000D448((uint64_t)&a44);
  sub_10000C0E8(&a47);
  _Unwind_Resume(a1);
}

uint64_t sub_100095E94( _WORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a4;
  unint64_t v11 = 0LL;
  v57[0] = v57;
  v57[1] = v57;
  unint64_t v12 = &off_1002B0A60;
  void v57[2] = 0LL;
  v56[0] = 0LL;
  v56[1] = 0LL;
  std::string v55 = v56;
  memset(&v54, 0, sizeof(v54));
  do
  {
    unsigned int v53 = 0LL;
    unsigned int v52 = 0;
    if (v11 <= 4) {
      unint64_t v12 = off_1002B1600[v11];
    }
    unsigned int v13 = spinel_datatype_unpack(a1, a2, "d", a4, a5, a6, a7, a8, (uint64_t)&v53);
    unsigned int v14 = v13;
    if (!v13)
    {
      uint64_t v36 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v36)
      {
        goto LABEL_64;
      }

      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_64;
      }
      goto LABEL_63;
    }

    BOOL v15 = a2 >= v13;
    a2 = a2 - v13;
    if (!v15)
    {
      uint64_t v37 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      uint64_t v38 = v37;
      if (v37)
      {
        goto LABEL_64;
      }

      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_63;
      }
LABEL_64:
      uint64_t v39 = 1LL;
      goto LABEL_65;
    }

    unint64_t v16 = (int)v52;
    std::string::append(&v54, "\n");
    uint64_t v17 = *v12;
    sub_10000AC00(__p, v17);
    sub_10000D650(&v54, (const std::string::value_type *)__p);
    if ((char)__p[0].__r_.__value_.__s.__size_ < 0)
    {
      operator delete(__p[0].__r_.__value_.__l.__data_);
      if (!v17) {
        goto LABEL_37;
      }
LABEL_11:
      int v23 = 0;
      unint64_t v24 = v16 >> 2;
      while (1)
      {
        int v51 = 0;
        unsigned int v25 = spinel_datatype_unpack(v53, v52, "L", v18, v19, v20, v21, v22, (uint64_t)&v51);
        if (!v25) {
          break;
        }
        if (v52 < v25)
        {
          uint64_t v35 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v35)
          {
            goto LABEL_64;
          }

          if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            goto LABEL_64;
          }
          goto LABEL_63;
        }

        unsigned int v53 = (_WORD *)((char *)v53 + v25);
        v52 -= v25;
        if ((v8 & 1) != 0)
        {
          memset(__p, 0, 24);
          sub_10000AC00(&v47, v17);
          sub_10000AC00(v45, "[");
          unsigned int v26 = sub_10000D650(&v47, (const std::string::value_type *)v45);
          __int128 v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
          v48.__r_.__value_.__l.__cap_ = v26->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
          v26->__r_.__value_.__l.__size_ = 0LL;
          v26->__r_.__value_.__l.__cap_ = 0LL;
          v26->__r_.__value_.__r.__words[0] = 0LL;
          std::to_string(&v44, v23);
          uint64_t v28 = sub_10000D650(&v48, (const std::string::value_type *)&v44);
          __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          v49.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
          v28->__r_.__value_.__l.__size_ = 0LL;
          v28->__r_.__value_.__l.__cap_ = 0LL;
          v28->__r_.__value_.__r.__words[0] = 0LL;
          sub_10000AC00(v42, "]");
          uint64_t v30 = sub_10000D650(&v49, (const std::string::value_type *)v42);
          __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
          v50.__r_.__value_.__l.__cap_ = v30->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v31;
          v30->__r_.__value_.__l.__size_ = 0LL;
          v30->__r_.__value_.__l.__cap_ = 0LL;
          v30->__r_.__value_.__r.__words[0] = 0LL;
          sub_100014D08((uint64_t)__p, (__int128 *)&v50);
          if (v43 < 0) {
            operator delete(v42[0]);
          }
          if (v46 < 0) {
            operator delete(v45[0]);
          }
          uint64_t v32 = sub_100070EE8(&v55, __p);
          sub_100017F70(v32, &v51);
        }

        else
        {
          std::string::append(&v54, " [");
          std::to_string(&v50, v23);
          sub_10000D650(&v54, (const std::string::value_type *)&v50);
          std::string::append(&v54, ": ");
          snprintf((char *)__p, 0x190uLL, "%u", v51);
          std::string::append(&v54, (const std::string::value_type *)__p);
          std::string::append(&v54, "]");
        }

        int v33 = v23 + 1;
        if (__OFADD__(v23, 1)) {
          __break(0x5500u);
        }
        ++v23;
        if (v24 <= v33) {
          goto LABEL_37;
        }
      }

      int v34 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v34)
      {
        goto LABEL_64;
      }

      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_64;
      }
LABEL_63:
      sub_1001FB53C();
      goto LABEL_64;
    }

    if (v17) {
      goto LABEL_11;
    }
LABEL_37:
    std::string::append(&v54, "\n");
    unint64_t v12 = &off_1002B0A60;
    a1 = (_WORD *)((char *)a1 + v14);
    ++v11;
  }

  while (v11 != 6);
  if (v8) {
    sub_10005653C(a3, (uint64_t *)&v55);
  }
  else {
    sub_1000200A0(a3, &v54);
  }
  uint64_t v39 = 0LL;
LABEL_65:
  sub_10000D448((uint64_t)&v55);
  sub_10000C0E8(v57);
  return v39;
}

void sub_10009640C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, void *__p, uint64_t a39, int a40, __int16 a41, char a42, char a43, char a44, uint64_t a45, uint64_t a46, uint64_t a47)
{
  if (a43 < 0) {
    operator delete(__p);
  }
  sub_10000D448((uint64_t)&a44);
  sub_10000C0E8(&a47);
  _Unwind_Resume(a1);
}

uint64_t sub_100096528( _WORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (spinel_datatype_unpack(a1, a2, "SS", a4, a5, a6, a7, a8, (uint64_t)&v13))
  {
    snprintf(__str, 0xC8uLL, "\nLow Buffer Usage threshold = %u\n", v13);
    sub_10000AC00(__p, __str);
    sub_100014D08((uint64_t)&v12, (__int128 *)__p);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    snprintf(__str, 0xC8uLL, "High Buffer Usage threshold = %u\n", v14);
    sub_10000AC00(__p, __str);
    sub_10000D650(&v12, (const std::string::value_type *)__p);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v9 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v9)
    {
      if (sub_10015A058(6) && os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        LODWORD(__p[0]) = 67109376;
        HIDWORD(__p[0]) = v13;
        LOWORD(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 2) = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Low Buffer Usage threshold[%u], High Buffer Usage threshold[%u]",  (uint8_t *)__p,  0xEu);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    sub_1000200A0(a3, &v12);
    return 0LL;
  }

  else
  {
    uint64_t v10 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v10)
    {
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    return 1LL;
  }

void sub_10009674C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
}

uint64_t sub_100096798( _WORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10 = 0;
  v65[0] = (uint64_t)v65;
  v65[1] = (uint64_t)v65;
  v65[2] = 0LL;
  while (2)
  {
    uint64_t v64 = 0LL;
    unsigned int v63 = spinel_datatype_unpack(a1, a2, "d", a4, a5, a6, a7, a8, (uint64_t)&v64);
    if (!v63)
    {
      uint64_t v57 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v57)
      {
        goto LABEL_145;
      }

      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
LABEL_144:
      }
        sub_1001FB53C();
LABEL_145:
      uint64_t v60 = 1LL;
      goto LABEL_146;
    }

    BOOL v11 = a2 >= v63;
    a2 = a2 - v63;
    if (!v11)
    {
      uint64_t v58 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      uint64_t v59 = v58;
      if (v58)
      {
        goto LABEL_145;
      }

      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_144;
      }
      goto LABEL_145;
    }

    switch(v10)
    {
      case 0:
        std::string v12 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v12)
        {
          if (sub_10015A058(6) && os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "unpack_ncp_state_status_summary", buf, 2u);
          }
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "com.apple.wpantund.ncp";
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = "default";
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging Module is not defined for SubSystem: %s, Category: %s",  buf,  0x16u);
        }

        unsigned int v26 = v64;
        __int128 v27 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v27)
        {
          if (sub_10015A058(6) && os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint64_t v71 = 67109120;
            *(_DWORD *)&v71[4] = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_INFO,  "unpack_ncp_state_status_summary  struct_len[%u]",  v71,  8u);
          }
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t v71 = 136315394;
          *(void *)&v71[4] = "com.apple.wpantund.ncp";
          *(_WORD *)&v71[12] = 2080;
          *(void *)&v71[14] = "default";
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging Module is not defined for SubSystem: %s, Category: %s",  v71,  0x16u);
        }

        if (spinel_datatype_unpack(v26, 0LL, "CSCCC", v28, v29, v30, v31, v32, (uint64_t)&__p))
        {
          char v46 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v46)
          {
            if (sub_10015A058(4) && os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)uint64_t v71 = 67109378;
              *(_DWORD *)&v71[4] = 1444;
              *(_WORD *)&v71[8] = 2080;
              *(void *)&v71[10] = "struct_len >= len";
              std::string v47 = v46;
              std::string v48 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/wpantund/src/ncp-spinel/SpinelNCPVendorCustom."
                    "cpp:%d: Requirement Failed (%s)";
              goto LABEL_123;
            }
          }

          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            goto LABEL_129;
          }
        }

        else
        {
          std::string v49 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v49)
          {
            if (sub_10015A058(4) && os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)uint64_t v71 = 67109378;
              *(_DWORD *)&v71[4] = 1443;
              *(_WORD *)&v71[8] = 2080;
              *(void *)&v71[10] = "len > 0";
              std::string v47 = v49;
              std::string v48 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/wpantund/src/ncp-spinel/SpinelNCPVendorCustom."
                    "cpp:%d: Requirement Failed (%s)";
              goto LABEL_123;
            }
          }

          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            goto LABEL_129;
          }
        }

        goto LABEL_131;
      case 1:
        unsigned __int16 v13 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v13)
        {
          if (sub_10015A058(6) && os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "unpack_ncp_state_ip_addresses", buf, 2u);
          }
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "com.apple.wpantund.ncp";
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = "default";
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging Module is not defined for SubSystem: %s, Category: %s",  buf,  0x16u);
        }

        *(void *)uint64_t v72 = 0LL;
        LODWORD(v70) = 0;
        std::string __p = 0LL;
        char v67 = 0;
        int v69 = -1;
        int v66 = -1;
        sub_10000AC00(v71, "IP Addresses:");
        sub_100044B24(v65, (uint64_t)v71);
        goto LABEL_131;
      case 2:
        unsigned __int16 v14 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v14)
        {
          if (sub_10015A058(6) && os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "unpack_ncp_state_msg_buffer_counters",  buf,  2u);
          }
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "com.apple.wpantund.ncp";
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = "default";
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging Module is not defined for SubSystem: %s, Category: %s",  buf,  0x16u);
        }

        uint64_t v33 = 0LL;
        uint64_t v34 = 0LL;
        uint64_t v35 = v64;
        *(_WORD *)uint64_t v72 = 0;
        while (1)
        {
          unsigned int v36 = spinel_datatype_unpack(v35, v34, "S", a4, a5, a6, a7, a8, (uint64_t)v72);
          unsigned int v37 = v36;
          if (!v36)
          {
            int v51 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
            if (v51)
            {
              if (sub_10015A058(4) && os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)uint64_t v71 = 67109378;
                *(_DWORD *)&v71[4] = 1594;
                *(_WORD *)&v71[8] = 2080;
                *(void *)&v71[10] = "len > 0";
                std::string v47 = v51;
                std::string v48 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/wpantund/src/ncp-spinel/SpinelNCPVendorCusto"
                      "m.cpp:%d: Requirement Failed (%s)";
                goto LABEL_123;
              }
            }

            else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              goto LABEL_129;
            }

            goto LABEL_131;
          }

          BOOL v11 = v34 >= v36;
          uint64_t v34 = v34 - v36;
          if (!v11) {
            break;
          }
          uint64_t v38 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v38)
          {
            if (sub_10015A058(6) && os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)uint64_t v71 = 67109376;
              *(_DWORD *)&v71[4] = v33;
              *(_WORD *)&v71[8] = 1024;
              *(_DWORD *)&v71[10] = *(unsigned __int16 *)v72;
              _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_INFO,  "counter_index: %d   bufferCount = %x",  v71,  0xEu);
            }
          }

          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t v71 = 136315394;
            *(void *)&v71[4] = "com.apple.wpantund.ncp";
            *(_WORD *)&v71[12] = 2080;
            *(void *)&v71[14] = "default";
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging Module is not defined for SubSystem: %s, Category: %s",  v71,  0x16u);
          }

          snprintf((char *)buf, 0xC8uLL, "%-20s = %u", off_1002B0B48[v33], *(unsigned __int16 *)v72);
          sub_10000AC00(v71, (char *)buf);
          sub_100044B24(v65, (uint64_t)v71);
          uint64_t v35 = (_WORD *)((char *)v35 + v37);
          if (++v33 == 16) {
            goto LABEL_131;
          }
        }

        std::string v54 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        std::string v55 = v54;
        if (v54)
        {
          if (sub_10015A058(4) && os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t v71 = 67109378;
            *(_DWORD *)&v71[4] = 1595;
            *(_WORD *)&v71[8] = 2080;
            *(void *)&v71[10] = "struct_len >= len";
            std::string v47 = v55;
            std::string v48 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/wpantund/src/ncp-spinel/SpinelNCPVendorCustom.cp"
                  "p:%d: Requirement Failed (%s)";
            goto LABEL_123;
          }
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          goto LABEL_129;
        }

        goto LABEL_131;
      case 3:
        BOOL v15 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v15)
        {
          if (sub_10015A058(6) && os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "unpack_ncp_state_children_and_neighbours",  buf,  2u);
          }
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "com.apple.wpantund.ncp";
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = "default";
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging Module is not defined for SubSystem: %s, Category: %s",  buf,  0x16u);
        }

        *(void *)uint64_t v72 = 0LL;
        LODWORD(__p) = 0;
        sub_10000AC00(v71, "Neighbours and Children:");
        sub_100044B24(v65, (uint64_t)v71);
        if ((char)v71[23] < 0) {
LABEL_89:
        }
          operator delete(*(void **)v71);
        goto LABEL_131;
      case 4:
        char v16 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v16)
        {
          if (sub_10015A058(6) && os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "unpack_ncp_state_network_data", buf, 2u);
          }
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "com.apple.wpantund.ncp";
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = "default";
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging Module is not defined for SubSystem: %s, Category: %s",  buf,  0x16u);
        }

        uint64_t v70 = 0LL;
        memset(v71, 0, 24);
        int v69 = 0;
        memset(buf, 0, 24);
        if (spinel_datatype_unpack(v64, 0LL, "D", v17, v18, v19, v20, v21, (uint64_t)&v70))
        {
          int v23 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v23)
          {
            if (sub_10015A058(4) && os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)uint64_t v72 = 67109378;
              *(_DWORD *)&v72[4] = 1687;
              *(_WORD *)&v72[8] = 2080;
              *(void *)&v72[10] = "struct_len >= len";
              unint64_t v24 = v23;
              unsigned int v25 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/wpantund/src/ncp-spinel/SpinelNCPVendorCustom."
                    "cpp:%d: Requirement Failed (%s)";
LABEL_81:
              uint32_t v45 = 18;
LABEL_126:
              _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, v25, v72, v45);
              goto LABEL_127;
            }

            goto LABEL_127;
          }

          if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            goto LABEL_127;
          }
LABEL_125:
          *(_DWORD *)uint64_t v72 = 136315394;
          *(void *)&v72[4] = "com.apple.wpantund.ncp";
          *(_WORD *)&v72[12] = 2080;
          *(void *)&v72[14] = "default";
          unint64_t v24 = (os_log_s *)&_os_log_default;
          unsigned int v25 = "Logging Module is not defined for SubSystem: %s, Category: %s";
          uint32_t v45 = 22;
          goto LABEL_126;
        }

        std::string v44 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (!v44)
        {
          if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            goto LABEL_127;
          }
          goto LABEL_125;
        }

        if (sub_10015A058(4) && os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t v72 = 67109378;
          *(_DWORD *)&v72[4] = 1686;
          *(_WORD *)&v72[8] = 2080;
          *(void *)&v72[10] = "len > 0";
          unint64_t v24 = v44;
          unsigned int v25 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/wpantund/src/ncp-spinel/SpinelNCPVendorCustom.cpp:"
                "%d: Requirement Failed (%s)";
          goto LABEL_81;
        }

LABEL_127:
        *(void *)uint64_t v71 = buf;
        sub_100006F6C((void ***)v71);
LABEL_131:
        a1 = (_WORD *)((char *)a1 + v63);
        if (++v10 != 6) {
          continue;
        }
        sub_10006DA9C(a3, (uint64_t)v65);
        uint64_t v60 = 0LL;
LABEL_146:
        sub_10000C0E8(v65);
        return v60;
      case 5:
        uint64_t v22 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v22)
        {
          if (sub_10015A058(6) && os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_INFO,  "unpack_ncp_state_mle_linkloss_counters",  buf,  2u);
          }
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "com.apple.wpantund.ncp";
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = "default";
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging Module is not defined for SubSystem: %s, Category: %s",  buf,  0x16u);
        }

        uint64_t v39 = 0LL;
        uint64_t v40 = 0LL;
        uint64_t v41 = v64;
        *(_WORD *)uint64_t v72 = 0;
        while (2)
        {
          unsigned int v42 = spinel_datatype_unpack(v41, v40, "S", a4, a5, a6, a7, a8, (uint64_t)v72);
          unsigned int v43 = v42;
          if (v42)
          {
            BOOL v11 = v40 >= v42;
            uint64_t v40 = v40 - v42;
            if (v11)
            {
              snprintf((char *)buf, 0xC8uLL, "%-20s = %u", off_1002B0BC8[v39], *(unsigned __int16 *)v72);
              sub_10000AC00(v71, (char *)buf);
              sub_100044B24(v65, (uint64_t)v71);
              uint64_t v41 = (_WORD *)((char *)v41 + v43);
              if (++v39 == 11) {
                goto LABEL_131;
              }
              continue;
            }

            unsigned int v52 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
            unsigned int v53 = v52;
            if (!v52)
            {
              if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                goto LABEL_131;
              }
LABEL_129:
              *(_DWORD *)uint64_t v71 = 136315394;
              *(void *)&v71[4] = "com.apple.wpantund.ncp";
              *(_WORD *)&v71[12] = 2080;
              *(void *)&v71[14] = "default";
              std::string v47 = (os_log_s *)&_os_log_default;
              std::string v48 = "Logging Module is not defined for SubSystem: %s, Category: %s";
              uint32_t v56 = 22;
              goto LABEL_130;
            }

            if (sub_10015A058(4) && os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)uint64_t v71 = 67109378;
              *(_DWORD *)&v71[4] = 1727;
              *(_WORD *)&v71[8] = 2080;
              *(void *)&v71[10] = "struct_len >= len";
              std::string v47 = v53;
              std::string v48 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/wpantund/src/ncp-spinel/SpinelNCPVendorCustom."
                    "cpp:%d: Requirement Failed (%s)";
LABEL_123:
              uint32_t v56 = 18;
LABEL_130:
              _os_log_error_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, v48, v71, v56);
              goto LABEL_131;
            }
          }

          else
          {
            std::string v50 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
            if (!v50)
            {
              if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                goto LABEL_131;
              }
              goto LABEL_129;
            }

            if (sub_10015A058(4) && os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)uint64_t v71 = 67109378;
              *(_DWORD *)&v71[4] = 1726;
              *(_WORD *)&v71[8] = 2080;
              *(void *)&v71[10] = "len > 0";
              std::string v47 = v50;
              std::string v48 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/wpantund/src/ncp-spinel/SpinelNCPVendorCustom."
                    "cpp:%d: Requirement Failed (%s)";
              goto LABEL_123;
            }
          }

          goto LABEL_131;
        }

      default:
        goto LABEL_131;
    }
  }

void sub_100098A0C(_Unwind_Exception *a1)
{
}

uint64_t sub_100098B28( _WORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a4;
  unint64_t v11 = 0LL;
  v35[0] = (uint64_t)v35;
  v35[1] = (uint64_t)v35;
  v35[2] = 0LL;
  v34[0] = 0LL;
  v34[1] = 0LL;
  uint64_t v33 = v34;
LABEL_2:
  uint64_t v32 = 0LL;
  unsigned int v31 = 0;
  if (v11 > 2)
  {
    unint64_t v13 = 32LL;
    std::string v12 = off_1002B0C98;
  }

  else
  {
    std::string v12 = off_1002B1628[v11];
    unint64_t v13 = 40LL;
  }

  unsigned int v14 = spinel_datatype_unpack(a1, a2, "d", a4, a5, a6, a7, a8, (uint64_t)&v32);
  if (!v14)
  {
    unint64_t v24 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v24)
    {
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      goto LABEL_34;
    }

    goto LABEL_35;
  }

  BOOL v15 = a2 >= v14;
  a2 = a2 - v14;
  if (!v15)
  {
    unsigned int v25 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    unsigned int v26 = v25;
    if (v25)
    {
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      goto LABEL_34;
    }

    goto LABEL_35;
  }

  unint64_t v16 = 0LL;
  a1 = (_WORD *)((char *)a1 + v14);
  while (1)
  {
    if (!v12[v16 / 8])
    {
      if (++v11 != 4) {
        goto LABEL_2;
      }
      if (v8) {
        sub_10005653C(a3, (uint64_t *)&v33);
      }
      else {
        sub_10006DA9C(a3, (uint64_t)v35);
      }
      uint64_t v22 = 0LL;
      goto LABEL_36;
    }

    unsigned int v17 = spinel_datatype_unpack(v32, v31, "L", a4, a5, a6, a7, a8, (uint64_t)&v30);
    if (!v17) {
      break;
    }
    if (v31 < v17)
    {
      uint64_t v21 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v21)
      {
        goto LABEL_35;
      }

      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_35;
      }
      goto LABEL_34;
    }

    uint64_t v32 = (_WORD *)((char *)v32 + v17);
    v31 -= v17;
    if ((v8 & 1) != 0)
    {
      sub_10000AC00(&__str, v12[v16 / 8]);
      uint64_t v18 = sub_10000ED88(&v33, &__str);
      sub_100017F70(v18, &v30);
      if (v37 < 0)
      {
        uint64_t v19 = (void *)__str.n128_u64[0];
LABEL_17:
        operator delete(v19);
      }
    }

    else
    {
      snprintf((char *)&__str, 0xC8uLL, "%-20s = %u", v12[v16 / 8], v30);
      sub_10000AC00(__p, (char *)&__str);
      sub_100044B24(v35, (uint64_t)__p);
      if (v29 < 0)
      {
        uint64_t v19 = __p[0];
        goto LABEL_17;
      }
    }

    v16 += 8LL;
    if (v13 <= v16) {
      __break(1u);
    }
  }

  uint64_t v20 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v20)
  {
    goto LABEL_35;
  }

  if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    goto LABEL_35;
  }
LABEL_34:
  sub_1001FB53C();
LABEL_35:
  uint64_t v22 = 1LL;
LABEL_36:
  sub_10000D448((uint64_t)&v33);
  sub_10000C0E8(v35);
  return v22;
}

void sub_100098EDC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, int a29, __int16 a30, char a31, char a32)
{
}

uint64_t sub_100098F4C( _WORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a4;
  unsigned int v10 = a2;
  v27[0] = 0LL;
  v27[1] = 0LL;
  unsigned int v26 = v27;
  int v11 = spinel_datatype_unpack(a1, a2, "t(LLLL)", a4, a5, a6, a7, a8, (uint64_t)&v25);
  if (v11 <= 0)
  {
    unint64_t v13 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v13)
    {
      goto LABEL_28;
    }

    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
LABEL_27:
    }
      sub_1001FB53C();
LABEL_28:
    uint64_t v18 = 1LL;
    goto LABEL_29;
  }

  if (v11 > v10)
  {
    std::string v12 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v12)
    {
      goto LABEL_28;
    }

    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_27;
    }
    goto LABEL_28;
  }

  if (v8)
  {
    sub_10000AC00(&__p, "cca_failed_attempts");
    unsigned int v14 = sub_10000ED88(&v26, &__p);
    sub_100017F70(v14, &v25);
    if (v21 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    sub_10000AC00(&__p, "radio_received_frames");
    BOOL v15 = sub_10000ED88(&v26, &__p);
    sub_100017F70(v15, &v24);
    if (v21 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    sub_10000AC00(&__p, "received_energy_events");
    unint64_t v16 = sub_10000ED88(&v26, &__p);
    sub_100017F70(v16, &v23);
    if (v21 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    sub_10000AC00(&__p, "received_preambles");
    unsigned int v17 = sub_10000ED88(&v26, &__p);
    sub_100017F70(v17, &v22);
    if (v21 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    sub_10005653C(a3, (uint64_t *)&v26);
  }

  else
  {
    snprintf( __str,  0xC8uLL,  "\n radio_cca_failed_attempts: %u \n radio_received_frames: %u \n radio_received_energy_events: %u \n radio_received_preambles: %u",  v25,  v24,  v23,  v22);
    sub_10000AC00(&__p, __str);
    sub_1000175B4(a3, (uint64_t)&__p);
    if (v21 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
  }

  uint64_t v18 = 0LL;
LABEL_29:
  sub_10000D448((uint64_t)&v26);
  return v18;
}

void sub_1000991F4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20, char a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_10000D448((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_100099254( _WORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = a2;
  v19[0] = 0LL;
  v19[1] = 0LL;
  unsigned int v17 = 0LL;
  uint64_t v18 = v19;
  int v10 = spinel_datatype_unpack(a1, a2, "E", a4, a5, a6, a7, a8, (uint64_t)&v17);
  if (v10 <= 0)
  {
    std::string v12 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v12)
    {
      goto LABEL_18;
    }

    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
LABEL_17:
    }
      sub_1001FB53C();
LABEL_18:
    uint64_t v13 = 1LL;
    goto LABEL_19;
  }

  if (v10 > v9)
  {
    int v11 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v11)
    {
      goto LABEL_18;
    }

    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_17;
    }
    goto LABEL_18;
  }

  snprintf( __str,  0xC8uLL,  "%02X%02X%02X%02X%02X%02X%02X%02X",  *v17,  v17[1],  v17[2],  v17[3],  v17[4],  v17[5],  v17[6],  v17[7]);
  sub_10000AC00(__p, __str);
  sub_1000175B4(a3, (uint64_t)__p);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v13 = 0LL;
LABEL_19:
  sub_10000D448((uint64_t)&v18);
  return v13;
}

void sub_100099428( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, char a25)
{
}

uint64_t sub_100099468( _WORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = a2;
  v49[0] = 0LL;
  v49[1] = 0LL;
  *(void *)&__val[1] = 0LL;
  std::string v48 = v49;
  char v46 = 0LL;
  unsigned int v45 = 0;
  memset(&v44, 0, sizeof(v44));
  int v11 = spinel_datatype_unpack(a1, a2, "UC", a4, a5, a6, a7, a8, (uint64_t)&__val[1]);
  unsigned int v12 = v11;
  if (v11 <= 0)
  {
    char v16 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (!v16)
    {
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_40;
      }
      goto LABEL_35;
    }
  }

  else
  {
    BOOL v13 = v9 >= v11;
    uint64_t v14 = v9 - v11;
    if (!v13)
    {
      BOOL v15 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v15)
      {
        goto LABEL_40;
      }

      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_40;
      }
LABEL_35:
      sub_1001FB53C();
      goto LABEL_40;
    }

    std::string::push_back(&v44, 10);
    std::string::append(&v44, " Power Table Version : ");
    std::string::append(&v44, *(const std::string::value_type **)&__val[1]);
    std::string::push_back(&v44, 10);
    std::string::append(&v44, " Power Table Size : ");
    std::to_string(&v50, __val[0]);
    sub_10000D650(&v44, (const std::string::value_type *)&v50);
    std::string::push_back(&v44, 10);
    int v22 = 0;
    int v23 = (_WORD *)((char *)a1 + v12);
    while (1)
    {
      int v24 = spinel_datatype_unpack(v23, v14, "d", v17, v18, v19, v20, v21, (uint64_t)&v46);
      unsigned int v25 = v24;
      if (v24 <= 0) {
        break;
      }
      BOOL v13 = v14 >= v24;
      uint64_t v14 = (v14 - v24);
      if (!v13)
      {
        uint64_t v41 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        unsigned int v42 = v41;
        if (v41)
        {
          goto LABEL_40;
        }

        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          goto LABEL_40;
        }
        goto LABEL_39;
      }

      int v26 = v45;
      std::string::push_back(&v44, 10);
      std::string::append(&v44, " Table Entry : ");
      std::to_string(&v50, v22);
      sub_10000D650(&v44, (const std::string::value_type *)&v50);
      std::string::append(&v44, " :");
      if (v26 >= 1)
      {
        while (1)
        {
          int v27 = spinel_datatype_unpack(v46, v45, "c", v17, v18, v19, v20, v21, (uint64_t)&v43);
          if (v27 <= 0) {
            break;
          }
          char v46 = (_WORD *)((char *)v46 + v27);
          if (v45 < v27) {
            __break(0x5515u);
          }
          v45 -= v27;
          snprintf((char *)&v50, 0x14uLL, " %5d", v43);
          std::string::append(&v44, (const std::string::value_type *)&v50);
          if (!--v26) {
            goto LABEL_23;
          }
        }

        int v30 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v30)
        {
          goto LABEL_40;
        }

        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          goto LABEL_40;
        }
LABEL_39:
        sub_1001FB53C();
        goto LABEL_40;
      }

void sub_100099988( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_10000D448((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_100099A00(_WORD *a1, uint64_t a2, uint64_t *a3)
{
  int v11 = 16;
  do
  {
    int v12 = spinel_datatype_unpack(a1, a2, "c", v6, v7, v8, v9, v10, (uint64_t)&v22);
    unsigned int v13 = v12;
    if (v12 <= 0)
    {
      uint64_t v17 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v17)
      {
        goto LABEL_24;
      }

      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
LABEL_23:
      }
        sub_1001FB53C();
LABEL_24:
      uint64_t v20 = 1LL;
      goto LABEL_28;
    }

    BOOL v14 = a2 >= v12;
    a2 = (a2 - v12);
    if (!v14)
    {
      uint64_t v18 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      uint64_t v19 = v18;
      if (v18)
      {
        goto LABEL_24;
      }

      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_23;
      }
      goto LABEL_24;
    }

    snprintf(__str, 0x14uLL, " %5d", v22);
    std::string::append(&v23, __str);
    a1 = (_WORD *)((char *)a1 + v13);
    --v11;
  }

  while (v11);
  BOOL v15 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v15)
  {
    if (sub_10015A058(6) && os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      char v16 = &v23;
      if ((v23.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        char v16 = (std::string *)v23.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)__n128 __str = 136315394;
      unsigned int v25 = "unpack_vendor_power_active_row";
      __int16 v26 = 2080;
      int v27 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "%s : Structure string : %s",  (uint8_t *)__str,  0x16u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  sub_1000200A0(a3, &v23);
  uint64_t v20 = 0LL;
LABEL_28:
  return v20;
}

void sub_100099C9C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

uint64_t sub_100099CD4(_WORD *a1, uint64_t a2, uint64_t *a3)
{
  v20[0] = 0LL;
  v20[1] = 0LL;
  uint64_t v19 = v20;
  *(_WORD *)__c = 0;
  memset(&v17, 0, sizeof(v17));
  uint64_t v6 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v6)
  {
    if (sub_10015A058(6) && os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 136315138;
      std::string v23 = "unpack_vendor_power_mapping_table_version";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s : Entered ", buf, 0xCu);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  int v12 = spinel_datatype_unpack(a1, a2, "S", v7, v8, v9, v10, v11, (uint64_t)__c);
  if (v12 <= 0)
  {
    BOOL v14 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v14)
    {
      goto LABEL_24;
    }

    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
LABEL_23:
    }
      sub_1001FB53C();
LABEL_24:
    uint64_t v15 = 1LL;
    goto LABEL_25;
  }

  if (v12 > a2)
  {
    unsigned int v13 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v13)
    {
      goto LABEL_24;
    }

    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_23;
    }
    goto LABEL_24;
  }

  std::string::append(&v17, "Power Mapping Table Version : ");
  std::string::push_back(&v17, __c[0]);
  snprintf(__str, 0x14uLL, " %d", *(unsigned __int16 *)__c);
  std::string::append(&v17, __str);
  sub_1000200A0(a3, &v17);
  uint64_t v15 = 0LL;
LABEL_25:
  sub_10000D448((uint64_t)&v19);
  return v15;
}

void sub_100099F40( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
}

uint64_t sub_100099F7C( _WORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = a2;
  v76[0] = 0LL;
  v76[1] = 0LL;
  *(void *)&__val[1] = 0LL;
  uint64_t v75 = v76;
  uint64_t v73 = 0LL;
  unsigned int v72 = 0;
  memset(&v71, 0, sizeof(v71));
  memset(&v70, 0, sizeof(v70));
  int v11 = spinel_datatype_unpack(a1, a2, "U", a4, a5, a6, a7, a8, (uint64_t)&__val[1]);
  if (v11 == 1) {
    int v12 = 2;
  }
  else {
    int v12 = v11;
  }
  unsigned int v13 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v13)
  {
    if (sub_10015A058(6) && os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "version len[%d]", (uint8_t *)&buf, 8u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  if (v12 <= 0)
  {
    uint64_t v15 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v15)
    {
      goto LABEL_111;
    }

    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
LABEL_27:
    }
      sub_1001FB53C();
  }

  else
  {
    if (v12 > v9)
    {
      BOOL v14 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v14)
      {
        goto LABEL_111;
      }

      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_27;
      }
      goto LABEL_111;
    }

    uint64_t v16 = v9 - v12;
    std::string v17 = (_WORD *)((char *)a1 + v12);
    std::string::assign(&v70, *(const std::string::value_type **)&__val[1]);
    int v23 = spinel_datatype_unpack(v17, v16, "C", v18, v19, v20, v21, v22, (uint64_t)__val);
    unsigned int v24 = v23;
    if (v23 <= 0)
    {
      int v27 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v27)
      {
        goto LABEL_111;
      }

      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_111;
      }
      goto LABEL_74;
    }

    unsigned int v25 = v16 - v23;
    if (v16 < v23)
    {
      __int16 v26 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v26)
      {
        goto LABEL_111;
      }

      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_111;
      }
LABEL_74:
      sub_1001FB53C();
      goto LABEL_111;
    }

    std::string::push_back(&v71, 10);
    std::string::append(&v71, " Power Mapping Table Version : ");
    sub_10000D650(&v71, (const std::string::value_type *)&v70);
    std::string::push_back(&v71, 10);
    std::string::append(&v71, " Power Mapping Table Size (Power Levels) : ");
    std::to_string(&buf, __val[0]);
    sub_10000D650(&v71, (const std::string::value_type *)&buf);
    std::string::push_back(&v71, 10);
    uint64_t v28 = (_WORD *)((char *)v17 + v24);
    int v34 = spinel_datatype_unpack(v28, v16 - v24, "d", v29, v30, v31, v32, v33, (uint64_t)&v73);
    unsigned int v35 = v34;
    if (v34 <= 0)
    {
      uint64_t v39 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v39)
      {
        goto LABEL_111;
      }

      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_111;
      }
      goto LABEL_74;
    }

    BOOL v36 = v25 >= v34;
    uint64_t v37 = v25 - v34;
    if (v36)
    {
      int v40 = v72;
      std::string::push_back(&v71, 10);
      std::string::append(&v71, " Internal Radio Power Amplifier Settings : ");
      std::string::push_back(&v71, 10);
      if (v40 < 1)
      {
LABEL_54:
        std::string::push_back(&v71, 10);
        int v52 = 0;
        unsigned int v53 = (_WORD *)((char *)v28 + v35);
        while (1)
        {
          int v54 = spinel_datatype_unpack(v53, v37, "d", v47, v48, v49, v50, v51, (uint64_t)&v73);
          unsigned int v55 = v54;
          if (v54 <= 0) {
            break;
          }
          BOOL v36 = v37 >= v54;
          uint64_t v37 = (v37 - v54);
          if (!v36)
          {
            uint64_t v65 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
            int v66 = v65;
            if (v65)
            {
              goto LABEL_111;
            }

            if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              goto LABEL_111;
            }
            goto LABEL_110;
          }

          int v56 = v72;
          std::string::push_back(&v71, 10);
          std::string::append(&v71, " Channel : ");
          std::to_string(&buf, v52 + 11);
          sub_10000D650(&v71, (const std::string::value_type *)&buf);
          std::string::append(&v71, " :");
          if (v56 >= 1)
          {
            while (1)
            {
              int v57 = spinel_datatype_unpack(v73, v72, "c", v47, v48, v49, v50, v51, (uint64_t)&v69);
              if (v57 <= 0) {
                break;
              }
              if (v72 < v57)
              {
                uint64_t v61 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                if (v61)
                {
                  goto LABEL_111;
                }

                if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_111;
                }
                goto LABEL_110;
              }

              uint64_t v73 = (_WORD *)((char *)v73 + v57);
              v72 -= v57;
              snprintf((char *)&buf, 0x14uLL, " %5d", v69);
              std::string::append(&v71, (const std::string::value_type *)&buf);
              if (!--v56) {
                goto LABEL_64;
              }
            }

            uint64_t v60 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
            if (v60)
            {
              goto LABEL_111;
            }

            if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              goto LABEL_111;
            }
            goto LABEL_110;
          }

LABEL_111:
  uint64_t v67 = 1LL;
LABEL_112:
  sub_10000D448((uint64_t)&v75);
  return v67;
}

  uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_rxErrorInvalidData));
  [v3 setObject:v59 forKey:@"rx_error_invalid_data"];

  uint64_t v8 = self->_has;
  if ((*(_DWORD *)&v8 & 0x400000) == 0)
  {
LABEL_54:
    if ((*(_DWORD *)&v8 & 0x200000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_113;
  }

  PBDataWriterWriteUint32Field(v7, self->_rxErrorInvalidData, 50LL);
  uint64_t v6 = self->_has;
  if ((*(_DWORD *)&v6 & 0x400000) == 0)
  {
LABEL_54:
    if ((*(_DWORD *)&v6 & 0x200000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_113;
  }

  v4[28] = self->_rxErrorInvalidData;
  *((void *)v4 + 31) |= 0x4000000uLL;
  uint64_t v6 = self->_has;
  if ((*(_DWORD *)&v6 & 0x400000) == 0)
  {
LABEL_54:
    if ((*(_DWORD *)&v6 & 0x200000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_113;
  }

  *((_DWORD *)v6 + 23) = self->_rxErrorAckFailedRadioDelay;
  v6[31] |= 0x200000uLL;
  uint64_t v10 = self->_has;
  if ((*(_DWORD *)&v10 & 0x100000) == 0)
  {
LABEL_54:
    if ((*(_DWORD *)&v10 & 0x80000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_113;
  }

  unsigned int v25 = 0LL;
  if ((*(_DWORD *)&v4 & 0x80000) != 0)
  {
LABEL_59:
    __int16 v26 = 2654435761LL * self->_rxErrorAckAborted;
    if ((*(void *)&v4 & 0x200000000LL) != 0) {
      goto LABEL_60;
    }
    goto LABEL_113;
  }

  self->_rxErrorTimeslotEnded = v5[34];
  *(void *)&self->_has |= (unint64_t)&_mh_execute_header;
  unsigned int v9 = *((void *)v5 + 31);
  if ((v9 & 0x40000) == 0)
  {
LABEL_58:
    if ((v9 & 0x1000000) == 0) {
      goto LABEL_59;
    }
    goto LABEL_113;
  }

void sub_10009A914( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28, uint64_t a29, uint64_t a30, void *a31, uint64_t a32, int a33, __int16 a34, char a35, char a36)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  sub_10000D448((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_10009A9C4(_WORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v6)
  {
    uint64_t v7 = v6;
    if (sub_10015A058(6) && os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = "unpack_ncp_vendor_current_power_info";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s : Entered ", buf, 0xCu);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  if ((int)spinel_datatype_unpack(a1, a2, "Cccc", v8, v9, v10, v11, v12, (uint64_t)&v18) <= 0)
  {
    BOOL v14 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v14)
    {
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    return 1LL;
  }

  else
  {
    snprintf( __str,  0xC8uLL,  "\n The currently selected channel %d \n Requested Value (provided by the NCP): %d \n Limited Requested Value (via power limits): %d \n Power set amp value: %d",  v18,  v17,  v16,  v15);
    sub_10000AC00(buf, __str);
    sub_1000175B4(a3, (uint64_t)buf);
    if (v20 < 0) {
      operator delete(*(void **)buf);
    }
    return 0LL;
  }

void sub_10009ABAC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10009ABD0(_WORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v6)
  {
    if (sub_10015A058(6) && os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int buf = 136315138;
      uint64_t v51 = "unpack_vendor_log_region_mapping_table";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s : Entered ", (uint8_t *)&buf, 0xCu);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  int v12 = spinel_datatype_unpack(a1, a2, "C", v7, v8, v9, v10, v11, (uint64_t)&v47);
  unsigned int v13 = v12;
  if (v12 <= 0)
  {
    char v15 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (!v15)
    {
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_31;
      }
      goto LABEL_30;
    }
  }

  else
  {
    if (a2 < v12)
    {
      BOOL v14 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v14)
      {
        goto LABEL_31;
      }

      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_31;
      }
LABEL_30:
      sub_1001FB53C();
      goto LABEL_31;
    }

    snprintf(__str, 0x64uLL, "\nNCP Regions = %2d\n", v47);
    std::string::append(&v48, __str);
    uint64_t v21 = a2 - v13;
    if ((_DWORD)a2 == v13)
    {
LABEL_26:
      sub_1000200A0(a3, &v48);
      uint64_t v38 = 0LL;
      goto LABEL_32;
    }

    uint64_t v22 = (_WORD *)((char *)a1 + v13);
    while (1)
    {
      LOBYTE(buf) = 0;
      unsigned __int8 v46 = 0;
      int v23 = spinel_datatype_unpack(v22, v21, "C", v16, v17, v18, v19, v20, (uint64_t)&buf);
      if (v23 <= 0) {
        break;
      }
      BOOL v29 = v21 >= v23;
      uint64_t v30 = (v21 - v23);
      if (!v29)
      {
        uint64_t v41 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        uint64_t v42 = v41;
        if (v41)
        {
          goto LABEL_31;
        }

        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          goto LABEL_31;
        }
        goto LABEL_58;
      }

      uint64_t v31 = (_WORD *)((char *)v22 + v23);
      int v32 = spinel_datatype_unpack(v31, v30, "C", v24, v25, v26, v27, v28, (uint64_t)&v46);
      unsigned int v33 = v32;
      if (v32 <= 0)
      {
        uint64_t v43 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (!v43)
        {
          if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            goto LABEL_31;
          }
          goto LABEL_58;
        }

        goto LABEL_31;
      }

      BOOL v29 = v30 >= v32;
      uint64_t v21 = (v30 - v32);
      if (!v29)
      {
        uint64_t v44 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        uint64_t v45 = v44;
        if (v44)
        {
          goto LABEL_31;
        }

        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          goto LABEL_31;
        }
LABEL_58:
        sub_1001FB53C();
        goto LABEL_31;
      }

      int v34 = buf;
      unsigned int v35 = sub_10004E21C(buf);
      int v36 = v46;
      uint64_t v37 = sub_10004E1F4(v46);
      snprintf(__str, 0x64uLL, "NCP Region [%d-%s] Log Level = %d(%s)\n", v34, v35, v36, v37);
      std::string::append(&v48, __str);
      uint64_t v22 = (_WORD *)((char *)v31 + v33);
      if (!(_DWORD)v21) {
        goto LABEL_26;
      }
    }

    int v40 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (!v40)
    {
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_31;
      }
      goto LABEL_58;
    }
  }

void sub_10009B06C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10009B0B0(_WORD *a1, uint64_t a2)
{
  uint64_t v22 = 0LL;
  uint64_t v4 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v4)
  {
    uint64_t v5 = v4;
    if (sub_10015A058(6) && os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136315138;
      *(void *)&uint8_t buf[4] = "unpack_vendor_fault_info";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s : Entered ", buf, 0xCu);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  int v11 = spinel_datatype_unpack(a1, a2, "d", v6, v7, v8, v9, v10, (uint64_t)&v22);
  if (v11 <= 0)
  {
    uint64_t v18 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (!v18)
    {
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        return 1LL;
      }
      goto LABEL_33;
    }
  }

  else
  {
    if (v11 > a2)
    {
      uint64_t v17 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v17)
      {
        return 1LL;
      }

      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        return 1LL;
      }
LABEL_33:
      sub_1001FB53C();
      return 1LL;
    }

    if ((int)spinel_datatype_unpack(v22, 0LL, "LCXLLS", v12, v13, v14, v15, v16, (uint64_t)&xmmword_1002C98A8) <= 0)
    {
      uint64_t v20 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (!v20)
      {
        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          return 1LL;
        }
        goto LABEL_33;
      }
    }

    else
    {
      uint64_t v19 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (!v19)
      {
        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          return 1LL;
        }
        goto LABEL_33;
      }
    }
  }

  return 1LL;
}

void sub_10009B410( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10009B434(_WORD *a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 v15 = 0;
  uint64_t v6 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v6)
  {
    uint64_t v7 = v6;
    if (sub_10015A058(6) && os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136315138;
      *(void *)&uint8_t buf[4] = "unpack_vendor_validate_settings";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s : Entered ", buf, 0xCu);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  if ((int)spinel_datatype_unpack(a1, a2, "bL", v8, v9, v10, v11, v12, (uint64_t)&v15) <= 0)
  {
    uint64_t v14 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v14)
    {
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    return 1LL;
  }

  else
  {
    snprintf( __str,  0xC8uLL,  "\n Is corrupted bytes present in unused settings: %d \n Corrupted bytes word offset(if settings' free space is corrupted): %d \n",  v15,  0);
    sub_10000AC00(buf, __str);
    sub_1000175B4(a3, (uint64_t)buf);
    if (v17 < 0) {
      operator delete(*(void **)buf);
    }
    return 0LL;
  }

void sub_10009B60C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10009B630( _WORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = a2;
  v37[0] = 0LL;
  v37[1] = 0LL;
  int v36 = v37;
  int v35 = 0;
  memset(&v34, 0, sizeof(v34));
  int v11 = spinel_datatype_unpack(a1, a2, "S", a4, a5, a6, a7, a8, (uint64_t)&v35);
  uint64_t v12 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v12)
  {
    if (sub_10015A058(6) && os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 67109376;
      LODWORD(v39[0]) = v11;
      WORD2(v39[0]) = 1024;
      *(_DWORD *)((char *)v39 + 6) = v35;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "len: %d, struct_len: %d", buf, 0xEu);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  if (v11 <= 0)
  {
    uint64_t v21 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (!v21)
    {
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_48;
      }
      goto LABEL_30;
    }

    goto LABEL_48;
  }

  BOOL v18 = v9 >= v11;
  uint64_t v19 = v9 - v11;
  if (!v18)
  {
    uint64_t v20 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v20)
    {
      goto LABEL_48;
    }

    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_48;
    }
LABEL_30:
    sub_1001FB53C();
    goto LABEL_48;
  }

  int v22 = v35;
  if (v35 >= 1)
  {
    int v23 = (_WORD *)((char *)a1 + v11);
    while (1)
    {
      int v24 = spinel_datatype_unpack(v23, v19, "c", v13, v14, v15, v16, v17, (uint64_t)&v33);
      unsigned int v25 = v24;
      if (v24 <= 0) {
        break;
      }
      BOOL v18 = v19 >= v24;
      uint64_t v19 = (v19 - v24);
      if (!v18)
      {
        uint64_t v30 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        uint64_t v31 = v30;
        if (v30)
        {
          goto LABEL_48;
        }

        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          goto LABEL_48;
        }
LABEL_47:
        sub_1001FB53C();
        goto LABEL_48;
      }

      snprintf((char *)buf, 0x14uLL, "%02x", v33);
      std::string::append(&v34, (const std::string::value_type *)buf);
      int v23 = (_WORD *)((char *)v23 + v25);
      if (!--v22) {
        goto LABEL_23;
      }
    }

    BOOL v29 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (!v29)
    {
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_48;
      }
      goto LABEL_47;
    }

void sub_10009BA44( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char a19)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_10000D448((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_10009BA90( _WORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a4;
  unint64_t v12 = 0LL;
  v28[0] = (uint64_t)v28;
  v28[1] = (uint64_t)v28;
  v28[2] = 0LL;
  v27[0] = 0LL;
  v27[1] = 0LL;
  uint64_t v26 = v27;
  do
  {
    if (!off_1002B0CB8[v12 / 8]) {
      goto LABEL_14;
    }
    unsigned int v13 = spinel_datatype_unpack(a1, a2, "L", a4, a5, a6, a7, a8, (uint64_t)&v25);
    unsigned int v14 = v13;
    if (!v13)
    {
      BOOL v18 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v18)
      {
        goto LABEL_30;
      }

      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
LABEL_29:
      }
        sub_1001FB53C();
LABEL_30:
      uint64_t v21 = 1LL;
      goto LABEL_31;
    }

    BOOL v15 = a2 >= v13;
    a2 = a2 - v13;
    if (!v15)
    {
      uint64_t v19 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      uint64_t v20 = v19;
      if (v19)
      {
        goto LABEL_30;
      }

      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_29;
      }
      goto LABEL_30;
    }

    if ((v8 & 1) != 0)
    {
      sub_10000AC00(&__str, off_1002B0CB8[v12 / 8]);
      uint64_t v16 = sub_10000ED88(&v26, &__str);
      sub_100017F70(v16, &v25);
      if ((v30 & 0x80000000) == 0) {
        goto LABEL_12;
      }
      uint64_t v17 = (void *)__str.n128_u64[0];
    }

    else
    {
      snprintf((char *)&__str, 0xC8uLL, "%s = %u", off_1002B0CB8[v12 / 8], v25);
      sub_10000AC00(__p, (char *)&__str);
      sub_100044B24(v28, (uint64_t)__p);
      if ((v24 & 0x80000000) == 0) {
        goto LABEL_12;
      }
      uint64_t v17 = __p[0];
    }

    operator delete(v17);
LABEL_12:
    a1 = (_WORD *)((char *)a1 + v14);
    v12 += 8LL;
  }

  while (v12 <= 0x207);
  __break(1u);
LABEL_14:
  if (v8) {
    sub_10005653C(a3, (uint64_t *)&v26);
  }
  else {
    sub_10006DA9C(a3, (uint64_t)v28);
  }
  uint64_t v21 = 0LL;
LABEL_31:
  sub_10000D448((uint64_t)&v26);
  sub_10000C0E8(v28);
  return v21;
}

void sub_10009BCFC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
}

uint64_t sub_10009BD60(_WORD *a1, uint64_t a2, uint64_t *a3, int a4)
{
  int v7 = 0;
  v45[0] = v45;
  v45[1] = v45;
  v45[2] = 0LL;
  v44[0] = 0LL;
  v44[1] = 0LL;
  uint64_t v43 = v44;
  memset(&v42, 0, sizeof(v42));
  do
  {
    uint64_t v41 = 0LL;
    unsigned int v40 = 0;
    std::string::push_back(&v42, 10);
    std::string::push_back(&v42, 10);
    if (v7)
    {
      std::string::append(&v42, "Histogram for ReTx due to ChannelAccessFailure: ");
      std::string::push_back(&v42, 10);
      std::string::push_back(&v42, 10);
      unsigned int v13 = off_1002B0F50;
    }

    else
    {
      std::string::append(&v42, "Histogram for ReTx due to NoAck  : ");
      std::string::push_back(&v42, 10);
      std::string::push_back(&v42, 10);
      unsigned int v13 = off_1002B0EC0;
    }

    unsigned int v14 = spinel_datatype_unpack(a1, a2, "d", v8, v9, v10, v11, v12, (uint64_t)&v41);
    unsigned int v20 = v14;
    if (!v14)
    {
      unsigned __int8 v33 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v33)
      {
        goto LABEL_54;
      }

      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_54;
      }
LABEL_53:
      sub_1001FB53C();
      goto LABEL_54;
    }

    BOOL v21 = a2 >= v14;
    a2 = a2 - v14;
    if (!v21)
    {
      std::string v34 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      int v35 = v34;
      if (v34)
      {
        goto LABEL_54;
      }

      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_53;
      }
LABEL_54:
      uint64_t v36 = 1LL;
      goto LABEL_55;
    }

    if (v40 >= 4)
    {
      int v22 = 0;
      unint64_t v23 = 0LL;
      unint64_t v24 = (unint64_t)(int)v40 >> 2;
      if (v7) {
        int v25 = "Direct Messages ChannelAccessFailure [";
      }
      else {
        int v25 = "Direct Messages NoAck [";
      }
      while (1)
      {
        unsigned int v26 = spinel_datatype_unpack(v41, v40, "L", v15, v16, v17, v18, v19, (uint64_t)&v39);
        if (!v26) {
          break;
        }
        if (v40 < v26)
        {
          int v32 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v32)
          {
            goto LABEL_54;
          }

          if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            goto LABEL_54;
          }
          goto LABEL_53;
        }

        uint64_t v41 = (_WORD *)((char *)v41 + v26);
        v40 -= v26;
        std::string::append(&v42, v25);
        std::to_string(&v46, v22);
        sub_10000D650(&v42, (const std::string::value_type *)&v46);
        std::string::append(&v42, "] attempts: ");
        if ((a4 & 1) != 0)
        {
          if (v23 > 0x8F) {
            goto LABEL_65;
          }
          sub_10000AC00(&v46, v13[v23 / 8]);
          uint64_t v27 = sub_10000ED88(&v43, (__n128 *)&v46);
          sub_100017F70(v27, &v39);
        }

        else
        {
          snprintf((char *)&v46, 0x32uLL, " %d\n", v39);
          std::string::append(&v42, (const std::string::value_type *)&v46);
        }

        int v28 = v22 + 1;
        if (__OFADD__(v22, 1))
        {
          __break(0x5500u);
LABEL_65:
          __break(1u);
        }

        v23 += 8LL;
        ++v22;
        if (v24 <= v28) {
          goto LABEL_23;
        }
      }

      uint64_t v31 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v31)
      {
        goto LABEL_54;
      }

      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_54;
      }
      goto LABEL_53;
    }

void sub_10009C284( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_10000D448((uint64_t)&a20);
  sub_10000C0E8(&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_10009C2FC(_WORD *a1, uint64_t a2, uint64_t *a3, int a4)
{
  v40[0] = v40;
  v40[1] = v40;
  v40[2] = 0LL;
  v39[0] = 0LL;
  v39[1] = 0LL;
  uint64_t v38 = v39;
  memset(&v37, 0, sizeof(v37));
  std::string::push_back(&v37, 10);
  std::string::append(&v37, "Histogram for MAC Packet Size : ");
  std::string::push_back(&v37, 10);
  for (int i = 0; i != 2; ++i)
  {
    uint64_t v36 = 0LL;
    unsigned int v35 = 0;
    if (i) {
      unsigned int v13 = off_1002B10B8;
    }
    else {
      unsigned int v13 = off_1002B0FE0;
    }
    unsigned int v14 = spinel_datatype_unpack(a1, a2, "d", v7, v8, v9, v10, v11, (uint64_t)&v36);
    unsigned int v15 = v14;
    if (!v14)
    {
      int v28 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v28)
      {
        goto LABEL_54;
      }

      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_54;
      }
LABEL_53:
      sub_1001FB53C();
      goto LABEL_54;
    }

    BOOL v16 = a2 >= v14;
    a2 = a2 - v14;
    if (!v16)
    {
      BOOL v29 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      char v30 = v29;
      if (v29)
      {
        goto LABEL_54;
      }

      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_53;
      }
LABEL_54:
      uint64_t v31 = 1LL;
      goto LABEL_55;
    }

    if (v35 >= 4)
    {
      int v17 = 0;
      unint64_t v18 = 0LL;
      unint64_t v19 = (unint64_t)(int)v35 >> 2;
      if (i) {
        unsigned int v20 = "    Number of RX packets with size [";
      }
      else {
        unsigned int v20 = "    Number of TX packets with size [";
      }
      while (1)
      {
        unsigned int v21 = spinel_datatype_unpack(v36, v35, "L", v7, v8, v9, v10, v11, (uint64_t)&v34);
        if (!v21) {
          break;
        }
        if (v35 < v21)
        {
          uint64_t v27 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v27)
          {
            goto LABEL_54;
          }

          if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            goto LABEL_54;
          }
          goto LABEL_53;
        }

        uint64_t v36 = (_WORD *)((char *)v36 + v21);
        v35 -= v21;
        std::string::append(&v37, v20);
        std::to_string(&v41, v17);
        sub_10000D650(&v37, (const std::string::value_type *)&v41);
        std::string::append(&v37, "] : ");
        if ((a4 & 1) != 0)
        {
          if (v18 > 0xD7) {
            goto LABEL_65;
          }
          sub_10000AC00(&v41, v13[v18 / 8]);
          int v22 = sub_10000ED88(&v38, (__n128 *)&v41);
          sub_100017F70(v22, &v34);
        }

        else
        {
          snprintf((char *)&v41, 0x32uLL, " %d\n", v34);
          std::string::append(&v37, (const std::string::value_type *)&v41);
        }

        int v23 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
          __break(0x5500u);
LABEL_65:
          __break(1u);
        }

        v18 += 8LL;
        ++v17;
        if (v19 <= v23) {
          goto LABEL_23;
        }
      }

      unsigned int v26 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v26)
      {
        goto LABEL_54;
      }

      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_54;
      }
      goto LABEL_53;
    }

void sub_10009C7E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_10000D448((uint64_t)&a20);
  sub_10000C0E8(&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_10009C85C(_WORD *a1, uint64_t a2, uint64_t *a3, int a4)
{
  v40[0] = v40;
  v40[1] = v40;
  v40[2] = 0LL;
  v39[0] = 0LL;
  v39[1] = 0LL;
  uint64_t v38 = v39;
  memset(&v37, 0, sizeof(v37));
  std::string::push_back(&v37, 10);
  std::string::append(&v37, "Histogram for Neighbor Node RSSI : ");
  std::string::push_back(&v37, 10);
  for (int i = 0; i != 2; ++i)
  {
    uint64_t v36 = 0LL;
    unsigned int v35 = 0;
    if (i) {
      unsigned int v13 = off_1002B1268;
    }
    else {
      unsigned int v13 = off_1002B1190;
    }
    unsigned int v14 = spinel_datatype_unpack(a1, a2, "d", v7, v8, v9, v10, v11, (uint64_t)&v36);
    unsigned int v15 = v14;
    if (!v14)
    {
      int v28 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v28)
      {
        goto LABEL_54;
      }

      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_54;
      }
LABEL_53:
      sub_1001FB53C();
      goto LABEL_54;
    }

    BOOL v16 = a2 >= v14;
    a2 = a2 - v14;
    if (!v16)
    {
      BOOL v29 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      char v30 = v29;
      if (v29)
      {
        goto LABEL_54;
      }

      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_53;
      }
LABEL_54:
      uint64_t v31 = 1LL;
      goto LABEL_55;
    }

    if (v35 >= 4)
    {
      int v17 = 0;
      unint64_t v18 = 0LL;
      unint64_t v19 = (unint64_t)(int)v35 >> 2;
      if (i) {
        unsigned int v20 = "    Number of received packets from Nbr End-Device with RSSI-Range [";
      }
      else {
        unsigned int v20 = "    Number of received packets from Nbr Router with RSSI-Range [";
      }
      while (1)
      {
        unsigned int v21 = spinel_datatype_unpack(v36, v35, "L", v7, v8, v9, v10, v11, (uint64_t)&v34);
        if (!v21) {
          break;
        }
        if (v35 < v21)
        {
          uint64_t v27 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v27)
          {
            goto LABEL_54;
          }

          if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            goto LABEL_54;
          }
          goto LABEL_53;
        }

        uint64_t v36 = (_WORD *)((char *)v36 + v21);
        v35 -= v21;
        std::string::append(&v37, v20);
        std::to_string(&v41, v17);
        sub_10000D650(&v37, (const std::string::value_type *)&v41);
        std::string::append(&v37, "] : ");
        if ((a4 & 1) != 0)
        {
          if (v18 > 0xD7) {
            goto LABEL_65;
          }
          sub_10000AC00(&v41, v13[v18 / 8]);
          int v22 = sub_10000ED88(&v38, (__n128 *)&v41);
          sub_100017F70(v22, &v34);
        }

        else
        {
          snprintf((char *)&v41, 0x32uLL, " %d\n", v34);
          std::string::append(&v37, (const std::string::value_type *)&v41);
        }

        int v23 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
          __break(0x5500u);
LABEL_65:
          __break(1u);
        }

        v18 += 8LL;
        ++v17;
        if (v19 <= v23) {
          goto LABEL_23;
        }
      }

      unsigned int v26 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v26)
      {
        goto LABEL_54;
      }

      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_54;
      }
      goto LABEL_53;
    }

void sub_10009CD44( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_10000D448((uint64_t)&a20);
  sub_10000C0E8(&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_10009CDBC( _WORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a4;
  unint64_t v12 = 0LL;
  v28[0] = (uint64_t)v28;
  v28[1] = (uint64_t)v28;
  v28[2] = 0LL;
  v27[0] = 0LL;
  v27[1] = 0LL;
  unsigned int v26 = v27;
  do
  {
    if (!off_1002B1340[v12 / 8]) {
      goto LABEL_14;
    }
    unsigned int v13 = spinel_datatype_unpack(a1, a2, "L", a4, a5, a6, a7, a8, (uint64_t)&v25);
    unsigned int v14 = v13;
    if (!v13)
    {
      unint64_t v18 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v18)
      {
        goto LABEL_30;
      }

      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
LABEL_29:
      }
        sub_1001FB53C();
LABEL_30:
      uint64_t v21 = 1LL;
      goto LABEL_31;
    }

    BOOL v15 = a2 >= v13;
    a2 = a2 - v13;
    if (!v15)
    {
      unint64_t v19 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      unsigned int v20 = v19;
      if (v19)
      {
        goto LABEL_30;
      }

      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_29;
      }
      goto LABEL_30;
    }

    if ((v8 & 1) != 0)
    {
      sub_10000AC00(&__str, off_1002B1340[v12 / 8]);
      BOOL v16 = sub_10000ED88(&v26, &__str);
      sub_100017F70(v16, &v25);
      if ((v30 & 0x80000000) == 0) {
        goto LABEL_12;
      }
      int v17 = (void *)__str.n128_u64[0];
    }

    else
    {
      snprintf((char *)&__str, 0xC8uLL, "%s = %u", off_1002B1340[v12 / 8], v25);
      sub_10000AC00(__p, (char *)&__str);
      sub_100044B24(v28, (uint64_t)__p);
      if ((v24 & 0x80000000) == 0) {
        goto LABEL_12;
      }
      int v17 = __p[0];
    }

    operator delete(v17);
LABEL_12:
    a1 = (_WORD *)((char *)a1 + v14);
    v12 += 8LL;
  }

  while (v12 <= 0x77);
  __break(1u);
LABEL_14:
  if (v8) {
    sub_10005653C(a3, (uint64_t *)&v26);
  }
  else {
    sub_10006DA9C(a3, (uint64_t)v28);
  }
  uint64_t v21 = 0LL;
LABEL_31:
  sub_10000D448((uint64_t)&v26);
  sub_10000C0E8(v28);
  return v21;
}

void sub_10009D028( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
}

uint64_t sub_10009D08C( _WORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a4;
  v19[0] = 0LL;
  v19[1] = 0LL;
  unint64_t v18 = v19;
  int v17 = 0;
  if (spinel_datatype_unpack(a1, a2, "SS", a4, a5, a6, a7, a8, (uint64_t)&v17 + 2))
  {
    if (v8)
    {
      sub_10000AC00(&__p, "link_loss_nbr_child_count");
      uint64_t v10 = sub_10000ED88(&v18, &__p);
      sub_100017678(v10, (_WORD *)&v17 + 1);
      if (v16 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      sub_10000AC00(&__p, "link_loss_nbr_router_count");
      uint64_t v11 = sub_10000ED88(&v18, &__p);
      sub_100017678(v11, &v17);
      if (v16 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      sub_10005653C(a3, (uint64_t *)&v18);
    }

    else
    {
      snprintf( __str,  0xC8uLL,  "\nNeighborChildLinkLossCount: %hu \nNeighborRouterLinkLossCount: %hu \n",  HIWORD(v17),  (unsigned __int16)v17);
      sub_10000AC00(&__p, __str);
      sub_1000175B4(a3, (uint64_t)&__p);
      if (v16 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
    }

    uint64_t v13 = 0LL;
  }

  else
  {
    unint64_t v12 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v12)
    {
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    uint64_t v13 = 1LL;
  }

  sub_10000D448((uint64_t)&v18);
  return v13;
}

void sub_10009D250( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char a19)
{
}

uint64_t sub_10009D29C( _WORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a4;
  unsigned int v10 = a2;
  v27[0] = 0LL;
  v27[1] = 0LL;
  unsigned int v26 = v27;
  unsigned int v11 = spinel_datatype_unpack(a1, a2, "t(LLLL)", a4, a5, a6, a7, a8, (uint64_t)&v25);
  if (!v11)
  {
    uint64_t v13 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v13)
    {
      goto LABEL_28;
    }

    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
LABEL_27:
    }
      sub_1001FB53C();
LABEL_28:
    uint64_t v18 = 1LL;
    goto LABEL_29;
  }

  if (v11 > v10)
  {
    unint64_t v12 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v12)
    {
      goto LABEL_28;
    }

    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_27;
    }
    goto LABEL_28;
  }

  if (v8)
  {
    sub_10000AC00(&__p, "TxApplicationPktTotal");
    unsigned int v14 = sub_10000ED88(&v26, &__p);
    sub_100017F70(v14, &v25);
    if (v21 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    sub_10000AC00(&__p, "TxApplicationPktSuccess");
    BOOL v15 = sub_10000ED88(&v26, &__p);
    sub_100017F70(v15, &v24);
    if (v21 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    sub_10000AC00(&__p, "TxApplicationPktDropped");
    char v16 = sub_10000ED88(&v26, &__p);
    sub_100017F70(v16, &v23);
    if (v21 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    sub_10000AC00(&__p, "TxApplicationPktTXFail");
    int v17 = sub_10000ED88(&v26, &__p);
    sub_100017F70(v17, &v22);
    if (v21 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    sub_10005653C(a3, (uint64_t *)&v26);
  }

  else
  {
    snprintf( __str,  0xC8uLL,  "\n TxApplicationPktTotalCount: %d \n TxApplicationPktSuccessCount: %d \n TxApplicationPktDroppedCount: %d \n TxApplicationPktTXFailCount: %d \n",  v25,  v24,  v23,  v22);
    sub_10000AC00(&__p, __str);
    sub_1000175B4(a3, (uint64_t)&__p);
    if (v21 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
  }

  uint64_t v18 = 0LL;
LABEL_29:
  sub_10000D448((uint64_t)&v26);
  return v18;
}

void sub_10009D540( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20, char a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_10000D448((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_10009D5A0(_WORD *a1, uint64_t a2, uint64_t *a3, int a4)
{
  v58[0] = v58;
  v58[1] = v58;
  v58[2] = 0LL;
  v57[0] = 0LL;
  v57[1] = 0LL;
  int v56 = v57;
  memset(&v55, 0, sizeof(v55));
  std::string::push_back(&v55, 10);
  std::string::append(&v55, "Histogram for Connected Nodes (hourly) : ");
  std::string::push_back(&v55, 10);
  for (int i = 0; i != 2; ++i)
  {
    int v54 = 0LL;
    unsigned int v53 = 0;
    unsigned int v13 = spinel_datatype_unpack(a1, a2, "d", v7, v8, v9, v10, v11, (uint64_t)&v54);
    unsigned int v14 = v13;
    if (!v13)
    {
      uint64_t v38 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v38)
      {
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        goto LABEL_64;
      }

void sub_10009DB84( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, void *a31, uint64_t a32, int a33, __int16 a34, char a35, char a36, void *a37, uint64_t a38, int a39, __int16 a40, char a41, char a42, uint64_t a43, void *a44, uint64_t a45, int a46, __int16 a47, char a48, char a49, uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,char a58)
{
  if (a57 < 0) {
    operator delete(__p);
  }
  sub_10000D448((uint64_t)&a58);
  sub_10000C0E8((void *)(v58 - 232));
  _Unwind_Resume(a1);
}

uint64_t sub_10009DC88(_WORD *a1, uint64_t a2, uint64_t *a3, int a4)
{
  v26[0] = v26;
  v26[1] = v26;
  v26[2] = 0LL;
  v25[0] = 0LL;
  v25[1] = 0LL;
  int v24 = v25;
  memset(&v23, 0, sizeof(v23));
  std::string::push_back(&v23, 10);
  std::string::push_back(&v23, 10);
  std::string::append(&v23, "Histogram for CCA Energy Detected values: ");
  std::string::push_back(&v23, 10);
  std::string::push_back(&v23, 10);
  uint64_t v22 = 0LL;
  int v21 = 0;
  unsigned int v13 = spinel_datatype_unpack(a1, a2, "d", v8, v9, v10, v11, v12, (uint64_t)&v22);
  if (!v13)
  {
    BOOL v15 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v15)
    {
      goto LABEL_34;
    }

    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
LABEL_27:
    }
      sub_1001FB53C();
LABEL_34:
    uint64_t v19 = 1LL;
    goto LABEL_35;
  }

  if (v13 > a2)
  {
    unsigned int v14 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v14)
    {
      goto LABEL_34;
    }

    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_27;
    }
    goto LABEL_34;
  }

  unsigned int v16 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v16)
  {
    if (sub_10015A058(6) && os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      int buf = 67109376;
      *(_DWORD *)buf_4 = v21;
      *(_WORD *)&buf_4[4] = 1024;
      *(_DWORD *)&buf_4[6] = v21 >> 2;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "unpack_cca_energy_detected_histogram : len: %d num_elements: %d",  (uint8_t *)&buf,  0xEu);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  int v17 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v17)
  {
    if (sub_10015A058(6) && os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      uint64_t v18 = &v23;
      if ((v23.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v18 = (std::string *)v23.__r_.__value_.__r.__words[0];
      }
      int buf = 136315138;
      *(void *)buf_4 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Structure string : %s", (uint8_t *)&buf, 0xCu);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  if (a4) {
    sub_10005653C(a3, (uint64_t *)&v24);
  }
  else {
    sub_1000200A0(a3, &v23);
  }
  uint64_t v19 = 0LL;
LABEL_35:
  sub_10000D448((uint64_t)&v24);
  sub_10000C0E8(v26);
  return v19;
}

void sub_10009E21C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_10000D448((uint64_t)&a20);
  sub_10000C0E8(&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_10009E294(_WORD *a1, uint64_t a2, uint64_t *a3, int a4)
{
  v26[0] = v26;
  v26[1] = v26;
  v26[2] = 0LL;
  v25[0] = 0LL;
  v25[1] = 0LL;
  int v24 = v25;
  memset(&v23, 0, sizeof(v23));
  std::string::push_back(&v23, 10);
  std::string::push_back(&v23, 10);
  std::string::append(&v23, "Histogram for CSMA Backoffs: ");
  std::string::push_back(&v23, 10);
  std::string::push_back(&v23, 10);
  uint64_t v22 = 0LL;
  int v21 = 0;
  unsigned int v13 = spinel_datatype_unpack(a1, a2, "d", v8, v9, v10, v11, v12, (uint64_t)&v22);
  if (!v13)
  {
    BOOL v15 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v15)
    {
      goto LABEL_34;
    }

    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
LABEL_27:
    }
      sub_1001FB53C();
LABEL_34:
    uint64_t v19 = 1LL;
    goto LABEL_35;
  }

  if (v13 > a2)
  {
    unsigned int v14 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v14)
    {
      goto LABEL_34;
    }

    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_27;
    }
    goto LABEL_34;
  }

  unsigned int v16 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v16)
  {
    if (sub_10015A058(6) && os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      int buf = 67109376;
      *(_DWORD *)buf_4 = v21;
      *(_WORD *)&buf_4[4] = 1024;
      *(_DWORD *)&buf_4[6] = v21 >> 2;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "unpack_csma_backoff_histogram : len: %d num_elements: %d",  (uint8_t *)&buf,  0xEu);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  int v17 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v17)
  {
    if (sub_10015A058(6) && os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      uint64_t v18 = &v23;
      if ((v23.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v18 = (std::string *)v23.__r_.__value_.__r.__words[0];
      }
      int buf = 136315138;
      *(void *)buf_4 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Structure string : %s", (uint8_t *)&buf, 0xCu);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  if (a4) {
    sub_10005653C(a3, (uint64_t *)&v24);
  }
  else {
    sub_1000200A0(a3, &v23);
  }
  uint64_t v19 = 0LL;
LABEL_35:
  sub_10000D448((uint64_t)&v24);
  sub_10000C0E8(v26);
  return v19;
}

void sub_10009E818( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_10000D448((uint64_t)&a20);
  sub_10000C0E8(&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_10009E890( _WORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a4;
  int v11 = 0;
  v37[0] = (uint64_t)v37;
  v37[1] = (uint64_t)v37;
  void v37[2] = 0LL;
  v36[0] = 0LL;
  v36[1] = 0LL;
  uint64_t v12 = 40LL;
  unsigned int v35 = v36;
LABEL_2:
  int v34 = 0LL;
  unsigned int v33 = 0;
  if (v11 == 1)
  {
    uint64_t v12 = 136LL;
    unsigned int v13 = off_1002B1510;
  }

  else
  {
    unsigned int v13 = off_1002B1598;
  }

  if (v11) {
    unint64_t v14 = v12;
  }
  else {
    unint64_t v14 = 152LL;
  }
  if (v11) {
    BOOL v15 = v13;
  }
  else {
    BOOL v15 = off_1002B1478;
  }
  unsigned int v16 = spinel_datatype_unpack(a1, a2, "d", a4, a5, a6, a7, a8, (uint64_t)&v34);
  if (!v16)
  {
    unsigned int v26 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v26)
    {
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      goto LABEL_40;
    }

    goto LABEL_41;
  }

  BOOL v17 = a2 >= v16;
  a2 = a2 - v16;
  if (!v17)
  {
    __int128 v27 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    int v28 = v27;
    if (v27)
    {
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      goto LABEL_40;
    }

    goto LABEL_41;
  }

  unint64_t v18 = 0LL;
  a1 = (_WORD *)((char *)a1 + v16);
  while (1)
  {
    if (!v15[v18 / 8])
    {
      ++v11;
      uint64_t v12 = 40LL;
      if (v11 != 3) {
        goto LABEL_2;
      }
      if (v8) {
        sub_10005653C(a3, (uint64_t *)&v35);
      }
      else {
        sub_10006DA9C(a3, (uint64_t)v37);
      }
      uint64_t v24 = 0LL;
      goto LABEL_42;
    }

    unsigned int v19 = spinel_datatype_unpack(v34, v33, "L", a4, a5, a6, a7, a8, (uint64_t)&v32);
    if (!v19) {
      break;
    }
    if (v33 < v19)
    {
      std::string v23 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v23)
      {
        goto LABEL_41;
      }

      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_41;
      }
      goto LABEL_40;
    }

    int v34 = (_WORD *)((char *)v34 + v19);
    v33 -= v19;
    if ((v8 & 1) != 0)
    {
      sub_10000AC00(&__str, v15[v18 / 8]);
      uint64_t v20 = sub_10000ED88(&v35, &__str);
      sub_100017F70(v20, &v32);
      if (v39 < 0)
      {
        int v21 = (void *)__str.n128_u64[0];
LABEL_23:
        operator delete(v21);
      }
    }

    else
    {
      snprintf((char *)&__str, 0xC8uLL, "%-20s = %u", v15[v18 / 8], v32);
      sub_10000AC00(__p, (char *)&__str);
      sub_100044B24(v37, (uint64_t)__p);
      if (v31 < 0)
      {
        int v21 = __p[0];
        goto LABEL_23;
      }
    }

    v18 += 8LL;
    if (v14 <= v18) {
      __break(1u);
    }
  }

  uint64_t v22 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v22)
  {
    goto LABEL_41;
  }

  if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    goto LABEL_41;
  }
LABEL_40:
  sub_1001FB53C();
LABEL_41:
  uint64_t v24 = 1LL;
LABEL_42:
  sub_10000D448((uint64_t)&v35);
  sub_10000C0E8(v37);
  return v24;
}

void sub_10009EC7C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, int a29, __int16 a30, char a31, char a32)
{
}

uint64_t sub_10009ECEC(_WORD *a1, uint64_t a2, uint64_t *a3)
{
  v40[0] = (uint64_t)v40;
  v40[1] = (uint64_t)v40;
  v40[2] = 0LL;
  char v39 = 0LL;
  unsigned int v38 = 0;
  unsigned int v33 = 0LL;
  int v34 = 0LL;
  uint64_t v35 = 0LL;
  v31[0] = 0LL;
  v31[1] = 0LL;
  uint64_t v32 = 0LL;
  sub_10000AC00(__p, "Neighbor Ack Data:");
  sub_100044B24(v40, (uint64_t)__p);
  if ((char)__p[0].__r_.__value_.__s.__size_ < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!(_DWORD)a2)
    {
LABEL_30:
      sub_10006DA9C(a3, (uint64_t)v40);
      uint64_t v23 = 0LL;
      goto LABEL_56;
    }
  }

  else if (!(_DWORD)a2)
  {
    goto LABEL_30;
  }

  unsigned __int8 v10 = 0;
  while (1)
  {
    unsigned int v11 = spinel_datatype_unpack(a1, a2, "d", v5, v6, v7, v8, v9, (uint64_t)&v39);
    unsigned int v17 = v11;
    if (!v11) {
      break;
    }
    BOOL v18 = a2 >= v11;
    a2 = a2 - v11;
    if (!v18)
    {
      unsigned int v25 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      unsigned int v26 = v25;
      if (v25)
      {
        goto LABEL_55;
      }

      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_55;
      }
      goto LABEL_54;
    }

    unsigned int v19 = spinel_datatype_unpack(v39, v38, "SESD", v12, v13, v14, v15, v16, (uint64_t)&v37);
    if (!v19)
    {
      __int128 v27 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (!v27)
      {
        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          goto LABEL_55;
        }
        goto LABEL_54;
      }

      goto LABEL_55;
    }

    if (v38 < v19)
    {
      int v28 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v28)
      {
        goto LABEL_55;
      }

      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_55;
      }
LABEL_54:
      sub_1001FB53C();
      goto LABEL_55;
    }

    int v34 = v33;
    sub_1000712BC((char *)&v33, v33, 0LL, 0LL, 0LL);
    sub_100033680(buf, (uint64_t)&v33);
    sub_100147B4C((uint64_t *)buf, __p);
    sub_100014D08((uint64_t)v31, (__int128 *)__p);
    if (*(void *)buf) {
      (*(void (**)(void))(**(void **)buf + 8LL))(*(void *)buf);
    }
    snprintf( (char *)__p,  0xC8uLL,  "%02X%02X%02X%02X%02X%02X%02X%02X",  MEMORY[7],  MEMORY[6],  MEMORY[5],  MEMORY[4],  MEMORY[3],  MEMORY[2],  MEMORY[1],  MEMORY[0]);
    uint64_t v20 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v20)
    {
      if (sub_10015A058(6) && os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        if (v32 >= 0) {
          int v21 = v31;
        }
        else {
          int v21 = (void **)v31[0];
        }
        *(_DWORD *)int buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = v10;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v37;
        *(_WORD *)std::string v42 = 2080;
        *(void *)&v42[2] = __p;
        __int16 v43 = 1024;
        int v44 = v36;
        __int16 v45 = 2080;
        std::string v46 = v21;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "[%u] Neighbor Short Address = %04x, Extended Address = %s, Bit field = %02x, IE data = %s",  buf,  0x28u);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "com.apple.wpantund.ncp";
      *(_WORD *)&_BYTE buf[12] = 2080;
      *(void *)std::string v42 = "default";
      _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging Module is not defined for SubSystem: %s, Category: %s",  buf,  0x16u);
    }

    if (v32 >= 0) {
      uint64_t v22 = v31;
    }
    else {
      uint64_t v22 = (void **)v31[0];
    }
    snprintf( __str,  0x400uLL,  "[%u] Neighbor Short Address = %04x,  Extended Address = %s, Bit field = %02x, IE data = %s",  v10,  v37,  (const char *)__p,  v36,  (const char *)v22);
    sub_10000AC00(buf, __str);
    sub_100044B24(v40, (uint64_t)buf);
    if ((v42[9] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    a1 = (_WORD *)((char *)a1 + v17);
    ++v10;
    if (!(_DWORD)a2) {
      goto LABEL_30;
    }
  }

  uint64_t v24 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (!v24)
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_55;
    }
    goto LABEL_54;
  }

void sub_10009F270( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *__p, uint64_t a27, int a28, __int16 a29, char a30, char a31, char a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, int a42, __int16 a43, char a44, char a45, uint64_t a46, uint64_t a47, void *a48, uint64_t a49, int a50,__int16 a51,char a52,char a53)
{
}

void sub_10009F31C(uint64_t a1, std::string *a2, uint64_t *a3, uint64_t *a4)
{
  if (((char)a2->__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    if (strcasecmp((const char *)a2, "vendor:pmu_wake:start")
      && strcasecmp((const char *)a2, "vendor:uart:disable:start"))
    {
      if (strcasecmp((const char *)a2, "vendor:coex:rx_mode"))
      {
        if (strcasecmp((const char *)a2, "vendor:coex:tx_mode"))
        {
          if (strcasecmp((const char *)a2, "vendor:coex:enabled"))
          {
            if (strcasecmp((const char *)a2, "vendor:fem:enabled")
              && strcasecmp((const char *)a2, "vendor:csma:min:be"))
            {
              if (!strcasecmp((const char *)a2, "vendor:csma:max:be")
                || !strcasecmp((const char *)a2, "vendor:csma:max:backoffs"))
              {
                goto LABEL_131;
              }

              if (strcasecmp((const char *)a2, "vendor:csma:cca:idleattempts"))
              {
                if (strcasecmp((const char *)a2, "vendor:csma:sliding:window:enabled"))
                {
                  if (!strcasecmp((const char *)a2, "vendor:ifs:mode")
                    || !strcasecmp((const char *)a2, "vendor:cntr:stats:reset"))
                  {
                    goto LABEL_131;
                  }

                  if (!strcasecmp((const char *)a2, "vendor:ifs:min:sifs")
                    || !strcasecmp((const char *)a2, "vendor:ifs:min:lifs")
                    || !strcasecmp((const char *)a2, "vendor:ifs:retx:min:sifs")
                    || !strcasecmp((const char *)a2, "vendor:ifs:retx:min:lifs"))
                  {
                    goto LABEL_205;
                  }

                  if (strcasecmp((const char *)a2, "vendor:ifs:ackturnaround:time"))
                  {
                    if (strcasecmp((const char *)a2, "vendor:ifs:ackturnaround:mode"))
                    {
                      if (strcasecmp((const char *)a2, "vendor:ifs:ackturnaround:enable"))
                      {
                        if (!strcasecmp((const char *)a2, "vendor:coex:counters")
                          || !strcasecmp((const char *)a2, "vendor:radio:counters"))
                        {
                          goto LABEL_449;
                        }

                        if (!strcasecmp((const char *)a2, "vendor:radio:stats")
                          || !strcasecmp((const char *)a2, "vendor:unsol:filternotif"))
                        {
                          goto LABEL_131;
                        }

                        if (strcasecmp((const char *)a2, "vendor:deepsleep:filter:list"))
                        {
                          if (strcasecmp((const char *)a2, "vendor:deepsleep:loglevel"))
                          {
                            if (strcasecmp((const char *)a2, "vendor:deepsleep:region:loglevels"))
                            {
                              if (strcasecmp((const char *)a2, "vendor:assert"))
                              {
                                if (strcasecmp((const char *)a2, "vendor:assigned:hw:mac"))
                                {
                                  if (strcasecmp((const char *)a2, "vendor:power:mapping:table:power:test")
                                    && strcasecmp((const char *)a2, "vendor:power:mapping:set:to:default"))
                                  {
                                    if (strcasecmp((const char *)a2, "vendor:NCP:RSSI:Offset"))
                                    {
                                      if (strcasecmp((const char *)a2, "vendor:coex:grant:timeout"))
                                      {
                                        if (strcasecmp((const char *)a2, "vendor:coex:RxThrottle:RxReq:TxAckOnGrant"))
                                        {
                                          if (strcasecmp((const char *)a2, "vendor:coex:RxThrottle:RxReq:TxAlwaysAck"))
                                          {
                                            if (strcasecmp( (const char *)a2,  "vendor:coex:RxThrottle:NoRxReq:TxAckOnUnsolGrant"))
                                            {
                                              if (strcasecmp((const char *)a2, "vendor:coex:RxThrottle:Timeout"))
                                              {
                                                if (!strcasecmp((const char *)a2, "vendor:power:mapping:table:clear")
                                                  || !strcasecmp((const char *)a2, "vendor:coex:histograms"))
                                                {
                                                  goto LABEL_131;
                                                }

                                                if (strcasecmp( (const char *)a2,  "vendor:power:mapping:table:flash:data"))
                                                {
                                                  if (strcasecmp((const char *)a2, "vendor:logging:mapping:table"))
                                                  {
                                                    if (strcasecmp((const char *)a2, "vendor:fault:info"))
                                                    {
                                                      if (strcasecmp((const char *)a2, "vendor:ncp:buffer:thresh"))
                                                      {
                                                        if (!strcasecmp( (const char *)a2,  "vendor:MAC:packet:SizeHistogram")
                                                          || !strcasecmp( (const char *)a2,  "vendor:MAC:packet:LQIHistogram")
                                                          || !strcasecmp( (const char *)a2,  "vendor:MAC:packet:ErrorHistogram")
                                                          || !strcasecmp( (const char *)a2,  "vendor:MAC:packet:RSSIHistogram")
                                                          || !strcasecmp( (const char *)a2,  "vendor:joiner:RSSIHistogram")
                                                          || !strcasecmp( (const char *)a2,  "vendor:cca:energydetected:histogram")
                                                          || !strcasecmp( (const char *)a2,  "vendor:csma:backoff:histogram")
                                                          || !strcasecmp((const char *)a2, "vendor:linkloss:counters"))
                                                        {
                                                          goto LABEL_131;
                                                        }

                                                        if (strcasecmp((const char *)a2, "vendor:mle:adv:tx:num"))
                                                        {
                                                          if (strcasecmp( (const char *)a2,  "vendor:neighbor:count:histogram"))
                                                          {
                                                            if (!strcasecmp( (const char *)a2,  "vendor:ncp:logsdropped:filter:threshold")
                                                              || !strcasecmp( (const char *)a2,  "vendor:ncp:logsdropped:filter:timeout:ms")
                                                              || !strcasecmp( (const char *)a2,  "vendor:ncp:logsdropped:counter")
                                                              || !strcasecmp( (const char *)a2,  "vendor:min:mac:interframedelay"))
                                                            {
                                                              goto LABEL_449;
                                                            }

                                                            if (strcasecmp( (const char *)a2,  "vendor:coex:csl:reqahead:timeinus")
                                                              && strcasecmp( (const char *)a2,  "vendor:csl:tx:schedframe:reqahead:timeinus"))
                                                            {
                                                              uint64_t v8 = (const char *)a2;
                                                              if (strcasecmp( (const char *)a2,  "vendor:tx:application:pkt:counters"))
                                                              {
                                                                goto LABEL_64;
                                                              }

                                                              goto LABEL_131;
                                                            }

LABEL_205:
                                                            uint64_t v55 = *(void *)(a1 + 8);
                                                            sub_1000798B4((uint64_t)&__p, v55);
                                                            uint64_t v56 = sub_10007993C((uint64_t)&__p, a4);
                                                            sub_1001472F4(a3);
                                                            sub_100034C60("CiiS", (uint64_t *)&buf, 0x80u);
                                                            uint64_t v57 = sub_100079A40(v56, (uint64_t)&buf);
                                                            sub_10007A86C(v57, &v184);
                                                            sub_10004E9A4(v55, &v184);
                                                            goto LABEL_258;
                                                          }

            continue;
          }

          v243 = *(void **)(v388 + 32);
          v244 = (void *)objc_claimAutoreleasedReturnValue([v234 network]);
          v245 = (void *)objc_claimAutoreleasedReturnValue([v234 borderAgent]);
          v246 = (void *)objc_claimAutoreleasedReturnValue( [v243 deleteActiveDataSetRecordForNetworkAndBorderAgentId:v244 borderAgent:v245]);

          if (v246)
          {
            v247 = sub_1001768B4(1);
            v236 = (os_log_s *)objc_claimAutoreleasedReturnValue(v247);
            if (!os_log_type_enabled(v236, OS_LOG_TYPE_ERROR)) {
              goto LABEL_205;
            }
            v375 = (void *)objc_claimAutoreleasedReturnValue([v234 network]);
            v237 = (void *)objc_claimAutoreleasedReturnValue([v375 networkName]);
            v366 = (void *)objc_claimAutoreleasedReturnValue([v234 network]);
            v248 = (void *)objc_claimAutoreleasedReturnValue([v366 extendedPANID]);
            v249 = (void *)objc_claimAutoreleasedReturnValue([v234 borderAgent]);
            v250 = (__CFString *)objc_claimAutoreleasedReturnValue([v249 discriminatorId]);
            *(_DWORD *)std::string buf = 136316162;
            v436 = "-[THThreadNetworkCredentialsKeychainBackingStore cleanThreadKeychainDatabase:]_block_invoke";
            v437 = 1024;
            v438 = 2976;
            v439 = 2112;
            v440 = v237;
            v441 = 2112;
            v442 = v248;
            v443 = 2112;
            v444 = v250;
            _os_log_error_impl( (void *)&_mh_execute_header,  v236,  OS_LOG_TYPE_ERROR,  "%s:%d: Failed to delete border agent record (name : %@ | xpanid : %@ | baID : %@)",  buf,  0x30u);
          }

          else
          {
            [*(id *)(v388 + 32) thDumpActiveDatasetRecord:v234];
            v251 = sub_1001768B4(1);
            v236 = (os_log_s *)objc_claimAutoreleasedReturnValue(v251);
            if (!os_log_type_enabled(v236, OS_LOG_TYPE_ERROR)) {
              goto LABEL_205;
            }
            v375 = (void *)objc_claimAutoreleasedReturnValue([v234 network]);
            v237 = (void *)objc_claimAutoreleasedReturnValue([v375 networkName]);
            v366 = (void *)objc_claimAutoreleasedReturnValue([v234 network]);
            v238 = (void *)objc_claimAutoreleasedReturnValue([v366 extendedPANID]);
            v239 = (void *)objc_claimAutoreleasedReturnValue([v234 borderAgent]);
            v240 = (__CFString *)objc_claimAutoreleasedReturnValue([v239 discriminatorId]);
            *(_DWORD *)std::string buf = 136316162;
            v436 = "-[THThreadNetworkCredentialsKeychainBackingStore cleanThreadKeychainDatabase:]_block_invoke";
            v437 = 1024;
            v438 = 2979;
            v439 = 2112;
            v440 = v237;
            v441 = 2112;
            v442 = v238;
            v443 = 2112;
            v444 = v240;
            v241 = v236;
            v242 = "%s:%d: Deleted the ba record (name : %@ | xpanid : %@ | baID : %@), this doesn't belong to Preferred BARecord List.";
LABEL_203:
            _os_log_error_impl((void *)&_mh_execute_header, v241, OS_LOG_TYPE_ERROR, v242, buf, 0x30u);
          }

          goto LABEL_205;
        }
      }

      __int128 v231 = [v229 countByEnumeratingWithState:&v401 objects:v433 count:16];
      if (!v231)
      {
LABEL_208:

        v252 = sub_1001768B4(1);
        v253 = (os_log_s *)objc_claimAutoreleasedReturnValue(v252);
        if (os_log_type_enabled(v253, OS_LOG_TYPE_ERROR)) {
          sub_100196E04(v228);
        }

        v399 = 0u;
        v400 = 0u;
        v397 = 0u;
        v398 = 0u;
        v254 = v228;
        v255 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v254,  "countByEnumeratingWithState:objects:count:",  &v397,  v432,  16LL);
        if (!v255)
        {
LABEL_225:

          goto LABEL_264;
        }

        v256 = v255;
        v257 = *(void *)v398;
        while (2)
        {
          v258 = 0LL;
LABEL_213:
          if (*(void *)v398 != v257) {
            objc_enumerationMutation(v254);
          }
          v259 = *(void **)(*((void *)&v397 + 1) + 8 * v258);
          if (v259
            && [*(id *)(v388 + 32) updateRecord:*(void *)(*((void *)&v397 + 1) + 8 * v258)])
          {
            v260 = sub_1001768B4(1);
            v261 = (os_log_s *)objc_claimAutoreleasedReturnValue(v260);
            if (os_log_type_enabled(v261, OS_LOG_TYPE_ERROR))
            {
              v262 = (void *)objc_claimAutoreleasedReturnValue([v259 network]);
              v263 = (void *)objc_claimAutoreleasedReturnValue([v262 networkName]);
              v264 = (void *)objc_claimAutoreleasedReturnValue([v259 network]);
              v265 = (void *)objc_claimAutoreleasedReturnValue([v264 extendedPANID]);
              *(_DWORD *)std::string buf = 136315906;
              v436 = "-[THThreadNetworkCredentialsKeychainBackingStore cleanThreadKeychainDatabase:]_block_invoke";
              v437 = 1024;
              v438 = 2993;
              v439 = 2112;
              v440 = v263;
              v441 = 2112;
              v442 = v265;
              v266 = v261;
              v267 = "%s:%d: Updated Missing BA Record for item : (name : %@ | xpanid : %@)";
              goto LABEL_223;
            }
          }

          else
          {
            v268 = sub_1001768B4(1);
            v261 = (os_log_s *)objc_claimAutoreleasedReturnValue(v268);
            if (os_log_type_enabled(v261, OS_LOG_TYPE_ERROR))
            {
              v262 = (void *)objc_claimAutoreleasedReturnValue([v259 network]);
              v263 = (void *)objc_claimAutoreleasedReturnValue([v262 networkName]);
              v264 = (void *)objc_claimAutoreleasedReturnValue([v259 network]);
              v265 = (void *)objc_claimAutoreleasedReturnValue([v264 extendedPANID]);
              *(_DWORD *)std::string buf = 136315906;
              v436 = "-[THThreadNetworkCredentialsKeychainBackingStore cleanThreadKeychainDatabase:]_block_invoke";
              v437 = 1024;
              v438 = 2995;
              v439 = 2112;
              v440 = v263;
              v441 = 2112;
              v442 = v265;
              v266 = v261;
              v267 = "%s:%d: Failed to create instance of Missing BA Record for item : (name : %@ | xpanid : %@)";
LABEL_223:
              _os_log_error_impl((void *)&_mh_execute_header, v266, OS_LOG_TYPE_ERROR, v267, buf, 0x26u);
            }
          }

          if (v256 == (id)++v258)
          {
            v269 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v254,  "countByEnumeratingWithState:objects:count:",  &v397,  v432,  16LL);
            v256 = v269;
            if (!v269) {
              goto LABEL_225;
            }
            continue;
          }

          goto LABEL_213;
        }
      }
    }
  }

  if (([*(id *)(a1 + 32) deleteAllRecordsForKeychainAccessGroup:@"0000000000"] & 1) == 0)
  {
    v288 = sub_1001768B4(1);
    v289 = (os_log_s *)objc_claimAutoreleasedReturnValue(v288);
    if (os_log_type_enabled(v289, OS_LOG_TYPE_ERROR)) {
      sub_100196E84();
    }
  }

  v395 = 0u;
  v396 = 0u;
  v393 = 0u;
  v394 = 0u;
  v254 = v385;
  v290 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v254,  "countByEnumeratingWithState:objects:count:",  &v393,  v431,  16LL);
  if (v290)
  {
    v291 = v290;
    v341 = v15;
    v292 = *(void *)v394;
    while (1)
    {
      v293 = 0LL;
      do
      {
        if (*(void *)v394 != v292) {
          objc_enumerationMutation(v254);
        }
        v294 = *(void **)(*((void *)&v393 + 1) + 8LL * (void)v293);
        if (v294
          && [*(id *)(v388 + 32) updateRecord:*(void *)(*((void *)&v393 + 1) + 8 * (void)v293)])
        {
          v295 = sub_1001768B4(1);
          v296 = (os_log_s *)objc_claimAutoreleasedReturnValue(v295);
          if (!os_log_type_enabled(v296, OS_LOG_TYPE_ERROR)) {
            goto LABEL_259;
          }
          v297 = (void *)objc_claimAutoreleasedReturnValue([v294 network]);
          v298 = (void *)objc_claimAutoreleasedReturnValue([v297 networkName]);
          v299 = (void *)objc_claimAutoreleasedReturnValue([v294 network]);
          v300 = (void *)objc_claimAutoreleasedReturnValue([v299 extendedPANID]);
          *(_DWORD *)std::string buf = 136315906;
          v436 = "-[THThreadNetworkCredentialsKeychainBackingStore cleanThreadKeychainDatabase:]_block_invoke";
          v437 = 1024;
          v438 = 3009;
          v439 = 2112;
          v440 = v298;
          v441 = 2112;
          v442 = v300;
          v301 = v296;
          v302 = "%s:%d: Updated BA Record for item : (name : %@ | xpanid : %@)";
        }

        else
        {
          v303 = sub_1001768B4(1);
          v296 = (os_log_s *)objc_claimAutoreleasedReturnValue(v303);
          if (!os_log_type_enabled(v296, OS_LOG_TYPE_ERROR)) {
            goto LABEL_259;
          }
          v297 = (void *)objc_claimAutoreleasedReturnValue([v294 network]);
          v298 = (void *)objc_claimAutoreleasedReturnValue([v297 networkName]);
          v299 = (void *)objc_claimAutoreleasedReturnValue([v294 network]);
          v300 = (void *)objc_claimAutoreleasedReturnValue([v299 extendedPANID]);
          *(_DWORD *)std::string buf = 136315906;
          v436 = "-[THThreadNetworkCredentialsKeychainBackingStore cleanThreadKeychainDatabase:]_block_invoke";
          v437 = 1024;
          v438 = 3011;
          v439 = 2112;
          v440 = v298;
          v441 = 2112;
          v442 = v300;
          v301 = v296;
          v302 = "%s:%d: Failed to create instance of BA Record for item : (name : %@ | xpanid : %@)";
        }

        _os_log_error_impl((void *)&_mh_execute_header, v301, OS_LOG_TYPE_ERROR, v302, buf, 0x26u);

LABEL_259:
        v293 = (char *)v293 + 1;
      }

      while (v291 != v293);
      v304 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v254,  "countByEnumeratingWithState:objects:count:",  &v393,  v431,  16LL);
      v291 = v304;
      if (!v304) {
        goto LABEL_264;
      }
    }
  }

LABEL_131:
                                                          uint64_t v10 = *(void *)(a1 + 8);
                                                          sub_1000798B4((uint64_t)&__p, v10);
                                                          uint64_t v11 = sub_10007993C((uint64_t)&__p, a4);
                                                          sub_1001472F4(a3);
                                                          sub_100034C60("CiiC", (uint64_t *)&buf, 0x80u);
                                                          uint64_t v12 = sub_100079A40(v11, (uint64_t)&buf);
                                                          sub_10007A86C(v12, &v184);
                                                          sub_10004E9A4(v10, &v184);
LABEL_258:
                                                          sub_10000F9EC(v185);
                                                          p_std::string buf = &buf;
                                                          sub_100006F6C((void ***)&p_buf);
                                                          sub_1000454AC(&__p);
                                                          return;
                                                        }

LABEL_428:
                                                        sub_100147B4C(a3, &__p);
                                                        uint64_t v169 = sub_1000A36C4((uint64_t **)(a1 + 64), a2);
                                                        sub_100014D08((uint64_t)v169, (__int128 *)&__p);
                                                        uint64_t v170 = (char *)sub_1000A36C4((uint64_t **)(a1 + 64), a2);
                                                        if (v170[23] >= 0) {
                                                          uint64_t v171 = v170;
                                                        }
                                                        else {
                                                          uint64_t v171 = *(char **)v170;
                                                        }
                                                        sub_10010FFCC("vendor:mle:adv:tx:num", v171);
                                                        uint64_t v172 = (os_log_s *)sub_1000160F4( "com.apple.wpantund",  "default");
                                                        if (!v172)
                                                        {
                                                          if (os_log_type_enabled( (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR))
                                                          {
                                                            sub_1001FB53C();
                                                          }

                                                          goto LABEL_257;
                                                        }

                                                        if (sub_10015A058(6)
                                                          && os_log_type_enabled(v172, OS_LOG_TYPE_INFO))
                                                        {
                                                          int size = (char)a2->__r_.__value_.__s.__size_;
                                                          uint64_t v174 = (std::string *)a2->__r_.__value_.__r.__words[0];
                                                          sub_100147B4C(a3, &__p);
                                                          uint64_t v175 = (char *)(size >= 0 ? a2 : v174);
                                                          uint64_t v176 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
                                                               ? &__p
                                                               : (std::string *)__p.__r_.__value_.__r.__words[0];
                                                          LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
                                                          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words
                                                                                    + 4) = (std::string::size_type)v175;
                                                          WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
                                                          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1]
                                                                                    + 6) = (std::string::size_type)v176;
                                                          _os_log_impl( (void *)&_mh_execute_header,  v172,  OS_LOG_TYPE_INFO,  "Saved Vendor Settings property to restore it later: %s, value %s",  (uint8_t *)&buf,  0x16u);
                                                        }

LABEL_393:
                                                    sub_100034C60("CiiLCXLL", (uint64_t *)&buf, 0x80u);
                                                    uint64_t v153 = *(void *)(a1 + 8);
                                                    sub_1000798B4((uint64_t)&__p, v153);
                                                    uint64_t v154 = sub_10007993C((uint64_t)&__p, a4);
                                                    uint64_t v155 = sub_100079A40(v154, (uint64_t)&buf);
                                                    sub_10007A86C(v155, &v184);
                                                    sub_10004E9A4(v153, &v184);
LABEL_421:
                                                    sub_10000F9EC(v185);
                                                    sub_1000454AC(&__p);
                                                    goto LABEL_252;
                                                  }

                                                  goto LABEL_390;
                                                }

LABEL_385:
                                                memset(&__p, 0, sizeof(__p));
                                                sub_1000A38BC((uint64_t)a3, &__p);
                                                uint64_t v152 = *(void *)(a1 + 8);
                                                sub_100033680(&v184, (uint64_t)&__p);
                                                v180[0] = 0LL;
                                                sub_100007640((uint64_t)v180, a4);
                                                memset(&buf, 0, sizeof(buf));
                                                sub_100057164(v152, &v184, v180, 15532LL, 68, 0, 0, &buf);
                                                sub_1000075F0(v180);
                                                if (v184) {
                                                  (*(void (**)(uint64_t))(*(void *)v184 + 8LL))(v184);
                                                }
                                                buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                                                p_p = &buf;
                                                goto LABEL_253;
                                              }

LABEL_320:
                                          sub_100147B4C(a3, &__p);
                                          uint64_t v125 = sub_1000A36C4((uint64_t **)(a1 + 64), a2);
                                          sub_100014D08((uint64_t)v125, (__int128 *)&__p);
                                          uint64_t v126 = (char *)sub_1000A36C4((uint64_t **)(a1 + 64), a2);
                                          if (v126[23] >= 0) {
                                            uint64_t v127 = v126;
                                          }
                                          else {
                                            uint64_t v127 = *(char **)v126;
                                          }
                                          sub_10010FFCC("vendor:coex:RxThrottle:RxReq:TxAlwaysAck", v127);
                                          uint64_t v128 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                                          if (!v128)
                                          {
                                            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                                              sub_1001FB53C();
                                            }
                                            goto LABEL_257;
                                          }

                                          if (!sub_10015A058(6)
                                            || !os_log_type_enabled(v128, OS_LOG_TYPE_INFO))
                                          {
                                            goto LABEL_257;
                                          }

                                          int v129 = (char)a2->__r_.__value_.__s.__size_;
                                          uint64_t v130 = (std::string *)a2->__r_.__value_.__r.__words[0];
                                          sub_100147B4C(a3, &__p);
                                          uint64_t v131 = (char *)(v129 >= 0 ? a2 : v130);
                                          uint64_t v132 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
                                               ? &__p
                                               : (std::string *)__p.__r_.__value_.__r.__words[0];
                                          LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
                                          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v131;
                                          WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
                                          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v132;
                                          _os_log_impl( (void *)&_mh_execute_header,  v128,  OS_LOG_TYPE_INFO,  "Saved Vendor Settings property to restore it later: %s, value %s",  (uint8_t *)&buf,  0x16u);
                                          goto LABEL_443;
                                        }

LABEL_301:
                                        sub_100147B4C(a3, &__p);
                                        uint64_t v114 = sub_1000A36C4((uint64_t **)(a1 + 64), a2);
                                        sub_100014D08((uint64_t)v114, (__int128 *)&__p);
                                        uint64_t v115 = (char *)sub_1000A36C4((uint64_t **)(a1 + 64), a2);
                                        if (v115[23] >= 0) {
                                          uint64_t v116 = v115;
                                        }
                                        else {
                                          uint64_t v116 = *(char **)v115;
                                        }
                                        sub_10010FFCC("vendor:coex:RxThrottle:RxReq:TxAckOnGrant", v116);
                                        uint64_t v117 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                                        if (!v117)
                                        {
                                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                                            sub_1001FB53C();
                                          }
                                          goto LABEL_257;
                                        }

                                        if (!sub_10015A058(6)
                                          || !os_log_type_enabled(v117, OS_LOG_TYPE_INFO))
                                        {
                                          goto LABEL_257;
                                        }

                                        int v118 = (char)a2->__r_.__value_.__s.__size_;
                                        uint64_t v119 = (std::string *)a2->__r_.__value_.__r.__words[0];
                                        sub_100147B4C(a3, &__p);
                                        uint64_t v120 = (char *)(v118 >= 0 ? a2 : v119);
                                        uint64_t v121 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
                                             ? &__p
                                             : (std::string *)__p.__r_.__value_.__r.__words[0];
                                        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
                                        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v120;
                                        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
                                        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v121;
                                        _os_log_impl( (void *)&_mh_execute_header,  v117,  OS_LOG_TYPE_INFO,  "Saved Vendor Settings property to restore it later: %s, value %s",  (uint8_t *)&buf,  0x16u);
                                        goto LABEL_443;
                                      }

LABEL_285:
                                      sub_100147B4C(a3, &__p);
                                      uint64_t v106 = sub_1000A36C4((uint64_t **)(a1 + 64), a2);
                                      sub_100014D08((uint64_t)v106, (__int128 *)&__p);
                                      uint64_t v107 = (char *)sub_1000A36C4((uint64_t **)(a1 + 64), a2);
                                      if (v107[23] >= 0) {
                                        uint64_t v108 = v107;
                                      }
                                      else {
                                        uint64_t v108 = *(char **)v107;
                                      }
                                      sub_10010FFCC("vendor:coex:grant:timeout", v108);
                                      uint64_t v109 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                                      if (!v109)
                                      {
                                        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                                          sub_1001FB53C();
                                        }
                                        goto LABEL_338;
                                      }

                                      if (sub_10015A058(6) && os_log_type_enabled(v109, OS_LOG_TYPE_INFO))
                                      {
                                        int v110 = (char)a2->__r_.__value_.__s.__size_;
                                        uint64_t v111 = (std::string *)a2->__r_.__value_.__r.__words[0];
                                        sub_100147B4C(a3, &__p);
                                        uint64_t v112 = (char *)(v110 >= 0 ? a2 : v111);
                                        uint64_t v113 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
                                             ? &__p
                                             : (std::string *)__p.__r_.__value_.__r.__words[0];
                                        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
                                        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v112;
                                        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
                                        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v113;
                                        _os_log_impl( (void *)&_mh_execute_header,  v109,  OS_LOG_TYPE_INFO,  "Saved Vendor Settings property to restore it later: %s, value %s",  (uint8_t *)&buf,  0x16u);
                                        if ((char)__p.__r_.__value_.__s.__size_ < 0) {
LABEL_300:
                                        }
                                          operator delete(__p.__r_.__value_.__l.__data_);
                                      }

LABEL_338:
                                      uint64_t v133 = *(void *)(a1 + 8);
                                      sub_1000798B4((uint64_t)&__p, v133);
                                      uint64_t v134 = sub_10007993C((uint64_t)&__p, a4);
                                      sub_1001472F4(a3);
                                      sub_100034C60("CiiL", (uint64_t *)&buf, 0x80u);
                                      uint64_t v135 = sub_100079A40(v134, (uint64_t)&buf);
                                      sub_10007A86C(v135, &v184);
                                      sub_10004E9A4(v133, &v184);
                                      goto LABEL_258;
                                    }

    if (v136 < 0) {
      operator delete(*(void **)buf);
    }
    ++v13;
  }

  while (count != v13);
  uint64_t v144 = __PAIR64__(v119, v123);
  HIDWORD(v143) = v128;
  LODWORD(v143) = v108;
  *(void *)((char *)&v143 + 4) = __PAIR64__(v132, v107);
  HIDWORD(v142) = v110;
  LODWORD(v142) = v116;
  *(void *)((char *)&v142 + 4) = __PAIR64__(v112, v114);
  HIDWORD(v141) = v120;
  LODWORD(v141) = v131;
  *(void *)((char *)&v141 + 4) = __PAIR64__(v124, v126);
  int v140 = __PAIR64__(v118, v122);
  HIDWORD(v139) = v129;
  LODWORD(v139) = v109;
  *(void *)((char *)&v139 + 4) = __PAIR64__(v133, v106);
  HIDWORD(v138) = v111;
  LODWORD(v138) = v117;
  *(void *)((char *)&v138 + 4) = __PAIR64__(v113, v115);
  HIDWORD(v137) = v121;
  LODWORD(v137) = v130;
  *(void *)((char *)&v137 + 4) = __PAIR64__(v125, v127);
LABEL_348:
  for (int i = 0LL; i != 56; i += 4LL)
  {
    uint64_t v103 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)((char *)&v141 + i)));
    [v4 addObject:v103];

    uint64_t v104 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)((char *)&v137 + i)));
    [v5 addObject:v104];
  }

  [v134 setObject:v4 forKey:@"packet_rssi_nbr_router_histogram"];
  [v134 setObject:v5 forKey:@"packet_rssi_nbr_accessory_histogram"];
  uint64_t v9 = 0LL;
LABEL_351:

  return v9;
}

    if (v130 < 0) {
      operator delete(*(void **)buf);
    }
    ++v11;
  }

  while (count != v11);
  uint64_t v138 = __PAIR64__(v114, v118);
  HIDWORD(v137) = v123;
  LODWORD(v137) = v103;
  *(void *)((char *)&v137 + 4) = __PAIR64__(v127, HIDWORD(v102));
  HIDWORD(v136) = v105;
  LODWORD(v136) = v111;
  *(void *)((char *)&v136 + 4) = __PAIR64__(v107, v109);
  HIDWORD(v135) = v115;
  LODWORD(v135) = v126;
  *(void *)((char *)&v135 + 4) = __PAIR64__(v119, v121);
  uint64_t v134 = __PAIR64__(v113, v117);
  HIDWORD(v133) = v124;
  LODWORD(v133) = v104;
  *(void *)((char *)&v133 + 4) = __PAIR64__(v128, v102);
  HIDWORD(v132) = v106;
  LODWORD(v132) = v112;
  *(void *)((char *)&v132 + 4) = __PAIR64__(v108, v110);
  HIDWORD(v131) = v116;
  LODWORD(v131) = v125;
  *(void *)((char *)&v131 + 4) = __PAIR64__(v120, v122);
LABEL_348:
  for (int i = 0LL; i != 56; i += 4LL)
  {
    objc_msgSend(v4, "addPacketRssiNbrRouterHistogram:", *(unsigned int *)((char *)&v135 + i), v102);
    [v4 addPacketRssiNbrAccessoryHistogram:*(unsigned int *)((char *)&v131 + i)];
  }

  uint64_t v7 = 0LL;
LABEL_351:

  return v7;
}

    if (sub_1000B55AC(buf, "DirectCcaError[10]"))
    {
      uint64_t v134 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(buf, "DirectCcaError[11]"))
    {
      uint64_t v132 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(buf, "DirectCcaError[12]"))
    {
      uint64_t v126 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(buf, "DirectCcaError[13]"))
    {
      uint64_t v122 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(buf, "DirectCcaError[14]"))
    {
      uint64_t v120 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(buf, "DirectCcaError[15]"))
    {
      uint64_t v116 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(buf, "DirectCcaError[16]"))
    {
      uint64_t v112 = sub_1000BE984(4, uint64);
    }

LABEL_269:
                                    sub_100147B4C(a3, &__p);
                                    uint64_t v98 = sub_1000A36C4((uint64_t **)(a1 + 64), a2);
                                    sub_100014D08((uint64_t)v98, (__int128 *)&__p);
                                    uint64_t v99 = (char *)sub_1000A36C4((uint64_t **)(a1 + 64), a2);
                                    if (v99[23] >= 0) {
                                      uint64_t v100 = v99;
                                    }
                                    else {
                                      uint64_t v100 = *(char **)v99;
                                    }
                                    sub_10010FFCC("vendor:NCP:RSSI:Offset", v100);
                                    uint64_t v101 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                                    if (v101)
                                    {
                                      if (sub_10015A058(6) && os_log_type_enabled(v101, OS_LOG_TYPE_INFO))
                                      {
                                        int v102 = (char)a2->__r_.__value_.__s.__size_;
                                        uint64_t v103 = (std::string *)a2->__r_.__value_.__r.__words[0];
                                        sub_100147B4C(a3, &__p);
                                        uint64_t v104 = (char *)(v102 >= 0 ? a2 : v103);
                                        uint64_t v105 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
                                             ? &__p
                                             : (std::string *)__p.__r_.__value_.__r.__words[0];
                                        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
                                        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v104;
                                        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
                                        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v105;
                                        _os_log_impl( (void *)&_mh_execute_header,  v101,  OS_LOG_TYPE_INFO,  "Saved Vendor Settings property to restore it later: %s, value %s",  (uint8_t *)&buf,  0x16u);
                                      }
                                    }

                                    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                    {
                                      sub_1001FB53C();
                                    }

                                    uint64_t v122 = *(void *)(a1 + 8);
                                    sub_1000798B4((uint64_t)&__p, v122);
                                    uint64_t v123 = sub_10007993C((uint64_t)&__p, a4);
                                    sub_1001472F4(a3);
                                    sub_100034C60("Ciic", (uint64_t *)&buf, 0x80u);
                                    uint64_t v124 = sub_100079A40(v123, (uint64_t)&buf);
                                    sub_10007A86C(v124, &v184);
                                    sub_10004E9A4(v122, &v184);
                                    goto LABEL_258;
                                  }

LABEL_449:
                              uint64_t v177 = *(void *)(a1 + 8);
                              sub_1000798B4((uint64_t)&__p, v177);
                              uint64_t v178 = sub_10007993C((uint64_t)&__p, a4);
                              sub_1001472F4(a3);
                              sub_100034C60("CiiL", (uint64_t *)&buf, 0x80u);
                              uint64_t v179 = sub_100079A40(v178, (uint64_t)&buf);
                              sub_10007A86C(v179, &v184);
                              sub_10004E9A4(v177, &v184);
                              goto LABEL_258;
                            }

LABEL_230:
                        memset(&buf, 0, sizeof(buf));
                        sub_1000A36F8(&buf, (uint64_t)a3);
                        sub_100034C60("Cii", &v184, 0x80u);
                        sub_100033680(&__p, (uint64_t)&buf);
                        sub_100034D38((uint64_t)&v184, (uint64_t *)&__p, 68);
                        if (__p.__r_.__value_.__r.__words[0]) {
                          (*(void (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 8LL))(__p.__r_.__value_.__r.__words[0]);
                        }
                        goto LABEL_251;
                      }

LABEL_219:
                      sub_100147B4C(a3, &__p);
                      std::string v70 = sub_1000A36C4((uint64_t **)(a1 + 64), a2);
                      sub_100014D08((uint64_t)v70, (__int128 *)&__p);
                      std::string v71 = (char *)sub_1000A36C4((uint64_t **)(a1 + 64), a2);
                      if (v71[23] >= 0) {
                        unsigned int v72 = v71;
                      }
                      else {
                        unsigned int v72 = *(char **)v71;
                      }
                      sub_10010FFCC("vendor:ifs:ackturnaround:enable", v72);
                      uint64_t v73 = *(void *)(a1 + 8);
                      sub_1000798B4((uint64_t)&__p, v73);
                      uint64_t v74 = sub_10007993C((uint64_t)&__p, a4);
                      sub_1001472F4(a3);
                      sub_100034C60("CiiC", (uint64_t *)&buf, 0x80u);
                      uint64_t v75 = sub_100079A40(v74, (uint64_t)&buf);
                      sub_10007A86C(v75, &v184);
                      sub_10004E9A4(v73, &v184);
                      goto LABEL_258;
                    }

    __break(0x550Cu);
  }

LABEL_213:
                    sub_100147B4C(a3, &__p);
                    uint64_t v64 = sub_1000A36C4((uint64_t **)(a1 + 64), a2);
                    sub_100014D08((uint64_t)v64, (__int128 *)&__p);
                    uint64_t v65 = (char *)sub_1000A36C4((uint64_t **)(a1 + 64), a2);
                    if (v65[23] >= 0) {
                      int v66 = v65;
                    }
                    else {
                      int v66 = *(char **)v65;
                    }
                    sub_10010FFCC("vendor:ifs:ackturnaround:mode", v66);
                    uint64_t v67 = *(void *)(a1 + 8);
                    sub_1000798B4((uint64_t)&__p, v67);
                    uint64_t v68 = sub_10007993C((uint64_t)&__p, a4);
                    sub_1001472F4(a3);
                    sub_100034C60("CiiC", (uint64_t *)&buf, 0x80u);
                    uint64_t v69 = sub_100079A40(v68, (uint64_t)&buf);
                    sub_10007A86C(v69, &v184);
                    sub_10004E9A4(v67, &v184);
                    goto LABEL_258;
                  }

LABEL_202:
                uint64_t v52 = *(void *)(a1 + 8);
                sub_1000798B4((uint64_t)&__p, v52);
                uint64_t v53 = sub_10007993C((uint64_t)&__p, a4);
                sub_1001478B8(a3);
                sub_100034C60("Ciib", (uint64_t *)&buf, 0x80u);
                uint64_t v54 = sub_100079A40(v53, (uint64_t)&buf);
                sub_10007A86C(v54, &v184);
                sub_10004E9A4(v52, &v184);
                goto LABEL_258;
              }

LABEL_196:
              sub_100147B4C(a3, &__p);
              std::string v46 = sub_1000A36C4((uint64_t **)(a1 + 64), a2);
              sub_100014D08((uint64_t)v46, (__int128 *)&__p);
              unsigned __int8 v47 = (char *)sub_1000A36C4((uint64_t **)(a1 + 64), a2);
              if (v47[23] >= 0) {
                char v48 = v47;
              }
              else {
                char v48 = *(char **)v47;
              }
              sub_10010FFCC("vendor:csma:cca:idleattempts", v48);
              uint64_t v49 = *(void *)(a1 + 8);
              sub_1000798B4((uint64_t)&__p, v49);
              uint64_t v50 = sub_10007993C((uint64_t)&__p, a4);
              sub_1001472F4(a3);
              sub_100034C60("CiiC", (uint64_t *)&buf, 0x80u);
              uint64_t v51 = sub_100079A40(v50, (uint64_t)&buf);
              sub_10007A86C(v51, &v184);
              sub_10004E9A4(v49, &v184);
              goto LABEL_258;
            }

            goto LABEL_185;
          }

                    __break(0x550Cu);
                  }
                }
              }
            }
          }
        }
      }
    }

    __break(0x5500u);
    goto LABEL_196;
  }

  uint64_t v5 = sub_1000160F4("com.apple.wpantund.awd", "default");
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_ERROR)) {
    sub_10020D74C();
  }
  uint64_t v7 = 1LL;
LABEL_194:

  return v7;
}

LABEL_166:
          sub_100147B4C(a3, &__p);
          uint64_t v32 = sub_1000A36C4((uint64_t **)(a1 + 64), a2);
          sub_100014D08((uint64_t)v32, (__int128 *)&__p);
          unsigned int v33 = (char *)sub_1000A36C4((uint64_t **)(a1 + 64), a2);
          if (v33[23] >= 0) {
            int v34 = v33;
          }
          else {
            int v34 = *(char **)v33;
          }
          sub_10010FFCC("vendor:coex:enabled", v34);
          uint64_t v35 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (!v35)
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              sub_1001FB53C();
            }
            goto LABEL_192;
          }

          if (sub_10015A058(6) && os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
          {
            int v36 = (char)a2->__r_.__value_.__s.__size_;
            unsigned __int16 v37 = (std::string *)a2->__r_.__value_.__r.__words[0];
            sub_100147B4C(a3, &__p);
            unsigned int v38 = (char *)(v36 >= 0 ? a2 : v37);
            char v39 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v38;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v39;
            _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_INFO,  "Saved Vendor Settings property to restore it later: %s, value %s",  (uint8_t *)&buf,  0x16u);
          }

LABEL_192:
          uint64_t v43 = *(void *)(a1 + 8);
          sub_1000798B4((uint64_t)&__p, v43);
          uint64_t v44 = sub_10007993C((uint64_t)&__p, a4);
          sub_1001472F4(a3);
          sub_100034C60("CiiC", (uint64_t *)&buf, 0x80u);
          uint64_t v45 = sub_100079A40(v44, (uint64_t)&buf);
          sub_10007A86C(v45, &v184);
          sub_10004E9A4(v43, &v184);
          goto LABEL_193;
        }

        goto LABEL_150;
      }

        __break(0x5500u);
        return result;
      case 7u:
        if (v14 != 2)
        {
          uint64_t v96 = 0;
          uint64_t v97 = 0;
          uint64_t v67 = 0LL;
          uint64_t result = v3 + 56;
          do
          {
            uint64_t v98 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            uint64_t v99 = v98 + 1;
            if (v98 == -1) {
              goto LABEL_192;
            }
            if (v99 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              goto LABEL_185;
            }
            uint64_t v100 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v98);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v99;
            v67 |= (unint64_t)(v100 & 0x7F) << v96;
            if ((v100 & 0x80) == 0) {
              goto LABEL_186;
            }
            v96 += 7;
            uint64_t v11 = v97++ >= 9;
          }

          while (!v11);
LABEL_184:
          uint64_t v101 = 0LL;
          goto LABEL_189;
        }

        uint64_t result = PBReaderPlaceMark(a2, v102);
        if (!(_DWORD)result) {
          return result;
        }
        while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
             && !*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        {
          uint64_t v58 = 0;
          std::string v59 = 0;
          uint64_t v60 = 0LL;
          while (1)
          {
            uint64_t v61 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            uint64_t v62 = v61 + 1;
            if (v61 == -1) {
              goto LABEL_192;
            }
            if (v62 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            uint64_t v63 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v61);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v62;
            v60 |= (unint64_t)(v63 & 0x7F) << v58;
            if ((v63 & 0x80) == 0) {
              goto LABEL_131;
            }
            v58 += 7;
            uint64_t v11 = v59++ >= 9;
            if (v11)
            {
              uint64_t v64 = 0LL;
              goto LABEL_134;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_131:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v64 = 0LL;
          }
          else {
            uint64_t v64 = v60;
          }
LABEL_134:
          uint64_t result = PBRepeatedUInt32Add(v3 + 56, v64);
        }

        goto LABEL_135;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if ((result & 1) != 0) {
          continue;
        }
        return 0LL;
    }
  }

                  uint64_t v67 = sub_1000BE984(4, uint64);
                  goto LABEL_193;
                }

LABEL_132:
    uint64_t v13 = *(void *)(a1 + 8);
    sub_1000798B4((uint64_t)&__p, v13);
    uint64_t v14 = sub_10007993C((uint64_t)&__p, a4);
    sub_1001472F4(a3);
    sub_100034C60("CiiL", (uint64_t *)&buf, 0x80u);
    uint64_t v15 = sub_100079A40(v14, (uint64_t)&buf);
    sub_10007A86C(v15, &v184);
    sub_10004E9A4(v13, &v184);
LABEL_193:
    sub_10000F9EC(v185);
    p_std::string buf = &buf;
    sub_100006F6C((void ***)&p_buf);
    sub_10004BF94(v190);
    sub_10004BED0(v189);
    sub_10004BEF8(v188);
    sub_100006E7C(&__p.__r_.__value_.__l.__size_);
    return;
  }

  uint64_t v8 = (const char *)a2->__r_.__value_.__r.__words[0];
  if (!strcasecmp(a2->__r_.__value_.__l.__data_, "vendor:pmu_wake:start")
    || !strcasecmp(v8, "vendor:uart:disable:start"))
  {
    goto LABEL_132;
  }

  if (!strcasecmp(v8, "vendor:coex:rx_mode")) {
    goto LABEL_134;
  }
  if (!strcasecmp(v8, "vendor:coex:tx_mode"))
  {
LABEL_150:
    sub_100147B4C(a3, &__p);
    uint64_t v24 = sub_1000A36C4((uint64_t **)(a1 + 64), a2);
    sub_100014D08((uint64_t)v24, (__int128 *)&__p);
    unsigned int v25 = (char *)sub_1000A36C4((uint64_t **)(a1 + 64), a2);
    if (v25[23] >= 0) {
      unsigned int v26 = v25;
    }
    else {
      unsigned int v26 = *(char **)v25;
    }
    sub_10010FFCC("vendor:coex:tx_mode", v26);
    __int128 v27 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (!v27)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_1001FB53C();
      }
      goto LABEL_192;
    }

    int v28 = (char)a2->__r_.__value_.__s.__size_;
    __int128 v29 = (std::string *)a2->__r_.__value_.__r.__words[0];
    sub_100147B4C(a3, &__p);
    char v30 = (char *)(v28 >= 0 ? a2 : v29);
    char v31 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v31;
    _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_INFO,  "Saved Vendor Settings property to restore it later: %s, value %s",  (uint8_t *)&buf,  0x16u);
LABEL_181:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_192;
  }

  if (!strcasecmp(v8, "vendor:coex:enabled")) {
    goto LABEL_166;
  }
  if (!strcasecmp(v8, "vendor:fem:enabled") || !strcasecmp(v8, "vendor:csma:min:be"))
  {
LABEL_185:
    uint64_t v40 = *(void *)(a1 + 8);
    sub_1000798B4((uint64_t)&__p, v40);
    uint64_t v41 = sub_10007993C((uint64_t)&__p, a4);
    sub_1001472F4(a3);
    sub_100034C60("CiiC", (uint64_t *)&buf, 0x80u);
    uint64_t v42 = sub_100079A40(v41, (uint64_t)&buf);
    sub_10007A86C(v42, &v184);
    sub_10004E9A4(v40, &v184);
    goto LABEL_193;
  }

  if (!strcasecmp(v8, "vendor:csma:max:be") || !strcasecmp(v8, "vendor:csma:max:backoffs")) {
    goto LABEL_131;
  }
  if (!strcasecmp(v8, "vendor:csma:cca:idleattempts")) {
    goto LABEL_196;
  }
  if (!strcasecmp(v8, "vendor:csma:sliding:window:enabled")) {
    goto LABEL_202;
  }
  if (!strcasecmp(v8, "vendor:ifs:mode") || !strcasecmp(v8, "vendor:cntr:stats:reset")) {
    goto LABEL_131;
  }
  if (!strcasecmp(v8, "vendor:ifs:min:sifs")
    || !strcasecmp(v8, "vendor:ifs:min:lifs")
    || !strcasecmp(v8, "vendor:ifs:retx:min:sifs")
    || !strcasecmp(v8, "vendor:ifs:retx:min:lifs"))
  {
    goto LABEL_205;
  }

  if (!strcasecmp(v8, "vendor:ifs:ackturnaround:time")) {
    goto LABEL_207;
  }
  if (!strcasecmp(v8, "vendor:ifs:ackturnaround:mode")) {
    goto LABEL_213;
  }
  if (!strcasecmp(v8, "vendor:ifs:ackturnaround:enable")) {
    goto LABEL_219;
  }
  if (!strcasecmp(v8, "vendor:coex:counters") || !strcasecmp(v8, "vendor:radio:counters")) {
    goto LABEL_449;
  }
  if (!strcasecmp(v8, "vendor:radio:stats") || !strcasecmp(v8, "vendor:unsol:filternotif")) {
    goto LABEL_131;
  }
  if (!strcasecmp(v8, "vendor:last:host:wake:reason")) {
    goto LABEL_449;
  }
  if (!strcasecmp(v8, "vendor:deepsleep:filter:list")) {
    goto LABEL_230;
  }
  if (!strcasecmp(v8, "vendor:deepsleep:loglevel")) {
    goto LABEL_233;
  }
  if (!strcasecmp(v8, "vendor:deepsleep:region:loglevels")) {
    goto LABEL_249;
  }
  if (!strcasecmp(v8, "vendor:assert")) {
    goto LABEL_449;
  }
  if (!strcasecmp(v8, "vendor:assigned:hw:mac")) {
    goto LABEL_259;
  }
  if (!strcasecmp(v8, "vendor:power:limit:table:active:id")) {
    goto LABEL_131;
  }
  if (!strcasecmp(v8, "vendor:power:mapping:table:power:test")
    || !strcasecmp(v8, "vendor:power:mapping:set:to:default"))
  {
    goto LABEL_264;
  }

  if (!strcasecmp(v8, "vendor:NCP:RSSI:Offset")) {
    goto LABEL_269;
  }
  if (!strcasecmp(v8, "vendor:coex:grant:timeout")) {
    goto LABEL_285;
  }
  if (!strcasecmp(v8, "vendor:coex:RxThrottle:RxReq:TxAckOnGrant")) {
    goto LABEL_301;
  }
  if (!strcasecmp(v8, "vendor:coex:RxThrottle:RxReq:TxAlwaysAck")) {
    goto LABEL_320;
  }
  if (!strcasecmp(v8, "vendor:coex:RxThrottle:NoRxReq:TxAckOnUnsolGrant"))
  {
LABEL_339:
    sub_100147B4C(a3, &__p);
    uint64_t v136 = sub_1000A36C4((uint64_t **)(a1 + 64), a2);
    sub_100014D08((uint64_t)v136, (__int128 *)&__p);
    uint64_t v137 = (char *)sub_1000A36C4((uint64_t **)(a1 + 64), a2);
    if (v137[23] >= 0) {
      uint64_t v138 = v137;
    }
    else {
      uint64_t v138 = *(char **)v137;
    }
    sub_10010FFCC("vendor:coex:RxThrottle:NoRxReq:TxAckOnUnsolGrant", v138);
    uint64_t v139 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (!v139)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_1001FB53C();
      }
      goto LABEL_257;
    }

    int v140 = (char)a2->__r_.__value_.__s.__size_;
    uint64_t v141 = (std::string *)a2->__r_.__value_.__r.__words[0];
    sub_100147B4C(a3, &__p);
    uint64_t v142 = (char *)(v140 >= 0 ? a2 : v141);
    uint64_t v143 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v142;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v143;
    _os_log_impl( (void *)&_mh_execute_header,  v139,  OS_LOG_TYPE_INFO,  "Saved Vendor Settings property to restore it later: %s, value %s",  (uint8_t *)&buf,  0x16u);
LABEL_443:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_257;
  }

  if (!strcasecmp(v8, "vendor:coex:RxThrottle:Timeout")) {
    goto LABEL_358;
  }
  if (!strcasecmp(v8, "vendor:power:mapping:table:clear") || !strcasecmp(v8, "vendor:coex:histograms")) {
    goto LABEL_131;
  }
  if (!strcasecmp(v8, "vendor:power:mapping:table:flash:data")) {
    goto LABEL_385;
  }
  if (!strcasecmp(v8, "vendor:logging:mapping:table"))
  {
LABEL_390:
    memset(&buf, 0, sizeof(buf));
    sub_1000A39E0(&buf, a3);
    sub_100034C60("Cii", &v184, 0x80u);
    sub_100033680(&__p, (uint64_t)&buf);
    sub_100034D38((uint64_t)&v184, (uint64_t *)&__p, 68);
    if (__p.__r_.__value_.__r.__words[0]) {
      (*(void (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 8LL))(__p.__r_.__value_.__r.__words[0]);
    }
LABEL_251:
    uint64_t v84 = *(void *)(a1 + 8);
    sub_1000798B4((uint64_t)&__p, v84);
    uint64_t v85 = sub_10007993C((uint64_t)&__p, a4);
    uint64_t v86 = sub_100079A40(v85, (uint64_t)&v184);
    sub_10007A86C(v86, (uint64_t *)&p_buf);
    sub_10004E9A4(v84, (uint64_t *)&p_buf);
    sub_10000F9EC(&v183);
    sub_1000454AC(&__p);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v184;
    sub_100006F6C((void ***)&__p);
LABEL_252:
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
    p_p = &__p;
LABEL_253:
    sub_100006F6C((void ***)p_p);
    return;
  }

  if (!strcasecmp(v8, "vendor:fault:info")) {
    goto LABEL_393;
  }
  if (!strcasecmp(v8, "vendor:ncp:buffer:thresh"))
  {
LABEL_394:
    sub_100147B4C(a3, &__p);
    uint64_t v156 = sub_1000A36C4((uint64_t **)(a1 + 64), a2);
    sub_100014D08((uint64_t)v156, (__int128 *)&__p);
    uint64_t v157 = (char *)sub_1000A36C4((uint64_t **)(a1 + 64), a2);
    if (v157[23] >= 0) {
      uint64_t v158 = v157;
    }
    else {
      uint64_t v158 = *(char **)v157;
    }
    sub_10010FFCC("vendor:ncp:buffer:thresh", v158);
    uint64_t v159 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v159)
    {
      if (sub_10015A058(6) && os_log_type_enabled(v159, OS_LOG_TYPE_INFO))
      {
        int v160 = (char)a2->__r_.__value_.__s.__size_;
        uint64_t v161 = (std::string *)a2->__r_.__value_.__r.__words[0];
        sub_100147B4C(a3, &__p);
        uint64_t v162 = (char *)(v160 >= 0 ? a2 : v161);
        uint64_t v163 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v162;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v163;
        _os_log_impl( (void *)&_mh_execute_header,  v159,  OS_LOG_TYPE_INFO,  "Saved Vendor Settings property to restore it later: %s, value %s",  (uint8_t *)&buf,  0x16u);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    unsigned int v164 = sub_1001472F4(a3);
    uint64_t v165 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v165)
    {
      if (sub_10015A058(6) && os_log_type_enabled(v165, OS_LOG_TYPE_INFO))
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = 67109376;
        HIDWORD(__p.__r_.__value_.__r.__words[0]) = HIWORD(v164);
        LOWORD(__p.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (unsigned __int16)v164;
        _os_log_impl( (void *)&_mh_execute_header,  v165,  OS_LOG_TYPE_INFO,  "Set: Low Buffer Usage threshold[%u], High Buffer Usage threshold[%u]",  (uint8_t *)&__p,  0xEu);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    sub_100034C60("CiiSS", (uint64_t *)&buf, 0x80u);
    uint64_t v166 = *(void *)(a1 + 8);
    sub_1000798B4((uint64_t)&__p, v166);
    uint64_t v167 = sub_10007993C((uint64_t)&__p, a4);
    uint64_t v168 = sub_100079A40(v167, (uint64_t)&buf);
    sub_10007A86C(v168, &v184);
    sub_10004E9A4(v166, &v184);
    goto LABEL_421;
  }

  if (!strcasecmp(v8, "vendor:MAC:packet:SizeHistogram")
    || !strcasecmp(v8, "vendor:MAC:packet:LQIHistogram")
    || !strcasecmp(v8, "vendor:MAC:packet:ErrorHistogram")
    || !strcasecmp(v8, "vendor:MAC:packet:RSSIHistogram")
    || !strcasecmp(v8, "vendor:joiner:RSSIHistogram")
    || !strcasecmp(v8, "vendor:cca:energydetected:histogram")
    || !strcasecmp(v8, "vendor:csma:backoff:histogram")
    || !strcasecmp(v8, "vendor:linkloss:counters"))
  {
    goto LABEL_131;
  }

  if (!strcasecmp(v8, "vendor:mle:adv:tx:num")) {
    goto LABEL_428;
  }
  if (!strcasecmp(v8, "vendor:neighbor:count:histogram")) {
    goto LABEL_131;
  }
  if (!strcasecmp(v8, "vendor:ncp:logsdropped:filter:threshold")
    || !strcasecmp(v8, "vendor:ncp:logsdropped:filter:timeout:ms")
    || !strcasecmp(v8, "vendor:ncp:logsdropped:counter")
    || !strcasecmp(v8, "vendor:min:mac:interframedelay"))
  {
    goto LABEL_449;
  }

  if (!strcasecmp(v8, "vendor:coex:csl:reqahead:timeinus")
    || !strcasecmp(v8, "vendor:csl:tx:schedframe:reqahead:timeinus"))
  {
    goto LABEL_205;
  }

  if (!strcasecmp(v8, "vendor:tx:application:pkt:counters")) {
    goto LABEL_131;
  }
LABEL_64:
  if (!strcasecmp(v8, "vendor:openthread:radio:counters")) {
    goto LABEL_449;
  }
  uint64_t v9 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v9)
  {
    if (sub_10015A058(3))
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_10020B88C();
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  sub_100006FF8(a4);
}

          uint64_t result = PBReaderRecallMark(a2, v108);
          continue;
        }

        uint64_t v96 = 0;
        uint64_t v97 = 0;
        uint64_t v98 = 0LL;
        uint64_t result = v3 + 8;
        while (1)
        {
          uint64_t v99 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          uint64_t v100 = v99 + 1;
          if (v99 == -1) {
            break;
          }
          if (v100 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            goto LABEL_191;
          }
          uint64_t v101 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v99);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v100;
          v98 |= (unint64_t)(v101 & 0x7F) << v96;
          if ((v101 & 0x80) == 0) {
            goto LABEL_192;
          }
          v96 += 7;
          uint64_t v11 = v97++ >= 9;
          if (v11) {
            goto LABEL_146;
          }
        }

void sub_1000A2DAC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void **p_p, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void *__p, uint64_t a28, int a29, __int16 a30, char a31, char a32, uint64_t a33, __int128 buf)
{
  p_p = &__p;
  sub_100006F6C(&p_p);
  sub_1000454AC(&buf);
  if (a2 == 2)
  {
    char v39 = __cxa_begin_catch(a1);
    uint64_t v40 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v40)
    {
      if (sub_10015A058(3) && os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        uint64_t v41 = (*(uint64_t (**)(void *))(*(void *)v39 + 16LL))(v39);
        LODWORD(buf) = 136315394;
        *(void *)((char *)&buf + 4) = v35;
        WORD6(buf) = 2080;
        *(void *)((char *)&buf + 14) = v41;
        _os_log_error_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_ERROR,  "property_set_value: Bad type for property %s (%s)",  (uint8_t *)&buf,  0x16u);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }
  }

  else
  {
    if (a2 != 1) {
      _Unwind_Resume(a1);
    }
    uint64_t v42 = __cxa_begin_catch(a1);
    uint64_t v43 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v43)
    {
      if (sub_10015A058(3) && os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
      {
        uint64_t v44 = (*(uint64_t (**)(void *))(*(void *)v42 + 16LL))(v42);
        LODWORD(buf) = 136315394;
        *(void *)((char *)&buf + 4) = v35;
        WORD6(buf) = 2080;
        *(void *)((char *)&buf + 14) = v44;
        _os_log_error_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_ERROR,  "property_set_value: Invalid argument for property %s (%s)",  (uint8_t *)&buf,  0x16u);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }
  }

  sub_100006FF8(v34);
  __cxa_end_catch();
  JUMPOUT(0x1000A0504LL);
}

void *sub_1000A36C4(uint64_t **a1, std::string *a2)
{
  uint64_t v3 = a2;
  return sub_1000A67B4(a1, (const void **)&a2->__r_.__value_.__l.__data_, (uint64_t)&unk_100227844, &v3) + 7;
}

uint64_t sub_1000A36F8(void *a1, uint64_t a2)
{
  a1[1] = *a1;
  uint64_t v3 = (uint64_t *)sub_1000A5B8C(a2);
  sub_1000A5C58(&v8, v3);
  uint64_t v4 = v8;
  for (i = v8; i != v9; uint64_t v4 = i)
  {
    sub_100034C60("L", (uint64_t *)v6, *((_DWORD *)v4 + 7));
    sub_1000350D0((uint64_t)a1, v6);
    uint64_t v10 = v6;
    sub_100006F6C((void ***)&v10);
    sub_10000B338((uint64_t)&i);
  }

  return sub_10000D0D4((uint64_t)&v8);
}

void sub_1000A37AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  *(void *)(v3 - 40) = va;
  sub_100006F6C((void ***)(v3 - 40));
  sub_10000D0D4((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A37D8(void *a1, uint64_t a2)
{
  a1[1] = *a1;
  uint64_t v3 = (uint64_t *)sub_1000A5EDC(a2);
  sub_1000A5FA8(&v8, v3);
  uint64_t v4 = v8;
  for (i = v8; i != v9; uint64_t v4 = i)
  {
    sub_100034C60("t(CC)", (uint64_t *)v6, v4[25]);
    sub_1000350D0((uint64_t)a1, v6);
    uint64_t v10 = v6;
    sub_100006F6C((void ***)&v10);
    sub_10000B338((uint64_t)&i);
  }

  return sub_10000D0D4((uint64_t)&v8);
}

void sub_1000A3890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  *(void *)(v3 - 40) = va;
  sub_100006F6C((void ***)(v3 - 40));
  sub_10000D0D4((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1000A38BC(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1000A5B28(a1);
  sub_10000CBF8(&v6, v3);
  a2[1] = *a2;
  sub_100034C60("S", (uint64_t *)v5, (_DWORD)v7 - (_DWORD)v6);
  sub_1000350D0((uint64_t)a2, v5);
  uint64_t v8 = v5;
  sub_100006F6C((void ***)&v8);
  for (int i = v6; i != v7; ++i)
  {
    sub_100034C60("c", (uint64_t *)v5, *i);
    sub_1000350D0((uint64_t)a2, v5);
    uint64_t v8 = v5;
    sub_100006F6C((void ***)&v8);
  }

  v5[0] = (char *)&v6;
  sub_100006F6C((void ***)v5);
}

void sub_1000A399C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v14 - 40) = v13;
  sub_100006F6C((void ***)(v14 - 40));
  a10 = (void **)&a13;
  sub_100006F6C(&a10);
  _Unwind_Resume(a1);
}

void sub_1000A39E0(void *a1, uint64_t *a2)
{
  uint64_t v3 = 0LL;
  a1[1] = *a1;
  int64x2_t v4 = (int64x2_t)xmmword_100227B10;
  int64x2_t v5 = (int64x2_t)xmmword_100227B20;
  uint64x2_t v6 = (uint64x2_t)vdupq_n_s64(0x22uLL);
  int64x2_t v7 = vdupq_n_s64(4uLL);
  do
  {
    int32x4_t v8 = (int32x4_t)vcgtq_u64(v6, (uint64x2_t)v5);
    *(int32x2_t *)v8.i8 = vmovn_s64((int64x2_t)v8);
    if ((vmovn_s32(v8).u8[0] & 1) != 0) {
      *((_BYTE *)&v31[1] + v3 + 6) = 0;
    }
    int32x4_t v9 = (int32x4_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x22uLL), (uint64x2_t)v5);
    *(int32x2_t *)v9.i8 = vmovn_s64((int64x2_t)v9);
    if ((vmovn_s32(v9).i8[2] & 1) != 0) {
      *((_BYTE *)&v31[1] + v3 + 7) = 0;
    }
    int64x2_t v10 = (int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x22uLL), (uint64x2_t)v4);
    int64x2_t v11 = (int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x22uLL), (uint64x2_t)v4);
    v3 += 4LL;
    int64x2_t v4 = vaddq_s64(v4, v7);
    int64x2_t v5 = vaddq_s64(v5, v7);
  }

  while (v3 != 36);
  sub_100147B4C(a2, &__str);
  uint64_t v27 = 0LL;
  unint64_t v28 = 0LL;
  unint64_t v29 = 0LL;
  std::string::size_type v12 = std::string::find(&__str, 32, 0LL);
  if (v12 == -1LL)
  {
    std::string::size_type v14 = 0LL;
  }

  else
  {
    std::string::size_type v13 = v12;
    std::string::size_type v14 = 0LL;
    do
    {
      if (v13 < v14) {
        __break(0x5515u);
      }
      std::string::basic_string(&v26, &__str, v14, v13 - v14, (std::allocator<char> *)v31);
      uint64_t v15 = (_OWORD *)v28;
      if (v28 >= v29)
      {
        unint64_t v28 = sub_1000A62B8(&v27, (__int128 *)&v26);
      }

      else
      {
        __int128 v16 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
        *(void *)(v28 + 16) = v26.__r_.__value_.__l.__cap_;
        *uint64_t v15 = v16;
        unint64_t v28 = (unint64_t)v15 + 24;
      }

      std::string::size_type v14 = v13 + 1;
      std::string::size_type v13 = std::string::find(&__str, 32, v13 + 1);
    }

    while (v13 != -1LL);
  }

  std::string::basic_string(&v26, &__str, v14, ~v14, (std::allocator<char> *)v31);
  unsigned int v17 = (_OWORD *)v28;
  if (v28 >= v29)
  {
    uint64_t v19 = sub_1000A62B8(&v27, (__int128 *)&v26);
    unint64_t v28 = v19;
    if ((char)v26.__r_.__value_.__s.__size_ < 0)
    {
      operator delete(v26.__r_.__value_.__l.__data_);
      uint64_t v19 = v28;
    }
  }

  else
  {
    __int128 v18 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
    *(void *)(v28 + 16) = v26.__r_.__value_.__l.__cap_;
    *unsigned int v17 = v18;
    uint64_t v19 = (uint64_t)v17 + 24;
    unint64_t v28 = (unint64_t)v17 + 24;
  }

  if (0xAAAAAAAAAAAAAAABLL * ((v19 - v27) >> 3) >= 0x22) {
    unint64_t v20 = 34LL;
  }
  else {
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v27) >> 3);
  }
  if ((_DWORD)v20)
  {
    unint64_t v21 = 0LL;
    do
    {
      uint64_t v22 = (const std::string *)sub_1000A627C(&v27, v21);
      *((_BYTE *)&v31[1] + v21 + 6) = std::stoi(v22, 0LL, 10);
      unint64_t v23 = v21 + 1;
      uint64_t v24 = (const std::string *)sub_1000A627C(&v27, v21 + 1);
      *((_BYTE *)&v31[1] + v21 + 7) = std::stoi(v24, 0LL, 10);
      v21 += 2LL;
    }

    while (v23 + 1 < v20);
  }

  sub_100034C60("C", (uint64_t *)&v26, v20 >> 1);
  sub_1000350D0((uint64_t)a1, &v26.__r_.__value_.__l.__data_);
  v31[0] = (void **)&v26;
  sub_100006F6C(v31);
  for (uint64_t i = 0LL; i != 34; i += 2LL)
  {
    sub_100034C60("CC", (uint64_t *)&v26, *((unsigned __int8 *)&v31[1] + i + 6));
    sub_1000350D0((uint64_t)a1, &v26.__r_.__value_.__l.__data_);
    v31[0] = (void **)&v26;
    sub_100006F6C(v31);
  }

  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  sub_1000A66F0((void ***)&v26);
}

void sub_1000A3D40( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  std::string __p = &a17;
  sub_1000A66F0((void ***)&__p);
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000A3DC4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  else {
    int64x2_t v5 = *(const char **)a2;
  }
  strcasecmp(v5, "__CustomKeyHere__");
  return sub_100006FF8(a4);
}

uint64_t sub_1000A3E0C()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

void sub_1000A3E14(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  int64x2_t v7 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v7)
  {
    int32x4_t v8 = v7;
    if (sub_10015A058(6) && os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      sub_100147B4C(a3, &__p);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315650;
      std::string::size_type v12 = a4;
      __int16 v13 = 1024;
      int v14 = a2;
      __int16 v15 = 2080;
      __int128 v16 = p_p;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "Restored Vendor Settings property: %s with status: %d, value: %s",  buf,  0x1Cu);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

void *sub_1000A3F5C(void *a1)
{
  uint64_t v2 = "default";
  uint64_t v3 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v3)
  {
    if (sub_10015A058(6) && os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Restoring Saved Vendor properties to NCP",  (uint8_t *)&buf,  2u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  if (a1[10])
  {
    *(void *)uint64_t v58 = a1[8];
    while (*(void **)v58 != a1 + 9)
    {
      int64x2_t v4 = (os_log_s *)sub_1000160F4("com.apple.wpantund", v2);
      if (v4)
      {
        if (sub_10015A058(6) && os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
        {
          int64x2_t v5 = v2;
          uint64x2_t v6 = (void *)(*(void *)v58 + 32LL);
          sub_100071608(&v48, (const std::string *)(*(void *)v58 + 56LL));
          sub_100147B4C(&v48, &buf);
          p_std::string buf = &buf;
          if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          LODWORD(v65.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)v65.__r_.__value_.__r.__words + 4) = (std::string::size_type)v6;
          WORD2(v65.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v65.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_buf;
          _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Saved Vendor Settings property %s, value %s",  (uint8_t *)&v65,  0x16u);
          uint64_t v2 = v5;
          if (v48) {
            (*(void (**)(uint64_t))(*(void *)v48 + 8LL))(v48);
          }
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"com.apple.wpantund.ncp";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v2;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging Module is not defined for SubSystem: %s, Category: %s",  (uint8_t *)&buf,  0x16u);
      }

      sub_10000B338((uint64_t)v58);
    }
  }

  else
  {
    int32x4_t v8 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v8)
    {
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }
  }

  if (a1[10])
  {
    for (uint64_t i = a1[8]; (void *)i != a1 + 9; sub_10000B338((uint64_t)&i))
    {
      int32x4_t v9 = (os_log_s *)sub_1000160F4("com.apple.wpantund", v2);
      if (v9)
      {
        if (sub_10015A058(6) && os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          int64x2_t v10 = (void *)(i + 32);
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Attempting to set property %s",  (uint8_t *)&buf,  0xCu);
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"com.apple.wpantund.ncp";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v2;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging Module is not defined for SubSystem: %s, Category: %s",  (uint8_t *)&buf,  0x16u);
      }

      std::string::basic_string(&v65, (const std::string *)(i + 32));
      sub_100071608(&v54, (const std::string *)(i + 56));
      std::string::basic_string(&__str, &v65);
      sub_1000A57A8(&__str, (std::string::size_type)sub_1000A3E14, 0LL, (uint64_t)a1, &v51);
      sub_1000A5864((uint64_t *)v56, &v51);
      if (v53 < 0) {
        operator delete(__p);
      }
      if ((char)v65.__r_.__value_.__s.__size_ < 0)
      {
        int64x2_t v11 = (std::string *)v65.__r_.__value_.__r.__words[0];
        if (!strcasecmp(v65.__r_.__value_.__l.__data_, "vendor:coex:rx_mode")
          || !strcasecmp((const char *)v11, "vendor:coex:tx_mode")
          || !strcasecmp((const char *)v11, "vendor:coex:enabled"))
        {
          goto LABEL_85;
        }

        if (!strcasecmp((const char *)v11, "vendor:NCP:RSSI:Offset"))
        {
LABEL_86:
          uint64_t v21 = a1[1];
          sub_1000798B4((uint64_t)&buf, v21);
          uint64_t v22 = sub_1000798B8((uint64_t)&buf, (uint64_t *)v56);
          sub_1001472F4(&v54);
          sub_100034C60("Ciic", (uint64_t *)v58, 0x80u);
          uint64_t v23 = sub_100079A40(v22, (uint64_t)v58);
          sub_10007A86C(v23, &v48);
          sub_10004E9A4(v21, &v48);
          goto LABEL_105;
        }

        if (!strcasecmp((const char *)v11, "vendor:coex:RxThrottle:RxReq:TxAckOnGrant")
          || !strcasecmp((const char *)v11, "vendor:coex:RxThrottle:NoRxReq:TxAckOnUnsolGrant")
          || !strcasecmp((const char *)v11, "vendor:coex:RxThrottle:RxReq:TxAlwaysAck"))
        {
          goto LABEL_85;
        }

        if (!strcasecmp((const char *)v11, "vendor:ncp:buffer:thresh"))
        {
LABEL_93:
          uint64_t v24 = (os_log_s *)sub_1000160F4("com.apple.wpantund", v2);
          if (v24)
          {
            if (sub_10015A058(6) && os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
            {
              int size = (char)v65.__r_.__value_.__s.__size_;
              std::string::size_type v26 = v65.__r_.__value_.__r.__words[0];
              sub_100147B4C(&v54, &buf);
              uint64_t v27 = &v65;
              if (size < 0) {
                uint64_t v27 = (std::string *)v26;
              }
              unint64_t v28 = &buf;
              if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                unint64_t v28 = (std::string *)buf.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)uint64_t v58 = 136315394;
              *(void *)&v58[4] = v27;
              __int16 v59 = 2080;
              uint64_t v60 = v28;
              _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "Restoring it later: %s, value %s",  v58,  0x16u);
              uint64_t v2 = "default";
            }
          }

          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"com.apple.wpantund.ncp";
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v2;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging Module is not defined for SubSystem: %s, Category: %s",  (uint8_t *)&buf,  0x16u);
          }

          unsigned int v47 = sub_1001472F4(&v54);
          uint64_t v35 = (os_log_s *)sub_1000160F4("com.apple.wpantund", v2);
          if (v35)
          {
            if (sub_10015A058(6) && os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
            {
              uint64_t v36 = &v65;
              if ((v65.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                uint64_t v36 = (std::string *)v65.__r_.__value_.__r.__words[0];
              }
              LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
              WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = HIWORD(v47);
              WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
              HIDWORD(buf.__r_.__value_.__r.__words[2]) = (unsigned __int16)v47;
              _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_INFO,  "Restore :%s  Low Buffer Usage threshold[%u], High Buffer Usage threshold[%u]",  (uint8_t *)&buf,  0x18u);
            }
          }

          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"com.apple.wpantund.ncp";
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v2;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging Module is not defined for SubSystem: %s, Category: %s",  (uint8_t *)&buf,  0x16u);
          }

          sub_100034C60("CiiSS", (uint64_t *)v58, 0x80u);
          uint64_t v37 = a1[1];
          sub_1000798B4((uint64_t)&buf, v37);
          uint64_t v38 = sub_1000798B8((uint64_t)&buf, (uint64_t *)v56);
          uint64_t v39 = sub_100079A40(v38, (uint64_t)v58);
          sub_10007A86C(v39, &v48);
          sub_10004E9A4(v37, &v48);
          sub_10000F9EC(&v49);
          sub_10004BF94(v64);
          sub_10004BED0(v63);
          sub_10004BEF8(v62);
          sub_100006E7C(&buf.__r_.__value_.__l.__size_);
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
          sub_100006F6C((void ***)&buf);
          goto LABEL_106;
        }

        if (!strcasecmp((const char *)v11, "vendor:min:mac:interframedelay"))
        {
LABEL_103:
          uint64_t v29 = a1[1];
          sub_1000798B4((uint64_t)&buf, v29);
          uint64_t v30 = sub_1000798B8((uint64_t)&buf, (uint64_t *)v56);
          sub_1001472F4(&v54);
          sub_100034C60("CiiL", (uint64_t *)v58, 0x80u);
          uint64_t v31 = sub_100079A40(v30, (uint64_t)v58);
          sub_10007A86C(v31, &v48);
          sub_10004E9A4(v29, &v48);
          goto LABEL_105;
        }

        if (!strcasecmp((const char *)v11, "vendor:coex:csl:reqahead:timeinus"))
        {
LABEL_104:
          uint64_t v32 = a1[1];
          sub_1000798B4((uint64_t)&buf, v32);
          uint64_t v33 = sub_1000798B8((uint64_t)&buf, (uint64_t *)v56);
          sub_1001472F4(&v54);
          sub_100034C60("CiiS", (uint64_t *)v58, 0x80u);
          uint64_t v34 = sub_100079A40(v33, (uint64_t)v58);
          sub_10007A86C(v34, &v48);
          sub_10004E9A4(v32, &v48);
          goto LABEL_105;
        }

        if (!strcasecmp((const char *)v11, "vendor:csl:tx:schedframe:reqahead:timeinus")
          || !strcasecmp((const char *)v11, "vendor:ifs:ackturnaround:time"))
        {
LABEL_123:
          uint64_t v40 = a1[1];
          sub_1000798B4((uint64_t)&buf, v40);
          uint64_t v41 = sub_1000798B8((uint64_t)&buf, (uint64_t *)v56);
          sub_1001472F4(&v54);
          sub_100034C60("CiiS", (uint64_t *)v58, 0x80u);
          uint64_t v42 = sub_100079A40(v41, (uint64_t)v58);
          sub_10007A86C(v42, &v48);
          sub_10004E9A4(v40, &v48);
LABEL_126:
          sub_10000F9EC(&v49);
          uint64_t v57 = (void **)v58;
          sub_100006F6C(&v57);
          sub_1000454AC(&buf);
          goto LABEL_106;
        }

        std::string::size_type v12 = v11;
      }

      else
      {
        if (!strcasecmp((const char *)&v65, "vendor:coex:rx_mode")
          || !strcasecmp((const char *)&v65, "vendor:coex:tx_mode")
          || !strcasecmp((const char *)&v65, "vendor:coex:enabled"))
        {
          goto LABEL_85;
        }

        if (!strcasecmp((const char *)&v65, "vendor:coex:RxThrottle:RxReq:TxAckOnGrant")
          || !strcasecmp((const char *)&v65, "vendor:coex:RxThrottle:NoRxReq:TxAckOnUnsolGrant")
          || !strcasecmp((const char *)&v65, "vendor:coex:RxThrottle:RxReq:TxAlwaysAck"))
        {
LABEL_85:
          uint64_t v18 = a1[1];
          sub_1000798B4((uint64_t)&buf, v18);
          uint64_t v19 = sub_1000798B8((uint64_t)&buf, (uint64_t *)v56);
          sub_1001472F4(&v54);
          sub_100034C60("CiiC", (uint64_t *)v58, 0x80u);
          uint64_t v20 = sub_100079A40(v19, (uint64_t)v58);
          sub_10007A86C(v20, &v48);
          sub_10004E9A4(v18, &v48);
LABEL_105:
          sub_10000F9EC(&v49);
          uint64_t v57 = (void **)v58;
          sub_100006F6C(&v57);
          sub_10004BF94(v64);
          sub_10004BED0(v63);
          sub_10004BEF8(v62);
          sub_100006E7C(&buf.__r_.__value_.__l.__size_);
          goto LABEL_106;
        }

        if (!strcasecmp((const char *)&v65, "vendor:csl:tx:schedframe:reqahead:timeinus")
          || !strcasecmp((const char *)&v65, "vendor:ifs:ackturnaround:time"))
        {
          goto LABEL_123;
        }

        int64x2_t v11 = &v65;
        std::string::size_type v12 = &v65;
      }

      if (!strcasecmp((const char *)v12, "vendor:ifs:ackturnaround:mode")
        || !strcasecmp((const char *)v11, "vendor:ifs:ackturnaround:enable"))
      {
        uint64_t v43 = a1[1];
        sub_1000798B4((uint64_t)&buf, v43);
        uint64_t v44 = sub_1000798B8((uint64_t)&buf, (uint64_t *)v56);
        sub_1001472F4(&v54);
        sub_100034C60("CiiC", (uint64_t *)v58, 0x80u);
        uint64_t v45 = sub_100079A40(v44, (uint64_t)v58);
        sub_10007A86C(v45, &v48);
        sub_10004E9A4(v43, &v48);
        goto LABEL_126;
      }

      __int16 v13 = (os_log_s *)sub_1000160F4("com.apple.wpantund", v2);
      if (v13)
      {
        int v14 = &v65;
        if ((v65.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          int v14 = (std::string *)v65.__r_.__value_.__r.__words[0];
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v14;
        __int16 v15 = v13;
        __int128 v16 = "restore_saved_vendor_properties: Unsupported property %s";
        uint32_t v17 = 12;
        goto LABEL_129;
      }

      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"com.apple.wpantund.ncp";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v2;
        __int16 v15 = (os_log_s *)&_os_log_default;
        __int128 v16 = "Logging Module is not defined for SubSystem: %s, Category: %s";
        uint32_t v17 = 22;
LABEL_129:
        _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, v16, (uint8_t *)&buf, v17);
      }

LABEL_106:
      if (v54) {
        (*(void (**)(uint64_t))(*(void *)v54 + 8LL))(v54);
      }
    }
  }

  return sub_100006E7C(v56);
}

  uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_rxErrorRuntimeDelay));
  [v3 setObject:v54 forKey:@"rx_error_runtime_delay"];

  int32x4_t v8 = self->_has;
  if ((*(void *)&v8 & 0x100000000LL) == 0)
  {
LABEL_49:
    if ((*(_DWORD *)&v8 & 0x40000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_108;
  }

  PBDataWriterWriteUint32Field(v7, self->_rxErrorRuntimeDelay, 45LL);
  uint64x2_t v6 = self->_has;
  if ((*(void *)&v6 & 0x100000000LL) == 0)
  {
LABEL_49:
    if ((*(_DWORD *)&v6 & 0x40000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_108;
  }

  v4[33] = self->_rxErrorRuntimeDelay;
  *((void *)v4 + 31) |= 0x80000000uLL;
  uint64x2_t v6 = self->_has;
  if ((*(void *)&v6 & 0x100000000LL) == 0)
  {
LABEL_49:
    if ((*(_DWORD *)&v6 & 0x40000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_108;
  }

  *((_DWORD *)v6 + 20) = self->_rxErrorAborted;
  v6[31] |= 0x40000uLL;
  int64x2_t v10 = self->_has;
  if ((*(_DWORD *)&v10 & 0x1000000) == 0)
  {
LABEL_49:
    if ((*(_DWORD *)&v10 & 0x20000000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_108;
  }

  uint64_t v20 = 0LL;
  if ((*(_DWORD *)&v4 & 0x20000000) != 0)
  {
LABEL_54:
    uint64_t v21 = 2654435761LL * self->_rxErrorInvalidLength;
    if ((*(_DWORD *)&v4 & 0x4000000) != 0) {
      goto LABEL_55;
    }
    goto LABEL_108;
  }

  self->_rxErrorInvalidFrame = v5[30];
  *(void *)&self->_has |= 0x10000000uLL;
  int32x4_t v9 = *((void *)v5 + 31);
  if ((v9 & 0x800000) == 0)
  {
LABEL_53:
    if ((v9 & 0x8000000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_108;
  }

void sub_1000A56FC()
{
  if (v0) {
    (*(void (**)())(*(void *)v0 + 8LL))();
  }
  JUMPOUT(0x1000A5778LL);
}

void sub_1000A5708()
{
  if (v0) {
    (*(void (**)())(*(void *)v0 + 8LL))();
  }
  JUMPOUT(0x1000A5778LL);
}

void sub_1000A5714()
{
}

void sub_1000A5734(void *a1, int a2)
{
  if (a2) {
    sub_100006EEC(a1);
  }
  JUMPOUT(0x1000A57A0LL);
}

void sub_1000A5744()
{
}

void sub_1000A5754( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  if (a22) {
    (*(void (**)(uint64_t))(*(void *)a22 + 8LL))(a22);
  }
  sub_100006E7C(&v23);
  _Unwind_Resume(a1);
}

void sub_1000A57A8( std::string *__str@<X3>, std::string::size_type a2@<X0>, std::string::size_type a3@<X1>, uint64_t a4@<X2>, std::string *a5@<X8>)
{
  if (v11 < 0) {
    operator delete((void *)v10.__r_.__value_.__l.__size_);
  }
}

void sub_1000A5830( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1000A5864(uint64_t *a1, std::string *a2)
{
  std::string v4 = *a2;
  std::string::basic_string(&__p, a2 + 1);
  sub_1000A69B0(v6, &v4);
  sub_1000355E0(v6, a1);
  sub_100006E7C(v6);
  return a1;
}

void sub_1000A58E0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000A590C(uint64_t a1, std::string *__str)
{
  std::string v4 = (char *)(a1 + 111);
  int64x2_t v5 = (std::string *)(a1 + 88);
  int size = (char)__str->__r_.__value_.__s.__size_;
  if (size >= 0) {
    size_t v7 = __str->__r_.__value_.__s.__size_;
  }
  else {
    size_t v7 = __str->__r_.__value_.__l.__size_;
  }
  uint64_t v8 = *(unsigned __int8 *)(a1 + 111);
  else {
    uint64_t v9 = *(unsigned __int8 *)(a1 + 111);
  }
  if (v7 == v9)
  {
    if ((v8 & 0x80u) == 0LL) {
      std::string v10 = (unsigned __int8 *)(a1 + 88);
    }
    else {
      std::string v10 = (unsigned __int8 *)v5->__r_.__value_.__r.__words[0];
    }
    if (size < 0)
    {
      uint64_t result = memcmp(__str->__r_.__value_.__l.__data_, v10, v7);
      if (!(_DWORD)result) {
        return result;
      }
    }

    else
    {
      if (!v7) {
        return 0LL;
      }
      for (uint64_t i = __str; i->__r_.__value_.__s.__data_[0] == *v10; uint64_t i = (std::string *)((char *)i + 1))
      {
        ++v10;
        if (!--v7) {
          return 0LL;
        }
      }
    }
  }

  if ((v8 & 0x80) != 0)
  {
    if (*(void *)(a1 + 96)) {
      goto LABEL_20;
    }
    goto LABEL_25;
  }

  if (!v8)
  {
LABEL_25:
    std::string::operator=(v5, __str);
    __int16 v15 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v15)
    {
      __int128 v16 = v15;
      uint64_t result = sub_10015A058(5);
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t result = os_log_type_enabled(v16, OS_LOG_TYPE_INFO);
      if (!(_DWORD)result) {
        return result;
      }
      if (*v4 < 0) {
        int64x2_t v5 = (std::string *)v5->__r_.__value_.__r.__words[0];
      }
      int v17 = 136315138;
      uint64_t v18 = v5;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "NCP is running %s", (uint8_t *)&v17, 0xCu);
    }

    else
    {
      uint64_t result = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
      if (!(_DWORD)result) {
        return result;
      }
      sub_1001FB53C();
    }

    return 0LL;
  }

std::string *sub_1000A5B1C@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  return std::string::basic_string(a2, (const std::string *)(a1 + 88));
}

uint64_t sub_1000A5B28(uint64_t a1)
{
  uint64_t result = sub_10000CB98(a1);
  if (!result)
  {
    v2.__vftable = 0LL;
    std::bad_cast::bad_cast(&v2);
    v2.__vftable = (std::bad_cast_vtbl *)&off_1002ADCA8;
    sub_10000C268();
  }

  return result;
}

void sub_1000A5B78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

uint64_t sub_1000A5B8C(uint64_t a1)
{
  uint64_t result = sub_1000A5BF0(a1);
  if (!result)
  {
    v2.__vftable = 0LL;
    std::bad_cast::bad_cast(&v2);
    v2.__vftable = (std::bad_cast_vtbl *)&off_1002ADCA8;
    sub_10000C268();
  }

  return result;
}

void sub_1000A5BDC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

uint64_t sub_1000A5BF0(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    uint64_t result = *((void *)sub_10000BD6C((uint64_t *)result) + 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == (0x800000010022784CLL & 0x7FFFFFFFFFFFFFFFLL)
      || (uint64_t result = strcmp((const char *)result, (const char *)(0x800000010022784CLL & 0x7FFFFFFFFFFFFFFFLL)),
          !(_DWORD)result))
    {
      if (*v1) {
        return *v1 + 8LL;
      }
      else {
        __break(0x5516u);
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

void *sub_1000A5C58(void *a1, uint64_t *a2)
{
  std::string v4 = sub_10000C8F8(a1);
  sub_1000A5CA0((uint64_t)v4, *a2, (uint64_t)(a2 + 1));
  return a1;
}

void sub_1000A5C8C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A5CA0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a2;
  if (a2 != a3)
  {
    std::string v4 = (uint64_t **)result;
    uint64_t v5 = result + 8;
    do
    {
      sub_1000A5D08(v4, v5, (unsigned int *)(a2 + 28), (_DWORD *)(a2 + 28));
      uint64_t result = sub_10000B338((uint64_t)&v6);
      a2 = v6;
    }

    while (v6 != a3);
  }

  return result;
}

_DWORD *sub_1000A5D08(uint64_t **a1, uint64_t a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t v6 = (void **)sub_1000A5DB4(a1, a2, &v13, &v12, a3);
  size_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    size_t v7 = operator new(0x20uLL);
    v10[1] = a1 + 1;
    v7[7] = *a4;
    char v11 = 1;
    sub_10000AF70(a1, v13, (void **)v8, v7);
    v10[0] = 0LL;
    sub_10000D0A8(v10, 0LL);
  }

  return v7;
}

void **sub_1000A5DB4(void **result, uint64_t a2, void *a3, void *a4, unsigned int *a5)
{
  uint64_t v8 = (uint64_t)result;
  uint64_t v9 = result + 1;
  if (result + 1 != (void **)a2)
  {
    unsigned int v10 = *(_DWORD *)(a2 + 28);
    if (*a5 >= v10)
    {
      if (v10 >= *a5)
      {
        *a3 = a2;
        *a4 = a2;
        return (void **)a4;
      }

      uint64_t v12 = (void *)a2;
      sub_10000B338((uint64_t)&v12);
      a4 = v12;
      if (v12 == v9 || *a5 < *((_DWORD *)v12 + 7))
      {
        if (*(void *)(a2 + 8))
        {
          *a3 = v12;
        }

        else
        {
          *a3 = a2;
          return (void **)(a2 + 8);
        }

        return (void **)a4;
      }

      return (void **)sub_100076D7C(v8, a3, a5);
    }
  }

  uint64_t v12 = (void *)a2;
  if (*result != (void *)a2)
  {
    uint64_t result = sub_10000CB60(&v12);
    if (*((_DWORD *)*result + 7) >= *a5) {
      return (void **)sub_100076D7C(v8, a3, a5);
    }
  }

  if (!*(void *)a2)
  {
    *a3 = a2;
    return (void **)a2;
  }

  char v11 = v12;
  *a3 = v12;
  if (v11) {
    return (void **)(v11 + 1);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_1000A5EDC(uint64_t a1)
{
  uint64_t result = sub_1000A5F40(a1);
  if (!result)
  {
    v2.__vftable = 0LL;
    std::bad_cast::bad_cast(&v2);
    v2.__vftable = (std::bad_cast_vtbl *)&off_1002ADCA8;
    sub_10000C268();
  }

  return result;
}

void sub_1000A5F2C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

uint64_t sub_1000A5F40(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    uint64_t result = *((void *)sub_10000BD6C((uint64_t *)result) + 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == (0x8000000100227879LL & 0x7FFFFFFFFFFFFFFFLL)
      || (uint64_t result = strcmp((const char *)result, (const char *)(0x8000000100227879LL & 0x7FFFFFFFFFFFFFFFLL)),
          !(_DWORD)result))
    {
      if (*v1) {
        return *v1 + 8LL;
      }
      else {
        __break(0x5516u);
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

void *sub_1000A5FA8(void *a1, uint64_t *a2)
{
  std::string v4 = sub_10000C8F8(a1);
  sub_1000A5FF0((uint64_t)v4, *a2, (uint64_t)(a2 + 1));
  return a1;
}

void sub_1000A5FDC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A5FF0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a2;
  if (a2 != a3)
  {
    std::string v4 = (uint64_t **)result;
    uint64_t v5 = result + 8;
    do
    {
      sub_1000A6058(v4, v5, (unsigned __int8 *)(a2 + 25), (_WORD *)(a2 + 25));
      uint64_t result = sub_10000B338((uint64_t)&v6);
      a2 = v6;
    }

    while (v6 != a3);
  }

  return result;
}

char *sub_1000A6058(uint64_t **a1, uint64_t a2, unsigned __int8 *a3, _WORD *a4)
{
  uint64_t v6 = (void **)sub_1000A6104(a1, a2, &v13, &v12, a3);
  size_t v7 = (char *)*v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    size_t v7 = (char *)operator new(0x20uLL);
    v10[1] = a1 + 1;
    *(_WORD *)(v7 + 25) = *a4;
    char v11 = 1;
    sub_10000AF70(a1, v13, (void **)v8, v7);
    v10[0] = 0LL;
    sub_10000D0A8(v10, 0LL);
  }

  return v7;
}

void **sub_1000A6104(void **result, uint64_t a2, void *a3, void *a4, unsigned __int8 *a5)
{
  uint64_t v8 = (uint64_t)result;
  uint64_t v9 = result + 1;
  if (result + 1 != (void **)a2)
  {
    unsigned int v10 = *a5;
    unsigned int v11 = *(unsigned __int8 *)(a2 + 25);
    if (v10 >= v11)
    {
      if (v11 >= v10)
      {
        *a3 = a2;
        *a4 = a2;
        return (void **)a4;
      }

      uint64_t v13 = (void *)a2;
      sub_10000B338((uint64_t)&v13);
      a4 = v13;
      if (v13 == v9 || *a5 < *((unsigned __int8 *)v13 + 25))
      {
        if (*(void *)(a2 + 8))
        {
          *a3 = v13;
        }

        else
        {
          *a3 = a2;
          return (void **)(a2 + 8);
        }

        return (void **)a4;
      }

      return (void **)sub_1000A622C(v8, a3, a5);
    }
  }

  uint64_t v13 = (void *)a2;
  if (*result != (void *)a2)
  {
    uint64_t result = sub_10000CB60(&v13);
  }

  if (!*(void *)a2)
  {
    *a3 = a2;
    return (void **)a2;
  }

  uint64_t v12 = v13;
  *a3 = v13;
  if (v12) {
    return (void **)(v12 + 1);
  }
  __break(0x5516u);
  return result;
}

void *sub_1000A622C(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t result = (void *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    unsigned int v6 = *a3;
    do
    {
      while (1)
      {
        size_t v7 = (void *)v4;
        unsigned int v8 = *(unsigned __int8 *)(v4 + 25);
        if (v6 >= v8) {
          break;
        }
        uint64_t v4 = *v7;
        uint64_t result = v7;
        if (!*v7) {
          goto LABEL_10;
        }
      }

      if (v8 >= v6) {
        break;
      }
      uint64_t result = v7 + 1;
      uint64_t v4 = v7[1];
    }

    while (v4);
  }

  else
  {
    size_t v7 = result;
  }

uint64_t sub_1000A627C(void *a1, unint64_t a2)
{
  return *a1 + 24 * a2;
}

uint64_t sub_1000A62B8(uint64_t *a1, __int128 *a2)
{
  uint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 == -1)
  {
    __break(0x5500u);
LABEL_10:
    sub_10000CCF0();
  }

  if (v3 > 0xAAAAAAAAAAAAAAALL) {
    goto LABEL_10;
  }
  if (0x5555555555555556LL * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556LL * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555LL) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  sub_1000A6428(v11, v6, v2, (uint64_t)(a1 + 2));
  size_t v7 = (_OWORD *)v12;
  __int128 v8 = *a2;
  *(void *)(v12 + 16) = *((void *)a2 + 2);
  *size_t v7 = v8;
  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *(void *)a2 = 0LL;
  v12 += 24LL;
  sub_1000A63B4(a1, v11);
  uint64_t v9 = a1[1];
  sub_1000A6624((uint64_t)v11);
  return v9;
}

void sub_1000A63A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1000A63B4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1000A6488((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1000A6428(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[3] = 0LL;
  a1[4] = a4;
  if (a2) {
    uint64_t v7 = (char *)sub_100011C1C(a4, a2);
  }
  else {
    uint64_t v7 = 0LL;
  }
  uint64_t v8 = &v7[24 * a3];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v8;
  a1[3] = &v7[24 * a2];
  return a1;
}

uint64_t sub_1000A6488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v15 = a6;
  *((void *)&v15 + 1) = a7;
  __int128 v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      __int128 v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24LL;
      *(void *)(a3 - 16) = 0LL;
      *(void *)(a3 - 8) = 0LL;
      *(void *)(a3 - 24) = 0LL;
      v7 -= 24LL;
      a3 -= 24LL;
    }

    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }

  char v13 = 1;
  sub_1000A6524((uint64_t)v12);
  return a6;
}

uint64_t sub_1000A6524(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_1000A6558((uint64_t *)a1);
  }
  return a1;
}

void sub_1000A6558(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v10 = *(void *)a1[2];
  uint64_t v11 = v1;
  uint64_t v12 = v10;
  uint64_t v13 = v1;
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(a1[1] + 8);
  uint64_t v5 = *(void *)a1[1];
  uint64_t v6 = v3;
  uint64_t v7 = v5;
  uint64_t v8 = v3;
  sub_1000A65CC(v2, (uint64_t)v9, (uint64_t)v4);
}

void sub_1000A65CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(void *)(a2 + 32); i != *(void *)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    uint64_t i = *(void *)(a2 + 32) + 24LL;
  }

void *sub_1000A6624(uint64_t a1)
{
  uint64_t result = *(void **)a1;
  if (!*(void *)a1) {
    return (void *)a1;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - (void)result) >> 3) < 0xAAAAAAAAAAAAAABLL)
  {
    operator delete(result);
    return (void *)a1;
  }

  __break(0x550Cu);
  return result;
}

void sub_1000A6688(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }

      uint64_t v2 = v5;
    }

    while (v5 != a2);
  }

void sub_1000A66DC()
{
}

void sub_1000A66F0(void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_1000A6760((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)(*a1)[2] - (_BYTE *)v3) >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      __break(0x550Cu);
    }
    else {
      operator delete(v3);
    }
  }

void sub_1000A6760(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 24LL)
  {
  }

  *(void *)(a1 + 8) = a2;
}

void *sub_1000A67B4(uint64_t **a1, const void **a2, uint64_t a3, const std::string **a4)
{
  uint64_t v7 = sub_10000AE50((uint64_t)a1, &v12, a2);
  uint64_t v8 = (void *)*v7;
  if (!*v7)
  {
    uint64_t v9 = (void **)v7;
    sub_1000A685C((uint64_t)a1, a3, a4, (uint64_t)v11);
    sub_10000AF70(a1, v12, v9, (void *)v11[0]);
    uint64_t v8 = v11[0];
    v11[0] = 0LL;
    sub_100016868(v11, 0LL);
  }

  return v8;
}

std::string *sub_1000A685C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, const std::string **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t v8 = (char *)operator new(0x50uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  uint64_t result = sub_1000A68E0(v7, (std::string *)(v8 + 32), a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1000A68C8(_Unwind_Exception *a1)
{
}

std::string *sub_1000A68E0(int a1, std::string *this, uint64_t a3, const std::string **a4)
{
  uint64_t result = std::string::basic_string(this, *a4);
  result[1].__r_.__value_.__r.__words[0] = 0LL;
  result[1].__r_.__value_.__l.__size_ = 0LL;
  result[1].__r_.__value_.__l.__cap_ = 0LL;
  return result;
}

uint64_t sub_1000A6904(uint64_t a1, uint64_t a2, std::string *__str)
{
  *(void *)a1 = a2;
  std::string::basic_string((std::string *)(a1 + 8), &__stra);
  return a1;
}

void sub_1000A695C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_1000A6978( std::string *a1, std::string::size_type a2, std::string::size_type a3, std::string *__str)
{
  a1->__r_.__value_.__r.__words[0] = a2;
  a1->__r_.__value_.__l.__size_ = a3;
  a1->__r_.__value_.__l.__cap_ = __str->__r_.__value_.__r.__words[0];
  std::string::basic_string(a1 + 1, (const std::string *)&__str->__r_.__value_.__r.__words[1]);
  return a1;
}

void *sub_1000A69B0(void *a1, std::string *a2)
{
  std::string v4 = *a2;
  std::string::basic_string(&__p, a2 + 1);
  sub_1000A6A34(a1, &v4);
  return a1;
}

void sub_1000A6A18( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000A6A34(void *a1, std::string *a2)
{
  *a1 = 0LL;
  std::string v4 = *a2;
  std::string::basic_string(&__p, a2 + 1);
  sub_1000A6AB8((uint64_t)a1, &v4);
  return a1;
}

void sub_1000A6A9C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A6AB8(uint64_t a1, std::string *a2)
{
  std::string v5 = *a2;
  std::string::basic_string(&__p, a2 + 1);
  int v3 = sub_1000A6BA0((uint64_t)off_1002B15C0, &v5, (std::string **)(a1 + 8));
  if (v3) {
    std::string v4 = off_1002B15C0;
  }
  else {
    std::string v4 = 0LL;
  }
  *(void *)a1 = v4;
}

void sub_1000A6B3C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A6B58(uint64_t *a1, _WORD *a2, int a3)
{
  if (a3 == 4)
  {
    a2[4] = 0;
  }

  else
  {
    sub_1000A6C2C(a1, a2, a3);
  }

void sub_1000A6B78(uint64_t *a1, unsigned int a2, unsigned int *a3)
{
  unsigned int v3 = a2;
  sub_1000A6D40(*a1, &v3, a3);
}

uint64_t sub_1000A6BA0(uint64_t a1, std::string *a2, std::string **a3)
{
  std::string v7 = *a2;
  std::string::basic_string(&__p, a2 + 1);
  uint64_t v5 = sub_1000A6E8C(a1, &v7, a3);
  return v5;
}

void sub_1000A6C10( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A6C2C(uint64_t *a1, _WORD *a2, int a3)
{
  switch(a3)
  {
    case 0:
      uint64_t v5 = *a1;
      uint64_t v6 = (std::string *)operator new(0x30uLL);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)v5;
      v6->__r_.__value_.__l.__cap_ = *(void *)(v5 + 16);
      std::string::basic_string(v6 + 1, (const std::string *)(v5 + 24));
      *(void *)a2 = v6;
      break;
    case 1:
      *(void *)a2 = *a1;
      *a1 = 0LL;
      break;
    case 2:
      uint64_t v7 = *(void *)a2;
      if (*(void *)a2)
      {
        operator delete((void *)v7);
      }

      goto LABEL_9;
    case 3:
      uint64_t v8 = (const char *)(*(void *)(*(void *)a2 + 8LL) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf3IvN2nl8wpantund21SpinelNCPVendorCustom"
                                                  "EiRKNS_3anyENSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocator"
                                                  "IcEEEEEENS0_5list4INS0_5valueIPS6_EENS_3argILi1EEENSM_ILi2EEENSJ_ISG_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp( v8,  (const char *)((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf3IvN2nl8wpantund21SpinelNCPVendorCustomEiR KNS_3anyENSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEE EENS0_5list4INS0_5valueIPS6_EENS_3argILi1EEENSM_ILi2EEENSJ_ISG_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = *a1;
      }

      else
      {
LABEL_9:
        *(void *)a2 = 0LL;
      }

      break;
    default:
      a2[4] = 0;
      break;
  }

void sub_1000A6D2C(_Unwind_Exception *a1)
{
}

void sub_1000A6D40(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  v3[0] = a2;
  v3[1] = a3;
  sub_1000A6D74(a1 + 16, a1, v3);
}

void sub_1000A6D74(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = (uint64_t)a3[1];
  uint64_t v6 = **a3;
  std::string::basic_string(&__str, (const std::string *)(a1 + 8));
  sub_1000A6DFC(a2, v4, v6, v5, &__str);
}

void sub_1000A6DE0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A6DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, std::string *__str)
{
  uint64_t v8 = *(void (**)(void *, uint64_t, uint64_t, std::string *))a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v9 = (void *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0) {
    uint64_t v8 = *(void (**)(void *, uint64_t, uint64_t, std::string *))(*v9 + v8);
  }
  std::string::basic_string(&v10, __str);
  v8(v9, a3, a4, &v10);
}

void sub_1000A6E70( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A6E8C(uint64_t a1, const std::string *a2, std::string **a3)
{
  __int128 v6 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
  std::string::size_type cap = a2->__r_.__value_.__l.__cap_;
  std::string::basic_string(&__p, a2 + 1);
  sub_1000A6F14(a1, (uint64_t)&v6, a3);
  return 1LL;
}

void sub_1000A6EF8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_1000A6F14(uint64_t a1, uint64_t a2, std::string **a3)
{
  uint64_t v5 = (std::string *)operator new(0x30uLL);
  *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
  v5->__r_.__value_.__l.__cap_ = *(void *)(a2 + 16);
  uint64_t result = std::string::basic_string(v5 + 1, (const std::string *)(a2 + 24));
  *a3 = v5;
  return result;
}

void sub_1000A6F68(_Unwind_Exception *a1)
{
}

void sub_1000A6F7C(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

void sub_1000A6F90(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

uint64_t sub_1000A6FA8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v29[0] = 0LL;
  sub_100007640((uint64_t)v29, a3);
  sub_1000342C8(a1, a2, v29);
  sub_100006E7C(v29);
  *(void *)a1 = off_1002B1650;
  sub_10000D19C((void *)(a1 + 136), a4);
  *(_DWORD *)(a1 + 160) = sub_1000D8DE8(a2);
  sub_10000AC00(&__p, "Network:PANID");
  uint64_t v7 = sub_100037208(a1 + 136, (const void **)&__p);
  uint64_t v8 = v7;
  if (SHIBYTE(v28) < 0)
  {
    operator delete((void *)__p.n128_u64[0]);
    if (v8) {
      goto LABEL_9;
    }
  }

  else if (v7)
  {
    goto LABEL_9;
  }

  v25.n128_u16[0] = *(_WORD *)(a2 + 1496);
  if (v25.n128_u16[0] == 0xFFFF) {
    sub_100124328(&v25, 2);
  }
  sub_10000AC00(&__p, "Network:PANID");
  uint64_t v9 = sub_10000ED88((uint64_t **)(a1 + 136), &__p);
  sub_100017678(v9, &v25);
  if (SHIBYTE(v28) < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
LABEL_9:
  sub_10000AC00(&__p, "Network:XPANID");
  uint64_t v10 = sub_100037208(a1 + 136, (const void **)&__p);
  uint64_t v11 = v10;
  uint64_t v12 = (void *)(a2 + 73720);
  if (SHIBYTE(v28) < 0)
  {
    operator delete((void *)__p.n128_u64[0]);
    if (v11) {
      goto LABEL_18;
    }
  }

  else if (v10)
  {
    goto LABEL_18;
  }

  v25.n128_u64[0] = 0LL;
  if (!*(_BYTE *)(a2 + 73756)
    || (sub_1001598C0((uint64_t)&__p, a2 + 1488, 8LL), (v25.n128_u64[0] = __p.n128_u64[0]) == 0))
  {
    sub_100124328(&v25, 8);
  }

  sub_10000AC00(&__p, "Network:XPANID");
  uint64_t v13 = sub_10000ED88((uint64_t **)(a1 + 136), &__p);
  sub_100017620(v13, (uint64_t *)&v25);
  if (SHIBYTE(v28) < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
LABEL_18:
  sub_10000AC00(&__p, "IPv6:MeshLocalAddress");
  uint64_t v14 = sub_100037208(a1 + 136, (const void **)&__p);
  uint64_t v15 = v14;
  if (SHIBYTE(v28) < 0)
  {
    operator delete((void *)__p.n128_u64[0]);
    if (v15) {
      goto LABEL_26;
    }
  }

  else if (v14)
  {
    goto LABEL_26;
  }

  sub_10000AC00(&__p, "Network:XPANID");
  __int128 v16 = sub_10000ED88((uint64_t **)(a1 + 136), &__p);
  v30[0] = sub_1001476B4(v16, 1);
  if (SHIBYTE(v28) < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  sub_100159934((uint64_t)v30, 8uLL);
  v25.n128_u8[0] = -3;
  *(unsigned __int32 *)((char *)v25.n128_u32 + 1) = v30[0];
  v25.n128_u8[5] = BYTE4(v30[0]);
  v25.n128_u16[3] = 0;
  v25.n128_u64[1] = 0LL;
  sub_10000AC00(&__p, "IPv6:MeshLocalAddress");
  int v17 = sub_10000ED88((uint64_t **)(a1 + 136), &__p);
  sub_1000A7488(v17, &v25);
  if (SHIBYTE(v28) < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
LABEL_26:
  if (*v12 != v12[1]) {
    return a1;
  }
  sub_10000AC00(&__p, "Network:Key");
  uint64_t v18 = sub_100037208(a1 + 136, (const void **)&__p);
  uint64_t v19 = v18;
  if (SHIBYTE(v28) < 0)
  {
    operator delete((void *)__p.n128_u64[0]);
    if (!v19)
    {
LABEL_31:
      sub_100124328(v30, 16);
      __n128 __p = 0uLL;
      uint64_t v28 = 0LL;
      sub_100018E8C(&__p, v30, (uint64_t)&v31, 0x10uLL);
      sub_10000AC00(&v25, "Network:Key");
      uint64_t v20 = sub_10000ED88((uint64_t **)(a1 + 136), &v25);
      sub_100017FCC(v20, &__p);
      if (v26 < 0) {
        operator delete((void *)v25.n128_u64[0]);
      }
      v25.n128_u64[0] = (unint64_t)&__p;
      sub_100006F6C((void ***)&v25);
    }
  }

  else if (!v18)
  {
    goto LABEL_31;
  }

  sub_10000AC00(&__p, "Network:KeyIndex");
  uint64_t v21 = sub_100037208(a1 + 136, (const void **)&__p);
  uint64_t v22 = v21;
  if (SHIBYTE(v28) < 0)
  {
    operator delete((void *)__p.n128_u64[0]);
    if (v22) {
      return a1;
    }
  }

  else if (v21)
  {
    return a1;
  }

  v25.n128_u32[0] = 1;
  sub_10000AC00(&__p, "Network:KeyIndex");
  uint64_t v23 = sub_10000ED88((uint64_t **)(a1 + 136), &__p);
  sub_100017730(v23, &v25);
  if (SHIBYTE(v28) < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  return a1;
}

void sub_1000A73A4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
}

void sub_1000A7468()
{
}

void sub_1000A7470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000A7480()
{
}

uint64_t *sub_1000A7488(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v4 = &off_1002B0998;
  *(_OWORD *)(v4 + 8) = *a2;
  uint64_t v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  return a1;
}

void *sub_1000A74E8(uint64_t a1)
{
  int v2 = sub_1000D8DE8(*(void *)(a1 + 56));
  if (!sub_1000B5098(v2)) {
    sub_1000DA700(*(void *)(a1 + 56), *(unsigned int *)(a1 + 160));
  }
  return sub_100034408((void *)a1);
}

uint64_t sub_1000A753C( uint64_t a1, unsigned int a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11 = *(unsigned __int16 *)(a1 + 8);
  uint64_t result = 3LL;
  if (v11 <= 298)
  {
    if (v11 > 237)
    {
      if (v11 > 261)
      {
        if (v11 != 262)
        {
          if (v11 != 285) {
            goto LABEL_289;
          }
          goto LABEL_139;
        }

        goto LABEL_127;
      }

      if (v11 != 238)
      {
        if (v11 != 251) {
          goto LABEL_289;
        }
LABEL_111:
        if (*(_DWORD *)(a1 + 128))
        {
          uint64_t v36 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v36)
          {
          }

          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            sub_1001FB53C();
          }
        }

        sub_10000AC00(&buf, "Network:PANID");
        uint64_t v37 = sub_100037208(a1 + 136, (const void **)&buf);
        if (v85 < 0) {
          operator delete((void *)buf.n128_u64[0]);
        }
        if (!v37)
        {
LABEL_133:
          sub_10000AC00(&buf, "Network:XPANID");
          uint64_t v40 = sub_100037208(a1 + 136, (const void **)&buf);
          if (v85 < 0) {
            operator delete((void *)buf.n128_u64[0]);
          }
          if (!v40)
          {
LABEL_145:
            sub_10000AC00(&buf, "Network:Name");
            uint64_t v44 = sub_100037208(a1 + 136, (const void **)&buf);
            if (v85 < 0) {
              operator delete((void *)buf.n128_u64[0]);
            }
            if (!v44)
            {
LABEL_159:
              sub_10000AC00(&buf, "Network:Key");
              uint64_t v47 = sub_100037208(a1 + 136, (const void **)&buf);
              if (v85 < 0) {
                operator delete((void *)buf.n128_u64[0]);
              }
              if (!v47)
              {
LABEL_171:
                sub_10000AC00(&buf, "Network:KeyIndex");
                uint64_t v50 = sub_100037208(a1 + 136, (const void **)&buf);
                if (v85 < 0) {
                  operator delete((void *)buf.n128_u64[0]);
                }
                if (!v50)
                {
LABEL_183:
                  sub_10000AC00(&buf, "IPv6:MeshLocalPrefix");
                  uint64_t v53 = sub_100037208(a1 + 136, (const void **)&buf);
                  if (v85 < 0) {
                    operator delete((void *)buf.n128_u64[0]);
                  }
                  if (!v53)
                  {
                    sub_10000AC00(&buf, "IPv6:MeshLocalAddress");
                    uint64_t v56 = sub_100037208(a1 + 136, (const void **)&buf);
                    if (v85 < 0) {
                      operator delete((void *)buf.n128_u64[0]);
                    }
                    if (v56)
                    {
                      sub_10000AC00(&buf, "IPv6:MeshLocalAddress");
                      uint64_t v57 = sub_10000ED88((uint64_t **)(a1 + 136), &buf);
                      v82.__r_.__value_.__r.__words[0] = sub_1001474A0(v57);
                      v82.__r_.__value_.__l.__size_ = v58;
                      if (v85 < 0) {
                        operator delete((void *)buf.n128_u64[0]);
                      }
                      sub_100034C60("Cii6C", (uint64_t *)&buf, 0x80u);
                      sub_100006EFC(a1 + 104, &buf);
                      __p.n128_u64[0] = (unint64_t)&buf;
                      sub_100006F6C((void ***)&__p);
                      *(_WORD *)(a1 + 98) = 0;
                      *(_WORD *)(a1 + 8) = 365;
LABEL_205:
                      unsigned int v13 = *(_DWORD *)(a1 + 128);
                      if (v13)
                      {
                        __int16 v59 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                        if (v59)
                        {
                          goto LABEL_277;
                        }

                        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                          goto LABEL_277;
                        }
                        goto LABEL_267;
                      }
                    }

LABEL_211:
                    sub_10000AC00(&buf, "com.nestlabs.internal:Legacy:MeshLocalPrefix");
                    uint64_t v60 = sub_100037208(a1 + 136, (const void **)&buf);
                    if (v85 < 0) {
                      operator delete((void *)buf.n128_u64[0]);
                    }
                    if (!v60
                      || (uint64_t v61 = *(void *)(a1 + 56) + 72792LL,
                          buf.n128_u32[0] = 15296,
                          !sub_100007684(v61, (unsigned int *)&buf)))
                    {
LABEL_218:
                      sub_100034C60("Ciib", (uint64_t *)&buf, 0x80u);
                      sub_100006EFC(a1 + 104, &buf);
                      v82.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
                      sub_100006F6C((void ***)&v82);
                      *(_WORD *)(a1 + 98) = 0;
                      *(_WORD *)(a1 + 8) = 400;
                      goto LABEL_219;
                    }

                    sub_10000AC00(&v82, "com.nestlabs.internal:Legacy:MeshLocalPrefix");
                    uint64_t v62 = sub_10000ED88((uint64_t **)(a1 + 136), (__n128 *)&v82);
                    sub_100147058(v62, (uint64_t)&buf);
                    sub_100034C60("CiiD", (uint64_t *)&v82, 0x80u);
                    sub_100006EFC(a1 + 104, (__n128 *)&v82);
                    __p.n128_u64[0] = (unint64_t)&v82;
                    sub_100006F6C((void ***)&__p);
                    v82.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
                    sub_100006F6C((void ***)&v82);
                    *(_WORD *)(a1 + 98) = 0;
                    *(_WORD *)(a1 + 8) = 384;
LABEL_23:
                    unsigned int v13 = *(_DWORD *)(a1 + 128);
                    if (v13)
                    {
                      uint64_t v14 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                      if (v14)
                      {
                        goto LABEL_277;
                      }

                      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                        goto LABEL_277;
                      }
                      goto LABEL_267;
                    }

                    goto LABEL_218;
                  }

                  sub_10000AC00(&buf, "IPv6:MeshLocalPrefix");
                  uint64_t v54 = sub_10000ED88((uint64_t **)(a1 + 136), &buf);
                  v82.__r_.__value_.__r.__words[0] = sub_1001474A0(v54);
                  v82.__r_.__value_.__l.__size_ = v55;
                  if (v85 < 0) {
                    operator delete((void *)buf.n128_u64[0]);
                  }
                  sub_100034C60("Cii6C", (uint64_t *)&buf, 0x80u);
                  sub_100006EFC(a1 + 104, &buf);
                  __p.n128_u64[0] = (unint64_t)&buf;
                  sub_100006F6C((void ***)&__p);
                  *(_WORD *)(a1 + 98) = 0;
                  *(_WORD *)(a1 + 8) = 349;
LABEL_34:
                  unsigned int v13 = *(_DWORD *)(a1 + 128);
                  if (v13)
                  {
                    uint64_t v15 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                    if (v15)
                    {
                      goto LABEL_277;
                    }

                    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_277;
                    }
                    goto LABEL_267;
                  }

                  goto LABEL_211;
                }

                sub_10000AC00(&v82, "Network:KeyIndex");
                std::string v51 = sub_10000ED88((uint64_t **)(a1 + 136), (__n128 *)&v82);
                sub_1001472F4(v51);
                sub_100034C60("CiiL", (uint64_t *)&buf, 0x80u);
                sub_100006EFC(a1 + 104, &buf);
                __p.n128_u64[0] = (unint64_t)&buf;
                sub_100006F6C((void ***)&__p);
                *(_WORD *)(a1 + 98) = 0;
                *(_WORD *)(a1 + 8) = 331;
LABEL_177:
                unsigned int v13 = *(_DWORD *)(a1 + 128);
                if (v13)
                {
                  uint64_t v52 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                  if (v52)
                  {
                    goto LABEL_277;
                  }

                  if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_277;
                  }
                  goto LABEL_267;
                }

                goto LABEL_183;
              }

              sub_10000AC00(&v82, "Network:Key");
              uint64_t v48 = sub_10000ED88((uint64_t **)(a1 + 136), (__n128 *)&v82);
              sub_100147058(v48, (uint64_t)&buf);
              sub_100034C60("CiiD", (uint64_t *)&v82, 0x80u);
              sub_100006EFC(a1 + 104, (__n128 *)&v82);
              __p.n128_u64[0] = (unint64_t)&v82;
              sub_100006F6C((void ***)&__p);
              v82.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
              sub_100006F6C((void ***)&v82);
              *(_WORD *)(a1 + 98) = 0;
              *(_WORD *)(a1 + 8) = 317;
LABEL_165:
              unsigned int v13 = *(_DWORD *)(a1 + 128);
              if (v13)
              {
                uint64_t v49 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                if (v49)
                {
                  goto LABEL_277;
                }

                if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_277;
                }
                goto LABEL_267;
              }

              goto LABEL_171;
            }

            sub_10000AC00(&__p, "Network:Name");
            uint64_t v45 = sub_10000ED88((uint64_t **)(a1 + 136), &__p);
            sub_100147B4C(v45, &v82);
            sub_100034C60("CiiU", (uint64_t *)&buf, 0x80u);
            sub_100006EFC(a1 + 104, &buf);
            p___n128 buf = &buf;
            sub_100006F6C((void ***)&p_buf);
            if (v81 < 0) {
              operator delete((void *)__p.n128_u64[0]);
            }
            *(_WORD *)(a1 + 98) = 0;
            *(_WORD *)(a1 + 8) = 299;
LABEL_153:
            unsigned int v13 = *(_DWORD *)(a1 + 128);
            if (v13)
            {
              std::string v46 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
              if (v46)
              {
                goto LABEL_277;
              }

              if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                goto LABEL_277;
              }
              goto LABEL_267;
            }

            goto LABEL_159;
          }

          sub_10000AC00(&buf, "Network:XPANID");
          uint64_t v41 = sub_10000ED88((uint64_t **)(a1 + 136), &buf);
          uint64_t v42 = sub_1001476B4(v41, 1);
          if (v85 < 0) {
            operator delete((void *)buf.n128_u64[0]);
          }
          __p.n128_u64[0] = (unint64_t)v42;
          sub_100159934((uint64_t)&__p, 8uLL);
          sub_100034C60("CiiD", (uint64_t *)&buf, 0x80u);
          sub_100006EFC(a1 + 104, &buf);
          v82.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
          sub_100006F6C((void ***)&v82);
          *(_WORD *)(a1 + 98) = 0;
          *(_WORD *)(a1 + 8) = 285;
LABEL_139:
          unsigned int v13 = *(_DWORD *)(a1 + 128);
          if (v13)
          {
            uint64_t v43 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
            if (v43)
            {
              goto LABEL_277;
            }

            if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              goto LABEL_277;
            }
            goto LABEL_267;
          }

          goto LABEL_145;
        }

        sub_10000AC00(&v82, "Network:PANID");
        uint64_t v38 = sub_10000ED88((uint64_t **)(a1 + 136), (__n128 *)&v82);
        sub_1001472F4(v38);
        sub_100034C60("CiiS", (uint64_t *)&buf, 0x80u);
        sub_100006EFC(a1 + 104, &buf);
        __p.n128_u64[0] = (unint64_t)&buf;
        sub_100006F6C((void ***)&__p);
        *(_WORD *)(a1 + 98) = 0;
        *(_WORD *)(a1 + 8) = 262;
LABEL_127:
        unsigned int v13 = *(_DWORD *)(a1 + 128);
        if (v13)
        {
          uint64_t v39 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v39)
          {
            goto LABEL_277;
          }

          if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            goto LABEL_277;
          }
          goto LABEL_267;
        }

        goto LABEL_133;
      }

      if (sub_1000B55AC(buf, "tx_delaymax"))
      {
        *((_DWORD *)v55 + 12) = sub_1000BE984(3, uint64);
        uint64_t v106 = byte_1002D1238;
        uint64_t v91 = sub_100070EE8((uint64_t **)a7, (std::string *)buf);
        uint64_t v92 = (char *)&unk_1002CA1D0 + 13848 * v106 + 48;
        goto LABEL_230;
      }

      if (sub_1000B55AC(buf, "tx_delayavg"))
      {
        *((_DWORD *)v55 + 13) = sub_1000BE984(3, uint64);
        uint64_t v107 = byte_1002D1238;
        uint64_t v91 = sub_100070EE8((uint64_t **)a7, (std::string *)buf);
        uint64_t v92 = (char *)&unk_1002CA1D0 + 13848 * v107 + 52;
        goto LABEL_230;
      }

      if (sub_1000B55AC(buf, "tx_success"))
      {
        *(_DWORD *)std::string::size_type v55 = sub_1000BE984(3, uint64);
        uint64_t v108 = byte_1002D1238;
        uint64_t v91 = sub_100070EE8((uint64_t **)a7, (std::string *)buf);
        uint64_t v92 = (char *)&unk_1002CA1D0 + 13848 * v108;
        goto LABEL_230;
      }

      if (sub_1000B55AC(buf, "tx_failure"))
      {
        *((_DWORD *)v55 + 1) = sub_1000BE984(3, uint64);
        uint64_t v115 = byte_1002D1238;
        uint64_t v91 = sub_100070EE8((uint64_t **)a7, (std::string *)buf);
        uint64_t v92 = (char *)&unk_1002CA1D0 + 13848 * v115 + 4;
        goto LABEL_230;
      }

      if (sub_1000B55AC(buf, "rx_success"))
      {
        *((_DWORD *)v55 + 5) = sub_1000BE984(3, uint64);
        uint64_t v117 = byte_1002D1238;
        uint64_t v91 = sub_100070EE8((uint64_t **)a7, (std::string *)buf);
        uint64_t v92 = (char *)&unk_1002CA1D0 + 13848 * v117 + 20;
        goto LABEL_230;
      }

      if (sub_1000B55AC(buf, "rx_failure"))
      {
        *((_DWORD *)v55 + 6) = sub_1000BE984(3, uint64);
        int v118 = byte_1002D1238;
        uint64_t v91 = sub_100070EE8((uint64_t **)a7, (std::string *)buf);
        uint64_t v92 = (char *)&unk_1002CA1D0 + 13848 * v118 + 24;
        goto LABEL_230;
      }

      if (sub_1000B55AC(buf, "coex_tx_granted_requests"))
      {
        uint64_t v119 = *((_DWORD *)&unk_1002CA1D0 + 3462 * byte_1002D1238 + 26);
        uint64_t v120 = sub_1000BE984(4, uint64);
        if (v119 >= uint64)
        {
          uint64_t v122 = v119 >= v120;
          uint64_t v123 = v119 - v120;
        }

        else
        {
          uint64_t v121 = *((_DWORD *)&unk_1002CA1D0 + 3462 * byte_1002D1238 + 26);
          uint64_t v122 = v120 >= v121;
          uint64_t v123 = v120 - v121;
        }

        v265 = v123;
        if (!v122) {
          goto LABEL_489;
        }
        *((_DWORD *)v55 + 26) = v123;
        uint64_t v134 = byte_1002D1238;
        uint64_t v135 = sub_100070EE8((uint64_t **)a7, (std::string *)buf);
        sub_100017F70(v135, (_DWORD *)&unk_1002CA1D0 + 3462 * v134 + 26);
      }

      else if (sub_1000B55AC(buf, "coex_tx_denied_requests"))
      {
        uint64_t v124 = *((_DWORD *)&unk_1002CA1D0 + 3462 * byte_1002D1238 + 24);
        uint64_t v125 = sub_1000BE984(4, uint64);
        if (v124 >= uint64)
        {
          uint64_t v127 = v124 >= v125;
          uint64_t v128 = v124 - v125;
        }

        else
        {
          uint64_t v126 = *((_DWORD *)&unk_1002CA1D0 + 3462 * byte_1002D1238 + 24);
          uint64_t v127 = v125 >= v126;
          uint64_t v128 = v125 - v126;
        }

        v262 = v128;
        if (!v127) {
          goto LABEL_489;
        }
        *((_DWORD *)v55 + 24) = v128;
        uint64_t v141 = byte_1002D1238;
        uint64_t v142 = sub_100070EE8((uint64_t **)a7, (std::string *)buf);
        sub_100017F70(v142, (_DWORD *)&unk_1002CA1D0 + 3462 * v141 + 24);
      }

      else if (sub_1000B55AC(buf, "coex_rx_granted_requests"))
      {
        int v129 = *((_DWORD *)&unk_1002CA1D0 + 3462 * byte_1002D1238 + 30);
        uint64_t v130 = sub_1000BE984(4, uint64);
        if (v129 >= uint64)
        {
          uint64_t v132 = v129 >= v130;
          uint64_t v133 = v129 - v130;
        }

        else
        {
          uint64_t v131 = *((_DWORD *)&unk_1002CA1D0 + 3462 * byte_1002D1238 + 30);
          uint64_t v132 = v130 >= v131;
          uint64_t v133 = v130 - v131;
        }

        v256 = v133;
        if (!v132) {
          goto LABEL_489;
        }
        *((_DWORD *)v55 + 30) = v133;
        uint64_t v149 = byte_1002D1238;
        uint64_t v150 = sub_100070EE8((uint64_t **)a7, (std::string *)buf);
        sub_100017F70(v150, (_DWORD *)&unk_1002CA1D0 + 3462 * v149 + 30);
      }

      else
      {
        if (!sub_1000B55AC(buf, "coex_rx_denied_requests"))
        {
          if (sub_1000B55AC(buf, "numRouters"))
          {
            uint64_t v143 = sub_1000BE984(3, uint64);
            *((_DWORD *)v55 + 40) = v143;
            uint64_t v144 = "small";
            if (v143 >= 4)
            {
              uint64_t v144 = "medium";
              if (v143 >= 0xA)
              {
                if (v143 >= 0xF) {
                  uint64_t v144 = "very large";
                }
                else {
                  uint64_t v144 = "large";
                }
              }
            }

            std::string::assign((std::string *)v55 + 7, v144);
            uint64_t v145 = byte_1002D1238;
            uint64_t v146 = sub_100070EE8((uint64_t **)a7, (std::string *)buf);
            sub_100017F70(v146, (_DWORD *)&unk_1002CA1D0 + 3462 * v145 + 40);
            uint64_t v147 = byte_1002D1238;
            sub_10000AC00(&__str, "thread_mesh_size");
            int v148 = sub_10000ED88((uint64_t **)a7, (__n128 *)&__str);
            sub_1000200A0(v148, (const std::string *)&unk_1002CA1D0 + 577 * v147 + 7);
LABEL_270:
            goto LABEL_231;
          }

          if (sub_1000B55AC(buf, "numOnMeshPrefixes"))
          {
            *((_DWORD *)v55 + 41) = sub_1000BE984(3, uint64);
            uint64_t v151 = byte_1002D1238;
            uint64_t v91 = sub_100070EE8((uint64_t **)a7, (std::string *)buf);
            uint64_t v92 = (char *)&unk_1002CA1D0 + 13848 * v151 + 164;
          }

          else
          {
            if (sub_1000B55AC(buf, "last_known_device_role"))
            {
              uint64_t v156 = (char *)xpc_dictionary_get_string(v57, "value");
              sub_10000AC00(&__str, v156);
              memset(&v272, 0, sizeof(v272));
              std::string::operator=((std::string *)v55 + 8, &__str);
              uint64_t v157 = (const std::string *)((char *)&unk_1002CA1D0 + 13848 * byte_1002D1238 + 192);
              else {
                uint64_t v158 = *((unsigned __int8 *)&unk_1002CA1D0 + 13848 * byte_1002D1238 + 215);
              }
              if (v158)
              {
                uint64_t v165 = sub_100070EE8((uint64_t **)a7, (std::string *)buf);
                sub_1000200A0(v165, v157);
              }

              else
              {
                std::string::assign(&v272, "unknown");
                uint64_t v166 = sub_100070EE8((uint64_t **)a7, (std::string *)buf);
                sub_1000200A0(v166, &v272);
                std::string::operator=((std::string *)&unk_1002CA1D0 + 577 * byte_1002D1238 + 8, &v272);
              }

              goto LABEL_270;
            }

            if (sub_1000B55AC(buf, "statsTimestamp"))
            {
              *((void *)v55 + 18) = uint64;
              uint64_t v159 = (uint64_t *)((char *)&unk_1002CA1D0 + 13848 * byte_1002D1238 + 144);
              int v160 = *v159;
              if (*v159)
              {
                uint64_t v122 = uint64 >= v160;
                int v160 = uint64 - v160;
                if (!v122)
                {
LABEL_489:
                  __break(0x5515u);
                  return;
                }
              }

              *((void *)v55 + 19) = v160;
              uint64_t v161 = sub_100070EE8((uint64_t **)a7, (std::string *)buf);
              sub_100017620(v161, v159);
              uint64_t v162 = byte_1002D1238;
              sub_10000AC00(&__str, "statsDuration");
              uint64_t v163 = sub_10000ED88((uint64_t **)a7, (__n128 *)&__str);
              sub_100017620(v163, (uint64_t *)&unk_1002CA1D0 + 1731 * v162 + 19);
              goto LABEL_270;
            }

            if (sub_1000B55AC(buf, "ca_trigger_based_counters_num_firmware_resets"))
            {
              *((_DWORD *)v55 + 54) = uint64;
              unsigned int v164 = byte_1002D1238;
              uint64_t v91 = sub_100070EE8((uint64_t **)a7, (std::string *)buf);
              uint64_t v92 = (char *)&unk_1002CA1D0 + 13848 * v164 + 216;
            }

            else if (sub_1000B55AC(buf, "ca_trigger_based_counters_num_daemon_restart_due_to_reboots"))
            {
              *((_DWORD *)v55 + 55) = uint64;
              uint64_t v167 = byte_1002D1238;
              uint64_t v91 = sub_100070EE8((uint64_t **)a7, (std::string *)buf);
              uint64_t v92 = (char *)&unk_1002CA1D0 + 13848 * v167 + 220;
            }

            else if (sub_1000B55AC(buf, "ca_trigger_based_counters_num_daemon_restart_due_to_crashes_or_jetsams"))
            {
              *((_DWORD *)v55 + 56) = uint64;
              uint64_t v168 = byte_1002D1238;
              uint64_t v91 = sub_100070EE8((uint64_t **)a7, (std::string *)buf);
              uint64_t v92 = (char *)&unk_1002CA1D0 + 13848 * v168 + 224;
            }

            else
            {
              if (sub_1000B55AC(buf, "is_border_router_advertised"))
              {
                v55[228] = uint64 != 0;
                uint64_t v169 = byte_1002D1238;
                uint64_t v170 = sub_100070EE8((uint64_t **)a7, (std::string *)buf);
                uint64_t v171 = (char *)&unk_1002CA1D0 + 13848 * v169 + 228;
LABEL_311:
                sub_100020B4C(v170, v171);
                goto LABEL_231;
              }

              if (sub_1000B55AC(buf, "is_anycast_srp_service_advertised"))
              {
                v55[231] = uint64 != 0;
                uint64_t v172 = byte_1002D1238;
                uint64_t v170 = sub_100070EE8((uint64_t **)a7, (std::string *)buf);
                uint64_t v171 = (char *)&unk_1002CA1D0 + 13848 * v172 + 231;
                goto LABEL_311;
              }

              if (sub_1000B55AC(buf, "is_unicast_srp_service_advertised"))
              {
                v55[230] = uint64 != 0;
                uint64_t v173 = byte_1002D1238;
                uint64_t v170 = sub_100070EE8((uint64_t **)a7, (std::string *)buf);
                uint64_t v171 = (char *)&unk_1002CA1D0 + 13848 * v173 + 230;
                goto LABEL_311;
              }

              if (sub_1000B55AC(buf, "num_anycast_srp_services_advertised"))
              {
                *((_DWORD *)v55 + 60) = uint64;
                uint64_t v174 = byte_1002D1238;
                uint64_t v91 = sub_100070EE8((uint64_t **)a7, (std::string *)buf);
                uint64_t v92 = (char *)&unk_1002CA1D0 + 13848 * v174 + 240;
              }

              else if (sub_1000B55AC(buf, "num_unicast_srp_services_advertised"))
              {
                *((_DWORD *)v55 + 59) = uint64;
                uint64_t v175 = byte_1002D1238;
                uint64_t v91 = sub_100070EE8((uint64_t **)a7, (std::string *)buf);
                uint64_t v92 = (char *)&unk_1002CA1D0 + 13848 * v175 + 236;
              }

              else
              {
                if (!sub_1000B55AC(buf, "num_border_routers_advertised")) {
                  goto LABEL_231;
                }
                *v248 = uint64;
                uint64_t v176 = byte_1002D1238;
                uint64_t v91 = sub_100070EE8((uint64_t **)a7, (std::string *)buf);
                uint64_t v92 = (char *)&unk_1002CA1D0 + 13848 * v176 + 124;
              }
            }
          }

          goto LABEL_230;
        }

        uint64_t v136 = *((_DWORD *)&unk_1002CA1D0 + 3462 * byte_1002D1238 + 28);
        if (v136 >= sub_1000BE984(4, uint64))
        {
          uint64_t v152 = *((_DWORD *)&unk_1002CA1D0 + 3462 * byte_1002D1238 + 28);
          uint64_t v153 = sub_1000BE984(4, uint64);
          uint64_t v139 = v152 >= v153;
          int v140 = v152 - v153;
        }

        else
        {
          uint64_t v137 = sub_1000BE984(4, uint64);
          uint64_t v138 = *((_DWORD *)&unk_1002CA1D0 + 3462 * byte_1002D1238 + 28);
          uint64_t v139 = v137 >= v138;
          int v140 = v137 - v138;
        }

        v254 = v140;
        if (!v139) {
          goto LABEL_489;
        }
        *((_DWORD *)v55 + 28) = v140;
        uint64_t v154 = byte_1002D1238;
        uint64_t v155 = sub_100070EE8((uint64_t **)a7, (std::string *)buf);
        sub_100017F70(v155, (_DWORD *)&unk_1002CA1D0 + 3462 * v154 + 28);
      }

LABEL_104:
      unsigned int v13 = *(_DWORD *)(a1 + 128);
      if (v13)
      {
        uint64_t v35 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v35)
        {
          goto LABEL_277;
        }

        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          goto LABEL_277;
        }
        goto LABEL_267;
      }

      sub_100034C60("CiiC", (uint64_t *)&buf, 0x80u);
      sub_100006EFC(a1 + 104, &buf);
      v82.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
      sub_100006F6C((void ***)&v82);
      *(_WORD *)(a1 + 98) = 0;
      *(_WORD *)(a1 + 8) = 251;
      goto LABEL_111;
    }

    if (v11 > 157)
    {
      if (v11 != 158)
      {
        if (v11 != 174) {
          goto LABEL_289;
        }
LABEL_67:
        if (*(_DWORD *)(a1 + 128))
        {
          __n128 v25 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v25)
          {
          }

          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            sub_1001FB53C();
          }
        }

        sub_10000AC00(&buf, "NCP:Channel");
        uint64_t v26 = sub_100037208(a1 + 136, (const void **)&buf);
        if (v85 < 0) {
          operator delete((void *)buf.n128_u64[0]);
        }
        if (v26)
        {
          sub_10000AC00(&buf, "NCP:Channel");
          uint64_t v27 = sub_10000ED88((uint64_t **)(a1 + 136), &buf);
          __p.n128_u8[0] = sub_1001472F4(v27);
          if (v85 < 0) {
            operator delete((void *)buf.n128_u64[0]);
          }
          if (((*(_DWORD *)(*(void *)(a1 + 56) + 73748LL) >> __p.n128_i8[0]) & 1) == 0)
          {
            uint64_t v28 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
            if (v28)
            {
              goto LABEL_276;
            }

            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              goto LABEL_275;
            }
            goto LABEL_276;
          }
        }

        else
        {
          sub_10000AC00(&buf, "NCP:ChannelMask");
          uint64_t v29 = sub_100037208(a1 + 136, (const void **)&buf);
          if (v85 < 0) {
            operator delete((void *)buf.n128_u64[0]);
          }
          if (v29)
          {
            sub_10000AC00(&buf, "NCP:ChannelMask");
            uint64_t v30 = sub_10000ED88((uint64_t **)(a1 + 136), &buf);
            int v31 = sub_1001472F4(v30);
            if (v85 < 0) {
              operator delete((void *)buf.n128_u64[0]);
            }
          }

          else
          {
            int v31 = *(_DWORD *)(*(void *)(a1 + 56) + 73748LL);
          }

          int v32 = *(_DWORD *)(*(void *)(a1 + 56) + 73748LL) & v31;
          if (!v32)
          {
            std::string v71 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
            if (v71)
            {
              goto LABEL_276;
            }

            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
LABEL_275:
            }
              sub_1001FB53C();
LABEL_276:
            unsigned int v13 = 2;
            goto LABEL_277;
          }

          if ((*(_DWORD *)(*(void *)(a1 + 56) + 73752LL) & v32) != 0) {
            unsigned int v33 = *(_DWORD *)(*(void *)(a1 + 56) + 73752LL) & v32;
          }
          else {
            unsigned int v33 = *(_DWORD *)(*(void *)(a1 + 56) + 73748LL) & v31;
          }
          do
          {
            sub_100124328(&__p, 1);
            unsigned __int8 v34 = __p.n128_u8[0];
            __p.n128_u8[0] &= 0x1Fu;
          }

          while (((v33 >> v34) & 1) == 0);
        }

        sub_100034C60("CiiC", (uint64_t *)&buf, 0x80u);
        sub_100006EFC(a1 + 104, &buf);
        v82.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
        sub_100006F6C((void ***)&v82);
        *(_WORD *)(a1 + 98) = 0;
        *(_WORD *)(a1 + 8) = 238;
        goto LABEL_104;
      }
    }

    else
    {
      if (v11)
      {
        if (v11 != 137) {
          goto LABEL_289;
        }
      }

      else
      {
        uint64_t v16 = *(void *)(a1 + 56);
        if (!*(_BYTE *)(v16 + 1376))
        {
          buf.n128_u64[0] = 0LL;
          (*(void (**)(uint64_t, uint64_t, __n128 *))(*(void *)a1 + 32LL))(a1, 3LL, &buf);
          goto LABEL_271;
        }

        if (sub_1000D8DE8(v16) == 2)
        {
          buf.n128_u64[0] = 0LL;
          (*(void (**)(uint64_t, uint64_t, __n128 *))(*(void *)a1 + 32LL))(a1, 4LL, &buf);
          goto LABEL_271;
        }

        sub_100159FC0(a1, 30.0);
        *(_WORD *)(a1 + 8) = 137;
      }

      int v17 = sub_1000D8DE8(*(void *)(a1 + 56));
      if (sub_1000B50E8(v17)
        || (*(unsigned int (**)(void))(**(void **)(a1 + 56) + 160LL))(*(void *)(a1 + 56)))
      {
        if (sub_100159F84(a1)) {
          return 0LL;
        }
        sub_10015A00C(a1);
        uint64_t v18 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v18)
        {
          uint64_t v19 = v18;
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FB53C();
        }

        unsigned int v13 = 1;
        goto LABEL_277;
      }

      sub_10015A00C(a1);
      int v20 = sub_1000D8DE8(*(void *)(a1 + 56));
      if (sub_1000B5098(v20))
      {
        buf.n128_u64[0] = 0LL;
        (*(void (**)(uint64_t, uint64_t, __n128 *))(*(void *)a1 + 32LL))(a1, 10LL, &buf);
        goto LABEL_271;
      }

      uint64_t v21 = *(void *)(a1 + 56) + 72792LL;
      buf.n128_u32[0] = 48;
      if (!sub_100007684(v21, (unsigned int *)&buf))
      {
        buf.n128_u64[0] = 0LL;
        (*(void (**)(uint64_t, uint64_t, __n128 *))(*(void *)a1 + 32LL))(a1, 14LL, &buf);
LABEL_271:
        if (buf.n128_u64[0]) {
          (*(void (**)(unint64_t))(*(void *)buf.n128_u64[0] + 8LL))(buf.n128_u64[0]);
        }
        goto LABEL_273;
      }

      *(_WORD *)(a1 + 8) = 158;
    }

    if (a2 == 2) {
      return 0LL;
    }
    uint64_t v22 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 24LL))(*(void *)(a1 + 56));
    (*(void (**)(uint64_t))(*(void *)v22 + 392LL))(v22);
    uint64_t v23 = *(void *)(a1 + 56);
    *(_DWORD *)(v23 + 74008) = 0;
    *(void *)(v23 + 74000) = 0LL;
    sub_100070BF0(v23, (void *)(v23 + 73952));
    uint64_t v24 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v24)
    {
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    *(_DWORD *)(a1 + 160) = sub_1000D8DE8(*(void *)(a1 + 56));
    sub_1000DA700(*(void *)(a1 + 56), 6LL);
    sub_100034C60("Ci", (uint64_t *)&buf, 0x80u);
    sub_100006EFC(a1 + 104, &buf);
    v82.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
    sub_100006F6C((void ***)&v82);
    *(_WORD *)(a1 + 98) = 0;
    *(_WORD *)(a1 + 8) = 174;
    goto LABEL_67;
  }

  if (v11 <= 364)
  {
    if (v11 > 330)
    {
      if (v11 != 331)
      {
        if (v11 != 349) {
          goto LABEL_289;
        }
        goto LABEL_34;
      }

      goto LABEL_177;
    }

    if (v11 != 299)
    {
      if (v11 != 317) {
        goto LABEL_289;
      }
      goto LABEL_165;
    }

    goto LABEL_153;
  }

  if (v11 <= 399)
  {
    if (v11 != 365)
    {
      if (v11 != 384) {
        goto LABEL_289;
      }
      goto LABEL_23;
    }

    goto LABEL_205;
  }

  switch(v11)
  {
    case 400:
LABEL_219:
      unsigned int v13 = *(_DWORD *)(a1 + 128);
      if (v13 && v13 != 10)
      {
        uint64_t v68 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v68)
        {
          goto LABEL_277;
        }

        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          goto LABEL_277;
        }
        goto LABEL_267;
      }

      sub_100034C60("Ciib", (uint64_t *)&buf, 0x80u);
      sub_100006EFC(a1 + 104, &buf);
      v82.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
      sub_100006F6C((void ***)&v82);
      *(_WORD *)(a1 + 98) = 0;
      *(_WORD *)(a1 + 8) = 412;
LABEL_223:
      unsigned int v13 = *(_DWORD *)(a1 + 128);
      if (!v13)
      {
        sub_100159FC0(a1, 60.0);
        unsigned int v13 = 0;
        *(_WORD *)(a1 + 8) = 422;
LABEL_230:
        int v64 = sub_1000D8DE8(*(void *)(a1 + 56));
        if (sub_1000B5098(v64))
        {
          sub_10015A00C(a1);
          buf.n128_u64[0] = 0LL;
          (*(void (**)(uint64_t, void, __n128 *))(*(void *)a1 + 32LL))(a1, 0LL, &buf);
          if (buf.n128_u64[0]) {
            (*(void (**)(unint64_t))(*(void *)buf.n128_u64[0] + 8LL))(buf.n128_u64[0]);
          }
          uint64_t v65 = *(void *)(a1 + 56);
          *(_BYTE *)(v65 + 73905) = 0;
          sub_100070C70(v65, (uint64_t *)(v65 + 73952));
          int v66 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v66)
          {
            if (sub_10015A058(5) && os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
            {
              unint64_t v67 = *(void *)(*(void *)(a1 + 56) + 73968LL);
              buf.n128_u32[0] = 134217984;
              *(unint64_t *)((char *)buf.n128_u64 + 4) = v67;
              _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_INFO,  "Finished Form Network Task, Time taken[%llu msec]",  (uint8_t *)&buf,  0xCu);
            }
          }

          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            sub_1001FB53C();
          }

          std::string v70 = *(void **)(a1 + 56);
          if (v70[9246] >> 4 >= 0x271uLL)
          {
            sub_10000AC00(v78, "Performance");
            sub_10000AC00(v76, "Data Stall");
            sub_10000AC00(v74, "Form Network Takes Long Time");
            (*(void (**)(void *, void **, void **, void **, void, uint64_t))(*v70 + 72LL))( v70,  v78,  v76,  v74,  0LL,  1LL);
            if (v75 < 0) {
              operator delete(v74[0]);
            }
            if (v77 < 0) {
              operator delete(v76[0]);
            }
            if (v79 < 0) {
              operator delete(v78[0]);
            }
          }

  if (sub_1000B55AC(a1, "associated:netwake-asleep")) {
    return 11LL;
  }
  if (sub_1000B55AC(v1, "associated:netwake-waking")) {
    return 10LL;
  }
  if (*((char *)v1 + 23) < 0)
  {
    uint64_t v1 = (void *)*v1;
    uint64_t result = strncmp((const char *)v1, "uninitialized", 0xDuLL);
    if (!(_DWORD)result) {
      return result;
    }
    if (strncmp((const char *)v1, "offline", 7uLL))
    {
      return 6LL;
    }
  }

  else
  {
    if (*(_DWORD *)v1 != 1818650223 || *(_DWORD *)((char *)v1 + 3) != 1701734764)
    {
      return 6LL;
    }
  }

  return 4LL;
}

      uint64_t v38 = *p_buf;
      uint64_t v37 = p_buf[1];
      if (v38 == 0x74656B6361507854LL && v37 == 0x5D395B746E756F43LL)
      {
        DWORD1(v99) = sub_1000BE984(4, uint64);
        goto LABEL_143;
      }

      uint64_t v36 = *p_buf;
      uint64_t v37 = *(uint64_t *)((char *)p_buf + 6);
      if (v36 == 0x6552746365726944LL && v37 == 0x5D395B7972746552LL)
      {
        uint64_t v62 = sub_1000BE984(4, uint64);
        goto LABEL_120;
      }

  uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_rxErrorInvalidFcs));
  [v3 setObject:v52 forKey:@"rx_error_invalid_fcs"];

  uint64_t v8 = self->_has;
  if ((*(_DWORD *)&v8 & 0x2000000) == 0)
  {
LABEL_47:
    if ((*(_DWORD *)&v8 & 0x80000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_106;
  }

  PBDataWriterWriteUint32Field(v7, self->_rxErrorInvalidFcs, 43LL);
  __int128 v6 = self->_has;
  if ((*(_DWORD *)&v6 & 0x2000000) == 0)
  {
LABEL_47:
    if ((*(_DWORD *)&v6 & 0x80000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_106;
  }

  v4[29] = self->_rxErrorInvalidFcs;
  *((void *)v4 + 31) |= 0x8000000uLL;
  __int128 v6 = self->_has;
  if ((*(_DWORD *)&v6 & 0x2000000) == 0)
  {
LABEL_47:
    if ((*(_DWORD *)&v6 & 0x80000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_106;
  }

  *((_DWORD *)v6 + 33) = self->_rxErrorRuntimeDelay;
  v6[31] |= 0x80000000uLL;
  uint64_t v10 = self->_has;
  if ((*(void *)&v10 & 0x100000000LL) == 0)
  {
LABEL_47:
    if ((*(_DWORD *)&v10 & 0x40000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_106;
  }

  uint64_t v18 = 0LL;
  if ((*(_DWORD *)&v4 & 0x40000) != 0)
  {
LABEL_52:
    uint64_t v19 = 2654435761LL * self->_rxErrorAborted;
    if ((*(_DWORD *)&v4 & 0x1000000) != 0) {
      goto LABEL_53;
    }
    goto LABEL_106;
  }

  self->_receivedFrames = v5[9];
  *(void *)&self->_has |= 0x80uLL;
  uint64_t v9 = *((void *)v5 + 31);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_51:
    if ((v9 & 0x10000000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_106;
  }

    uint64_t v36 = *p_buf;
    uint64_t v35 = p_buf[1];
    if (v36 == 0x74656B6361507854LL && v35 == 0x5D395B746E756F43LL)
    {
      DWORD1(v97) = sub_1000BE984(4, uint64);
      goto LABEL_143;
    }

    uint64_t v35 = *p_buf;
    uint64_t v36 = *(uint64_t *)((char *)p_buf + 6);
    if (v35 == 0x6552746365726944LL && v36 == 0x5D395B7972746552LL)
    {
      LODWORD(v61) = sub_1000BE984(4, uint64);
      goto LABEL_120;
    }

LABEL_273:
          uint64_t result = 2LL;
          break;
        }

        if (sub_100159F84(a1)) {
          return 0LL;
        }
        sub_10015A00C(a1);
        uint64_t v69 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v69)
        {
          goto LABEL_277;
        }

        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          goto LABEL_267;
        }
LABEL_277:
        if (v13 <= 1) {
          uint64_t v72 = 1LL;
        }
        else {
          uint64_t v72 = v13;
        }
        uint64_t v73 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v73)
        {
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FB53C();
        }

        buf.n128_u64[0] = 0LL;
        (*(void (**)(uint64_t, uint64_t, __n128 *))(*(void *)a1 + 32LL))(a1, v72, &buf);
        if (buf.n128_u64[0]) {
          (*(void (**)(unint64_t))(*(void *)buf.n128_u64[0] + 8LL))(buf.n128_u64[0]);
        }
        uint64_t result = 3LL;
        break;
      }

      uint64_t v63 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v63)
      {
        goto LABEL_277;
      }

      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_277;
      }
LABEL_267:
      sub_1001FB53C();
      goto LABEL_277;
    case 412:
      goto LABEL_223;
    case 422:
      unsigned int v13 = 1;
      goto LABEL_230;
  }

LABEL_289:
  *(_WORD *)(a1 + 8) = 0;
  return result;
}

void sub_1000A8C58( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, uint64_t a28, int a29, __int16 a30, char a31, char a32, void *__p, uint64_t a34, int a35, __int16 a36, char a37, char a38)
{
  uint64_t v40 = *(void *)(v38 - 80);
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8LL))(v40);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A8D90(void *a1)
{
  *a1 = off_1002B1650;
  sub_10000D448((uint64_t)(a1 + 17));
  return sub_100034374((uint64_t)a1);
}

void sub_1000A8DC0(void *a1)
{
  *a1 = off_1002B1650;
  sub_10000D448((uint64_t)(a1 + 17));
  int v2 = (void *)sub_100034374((uint64_t)a1);
  operator delete(v2);
}

uint64_t sub_1000A8DF4(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, __int16 a5)
{
  v10[0] = 0LL;
  sub_100007640((uint64_t)v10, a3);
  sub_1000342C8(a1, a2, v10);
  sub_100006E7C(v10);
  *(void *)a1 = &off_1002B16A0;
  *(_DWORD *)(a1 + 136) = a4;
  *(_WORD *)(a1 + 140) = a5;
  return a1;
}

void sub_1000A8E6C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000A8E84( uint64_t a1, unsigned int a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v49 = (int *)a3;
  unsigned int v11 = *(unsigned __int16 *)(a1 + 8);
  if (v11 > 0x4A)
  {
    if (v11 != 75)
    {
      if (v11 != 87) {
        goto LABEL_81;
      }
      goto LABEL_26;
    }

void sub_1000A9428( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8LL))(a16);
  }
  *(void *)(v16 - 40) = v16 - 72;
  sub_100006F6C((void ***)(v16 - 40));
  _Unwind_Resume(a1);
}

void sub_1000A9488(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100034374(a1);
  operator delete(v1);
}

void sub_1000A94A0(char *__s@<X0>, char *a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0LL;
  a3->__r_.__value_.__l.__size_ = 0LL;
  a3->__r_.__value_.__l.__cap_ = 0LL;
  memset(&v9, 0, sizeof(v9));
  if (__s && (sub_10000AC00(__p, __s), sub_10000D650(&v9, __p), SHIBYTE(v13) < 0))
  {
    operator delete(*(void **)__p);
    if (!a2) {
      goto LABEL_7;
    }
  }

  else if (!a2)
  {
    goto LABEL_7;
  }

  sub_10000AC00(__p, a2);
  sub_10000D650(&v9, __p);
  if (SHIBYTE(v13) < 0) {
    operator delete(*(void **)__p);
  }
LABEL_7:
  uint64_t v6 = sub_1000AA160((uint64_t)&unk_1002CA1A8, (const void **)&v9.__r_.__value_.__l.__data_);
  if ((_UNKNOWN *)v6 != &unk_1002CA1B0) {
    std::string::operator=(a3, (const std::string *)(v6 + 56));
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = &v9;
    if ((v9.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v7 = (std::string *)v9.__r_.__value_.__r.__words[0];
    }
    if ((char)a3->__r_.__value_.__s.__size_ < 0)
    {
      if (a3->__r_.__value_.__l.__size_) {
        uint64_t v8 = (const char *)a3->__r_.__value_.__r.__words[0];
      }
      else {
        uint64_t v8 = "Empty";
      }
    }

    else if (a3->__r_.__value_.__s.__size_)
    {
      uint64_t v8 = (const char *)a3;
    }

    else
    {
      uint64_t v8 = "Empty";
    }

    *(_DWORD *)__n128 __p = 136315906;
    *(void *)&__p[4] = __s;
    __int16 v11 = 2080;
    uint64_t v12 = a2;
    __int16 v13 = 2080;
    int v14 = v7;
    __int16 v15 = 2080;
    uint64_t v16 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "getEntitlementFromMethodName: method: %s, property_name: %s, serach_entitelement: %s, ret: %s",  __p,  0x2Au);
  }

void sub_1000A9658( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A96AC(xpc_object_t *a1, uint64_t a2)
{
  if (xpc_get_type(*a1) != (xpc_type_t)&_xpc_type_connection)
  {
LABEL_2:
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10020C598(a1, (uint64_t *)a2);
    }
    return 0LL;
  }

  pid_t pid = xpc_connection_get_pid((xpc_connection_t)*a1);
  if (getpid() != pid)
  {
    xpc_connection_get_audit_token(*a1, v16);
    uint64_t v7 = (void *)xpc_copy_entitlement_for_token(0LL, v16);
    xpc_object_t v8 = v7;
    if (v7)
    {
      xpc_object_t object = v7;
    }

    else
    {
      xpc_object_t v8 = xpc_null_create();
      xpc_object_t object = v8;
      if (!v8)
      {
        xpc_object_t v9 = xpc_null_create();
        xpc_object_t v8 = 0LL;
        goto LABEL_14;
      }
    }

    if (xpc_get_type(v8) == (xpc_type_t)&_xpc_type_dictionary)
    {
      xpc_retain(v8);
LABEL_15:
      xpc_release(v8);
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
      {
        sub_1000A9F28(&object, __p);
        uint64_t v10 = v19 >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)__n128 buf = 136315138;
        *(void *)&uint8_t buf[4] = v10;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "entitlements in Server: %s",  buf,  0xCu);
        if (v19 < 0) {
          operator delete(*(void **)__p);
        }
      }

      if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary)
      {
        uint64_t v12 = a2;
        *(void *)__n128 __p = &object;
        *(void *)&std::string __p[8] = v12;
        sub_1000A99D0((uint64_t)__p, buf);
        if (xpc_get_type(*(xpc_object_t *)buf) == (xpc_type_t)&_xpc_type_null) {
          int v11 = 0;
        }
        else {
          int v11 = xpc::dyn_cast_or_default((xpc *)buf, 0LL, v13);
        }
        xpc_release(*(xpc_object_t *)buf);
      }

      else
      {
        int v11 = 0;
      }

      xpc_release(object);
      if (!v11) {
        goto LABEL_2;
      }
      goto LABEL_30;
    }

    xpc_object_t v9 = xpc_null_create();
LABEL_14:
    xpc_object_t object = v9;
    goto LABEL_15;
  }

void sub_1000A9974(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

xpc_object_t sub_1000A99D0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t v3 = sub_1000A9F60(a1);
  *a2 = v3;
  if (v3) {
    return xpc_retain(v3);
  }
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

uint64_t sub_1000A9A0C(xpc_object_t *a1, xpc_object_t *a2, uint64_t a3)
{
  if (xpc_get_type(*a1) != (xpc_type_t)&_xpc_type_connection || xpc_get_type(*a2) != (xpc_type_t)&_xpc_type_dictionary) {
    return 1LL;
  }
  string = (char *)xpc_dictionary_get_string(*a2, "method");
  uint64_t v7 = (char *)xpc_dictionary_get_string(*a2, "property_name");
  sub_1000A94A0(string, v7, &__str);
  std::string::size_type size = __str.__r_.__value_.__s.__size_;
  if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    char v10 = 1;
    if ((__str.__r_.__value_.__s.__size_ & 0x80) == 0) {
      goto LABEL_14;
    }
LABEL_17:
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((v10 & 1) != 0) {
      return 1LL;
    }
    goto LABEL_18;
  }

  xpc_object_t v9 = *a1;
  xpc_object_t object = v9;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  std::string::basic_string(&v22, &__str);
  char v10 = sub_1000A96AC(&object, (uint64_t)&v22);
  xpc_release(object);
  xpc_object_t object = 0LL;
  if ((__str.__r_.__value_.__s.__size_ & 0x80) != 0) {
    goto LABEL_17;
  }
LABEL_14:
  if ((v10 & 1) != 0) {
    return 1LL;
  }
LABEL_18:
  xpc_object_t v12 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_object_t v13 = v12;
  if (v12)
  {
    xpc_object_t xdict = v12;
  }

  else
  {
    xpc_object_t v13 = xpc_null_create();
    xpc_object_t xdict = v13;
    if (!v13)
    {
      xpc_object_t v14 = xpc_null_create();
      xpc_object_t v13 = 0LL;
      goto LABEL_25;
    }
  }

  if (xpc_get_type(v13) != (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v14 = xpc_null_create();
LABEL_25:
    xpc_object_t xdict = v14;
    goto LABEL_26;
  }

  xpc_retain(v13);
  xpc_object_t v14 = v13;
LABEL_26:
  xpc_release(v13);
  xpc_dictionary_set_int64(v14, "ret", 33LL);
  if (string) {
    xpc_dictionary_set_string(xdict, "method", string);
  }
  if (v7) {
    xpc_dictionary_set_string(xdict, "property_name", v7);
  }
  if (*(void *)a3 && *(void *)(a3 + 8))
  {
    xpc_object_t v15 = xdict;
    if (xdict) {
      xpc_retain(xdict);
    }
    else {
      xpc_object_t v15 = xpc_null_create();
    }
    if (*(void *)a3) {
      uint64_t v16 = _Block_copy(*(const void **)a3);
    }
    else {
      uint64_t v16 = 0LL;
    }
    char v17 = *(dispatch_queue_s **)(a3 + 8);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)_NSConcreteStackBlock;
    __str.__r_.__value_.__l.__size_ = 1174405120LL;
    __str.__r_.__value_.__l.__cap_ = (std::string::size_type)sub_1000AA220;
    uint64_t v25 = &unk_1002B16E0;
    if (v16) {
      uint64_t v18 = _Block_copy(v16);
    }
    else {
      uint64_t v18 = 0LL;
    }
    int v28 = 5;
    aBlock = v18;
    xpc_object_t v27 = v15;
    if (v15) {
      xpc_retain(v15);
    }
    else {
      xpc_object_t v27 = xpc_null_create();
    }
    dispatch_async(v17, &__str);
    xpc_release(v27);
    xpc_object_t v27 = 0LL;
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v16) {
      _Block_release(v16);
    }
    xpc_release(v15);
  }

  xpc_object_t v19 = xpc_null_create();
  xpc_object_t v20 = xpc_null_create();
  xpc_release(xdict);
  xpc_release(v20);
  xpc_release(v19);
  return 0LL;
}

void sub_1000A9D58( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, xpc_object_t a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1000A9DAC(&a16);
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(a1);
}

xpc_object_t *sub_1000A9DAC(xpc_object_t *a1)
{
  *a1 = 0LL;
  return a1;
}

uint64_t sub_1000A9DDC(uint64_t a1, __int128 *a2, std::string *__str)
{
  __int128 v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *(void *)a2 = 0LL;
  std::string::basic_string((std::string *)(a1 + 24), __str);
  return a1;
}

void sub_1000A9E1C(_Unwind_Exception *exception_object)
{
}

void *sub_1000A9E38(void *a1, char *a2, const std::string *a3)
{
  uint64_t v5 = (std::string *)sub_10000AC00(a1, a2);
  std::string::basic_string(v5 + 1, a3);
  return a1;
}

void sub_1000A9E6C(_Unwind_Exception *exception_object)
{
}

void *sub_1000A9E88(void *a1, char *a2, const std::string *a3)
{
  uint64_t v5 = (std::string *)sub_10000AC00(a1, a2);
  std::string::basic_string(v5 + 1, a3);
  return a1;
}

void sub_1000A9EBC(_Unwind_Exception *exception_object)
{
}

void *sub_1000A9ED8(void *a1, char *a2, const std::string *a3)
{
  uint64_t v5 = (std::string *)sub_10000AC00(a1, a2);
  std::string::basic_string(v5 + 1, a3);
  return a1;
}

void sub_1000A9F0C(_Unwind_Exception *exception_object)
{
}

void sub_1000A9F28(xpc_object_t *a1@<X0>, void *a2@<X8>)
{
  xpc_object_t v3 = xpc_copy_description(*a1);
  sub_10000AC00(a2, v3);
  free(v3);
}

xpc_object_t sub_1000A9F60(uint64_t a1)
{
  return xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
}

uint64_t sub_1000A9F6C(uint64_t a1, std::string *a2, uint64_t a3)
{
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)a1 = a1 + 8;
  sub_1000A9FBC((const void **)a1, a2, &a2[2 * a3]);
  return a1;
}

void sub_1000A9FA8(_Unwind_Exception *a1)
{
}

const void **sub_1000A9FBC(const void **result, std::string *a2, std::string *a3)
{
  if (a2 != a3)
  {
    __int128 v4 = a2;
    uint64_t v5 = result;
    uint64_t v6 = (uint64_t)(result + 1);
    do
    {
      xpc_object_t result = (const void **)sub_1000AA014(v5, v6, (const void **)&v4->__r_.__value_.__l.__data_, v4);
      v4 += 2;
    }

    while (v4 != a3);
  }

  return result;
}

void *sub_1000AA014(const void **a1, uint64_t a2, const void **a3, const std::string *a4)
{
  uint64_t v6 = sub_10000C9A0(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (void *)*v6;
  if (!*v6)
  {
    xpc_object_t v8 = v6;
    sub_1000AA0A8((uint64_t)a1, a4, (uint64_t)v10);
    sub_10000AF70((uint64_t **)a1, (uint64_t)v12, (void **)v8, (void *)v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0LL;
    sub_100016868(v10, 0LL);
  }

  return v7;
}

std::string *sub_1000AA0A8@<X0>(uint64_t a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  xpc_object_t result = sub_1000AA110((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1000AA0F8(_Unwind_Exception *a1)
{
}

std::string *sub_1000AA110(std::string *a1, const std::string *a2)
{
  __int128 v4 = std::string::basic_string(a1, a2);
  std::string::basic_string(v4 + 1, a2 + 1);
  return a1;
}

void sub_1000AA144(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1000AA160(uint64_t a1, const void **a2)
{
  uint64_t v4 = a1 + 8;
  uint64_t v5 = sub_1000AA1C0(a1, a2, *(void *)(a1 + 8), a1 + 8);
  if (v4 != v5)
  {
    uint64_t v6 = v5;
  }

  return v4;
}

uint64_t sub_1000AA1C0(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v5 = a3;
    uint64_t v7 = a1 + 16;
    do
    {
      BOOL v8 = sub_10000AFC8(v7, (const void **)(v5 + 32), a2);
      xpc_object_t v9 = (uint64_t *)(v5 + 8);
      if (!v8)
      {
        xpc_object_t v9 = (uint64_t *)v5;
        a4 = v5;
      }

      uint64_t v5 = *v9;
    }

    while (*v9);
  }

  return a4;
}

void sub_1000AA220(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  xpc_object_t object = v2;
  if (v2) {
    xpc_retain(v2);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, void, xpc_object_t *))(v3 + 16))(v3, v1, &object);
  xpc_release(object);
}

void sub_1000AA280(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1000AA298()
{
  uint64_t v0 = sub_10000D650(&v112, (const std::string::value_type *)v110);
  __int128 v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  std::string::size_type cap = v0->__r_.__value_.__l.__cap_;
  __int128 v113 = v1;
  v0->__r_.__value_.__l.__size_ = 0LL;
  v0->__r_.__value_.__l.__cap_ = 0LL;
  v0->__r_.__value_.__r.__words[0] = 0LL;
  sub_1000A9DDC((uint64_t)v115, &v113, &stru_1002C9FB0);
  sub_10000AC00(&v107, "PropSet");
  sub_10000AC00(v105, "Network:PSKc");
  uint64_t v2 = sub_10000D650(&v107, (const std::string::value_type *)v105);
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  std::string::size_type v109 = v2->__r_.__value_.__l.__cap_;
  __int128 v108 = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  sub_1000A9DDC((uint64_t)&v116, &v108, &stru_1002C9FC8);
  sub_10000AC00(&v102, "PropGet");
  sub_10000AC00(v100, "Network:Key");
  uint64_t v4 = sub_10000D650(&v102, (const std::string::value_type *)v100);
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  std::string::size_type v104 = v4->__r_.__value_.__l.__cap_;
  __int128 v103 = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  sub_1000A9DDC((uint64_t)&v117, &v103, &stru_1002C9FE0);
  sub_10000AC00(&v97, "PropSet");
  sub_10000AC00(v95, "Network:Key");
  uint64_t v6 = sub_10000D650(&v97, (const std::string::value_type *)v95);
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  std::string::size_type v99 = v6->__r_.__value_.__l.__cap_;
  __int128 v98 = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  sub_1000A9DDC((uint64_t)&v118, &v98, &stru_1002C9FF8);
  sub_10000AC00(&v92, "setChannel");
  sub_10000AC00(v90, "setChannel");
  BOOL v8 = sub_10000D650(&v92, (const std::string::value_type *)v90);
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  std::string::size_type v94 = v8->__r_.__value_.__l.__cap_;
  __int128 v93 = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  sub_1000A9DDC((uint64_t)&v119, &v93, &stru_1002CA010);
  sub_1000A9E38(v120, "ServiceAdd", &stru_1002CA028);
  sub_1000A9E88(v121, "ServiceRemove", &stru_1002CA040);
  sub_1000A9E88(v122, "ConfigGateway", &stru_1002CA058);
  sub_1000A9ED8(v123, "UpdateAccessoryData", &stru_1002CA070);
  sub_10000AC00(&v87, "attachToNetwork");
  sub_10000AC00(v85, "attachToNetwork");
  char v10 = sub_10000D650(&v87, (const std::string::value_type *)v85);
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  std::string::size_type v89 = v10->__r_.__value_.__l.__cap_;
  __int128 v88 = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  sub_1000A9DDC((uint64_t)&v124, &v88, &stru_1002CA088);
  sub_10000AC00(&v82, "commissionOrFormNetwork");
  sub_10000AC00(v80, "commissionOrFormNetwork");
  xpc_object_t v12 = sub_10000D650(&v82, (const std::string::value_type *)v80);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  std::string::size_type v84 = v12->__r_.__value_.__l.__cap_;
  __int128 v83 = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  sub_1000A9DDC((uint64_t)&v125, &v83, &stru_1002CA0A0);
  sub_10000AC00(&v77, "threadStart");
  sub_10000AC00(v75, "threadStart");
  xpc_object_t v14 = sub_10000D650(&v77, (const std::string::value_type *)v75);
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  std::string::size_type v79 = v14->__r_.__value_.__l.__cap_;
  __int128 v78 = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  sub_1000A9DDC((uint64_t)&v126, &v78, &stru_1002CA0B8);
  sub_10000AC00(&v72, "threadLeave");
  sub_10000AC00(v70, "threadLeave");
  uint64_t v16 = sub_10000D650(&v72, (const std::string::value_type *)v70);
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  std::string::size_type v74 = v16->__r_.__value_.__l.__cap_;
  __int128 v73 = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  sub_1000A9DDC((uint64_t)&v127, &v73, &stru_1002CA0D0);
  sub_10000AC00(&v67, "provideEmac");
  sub_10000AC00(v65, "provideEmac");
  uint64_t v18 = sub_10000D650(&v67, (const std::string::value_type *)v65);
  __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  std::string::size_type v69 = v18->__r_.__value_.__l.__cap_;
  __int128 v68 = v19;
  v18->__r_.__value_.__l.__size_ = 0LL;
  v18->__r_.__value_.__l.__cap_ = 0LL;
  v18->__r_.__value_.__r.__words[0] = 0LL;
  sub_1000A9DDC((uint64_t)&v128, &v68, &stru_1002CA118);
  sub_10000AC00(&v62, "startPairing");
  sub_10000AC00(v60, "startPairing");
  xpc_object_t v20 = sub_10000D650(&v62, (const std::string::value_type *)v60);
  __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  std::string::size_type v64 = v20->__r_.__value_.__l.__cap_;
  __int128 v63 = v21;
  v20->__r_.__value_.__l.__size_ = 0LL;
  v20->__r_.__value_.__l.__cap_ = 0LL;
  v20->__r_.__value_.__r.__words[0] = 0LL;
  sub_1000A9DDC((uint64_t)&v129, &v63, &stru_1002CA130);
  sub_10000AC00(&v57, "stopPairing");
  sub_10000AC00(v55, "stopPairing");
  std::string v22 = sub_10000D650(&v57, (const std::string::value_type *)v55);
  __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  std::string::size_type v59 = v22->__r_.__value_.__l.__cap_;
  __int128 v58 = v23;
  v22->__r_.__value_.__l.__size_ = 0LL;
  v22->__r_.__value_.__l.__cap_ = 0LL;
  v22->__r_.__value_.__r.__words[0] = 0LL;
  sub_1000A9DDC((uint64_t)&v130, &v58, &stru_1002CA148);
  sub_10000AC00(&v52, "updatePrimaryResident");
  sub_10000AC00(v50, "updatePrimaryResident");
  uint64_t v24 = sub_10000D650(&v52, (const std::string::value_type *)v50);
  __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  std::string::size_type v54 = v24->__r_.__value_.__l.__cap_;
  __int128 v53 = v25;
  v24->__r_.__value_.__l.__size_ = 0LL;
  v24->__r_.__value_.__l.__cap_ = 0LL;
  v24->__r_.__value_.__r.__words[0] = 0LL;
  sub_1000A9DDC((uint64_t)&v131, &v53, &stru_1002CA0E8);
  sub_10000AC00(&v47, "getTriggerBasedStats");
  sub_10000AC00(v45, "getTriggerBasedStats");
  uint64_t v26 = sub_10000D650(&v47, (const std::string::value_type *)v45);
  __int128 v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  std::string::size_type v49 = v26->__r_.__value_.__l.__cap_;
  __int128 v48 = v27;
  v26->__r_.__value_.__l.__size_ = 0LL;
  v26->__r_.__value_.__l.__cap_ = 0LL;
  v26->__r_.__value_.__r.__words[0] = 0LL;
  sub_1000A9DDC((uint64_t)&v132, &v48, &stru_1002CA100);
  sub_10000AC00(&v42, "startFWUpdate");
  sub_10000AC00(v40, "startFWUpdate");
  int v28 = sub_10000D650(&v42, (const std::string::value_type *)v40);
  __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  std::string::size_type v44 = v28->__r_.__value_.__l.__cap_;
  __int128 v43 = v29;
  v28->__r_.__value_.__l.__size_ = 0LL;
  v28->__r_.__value_.__l.__cap_ = 0LL;
  v28->__r_.__value_.__r.__words[0] = 0LL;
  sub_1000A9DDC((uint64_t)&v133, &v43, &stru_1002CA160);
  sub_10000AC00(&v37, "stopFWUpdate");
  sub_10000AC00(v35, "stopFWUpdate");
  uint64_t v30 = sub_10000D650(&v37, (const std::string::value_type *)v35);
  __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  std::string::size_type v39 = v30->__r_.__value_.__l.__cap_;
  *(_OWORD *)__n128 __p = v31;
  v30->__r_.__value_.__l.__size_ = 0LL;
  v30->__r_.__value_.__l.__cap_ = 0LL;
  v30->__r_.__value_.__r.__words[0] = 0LL;
  sub_1000A9DDC((uint64_t)&v134, (__int128 *)__p, &stru_1002CA178);
  sub_1000A9F6C((uint64_t)&unk_1002CA1A8, v115, 20LL);
  uint64_t v32 = 40LL;
  do
  {
    __n128 v33 = &v115[v32];
    v32 -= 2LL;
  }

  while (v32 * 24);
  if (SHIBYTE(v39) < 0) {
    operator delete(__p[0]);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  if (SHIBYTE(v44) < 0) {
    operator delete((void *)v43);
  }
  if (v41 < 0) {
    operator delete(v40[0]);
  }
  if (SHIBYTE(v49) < 0) {
    operator delete((void *)v48);
  }
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  if (SHIBYTE(v54) < 0) {
    operator delete((void *)v53);
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  if (SHIBYTE(v59) < 0) {
    operator delete((void *)v58);
  }
  if (v56 < 0) {
    operator delete(v55[0]);
  }
  if (SHIBYTE(v64) < 0) {
    operator delete((void *)v63);
  }
  if (v61 < 0) {
    operator delete(v60[0]);
  }
  if (SHIBYTE(v69) < 0) {
    operator delete((void *)v68);
  }
  if (v66 < 0) {
    operator delete(v65[0]);
  }
  if (SHIBYTE(v74) < 0) {
    operator delete((void *)v73);
  }
  if (v71 < 0) {
    operator delete(v70[0]);
  }
  if (SHIBYTE(v79) < 0) {
    operator delete((void *)v78);
  }
  if (v76 < 0) {
    operator delete(v75[0]);
  }
  if (SHIBYTE(v84) < 0) {
    operator delete((void *)v83);
  }
  if (v81 < 0) {
    operator delete(v80[0]);
  }
  if (SHIBYTE(v89) < 0) {
    operator delete((void *)v88);
  }
  if (v86 < 0) {
    operator delete(v85[0]);
  }
  if (SHIBYTE(v94) < 0) {
    operator delete((void *)v93);
  }
  if (v91 < 0) {
    operator delete(v90[0]);
  }
  if (SHIBYTE(v99) < 0) {
    operator delete((void *)v98);
  }
  if (v96 < 0) {
    operator delete(v95[0]);
  }
  if (SHIBYTE(v104) < 0) {
    operator delete((void *)v103);
  }
  if (v101 < 0) {
    operator delete(v100[0]);
  }
  if (SHIBYTE(v109) < 0) {
    operator delete((void *)v108);
  }
  if (v106 < 0) {
    operator delete(v105[0]);
  }
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v113);
  }
  if (v111 < 0) {
    operator delete(v110[0]);
  }
  return __cxa_atexit((void (*)(void *))sub_1000A949C, &unk_1002CA1A8, (void *)&_mh_execute_header);
}

void sub_1000AB044( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, void *a36, uint64_t a37, int a38, __int16 a39, char a40, char a41, uint64_t a42, uint64_t a43, int a44, __int16 a45, char a46, char a47, uint64_t a48, uint64_t a49, uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,uint64_t a62,int a63)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a47 < 0) {
    operator delete(*v80);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (a66 < 0) {
    operator delete(v80[10]);
  }
  if (a54 < 0) {
    operator delete(v80[4]);
  }
  if (a60 < 0) {
    operator delete(v80[7]);
  }
  if (a74 < 0) {
    operator delete(v80[20]);
  }
  if (a72 < 0) {
    operator delete(v80[14]);
  }
  if (a73 < 0) {
    operator delete(v80[17]);
  }
  if (a77 < 0) {
    operator delete(v80[30]);
  }
  if (a75 < 0) {
    operator delete(v80[24]);
  }
  if (a76 < 0) {
    operator delete(v80[27]);
  }
  if (a80 < 0) {
    operator delete(v80[40]);
  }
  if (a78 < 0) {
    operator delete(v80[34]);
  }
  if (a79 < 0) {
    operator delete(v80[37]);
  }
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete(v80[50]);
  }
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(v80[44]);
  }
  if (SLOBYTE(STACK[0x21F]) < 0) {
    operator delete(v80[47]);
  }
  if (SLOBYTE(STACK[0x287]) < 0) {
    operator delete(v80[60]);
  }
  if (SLOBYTE(STACK[0x257]) < 0) {
    operator delete(v80[54]);
  }
  if (SLOBYTE(STACK[0x26F]) < 0) {
    operator delete(v80[57]);
  }
  if (SLOBYTE(STACK[0x2D7]) < 0) {
    operator delete(v80[70]);
  }
  if (SLOBYTE(STACK[0x2A7]) < 0) {
    operator delete(v80[64]);
  }
  if (SLOBYTE(STACK[0x2BF]) < 0) {
    operator delete(v80[67]);
  }
  if (SLOBYTE(STACK[0x327]) < 0) {
    operator delete(v80[80]);
  }
  if (SLOBYTE(STACK[0x2F7]) < 0) {
    operator delete(v80[74]);
  }
  if (SLOBYTE(STACK[0x30F]) < 0) {
    operator delete(v80[77]);
  }
  if (SLOBYTE(STACK[0x377]) < 0) {
    operator delete(v80[90]);
  }
  if (SLOBYTE(STACK[0x347]) < 0) {
    operator delete(v80[84]);
  }
  if (SLOBYTE(STACK[0x35F]) < 0) {
    operator delete(v80[87]);
  }
  if (SLOBYTE(STACK[0x3C7]) < 0) {
    operator delete(v80[100]);
  }
  if (SLOBYTE(STACK[0x397]) < 0) {
    operator delete(v80[94]);
  }
  if (SLOBYTE(STACK[0x3AF]) < 0) {
    operator delete(v80[97]);
  }
  if (SLOBYTE(STACK[0x417]) < 0) {
    operator delete(v80[110]);
  }
  if (SLOBYTE(STACK[0x3E7]) < 0) {
    operator delete(v80[104]);
  }
  if (SLOBYTE(STACK[0x3FF]) < 0) {
    operator delete(v80[107]);
  }
  if (SLOBYTE(STACK[0x467]) < 0) {
    operator delete(v80[120]);
  }
  if (SLOBYTE(STACK[0x437]) < 0) {
    operator delete(v80[114]);
  }
  if (SLOBYTE(STACK[0x44F]) < 0) {
    operator delete(v80[117]);
  }
  if (SLOBYTE(STACK[0x4B7]) < 0) {
    operator delete(v80[130]);
  }
  if (SLOBYTE(STACK[0x487]) < 0) {
    operator delete(v80[124]);
  }
  if (SLOBYTE(STACK[0x49F]) < 0) {
    operator delete(v80[127]);
  }
  if (SLOBYTE(STACK[0x507]) < 0) {
    operator delete(v80[140]);
  }
  if (SLOBYTE(STACK[0x4D7]) < 0) {
    operator delete(v80[134]);
  }
  if (SLOBYTE(STACK[0x4EF]) < 0) {
    operator delete(v80[137]);
  }
  _Unwind_Resume(a1);
}

void sub_1000AB478()
{
}

void sub_1000AB488()
{
}

void sub_1000AB498()
{
}

void sub_1000AB4A8()
{
}

void sub_1000AB4B8()
{
}

void sub_1000AB4C8()
{
}

void sub_1000AB4D8()
{
}

void sub_1000AB4E8()
{
}

void sub_1000AB4F8()
{
}

void sub_1000AB508()
{
}

void sub_1000AB518()
{
}

void sub_1000AB528()
{
}

void sub_1000AB538()
{
}

void sub_1000AB548()
{
}

void sub_1000AB558()
{
}

void sub_1000AB568()
{
}

void sub_1000AB578()
{
}

void sub_1000AB588()
{
}

void sub_1000AB598()
{
}

void sub_1000AB5A8()
{
}

void sub_1000AB5B8()
{
}

void sub_1000AB5C8()
{
}

void sub_1000AB5D8()
{
}

void sub_1000AB5E8()
{
}

void sub_1000AB5F8()
{
}

void sub_1000AB608()
{
}

void sub_1000AB618()
{
}

void sub_1000AB628()
{
}

void sub_1000AB638()
{
}

void sub_1000AB648()
{
}

void sub_1000AB658()
{
}

void sub_1000AB668()
{
}

void sub_1000AB678()
{
}

void sub_1000AB688()
{
}

void sub_1000AB698()
{
}

void sub_1000AB6A8()
{
}

void sub_1000AB6B8()
{
}

void sub_1000AB6C8()
{
}

void sub_1000AB6D8()
{
}

void sub_1000AB6E8()
{
}

void sub_1000AB6F8()
{
}

void sub_1000AB708()
{
}

void sub_1000AB718()
{
}

void sub_1000AB728()
{
}

void sub_1000AB738()
{
}

void sub_1000AB748()
{
}

void sub_1000AB758()
{
}

void sub_1000AB768()
{
}

void sub_1000AB778()
{
}

void sub_1000AB788()
{
}

void sub_1000AB798()
{
}

void sub_1000AB7AC()
{
}

void sub_1000AB7C0()
{
}

void sub_1000AB7D4()
{
}

void sub_1000AB7DC()
{
}

uint64_t sub_1000AB7E8()
{
  if ((byte_1002CA1C0 & 1) == 0) {
    byte_1002CA1C0 = 1;
  }
  return 0LL;
}

uint64_t spinel_datatype_iter_start(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  return 0LL;
}

size_t spinel_datatype_iter_next(uint64_t a1)
{
  __int128 v1 = *(char **)a1;
  int v2 = *(_DWORD *)(a1 + 8);
  __int128 v3 = *(char **)(a1 + 16);
  if (*(void *)a1) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || v3 == 0LL) {
    return 15LL;
  }
  size_t v8 = v2;
  int v9 = *(_DWORD *)(a1 + 12);
  uint64_t v10 = *(void *)(a1 + 24);
  packed_datatype = spinel_next_packed_datatype(*(_BYTE **)(a1 + 16));
  __int128 v17 = packed_datatype;
  int v18 = *v3;
  size_t result = 9LL;
  if (v18 <= 84)
  {
    switch(*v3)
    {
      case 'A':
      case 'D':
        if (v3[1] != 41 && v17 != 0LL) {
          goto LABEL_25;
        }
        int v19 = 0;
        xpc_object_t v20 = &v1[v8];
        if (!v17) {
          goto LABEL_69;
        }
        goto LABEL_55;
      case 'B':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
        return result;
      case 'C':
LABEL_33:
        int v19 = v8 - 1;
        if (!v8)
        {
LABEL_74:
          __break(0x5515u);
LABEL_75:
          __break(0x5500u);
          return result;
        }

        xpc_object_t v20 = v1 + 1;
        if (v17) {
          goto LABEL_55;
        }
        goto LABEL_69;
      case 'E':
        if (v8 > 7)
        {
          int v19 = v8 - 8;
          xpc_object_t v20 = v1 + 8;
          goto LABEL_54;
        }

        std::string v22 = __stderrp;
        __int128 v23 = "scratchpad.data_len >= sizeof(spinel_eui64_t)";
        int v24 = 114;
        goto LABEL_70;
      case 'L':
LABEL_36:
        if (v8 > 3)
        {
          int v19 = v8 - 4;
          xpc_object_t v20 = v1 + 4;
          goto LABEL_54;
        }

        std::string v22 = __stderrp;
        __int128 v23 = "scratchpad.data_len >= sizeof(uint32_t)";
        int v24 = 102;
        goto LABEL_70;
      default:
        if (v18 != 54)
        {
          if (v18 != 83) {
            return result;
          }
          goto LABEL_31;
        }

        if (v8 > 0xF)
        {
          int v19 = v8 - 16;
          xpc_object_t v20 = v1 + 16;
          goto LABEL_54;
        }

        std::string v22 = __stderrp;
        __int128 v23 = "scratchpad.data_len >= sizeof(spinel_ipv6addr_t)";
        int v24 = 108;
        break;
    }

    goto LABEL_70;
  }

  if (v18 > 114)
  {
    if (v18 == 115)
    {
LABEL_31:
      if (v8 > 1)
      {
        int v19 = v8 - 2;
        xpc_object_t v20 = v1 + 2;
LABEL_54:
        if (!v17) {
          goto LABEL_69;
        }
        goto LABEL_55;
      }

      std::string v22 = __stderrp;
      __int128 v23 = "scratchpad.data_len >= sizeof(uint16_t)";
      int v24 = 95;
    }

    else
    {
      if (v18 != 116) {
        return result;
      }
LABEL_25:
      LODWORD(result) = spinel_datatype_unpack(v1, v8, "t()", v12, v13, v14, v15, v16, v28);
      if ((int)result <= 0)
      {
        std::string v22 = __stderrp;
        __int128 v23 = "block_len > 0";
        int v24 = 164;
      }

      else if (result >= 0x514)
      {
        std::string v22 = __stderrp;
        __int128 v23 = "block_len < 1300";
        int v24 = 165;
      }

      else
      {
        if ((int)v8 >= (int)result)
        {
          int v19 = v8 - result;
          goto LABEL_68;
        }

        std::string v22 = __stderrp;
        __int128 v23 = "scratchpad.data_len >= block_len";
        int v24 = 166;
      }
    }

uint64_t spinel_datatype_iter_open_container( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(int *)(result + 8) <= 2)
  {
    uint64_t v14 = __stderrp;
    uint64_t v15 = "iter->data_len > 2";
    int v16 = 213;
    goto LABEL_15;
  }

  int v8 = **(unsigned __int8 **)(result + 16);
  if (v8 != 65)
  {
    if (v8 != 116) {
      return 9LL;
    }
    __int128 v9 = *(_OWORD *)(result + 16);
    *(_OWORD *)a2 = *(_OWORD *)result;
    *(_OWORD *)(a2 + 16) = v9;
    uint64_t v10 = *(void *)(a2 + 16);
    if (*(_BYTE *)(v10 + 1) == 40)
    {
      *(_BYTE *)(a2 + 24) = **(_BYTE **)(result + 16);
      *(void *)(a2 + 16) = v10 + 2;
      int v11 = *(char *)(v10 + 3);
      if (*(_BYTE *)(v10 + 3))
      {
        int v12 = 0;
        do
        {
          if ((v11 == 41 || v11 == 40) && __OFADD__(v12++, 1))
          {
            __break(0x5500u);
            return result;
          }
        }

        while (v12);
        if (v11 != 41) {
          goto LABEL_19;
        }
        *(void *)(a2 + 16) = v10 + 4;
        uint64_t v14 = __stderrp;
        uint64_t v15 = "block_len > 0";
        int v16 = 251;
      }

      else
      {
LABEL_19:
        uint64_t v14 = __stderrp;
        uint64_t v15 = "subiter->pack_format[1] == ')'";
        int v16 = 240;
      }
    }

    else
    {
      uint64_t v14 = __stderrp;
      uint64_t v15 = "subiter->pack_format[1] == '('";
      int v16 = 227;
    }

uint64_t spinel_datatype_iter_unpack( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  int v11 = &a9;
  v10[0] = **(_BYTE **)(a1 + 16);
  v10[1] = 0;
  return ((int)spinel_datatype_vunpack(*(_WORD **)a1, *(unsigned int *)(a1 + 8), v10, &a9) >> 31) & 9;
}

uint64_t spinel_datatype_iter_vunpack(uint64_t a1, void **a2)
{
  return ((int)spinel_datatype_vunpack(*(_WORD **)a1, *(unsigned int *)(a1 + 8), *(unsigned __int8 **)(a1 + 16), a2) >> 31) & 9;
}

uint64_t spinel_datatype_iter_get_type(uint64_t a1)
{
  __int128 v1 = *(_BYTE **)(a1 + 16);
  if (v1) {
    LOBYTE(v1) = *v1;
  }
  return (char)v1;
}

uint64_t spinel_cmd_prop_value_set_uint( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return spinel_datatype_pack(a1, a2, (uint64_t)"Ciii", a4, a5, a6, a7, a8, 128LL);
}

uint64_t spinel_cmd_prop_value_set_data( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return spinel_datatype_pack(a1, a2, (uint64_t)"CiiD", a4, a5, a6, a7, a8, 128LL);
}

uint64_t spinel_cmd_prop_value_set_utf8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return spinel_datatype_pack(a1, a2, (uint64_t)"CiiD", a4, a5, a6, a7, a8, 128LL);
}

uint64_t spinel_cmd_prop_value_set_uint16( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return spinel_datatype_pack(a1, a2, (uint64_t)"CiiS", a4, a5, a6, a7, a8, 128LL);
}

uint64_t spinel_cmd_prop_value_set_ipv6addr( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return spinel_datatype_pack(a1, a2, (uint64_t)"Cii6", a4, a5, a6, a7, a8, 128LL);
}

uint64_t spinel_cmd_prop_value_set_eui64( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return spinel_datatype_pack(a1, a2, (uint64_t)"CiiE", a4, a5, a6, a7, a8, 128LL);
}

uint64_t spinel_cmd_prop_value_get( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return spinel_datatype_pack(a1, a2, (uint64_t)"Cii", a4, a5, a6, a7, a8, 128LL);
}

uint64_t sub_1000ABF2C(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  v8[0] = 0LL;
  sub_100007640((uint64_t)v8, a3);
  sub_1000342C8(a1, a2, v8);
  sub_100006E7C(v8);
  *(void *)a1 = &off_1002B1720;
  *(_BYTE *)(a1 + 136) = a4;
  return a1;
}

void sub_1000ABF9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000ABFB4( uint64_t a1, unsigned int a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11 = *(unsigned __int16 *)(a1 + 8);
  uint64_t result = 3LL;
  if (v11 > 71)
  {
    if (v11 != 72)
    {
      if (v11 != 76) {
        goto LABEL_49;
      }
      goto LABEL_24;
    }

void sub_1000AC2F8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8LL))(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000AC328(uint64_t a1)
{
  __int128 v1 = (void *)sub_100034374(a1);
  operator delete(v1);
}

void sub_1000AC33C(uint64_t a1)
{
  int v2 = (char *)(a1 + 68758);
  __int128 v3 = (__int16 *)(a1 + 232);
  int v92 = 0;
  BOOL v4 = (uint64_t *)(a1 + 216);
  uint64_t v5 = sub_1000ACC28((uint64_t *)(a1 + 216));
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 112LL))(v5))
  {
    uint64_t v6 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v6)
    {
      __int128 v7 = v6;
      if (sub_10015A058(5) && os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)__n128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[-NCP-]: Socket Reset", buf, 2u);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    *((void *)v3 + 50) = 0LL;
    *((_OWORD *)v3 + 23) = 0u;
    *((_OWORD *)v3 + 24) = 0u;
    *((_OWORD *)v3 + 21) = 0u;
    *((_OWORD *)v3 + 22) = 0u;
    *((_OWORD *)v3 + 19) = 0u;
    *((_OWORD *)v3 + 20) = 0u;
    *((_OWORD *)v3 + 17) = 0u;
    *((_OWORD *)v3 + 18) = 0u;
    *((_OWORD *)v3 + 15) = 0u;
    *((_OWORD *)v3 + 16) = 0u;
    *((_OWORD *)v3 + 13) = 0u;
    *((_OWORD *)v3 + 14) = 0u;
    *((_OWORD *)v3 + 11) = 0u;
    *((_OWORD *)v3 + 12) = 0u;
    *((_OWORD *)v3 + 9) = 0u;
    *((_OWORD *)v3 + std::string::push_back(&v23, 10) = 0u;
    *((_OWORD *)v3 + 7) = 0u;
    *((_OWORD *)v3 + 8) = 0u;
    *((_OWORD *)v3 + 5) = 0u;
    *((_OWORD *)v3 + 6) = 0u;
    *((_OWORD *)v3 + 3) = 0u;
    *((_OWORD *)v3 + 4) = 0u;
    *((_OWORD *)v3 + 1) = 0u;
    *((_OWORD *)v3 + 2) = 0u;
    *(_OWORD *)__int128 v3 = 0u;
    sub_10011D8C0((uint64_t)v3);
    *(void *)(a1 + 1040) = 0LL;
    *(_OWORD *)(a1 + 1008) = 0u;
    *(_OWORD *)(a1 + 1024) = 0u;
    *(_OWORD *)(a1 + 976) = 0u;
    *(_OWORD *)(a1 + 992) = 0u;
    *(_OWORD *)(a1 + 944) = 0u;
    *(_OWORD *)(a1 + 960) = 0u;
    *(_OWORD *)(a1 + 912) = 0u;
    *(_OWORD *)(a1 + 928) = 0u;
    *(_OWORD *)(a1 + 880) = 0u;
    *(_OWORD *)(a1 + 896) = 0u;
    *(_OWORD *)(a1 + 848) = 0u;
    *(_OWORD *)(a1 + 864) = 0u;
    *(_OWORD *)(a1 + 816) = 0u;
    *(_OWORD *)(a1 + 832) = 0u;
    *(_OWORD *)(a1 + 784) = 0u;
    *(_OWORD *)(a1 + 800) = 0u;
    *(_OWORD *)(a1 + 752) = 0u;
    *(_OWORD *)(a1 + 768) = 0u;
    *(_OWORD *)(a1 + 720) = 0u;
    *(_OWORD *)(a1 + 736) = 0u;
    *(_OWORD *)(a1 + 688) = 0u;
    *(_OWORD *)(a1 + 704) = 0u;
    *(_OWORD *)(a1 + 656) = 0u;
    *(_OWORD *)(a1 + 672) = 0u;
    *(_OWORD *)(a1 + 640) = 0u;
    sub_10011D8C0(a1 + 640);
    sub_10015A014(a1 + 32, 30923LL, v8, v9, v10, v11, v12, v13, v90);
  }

  __int16 v14 = 0;
  unsigned int v15 = (unsigned __int16)*v3;
  if (v15 > 0xE0)
  {
    if (v15 == 225) {
      goto LABEL_24;
    }
    if (v15 == 231) {
      goto LABEL_91;
    }
    goto LABEL_22;
  }

  if (!*v3) {
    goto LABEL_19;
  }
  if (v15 != 170) {
    goto LABEL_22;
  }
  uint64_t v16 = sub_1000ACC28(v4);
  unsigned int v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 72LL))(v16);
  if ((sub_1000F3F58((int)v3, v17) & 1) != 0
    || (uint64_t v18 = sub_1000ACC28(v4), (*(unsigned int (**)(uint64_t))(*(void *)v18 + 40LL))(v18)))
  {
    uint64_t v19 = sub_1000ACC28(v4);
    unsigned int v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 72LL))(v19);
    sub_10011D904((uint64_t)v3, v20);
    *(_DWORD *)(v2 + 2) = 0;
    *((_WORD *)v2 + 11) = -1;
    while (1)
    {
      do
      {
        uint64_t v24 = sub_1000ACC28(v4);
        unsigned int v25 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 72LL))(v24);
        sub_10011DA1C((uint64_t)v3, v25);
        __int16 *v3 = 225;
LABEL_24:
        uint64_t v26 = sub_1000ACC28(v4);
        unsigned int v27 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 72LL))(v26);
        if ((sub_1000F3F58((int)v3, v27) & 1) == 0)
        {
          uint64_t v28 = sub_1000ACC28(v4);
        }

        uint64_t v29 = sub_1000ACC28(v4);
        unsigned int v30 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 72LL))(v29);
        sub_10011D904((uint64_t)v3, v30);
        uint64_t v31 = sub_1000ACC28(v4);
        uint64_t v32 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)v31 + 24LL))(v31, &v91, 1LL);
        uint64_t v38 = v32;
        if (v32 < 0)
        {
          uint64_t v40 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (!v40)
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
LABEL_37:
            }
              sub_1001FB53C();
            goto LABEL_39;
          }

          char v41 = v40;
          if (sub_10015A058(3) && os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
          {
            uint64_t v42 = -v38;
            if (__OFSUB__(0LL, v38)) {
              goto LABEL_115;
            }
LABEL_35:
            sub_10020C828(v42);
          }

LABEL_114:
        __break(0x5512u);
LABEL_115:
        __break(0x550Du);
        return;
      }

          unsigned int v20 = *(void *)&__p[8];
        }

        if (v20 != 22) {
          goto LABEL_140;
        }
        if (**(void **)__p == 0x65727275635F7369LL
          && *(void *)(*(void *)__p + 8LL) == 0x5F65646F6E5F746ELL
          && *(void *)(*(void *)__p + 14LL) == 0x746E657261705F65LL)
        {
LABEL_162:
          int v57 = xpc_dictionary_get_BOOL(v17, "value");
          *((_BYTE *)&unk_1002CA1D0 + v15 + 375) = v57;
          goto LABEL_185;
        }

        unsigned int v20 = *(void *)&__p[8];
        if (*(void *)&__p[8] != 22LL) {
          goto LABEL_140;
        }
        if (**(void **)__p == 0x6F6E6B5F7473616CLL
          && *(void *)(*(void *)__p + 8LL) == 0x63697665645F6E77LL
          && *(void *)(*(void *)__p + 14LL) == 0x656C6F725F656369LL)
        {
LABEL_174:
          uint64_t v66 = (char *)xpc_dictionary_get_string(v17, "value");
          sub_10000AC00(&__str, v66);
          std::string::operator=((std::string *)((char *)&unk_1002CA1D0 + v15 + 272), &__str);
LABEL_101:
          goto LABEL_185;
        }

        if ((v100 & 0x80) == 0)
        {
LABEL_132:
          if (v100 != 10) {
            goto LABEL_151;
          }
LABEL_133:
          if ((v100 & 0x80) == 0)
          {
            if (v100 == 10)
            {
              __int16 v45 = __p;
              goto LABEL_147;
            }

            goto LABEL_151;
          }
        }

        else
        {
LABEL_140:
          if (v20 != 10) {
            goto LABEL_151;
          }
          if (**(void **)__p == 0x756C6961665F7872LL && *(_WORD *)(*(void *)__p + 8LL) == 25970)
          {
LABEL_164:
            int v58 = xpc_dictionary_get_uint64(v17, "value");
            std::string::size_type v59 = sub_1000BE984(3, v58);
            *(_DWORD *)((char *)&unk_1002CA1D0 + v15 + 344) = v59;
            goto LABEL_185;
          }
        }

        if (*(void *)&__p[8] == 10LL)
        {
          __int16 v45 = *(_BYTE **)__p;
LABEL_147:
          std::string v47 = *(void *)v45;
          __int128 v48 = *((unsigned __int16 *)v45 + 4);
          if (v47 == 0x65636375735F7872LL && v48 == 29555)
          {
            uint64_t v64 = xpc_dictionary_get_uint64(v17, "value");
            uint64_t v65 = sub_1000BE984(3, v64);
            *(_DWORD *)((char *)&unk_1002CA1D0 + v15 + 340) = v65;
            goto LABEL_185;
          }
        }

  std::string v62 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_rxErrorAckDenied));
  [v3 setObject:v62 forKey:@"rx_error_ack_denied"];

  uint64_t v8 = self->_has;
  if ((*(_DWORD *)&v8 & 0x80000) == 0)
  {
LABEL_57:
    if ((*(void *)&v8 & 0x200000000LL) == 0) {
      goto LABEL_58;
    }
    goto LABEL_116;
  }

  PBDataWriterWriteUint32Field(v7, self->_rxErrorAckDenied, 53LL);
  uint64_t v6 = self->_has;
  if ((*(_DWORD *)&v6 & 0x80000) == 0)
  {
LABEL_57:
    if ((*(void *)&v6 & 0x200000000LL) == 0) {
      goto LABEL_58;
    }
    goto LABEL_116;
  }

  v4[22] = self->_rxErrorAckDenied;
  *((void *)v4 + 31) |= 0x100000uLL;
  uint64_t v6 = self->_has;
  if ((*(_DWORD *)&v6 & 0x80000) == 0)
  {
LABEL_57:
    if ((*(void *)&v6 & 0x200000000LL) == 0) {
      goto LABEL_58;
    }
    goto LABEL_116;
  }

  *((_DWORD *)v6 + 38) = self->_sleepState;
  v6[31] |= 0x200000000uLL;
  uint64_t v10 = self->_has;
  if ((*(_BYTE *)&v10 & 4) == 0)
  {
LABEL_57:
    if ((*(_BYTE *)&v10 & 2) == 0) {
      goto LABEL_58;
    }
LABEL_116:
    *((_DWORD *)v6 + 3) = self->_energyDetectedEvents;
    v6[31] |= 2uLL;
    if ((*(void *)&self->_has & 0x20) == 0) {
      goto LABEL_60;
    }
    goto LABEL_59;
  }

  uint64_t v28 = 0LL;
  if ((*(_BYTE *)&v4 & 2) == 0) {
    goto LABEL_115;
  }
LABEL_62:
  uint64_t v29 = 2654435761LL * self->_energyDetectedEvents;
  if ((*(_BYTE *)&v4 & 0x20) == 0) {
    goto LABEL_116;
  }
LABEL_63:
  unsigned int v30 = 2654435761LL * self->_radioStatusDoubleNotification;
  return v62 ^ v63 ^ v61 ^ v60 ^ v58 ^ v57 ^ v56 ^ v55 ^ v54 ^ v53 ^ v52 ^ v51 ^ v50 ^ v59 ^ v49 ^ v48 ^ v47 ^ v46 ^ v45 ^ v44 ^ v43 ^ v42 ^ v41 ^ v40 ^ v39 ^ v38 ^ v37 ^ v36 ^ v35 ^ v34 ^ v33 ^ v32 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30;
}

  self->_rxErrorInvalidLength = v5[31];
  *(void *)&self->_has |= 0x20000000uLL;
  uint64_t v9 = *((void *)v5 + 31);
  if ((v9 & 0x4000000) == 0)
  {
LABEL_61:
    if ((v9 & 0x400000) == 0) {
      goto LABEL_62;
    }
    goto LABEL_116;
  }

uint64_t sub_1000ACC28(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "shared_ptr.hpp", 786, "px != 0");
  }
  return result;
}

void sub_1000ACC68(uint64_t a1)
{
  LOWORD(v2) = 0;
  __int128 v3 = (uint64_t *)(a1 + 72704);
  BOOL v4 = (int *)(a1 + 70088);
  uint64_t v5 = a1 + 68785;
  uint64_t v6 = (_WORD *)(a1 + 640);
  unsigned int v7 = *(unsigned __int16 *)(a1 + 640);
  if (v7 > 0x19E)
  {
    if (v7 != 415)
    {
      if (v7 == 607) {
        goto LABEL_81;
      }
      goto LABEL_23;
    }

    if (*(_BYTE *)(a1 + 80)
      && ((uint64_t v18 = sub_1000AD580((uint64_t *)(a1 + 184)),
           unsigned int v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 72LL))(v18),
           (sub_1000F3F58((int)v6, v19) & 1) != 0)
       || *(_BYTE *)(a1 + 80)
       && (uint64_t v20 = sub_1000AD580((uint64_t *)(a1 + 184)),
           ((*(uint64_t (**)(uint64_t))(*(void *)v20 + 40LL))(v20) & 1) != 0))
      || *v4 > 0
      || (int v21 = (unsigned __int8 *)sub_1000AD5C0(), sub_10000E214(v21)))
    {
      uint64_t v8 = (uint64_t *)(a1 + 184);
      goto LABEL_21;
    }

    return;
  }

  if (!*(_WORD *)(a1 + 640))
  {
LABEL_25:
    while (2)
    {
      int v24 = sub_1000D8DE8(a1);
      if (sub_1000B5104(v24)) {
        goto LABEL_123;
      }
      if (*v3)
      {
        sub_100006FF8(v3);
        sub_100006EA4(v3);
      }

      if (*v4 <= 0)
      {
        if (*(void *)(a1 + 1552) && sub_100113424(a1))
        {
          uint64_t v62 = sub_1000AD580((uint64_t *)(a1 + 184));
          unsigned int v63 = (*(uint64_t (**)(uint64_t))(*(void *)v62 + 72LL))(v62);
          sub_10011DA1C((uint64_t)v6, v63);
          uint64_t v64 = sub_1000AD580((uint64_t *)(a1 + 1552));
          unsigned int v65 = (*(uint64_t (**)(uint64_t))(*(void *)v64 + 72LL))(v64);
          sub_10011DA1C((uint64_t)v6, v65);
          LOWORD(v2) = 392;
        }

        else
        {
          if (*(_BYTE *)(a1 + 80))
          {
            uint64_t v66 = sub_1000AD580((uint64_t *)(a1 + 184));
            unsigned int v67 = (*(uint64_t (**)(uint64_t))(*(void *)v66 + 72LL))(v66);
            sub_10011DA1C((uint64_t)v6, v67);
          }

          LOWORD(v2) = 415;
        }

        goto LABEL_23;
      }

LABEL_135:
        *(_WORD *)(a1 + 642) = 0;
        uint64_t v74 = *(void *)(a1 + 648);
        uint64_t v75 = v4[1];
        BOOL v73 = __CFADD__(v75, v74);
        unsigned int v76 = v75 + v74;
        if (v73)
        {
LABEL_145:
          __break(0x5500u);
LABEL_146:
          __break(0x5515u);
          return;
        }

        *BOOL v4 = 0;
        v4[1] = v76;
        if (*(_DWORD *)(a1 + 656))
        {
          uint64_t v77 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v77)
          {
            uint64_t v78 = v77;
          }

          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            sub_1001FB53C();
          }

          uint64_t result = PBReaderRecallMark(a2, v102);
          continue;
        }

        char v91 = 0;
        int v92 = 0;
        unsigned int v67 = 0LL;
        uint64_t result = v3 + 80;
        while (1)
        {
          __int128 v93 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          std::string::size_type v94 = v93 + 1;
          if (v93 == -1) {
            break;
          }
          if (v94 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            goto LABEL_185;
          }
          uint64_t v95 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v93);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v94;
          v67 |= (unint64_t)(v95 & 0x7F) << v91;
          if ((v95 & 0x80) == 0) {
            goto LABEL_186;
          }
          v91 += 7;
          uint64_t v11 = v92++ >= 9;
          if (v11) {
            goto LABEL_184;
          }
        }

LABEL_123:
          uint64_t v2 = *v3;
          if (*v3)
          {
            sub_100006FF8(v3);
            sub_100006EA4(v3);
            LOWORD(v2) = 0;
          }

      if (*(void *)buf == 0x6150726574756F52LL
        && *(void *)&buf[8] == 0x6E756F4374656B63LL
        && *(unsigned int *)&buf[16] == 1563908980LL)
      {
        goto LABEL_305;
      }

      if (*(void *)buf == 0x6150726574756F52LL
        && *(void *)&buf[8] == 0x6E756F4374656B63LL
        && *(unsigned int *)&buf[16] == 1563974516LL)
      {
        goto LABEL_343;
      }

      if (*(void *)buf == 0x6150726574756F52LL
        && *(void *)&buf[8] == 0x6E756F4374656B63LL
        && *(unsigned int *)&buf[16] == 1563908980LL)
      {
        goto LABEL_305;
      }

      if (*(void *)buf == 0x6150726574756F52LL
        && *(void *)&buf[8] == 0x6E756F4374656B63LL
        && *(unsigned int *)&buf[16] == 1563974516LL)
      {
        goto LABEL_343;
      }

      if (*(void *)buf == 0x6F4E746365726944LL
        && *(void *)&buf[8] == 0x726F7272456B6341LL
        && *(void *)&buf[11] == 0x5D375B726F727245LL)
      {
        goto LABEL_179;
      }

      if (*(void *)buf == 0x6F4E746365726944LL
        && *(void *)&buf[8] == 0x726F7272456B6341LL
        && *(void *)&buf[11] == 0x5D385B726F727245LL)
      {
        goto LABEL_180;
      }

uint64_t sub_1000AD580(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "shared_ptr.hpp", 786, "px != 0");
  }
  return result;
}

void *sub_1000AD5C0()
{
  uint64_t v0 = (void *)qword_1002C9678;
  if (!qword_1002C9678)
  {
    uint64_t v0 = operator new(0xAB98uLL);
    sub_1000AD614((uint64_t)v0);
    qword_1002C9678 = (uint64_t)v0;
  }

  return v0;
}

void sub_1000AD600(_Unwind_Exception *a1)
{
}

uint64_t sub_1000AD614(uint64_t a1)
{
  uint64_t v2 = a1 + 42000;
  uint64_t v3 = 48LL;
  uint64_t v4 = 750LL;
  do
  {
    *(_BYTE *)(a1 + v3) = -1;
    v3 += 56LL;
    --v4;
  }

  while (v4);
  *(void *)uint64_t v2 = 0LL;
  *(_DWORD *)(a1 + 42008) = -1;
  *(_BYTE *)(a1 + 42012) = 0;
  sub_10001545C(a1 + 42016);
  for (uint64_t i = 0LL; i != 1800; i += 24LL)
  {
    uint64_t v6 = (void *)(a1 + 42112 + i);
    *uint64_t v6 = 0LL;
    v6[1] = 0LL;
    v6[2] = 0LL;
  }

  *(_WORD *)(v2 + 1912) = 0;
  *(void *)(v2 + 1920) = 0LL;
  return a1;
}

void sub_1000AD6A0( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_1000AD6B4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

char *sub_1000AD6C8(int __errnum)
{
  return strerror(__errnum);
}

uint64_t sub_1000AD6D8(uint64_t result, float a2)
{
  *(float *)uint64_t v2 = a2;
  *(void *)(v2 + 4) = result;
  *(_WORD *)(v2 + 12) = 1024;
  *(_DWORD *)(v2 + 14) = v3;
  return result;
}

  ;
}

void sub_1000AD8FC(uint64_t a1, uint64_t a2)
{
LABEL_1:
  do
  {
    if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
      || *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
    {
      break;
    }

    char v4 = 0;
    unsigned int v5 = 0;
    uint64_t v6 = 0LL;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1)
      {
LABEL_42:
        __break(0x5500u);
        return;
      }

      if (v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v11 = 0LL;
        uint64_t v12 = OBJC_IVAR___PBDataReader__error;
        goto LABEL_14;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    uint64_t v12 = OBJC_IVAR___PBDataReader__error;
    unint64_t v11 = *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) ? 0LL : v6;
LABEL_14:
    if (*(_BYTE *)(a2 + v12) || (v11 & 7) == 4) {
      break;
    }
    unint64_t v14 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      int v21 = objc_alloc_init(&OBJC_CLASS___AWDCountersPowerS);
      objc_storeStrong((id *)(a1 + 24), v21);
      goto LABEL_41;
    }

    if ((_DWORD)v14 == 2)
    {
      int v21 = objc_alloc_init(&OBJC_CLASS___AWDHeaderInfoS);
      objc_storeStrong((id *)(a1 + 16), v21);
      if (PBReaderPlaceMark(a2, v23))
      {
        sub_10012DC90((uint64_t)v21, a2);
        if ((v22 & 1) != 0)
        {
LABEL_33:
          PBReaderRecallMark(a2, v23);

          goto LABEL_1;
        }
      }

uint64_t sub_1000AE93C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  while (2)
  {
    int v4 = OBJC_IVAR___PBDataReader__error;
    if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
      || *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
    {
      return *(unsigned __int8 *)(a2 + v4) == 0;
    }

    char v5 = 0;
    unsigned int v6 = 0;
    uint64_t v7 = 0LL;
    while (1)
    {
      uint64_t v8 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v9 = v8 + 1;
      if (v8 == -1) {
        goto LABEL_169;
      }
      if (v9 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v10 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v8);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v9;
      v7 |= (unint64_t)(v10 & 0x7F) << v5;
      if ((v10 & 0x80) == 0) {
        goto LABEL_12;
      }
      v5 += 7;
      BOOL v11 = v6++ >= 9;
      if (v11)
      {
        unint64_t v12 = 0LL;
        int v4 = OBJC_IVAR___PBDataReader__error;
        uint64_t v13 = OBJC_IVAR___PBDataReader__error;
        goto LABEL_16;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
    uint64_t v13 = OBJC_IVAR___PBDataReader__error;
    unint64_t v12 = *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) ? 0LL : v7;
    int v4 = OBJC_IVAR___PBDataReader__error;
LABEL_16:
    int v14 = v12 & 7;
    if (*(_BYTE *)(a2 + v13) || v14 == 4) {
      return *(unsigned __int8 *)(a2 + v4) == 0;
    }
    switch((v12 >> 3))
    {
      case 1u:
        if (v14 == 2)
        {
          uint64_t result = PBReaderPlaceMark(a2, v90);
          if ((_DWORD)result)
          {
            while (1)
            {
              if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
                || *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
              {
                goto LABEL_119;
              }

              char v16 = 0;
              unsigned int v17 = 0;
              uint64_t v18 = 0LL;
              while (1)
              {
                uint64_t v19 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                unint64_t v20 = v19 + 1;
                if (v19 == -1) {
                  goto LABEL_169;
                }
                if (v20 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                  break;
                }
                char v21 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
                *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20;
                v18 |= (unint64_t)(v21 & 0x7F) << v16;
                if ((v21 & 0x80) == 0) {
                  goto LABEL_33;
                }
                v16 += 7;
                BOOL v11 = v17++ >= 9;
                if (v11)
                {
                  uint64_t v22 = 0LL;
                  goto LABEL_36;
                }
              }

              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_33:
              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                uint64_t v22 = 0LL;
              }
              else {
                uint64_t v22 = v18;
              }
LABEL_36:
              uint64_t result = PBRepeatedUInt32Add(v3 + 80, v22);
            }
          }

          return result;
        }

        char v58 = 0;
        unsigned int v59 = 0;
        uint64_t v60 = 0LL;
        uint64_t result = v3 + 80;
        while (1)
        {
          uint64_t v61 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v62 = v61 + 1;
          if (v61 == -1) {
            goto LABEL_169;
          }
          if (v62 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v63 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v61);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v62;
          v60 |= (unint64_t)(v63 & 0x7F) << v58;
          if ((v63 & 0x80) == 0) {
            goto LABEL_163;
          }
          v58 += 7;
          BOOL v11 = v59++ >= 9;
          if (v11) {
            goto LABEL_161;
          }
        }

LABEL_119:
          uint64_t result = PBReaderRecallMark(a2, v90);
          continue;
        }

        char v79 = 0;
        unsigned int v80 = 0;
        uint64_t v60 = 0LL;
        uint64_t result = v3 + 32;
        while (1)
        {
          uint64_t v81 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v82 = v81 + 1;
          if (v81 == -1) {
            break;
          }
          if (v82 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            goto LABEL_162;
          }
          char v83 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v81);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v82;
          v60 |= (unint64_t)(v83 & 0x7F) << v79;
          if ((v83 & 0x80) == 0) {
            goto LABEL_163;
          }
          v79 += 7;
          BOOL v11 = v80++ >= 9;
          if (v11) {
            goto LABEL_161;
          }
        }

  __break(0x550Cu);
}

  self->_rxErrorAckAborted = v5[21];
  *(void *)&self->_has |= 0x80000uLL;
  unint64_t v9 = *((void *)v5 + 31);
  if ((v9 & 0x200000000LL) == 0)
  {
LABEL_66:
    if ((v9 & 4) == 0) {
      goto LABEL_67;
    }
    goto LABEL_121;
  }

LABEL_169:
        __break(0x5500u);
        return result;
      case 6u:
        if (v14 != 2)
        {
          char v84 = 0;
          unsigned int v85 = 0;
          uint64_t v60 = 0LL;
          uint64_t result = v3 + 8;
          do
          {
            uint64_t v86 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v87 = v86 + 1;
            if (v86 == -1) {
              goto LABEL_169;
            }
            if (v87 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              goto LABEL_162;
            }
            char v88 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v86);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v87;
            v60 |= (unint64_t)(v88 & 0x7F) << v84;
            if ((v88 & 0x80) == 0) {
              goto LABEL_163;
            }
            v84 += 7;
            BOOL v11 = v85++ >= 9;
          }

          while (!v11);
LABEL_161:
          uint64_t v89 = 0LL;
          goto LABEL_166;
        }

        uint64_t result = PBReaderPlaceMark(a2, v90);
        if (!(_DWORD)result) {
          return result;
        }
        while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
             && !*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        {
          char v51 = 0;
          unsigned int v52 = 0;
          uint64_t v53 = 0LL;
          while (1)
          {
            uint64_t v54 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v55 = v54 + 1;
            if (v54 == -1) {
              goto LABEL_169;
            }
            if (v55 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v56 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v54);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v55;
            v53 |= (unint64_t)(v56 & 0x7F) << v51;
            if ((v56 & 0x80) == 0) {
              goto LABEL_115;
            }
            v51 += 7;
            BOOL v11 = v52++ >= 9;
            if (v11)
            {
              uint64_t v57 = 0LL;
              goto LABEL_118;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_115:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v57 = 0LL;
          }
          else {
            uint64_t v57 = v53;
          }
LABEL_118:
          uint64_t result = PBRepeatedUInt32Add(v3 + 8, v57);
        }

        goto LABEL_119;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if ((result & 1) != 0) {
          continue;
        }
        return 0LL;
    }
  }

ot *sub_1000AF9E4(uint64_t a1, ot *this, uint64_t a3)
{
  uint64_t result = ot::IsMulticastLargerThanRealmLocal(this, (unsigned __int8 *)this);
  if (!(_DWORD)result)
  {
    uint64_t v11 = 7LL;
    goto LABEL_18;
  }

  uint64_t v7 = *(unsigned __int16 *)(a1 + 1800);
  if (*(_WORD *)(a1 + 1800))
  {
    unint64_t v8 = 0LL;
    unint64_t v9 = (void *)a1;
    while (v8 != 76)
    {
      if (*v9 == *(void *)this && v9[1] == *((void *)this + 1))
      {
        v9[2] = a3;
        goto LABEL_17;
      }

      ++v8;
      v9 += 3;
      if (v7 == v8) {
        goto LABEL_10;
      }
    }

    goto LABEL_19;
  }

double sub_1000AFAD8(uint64_t a1, unsigned int a2)
{
  if ((sub_1000AFDE8(a1, a2) & 1) == 0) {
    *(void *)&double result = sub_1000AFF44(a1, a2).n128_u64[0];
  }
  return result;
}

void sub_1000AFB14(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unsigned int a5)
{
  unint64_t v9 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v9)
  {
    char v10 = v9;
    if (sub_10015A058(7) && os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      sub_100108154(a3, __p);
      int v11 = v16;
      unint64_t v12 = (void **)__p[0];
      uint64_t v13 = ot::ErrorToString(a5);
      int v14 = __p;
      *(_DWORD *)__n128 buf = 136315906;
      if (v11 < 0) {
        int v14 = v12;
      }
      uint64_t v18 = a2;
      __int16 v19 = 2080;
      unint64_t v20 = v14;
      __int16 v21 = 2048;
      uint64_t v22 = a4;
      __int16 v23 = 2080;
      unsigned int v24 = v13;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "MulticastListenersTable: %s %s expire %llu: %s",  buf,  0x2Au);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_10020CC20();
  }

void sub_1000AFC60( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000AFC84(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned __int16 *)(a1 + 1800);
  if (*(_WORD *)(a1 + 1800))
  {
    uint64_t v4 = 0LL;
    char v5 = (void *)a1;
    while (1)
    {
      if (v4 == 76) {
        goto LABEL_15;
      }
      if (*v5 == *a2 && v5[1] == a2[1]) {
        break;
      }
      ++v4;
      v5 += 3;
      if (v3 == v4) {
        goto LABEL_9;
      }
    }

    *(_WORD *)(a1 + 1800) = v3 - 1;
    if ((unsigned __int16)(v3 - 1) == (unsigned __int16)v4)
    {
LABEL_13:
      unsigned int v7 = 0;
      goto LABEL_14;
    }

    if (v3 <= 0x4C)
    {
      uint64_t v8 = a1 + 24LL * (unsigned __int16)(v3 - 1);
      __int128 v9 = *(_OWORD *)v8;
      v5[2] = *(void *)(v8 + 16);
      *(_OWORD *)char v5 = v9;
      sub_1000AFAD8(a1, (unsigned __int16)v4);
      goto LABEL_13;
    }

void sub_1000AFD3C(uint64_t a1)
{
  unint64_t v2 = ot::otPlatTimeGet((ot *)a1);
  if (*(_WORD *)(a1 + 1800))
  {
    unint64_t v3 = v2;
    do
    {
      unint64_t v4 = *(void *)(a1 + 16);
      if (v3 < v4) {
        break;
      }
      sub_1000AFB14(v2, (uint64_t)"Expire", (void *)a1, v4, 0);
      unsigned __int16 v5 = *(_WORD *)(a1 + 1800) - 1;
      *(_WORD *)(a1 + 1800) = v5;
      if (v5)
      {
        if (v5 > 0x4Bu)
        {
          __break(0x5512u);
          return;
        }

        uint64_t v6 = a1 + 24LL * v5;
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(void *)(a1 + 16) = *(void *)(v6 + 16);
        sub_1000AFAD8(a1, 0);
      }
    }

    while (*(_WORD *)(a1 + 1800));
  }

uint64_t sub_1000AFDE8(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 1800);
  if (v2 <= a2) {
    sub_10020CCB8();
  }
  if (a2 >= 0x4C) {
LABEL_27:
  }
    __break(0x5512u);
  unint64_t v3 = (__int128 *)(a1 + 24LL * a2);
  __int128 v16 = *v3;
  unsigned int v4 = (2 * (unsigned __int16)a2) | 1;
  if (v4 >= v2 || v4 <= a2) {
    return 0LL;
  }
  unint64_t v6 = *((void *)v3 + 2);
  int v7 = 2 * a2;
  unsigned int v8 = a2;
  while (1)
  {
    if (v4 + 1 >= v2)
    {
      unsigned int v9 = v4;
    }

    else
    {
      if (v4 > 0x4A) {
        goto LABEL_27;
      }
      if (*(void *)(a1 + 24LL * (v4 + 1) + 16) >= *(void *)(a1 + 24LL * v4 + 16))
      {
        unsigned int v10 = v4;
        unsigned int v9 = v4;
        goto LABEL_17;
      }

      unsigned int v9 = v7 + 2;
    }

    if (v9 > 0x4B) {
      goto LABEL_27;
    }
    unsigned int v10 = v9;
LABEL_17:
    if (*(void *)(a1 + 24LL * v10 + 16) >= v6) {
      break;
    }
    int v11 = (__int128 *)(a1 + 24LL * v10);
    uint64_t v12 = a1 + 24LL * v8;
    __int128 v13 = *v11;
    *(void *)(v12 + 16) = *((void *)v11 + 2);
    *(_OWORD *)uint64_t v12 = v13;
    unsigned int v4 = (2 * v9) | 1;
    unsigned int v2 = *(unsigned __int16 *)(a1 + 1800);
    if (v4 < v2)
    {
      int v7 = 2 * v9;
      unsigned int v8 = v9;
      if (v4 > v9) {
        continue;
      }
    }

    goto LABEL_22;
  }

  unsigned int v9 = v8;
LABEL_22:
  if (v9 > a2)
  {
    uint64_t v14 = a1 + 24LL * v9;
    *(_OWORD *)uint64_t v14 = v16;
    *(void *)(v14 + 16) = v6;
    return 1LL;
  }

  return 0LL;
}

__n128 sub_1000AFF44(uint64_t a1, unsigned int a2)
{
  if (a2 >= 0x4C) {
LABEL_15:
  }
    __break(0x5512u);
  unsigned int v2 = (__n128 *)(a1 + 24LL * a2);
  __n128 result = *v2;
  __n128 v11 = *v2;
  if (a2)
  {
    unint64_t v4 = v2[1].n128_u64[0];
    unsigned int v5 = a2;
    while (1)
    {
      int v6 = v5 - 1;
      unsigned int v7 = v6 >> 1;
      if (v7 > 0x4B) {
        goto LABEL_15;
      }
      unsigned int v8 = (__n128 *)(a1 + 24LL * v7);
      if (v4 >= v8[1].n128_u64[0]) {
        break;
      }
      unsigned int v9 = (__n128 *)(a1 + 24LL * v5);
      __n128 result = *v8;
      v9[1].n128_u64[0] = v8[1].n128_u64[0];
      *unsigned int v9 = result;
      unsigned int v5 = (unsigned __int16)v7;
      if (!(_WORD)v7)
      {
        unsigned int v5 = 0;
        goto LABEL_12;
      }
    }

    if (v5 >= a2) {
      return result;
    }
LABEL_12:
    __n128 result = v11;
    unsigned int v10 = (__n128 *)(a1 + 24LL * v5);
    *unsigned int v10 = v11;
    v10[1].n128_u64[0] = v4;
  }

  return result;
}

uint64_t sub_1000B0034(uint64_t result)
{
  *(_WORD *)(result + 1800) = 0;
  return result;
}

unint64_t sub_1000B003C(unsigned __int16 *a1, _WORD *a2, uint64_t a3)
{
  unint64_t result = ot::otPlatTimeGet((ot *)a1);
  if ((unsigned __int16)*a2 >= 0x4BuLL
    || (*(_OWORD *)a3 = *(_OWORD *)&a1[12 * (unsigned __int16)*a2], (unsigned __int16)*a2 > 0x4AuLL))
  {
    __break(0x5512u);
  }

  else
  {
    unint64_t v7 = *(void *)&a1[12 * (unsigned __int16)*a2 + 8];
    BOOL v8 = v7 >= result;
    unint64_t v9 = v7 - result;
    if (v8) {
      unint64_t v10 = v9;
    }
    else {
      unint64_t v10 = 0LL;
    }
    int v11 = ot::UsecToSec(v10);
    unint64_t result = 0LL;
    *(_DWORD *)(a3 + 16) = v11;
    ++*a2;
  }

  return result;
}

void *sub_1000B00E0(void *a1, uint64_t a2, uint64_t *a3)
{
  v6[0] = 0LL;
  sub_100007640((uint64_t)v6, a3);
  sub_1000342C8((uint64_t)a1, a2, v6);
  sub_100006E7C(v6);
  *a1 = &off_1002B1770;
  return a1;
}

void sub_1000B0140( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000B0158( uint64_t a1, unsigned int a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11 = *(unsigned __int16 *)(a1 + 8);
  uint64_t result = 3LL;
  if (v11 <= 99)
  {
    if (v11 > 73)
    {
      if (v11 != 74)
      {
        if (v11 != 91) {
          goto LABEL_115;
        }
LABEL_43:
        unsigned int v13 = *(_DWORD *)(a1 + 128);
        if (v13)
        {
          unsigned int v24 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v24)
          {
            uint64_t v25 = v24;
            goto LABEL_103;
          }

          if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            goto LABEL_103;
          }
          goto LABEL_117;
        }

        sub_100034C60("Ciib", (uint64_t *)&buf, 0x80u);
        sub_100006EFC(a1 + 104, &buf);
        p___n128 buf = &buf;
        sub_100006F6C((void ***)&p_buf);
        *(_WORD *)(a1 + 98) = 0;
        *(_WORD *)(a1 + 8) = 100;
LABEL_50:
        unsigned int v13 = *(_DWORD *)(a1 + 128);
        if (v13)
        {
          uint64_t v26 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v26)
          {
            unint64_t v27 = v26;
            goto LABEL_103;
          }

          if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            goto LABEL_103;
          }
          goto LABEL_117;
        }

        sub_100034C60("Ci", (uint64_t *)&buf, 0x80u);
        sub_100006EFC(a1 + 104, &buf);
        p___n128 buf = &buf;
        sub_100006F6C((void ***)&p_buf);
        *(_WORD *)(a1 + 98) = 0;
        *(_WORD *)(a1 + 8) = 106;
        goto LABEL_13;
      }

LABEL_93:
    if (buf.n128_u64[0]) {
      (*(void (**)(unint64_t))(*(void *)buf.n128_u64[0] + 8LL))(buf.n128_u64[0]);
    }
    uint64_t result = 2LL;
    goto LABEL_115;
  }

  if (v11 > 115)
  {
    if (v11 != 116)
    {
      unsigned int v13 = 1;
      if (v11 != 125)
      {
        if (v11 != 133) {
          goto LABEL_115;
        }
LABEL_67:
        int v31 = sub_1000D8DE8(*(void *)(a1 + 56));
        if (!sub_1000B50E8(v31) && *(_DWORD *)(*(void *)(a1 + 56) + 73680LL) == 2)
        {
          sub_10015A00C(a1);
          uint64_t v32 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v32)
          {
            uint64_t v33 = v32;
            if (sub_10015A058(6) && os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
            {
              buf.n128_u16[0] = 0;
              _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "Leave succeeded", (uint8_t *)&buf, 2u);
            }
          }

          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            sub_1001FB53C();
          }

          buf.n128_u64[0] = 0LL;
          (*(void (**)(uint64_t, void, __n128 *))(*(void *)a1 + 32LL))(a1, 0LL, &buf);
          goto LABEL_93;
        }

        if (!sub_100159F84(a1))
        {
          sub_10015A00C(a1);
          unint64_t v34 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v34)
          {
            char v35 = v34;
            goto LABEL_103;
          }

          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            goto LABEL_117;
          }
LABEL_103:
          if (v13 <= 1) {
            uint64_t v38 = 1LL;
          }
          else {
            uint64_t v38 = v13;
          }
          uint64_t v39 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v39)
          {
            uint64_t v40 = v39;
          }

          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            sub_1001FB53C();
          }

          (*(void (**)(void))(**(void **)(a1 + 56) + 120LL))(*(void *)(a1 + 56));
          buf.n128_u64[0] = 0LL;
          (*(void (**)(uint64_t, uint64_t, __n128 *))(*(void *)a1 + 32LL))(a1, v38, &buf);
          if (buf.n128_u64[0]) {
            (*(void (**)(unint64_t))(*(void *)buf.n128_u64[0] + 8LL))(buf.n128_u64[0]);
          }
          uint64_t result = 3LL;
          goto LABEL_115;
        }

        return 0LL;
      }

      goto LABEL_65;
    }

  unint64_t v41 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_txErrorTxAbortedRxAck));
  [v3 setObject:v41 forKey:@"tx_error_tx_aborted_rx_ack"];

  BOOL v8 = self->_has;
  if ((*(void *)&v8 & 0x4000000000000LL) == 0)
  {
LABEL_36:
    if ((*(void *)&v8 & 0x100000000000000LL) == 0) {
      goto LABEL_37;
    }
    goto LABEL_95;
  }

  PBDataWriterWriteUint32Field(v7, self->_txErrorTxAbortedRxAck, 32LL);
  int v6 = self->_has;
  if ((*(void *)&v6 & 0x4000000000000LL) == 0)
  {
LABEL_36:
    if ((*(void *)&v6 & 0x100000000000000LL) == 0) {
      goto LABEL_37;
    }
    goto LABEL_95;
  }

  v4[60] = self->_txErrorTxAbortedRxAck;
  *((void *)v4 + 31) |= 0x80000000000000uLL;
  int v6 = self->_has;
  if ((*(void *)&v6 & 0x4000000000000LL) == 0)
  {
LABEL_36:
    if ((*(void *)&v6 & 0x100000000000000LL) == 0) {
      goto LABEL_37;
    }
    goto LABEL_95;
  }

  *((_DWORD *)v6 + 61) = self->_txErrorTxAbortedTx;
  v6[31] |= 0x100000000000000uLL;
  unint64_t v10 = self->_has;
  if ((*(void *)&v10 & 0x400000000000LL) == 0)
  {
LABEL_36:
    if ((*(void *)&v10 & 0x100000000000LL) == 0) {
      goto LABEL_37;
    }
    goto LABEL_95;
  }

  unint64_t v7 = 0LL;
  if ((*(void *)&v4 & 0x100000000000LL) != 0)
  {
LABEL_41:
    BOOL v8 = 2654435761LL * self->_txErrorInvalidAck;
    if ((*(void *)&v4 & 0x200000000000LL) != 0) {
      goto LABEL_42;
    }
    goto LABEL_95;
  }

  self->_txErrorTxAbortedCsmaCfgBackoff = v5[57];
  *(void *)&self->_has |= 0x10000000000000uLL;
  unint64_t v9 = *((void *)v5 + 31);
  if ((v9 & 0x8000000000000LL) == 0)
  {
LABEL_40:
    if ((v9 & 0x20000000000000LL) == 0) {
      goto LABEL_41;
    }
    goto LABEL_95;
  }

LABEL_115:
  *(_WORD *)(a1 + 8) = 0;
  return result;
}

  char v63 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_rxErrorAckAborted));
  [v3 setObject:v63 forKey:@"rx_error_ack_aborted"];

  BOOL v8 = self->_has;
  if ((*(void *)&v8 & 0x200000000LL) == 0)
  {
LABEL_58:
    if ((*(_BYTE *)&v8 & 4) == 0) {
      goto LABEL_59;
    }
    goto LABEL_117;
  }

  PBDataWriterWriteUint32Field(v7, self->_rxErrorAckAborted, 54LL);
  int v6 = self->_has;
  if ((*(void *)&v6 & 0x200000000LL) == 0)
  {
LABEL_58:
    if ((*(_BYTE *)&v6 & 4) == 0) {
      goto LABEL_59;
    }
    goto LABEL_117;
  }

  v4[21] = self->_rxErrorAckAborted;
  *((void *)v4 + 31) |= 0x80000uLL;
  int v6 = self->_has;
  if ((*(void *)&v6 & 0x200000000LL) == 0)
  {
LABEL_58:
    if ((*(_BYTE *)&v6 & 4) == 0) {
      goto LABEL_59;
    }
    goto LABEL_117;
  }

  *((_DWORD *)v6 + 4) = self->_energyDetectedRequests;
  v6[31] |= 4uLL;
  unint64_t v10 = self->_has;
  if ((*(_BYTE *)&v10 & 2) != 0) {
    goto LABEL_116;
  }
LABEL_58:
  if ((*(_BYTE *)&v10 & 0x20) != 0)
  {
LABEL_59:
    *((_DWORD *)v6 + 7) = self->_radioStatusDoubleNotification;
    v6[31] |= 0x20uLL;
  }

  self->_rxErrorInvalidData = v5[28];
  *(void *)&self->_has |= 0x4000000uLL;
  unint64_t v9 = *((void *)v5 + 31);
  if ((v9 & 0x400000) == 0)
  {
LABEL_62:
    if ((v9 & 0x200000) == 0) {
      goto LABEL_63;
    }
    goto LABEL_117;
  }

  return v81;
}

void sub_1000B0A08( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8LL))(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000B0A38(uint64_t a1)
{
  __int128 v1 = (void *)sub_100034374(a1);
  operator delete(v1);
}

void sub_1000B0CA4(uint64_t a1, uint64_t a2)
{
LABEL_1:
  do
  {
    if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
      || *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
    {
      break;
    }

    char v4 = 0;
    unsigned int v5 = 0;
    uint64_t v6 = 0LL;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1)
      {
LABEL_50:
        __break(0x5500u);
        return;
      }

      if (v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v11 = 0LL;
        uint64_t v12 = OBJC_IVAR___PBDataReader__error;
        goto LABEL_14;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    uint64_t v12 = OBJC_IVAR___PBDataReader__error;
    unint64_t v11 = *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) ? 0LL : v6;
LABEL_14:
    if (*(_BYTE *)(a2 + v12) || (v11 & 7) == 4) {
      break;
    }
    unint64_t v14 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      char v21 = 0;
      unsigned int v22 = 0;
      uint64_t v23 = 0LL;
      *(_BYTE *)(a1 + 28) |= 2u;
      while (1)
      {
        uint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v25 = v24 + 1;
        if (v24 == -1) {
          goto LABEL_50;
        }
        if (v25 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v26 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25;
        v23 |= (unint64_t)(v26 & 0x7F) << v21;
        if ((v26 & 0x80) == 0) {
          goto LABEL_45;
        }
        v21 += 7;
        BOOL v10 = v22++ >= 9;
        if (v10)
        {
          LODWORD(v23) = 0;
          goto LABEL_47;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_45:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v23) = 0;
      }
LABEL_47:
      *(_DWORD *)(a1 + 24) = v23;
      goto LABEL_1;
    }

    if ((_DWORD)v14 == 2)
    {
      unint64_t v27 = objc_alloc_init(&OBJC_CLASS___AWDHeaderInfoS);
      objc_storeStrong((id *)(a1 + 16), v27);
      if (PBReaderPlaceMark(a2, v29))
      {
        sub_10012DC90((uint64_t)v27, a2);
        if ((v28 & 1) != 0)
        {
          PBReaderRecallMark(a2, v29);

          goto LABEL_1;
        }
      }

      return;
    }

    if ((_DWORD)v14 == 1)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      uint64_t v17 = 0LL;
      *(_BYTE *)(a1 + 28) |= 1u;
      while (1)
      {
        uint64_t v18 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v19 = v18 + 1;
        if (v18 == -1) {
          goto LABEL_50;
        }
        if (v19 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v20 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19;
        v17 |= (unint64_t)(v20 & 0x7F) << v15;
        if ((v20 & 0x80) == 0) {
          goto LABEL_41;
        }
        v15 += 7;
        BOOL v10 = v16++ >= 9;
        if (v10)
        {
          uint64_t v17 = 0LL;
          goto LABEL_43;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_41:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v17 = 0LL;
      }
LABEL_43:
      *(void *)(a1 + 8) = v17;
      goto LABEL_1;
    }
  }

  while ((PBReaderSkipValueWithTag(a2) & 1) != 0);
}

LABEL_25:
  unint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_retryInterval90perc));
  [v3 setObject:v14 forKey:@"retry_interval_90perc"];

  has = (__int16)self->_has;
  if ((has & 0x4000) == 0)
  {
LABEL_10:
    if ((has & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }

  PBDataWriterWriteUint32Field(v5, self->_retryInterval90perc, 8LL);
  has = (__int16)self->_has;
  if ((has & 0x4000) == 0)
  {
LABEL_10:
    if ((has & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }

  uint64_t v4[4] = self->_retryInterval90perc;
  *((_WORD *)v4 + 34) |= 4u;
  has = (__int16)self->_has;
  if ((has & 0x4000) == 0)
  {
LABEL_10:
    if ((has & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }

  *((_DWORD *)result + 4) = self->_retryInterval90perc;
  *((_WORD *)result + 34) |= 4u;
  has = (__int16)self->_has;
  if ((has & 0x4000) == 0)
  {
LABEL_10:
    if ((has & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }

  unint64_t v11 = 0LL;
  if ((*(_WORD *)&self->_has & 0x2000) != 0)
  {
LABEL_11:
    uint64_t v12 = 2654435761LL * self->_txDelayMax;
    if ((*(_WORD *)&self->_has & 0x1000) != 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }

  self->_retryInterval90perc = *((_DWORD *)v4 + 4);
  *(_WORD *)&self->_has |= 4u;
  unsigned int v5 = *((_WORD *)v4 + 34);
  if ((v5 & 0x4000) == 0)
  {
LABEL_10:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }

  PBDataWriterWriteUint32Field(v9, self->_coexRxRequests, 5LL);
  char v4 = v9;
  has = (__int16)self->_has;
  if ((has & 2) == 0)
  {
LABEL_7:
    if ((has & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }

  v4[18] = self->_coexTxGrantedRequests;
  *((_WORD *)v4 + 50) |= 0x10u;
  has = (__int16)self->_has;
  if ((has & 8) == 0)
  {
LABEL_5:
    if ((has & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }

  self->_coexRxRequests = *((_DWORD *)v4 + 16);
  *(_WORD *)&self->_has |= 4u;
  unsigned int v5 = *((_WORD *)v4 + 50);
  if ((v5 & 2) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }

  unint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_rxErrDuplicated));
  [v3 setObject:v19 forKey:@"rx_err_duplicated"];

  if ((*(_WORD *)&self->_has & 0x40) != 0)
  {
LABEL_12:
    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_rxErrOther));
    [v3 setObject:v5 forKey:@"rx_err_other"];
  }

  PBDataWriterWriteUint32Field(v7, self->_rxErrInvalidSrcAddr, 7LL);
  char v4 = v7;
  has = (__int16)self->_has;
  if ((has & 0x100) == 0)
  {
LABEL_9:
    if ((has & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }

  v4[17] = self->_rxErrUnknownNeighbor;
  *((_WORD *)v4 + 40) |= 0x200u;
  has = (__int16)self->_has;
  if ((has & 0x10) == 0)
  {
LABEL_8:
    if ((has & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }

  v4[10] = self->_rxErrDuplicated;
  *((_WORD *)v4 + 40) |= 4u;
  if ((*(_WORD *)&self->_has & 0x40) != 0)
  {
LABEL_12:
    v4[14] = self->_rxErrOther;
    *((_WORD *)v4 + 40) |= 0x40u;
  }

  self->_rxErrInvalidSrcAddr = *((_DWORD *)v4 + 12);
  *(_WORD *)&self->_has |= 0x10u;
  unsigned int v5 = *((_WORD *)v4 + 40);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }

  if (*(void *)a3 && *(void *)(a3 + 8))
  {
    v18[0] = 0LL;
    v18[1] = 0LL;
    uint64_t v17 = v18;
    sub_10000AC00(&buf, "method");
    BOOL v10 = sub_10000ED88(&v17, &buf);
    sub_1000200A0(v10, &__p);
    if (SHIBYTE(v21) < 0) {
      operator delete((void *)buf.n128_u64[0]);
    }
    unsigned int v16 = v8;
    sub_10000AC00(&buf, "ret");
    unint64_t v11 = sub_10000ED88(&v17, &buf);
    sub_100017620(v11, &v16);
    if (SHIBYTE(v21) < 0) {
      operator delete((void *)buf.n128_u64[0]);
    }
    sub_10000D19C(v15, (uint64_t *)&v17);
    if (*(void *)a3) {
      uint64_t v12 = _Block_copy(*(const void **)a3);
    }
    else {
      uint64_t v12 = 0LL;
    }
    unsigned int v13 = *(dispatch_queue_s **)(a3 + 8);
    buf.n128_u64[0] = (unint64_t)_NSConcreteStackBlock;
    buf.n128_u64[1] = 1174405120LL;
    char v21 = sub_10013EC04;
    unsigned int v22 = &unk_1002B43F8;
    if (v12) {
      unint64_t v14 = _Block_copy(v12);
    }
    else {
      unint64_t v14 = 0LL;
    }
    aBlock = v14;
    unint64_t v25 = v8;
    sub_10000D19C(v24, v15);
    dispatch_async(v13, &buf);
    sub_10000D448((uint64_t)v24);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v12) {
      _Block_release(v12);
    }
    sub_10000D448((uint64_t)v15);
    sub_10000D448((uint64_t)&v17);
  }

    if ((v5 & 0x80u) == 0) {
      char v15 = &v18;
    }
    else {
      char v15 = (std::string *)v6;
    }
    if (inet_pton(30, (const char *)v15, &__dst) <= 0)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "String not IPv6 address");
    }
  }

  else
  {
    unint64_t v11 = sub_10000BD6C(a1);
    {
      uint64_t v12 = sub_1000A5B28((uint64_t)a1);
      sub_10000CBF8(&v18, v12);
      if (v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0] <= 0x10)
      {
        if (v18.__r_.__value_.__r.__words[0] == v18.__r_.__value_.__l.__size_) {
          unsigned int v13 = 0LL;
        }
        else {
          unsigned int v13 = (const void *)v18.__r_.__value_.__r.__words[0];
        }
        memcpy(&__dst, v13, v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]);
      }

      char v20 = &v18;
      sub_100006F6C((void ***)&v20);
    }

    else
    {
      return *(_OWORD *)sub_10014882C((uint64_t)a1);
    }
  }

  return __dst;
}

uint64_t sub_1000B1E80(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  char v4 = &selRef_setNodeCounts_count_;
  unsigned int v5 = &OBJC_IVAR___AWDRadioStatsS__rttMinVal;
  uint64_t v6 = &OBJC_IVAR___AWDRadioStatsS__rttMaxVal;
  uint64_t v7 = &OBJC_IVAR___AWDRadioStatsS__rttAvgVal;
LABEL_2:
  while (2)
  {
    int v8 = OBJC_IVAR___PBDataReader__error;
    if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
      && !*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
    {
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        uint64_t v12 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v13 = v12 + 1;
        if (v12 == -1)
        {
LABEL_164:
          __break(0x5500u);
          return result;
        }

        if (v13 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v14 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v12);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v13;
        v11 |= (unint64_t)(v14 & 0x7F) << v9;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v9 += 7;
        if (v10++ >= 9)
        {
          unint64_t v16 = 0LL;
          int v8 = OBJC_IVAR___PBDataReader__error;
          uint64_t v17 = OBJC_IVAR___PBDataReader__error;
          goto LABEL_16;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
      uint64_t v17 = OBJC_IVAR___PBDataReader__error;
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v16 = 0LL;
      }
      else {
        unint64_t v16 = v11;
      }
      int v8 = OBJC_IVAR___PBDataReader__error;
LABEL_16:
      if (*(_BYTE *)(a2 + v17)) {
        BOOL v18 = 1;
      }
      else {
        BOOL v18 = (v16 & 7) == 4;
      }
      if (!v18)
      {
        switch((v16 >> 3))
        {
          case 1u:
            char v19 = 0;
            unsigned int v20 = 0;
            uint64_t v21 = 0LL;
            *(_WORD *)(v3 + *((int *)v4 + 869)) |= 0x200u;
            while (1)
            {
              uint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              unint64_t v23 = v22 + 1;
              if (v22 == -1) {
                goto LABEL_164;
              }
              if (v23 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                char v26 = v5;
                goto LABEL_143;
              }

              char v24 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23;
              v21 |= (unint64_t)(v24 & 0x7F) << v19;
              if ((v24 & 0x80) == 0) {
                break;
              }
              int v25 = 0;
              v19 += 7;
              char v26 = v5;
              BOOL v27 = v20++ > 8;
              if (v27) {
                goto LABEL_147;
              }
            }

            char v26 = v5;
            goto LABEL_144;
          case 2u:
            char v33 = 0;
            unsigned int v34 = 0;
            uint64_t v21 = 0LL;
            *(_WORD *)(v3 + *((int *)v4 + 869)) |= 0x100u;
            while (2)
            {
              uint64_t v35 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              unint64_t v36 = v35 + 1;
              if (v35 == -1) {
                goto LABEL_164;
              }
              if (v36 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                char v26 = v6;
                goto LABEL_143;
              }

              char v37 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v35);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v36;
              v21 |= (unint64_t)(v37 & 0x7F) << v33;
              if (v37 < 0)
              {
                int v25 = 0;
                v33 += 7;
                char v26 = v6;
                BOOL v27 = v34++ > 8;
                if (v27) {
                  goto LABEL_147;
                }
                continue;
              }

              break;
            }

            char v26 = v6;
            goto LABEL_144;
          case 3u:
            char v38 = 0;
            unsigned int v39 = 0;
            uint64_t v21 = 0LL;
            *(_WORD *)(v3 + *((int *)v4 + 869)) |= 0x80u;
            while (2)
            {
              uint64_t v40 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              unint64_t v41 = v40 + 1;
              if (v40 == -1) {
                goto LABEL_164;
              }
              if (v41 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                char v26 = v7;
                goto LABEL_143;
              }

              char v42 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v40);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v41;
              v21 |= (unint64_t)(v42 & 0x7F) << v38;
              if (v42 < 0)
              {
                int v25 = 0;
                v38 += 7;
                char v26 = v7;
                BOOL v27 = v39++ > 8;
                if (v27) {
                  goto LABEL_147;
                }
                continue;
              }

              break;
            }

            char v26 = v7;
            goto LABEL_144;
          case 4u:
            char v43 = 0;
            unsigned int v44 = 0;
            uint64_t v21 = 0LL;
            *(_WORD *)(v3 + *((int *)v4 + 869)) |= 0x40u;
            while (2)
            {
              uint64_t v45 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              unint64_t v46 = v45 + 1;
              if (v45 == -1) {
                goto LABEL_164;
              }
              if (v46 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                char v26 = &OBJC_IVAR___AWDRadioStatsS__rtt90perc;
                goto LABEL_143;
              }

              char v47 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v45);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v46;
              v21 |= (unint64_t)(v47 & 0x7F) << v43;
              if (v47 < 0)
              {
                int v25 = 0;
                v43 += 7;
                char v26 = &OBJC_IVAR___AWDRadioStatsS__rtt90perc;
                BOOL v27 = v44++ > 8;
                if (v27) {
                  goto LABEL_147;
                }
                continue;
              }

              break;
            }

            char v26 = &OBJC_IVAR___AWDRadioStatsS__rtt90perc;
            goto LABEL_144;
          case 5u:
            char v48 = 0;
            unsigned int v49 = 0;
            uint64_t v21 = 0LL;
            *(_WORD *)(v3 + *((int *)v4 + 869)) |= 0x20u;
            while (2)
            {
              uint64_t v50 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              unint64_t v51 = v50 + 1;
              if (v50 == -1) {
                goto LABEL_164;
              }
              if (v51 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                char v26 = &OBJC_IVAR___AWDRadioStatsS__retryIntervalMin;
                goto LABEL_143;
              }

              char v52 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v50);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v51;
              v21 |= (unint64_t)(v52 & 0x7F) << v48;
              if (v52 < 0)
              {
                int v25 = 0;
                v48 += 7;
                char v26 = &OBJC_IVAR___AWDRadioStatsS__retryIntervalMin;
                BOOL v27 = v49++ > 8;
                if (v27) {
                  goto LABEL_147;
                }
                continue;
              }

              break;
            }

            char v26 = &OBJC_IVAR___AWDRadioStatsS__retryIntervalMin;
            goto LABEL_144;
          case 6u:
            char v53 = 0;
            unsigned int v54 = 0;
            uint64_t v21 = 0LL;
            *(_WORD *)(v3 + *((int *)v4 + 869)) |= 0x10u;
            while (2)
            {
              uint64_t v55 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              unint64_t v56 = v55 + 1;
              if (v55 == -1) {
                goto LABEL_164;
              }
              if (v56 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                char v26 = &OBJC_IVAR___AWDRadioStatsS__retryIntervalMax;
                goto LABEL_143;
              }

              char v57 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v55);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v56;
              v21 |= (unint64_t)(v57 & 0x7F) << v53;
              if (v57 < 0)
              {
                int v25 = 0;
                v53 += 7;
                char v26 = &OBJC_IVAR___AWDRadioStatsS__retryIntervalMax;
                BOOL v27 = v54++ > 8;
                if (v27) {
                  goto LABEL_147;
                }
                continue;
              }

              break;
            }

            char v26 = &OBJC_IVAR___AWDRadioStatsS__retryIntervalMax;
            goto LABEL_144;
          case 7u:
            char v58 = 0;
            unsigned int v59 = 0;
            uint64_t v21 = 0LL;
            *(_WORD *)(v3 + *((int *)v4 + 869)) |= 8u;
            while (2)
            {
              uint64_t v60 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              unint64_t v61 = v60 + 1;
              if (v60 == -1) {
                goto LABEL_164;
              }
              if (v61 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                char v26 = &OBJC_IVAR___AWDRadioStatsS__retryIntervalAvg;
                goto LABEL_143;
              }

              char v62 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v60);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v61;
              v21 |= (unint64_t)(v62 & 0x7F) << v58;
              if (v62 < 0)
              {
                int v25 = 0;
                v58 += 7;
                char v26 = &OBJC_IVAR___AWDRadioStatsS__retryIntervalAvg;
                BOOL v27 = v59++ > 8;
                if (v27) {
                  goto LABEL_147;
                }
                continue;
              }

              break;
            }

            char v26 = &OBJC_IVAR___AWDRadioStatsS__retryIntervalAvg;
            goto LABEL_144;
          case 8u:
            char v63 = 0;
            unsigned int v64 = 0;
            uint64_t v21 = 0LL;
            *(_WORD *)(v3 + *((int *)v4 + 869)) |= 4u;
            while (2)
            {
              uint64_t v65 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              unint64_t v66 = v65 + 1;
              if (v65 == -1) {
                goto LABEL_164;
              }
              if (v66 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                char v26 = &OBJC_IVAR___AWDRadioStatsS__retryInterval90perc;
                goto LABEL_143;
              }

              char v67 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v65);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v66;
              v21 |= (unint64_t)(v67 & 0x7F) << v63;
              if (v67 < 0)
              {
                int v25 = 0;
                v63 += 7;
                char v26 = &OBJC_IVAR___AWDRadioStatsS__retryInterval90perc;
                BOOL v27 = v64++ > 8;
                if (v27) {
                  goto LABEL_147;
                }
                continue;
              }

              break;
            }

            char v26 = &OBJC_IVAR___AWDRadioStatsS__retryInterval90perc;
            goto LABEL_144;
          case 9u:
            char v68 = 0;
            unsigned int v69 = 0;
            uint64_t v21 = 0LL;
            *(_WORD *)(v3 + *((int *)v4 + 869)) |= 0x4000u;
            while (2)
            {
              uint64_t v70 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              unint64_t v71 = v70 + 1;
              if (v70 == -1) {
                goto LABEL_164;
              }
              if (v71 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                char v26 = &OBJC_IVAR___AWDRadioStatsS__txDelayMin;
                goto LABEL_143;
              }

              char v72 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v70);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v71;
              v21 |= (unint64_t)(v72 & 0x7F) << v68;
              if (v72 < 0)
              {
                int v25 = 0;
                v68 += 7;
                char v26 = &OBJC_IVAR___AWDRadioStatsS__txDelayMin;
                BOOL v27 = v69++ > 8;
                if (v27) {
                  goto LABEL_147;
                }
                continue;
              }

              break;
            }

            char v26 = &OBJC_IVAR___AWDRadioStatsS__txDelayMin;
            goto LABEL_144;
          case 0xAu:
            char v73 = 0;
            unsigned int v74 = 0;
            uint64_t v21 = 0LL;
            *(_WORD *)(v3 + *((int *)v4 + 869)) |= 0x2000u;
            while (2)
            {
              uint64_t v75 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              unint64_t v76 = v75 + 1;
              if (v75 == -1) {
                goto LABEL_164;
              }
              if (v76 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                char v26 = &OBJC_IVAR___AWDRadioStatsS__txDelayMax;
                goto LABEL_143;
              }

              char v77 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v75);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v76;
              v21 |= (unint64_t)(v77 & 0x7F) << v73;
              if (v77 < 0)
              {
                int v25 = 0;
                v73 += 7;
                char v26 = &OBJC_IVAR___AWDRadioStatsS__txDelayMax;
                BOOL v27 = v74++ > 8;
                if (v27) {
                  goto LABEL_147;
                }
                continue;
              }

              break;
            }

            char v26 = &OBJC_IVAR___AWDRadioStatsS__txDelayMax;
            goto LABEL_144;
          case 0xBu:
            char v78 = 0;
            unsigned int v79 = 0;
            uint64_t v21 = 0LL;
            *(_WORD *)(v3 + *((int *)v4 + 869)) |= 0x1000u;
            while (2)
            {
              uint64_t v80 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              unint64_t v81 = v80 + 1;
              if (v80 == -1) {
                goto LABEL_164;
              }
              if (v81 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                char v26 = &OBJC_IVAR___AWDRadioStatsS__txDelayAvg;
                goto LABEL_143;
              }

              char v82 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v80);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v81;
              v21 |= (unint64_t)(v82 & 0x7F) << v78;
              if (v82 < 0)
              {
                int v25 = 0;
                v78 += 7;
                char v26 = &OBJC_IVAR___AWDRadioStatsS__txDelayAvg;
                BOOL v27 = v79++ > 8;
                if (v27) {
                  goto LABEL_147;
                }
                continue;
              }

              break;
            }

            char v26 = &OBJC_IVAR___AWDRadioStatsS__txDelayAvg;
            goto LABEL_144;
          case 0xCu:
            char v83 = 0;
            unsigned int v84 = 0;
            uint64_t v21 = 0LL;
            *(_WORD *)(v3 + *((int *)v4 + 869)) |= 0x800u;
            while (2)
            {
              uint64_t v85 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              unint64_t v86 = v85 + 1;
              if (v85 == -1) {
                goto LABEL_164;
              }
              if (v86 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                char v26 = &OBJC_IVAR___AWDRadioStatsS__txDelay90perc;
                goto LABEL_143;
              }

              char v87 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v85);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v86;
              v21 |= (unint64_t)(v87 & 0x7F) << v83;
              if (v87 < 0)
              {
                int v25 = 0;
                v83 += 7;
                char v26 = &OBJC_IVAR___AWDRadioStatsS__txDelay90perc;
                BOOL v27 = v84++ > 8;
                if (v27) {
                  goto LABEL_147;
                }
                continue;
              }

              break;
            }

            char v26 = &OBJC_IVAR___AWDRadioStatsS__txDelay90perc;
            goto LABEL_144;
          case 0xDu:
            char v88 = 0;
            unsigned int v89 = 0;
            uint64_t v21 = 0LL;
            *(_WORD *)(v3 + *((int *)v4 + 869)) |= 1u;
            while (2)
            {
              uint64_t v90 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              unint64_t v91 = v90 + 1;
              if (v90 == -1) {
                goto LABEL_164;
              }
              if (v91 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                char v26 = &OBJC_IVAR___AWDRadioStatsS__listeningTime;
                goto LABEL_143;
              }

              char v92 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v90);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v91;
              v21 |= (unint64_t)(v92 & 0x7F) << v88;
              if (v92 < 0)
              {
                int v25 = 0;
                v88 += 7;
                char v26 = &OBJC_IVAR___AWDRadioStatsS__listeningTime;
                BOOL v27 = v89++ > 8;
                if (v27) {
                  goto LABEL_147;
                }
                continue;
              }

              break;
            }

            char v26 = &OBJC_IVAR___AWDRadioStatsS__listeningTime;
            goto LABEL_144;
          case 0xEu:
            char v93 = 0;
            unsigned int v94 = 0;
            uint64_t v21 = 0LL;
            *(_WORD *)(v3 + *((int *)v4 + 869)) |= 2u;
            while (2)
            {
              uint64_t v95 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              unint64_t v96 = v95 + 1;
              if (v95 == -1) {
                goto LABEL_164;
              }
              if (v96 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                char v26 = &OBJC_IVAR___AWDRadioStatsS__receivingTime;
                goto LABEL_143;
              }

              char v97 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v95);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v96;
              v21 |= (unint64_t)(v97 & 0x7F) << v93;
              if (v97 < 0)
              {
                int v25 = 0;
                v93 += 7;
                char v26 = &OBJC_IVAR___AWDRadioStatsS__receivingTime;
                BOOL v27 = v94++ > 8;
                if (v27) {
                  goto LABEL_147;
                }
                continue;
              }

              break;
            }

            char v26 = &OBJC_IVAR___AWDRadioStatsS__receivingTime;
            goto LABEL_144;
          case 0xFu:
            char v98 = 0;
            unsigned int v99 = 0;
            uint64_t v21 = 0LL;
            *(_WORD *)(v3 + *((int *)v4 + 869)) |= 0x400u;
            break;
          default:
            char v28 = v5;
            uint64_t v29 = v6;
            int v30 = v7;
            int v31 = v4;
            uint64_t v32 = v3;
            uint64_t result = PBReaderSkipValueWithTag(a2);
            uint64_t v3 = v32;
            char v4 = v31;
            uint64_t v7 = v30;
            uint64_t v6 = v29;
            unsigned int v5 = v28;
            if ((result & 1) != 0) {
              continue;
            }
            return 0LL;
        }

        while (1)
        {
          uint64_t v100 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v101 = v100 + 1;
          if (v100 == -1) {
            goto LABEL_164;
          }
          if (v101 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v102 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v100);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v101;
          v21 |= (unint64_t)(v102 & 0x7F) << v98;
          if ((v102 & 0x80) == 0)
          {
            char v26 = &OBJC_IVAR___AWDRadioStatsS__transmittingTime;
LABEL_144:
            if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
              int v25 = 0;
            }
            else {
              int v25 = v21;
            }
LABEL_147:
            *(_DWORD *)(v3 + *v26) = v25;
            goto LABEL_2;
          }

          int v25 = 0;
          v98 += 7;
          char v26 = &OBJC_IVAR___AWDRadioStatsS__transmittingTime;
          BOOL v27 = v99++ > 8;
          if (v27) {
            goto LABEL_147;
          }
        }

        char v26 = &OBJC_IVAR___AWDRadioStatsS__transmittingTime;
LABEL_143:
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
        goto LABEL_144;
      }
    }

    return *(unsigned __int8 *)(a2 + v8) == 0;
  }

uint64_t sub_1000B3F64(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = result;
  uint64_t v7 = &selRef_setNodeCounts_count_;
  int v8 = &OBJC_IVAR___AWDCountersThreadMleS__disabledRoleCount;
  char v9 = &OBJC_IVAR___AWDCountersThreadMleS__detachedRoleCount;
  unsigned int v10 = &OBJC_IVAR___AWDCountersThreadMleS__childRoleCount;
LABEL_2:
  while (2)
  {
    int v11 = OBJC_IVAR___PBDataReader__error;
    if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
      && !*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
    {
      char v12 = 0;
      unsigned int v13 = 0;
      unint64_t v14 = 0LL;
      while (1)
      {
        uint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v16 = v15 + 1;
        if (v15 == -1)
        {
LABEL_109:
          __break(0x5500u);
          return result;
        }

        if (v16 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v17 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16;
        v14 |= (unint64_t)(v17 & 0x7F) << v12;
        if ((v17 & 0x80) == 0) {
          goto LABEL_12;
        }
        v12 += 7;
        if (v13++ >= 9)
        {
          unint64_t v19 = 0LL;
          int v11 = OBJC_IVAR___PBDataReader__error;
          uint64_t v20 = OBJC_IVAR___PBDataReader__error;
          goto LABEL_16;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
      uint64_t v20 = OBJC_IVAR___PBDataReader__error;
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v19 = 0LL;
      }
      else {
        unint64_t v19 = v14;
      }
      int v11 = OBJC_IVAR___PBDataReader__error;
LABEL_16:
      if (*(_BYTE *)(a2 + v20)) {
        BOOL v21 = 1;
      }
      else {
        BOOL v21 = (v19 & 7) == 4;
      }
      if (!v21)
      {
        switch((v19 >> 3))
        {
          case 1u:
            char v22 = 0;
            unsigned int v23 = 0;
            uint64_t v24 = 0LL;
            *(_WORD *)(v6 + *((int *)v7 + 885)) |= 0x10u;
            while (1)
            {
              uint64_t v25 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              unint64_t v26 = v25 + 1;
              if (v25 == -1) {
                goto LABEL_109;
              }
              if (v26 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                uint64_t v29 = v8;
                goto LABEL_95;
              }

              char v27 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26;
              v24 |= (unint64_t)(v27 & 0x7F) << v22;
              if ((v27 & 0x80) == 0) {
                break;
              }
              v22 += 7;
              BOOL v28 = v23++ > 8;
              if (v28)
              {
                LODWORD(v24) = 0;
                uint64_t v29 = v8;
                goto LABEL_98;
              }
            }

            uint64_t v29 = v8;
            goto LABEL_96;
          case 2u:
            char v36 = 0;
            unsigned int v37 = 0;
            uint64_t v24 = 0LL;
            *(_WORD *)(v6 + *((int *)v7 + 885)) |= 8u;
            while (2)
            {
              uint64_t v38 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              unint64_t v39 = v38 + 1;
              if (v38 == -1) {
                goto LABEL_109;
              }
              if (v39 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                uint64_t v29 = v9;
                goto LABEL_95;
              }

              char v40 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v38);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v39;
              v24 |= (unint64_t)(v40 & 0x7F) << v36;
              if (v40 < 0)
              {
                v36 += 7;
                BOOL v28 = v37++ > 8;
                if (v28)
                {
                  LODWORD(v24) = 0;
                  uint64_t v29 = v9;
                  goto LABEL_98;
                }

                continue;
              }

              break;
            }

            uint64_t v29 = v9;
            goto LABEL_96;
          case 3u:
            char v41 = 0;
            unsigned int v42 = 0;
            uint64_t v24 = 0LL;
            *(_WORD *)(v6 + *((int *)v7 + 885)) |= 4u;
            while (2)
            {
              uint64_t v43 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              unint64_t v44 = v43 + 1;
              if (v43 == -1) {
                goto LABEL_109;
              }
              if (v44 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                uint64_t v29 = v10;
                goto LABEL_95;
              }

              char v45 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v43);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v44;
              v24 |= (unint64_t)(v45 & 0x7F) << v41;
              if (v45 < 0)
              {
                v41 += 7;
                BOOL v28 = v42++ > 8;
                if (v28)
                {
                  LODWORD(v24) = 0;
                  uint64_t v29 = v10;
                  goto LABEL_98;
                }

                continue;
              }

              break;
            }

            uint64_t v29 = v10;
            goto LABEL_96;
          case 4u:
            char v46 = 0;
            unsigned int v47 = 0;
            uint64_t v24 = 0LL;
            *(_WORD *)(v6 + *((int *)v7 + 885)) |= 0x100u;
            while (2)
            {
              uint64_t v48 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              unint64_t v49 = v48 + 1;
              if (v48 == -1) {
                goto LABEL_109;
              }
              if (v49 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                uint64_t v29 = &OBJC_IVAR___AWDCountersThreadMleS__routerRoleCount;
                goto LABEL_95;
              }

              char v50 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v48);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v49;
              v24 |= (unint64_t)(v50 & 0x7F) << v46;
              if (v50 < 0)
              {
                v46 += 7;
                BOOL v28 = v47++ > 8;
                if (v28)
                {
                  LODWORD(v24) = 0;
                  uint64_t v29 = &OBJC_IVAR___AWDCountersThreadMleS__routerRoleCount;
                  goto LABEL_98;
                }

                continue;
              }

              break;
            }

            uint64_t v29 = &OBJC_IVAR___AWDCountersThreadMleS__routerRoleCount;
            goto LABEL_96;
          case 5u:
            char v51 = 0;
            unsigned int v52 = 0;
            uint64_t v24 = 0LL;
            *(_WORD *)(v6 + *((int *)v7 + 885)) |= 0x20u;
            while (2)
            {
              uint64_t v53 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              unint64_t v54 = v53 + 1;
              if (v53 == -1) {
                goto LABEL_109;
              }
              if (v54 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                uint64_t v29 = &OBJC_IVAR___AWDCountersThreadMleS__leaderRoleCount;
                goto LABEL_95;
              }

              char v55 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v53);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v54;
              v24 |= (unint64_t)(v55 & 0x7F) << v51;
              if (v55 < 0)
              {
                v51 += 7;
                BOOL v28 = v52++ > 8;
                if (v28)
                {
                  LODWORD(v24) = 0;
                  uint64_t v29 = &OBJC_IVAR___AWDCountersThreadMleS__leaderRoleCount;
                  goto LABEL_98;
                }

                continue;
              }

              break;
            }

            uint64_t v29 = &OBJC_IVAR___AWDCountersThreadMleS__leaderRoleCount;
            goto LABEL_96;
          case 6u:
            char v56 = 0;
            unsigned int v57 = 0;
            uint64_t v24 = 0LL;
            *(_WORD *)(v6 + *((int *)v7 + 885)) |= 1u;
            while (2)
            {
              uint64_t v58 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              unint64_t v59 = v58 + 1;
              if (v58 == -1) {
                goto LABEL_109;
              }
              if (v59 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                uint64_t v29 = &OBJC_IVAR___AWDCountersThreadMleS__attachAttempts;
                goto LABEL_95;
              }

              char v60 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v58);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v59;
              v24 |= (unint64_t)(v60 & 0x7F) << v56;
              if (v60 < 0)
              {
                v56 += 7;
                BOOL v28 = v57++ > 8;
                if (v28)
                {
                  LODWORD(v24) = 0;
                  uint64_t v29 = &OBJC_IVAR___AWDCountersThreadMleS__attachAttempts;
                  goto LABEL_98;
                }

                continue;
              }

              break;
            }

            uint64_t v29 = &OBJC_IVAR___AWDCountersThreadMleS__attachAttempts;
            goto LABEL_96;
          case 7u:
            char v61 = 0;
            unsigned int v62 = 0;
            uint64_t v24 = 0LL;
            *(_WORD *)(v6 + *((int *)v7 + 885)) |= 0x80u;
            while (2)
            {
              uint64_t v63 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              unint64_t v64 = v63 + 1;
              if (v63 == -1) {
                goto LABEL_109;
              }
              if (v64 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                uint64_t v29 = &OBJC_IVAR___AWDCountersThreadMleS__partitionIdChangesCount;
                goto LABEL_95;
              }

              char v65 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v63);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v64;
              v24 |= (unint64_t)(v65 & 0x7F) << v61;
              if (v65 < 0)
              {
                v61 += 7;
                BOOL v28 = v62++ > 8;
                if (v28)
                {
                  LODWORD(v24) = 0;
                  uint64_t v29 = &OBJC_IVAR___AWDCountersThreadMleS__partitionIdChangesCount;
                  goto LABEL_98;
                }

                continue;
              }

              break;
            }

            uint64_t v29 = &OBJC_IVAR___AWDCountersThreadMleS__partitionIdChangesCount;
            goto LABEL_96;
          case 8u:
            char v66 = 0;
            unsigned int v67 = 0;
            uint64_t v24 = 0LL;
            *(_WORD *)(v6 + *((int *)v7 + 885)) |= 2u;
            while (2)
            {
              uint64_t v68 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              unint64_t v69 = v68 + 1;
              if (v68 == -1) {
                goto LABEL_109;
              }
              if (v69 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                uint64_t v29 = &OBJC_IVAR___AWDCountersThreadMleS__betterPartitionAttachAttempts;
                goto LABEL_95;
              }

              char v70 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v68);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v69;
              v24 |= (unint64_t)(v70 & 0x7F) << v66;
              if (v70 < 0)
              {
                v66 += 7;
                BOOL v28 = v67++ > 8;
                if (v28)
                {
                  LODWORD(v24) = 0;
                  uint64_t v29 = &OBJC_IVAR___AWDCountersThreadMleS__betterPartitionAttachAttempts;
                  goto LABEL_98;
                }

                continue;
              }

              break;
            }

            uint64_t v29 = &OBJC_IVAR___AWDCountersThreadMleS__betterPartitionAttachAttempts;
            goto LABEL_96;
          case 9u:
            char v71 = 0;
            unsigned int v72 = 0;
            uint64_t v24 = 0LL;
            *(_WORD *)(v6 + *((int *)v7 + 885)) |= 0x40u;
            break;
          default:
            int v30 = v8;
            int v31 = v9;
            uint64_t v32 = v10;
            uint64_t v33 = a5;
            unsigned int v34 = v7;
            uint64_t v35 = v6;
            uint64_t result = PBReaderSkipValueWithTag(a2);
            uint64_t v6 = v35;
            uint64_t v7 = v34;
            a5 = v33;
            unsigned int v10 = v32;
            char v9 = v31;
            int v8 = v30;
            if ((result & 1) != 0) {
              continue;
            }
            return 0LL;
        }

        while (1)
        {
          uint64_t v73 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v74 = v73 + 1;
          if (v73 == -1) {
            goto LABEL_109;
          }
          if (v74 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v75 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v73);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v74;
          v24 |= (unint64_t)(v75 & 0x7F) << v71;
          if ((v75 & 0x80) == 0)
          {
            uint64_t v29 = &OBJC_IVAR___AWDCountersThreadMleS__parentChangesCount;
LABEL_96:
            if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
              LODWORD(v24) = 0;
            }
            goto LABEL_98;
          }

          v71 += 7;
          BOOL v28 = v72++ > 8;
          if (v28)
          {
            LODWORD(v24) = 0;
            uint64_t v29 = &OBJC_IVAR___AWDCountersThreadMleS__parentChangesCount;
LABEL_98:
            *(_DWORD *)(v6 + *v29) = v24;
            goto LABEL_2;
          }
        }

        uint64_t v29 = &OBJC_IVAR___AWDCountersThreadMleS__parentChangesCount;
LABEL_95:
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
        goto LABEL_96;
      }
    }

    return *(unsigned __int8 *)(a2 + v11) == 0;
  }

BOOL sub_1000B5088(int a1)
{
  return ((a1 - 3) & 0xFFFFFFF7) == 0;
}

BOOL sub_1000B5098(int a1)
{
  return (a1 & 0xFFFFFFFC) == 8;
}

BOOL sub_1000B50A8(int a1)
{
  return (a1 & 0xFFFFFFFE) == 6;
}

uint64_t sub_1000B50B8(unsigned int a1)
{
  return (a1 < 0xC) & (0x980u >> a1);
}

uint64_t sub_1000B50D0(unsigned int a1)
{
  return (a1 < 0xC) & (0xF20u >> a1);
}

BOOL sub_1000B50E8(int a1)
{
  return (a1 & 0xFFFFFFFD) == 0;
}

BOOL sub_1000B50F4(int a1)
{
  return (a1 - 6) < 6;
}

BOOL sub_1000B5104(int a1)
{
  return (a1 - 1) < 2;
}

uint64_t sub_1000B5114(unsigned int a1)
{
  return (a1 > 0xB) | (0x4E5u >> a1) & 1;
}

void *sub_1000B5130@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 0xB) {
    unsigned int v2 = "unknown-state";
  }
  else {
    unsigned int v2 = off_1002B17B0[a1];
  }
  return sub_10000AC00(a2, v2);
}

void *sub_1000B515C@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 2) {
    unsigned int v2 = "unknown-status";
  }
  else {
    unsigned int v2 = off_1002B1810[a1];
  }
  return sub_10000AC00(a2, v2);
}

void *sub_1000B5188@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 2) {
    unsigned int v2 = "unknown-reason";
  }
  else {
    unsigned int v2 = off_1002B1828[a1];
  }
  return sub_10000AC00(a2, v2);
}

std::string *sub_1000B51B4@<X0>(unsigned int a1@<W0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  if (a1 < 0xA) {
    return std::string::assign(a2, off_1002B1840[a1]);
  }
  snprintf(__str, 0x10uLL, "(node-type-%u)", a1);
  return std::string::assign(a2, __str);
}

void sub_1000B5250(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1000B5270(char *a1)
{
  int v2 = a1[23];
  if ((v2 & 0x80000000) == 0)
  {
    if (strcasecmp(a1, "end-device"))
    {
      if (strcasecmp(a1, "end"))
      {
        if (strcasecmp(a1, "e"))
        {
          int v3 = v2;
          int v4 = *a1;
          if (v3 != 1 || v4 != 50)
          {
            if (strcasecmp(a1, "sleepy-end-device") && strcasecmp(a1, "sed") && (v3 != 1 || v4 != 51))
            {
              unsigned int v5 = a1;
              if (!strcasecmp(a1, "synchronized-sleepy-end-device")) {
                return 4LL;
              }
              goto LABEL_25;
            }

            return 3LL;
          }
        }
      }
    }

    return 2LL;
  }

  uint64_t v6 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, "end-device")
    || !strcasecmp(v6, "end")
    || !strcasecmp(v6, "e")
    || *((void *)a1 + 1) == 1LL && *v6 == 50)
  {
    return 2LL;
  }

  if (!strcasecmp(v6, "sleepy-end-device")) {
    return 3LL;
  }
  if (!strcasecmp(v6, "sed")) {
    return 3LL;
  }
  unsigned int v5 = *(char **)a1;
  if (*((void *)a1 + 1) == 1LL && *v5 == 51) {
    return 3LL;
  }
LABEL_25:
  if (!strcasecmp(v5, "ssed") || sub_1000B55AC(a1, "4")) {
    return 4LL;
  }
  if (a1[23] < 0)
  {
    int v8 = *(const char **)a1;
  }

  else
  {
    int v8 = a1;
    if (!strcasecmp(a1, "router")) {
      return 1LL;
    }
  }

  if (!strcasecmp(v8, "r") || sub_1000B55AC(a1, "1")) {
    return 1LL;
  }
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, "leader"))
    {
      char v9 = a1;
      if (!strcasecmp(a1, "nl-lurker")) {
        return 6LL;
      }
      goto LABEL_41;
    }

    return 7LL;
  }

  char v9 = *(const char **)a1;
  if (!strcasecmp(v9, "nl-lurker")) {
    return 6LL;
  }
LABEL_41:
  if (!strcasecmp(v9, "lurker") || sub_1000B55AC(a1, "6")) {
    return 6LL;
  }
  if (a1[23] < 0)
  {
    unsigned int v10 = *(const char **)a1;
  }

  else
  {
    unsigned int v10 = a1;
    if (!strcasecmp(a1, "sleepy-router")) {
      return 8LL;
    }
  }

  if (!strcasecmp(v10, "sr")) {
    return 8LL;
  }
  if (sub_1000B55AC(a1, "8")) {
    return 8LL;
  }
  else {
    return 0LL;
  }
}

BOOL sub_1000B55AC(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1LL) {
        goto LABEL_10;
      }
      a1 = (void *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }

  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1LL) {
LABEL_10:
    }
      sub_100077124();
    return memcmp(a1, __s, v4) == 0;
  }

  return 0LL;
}

void sub_1000B563C(int a1@<W0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  int v4 = 8;
  do
  {
    if (v4 == 4) {
      std::string::push_back(a2, 32);
    }
    if (((1 << (v4 - 1)) & a1) == 0)
    {
      std::string::value_type v7 = 45;
      goto LABEL_9;
    }

    unsigned int v5 = (1 << (v4 - 1));
    if (v5 > 0xF)
    {
      if ((1 << (v4 - 1)) > 0x3Fu)
      {
        if (v5 == 64)
        {
          std::string::value_type v7 = 82;
          goto LABEL_9;
        }

        if (v5 == 128)
        {
          std::string::value_type v7 = 70;
          goto LABEL_9;
        }
      }

      else
      {
        if (v5 == 16)
        {
          std::string::value_type v7 = 115;
          goto LABEL_9;
        }

        if (v5 == 32)
        {
          std::string::value_type v7 = 67;
          goto LABEL_9;
        }
      }

void sub_1000B5758(_Unwind_Exception *exception_object)
{
}

void sub_1000B5774(int a1@<W0>, std::string::value_type *a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0LL;
  a3->__r_.__value_.__l.__size_ = 0LL;
  a3->__r_.__value_.__l.__cap_ = 0LL;
  if (a2) {
    unsigned int v5 = a2;
  }
  else {
    unsigned int v5 = "76543210";
  }
  uint64_t v6 = 8LL;
  do
  {
    if (v6 == 4) {
      std::string::push_back(a3, 32);
    }
    if (((1 << (v6 - 1)) & a1) != 0) {
      std::string::value_type v7 = *v5;
    }
    else {
      std::string::value_type v7 = 45;
    }
    std::string::push_back(a3, v7);
    ++v5;
    --v6;
  }

  while (v6);
}

void sub_1000B580C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1000B5828(void *a1)
{
  uint64_t v1 = a1;
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    int v2 = *((unsigned __int8 *)a1 + 23);
    switch(*((_BYTE *)a1 + 23))
    {
      case 0x12:
        goto LABEL_3;
      case 0x13:
        if (*a1 != 0x616974696E696E75LL
          || a1[1] != 0x61663A64657A696CLL
          || *(void *)((char *)a1 + 11) != 0x746C7561663A6465LL)
        {
          goto LABEL_104;
        }

        return 1LL;
      case 0x14:
        goto LABEL_89;
      case 0x15:
      case 0x16:
        goto LABEL_104;
      case 0x17:
        if (*a1 == 0x616974696E696E75LL
          && a1[1] == 0x70753A64657A696CLL
          && *(void *)((char *)a1 + 15) == 0x676E696461726770LL)
        {
          return 2LL;
        }

        if (v2 == 20)
        {
LABEL_89:
          if (*a1 == 0x3A656E696C66666FLL && a1[1] == 0x697373696D6D6F63LL && *((_DWORD *)a1 + 4) == 1684369007) {
            return 5LL;
          }
LABEL_96:
          unint64_t v16 = a1;
          if (v2 != 20) {
            goto LABEL_104;
          }
          goto LABEL_97;
        }

        if (v2 != 18) {
          goto LABEL_104;
        }
LABEL_3:
        if (*a1 != 0x3A656E696C66666FLL || a1[1] != 0x656C732D70656564LL || *((_WORD *)a1 + 8) != 28773)
        {
          if ((v2 & 0x80) == 0) {
            goto LABEL_104;
          }
          goto LABEL_36;
        }

        break;
      default:
        if (v2 != 30) {
          goto LABEL_104;
        }
        if (*a1 != 0x746169636F737361LL
          || a1[1] != 0x646572633A676E69LL
          || a1[2] != 0x2D736C6169746E65LL
          || *(void *)((char *)a1 + 22) != 0x64656465656E2D73LL)
        {
          goto LABEL_96;
        }

        return 7LL;
    }

    return 3LL;
  }

  if (a1[1] == 19LL)
  {
    BOOL v5 = *(void *)*a1 == 0x616974696E696E75LL && *(void *)(*a1 + 8LL) == 0x61663A64657A696CLL;
    if (v5 && *(void *)(*a1 + 11LL) == 0x746C7561663A6465LL) {
      return 1LL;
    }
  }

  if (a1[1] == 23LL)
  {
    BOOL v7 = *(void *)*a1 == 0x616974696E696E75LL && *(void *)(*a1 + 8LL) == 0x70753A64657A696CLL;
    if (v7 && *(void *)(*a1 + 15LL) == 0x676E696461726770LL) {
      return 2LL;
    }
  }

  if (a1[1] == 18LL)
  {
    BOOL v9 = *(void *)*a1 == 0x3A656E696C66666FLL && *(void *)(*a1 + 8LL) == 0x656C732D70656564LL;
    if (v9 && *(_WORD *)(*a1 + 16LL) == 28773) {
      return 3LL;
    }
  }

double sub_1000B5DA0(uint64_t a1)
{
  *(void *)(a1 + 512) = 24LL;
  double result = 0.0;
  *(_OWORD *)a1 = xmmword_100227E30;
  *(void *)(a1 + 16) = 0x80000LL;
  return result;
}

uint64_t sub_1000B5DC8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 516);
}

uint64_t sub_1000B5DD0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 512);
}

_DWORD *sub_1000B5DD8(_DWORD *a1, uint64_t a2)
{
  if (a2)
  {
    *a1 = *(void *)a2;
    a1[1] = *(_DWORD *)(a2 + 8);
  }

  else
  {
    gettimeofday(&v5, 0LL);
    __darwin_suseconds_t tv_usec = v5.tv_usec;
    *a1 = v5.tv_sec;
    a1[1] = tv_usec;
  }

  return a1;
}

uint64_t sub_1000B5E2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 20) = a2;
  return result;
}

_DWORD *sub_1000B5E34(_DWORD *result, int a2, void *__src, size_t __n)
{
  unsigned int v4 = __n;
  uint64_t v5 = (uint64_t)result;
  if ((__n & 0x80000000) != 0) {
    goto LABEL_5;
  }
  uint64_t v6 = result[128];
  int v7 = v6 + __n;
  if (!__OFADD__((_DWORD)v6, (_DWORD)__n))
  {
    BOOL v8 = __CFADD__(v7, 4LL);
    unint64_t v9 = v7 + 4LL;
    if (!v8)
    {
      if (v9 >= 0x201)
      {
LABEL_5:
        result[129] = 2;
LABEL_10:
        uint64_t v14 = (int)v4 + 4LL;
        if ((unint64_t)(int)v4 < 0xFFFFFFFFFFFFFFFCLL)
        {
          uint64_t v15 = *(unsigned int *)(v5 + 12);
          BOOL v8 = __CFADD__(v15, v14);
          int v16 = v15 + v14;
          if (!v8)
          {
            *(_DWORD *)(v5 + 12) = v16;
            return (_DWORD *)v5;
          }
        }

        goto LABEL_13;
      }

      *(_DWORD *)((char *)result + v6) = a2 | ((_DWORD)__n << 16);
      uint64_t v10 = result[128];
      double result = memcpy((char *)result + v10 + 4, __src, __n);
      unsigned int v11 = v4 + 4;
      uint64_t v12 = *(int *)(v5 + 512);
      BOOL v8 = __CFADD__(v12, v4 + 4LL);
      int v13 = v12 + v4 + 4;
      if (!v8)
      {
        *(_DWORD *)(v5 + 512) = v13;
        *(_DWORD *)(v5 + 8) += v11;
        *(_WORD *)(v5 + 18) += v11;
        goto LABEL_10;
      }
    }
  }

_DWORD *sub_1000B5F14(_DWORD *result, const void *a2, size_t __n)
{
  int v3 = __n;
  unsigned int v4 = result;
  if ((__n & 0x80000000) != 0)
  {
    result[129] = 2;
    goto LABEL_11;
  }

  uint64_t v5 = result[128];
  if (__OFADD__((_DWORD)v5, (_DWORD)__n))
  {
LABEL_13:
    __break(0x5500u);
    goto LABEL_14;
  }

  if ((v5 + __n) < 0x201)
  {
    double result = memcpy((char *)result + v5, a2, __n);
    int v6 = v4[128];
    BOOL v7 = __OFADD__(v6, v3);
    int v8 = v6 + v3;
    if (!v7)
    {
      v4[128] = v8;
      int v9 = v4[2];
      BOOL v10 = __CFADD__(v9, v3);
      int v11 = v9 + v3;
      if (!v10)
      {
        v4[2] = v11;
LABEL_11:
        int v12 = v4[3];
        BOOL v10 = __CFADD__(v12, v3);
        int v13 = v12 + v3;
        if (!v10)
        {
          v4[3] = v13;
          return v4;
        }

        goto LABEL_13;
      }
    }

    goto LABEL_13;
  }

  if (v5 < 0x201)
  {
    double result = memcpy((char *)result + v5, a2, 512 - v5);
    v4[128] = 512;
    goto LABEL_11;
  }

double sub_1000B5FD0(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 64) = a1 + 72;
  *(_BYTE *)(a1 + 8) = 1;
  return result;
}

uint64_t sub_1000B5FF8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000B6044(FILE **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    int v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v2)
    {
      int v3 = v2;
      if (sub_10015A058(4))
      {
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
          sub_10020D194(v3, v4, v5, v6, v7, v8, v9, v10);
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    return v1 == 0LL;
  }

  int v12 = (FILE *)(a1 + 2);
  uint64_t result = sub_100081364((std::string *)(a1 + 2));
  if (!(_DWORD)result) {
    return v1 == 0LL;
  }
  else {
    size_t v14 = *((unsigned __int8 *)a1 + 39);
  }
  if (v14 < 0xFFFFFFFFFFFFFFEDLL)
  {
    uint64_t v15 = __p;
    sub_1000765F0((uint64_t)__p, v14 + 19);
    if (v24 < 0) {
      uint64_t v15 = (void **)__p[0];
    }
    if (v14)
    {
      else {
        int v16 = a1[2];
      }
      memmove(v15, v16, v14);
    }

    strcpy((char *)v15 + v14, "sniffer_logs.pcapng");
    char v17 = (const char **)(a1 + 5);
    sub_100014D08((uint64_t)(a1 + 5), (__int128 *)__p);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    BOOL v18 = (char *)a1 + 63;
    unint64_t v19 = (const char *)(a1 + 5);
    uint64_t v20 = fopen(v19, "a+b");
    *a1 = v20;
    if (!v20)
    {
      BOOL v21 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v21)
      {
        char v22 = v21;
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }
    }

    return v1 == 0LL;
  }

  __break(0x5500u);
  return result;
}

void sub_1000B622C(uint64_t a1)
{
  int v2 = *(FILE **)a1;
  int v3 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  uint64_t v4 = v3;
  if (v2)
  {
    if (v3)
    {
      if (sub_10015A058(4))
      {
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
          sub_10020D1F4(v4, v5, v6, v7, v8, v9, v10, v11);
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    fflush(*(FILE **)a1);
    fclose(*(FILE **)a1);
    *(void *)a1 = 0LL;
    sub_1000817B0();
    *(_BYTE *)(a1 + 8) = 1;
  }

  else if (v3)
  {
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

BOOL sub_1000B6320(void *a1)
{
  return *a1 != 0LL;
}

uint64_t sub_1000B6330(uint64_t a1)
{
  return a1 + 64;
}

ssize_t sub_1000B6338(uint64_t a1, int a2)
{
  int v13 = 1;
  int v14 = a2;
  uint64_t v11 = 0x40002A1B2C3D4LL;
  __int128 v12 = xmmword_100227E40;
  uint64_t v4 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v4)
  {
    uint64_t v5 = v4;
    if (sub_10015A058(6) && os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__n128 buf = 67109120;
      int v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "PcapManager::insert_fd(%d)", buf, 8u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  setsockopt(a2, 0xFFFF, 4130, &v13, 4u);
  ssize_t v6 = write(a2, &v11, 0x18uLL);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = *__error();
    uint64_t v8 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v8)
    {
      uint64_t v9 = v8;
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    *__error() = v7;
  }

  else
  {
    sub_10003308C((uint64_t **)(a1 + 64), &v14, &v14);
    return 0LL;
  }

  return v6;
}

ssize_t sub_1000B6508(uint64_t a1)
{
  *(void *)uint64_t v9 = -1LL;
  ssize_t v2 = socketpair(1, 2, 0, v9);
  if ((v2 & 0x80000000) != 0)
  {
    ssize_t v4 = v2;
    int v5 = *__error();
    ssize_t v6 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v6)
    {
      int v7 = v6;
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    goto LABEL_12;
  }

  ssize_t v3 = sub_1000B6338(a1, v9[1]);
  if ((v3 & 0x80000000) != 0)
  {
    ssize_t v4 = v3;
    int v5 = *__error();
    goto LABEL_12;
  }

  ssize_t v4 = v9[0];
  if (v9[0] < 0)
  {
    int v5 = 0;
LABEL_12:
    close(v9[0]);
    close(v9[1]);
    *__error() = v5;
  }

  return v4;
}

void sub_1000B6638(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a1 + 64;
  if ((uint64_t *)(a1 + 64) == a2)
  {
    sub_10000CDD4(buf, a2);
    sub_1000B6638(a1, buf);
    sub_10000D0D4((uint64_t)buf);
  }

  else if (a2[2])
  {
    int v5 = a2 + 1;
    uint64_t v4 = *a2;
    uint64_t v10 = v4;
    if ((uint64_t *)v4 != a2 + 1)
    {
      do
      {
        int v9 = *(_DWORD *)(v4 + 28);
        ssize_t v6 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v6)
        {
          if (sub_10015A058(6) && os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)__n128 buf = 67109120;
            LODWORD(v12) = v9;
            _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "PcapManager::close_fd_set: Closing FD %d",  buf,  8u);
          }
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__n128 buf = 136315394;
          __int128 v12 = "com.apple.wpantund.ncp";
          __int16 v13 = 2080;
          int v14 = "default";
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging Module is not defined for SubSystem: %s, Category: %s",  buf,  0x16u);
        }

        close(v9);
        sub_1000B6ED4(v3, &v9);
        sub_10000B338((uint64_t)&v10);
        uint64_t v4 = v10;
      }

      while ((uint64_t *)v10 != v5);
    }

    int v7 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v7)
    {
      if (sub_10015A058(6))
      {
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          uint64_t v8 = *(void *)(a1 + 80);
          *(_DWORD *)__n128 buf = 67109120;
          LODWORD(v12) = v8;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "PcapManager: %d pcap streams remaining",  buf,  8u);
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }
  }

void sub_1000B68AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000B68C8(uint64_t a1, int *__buf)
{
  v15[1] = 0LL;
  uint64_t v16 = 0LL;
  int v14 = v15;
  v15[0] = 0LL;
  if (!__buf[129])
  {
    uint64_t v6 = *(void *)(a1 + 64);
    uint64_t v16 = v6;
    uint64_t v7 = a1 + 72;
    if (v6 == a1 + 72)
    {
LABEL_18:
      sub_1000B6638(a1, (uint64_t *)&v14);
      return sub_10000D0D4((uint64_t)&v14);
    }

    while ((write(*(_DWORD *)(v6 + 28), __buf, __buf[128]) & 0x80000000) == 0)
    {
LABEL_14:
      sub_10000B338((uint64_t)&v16);
      uint64_t v6 = v16;
      if (v16 == v7) {
        goto LABEL_18;
      }
    }

    int v9 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v9)
    {
      *(_DWORD *)__n128 buf = 67109378;
      *(_DWORD *)uint64_t v18 = 338;
      *(_WORD *)&v18[4] = 2080;
      *(void *)&v18[6] = "ret >= 0";
      uint64_t v10 = v9;
      uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/wpantund/src/wpantund/Pcap.cpp:%d: Check Failed (%s)";
      uint32_t v12 = 18;
    }

    else
    {
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_13:
        sub_10003308C(&v14, (int *)(v16 + 28), (_DWORD *)(v16 + 28));
        goto LABEL_14;
      }

      *(_DWORD *)__n128 buf = 136315394;
      *(void *)uint64_t v18 = "com.apple.wpantund.ncp";
      *(_WORD *)&v18[8] = 2080;
      *(void *)&v18[10] = "default";
      uint64_t v10 = (os_log_s *)&_os_log_default;
      uint64_t v11 = "Logging Module is not defined for SubSystem: %s, Category: %s";
      uint32_t v12 = 22;
    }

    _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, v11, buf, v12);
    goto LABEL_13;
  }

  ssize_t v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v2)
  {
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  return sub_10000D0D4((uint64_t)&v14);
}

void sub_1000B6B1C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_1000B6B44(FILE **a1)
{
  uint64_t __ptr = 0x40002A1B2C3D4LL;
  __int128 v6 = xmmword_100227E40;
  int v2 = fwrite(&__ptr, 1uLL, 0x18uLL, *a1);
  fflush(*a1);
  uint64_t v3 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v3)
  {
    uint64_t v4 = v3;
    if (sub_10015A058(6))
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__n128 buf = 67109120;
        int v8 = v2;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "PcapManager::insert_header_to_file count[%d]",  buf,  8u);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

void sub_1000B6C60(uint64_t a1, int *__ptr)
{
  if (__ptr[129])
  {
    int v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v2)
    {
      uint64_t v3 = v2;
      if (sub_10015A058(4))
      {
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
          sub_10020D408(v3, v4, v5);
        }
      }

      return;
    }

    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      return;
    }
LABEL_16:
    sub_1001FB53C();
    return;
  }

  if (!*(void *)a1) {
    return;
  }
  if (*(_BYTE *)(a1 + 8))
  {
    sub_1000B6B44((FILE **)a1);
    *(_BYTE *)(a1 + 8) = 0;
  }

  int v8 = fwrite(__ptr, 1uLL, __ptr[128], *(FILE **)a1);
  fflush(*(FILE **)a1);
  int v9 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (!v9)
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      return;
    }
    goto LABEL_16;
  }

  uint64_t v10 = v9;
  if (sub_10015A058(6) && os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    v11[0] = 67109120;
    v11[1] = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "SNIFFER_TLF:: push_packet_to_file fwrite count[%d]",  (uint8_t *)v11,  8u);
  }

uint64_t sub_1000B6DE4(uint64_t a1, char *a2, int a3, char *a4, int *a5)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v12 = v5;
  for (i = a1 + 72; v12 != i; uint64_t v5 = v12)
  {
    int v10 = *(_DWORD *)(v5 + 28);
    if (a2 && __darwin_check_fd_set_overflow(*(_DWORD *)(v5 + 28), a2, 0)) {
      *(_DWORD *)&a2[((unint64_t)v10 >> 3) & 0x1FFFFFFFFFFFFFFCLL] |= 1 << v10;
    }
    if (a4 && __darwin_check_fd_set_overflow(v10, a4, 0)) {
      *(_DWORD *)&a4[((unint64_t)v10 >> 3) & 0x1FFFFFFFFFFFFFFCLL] |= 1 << v10;
    }
    if (a5 && *a5 < v10) {
      *a5 = v10;
    }
    sub_10000B338((uint64_t)&v12);
  }

  return 0LL;
}

uint64_t sub_1000B6ED4(uint64_t a1, int *a2)
{
  uint64_t v3 = (uint64_t *)sub_1000B6F18(a1, a2);
  sub_100011568(a1, v3);
  return 1LL;
}

uint64_t sub_1000B6F18(uint64_t a1, int *a2)
{
  uint64_t v3 = a1 + 8;
  uint64_t result = sub_1000B6F60(a1, a2, *(void *)(a1 + 8), a1 + 8);
  if (v3 == result || *a2 < *(_DWORD *)(result + 28)) {
    return v3;
  }
  return result;
}

uint64_t sub_1000B6F60(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = a4;
  if (a3)
  {
    int v5 = *a2;
    do
    {
      int v6 = *(_DWORD *)(a3 + 28);
      BOOL v7 = v6 < v5;
      if (v6 >= v5) {
        int v8 = (uint64_t *)a3;
      }
      else {
        int v8 = (uint64_t *)(a3 + 8);
      }
      if (!v7) {
        uint64_t result = a3;
      }
      a3 = *v8;
    }

    while (*v8);
  }

  return result;
}

void sub_1000B6F8C(char *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = operator new(0x58uLL);
  sub_1000B7248(v4, a1);
  sub_1000BE268(a2, v4);
  uint64_t v5 = *a2;
  sub_10000AC00(&__p, a1);
  sub_10000AB5C(&v7, a2);
  sub_1000B712C(v5, &__p, &v7);
  if (v8) {
    sub_10000ABAC(v8);
  }
  int v6 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v6)
  {
    if (sub_10015A058(5))
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__n128 buf = 136315138;
        uint64_t v11 = a1;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Internal client created: %s", buf, 0xCu);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

void sub_1000B70D8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void sub_1000B712C(uint64_t a1, const std::string *a2, void *a3)
{
  int v6 = sub_10012E6F8();
  std::string::basic_string(&v9, a2);
  sub_10000AB5C(&v7, a3);
  sub_10012F680((uint64_t)v6, &v9, &v7);
  if (v8) {
    sub_10000ABAC(v8);
  }
  sub_1000B7370(a1);
}

void sub_1000B71B4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1000B71D8(uint64_t a1)
{
  int v2 = sub_10012E6F8();
  std::string::basic_string(&v3, (const std::string *)(a1 + 32));
  sub_10012F814((uint64_t)v2, (const void **)&v3.__r_.__value_.__l.__data_);
}

void sub_1000B722C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000B7248(void *a1, char *a2)
{
  uint64_t v4 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_USER_INITIATED, 0);
  dispatch_queue_t v5 = dispatch_queue_create(a2, v4);
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = v5;
  if (v5)
  {
    int v6 = v5;
    dispatch_retain(v5);
    a1[3] = 0LL;
    dispatch_release(v6);
  }

  else
  {
    a1[3] = 0LL;
  }

  sub_10000AC00(a1 + 4, a2);
  uint64_t v7 = operator new(0x18uLL);
  v7[2] = 0LL;
  v7[1] = 0LL;
  *uint64_t v7 = v7 + 1;
  sub_1000BE428(a1 + 7, (uint64_t)v7);
  a1[9] = sub_10012E6F8();
  return a1;
}

void sub_1000B72F8(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  sub_10000AB80(v4);
  sub_1000B7338(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B7338(uint64_t a1)
{
  int v2 = *(dispatch_object_s **)(a1 + 24);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(dispatch_object_s **)(a1 + 16);
  if (v3) {
    dispatch_release(v3);
  }
  return sub_1000BE23C(a1);
}

void sub_1000B7370(uint64_t a1)
{
  int v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v2)
  {
    uint64_t v3 = v2;
    if (sub_10015A058(5) && os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = (void *)(a1 + 32);
      int v8 = 136315138;
      std::string v9 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Internal client clientName:%s eventsOn initiate set to true",  (uint8_t *)&v8,  0xCu);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  *(_BYTE *)(a1 + 80) = 1;
  dispatch_queue_t v5 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v5)
  {
    int v6 = v5;
    if (sub_10015A058(5) && os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = (void *)(a1 + 32);
      int v8 = 136315138;
      std::string v9 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Internal client clientName:%s eventsOn set to true",  (uint8_t *)&v8,  0xCu);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

void *sub_1000B7500@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_10000AB5C(a2, (void *)(a1 + 56));
}

uint64_t sub_1000B750C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80);
}

void sub_1000B7514(uint64_t a1)
{
  int v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v2)
  {
    uint64_t v3 = v2;
    if (sub_10015A058(5) && os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = (void *)(a1 + 32);
      int v8 = 136315138;
      std::string v9 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Internal client clientName:%s eventsOff initiate set to false",  (uint8_t *)&v8,  0xCu);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  *(_BYTE *)(a1 + 80) = 0;
  dispatch_queue_t v5 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v5)
  {
    int v6 = v5;
    if (sub_10015A058(5) && os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = (void *)(a1 + 32);
      int v8 = 136315138;
      std::string v9 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Internal client clientName:%s eventsOff  set to false",  (uint8_t *)&v8,  0xCu);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

uint64_t sub_1000B76A0(uint64_t a1)
{
  int v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v2)
  {
    if (sub_10015A058(5) && os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = (void *)(a1 + 32);
      int v5 = 136315138;
      int v6 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "Internal client destroyed: %s",  (uint8_t *)&v5,  0xCu);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  sub_10000AB80(a1 + 56);
  sub_1000B7338(a1);
  return a1;
}

void sub_1000B77B0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006EEC(a1);
}

void sub_1000B77C0(void *a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v27 = 0LL;
  uint64_t v28 = &v27;
  uint64_t v29 = 0x2000000000LL;
  char v30 = 1;
  int v8 = dispatch_group_create();
  dispatch_group_enter(v8);
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1174405120LL;
  aBlock[2] = sub_1000B7A2C;
  aBlock[3] = &unk_1002B1898;
  std::string::basic_string(&v22, a2);
  aBlock[4] = &v27;
  uint64_t v23 = a3;
  dispatch_object_t v24 = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  std::string v9 = _Block_copy(aBlock);
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  uint64_t v11 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  uint64_t v25 = v9;
  unint64_t v26 = v11;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1174405120LL;
  v17[2] = sub_1000B7BEC;
  v17[3] = &unk_1002B18C8;
  v17[4] = a1;
  std::string::basic_string(&__p, a2);
  if (v9) {
    uint64_t v12 = _Block_copy(v9);
  }
  else {
    uint64_t v12 = 0LL;
  }
  unint64_t v19 = v12;
  dispatch_object_t object = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  sub_1000BE60C(a1, (uint64_t)v17);
  if (v8)
  {
    uint64_t v13 = dispatch_group_wait(v8, 0xFFFFFFFFFFFFFFFFLL);
    int v14 = v28;
    if (v13) {
      *((_BYTE *)v28 + 24) = 1;
    }
  }

  else
  {
    int v14 = v28;
  }

  int v15 = *((unsigned __int8 *)v14 + 24);
  *(void *)(a4 + 16) = 0LL;
  *(void *)(a4 + 24) = 0LL;
  *(void *)(a4 + 8) = 0LL;
  if (v15) {
    int v16 = 3;
  }
  else {
    int v16 = 0;
  }
  *(_DWORD *)a4 = v16;
  if (object) {
    dispatch_release(object);
  }
  if (v19) {
    _Block_release(v19);
  }
  if (v11) {
    dispatch_release(v11);
  }
  if (v9) {
    _Block_release(v9);
  }
  if (v24) {
    dispatch_release(v24);
  }
  if (v8) {
    dispatch_release(v8);
  }
  _Block_object_dispose(&v27, 8);
}

void sub_1000B79D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *__p, uint64_t a25, int a26, __int16 a27, char a28, char a29, uint64_t a30, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  if (a29 < 0) {
    operator delete(__p);
  }
  if (v31) {
    dispatch_release(v31);
  }
  _Block_object_dispose((const void *)(v32 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1000B7A2C(uint64_t a1, int a2, void *a3)
{
  int v6 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v6)
  {
    uint64_t v7 = v6;
    if (sub_10015A058(5) && os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v8 = (void *)(a1 + 40);
      int v9 = 136315650;
      int v10 = "get_block_invoke";
      __int16 v11 = 1024;
      int v12 = a2;
      __int16 v13 = 2080;
      int v14 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "Received callback in %s with status %d for cmd: %s",  (uint8_t *)&v9,  0x1Cu);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a2;
  sub_100018024(*(uint64_t **)(a1 + 64), a3);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
}

void sub_1000B7B68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(dispatch_object_s **)(a2 + 72);
  *(void *)(a1 + 72) = v4;
  if (v4) {
    dispatch_retain(v4);
  }
}

void sub_1000B7BAC(uint64_t a1)
{
  int v2 = *(dispatch_object_s **)(a1 + 72);
  if (v2) {
    dispatch_release(v2);
  }
}

void sub_1000B7BEC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = sub_10012E6F8();
  std::string::basic_string(&v9, (const std::string *)(v2 + 32));
  std::string::basic_string(&v8, (const std::string *)(a1 + 40));
  uint64_t v4 = *(void **)(a1 + 64);
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  int v5 = *(dispatch_object_s **)(a1 + 72);
  aBlock = v4;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  sub_100130534(v3, &v9, &v8, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_1000B7CB0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000B7CEC(uint64_t a1)
{
  uint64_t v2 = *(dispatch_object_s **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void sub_1000B7D28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 64);
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  int v5 = *(dispatch_object_s **)(a2 + 72);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 72) = v5;
  if (v5) {
    dispatch_retain(v5);
  }
}

void sub_1000B7D80(uint64_t a1)
{
  uint64_t v2 = *(dispatch_object_s **)(a1 + 72);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 64);
  if (v3) {
    _Block_release(v3);
  }
}

void sub_1000B7DD0(void *a1@<X0>, const std::string *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v34 = 0LL;
  uint64_t v35 = &v34;
  uint64_t v36 = 0x2000000000LL;
  char v37 = 1;
  std::string v8 = dispatch_group_create();
  dispatch_group_enter(v8);
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1174405120LL;
  aBlock[2] = sub_1000B818C;
  aBlock[3] = &unk_1002B1900;
  aBlock[4] = &v34;
  dispatch_object_t v31 = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  std::string v9 = _Block_copy(aBlock);
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  __int16 v11 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  uint64_t v32 = v9;
  uint64_t v33 = v11;
  v29[0] = 0LL;
  v29[1] = 0LL;
  uint64_t v28 = v29;
  v25.n128_u64[0] = 0LL;
  sub_10000AC00(&__p, "property_type");
  int v12 = sub_10000ED88(&v28, (__n128 *)&__p);
  sub_100017620(v12, (uint64_t *)&v25);
  std::string::basic_string(&__p, a2);
  sub_10000AC00(&v25, "property_name");
  __int16 v13 = sub_10000ED88(&v28, &v25);
  sub_1000175B4(v13, (uint64_t)&__p);
  if (v26 < 0) {
    operator delete((void *)v25.n128_u64[0]);
  }
  sub_10000AC00(&__p, a3);
  sub_10000AC00(&v25, "property_value");
  int v14 = sub_10000ED88(&v28, &v25);
  sub_1000175B4(v14, (uint64_t)&__p);
  if (v26 < 0) {
    operator delete((void *)v25.n128_u64[0]);
  }
  v25.n128_u64[0] = strlen(a3);
  sub_10000AC00(&__p, "property_value_length");
  int v15 = sub_10000ED88(&v28, (__n128 *)&__p);
  sub_1000B827C(v15, (uint64_t *)&v25);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 1174405120LL;
  v21[2] = sub_1000B82D4;
  v21[3] = &unk_1002B1930;
  v21[4] = a1;
  sub_10000D19C(v22, (uint64_t *)&v28);
  if (v9) {
    int v16 = _Block_copy(v9);
  }
  else {
    int v16 = 0LL;
  }
  uint64_t v23 = v16;
  dispatch_object_t object = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  sub_1000BE60C(a1, (uint64_t)v21);
  if (v8)
  {
    uint64_t v17 = dispatch_group_wait(v8, 0xFFFFFFFFFFFFFFFFLL);
    uint64_t v18 = v35;
    if (v17) {
      *((_BYTE *)v35 + 24) = 1;
    }
  }

  else
  {
    uint64_t v18 = v35;
  }

  int v19 = *((unsigned __int8 *)v18 + 24);
  *(void *)(a4 + 16) = 0LL;
  *(void *)(a4 + 24) = 0LL;
  *(void *)(a4 + 8) = 0LL;
  if (v19) {
    int v20 = 3;
  }
  else {
    int v20 = 0;
  }
  *(_DWORD *)a4 = v20;
  if (object) {
    dispatch_release(object);
  }
  if (v23) {
    _Block_release(v23);
  }
  sub_10000D448((uint64_t)v22);
  sub_10000D448((uint64_t)&v28);
  if (v11) {
    dispatch_release(v11);
  }
  if (v9) {
    _Block_release(v9);
  }
  if (v31) {
    dispatch_release(v31);
  }
  if (v8) {
    dispatch_release(v8);
  }
  _Block_object_dispose(&v34, 8);
}

void sub_1000B80F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, void *__p, uint64_t a27, int a28, __int16 a29, char a30, char a31, char a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  if (v40) {
    dispatch_release(v40);
  }
  _Block_object_dispose((const void *)(v41 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1000B818C(uint64_t a1, int a2)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    int v5 = "set_block_invoke";
    __int16 v6 = 1024;
    int v7 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "Received callback for %s with status=%d",  (uint8_t *)&v4,  0x12u);
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1000B8254(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(dispatch_object_s **)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  if (v3) {
    dispatch_retain(v3);
  }
}

void sub_1000B826C(uint64_t a1)
{
  uint64_t v1 = *(dispatch_object_s **)(a1 + 40);
  if (v1) {
    dispatch_release(v1);
  }
}

uint64_t *sub_1000B827C(uint64_t *a1, uint64_t *a2)
{
  int v4 = operator new(0x10uLL);
  uint64_t v5 = *a2;
  *int v4 = &off_1002B20D0;
  v4[1] = v5;
  uint64_t v6 = *a1;
  *a1 = (uint64_t)v4;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  return a1;
}

uint64_t sub_1000B82D4(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = (uint64_t *)sub_10012E6F8();
  sub_10000D66C(&v10, a1 + 5);
  std::string::basic_string(&v9, (const std::string *)(v2 + 32));
  int v4 = (void *)a1[8];
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  uint64_t v5 = (dispatch_object_s *)a1[9];
  aBlock = v4;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  sub_100131064(v3, &v10, &v9, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  uint64_t result = v10;
  if (v10) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  return result;
}

void sub_1000B839C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8LL))(a17);
  }
  _Unwind_Resume(a1);
}

void sub_1000B83DC(void *a1, uint64_t *a2)
{
  int v4 = (void *)a2[8];
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  uint64_t v5 = (dispatch_object_s *)a2[9];
  a1[8] = v4;
  a1[9] = v5;
  if (v5) {
    dispatch_retain(v5);
  }
}

uint64_t sub_1000B8434(uint64_t a1)
{
  uint64_t v2 = *(dispatch_object_s **)(a1 + 72);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 64);
  if (v3) {
    _Block_release(v3);
  }
  return sub_10000D448(a1 + 40);
}

void sub_1000B8470(uint64_t a1, const std::string *a2, void *a3, dispatch_object_s **a4)
{
  std::string v8 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v8)
  {
    std::string v9 = v8;
    if (sub_10015A058(5) && os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = a2;
      __int16 v11 = (void *)(a1 + 32);
      *(_DWORD *)__n128 buf = 136315394;
      *(void *)&uint8_t buf[4] = v10;
      *(_WORD *)&_BYTE buf[12] = 2080;
      *(void *)&_BYTE buf[14] = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "InternalClient::setEventHandler for %s by %s.",  buf,  0x16u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  if (a3) {
    a3 = _Block_copy(a3);
  }
  int v12 = *a4;
  if (v12) {
    dispatch_retain(v12);
  }
  *(void *)__n128 buf = a3;
  *(void *)&buf[8] = v12;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1174405120LL;
  v14[2] = sub_1000B869C;
  v14[3] = &unk_1002B1960;
  v14[4] = a1;
  std::string::basic_string(&__p, a2);
  if (a3) {
    __int16 v13 = _Block_copy(a3);
  }
  else {
    __int16 v13 = 0LL;
  }
  aBlock = v13;
  dispatch_object_t object = v12;
  if (v12) {
    dispatch_retain(v12);
  }
  sub_1000BE60C((void *)a1, (uint64_t)v14);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v12) {
    dispatch_release(v12);
  }
  if (a3) {
    _Block_release(a3);
  }
}

void sub_1000B8664( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

void sub_1000B869C(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
  {
    if (!*(void *)(a1 + 48)) {
      return;
    }
  }

  else if (!*(_BYTE *)(a1 + 63))
  {
    return;
  }

  if (*(void *)(a1 + 64) && *(void *)(a1 + 72))
  {
    uint64_t v2 = (const void **)sub_1000B8748(*(uint64_t ***)(*(void *)(a1 + 32) + 56LL), (std::string *)(a1 + 40));
    uint64_t v3 = *(void **)(a1 + 64);
    if (v3) {
      uint64_t v3 = _Block_copy(v3);
    }
    int v4 = *v2;
    *uint64_t v2 = v3;
    if (v4) {
      _Block_release(v4);
    }
    uint64_t v5 = *(dispatch_object_s **)(a1 + 72);
    if (v5) {
      dispatch_retain(v5);
    }
    uint64_t v6 = (dispatch_object_s *)v2[1];
    v2[1] = v5;
    if (v6) {
      dispatch_release(v6);
    }
  }

void *sub_1000B8748(uint64_t **a1, std::string *a2)
{
  uint64_t v3 = a2;
  return sub_1000BE794(a1, (const void **)&a2->__r_.__value_.__l.__data_, (uint64_t)&unk_1002281EB, &v3) + 7;
}

void sub_1000B877C(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a2 + 64);
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  uint64_t v5 = *(dispatch_object_s **)(a2 + 72);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 72) = v5;
  if (v5) {
    dispatch_retain(v5);
  }
}

void sub_1000B87D4(uint64_t a1)
{
  uint64_t v2 = *(dispatch_object_s **)(a1 + 72);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 64);
  if (v3) {
    _Block_release(v3);
  }
}

uint64_t sub_1000B8824(uint64_t a1)
{
  uint64_t v2 = *(dispatch_object_s **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void sub_1000B8860(uint64_t a1, const std::string *a2, void *a3, dispatch_object_s *a4)
{
  std::string v8 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v8)
  {
    std::string v9 = v8;
    if (sub_10015A058(5) && os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = a2;
      __int16 v11 = (void *)(a1 + 32);
      *(_DWORD *)__n128 buf = 136315394;
      *(void *)&uint8_t buf[4] = v10;
      *(_WORD *)&_BYTE buf[12] = 2080;
      *(void *)&_BYTE buf[14] = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "InternalClient::setEventHandler for %s by %s",  buf,  0x16u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  if (a3) {
    a3 = _Block_copy(a3);
  }
  if (a4) {
    dispatch_retain(a4);
  }
  *(void *)__n128 buf = a3;
  *(void *)&buf[8] = a4;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1174405120LL;
  v13[2] = sub_1000B8A88;
  uint64_t v13[3] = &unk_1002B1990;
  v13[4] = a1;
  std::string::basic_string(&__p, a2);
  if (a3) {
    int v12 = _Block_copy(a3);
  }
  else {
    int v12 = 0LL;
  }
  aBlock = v12;
  dispatch_object_t object = a4;
  if (a4) {
    dispatch_retain(a4);
  }
  sub_1000BE60C((void *)a1, (uint64_t)v13);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a4) {
    dispatch_release(a4);
  }
  if (a3) {
    _Block_release(a3);
  }
}

void sub_1000B8A50( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

void sub_1000B8A88(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
  {
    if (!*(void *)(a1 + 48)) {
      return;
    }
  }

  else if (!*(_BYTE *)(a1 + 63))
  {
    return;
  }

  if (*(void *)(a1 + 64) && *(void *)(a1 + 72))
  {
    uint64_t v2 = (const void **)sub_1000B8748(*(uint64_t ***)(*(void *)(a1 + 32) + 56LL), (std::string *)(a1 + 40));
    uint64_t v3 = *(void **)(a1 + 64);
    if (v3) {
      uint64_t v3 = _Block_copy(v3);
    }
    int v4 = *v2;
    *uint64_t v2 = v3;
    if (v4) {
      _Block_release(v4);
    }
    uint64_t v5 = *(dispatch_object_s **)(a1 + 72);
    if (v5) {
      dispatch_retain(v5);
    }
    uint64_t v6 = (dispatch_object_s *)v2[1];
    v2[1] = v5;
    if (v6) {
      dispatch_release(v6);
    }
  }

void sub_1000B8B34( void *a1@<X0>, char *a2@<X1>, const void *a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v38 = 0LL;
  unint64_t v39 = &v38;
  uint64_t v40 = 0x2000000000LL;
  char v41 = 1;
  uint64_t v10 = dispatch_group_create();
  dispatch_group_enter(v10);
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1174405120LL;
  aBlock[2] = sub_1000B8FA4;
  aBlock[3] = &unk_1002B19C8;
  aBlock[4] = &v38;
  dispatch_object_t object = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  __int16 v11 = _Block_copy(aBlock);
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  __int16 v13 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  uint64_t v36 = v11;
  char v37 = v13;
  if (!a2 || !a4 || !*a2)
  {
    sub_10000AC00(&v32, "No inputs were given");
    *(_DWORD *)a5 = 9;
    *(_OWORD *)(a5 + 8) = v32;
    *(void *)(a5 + 24) = v33;
    if (!v13) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }

  *((void *)&v32 + 1) = 0LL;
  uint64_t v33 = 0LL;
  *(void *)&__int128 v32 = (char *)&v32 + 8;
  sub_10000AC00(&__p, "method");
  int v14 = sub_10000ED88((uint64_t **)&v32, &__p);
  sub_1000B906C(v14, (uint64_t)"PropSet");
  if (v31 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  v28.n128_u64[0] = a4;
  sub_10000AC00(&__p, "property_value_length");
  int v15 = sub_10000ED88((uint64_t **)&v32, &__p);
  sub_100017620(v15, (uint64_t *)&v28);
  if (v31 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  sub_100018E5C(&__p, a3, (uint64_t)a3 + a4);
  sub_10000AC00(&v28, "property_value");
  int v16 = sub_10000ED88((uint64_t **)&v32, &v28);
  sub_100017FCC(v16, &__p);
  if (v29 < 0) {
    operator delete((void *)v28.n128_u64[0]);
  }
  v28.n128_u64[0] = (unint64_t)&__p;
  sub_100006F6C((void ***)&v28);
  sub_10000AC00(&__p, a2);
  sub_10000AC00(&v28, "property_name");
  uint64_t v17 = sub_10000ED88((uint64_t **)&v32, &v28);
  sub_1000175B4(v17, (uint64_t)&__p);
  if (v29 < 0) {
    operator delete((void *)v28.n128_u64[0]);
  }
  if (v31 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  v28.n128_u64[0] = 1LL;
  sub_10000AC00(&__p, "property_type");
  uint64_t v18 = sub_10000ED88((uint64_t **)&v32, &__p);
  sub_100017620(v18, (uint64_t *)&v28);
  if (v31 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 1174405120LL;
  v24[2] = sub_1000B90C0;
  v24[3] = &unk_1002B19F8;
  v24[4] = a1;
  sub_10000D19C(v25, (uint64_t *)&v32);
  if (v11) {
    int v19 = _Block_copy(v11);
  }
  else {
    int v19 = 0LL;
  }
  char v26 = v19;
  dispatch_object_t v27 = v13;
  if (v13) {
    dispatch_retain(v13);
  }
  sub_1000BE60C(a1, (uint64_t)v24);
  if (v10)
  {
    uint64_t v20 = dispatch_group_wait(v10, 0xFFFFFFFFFFFFFFFFLL);
    BOOL v21 = v39;
    if (v20) {
      *((_BYTE *)v39 + 24) = 1;
    }
  }

  else
  {
    BOOL v21 = v39;
  }

  int v22 = *((unsigned __int8 *)v21 + 24);
  *(void *)(a5 + 16) = 0LL;
  *(void *)(a5 + 24) = 0LL;
  *(void *)(a5 + 8) = 0LL;
  if (v22) {
    int v23 = 3;
  }
  else {
    int v23 = 0;
  }
  *(_DWORD *)a5 = v23;
  if (v27) {
    dispatch_release(v27);
  }
  if (v26) {
    _Block_release(v26);
  }
  sub_10000D448((uint64_t)v25);
  sub_10000D448((uint64_t)&v32);
  if (v13) {
LABEL_23:
  }
    dispatch_release(v13);
LABEL_24:
  if (v11) {
    _Block_release(v11);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v10) {
    dispatch_release(v10);
  }
  _Block_object_dispose(&v38, 8);
}

void sub_1000B8ED4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, void *__p, uint64_t a27, int a28, __int16 a29, char a30, char a31, char a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  if (v40) {
    dispatch_release(v40);
  }
  _Block_object_dispose((const void *)(v41 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1000B8F98()
{
}

void sub_1000B8FA4(uint64_t a1, int a2)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    uint64_t v5 = "sendData_block_invoke";
    __int16 v6 = 1024;
    int v7 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "Received callback for %s with status=%d",  (uint8_t *)&v4,  0x12u);
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t *sub_1000B906C(uint64_t *a1, uint64_t a2)
{
  int v4 = operator new(0x10uLL);
  *int v4 = &off_1002B2118;
  v4[1] = a2;
  uint64_t v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  return a1;
}

uint64_t sub_1000B90C0(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = (uint64_t *)sub_10012E6F8();
  sub_10000D66C(&v10, a1 + 5);
  std::string::basic_string(&v9, (const std::string *)(v2 + 32));
  int v4 = (void *)a1[8];
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  uint64_t v5 = (dispatch_object_s *)a1[9];
  aBlock = v4;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  sub_100131064(v3, &v10, &v9, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  uint64_t result = v10;
  if (v10) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  return result;
}

void sub_1000B9188( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8LL))(a17);
  }
  _Unwind_Resume(a1);
}

void sub_1000B91C8(void *a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v32 = 0LL;
  uint64_t v33 = &v32;
  uint64_t v34 = 0x2000000000LL;
  char v35 = 1;
  __int16 v6 = dispatch_group_create();
  dispatch_group_enter(v6);
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1174405120LL;
  aBlock[2] = sub_1000B9588;
  aBlock[3] = &unk_1002B1A30;
  aBlock[4] = &v32;
  dispatch_object_t v29 = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  int v7 = _Block_copy(aBlock);
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  std::string v9 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  char v30 = v7;
  char v31 = v9;
  v27[0] = 0LL;
  v27[1] = 0LL;
  char v26 = v27;
  sub_10000AC00(&v24, "NetworkDiagnostics");
  sub_10000AC00(&__p, "method");
  uint64_t v10 = sub_10000ED88(&v26, &__p);
  sub_1000175B4(v10, (uint64_t)&v24);
  if (v23 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v25 < 0) {
    operator delete((void *)v24.n128_u64[0]);
  }
  sub_100018E5C(&v24, a2, (uint64_t)a2 + a2[16]);
  sub_10000AC00(&__p, "destination");
  __int16 v11 = sub_10000ED88(&v26, &__p);
  sub_100017FCC(v11, &v24);
  if (v23 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  __p.n128_u64[0] = (unint64_t)&v24;
  sub_100006F6C((void ***)&__p);
  sub_100018E5C(&v24, a2 + 8, (uint64_t)a2 + a2[17] + 16);
  sub_10000AC00(&__p, "tlv");
  int v12 = sub_10000ED88(&v26, &__p);
  sub_100017FCC(v12, &v24);
  if (v23 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  __p.n128_u64[0] = (unint64_t)&v24;
  sub_100006F6C((void ***)&__p);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1174405120LL;
  v18[2] = sub_1000B9650;
  v18[3] = &unk_1002B1A60;
  v18[4] = a1;
  sub_10000D19C(v19, (uint64_t *)&v26);
  if (v7) {
    __int16 v13 = _Block_copy(v7);
  }
  else {
    __int16 v13 = 0LL;
  }
  uint64_t v20 = v13;
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  sub_1000BE60C(a1, (uint64_t)v18);
  if (v6)
  {
    uint64_t v14 = dispatch_group_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
    int v15 = v33;
    if (v14) {
      *((_BYTE *)v33 + 24) = 1;
    }
  }

  else
  {
    int v15 = v33;
  }

  int v16 = *((unsigned __int8 *)v15 + 24);
  *(void *)(a3 + 16) = 0LL;
  *(void *)(a3 + 24) = 0LL;
  *(void *)(a3 + 8) = 0LL;
  if (v16) {
    int v17 = 3;
  }
  else {
    int v17 = 0;
  }
  *(_DWORD *)a3 = v17;
  if (object) {
    dispatch_release(object);
  }
  if (v20) {
    _Block_release(v20);
  }
  sub_10000D448((uint64_t)v19);
  sub_10000D448((uint64_t)&v26);
  if (v9) {
    dispatch_release(v9);
  }
  if (v7) {
    _Block_release(v7);
  }
  if (v29) {
    dispatch_release(v29);
  }
  if (v6) {
    dispatch_release(v6);
  }
  _Block_object_dispose(&v32, 8);
}

void sub_1000B94D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, void *__p, uint64_t a27, int a28, __int16 a29, char a30, char a31, char a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  if (v40) {
    dispatch_release(v40);
  }
  _Block_object_dispose((const void *)(v41 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1000B9588(uint64_t a1, int a2)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    uint64_t v5 = "send_diagnostics_req_block_invoke";
    __int16 v6 = 1024;
    int v7 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "Received callback for %s with status=%d",  (uint8_t *)&v4,  0x12u);
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t sub_1000B9650(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(uint64_t **)(v2 + 72);
  sub_10000D66C(&v10, a1 + 5);
  std::string::basic_string(&v9, (const std::string *)(v2 + 32));
  int v4 = (void *)a1[8];
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  uint64_t v5 = (dispatch_object_s *)a1[9];
  aBlock = v4;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  sub_100134E50(v3, &v10, &v9, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  uint64_t result = v10;
  if (v10) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  return result;
}

void sub_1000B9714( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8LL))(a17);
  }
  _Unwind_Resume(a1);
}

void sub_1000B9754(uint64_t a1@<X8>)
{
  uint64_t v12 = 0LL;
  __int16 v13 = &v12;
  uint64_t v14 = 0x2000000000LL;
  char v15 = 1;
  uint64_t v2 = dispatch_group_create();
  dispatch_group_enter(v2);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1174405120LL;
  unsigned __int8 v10[2] = sub_1000B9894;
  v10[3] = &unk_1002B1A98;
  uint64_t v10[4] = &v12;
  dispatch_object_t object = v2;
  if (v2) {
    dispatch_retain(v2);
  }
  uint64_t v3 = _Block_copy(v10);
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  uint64_t v5 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  if (v2)
  {
    uint64_t v6 = dispatch_group_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
    int v7 = v13;
    if (v6) {
      *((_BYTE *)v13 + 24) = 1;
    }
  }

  else
  {
    int v7 = v13;
  }

  int v8 = *((unsigned __int8 *)v7 + 24);
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 8) = 0LL;
  if (v8) {
    int v9 = 3;
  }
  else {
    int v9 = 0;
  }
  *(_DWORD *)a1 = v9;
  if (v5) {
    dispatch_release(v5);
  }
  if (v3) {
    _Block_release(v3);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v2) {
    dispatch_release(v2);
  }
  _Block_object_dispose(&v12, 8);
}

void sub_1000B9894(uint64_t a1, int a2)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    uint64_t v5 = "send_ping_node_req_block_invoke";
    __int16 v6 = 1024;
    int v7 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "Received callback for %s with status=%d",  (uint8_t *)&v4,  0x12u);
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1000B995C(uint64_t a1@<X8>)
{
  uint64_t v12 = 0LL;
  __int16 v13 = &v12;
  uint64_t v14 = 0x2000000000LL;
  char v15 = 1;
  uint64_t v2 = dispatch_group_create();
  dispatch_group_enter(v2);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1174405120LL;
  unsigned __int8 v10[2] = sub_1000B9A9C;
  v10[3] = &unk_1002B1AD0;
  uint64_t v10[4] = &v12;
  dispatch_object_t object = v2;
  if (v2) {
    dispatch_retain(v2);
  }
  uint64_t v3 = _Block_copy(v10);
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  uint64_t v5 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  if (v2)
  {
    uint64_t v6 = dispatch_group_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
    int v7 = v13;
    if (v6) {
      *((_BYTE *)v13 + 24) = 1;
    }
  }

  else
  {
    int v7 = v13;
  }

  int v8 = *((unsigned __int8 *)v7 + 24);
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 8) = 0LL;
  if (v8) {
    int v9 = 3;
  }
  else {
    int v9 = 0;
  }
  *(_DWORD *)a1 = v9;
  if (v5) {
    dispatch_release(v5);
  }
  if (v3) {
    _Block_release(v3);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v2) {
    dispatch_release(v2);
  }
  _Block_object_dispose(&v12, 8);
}

void sub_1000B9A9C(uint64_t a1, int a2)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    uint64_t v5 = "get_device_data_diag_req_block_invoke";
    __int16 v6 = 1024;
    int v7 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "Received callback for %s with status=%d",  (uint8_t *)&v4,  0x12u);
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1000B9B64(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v45 = 0LL;
  char v46 = &v45;
  uint64_t v47 = 0x2000000000LL;
  char v48 = 1;
  v44[0] = 0LL;
  v44[1] = 0LL;
  uint64_t v43 = v44;
  __int16 v6 = dispatch_group_create();
  dispatch_group_enter(v6);
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1174405120LL;
  aBlock[2] = sub_1000BA678;
  aBlock[3] = &unk_1002B1B08;
  aBlock[4] = &v45;
  dispatch_object_t v40 = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  int v7 = _Block_copy(aBlock);
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  int v9 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  uint64_t v41 = v7;
  unsigned int v42 = v9;
  uint64_t v10 = *(const char **)(a2 + 72);
  if (!v10)
  {
    uint64_t v10 = "router";
    *(void *)(a2 + 72) = "router";
  }

  __int16 v11 = *(char **)a2;
  if (*(void *)a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      buf[0].n128_u32[0] = 136315394;
      *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)v11;
      buf[0].n128_u16[6] = 2080;
      *(unint64_t *)((char *)&buf[0].n128_u64[1] + 6) = (unint64_t)v10;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "Forming WPAN %s as node type %s",  (uint8_t *)buf,  0x16u);
    }

    if (*(_BYTE *)(a2 + 8))
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
      {
        unsigned __int32 v12 = *(unsigned __int16 *)(a2 + 10);
        buf[0].n128_u32[0] = 67109120;
        buf[0].n128_u32[1] = v12;
        __int16 v13 = ", channel:%d";
LABEL_18:
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, v13, (uint8_t *)buf, 8u);
      }
    }

    else if (*(_BYTE *)(a2 + 12) && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      unsigned __int32 v14 = *(_DWORD *)(a2 + 16);
      buf[0].n128_u32[0] = 67109120;
      buf[0].n128_u32[1] = v14;
      __int16 v13 = ", channel-mask:0x%x";
      goto LABEL_18;
    }

    if (*(_BYTE *)(a2 + 20) && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      unsigned __int32 v15 = *(unsigned __int16 *)(a2 + 22);
      buf[0].n128_u32[0] = 67109120;
      buf[0].n128_u32[1] = v15;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  ", panid:0x%04X",  (uint8_t *)buf,  8u);
    }

    if (*(_BYTE *)(a2 + 24) && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      unint64_t v16 = *(void *)(a2 + 32);
      buf[0].n128_u32[0] = 134217984;
      *(unint64_t *)((char *)buf[0].n128_u64 + 4) = v16;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  ", xpanid:0x%016llX",  (uint8_t *)buf,  0xCu);
    }

    if (*(_BYTE *)(a2 + 40))
    {
      sub_100159A78(a2 + 41, 16LL, buf, 0x24uLL, 0);
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
      {
        v49.n128_u32[0] = 136315138;
        *(unint64_t *)((char *)v49.n128_u64 + 4) = (unint64_t)buf;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  ", key:[%s]",  (uint8_t *)&v49,  0xCu);
      }
    }

    if (*(_BYTE *)(a2 + 57) && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      unsigned __int32 v17 = *(_DWORD *)(a2 + 60);
      buf[0].n128_u32[0] = 67109120;
      buf[0].n128_u32[1] = v17;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  ", key-index:%d",  (uint8_t *)buf,  8u);
    }

    if (*(_BYTE *)(a2 + 80))
    {
      *(__n128 *)((char *)&buf[1] + 14) = 0u;
      *(__n128 *)((char *)&buf[1] + 2) = 0u;
      *(__n128 *)((char *)buf + 2) = 0u;
      buf[0].n128_u16[0] = 14906;
      __n128 v49 = (__n128)*(unint64_t *)(a2 + 81);
      inet_ntop(30, &v49, (char *)buf, 0x2Eu);
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)char v51 = 136315138;
        unsigned int v52 = buf;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  ", mesh-local-prefix:%s",  v51,  0xCu);
      }
    }

    if (*(_BYTE *)(a2 + 89))
    {
      *(__n128 *)((char *)&buf[1] + 14) = 0u;
      *(__n128 *)((char *)&buf[1] + 2) = 0u;
      *(__n128 *)((char *)buf + 2) = 0u;
      buf[0].n128_u16[0] = 14906;
      __n128 v49 = (__n128)*(unint64_t *)(a2 + 90);
      inet_ntop(30, &v49, (char *)buf, 0x2Eu);
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)char v51 = 136315138;
        unsigned int v52 = buf;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  ", legacy-prefix:%s",  v51,  0xCu);
      }
    }

    sub_10000AC00(buf, "Form");
    sub_10000AC00(&v49, "method");
    uint64_t v18 = sub_10000ED88(&v43, &v49);
    sub_1000175B4(v18, (uint64_t)buf);
    if (v50 < 0) {
      operator delete((void *)v49.n128_u64[0]);
    }
    if (buf[1].n128_i8[7] < 0) {
      operator delete((void *)buf[0].n128_u64[0]);
    }
    sub_10000AC00(buf, *(char **)a2);
    sub_10000AC00(&v49, "network_name");
    int v19 = sub_10000ED88(&v43, &v49);
    sub_1000175B4(v19, (uint64_t)buf);
    if (v50 < 0) {
      operator delete((void *)v49.n128_u64[0]);
    }
    if (buf[1].n128_i8[7] < 0) {
      operator delete((void *)buf[0].n128_u64[0]);
    }
    if (*(_BYTE *)(a2 + 64))
    {
      sub_10000AC00(buf, *(char **)(a2 + 72));
      sub_10000AC00(&v49, "node_type");
      uint64_t v20 = sub_10000ED88(&v43, &v49);
      sub_1000175B4(v20, (uint64_t)buf);
      if (v50 < 0) {
        operator delete((void *)v49.n128_u64[0]);
      }
      if (buf[1].n128_i8[7] < 0) {
        operator delete((void *)buf[0].n128_u64[0]);
      }
    }

    if (*(_BYTE *)(a2 + 8))
    {
      v49.n128_u64[0] = *(unsigned __int16 *)(a2 + 10);
      sub_10000AC00(buf, "channel");
      BOOL v21 = sub_10000ED88(&v43, buf);
      sub_100017620(v21, (uint64_t *)&v49);
      if (buf[1].n128_i8[7] < 0) {
        operator delete((void *)buf[0].n128_u64[0]);
      }
    }

    if (*(_BYTE *)(a2 + 12))
    {
      v49.n128_u64[0] = *(unsigned int *)(a2 + 16);
      sub_10000AC00(buf, "channel_mask");
      int v22 = sub_10000ED88(&v43, buf);
      sub_100017620(v22, (uint64_t *)&v49);
      if (buf[1].n128_i8[7] < 0) {
        operator delete((void *)buf[0].n128_u64[0]);
      }
    }

    if (*(_BYTE *)(a2 + 20))
    {
      v49.n128_u64[0] = *(unsigned __int16 *)(a2 + 22);
      sub_10000AC00(buf, "panid");
      char v23 = sub_10000ED88(&v43, buf);
      sub_100017620(v23, (uint64_t *)&v49);
      if (buf[1].n128_i8[7] < 0) {
        operator delete((void *)buf[0].n128_u64[0]);
      }
    }

    if (*(_BYTE *)(a2 + 24))
    {
      v49.n128_u64[0] = *(void *)(a2 + 32);
      sub_10000AC00(buf, "xpanid");
      __n128 v24 = sub_10000ED88(&v43, buf);
      sub_100017620(v24, (uint64_t *)&v49);
      if (buf[1].n128_i8[7] < 0) {
        operator delete((void *)buf[0].n128_u64[0]);
      }
    }

    if (*(_BYTE *)(a2 + 40))
    {
      memset(buf, 0, 24);
      sub_100018E8C(buf, (const void *)(a2 + 41), a2 + 57, 0x10uLL);
      sub_10000AC00(&v49, "network_key");
      char v25 = sub_10000ED88(&v43, &v49);
      sub_100017FCC(v25, buf);
      if (v50 < 0) {
        operator delete((void *)v49.n128_u64[0]);
      }
      v49.n128_u64[0] = (unint64_t)buf;
      sub_100006F6C((void ***)&v49);
    }

    if (*(_BYTE *)(a2 + 57))
    {
      v49.n128_u64[0] = *(unsigned int *)(a2 + 60);
      sub_10000AC00(buf, "key_index");
      char v26 = sub_10000ED88(&v43, buf);
      sub_100017620(v26, (uint64_t *)&v49);
      if (buf[1].n128_i8[7] < 0) {
        operator delete((void *)buf[0].n128_u64[0]);
      }
    }

    if (*(_BYTE *)(a2 + 80))
    {
      memset(buf, 0, 24);
      sub_100018E8C(buf, (const void *)(a2 + 81), a2 + 89, 8uLL);
      sub_10000AC00(&v49, "mesh_local_prefix");
      dispatch_object_t v27 = sub_10000ED88(&v43, &v49);
      sub_100017FCC(v27, buf);
      if (v50 < 0) {
        operator delete((void *)v49.n128_u64[0]);
      }
      v49.n128_u64[0] = (unint64_t)buf;
      sub_100006F6C((void ***)&v49);
    }

    if (*(_BYTE *)(a2 + 89))
    {
      memset(buf, 0, 24);
      sub_100018E8C(buf, (const void *)(a2 + 90), a2 + 98, 8uLL);
      sub_10000AC00(&v49, "legacy_prefix");
      __n128 v28 = sub_10000ED88(&v43, &v49);
      sub_100017FCC(v28, buf);
      if (v50 < 0) {
        operator delete((void *)v49.n128_u64[0]);
      }
      v49.n128_u64[0] = (unint64_t)buf;
      sub_100006F6C((void ***)&v49);
    }

    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      dispatch_object_t v29 = *(char **)a2;
      buf[0].n128_u32[0] = 136315138;
      *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)v29;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "Forming WPAN %s\n",  (uint8_t *)buf,  0xCu);
    }

    v35[0] = _NSConcreteStackBlock;
    v35[1] = 1174405120LL;
    v35[2] = sub_1000BA788;
    uint64_t v35[3] = &unk_1002B1B38;
    v35[4] = a1;
    sub_10000D19C(v36, (uint64_t *)&v43);
    if (v7) {
      char v30 = _Block_copy(v7);
    }
    else {
      char v30 = 0LL;
    }
    char v37 = v30;
    dispatch_object_t object = v9;
    if (v9) {
      dispatch_retain(v9);
    }
    sub_1000BE60C(a1, (uint64_t)v35);
    if (v6)
    {
      uint64_t v31 = dispatch_group_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
      uint64_t v32 = v46;
      if (v31) {
        *((_BYTE *)v46 + 24) = 1;
      }
    }

    else
    {
      uint64_t v32 = v46;
    }

    int v33 = *((unsigned __int8 *)v32 + 24);
    *(void *)(a3 + 16) = 0LL;
    *(void *)(a3 + 24) = 0LL;
    *(void *)(a3 + 8) = 0LL;
    if (v33) {
      int v34 = 3;
    }
    else {
      int v34 = 0;
    }
    *(_DWORD *)a3 = v34;
    if (object) {
      dispatch_release(object);
    }
    if (v37) {
      _Block_release(v37);
    }
    sub_10000D448((uint64_t)v36);
    if (v9) {
      goto LABEL_96;
    }
    goto LABEL_97;
  }

  sub_10000AC00(buf, "Network Name not Given");
  *(_DWORD *)a3 = 10;
  *(__n128 *)(a3 + 8) = buf[0];
  *(void *)(a3 + 24) = buf[1].n128_u64[0];
  if (v9) {
LABEL_96:
  }
    dispatch_release(v9);
LABEL_97:
  if (v7) {
    _Block_release(v7);
  }
  if (v40) {
    dispatch_release(v40);
  }
  if (v6) {
    dispatch_release(v6);
  }
  sub_10000D448((uint64_t)&v43);
  _Block_object_dispose(&v45, 8);
}

void sub_1000BA54C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, dispatch_object_t object, char a26, uint64_t a27, char a28, uint64_t a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, void *__p, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  if (a2) {
    sub_100006EEC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000BA678(uint64_t a1, int a2)
{
  int v4 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v4)
  {
    uint64_t v5 = v4;
    if (sub_10015A058(5) && os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      int v6 = 136315394;
      int v7 = "form_block_invoke";
      __int16 v8 = 1024;
      int v9 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Received callback for %s with status %d",  (uint8_t *)&v6,  0x12u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t sub_1000BA788(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = (uint64_t *)sub_10012E6F8();
  sub_10000D66C(&v10, a1 + 5);
  std::string::basic_string(&v9, (const std::string *)(v2 + 32));
  int v4 = (void *)a1[8];
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  uint64_t v5 = (dispatch_object_s *)a1[9];
  aBlock = v4;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  sub_100135474(v3, &v10, &v9, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  uint64_t result = v10;
  if (v10) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  return result;
}

void sub_1000BA850( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8LL))(a17);
  }
  _Unwind_Resume(a1);
}

void sub_1000BA890(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 8) = 0LL;
}

void sub_1000BA8A0(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = 0LL;
  int v19 = &v18;
  uint64_t v20 = 0x2000000000LL;
  char v21 = 1;
  int v4 = dispatch_group_create();
  dispatch_group_enter(v4);
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1174405120LL;
  aBlock[2] = sub_1000BAA64;
  aBlock[3] = &unk_1002B1B70;
  aBlock[4] = &v18;
  dispatch_object_t v17 = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  uint64_t v5 = _Block_copy(aBlock);
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  int v7 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1174405120LL;
  v13[2] = sub_1000BAB2C;
  uint64_t v13[3] = &unk_1002B1BA0;
  v13[4] = a1;
  if (v5) {
    __int16 v8 = _Block_copy(v5);
  }
  else {
    __int16 v8 = 0LL;
  }
  unsigned __int32 v14 = v8;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  sub_1000BE60C(a1, (uint64_t)v13);
  if (v4)
  {
    uint64_t v9 = dispatch_group_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
    uint64_t v10 = v19;
    if (v9) {
      *((_BYTE *)v19 + 24) = 1;
    }
  }

  else
  {
    uint64_t v10 = v19;
  }

  int v11 = *((unsigned __int8 *)v10 + 24);
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)(a2 + 8) = 0LL;
  if (v11) {
    int v12 = 3;
  }
  else {
    int v12 = 0;
  }
  *(_DWORD *)a2 = v12;
  if (object) {
    dispatch_release(object);
  }
  if (v14) {
    _Block_release(v14);
  }
  if (v7) {
    dispatch_release(v7);
  }
  if (v5) {
    _Block_release(v5);
  }
  if (v17) {
    dispatch_release(v17);
  }
  if (v4) {
    dispatch_release(v4);
  }
  _Block_object_dispose(&v18, 8);
}

void sub_1000BAA64(uint64_t a1, int a2)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    uint64_t v5 = "leave_block_invoke";
    __int16 v6 = 1024;
    int v7 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "Received callback for %s with status=%d",  (uint8_t *)&v4,  0x12u);
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1000BAB2C(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = (uint64_t *)sub_10012E6F8();
  std::string::basic_string(&v8, (const std::string *)(v2 + 32));
  int v4 = (void *)a1[5];
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  uint64_t v5 = (dispatch_object_s *)a1[6];
  aBlock = v4;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  sub_1001332D8(v3, &v8, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_1000BABD0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1000BABF4(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a2 + 40);
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  uint64_t v5 = *(dispatch_object_s **)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  if (v5) {
    dispatch_retain(v5);
  }
}

void sub_1000BAC40(uint64_t a1)
{
  uint64_t v2 = *(dispatch_object_s **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void sub_1000BAC78(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v45 = 0LL;
  char v46 = &v45;
  uint64_t v47 = 0x2000000000LL;
  char v48 = 1;
  v44[0] = 0LL;
  v44[1] = 0LL;
  uint64_t v43 = v44;
  __int16 v6 = dispatch_group_create();
  dispatch_group_enter(v6);
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1174405120LL;
  aBlock[2] = sub_1000BB304;
  aBlock[3] = &unk_1002B1BD8;
  aBlock[4] = &v45;
  dispatch_object_t v40 = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  int v7 = _Block_copy(aBlock);
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  uint64_t v9 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  uint64_t v41 = v7;
  unsigned int v42 = v9;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v10 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)__n128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v10;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "Starting Scan of Type %d \n",  buf,  8u);
  }

  __p.n128_u64[0] = *(unsigned int *)(a2 + 8);
  sub_10000AC00(buf, "channel_mask");
  int v11 = sub_10000ED88(&v43, (__n128 *)buf);
  sub_100017620(v11, (uint64_t *)&__p);
  if (SHIBYTE(v50) < 0) {
    operator delete(*(void **)buf);
  }
  int v12 = *(_DWORD *)(a2 + 16);
  switch(v12)
  {
    case 2:
      sub_10000AC00(buf, "NetScanStart");
      sub_10000AC00(&__p, "method");
      char v21 = sub_10000ED88(&v43, &__p);
      sub_1000175B4(v21, (uint64_t)buf);
      if (v38 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      if (SHIBYTE(v50) < 0) {
        operator delete(*(void **)buf);
      }
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 1174405120LL;
      void v25[2] = sub_1000BB5C4;
      v25[3] = &unk_1002B1C68;
      __int128 v25[4] = a1;
      unsigned __int32 v14 = v26;
      sub_10000D19C(v26, (uint64_t *)&v43);
      if (v7) {
        int v22 = _Block_copy(v7);
      }
      else {
        int v22 = 0LL;
      }
      dispatch_object_t v27 = v22;
      dispatch_object_t v28 = v9;
      if (v9) {
        dispatch_retain(v9);
      }
      sub_1000BE60C(a1, (uint64_t)v25);
      if (v28) {
        dispatch_release(v28);
      }
      if (v27) {
        _Block_release(v27);
      }
LABEL_59:
      sub_10000D448((uint64_t)v14);
      if (v6)
      {
        uint64_t v23 = dispatch_group_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
        __n128 v24 = v46;
        if (v23) {
          *((_BYTE *)v46 + 24) = 1;
        }
      }

      else
      {
        __n128 v24 = v46;
      }

      if (*((_BYTE *)v24 + 24)) {
        *(_DWORD *)a3 = 3;
      }
      else {
        *(_DWORD *)a3 = 0;
      }
      *(void *)(a3 + 16) = 0LL;
      *(void *)(a3 + 24) = 0LL;
      *(void *)(a3 + 8) = 0LL;
      if (v9) {
        goto LABEL_67;
      }
      goto LABEL_68;
    case 1:
      sub_10000AC00(buf, "DiscoverScanStart");
      sub_10000AC00(&__p, "method");
      unint64_t v16 = sub_10000ED88(&v43, &__p);
      sub_1000175B4(v16, (uint64_t)buf);
      if (v38 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      if (SHIBYTE(v50) < 0) {
        operator delete(*(void **)buf);
      }
      __p.n128_u8[0] = *(_BYTE *)(a2 + 12);
      sub_10000AC00(buf, "joiner_flag");
      dispatch_object_t v17 = sub_10000ED88(&v43, (__n128 *)buf);
      sub_100020B4C(v17, &__p);
      if (SHIBYTE(v50) < 0) {
        operator delete(*(void **)buf);
      }
      __p.n128_u8[0] = *(_BYTE *)(a2 + 13);
      sub_10000AC00(buf, "enable_filtering");
      uint64_t v18 = sub_10000ED88(&v43, (__n128 *)buf);
      sub_100020B4C(v18, &__p);
      if (SHIBYTE(v50) < 0) {
        operator delete(*(void **)buf);
      }
      __p.n128_u64[0] = *(unsigned __int16 *)(a2 + 14);
      sub_10000AC00(buf, "pan_id_filter");
      int v19 = sub_10000ED88(&v43, (__n128 *)buf);
      sub_100017620(v19, (uint64_t *)&__p);
      if (SHIBYTE(v50) < 0) {
        operator delete(*(void **)buf);
      }
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 1174405120LL;
      void v29[2] = sub_1000BB4D4;
      v29[3] = &unk_1002B1C38;
      uint64_t v29[4] = a1;
      unsigned __int32 v14 = v30;
      sub_10000D19C(v30, (uint64_t *)&v43);
      if (v7) {
        uint64_t v20 = _Block_copy(v7);
      }
      else {
        uint64_t v20 = 0LL;
      }
      uint64_t v31 = v20;
      dispatch_object_t v32 = v9;
      if (v9) {
        dispatch_retain(v9);
      }
      sub_1000BE60C(a1, (uint64_t)v29);
      if (v32) {
        dispatch_release(v32);
      }
      if (v31) {
        _Block_release(v31);
      }
      goto LABEL_59;
    case 0:
      sub_10000AC00(buf, "EnergyScanStart");
      sub_10000AC00(&__p, "method");
      __int16 v13 = sub_10000ED88(&v43, &__p);
      sub_1000175B4(v13, (uint64_t)buf);
      if (v38 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      if (SHIBYTE(v50) < 0) {
        operator delete(*(void **)buf);
      }
      v33[0] = _NSConcreteStackBlock;
      v33[1] = 1174405120LL;
      v33[2] = sub_1000BB3CC;
      v33[3] = &unk_1002B1C08;
      v33[4] = a1;
      unsigned __int32 v14 = v34;
      sub_10000D19C(v34, (uint64_t *)&v43);
      if (v7) {
        unsigned __int32 v15 = _Block_copy(v7);
      }
      else {
        unsigned __int32 v15 = 0LL;
      }
      char v35 = v15;
      dispatch_object_t object = v9;
      if (v9) {
        dispatch_retain(v9);
      }
      sub_1000BE60C(a1, (uint64_t)v33);
      if (object) {
        dispatch_release(object);
      }
      if (v35) {
        _Block_release(v35);
      }
      goto LABEL_59;
  }

  sub_10000AC00(buf, "Scan Type is Invalid");
  *(_DWORD *)a3 = 10;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)buf;
  *(void *)(a3 + 24) = v50;
  if (v9) {
LABEL_67:
  }
    dispatch_release(v9);
LABEL_68:
  if (v7) {
    _Block_release(v7);
  }
  if (v40) {
    dispatch_release(v40);
  }
  if (v6) {
    dispatch_release(v6);
  }
  sub_10000D448((uint64_t)&v43);
  _Block_object_dispose(&v45, 8);
}

void sub_1000BB228( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, void *__p, uint64_t a40, int a41, __int16 a42, char a43, char a44)
{
  if (a2) {
    sub_100006EEC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000BB304(uint64_t a1, int a2)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    uint64_t v5 = "scan_block_invoke";
    __int16 v6 = 1024;
    int v7 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "Received callback for %s with status=%d",  (uint8_t *)&v4,  0x12u);
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t sub_1000BB3CC(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = (uint64_t *)sub_10012E6F8();
  sub_10000D66C(&v10, a1 + 5);
  std::string::basic_string(&v9, (const std::string *)(v2 + 32));
  int v4 = (void *)a1[8];
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  uint64_t v5 = (dispatch_object_s *)a1[9];
  aBlock = v4;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  sub_100132990(v3, &v10, &v9, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  uint64_t result = v10;
  if (v10) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  return result;
}

void sub_1000BB494( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8LL))(a17);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000BB4D4(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = (uint64_t *)sub_10012E6F8();
  sub_10000D19C(v10, a1 + 5);
  std::string::basic_string(&v9, (const std::string *)(v2 + 32));
  int v4 = (void *)a1[8];
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  uint64_t v5 = (dispatch_object_s *)a1[9];
  aBlock = v4;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  sub_1001319DC(v3, v10, &v9, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  return sub_10000D448((uint64_t)v10);
}

void sub_1000BB590( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_10000D448((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_1000BB5C4(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = (uint64_t *)sub_10012E6F8();
  sub_10000D66C(&v10, a1 + 5);
  std::string::basic_string(&v9, (const std::string *)(v2 + 32));
  int v4 = (void *)a1[8];
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  uint64_t v5 = (dispatch_object_s *)a1[9];
  aBlock = v4;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  sub_1001322B4(v3, &v10, &v9, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  uint64_t result = v10;
  if (v10) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  return result;
}

void sub_1000BB68C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8LL))(a17);
  }
  _Unwind_Resume(a1);
}

void sub_1000BB6CC(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v36 = 0LL;
  char v37 = &v36;
  uint64_t v38 = 0x2000000000LL;
  char v39 = 1;
  v35[0] = 0LL;
  v35[1] = 0LL;
  int v34 = v35;
  __int16 v6 = dispatch_group_create();
  dispatch_group_enter(v6);
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1174405120LL;
  aBlock[2] = sub_1000BBC1C;
  aBlock[3] = &unk_1002B1CA0;
  aBlock[4] = &v36;
  dispatch_object_t v31 = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  int v7 = _Block_copy(aBlock);
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  std::string v9 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  dispatch_object_t v32 = v7;
  int v33 = v9;
  if (*(void *)a2)
  {
    sub_10000AC00(v28, "Join");
    sub_10000AC00(&__p, "method");
    uint64_t v10 = sub_10000ED88(&v34, &__p);
    sub_1000175B4(v10, (uint64_t)v28);
    if (v27 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    if (SHIBYTE(v29) < 0) {
      operator delete(v28[0]);
    }
    sub_10000AC00(v28, *(char **)a2);
    sub_10000AC00(&__p, "network_name");
    int v11 = sub_10000ED88(&v34, &__p);
    sub_1000175B4(v11, (uint64_t)v28);
    if (v27 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    if (SHIBYTE(v29) < 0) {
      operator delete(v28[0]);
    }
    sub_10000AC00(v28, *(char **)(a2 + 8));
    sub_10000AC00(&__p, "node_type");
    int v12 = sub_10000ED88(&v34, &__p);
    sub_1000175B4(v12, (uint64_t)v28);
    if (v27 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    if (SHIBYTE(v29) < 0) {
      operator delete(v28[0]);
    }
    if (*(_BYTE *)(a2 + 48))
    {
      __p.n128_u64[0] = *(unsigned __int16 *)(a2 + 16);
      sub_10000AC00(v28, "channel");
      __int16 v13 = sub_10000ED88(&v34, (__n128 *)v28);
      sub_100017620(v13, (uint64_t *)&__p);
      if (SHIBYTE(v29) < 0) {
        operator delete(v28[0]);
      }
    }

    if (*(_BYTE *)(a2 + 49))
    {
      __p.n128_u64[0] = *(unsigned __int16 *)(a2 + 18);
      sub_10000AC00(v28, "panid");
      unsigned __int32 v14 = sub_10000ED88(&v34, (__n128 *)v28);
      sub_100017620(v14, (uint64_t *)&__p);
      if (SHIBYTE(v29) < 0) {
        operator delete(v28[0]);
      }
    }

    if (*(_BYTE *)(a2 + 50))
    {
      __p.n128_u64[0] = *(void *)(a2 + 24);
      sub_10000AC00(v28, "xpanid");
      unsigned __int32 v15 = sub_10000ED88(&v34, (__n128 *)v28);
      sub_100017620(v15, (uint64_t *)&__p);
      if (SHIBYTE(v29) < 0) {
        operator delete(v28[0]);
      }
    }

    if (*(_BYTE *)(a2 + 51))
    {
      v28[0] = 0LL;
      v28[1] = 0LL;
      uint64_t v29 = 0LL;
      sub_100018E8C(v28, (const void *)(a2 + 32), a2 + 48, 0x10uLL);
      sub_10000AC00(&__p, "network_key");
      unint64_t v16 = sub_10000ED88(&v34, &__p);
      sub_100017FCC(v16, (__n128 *)v28);
      if (v27 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      __p.n128_u64[0] = (unint64_t)v28;
      sub_100006F6C((void ***)&__p);
    }

    v22[0] = _NSConcreteStackBlock;
    v22[1] = 1174405120LL;
    v22[2] = sub_1000BBD2C;
    v22[3] = &unk_1002B1CD0;
    v22[4] = a1;
    sub_10000D19C(v23, (uint64_t *)&v34);
    if (v7) {
      dispatch_object_t v17 = _Block_copy(v7);
    }
    else {
      dispatch_object_t v17 = 0LL;
    }
    __n128 v24 = v17;
    dispatch_object_t object = v9;
    if (v9) {
      dispatch_retain(v9);
    }
    sub_1000BE60C(a1, (uint64_t)v22);
    if (v6)
    {
      uint64_t v18 = dispatch_group_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
      int v19 = v37;
      if (v18) {
        *((_BYTE *)v37 + 24) = 1;
      }
    }

    else
    {
      int v19 = v37;
    }

    int v20 = *((unsigned __int8 *)v19 + 24);
    *(void *)(a3 + 16) = 0LL;
    *(void *)(a3 + 24) = 0LL;
    *(void *)(a3 + 8) = 0LL;
    if (v20) {
      int v21 = 3;
    }
    else {
      int v21 = 0;
    }
    *(_DWORD *)a3 = v21;
    if (object) {
      dispatch_release(object);
    }
    if (v24) {
      _Block_release(v24);
    }
    sub_10000D448((uint64_t)v23);
    if (v9) {
      goto LABEL_50;
    }
  }

  else
  {
    sub_10000AC00(v28, "Network name is not given");
    *(_DWORD *)a3 = 10;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)v28;
    *(void *)(a3 + 24) = v29;
    if (v9) {
LABEL_50:
    }
      dispatch_release(v9);
  }

  if (v7) {
    _Block_release(v7);
  }
  if (v31) {
    dispatch_release(v31);
  }
  if (v6) {
    dispatch_release(v6);
  }
  sub_10000D448((uint64_t)&v34);
  _Block_object_dispose(&v36, 8);
}

void sub_1000BBB34( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, void *__p, uint64_t a27, int a28, __int16 a29, char a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  if (v37) {
    dispatch_release(v37);
  }
  sub_10000D448(v38 - 152);
  _Block_object_dispose((const void *)(v38 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1000BBC1C(uint64_t a1, int a2)
{
  int v4 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v4)
  {
    uint64_t v5 = v4;
    if (sub_10015A058(5) && os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      int v6 = 136315394;
      int v7 = "join_block_invoke";
      __int16 v8 = 1024;
      int v9 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Received callback for %s with status %d",  (uint8_t *)&v6,  0x12u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t sub_1000BBD2C(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = (uint64_t *)sub_10012E6F8();
  sub_10000D66C(&v10, a1 + 5);
  std::string::basic_string(&v9, (const std::string *)(v2 + 32));
  int v4 = (void *)a1[8];
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  uint64_t v5 = (dispatch_object_s *)a1[9];
  aBlock = v4;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  sub_100136164(v3, &v10, &v9, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  uint64_t result = v10;
  if (v10) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  return result;
}

void sub_1000BBDF4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8LL))(a17);
  }
  _Unwind_Resume(a1);
}

void sub_1000BBE34(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v66 = 0LL;
  unsigned int v67 = &v66;
  uint64_t v68 = 0x2000000000LL;
  char v69 = 1;
  v65[0] = 0LL;
  v65[1] = 0LL;
  unint64_t v64 = v65;
  int v6 = dispatch_group_create();
  dispatch_group_enter(v6);
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1174405120LL;
  aBlock[2] = sub_1000BC83C;
  aBlock[3] = &unk_1002B1D08;
  aBlock[4] = &v66;
  char v61 = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  int v7 = _Block_copy(aBlock);
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  std::string v9 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  unsigned int v62 = v7;
  uint64_t v63 = v9;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = *(char **)a2;
    uint64_t v11 = *(void *)(a2 + 8);
    *(_DWORD *)__n128 buf = 136315394;
    *(void *)&uint8_t buf[4] = v10;
    *(_WORD *)&_BYTE buf[12] = 2080;
    *(void *)&_BYTE buf[14] = v11;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "joiner: cmd: %s, pskd: %s \n",  buf,  0x16u);
  }

  if (!*(void *)a2)
  {
    sub_10000AC00(buf, "Joiner command operation is not provided");
    *(_DWORD *)a3 = 10;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)buf;
    *(void *)(a3 + 24) = *(void *)&buf[16];
    goto LABEL_128;
  }

  sub_10000AC00(buf, *(char **)a2);
  if ((buf[23] & 0x80000000) == 0)
  {
    if (buf[23] != 10)
    {
      if (buf[23] != 11)
      {
        if (buf[23] == 12)
        {
          int v12 = buf;
LABEL_28:
          uint64_t v16 = *(void *)v12;
          int v17 = *((_DWORD *)v12 + 2);
          if (v16 != 0x744172656E696F4ALL || v17 != 1751343476) {
            goto LABEL_56;
          }
          sub_10000AC00(&v58, "JoinerAttach");
          sub_10000AC00(&__p, "method");
          int v19 = sub_10000ED88(&v64, &__p);
          sub_1000175B4(v19, (uint64_t)&v58);
          if (v57 < 0) {
            operator delete((void *)__p.n128_u64[0]);
          }
          if (SHIBYTE(v59) < 0) {
            operator delete((void *)v58.n128_u64[0]);
          }
          __p.n128_u8[0] = *(_BYTE *)(a2 + 64);
          sub_10000AC00(&v58, "Joiner:ReturnImmediatelyOnStart");
          int v20 = sub_10000ED88(&v64, &v58);
          sub_100020B4C(v20, &__p);
          if (SHIBYTE(v59) < 0) {
            operator delete((void *)v58.n128_u64[0]);
          }
          v44[0] = _NSConcreteStackBlock;
          v44[1] = 1174405120LL;
          void v44[2] = sub_1000BCB5C;
          v44[3] = &unk_1002B1D98;
          v44[4] = a1;
          int v21 = v45;
          sub_10000D19C(v45, (uint64_t *)&v64);
          if (v7) {
            int v22 = _Block_copy(v7);
          }
          else {
            int v22 = 0LL;
          }
          char v46 = v22;
          dispatch_object_t v47 = v9;
          if (v9) {
            dispatch_retain(v9);
          }
          sub_1000BE60C(a1, (uint64_t)v44);
          if (v47) {
            dispatch_release(v47);
          }
          if (v46) {
            _Block_release(v46);
          }
LABEL_118:
          sub_10000D448((uint64_t)v21);
          if (v6)
          {
            uint64_t v42 = dispatch_group_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
            uint64_t v43 = v67;
            if (v42) {
              *((_BYTE *)v67 + 24) = 1;
            }
          }

          else
          {
            uint64_t v43 = v67;
          }

          if (*((_BYTE *)v43 + 24)) {
            *(_DWORD *)a3 = 3;
          }
          else {
            *(_DWORD *)a3 = 0;
          }
          *(void *)(a3 + 16) = 0LL;
          *(void *)(a3 + 24) = 0LL;
          *(void *)(a3 + 8) = 0LL;
          goto LABEL_126;
        }

        goto LABEL_56;
      }

      if (*(void *)buf != 0x745372656E696F4ALL || *(void *)&buf[3] != 0x747261745372656ELL) {
        goto LABEL_56;
      }
LABEL_58:
      sub_10000AC00(&v58, "JoinerStart");
      sub_10000AC00(&__p, "method");
      char v27 = sub_10000ED88(&v64, &__p);
      sub_1000175B4(v27, (uint64_t)&v58);
      if (v57 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      if (SHIBYTE(v59) < 0) {
        operator delete((void *)v58.n128_u64[0]);
      }
      dispatch_object_t v28 = *(char **)(a2 + 8);
      if (!v28)
      {
        sub_10000AC00(&v58, "psk value is not given");
        goto LABEL_57;
      }

      sub_10000AC00(&v58, v28);
      sub_10000AC00(&__p, "Joiner:PSKd");
      uint64_t v29 = sub_10000ED88(&v64, &__p);
      sub_1000175B4(v29, (uint64_t)&v58);
      if (v57 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      if (SHIBYTE(v59) < 0) {
        operator delete((void *)v58.n128_u64[0]);
      }
      __p.n128_u8[0] = *(_BYTE *)(a2 + 64);
      sub_10000AC00(&v58, "Joiner:ReturnImmediatelyOnStart");
      char v30 = sub_10000ED88(&v64, &v58);
      sub_100020B4C(v30, &__p);
      if (SHIBYTE(v59) < 0) {
        operator delete((void *)v58.n128_u64[0]);
      }
      dispatch_object_t v31 = *(char **)(a2 + 16);
      if (v31)
      {
        sub_10000AC00(&v58, v31);
        sub_10000AC00(&__p, "Joiner:ProvisioningUrl");
        dispatch_object_t v32 = sub_10000ED88(&v64, &__p);
        sub_1000175B4(v32, (uint64_t)&v58);
        if (v57 < 0) {
          operator delete((void *)__p.n128_u64[0]);
        }
        if (SHIBYTE(v59) < 0) {
          operator delete((void *)v58.n128_u64[0]);
        }
      }

      int v33 = *(char **)(a2 + 24);
      if (v33)
      {
        sub_10000AC00(&v58, v33);
        sub_10000AC00(&__p, "Joiner:Vendor:Name");
        int v34 = sub_10000ED88(&v64, &__p);
        sub_1000175B4(v34, (uint64_t)&v58);
        if (v57 < 0) {
          operator delete((void *)__p.n128_u64[0]);
        }
        if (SHIBYTE(v59) < 0) {
          operator delete((void *)v58.n128_u64[0]);
        }
      }

      char v35 = *(char **)(a2 + 32);
      if (v35)
      {
        sub_10000AC00(&v58, v35);
        sub_10000AC00(&__p, "Joiner:Vendor:Model");
        uint64_t v36 = sub_10000ED88(&v64, &__p);
        sub_1000175B4(v36, (uint64_t)&v58);
        if (v57 < 0) {
          operator delete((void *)__p.n128_u64[0]);
        }
        if (SHIBYTE(v59) < 0) {
          operator delete((void *)v58.n128_u64[0]);
        }
      }

      char v37 = *(char **)(a2 + 40);
      if (v37)
      {
        sub_10000AC00(&v58, v37);
        sub_10000AC00(&__p, "Joiner:Vendor:SwVersion");
        uint64_t v38 = sub_10000ED88(&v64, &__p);
        sub_1000175B4(v38, (uint64_t)&v58);
        if (v57 < 0) {
          operator delete((void *)__p.n128_u64[0]);
        }
        if (SHIBYTE(v59) < 0) {
          operator delete((void *)v58.n128_u64[0]);
        }
      }

      char v39 = *(char **)(a2 + 48);
      if (v39)
      {
        sub_10000AC00(&v58, v39);
        sub_10000AC00(&__p, "Joiner:Vendor:Data");
        dispatch_object_t v40 = sub_10000ED88(&v64, &__p);
        sub_1000175B4(v40, (uint64_t)&v58);
        if (v57 < 0) {
          operator delete((void *)__p.n128_u64[0]);
        }
        if (SHIBYTE(v59) < 0) {
          operator delete((void *)v58.n128_u64[0]);
        }
      }

      v52[0] = _NSConcreteStackBlock;
      v52[1] = 1174405120LL;
      v52[2] = sub_1000BC94C;
      v52[3] = &unk_1002B1D38;
      v52[4] = a1;
      int v21 = v53;
      sub_10000D19C(v53, (uint64_t *)&v64);
      if (v7) {
        uint64_t v41 = _Block_copy(v7);
      }
      else {
        uint64_t v41 = 0LL;
      }
      unint64_t v54 = v41;
      dispatch_object_t v55 = v9;
      if (v9) {
        dispatch_retain(v9);
      }
      sub_1000BE60C(a1, (uint64_t)v52);
      if (v55) {
        dispatch_release(v55);
      }
      if (v54) {
        _Block_release(v54);
      }
      goto LABEL_118;
    }

void sub_1000BC704( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, void *__p, uint64_t a41, int a42, __int16 a43, char a44, char a45, void *a46, uint64_t a47, int a48, __int16 a49, char a50,char a51)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100006EEC(exception_object);
}

void sub_1000BC83C(uint64_t a1, int a2)
{
  int v4 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v4)
  {
    uint64_t v5 = v4;
    if (sub_10015A058(5) && os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      int v6 = 136315394;
      int v7 = "joiner_block_invoke";
      __int16 v8 = 1024;
      int v9 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Received callback for %s with status %d",  (uint8_t *)&v6,  0x12u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t sub_1000BC94C(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = (uint64_t *)sub_10012E6F8();
  sub_10000D66C(&v10, a1 + 5);
  std::string::basic_string(&v9, (const std::string *)(v2 + 32));
  int v4 = (void *)a1[8];
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  uint64_t v5 = (dispatch_object_s *)a1[9];
  aBlock = v4;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  sub_100137000(v3, &v10, &v9, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  uint64_t result = v10;
  if (v10) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  return result;
}

void sub_1000BCA14( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8LL))(a17);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000BCA54(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = (uint64_t *)sub_10012E6F8();
  sub_10000D66C(&v10, a1 + 5);
  std::string::basic_string(&v9, (const std::string *)(v2 + 32));
  int v4 = (void *)a1[8];
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  uint64_t v5 = (dispatch_object_s *)a1[9];
  aBlock = v4;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  sub_100137828(v3, &v10, &v9, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  uint64_t result = v10;
  if (v10) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  return result;
}

void sub_1000BCB1C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8LL))(a17);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000BCB5C(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = (uint64_t *)sub_10012E6F8();
  sub_10000D66C(&v10, a1 + 5);
  std::string::basic_string(&v9, (const std::string *)(v2 + 32));
  int v4 = (void *)a1[8];
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  uint64_t v5 = (dispatch_object_s *)a1[9];
  aBlock = v4;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  sub_100136B98(v3, &v10, &v9, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  uint64_t result = v10;
  if (v10) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  return result;
}

void sub_1000BCC24( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8LL))(a17);
  }
  _Unwind_Resume(a1);
}

void sub_1000BCC64(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = 0LL;
  int v19 = &v18;
  uint64_t v20 = 0x2000000000LL;
  char v21 = 1;
  int v4 = dispatch_group_create();
  dispatch_group_enter(v4);
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1174405120LL;
  aBlock[2] = sub_1000BCE28;
  aBlock[3] = &unk_1002B1DD0;
  aBlock[4] = &v18;
  dispatch_object_t v17 = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  uint64_t v5 = _Block_copy(aBlock);
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  int v7 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1174405120LL;
  v13[2] = sub_1000BCEF0;
  uint64_t v13[3] = &unk_1002B1E00;
  v13[4] = a1;
  if (v5) {
    __int16 v8 = _Block_copy(v5);
  }
  else {
    __int16 v8 = 0LL;
  }
  unsigned __int32 v14 = v8;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  sub_1000BE60C(a1, (uint64_t)v13);
  if (v4)
  {
    uint64_t v9 = dispatch_group_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
    uint64_t v10 = v19;
    if (v9) {
      *((_BYTE *)v19 + 24) = 1;
    }
  }

  else
  {
    uint64_t v10 = v19;
  }

  int v11 = *((unsigned __int8 *)v10 + 24);
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)(a2 + 8) = 0LL;
  if (v11) {
    int v12 = 3;
  }
  else {
    int v12 = 0;
  }
  *(_DWORD *)a2 = v12;
  if (object) {
    dispatch_release(object);
  }
  if (v14) {
    _Block_release(v14);
  }
  if (v7) {
    dispatch_release(v7);
  }
  if (v5) {
    _Block_release(v5);
  }
  if (v17) {
    dispatch_release(v17);
  }
  if (v4) {
    dispatch_release(v4);
  }
  _Block_object_dispose(&v18, 8);
}

void sub_1000BCE28(uint64_t a1, int a2)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    uint64_t v5 = "resume_block_invoke";
    __int16 v6 = 1024;
    int v7 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "Received callback for %s with status=%d",  (uint8_t *)&v4,  0x12u);
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1000BCEF0(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = (uint64_t *)sub_10012E6F8();
  std::string::basic_string(&v8, (const std::string *)(v2 + 32));
  int v4 = (void *)a1[5];
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  uint64_t v5 = (dispatch_object_s *)a1[6];
  aBlock = v4;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  sub_100132EA8(v3, &v8, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_1000BCF94( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1000BCFB8(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v26 = 0LL;
  char v27 = &v26;
  uint64_t v28 = 0x2000000000LL;
  char v29 = 1;
  __int16 v6 = dispatch_group_create();
  dispatch_group_enter(v6);
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1174405120LL;
  aBlock[2] = sub_1000BD270;
  aBlock[3] = &unk_1002B1E38;
  aBlock[4] = &v26;
  dispatch_object_t v25 = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  int v7 = _Block_copy(aBlock);
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  uint64_t v9 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  BOOL v10 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO);
  if ((a2 & 1) != 0)
  {
    if (v10)
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "Hard Resetting NCP. . .\n",  buf,  2u);
    }

    v17[0] = _NSConcreteStackBlock;
    v17[1] = 1174405120LL;
    v17[2] = sub_1000BD400;
    v17[3] = &unk_1002B1E98;
    v17[4] = a1;
    if (v7) {
      int v11 = _Block_copy(v7);
    }
    else {
      int v11 = 0LL;
    }
    uint64_t v18 = v11;
    dispatch_object_t object = v9;
    if (v9) {
      dispatch_retain(v9);
    }
    sub_1000BE60C(a1, (uint64_t)v17);
    if (object) {
      dispatch_release(object);
    }
    if (v18) {
      _Block_release(v18);
    }
  }

  else
  {
    if (v10)
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "Resetting NCP. . .\n",  buf,  2u);
    }

    v20[0] = _NSConcreteStackBlock;
    v20[1] = 1174405120LL;
    void v20[2] = sub_1000BD338;
    v20[3] = &unk_1002B1E68;
    v20[4] = a1;
    if (v7) {
      int v12 = _Block_copy(v7);
    }
    else {
      int v12 = 0LL;
    }
    char v21 = v12;
    dispatch_object_t v22 = v9;
    if (v9) {
      dispatch_retain(v9);
    }
    sub_1000BE60C(a1, (uint64_t)v20);
    if (v22) {
      dispatch_release(v22);
    }
    if (v21) {
      _Block_release(v21);
    }
  }

  if (v6)
  {
    uint64_t v13 = dispatch_group_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
    unsigned __int32 v14 = v27;
    if (v13) {
      *((_BYTE *)v27 + 24) = 1;
    }
  }

  else
  {
    unsigned __int32 v14 = v27;
  }

  int v15 = *((unsigned __int8 *)v14 + 24);
  *(void *)(a3 + 16) = 0LL;
  *(void *)(a3 + 24) = 0LL;
  *(void *)(a3 + 8) = 0LL;
  if (v15) {
    int v16 = 3;
  }
  else {
    int v16 = 0;
  }
  *(_DWORD *)a3 = v16;
  if (v9) {
    dispatch_release(v9);
  }
  if (v7) {
    _Block_release(v7);
  }
  if (v25) {
    dispatch_release(v25);
  }
  if (v6) {
    dispatch_release(v6);
  }
  _Block_object_dispose(&v26, 8);
}

void sub_1000BD270(uint64_t a1, int a2)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    uint64_t v5 = "reset_block_invoke";
    __int16 v6 = 1024;
    int v7 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "Received callback for %s with status=%d",  (uint8_t *)&v4,  0x12u);
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1000BD338(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = (uint64_t *)sub_10012E6F8();
  std::string::basic_string(&v8, (const std::string *)(v2 + 32));
  int v4 = (void *)a1[5];
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  uint64_t v5 = (dispatch_object_s *)a1[6];
  aBlock = v4;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  sub_100133708(v3, &v8, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_1000BD3DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1000BD400(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = sub_10012E6F8();
  std::string::basic_string(&v8, (const std::string *)(v2 + 32));
  int v4 = (void *)a1[5];
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  uint64_t v5 = (dispatch_object_s *)a1[6];
  aBlock = v4;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  sub_100133A88((uint64_t)v3, (uint64_t)&v8, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_1000BD4A4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1000BD4C8(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v35 = 0LL;
  uint64_t v36 = &v35;
  uint64_t v37 = 0x2000000000LL;
  char v38 = 1;
  v34[0] = 0LL;
  v34[1] = 0LL;
  int v33 = v34;
  std::string v8 = dispatch_group_create();
  dispatch_group_enter(v8);
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1174405120LL;
  aBlock[2] = sub_1000BDA54;
  aBlock[3] = &unk_1002B1ED0;
  aBlock[4] = &v35;
  void aBlock[5] = a3;
  dispatch_object_t object = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  uint64_t v9 = _Block_copy(aBlock);
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  int v11 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  dispatch_object_t v31 = v9;
  dispatch_object_t v32 = v11;
  if (!*(void *)a2)
  {
    sub_10000AC00(buf, "Network name is not given");
    goto LABEL_31;
  }

  if (!*(void *)(a2 + 16))
  {
    sub_10000AC00(buf, "Pass phrase is not given");
LABEL_31:
    *(_DWORD *)a4 = 10;
    *(_OWORD *)(a4 + 8) = *(_OWORD *)buf;
    *(void *)(a4 + 24) = *(void *)&buf[16];
    if (!v11) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }

  sub_10000AC00(buf, "GeneratePSKc");
  sub_10000AC00(&__p, "method");
  int v12 = sub_10000ED88(&v33, &__p);
  sub_1000175B4(v12, (uint64_t)buf);
  if (v28 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10000AC00(buf, "GeneratePSKc");
  sub_10000AC00(&__p, "property_name");
  uint64_t v13 = sub_10000ED88(&v33, &__p);
  sub_1000175B4(v13, (uint64_t)buf);
  if (v28 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10000AC00(buf, *(char **)(a2 + 16));
  sub_10000AC00(&__p, "pass_phrase");
  unsigned __int32 v14 = sub_10000ED88(&v33, &__p);
  sub_1000175B4(v14, (uint64_t)buf);
  if (v28 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10000AC00(buf, *(char **)a2);
  sub_10000AC00(&__p, "network_name");
  int v15 = sub_10000ED88(&v33, &__p);
  sub_1000175B4(v15, (uint64_t)buf);
  if (v28 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  unint64_t v39 = bswap64(*(void *)(a2 + 24));
  memset(buf, 0, sizeof(buf));
  sub_100018E8C(buf, &v39, (uint64_t)buf, 8uLL);
  sub_10000AC00(&__p, "xpanid");
  int v16 = sub_10000ED88(&v33, &__p);
  sub_100017FCC(v16, (__n128 *)buf);
  if (v28 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  __p.n128_u64[0] = (unint64_t)buf;
  sub_100006F6C((void ***)&__p);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    uint64_t v17 = *(void *)(a2 + 24);
    *(_DWORD *)__n128 buf = 136315394;
    *(void *)&uint8_t buf[4] = "generatePSKc";
    *(_WORD *)&_BYTE buf[12] = 2048;
    *(void *)&_BYTE buf[14] = v17;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s : xpanid:0x%016llX",  buf,  0x16u);
  }

  v23[0] = _NSConcreteStackBlock;
  v23[1] = 1174405120LL;
  v23[2] = sub_1000BDB5C;
  v23[3] = &unk_1002B1F00;
  v23[4] = a1;
  sub_10000D19C(v24, (uint64_t *)&v33);
  if (v9) {
    uint64_t v18 = _Block_copy(v9);
  }
  else {
    uint64_t v18 = 0LL;
  }
  dispatch_object_t v25 = v18;
  dispatch_object_t v26 = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  sub_1000BE60C(a1, (uint64_t)v23);
  if (v8)
  {
    uint64_t v19 = dispatch_group_wait(v8, 0xFFFFFFFFFFFFFFFFLL);
    uint64_t v20 = v36;
    if (v19) {
      *((_BYTE *)v36 + 24) = 1;
    }
  }

  else
  {
    uint64_t v20 = v36;
  }

  int v21 = *((unsigned __int8 *)v20 + 24);
  *(void *)(a4 + 16) = 0LL;
  *(void *)(a4 + 24) = 0LL;
  *(void *)(a4 + 8) = 0LL;
  if (v21) {
    int v22 = 3;
  }
  else {
    int v22 = 0;
  }
  *(_DWORD *)a4 = v22;
  if (v26) {
    dispatch_release(v26);
  }
  if (v25) {
    _Block_release(v25);
  }
  sub_10000D448((uint64_t)v24);
  if (v11) {
LABEL_32:
  }
    dispatch_release(v11);
LABEL_33:
  if (v9) {
    _Block_release(v9);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v8) {
    dispatch_release(v8);
  }
  sub_10000D448((uint64_t)&v33);
  _Block_object_dispose(&v35, 8);
}

void sub_1000BD964( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, dispatch_object_t object, char a32, uint64_t a33, char a34)
{
  if (a2) {
    sub_100006EEC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000BDA54(uint64_t a1, int a2, void *a3)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315394;
    int v7 = "generatePSKc_block_invoke";
    __int16 v8 = 1024;
    int v9 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "Received callback for %s : status=%d",  (uint8_t *)&v6,  0x12u);
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a2;
  sub_100018024(*(uint64_t **)(a1 + 40), a3);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_1000BDB34(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(dispatch_object_s **)(a2 + 48);
  *(void *)(a1 + 48) = v3;
  if (v3) {
    dispatch_retain(v3);
  }
}

void sub_1000BDB4C(uint64_t a1)
{
  uint64_t v1 = *(dispatch_object_s **)(a1 + 48);
  if (v1) {
    dispatch_release(v1);
  }
}

uint64_t sub_1000BDB5C(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = (uint64_t *)sub_10012E6F8();
  sub_10000D66C(&v10, a1 + 5);
  std::string::basic_string(&v9, (const std::string *)(v2 + 32));
  int v4 = (void *)a1[8];
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  uint64_t v5 = (dispatch_object_s *)a1[9];
  aBlock = v4;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  sub_100137BF4(v3, (uint64_t)&v10, &v9, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  uint64_t result = v10;
  if (v10) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  return result;
}

void sub_1000BDC24( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8LL))(a17);
  }
  _Unwind_Resume(a1);
}

void sub_1000BDC64(uint64_t a1, const std::string *a2, pthread_mutex_t *a3)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = a2;
    *(_DWORD *)&v7.__opaque[16] = 136315138;
    *(void *)&v7.__opaque[20] = v5;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "Signaling Property change for key: %s. . .\n",  (uint8_t *)&v7.__opaque[16],  0xCu);
  }

  int v6 = sub_10012E6F8();
  std::string::basic_string((std::string *)&v7, a2);
  sub_1001383A0(v6, &v7, a3);
  if (v7.__opaque[15] < 0) {
    operator delete((void *)v7.__sig);
  }
}

void sub_1000BDD50( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000BDD74(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v31 = 0LL;
  dispatch_object_t v32 = &v31;
  uint64_t v33 = 0x2000000000LL;
  char v34 = 1;
  v30[0] = 0LL;
  v30[1] = 0LL;
  char v29 = v30;
  int v6 = dispatch_group_create();
  dispatch_group_enter(v6);
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1174405120LL;
  aBlock[2] = sub_1000BE0A8;
  aBlock[3] = &unk_1002B1F38;
  aBlock[4] = &v31;
  void aBlock[5] = a2;
  dispatch_object_t v26 = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  pthread_mutex_t v7 = _Block_copy(aBlock);
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  std::string v9 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  char v27 = v7;
  char v28 = v9;
  sub_10000AC00(v23, "Status");
  sub_10000AC00(&__p, "method");
  uint64_t v10 = sub_10000ED88(&v29, &__p);
  sub_1000175B4(v10, (uint64_t)v23);
  if (v22 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  sub_10000AC00(v23, "Status");
  sub_10000AC00(&__p, "property_name");
  int v11 = sub_10000ED88(&v29, &__p);
  sub_1000175B4(v11, (uint64_t)v23);
  if (v22 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1174405120LL;
  v17[2] = sub_1000BE134;
  v17[3] = &unk_1002B1F68;
  v17[4] = a1;
  sub_10000D19C(v18, (uint64_t *)&v29);
  if (v7) {
    int v12 = _Block_copy(v7);
  }
  else {
    int v12 = 0LL;
  }
  uint64_t v19 = v12;
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  sub_1000BE60C(a1, (uint64_t)v17);
  if (v6)
  {
    uint64_t v13 = dispatch_group_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
    unsigned __int32 v14 = v32;
    if (v13) {
      *((_BYTE *)v32 + 24) = 1;
    }
  }

  else
  {
    unsigned __int32 v14 = v32;
  }

  int v15 = *((unsigned __int8 *)v14 + 24);
  *(void *)(a3 + 16) = 0LL;
  *(void *)(a3 + 24) = 0LL;
  *(void *)(a3 + 8) = 0LL;
  if (v15) {
    int v16 = 3;
  }
  else {
    int v16 = 0;
  }
  *(_DWORD *)a3 = v16;
  if (object) {
    dispatch_release(object);
  }
  if (v19) {
    _Block_release(v19);
  }
  sub_10000D448((uint64_t)v18);
  if (v9) {
    dispatch_release(v9);
  }
  if (v7) {
    _Block_release(v7);
  }
  if (v26) {
    dispatch_release(v26);
  }
  if (v6) {
    dispatch_release(v6);
  }
  sub_10000D448((uint64_t)&v29);
  _Block_object_dispose(&v31, 8);
}

void sub_1000BE024( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  if (v37) {
    dispatch_release(v37);
  }
  sub_10000D448(v38 - 136);
  _Block_object_dispose((const void *)(v38 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1000BE0A8(uint64_t a1, char a2, uint64_t *a3)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a2;
  sub_100018024(*(uint64_t **)(a1 + 40), a3);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_1000BE118( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000BE134(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = (uint64_t *)sub_10012E6F8();
  sub_10000D66C(&v10, a1 + 5);
  std::string::basic_string(&v9, (const std::string *)(v2 + 32));
  int v4 = (void *)a1[8];
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  uint64_t v5 = (dispatch_object_s *)a1[9];
  aBlock = v4;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  sub_1001383AC(v3, &v10, (std::string::size_type)&v9, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  uint64_t result = v10;
  if (v10) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  return result;
}

void sub_1000BE1FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8LL))(a17);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000BE23C(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void *sub_1000BE268(void *a1, void *a2)
{
  *a1 = a2;
  int v4 = operator new(0x20uLL);
  *int v4 = &off_1002B1FA8;
  v4[1] = 0LL;
  v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = v4;
  uint64_t v6 = 0LL;
  sub_1000BE2F0((uint64_t)a1, a2, (uint64_t)a2);
  sub_1000BE3FC(&v6, 0LL);
  return a1;
}

void sub_1000BE2D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1000BE2F0(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v3 = a2[1];
    if (!v3) {
      goto LABEL_5;
    }
    uint64_t v4 = *(void *)(v3 + 8);
    BOOL v5 = __OFADD__(v4, 1LL);
    uint64_t v6 = v4 + 1;
    if (v5)
    {
      __break(0x5500u);
      return;
    }

    if (!v6)
    {
LABEL_5:
      pthread_mutex_t v7 = *(std::__shared_weak_count **)(a1 + 8);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          unint64_t v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
        do
          unint64_t v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
      }

      int v12 = (std::__shared_weak_count *)a2[1];
      *a2 = a3;
      a2[1] = v7;
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v7) {
        sub_10000ABAC(v7);
      }
    }
  }

void sub_1000BE380(std::__shared_weak_count *a1)
{
}

void sub_1000BE394(uint64_t a1)
{
}

uint64_t sub_1000BE39C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void sub_1000BE3DC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (void *)sub_1000B76A0(a2);
    operator delete(v2);
  }

void sub_1000BE3FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_1000B76A0(v3);
    operator delete(v4);
  }

void *sub_1000BE428(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &off_1002B2020;
  v4[1] = 0LL;
  v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = v4;
  uint64_t v6 = 0LL;
  sub_1000BE5E0(&v6, 0LL);
  return a1;
}

void sub_1000BE488(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1000BE4A4(std::__shared_weak_count *a1)
{
}

void sub_1000BE4B8(uint64_t a1)
{
}

uint64_t sub_1000BE4C0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void sub_1000BE500(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (void *)sub_1000BE520(a2);
    operator delete(v2);
  }

uint64_t sub_1000BE520(uint64_t a1)
{
  return a1;
}

void sub_1000BE548(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1000BE548(a1, *a2);
    sub_1000BE548(a1, a2[1]);
    sub_1000BE590((uint64_t)(a2 + 4));
    operator delete(a2);
  }

void sub_1000BE590(uint64_t a1)
{
  uint64_t v2 = *(dispatch_object_s **)(a1 + 32);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 24);
  if (v3) {
    _Block_release(v3);
  }
}

void sub_1000BE5E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_1000BE520(v3);
    operator delete(v4);
  }

void sub_1000BE60C(void *a1, uint64_t a2)
{
  uint64_t v4 = (dispatch_queue_s *)a1[2];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120LL;
  block[2] = sub_1000BE6B8;
  block[3] = &unk_1002B2090;
  block[5] = v9;
  __int16 v8 = v10;
  if (v10)
  {
    p_shared_owners = &v10->__shared_owners_;
    do
      unint64_t v6 = __ldxr((unint64_t *)p_shared_owners);
    while (__stxr(v6 + 1, (unint64_t *)p_shared_owners));
  }

  block[4] = a2;
  dispatch_async(v4, block);
  if (v8) {
    sub_10000ABAC(v8);
  }
  if (v10) {
    sub_10000ABAC(v10);
  }
}

uint64_t sub_1000BE6B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void *sub_1000BE6C4(uint64_t a1, uint64_t a2)
{
  return sub_10000AB5C((void *)(a1 + 40), (void *)(a2 + 40));
}

uint64_t sub_1000BE6D0(uint64_t a1)
{
  return sub_10000AB80(a1 + 40);
}

void *sub_1000BE6D8(void *a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0LL;
LABEL_5:
    sub_1000BE718();
  }

  uint64_t v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4) {
    goto LABEL_5;
  }
  return a1;
}

void sub_1000BE718()
{
  exception = __cxa_allocate_exception(8uLL);
}

void *sub_1000BE754()
{
}

void *sub_1000BE760(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1002B20D0;
  result[1] = v3;
  return result;
}

void *sub_1000BE794(uint64_t **a1, const void **a2, uint64_t a3, const std::string **a4)
{
  pthread_mutex_t v7 = sub_10000AE50((uint64_t)a1, &v12, a2);
  __int16 v8 = (void *)*v7;
  if (!*v7)
  {
    uint64_t v9 = (void **)v7;
    sub_1000BE83C((uint64_t)a1, a3, a4, (uint64_t)v11);
    sub_10000AF70(a1, v12, v9, (void *)v11[0]);
    __int16 v8 = v11[0];
    v11[0] = 0LL;
    sub_1000BE8E0(v11, 0LL);
  }

  return v8;
}

std::string *sub_1000BE83C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, const std::string **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  __int16 v8 = (char *)operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  uint64_t result = sub_1000BE8C0(v7, (std::string *)(v8 + 32), a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1000BE8A8(_Unwind_Exception *a1)
{
}

std::string *sub_1000BE8C0(int a1, std::string *this, uint64_t a3, const std::string **a4)
{
  uint64_t result = std::string::basic_string(this, *a4);
  result[1].__r_.__value_.__r.__words[0] = 0LL;
  result[1].__r_.__value_.__l.__size_ = 0LL;
  return result;
}

void sub_1000BE8E0(void **a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3) {
    sub_1000BE8FC((uint64_t)(a1 + 1), v3);
  }
}

void sub_1000BE8FC(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8)) {
    sub_1000BE590((uint64_t)__p + 32);
  }
  if (__p) {
    operator delete(__p);
  }
}

void *sub_1000BE944()
{
}

void *sub_1000BE950(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1002B2118;
  result[1] = v3;
  return result;
}

uint64_t sub_1000BE984(int a1, unsigned int a2)
{
  if (a2) {
    int v4 = (int)(log10((double)a2) + 1.0);
  }
  else {
    int v4 = 1;
  }
  BOOL v5 = __OFSUB__(v4, a1);
  int v6 = v4 - a1;
  if (!((v6 < 0) ^ v5 | (v6 == 0)))
  {
    if (!v5) {
      goto LABEL_9;
    }
    __break(0x5515u);
  }

  int v6 = 0;
LABEL_9:
  double v7 = __exp10((double)v6);
  return (int)(v7 * (double)(int)((double)a2 / v7));
}

uint64_t sub_1000BEA00(uint64_t *a1)
{
  uint64_t result = sub_1001472F4(a1);
  uint64_t v2 = (result - 11);
  if (result < 0xB)
  {
    __break(0x5515u);
    goto LABEL_7;
  }

  int v3 = *((_DWORD *)&xmmword_1002D0E00 + v2);
  BOOL v4 = __CFADD__(v3, 1);
  int v5 = v3 + 1;
  if (v4)
  {
LABEL_7:
    __break(0x5500u);
    return result;
  }

  *((_DWORD *)&xmmword_1002D0E00 + v2) = v5;
  return result;
}

uint64_t sub_1000BEA44(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  int v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  int v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  for (uint64_t i = 0LL; i != 100; i += 4LL)
  {
    double v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)((char *)&xmmword_1002D0E00 + i + 80)));
    [v3 addObject:v7];

    __int16 v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)((char *)&xmmword_1002D0E00 + i + 180)));
    [v5 addObject:v8];
  }

  for (uint64_t j = 0LL; j != 204; j += 4LL)
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)((char *)&xmmword_1002D0E00 + j + 280)));
    [v2 addObject:v10];

    unint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)((char *)&xmmword_1002D0E00 + j + 484)));
    [v4 addObject:v11];
  }

  [v1 setObject:v2 forKey:@"attach_latency_histogram"];
  [v1 setObject:v3 forKey:@"joiner_latency_histogram"];
  [v1 setObject:v4 forKey:@"attach_fail_latency_histogram"];
  [v1 setObject:v5 forKey:@"joiner_fail_latency_histogram"];

  return 0LL;
}

void sub_1000BEBFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BEC60()
{
  qword_1002D0E40 = 0x7FFFFFFFFFFFFFFFLL;
}

__darwin_time_t sub_1000BEC94()
{
  uint64_t v0 = sub_1000160F4("com.apple.wpantund.awd", "default");
  id v1 = (os_log_s *)objc_claimAutoreleasedReturnValue(v0);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int v3 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "CAMetrics : Inside CAMetricsHandlers_joinattempt_start",  v3,  2u);
  }

  __darwin_time_t result = sub_10014314C();
  qword_1002D0E40 = result;
  return result;
}

void sub_1000BED14(int a1, int a2)
{
  __darwin_time_t v4 = sub_10014314C();
  if (__OFSUB__(v4, qword_1002D0E40)) {
    goto LABEL_37;
  }
  if (dword_1002D0E48 == -1) {
    goto LABEL_36;
  }
  unint64_t v5 = (v4 - qword_1002D0E40) & ~((v4 - qword_1002D0E40) >> 63);
  ++dword_1002D0E48;
  int v6 = sub_1000160F4("com.apple.wpantund.awd", "default");
  double v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    __int16 v8 = "FALSE";
    int v26 = 136316162;
    char v27 = "CAMetricsHandlers_joinattempt_status";
    __int16 v28 = 1024;
    if (a1) {
      uint64_t v9 = "TRUE";
    }
    else {
      uint64_t v9 = "FALSE";
    }
    int v29 = dword_1002D0E48;
    if (a2) {
      __int16 v8 = "TRUE";
    }
    __int16 v30 = 2080;
    uint64_t v31 = v9;
    __int16 v32 = 2080;
    uint64_t v33 = v8;
    __int16 v34 = 2048;
    unint64_t v35 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "CAMetrics : Inside %s. Attempts=%d, is_joiner=%s, is_success=%s, ElapsedTime = %lldms. ",  (uint8_t *)&v26,  0x30u);
  }

  if (a2)
  {
    if (dword_1002D0E4C != -1)
    {
      ++dword_1002D0E4C;
      if ((a1 & 1) != 0)
      {
        unint64_t v10 = v5 / 0x1388;
        if (v10 < 0x19)
        {
          unint64_t v11 = (char *)&xmmword_1002D0E00 + 4 * v10;
          int v14 = *((_DWORD *)v11 + 20);
          uint64_t v13 = v11 + 80;
          int v12 = v14;
          goto LABEL_22;
        }

        goto LABEL_38;
      }

      unint64_t v23 = v5 / 0x64;
      char v24 = (char *)&xmmword_1002D0E00 + 4 * v23;
      int v25 = *((_DWORD *)v24 + 70);
      BOOL v18 = __CFADD__(v25, 1);
      int v19 = v25 + 1;
      if (!v18)
      {
        uint64_t v13 = v24 + 280;
        goto LABEL_35;
      }
    }

uint64_t sub_1000BEFB0(void *a1, void *a2)
{
  id v3 = a1;
  id v29 = a2;
  uint64_t v37 = 0LL;
  memset(v36, 0, sizeof(v36));
  id v31 = v3;
  __int16 v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
  {
    size_t count = xpc_array_get_count(v3);
    __int16 v8 = sub_1000160F4("com.apple.wpantund.awd", "default");
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = count;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "CAMetrics : JoinerRSSIHistogram array with size %ld.",  (uint8_t *)&buf,  0xCu);
    }

    if (count)
    {
      size_t v10 = 0LL;
      int v6 = 0LL;
      do
      {
        xpc_object_t dictionary = xpc_array_get_dictionary(v3, v10);
        int v12 = (void *)objc_claimAutoreleasedReturnValue(dictionary);

        int v6 = v12;
        string = (char *)xpc_dictionary_get_string(v12, "key");
        sub_10000AC00(&buf, string);
        int uint64 = xpc_dictionary_get_uint64(v12, "value");
        std::string::size_type v15 = std::string::find(&buf, 91, 0LL);
        std::string::size_type v16 = std::string::find(&buf, 93, 0LL);
        uint64_t size = buf.__r_.__value_.__s.__size_;
        unsigned __int8 v18 = buf.__r_.__value_.__s.__size_;
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t size = buf.__r_.__value_.__l.__size_;
        }
        unint64_t v20 = (std::string *)((char *)p_buf + size);
        if (size >= 18)
        {
          int v21 = p_buf;
          do
          {
            int v22 = (std::string *)memchr(v21, 69, size - 17);
            if (!v22) {
              break;
            }
            if (v22->__r_.__value_.__r.__words[0] == 0x6369766544646E45LL
              && v22->__r_.__value_.__l.__size_ == 0x756F436E696F4A65LL
              && LOWORD(v22->__r_.__value_.__r.__words[2]) == 29806)
            {
              goto LABEL_26;
            }

            int v21 = (std::string *)((char *)&v22->__r_.__value_.__l.__data_ + 1);
            uint64_t size = (char *)v20 - (char *)v21;
          }

          while ((char *)v20 - (char *)v21 > 17);
        }

        int v22 = v20;
LABEL_26:
        if (v22 != v20 && v22 == p_buf && v15 != -1LL && v16 != -1LL)
        {
          if (!v16)
          {
            __break(0x5515u);
LABEL_47:
            __break(0x5512u);
          }

          std::string::basic_string(&__str, &buf, v15 + 1, v16 - 1, (std::allocator<char> *)&v34);
          unsigned __int8 v25 = std::stoi(&__str, 0LL, 10);
          if ((v25 & 0xFEu) <= 0xD)
          {
            if (v25 >= 0xEu) {
              goto LABEL_47;
            }
            *((_DWORD *)v36 + v25) = uint64;
          }

          unsigned __int8 v18 = buf.__r_.__value_.__s.__size_;
        }

        if ((v18 & 0x80) != 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        ++v10;
        id v3 = v31;
      }

      while (v10 != count);
    }

    else
    {
      int v6 = 0LL;
    }

    for (uint64_t i = 0LL; i != 56; i += 4LL)
    {
      char v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)((char *)v36 + i)));
      [v32 addObject:v27];
    }

    [v29 setObject:v32 forKey:@"accessory_nodes_count_histogram"];
    uint64_t v7 = 0LL;
  }

  else
  {
    __darwin_time_t v4 = sub_1000160F4("com.apple.wpantund.awd", "default");
    unint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_10020D48C();
    }

    int v6 = 0LL;
    uint64_t v7 = 1LL;
  }

  return v7;
}

void sub_1000BF350( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
}

size_t sub_1000BF400(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  v20[0] = 0LL;
  v20[1] = 0LL;
  int v19 = v20;
  if (xpc_get_type(v3) != (xpc_type_t)&_xpc_type_array)
  {
    unint64_t v5 = sub_1000160F4("com.apple.wpantund.awd", "default");
    int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_10020D4B8();
    }
    size_t count = 1LL;
LABEL_14:

    goto LABEL_15;
  }

  size_t count = xpc_array_get_count(v3);
  if (count)
  {
    __int16 v8 = 0LL;
    for (size_t i = 0LL; i != count; ++i)
    {
      xpc_object_t dictionary = xpc_array_get_dictionary(v3, i);
      int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(dictionary);

      string = (char *)xpc_dictionary_get_string(v6, "key");
      sub_10000AC00(__p, string);
      int v12 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  (unsigned __int16)xpc_dictionary_get_uint64(v6, "value"));
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      if (v18 >= 0) {
        int v14 = __p;
      }
      else {
        int v14 = (void **)__p[0];
      }
      std::string::size_type v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v14));
      [v4 setObject:v13 forKey:v15];

      if (v18 < 0) {
        operator delete(__p[0]);
      }
      __int16 v8 = v6;
    }

    size_t count = 0LL;
    goto LABEL_14;
  }

void sub_1000BF5B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

size_t sub_1000BF61C(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  v25[0] = 0LL;
  v25[1] = 0LL;
  char v24 = v25;
  xpc_type_t type = xpc_get_type(v3);
  if (dword_1002D0E48) {
    float v6 = (float)((float)dword_1002D0E4C / (float)dword_1002D0E48) * 100.0;
  }
  else {
    float v6 = 0.0;
  }
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:"));
  [v4 setObject:v7 forKey:@"join_attempts"];

  *(float *)&double v8 = v6;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v8));
  [v4 setObject:v9 forKey:@"join_success_rate"];

  if (type != (xpc_type_t)&_xpc_type_array)
  {
    size_t v10 = sub_1000160F4("com.apple.wpantund.awd", "default");
    unint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_10020D4E4();
    }
    size_t count = 1LL;
LABEL_17:

    goto LABEL_18;
  }

  size_t count = xpc_array_get_count(v3);
  if (count)
  {
    uint64_t v13 = 0LL;
    for (size_t i = 0LL; i != count; ++i)
    {
      xpc_object_t dictionary = xpc_array_get_dictionary(v3, i);
      unint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(dictionary);

      string = (char *)xpc_dictionary_get_string(v11, "key");
      sub_10000AC00(__p, string);
      int v17 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  (unsigned __int16)xpc_dictionary_get_uint64(v11, "value"));
      char v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      if (v23 >= 0) {
        int v19 = __p;
      }
      else {
        int v19 = (void **)__p[0];
      }
      unint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v19));
      [v4 setObject:v18 forKey:v20];

      if (v23 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v13 = v11;
    }

    size_t count = 0LL;
    goto LABEL_17;
  }

void sub_1000BF874( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000BF8F4(void *a1, void *a2)
{
  id v3 = a1;
  id v134 = a2;
  unint64_t v144 = 0LL;
  __int128 v142 = 0u;
  __int128 v143 = 0u;
  __int128 v141 = 0u;
  unint64_t v140 = 0LL;
  __int128 v138 = 0u;
  __int128 v139 = 0u;
  __int128 v137 = 0u;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  if (xpc_get_type(v3) != (xpc_type_t)&_xpc_type_array)
  {
    float v6 = sub_1000160F4("com.apple.wpantund.awd", "default");
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10020D510();
    }

    double v8 = 0LL;
    uint64_t v9 = 1LL;
    goto LABEL_351;
  }

  size_t count = xpc_array_get_count(v3);
  unint64_t v11 = sub_1000160F4("com.apple.wpantund.awd", "default");
  int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 134217984;
    *(void *)&uint8_t buf[4] = count;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "CAMetrics : NeighborRSSIHistogram array with size %ld.",  buf,  0xCu);
  }

  if (!count)
  {
    double v8 = 0LL;
    goto LABEL_348;
  }

  size_t v13 = 0LL;
  double v8 = 0LL;
  unsigned int v119 = HIDWORD(v144);
  unsigned int v123 = v144;
  int v128 = HIDWORD(v143);
  unsigned int v132 = DWORD2(v143);
  unsigned int v107 = DWORD1(v143);
  int v108 = v143;
  int v110 = HIDWORD(v142);
  unsigned int v112 = DWORD2(v142);
  unsigned int v114 = DWORD1(v142);
  int v116 = v142;
  int v120 = HIDWORD(v141);
  unsigned int v124 = DWORD2(v141);
  unsigned int v126 = DWORD1(v141);
  int v131 = v141;
  int v129 = HIDWORD(v139);
  unsigned int v133 = DWORD2(v139);
  unsigned int v106 = DWORD1(v139);
  int v109 = v139;
  int v111 = HIDWORD(v138);
  unsigned int v113 = DWORD2(v138);
  unsigned int v115 = DWORD1(v138);
  int v117 = v138;
  unsigned int v118 = HIDWORD(v140);
  int v121 = HIDWORD(v137);
  unsigned int v122 = v140;
  unsigned int v125 = DWORD2(v137);
  unsigned int v127 = DWORD1(v137);
  int v130 = v137;
  do
  {
    xpc_object_t dictionary = xpc_array_get_dictionary(v3, v13);
    std::string::size_type v15 = (void *)objc_claimAutoreleasedReturnValue(dictionary);

    double v8 = v15;
    string = (char *)xpc_dictionary_get_string(v15, "key");
    sub_10000AC00(buf, string);
    unsigned int uint64 = xpc_dictionary_get_uint64(v15, "value");
    if ((v136 & 0x80000000) == 0)
    {
      if (v136 != 20) {
        goto LABEL_165;
      }
      if (*(void *)buf == 0x6150726574756F52LL
        && *(void *)&buf[8] == 0x6E756F4374656B63LL
        && *(unsigned int *)&buf[16] == 1563450228LL)
      {
        goto LABEL_102;
      }

      if (*(void *)buf == 0x6150726574756F52LL
        && *(void *)&buf[8] == 0x6E756F4374656B63LL
        && *(unsigned int *)&buf[16] == 1563515764LL)
      {
        goto LABEL_103;
      }

      if (*(void *)buf == 0x6150726574756F52LL
        && *(void *)&buf[8] == 0x6E756F4374656B63LL
        && *(unsigned int *)&buf[16] == 1563581300LL)
      {
        goto LABEL_104;
      }

      if (*(void *)buf == 0x6150726574756F52LL
        && *(void *)&buf[8] == 0x6E756F4374656B63LL
        && *(unsigned int *)&buf[16] == 1563646836LL)
      {
        goto LABEL_105;
      }

      if (*(void *)buf == 0x6150726574756F52LL
        && *(void *)&buf[8] == 0x6E756F4374656B63LL
        && *(unsigned int *)&buf[16] == 1563712372LL)
      {
        goto LABEL_106;
      }

LABEL_86:
      if (*(void *)buf == 0x6150726574756F52LL
        && *(void *)&buf[8] == 0x6E756F4374656B63LL
        && *(unsigned int *)&buf[16] == 1563777908LL)
      {
        goto LABEL_139;
      }

      if (*(void *)buf == 0x6150726574756F52LL
        && *(void *)&buf[8] == 0x6E756F4374656B63LL
        && *(unsigned int *)&buf[16] == 1563843444LL)
      {
        goto LABEL_140;
      }

  char v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_txErrorChannelAccessCcaBusy));
  [v3 setObject:v34 forKey:@"tx_error_channel_access_cca_busy"];

  double v8 = self->_has;
  if ((*(void *)&v8 & 0x80000000000LL) == 0)
  {
LABEL_29:
    if ((*(void *)&v8 & 0x2000000000000LL) == 0) {
      goto LABEL_30;
    }
    goto LABEL_88;
  }

  PBDataWriterWriteUint32Field(v7, self->_txErrorChannelAccessCcaBusy, 25LL);
  float v6 = self->_has;
  if ((*(void *)&v6 & 0x80000000000LL) == 0)
  {
LABEL_29:
    if ((*(void *)&v6 & 0x2000000000000LL) == 0) {
      goto LABEL_30;
    }
    goto LABEL_88;
  }

  v4[47] = self->_txErrorChannelAccessCcaBusy;
  *((void *)v4 + 31) |= 0x40000000000uLL;
  float v6 = self->_has;
  if ((*(void *)&v6 & 0x80000000000LL) == 0)
  {
LABEL_29:
    if ((*(void *)&v6 & 0x2000000000000LL) == 0) {
      goto LABEL_30;
    }
    goto LABEL_88;
  }

  *((_DWORD *)v6 + 54) = self->_txErrorTxAborted;
  v6[31] |= 0x2000000000000uLL;
  size_t v10 = self->_has;
  if ((*(void *)&v10 & 0x10000000000000LL) == 0)
  {
LABEL_29:
    if ((*(void *)&v10 & 0x8000000000000LL) == 0) {
      goto LABEL_30;
    }
    goto LABEL_88;
  }

  uint64_t v36 = 0LL;
  if ((*(void *)&v4 & 0x8000000000000LL) != 0)
  {
LABEL_34:
    unint64_t v35 = 2654435761LL * self->_txErrorTxAbortedCsmaBackoff;
    if ((*(void *)&v4 & 0x20000000000000LL) != 0) {
      goto LABEL_35;
    }
    goto LABEL_88;
  }

  self->_transmittedFrames = v5[39];
  *(void *)&self->_has |= 0x400000000uLL;
  uint64_t v9 = *((void *)v5 + 31);
  if ((v9 & 0x1000000000000LL) == 0)
  {
LABEL_33:
    if ((v9 & 0x800000000000LL) == 0) {
      goto LABEL_34;
    }
    goto LABEL_88;
  }

      if (*(void *)buf == 0x6150726574756F52LL
        && *(void *)&buf[8] == 0x6E756F4374656B63LL
        && *(unsigned int *)&buf[16] == 1563777908LL)
      {
        goto LABEL_139;
      }

      if (*(void *)buf == 0x6150726574756F52LL
        && *(void *)&buf[8] == 0x6E756F4374656B63LL
        && *(unsigned int *)&buf[16] == 1563843444LL)
      {
        goto LABEL_140;
      }

      if (*(void *)buf == 0x6F4E746365726944LL
        && *(void *)&buf[8] == 0x726F7272456B6341LL
        && *(void *)&buf[11] == 0x5D355B726F727245LL)
      {
        goto LABEL_139;
      }

      if (*(void *)buf == 0x6F4E746365726944LL
        && *(void *)&buf[8] == 0x726F7272456B6341LL
        && *(void *)&buf[11] == 0x5D365B726F727245LL)
      {
        goto LABEL_140;
      }

  if (v47 < 0) {
    operator delete(v46[0]);
  }
}

      __darwin_time_t result = (uint64_t)spinel_next_packed_datatype(a3);
      a3 = (unsigned __int8 *)result;
    }
  }

LABEL_157:
      unsigned int v52 = buf;
      goto LABEL_158;
    }

    if (*(void *)&buf[8] != 20LL) {
      goto LABEL_165;
    }
    if (**(void **)buf == 0x6150726574756F52LL
      && *(void *)(*(void *)buf + 8LL) == 0x6E756F4374656B63LL
      && *(_DWORD *)(*(void *)buf + 16LL) == 1563450228LL)
    {
LABEL_102:
      int v131 = sub_1000BE984(4, uint64);
      goto LABEL_173;
    }

    if (**(void **)buf == 0x6150726574756F52LL
      && *(void *)(*(void *)buf + 8LL) == 0x6E756F4374656B63LL
      && *(_DWORD *)(*(void *)buf + 16LL) == 1563515764LL)
    {
LABEL_103:
      unsigned int v126 = sub_1000BE984(4, uint64);
      goto LABEL_173;
    }

    if (**(void **)buf == 0x6150726574756F52LL
      && *(void *)(*(void *)buf + 8LL) == 0x6E756F4374656B63LL
      && *(_DWORD *)(*(void *)buf + 16LL) == 1563581300LL)
    {
LABEL_104:
      unsigned int v124 = sub_1000BE984(4, uint64);
      goto LABEL_173;
    }

    if (**(void **)buf == 0x6150726574756F52LL
      && *(void *)(*(void *)buf + 8LL) == 0x6E756F4374656B63LL
      && *(_DWORD *)(*(void *)buf + 16LL) == 1563646836LL)
    {
LABEL_105:
      int v120 = sub_1000BE984(4, uint64);
      goto LABEL_173;
    }

    if (**(void **)buf == 0x6150726574756F52LL
      && *(void *)(*(void *)buf + 8LL) == 0x6E756F4374656B63LL
      && *(_DWORD *)(*(void *)buf + 16LL) == 1563712372LL)
    {
LABEL_106:
      int v116 = sub_1000BE984(4, uint64);
      goto LABEL_173;
    }

    if ((v136 & 0x80) == 0)
    {
      if (v136 != 20) {
        goto LABEL_165;
      }
      goto LABEL_86;
    }

    if (**(void **)buf == 0x6150726574756F52LL
      && *(void *)(*(void *)buf + 8LL) == 0x6E756F4374656B63LL
      && *(_DWORD *)(*(void *)buf + 16LL) == 1563777908LL)
    {
LABEL_139:
      unsigned int v114 = sub_1000BE984(4, uint64);
      goto LABEL_173;
    }

    if (**(void **)buf == 0x6150726574756F52LL
      && *(void *)(*(void *)buf + 8LL) == 0x6E756F4374656B63LL
      && *(_DWORD *)(*(void *)buf + 16LL) == 1563843444LL)
    {
LABEL_140:
      unsigned int v112 = sub_1000BE984(4, uint64);
      goto LABEL_173;
    }

    if ((v136 & 0x80) == 0)
    {
      if (v136 != 20) {
        goto LABEL_165;
      }
      goto LABEL_123;
    }

    if (**(void **)buf == 0x6150726574756F52LL
      && *(void *)(*(void *)buf + 8LL) == 0x6E756F4374656B63LL
      && *(_DWORD *)(*(void *)buf + 16LL) == 1563908980LL)
    {
LABEL_305:
      int v110 = sub_1000BE984(4, uint64);
      goto LABEL_173;
    }

    unsigned int v52 = *(_BYTE **)buf;
    if (**(void **)buf == 0x6150726574756F52LL
      && *(void *)(*(void *)buf + 8LL) == 0x6E756F4374656B63LL
      && *(_DWORD *)(*(void *)buf + 16LL) == 1563974516LL)
    {
LABEL_343:
      int v108 = sub_1000BE984(4, uint64);
      goto LABEL_173;
    }

    if ((v136 & 0x80) == 0)
    {
      if (v136 != 20) {
        goto LABEL_165;
      }
      goto LABEL_157;
    }

        char v51 = (uint64_t *)buf;
        goto LABEL_158;
      }

      if (**(void **)buf == 0x6F4E746365726944LL
        && *(void *)(*(void *)buf + 8LL) == 0x726F7272456B6341LL
        && *(void *)(*(void *)buf + 11LL) == 0x5D375B726F727245LL)
      {
LABEL_179:
        int v110 = sub_1000BE984(4, uint64);
        goto LABEL_182;
      }

      char v51 = *(uint64_t **)buf;
      if (**(void **)buf == 0x6F4E746365726944LL
        && *(void *)(*(void *)buf + 8LL) == 0x726F7272456B6341LL
        && *(void *)(*(void *)buf + 11LL) == 0x5D385B726F727245LL)
      {
LABEL_180:
        int v108 = sub_1000BE984(4, uint64);
        goto LABEL_182;
      }

      if ((v139 & 0x80) == 0)
      {
        if (v139 != 19) {
          goto LABEL_165;
        }
        goto LABEL_157;
      }

      uint64_t v50 = buf;
      goto LABEL_158;
    }

    if (*(void *)&buf[8] != 20LL) {
      goto LABEL_165;
    }
    if (**(void **)buf == 0x6150726574756F52LL
      && *(void *)(*(void *)buf + 8LL) == 0x6E756F4374656B63LL
      && *(_DWORD *)(*(void *)buf + 16LL) == 1563450228LL)
    {
LABEL_102:
      unsigned int v126 = sub_1000BE984(4, uint64);
      goto LABEL_173;
    }

    if (**(void **)buf == 0x6150726574756F52LL
      && *(void *)(*(void *)buf + 8LL) == 0x6E756F4374656B63LL
      && *(_DWORD *)(*(void *)buf + 16LL) == 1563515764LL)
    {
LABEL_103:
      int v121 = sub_1000BE984(4, uint64);
      goto LABEL_173;
    }

    if (**(void **)buf == 0x6150726574756F52LL
      && *(void *)(*(void *)buf + 8LL) == 0x6E756F4374656B63LL
      && *(_DWORD *)(*(void *)buf + 16LL) == 1563581300LL)
    {
LABEL_104:
      unsigned int v119 = sub_1000BE984(4, uint64);
      goto LABEL_173;
    }

    if (**(void **)buf == 0x6150726574756F52LL
      && *(void *)(*(void *)buf + 8LL) == 0x6E756F4374656B63LL
      && *(_DWORD *)(*(void *)buf + 16LL) == 1563646836LL)
    {
LABEL_105:
      unsigned int v115 = sub_1000BE984(4, uint64);
      goto LABEL_173;
    }

    if (**(void **)buf == 0x6150726574756F52LL
      && *(void *)(*(void *)buf + 8LL) == 0x6E756F4374656B63LL
      && *(_DWORD *)(*(void *)buf + 16LL) == 1563712372LL)
    {
LABEL_106:
      int v111 = sub_1000BE984(4, uint64);
      goto LABEL_173;
    }

    if ((v130 & 0x80) == 0)
    {
      if (v130 != 20) {
        goto LABEL_165;
      }
      goto LABEL_86;
    }

    if (**(void **)buf == 0x6150726574756F52LL
      && *(void *)(*(void *)buf + 8LL) == 0x6E756F4374656B63LL
      && *(_DWORD *)(*(void *)buf + 16LL) == 1563777908LL)
    {
LABEL_139:
      int v109 = sub_1000BE984(4, uint64);
      goto LABEL_173;
    }

    if (**(void **)buf == 0x6150726574756F52LL
      && *(void *)(*(void *)buf + 8LL) == 0x6E756F4374656B63LL
      && *(_DWORD *)(*(void *)buf + 16LL) == 1563843444LL)
    {
LABEL_140:
      unsigned int v107 = sub_1000BE984(4, uint64);
      goto LABEL_173;
    }

    if ((v130 & 0x80) == 0)
    {
      if (v130 != 20) {
        goto LABEL_165;
      }
      goto LABEL_123;
    }

    if (**(void **)buf == 0x6150726574756F52LL
      && *(void *)(*(void *)buf + 8LL) == 0x6E756F4374656B63LL
      && *(_DWORD *)(*(void *)buf + 16LL) == 1563908980LL)
    {
LABEL_305:
      uint64_t v105 = sub_1000BE984(4, uint64);
      goto LABEL_173;
    }

    uint64_t v50 = *(_BYTE **)buf;
    if (**(void **)buf == 0x6150726574756F52LL
      && *(void *)(*(void *)buf + 8LL) == 0x6E756F4374656B63LL
      && *(_DWORD *)(*(void *)buf + 16LL) == 1563974516LL)
    {
LABEL_343:
      __int128 v103 = sub_1000BE984(4, uint64);
      goto LABEL_173;
    }

    if ((v130 & 0x80) == 0)
    {
      if (v130 != 20) {
        goto LABEL_165;
      }
      goto LABEL_157;
    }

      uint64_t v50 = (uint64_t *)buf;
      goto LABEL_158;
    }

    if (*(void *)&buf[8] != 19LL) {
      goto LABEL_165;
    }
    if (**(void **)buf == 0x6F4E746365726944LL
      && *(void *)(*(void *)buf + 8LL) == 0x726F7272456B6341LL
      && *(void *)(*(void *)buf + 11LL) == 0x5D305B726F727245LL)
    {
LABEL_102:
      LODWORD(v143) = sub_1000BE984(4, uint64);
      goto LABEL_182;
    }

    if (**(void **)buf == 0x6F4E746365726944LL
      && *(void *)(*(void *)buf + 8LL) == 0x726F7272456B6341LL
      && *(void *)(*(void *)buf + 11LL) == 0x5D315B726F727245LL)
    {
LABEL_103:
      int v130 = sub_1000BE984(4, uint64);
      goto LABEL_182;
    }

    if (**(void **)buf == 0x6F4E746365726944LL
      && *(void *)(*(void *)buf + 8LL) == 0x726F7272456B6341LL
      && *(void *)(*(void *)buf + 11LL) == 0x5D325B726F727245LL)
    {
LABEL_104:
      int v128 = sub_1000BE984(4, uint64);
      goto LABEL_182;
    }

    if (**(void **)buf == 0x6F4E746365726944LL
      && *(void *)(*(void *)buf + 8LL) == 0x726F7272456B6341LL
      && *(void *)(*(void *)buf + 11LL) == 0x5D335B726F727245LL)
    {
LABEL_105:
      unsigned int v124 = sub_1000BE984(4, uint64);
      goto LABEL_182;
    }

    if (**(void **)buf == 0x6F4E746365726944LL
      && *(void *)(*(void *)buf + 8LL) == 0x726F7272456B6341LL
      && *(void *)(*(void *)buf + 11LL) == 0x5D345B726F727245LL)
    {
LABEL_106:
      unsigned int v118 = sub_1000BE984(4, uint64);
      goto LABEL_182;
    }

    if ((v137 & 0x80) == 0)
    {
      if (v137 != 19) {
        goto LABEL_165;
      }
      goto LABEL_86;
    }

    if (**(void **)buf == 0x6F4E746365726944LL
      && *(void *)(*(void *)buf + 8LL) == 0x726F7272456B6341LL
      && *(void *)(*(void *)buf + 11LL) == 0x5D355B726F727245LL)
    {
LABEL_139:
      unsigned int v114 = sub_1000BE984(4, uint64);
      goto LABEL_182;
    }

    if (**(void **)buf == 0x6F4E746365726944LL
      && *(void *)(*(void *)buf + 8LL) == 0x726F7272456B6341LL
      && *(void *)(*(void *)buf + 11LL) == 0x5D365B726F727245LL)
    {
LABEL_140:
      int v110 = sub_1000BE984(4, uint64);
      goto LABEL_182;
    }

    if ((v137 & 0x80) == 0)
    {
      if (v137 != 19) {
        goto LABEL_165;
      }
      goto LABEL_123;
    }

    if (**(void **)buf == 0x6F4E746365726944LL
      && *(void *)(*(void *)buf + 8LL) == 0x726F7272456B6341LL
      && *(void *)(*(void *)buf + 11LL) == 0x5D375B726F727245LL)
    {
LABEL_179:
      int v109 = sub_1000BE984(4, uint64);
      goto LABEL_182;
    }

    uint64_t v50 = *(uint64_t **)buf;
    if (**(void **)buf == 0x6F4E746365726944LL
      && *(void *)(*(void *)buf + 8LL) == 0x726F7272456B6341LL
      && *(void *)(*(void *)buf + 11LL) == 0x5D385B726F727245LL)
    {
LABEL_180:
      unsigned int v107 = sub_1000BE984(4, uint64);
      goto LABEL_182;
    }

    if ((v137 & 0x80) == 0)
    {
      if (v137 != 19) {
        goto LABEL_165;
      }
      goto LABEL_157;
    }

        if (sub_1000B55AC(buf, "csl_tx_err_noack"))
        {
          -[AWDCountersMacTxS setCslTxErrNoack:](v11, "setCslTxErrNoack:", sub_1000BE984(4, uint64));
        }

        else if (sub_1000B55AC(buf, "csl_tx_err_cca"))
        {
          -[AWDCountersMacTxS setCslTxErrCca:](v11, "setCslTxErrCca:", sub_1000BE984(4, uint64));
        }

        else if (sub_1000B55AC(buf, "csl_tx_err_abort"))
        {
          -[AWDCountersMacTxS setCslTxErrAbort:](v11, "setCslTxErrAbort:", sub_1000BE984(4, uint64));
        }

        else if (sub_1000B55AC(buf, "csl_tx_err_busy_channel"))
        {
          -[AWDCountersMacTxS setCslTxErrBusyChannel:](v11, "setCslTxErrBusyChannel:", sub_1000BE984(4, uint64));
        }

        else if (sub_1000B55AC(buf, "tx_csl_loss_of_sync_csl_timeout"))
        {
          -[AWDCountersMacTxS setCslLossOfSyncDueToCslTimeout:]( v11,  "setCslLossOfSyncDueToCslTimeout:",  sub_1000BE984(4, uint64));
        }

        else if (sub_1000B55AC(buf, "tx_csl_loss_of_sync_max_retx"))
        {
          -[AWDCountersMacTxS setCslLossOfSyncDueToMaxRetx:]( v11,  "setCslLossOfSyncDueToMaxRetx:",  sub_1000BE984(4, uint64));
        }

LABEL_173:
    if ((v136 & 0x80000000) == 0)
    {
      if (v136 != 23) {
        goto LABEL_330;
      }
      if (*(void *)buf == 0x6369766544646E45LL
        && *(void *)&buf[8] == 0x4374656B63615065LL
        && *(void *)&buf[15] == 0x5D305B746E756F43LL)
      {
        goto LABEL_266;
      }

      if (*(void *)buf == 0x6369766544646E45LL
        && *(void *)&buf[8] == 0x4374656B63615065LL
        && *(void *)&buf[15] == 0x5D315B746E756F43LL)
      {
        goto LABEL_267;
      }

      if (*(void *)buf == 0x6369766544646E45LL
        && *(void *)&buf[8] == 0x4374656B63615065LL
        && *(void *)&buf[15] == 0x5D325B746E756F43LL)
      {
        goto LABEL_268;
      }

      if (*(void *)buf == 0x6369766544646E45LL
        && *(void *)&buf[8] == 0x4374656B63615065LL
        && *(void *)&buf[15] == 0x5D335B746E756F43LL)
      {
        goto LABEL_269;
      }

      if (*(void *)buf == 0x6369766544646E45LL
        && *(void *)&buf[8] == 0x4374656B63615065LL
        && *(void *)&buf[15] == 0x5D345B746E756F43LL)
      {
        goto LABEL_270;
      }

    if ((v130 & 0x80000000) == 0)
    {
      if (v130 != 23) {
        goto LABEL_330;
      }
      if (*(void *)buf == 0x6369766544646E45LL
        && *(void *)&buf[8] == 0x4374656B63615065LL
        && *(void *)&buf[15] == 0x5D305B746E756F43LL)
      {
        goto LABEL_266;
      }

      if (*(void *)buf == 0x6369766544646E45LL
        && *(void *)&buf[8] == 0x4374656B63615065LL
        && *(void *)&buf[15] == 0x5D315B746E756F43LL)
      {
        goto LABEL_267;
      }

      if (*(void *)buf == 0x6369766544646E45LL
        && *(void *)&buf[8] == 0x4374656B63615065LL
        && *(void *)&buf[15] == 0x5D325B746E756F43LL)
      {
        goto LABEL_268;
      }

      if (*(void *)buf == 0x6369766544646E45LL
        && *(void *)&buf[8] == 0x4374656B63615065LL
        && *(void *)&buf[15] == 0x5D335B746E756F43LL)
      {
        goto LABEL_269;
      }

      if (*(void *)buf == 0x6369766544646E45LL
        && *(void *)&buf[8] == 0x4374656B63615065LL
        && *(void *)&buf[15] == 0x5D345B746E756F43LL)
      {
        goto LABEL_270;
      }

LABEL_287:
      if (*(void *)buf == 0x6369766544646E45LL
        && *(void *)&buf[8] == 0x4374656B63615065LL
        && *(void *)&buf[15] == 0x5D375B746E756F43LL)
      {
        goto LABEL_342;
      }

      if (*(void *)buf == 0x6369766544646E45LL
        && *(void *)&buf[8] == 0x4374656B63615065LL
        && *(void *)&buf[15] == 0x5D385B746E756F43LL)
      {
        goto LABEL_344;
      }

      if (*(void *)buf == 0x6369766544646E45LL
        && *(void *)&buf[8] == 0x4374656B63615065LL
        && *(void *)&buf[15] == 0x5D375B746E756F43LL)
      {
        goto LABEL_342;
      }

      if (*(void *)buf == 0x6369766544646E45LL
        && *(void *)&buf[8] == 0x4374656B63615065LL
        && *(void *)&buf[15] == 0x5D385B746E756F43LL)
      {
        goto LABEL_344;
      }

LABEL_322:
      unsigned int v94 = (uint64_t *)buf;
      goto LABEL_323;
    }

    if (*(void *)&buf[8] != 23LL) {
      goto LABEL_330;
    }
    if (**(void **)buf == 0x6369766544646E45LL
      && *(void *)(*(void *)buf + 8LL) == 0x4374656B63615065LL
      && *(void *)(*(void *)buf + 15LL) == 0x5D305B746E756F43LL)
    {
LABEL_266:
      int v130 = sub_1000BE984(4, uint64);
      goto LABEL_338;
    }

    if (**(void **)buf == 0x6369766544646E45LL
      && *(void *)(*(void *)buf + 8LL) == 0x4374656B63615065LL
      && *(void *)(*(void *)buf + 15LL) == 0x5D315B746E756F43LL)
    {
LABEL_267:
      unsigned int v127 = sub_1000BE984(4, uint64);
      goto LABEL_338;
    }

    if (**(void **)buf == 0x6369766544646E45LL
      && *(void *)(*(void *)buf + 8LL) == 0x4374656B63615065LL
      && *(void *)(*(void *)buf + 15LL) == 0x5D325B746E756F43LL)
    {
LABEL_268:
      unsigned int v125 = sub_1000BE984(4, uint64);
      goto LABEL_338;
    }

    if (**(void **)buf == 0x6369766544646E45LL
      && *(void *)(*(void *)buf + 8LL) == 0x4374656B63615065LL
      && *(void *)(*(void *)buf + 15LL) == 0x5D335B746E756F43LL)
    {
LABEL_269:
      int v121 = sub_1000BE984(4, uint64);
      goto LABEL_338;
    }

    if (**(void **)buf == 0x6369766544646E45LL
      && *(void *)(*(void *)buf + 8LL) == 0x4374656B63615065LL
      && *(void *)(*(void *)buf + 15LL) == 0x5D345B746E756F43LL)
    {
LABEL_270:
      int v117 = sub_1000BE984(4, uint64);
      goto LABEL_338;
    }

    if ((v136 & 0x80) == 0)
    {
      if (v136 != 23) {
        goto LABEL_330;
      }
      goto LABEL_250;
    }

    if (**(void **)buf == 0x6369766544646E45LL
      && *(void *)(*(void *)buf + 8LL) == 0x4374656B63615065LL
      && *(void *)(*(void *)buf + 15LL) == 0x5D355B746E756F43LL)
    {
LABEL_303:
      unsigned int v115 = sub_1000BE984(4, uint64);
      goto LABEL_338;
    }

    if (**(void **)buf == 0x6369766544646E45LL
      && *(void *)(*(void *)buf + 8LL) == 0x4374656B63615065LL
      && *(void *)(*(void *)buf + 15LL) == 0x5D365B746E756F43LL)
    {
LABEL_304:
      unsigned int v113 = sub_1000BE984(4, uint64);
      goto LABEL_338;
    }

    if ((v136 & 0x80) == 0)
    {
      if (v136 != 23) {
        goto LABEL_330;
      }
      goto LABEL_287;
    }

    if (**(void **)buf == 0x6369766544646E45LL
      && *(void *)(*(void *)buf + 8LL) == 0x4374656B63615065LL
      && *(void *)(*(void *)buf + 15LL) == 0x5D375B746E756F43LL)
    {
LABEL_342:
      int v111 = sub_1000BE984(4, uint64);
      goto LABEL_338;
    }

    unsigned int v94 = *(uint64_t **)buf;
    if (**(void **)buf == 0x6369766544646E45LL
      && *(void *)(*(void *)buf + 8LL) == 0x4374656B63615065LL
      && *(void *)(*(void *)buf + 15LL) == 0x5D385B746E756F43LL)
    {
LABEL_344:
      int v109 = sub_1000BE984(4, uint64);
      goto LABEL_338;
    }

    if ((v136 & 0x80) == 0)
    {
      if (v136 != 23) {
        goto LABEL_330;
      }
      goto LABEL_322;
    }

      char v92 = (uint64_t *)buf;
      goto LABEL_323;
    }

    if (*(void *)&buf[8] != 23LL) {
      goto LABEL_330;
    }
    if (**(void **)buf == 0x6369766544646E45LL
      && *(void *)(*(void *)buf + 8LL) == 0x4374656B63615065LL
      && *(void *)(*(void *)buf + 15LL) == 0x5D305B746E756F43LL)
    {
LABEL_266:
      unsigned int v125 = sub_1000BE984(4, uint64);
      goto LABEL_338;
    }

    if (**(void **)buf == 0x6369766544646E45LL
      && *(void *)(*(void *)buf + 8LL) == 0x4374656B63615065LL
      && *(void *)(*(void *)buf + 15LL) == 0x5D315B746E756F43LL)
    {
LABEL_267:
      unsigned int v122 = sub_1000BE984(4, uint64);
      goto LABEL_338;
    }

    if (**(void **)buf == 0x6369766544646E45LL
      && *(void *)(*(void *)buf + 8LL) == 0x4374656B63615065LL
      && *(void *)(*(void *)buf + 15LL) == 0x5D325B746E756F43LL)
    {
LABEL_268:
      int v120 = sub_1000BE984(4, uint64);
      goto LABEL_338;
    }

    if (**(void **)buf == 0x6369766544646E45LL
      && *(void *)(*(void *)buf + 8LL) == 0x4374656B63615065LL
      && *(void *)(*(void *)buf + 15LL) == 0x5D335B746E756F43LL)
    {
LABEL_269:
      int v116 = sub_1000BE984(4, uint64);
      goto LABEL_338;
    }

    if (**(void **)buf == 0x6369766544646E45LL
      && *(void *)(*(void *)buf + 8LL) == 0x4374656B63615065LL
      && *(void *)(*(void *)buf + 15LL) == 0x5D345B746E756F43LL)
    {
LABEL_270:
      unsigned int v112 = sub_1000BE984(4, uint64);
      goto LABEL_338;
    }

    if ((v130 & 0x80) == 0)
    {
      if (v130 != 23) {
        goto LABEL_330;
      }
      goto LABEL_250;
    }

    if (**(void **)buf == 0x6369766544646E45LL
      && *(void *)(*(void *)buf + 8LL) == 0x4374656B63615065LL
      && *(void *)(*(void *)buf + 15LL) == 0x5D355B746E756F43LL)
    {
LABEL_303:
      int v110 = sub_1000BE984(4, uint64);
      goto LABEL_338;
    }

    if (**(void **)buf == 0x6369766544646E45LL
      && *(void *)(*(void *)buf + 8LL) == 0x4374656B63615065LL
      && *(void *)(*(void *)buf + 15LL) == 0x5D365B746E756F43LL)
    {
LABEL_304:
      int v108 = sub_1000BE984(4, uint64);
      goto LABEL_338;
    }

    if ((v130 & 0x80) == 0)
    {
      if (v130 != 23) {
        goto LABEL_330;
      }
      goto LABEL_287;
    }

    if (**(void **)buf == 0x6369766544646E45LL
      && *(void *)(*(void *)buf + 8LL) == 0x4374656B63615065LL
      && *(void *)(*(void *)buf + 15LL) == 0x5D375B746E756F43LL)
    {
LABEL_342:
      unsigned int v106 = sub_1000BE984(4, uint64);
      goto LABEL_338;
    }

    char v92 = *(uint64_t **)buf;
    if (**(void **)buf == 0x6369766544646E45LL
      && *(void *)(*(void *)buf + 8LL) == 0x4374656B63615065LL
      && *(void *)(*(void *)buf + 15LL) == 0x5D385B746E756F43LL)
    {
LABEL_344:
      std::string::size_type v104 = sub_1000BE984(4, uint64);
      goto LABEL_338;
    }

    if ((v130 & 0x80) == 0)
    {
      if (v130 != 23) {
        goto LABEL_330;
      }
      goto LABEL_322;
    }

LABEL_323:
    uint64_t v97 = *v94;
    uint64_t v98 = v94[1];
    uint64_t v99 = *(uint64_t *)((char *)v94 + 15);
    if (v97 == 0x6369766544646E45LL && v98 == 0x4374656B63615065LL && v99 == 0x5D395B746E756F43LL)
    {
      unsigned int v106 = sub_1000BE984(4, uint64);
      goto LABEL_338;
    }

    uint64_t v95 = *v92;
    unint64_t v96 = v92[1];
    uint64_t v97 = *(uint64_t *)((char *)v92 + 15);
    if (v95 == 0x6369766544646E45LL && v96 == 0x4374656B63615065LL && v97 == 0x5D395B746E756F43LL)
    {
      LODWORD(v102) = sub_1000BE984(4, uint64);
      goto LABEL_338;
    }

LABEL_330:
    if (sub_1000B55AC(buf, "EndDevicePacketCount[10]"))
    {
      unsigned int v133 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(buf, "EndDevicePacketCount[11]"))
    {
      int v129 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(buf, "EndDevicePacketCount[12]"))
    {
      unsigned int v122 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(buf, "EndDevicePacketCount[13]"))
    {
      unsigned int v118 = sub_1000BE984(4, uint64);
    }

    if (sub_1000B55AC(buf, "EndDevicePacketCount[10]"))
    {
      int v128 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(buf, "EndDevicePacketCount[11]"))
    {
      unsigned int v124 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(buf, "EndDevicePacketCount[12]"))
    {
      int v117 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(buf, "EndDevicePacketCount[13]"))
    {
      unsigned int v113 = sub_1000BE984(4, uint64);
    }

void sub_1000C06F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int a18, int a19, int a20, int a21, int a22, int a23, int a24, int a25, int a26, int a27, int a28, int a29, int a30, int a31, int a32, int a33, int a34, int a35, int a36, int a37, void *a38, void *__p, uint64_t a40, int a41, __int16 a42, char a43, char a44, uint64_t a45, int a46, int a47, int a48, int a49, int a50,int a51,int a52,int a53,int a54,int a55,int a56,int a57,int a58,int a59)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000C0990(void *a1, void *a2)
{
  id v3 = a1;
  id v29 = a2;
  memset(v36, 0, sizeof(v36));
  id v31 = v3;
  __int16 v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
  {
    size_t count = xpc_array_get_count(v3);
    double v8 = sub_1000160F4("com.apple.wpantund.awd", "default");
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = count;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "CAMetrics : LQIHistogram array with size %ld.",  (uint8_t *)&buf,  0xCu);
    }

    if (count)
    {
      size_t v10 = 0LL;
      float v6 = 0LL;
      do
      {
        xpc_object_t dictionary = xpc_array_get_dictionary(v3, v10);
        int v12 = (void *)objc_claimAutoreleasedReturnValue(dictionary);

        float v6 = v12;
        string = (char *)xpc_dictionary_get_string(v12, "key");
        sub_10000AC00(&buf, string);
        unsigned int uint64 = xpc_dictionary_get_uint64(v12, "value");
        std::string::size_type v15 = std::string::find(&buf, 91, 0LL);
        std::string::size_type v16 = std::string::find(&buf, 93, 0LL);
        uint64_t size = buf.__r_.__value_.__s.__size_;
        unsigned __int8 v18 = buf.__r_.__value_.__s.__size_;
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t size = buf.__r_.__value_.__l.__size_;
        }
        unint64_t v20 = (std::string *)((char *)p_buf + size);
        if (size >= 13)
        {
          int v21 = p_buf;
          do
          {
            int v22 = (std::string *)memchr(v21, 82, size - 12);
            if (!v22) {
              break;
            }
            if (v22->__r_.__value_.__r.__words[0] == 0x74656B6361507852LL
              && *(std::string::size_type *)((char *)v22->__r_.__value_.__r.__words + 5) == 0x746E756F4374656BLL)
            {
              goto LABEL_23;
            }

            int v21 = (std::string *)((char *)&v22->__r_.__value_.__l.__data_ + 1);
            uint64_t size = (char *)v20 - (char *)v21;
          }

          while ((char *)v20 - (char *)v21 > 12);
        }

        int v22 = v20;
LABEL_23:
        if (v22 != v20 && v22 == p_buf && v15 != -1LL && v16 != -1LL)
        {
          if (!v16)
          {
            __break(0x5515u);
LABEL_44:
            __break(0x5512u);
          }

          std::string::basic_string(&__str, &buf, v15 + 1, v16 - 1, (std::allocator<char> *)&v34);
          unsigned __int8 v24 = std::stoi(&__str, 0LL, 10);
          if ((v24 & 0xC0) == 0)
          {
            int v25 = sub_1000BE984(4, uint64);
            if (v24 >= 0x40u) {
              goto LABEL_44;
            }
            *((_DWORD *)v36 + v24) = v25;
          }

          unsigned __int8 v18 = buf.__r_.__value_.__s.__size_;
        }

        if ((v18 & 0x80) != 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        ++v10;
        id v3 = v31;
      }

      while (v10 != count);
    }

    else
    {
      float v6 = 0LL;
    }

    for (uint64_t i = 0LL; i != 256; i += 4LL)
    {
      char v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)((char *)v36 + i)));
      [v32 addObject:v27];
    }

    [v29 setObject:v32 forKey:@"packet_lqi_histogram"];
    uint64_t v7 = 0LL;
  }

  else
  {
    id v4 = sub_1000160F4("com.apple.wpantund.awd", "default");
    unint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_10020D53C();
    }

    float v6 = 0LL;
    uint64_t v7 = 1LL;
  }

  return v7;
}

void sub_1000C0D48( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
}

size_t sub_1000C0DF8(void *a1, void *a2)
{
  id v3 = a1;
  id v87 = a2;
  unint64_t v103 = 0LL;
  __int128 v101 = 0u;
  __int128 v102 = 0u;
  __int128 v99 = 0u;
  __int128 v100 = 0u;
  __int128 v97 = 0u;
  __int128 v98 = 0u;
  unint64_t v96 = 0LL;
  __int128 v94 = 0u;
  __int128 v95 = 0u;
  __int128 v92 = 0u;
  __int128 v93 = 0u;
  __int128 v90 = 0u;
  __int128 v91 = 0u;
  xpc_type_t type = xpc_get_type(v3);
  unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  float v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  if (type == (xpc_type_t)&_xpc_type_array)
  {
    size_t count = xpc_array_get_count(v3);
    unint64_t v11 = sub_1000160F4("com.apple.wpantund.awd", "default");
    int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = count;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "CAMetrics : MAC-Packet-Size-Histogram array with size %ld.",  (uint8_t *)&buf,  0xCu);
    }

    if (!count)
    {
      uint64_t v9 = 0LL;
      goto LABEL_282;
    }

    size_t v13 = 0LL;
    uint64_t v9 = 0LL;
    unsigned int v68 = v103;
    int v70 = HIDWORD(v102);
    unsigned int v72 = DWORD2(v102);
    unsigned int v74 = DWORD1(v102);
    int v75 = v102;
    int v83 = v101;
    int v85 = HIDWORD(v100);
    unint64_t v66 = __PAIR64__(HIDWORD(v103), HIDWORD(v96));
    unsigned int v67 = v96;
    int v69 = HIDWORD(v95);
    unsigned int v71 = DWORD2(v95);
    unsigned int v73 = DWORD1(v95);
    int v76 = v95;
    int v77 = HIDWORD(v101);
    int v78 = HIDWORD(v94);
    unsigned int v79 = DWORD2(v101);
    unsigned int v80 = DWORD2(v94);
    unsigned int v81 = DWORD1(v101);
    unsigned int v82 = DWORD1(v94);
    int v84 = v94;
    int v86 = HIDWORD(v93);
    while (1)
    {
      xpc_object_t dictionary = xpc_array_get_dictionary(v3, v13);
      std::string::size_type v15 = (void *)objc_claimAutoreleasedReturnValue(dictionary);

      uint64_t v9 = v15;
      string = (char *)xpc_dictionary_get_string(v15, "key");
      sub_10000AC00(&buf, string);
      unsigned int uint64 = xpc_dictionary_get_uint64(v15, "value");
      if ((v89 & 0x80000000) == 0)
      {
        if (v89 != 16) {
          goto LABEL_108;
        }
        if ((void)buf == 0x74656B6361507854LL && *((void *)&buf + 1) == 0x5D305B746E756F43LL) {
          goto LABEL_66;
        }
        if ((void)buf == 0x74656B6361507854LL && *((void *)&buf + 1) == 0x5D315B746E756F43LL) {
          goto LABEL_67;
        }
        if ((void)buf == 0x74656B6361507854LL && *((void *)&buf + 1) == 0x5D325B746E756F43LL) {
          goto LABEL_68;
        }
        if ((void)buf == 0x74656B6361507854LL && *((void *)&buf + 1) == 0x5D335B746E756F43LL) {
          goto LABEL_69;
        }
        if ((void)buf == 0x74656B6361507854LL && *((void *)&buf + 1) == 0x5D345B746E756F43LL) {
          goto LABEL_70;
        }
        goto LABEL_56;
      }

      if (*((void *)&buf + 1) != 16LL) {
        goto LABEL_108;
      }
      if (*(void *)buf == 0x74656B6361507854LL && *(void *)(buf + 8) == 0x5D305B746E756F43LL)
      {
LABEL_66:
        LODWORD(v97) = sub_1000BE984(4, uint64);
        goto LABEL_143;
      }

      if (*(void *)buf == 0x74656B6361507854LL && *(void *)(buf + 8) == 0x5D315B746E756F43LL)
      {
LABEL_67:
        DWORD1(v97) = sub_1000BE984(4, uint64);
        goto LABEL_143;
      }

      if (*(void *)buf == 0x74656B6361507854LL && *(void *)(buf + 8) == 0x5D325B746E756F43LL)
      {
LABEL_68:
        DWORD2(v97) = sub_1000BE984(4, uint64);
        goto LABEL_143;
      }

      if (*(void *)buf == 0x74656B6361507854LL && *(void *)(buf + 8) == 0x5D335B746E756F43LL)
      {
LABEL_69:
        HIDWORD(v97) = sub_1000BE984(4, uint64);
        goto LABEL_143;
      }

      if (*(void *)buf == 0x74656B6361507854LL && *(void *)(buf + 8) == 0x5D345B746E756F43LL)
      {
LABEL_70:
        LODWORD(v98) = sub_1000BE984(4, uint64);
        goto LABEL_143;
      }

      if ((v89 & 0x80) == 0) {
        break;
      }
      if (*(void *)buf == 0x74656B6361507854LL && *(void *)(buf + 8) == 0x5D355B746E756F43LL)
      {
LABEL_91:
        DWORD1(v98) = sub_1000BE984(4, uint64);
        goto LABEL_143;
      }

      if (*(void *)buf == 0x74656B6361507854LL && *(void *)(buf + 8) == 0x5D365B746E756F43LL)
      {
LABEL_92:
        DWORD2(v98) = sub_1000BE984(4, uint64);
        goto LABEL_143;
      }

      if ((v89 & 0x80) == 0)
      {
        if (v89 != 16) {
          goto LABEL_108;
        }
LABEL_81:
        if ((void)buf == 0x74656B6361507854LL && *((void *)&buf + 1) == 0x5D375B746E756F43LL) {
          goto LABEL_126;
        }
        if ((void)buf == 0x74656B6361507854LL && *((void *)&buf + 1) == 0x5D385B746E756F43LL) {
          goto LABEL_131;
        }
LABEL_103:
        p___int128 buf = (uint64_t *)&buf;
        goto LABEL_104;
      }

      if (*(void *)buf == 0x74656B6361507854LL && *(void *)(buf + 8) == 0x5D375B746E756F43LL)
      {
LABEL_126:
        HIDWORD(v98) = sub_1000BE984(4, uint64);
        goto LABEL_143;
      }

      p___int128 buf = (uint64_t *)buf;
      if (*(void *)buf == 0x74656B6361507854LL && *(void *)(buf + 8) == 0x5D385B746E756F43LL)
      {
LABEL_131:
        LODWORD(v99) = sub_1000BE984(4, uint64);
        goto LABEL_143;
      }

      if ((v89 & 0x80) == 0)
      {
        if (v89 != 16) {
          goto LABEL_108;
        }
        goto LABEL_103;
      }

LABEL_108:
      if (sub_1000B55AC(&buf, "TxPacketCount[10]"))
      {
        DWORD2(v99) = sub_1000BE984(4, uint64);
      }

      else if (sub_1000B55AC(&buf, "TxPacketCount[11]"))
      {
        HIDWORD(v99) = sub_1000BE984(4, uint64);
      }

      else if (sub_1000B55AC(&buf, "TxPacketCount[12]"))
      {
        LODWORD(v100) = sub_1000BE984(4, uint64);
      }

      else if (sub_1000B55AC(&buf, "TxPacketCount[13]"))
      {
        DWORD1(v100) = sub_1000BE984(4, uint64);
      }

      else if (sub_1000B55AC(&buf, "TxPacketCount[14]"))
      {
        DWORD2(v100) = sub_1000BE984(4, uint64);
      }

      else if (sub_1000B55AC(&buf, "TxPacketCount[15]"))
      {
        int v85 = sub_1000BE984(4, uint64);
      }

      else if (sub_1000B55AC(&buf, "TxPacketCount[16]"))
      {
        int v83 = sub_1000BE984(4, uint64);
      }

      else if (sub_1000B55AC(&buf, "TxPacketCount[17]"))
      {
        unsigned int v81 = sub_1000BE984(4, uint64);
      }

      else if (sub_1000B55AC(&buf, "TxPacketCount[18]"))
      {
        unsigned int v79 = sub_1000BE984(4, uint64);
      }

      else if (sub_1000B55AC(&buf, "TxPacketCount[19]"))
      {
        int v77 = sub_1000BE984(4, uint64);
      }

      else if (sub_1000B55AC(&buf, "TxPacketCount[20]"))
      {
        int v75 = sub_1000BE984(4, uint64);
      }

      else if (sub_1000B55AC(&buf, "TxPacketCount[21]"))
      {
        unsigned int v74 = sub_1000BE984(4, uint64);
      }

      else if (sub_1000B55AC(&buf, "TxPacketCount[22]"))
      {
        unsigned int v72 = sub_1000BE984(4, uint64);
      }

      else if (sub_1000B55AC(&buf, "TxPacketCount[23]"))
      {
        int v70 = sub_1000BE984(4, uint64);
      }

      else if (sub_1000B55AC(&buf, "TxPacketCount[24]"))
      {
        unsigned int v68 = sub_1000BE984(4, uint64);
      }

      else if (sub_1000B55AC(&buf, "TxPacketCount[25]"))
      {
        HIDWORD(v66) = sub_1000BE984(4, uint64);
      }

      if (sub_1000B55AC(&buf, "DirectRetry[10]"))
      {
        int v85 = sub_1000BE984(4, uint64);
      }

      else if (sub_1000B55AC(&buf, "DirectRetry[11]"))
      {
        unsigned int v82 = sub_1000BE984(4, uint64);
      }

      else if (sub_1000B55AC(&buf, "DirectRetry[12]"))
      {
        int v77 = sub_1000BE984(4, uint64);
      }

      else if (sub_1000B55AC(&buf, "DirectRetry[13]"))
      {
        unsigned int v74 = sub_1000BE984(4, uint64);
      }

      else if (sub_1000B55AC(&buf, "DirectRetry[14]"))
      {
        unsigned int v71 = sub_1000BE984(4, uint64);
      }

      else if (sub_1000B55AC(&buf, "DirectRetry[15]"))
      {
        unsigned int v68 = sub_1000BE984(4, uint64);
      }

          unint64_t v20 = *(void *)&__p[8];
        }

        if (v20 == 13)
        {
          if (**(void **)__p == 0x6C6175516B6E694CLL && *(void *)(*(void *)__p + 5LL) == 0x6E497974696C6175LL)
          {
LABEL_160:
            uint64_t v56 = xpc_dictionary_get_uint64(v17, "value");
            *((_BYTE *)&unk_1002CA1D0 + v15 + 302) = v56;
            goto LABEL_185;
          }

  uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_rxErrorAborted));
  [v3 setObject:v56 forKey:@"rx_error_aborted"];

  double v8 = self->_has;
  if ((*(_DWORD *)&v8 & 0x1000000) == 0)
  {
LABEL_51:
    if ((*(_DWORD *)&v8 & 0x20000000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_110;
  }

  PBDataWriterWriteUint32Field(v7, self->_rxErrorAborted, 47LL);
  float v6 = self->_has;
  if ((*(_DWORD *)&v6 & 0x1000000) == 0)
  {
LABEL_51:
    if ((*(_DWORD *)&v6 & 0x20000000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_110;
  }

  v4[20] = self->_rxErrorAborted;
  *((void *)v4 + 31) |= 0x40000uLL;
  float v6 = self->_has;
  if ((*(_DWORD *)&v6 & 0x1000000) == 0)
  {
LABEL_51:
    if ((*(_DWORD *)&v6 & 0x20000000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_110;
  }

  *((_DWORD *)v6 + 31) = self->_rxErrorInvalidLength;
  v6[31] |= 0x20000000uLL;
  size_t v10 = self->_has;
  if ((*(_DWORD *)&v10 & 0x4000000) == 0)
  {
LABEL_51:
    if ((*(_DWORD *)&v10 & 0x400000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_110;
  }

  int v22 = 0LL;
  if ((*(_DWORD *)&v4 & 0x400000) != 0)
  {
LABEL_56:
    char v23 = 2654435761LL * self->_rxErrorAckFailedRadioState;
    if ((*(_DWORD *)&v4 & 0x200000) != 0) {
      goto LABEL_57;
    }
    goto LABEL_110;
  }

  self->_rxErrorInvalidFcs = v5[29];
  *(void *)&self->_has |= 0x8000000uLL;
  uint64_t v9 = *((void *)v5 + 31);
  if ((v9 & 0x2000000) == 0)
  {
LABEL_55:
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_110;
  }

    if (sub_1000B55AC(&buf, "TxPacketCount[10]"))
    {
      DWORD2(v97) = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(&buf, "TxPacketCount[11]"))
    {
      HIDWORD(v97) = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(&buf, "TxPacketCount[12]"))
    {
      LODWORD(v98) = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(&buf, "TxPacketCount[13]"))
    {
      DWORD1(v98) = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(&buf, "TxPacketCount[14]"))
    {
      DWORD2(v98) = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(&buf, "TxPacketCount[15]"))
    {
      int v84 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(&buf, "TxPacketCount[16]"))
    {
      unsigned int v82 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(&buf, "TxPacketCount[17]"))
    {
      unsigned int v80 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(&buf, "TxPacketCount[18]"))
    {
      int v78 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(&buf, "TxPacketCount[19]"))
    {
      int v76 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(&buf, "TxPacketCount[20]"))
    {
      unsigned int v74 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(&buf, "TxPacketCount[21]"))
    {
      unsigned int v73 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(&buf, "TxPacketCount[22]"))
    {
      unsigned int v71 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(&buf, "TxPacketCount[23]"))
    {
      int v69 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(&buf, "TxPacketCount[24]"))
    {
      unsigned int v67 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(&buf, "TxPacketCount[25]"))
    {
      char v65 = sub_1000BE984(4, uint64);
    }

    if (sub_1000B55AC(&buf, "DirectRetry[10]"))
    {
      int v83 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(&buf, "DirectRetry[11]"))
    {
      unsigned int v80 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(&buf, "DirectRetry[12]"))
    {
      int v75 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(&buf, "DirectRetry[13]"))
    {
      unsigned int v72 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(&buf, "DirectRetry[14]"))
    {
      int v69 = sub_1000BE984(4, uint64);
    }

    else if (sub_1000B55AC(&buf, "DirectRetry[15]"))
    {
      unint64_t v66 = sub_1000BE984(4, uint64);
    }

        -[AWDCountersThreadMleS setBetterPartitionAttachAttempts:]( v10,  "setBetterPartitionAttachAttempts:",  sub_1000BE984(3, uint64));
      }

LABEL_143:
      if ((v89 & 0x80000000) == 0)
      {
        if (v89 != 16) {
          goto LABEL_242;
        }
        if ((void)buf == 0x74656B6361507852LL && *((void *)&buf + 1) == 0x5D305B746E756F43LL) {
          goto LABEL_200;
        }
        if ((void)buf == 0x74656B6361507852LL && *((void *)&buf + 1) == 0x5D315B746E756F43LL) {
          goto LABEL_201;
        }
        if ((void)buf == 0x74656B6361507852LL && *((void *)&buf + 1) == 0x5D325B746E756F43LL) {
          goto LABEL_202;
        }
        if ((void)buf == 0x74656B6361507852LL && *((void *)&buf + 1) == 0x5D335B746E756F43LL) {
          goto LABEL_203;
        }
        if ((void)buf == 0x74656B6361507852LL && *((void *)&buf + 1) == 0x5D345B746E756F43LL) {
          goto LABEL_204;
        }
LABEL_190:
        if ((void)buf == 0x74656B6361507852LL && *((void *)&buf + 1) == 0x5D355B746E756F43LL) {
          goto LABEL_225;
        }
        if ((void)buf == 0x74656B6361507852LL && *((void *)&buf + 1) == 0x5D365B746E756F43LL) {
          goto LABEL_226;
        }
LABEL_215:
        if ((void)buf == 0x74656B6361507852LL && *((void *)&buf + 1) == 0x5D375B746E756F43LL) {
          goto LABEL_260;
        }
        if ((void)buf == 0x74656B6361507852LL && *((void *)&buf + 1) == 0x5D385B746E756F43LL) {
          goto LABEL_265;
        }
        goto LABEL_237;
      }

      if (*((void *)&buf + 1) != 16LL) {
        goto LABEL_242;
      }
      if (*(void *)buf == 0x74656B6361507852LL && *(void *)(buf + 8) == 0x5D305B746E756F43LL)
      {
LABEL_200:
        LODWORD(v90) = sub_1000BE984(4, uint64);
        goto LABEL_277;
      }

      if (*(void *)buf == 0x74656B6361507852LL && *(void *)(buf + 8) == 0x5D315B746E756F43LL)
      {
LABEL_201:
        DWORD1(v90) = sub_1000BE984(4, uint64);
        goto LABEL_277;
      }

      if (*(void *)buf == 0x74656B6361507852LL && *(void *)(buf + 8) == 0x5D325B746E756F43LL)
      {
LABEL_202:
        DWORD2(v90) = sub_1000BE984(4, uint64);
        goto LABEL_277;
      }

      if (*(void *)buf == 0x74656B6361507852LL && *(void *)(buf + 8) == 0x5D335B746E756F43LL)
      {
LABEL_203:
        HIDWORD(v90) = sub_1000BE984(4, uint64);
        goto LABEL_277;
      }

      if (*(void *)buf == 0x74656B6361507852LL && *(void *)(buf + 8) == 0x5D345B746E756F43LL)
      {
LABEL_204:
        LODWORD(v91) = sub_1000BE984(4, uint64);
        goto LABEL_277;
      }

      if ((v89 & 0x80) == 0)
      {
        if (v89 != 16) {
          goto LABEL_242;
        }
        goto LABEL_190;
      }

      if (*(void *)buf == 0x74656B6361507852LL && *(void *)(buf + 8) == 0x5D355B746E756F43LL)
      {
LABEL_225:
        DWORD1(v91) = sub_1000BE984(4, uint64);
        goto LABEL_277;
      }

      if (*(void *)buf == 0x74656B6361507852LL && *(void *)(buf + 8) == 0x5D365B746E756F43LL)
      {
LABEL_226:
        DWORD2(v91) = sub_1000BE984(4, uint64);
        goto LABEL_277;
      }

      if ((v89 & 0x80) == 0)
      {
        if (v89 != 16) {
          goto LABEL_242;
        }
        goto LABEL_215;
      }

      if (*(void *)buf == 0x74656B6361507852LL && *(void *)(buf + 8) == 0x5D375B746E756F43LL)
      {
LABEL_260:
        HIDWORD(v91) = sub_1000BE984(4, uint64);
        goto LABEL_277;
      }

      uint64_t v57 = (uint64_t *)buf;
      if (*(void *)buf == 0x74656B6361507852LL && *(void *)(buf + 8) == 0x5D385B746E756F43LL)
      {
LABEL_265:
        LODWORD(v92) = sub_1000BE984(4, uint64);
        goto LABEL_277;
      }

      if (v89 < 0) {
        goto LABEL_238;
      }
      if (v89 != 16) {
        goto LABEL_242;
      }
LABEL_237:
      uint64_t v57 = (uint64_t *)&buf;
LABEL_238:
      uint64_t v59 = *v57;
      uint64_t v60 = v57[1];
      if (v59 != 0x74656B6361507852LL || v60 != 0x5D395B746E756F43LL)
      {
LABEL_242:
        if (sub_1000B55AC(&buf, "RxPacketCount[10]"))
        {
          DWORD2(v92) = sub_1000BE984(4, uint64);
        }

        else if (sub_1000B55AC(&buf, "RxPacketCount[11]"))
        {
          HIDWORD(v92) = sub_1000BE984(4, uint64);
        }

        else if (sub_1000B55AC(&buf, "RxPacketCount[12]"))
        {
          LODWORD(v93) = sub_1000BE984(4, uint64);
        }

        else if (sub_1000B55AC(&buf, "RxPacketCount[13]"))
        {
          DWORD1(v93) = sub_1000BE984(4, uint64);
        }

        else if (sub_1000B55AC(&buf, "RxPacketCount[14]"))
        {
          DWORD2(v93) = sub_1000BE984(4, uint64);
        }

        else if (sub_1000B55AC(&buf, "RxPacketCount[15]"))
        {
          int v86 = sub_1000BE984(4, uint64);
        }

        else if (sub_1000B55AC(&buf, "RxPacketCount[16]"))
        {
          int v84 = sub_1000BE984(4, uint64);
        }

        else if (sub_1000B55AC(&buf, "RxPacketCount[17]"))
        {
          unsigned int v82 = sub_1000BE984(4, uint64);
        }

        else if (sub_1000B55AC(&buf, "RxPacketCount[18]"))
        {
          unsigned int v80 = sub_1000BE984(4, uint64);
        }

        else if (sub_1000B55AC(&buf, "RxPacketCount[19]"))
        {
          int v78 = sub_1000BE984(4, uint64);
        }

        else if (sub_1000B55AC(&buf, "RxPacketCount[20]"))
        {
          int v76 = sub_1000BE984(4, uint64);
        }

        else if (sub_1000B55AC(&buf, "RxPacketCount[21]"))
        {
          unsigned int v73 = sub_1000BE984(4, uint64);
        }

        else if (sub_1000B55AC(&buf, "RxPacketCount[22]"))
        {
          unsigned int v71 = sub_1000BE984(4, uint64);
        }

        else if (sub_1000B55AC(&buf, "RxPacketCount[23]"))
        {
          int v69 = sub_1000BE984(4, uint64);
        }

        else if (sub_1000B55AC(&buf, "RxPacketCount[24]"))
        {
          unsigned int v67 = sub_1000BE984(4, uint64);
        }

        else if (sub_1000B55AC(&buf, "RxPacketCount[25]"))
        {
          LODWORD(v66) = sub_1000BE984(4, uint64);
        }

        goto LABEL_277;
      }

      DWORD1(v92) = sub_1000BE984(4, uint64);
LABEL_277:
      if (v89 < 0) {
        operator delete((void *)buf);
      }
      if (count == ++v13)
      {
        size_t count = 0LL;
        unint64_t v103 = __PAIR64__(HIDWORD(v66), v68);
        HIDWORD(v102) = v70;
        LODWORD(v102) = v75;
        *(void *)((char *)&v102 + 4) = __PAIR64__(v72, v74);
        HIDWORD(v101) = v77;
        LODWORD(v101) = v83;
        *(void *)((char *)&v101 + 4) = __PAIR64__(v79, v81);
        HIDWORD(v100) = v85;
        unint64_t v96 = __PAIR64__(v66, v67);
        HIDWORD(v95) = v69;
        LODWORD(v95) = v76;
        *(void *)((char *)&v95 + 4) = __PAIR64__(v71, v73);
        HIDWORD(v94) = v78;
        LODWORD(v94) = v84;
        *(void *)((char *)&v94 + 4) = __PAIR64__(v80, v82);
        HIDWORD(v93) = v86;
        goto LABEL_282;
      }
    }

    if (v89 != 16) {
      goto LABEL_108;
    }
LABEL_56:
    if ((void)buf == 0x74656B6361507854LL && *((void *)&buf + 1) == 0x5D355B746E756F43LL) {
      goto LABEL_91;
    }
    if ((void)buf == 0x74656B6361507854LL && *((void *)&buf + 1) == 0x5D365B746E756F43LL) {
      goto LABEL_92;
    }
    goto LABEL_81;
  }

  uint64_t v7 = sub_1000160F4("com.apple.wpantund.awd", "default");
  double v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
    sub_10020D568();
  }

  uint64_t v9 = 0LL;
  size_t count = 1LL;
LABEL_282:
  for (uint64_t i = 0LL; i != 104; i += 4LL)
  {
    uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)((char *)&v90 + i),  v66));
    [v5 addObject:v63];

    unint64_t v64 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)((char *)&v97 + i)));
    [v6 addObject:v64];
  }

  [v87 setObject:v5 forKey:@"rx_packet_count_histogram"];
  [v87 setObject:v6 forKey:@"tx_packet_count_histogram"];

  return count;
}

  __break(0x550Cu);
}

    if ((v87 & 0x80000000) == 0)
    {
      if (v87 != 16) {
        goto LABEL_242;
      }
      if ((void)buf == 0x74656B6361507852LL && *((void *)&buf + 1) == 0x5D305B746E756F43LL) {
        goto LABEL_200;
      }
      if ((void)buf == 0x74656B6361507852LL && *((void *)&buf + 1) == 0x5D315B746E756F43LL) {
        goto LABEL_201;
      }
      if ((void)buf == 0x74656B6361507852LL && *((void *)&buf + 1) == 0x5D325B746E756F43LL) {
        goto LABEL_202;
      }
      if ((void)buf == 0x74656B6361507852LL && *((void *)&buf + 1) == 0x5D335B746E756F43LL) {
        goto LABEL_203;
      }
      if ((void)buf == 0x74656B6361507852LL && *((void *)&buf + 1) == 0x5D345B746E756F43LL) {
        goto LABEL_204;
      }
LABEL_190:
      if ((void)buf == 0x74656B6361507852LL && *((void *)&buf + 1) == 0x5D355B746E756F43LL) {
        goto LABEL_225;
      }
      if ((void)buf == 0x74656B6361507852LL && *((void *)&buf + 1) == 0x5D365B746E756F43LL) {
        goto LABEL_226;
      }
LABEL_215:
      if ((void)buf == 0x74656B6361507852LL && *((void *)&buf + 1) == 0x5D375B746E756F43LL) {
        goto LABEL_260;
      }
      if ((void)buf == 0x74656B6361507852LL && *((void *)&buf + 1) == 0x5D385B746E756F43LL) {
        goto LABEL_265;
      }
LABEL_237:
      uint64_t v55 = (uint64_t *)&buf;
      goto LABEL_238;
    }

    if (*((void *)&buf + 1) != 16LL) {
      goto LABEL_242;
    }
    if (*(void *)buf == 0x74656B6361507852LL && *(void *)(buf + 8) == 0x5D305B746E756F43LL)
    {
LABEL_200:
      LODWORD(v88) = sub_1000BE984(4, uint64);
      goto LABEL_277;
    }

    if (*(void *)buf == 0x74656B6361507852LL && *(void *)(buf + 8) == 0x5D315B746E756F43LL)
    {
LABEL_201:
      DWORD1(v88) = sub_1000BE984(4, uint64);
      goto LABEL_277;
    }

    if (*(void *)buf == 0x74656B6361507852LL && *(void *)(buf + 8) == 0x5D325B746E756F43LL)
    {
LABEL_202:
      DWORD2(v88) = sub_1000BE984(4, uint64);
      goto LABEL_277;
    }

    if (*(void *)buf == 0x74656B6361507852LL && *(void *)(buf + 8) == 0x5D335B746E756F43LL)
    {
LABEL_203:
      HIDWORD(v88) = sub_1000BE984(4, uint64);
      goto LABEL_277;
    }

    if (*(void *)buf == 0x74656B6361507852LL && *(void *)(buf + 8) == 0x5D345B746E756F43LL)
    {
LABEL_204:
      LODWORD(v89) = sub_1000BE984(4, uint64);
      goto LABEL_277;
    }

    if ((v87 & 0x80) == 0)
    {
      if (v87 != 16) {
        goto LABEL_242;
      }
      goto LABEL_190;
    }

    if (*(void *)buf == 0x74656B6361507852LL && *(void *)(buf + 8) == 0x5D355B746E756F43LL)
    {
LABEL_225:
      DWORD1(v89) = sub_1000BE984(4, uint64);
      goto LABEL_277;
    }

    if (*(void *)buf == 0x74656B6361507852LL && *(void *)(buf + 8) == 0x5D365B746E756F43LL)
    {
LABEL_226:
      DWORD2(v89) = sub_1000BE984(4, uint64);
      goto LABEL_277;
    }

    if ((v87 & 0x80) == 0)
    {
      if (v87 != 16) {
        goto LABEL_242;
      }
      goto LABEL_215;
    }

    if (*(void *)buf == 0x74656B6361507852LL && *(void *)(buf + 8) == 0x5D375B746E756F43LL)
    {
LABEL_260:
      HIDWORD(v89) = sub_1000BE984(4, uint64);
      goto LABEL_277;
    }

    uint64_t v55 = (uint64_t *)buf;
    if (*(void *)buf == 0x74656B6361507852LL && *(void *)(buf + 8) == 0x5D385B746E756F43LL)
    {
LABEL_265:
      LODWORD(v90) = sub_1000BE984(4, uint64);
      goto LABEL_277;
    }

    if ((v87 & 0x80) == 0)
    {
      if (v87 != 16) {
        goto LABEL_242;
      }
      goto LABEL_237;
    }

          __break(0x5515u);
LABEL_144:
          __break(0x5512u);
        }

        int v75 = 0;
        unint64_t v20 = (std::string *)((char *)p_buf + size);
LABEL_34:
        char v23 = (std::string *)((char *)p_buf + size);
LABEL_35:
        std::string::size_type v15 = v24;
      }

      else
      {
        int v75 = 0;
        int v19 = 0;
        int v78 = 0;
        unint64_t v20 = (std::string *)((char *)p_buf + size);
        int v21 = (std::string *)((char *)p_buf + size);
        int v22 = (std::string *)((char *)p_buf + size);
        char v23 = (std::string *)((char *)p_buf + size);
      }

      if (size >= 31)
      {
        unsigned int v72 = v19;
        uint64_t v37 = v15;
        uint64_t v38 = size;
        unint64_t v39 = p_buf;
        do
        {
          dispatch_object_t v40 = memchr(v39, 99, v38 - 30);
          if (!v40) {
            break;
          }
          unint64_t v35 = (std::string *)v40;
          if (*v40 == 0x746F745F78656F63LL
            && v40[1] == 0x746E6172675F6C61LL
            && v40[2] == 0x69685F656D69745FLL
            && *(void *)((char *)v40 + 23) == 0x6D6172676F747369LL)
          {
            goto LABEL_52;
          }

          unint64_t v39 = (std::string *)((char *)v40 + 1);
          uint64_t v38 = (char *)v18 - ((char *)&v35->__r_.__value_.__l.__data_ + 1);
        }

        while (v38 > 30);
        unint64_t v35 = (std::string *)((char *)p_buf + size);
LABEL_52:
        char v34 = v35 != v18;
        if (size >= 42)
        {
          unint64_t v44 = p_buf;
          do
          {
            uint64_t v45 = (std::string *)memchr(v44, 99, size - 41);
            if (!v45) {
              break;
            }
            uint64_t v36 = v45;
            if (!memcmp(v45, "coex_aborts_due_to_grant_revokes_histogram", 0x2AuLL)) {
              goto LABEL_59;
            }
            unint64_t v44 = (std::string *)((char *)&v36->__r_.__value_.__l.__data_ + 1);
            uint64_t size = (char *)v18 - ((char *)&v36->__r_.__value_.__l.__data_ + 1);
          }

          while (size > 41);
          uint64_t v36 = v18;
LABEL_59:
          std::string::size_type v15 = v37;
          char v34 = v35 != v18;
          int v19 = v72;
        }

        else
        {
          uint64_t v36 = (std::string *)((char *)p_buf + size);
          std::string::size_type v15 = v37;
          int v19 = v72;
        }
      }

      else
      {
        char v34 = 0;
        unint64_t v35 = (std::string *)((char *)p_buf + size);
        uint64_t v36 = (std::string *)((char *)p_buf + size);
      }

      char v46 = v21 == p_buf && v19;
      if (v46 && v79 != -1LL && v15 != -1LL)
      {
        if (!v15) {
          goto LABEL_143;
        }
        std::string::basic_string(&__str, &buf, v79 + 1, v15 - 1, (std::allocator<char> *)&v84);
        dispatch_object_t v47 = std::stoi(&__str, 0LL, 10);
        if ((v47 & 0xFCu) <= 0x13)
        {
          char v48 = sub_1000BE984(4, uint64);
          __n128 v49 = v47;
          if (v47 >= 0x14u) {
            goto LABEL_144;
          }
          uint64_t v50 = v88;
          goto LABEL_106;
        }

        goto LABEL_107;
      }

      char v51 = v78;
      if (v22 != p_buf) {
        char v51 = 0;
      }
      if (v51 && v79 != -1LL && v15 != -1LL)
      {
        if (!v15) {
          goto LABEL_143;
        }
        std::string::basic_string(&__str, &buf, v79 + 1, v15 - 1, (std::allocator<char> *)&v84);
        unsigned int v52 = std::stoi(&__str, 0LL, 10);
        if ((v52 & 0xFCu) <= 0x13)
        {
          char v48 = sub_1000BE984(4, uint64);
          __n128 v49 = v52;
          if (v52 > 0x13u) {
            goto LABEL_144;
          }
          uint64_t v50 = v89;
          goto LABEL_106;
        }

void sub_1000C1ED0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int a18, int a19, int a20, int a21, int a22, int a23, int a24, int a25, int a26, int a27, int a28, int a29, int a30, void *a31, void *__p, uint64_t a33, int a34, __int16 a35, char a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, int a46, int a47, int a48, int a49, int a50,int a51,int a52,int a53,int a54,int a55,int a56,int a57)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000C2110(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  for (uint64_t i = 0LL; i != 60; i += 4LL)
  {
    id v4 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, *(_DWORD *)((char *)&xmmword_1002D0E00 + i)));
    unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    [v2 addObject:v5];
  }

  [v1 setObject:v2 forKey:@"channel_selections_histogram"];

  return 0LL;
}

void sub_1000C21C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000C21F4(void *a1, void *a2)
{
  id v3 = a1;
  id v30 = a2;
  int v38 = 0;
  memset(v37, 0, sizeof(v37));
  id v32 = v3;
  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
  {
    size_t count = xpc_array_get_count(v3);
    double v8 = sub_1000160F4("com.apple.wpantund.awd", "default");
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = count;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "CAMetrics : TpcFrameTxPowerHist array with size %ld.",  (uint8_t *)&buf,  0xCu);
    }

    if (count)
    {
      size_t v10 = 0LL;
      float v6 = 0LL;
      do
      {
        xpc_object_t dictionary = xpc_array_get_dictionary(v3, v10);
        int v12 = (void *)objc_claimAutoreleasedReturnValue(dictionary);

        float v6 = v12;
        string = (char *)xpc_dictionary_get_string(v12, "key");
        sub_10000AC00(&buf, string);
        unsigned int uint64 = xpc_dictionary_get_uint64(v12, "value");
        std::string::size_type v15 = std::string::find(&buf, 91, 0LL);
        std::string::size_type v16 = std::string::find(&buf, 93, 0LL);
        uint64_t size = buf.__r_.__value_.__s.__size_;
        unsigned __int8 v18 = buf.__r_.__value_.__s.__size_;
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t size = buf.__r_.__value_.__l.__size_;
        }
        unint64_t v20 = (std::string *)((char *)p_buf + size);
        if (size >= 25)
        {
          int v21 = p_buf;
          do
          {
            int v22 = (std::string *)memchr(v21, 84, size - 24);
            if (!v22) {
              break;
            }
            if (v22->__r_.__value_.__r.__words[0] == 0x6D6172463A435054LL
              && v22->__r_.__value_.__l.__size_ == 0x7265776F50785465LL
              && v22->__r_.__value_.__l.__cap_ == 0x6172676F74736948LL
              && v22[1].__r_.__value_.__s.__data_[0] == 109)
            {
              goto LABEL_29;
            }

            int v21 = (std::string *)((char *)&v22->__r_.__value_.__l.__data_ + 1);
            uint64_t size = (char *)v20 - (char *)v21;
          }

          while ((char *)v20 - (char *)v21 > 24);
        }

        int v22 = v20;
LABEL_29:
        if (v22 != v20 && v22 == p_buf && v15 != -1LL && v16 != -1LL)
        {
          if (!v16) {
            __break(0x5515u);
          }
          std::string::basic_string(&__str, &buf, v15 + 1, v16 - 1, (std::allocator<char> *)&v35);
          unsigned int v26 = std::stoi(&__str, 0LL, 10);
          if (v26 <= 0x10) {
            *((_DWORD *)v37 + v26) = sub_1000BE984(4, uint64);
          }
          unsigned __int8 v18 = buf.__r_.__value_.__s.__size_;
        }

        if ((v18 & 0x80) != 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        ++v10;
        id v3 = v32;
      }

      while (v10 != count);
    }

    else
    {
      float v6 = 0LL;
    }

    for (uint64_t i = 0LL; i != 68; i += 4LL)
    {
      __int16 v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)((char *)v37 + i)));
      [v33 addObject:v28];
    }

    [v30 setObject:v33 forKey:@"frame_txpower_histogram"];
    uint64_t v7 = 0LL;
  }

  else
  {
    id v4 = sub_1000160F4("com.apple.wpantund.awd", "default");
    unint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_10020D594();
    }

    float v6 = 0LL;
    uint64_t v7 = 1LL;
  }

  return v7;
}

void sub_1000C25A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
}

uint64_t sub_1000C2658(void *a1, void *a2)
{
  id v3 = a1;
  id v30 = a2;
  int v38 = 0;
  memset(v37, 0, sizeof(v37));
  id v32 = v3;
  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
  {
    size_t count = xpc_array_get_count(v3);
    double v8 = sub_1000160F4("com.apple.wpantund.awd", "default");
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = count;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "CAMetrics : TpcNeighborTxPowerHist array with size %ld.",  (uint8_t *)&buf,  0xCu);
    }

    if (count)
    {
      size_t v10 = 0LL;
      float v6 = 0LL;
      do
      {
        xpc_object_t dictionary = xpc_array_get_dictionary(v3, v10);
        int v12 = (void *)objc_claimAutoreleasedReturnValue(dictionary);

        float v6 = v12;
        string = (char *)xpc_dictionary_get_string(v12, "key");
        sub_10000AC00(&buf, string);
        unsigned int uint64 = xpc_dictionary_get_uint64(v12, "value");
        std::string::size_type v15 = std::string::find(&buf, 91, 0LL);
        std::string::size_type v16 = std::string::find(&buf, 93, 0LL);
        uint64_t size = buf.__r_.__value_.__s.__size_;
        unsigned __int8 v18 = buf.__r_.__value_.__s.__size_;
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t size = buf.__r_.__value_.__l.__size_;
        }
        unint64_t v20 = (std::string *)((char *)p_buf + size);
        if (size >= 28)
        {
          int v21 = p_buf;
          do
          {
            int v22 = (std::string *)memchr(v21, 84, size - 27);
            if (!v22) {
              break;
            }
            if (v22->__r_.__value_.__r.__words[0] == 0x6769654E3A435054LL
              && v22->__r_.__value_.__l.__size_ == 0x6F507854726F6268LL
              && v22->__r_.__value_.__l.__cap_ == 0x6F74736948726577LL
              && LODWORD(v22[1].__r_.__value_.__l.__data_) == 1835102823)
            {
              goto LABEL_29;
            }

            int v21 = (std::string *)((char *)&v22->__r_.__value_.__l.__data_ + 1);
            uint64_t size = (char *)v20 - (char *)v21;
          }

          while ((char *)v20 - (char *)v21 > 27);
        }

        int v22 = v20;
LABEL_29:
        if (v22 != v20 && v22 == p_buf && v15 != -1LL && v16 != -1LL)
        {
          if (!v16) {
            __break(0x5515u);
          }
          std::string::basic_string(&__str, &buf, v15 + 1, v16 - 1, (std::allocator<char> *)&v35);
          unsigned int v26 = std::stoi(&__str, 0LL, 10);
          if (v26 <= 0x10) {
            *((_DWORD *)v37 + v26) = sub_1000BE984(4, uint64);
          }
          unsigned __int8 v18 = buf.__r_.__value_.__s.__size_;
        }

        if ((v18 & 0x80) != 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        ++v10;
        id v3 = v32;
      }

      while (v10 != count);
    }

    else
    {
      float v6 = 0LL;
    }

    for (uint64_t i = 0LL; i != 68; i += 4LL)
    {
      __int16 v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)((char *)v37 + i)));
      [v33 addObject:v28];
    }

    [v30 setObject:v33 forKey:@"nbr_txpower_histogram"];
    uint64_t v7 = 0LL;
  }

  else
  {
    id v4 = sub_1000160F4("com.apple.wpantund.awd", "default");
    unint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_10020D5C0();
    }

    float v6 = 0LL;
    uint64_t v7 = 1LL;
  }

  return v7;
}

void sub_1000C2A10( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
}

uint64_t sub_1000C2AC0(void *a1, void *a2)
{
  id v3 = a1;
  id v28 = a2;
  memset(v35, 0, 76);
  id v30 = v3;
  id v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
  {
    size_t count = xpc_array_get_count(v3);
    double v8 = sub_1000160F4("com.apple.wpantund.awd", "default");
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = count;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "CAMetrics : TpcNeighborEnergySavingsFactorHist array with size %ld.",  (uint8_t *)&buf,  0xCu);
    }

    if (count)
    {
      size_t v10 = 0LL;
      float v6 = 0LL;
      do
      {
        xpc_object_t dictionary = xpc_array_get_dictionary(v3, v10);
        int v12 = (void *)objc_claimAutoreleasedReturnValue(dictionary);

        float v6 = v12;
        string = (char *)xpc_dictionary_get_string(v12, "key");
        sub_10000AC00(&buf, string);
        unsigned int uint64 = xpc_dictionary_get_uint64(v12, "value");
        std::string::size_type v15 = std::string::find(&buf, 91, 0LL);
        std::string::size_type v16 = std::string::find(&buf, 93, 0LL);
        uint64_t size = buf.__r_.__value_.__s.__size_;
        unsigned __int8 v18 = buf.__r_.__value_.__s.__size_;
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t size = buf.__r_.__value_.__l.__size_;
        }
        unint64_t v20 = (std::string *)((char *)p_buf + size);
        if (size >= 40)
        {
          int v21 = p_buf;
          do
          {
            int v22 = (std::string *)memchr(v21, 84, size - 39);
            if (!v22) {
              break;
            }
            char v23 = v22;
            if (!memcmp(v22, "TPC:NeighborEnergySavingsFactorHistogram", 0x28uLL)) {
              goto LABEL_20;
            }
            int v21 = (std::string *)((char *)&v23->__r_.__value_.__l.__data_ + 1);
            uint64_t size = (char *)v20 - ((char *)&v23->__r_.__value_.__l.__data_ + 1);
          }

          while (size > 39);
        }

        char v23 = v20;
LABEL_20:
        if (v23 != v20 && v23 == p_buf && v15 != -1LL && v16 != -1LL)
        {
          if (!v16) {
            __break(0x5515u);
          }
          std::string::basic_string(&__str, &buf, v15 + 1, v16 - 1, (std::allocator<char> *)&v33);
          unsigned int v24 = std::stoi(&__str, 0LL, 10);
          if (v24 <= 0x12) {
            *((_DWORD *)v35 + v24) = sub_1000BE984(4, uint64);
          }
          unsigned __int8 v18 = buf.__r_.__value_.__s.__size_;
        }

        if ((v18 & 0x80) != 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        ++v10;
        id v3 = v30;
      }

      while (v10 != count);
    }

    else
    {
      float v6 = 0LL;
    }

    for (uint64_t i = 0LL; i != 76; i += 4LL)
    {
      unsigned int v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)((char *)v35 + i)));
      [v31 addObject:v26];
    }

    [v28 setObject:v31 forKey:@"nbr_battery_extension_factor_histogram"];
    uint64_t v7 = 0LL;
  }

  else
  {
    id v4 = sub_1000160F4("com.apple.wpantund.awd", "default");
    unint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_10020D5EC();
    }

    float v6 = 0LL;
    uint64_t v7 = 1LL;
  }

  return v7;
}

void sub_1000C2E3C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
}

double sub_1000C2EEC()
{
  double result = 0.0;
  unk_1002D0E2C = 0u;
  xmmword_1002D0E10 = 0u;
  unk_1002D0E20 = 0u;
  xmmword_1002D0E00 = 0u;
  return result;
}

size_t sub_1000C2F08(void *a1, void *a2)
{
  id v3 = a1;
  id v19 = a2;
  if (xpc_get_type(v3) != (xpc_type_t)&_xpc_type_array)
  {
    id v4 = sub_1000160F4("com.apple.wpantund.awd", "default");
    unint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_10020D618();
    }
    size_t count = 1LL;
LABEL_16:

    goto LABEL_17;
  }

  size_t count = xpc_array_get_count(v3);
  uint64_t v7 = sub_1000160F4("com.apple.wpantund.awd", "default");
  double v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 134217984;
    *(void *)&uint8_t buf[4] = count;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "CAMetrics : Radio Counters array with size %ld.",  buf,  0xCu);
  }

  if (count)
  {
    size_t v9 = 0LL;
    unint64_t v5 = 0LL;
    do
    {
      xpc_object_t dictionary = xpc_array_get_dictionary(v3, v9);
      unint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(dictionary);

      unint64_t v5 = v11;
      string = (char *)xpc_dictionary_get_string(v11, "key");
      sub_10000AC00(buf, string);
      unsigned int uint64 = xpc_dictionary_get_uint64(v11, "value");
      int v14 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, uint64));
      std::string::size_type v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      if (v21 >= 0) {
        std::string::size_type v16 = buf;
      }
      else {
        std::string::size_type v16 = *(_BYTE **)buf;
      }
      int v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v16));
      [v19 setObject:v15 forKey:v17];

      if (v21 < 0) {
        operator delete(*(void **)buf);
      }
      ++v9;
    }

    while (count != v9);
    size_t count = 0LL;
    goto LABEL_16;
  }

void sub_1000C313C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(a1);
}

size_t sub_1000C31B0(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (xpc_get_type(v3) != (xpc_type_t)&_xpc_type_array)
  {
    unint64_t v5 = sub_1000160F4("com.apple.wpantund.awd", "default");
    float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_10020D644();
    }
    size_t count = 1LL;
LABEL_14:

    goto LABEL_15;
  }

  size_t count = xpc_array_get_count(v3);
  if (count)
  {
    double v8 = 0LL;
    for (size_t i = 0LL; i != count; ++i)
    {
      xpc_object_t dictionary = xpc_array_get_dictionary(v3, i);
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(dictionary);

      string = (char *)xpc_dictionary_get_string(v6, "key");
      sub_10000AC00(__p, string);
      unsigned int uint64 = xpc_dictionary_get_uint64(v6, "value");
      size_t v13 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, uint64));
      int v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      if (v19 >= 0) {
        std::string::size_type v15 = __p;
      }
      else {
        std::string::size_type v15 = (void **)__p[0];
      }
      std::string::size_type v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v15));
      [v4 setObject:v14 forKey:v16];

      if (v19 < 0) {
        operator delete(__p[0]);
      }
      double v8 = v6;
    }

    size_t count = 0LL;
    goto LABEL_14;
  }

void sub_1000C3354( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

size_t sub_1000C33B8(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v22 = a2;
  id v21 = a3;
  if (xpc_get_type(v5) != (xpc_type_t)&_xpc_type_array)
  {
    float v6 = sub_1000160F4("com.apple.wpantund.awd", "default");
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10020D670();
    }
    size_t count = 1LL;
LABEL_16:

    goto LABEL_17;
  }

  size_t count = xpc_array_get_count(v5);
  size_t v9 = sub_1000160F4("com.apple.wpantund.awd", "default");
  size_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = [v21 UTF8String];
    __int16 v24 = 2048;
    size_t v25 = count;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "CAMetrics : %s array with size %ld.", buf, 0x16u);
  }

  if (count)
  {
    size_t v11 = 0LL;
    uint64_t v7 = 0LL;
    do
    {
      xpc_object_t dictionary = xpc_array_get_dictionary(v5, v11);
      size_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(dictionary);

      uint64_t v7 = v13;
      string = (char *)xpc_dictionary_get_string(v13, "key");
      sub_10000AC00(buf, string);
      unsigned int uint64 = xpc_dictionary_get_uint64(v13, "value");
      std::string::size_type v16 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, uint64));
      int v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
      if (v26 >= 0) {
        unsigned __int8 v18 = buf;
      }
      else {
        unsigned __int8 v18 = *(_BYTE **)buf;
      }
      char v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v18));
      [v22 setObject:v17 forKey:v19];

      if (v26 < 0) {
        operator delete(*(void **)buf);
      }
      ++v11;
    }

    while (count != v11);
    size_t count = 0LL;
    goto LABEL_16;
  }

void sub_1000C3620( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

size_t sub_1000C36AC(void *a1, void *a2)
{
  id v3 = a1;
  id v137 = a2;
  int v149 = 0;
  __int128 v147 = 0u;
  __int128 v148 = 0u;
  __int128 v145 = 0u;
  __int128 v146 = 0u;
  int v144 = 0;
  __int128 v142 = 0u;
  __int128 v143 = 0u;
  __int128 v140 = 0u;
  __int128 v141 = 0u;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
  {
    size_t count = xpc_array_get_count(v3);
    size_t v10 = sub_1000160F4("com.apple.wpantund.awd", "default");
    size_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 134217984;
      *(void *)&uint8_t buf[4] = count;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "CAMetrics : MACErrorHistogram array with size %ld.",  buf,  0xCu);
    }

    if (!count)
    {
      double v8 = 0LL;
      goto LABEL_360;
    }

    size_t v12 = 0LL;
    double v8 = 0LL;
    int v114 = v149;
    unsigned int v118 = HIDWORD(v148);
    unsigned int v122 = DWORD2(v148);
    unsigned int v124 = DWORD1(v148);
    unsigned int v128 = v148;
    unsigned int v134 = HIDWORD(v147);
    unsigned int v136 = DWORD2(v147);
    unsigned int v106 = DWORD1(v147);
    unsigned int v108 = v147;
    unsigned int v110 = HIDWORD(v146);
    unsigned int v111 = DWORD2(v146);
    unsigned int v115 = DWORD1(v146);
    unsigned int v119 = v146;
    unsigned int v125 = HIDWORD(v145);
    unsigned int v129 = DWORD2(v145);
    int v131 = DWORD1(v145);
    unsigned int v123 = DWORD1(v143);
    unsigned int v127 = v143;
    unsigned int v133 = HIDWORD(v142);
    unsigned int v135 = DWORD2(v142);
    unsigned int v105 = DWORD1(v142);
    unsigned int v107 = v142;
    unsigned int v109 = HIDWORD(v141);
    unsigned int v112 = DWORD2(v141);
    int v113 = v144;
    unsigned int v116 = DWORD1(v141);
    unsigned int v117 = HIDWORD(v143);
    unsigned int v120 = v141;
    unsigned int v121 = DWORD2(v143);
    unsigned int v126 = HIDWORD(v140);
    unsigned int v130 = DWORD2(v140);
    int v132 = DWORD1(v140);
    while (1)
    {
      xpc_object_t dictionary = xpc_array_get_dictionary(v3, v12);
      int v14 = (void *)objc_claimAutoreleasedReturnValue(dictionary);

      double v8 = v14;
      string = (char *)xpc_dictionary_get_string(v14, "key");
      sub_10000AC00(buf, string);
      unsigned int uint64 = xpc_dictionary_get_uint64(v14, "value");
      if ((v139 & 0x80000000) == 0)
      {
        if (v139 != 19) {
          goto LABEL_165;
        }
        if (*(void *)buf == 0x6F4E746365726944LL
          && *(void *)&buf[8] == 0x726F7272456B6341LL
          && *(void *)&buf[11] == 0x5D305B726F727245LL)
        {
          goto LABEL_102;
        }

        if (*(void *)buf == 0x6F4E746365726944LL
          && *(void *)&buf[8] == 0x726F7272456B6341LL
          && *(void *)&buf[11] == 0x5D315B726F727245LL)
        {
          goto LABEL_103;
        }

        if (*(void *)buf == 0x6F4E746365726944LL
          && *(void *)&buf[8] == 0x726F7272456B6341LL
          && *(void *)&buf[11] == 0x5D325B726F727245LL)
        {
          goto LABEL_104;
        }

        if (*(void *)buf == 0x6F4E746365726944LL
          && *(void *)&buf[8] == 0x726F7272456B6341LL
          && *(void *)&buf[11] == 0x5D335B726F727245LL)
        {
          goto LABEL_105;
        }

        if (*(void *)buf == 0x6F4E746365726944LL
          && *(void *)&buf[8] == 0x726F7272456B6341LL
          && *(void *)&buf[11] == 0x5D345B726F727245LL)
        {
          goto LABEL_106;
        }

        goto LABEL_86;
      }

      if (*(void *)&buf[8] != 19LL) {
        goto LABEL_165;
      }
      if (**(void **)buf == 0x6F4E746365726944LL
        && *(void *)(*(void *)buf + 8LL) == 0x726F7272456B6341LL
        && *(void *)(*(void *)buf + 11LL) == 0x5D305B726F727245LL)
      {
LABEL_102:
        LODWORD(v145) = sub_1000BE984(4, uint64);
        goto LABEL_182;
      }

      if (**(void **)buf == 0x6F4E746365726944LL
        && *(void *)(*(void *)buf + 8LL) == 0x726F7272456B6341LL
        && *(void *)(*(void *)buf + 11LL) == 0x5D315B726F727245LL)
      {
LABEL_103:
        int v131 = sub_1000BE984(4, uint64);
        goto LABEL_182;
      }

      if (**(void **)buf == 0x6F4E746365726944LL
        && *(void *)(*(void *)buf + 8LL) == 0x726F7272456B6341LL
        && *(void *)(*(void *)buf + 11LL) == 0x5D325B726F727245LL)
      {
LABEL_104:
        unsigned int v129 = sub_1000BE984(4, uint64);
        goto LABEL_182;
      }

      if (**(void **)buf == 0x6F4E746365726944LL
        && *(void *)(*(void *)buf + 8LL) == 0x726F7272456B6341LL
        && *(void *)(*(void *)buf + 11LL) == 0x5D335B726F727245LL)
      {
LABEL_105:
        unsigned int v125 = sub_1000BE984(4, uint64);
        goto LABEL_182;
      }

      if (**(void **)buf == 0x6F4E746365726944LL
        && *(void *)(*(void *)buf + 8LL) == 0x726F7272456B6341LL
        && *(void *)(*(void *)buf + 11LL) == 0x5D345B726F727245LL)
      {
LABEL_106:
        unsigned int v119 = sub_1000BE984(4, uint64);
        goto LABEL_182;
      }

      if ((v139 & 0x80) == 0) {
        break;
      }
      if (**(void **)buf == 0x6F4E746365726944LL
        && *(void *)(*(void *)buf + 8LL) == 0x726F7272456B6341LL
        && *(void *)(*(void *)buf + 11LL) == 0x5D355B726F727245LL)
      {
LABEL_139:
        unsigned int v115 = sub_1000BE984(4, uint64);
        goto LABEL_182;
      }

      if (**(void **)buf == 0x6F4E746365726944LL
        && *(void *)(*(void *)buf + 8LL) == 0x726F7272456B6341LL
        && *(void *)(*(void *)buf + 11LL) == 0x5D365B726F727245LL)
      {
LABEL_140:
        unsigned int v111 = sub_1000BE984(4, uint64);
        goto LABEL_182;
      }

      if ((v139 & 0x80) == 0)
      {
        if (v139 != 19) {
          goto LABEL_165;
        }
LABEL_123:
        if (*(void *)buf == 0x6F4E746365726944LL
          && *(void *)&buf[8] == 0x726F7272456B6341LL
          && *(void *)&buf[11] == 0x5D375B726F727245LL)
        {
          goto LABEL_179;
        }

        if (*(void *)buf == 0x6F4E746365726944LL
          && *(void *)&buf[8] == 0x726F7272456B6341LL
          && *(void *)&buf[11] == 0x5D385B726F727245LL)
        {
          goto LABEL_180;
        }

void sub_1000C4670( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26)
{
  _Unwind_Resume(a1);
}

size_t sub_1000C4958(void *a1, void *a2)
{
  id v3 = a1;
  id v86 = a2;
  __int128 v93 = 0u;
  __int128 v94 = 0u;
  __int128 v91 = 0u;
  __int128 v92 = 0u;
  __int128 v89 = 0u;
  __int128 v90 = 0u;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
  {
    size_t count = xpc_array_get_count(v3);
    size_t v10 = sub_1000160F4("com.apple.wpantund.awd", "default");
    size_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = count;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "CAMetrics : MACRetryHistogram array with size %ld.",  (uint8_t *)&buf,  0xCu);
    }

    if (!count)
    {
      double v8 = 0LL;
      goto LABEL_201;
    }

    size_t v12 = 0LL;
    double v8 = 0LL;
    int v68 = HIDWORD(v94);
    unsigned int v71 = DWORD2(v94);
    unsigned int v74 = DWORD1(v94);
    int v82 = HIDWORD(v93);
    unsigned int v85 = DWORD2(v93);
    unsigned int v62 = DWORD1(v93);
    int v63 = v93;
    int v64 = HIDWORD(v92);
    unsigned int v65 = DWORD2(v92);
    int v76 = HIDWORD(v91);
    int v77 = v94;
    unsigned int v79 = DWORD2(v91);
    unsigned int v80 = DWORD1(v91);
    int v66 = HIDWORD(v90);
    unsigned int v67 = DWORD1(v92);
    unsigned int v69 = DWORD2(v90);
    int v70 = v92;
    unsigned int v72 = DWORD1(v90);
    int v73 = v90;
    int v75 = HIDWORD(v89);
    unsigned int v78 = DWORD2(v89);
    unsigned int v81 = DWORD1(v89);
    int v83 = v91;
    int v84 = v89;
    while (1)
    {
      xpc_object_t dictionary = xpc_array_get_dictionary(v3, v12);
      int v14 = (void *)objc_claimAutoreleasedReturnValue(dictionary);

      double v8 = v14;
      string = (char *)xpc_dictionary_get_string(v14, "key");
      sub_10000AC00(&buf, string);
      unsigned int uint64 = xpc_dictionary_get_uint64(v14, "value");
      if ((v88 & 0x80000000) == 0)
      {
        if (v88 != 14) {
          goto LABEL_108;
        }
        goto LABEL_56;
      }

      if (*((void *)&buf + 1) != 14LL) {
        goto LABEL_108;
      }
      if (*(void *)buf == 0x6552746365726944LL && *(void *)(buf + 6) == 0x5D305B7972746552LL)
      {
LABEL_66:
        int v83 = sub_1000BE984(4, uint64);
        goto LABEL_120;
      }

      if (*(void *)buf == 0x6552746365726944LL && *(void *)(buf + 6) == 0x5D315B7972746552LL)
      {
LABEL_67:
        unsigned int v80 = sub_1000BE984(4, uint64);
        goto LABEL_120;
      }

      if (*(void *)buf == 0x6552746365726944LL && *(void *)(buf + 6) == 0x5D325B7972746552LL)
      {
LABEL_68:
        unsigned int v79 = sub_1000BE984(4, uint64);
        goto LABEL_120;
      }

      if (*(void *)buf == 0x6552746365726944LL && *(void *)(buf + 6) == 0x5D335B7972746552LL)
      {
LABEL_69:
        int v76 = sub_1000BE984(4, uint64);
        goto LABEL_120;
      }

      if (*(void *)buf == 0x6552746365726944LL && *(void *)(buf + 6) == 0x5D345B7972746552LL)
      {
LABEL_70:
        int v70 = sub_1000BE984(4, uint64);
        goto LABEL_120;
      }

      if ((v88 & 0x80) == 0) {
        break;
      }
      if (*(void *)buf == 0x6552746365726944LL && *(void *)(buf + 6) == 0x5D355B7972746552LL)
      {
LABEL_91:
        unsigned int v67 = sub_1000BE984(4, uint64);
        goto LABEL_120;
      }

      if (*(void *)buf == 0x6552746365726944LL && *(void *)(buf + 6) == 0x5D365B7972746552LL)
      {
LABEL_92:
        unsigned int v65 = sub_1000BE984(4, uint64);
        goto LABEL_120;
      }

      if ((v88 & 0x80) == 0)
      {
        if (v88 != 14) {
          goto LABEL_108;
        }
LABEL_81:
LABEL_103:
        p___int128 buf = (uint64_t *)&buf;
        goto LABEL_104;
      }

      if (*(void *)buf == 0x6552746365726944LL && *(void *)(buf + 6) == 0x5D375B7972746552LL)
      {
LABEL_197:
        int v64 = sub_1000BE984(4, uint64);
        goto LABEL_120;
      }

      p___int128 buf = (uint64_t *)buf;
      if (*(void *)buf == 0x6552746365726944LL && *(void *)(buf + 6) == 0x5D385B7972746552LL)
      {
LABEL_198:
        int v63 = sub_1000BE984(4, uint64);
        goto LABEL_120;
      }

      if ((v88 & 0x80) == 0)
      {
        if (v88 != 14) {
          goto LABEL_108;
        }
        goto LABEL_103;
      }

void sub_1000C5514( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int a18, int a19, int a20, int a21, int a22, int a23, int a24, int a25, int a26, int a27, int a28, int a29, int a30, int a31, int a32, int a33, void *a34, void *__p, uint64_t a36, int a37, __int16 a38, char a39, char a40, uint64_t a41, int a42, int a43, int a44, int a45, int a46, int a47, int a48, int a49)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000C5778(void *a1, void *a2)
{
  id v3 = a1;
  id v38 = a2;
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v41 = 0u;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
  {
    size_t count = xpc_array_get_count(v3);
    size_t v10 = sub_1000160F4("com.apple.wpantund.awd", "default");
    size_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = count;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "CAMetrics : CCA Energy Detect Histogram array with size %ld.",  (uint8_t *)&buf,  0xCu);
    }

    if (!count)
    {
      uint64_t v7 = 0LL;
      uint64_t v8 = 0LL;
      goto LABEL_68;
    }

    size_t v12 = 0LL;
    uint64_t v7 = 0LL;
    unsigned int v27 = DWORD1(v43);
    unsigned int v28 = v43;
    int v29 = HIDWORD(v42);
    unsigned int v30 = DWORD2(v42);
    unsigned int v31 = DWORD1(v42);
    int v32 = v42;
    unsigned int v33 = HIDWORD(v41);
    unsigned int v34 = DWORD2(v41);
    uint64_t v35 = v41;
    unsigned int v36 = HIDWORD(v43);
    unsigned int v37 = DWORD2(v43);
    while (1)
    {
      xpc_object_t dictionary = xpc_array_get_dictionary(v3, v12);
      int v14 = (void *)objc_claimAutoreleasedReturnValue(dictionary);

      uint64_t v7 = v14;
      string = (char *)xpc_dictionary_get_string(v14, "key");
      sub_10000AC00(&buf, string);
      unsigned int uint64 = xpc_dictionary_get_uint64(v14, "value");
      int v17 = v40;
      uint64_t v18 = *((void *)&buf + 1);
      if (v18 != 35) {
        goto LABEL_30;
      }
      char v19 = (const void *)buf;
      if (*((void *)&buf + 1) != 35LL) {
        goto LABEL_30;
      }
      if (!memcmp(v19, "CCAEnergyDetect[0x2] [-85dBm-80dBm)", 0x23uLL))
      {
LABEL_36:
        unsigned int v34 = sub_1000BE984(4, uint64);
        goto LABEL_63;
      }

      if (*((void *)&buf + 1) != 35LL) {
        goto LABEL_30;
      }
      unint64_t v20 = (const void *)buf;
      if (!memcmp((const void *)buf, "CCAEnergyDetect[0x3] [-80dBm-75dBm)", 0x23uLL))
      {
LABEL_37:
        unsigned int v33 = sub_1000BE984(4, uint64);
        goto LABEL_63;
      }

      if ((v17 & 0x80) == 0)
      {
        if (v17 != 35) {
          goto LABEL_30;
        }
        goto LABEL_26;
      }

      if (!memcmp(v20, "CCAEnergyDetect[0x4] [-75dBm-70dBm)", 0x23uLL))
      {
LABEL_46:
        int v32 = sub_1000BE984(4, uint64);
        goto LABEL_63;
      }

      if (*((void *)&buf + 1) != 35LL) {
        goto LABEL_30;
      }
      id v21 = (const void *)buf;
      if (!memcmp((const void *)buf, "CCAEnergyDetect[0x5] [-70dBm-65dBm)", 0x23uLL))
      {
LABEL_47:
        unsigned int v31 = sub_1000BE984(4, uint64);
        goto LABEL_63;
      }

      if ((v17 & 0x80) == 0)
      {
        if (v17 != 35) {
          goto LABEL_30;
        }
        goto LABEL_43;
      }

      if (!memcmp(v21, "CCAEnergyDetect[0x6] [-65dBm-60dBm)", 0x23uLL))
      {
LABEL_55:
        unsigned int v30 = sub_1000BE984(4, uint64);
        goto LABEL_63;
      }

      if (*((void *)&buf + 1) != 35LL) {
        goto LABEL_30;
      }
      id v22 = (const void *)buf;
      if (!memcmp((const void *)buf, "CCAEnergyDetect[0x7] [-60dBm-55dBm)", 0x23uLL))
      {
LABEL_56:
        int v29 = sub_1000BE984(4, uint64);
        goto LABEL_63;
      }

      if ((v17 & 0x80) != 0)
      {
        if (!memcmp(v22, "CCAEnergyDetect[0x8] [-55dBm-50dBm)", 0x23uLL))
        {
LABEL_62:
          unsigned int v28 = sub_1000BE984(4, uint64);
          goto LABEL_63;
        }

        if (*((void *)&buf + 1) != 35LL) {
          goto LABEL_30;
        }
        p___int128 buf = (__int128 *)buf;
        goto LABEL_60;
      }

      if (v17 != 35) {
        goto LABEL_30;
      }
LABEL_53:
      if (!memcmp(&buf, "CCAEnergyDetect[0x8] [-55dBm-50dBm)", 0x23uLL)) {
        goto LABEL_62;
      }
      p___int128 buf = &buf;
LABEL_60:
      if (memcmp(p_buf, "CCAEnergyDetect[0x9] [-50dBm-45dBm)", 0x23uLL))
      {
LABEL_30:
        if (sub_1000B55AC(&buf, "CCAEnergyDetect[0xA] [-45dBm-40dBm)"))
        {
          unsigned int v37 = sub_1000BE984(4, uint64);
        }

        else if (sub_1000B55AC(&buf, "CCAEnergyDetect[0xB] [ >=  -40dBm]"))
        {
          unsigned int v36 = sub_1000BE984(4, uint64);
        }

        goto LABEL_63;
      }

      unsigned int v27 = sub_1000BE984(4, uint64);
LABEL_63:
      if (count == ++v12)
      {
        uint64_t v8 = 0LL;
        *(void *)&__int128 v43 = __PAIR64__(v27, v28);
        HIDWORD(v42) = v29;
        LODWORD(v42) = v32;
        *(void *)((char *)&v42 + 4) = __PAIR64__(v30, v31);
        *((void *)&v41 + 1) = __PAIR64__(v33, v34);
        *(void *)&__int128 v41 = v35;
        *((void *)&v43 + 1) = __PAIR64__(v36, v37);
        goto LABEL_68;
      }
    }

    if (v40 == 34)
    {
      if (memcmp(&buf, "CCAEnergyDetect[0x0](<   -90dBm)", 0x22uLL)) {
        goto LABEL_30;
      }
LABEL_35:
      LODWORD(v35) = sub_1000BE984(4, uint64);
      goto LABEL_63;
    }

    if (v40 != 35) {
      goto LABEL_30;
    }
    if (!memcmp(&buf, "CCAEnergyDetect[0x1] [-90dBm-85dBm)", 0x23uLL))
    {
LABEL_34:
      HIDWORD(v35) = sub_1000BE984(4, uint64);
      goto LABEL_63;
    }

    if (!memcmp(&buf, "CCAEnergyDetect[0x2] [-85dBm-80dBm)", 0x23uLL)) {
      goto LABEL_36;
    }
    if (!memcmp(&buf, "CCAEnergyDetect[0x3] [-80dBm-75dBm)", 0x23uLL)) {
      goto LABEL_37;
    }
LABEL_26:
    if (!memcmp(&buf, "CCAEnergyDetect[0x4] [-75dBm-70dBm)", 0x23uLL)) {
      goto LABEL_46;
    }
    if (!memcmp(&buf, "CCAEnergyDetect[0x5] [-70dBm-65dBm)", 0x23uLL)) {
      goto LABEL_47;
    }
LABEL_43:
    if (!memcmp(&buf, "CCAEnergyDetect[0x6] [-65dBm-60dBm)", 0x23uLL)) {
      goto LABEL_55;
    }
    if (!memcmp(&buf, "CCAEnergyDetect[0x7] [-60dBm-55dBm)", 0x23uLL)) {
      goto LABEL_56;
    }
    goto LABEL_53;
  }

  id v5 = sub_1000160F4("com.apple.wpantund.awd", "default");
  float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
    sub_10020D6F4();
  }

  uint64_t v7 = 0LL;
  uint64_t v8 = 1LL;
LABEL_68:
  for (uint64_t i = 0LL; i != 48; i += 4LL)
  {
    size_t v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)((char *)&v41 + i)));
    [v4 addObject:v25];
  }

  [v38 setObject:v4 forKey:@"tx_cca_energy_detected_histogram"];

  return v8;
}

void sub_1000C5E24( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int a18, int a19, int a20, int a21, void *a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, int a30, int a31, int a32, int a33, int a34, int a35, int a36, int a37, int a38, int a39, int a40, int a41)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000C5F88(void *a1, void *a2)
{
  id v3 = a1;
  id v30 = a2;
  uint64_t v37 = 0LL;
  memset(v36, 0, sizeof(v36));
  id v32 = v3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
  {
    size_t count = xpc_array_get_count(v3);
    size_t v9 = sub_1000160F4("com.apple.wpantund.awd", "default");
    size_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = count;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "CAMetrics : CSMA Backoff Histogram array with size %ld.",  (uint8_t *)&buf,  0xCu);
    }

    if (count)
    {
      size_t v11 = 0LL;
      uint64_t v7 = 0LL;
      do
      {
        xpc_object_t dictionary = xpc_array_get_dictionary(v3, v11);
        size_t v13 = (void *)objc_claimAutoreleasedReturnValue(dictionary);

        uint64_t v7 = v13;
        string = (char *)xpc_dictionary_get_string(v13, "key");
        sub_10000AC00(&buf, string);
        unsigned int uint64 = xpc_dictionary_get_uint64(v13, "value");
        uint64_t size = buf.__r_.__value_.__s.__size_;
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t size = buf.__r_.__value_.__l.__size_;
        }
        uint64_t v18 = (std::string *)((char *)p_buf + size);
        if (size >= 11)
        {
          char v19 = p_buf;
          do
          {
            unint64_t v20 = memchr(v19, 67, size - 10);
            if (!v20) {
              break;
            }
            id v21 = (std::string *)v20;
            char v19 = (std::string *)((char *)v20 + 1);
            uint64_t size = (char *)v18 - ((char *)&v21->__r_.__value_.__l.__data_ + 1);
          }

          while (size > 10);
        }

        id v21 = v18;
LABEL_23:
        std::string::size_type v23 = std::string::find(&buf, 91, 0LL);
        std::string::size_type v24 = std::string::find(&buf, 93, 0LL);
        if (v21 != v18 && v21 == p_buf && v23 != -1LL && v24 != -1LL)
        {
          if (!v24)
          {
            __break(0x5515u);
LABEL_43:
            __break(0x5512u);
          }

          std::string::basic_string(&__str, &buf, v23 + 1, v24 - 1, (std::allocator<char> *)&v34);
          unsigned __int8 v25 = std::stoi(&__str, 0LL, 10);
          if ((v25 & 0xFEu) <= 9)
          {
            int v26 = sub_1000BE984(4, uint64);
            if (v25 >= 0xAu) {
              goto LABEL_43;
            }
            *((_DWORD *)v36 + v25) = v26;
          }
        }

        ++v11;
        id v3 = v32;
      }

      while (v11 != count);
    }

    else
    {
      uint64_t v7 = 0LL;
    }

    uint64_t v8 = 0LL;
  }

  else
  {
    id v5 = sub_1000160F4("com.apple.wpantund.awd", "default");
    float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_10020D720();
    }

    uint64_t v7 = 0LL;
    uint64_t v8 = 1LL;
  }

  for (uint64_t i = 0LL; i != 40; i += 4LL)
  {
    unsigned int v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)((char *)v36 + i)));
    [v4 addObject:v28];
  }

  [v30 setObject:v4 forKey:@"tx_csma_backoff_histogram"];

  return v8;
}

void sub_1000C6328( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000C63D4(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
  {
    size_t count = xpc_array_get_count(v3);
    size_t v9 = sub_1000160F4("com.apple.wpantund.awd", "default");
    size_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 134217984;
      *(void *)&uint8_t buf[4] = count;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "CAMetrics : AllMAC array with size %ld.",  buf,  0xCu);
    }

    if (count)
    {
      size_t v11 = 0LL;
      float v6 = 0LL;
      uint64_t v84 = 0LL;
      uint64_t v85 = 0LL;
      uint64_t v86 = 0LL;
      uint64_t v82 = 0LL;
      uint64_t v83 = 0LL;
      uint64_t v81 = 0LL;
      while (1)
      {
        xpc_object_t dictionary = xpc_array_get_dictionary(v3, v11);
        size_t v13 = (void *)objc_claimAutoreleasedReturnValue(dictionary);

        float v6 = v13;
        string = (char *)xpc_dictionary_get_string(v13, "key");
        sub_10000AC00(buf, string);
        unsigned int uint64 = xpc_dictionary_get_uint64(v13, "value");
        std::string::size_type v16 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, uint64));
        int v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
        if (v88 >= 0) {
          uint64_t v18 = buf;
        }
        else {
          uint64_t v18 = *(_BYTE **)buf;
        }
        char v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v18, v81));
        [v4 setObject:v17 forKey:v19];

        if ((v88 & 0x80000000) == 0)
        {
          switch(v88)
          {
            case 8:
              if (*(void *)buf != 0x6C61746F745F7874LL) {
                goto LABEL_154;
              }
              goto LABEL_74;
            case 10:
              goto LABEL_87;
            case 12:
              goto LABEL_93;
            case 14:
              goto LABEL_112;
            case 15:
              goto LABEL_137;
            case 17:
LABEL_102:
              if (*(void *)buf == 0x645F7272655F7872LL
                && *(void *)&buf[8] == 0x65746163696C7075LL
                && buf[16] == 100)
              {
                goto LABEL_145;
              }

              if (v88 == 10) {
                goto LABEL_143;
              }
              if (v88 == 15) {
                goto LABEL_137;
              }
              if (v88 != 14) {
                goto LABEL_154;
              }
LABEL_112:
              if (*(void *)buf != 0x6E5F7272655F7872LL || *(void *)&buf[6] != 0x656D6172666F6E5FLL) {
                goto LABEL_142;
              }
              goto LABEL_117;
            case 19:
              if (*(void *)buf != 0x625F7272655F7874LL
                || *(void *)&buf[8] != 0x6E6168635F797375LL
                || *(void *)&buf[11] != 0x6C656E6E6168635FLL)
              {
                uint64_t v37 = buf;
                switch(v88)
                {
                  case 10:
                    goto LABEL_150;
                  case 14:
                    goto LABEL_112;
                  case 15:
                    goto LABEL_137;
                  case 17:
                    goto LABEL_102;
                  default:
                    goto LABEL_154;
                }
              }

              goto LABEL_144;
            case 23:
              if (*(void *)buf == 0x755F7272655F7872LL
                && *(void *)&buf[8] == 0x6E5F6E776F6E6B6ELL
                && *(void *)&buf[15] == 0x726F62686769656ELL)
              {
                goto LABEL_157;
              }

              if (v88 == 10) {
                goto LABEL_143;
              }
              if (v88 == 15) {
                goto LABEL_137;
              }
              if (v88 != 23) {
                goto LABEL_154;
              }
              BOOL v43 = *(void *)buf == 0x695F7272655F7872LL && *(void *)&buf[8] == 0x735F64696C61766ELL;
              if (!v43 || *(void *)&buf[15] != 0x726464615F637273LL) {
                goto LABEL_154;
              }
              goto LABEL_136;
            default:
              goto LABEL_154;
          }
        }

        uint64_t v20 = *(void *)&buf[8];
        if (*(void *)&buf[8] == 8LL && **(void **)buf == 0x6C61746F745F7874LL)
        {
LABEL_74:
          HIDWORD(v85) = sub_1000BE984(4, uint64);
          goto LABEL_158;
        }

        if (*(void *)&buf[8] == 10LL)
        {
          if (**(void **)buf == 0x635F7272655F7874LL && *(_WORD *)(*(void *)buf + 8LL) == 24931)
          {
LABEL_87:
            LODWORD(v85) = sub_1000BE984(4, uint64);
            goto LABEL_158;
          }

          uint64_t v20 = *(void *)&buf[8];
        }

        if (v20 == 12)
        {
          if (**(void **)buf == 0x615F7272655F7874LL && *(_DWORD *)(*(void *)buf + 8LL) == 1953656674LL)
          {
LABEL_93:
            HIDWORD(v84) = sub_1000BE984(4, uint64);
            goto LABEL_158;
          }

          uint64_t v20 = *(void *)&buf[8];
        }

        if (v20 == 19)
        {
          if (**(void **)buf == 0x625F7272655F7874LL
            && *(void *)(*(void *)buf + 8LL) == 0x6E6168635F797375LL
            && *(void *)(*(void *)buf + 11LL) == 0x6C656E6E6168635FLL)
          {
LABEL_144:
            LODWORD(v84) = sub_1000BE984(4, uint64);
            goto LABEL_158;
          }

          uint64_t v20 = *(void *)&buf[8];
        }

        if (v20 == 17)
        {
          if (**(void **)buf == 0x645F7272655F7872LL
            && *(void *)(*(void *)buf + 8LL) == 0x65746163696C7075LL
            && *(_BYTE *)(*(void *)buf + 16LL) == 100)
          {
LABEL_145:
            LODWORD(v83) = sub_1000BE984(4, uint64);
            goto LABEL_158;
          }

          uint64_t v20 = *(void *)&buf[8];
        }

        if (v20 == 14)
        {
          if (**(void **)buf == 0x6E5F7272655F7872LL && *(void *)(*(void *)buf + 6LL) == 0x656D6172666F6E5FLL)
          {
LABEL_117:
            HIDWORD(v82) = sub_1000BE984(4, uint64);
            goto LABEL_158;
          }

          uint64_t v20 = *(void *)&buf[8];
        }

        if (v20 != 23) {
          goto LABEL_75;
        }
        if (**(void **)buf == 0x755F7272655F7872LL
          && *(void *)(*(void *)buf + 8LL) == 0x6E5F6E776F6E6B6ELL
          && *(void *)(*(void *)buf + 15LL) == 0x726F62686769656ELL)
        {
LABEL_157:
          HIDWORD(v81) = sub_1000BE984(4, uint64);
          goto LABEL_158;
        }

        uint64_t v20 = *(void *)&buf[8];
        if (*(void *)&buf[8] != 23LL) {
          goto LABEL_75;
        }
        if (**(void **)buf == 0x695F7272655F7872LL
          && *(void *)(*(void *)buf + 8LL) == 0x735F64696C61766ELL
          && *(void *)(*(void *)buf + 15LL) == 0x726464615F637273LL)
        {
LABEL_136:
          LODWORD(v81) = sub_1000BE984(4, uint64);
          goto LABEL_158;
        }

        if ((v88 & 0x80) == 0)
        {
          if (v88 == 10) {
            goto LABEL_143;
          }
          if (v88 != 15) {
            goto LABEL_154;
          }
LABEL_137:
          if (*(void *)buf == 0x735F7272655F7872LL && *(void *)&buf[7] == 0x7974697275636573LL) {
            goto LABEL_146;
          }
          if ((v88 & 0x80) == 0)
          {
LABEL_142:
            if (v88 == 10)
            {
LABEL_143:
              uint64_t v37 = buf;
              goto LABEL_150;
            }

            goto LABEL_154;
          }
        }

        else
        {
LABEL_75:
          if (v20 != 15) {
            goto LABEL_148;
          }
          if (**(void **)buf == 0x735F7272655F7872LL && *(void *)(*(void *)buf + 7LL) == 0x7974697275636573LL)
          {
LABEL_146:
            LODWORD(v82) = sub_1000BE984(4, uint64);
            goto LABEL_158;
          }
        }

        uint64_t v20 = *(void *)&buf[8];
LABEL_148:
        if (v20 == 10)
        {
          uint64_t v37 = *(_BYTE **)buf;
LABEL_150:
          uint64_t v46 = *(void *)v37;
          int v47 = *((unsigned __int16 *)v37 + 4);
          if (v46 == 0x665F7272655F7872LL && v47 == 29539)
          {
            HIDWORD(v83) = sub_1000BE984(4, uint64);
            goto LABEL_158;
          }
        }

LABEL_154:
        if (sub_1000B55AC(buf, "rx_err_other")) {
          LODWORD(v86) = sub_1000BE984(4, uint64);
        }
LABEL_158:
        if (v88 < 0)
        {
          if (*(void *)&buf[8] != 8LL) {
            goto LABEL_165;
          }
          __n128 v49 = *(void **)buf;
        }

        else
        {
          if (v88 != 8) {
            goto LABEL_166;
          }
          __n128 v49 = buf;
        }

        if (*v49 == 0x6C61746F745F7872LL)
        {
          HIDWORD(v86) = sub_1000BE984(4, uint64);
          if ((v88 & 0x80) == 0) {
            goto LABEL_166;
          }
LABEL_165:
          operator delete(*(void **)buf);
          goto LABEL_166;
        }

        if (v88 < 0) {
          goto LABEL_165;
        }
LABEL_166:
        if (count == ++v11) {
          goto LABEL_171;
        }
      }
    }

    uint64_t v85 = 0LL;
    uint64_t v86 = 0LL;
    uint64_t v82 = 0LL;
    uint64_t v83 = 0LL;
    uint64_t v81 = 0LL;
    uint64_t v84 = 0LL;
    float v6 = 0LL;
LABEL_171:
    int v50 = v85 + HIDWORD(v84);
    if (!__CFADD__((_DWORD)v85, HIDWORD(v84)))
    {
      unsigned int v51 = v50 + v84;
      if (!__CFADD__(v50, (_DWORD)v84))
      {
        if (v51)
        {
          uint64_t v52 = 100LL * v85;
          if ((v52 & 0xFFFFFFFF00000000LL) != 0) {
            goto LABEL_196;
          }
          uint64_t v53 = 100LL * HIDWORD(v84);
          if ((v53 & 0xFFFFFFFF00000000LL) != 0) {
            goto LABEL_196;
          }
          uint64_t v54 = 100LL * v84;
          if ((v54 & 0xFFFFFFFF00000000LL) != 0) {
            goto LABEL_196;
          }
          unsigned int v55 = v52 / v51;
          unsigned int v56 = v53 / v51;
          unsigned int v57 = v54 / v51;
        }

        else
        {
          unsigned int v55 = 0;
          unsigned int v56 = 0;
          unsigned int v57 = 0;
        }

        __n128 v58 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, v55));
        uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue(v58);
        [v4 setObject:v59 forKey:@"tx_err_cca_percentage"];

        uint64_t v60 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, v56));
        char v61 = (void *)objc_claimAutoreleasedReturnValue(v60);
        [v4 setObject:v61 forKey:@"tx_err_abort_percentage"];

        unsigned int v62 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, v57));
        int v63 = (void *)objc_claimAutoreleasedReturnValue(v62);
        [v4 setObject:v63 forKey:@"tx_err_busy_channel_percentage"];

        if (HIDWORD(v85))
        {
          uint64_t v64 = 100LL * v51;
          if ((v64 & 0xFFFFFFFF00000000LL) != 0) {
            goto LABEL_196;
          }
          int v65 = HIDWORD(v85);
          unsigned int v66 = v64 / HIDWORD(v85);
        }

        else
        {
          unsigned int v66 = 0;
          int v65 = 0;
        }

        dword_1002D1220 = v65;
        dword_1002D1224 = HIDWORD(v86);
        unsigned int v67 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, v66));
        int v68 = (void *)objc_claimAutoreleasedReturnValue(v67);
        [v4 setObject:v68 forKey:@"tx_err_percentage"];

        int v69 = v82 + HIDWORD(v83);
        if (!__CFADD__((_DWORD)v82, HIDWORD(v83)))
        {
          BOOL v70 = __CFADD__(v69, (_DWORD)v86);
          int v71 = v69 + v86;
          if (!v70)
          {
            BOOL v70 = __CFADD__(v71, (_DWORD)v81);
            int v72 = v71 + v81;
            if (!v70)
            {
              BOOL v70 = __CFADD__(v72, HIDWORD(v81));
              int v73 = v72 + HIDWORD(v81);
              if (!v70)
              {
                BOOL v70 = __CFADD__(v73, HIDWORD(v82));
                int v74 = v73 + HIDWORD(v82);
                if (!v70)
                {
                  BOOL v70 = __CFADD__(v74, (_DWORD)v83);
                  unsigned int v75 = v74 + v83;
                  if (!v70)
                  {
                    if (!HIDWORD(v86))
                    {
                      unsigned int v77 = 0;
                      goto LABEL_193;
                    }

                    uint64_t v76 = 100LL * v75;
                    if ((v76 & 0xFFFFFFFF00000000LL) == 0)
                    {
                      unsigned int v77 = v76 / HIDWORD(v86);
LABEL_193:
                      unsigned int v78 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, v77));
                      unsigned int v79 = (void *)objc_claimAutoreleasedReturnValue(v78);
                      [v4 setObject:v79 forKey:@"rx_err_percentage"];

                      uint64_t v7 = 0LL;
                      goto LABEL_194;
                    }

void sub_1000C6F10( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000C700C(void *a1, void *a2)
{
  xpc_object_t object = a1;
  id v75 = a2;
  v94[0] = 0LL;
  v94[1] = 0LL;
  __int128 v93 = v94;
  memset(v102, 0, 80);
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  memset(v99, 0, sizeof(v99));
  memset(v98, 0, sizeof(v98));
  memset(v97, 0, 44);
  uint64_t v86 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  uint64_t v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  char v88 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  id v87 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  uint64_t v84 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  if (xpc_get_type(object) != (xpc_type_t)&_xpc_type_array)
  {
    id v3 = sub_1000160F4("com.apple.wpantund.awd", "default");
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10020D778();
    }

    id v5 = 0LL;
    uint64_t v6 = 1LL;
    goto LABEL_140;
  }

  size_t count = xpc_array_get_count(object);
  uint64_t v7 = sub_1000160F4("com.apple.wpantund.awd", "default");
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = count;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "CAMetrics : now onto Coex hist array with size %ld.",  (uint8_t *)&buf,  0xCu);
  }

  if (count)
  {
    size_t v9 = 0LL;
    id v5 = 0LL;
    size_t v10 = "coex_tx_total_grant_duty_cycle_histogram";
    while (1)
    {
      xpc_object_t dictionary = xpc_array_get_dictionary(object, v9);
      size_t v12 = (void *)objc_claimAutoreleasedReturnValue(dictionary);

      __int128 v91 = v12;
      string = (char *)xpc_dictionary_get_string(v12, "key");
      sub_10000AC00(&buf, string);
      size_t v89 = v9;
      unsigned int uint64 = xpc_dictionary_get_uint64(v12, "value");
      std::string::size_type v90 = std::string::find(&buf, 91, 0LL);
      std::string::size_type v14 = std::string::find(&buf, 93, 0LL);
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_std::string buf = &buf;
      }
      else {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t size = buf.__r_.__value_.__s.__size_;
      }
      else {
        uint64_t size = buf.__r_.__value_.__l.__size_;
      }
      int v17 = (std::string *)((char *)p_buf + size);
      if (size >= 40)
      {
        std::string::size_type v23 = v14;
        uint64_t v24 = size;
        unsigned __int8 v25 = p_buf;
        do
        {
          int v26 = (std::string *)memchr(v25, 99, v24 - 39);
          if (!v26) {
            break;
          }
          uint64_t v20 = v26;
          if (!memcmp(v26, "coex_rx_total_grant_duty_cycle_histogram", 0x28uLL)) {
            goto LABEL_22;
          }
          unsigned __int8 v25 = (std::string *)((char *)&v20->__r_.__value_.__l.__data_ + 1);
          uint64_t v24 = (char *)v17 - ((char *)&v20->__r_.__value_.__l.__data_ + 1);
        }

        while (v24 > 39);
        uint64_t v20 = (std::string *)((char *)p_buf + size);
LABEL_22:
        uint64_t v27 = size;
        unsigned int v28 = p_buf;
        do
        {
          int v29 = (std::string *)memchr(v28, 99, v27 - 39);
          if (!v29) {
            break;
          }
          id v21 = v29;
          if (!memcmp(v29, v10, 0x28uLL)) {
            goto LABEL_27;
          }
          unsigned int v28 = (std::string *)((char *)&v21->__r_.__value_.__l.__data_ + 1);
          uint64_t v27 = (char *)v17 - ((char *)&v21->__r_.__value_.__l.__data_ + 1);
        }

        while (v27 > 39);
        id v21 = (std::string *)((char *)p_buf + size);
LABEL_27:
        BOOL v82 = v21 != v17;
        if (size >= 46)
        {
          uint64_t v30 = size;
          unsigned int v31 = p_buf;
          do
          {
            id v32 = (std::string *)memchr(v31, 99, v30 - 45);
            if (!v32) {
              break;
            }
            char v19 = v32;
            if (!memcmp(v32, "coex_rx_unsolicited_grant_duty_cycle_histogram", 0x2EuLL))
            {
              BOOL v78 = v19 != v17;
              goto LABEL_112;
            }

            unsigned int v31 = (std::string *)((char *)&v19->__r_.__value_.__l.__data_ + 1);
            uint64_t v30 = (char *)v17 - ((char *)&v19->__r_.__value_.__l.__data_ + 1);
          }

          while (v30 > 45);
          BOOL v78 = 0;
          char v19 = (std::string *)((char *)p_buf + size);
LABEL_112:
          uint64_t v56 = size;
          unsigned int v57 = p_buf;
          while (1)
          {
            BOOL v58 = __OFSUB__(v56, 46LL);
            uint64_t v59 = v56 - 46;
            if (v58) {
              break;
            }
            if (v59 != -1)
            {
              uint64_t v60 = (std::string *)memchr(v57, 99, v59 + 1);
              if (v60)
              {
                id v22 = v60;
                if (!memcmp(v60, "coex_tx_unsolicited_grant_duty_cycle_histogram", 0x2EuLL)) {
                  goto LABEL_35;
                }
                unsigned int v57 = (std::string *)((char *)&v22->__r_.__value_.__l.__data_ + 1);
                uint64_t v56 = (char *)v17 - ((char *)&v22->__r_.__value_.__l.__data_ + 1);
                if (v56 > 45) {
                  continue;
                }
              }
            }

            goto LABEL_34;
          }

LABEL_105:
        goto LABEL_107;
      }

      BOOL v51 = v78;
      if (v19 != p_buf) {
        BOOL v51 = 0;
      }
      if (v51 && v90 != -1LL && v14 != -1LL)
      {
        if (!v14) {
          goto LABEL_141;
        }
        size_t v10 = v33;
        std::string::basic_string(&__str, &buf, v90 + 1, v14 - 1, (std::allocator<char> *)&v95);
        unsigned __int8 v52 = std::stoi(&__str, 0LL, 10);
        if ((v52 & 0xFCu) > 0x13) {
          goto LABEL_105;
        }
        int v46 = sub_1000BE984(4, uint64);
        int v47 = v52;
        if (v52 > 0x13u) {
          goto LABEL_142;
        }
        char v48 = v102;
        goto LABEL_104;
      }

      if (v22 != v17 && v22 == p_buf && v90 != -1LL && v14 != -1LL) {
        break;
      }
      BOOL v54 = v35 == p_buf && v34;
      if (v54 && v90 != -1LL && v14 != -1LL)
      {
        if (!v14) {
          goto LABEL_141;
        }
        size_t v10 = v33;
        std::string::basic_string(&__str, &buf, v90 + 1, v14 - 1, (std::allocator<char> *)&v95);
        unsigned __int8 v55 = std::stoi(&__str, 0LL, 10);
        if ((v55 & 0xF0) != 0) {
          goto LABEL_105;
        }
        int v46 = sub_1000BE984(4, uint64);
        int v47 = v55;
        if (v55 > 0xFu) {
          goto LABEL_142;
        }
        char v48 = v98;
LABEL_104:
        *(_DWORD *)&v48[4 * v47] = v46;
        goto LABEL_105;
      }

      size_t v10 = v33;
      if (v36 != v17 && v36 == p_buf && v90 != -1LL && v14 != -1LL)
      {
        if (!v14) {
          goto LABEL_141;
        }
        std::string::basic_string(&__str, &buf, v90 + 1, v14 - 1, (std::allocator<char> *)&v95);
        unsigned int v61 = std::stoi(&__str, 0LL, 10);
        if (v61 <= 0xA) {
          *((_DWORD *)v97 + v61) = sub_1000BE984(4, uint64);
        }
        goto LABEL_105;
      }

  unsigned __int8 v53 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_rxErrorDestAddrFiltered));
  [v3 setObject:v53 forKey:@"rx_error_dest_addr_filtered"];

  uint64_t v8 = self->_has;
  if ((*(_DWORD *)&v8 & 0x80000000) == 0)
  {
LABEL_48:
    if ((*(void *)&v8 & 0x100000000LL) == 0) {
      goto LABEL_49;
    }
    goto LABEL_107;
  }

  PBDataWriterWriteUint32Field(v7, self->_rxErrorDestAddrFiltered, 44LL);
  uint64_t v6 = self->_has;
  if ((*(_DWORD *)&v6 & 0x80000000) == 0)
  {
LABEL_48:
    if ((*(void *)&v6 & 0x100000000LL) == 0) {
      goto LABEL_49;
    }
    goto LABEL_107;
  }

  v4[27] = self->_rxErrorDestAddrFiltered;
  *((void *)v4 + 31) |= 0x2000000uLL;
  uint64_t v6 = self->_has;
  if ((*(_DWORD *)&v6 & 0x80000000) == 0)
  {
LABEL_48:
    if ((*(void *)&v6 & 0x100000000LL) == 0) {
      goto LABEL_49;
    }
    goto LABEL_107;
  }

  *((_DWORD *)v6 + 34) = self->_rxErrorTimeslotEnded;
  v6[31] |= (unint64_t)&_mh_execute_header;
  size_t v10 = self->_has;
  if ((*(_DWORD *)&v10 & 0x40000) == 0)
  {
LABEL_48:
    if ((*(_DWORD *)&v10 & 0x1000000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_107;
  }

  char v19 = 0LL;
  if ((*(_DWORD *)&v4 & 0x1000000) != 0)
  {
LABEL_53:
    uint64_t v20 = 2654435761LL * self->_rxErrorDelayedTimeslotEnded;
    if ((*(_DWORD *)&v4 & 0x20000000) != 0) {
      goto LABEL_54;
    }
    goto LABEL_107;
  }

  self->_rxErrorReceiveFailed = v5[32];
  *(void *)&self->_has |= 0x40000000uLL;
  size_t v9 = *((void *)v5 + 31);
  if ((v9 & 0x10000000) == 0)
  {
LABEL_52:
    if ((v9 & 0x800000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_107;
  }

void sub_1000C7B6C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20, void *a21, void *a22, uint64_t a23, uint64_t a24, void *a25, void *__p, uint64_t a27, int a28, __int16 a29, char a30, char a31, char a32, uint64_t a33, uint64_t a34, uint64_t a35, void *a36, uint64_t a37, int a38, __int16 a39, char a40, char a41)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a41 < 0) {
    operator delete(a36);
  }

  sub_10000D448((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void sub_1000C7D2C(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v99 = a2;
  id v6 = a3;
  v107[0] = 0LL;
  v107[1] = 0LL;
  unsigned int v106 = v107;
  uint64_t v112 = 0LL;
  memset(v111, 0, sizeof(v111));
  memset(v110, 0, 60);
  id v100 = v6;
  id v101 = v5;
  xpc_type_t type = xpc_get_type(v5);
  id v104 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  id v103 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  if (type != (xpc_type_t)&_xpc_type_array)
  {
    uint64_t v8 = sub_1000160F4("com.apple.wpantund.awd", "default");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_10020D7A4();
    }
    goto LABEL_217;
  }

  size_t count = xpc_array_get_count(v5);
  size_t v10 = sub_1000160F4("com.apple.wpantund.awd", "default");
  size_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = count;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "CAMetrics : now onto Coex array with size %ld.",  (uint8_t *)&buf,  0xCu);
  }

  if (count)
  {
    size_t v12 = 0LL;
    size_t v9 = 0LL;
    uint64_t v97 = 0LL;
    uint64_t v98 = 0LL;
    size_t v13 = "key";
    while (1)
    {
      xpc_object_t dictionary = xpc_array_get_dictionary(v5, v12);
      std::string::size_type v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(dictionary);

      size_t v9 = v15;
      string = (char *)xpc_dictionary_get_string(v15, v13);
      sub_10000AC00(&buf, string);
      unsigned int uint64 = xpc_dictionary_get_uint64(v15, "value");
      std::string::size_type size = buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_ == 16)
      {
        if (*(void *)buf.__r_.__value_.__l.__data_ == 0x5F78745F78656F63LL
          && *(void *)(buf.__r_.__value_.__r.__words[0] + 8) == 0x7374736575716572LL)
        {
LABEL_76:
          unsigned int v33 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, uint64));
          BOOL v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
          if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            p_std::string buf = &buf;
          }
          else {
            p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          goto LABEL_193;
        }

        std::string::size_type size = buf.__r_.__value_.__l.__size_;
      }

      else if (buf.__r_.__value_.__l.__size_ == 23)
      {
        BOOL v21 = *(void *)buf.__r_.__value_.__l.__data_ == 0x736E755F78656F63LL
           && *(void *)(buf.__r_.__value_.__r.__words[0] + 8) == 0x6465746963696C6FLL;
        if (v21 && *(void *)(buf.__r_.__value_.__r.__words[0] + 15) == 0x73746E6172675F64LL)
        {
LABEL_105:
          __int128 v42 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, uint64));
          BOOL v34 = (void *)objc_claimAutoreleasedReturnValue(v42);
          if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            p_std::string buf = &buf;
          }
          else {
            p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          goto LABEL_193;
        }
      }

      if (size == 24)
      {
        if (*(void *)buf.__r_.__value_.__l.__data_ == 0x5F78745F78656F63LL
          && *(void *)(buf.__r_.__value_.__r.__words[0] + 8) == 0x5F6465746E617267LL
          && *(void *)(buf.__r_.__value_.__r.__words[0] + 16) == 0x7374736575716572LL)
        {
LABEL_102:
          HIDWORD(v98) = sub_1000BE984(4, uint64);
          BOOL v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:"));
          if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            p_std::string buf = &buf;
          }
          else {
            p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          goto LABEL_193;
        }

        std::string::size_type size = buf.__r_.__value_.__l.__size_;
      }

      if (size == 23)
      {
        if (*(void *)buf.__r_.__value_.__l.__data_ == 0x5F78745F78656F63LL
          && *(void *)(buf.__r_.__value_.__r.__words[0] + 8) == 0x725F6465696E6564LL
          && *(void *)(buf.__r_.__value_.__r.__words[0] + 15) == 0x7374736575716572LL)
        {
LABEL_108:
          LODWORD(v98) = sub_1000BE984(4, uint64);
          BOOL v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:"));
          if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            p_std::string buf = &buf;
          }
          else {
            p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          goto LABEL_193;
        }

        std::string::size_type size = buf.__r_.__value_.__l.__size_;
      }

      if (size == 16)
      {
        if (*(void *)buf.__r_.__value_.__l.__data_ == 0x5F78725F78656F63LL
          && *(void *)(buf.__r_.__value_.__r.__words[0] + 8) == 0x7374736575716572LL)
        {
LABEL_99:
          __int128 v41 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, uint64));
          BOOL v34 = (void *)objc_claimAutoreleasedReturnValue(v41);
          if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            p_std::string buf = &buf;
          }
          else {
            p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          goto LABEL_193;
        }

        std::string::size_type size = buf.__r_.__value_.__l.__size_;
      }

      if (size == 24)
      {
        if (*(void *)buf.__r_.__value_.__l.__data_ == 0x5F78725F78656F63LL
          && *(void *)(buf.__r_.__value_.__r.__words[0] + 8) == 0x5F6465746E617267LL
          && *(void *)(buf.__r_.__value_.__r.__words[0] + 16) == 0x7374736575716572LL)
        {
LABEL_187:
          HIDWORD(v97) = sub_1000BE984(4, uint64);
          BOOL v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:"));
          if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            p_std::string buf = &buf;
          }
          else {
            p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
LABEL_193:
          int v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", p_buf));
          [v6 setObject:v34 forKey:v72];

          goto LABEL_135;
        }

        std::string::size_type size = buf.__r_.__value_.__l.__size_;
      }

      if (size == 23)
      {
        unsigned int v31 = (std::string *)buf.__r_.__value_.__r.__words[0];
LABEL_119:
        std::string::size_type v45 = v31->__r_.__value_.__r.__words[0];
        std::string::size_type v46 = v31->__r_.__value_.__l.__size_;
        uint64_t v47 = *(std::string::size_type *)((char *)&v31->__r_.__value_.__r.__words[1] + 7);
        if (v45 == 0x5F78725F78656F63LL && v46 == 0x725F6465696E6564LL && v47 == 0x7374736575716572LL)
        {
          LODWORD(v97) = sub_1000BE984(4, uint64);
          BOOL v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:"));
          if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            p_std::string buf = &buf;
          }
          else {
            p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          goto LABEL_193;
        }
      }

LABEL_126:
      unsigned __int8 v50 = v13;
      std::string::size_type v51 = std::string::find(&buf, 91, 0LL);
      std::string::size_type v52 = std::string::find(&buf, 93, 0LL);
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unsigned __int8 v53 = &buf;
      }
      else {
        unsigned __int8 v53 = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v54 = buf.__r_.__value_.__s.__size_;
      }
      else {
        uint64_t v54 = buf.__r_.__value_.__l.__size_;
      }
      if (v54 >= 28)
      {
        std::string::size_type v55 = v52;
        uint64_t v56 = (std::string *)((char *)v53 + v54);
        uint64_t v57 = v54;
        BOOL v58 = v53;
        do
        {
          uint64_t v59 = memchr(v58, 99, v57 - 27);
          if (!v59) {
            break;
          }
          uint64_t v60 = (std::string *)v59;
          if (*v59 == 0x5F78725F78656F63LL
            && v59[1] == 0x69745F746E617267LL
            && v59[2] == 0x6F747369685F656DLL
            && *((_DWORD *)v59 + 6) == 1835102823LL)
          {
            goto LABEL_153;
          }

          BOOL v58 = (std::string *)((char *)v59 + 1);
          uint64_t v57 = (char *)v56 - ((char *)&v60->__r_.__value_.__l.__data_ + 1);
        }

        while (v57 > 27);
        uint64_t v60 = (std::string *)((char *)v53 + v54);
LABEL_153:
        uint64_t v64 = v53;
        do
        {
          int v65 = (std::string *)memchr(v64, 99, v54 - 27);
          if (!v65) {
            break;
          }
          if (v65->__r_.__value_.__r.__words[0] == 0x5F78745F78656F63LL
            && v65->__r_.__value_.__l.__size_ == 0x69745F746E617267LL
            && v65->__r_.__value_.__l.__cap_ == 0x6F747369685F656DLL
            && LODWORD(v65[1].__r_.__value_.__l.__data_) == 1835102823LL)
          {
            goto LABEL_167;
          }

          uint64_t v64 = (std::string *)((char *)&v65->__r_.__value_.__l.__data_ + 1);
          uint64_t v54 = (char *)v56 - (char *)v64;
        }

        while ((char *)v56 - (char *)v64 > 27);
        int v65 = v56;
LABEL_167:
        if (v60 != v56 && v60 == v53 && v51 != -1LL && v55 != -1LL)
        {
          if (!v55) {
            goto LABEL_218;
          }
          size_t v13 = v50;
          std::string::basic_string(&__str, &buf, v51 + 1, v55 - 1, (std::allocator<char> *)&v108);
          id v6 = v100;
          id v5 = v101;
          unsigned __int8 v69 = std::stoi(&__str, 0LL, 10);
          if ((v69 & 0xFEu) <= 0xD)
          {
            int v70 = sub_1000BE984(4, uint64);
            if (v69 >= 0xEu) {
              goto LABEL_221;
            }
            v111[v69] = v70;
          }

          goto LABEL_135;
        }

        if (v65 == v56 || v65 != v53)
        {
          id v6 = v100;
          id v5 = v101;
        }

        else
        {
          size_t v13 = v50;
          if (v51 == -1LL || v55 == -1LL)
          {
            id v6 = v100;
            id v5 = v101;
            goto LABEL_135;
          }

          if (!v55) {
LABEL_218:
          }
            __break(0x5515u);
          std::string::basic_string(&__str, &buf, v51 + 1, v55 - 1, (std::allocator<char> *)&v108);
          id v6 = v100;
          id v5 = v101;
          unsigned int v71 = std::stoi(&__str, 0LL, 10);
          if (v71 <= 0xE) {
            *((_DWORD *)v110 + v71) = sub_1000BE984(4, uint64);
          }
        }
      }

      else
      {
        id v6 = v100;
        id v5 = v101;
      }

      size_t v13 = v50;
LABEL_135:
      if (++v12 == count) {
        goto LABEL_196;
      }
    }

    if (buf.__r_.__value_.__s.__size_ == 16)
    {
      if (buf.__r_.__value_.__r.__words[0] == 0x5F78745F78656F63LL
        && buf.__r_.__value_.__l.__size_ == 0x7374736575716572LL)
      {
        goto LABEL_76;
      }

      if (buf.__r_.__value_.__r.__words[0] == 0x5F78725F78656F63LL
        && buf.__r_.__value_.__l.__size_ == 0x7374736575716572LL)
      {
        goto LABEL_99;
      }

      goto LABEL_126;
    }

    if (buf.__r_.__value_.__s.__size_ != 23)
    {
      if (buf.__r_.__value_.__s.__size_ == 24)
      {
        if (buf.__r_.__value_.__r.__words[0] == 0x5F78745F78656F63LL
          && buf.__r_.__value_.__l.__size_ == 0x5F6465746E617267LL
          && buf.__r_.__value_.__l.__cap_ == 0x7374736575716572LL)
        {
          goto LABEL_102;
        }

        if (buf.__r_.__value_.__r.__words[0] == 0x5F78725F78656F63LL
          && buf.__r_.__value_.__l.__size_ == 0x5F6465746E617267LL
          && buf.__r_.__value_.__l.__cap_ == 0x7374736575716572LL)
        {
          goto LABEL_187;
        }
      }

      goto LABEL_126;
    }

    if (buf.__r_.__value_.__r.__words[0] == 0x736E755F78656F63LL
      && buf.__r_.__value_.__l.__size_ == 0x6465746963696C6FLL
      && *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 7) == 0x73746E6172675F64LL)
    {
      goto LABEL_105;
    }

    if (buf.__r_.__value_.__r.__words[0] == 0x5F78745F78656F63LL
      && buf.__r_.__value_.__l.__size_ == 0x725F6465696E6564LL
      && *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 7) == 0x7374736575716572LL)
    {
      goto LABEL_108;
    }

    unsigned int v31 = &buf;
    goto LABEL_119;
  }

  uint64_t v97 = 0LL;
  uint64_t v98 = 0LL;
  size_t v9 = 0LL;
LABEL_196:
  for (uint64_t i = 0LL; i != 14; ++i)
  {
    int v74 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, v111[i]));
    id v75 = (void *)objc_claimAutoreleasedReturnValue(v74);
    [v104 addObject:v75];
  }

  [v99 setObject:v104 forKey:@"coex_rx_grant_time_histogram"];
  for (uint64_t j = 0LL; j != 60; j += 4LL)
  {
    unsigned int v77 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, *(_DWORD *)((char *)v110 + j)));
    BOOL v78 = (void *)objc_claimAutoreleasedReturnValue(v77);
    [v103 addObject:v78];
  }

  [v99 setObject:v103 forKey:@"coex_tx_grant_time_histogram"];
  unsigned int v79 = HIDWORD(v98) + v98;
  if (!__CFADD__(HIDWORD(v98), (_DWORD)v98))
  {
    unsigned int v80 = 100;
    if (v79)
    {
      uint64_t v81 = 100LL * HIDWORD(v98);
      if ((v81 & 0xFFFFFFFF00000000LL) != 0) {
        goto LABEL_219;
      }
      unsigned int v80 = v81 / v79;
    }

    BOOL v82 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", sub_1000BE984(4, v80));
    uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue(v82);
    [v6 setObject:v83 forKey:@"coex_tx_granted_requests_percentage"];

    unsigned int v84 = HIDWORD(v97) + v97;
    if (__CFADD__(HIDWORD(v97), (_DWORD)v97)) {
      goto LABEL_220;
    }
    unsigned int v85 = 100;
    if (v84)
    {
      uint64_t v86 = 100LL * HIDWORD(v97);
      if ((v86 & 0xFFFFFFFF00000000LL) != 0) {
        goto LABEL_219;
      }
      unsigned int v85 = v86 / v84;
    }

    id v87 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", sub_1000BE984(4, v85));
    char v88 = (void *)objc_claimAutoreleasedReturnValue(v87);
    [v6 setObject:v88 forKey:@"coex_rx_granted_requests_percentage"];

    if (!v79)
    {
      unsigned int v90 = 0;
      goto LABEL_212;
    }

    uint64_t v89 = 100LL * v98;
    if ((v89 & 0xFFFFFFFF00000000LL) == 0)
    {
      unsigned int v90 = v89 / v79;
LABEL_212:
      __int128 v91 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", sub_1000BE984(4, v90));
      __int128 v92 = (void *)objc_claimAutoreleasedReturnValue(v91);
      [v6 setObject:v92 forKey:@"coex_tx_denied_requests_percentage"];

      if (!v84)
      {
        unsigned int v94 = 0;
        goto LABEL_216;
      }

      uint64_t v93 = 100LL * v97;
      if ((v93 & 0xFFFFFFFF00000000LL) == 0)
      {
        unsigned int v94 = v93 / v84;
LABEL_216:
        char v95 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, v94));
        uint64_t v96 = (void *)objc_claimAutoreleasedReturnValue(v95);
        [v6 setObject:v96 forKey:@"coex_rx_denied_requests_percentage"];

LABEL_217:
        sub_10000D448((uint64_t)&v106);

        return;
      }
    }

LABEL_220:
  __break(0x5500u);
LABEL_221:
  __break(0x5512u);
}

void sub_1000C8B44( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, void *__p, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }

  sub_10000D448((uint64_t)&a24);
  _Unwind_Resume(a1);
}

size_t sub_1000C8D20(void *a1, void *a2)
{
  xpc_object_t xarray = a1;
  id v30 = a2;
  if (xpc_get_type(xarray) == (xpc_type_t)&_xpc_type_array)
  {
    size_t count = xpc_array_get_count(xarray);
    uint64_t v7 = sub_1000160F4("com.apple.wpantund.awd", "default");
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 134217984;
      *(void *)&uint8_t buf[4] = count;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "CAMetrics : CAMetricsHandlers_handle_getprop_threadmle - reading array with size %ld.",  buf,  0xCu);
    }

    if (count)
    {
      size_t v9 = 0LL;
      id v5 = 0LL;
      do
      {
        xpc_object_t dictionary = xpc_array_get_dictionary(xarray, v9);
        size_t v11 = (void *)objc_claimAutoreleasedReturnValue(dictionary);

        id v5 = v11;
        string = (char *)xpc_dictionary_get_string(v11, "key");
        sub_10000AC00(buf, string);
        unsigned int uint64 = xpc_dictionary_get_uint64(v11, "value");
        std::string::size_type v14 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(3, uint64));
        std::string::size_type v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
        if (v32 >= 0) {
          std::string::size_type v16 = buf;
        }
        else {
          std::string::size_type v16 = *(_BYTE **)buf;
        }
        int v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v16, xarray));
        [v30 setObject:v15 forKey:v17];

        if (v32 < 0) {
          operator delete(*(void **)buf);
        }
        ++v9;
      }

      while (count != v9);
      size_t count = 0LL;
    }

    else
    {
      id v5 = 0LL;
    }
  }

  else
  {
    id v3 = sub_1000160F4("com.apple.wpantund.awd", "default");
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10020D7D0();
    }

    id v5 = 0LL;
    size_t count = 1LL;
  }

  BOOL v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "objectForKey:", @"disabled_role_count", xarray));
  [v18 unsignedIntValue];

  char v19 = (void *)objc_claimAutoreleasedReturnValue([v30 objectForKey:@"detached_role_count"]);
  [v19 unsignedIntValue];

  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v30 objectForKey:@"child_role_count"]);
  [v20 unsignedIntValue];

  BOOL v21 = (void *)objc_claimAutoreleasedReturnValue([v30 objectForKey:@"router_role_count"]);
  [v21 unsignedIntValue];

  id v22 = (void *)objc_claimAutoreleasedReturnValue([v30 objectForKey:@"leader_role_count"]);
  [v22 unsignedIntValue];

  std::string::size_type v23 = (void *)objc_claimAutoreleasedReturnValue([v30 objectForKey:@"attach_attempts"]);
  [v23 unsignedIntValue];

  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v30 objectForKey:@"better_partition_attach_attempts"]);
  [v24 unsignedIntValue];

  unsigned __int8 v25 = (void *)objc_claimAutoreleasedReturnValue([v30 objectForKey:@"partition_id_changes_count"]);
  [v25 unsignedIntValue];

  int v26 = (void *)objc_claimAutoreleasedReturnValue([v30 objectForKey:@"parent_changes_count"]);
  [v26 unsignedIntValue];

  return count;
}

void sub_1000C908C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

void sub_1000C919C(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (xpc_get_type(v3) != (xpc_type_t)&_xpc_type_array)
  {
    id v5 = sub_1000160F4("com.apple.wpantund.awd", "default");
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_10020D7FC();
    }
    goto LABEL_141;
  }

  size_t count = xpc_array_get_count(v3);
  uint64_t v8 = sub_1000160F4("com.apple.wpantund.awd", "default");
  size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = count;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "CAMetrics : CAMetricsHandlers_handle_getprop_allipv6 - reading array with size %ld.",  (uint8_t *)&buf,  0xCu);
  }

  if (count)
  {
    size_t v10 = 0LL;
    uint64_t v59 = 0LL;
    uint64_t v60 = 0LL;
    uint64_t v61 = 0LL;
    id v6 = 0LL;
    while (1)
    {
      xpc_object_t dictionary = xpc_array_get_dictionary(v3, v10);
      size_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(dictionary);

      id v6 = v12;
      string = (char *)xpc_dictionary_get_string(v12, "key");
      sub_10000AC00(&buf, string);
      unsigned int uint64 = xpc_dictionary_get_uint64(v12, "value");
      if (v64 < 0)
      {
        uint64_t v19 = *((void *)&buf + 1);
        if (*((void *)&buf + 1) == 10LL)
        {
          if (*(void *)buf == 0x65636375735F7874LL && *(_WORD *)(buf + 8) == 29555) {
            goto LABEL_62;
          }
          if (*(void *)buf == 0x756C6961665F7874LL && *(_WORD *)(buf + 8) == 25970) {
            goto LABEL_63;
          }
          if (*(void *)buf == 0x65636375735F7872LL && *(_WORD *)(buf + 8) == 29555) {
            goto LABEL_64;
          }
          if ((v64 & 0x80) == 0)
          {
            if (v64 != 10) {
              goto LABEL_120;
            }
LABEL_57:
            if ((void)buf != 0x756C6961665F7872LL || WORD4(buf) != 25970) {
              goto LABEL_120;
            }
LABEL_119:
            LODWORD(v59) = sub_1000BE984(3, uint64);
            goto LABEL_120;
          }

          if (*(void *)buf == 0x756C6961665F7872LL && *(_WORD *)(buf + 8) == 25970) {
            goto LABEL_119;
          }
          uint64_t v19 = *((void *)&buf + 1);
        }

        if (v19 != 18) {
          goto LABEL_109;
        }
        if (*(void *)buf == 0x705F7070615F7874LL
          && *(void *)(buf + 8) == 0x65636375735F746BLL
          && *(_WORD *)(buf + 16) == 29555)
        {
          goto LABEL_117;
        }

        uint64_t v19 = *((void *)&buf + 1);
        if (*((void *)&buf + 1) != 18LL) {
          goto LABEL_109;
        }
        if (*(void *)buf == 0x705F7070615F7874LL
          && *(void *)(buf + 8) == 0x756C6961665F746BLL
          && *(_WORD *)(buf + 16) == 25970)
        {
          goto LABEL_118;
        }

        if ((v64 & 0x80) == 0)
        {
          if (v64 == 11)
          {
LABEL_88:
            if (((void)buf != 0x79616C65645F7874LL || *(void *)((char *)&buf + 3) != 0x6E696D79616C6564LL)
              && ((void)buf != 0x79616C65645F7874LL || *(void *)((char *)&buf + 3) != 0x78616D79616C6564LL))
            {
LABEL_110:
              p___int128 buf = (uint64_t *)&buf;
LABEL_111:
              uint64_t v37 = *p_buf;
              uint64_t v38 = *(uint64_t *)((char *)p_buf + 3);
              if (v37 != 0x79616C65645F7874LL || v38 != 0x67766179616C6564LL) {
                goto LABEL_120;
              }
            }

LABEL_116:
            sub_1000BE984(3, uint64);
          }
        }

        else
        {
LABEL_109:
          if (v19 == 11)
          {
            if (*(void *)buf == 0x79616C65645F7874LL && *(void *)(buf + 3) == 0x6E696D79616C6564LL) {
              goto LABEL_116;
            }
            if (*((void *)&buf + 1) == 11LL)
            {
              p___int128 buf = (uint64_t *)buf;
              if (*(void *)buf == 0x79616C65645F7874LL && *(void *)(buf + 3) == 0x78616D79616C6564LL) {
                goto LABEL_116;
              }
              if (v64 < 0) {
                goto LABEL_111;
              }
              if (v64 == 11) {
                goto LABEL_110;
              }
            }
          }
        }
      }

      else
      {
        switch(v64)
        {
          case 10:
            if ((void)buf != 0x65636375735F7874LL || WORD4(buf) != 29555)
            {
              if ((void)buf != 0x756C6961665F7874LL || WORD4(buf) != 25970)
              {
                if ((void)buf != 0x65636375735F7872LL || WORD4(buf) != 29555) {
                  goto LABEL_57;
                }
LABEL_64:
                LODWORD(v60) = sub_1000BE984(3, uint64);
                break;
              }

  char v64 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_sleepState));
  [v3 setObject:v64 forKey:@"sleep_state"];

  uint64_t v8 = self->_has;
  if ((*(_BYTE *)&v8 & 4) == 0)
  {
LABEL_59:
    if ((*(_BYTE *)&v8 & 2) == 0) {
      goto LABEL_60;
    }
LABEL_118:
    unsigned int v66 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_energyDetectedEvents));
    [v3 setObject:v66 forKey:@"energy_detected_events"];

    if ((*(void *)&self->_has & 0x20) == 0) {
      goto LABEL_62;
    }
    goto LABEL_61;
  }

  PBDataWriterWriteUint32Field(v7, self->_sleepState, 55LL);
  id v6 = self->_has;
  if ((*(_BYTE *)&v6 & 4) == 0)
  {
LABEL_59:
    if ((*(_BYTE *)&v6 & 2) == 0) {
      goto LABEL_60;
    }
LABEL_118:
    PBDataWriterWriteUint32Field(v7, self->_energyDetectedEvents, 57LL);
    if ((*(void *)&self->_has & 0x20) == 0) {
      goto LABEL_62;
    }
    goto LABEL_61;
  }

  v4[38] = self->_sleepState;
  *((void *)v4 + 31) |= 0x200000000uLL;
  id v6 = self->_has;
  if ((*(_BYTE *)&v6 & 4) == 0)
  {
LABEL_59:
    if ((*(_BYTE *)&v6 & 2) == 0) {
      goto LABEL_60;
    }
LABEL_118:
    v4[3] = self->_energyDetectedEvents;
    *((void *)v4 + 31) |= 2uLL;
    if ((*(void *)&self->_has & 0x20) == 0) {
      goto LABEL_62;
    }
    goto LABEL_61;
  }

  self->_rxErrorAckFailedRadioState = v5[24];
  *(void *)&self->_has |= 0x400000uLL;
  size_t v9 = *((void *)v5 + 31);
  if ((v9 & 0x200000) == 0)
  {
LABEL_63:
    if ((v9 & 0x100000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_118;
  }

  BOOL v43 = std::string::find(&buf, 91, 0LL);
  unsigned int v44 = std::string::find(&buf, 93, 0LL);
  if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    unsigned int v45 = &buf;
  }
  else {
    unsigned int v45 = (std::string *)buf.__r_.__value_.__r.__words[0];
  }
  if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v46 = buf.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v46 = buf.__r_.__value_.__l.__size_;
  }
  if (v46 < 28) {
    goto LABEL_173;
  }
  uint64_t v47 = v44;
  char v48 = (std::string *)((char *)v45 + v46);
  unsigned int v49 = v46;
  unsigned int v50 = v45;
  do
  {
    uint64_t v51 = memchr(v50, 99, v49 - 27);
    if (!v51) {
      break;
    }
    std::string::size_type v52 = (std::string *)v51;
    if (*v51 == 0x5F78725F78656F63LL
      && v51[1] == 0x69745F746E617267LL
      && v51[2] == 0x6F747369685F656DLL
      && *((_DWORD *)v51 + 6) == 1835102823LL)
    {
      goto LABEL_137;
    }

    unsigned int v50 = (std::string *)((char *)v51 + 1);
    unsigned int v49 = (char *)v48 - ((char *)&v52->__r_.__value_.__l.__data_ + 1);
  }

  while (v49 > 27);
  std::string::size_type v52 = (std::string *)((char *)v45 + v46);
LABEL_137:
  uint64_t v56 = v45;
  do
  {
    uint64_t v57 = (std::string *)memchr(v56, 99, v46 - 27);
    if (!v57) {
      break;
    }
    if (v57->__r_.__value_.__r.__words[0] == 0x5F78745F78656F63LL
      && v57->__r_.__value_.__l.__size_ == 0x69745F746E617267LL
      && v57->__r_.__value_.__l.__cap_ == 0x6F747369685F656DLL
      && LODWORD(v57[1].__r_.__value_.__l.__data_) == 1835102823LL)
    {
      goto LABEL_151;
    }

    uint64_t v56 = (std::string *)((char *)&v57->__r_.__value_.__l.__data_ + 1);
    uint64_t v46 = (char *)v48 - (char *)v56;
  }

  while ((char *)v48 - (char *)v56 > 27);
  uint64_t v57 = v48;
LABEL_151:
  if (v52 == v48 || v52 != v45 || v43 == -1LL || v47 == -1LL)
  {
    std::string::size_type v16 = v57 == v48;
    id v3 = v80;
    size_t count = v78;
    if (!v16 && v57 == v45 && v43 != -1LL && v47 != -1LL)
    {
      if (!v47) {
        goto LABEL_194;
      }
      std::string::basic_string(&__str, &buf, v43 + 1, v47 - 1, (std::allocator<char> *)&v84);
      __int16 v63 = std::stoi(&__str, 0LL, 10);
      if (v63 <= 0xE) {
        *((_DWORD *)v86 + v63) = sub_1000BE984(4, uint64);
      }
      size_t count = v78;
    }

    goto LABEL_173;
  }

  id v3 = v80;
  size_t count = v78;
  if (!v47) {
    goto LABEL_194;
  }
  std::string::basic_string(&__str, &buf, v43 + 1, v47 - 1, (std::allocator<char> *)&v84);
  uint64_t v61 = std::stoi(&__str, 0LL, 10);
  if ((v61 & 0xFEu) > 0xD) {
    goto LABEL_159;
  }
  double result = sub_1000BE984(4, uint64);
  if (v61 < 0xEu)
  {
    v87[v61] = result;
LABEL_159:
    goto LABEL_173;
  }

  __break(0x5512u);
  return result;
}

void sub_1000C99D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_1000C9A78(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (xpc_get_type(v3) != (xpc_type_t)&_xpc_type_array)
  {
    id v5 = sub_1000160F4("com.apple.wpantund.awd", "default");
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_10020D828();
    }
    goto LABEL_117;
  }

  size_t count = xpc_array_get_count(v3);
  uint64_t v8 = sub_1000160F4("com.apple.wpantund.awd", "default");
  size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 134217984;
    *(void *)&uint8_t buf[4] = count;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "CAMetrics : CAMetricsHandlers_handle_getprop_trel_link_counters - reading array with size %ld.",  buf,  0xCu);
  }

  if (count)
  {
    size_t v10 = 0LL;
    uint64_t v52 = 0LL;
    uint64_t v53 = 0LL;
    id v6 = 0LL;
    while (1)
    {
      xpc_object_t dictionary = xpc_array_get_dictionary(v3, v10);
      size_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(dictionary);

      id v6 = v12;
      string = (char *)xpc_dictionary_get_string(v12, "key");
      sub_10000AC00(buf, string);
      unsigned int uint64 = xpc_dictionary_get_uint64(v12, "value");
      uint64_t v25 = *(void *)&buf[8];
      if (*(void *)&buf[8] == 12LL
        && **(void **)buf == 0x5F6C6572745F7874LL
        && *(_DWORD *)(*(void *)buf + 8LL) == 1937009520LL)
      {
LABEL_93:
        LODWORD(v53) = sub_1000BE984(3, uint64);
        goto LABEL_96;
      }

      if (*(void *)&buf[8] == 22LL)
      {
        if (**(void **)buf == 0x5F6C6572745F7874LL
          && *(void *)(*(void *)buf + 8LL) == 0x73616364616F7262LL
          && *(void *)(*(void *)buf + 14LL) == 0x73746B705F747361LL)
        {
LABEL_92:
          HIDWORD(v53) = sub_1000BE984(3, uint64);
          goto LABEL_96;
        }

        uint64_t v25 = *(void *)&buf[8];
      }

      if (v25 == 12)
      {
        if (**(void **)buf == 0x5F6C6572745F7872LL && *(_DWORD *)(*(void *)buf + 8LL) == 1937009520LL)
        {
LABEL_94:
          HIDWORD(v52) = sub_1000BE984(3, uint64);
          goto LABEL_96;
        }

        uint64_t v25 = *(void *)&buf[8];
      }

      if (v25 == 22)
      {
        if (**(void **)buf == 0x5F6C6572745F7872LL
          && *(void *)(*(void *)buf + 8LL) == 0x73616364616F7262LL
          && *(void *)(*(void *)buf + 14LL) == 0x73746B705F747361LL)
        {
LABEL_95:
          LODWORD(v52) = sub_1000BE984(3, uint64);
          goto LABEL_96;
        }

        uint64_t v25 = *(void *)&buf[8];
      }

      if (v25 == 16)
      {
        if (**(void **)buf == 0x5F6C6572745F7872LL && *(void *)(*(void *)buf + 8LL) == 0x73746B705F6B6361LL) {
          goto LABEL_91;
        }
        uint64_t v25 = *(void *)&buf[8];
      }

      if (v25 == 24)
      {
        int v17 = *(uint64_t **)buf;
        goto LABEL_83;
      }

void sub_1000CA138( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(a1);
}

void *sub_1000CA1D0@<X0>(int a1@<W0>, void *a2@<X8>)
{
  uint64_t v2 = "HK_PERIODIC_STATE_DUMP";
  if (a1 == 1) {
    uint64_t v2 = "HK_READ_WRITE_FAIL";
  }
  if (a1) {
    id v3 = (char *)v2;
  }
  else {
    id v3 = "HK_ACCESSORY_NOT_REACHABLE";
  }
  return sub_10000AC00(a2, v3);
}

void *sub_1000CA200@<X0>(int a1@<W0>, void *a2@<X8>)
{
  uint64_t v2 = "TRIGGER_TYPE_ABC";
  if (a1 == 1) {
    uint64_t v2 = "TRIGGER_TYPE_TTR";
  }
  if (a1) {
    id v3 = (char *)v2;
  }
  else {
    id v3 = "TRIGGER_TYPE_CA";
  }
  return sub_10000AC00(a2, v3);
}

void sub_1000CA230(void *a1, uint64_t a2, uint64_t a3, unsigned int a4, void *a5)
{
  id v182 = a1;
  id v7 = a5;
  if (a4 >= 2)
  {
    __break(0x5512u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(0x5500u);
    return;
  }

  uint64_t v8 = v7;
  size_t v9 = (unsigned int *)((char *)&unk_1002CA1D0 + 13848 * a4);
  size_t v10 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", sub_1000BE984(4, v9[54]));
  size_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  size_t v12 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"ca_trigger_based_counters_num_firmware_resets"]);
  [v182 setObject:v11 forKey:v12];
  unsigned int v13 = a4;

  std::string::size_type v14 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", sub_1000BE984(4, v9[55]));
  char v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  unint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( [v8 stringByAppendingString:@"ca_trigger_based_counters_num_daemon_restart_due_to_reboots"]);
  [v182 setObject:v15 forKey:v16];

  int v17 = (char *)&unk_1002CA1D0 + 13848 * v13;
  unsigned int v19 = *((_DWORD *)v17 + 56);
  BOOL v18 = v17 + 224;
  uint64_t v20 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", sub_1000BE984(4, v19));
  BOOL v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
  id v22 = (void *)objc_claimAutoreleasedReturnValue( [v8 stringByAppendingString:@"ca_trigger_based_counters_num_daemon_restart_due_to_crashes_or_jetsams"]);
  [v182 setObject:v21 forKey:v22];

  if (v9[54]) {
    std::string::size_type v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
  }
  else {
    std::string::size_type v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL));
  }
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"is_fwreset_detected"]);
  [v182 setObject:v23 forKey:v24];

  if (v9[55]) {
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
  }
  else {
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL));
  }
  int v26 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"is_daemon_reboot_detected"]);
  [v182 setObject:v25 forKey:v26];

  if (*v18) {
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
  }
  else {
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL));
  }
  unsigned int v28 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"is_daemon_crash_jetsam_detected"]);
  [v182 setObject:v27 forKey:v28];

  int v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *((unsigned __int8 *)&unk_1002CA1D0 + 13848 * v13 + 228)));
  id v30 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"is_border_router_advertised"]);
  [v182 setObject:v29 forKey:v30];

  unsigned int v31 = (char *)&unk_1002CA1D0 + 13848 * v13;
  char v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v31[230]));
  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"is_unicast_srp_service_advertised"]);
  [v182 setObject:v32 forKey:v33];

  uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v31[231]));
  uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"is_anycast_srp_service_advertised"]);
  [v182 setObject:v34 forKey:v35];

  if (v31[230] || v31[231])
  {
    unsigned int v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
    uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"is_srp_service_advertised"]);
    [v182 setObject:v36 forKey:v37];
  }

  else
  {
    unsigned int v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL));
    uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"is_srp_service_advertised"]);
    [v182 setObject:v36 forKey:v37];
  }

  uint64_t v38 = (char *)&unk_1002CA1D0 + 13848 * v13;
  unsigned int v40 = *((_DWORD *)v38 + 14);
  unint64_t v39 = v38 + 56;
  __int128 v41 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", sub_1000BE984(4, v40));
  unsigned int v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
  unsigned int v43 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"disabled_role_count"]);
  [v182 setObject:v42 forKey:v43];

  uint64_t v44 = (char *)&unk_1002CA1D0 + 13848 * v13;
  unsigned int v45 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, *((_DWORD *)v44 + 15)));
  uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
  unsigned int v47 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"detached_role_count"]);
  [v182 setObject:v46 forKey:v47];

  if (*((_DWORD *)v44 + 15) || *v39)
  {
    char v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
    unsigned int v49 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"is_role_detach_disable_detected"]);
    [v182 setObject:v48 forKey:v49];
  }

  else
  {
    char v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL));
    unsigned int v49 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"is_role_detach_disable_detected"]);
    [v182 setObject:v48 forKey:v49];
  }

  unsigned int v50 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, *((_DWORD *)&unk_1002CA1D0 + 3462 * v13 + 16)));
  uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
  uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"child_role_count"]);
  [v182 setObject:v51 forKey:v52];

  uint64_t v53 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, *((_DWORD *)&unk_1002CA1D0 + 3462 * v13 + 17)));
  unsigned int v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
  unsigned __int8 v55 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"router_role_count"]);
  [v182 setObject:v54 forKey:v55];

  uint64_t v56 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, *((_DWORD *)&unk_1002CA1D0 + 3462 * v13 + 18)));
  uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue(v56);
  BOOL v58 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"leader_role_count"]);
  [v182 setObject:v57 forKey:v58];

  uint64_t v59 = (char *)&unk_1002CA1D0 + 13848 * v13;
  unsigned int v61 = *((_DWORD *)v59 + 22);
  uint64_t v60 = v59 + 88;
  unsigned int v62 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", sub_1000BE984(4, v61));
  __int16 v63 = (void *)objc_claimAutoreleasedReturnValue(v62);
  char v64 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"parent_changes_count"]);
  [v182 setObject:v63 forKey:v64];

  int v65 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, *((_DWORD *)&unk_1002CA1D0 + 3462 * v13 + 19)));
  unsigned int v66 = (void *)objc_claimAutoreleasedReturnValue(v65);
  unsigned int v67 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"attach_attempts"]);
  [v182 setObject:v66 forKey:v67];

  int v68 = (char *)&unk_1002CA1D0 + 13848 * v13;
  unsigned __int8 v69 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, *((_DWORD *)v68 + 20)));
  int v70 = (void *)objc_claimAutoreleasedReturnValue(v69);
  unsigned int v71 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"partition_id_changes_count"]);
  [v182 setObject:v70 forKey:v71];

  int v72 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, *((_DWORD *)v68 + 21)));
  int v73 = (void *)objc_claimAutoreleasedReturnValue(v72);
  int v74 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"better_partition_attach_attempts"]);
  [v182 setObject:v73 forKey:v74];

  if (*((_DWORD *)v68 + 20)) {
    id v75 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
  }
  else {
    id v75 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL));
  }
  std::string::size_type v76 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"is_partition_id_changed"]);
  [v182 setObject:v75 forKey:v76];

  if (*v60) {
    unsigned int v77 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
  }
  else {
    unsigned int v77 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL));
  }
  BOOL v78 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"is_parent_changed"]);
  [v182 setObject:v77 forKey:v78];

  unsigned int v79 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, *((_DWORD *)&unk_1002CA1D0 + 3462 * v13 + 40)));
  unsigned int v80 = (void *)objc_claimAutoreleasedReturnValue(v79);
  uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"numRouters"]);
  [v182 setObject:v80 forKey:v81];

  BOOL v82 = (char *)&unk_1002CA1D0 + 13848 * v13;
  uint64_t v83 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, *((_DWORD *)v82 + 41)));
  unsigned int v84 = (void *)objc_claimAutoreleasedReturnValue(v83);
  unsigned int v85 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"numOnMeshPrefixes"]);
  [v182 setObject:v84 forKey:v85];

  if (*((_DWORD *)v82 + 41) < 2u) {
    uint64_t v86 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL));
  }
  else {
    uint64_t v86 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
  }
  id v87 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"is_multiple_prefix_detected"]);
  [v182 setObject:v86 forKey:v87];

  char v88 = (char *)&unk_1002CA1D0 + 13848 * v13;
  uint64_t v89 = v88 + 168;
  if (v88[191] < 0) {
    uint64_t v89 = (void *)*v89;
  }
  unsigned int v90 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithCString:encoding:]( &OBJC_CLASS___NSString,  "stringWithCString:encoding:",  v89,  +[NSString defaultCStringEncoding](&OBJC_CLASS___NSString, "defaultCStringEncoding")));
  __int128 v91 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"thread_mesh_size"]);
  [v182 setObject:v90 forKey:v91];

  __int128 v92 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, *((_DWORD *)&unk_1002CA1D0 + 3462 * v13 + 23)));
  uint64_t v93 = (void *)objc_claimAutoreleasedReturnValue(v92);
  unsigned int v94 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"coex_tx_requests"]);
  [v182 setObject:v93 forKey:v94];

  char v95 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, *((_DWORD *)&unk_1002CA1D0 + 3462 * v13 + 26)));
  uint64_t v96 = (void *)objc_claimAutoreleasedReturnValue(v95);
  uint64_t v97 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"coex_tx_granted_requests"]);
  [v182 setObject:v96 forKey:v97];

  uint64_t v98 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, *((_DWORD *)&unk_1002CA1D0 + 3462 * v13 + 24)));
  id v99 = (void *)objc_claimAutoreleasedReturnValue(v98);
  id v100 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"coex_tx_denied_requests"]);
  [v182 setObject:v99 forKey:v100];

  id v101 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, *((_DWORD *)&unk_1002CA1D0 + 3462 * v13 + 25)));
  __int128 v102 = (void *)objc_claimAutoreleasedReturnValue(v101);
  id v103 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"coex_tx_denied_requests_percentage"]);
  [v182 setObject:v102 forKey:v103];

  id v104 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, *((_DWORD *)&unk_1002CA1D0 + 3462 * v13 + 27)));
  unsigned int v105 = (void *)objc_claimAutoreleasedReturnValue(v104);
  unsigned int v106 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"coex_rx_requests"]);
  [v182 setObject:v105 forKey:v106];

  unsigned int v107 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, *((_DWORD *)&unk_1002CA1D0 + 3462 * v13 + 30)));
  char v108 = (void *)objc_claimAutoreleasedReturnValue(v107);
  unsigned int v109 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"coex_rx_granted_requests"]);
  [v182 setObject:v108 forKey:v109];

  unsigned int v110 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, *((_DWORD *)&unk_1002CA1D0 + 3462 * v13 + 28)));
  unsigned int v111 = (void *)objc_claimAutoreleasedReturnValue(v110);
  uint64_t v112 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"coex_rx_denied_requests"]);
  [v182 setObject:v111 forKey:v112];

  int v113 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, *((_DWORD *)&unk_1002CA1D0 + 3462 * v13 + 29)));
  int v114 = (void *)objc_claimAutoreleasedReturnValue(v113);
  unsigned int v115 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"coex_rx_denied_requests_percentage"]);
  [v182 setObject:v114 forKey:v115];

  unsigned int v116 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", sub_1000BE984(4, *v9));
  unsigned int v117 = (void *)objc_claimAutoreleasedReturnValue(v116);
  unsigned int v118 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"tx_success"]);
  [v182 setObject:v117 forKey:v118];

  if (((13848LL * v13) | 4uLL) > 0x6C30) {
    goto LABEL_39;
  }
  unsigned int v119 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, *((_DWORD *)&unk_1002CA1D0 + 3462 * v13 + 1)));
  unsigned int v120 = (void *)objc_claimAutoreleasedReturnValue(v119);
  unsigned int v121 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"tx_failure"]);
  [v182 setObject:v120 forKey:v121];

  unsigned int v122 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, *((_DWORD *)&unk_1002CA1D0 + 3462 * v13 + 8)));
  unsigned int v123 = (void *)objc_claimAutoreleasedReturnValue(v122);
  unsigned int v124 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"tx_success_perc"]);
  [v182 setObject:v123 forKey:v124];

  unsigned int v125 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, *((_DWORD *)&unk_1002CA1D0 + 3462 * v13 + 5)));
  unsigned int v126 = (void *)objc_claimAutoreleasedReturnValue(v125);
  unsigned int v127 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"rx_success"]);
  [v182 setObject:v126 forKey:v127];

  unsigned int v128 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, *((_DWORD *)&unk_1002CA1D0 + 3462 * v13 + 6)));
  unsigned int v129 = (void *)objc_claimAutoreleasedReturnValue(v128);
  unsigned int v130 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"rx_failure"]);
  [v182 setObject:v129 forKey:v130];

  int v131 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, *((_DWORD *)&unk_1002CA1D0 + 3462 * v13 + 10)));
  int v132 = (void *)objc_claimAutoreleasedReturnValue(v131);
  unsigned int v133 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"rx_success_perc"]);
  [v182 setObject:v132 forKey:v133];

  unsigned int v134 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, *((_DWORD *)&unk_1002CA1D0 + 3462 * v13 + 3)));
  unsigned int v135 = (void *)objc_claimAutoreleasedReturnValue(v134);
  unsigned int v136 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"tx_app_pkt_success"]);
  [v182 setObject:v135 forKey:v136];

  id v137 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, *((_DWORD *)&unk_1002CA1D0 + 3462 * v13 + 4)));
  __int128 v138 = (void *)objc_claimAutoreleasedReturnValue(v137);
  char v139 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"tx_app_pkt_failure"]);
  [v182 setObject:v138 forKey:v139];

  __int128 v140 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, *((_DWORD *)&unk_1002CA1D0 + 3462 * v13 + 9)));
  __int128 v141 = (void *)objc_claimAutoreleasedReturnValue(v140);
  __int128 v142 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"tx_app_success_perc"]);
  [v182 setObject:v141 forKey:v142];

  __int128 v143 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, *((_DWORD *)&unk_1002CA1D0 + 3462 * v13 + 11)));
  int v144 = (void *)objc_claimAutoreleasedReturnValue(v143);
  __int128 v145 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"tx_delaymin"]);
  [v182 setObject:v144 forKey:v145];

  __int128 v146 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, *((_DWORD *)&unk_1002CA1D0 + 3462 * v13 + 12)));
  __int128 v147 = (void *)objc_claimAutoreleasedReturnValue(v146);
  __int128 v148 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"tx_delaymax"]);
  [v182 setObject:v147 forKey:v148];

  int v149 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, *((_DWORD *)&unk_1002CA1D0 + 3462 * v13 + 13)));
  uint64_t v150 = (void *)objc_claimAutoreleasedReturnValue(v149);
  uint64_t v151 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"tx_delayavg"]);
  [v182 setObject:v150 forKey:v151];

  uint64_t v152 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, *((_DWORD *)&unk_1002CA1D0 + 3462 * v13 + 32)));
  uint64_t v153 = (void *)objc_claimAutoreleasedReturnValue(v152);
  uint64_t v154 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"num_third_party_border_routers"]);
  [v182 setObject:v153 forKey:v154];

  uint64_t v155 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, *((_DWORD *)&unk_1002CA1D0 + 3462 * v13 + 33)));
  uint64_t v156 = (void *)objc_claimAutoreleasedReturnValue(v155);
  uint64_t v157 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"num_apple_border_routers"]);
  [v182 setObject:v156 forKey:v157];

  uint64_t v158 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, *((_DWORD *)&unk_1002CA1D0 + 3462 * v13 + 34)));
  uint64_t v159 = (void *)objc_claimAutoreleasedReturnValue(v158);
  int v160 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"num_thread_networks"]);
  [v182 setObject:v159 forKey:v160];

  if (*((_BYTE *)&unk_1002CA1D0 + 13848 * v13 + 140)) {
    uint64_t v161 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL));
  }
  else {
    uint64_t v161 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
  }
  uint64_t v162 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"is_leader_thirdparty"]);
  [v182 setObject:v161 forKey:v162];

  uint64_t v163 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, *((_DWORD *)&unk_1002CA1D0 + 3462 * v13 + 31)));
  unsigned int v164 = (void *)objc_claimAutoreleasedReturnValue(v163);
  uint64_t v165 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"num_border_routers_advertised"]);
  [v182 setObject:v164 forKey:v165];

  uint64_t v166 = (char *)&unk_1002CA1D0 + 13848 * v13;
  uint64_t v167 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, *((_DWORD *)v166 + 59)));
  uint64_t v168 = (void *)objc_claimAutoreleasedReturnValue(v167);
  uint64_t v169 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"num_unicast_srp_services_advertised"]);
  [v182 setObject:v168 forKey:v169];

  uint64_t v170 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, *((_DWORD *)v166 + 60)));
  uint64_t v171 = (void *)objc_claimAutoreleasedReturnValue(v170);
  uint64_t v172 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"num_anycast_srp_services_advertised"]);
  [v182 setObject:v171 forKey:v172];

  int v173 = *((_DWORD *)v166 + 60);
  int v174 = *((_DWORD *)v166 + 59);
  if (__CFADD__(v173, v174)) {
    goto LABEL_40;
  }
  uint64_t v175 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, v173 + v174));
  uint64_t v176 = (void *)objc_claimAutoreleasedReturnValue(v175);
  uint64_t v177 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"num_srp_services_advertised"]);
  [v182 setObject:v176 forKey:v177];

  uint64_t v178 = (char *)&unk_1002CA1D0 + 13848 * v13;
  uint64_t v179 = v178 + 192;
  if (v178[215] < 0) {
    uint64_t v179 = (void *)*v179;
  }
  uint64_t v180 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithCString:encoding:]( &OBJC_CLASS___NSString,  "stringWithCString:encoding:",  v179,  +[NSString defaultCStringEncoding](&OBJC_CLASS___NSString, "defaultCStringEncoding")));
  std::string::size_type v181 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:@"last_known_device_role"]);
  [v182 setObject:v180 forKey:v181];
}

void sub_1000CB834( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000CBA84(uint64_t result)
{
  if (byte_1002D1238 > 1uLL)
  {
    __break(1u);
  }

  else
  {
    uint64_t v1 = *((unsigned int *)&unk_1002CA1D0 + 3462 * byte_1002D1238 + 61);
    if ((_DWORD)v1)
    {
      uint64_t v2 = (uint64_t *)result;
      uint64_t v3 = 0LL;
      uint64_t v4 = 136 * v1;
      do
      {
        v60[0] = 0LL;
        v60[1] = 0LL;
        uint64_t v59 = v60;
        unsigned int v5 = byte_1002D1238;
        sub_10000AC00(&__p, "RLOC16");
        id v6 = sub_10000ED88(&v59, &__p);
        sub_100017678(v6, (char *)&unk_1002CA1D0 + 13848 * v5 + v3 + 296);
        if (v58 < 0) {
          operator delete((void *)__p.n128_u64[0]);
        }
        unsigned int v7 = byte_1002D1238;
        sub_10000AC00(&__p, "ExtAddress");
        uint64_t v8 = sub_10000ED88(&v59, &__p);
        sub_1000200A0(v8, (const std::string *)((char *)&unk_1002CA1D0 + 13848 * v7 + v3 + 248));
        if (v58 < 0) {
          operator delete((void *)__p.n128_u64[0]);
        }
        unsigned int v9 = byte_1002D1238;
        sub_10000AC00(&__p, "thread_version");
        size_t v10 = sub_10000ED88(&v59, &__p);
        sub_1000176D4(v10, (_BYTE *)&unk_1002CA1D0 + 13848 * v9 + v3 + 376);
        if (v58 < 0) {
          operator delete((void *)__p.n128_u64[0]);
        }
        unsigned int v11 = byte_1002D1238;
        sub_10000AC00(&__p, "is_direct_link");
        size_t v12 = sub_10000ED88(&v59, &__p);
        sub_100020B4C(v12, (_BYTE *)&unk_1002CA1D0 + 13848 * v11 + v3 + 372);
        if (v58 < 0) {
          operator delete((void *)__p.n128_u64[0]);
        }
        unsigned int v13 = byte_1002D1238;
        sub_10000AC00(&__p, "AverageRssi");
        std::string::size_type v14 = sub_10000ED88(&v59, &__p);
        sub_100017678(v14, (char *)&unk_1002CA1D0 + 13848 * v13 + v3 + 298);
        if (v58 < 0) {
          operator delete((void *)__p.n128_u64[0]);
        }
        unsigned int v15 = byte_1002D1238;
        sub_10000AC00(&__p, "LastRssi");
        unint64_t v16 = sub_10000ED88(&v59, &__p);
        sub_100017678(v16, (char *)&unk_1002CA1D0 + 13848 * v15 + v3 + 300);
        if (v58 < 0) {
          operator delete((void *)__p.n128_u64[0]);
        }
        unsigned int v17 = byte_1002D1238;
        sub_10000AC00(&__p, "LinkQualityIn");
        BOOL v18 = sub_10000ED88(&v59, &__p);
        sub_1000176D4(v18, (_BYTE *)&unk_1002CA1D0 + 13848 * v17 + v3 + 302);
        if (v58 < 0) {
          operator delete((void *)__p.n128_u64[0]);
        }
        unsigned int v19 = byte_1002D1238;
        sub_10000AC00(&__p, "is_current_node_parent");
        uint64_t v20 = sub_10000ED88(&v59, &__p);
        sub_100020B4C(v20, (_BYTE *)&unk_1002CA1D0 + 13848 * v19 + v3 + 375);
        if (v58 < 0) {
          operator delete((void *)__p.n128_u64[0]);
        }
        unsigned int v21 = byte_1002D1238;
        sub_10000AC00(&__p, "last_known_device_role");
        id v22 = sub_10000ED88(&v59, &__p);
        sub_1000200A0(v22, (const std::string *)((char *)&unk_1002CA1D0 + 13848 * v21 + v3 + 272));
        if (v58 < 0) {
          operator delete((void *)__p.n128_u64[0]);
        }
        unsigned int v23 = byte_1002D1238;
        sub_10000AC00(&__p, "rx_failure");
        uint64_t v24 = sub_10000ED88(&v59, &__p);
        sub_100017F70(v24, (char *)&unk_1002CA1D0 + 13848 * v23 + v3 + 344);
        if (v58 < 0) {
          operator delete((void *)__p.n128_u64[0]);
        }
        unsigned int v25 = byte_1002D1238;
        sub_10000AC00(&__p, "rx_success");
        int v26 = sub_10000ED88(&v59, &__p);
        sub_100017F70(v26, (char *)&unk_1002CA1D0 + 13848 * v25 + v3 + 340);
        if (v58 < 0) {
          operator delete((void *)__p.n128_u64[0]);
        }
        unsigned int v27 = byte_1002D1238;
        sub_10000AC00(&__p, "rx_total");
        unsigned int v28 = sub_10000ED88(&v59, &__p);
        sub_100017F70(v28, (char *)&unk_1002CA1D0 + 13848 * v27 + v3 + 336);
        if (v58 < 0) {
          operator delete((void *)__p.n128_u64[0]);
        }
        unsigned int v29 = byte_1002D1238;
        sub_10000AC00(&__p, "rx_success_perc");
        id v30 = sub_10000ED88(&v59, &__p);
        sub_100017F70(v30, (char *)&unk_1002CA1D0 + 13848 * v29 + v3 + 348);
        if (v58 < 0) {
          operator delete((void *)__p.n128_u64[0]);
        }
        unsigned int v31 = byte_1002D1238;
        sub_10000AC00(&__p, "tx_failure");
        char v32 = sub_10000ED88(&v59, &__p);
        sub_100017F70(v32, (char *)&unk_1002CA1D0 + 13848 * v31 + v3 + 312);
        if (v58 < 0) {
          operator delete((void *)__p.n128_u64[0]);
        }
        unsigned int v33 = byte_1002D1238;
        sub_10000AC00(&__p, "tx_success");
        uint64_t v34 = sub_10000ED88(&v59, &__p);
        sub_100017F70(v34, (char *)&unk_1002CA1D0 + 13848 * v33 + v3 + 308);
        if (v58 < 0) {
          operator delete((void *)__p.n128_u64[0]);
        }
        unsigned int v35 = byte_1002D1238;
        sub_10000AC00(&__p, "tx_total");
        unsigned int v36 = sub_10000ED88(&v59, &__p);
        sub_100017F70(v36, (char *)&unk_1002CA1D0 + 13848 * v35 + v3 + 304);
        if (v58 < 0) {
          operator delete((void *)__p.n128_u64[0]);
        }
        unsigned int v37 = byte_1002D1238;
        sub_10000AC00(&__p, "tx_success_perc");
        uint64_t v38 = sub_10000ED88(&v59, &__p);
        sub_100017F70(v38, (char *)&unk_1002CA1D0 + 13848 * v37 + v3 + 316);
        if (v58 < 0) {
          operator delete((void *)__p.n128_u64[0]);
        }
        unsigned int v39 = byte_1002D1238;
        sub_10000AC00(&__p, "tx_app_total");
        unsigned int v40 = sub_10000ED88(&v59, &__p);
        sub_100017F70(v40, (char *)&unk_1002CA1D0 + 13848 * v39 + v3 + 320);
        if (v58 < 0) {
          operator delete((void *)__p.n128_u64[0]);
        }
        unsigned int v41 = byte_1002D1238;
        sub_10000AC00(&__p, "tx_app_pkt_failure");
        unsigned int v42 = sub_10000ED88(&v59, &__p);
        sub_100017F70(v42, (char *)&unk_1002CA1D0 + 13848 * v41 + v3 + 328);
        if (v58 < 0) {
          operator delete((void *)__p.n128_u64[0]);
        }
        unsigned int v43 = byte_1002D1238;
        sub_10000AC00(&__p, "tx_app_pkt_success");
        uint64_t v44 = sub_10000ED88(&v59, &__p);
        sub_100017F70(v44, (char *)&unk_1002CA1D0 + 13848 * v43 + v3 + 324);
        if (v58 < 0) {
          operator delete((void *)__p.n128_u64[0]);
        }
        unsigned int v45 = byte_1002D1238;
        sub_10000AC00(&__p, "tx_app_success_perc");
        uint64_t v46 = sub_10000ED88(&v59, &__p);
        sub_100017F70(v46, (char *)&unk_1002CA1D0 + 13848 * v45 + v3 + 332);
        if (v58 < 0) {
          operator delete((void *)__p.n128_u64[0]);
        }
        unsigned int v47 = byte_1002D1238;
        sub_10000AC00(&__p, "tx_icmp_err");
        char v48 = sub_10000ED88(&v59, &__p);
        sub_100017F70(v48, (char *)&unk_1002CA1D0 + 13848 * v47 + v3 + 364);
        if (v58 < 0) {
          operator delete((void *)__p.n128_u64[0]);
        }
        unsigned int v49 = byte_1002D1238;
        sub_10000AC00(&__p, "rx_icmp_err");
        unsigned int v50 = sub_10000ED88(&v59, &__p);
        sub_100017F70(v50, (char *)&unk_1002CA1D0 + 13848 * v49 + v3 + 368);
        if (v58 < 0) {
          operator delete((void *)__p.n128_u64[0]);
        }
        unsigned int v51 = byte_1002D1238;
        sub_10000AC00(&__p, "tx_delaymin");
        uint64_t v52 = sub_10000ED88(&v59, &__p);
        sub_100017F70(v52, (char *)&unk_1002CA1D0 + 13848 * v51 + v3 + 356);
        if (v58 < 0) {
          operator delete((void *)__p.n128_u64[0]);
        }
        unsigned int v53 = byte_1002D1238;
        sub_10000AC00(&__p, "tx_delaymax");
        unsigned int v54 = sub_10000ED88(&v59, &__p);
        sub_100017F70(v54, (char *)&unk_1002CA1D0 + 13848 * v53 + v3 + 360);
        if (v58 < 0) {
          operator delete((void *)__p.n128_u64[0]);
        }
        unsigned int v55 = byte_1002D1238;
        sub_10000AC00(&__p, "tx_delayavg");
        uint64_t v56 = sub_10000ED88(&v59, &__p);
        sub_100017F70(v56, (char *)&unk_1002CA1D0 + 13848 * v55 + v3 + 352);
        if (v58 < 0) {
          operator delete((void *)__p.n128_u64[0]);
        }
        sub_10000D584(v2, (uint64_t *)&v59);
        double result = sub_10000D448((uint64_t)&v59);
        v3 += 136LL;
      }

      while (v4 != v3);
    }
  }

  return result;
}

void sub_1000CC1BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void sub_1000CC2B4(uint64_t a1, void *a2, void *a3)
{
  id v95 = a2;
  id v5 = a3;
  char v6 = byte_1002D1238;
  xpc_object_t xdict = v5;
  xpc_type_t type = xpc_get_type(v5);
  sub_1000CBA84(a1);
  if (type != (xpc_type_t)&_xpc_type_array)
  {
    uint64_t v8 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    unsigned int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_10020D8CC();
    }
    goto LABEL_228;
  }

  xpc_object_t array = xpc_dictionary_get_array(xdict, "PropVal");
  xpc_object_t xarray = (xpc_object_t)objc_claimAutoreleasedReturnValue(array);
  if (xarray)
  {
    unsigned int v9 = 0LL;
    size_t v97 = 0LL;
    while (1)
    {
      if (v97 >= xpc_array_get_count(xarray)) {
        goto LABEL_227;
      }
      if (xpc_get_type(xarray) != (xpc_type_t)&_xpc_type_array)
      {
        uint64_t v93 = sub_1000160F4("com.apple.wpantund.tnm", "default");
        unsigned int v94 = (os_log_s *)objc_claimAutoreleasedReturnValue(v93);
        if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR)) {
          sub_10020D854();
        }

        goto LABEL_227;
      }

      xpc_object_t v11 = xpc_dictionary_get_array(xarray, "PropVal");
      size_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      unsigned int v13 = v12;
      if (!v12) {
        goto LABEL_227;
      }
      size_t v14 = 0LL;
      uint64_t v15 = 13848LL * ((v6 & 1) == 0);
      *(_DWORD *)((char *)&unk_1002CA1D0 + v15 + 244) = xpc_array_get_count(v12);
      while (v14 < xpc_array_get_count(v13))
      {
        xpc_object_t dictionary = xpc_array_get_dictionary(v13, v14);
        unsigned int v17 = (void *)objc_claimAutoreleasedReturnValue(dictionary);

        string = (char *)xpc_dictionary_get_string(v17, "key");
        sub_10000AC00(__p, string);
        if ((v100 & 0x80000000) == 0)
        {
          switch(v100)
          {
            case 6:
              goto LABEL_103;
            case 8:
              goto LABEL_97;
            case 10:
              if (v100 == 8) {
                goto LABEL_97;
              }
              goto LABEL_132;
            case 11:
              goto LABEL_54;
            case 13:
              goto LABEL_62;
            case 14:
              if (*(void *)__p != 0x765F646165726874LL || *(void *)&__p[6] != 0x6E6F69737265765FLL)
              {
                switch(v100)
                {
                  case 8:
                    goto LABEL_97;
                  case 10:
                    goto LABEL_133;
                  case 11:
                    goto LABEL_54;
                  case 13:
                    goto LABEL_62;
                  case 14:
                    if (*(void *)__p != 0x63657269645F7369LL || *(void *)&__p[6] != 0x6B6E696C5F746365LL) {
                      goto LABEL_151;
                    }
                    goto LABEL_183;
                  default:
                    goto LABEL_151;
                }
              }

              goto LABEL_68;
            case 22:
              if (*(void *)__p == 0x65727275635F7369LL
                && *(void *)&__p[8] == 0x5F65646F6E5F746ELL
                && *(void *)&__p[14] == 0x746E657261705F65LL)
              {
                goto LABEL_162;
              }

              if (v100 == 10) {
                goto LABEL_133;
              }
              if (v100 != 22) {
                goto LABEL_151;
              }
              BOOL v32 = *(void *)__p == 0x6F6E6B5F7473616CLL && *(void *)&__p[8] == 0x63697665645F6E77LL;
              if (!v32 || *(void *)&__p[14] != 0x656C6F725F656369LL) {
                goto LABEL_151;
              }
              goto LABEL_174;
            default:
              goto LABEL_151;
          }
        }

        uint64_t v20 = *(void *)&__p[8];
        if (*(void *)&__p[8] == 6LL && **(_DWORD **)__p == 1129270354 && *(_WORD *)(*(void *)__p + 4LL) == 13873)
        {
LABEL_103:
          __int16 uint64 = xpc_dictionary_get_uint64(v17, "value");
          *(_WORD *)((char *)&unk_1002CA1D0 + v15 + 296) = uint64;
          goto LABEL_185;
        }

        if (*(void *)&__p[8] == 10LL)
        {
          if (**(void **)__p == 0x6572646441747845LL && *(_WORD *)(*(void *)__p + 8LL) == 29555)
          {
LABEL_100:
            unsigned int v36 = (char *)xpc_dictionary_get_string(v17, "value");
            sub_10000AC00(&__str, v36);
            std::string::operator=((std::string *)((char *)&unk_1002CA1D0 + v15 + 248), &__str);
            goto LABEL_101;
          }

          uint64_t v20 = *(void *)&__p[8];
        }

        if (v20 == 14)
        {
          if (**(void **)__p == 0x765F646165726874LL && *(void *)(*(void *)__p + 6LL) == 0x6E6F69737265765FLL)
          {
LABEL_68:
            char v29 = xpc_dictionary_get_uint64(v17, "value");
            *((_BYTE *)&unk_1002CA1D0 + v15 + 376) = v29;
            goto LABEL_185;
          }

          uint64_t v20 = *(void *)&__p[8];
          if (*(void *)&__p[8] == 14LL)
          {
            if (**(void **)__p == 0x63657269645F7369LL && *(void *)(*(void *)__p + 6LL) == 0x6B6E696C5F746365LL)
            {
LABEL_183:
              BOOL v70 = xpc_dictionary_get_BOOL(v17, "value");
              *((_BYTE *)&unk_1002CA1D0 + v15 + 372) = v70;
              goto LABEL_185;
            }

            if ((v100 & 0x80) == 0)
            {
              switch(v100)
              {
                case 8:
                  goto LABEL_97;
                case 10:
                  goto LABEL_133;
                case 11:
LABEL_54:
                  if (*(void *)__p == 0x5265676172657641LL && *(void *)&__p[3] == 0x6973735265676172LL) {
                    goto LABEL_105;
                  }
                  if (v100 < 0) {
                    goto LABEL_70;
                  }
                  if (v100 == 10) {
                    goto LABEL_133;
                  }
                  if (v100 != 8) {
                    goto LABEL_151;
                  }
LABEL_97:
                  if (*(void *)__p == 0x697373527473614CLL) {
                    goto LABEL_98;
                  }
                  if (v100 < 0) {
                    goto LABEL_108;
                  }
                  goto LABEL_151;
                case 13:
LABEL_62:
                  if (*(void *)__p == 0x6C6175516B6E694CLL && *(void *)&__p[5] == 0x6E497974696C6175LL) {
                    goto LABEL_160;
                  }
                  if (v100 < 0) {
                    goto LABEL_114;
                  }
                  goto LABEL_132;
                default:
                  goto LABEL_151;
              }
            }
          }
        }

        if (v20 == 11)
        {
          if (**(void **)__p == 0x5265676172657641LL && *(void *)(*(void *)__p + 3LL) == 0x6973735265676172LL)
          {
LABEL_105:
            __int16 int64 = xpc_dictionary_get_int64(v17, "value");
            *(_WORD *)((char *)&unk_1002CA1D0 + v15 + 298) = int64;
            goto LABEL_185;
          }

LABEL_151:
        if (sub_1000B55AC(__p, "rx_total"))
        {
          unsigned int v50 = xpc_dictionary_get_uint64(v17, "value");
          int v51 = sub_1000BE984(3, v50);
          *(_DWORD *)((char *)&unk_1002CA1D0 + v15 + 336) = v51;
        }

        else if (sub_1000B55AC(__p, "rx_success_perc"))
        {
          unsigned __int8 v52 = xpc_dictionary_get_uint64(v17, "value");
          int v53 = sub_1000BE984(3, v52);
          *(_DWORD *)((char *)&unk_1002CA1D0 + v15 + 348) = v53;
        }

        else if (sub_1000B55AC(__p, "tx_failure"))
        {
          unsigned int v54 = xpc_dictionary_get_uint64(v17, "value");
          int v55 = sub_1000BE984(3, v54);
          *(_DWORD *)((char *)&unk_1002CA1D0 + v15 + 312) = v55;
        }

        else if (sub_1000B55AC(__p, "tx_success"))
        {
          unsigned int v60 = xpc_dictionary_get_uint64(v17, "value");
          int v61 = sub_1000BE984(3, v60);
          *(_DWORD *)((char *)&unk_1002CA1D0 + v15 + 308) = v61;
        }

        else if (sub_1000B55AC(__p, "tx_total"))
        {
          unsigned int v62 = xpc_dictionary_get_uint64(v17, "value");
          int v63 = sub_1000BE984(3, v62);
          *(_DWORD *)((char *)&unk_1002CA1D0 + v15 + 304) = v63;
        }

        else if (sub_1000B55AC(__p, "tx_success_perc"))
        {
          unsigned __int8 v67 = xpc_dictionary_get_uint64(v17, "value");
          int v68 = sub_1000BE984(3, v67);
          *(_DWORD *)((char *)&unk_1002CA1D0 + v15 + 316) = v68;
        }

        else if (sub_1000B55AC(__p, "tx_app_pkt_success"))
        {
          unsigned int v71 = xpc_dictionary_get_uint64(v17, "value");
          int v72 = sub_1000BE984(3, v71);
          *(_DWORD *)((char *)&unk_1002CA1D0 + v15 + 324) = v72;
        }

        else if (sub_1000B55AC(__p, "tx_app_total"))
        {
          unsigned int v73 = xpc_dictionary_get_uint64(v17, "value");
          int v74 = sub_1000BE984(3, v73);
          *(_DWORD *)((char *)&unk_1002CA1D0 + v15 + 320) = v74;
        }

        else if (sub_1000B55AC(__p, "tx_app_pkt_failure"))
        {
          unsigned int v75 = xpc_dictionary_get_uint64(v17, "value");
          int v76 = sub_1000BE984(3, v75);
          *(_DWORD *)((char *)&unk_1002CA1D0 + v15 + 328) = v76;
        }

        else if (sub_1000B55AC(__p, "tx_app_success_perc"))
        {
          unsigned __int8 v77 = xpc_dictionary_get_uint64(v17, "value");
          int v78 = sub_1000BE984(3, v77);
          *(_DWORD *)((char *)&unk_1002CA1D0 + v15 + 332) = v78;
        }

        else if (sub_1000B55AC(__p, "tx_icmp_err"))
        {
          unsigned int v79 = xpc_dictionary_get_uint64(v17, "value");
          int v80 = sub_1000BE984(3, v79);
          *(_DWORD *)((char *)&unk_1002CA1D0 + v15 + 364) = v80;
        }

        else if (sub_1000B55AC(__p, "rx_icmp_err"))
        {
          unsigned int v81 = xpc_dictionary_get_uint64(v17, "value");
          int v82 = sub_1000BE984(3, v81);
          *(_DWORD *)((char *)&unk_1002CA1D0 + v15 + 368) = v82;
        }

        else if (sub_1000B55AC(__p, "tx_delaymin"))
        {
          unsigned int v83 = xpc_dictionary_get_uint64(v17, "value");
          int v84 = sub_1000BE984(3, v83);
          *(_DWORD *)((char *)&unk_1002CA1D0 + v15 + 356) = v84;
        }

        else if (sub_1000B55AC(__p, "tx_delaymax"))
        {
          unsigned int v85 = xpc_dictionary_get_uint64(v17, "value");
          int v86 = sub_1000BE984(3, v85);
          *(_DWORD *)((char *)&unk_1002CA1D0 + v15 + 360) = v86;
        }

        else if (sub_1000B55AC(__p, "tx_delayavg"))
        {
          unsigned int v87 = xpc_dictionary_get_uint64(v17, "value");
          int v88 = sub_1000BE984(3, v87);
          if ((unint64_t)(v15 - 27344) < 0xFFFFFFFFFFFF93D0LL) {
LABEL_229:
          }
            __break(1u);
          *(_DWORD *)((char *)&unk_1002CA1D0 + v15 + 352) = v88;
        }

        else
        {
          uint64_t v89 = sub_1000160F4("com.apple.wpantund.awd", "default");
          unsigned int v90 = (os_log_s *)objc_claimAutoreleasedReturnValue(v89);
          if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
          {
            __int128 v91 = __p;
            if (v100 < 0) {
              __int128 v91 = *(_BYTE **)__p;
            }
            LODWORD(__str.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)v91;
            _os_log_error_impl( (void *)&_mh_execute_header,  v90,  OS_LOG_TYPE_ERROR,  "CAMetrics : CAMetricsHandlers_handle_getprop_allTriggerMetrics_accessory_specific - ERROR : Unhandled key=%s",  (uint8_t *)&__str,  0xCu);
          }
        }

LABEL_185:
        if (v100 < 0) {
          operator delete(*(void **)__p);
        }
        ++v14;
        v15 += 136LL;
        unsigned int v9 = (os_log_s *)v17;
      }

      if (__CFADD__(v97++, 1LL))
      {
        __break(0x5500u);
        break;
      }
    }
  }

  unsigned int v9 = 0LL;
LABEL_227:

LABEL_228:
}

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_186:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          id v101 = 0LL;
        }
        else {
          id v101 = v67;
        }
LABEL_189:
        double result = PBRepeatedUInt32Add(result, v101);
        continue;
      case 2u:
        if (v14 != 2)
        {
          unsigned int v71 = 0;
          int v72 = 0;
          unsigned __int8 v67 = 0LL;
          double result = v3 + 128;
          while (1)
          {
            unsigned int v73 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            int v74 = v73 + 1;
            if (v73 == -1) {
              goto LABEL_192;
            }
            if (v74 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              goto LABEL_185;
            }
            unsigned int v75 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v73);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v74;
            v67 |= (unint64_t)(v75 & 0x7F) << v71;
            if ((v75 & 0x80) == 0) {
              goto LABEL_186;
            }
            v71 += 7;
            xpc_object_t v11 = v72++ >= 9;
            if (v11) {
              goto LABEL_184;
            }
          }
        }

        double result = PBReaderPlaceMark(a2, v102);
        if (!(_DWORD)result) {
          return result;
        }
        while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
             && !*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        {
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          unsigned int v25 = 0LL;
          while (1)
          {
            int v26 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unsigned int v27 = v26 + 1;
            if (v26 == -1) {
              goto LABEL_192;
            }
            if (v27 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            unsigned int v28 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27;
            v25 |= (unint64_t)(v28 & 0x7F) << v23;
            if ((v28 & 0x80) == 0) {
              goto LABEL_51;
            }
            v23 += 7;
            xpc_object_t v11 = v24++ >= 9;
            if (v11)
            {
              char v29 = 0LL;
              goto LABEL_54;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_51:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            char v29 = 0LL;
          }
          else {
            char v29 = v25;
          }
LABEL_54:
          double result = PBRepeatedUInt32Add(v3 + 128, v29);
        }

        goto LABEL_135;
      case 3u:
        if (v14 != 2)
        {
          int v76 = 0;
          unsigned __int8 v77 = 0;
          unsigned __int8 v67 = 0LL;
          double result = v3 + 8;
          while (1)
          {
            int v78 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unsigned int v79 = v78 + 1;
            if (v78 == -1) {
              goto LABEL_192;
            }
            if (v79 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              goto LABEL_185;
            }
            int v80 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v78);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v79;
            v67 |= (unint64_t)(v80 & 0x7F) << v76;
            if ((v80 & 0x80) == 0) {
              goto LABEL_186;
            }
            v76 += 7;
            xpc_object_t v11 = v77++ >= 9;
            if (v11) {
              goto LABEL_184;
            }
          }
        }

        double result = PBReaderPlaceMark(a2, v102);
        if (!(_DWORD)result) {
          return result;
        }
        while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
             && !*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        {
          id v30 = 0;
          unsigned int v31 = 0;
          BOOL v32 = 0LL;
          while (1)
          {
            unsigned int v33 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            uint64_t v34 = v33 + 1;
            if (v33 == -1) {
              goto LABEL_192;
            }
            if (v34 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            __int16 v35 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34;
            v32 |= (unint64_t)(v35 & 0x7F) << v30;
            if ((v35 & 0x80) == 0) {
              goto LABEL_67;
            }
            v30 += 7;
            xpc_object_t v11 = v31++ >= 9;
            if (v11)
            {
              unsigned int v36 = 0LL;
              goto LABEL_70;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_67:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            unsigned int v36 = 0LL;
          }
          else {
            unsigned int v36 = v32;
          }
LABEL_70:
          double result = PBRepeatedUInt32Add(v3 + 8, v36);
        }

        goto LABEL_135;
      case 4u:
        if (v14 != 2)
        {
          unsigned int v81 = 0;
          int v82 = 0;
          unsigned __int8 v67 = 0LL;
          double result = v3 + 104;
          while (1)
          {
            unsigned int v83 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            int v84 = v83 + 1;
            if (v83 == -1) {
              goto LABEL_192;
            }
            if (v84 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              goto LABEL_185;
            }
            unsigned int v85 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v83);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v84;
            v67 |= (unint64_t)(v85 & 0x7F) << v81;
            if ((v85 & 0x80) == 0) {
              goto LABEL_186;
            }
            v81 += 7;
            xpc_object_t v11 = v82++ >= 9;
            if (v11) {
              goto LABEL_184;
            }
          }
        }

        double result = PBReaderPlaceMark(a2, v102);
        if (!(_DWORD)result) {
          return result;
        }
        while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
             && !*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        {
          unsigned int v37 = 0;
          uint64_t v38 = 0;
          unsigned int v39 = 0LL;
          while (1)
          {
            unsigned int v40 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unsigned int v41 = v40 + 1;
            if (v40 == -1) {
              goto LABEL_192;
            }
            if (v41 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            unsigned int v42 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v40);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v41;
            v39 |= (unint64_t)(v42 & 0x7F) << v37;
            if ((v42 & 0x80) == 0) {
              goto LABEL_83;
            }
            v37 += 7;
            xpc_object_t v11 = v38++ >= 9;
            if (v11)
            {
              unsigned int v43 = 0LL;
              goto LABEL_86;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_83:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            unsigned int v43 = 0LL;
          }
          else {
            unsigned int v43 = v39;
          }
LABEL_86:
          double result = PBRepeatedUInt32Add(v3 + 104, v43);
        }

        goto LABEL_135;
      case 5u:
        if (v14 != 2)
        {
          int v86 = 0;
          unsigned int v87 = 0;
          unsigned __int8 v67 = 0LL;
          double result = v3 + 32;
          while (1)
          {
            int v88 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            uint64_t v89 = v88 + 1;
            if (v88 == -1) {
              goto LABEL_192;
            }
            if (v89 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              goto LABEL_185;
            }
            unsigned int v90 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v88);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v89;
            v67 |= (unint64_t)(v90 & 0x7F) << v86;
            if ((v90 & 0x80) == 0) {
              goto LABEL_186;
            }
            v86 += 7;
            xpc_object_t v11 = v87++ >= 9;
            if (v11) {
              goto LABEL_184;
            }
          }
        }

        double result = PBReaderPlaceMark(a2, v102);
        if (!(_DWORD)result) {
          return result;
        }
        while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
             && !*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        {
          uint64_t v44 = 0;
          unsigned int v45 = 0;
          uint64_t v46 = 0LL;
          while (1)
          {
            uint64_t v47 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            int v48 = v47 + 1;
            if (v47 == -1) {
              goto LABEL_192;
            }
            if (v48 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            unsigned int v49 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v47);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v48;
            v46 |= (unint64_t)(v49 & 0x7F) << v44;
            if ((v49 & 0x80) == 0) {
              goto LABEL_99;
            }
            v44 += 7;
            xpc_object_t v11 = v45++ >= 9;
            if (v11)
            {
              unsigned int v50 = 0LL;
              goto LABEL_102;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_99:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            unsigned int v50 = 0LL;
          }
          else {
            unsigned int v50 = v46;
          }
LABEL_102:
          double result = PBRepeatedUInt32Add(v3 + 32, v50);
        }

        goto LABEL_135;
      case 6u:
        if (v14 == 2)
        {
          double result = PBReaderPlaceMark(a2, v102);
          if (!(_DWORD)result) {
            return result;
          }
          while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
               && !*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          {
            int v51 = 0;
            unsigned __int8 v52 = 0;
            int v53 = 0LL;
            while (1)
            {
              unsigned int v54 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              int v55 = v54 + 1;
              if (v54 == -1) {
                goto LABEL_192;
              }
              if (v55 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                break;
              }
              char v56 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v54);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v55;
              v53 |= (unint64_t)(v56 & 0x7F) << v51;
              if ((v56 & 0x80) == 0) {
                goto LABEL_115;
              }
              v51 += 7;
              xpc_object_t v11 = v52++ >= 9;
              if (v11)
              {
                BOOL v57 = 0LL;
                goto LABEL_118;
              }
            }

            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_115:
            if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
              BOOL v57 = 0LL;
            }
            else {
              BOOL v57 = v53;
            }
LABEL_118:
            double result = PBRepeatedUInt32Add(v3 + 80, v57);
          }

void sub_1000CD180( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1000CD28C( void *a1@<X0>, void *a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, char a6@<W5>, uint64_t a7@<X8>)
{
  id v260 = a1;
  id v9 = a2;
  LOBYTE(a2) = byte_1002D1238;
  id v269 = v9;
  xpc_type_t type = xpc_get_type(v9);
  unsigned int v267 = (a2 & 1) == 0;
  v268 = (uint64_t **)a7;
  *(void *)(a7 + 16) = 0LL;
  *(void *)(a7 + 8) = 0LL;
  *(void *)a7 = a7 + 8;
  if (type != (xpc_type_t)&_xpc_type_array)
  {
    xpc_object_t v11 = sub_1000160F4("com.apple.wpantund.awd", "default");
    size_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_10020D7D0();
    }

    goto LABEL_5;
  }

  size_t count = xpc_array_get_count(v269);
  unsigned __int8 v52 = sub_1000160F4("com.apple.wpantund.awd", "default");
  int v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
  if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 134217984;
    *(void *)&uint8_t buf[4] = count;
    _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_INFO,  "CAMetrics : CAMetricsHandlers_handle_getprop_threadmle - reading array with size %ld.",  buf,  0xCu);
  }

  if (count)
  {
    size_t v54 = 0LL;
    unsigned int v13 = 0LL;
    unsigned int v254 = 0;
    unsigned int v256 = 0;
    unsigned int v262 = 0;
    unsigned int v265 = 0;
    int v55 = (char *)&unk_1002CA1D0 + 13848 * v267;
    v248 = v55 + 124;
    while (1)
    {
      xpc_object_t dictionary = xpc_array_get_dictionary(v269, v54);
      BOOL v57 = (void *)objc_claimAutoreleasedReturnValue(dictionary);

      unsigned int v13 = v57;
      string = (char *)xpc_dictionary_get_string(v57, "key");
      sub_10000AC00(buf, string);
      uint64_t uint64 = xpc_dictionary_get_uint64(v57, "value");
      if ((buf[23] & 0x80000000) == 0)
      {
        unsigned int v60 = (uint64_t *)buf;
        switch(buf[23])
        {
          case 0xB:
            goto LABEL_207;
          case 0xC:
          case 0xD:
          case 0xE:
          case 0x12:
          case 0x15:
          case 0x16:
          case 0x17:
          case 0x18:
          case 0x19:
            goto LABEL_211;
          case 0xF:
            goto LABEL_163;
          case 0x10:
LABEL_38:
            if (*(void *)buf != 0x6F725F646C696863LL || *(void *)&buf[8] != 0x746E756F635F656CLL) {
              goto LABEL_83;
            }
            goto LABEL_106;
          case 0x11:
LABEL_144:
            if (*(void *)buf == 0x725F726574756F72LL && *(void *)&buf[8] == 0x6E756F635F656C6FLL && buf[16] == 116) {
              goto LABEL_218;
            }
            if (buf[23] == 11) {
              goto LABEL_169;
            }
            if (buf[23] == 15) {
              goto LABEL_163;
            }
            if (buf[23] != 17) {
              goto LABEL_211;
            }
            BOOL v88 = *(void *)buf == 0x725F72656461656CLL && *(void *)&buf[8] == 0x6E756F635F656C6FLL;
            if (!v88 || buf[16] != 116) {
              goto LABEL_211;
            }
            goto LABEL_162;
          case 0x13:
            if (*(void *)buf == 0x64656C6261736964LL
              && *(void *)&buf[8] == 0x6F635F656C6F725FLL
              && *(void *)&buf[11] == 0x746E756F635F656CLL)
            {
              goto LABEL_170;
            }

            if (*(void *)buf != 0x6465686361746564LL
              || *(void *)&buf[8] != 0x6F635F656C6F725FLL
              || *(void *)&buf[11] != 0x746E756F635F656CLL)
            {
              unsigned int v60 = (uint64_t *)buf;
              switch(buf[23])
              {
                case 0xB:
                  goto LABEL_207;
                case 0xF:
                  goto LABEL_163;
                case 0x10:
                  goto LABEL_38;
                case 0x11:
                  goto LABEL_144;
                default:
                  goto LABEL_211;
              }
            }

            goto LABEL_220;
          case 0x14:
            goto LABEL_120;
          case 0x1A:
            if (*(void *)buf != 0x6F69746974726170LL
              || *(void *)&buf[8] != 0x6168635F64695F6ELL
              || *(void *)&buf[16] != 0x756F635F7365676ELL
              || *(unsigned __int16 *)&buf[24] != 29806)
            {
              goto LABEL_118;
            }

            goto LABEL_222;
          default:
            if (buf[23] != 32) {
              goto LABEL_211;
            }
            if (*(void *)buf == 0x705F726574746562LL
              && *(void *)&buf[8] == 0x6E6F697469747261LL
              && *(void *)&buf[16] == 0x5F6863617474615FLL
              && *(void *)&buf[24] == 0x7374706D65747461LL)
            {
              goto LABEL_225;
            }

LABEL_118:
            if (buf[23] == 11) {
              goto LABEL_169;
            }
            if (buf[23] != 20) {
              goto LABEL_211;
            }
LABEL_120:
            if (*(void *)buf != 0x635F746E65726170LL
              || *(void *)&buf[8] != 0x635F7365676E6168LL
              || *(unsigned int *)&buf[16] != 1953396079LL)
            {
              goto LABEL_168;
            }

            goto LABEL_221;
        }
      }

      uint64_t v62 = *(void *)&buf[8];
      if (*(void *)&buf[8] == 19LL)
      {
        if (**(void **)buf == 0x64656C6261736964LL
          && *(void *)(*(void *)buf + 8LL) == 0x6F635F656C6F725FLL
          && *(void *)(*(void *)buf + 11LL) == 0x746E756F635F656CLL)
        {
LABEL_170:
          *((_DWORD *)v55 + 14) = sub_1000BE984(3, uint64);
          unsigned int v94 = byte_1002D1238;
          __int128 v91 = sub_100070EE8((uint64_t **)a7, (std::string *)buf);
          __int128 v92 = (char *)&unk_1002CA1D0 + 13848 * v94 + 56;
          goto LABEL_230;
        }

        if (**(void **)buf == 0x6465686361746564LL
          && *(void *)(*(void *)buf + 8LL) == 0x6F635F656C6F725FLL
          && *(void *)(*(void *)buf + 11LL) == 0x746E756F635F656CLL)
        {
LABEL_220:
          *((_DWORD *)v55 + 15) = sub_1000BE984(3, uint64);
          unsigned int v112 = byte_1002D1238;
          __int128 v91 = sub_100070EE8((uint64_t **)a7, (std::string *)buf);
          __int128 v92 = (char *)&unk_1002CA1D0 + 13848 * v112 + 60;
          goto LABEL_230;
        }

        uint64_t v62 = *(void *)&buf[8];
      }

      if (v62 == 16)
      {
        if (**(void **)buf == 0x6F725F646C696863LL && *(void *)(*(void *)buf + 8LL) == 0x746E756F635F656CLL)
        {
LABEL_106:
          *((_DWORD *)v55 + 16) = sub_1000BE984(3, uint64);
          LODWORD(__str.__r_.__value_.__l.__data_) = sub_1000BE984( 3,  *((_DWORD *)&unk_1002CA1D0 + 3462 * byte_1002D1238 + 16));
          int v76 = sub_100070EE8((uint64_t **)a7, (std::string *)buf);
          sub_100017730(v76, &__str);
          goto LABEL_231;
        }

        uint64_t v62 = *(void *)&buf[8];
      }

      if (v62 == 17)
      {
        if (**(void **)buf == 0x725F726574756F72LL
          && *(void *)(*(void *)buf + 8LL) == 0x6E756F635F656C6FLL
          && *(_BYTE *)(*(void *)buf + 16LL) == 116)
        {
LABEL_218:
          *((_DWORD *)v55 + 17) = sub_1000BE984(3, uint64);
          unsigned int v110 = byte_1002D1238;
          __int128 v91 = sub_100070EE8((uint64_t **)a7, (std::string *)buf);
          __int128 v92 = (char *)&unk_1002CA1D0 + 13848 * v110 + 68;
          goto LABEL_230;
        }

        uint64_t v62 = *(void *)&buf[8];
        if (*(void *)&buf[8] == 17LL)
        {
          if (**(void **)buf == 0x725F72656461656CLL
            && *(void *)(*(void *)buf + 8LL) == 0x6E756F635F656C6FLL
            && *(_BYTE *)(*(void *)buf + 16LL) == 116)
          {
LABEL_162:
            *((_DWORD *)v55 + 18) = sub_1000BE984(3, uint64);
            unsigned int v90 = byte_1002D1238;
            __int128 v91 = sub_100070EE8((uint64_t **)a7, (std::string *)buf);
            __int128 v92 = (char *)&unk_1002CA1D0 + 13848 * v90 + 72;
LABEL_230:
            sub_100017F70(v91, v92);
            goto LABEL_231;
          }

          if ((buf[23] & 0x80) == 0) {
            break;
          }
        }
      }

      if (v62 == 15)
      {
        if (**(void **)buf == 0x615F686361747461LL && *(void *)(*(void *)buf + 7LL) == 0x7374706D65747461LL)
        {
LABEL_219:
          *((_DWORD *)v55 + 19) = sub_1000BE984(3, uint64);
          unsigned int v111 = byte_1002D1238;
          __int128 v91 = sub_100070EE8((uint64_t **)a7, (std::string *)buf);
          __int128 v92 = (char *)&unk_1002CA1D0 + 13848 * v111 + 76;
          goto LABEL_230;
        }

  self->_rxErrorAckDenied = v5[22];
  *(void *)&self->_has |= 0x100000uLL;
  id v9 = *((void *)v5 + 31);
  if ((v9 & 0x80000) == 0)
  {
LABEL_65:
    if ((v9 & 0x200000000LL) == 0) {
      goto LABEL_66;
    }
    goto LABEL_120;
  }

  if ((v7 & 0x80) != 0) {
    operator delete(__s1);
  }
}

LABEL_171:
        uint64_t v62 = *(void *)&buf[8];
      }

      if (v62 == 26)
      {
        if (**(void **)buf == 0x6F69746974726170LL
          && *(void *)(*(void *)buf + 8LL) == 0x6168635F64695F6ELL
          && *(void *)(*(void *)buf + 16LL) == 0x756F635F7365676ELL
          && *(_WORD *)(*(void *)buf + 24LL) == 29806)
        {
LABEL_222:
          *((_DWORD *)v55 + 20) = sub_1000BE984(3, uint64);
          unsigned int v114 = byte_1002D1238;
          __int128 v91 = sub_100070EE8((uint64_t **)a7, (std::string *)buf);
          __int128 v92 = (char *)&unk_1002CA1D0 + 13848 * v114 + 80;
          goto LABEL_230;
        }

        uint64_t v62 = *(void *)&buf[8];
      }

      if (v62 == 32)
      {
        if (**(void **)buf == 0x705F726574746562LL
          && *(void *)(*(void *)buf + 8LL) == 0x6E6F697469747261LL
          && *(void *)(*(void *)buf + 16LL) == 0x5F6863617474615FLL
          && *(void *)(*(void *)buf + 24LL) == 0x7374706D65747461LL)
        {
LABEL_225:
          *((_DWORD *)v55 + 21) = sub_1000BE984(3, uint64);
          unsigned int v116 = byte_1002D1238;
          __int128 v91 = sub_100070EE8((uint64_t **)a7, (std::string *)buf);
          __int128 v92 = (char *)&unk_1002CA1D0 + 13848 * v116 + 84;
          goto LABEL_230;
        }

        uint64_t v62 = *(void *)&buf[8];
      }

      if (v62 == 20)
      {
        if (**(void **)buf == 0x635F746E65726170LL
          && *(void *)(*(void *)buf + 8LL) == 0x635F7365676E6168LL
          && *(_DWORD *)(*(void *)buf + 16LL) == 1953396079LL)
        {
LABEL_221:
          *((_DWORD *)v55 + 22) = sub_1000BE984(3, uint64);
          unsigned int v113 = byte_1002D1238;
          __int128 v91 = sub_100070EE8((uint64_t **)a7, (std::string *)buf);
          __int128 v92 = (char *)&unk_1002CA1D0 + 13848 * v113 + 88;
          goto LABEL_230;
        }

        uint64_t v62 = *(void *)&buf[8];
      }

      if (v62 != 11) {
        goto LABEL_211;
      }
      unsigned int v60 = *(uint64_t **)buf;
LABEL_207:
      uint64_t v103 = *v60;
      uint64_t v104 = *(uint64_t *)((char *)v60 + 3);
      if (v103 == 0x79616C65645F7874LL && v104 == 0x6E696D79616C6564LL)
      {
        *((_DWORD *)v55 + 11) = sub_1000BE984(3, uint64);
        unsigned int v109 = byte_1002D1238;
        __int128 v91 = sub_100070EE8((uint64_t **)a7, (std::string *)buf);
        __int128 v92 = (char *)&unk_1002CA1D0 + 13848 * v109 + 44;
        goto LABEL_230;
      }

        if ((buf[23] & 0x80000000) == 0)
        {
          switch(buf[23])
          {
            case 7:
              goto LABEL_173;
            case 8:
              if (*(void *)buf == 0x6C61746F745F7872LL) {
                goto LABEL_243;
              }
              goto LABEL_311;
            case 0xA:
              if (buf[23] == 7) {
                goto LABEL_173;
              }
              goto LABEL_299;
            case 0xC:
              if (buf[23] == 10) {
                goto LABEL_300;
              }
              if (buf[23] != 7) {
                goto LABEL_311;
              }
LABEL_173:
              if (*(_DWORD *)buf != 1683978354 || *(_DWORD *)&buf[3] != 1635017060) {
                goto LABEL_311;
              }
              goto LABEL_241;
            case 0xE:
              goto LABEL_269;
            case 0xF:
              goto LABEL_294;
            case 0x11:
              if (*(void *)buf == 0x645F7272655F7872LL
                && *(void *)&buf[8] == 0x65746163696C7075LL
                && buf[16] == 100)
              {
                goto LABEL_301;
              }

              if (buf[23] == 10) {
                goto LABEL_300;
              }
              if (buf[23] == 15) {
                goto LABEL_294;
              }
              if (buf[23] != 14) {
                goto LABEL_311;
              }
LABEL_269:
              if (*(void *)buf != 0x6E5F7272655F7872LL || *(void *)&buf[6] != 0x656D6172666F6E5FLL) {
                goto LABEL_299;
              }
              goto LABEL_274;
            case 0x17:
              if (*(void *)buf == 0x755F7272655F7872LL
                && *(void *)&buf[8] == 0x6E5F6E776F6E6B6ELL
                && *(void *)&buf[15] == 0x726F62686769656ELL)
              {
                goto LABEL_303;
              }

              if (buf[23] == 10) {
                goto LABEL_300;
              }
              if (buf[23] == 15) {
                goto LABEL_294;
              }
              if (buf[23] != 23) {
                goto LABEL_311;
              }
              int v68 = *(void *)buf == 0x695F7272655F7872LL && *(void *)&buf[8] == 0x735F64696C61766ELL;
              if (!v68 || *(void *)&buf[15] != 0x726464615F637273LL) {
                goto LABEL_311;
              }
              goto LABEL_293;
            default:
              goto LABEL_311;
          }
        }

        uint64_t v49 = *(void *)&buf[8];
        if (*(void *)&buf[8] == 8LL && **(void **)buf == 0x6C61746F745F7872LL)
        {
LABEL_243:
          -[AWDCountersMacRxS setRxTotal:](v10, "setRxTotal:", sub_1000BE984(4, uint64));
          goto LABEL_314;
        }

        if (*(void *)&buf[8] == 10LL)
        {
          if (**(void **)buf == 0x6163696E755F7872LL && *(_WORD *)(*(void *)buf + 8LL) == 29811)
          {
LABEL_250:
            -[AWDCountersMacRxS setRxUnicast:](v10, "setRxUnicast:", sub_1000BE984(4, uint64));
            goto LABEL_314;
          }

          uint64_t v49 = *(void *)&buf[8];
        }

        if (v49 == 12)
        {
          if (**(void **)buf == 0x64616F72625F7872LL && *(_DWORD *)(*(void *)buf + 8LL) == 1953718627LL)
          {
LABEL_258:
            -[AWDCountersMacRxS setRxBroadcast:](v10, "setRxBroadcast:", sub_1000BE984(4, uint64));
            goto LABEL_314;
          }

          uint64_t v49 = *(void *)&buf[8];
        }

        if (v49 == 7)
        {
          if (**(_DWORD **)buf == 1683978354 && *(_DWORD *)(*(void *)buf + 3LL) == 1635017060)
          {
LABEL_241:
            -[AWDCountersMacRxS setRxData:](v10, "setRxData:", sub_1000BE984(4, uint64));
            goto LABEL_314;
          }

          uint64_t v49 = *(void *)&buf[8];
        }

        if (v49 == 17)
        {
          if (**(void **)buf == 0x645F7272655F7872LL
            && *(void *)(*(void *)buf + 8LL) == 0x65746163696C7075LL
            && *(_BYTE *)(*(void *)buf + 16LL) == 100)
          {
LABEL_301:
            -[AWDCountersMacRxS setRxErrDuplicated:](v10, "setRxErrDuplicated:", sub_1000BE984(4, uint64));
            goto LABEL_314;
          }

          uint64_t v49 = *(void *)&buf[8];
        }

        if (v49 == 14)
        {
          if (**(void **)buf == 0x6E5F7272655F7872LL && *(void *)(*(void *)buf + 6LL) == 0x656D6172666F6E5FLL)
          {
LABEL_274:
            -[AWDCountersMacRxS setRxErrNoframe:](v10, "setRxErrNoframe:", sub_1000BE984(4, uint64));
            goto LABEL_314;
          }

          uint64_t v49 = *(void *)&buf[8];
        }

        if (v49 == 23)
        {
          if (**(void **)buf == 0x755F7272655F7872LL
            && *(void *)(*(void *)buf + 8LL) == 0x6E5F6E776F6E6B6ELL
            && *(void *)(*(void *)buf + 15LL) == 0x726F62686769656ELL)
          {
LABEL_303:
            -[AWDCountersMacRxS setRxErrUnknownNeighbor:](v10, "setRxErrUnknownNeighbor:", sub_1000BE984(4, uint64));
            goto LABEL_314;
          }

          uint64_t v49 = *(void *)&buf[8];
          if (*(void *)&buf[8] == 23LL)
          {
            if (**(void **)buf == 0x695F7272655F7872LL
              && *(void *)(*(void *)buf + 8LL) == 0x735F64696C61766ELL
              && *(void *)(*(void *)buf + 15LL) == 0x726464615F637273LL)
            {
LABEL_293:
              -[AWDCountersMacRxS setRxErrInvalidSrcAddr:](v10, "setRxErrInvalidSrcAddr:", sub_1000BE984(4, uint64));
              goto LABEL_314;
            }

            if ((buf[23] & 0x80) == 0)
            {
              if (buf[23] == 10) {
                goto LABEL_300;
              }
              if (buf[23] != 15) {
                goto LABEL_311;
              }
LABEL_294:
              if (*(void *)buf == 0x735F7272655F7872LL && *(void *)&buf[7] == 0x7974697275636573LL)
              {
LABEL_302:
                -[AWDCountersMacRxS setRxErrSecurity:](v10, "setRxErrSecurity:", sub_1000BE984(4, uint64));
                goto LABEL_314;
              }

              if ((buf[23] & 0x80) == 0)
              {
LABEL_299:
                if (buf[23] != 10) {
                  goto LABEL_311;
                }
LABEL_300:
                unsigned int v71 = buf;
                goto LABEL_307;
              }

              goto LABEL_304;
            }
          }
        }

        if (v49 == 15)
        {
          if (**(void **)buf == 0x735F7272655F7872LL && *(void *)(*(void *)buf + 7LL) == 0x7974697275636573LL) {
            goto LABEL_302;
          }
LABEL_304:
          uint64_t v49 = *(void *)&buf[8];
        }

        if (v49 != 10) {
          goto LABEL_311;
        }
        unsigned int v71 = *(_BYTE **)buf;
LABEL_307:
        int v72 = *(void *)v71;
        unsigned int v73 = *((unsigned __int16 *)v71 + 4);
        if (v72 != 0x665F7272655F7872LL || v73 != 29539)
        {
LABEL_311:
          if (sub_1000B55AC(buf, "rx_err_other")) {
            -[AWDCountersMacRxS setRxErrOther:](v10, "setRxErrOther:", sub_1000BE984(4, uint64));
          }
          goto LABEL_314;
        }

        -[AWDCountersMacRxS setRxErrFcs:](v10, "setRxErrFcs:", sub_1000BE984(4, uint64));
LABEL_314:
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (count == ++v12) {
          goto LABEL_319;
        }
      }

      unsigned int v18 = *(void *)&buf[8];
      if (*(void *)&buf[8] == 8LL && **(void **)buf == 0x6C61746F745F7874LL)
      {
LABEL_101:
        -[AWDCountersMacTxS setTxTotal:](v11, "setTxTotal:", sub_1000BE984(4, uint64));
        goto LABEL_171;
      }

      if (*(void *)&buf[8] == 10LL)
      {
        if (**(void **)buf == 0x6163696E755F7874LL && *(_WORD *)(*(void *)buf + 8LL) == 29811)
        {
LABEL_109:
          -[AWDCountersMacTxS setTxUnicast:](v11, "setTxUnicast:", sub_1000BE984(4, uint64));
          goto LABEL_171;
        }

        unsigned int v18 = *(void *)&buf[8];
      }

      if (v18 == 12)
      {
        if (**(void **)buf == 0x64616F72625F7874LL && *(_DWORD *)(*(void *)buf + 8LL) == 1953718627LL)
        {
LABEL_118:
          -[AWDCountersMacTxS setTxBroadcast:](v11, "setTxBroadcast:", sub_1000BE984(4, uint64));
          goto LABEL_171;
        }

        unsigned int v18 = *(void *)&buf[8];
      }

      if (v18 == 7)
      {
        if (**(_DWORD **)buf == 1683978356 && *(_DWORD *)(*(void *)buf + 3LL) == 1635017060)
        {
LABEL_99:
          -[AWDCountersMacTxS setTxData:](v11, "setTxData:", sub_1000BE984(4, uint64));
          goto LABEL_171;
        }

        unsigned int v18 = *(void *)&buf[8];
      }

      if (v18 == 26)
      {
        if (**(void **)buf == 0x63657269645F7874LL
          && *(void *)(*(void *)buf + 8LL) == 0x65725F78616D5F74LL
          && *(void *)(*(void *)buf + 16LL) == 0x697078655F797274LL
          && *(_WORD *)(*(void *)buf + 24LL) == 31090)
        {
LABEL_139:
          -[AWDCountersMacTxS setTxDirectMaxRetryExpiry:](v11, "setTxDirectMaxRetryExpiry:", sub_1000BE984(4, uint64));
          goto LABEL_171;
        }

        unsigned int v18 = *(void *)&buf[8];
      }

      if (v18 == 28)
      {
        if (**(void **)buf == 0x7269646E695F7874LL
          && *(void *)(*(void *)buf + 8LL) == 0x5F78616D5F746365LL
          && *(void *)(*(void *)buf + 16LL) == 0x78655F7972746572LL
          && *(_DWORD *)(*(void *)buf + 24LL) == 2037541232LL)
        {
LABEL_140:
          -[AWDCountersMacTxS setTxIndirectMaxRetryExpiry:]( v11,  "setTxIndirectMaxRetryExpiry:",  sub_1000BE984(4, uint64));
          goto LABEL_171;
        }

        unsigned int v18 = *(void *)&buf[8];
      }

      if (v18 == 10)
      {
        if (**(void **)buf == 0x635F7272655F7874LL && *(_WORD *)(*(void *)buf + 8LL) == 24931)
        {
LABEL_146:
          -[AWDCountersMacTxS setTxErrCca:](v11, "setTxErrCca:", sub_1000BE984(4, uint64));
          goto LABEL_171;
        }

        unsigned int v18 = *(void *)&buf[8];
      }

      if (v18 == 12)
      {
        if (**(void **)buf == 0x615F7272655F7874LL && *(_DWORD *)(*(void *)buf + 8LL) == 1953656674LL)
        {
LABEL_165:
          -[AWDCountersMacTxS setTxErrAbort:](v11, "setTxErrAbort:", sub_1000BE984(4, uint64));
          goto LABEL_171;
        }

        unsigned int v18 = *(void *)&buf[8];
      }

      if (v18 == 19)
      {
        if (**(void **)buf == 0x625F7272655F7874LL
          && *(void *)(*(void *)buf + 8LL) == 0x6E6168635F797375LL
          && *(void *)(*(void *)buf + 11LL) == 0x6C656E6E6168635FLL)
        {
LABEL_138:
          -[AWDCountersMacTxS setTxErrBusyChannel:](v11, "setTxErrBusyChannel:", sub_1000BE984(4, uint64));
          goto LABEL_171;
        }

        unsigned int v18 = *(void *)&buf[8];
      }

      if (v18 != 12) {
        goto LABEL_157;
      }
      unsigned int v32 = *(_BYTE **)buf;
      goto LABEL_153;
    }

    id v5 = 0LL;
LABEL_319:
    unsigned int v75 = -[AWDCountersMacTxS txErrCca](v11, "txErrCca");
    int v76 = -[AWDCountersMacTxS txErrAbort](v11, "txErrAbort");
    unsigned __int8 v77 = v75 + v76;
    if (!__CFADD__(v75, v76))
    {
      int v78 = -[AWDCountersMacTxS txErrBusyChannel](v11, "txErrBusyChannel");
      unsigned int v79 = __CFADD__(v77, v78);
      int v80 = v77 + v78;
      if (!v79)
      {
        unsigned int v81 = 100LL * -[AWDCountersMacTxS txErrCca](v11, "txErrCca");
        if ((v81 & 0xFFFFFFFF00000000LL) != 0) {
          goto LABEL_335;
        }
        -[AWDCountersMacTxS setTxErrCcaPercentage:]( v11,  "setTxErrCcaPercentage:",  sub_1000BE984(4, v81 / v80));
        int v82 = 100LL * -[AWDCountersMacTxS txErrAbort](v11, "txErrAbort");
        if ((v82 & 0xFFFFFFFF00000000LL) != 0) {
          goto LABEL_335;
        }
        -[AWDCountersMacTxS setTxErrAbortPercentage:]( v11,  "setTxErrAbortPercentage:",  sub_1000BE984(4, v82 / v80));
        unsigned int v83 = 100LL * -[AWDCountersMacTxS txErrBusyChannel](v11, "txErrBusyChannel");
        if ((v83 & 0xFFFFFFFF00000000LL) != 0) {
          goto LABEL_335;
        }
        -[AWDCountersMacTxS setTxErrBusyChannelPercentage:]( v11,  "setTxErrBusyChannelPercentage:",  sub_1000BE984(4, v83 / v80));
        int v84 = 100LL * v80;
        if ((v84 & 0xFFFFFFFF00000000LL) != 0) {
          goto LABEL_335;
        }
        -[AWDCountersMacTxS setTxErrPercentage:]( v11,  "setTxErrPercentage:",  sub_1000BE984(4, v84 / -[AWDCountersMacTxS txTotal](v11, "txTotal")));
        unsigned int v85 = -[AWDCountersMacRxS rxErrSecurity](v10, "rxErrSecurity");
        int v86 = -[AWDCountersMacRxS rxErrFcs](v10, "rxErrFcs");
        unsigned int v87 = v85 + v86;
        if (!__CFADD__(v85, v86))
        {
          BOOL v88 = -[AWDCountersMacRxS rxErrOther](v10, "rxErrOther");
          unsigned int v79 = __CFADD__(v87, v88);
          uint64_t v89 = v87 + v88;
          if (!v79)
          {
            unsigned int v90 = -[AWDCountersMacRxS rxErrInvalidSrcAddr](v10, "rxErrInvalidSrcAddr");
            unsigned int v79 = __CFADD__(v89, v90);
            __int128 v91 = v89 + v90;
            if (!v79)
            {
              __int128 v92 = -[AWDCountersMacRxS rxErrUnknownNeighbor](v10, "rxErrUnknownNeighbor");
              unsigned int v79 = __CFADD__(v91, v92);
              uint64_t v93 = v91 + v92;
              if (!v79)
              {
                unsigned int v94 = -[AWDCountersMacRxS rxErrNoframe](v10, "rxErrNoframe");
                unsigned int v79 = __CFADD__(v93, v94);
                id v95 = v93 + v94;
                if (!v79)
                {
                  uint64_t v96 = -[AWDCountersMacRxS rxErrDuplicated](v10, "rxErrDuplicated");
                  if (!__CFADD__(v95, v96))
                  {
                    size_t v97 = 100LL * (v95 + v96);
                    if ((v97 & 0xFFFFFFFF00000000LL) == 0)
                    {
                      -[AWDCountersMacRxS setRxErrPercentage:]( v10,  "setRxErrPercentage:",  sub_1000BE984(4, v97 / -[AWDCountersMacRxS rxTotal](v10, "rxTotal")));
                      [v99 setSCntrsMacTx:v11];
                      [v99 setSCntrsMacRx:v10];

                      char v6 = 0LL;
                      goto LABEL_333;
                    }

        -[AWDCountersCoexS setCoexRxGrantedRequests:](v10, "setCoexRxGrantedRequests:", sub_1000BE984(4, uint64));
        goto LABEL_173;
      }

LABEL_231:
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if (count == ++v54) {
        goto LABEL_6;
      }
    }

LABEL_487:
    __break(0x550Cu);
    goto LABEL_488;
  }

  unsigned int v181 = 0;
LABEL_326:
  unsigned int v263 = sub_1000BE984(4, v181);
  *((_DWORD *)&unk_1002CA1D0 + 3462 * v267 + 29) = v263;
  unsigned int v182 = byte_1002D1238;
  sub_10000AC00(buf, "coex_rx_denied_requests_percentage");
  uint64_t v183 = sub_10000ED88(v268, (__n128 *)buf);
  sub_100017F70(v183, (_DWORD *)&unk_1002CA1D0 + 3462 * v182 + 29);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v184 = (char *)&unk_1002CA1D0 + 13848 * v267;
  *((_DWORD *)v184 + 33) = dword_1002D122C;
  v257 = v184 + 132;
  unsigned int v185 = byte_1002D1238;
  sub_10000AC00(buf, "num_apple_border_routers");
  uint64_t v186 = sub_10000ED88(v268, (__n128 *)buf);
  sub_100017F70(v186, (_DWORD *)&unk_1002CA1D0 + 3462 * v185 + 33);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v187 = (char *)&unk_1002CA1D0 + 13848 * v267;
  *((_DWORD *)v187 + 32) = dword_1002D1228;
  v255 = v187 + 128;
  unsigned int v188 = byte_1002D1238;
  sub_10000AC00(buf, "num_third_party_border_routers");
  uint64_t v189 = sub_10000ED88(v268, (__n128 *)buf);
  sub_100017F70(v189, (_DWORD *)&unk_1002CA1D0 + 3462 * v188 + 32);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v190 = (char *)&unk_1002CA1D0 + 13848 * v267;
  *((_DWORD *)v190 + 34) = dword_1002D1234;
  v251 = v190 + 136;
  unsigned int v191 = byte_1002D1238;
  sub_10000AC00(buf, "num_thread_networks");
  uint64_t v192 = sub_10000ED88(v268, (__n128 *)buf);
  sub_100017F70(v192, (_DWORD *)&unk_1002CA1D0 + 3462 * v191 + 34);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  *((_BYTE *)&unk_1002CA1D0 + 13848 * v267 + 140) = a6 ^ 1;
  if (byte_1002D1238 > 1uLL) {
LABEL_488:
  }
    __break(1u);
  __str.__r_.__value_.__s.__data_[0] = *((_BYTE *)&unk_1002CA1D0 + 13848 * byte_1002D1238 + 140) ^ 1;
  sub_10000AC00(buf, "is_leader_thirdparty");
  uint64_t v193 = sub_10000ED88(v268, (__n128 *)buf);
  sub_100020B4C(v193, &__str);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  size_t v194 = xpc_array_get_count(v269);
  if (v194)
  {
    size_t v195 = 0LL;
    while (1)
    {
      xpc_object_t v196 = xpc_array_get_dictionary(v269, v195);
      uint64_t v197 = (void *)objc_claimAutoreleasedReturnValue(v196);

      unsigned int v13 = v197;
      uint64_t v198 = (char *)xpc_dictionary_get_string(v197, "key");
      uint64_t v199 = sub_10000AC00(buf, v198);
      if ((buf[23] & 0x80000000) != 0) {
        break;
      }
      if (buf[23] <= 0x12u)
      {
        switch(buf[23])
        {
          case 8:
            if (*(void *)buf != 0x6C61746F745F7872LL)
            {
              if (*(void *)buf != 0x6C61746F745F7874LL) {
                goto LABEL_461;
              }
              goto LABEL_427;
            }

LABEL_457:
            v219 = v258;
            goto LABEL_459;
          case 0xD:
            uint64_t v216 = (uint64_t *)buf;
            goto LABEL_450;
          case 0xF:
            if (*(void *)buf != 0x65636375735F7874LL || *(void *)&buf[7] != 0x637265705F737365LL)
            {
              if (*(void *)buf != 0x65636375735F7872LL || *(void *)&buf[7] != 0x637265705F737365LL) {
                goto LABEL_461;
              }
              goto LABEL_419;
            }

LABEL_456:
            v219 = v261;
            goto LABEL_459;
        }
      }

      else if (buf[23] > 0x1Du)
      {
        if (buf[23] == 30)
        {
          if (*(void *)buf != 0x726968745F6D756ELL
            || *(void *)&buf[8] != 0x5F79747261705F64LL
            || *(void *)&buf[16] != 0x725F726564726F62LL
            || *(void *)&buf[22] != 0x73726574756F725FLL)
          {
            goto LABEL_461;
          }

LABEL_448:
          v219 = v255;
LABEL_459:
          unsigned int v207 = *(_DWORD *)v219;
          goto LABEL_460;
        }

        if (buf[23] == 34)
        {
          int v220 = memcmp(v199, "coex_tx_denied_requests_percentage", 0x22uLL);
          unsigned int v207 = v266;
          if (!v220) {
            goto LABEL_460;
          }
          int v221 = memcmp(buf, "coex_rx_denied_requests_percentage", 0x22uLL);
          unsigned int v207 = v263;
          if (!v221) {
            goto LABEL_460;
          }
LABEL_461:
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
      }

      else
      {
        if (buf[23] == 19)
        {
          if (*(void *)buf != 0x657268745F6D756ELL
            || *(void *)&buf[8] != 0x6F7774656E5F6461LL
            || *(void *)&buf[11] != 0x736B726F7774656ELL)
          {
            goto LABEL_461;
          }

          goto LABEL_436;
        }

        if (buf[23] == 24)
        {
          if (*(void *)buf != 0x6C7070615F6D756ELL
            || *(void *)&buf[8] != 0x726564726F625F65LL
            || *(void *)&buf[16] != 0x73726574756F725FLL)
          {
            goto LABEL_461;
          }

          goto LABEL_458;
        }
      }

      if (v194 == ++v195) {
        goto LABEL_464;
      }
    }

    uint64_t v202 = *(void *)&buf[8];
    if (*(void *)&buf[8] == 8LL)
    {
      if (**(void **)buf == 0x6C61746F745F7874LL)
      {
LABEL_427:
        v219 = v264;
        goto LABEL_459;
      }

      uint64_t v202 = *(void *)&buf[8];
    }

    else if (*(void *)&buf[8] == 15LL {
           && **(void **)buf == 0x65636375735F7874LL
    }
           && *(void *)(*(void *)buf + 7LL) == 0x637265705F737365LL)
    {
      goto LABEL_456;
    }

    if (v202 == 15)
    {
      if (**(void **)buf == 0x65636375735F7872LL && *(void *)(*(void *)buf + 7LL) == 0x637265705F737365LL)
      {
LABEL_419:
        v219 = v259;
        goto LABEL_459;
      }

      uint64_t v202 = *(void *)&buf[8];
    }

    if (v202 == 8)
    {
      if (**(void **)buf == 0x6C61746F745F7872LL) {
        goto LABEL_457;
      }
      uint64_t v202 = *(void *)&buf[8];
    }

    if (v202 == 34)
    {
      uint64_t v205 = *(const void **)buf;
      int v206 = memcmp(*(const void **)buf, "coex_tx_denied_requests_percentage", 0x22uLL);
      unsigned int v207 = v266;
      if (!v206
        || (uint64_t v202 = *(void *)&buf[8], *(void *)&buf[8] == 34LL)
        && (v208 = memcmp(v205, "coex_rx_denied_requests_percentage", 0x22uLL), unsigned int v207 = v263, !v208))
      {
LABEL_460:
        xpc_dictionary_set_uint64(v13, "value", v207);
        goto LABEL_461;
      }
    }

    if (v202 == 24)
    {
      if (**(void **)buf == 0x6C7070615F6D756ELL
        && *(void *)(*(void *)buf + 8LL) == 0x726564726F625F65LL
        && *(void *)(*(void *)buf + 16LL) == 0x73726574756F725FLL)
      {
LABEL_458:
        v219 = v257;
        goto LABEL_459;
      }

      uint64_t v202 = *(void *)&buf[8];
    }

    if (v202 == 30)
    {
      if (**(void **)buf == 0x726968745F6D756ELL
        && *(void *)(*(void *)buf + 8LL) == 0x5F79747261705F64LL
        && *(void *)(*(void *)buf + 16LL) == 0x725F726564726F62LL
        && *(void *)(*(void *)buf + 22LL) == 0x73726574756F725FLL)
      {
        goto LABEL_448;
      }

      uint64_t v202 = *(void *)&buf[8];
    }

    if (v202 == 19)
    {
      if (**(void **)buf == 0x657268745F6D756ELL
        && *(void *)(*(void *)buf + 8LL) == 0x6F7774656E5F6461LL
        && *(void *)(*(void *)buf + 11LL) == 0x736B726F7774656ELL)
      {
LABEL_436:
        v219 = v251;
        goto LABEL_459;
      }

      uint64_t v202 = *(void *)&buf[8];
    }

    if (v202 != 13) {
      goto LABEL_461;
    }
    uint64_t v216 = *(uint64_t **)buf;
LABEL_450:
    uint64_t v227 = *v216;
    uint64_t v228 = *(uint64_t *)((char *)v216 + 5);
    if (v227 == 0x7275447374617473LL && v228 == 0x6E6F697461727544LL) {
      xpc_dictionary_set_uint64(v13, "value", *((void *)&unk_1002CA1D0 + 1731 * v267 + 19));
    }
    goto LABEL_461;
  }

LABEL_464:
  if (a3)
  {
    uint64_t v230 = "TRIGGER_TYPE_ABC";
    if (a4 == 1) {
      uint64_t v230 = "TRIGGER_TYPE_TTR";
    }
    if (a4) {
      __int128 v231 = (char *)v230;
    }
    else {
      __int128 v231 = "TRIGGER_TYPE_CA";
    }
    sub_10000AC00(buf, v231);
    uint64_t v232 = "HK_PERIODIC_STATE_DUMP";
    if (a5 == 1) {
      uint64_t v232 = "HK_READ_WRITE_FAIL";
    }
    if (a5) {
      v233 = (char *)v232;
    }
    else {
      v233 = "HK_ACCESSORY_NOT_REACHABLE";
    }
    sub_10000AC00(&__str, v233);
    int v234 = buf[23];
    v235 = *(_BYTE **)buf;
    NSStringEncoding v236 = +[NSString defaultCStringEncoding](&OBJC_CLASS___NSString, "defaultCStringEncoding");
    if (v234 >= 0) {
      v237 = buf;
    }
    else {
      v237 = v235;
    }
    v238 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithCString:encoding:]( &OBJC_CLASS___NSString,  "stringWithCString:encoding:",  v237,  v236,  v248));
    int size = (char)__str.__r_.__value_.__s.__size_;
    std::string::size_type v240 = __str.__r_.__value_.__r.__words[0];
    NSStringEncoding v241 = +[NSString defaultCStringEncoding](&OBJC_CLASS___NSString, "defaultCStringEncoding");
    if (size >= 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)v240;
    }
    v243 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithCString:encoding:]( &OBJC_CLASS___NSString,  "stringWithCString:encoding:",  p_str,  v241));
    [v260 setObject:v238 forKey:@"trigger_type"];
    [v260 setObject:v243 forKey:@"trigger_identifier"];
    sub_1000CA230(v260, v244, v245, byte_1002D1238, @"prev_");
    sub_1000CA230(v260, v246, v247, v267, @"current_");
    v270[0] = _NSConcreteStackBlock;
    v270[1] = 3221225472LL;
    v270[2] = sub_1000CF56C;
    v270[3] = &unk_1002B2158;
    id v271 = v260;
    AnalyticsSendEventLazy(@"com.apple.Flagstone.flagstoneTriggerBasedThreadNetworkQuality", v270);

    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }

  byte_1002D1238 = v267;
}

void sub_1000CF26C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, void *a46)
{
  sub_10000D448(*(void *)(v47 - 232));
  _Unwind_Resume(a1);
}

id sub_1000CF56C(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

uint64_t sub_1000CF574(_DWORD *a1)
{
  if (a1) {
    *a1 = dword_1002D120C;
  }
  return 0LL;
}

uint64_t sub_1000CF58C(_DWORD *a1, _DWORD *a2)
{
  if (a1 && a2)
  {
    *a1 = dword_1002D1214;
    *a2 = dword_1002D1218;
  }

  return 0LL;
}

double sub_1000CF5B4@<D0>(void *a1@<X8>)
{
  std::string::append(&v25, "NCP Resets= ");
  std::to_string(&v24, qword_1002D10B4);
  sub_10000D650(&v25, (const std::string::value_type *)&v24);
  std::string::append(&v25, ". ");
  std::string::append(&v25, "Time since last reset= ");
  if ((_DWORD)qword_1002D10B4)
  {
    unint64_t v2 = qword_1002D10C8;
    double v3 = CFAbsoluteTimeGetCurrent() - (double)v2;
    if (v3 > 0.0)
    {
      std::to_string(&v24, v3);
      sub_10000D650(&v25, (const std::string::value_type *)&v24);
      std::string::append(&v25, "sec. ");
    }

    std::to_string(&v22, HIDWORD(qword_1002D10B4));
    uint64_t v4 = std::string::insert(&v22, 0LL, "#Asserts= ");
    __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0LL;
    v4->__r_.__value_.__l.__cap_ = 0LL;
    v4->__r_.__value_.__r.__words[0] = 0LL;
    char v6 = std::string::append(&v23, ". ");
    __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0LL;
    v6->__r_.__value_.__l.__cap_ = 0LL;
    v6->__r_.__value_.__r.__words[0] = 0LL;
    sub_10000D650(&v25, (const std::string::value_type *)&v24);
    std::to_string(&v22, dword_1002D10BC);
    uint64_t v8 = std::string::insert(&v22, 0LL, "#HardFaults= ");
    __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0LL;
    v8->__r_.__value_.__l.__cap_ = 0LL;
    v8->__r_.__value_.__r.__words[0] = 0LL;
    size_t v10 = std::string::append(&v23, ". ");
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    sub_10000D650(&v25, (const std::string::value_type *)&v24);
    std::to_string(&v22, dword_1002D10C0);
    size_t v12 = std::string::insert(&v22, 0LL, "#StackOverflows= ");
    __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    size_t v14 = std::string::append(&v23, ". ");
    __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    sub_10000D650(&v25, (const std::string::value_type *)&v24);
    std::to_string(&v22, dword_1002D10C4);
    unsigned int v16 = std::string::insert(&v22, 0LL, "#UnknownFaults= ");
    __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0LL;
    v16->__r_.__value_.__l.__cap_ = 0LL;
    v16->__r_.__value_.__r.__words[0] = 0LL;
    unsigned int v18 = std::string::append(&v23, ". ");
    __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    sub_10000D650(&v25, (const std::string::value_type *)&v24);
  }

  else
  {
    std::string::append(&v25, "N.A");
  }

  int v20 = (char *)operator new(0x20uLL);
  *(void *)int v20 = &off_1002AE030;
  double result = *(double *)&v25.__r_.__value_.__l.__data_;
  *(std::string *)(v20 + 8) = v25;
  *a1 = v20;
  return result;
}

void sub_1000CF990( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double sub_1000CFA4C()
{
  qword_1002D10B4 = 0LL;
  *(void *)&dword_1002D10BC = 0LL;
  dword_1002D10C4 = 0;
  qword_1002D10C8 = 0x7FFFFFFFFFFFFFFFLL;
  double result = 0.0;
  unk_1002D10D0 = 0u;
  unk_1002D10E0 = 0u;
  return result;
}

uint64_t sub_1000CFA74(void *a1, void *a2)
{
  xpc_object_t object = a1;
  id v3 = a2;
  memset(v47, 0, sizeof(v47));
  memset(v46, 0, sizeof(v46));
  id v39 = v3;
  int v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  int v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  if (xpc_get_type(object) != (xpc_type_t)&_xpc_type_array)
  {
    uint64_t v4 = sub_1000160F4("com.apple.wpantund.awd", "default");
    __int128 v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_10020D944();
    }

    char v6 = 0LL;
    uint64_t v7 = 1LL;
    goto LABEL_66;
  }

  size_t count = xpc_array_get_count(object);
  uint64_t v8 = sub_1000160F4("com.apple.wpantund.awd", "default");
  __int128 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = count;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "CAMetrics : ConnectedNodesHistogram array with size %ld.",  (uint8_t *)&buf,  0xCu);
  }

  if (count)
  {
    size_t v10 = 0LL;
    char v6 = 0LL;
    while (1)
    {
      xpc_object_t dictionary = xpc_array_get_dictionary(object, v10);
      size_t v12 = (void *)objc_claimAutoreleasedReturnValue(dictionary);

      char v6 = v12;
      string = (char *)xpc_dictionary_get_string(v12, "key");
      sub_10000AC00(&buf, string);
      int uint64 = xpc_dictionary_get_uint64(v12, "value");
      std::string::size_type v15 = std::string::find(&buf, 91, 0LL);
      std::string::size_type v16 = std::string::find(&buf, 93, 0LL);
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_std::string buf = &buf;
      }
      else {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t size = buf.__r_.__value_.__s.__size_;
      }
      else {
        uint64_t size = buf.__r_.__value_.__l.__size_;
      }
      __int128 v19 = (std::string *)((char *)p_buf + size);
      int v20 = (std::string *)((char *)p_buf + size);
      if (size > 19)
      {
        uint64_t v21 = size;
        std::string v22 = p_buf;
        do
        {
          std::string v23 = memchr(v22, 67, v21 - 19);
          if (!v23) {
            break;
          }
          int v20 = (std::string *)v23;
          if (*v23 == 0x657463656E6E6F43LL && v23[1] == 0x43726574756F5264LL && *((_DWORD *)v23 + 4) == 1953396079) {
            goto LABEL_27;
          }
          std::string v22 = (std::string *)((char *)v23 + 1);
          uint64_t v21 = (char *)v19 - ((char *)&v20->__r_.__value_.__l.__data_ + 1);
        }

        while (v21 > 19);
        int v20 = (std::string *)((char *)p_buf + size);
      }

void sub_1000CFF54( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
}

uint64_t sub_1000D0030(uint64_t a1, int a2, int a3, char a4, int a5)
{
  dword_1002D122C = a2;
  dword_1002D1228 = a3;
  byte_1002D1230 = a4;
  dword_1002D1234 = a5;
  return 1LL;
}

uint64_t sub_1000D0058(int a1, int a2, int a3)
{
  BOOL v4 = dword_1002D120C == a1 && dword_1002D1214 == a2 && dword_1002D1218 == a3;
  int v5 = v4;
  if (!v4)
  {
    dword_1002D120C = a1;
    dword_1002D1214 = a2;
    dword_1002D1218 = a3;
  }

  return v5 ^ 1u;
}

void sub_1000D008C(unsigned int a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a1 + a2;
  if (__CFADD__(a1, a2) || (unsigned int v5 = v3 + a3, __CFADD__(v3, a3))) {
    __break(0x5500u);
  }
  if (dword_1002D1208 == v5)
  {
    unsigned int v8 = 0;
  }

  else
  {
    __int128 v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    size_t v10 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", sub_1000BE984(4, v5));
    __int128 v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    [v9 setObject:v11 forKey:@"total_nodes"];

    size_t v12 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", sub_1000BE984(4, a1));
    __int128 v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    [v9 setObject:v13 forKey:@"total_routers"];

    size_t v14 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", sub_1000BE984(4, a2));
    std::string::size_type v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    [v9 setObject:v15 forKey:@"total_fed"];

    std::string::size_type v16 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", sub_1000BE984(4, a3));
    __int128 v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    [v9 setObject:v17 forKey:@"total_sed"];

    unsigned int v8 = v5 - dword_1002D1208;
    if (__OFSUB__(v5, dword_1002D1208))
    {
      __break(0x5515u);
      return;
    }

    unsigned int v18 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_1000BE984(4, v5 - dword_1002D1208));
    __int128 v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    [v9 setObject:v19 forKey:@"total_node_changes"];

    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472LL;
    v23[2] = sub_1000D03B4;
    v23[3] = &unk_1002B2158;
    id v20 = v9;
    id v24 = v20;
    AnalyticsSendEventLazy(@"com.apple.Flagstone.flagstoneTopologyMetrics", v23);
    dword_1002D1208 = v5;
  }

  uint64_t v21 = sub_1000160F4("com.apple.wpantund.tdm", "default");
  std::string v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67110400;
    unsigned int v26 = v5;
    __int16 v27 = 1024;
    unsigned int v28 = a1;
    __int16 v29 = 1024;
    unsigned int v30 = a2;
    __int16 v31 = 1024;
    unsigned int v32 = a3;
    __int16 v33 = 1024;
    int v34 = dword_1002D11FC;
    __int16 v35 = 1024;
    unsigned int v36 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_INFO,  "CAMetricsHandlers_topologymetrics_update::updateTopologyStats - totalNodes=%d totalRouters=%d totalFed=%d totalSed =%d mPrevTotalNodes=%d totalNodeChanges=%d",  buf,  0x26u);
  }
}

void sub_1000D0368( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id sub_1000D03B4(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_1000D03BC(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v6 = dword_1002D1228;
  int v7 = byte_1002D1230;
  unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  __int128 v9 = a1;
  size_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v9));
  [v8 setObject:v10 forKey:@"type"];

  __int128 v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a2));
  [v8 setObject:v11 forKey:@"duration"];

  size_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v6));
  [v8 setObject:v12 forKey:@"thirdparty_br_count"];

  if (v7) {
    __int128 v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL));
  }
  else {
    __int128 v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
  }
  [v8 setObject:v13 forKey:@"is_thirdparty_leader"];

  if (a3) {
    size_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL));
  }
  else {
    size_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
  }
  [v8 setObject:v14 forKey:@"is_first_hour"];

  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  v18[2] = sub_1000D06D0;
  v18[3] = &unk_1002B2158;
  id v15 = v8;
  id v19 = v15;
  AnalyticsSendEventLazy(@"com.apple.Flagstone.flagstoneSrpServiceConvergenceDuration", v18);
  std::string::size_type v16 = sub_1000160F4("com.apple.wpantund.nm", "default");
  __int128 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 136315394;
    uint64_t v21 = a1;
    __int16 v22 = 1024;
    int v23 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "type[%s] flagstoneSrpServiceConvergenceDuration[%d sec]",  buf,  0x12u);
  }
}

void sub_1000D0664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000D06D0(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_1000D06D8(unsigned int *a1)
{
  uint64_t v2 = dword_1002D1228;
  uint64_t v3 = dword_1002D122C;
  int v4 = byte_1002D1230;
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a1[2]));
  [v5 setObject:v6 forKey:@"netdata_srp_unicast_multi_sec"];

  int v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a1[1]));
  [v5 setObject:v7 forKey:@"netdata_srp_unicast_one_sec"];

  unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", *a1));
  [v5 setObject:v8 forKey:@"netdata_srp_unicast_zero_sec"];

  __int128 v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a1[5]));
  [v5 setObject:v9 forKey:@"netdata_srp_anycast_multi_sec"];

  size_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a1[4]));
  [v5 setObject:v10 forKey:@"netdata_srp_anycast_one_sec"];

  __int128 v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a1[3]));
  [v5 setObject:v11 forKey:@"netdata_srp_anycast_zero_sec"];

  size_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a1[8]));
  [v5 setObject:v12 forKey:@"netdata_srp_prefix_multi_sec"];

  __int128 v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a1[7]));
  [v5 setObject:v13 forKey:@"netdata_srp_prefix_one_sec"];

  size_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a1[6]));
  [v5 setObject:v14 forKey:@"netdata_srp_prefix_zero_sec"];

  id v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a1[11]));
  [v5 setObject:v15 forKey:@"netdata_misc_max_netdata_size"];

  std::string::size_type v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a1[9]));
  [v5 setObject:v16 forKey:@"netdata_misc_netdata_converged_duration_sec"];

  __int128 v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a1[12]));
  [v5 setObject:v17 forKey:@"netdata_misc_partition_changes"];

  unsigned int v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a1[14]));
  [v5 setObject:v18 forKey:@"netdata_misc_interval_count"];

  id v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v2));
  [v5 setObject:v19 forKey:@"netdata_common_thirdparty_br_count"];

  id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v3));
  [v5 setObject:v20 forKey:@"netdata_common_apple_br_count"];

  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 52)));
  [v5 setObject:v21 forKey:@"netdata_common_primary_resident_change"];

  __int16 v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v4 == 0));
  [v5 setObject:v22 forKey:@"netdata_common_thirdparty_leader"];

  int v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int16 *)a1 + 30)));
  [v5 setObject:v23 forKey:@"nm_netdata_matter_resolved_services"];

  id v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int16 *)a1 + 31)));
  [v5 setObject:v24 forKey:@"netdata_matter_ping_initiated"];

  std::string v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int16 *)a1 + 32)));
  [v5 setObject:v25 forKey:@"netdata_matter_ping_success"];

  unsigned int v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int16 *)a1 + 38)));
  [v5 setObject:v26 forKey:@"netdata_matter_ping_response_percent"];

  __int16 v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int16 *)a1 + 35)));
  [v5 setObject:v27 forKey:@"netdata_matter_ping_avg_min_rtt_msec"];

  unsigned int v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int16 *)a1 + 36)));
  [v5 setObject:v28 forKey:@"netdata_matter_ping_avg_max_rtt_msec"];

  __int16 v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int16 *)a1 + 37)));
  [v5 setObject:v29 forKey:@"netdata_matter_ping_avg_rtt_msec"];

  unsigned int v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 53)));
  [v5 setObject:v30 forKey:@"netdata_rcp_state"];

  __int16 v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a1[10]));
  [v5 setObject:v31 forKey:@"netdata_rcp_state_associated_duration_sec"];

  unsigned int v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 78)));
  [v5 setObject:v32 forKey:@"devices_response_count"];

  __int16 v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 79)));
  [v5 setObject:v33 forKey:@"devices_status_green"];

  int v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 80)));
  [v5 setObject:v34 forKey:@"devices_status_orange"];

  __int16 v35 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 81)));
  [v5 setObject:v35 forKey:@"devices_status_red"];

  unsigned int v36 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 82)));
  [v5 setObject:v36 forKey:@"devices_stability_rebooted"];

  int v37 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 83)));
  [v5 setObject:v37 forKey:@"devices_stability_software_updated"];

  uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 84)));
  [v5 setObject:v38 forKey:@"devices_stability_daemon_crash"];

  id v39 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 85)));
  [v5 setObject:v39 forKey:@"devices_stability_firmware_reset"];

  unsigned int v40 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 86)));
  [v5 setObject:v40 forKey:@"devices_data_stall_buffer_full"];

  int v41 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 87)));
  [v5 setObject:v41 forKey:@"devices_data_stall_radio_tx_timeout"];

  int v42 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 88)));
  [v5 setObject:v42 forKey:@"devices_data_stall_high_tx_failure_rate"];

  unsigned int v43 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 89)));
  [v5 setObject:v43 forKey:@"devices_data_stall_high_rx_failure_rate"];

  char v44 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 90)));
  [v5 setObject:v44 forKey:@"devices_data_stall_tx_matter_dup_packets"];

  unsigned int v45 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 91)));
  [v5 setObject:v45 forKey:@"devices_data_stall_rx_matter_dup_packets"];

  unsigned int v46 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 92)));
  [v5 setObject:v46 forKey:@"devices_data_stall_high_matter_err_rate"];

  uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 93)));
  [v5 setObject:v47 forKey:@"devices_data_stall_medium_matter_err_rate"];

  unsigned int v48 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 94)));
  [v5 setObject:v48 forKey:@"devices_link_tx_coex_denied_high"];

  uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 95)));
  [v5 setObject:v49 forKey:@"devices_link_rx_coex_denied_high"];

  unsigned int v50 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 96)));
  [v5 setObject:v50 forKey:@"devices_link_cca_failure_rate_high"];

  int v51 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 97)));
  [v5 setObject:v51 forKey:@"devices_link_address_query_failure"];

  unsigned __int8 v52 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 98)));
  [v5 setObject:v52 forKey:@"devices_link_security_error_router_15_4"];

  int v53 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 99)));
  [v5 setObject:v53 forKey:@"devices_link_security_error_router_trel"];

  size_t v54 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 100)));
  [v5 setObject:v54 forKey:@"devices_link_security_error_child_rx"];

  int v55 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 101)));
  [v5 setObject:v55 forKey:@"devices_trel_enabled"];

  char v56 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 102)));
  [v5 setObject:v56 forKey:@"devices_trel_interface_changes"];

  BOOL v57 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 103)));
  [v5 setObject:v57 forKey:@"devices_children_sed_count"];

  unsigned int v58 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 104)));
  [v5 setObject:v58 forKey:@"devices_children_ssed_count"];

  int v59 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 105)));
  [v5 setObject:v59 forKey:@"devices_children_fed_count"];

  unsigned int v60 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 106)));
  [v5 setObject:v60 forKey:@"devices_children_no_traffic_count"];

  int v61 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 107)));
  [v5 setObject:v61 forKey:@"devices_children_rx_packet_reassembly_Timout"];

  uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 108)));
  [v5 setObject:v62 forKey:@"devices_link_num_sed_queue_size_high"];

  int v63 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 109)));
  [v5 setObject:v63 forKey:@"devices_link_num_sed_last_heard_gap_high"];

  v68[0] = _NSConcreteStackBlock;
  v68[1] = 3221225472LL;
  v68[2] = sub_1000D1370;
  v68[3] = &unk_1002B2158;
  id v64 = v5;
  id v69 = v64;
  AnalyticsSendEventLazy(@"com.apple.Flagstone.flagstonePeriodicNetdataUpdateMetrics", v68);
  int v65 = sub_1000160F4("com.apple.wpantund.nm", "default");
  unsigned int v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
  if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
  {
    unsigned int v67 = a1[11];
    *(_DWORD *)std::string buf = 67109888;
    unsigned int v71 = v67;
    __int16 v72 = 1024;
    int v73 = v2;
    __int16 v74 = 1024;
    int v75 = v3;
    __int16 v76 = 1024;
    BOOL v77 = v4 == 0;
    _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_INFO,  "periodic_netdata_update MaxSize[%d] numThirdPartyBRs[%d] numAppleBRs[%d] isThirdPartyLeader[%d] ",  buf,  0x1Au);
  }
}

void sub_1000D1240( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id sub_1000D1370(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_1000D1378(unsigned __int16 *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  int v3 = a1[24];
  if (v3 == 2)
  {
    int v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", "swupdate"));
    [v2 setObject:v4 forKey:@"respawn_reason"];
  }

  else if (v3 == 1)
  {
    int v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", "crash"));
    [v2 setObject:v4 forKey:@"respawn_reason"];
  }

  else
  {
    if (a1[24]) {
      int v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", "invalid"));
    }
    else {
      int v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", "reboot"));
    }
    [v2 setObject:v4 forKey:@"respawn_reason"];
  }

  if (*((_BYTE *)a1 + 36)) {
    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
  }
  else {
    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL));
  }
  [v2 setObject:v5 forKey:@"is_primary"];

  if (*((_BYTE *)a1 + 37)) {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
  }
  else {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL));
  }
  [v2 setObject:v6 forKey:@"was_primary"];

  int v7 = a1[19];
  if (v7 == 9)
  {
    unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", "child"));
    [v2 setObject:v8 forKey:@"current_role"];
  }

  else if (v7 == 7)
  {
    unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", "leader"));
    [v2 setObject:v8 forKey:@"current_role"];
  }

  else
  {
    if (v7 == 1) {
      unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", "router"));
    }
    else {
      unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", "invalid"));
    }
    [v2 setObject:v8 forKey:@"current_role"];
  }

  int v9 = a1[20];
  if (v9 == 9)
  {
    size_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", "child"));
    [v2 setObject:v10 forKey:@"last_role"];
  }

  else if (v9 == 7)
  {
    size_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", "leader"));
    [v2 setObject:v10 forKey:@"last_role"];
  }

  else
  {
    if (v9 == 1) {
      size_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", "router"));
    }
    else {
      size_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", "invalid"));
    }
    [v2 setObject:v10 forKey:@"last_role"];
  }

  __int128 v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a1[12]));
  [v2 setObject:v11 forKey:@"num_partition_changes"];

  if (a1[21]) {
    size_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
  }
  else {
    size_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL));
  }
  [v2 setObject:v12 forKey:@"is_converged"];

  __int128 v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)a1 + 11)));
  [v2 setObject:v13 forKey:@"total_convergence_duration"];

  if (a1[13]) {
    size_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
  }
  else {
    size_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL));
  }
  [v2 setObject:v14 forKey:@"is_rcp_state_associated"];

  id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)a1 + 8)));
  [v2 setObject:v15 forKey:@"rcp_state_associated_duration"];

  std::string::size_type v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)a1 + 7)));
  [v2 setObject:v16 forKey:@"rcp_state_time_to_last_associate"];

  __int128 v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)a1 + 3)));
  [v2 setObject:v17 forKey:@"srp_anycast_converge_duration"];

  unsigned int v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a1[4]));
  [v2 setObject:v18 forKey:@"srp_anycast_num_service"];

  id v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)a1 + 5)));
  [v2 setObject:v19 forKey:@"srp_prefix_converge_duration"];

  id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a1[8]));
  [v2 setObject:v20 forKey:@"srp_prefix_num_onmesh_prefix"];

  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)a1 + 1)));
  [v2 setObject:v21 forKey:@"srp_unicast_converge_duration"];

  __int16 v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", *a1));
  [v2 setObject:v22 forKey:@"srp_unicast_num_service"];

  int v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a1[27]));
  [v2 setObject:v23 forKey:@"matter_acc_converged"];

  id v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a1[26]));
  [v2 setObject:v24 forKey:@"matter_last_ping_success"];

  std::string v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a1[25]));
  [v2 setObject:v25 forKey:@"matter_last_resolved_services"];

  unsigned int v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a1[34]));
  [v2 setObject:v26 forKey:@"matter_ping_avg_max_rtt"];

  __int16 v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a1[33]));
  [v2 setObject:v27 forKey:@"matter_ping_avg_min_rtt"];

  unsigned int v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a1[35]));
  [v2 setObject:v28 forKey:@"matter_ping_avg_rtt"];

  __int16 v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a1[29]));
  [v2 setObject:v29 forKey:@"matter_ping_initiated"];

  unsigned int v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a1[36]));
  [v2 setObject:v30 forKey:@"matter_ping_response_percent"];

  __int16 v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a1[30]));
  [v2 setObject:v31 forKey:@"matter_ping_success"];

  unsigned int v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a1[28]));
  [v2 setObject:v32 forKey:@"matter_resolved_services"];

  v34[0] = _NSConcreteStackBlock;
  v34[1] = 3221225472LL;
  void v34[2] = sub_1000D1C54;
  v34[3] = &unk_1002B2158;
  id v33 = v2;
  id v35 = v33;
  AnalyticsSendEventLazy(@"com.apple.Flagstone.flagstoneRespawnConvergenceMetrics", v34);
}

void sub_1000D1B8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000D1C54(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_1000D1C5C()
{
  dword_1002D1208 = 0;
}

uint64_t sub_1000D1C68(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  for (uint64_t i = 0LL; i != 92; i += 4LL)
  {
    int v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)((char *)&xmmword_1002D0E00 + i + 756)));
    [v2 addObject:v4];
  }

  [v1 setObject:v2 forKey:@"host_wakeups_count_histogram"];

  return 0LL;
}

void sub_1000D1D10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000D1D40(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  xmmword_1002D10F0));
  [v1 setObject:v2 forKey:@"host_wakeups_count"];

  return 0LL;
}

void sub_1000D1DA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1000D1DC0()
{
  dword_1002D0E4C = 0;
  double result = 0.0;
  xmmword_1002D10F0 = 0u;
  unk_1002D1100 = 0u;
  xmmword_1002D1110 = 0u;
  unk_1002D1120 = 0u;
  xmmword_1002D1130 = 0u;
  unk_1002D1140 = 0u;
  return result;
}

uint64_t sub_1000D1DE0(unsigned int a1)
{
  uint64_t result = 1LL;
  if (a1 - 114 >= 2 && a1 != 5412)
  {
    if (a1 == 7 || a1 - 1 >= 0xB)
    {
      if (a1 <= 0xD && ((1 << a1) & 0x3080) != 0)
      {
        return 3LL;
      }

      else if (a1 - 4096 >= 5)
      {
        if (a1)
        {
          if ((a1 & 0xFFFFFFFE) == 0x1006)
          {
            return 6LL;
          }

          else if ((a1 & 0xFFFFFFFE) == 0x1008)
          {
            return 7LL;
          }

          else
          {
            unsigned int v3 = a1 & 0xFFFFFFF0;
            uint64_t result = 8LL;
            if ((a1 & 0xFFFFFFF0) != 0x20)
            {
              unsigned int v4 = a1 & 0xFFFFFF00;
              if ((a1 & 0xFFFFFF00) != 0x1200)
              {
                uint64_t result = 9LL;
                if (v3 != 48 && v4 != 4864)
                {
                  uint64_t result = 10LL;
                  if (v3 != 64 && v4 != 5120)
                  {
                    uint64_t result = 11LL;
                    if (v3 != 80 && v4 != 5376)
                    {
                      uint64_t result = 12LL;
                      if (v3 != 96 && v4 != 5632)
                      {
                        uint64_t result = 13LL;
                        if (v3 != 112 && v4 != 5888)
                        {
                          uint64_t result = 14LL;
                          if (v3 != 128 && v4 != 6144)
                          {
                            if (a1 - 6400 >= 0x700)
                            {
                              if (v3 == 160)
                              {
                                return 16LL;
                              }

                              else if (v4 == 256)
                              {
                                return 17LL;
                              }

                              else if (v4 == 1024)
                              {
                                return 18LL;
                              }

                              else if (a1 - 1280 >= 0x300)
                              {
                                if (a1 >> 6 == 239)
                                {
                                  return 20LL;
                                }

                                else
                                {
                                  unsigned int v5 = a1 & 0xFFFFFC00;
                                  if (v5 == 15360)
                                  {
                                    return 21LL;
                                  }

                                  else if (v5 == 0x4000)
                                  {
                                    return 22LL;
                                  }

                                  else
                                  {
                                    return 23LL;
                                  }
                                }
                              }

                              else
                              {
                                return 19LL;
                              }
                            }

                            else
                            {
                              return 15LL;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }

        else
        {
          return 5LL;
        }
      }

      else
      {
        return 4LL;
      }
    }

    else
    {
      return 2LL;
    }
  }

  return result;
}

uint64_t sub_1000D1FD8(uint64_t result)
{
  int v1 = xmmword_1002D10F0 + 1;
  if ((_DWORD)xmmword_1002D10F0 == -1
    || (uint64_t result = sub_1000D1DE0(result),
        LODWORD(xmmword_1002D10F0) = v1,
        uint64_t v2 = (char *)&xmmword_1002D0E00 + 4 * (result - 1),
        int v3 = *((_DWORD *)v2 + 189),
        BOOL v4 = __CFADD__(v3, 1),
        int v5 = v3 + 1,
        v4))
  {
    __break(0x5500u);
  }

  else
  {
    *((_DWORD *)v2 + 189) = v5;
  }

  return result;
}

double sub_1000D2030(uint64_t a1)
{
  double result = 0.0;
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(_WORD *)(a1 + 24) = 0;
  return result;
}

  ;
}

void sub_1000D205C()
{
  uint64_t v0 = &byte_1002D0DA7;
  int v1 = &xmmword_1002D0E00;
  do
  {
    uint64_t v2 = v1;
    int v1 = (__int128 *)((char *)v1 - 13848);
    uint64_t v3 = -13600LL;
    BOOL v4 = v0;
    int v5 = v0;
    do
    {
      int v6 = *v5;
      v5 -= 136;
      if (v6 < 0) {
        operator delete(*(void **)(v4 - 23));
      }
      if (*(v4 - 24) < 0) {
        operator delete(*(void **)(v4 - 47));
      }
      BOOL v4 = v5;
      v3 += 136LL;
    }

    while (v3);
    v0 -= 13848;
  }

  while (v1 != (__int128 *)&unk_1002CA1D0);
}

void sub_1000D2128()
{
  uint64_t v0 = objc_autoreleasePoolPush();
  int v1 = &unk_1002CA1D0;
  do
  {
    v1[23] = 0LL;
    v1[24] = 0LL;
    v1[21] = 0LL;
    v1[22] = 0LL;
    uint64_t v2 = (__int128 *)(v1 + 1731);
    uint64_t v3 = 31LL;
    v1[25] = 0LL;
    v1[26] = 0LL;
    do
    {
      BOOL v4 = &v1[v3];
      v4[2] = 0LL;
      v4[3] = 0LL;
      *BOOL v4 = 0LL;
      v4[1] = 0LL;
      uint64_t v4[4] = 0LL;
      uint64_t v4[5] = 0LL;
      v3 += 17LL;
    }

    while (v4 + 17 != (void *)v2);
    v1 += 1731;
  }

  while (v2 != &xmmword_1002D0E00);
  __cxa_atexit((void (*)(void *))sub_1000D205C, 0LL, (void *)&_mh_execute_header);
  sub_1000D2030((uint64_t)&unk_1002D10D0);
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_1000D24BC(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  while (1)
  {
    int v4 = OBJC_IVAR___PBDataReader__error;
    if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
      || *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
    {
      break;
    }

    char v5 = 0;
    unsigned int v6 = 0;
    uint64_t v7 = 0LL;
    while (1)
    {
      uint64_t v8 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v9 = v8 + 1;
      if (v8 == -1)
      {
LABEL_66:
        __break(0x5500u);
        return result;
      }

      if (v9 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v10 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v8);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v9;
      v7 |= (unint64_t)(v10 & 0x7F) << v5;
      if ((v10 & 0x80) == 0) {
        goto LABEL_12;
      }
      v5 += 7;
      BOOL v11 = v6++ >= 9;
      if (v11)
      {
        unint64_t v12 = 0LL;
        int v4 = OBJC_IVAR___PBDataReader__error;
        uint64_t v13 = OBJC_IVAR___PBDataReader__error;
        goto LABEL_16;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
    uint64_t v13 = OBJC_IVAR___PBDataReader__error;
    unint64_t v12 = *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) ? 0LL : v7;
    int v4 = OBJC_IVAR___PBDataReader__error;
LABEL_16:
    int v14 = v12 & 7;
    if (*(_BYTE *)(a2 + v13) || v14 == 4) {
      break;
    }
    if ((v12 >> 3) == 2)
    {
      if (v14 != 2)
      {
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v31 = 0LL;
        double result = v3 + 8;
        while (1)
        {
          uint64_t v32 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v33 = v32 + 1;
          if (v32 == -1) {
            goto LABEL_66;
          }
          if (v33 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v34 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v32);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v33;
          v31 |= (unint64_t)(v34 & 0x7F) << v29;
          if ((v34 & 0x80) == 0) {
            goto LABEL_60;
          }
          v29 += 7;
          BOOL v11 = v30++ >= 9;
          if (v11)
          {
            uint64_t v35 = 0LL;
            goto LABEL_63;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_60:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v35 = 0LL;
        }
        else {
          uint64_t v35 = v31;
        }
LABEL_63:
        double result = PBRepeatedUInt32Add(result, v35);
        continue;
      }

      double result = PBReaderPlaceMark(a2, v36);
      if (!(_DWORD)result) {
        return result;
      }
      while (2)
      {
        if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
          && !*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0LL;
          while (1)
          {
            uint64_t v25 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v26 = v25 + 1;
            if (v25 == -1) {
              goto LABEL_66;
            }
            if (v26 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v27 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26;
            v24 |= (unint64_t)(v27 & 0x7F) << v22;
            if ((v27 & 0x80) == 0) {
              goto LABEL_41;
            }
            v22 += 7;
            BOOL v11 = v23++ >= 9;
            if (v11)
            {
              uint64_t v28 = 0LL;
              goto LABEL_44;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_41:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v28 = 0LL;
          }
          else {
            uint64_t v28 = v24;
          }
LABEL_44:
          double result = PBRepeatedUInt32Add(v3 + 8, v28);
          continue;
        }

        break;
      }

      double result = PBReaderRecallMark(a2, v36);
    }

    else
    {
      if ((v12 >> 3) == 1)
      {
        char v16 = 0;
        unsigned int v17 = 0;
        uint64_t v18 = 0LL;
        *(_BYTE *)(v3 + 36) |= 1u;
        while (1)
        {
          uint64_t v19 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v20 = v19 + 1;
          if (v19 == -1) {
            goto LABEL_66;
          }
          if (v20 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v21 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20;
          v18 |= (unint64_t)(v21 & 0x7F) << v16;
          if ((v21 & 0x80) == 0) {
            goto LABEL_56;
          }
          v16 += 7;
          BOOL v11 = v17++ >= 9;
          if (v11)
          {
            LODWORD(v18) = 0;
            goto LABEL_58;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_56:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v18) = 0;
        }
LABEL_58:
        *(_DWORD *)(v3 + 32) = v18;
        continue;
      }

      double result = PBReaderSkipValueWithTag(a2);
      if ((result & 1) == 0) {
        return 0LL;
      }
    }
  }

  return *(unsigned __int8 *)(a2 + v4) == 0;
}

uint64_t sub_1000D2BB4(uint64_t a1, void *a2)
{
  *(void *)a1 = off_1002B2DD8;
  sub_1000DB73C((void *)(a1 + 8));
  sub_100159F64(a1 + 32);
  *(void *)a1 = off_1002B2188;
  *(void *)(a1 + 32) = off_1002B2318;
  *(void *)(a1 + 56) = 0LL;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 88) = a1 + 96;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 112) = a1 + 120;
  *(_OWORD *)(a1 + sub_1000B7CEC(v41 - 144) = 0u;
  *(void *)(a1 + 136) = a1 + 144;
  *(_OWORD *)(a1 + sub_1000B7CEC(v38 - 168) = 0u;
  *(void *)(a1 + 160) = a1 + 168;
  *(_OWORD *)(a1 + 184) = 0u;
  int v4 = (__int128 *)(a1 + 184);
  *(_OWORD *)(a1 + 200) = 0u;
  char v5 = (uint64_t *)(a1 + 200);
  *(_OWORD *)(a1 + 216) = 0u;
  unsigned int v6 = (__int128 *)(a1 + 216);
  *(_OWORD *)(a1 + 1056) = 0u;
  *(void *)(a1 + 1048) = a1 + 1056;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(void *)(a1 + 1072) = a1 + 1080;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(void *)(a1 + 1096) = a1 + 1104;
  *(_OWORD *)(a1 + 1sub_1000B7CEC(v41 - 128) = 0u;
  *(void *)(a1 + 1120) = a1 + 1128;
  *(_OWORD *)(a1 + 1sub_1000B7CEC(v38 - 152) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(void *)(a1 + 1sub_1000B7CEC(v41 - 144) = a1 + 1152;
  *(void *)(a1 + 1sub_1000B7CEC(v38 - 168) = a1 + 1176;
  *(void *)(a1 + 1224) = 0LL;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1276) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(void *)(a1 + 1296) = a1 + 1304;
  uint64_t v7 = (uint64_t **)(a1 + 1320);
  *(void *)(a1 + 1328) = 0LL;
  *(void *)(a1 + 1320) = a1 + 1328;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(void *)(a1 + 1368) = 0LL;
  *(_OWORD *)(a1 + 1352) = 0u;
  sub_10000AC00(&__p, "");
  sub_10008AC70((std::string *)(a1 + 1464), &__p, 0LL, 0xFFFF, 0, 0);
  sub_1001144C0(a1 + 1536);
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1576) = 0u;
  *(void *)(a1 + 1568) = a1 + 1576;
  sub_1000B5FF4(a1 + 1608);
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_OWORD *)(a1 + 1720) = 0u;
  uint64_t v42 = a1 + 1756;
  sub_100100900(a1 + 1756);
  sub_100101718((_DWORD *)(a1 + 1768));
  sub_10010AB64( a1 + 1776,  v8,  v9,  v10,  v11,  v12,  v13,  v14,  a1 + 1464,  a1 + 1352,  a1 + 56,  a1 + 1776,  a1 + 1608,  a1 + 1568,  a1 + 1296,  a1 + 1216,  a1 + 1192);
  sub_10000AC00(&v59, "wpan0");
  *(_OWORD *)(a1 + 232) = 0u;
  *(_WORD *)(a1 + 1712) = 12592;
  *(_WORD *)(a1 + 1736) = 12337;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(void *)(a1 + 632) = 0LL;
  sub_10011D8C0(a1 + 232);
  *(void *)(a1 + 1040) = 0LL;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  sub_10011D8C0(a1 + 640);
  *(_BYTE *)(a1 + 1380) = 0;
  *(_DWORD *)(a1 + 1384) = 10;
  *(_WORD *)(a1 + 1388) = 5684;
  *(void *)(a1 + 1344) = 0LL;
  *(_DWORD *)(a1 + 1528) = 3;
  *(_WORD *)(a1 + 1412) = 0;
  *(void *)(a1 + 1744) = 0LL;
  *(_WORD *)(a1 + 1600) = 0;
  *(_DWORD *)(a1 + 1408) = 0;
  *(_BYTE *)(a1 + 1414) = 0;
  *(void *)(a1 + 1520) = 0LL;
  *(void *)(a1 + 1396) = 0x101000000010101LL;
  *(_BYTE *)(a1 + 1404) = 1;
  *(_DWORD *)(a1 + 1376) = 16777217;
  *(_BYTE *)(a1 + 1738) = 0;
  *(_BYTE *)(a1 + 1752) = 0;
  *(_WORD *)(a1 + 1405) = 0;
  *(_DWORD *)(a1 + 1392) = 0;
  sub_1000D3A38(a1);
  sub_1000D4618(a1);
  sub_1000D4B14(a1);
  sub_1000D4B7C(a1);
  *(_OWORD *)(a1 + 1432) = 0u;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(void *)(a1 + 1592) = 0LL;
  *(_OWORD *)(a1 + 1415) = 0u;
  if (a2[2])
  {
    unsigned int v17 = (void *)*a2;
    id v15 = a2 + 1;
    char v16 = v17;
    *(void *)std::string buf = v17;
    if (v17 != v15)
    {
      while (1)
      {
        uint64_t v18 = (const char *)(v16 + 4);
        if (!strcasecmp(v18, "Config:NCP:HardResetPath")) {
          break;
        }
        if (!strcasecmp(v18, "Config:NCP:PowerPath"))
        {
          sub_1001247E4((std::string *)(v16 + 7), (uint64_t *)&__p);
          uint64_t v19 = (__int128 *)(a1 + 1720);
          goto LABEL_20;
        }

        if (!strcasecmp(v18, "Config:NCP:SocketPath"))
        {
          sub_1001247E4((std::string *)(v16 + 7), (uint64_t *)&__p);
          uint64_t v19 = (__int128 *)(a1 + 200);
          goto LABEL_20;
        }

        if (!strcasecmp(v18, "Config:TUN:InterfaceName"))
        {
          std::string::operator=(&v59, (const std::string *)(v16 + 7));
        }

        else if (!strcasecmp(v18, "Config:NCP:FirmwareCheckCommand"))
        {
          sub_100101098(v42, (const void **)v16 + 7);
        }

        else if (!strcasecmp(v18, "Config:NCP:FirmwareUpgradeCommand"))
        {
          sub_100100D8C(v42, (uint64_t)(v16 + 7));
        }

        else
        {
          if (!strcasecmp(v18, "Daemon:AutoFirmwareUpdate"))
          {
            sub_100071608(&__p, (const std::string *)(v16 + 7));
            *(_BYTE *)(a1 + 1378) = sub_1001478B8((uint64_t *)&__p);
LABEL_27:
            if (__p.__r_.__value_.__r.__words[0]) {
              (*(void (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 8LL))(__p.__r_.__value_.__r.__words[0]);
            }
            goto LABEL_21;
          }

          if (!strcasecmp(v18, "Config:Daemon:NetworkRetainCommand"))
          {
            sub_100101BA4((int *)(a1 + 1768), (const void **)v16 + 7);
          }

          else if (!strcasecmp(v18, "Daemon:VirtualInterface:ReadBufferSize"))
          {
            sub_100071608(&__p, (const std::string *)(v16 + 7));
            *(_DWORD *)(a1 + 1392) = sub_1001476B4((uint64_t *)&__p, 0);
            goto LABEL_27;
          }
        }

void sub_1000D372C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, void *__p, uint64_t a44, int a45, __int16 a46, char a47, char a48)
{
  if (__p) {
    (*(void (**)(void *))(*(void *)__p + 8LL))(__p);
  }
  sub_10010ABEC(a12);
  sub_100101790(a26);
  sub_1001009CC(a30);
  sub_10000F9EC((uint64_t *)(v48 + 1728));
  sub_10000F9EC((uint64_t *)(v48 + 1704));
  sub_1000B6040(a13);
  sub_10000D0D4(a14);
  sub_10000F9EC((uint64_t *)(v48 + 1560));
  sub_10000D0D4(a29);
  sub_10000D0D4(a15);
  std::string __p = a16;
  sub_100075CA4((void ***)&__p);
  std::string __p = a17;
  sub_100075CA4((void ***)&__p);
  sub_10000D0D4(a18);
  sub_10000D0D4(v48 + 1144);
  sub_10000D0D4(a19);
  sub_10000D0D4(v48 + 1096);
  sub_10000D0D4(a20);
  sub_10000D0D4(v48 + 1048);
  sub_10000F9EC((uint64_t *)(v48 + 224));
  sub_10000F9EC((uint64_t *)(v48 + 208));
  sub_10000F9EC((uint64_t *)(v48 + 192));
  sub_1000DC48C(a21);
  sub_1000DC48C(a22);
  sub_1000DC48C(a23);
  sub_1000DC3D0(a24);
  nullsub_2(a25);
  sub_1000EA76C((void *)v48);
  _Unwind_Resume(a1);
}

void *sub_1000D3A38(uint64_t a1)
{
  v50[2] = 0LL;
  v50[3] = a1;
  v50[0] = (uint64_t)off_1002B2B68 + 1;
  v50[1] = (uint64_t)sub_1000D6208;
  sub_1000D606C(a1, "", v50);
  sub_100070E0C(v50);
  void v49[2] = 0LL;
  v49[3] = a1;
  v49[0] = (uint64_t)off_1002B2B68 + 1;
  v49[1] = (uint64_t)sub_1000D62BC;
  sub_1000D606C(a1, "Config:TUN:InterfaceName", v49);
  sub_100070E0C(v49);
  v48[2] = 0LL;
  v48[3] = a1;
  v48[0] = (uint64_t)off_1002B2B68 + 1;
  v48[1] = (uint64_t)sub_1000D633C;
  sub_1000D606C(a1, "Daemon:Enabled", v48);
  sub_100070E0C(v48);
  v47[2] = 0LL;
  v47[3] = a1;
  v47[0] = (uint64_t)off_1002B2B68 + 1;
  v47[1] = (uint64_t)sub_1000D63C8;
  sub_1000D606C(a1, "Interface:Up", v47);
  sub_100070E0C(v47);
  v46[2] = 0LL;
  v46[3] = a1;
  v46[0] = (uint64_t)off_1002B2B68 + 1;
  v46[1] = (uint64_t)sub_1000D6458;
  sub_1000D606C(a1, "Daemon:ReadyForHostSleep", v46);
  sub_100070E0C(v46);
  v45[2] = 0LL;
  void v45[3] = a1;
  v45[0] = (uint64_t)off_1002B2B68 + 1;
  v45[1] = (uint64_t)sub_1000D64F0;
  sub_1000D606C(a1, "NCP:Version", v45);
  sub_100070E0C(v45);
  void v44[2] = 0LL;
  v44[3] = a1;
  v44[0] = (uint64_t)off_1002B2B68 + 1;
  v44[1] = (uint64_t)sub_1000D656C;
  sub_1000D606C(a1, "Network:Name", v44);
  sub_100070E0C(v44);
  _OWORD v43[2] = 0LL;
  v43[3] = a1;
  v43[1] = (uint64_t)sub_1000D65E0;
  v43[0] = (uint64_t)off_1002B2B68 + 1;
  sub_1000D606C(a1, "Network:PartitionId", v43);
  sub_100070E0C(v43);
  v42[2] = 0LL;
  v42[3] = a1;
  v42[1] = (uint64_t)sub_1000D666C;
  v42[0] = (uint64_t)off_1002B2B68 + 1;
  sub_1000D606C(a1, "Network:IsCommissioned", v42);
  sub_100070E0C(v42);
  v41[2] = 0LL;
  v41[3] = a1;
  v41[1] = (uint64_t)sub_1000D67EC;
  v41[0] = (uint64_t)off_1002B2B68 + 1;
  sub_1000D606C(a1, "com.nestlabs.internal:Legacy:Enabled", v41);
  sub_100070E0C(v41);
  v40[2] = 0LL;
  uint64_t v40[3] = a1;
  v40[1] = (uint64_t)sub_1000D6878;
  v40[0] = (uint64_t)off_1002B2B68 + 1;
  sub_1000D606C(a1, "com.nestlabs.internal:Network:AllowingJoin", v40);
  sub_100070E0C(v40);
  void v39[2] = 0LL;
  v39[3] = a1;
  v39[1] = (uint64_t)sub_1000D6904;
  v39[0] = (uint64_t)off_1002B2B68 + 1;
  sub_1000D606C(a1, "Network:PANID", v39);
  sub_100070E0C(v39);
  v38[2] = 0LL;
  v38[3] = a1;
  v38[1] = (uint64_t)sub_1000D6990;
  v38[0] = (uint64_t)off_1002B2B68 + 1;
  sub_1000D606C(a1, "Network:XPANID", v38);
  sub_100070E0C(v38);
  void v37[2] = 0LL;
  uint64_t v37[3] = a1;
  v37[1] = (uint64_t)sub_1000D6A24;
  v37[0] = (uint64_t)off_1002B2B68 + 1;
  sub_1000D606C(a1, "NCP:Channel", v37);
  sub_100070E0C(v37);
  _OWORD v36[2] = 0LL;
  _OWORD v36[3] = a1;
  v36[1] = (uint64_t)sub_1000D6AAC;
  v36[0] = (uint64_t)off_1002B2B68 + 1;
  sub_1000D606C(a1, "Daemon:Version", v36);
  sub_100070E0C(v36);
  void v35[2] = 0LL;
  uint64_t v35[3] = a1;
  v35[1] = (uint64_t)sub_1000D6B70;
  v35[0] = (uint64_t)off_1002B2B68 + 1;
  sub_1000D606C(a1, "Daemon:AutoAssociateAfterReset", v35);
  sub_100070E0C(v35);
  void v34[2] = 0LL;
  v34[3] = a1;
  v34[1] = (uint64_t)sub_1000D6BF8;
  v34[0] = (uint64_t)off_1002B2B68 + 1;
  sub_1000D606C(a1, "Daemon:AutoDeepSleep", v34);
  sub_100070E0C(v34);
  v33[2] = 0LL;
  v33[3] = a1;
  v33[1] = (uint64_t)sub_1000D6C84;
  v33[0] = (uint64_t)off_1002B2B68 + 1;
  sub_1000D606C(a1, "Daemon:AutoFirmwareUpdate", v33);
  sub_100070E0C(v33);
  v32[2] = 0LL;
  v32[3] = a1;
  v32[1] = (uint64_t)sub_1000D6D10;
  v32[0] = (uint64_t)off_1002B2B68 + 1;
  sub_1000D606C(a1, "Daemon:TerminateOnFault", v32);
  sub_100070E0C(v32);
  v31[2] = 0LL;
  v31[3] = a1;
  v31[1] = (uint64_t)sub_1000D6D9C;
  v31[0] = (uint64_t)off_1002B2B68 + 1;
  sub_1000D606C(a1, "Daemon:IPv6:AutoUpdateInterfaceAddrsOnNCP", v31);
  sub_100070E0C(v31);
  void v30[2] = 0LL;
  v30[3] = a1;
  v30[1] = (uint64_t)sub_1000D6E28;
  v30[0] = (uint64_t)off_1002B2B68 + 1;
  sub_1000D606C(a1, "Daemon:IPv6:FilterUserAddedLinkLocal", v30);
  sub_100070E0C(v30);
  void v29[2] = 0LL;
  v29[3] = a1;
  v29[1] = (uint64_t)sub_1000D6EB4;
  v29[0] = (uint64_t)off_1002B2B68 + 1;
  sub_1000D606C(a1, "Daemon:IPv6:AutoAddSLAACAddress", v29);
  sub_100070E0C(v29);
  v28[2] = 0LL;
  uint64_t v28[3] = a1;
  v28[1] = (uint64_t)sub_1000D6F40;
  v28[0] = (uint64_t)off_1002B2B68 + 1;
  sub_1000D606C(a1, "Daemon:SetDefaultRouteForAutoAddedPrefix", v28);
  sub_100070E0C(v28);
  void v27[2] = 0LL;
  v27[3] = a1;
  v27[1] = (uint64_t)sub_1000D6FCC;
  v27[0] = (uint64_t)off_1002B2B68 + 1;
  sub_1000D606C(a1, "com.nestlabs.internal:Network:PassthruPort", v27);
  sub_100070E0C(v27);
  v26[2] = 0LL;
  void v26[3] = a1;
  v26[1] = (uint64_t)sub_1000D7058;
  v26[0] = (uint64_t)off_1002B2B68 + 1;
  sub_1000D606C(a1, "NCP:MACAddress", v26);
  sub_100070E0C(v26);
  void v25[2] = 0LL;
  v25[3] = a1;
  v25[1] = (uint64_t)sub_1000D7118;
  v25[0] = (uint64_t)off_1002B2B68 + 1;
  sub_1000D606C(a1, "NCP:HardwareAddress", v25);
  sub_100070E0C(v25);
  v24[2] = 0LL;
  v24[3] = a1;
  v24[1] = (uint64_t)sub_1000D71D8;
  v24[0] = (uint64_t)off_1002B2B68 + 1;
  sub_1000D606C(a1, "IPv6:SetSLAACForAutoAddedPrefix", v24);
  sub_100070E0C(v24);
  v23[2] = 0LL;
  v23[3] = a1;
  v23[1] = (uint64_t)sub_1000D7264;
  v23[0] = (uint64_t)off_1002B2B68 + 1;
  sub_1000D606C(a1, "Daemon:OffMeshRoute:AutoAddOnInterface", v23);
  sub_100070E0C(v23);
  v22[2] = 0LL;
  v22[3] = a1;
  v22[1] = (uint64_t)sub_1000D72F0;
  v22[0] = (uint64_t)off_1002B2B68 + 1;
  sub_1000D606C(a1, "Daemon:OffMeshRoute:FilterSelfAutoAdded", v22);
  sub_100070E0C(v22);
  v21[2] = 0LL;
  v21[3] = a1;
  v21[1] = (uint64_t)sub_1000D737C;
  v21[0] = (uint64_t)off_1002B2B68 + 1;
  sub_1000D606C(a1, "Daemon:OnMeshPrefix:AutoAddAsInterfaceRoute", v21);
  sub_100070E0C(v21);
  void v20[2] = 0LL;
  v20[3] = a1;
  v20[1] = (uint64_t)sub_1000D7408;
  v20[0] = (uint64_t)off_1002B2B68 + 1;
  sub_1000D606C(a1, "IPv6:MeshLocalPrefix", v20);
  sub_100070E0C(v20);
  void v19[2] = 0LL;
  v19[3] = a1;
  v19[1] = (uint64_t)sub_1000D75D8;
  v19[0] = (uint64_t)off_1002B2B68 + 1;
  sub_1000D606C(a1, "IPv6:MeshLocalAddress", v19);
  sub_100070E0C(v19);
  v18[2] = 0LL;
  v18[3] = a1;
  v18[0] = (uint64_t)off_1002B2B68 + 1;
  v18[1] = (uint64_t)sub_1000D770C;
  sub_1000D606C(a1, "IPv6:LinkLocalAddress", v18);
  sub_100070E0C(v18);
  v17[2] = 0LL;
  v17[3] = a1;
  v17[0] = (uint64_t)off_1002B2B68 + 1;
  v17[1] = (uint64_t)sub_1000D7840;
  sub_1000D606C(a1, "com.nestlabs.internal:Legacy:MeshLocalPrefix", v17);
  sub_100070E0C(v17);
  _OWORD v16[2] = 0LL;
  v16[3] = a1;
  v16[0] = (uint64_t)off_1002B2B68 + 1;
  v16[1] = (uint64_t)sub_1000D79D0;
  sub_1000D606C(a1, "com.nestlabs.internal:Legacy:MeshLocalAddress", v16);
  sub_100070E0C(v16);
  void v15[2] = 0LL;
  v15[3] = a1;
  v15[0] = (uint64_t)off_1002B2B68 + 1;
  v15[1] = (uint64_t)sub_1000D7B30;
  sub_1000D606C(a1, "NCP:State", v15);
  sub_100070E0C(v15);
  v14[2] = 0LL;
  v14[3] = a1;
  v14[0] = (uint64_t)off_1002B2B68 + 1;
  v14[1] = (uint64_t)sub_1000D7C70;
  sub_1000D606C(a1, "Network:NodeType", v14);
  sub_100070E0C(v14);
  v13[2] = 0LL;
  uint64_t v13[3] = a1;
  v13[0] = (uint64_t)off_1002B2B68 + 1;
  v13[1] = (uint64_t)sub_1000D7D38;
  sub_1000D606C(a1, "Thread:OnMeshPrefixes", v13);
  sub_100070E0C(v13);
  v12[2] = 0LL;
  void v12[3] = a1;
  v12[0] = (uint64_t)off_1002B2B68 + 1;
  v12[1] = (uint64_t)sub_1000D7E48;
  sub_1000D606C(a1, "Thread:OffMeshRoutes", v12);
  sub_100070E0C(v12);
  _DWORD v11[2] = 0LL;
  v11[3] = a1;
  v11[0] = (uint64_t)off_1002B2B68 + 1;
  v11[1] = (uint64_t)sub_1000D7F58;
  sub_1000D606C(a1, "Thread:Services", v11);
  sub_100070E0C(v11);
  unsigned __int8 v10[2] = 0LL;
  uint64_t v10[3] = a1;
  v10[0] = (uint64_t)off_1002B2B68 + 1;
  v10[1] = (uint64_t)sub_1000D8210;
  sub_1000D606C(a1, "Thread:Services:AsValMap", v10);
  sub_100070E0C(v10);
  int v9[2] = 0LL;
  v9[3] = a1;
  v9[0] = (uint64_t)off_1002B2B68 + 1;
  v9[1] = (uint64_t)sub_1000D8448;
  sub_1000D606C(a1, "IPv6:AllAddresses", v9);
  sub_100070E0C(v9);
  v8[2] = 0LL;
  v8[3] = a1;
  v8[0] = (uint64_t)off_1002B2B68 + 1;
  v8[1] = (uint64_t)sub_1000D8558;
  sub_1000D606C(a1, "IPv6:MulticastAddresses", v8);
  sub_100070E0C(v8);
  v7[2] = 0LL;
  v7[3] = a1;
  v7[0] = (uint64_t)off_1002B2B68 + 1;
  v7[1] = (uint64_t)sub_1000D8668;
  sub_1000D606C(a1, "IPv6:Routes", v7);
  sub_100070E0C(v7);
  v6[2] = 0LL;
  v6[3] = a1;
  v6[0] = (uint64_t)off_1002B2B68 + 1;
  v6[1] = (uint64_t)sub_1000D8848;
  sub_1000D606C(a1, "Daemon:SyslogMask", v6);
  sub_100070E0C(v6);
  v5[2] = 0LL;
  void v5[3] = a1;
  v5[0] = (uint64_t)off_1002B2B68 + 1;
  v5[1] = (uint64_t)sub_1000D89D8;
  sub_1000D606C(a1, "Daemon:PromiscuousPcap", v5);
  sub_100070E0C(v5);
  v4[2] = 0LL;
  v4[3] = a1;
  v4[0] = (uint64_t)off_1002B2B68 + 1;
  v4[1] = (uint64_t)sub_1000D8A60;
  sub_1000D606C(a1, "Daemon:PromiscuousModeNetwork", v4);
  sub_100070E0C(v4);
  v3[2] = 0LL;
  v3[3] = a1;
  v3[0] = (uint64_t)off_1002B2B68 + 1;
  v3[1] = (uint64_t)sub_1000D8AE8;
  sub_1000D606C(a1, "Daemon:VirtualInterface:ReadBufferSize", v3);
  return sub_100070E0C(v3);
}

void sub_1000D43D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1000D4618(uint64_t a1)
{
  v23[2] = 0LL;
  v23[3] = a1;
  v23[0] = (uint64_t)off_1002B2BD0 + 1;
  v23[1] = (uint64_t)sub_1000D8F8C;
  sub_1000D8DF0(a1, "Daemon:Enabled", v23);
  sub_100071048(v23);
  v22[2] = 0LL;
  v22[3] = a1;
  v22[0] = (uint64_t)off_1002B2BD0 + 1;
  v22[1] = (uint64_t)sub_1000D8FC0;
  sub_1000D8DF0(a1, "Interface:Up", v22);
  sub_100071048(v22);
  v21[2] = 0LL;
  v21[3] = a1;
  v21[0] = (uint64_t)off_1002B2BD0 + 1;
  v21[1] = (uint64_t)sub_1000D90D0;
  sub_1000D8DF0(a1, "Daemon:AutoAssociateAfterReset", v21);
  sub_100071048(v21);
  void v20[2] = 0LL;
  v20[3] = a1;
  v20[0] = (uint64_t)off_1002B2BD0 + 1;
  v20[1] = (uint64_t)sub_1000D9104;
  sub_1000D8DF0(a1, "com.nestlabs.internal:Network:PassthruPort", v20);
  sub_100071048(v20);
  void v19[2] = 0LL;
  v19[3] = a1;
  v19[0] = (uint64_t)off_1002B2BD0 + 1;
  v19[1] = (uint64_t)sub_1000D9138;
  sub_1000D8DF0(a1, "Daemon:AutoFirmwareUpdate", v19);
  sub_100071048(v19);
  v18[2] = 0LL;
  v18[3] = a1;
  v18[0] = (uint64_t)off_1002B2BD0 + 1;
  v18[1] = (uint64_t)sub_1000D92A8;
  sub_1000D8DF0(a1, "Daemon:TerminateOnFault", v18);
  sub_100071048(v18);
  v17[2] = 0LL;
  v17[3] = a1;
  v17[0] = (uint64_t)off_1002B2BD0 + 1;
  v17[1] = (uint64_t)sub_1000D930C;
  sub_1000D8DF0(a1, "Daemon:IPv6:AutoUpdateInterfaceAddrsOnNCP", v17);
  sub_100071048(v17);
  _OWORD v16[2] = 0LL;
  v16[3] = a1;
  v16[0] = (uint64_t)off_1002B2BD0 + 1;
  v16[1] = (uint64_t)sub_1000D9340;
  sub_1000D8DF0(a1, "Daemon:IPv6:FilterUserAddedLinkLocal", v16);
  sub_100071048(v16);
  void v15[2] = 0LL;
  v15[3] = a1;
  v15[0] = (uint64_t)off_1002B2BD0 + 1;
  v15[1] = (uint64_t)sub_1000D9374;
  sub_1000D8DF0(a1, "Daemon:IPv6:AutoAddSLAACAddress", v15);
  sub_100071048(v15);
  v14[2] = 0LL;
  v14[3] = a1;
  v14[0] = (uint64_t)off_1002B2BD0 + 1;
  v14[1] = (uint64_t)sub_1000D93A8;
  sub_1000D8DF0(a1, "Daemon:SetDefaultRouteForAutoAddedPrefix", v14);
  sub_100071048(v14);
  v13[2] = 0LL;
  uint64_t v13[3] = a1;
  v13[0] = (uint64_t)off_1002B2BD0 + 1;
  v13[1] = (uint64_t)sub_1000D93DC;
  sub_1000D8DF0(a1, "IPv6:SetSLAACForAutoAddedPrefix", v13);
  sub_100071048(v13);
  v12[2] = 0LL;
  void v12[3] = a1;
  v12[0] = (uint64_t)off_1002B2BD0 + 1;
  v12[1] = (uint64_t)sub_1000D9410;
  sub_1000D8DF0(a1, "Daemon:OffMeshRoute:AutoAddOnInterface", v12);
  sub_100071048(v12);
  _DWORD v11[2] = 0LL;
  v11[3] = a1;
  v11[0] = (uint64_t)off_1002B2BD0 + 1;
  v11[1] = (uint64_t)sub_1000D9444;
  sub_1000D8DF0(a1, "Daemon:OffMeshRoute:FilterSelfAutoAdded", v11);
  sub_100071048(v11);
  unsigned __int8 v10[2] = 0LL;
  uint64_t v10[3] = a1;
  v10[0] = (uint64_t)off_1002B2BD0 + 1;
  v10[1] = (uint64_t)sub_1000D9478;
  sub_1000D8DF0(a1, "Daemon:OnMeshPrefix:AutoAddAsInterfaceRoute", v10);
  sub_100071048(v10);
  int v9[2] = 0LL;
  v9[3] = a1;
  v9[0] = (uint64_t)off_1002B2BD0 + 1;
  v9[1] = (uint64_t)sub_1000D94AC;
  sub_1000D8DF0(a1, "IPv6:MeshLocalPrefix", v9);
  sub_100071048(v9);
  v8[2] = 0LL;
  v8[3] = a1;
  v8[0] = (uint64_t)off_1002B2BD0 + 1;
  v8[1] = (uint64_t)sub_1000D96BC;
  sub_1000D8DF0(a1, "IPv6:MeshLocalAddress", v8);
  sub_100071048(v8);
  v7[2] = 0LL;
  v7[3] = a1;
  v7[0] = (uint64_t)off_1002B2BD0 + 1;
  v7[1] = (uint64_t)sub_1000D9720;
  sub_1000D8DF0(a1, "Daemon:AutoDeepSleep", v7);
  sub_100071048(v7);
  v6[2] = 0LL;
  v6[3] = a1;
  v6[0] = (uint64_t)off_1002B2BD0 + 1;
  v6[1] = (uint64_t)sub_1000D4CF8;
  sub_1000D8DF0(a1, "Daemon:SyslogMask", v6);
  sub_100071048(v6);
  v5[2] = 0LL;
  void v5[3] = a1;
  v5[0] = (uint64_t)off_1002B2BD0 + 1;
  v5[1] = (uint64_t)sub_1000D9828;
  sub_1000D8DF0(a1, "Daemon:PromiscuousPcap", v5);
  sub_100071048(v5);
  v4[2] = 0LL;
  v4[3] = a1;
  v4[0] = (uint64_t)off_1002B2BD0 + 1;
  v4[1] = (uint64_t)sub_1000D98CC;
  sub_1000D8DF0(a1, "Daemon:PromiscuousModeNetwork", v4);
  sub_100071048(v4);
  v3[2] = 0LL;
  v3[3] = a1;
  v3[0] = (uint64_t)off_1002B2BD0 + 1;
  v3[1] = (uint64_t)sub_1000D9970;
  sub_1000D8DF0(a1, "Daemon:VirtualInterface:ReadBufferSize", v3);
  return sub_100071048(v3);
}

void sub_1000D4A10( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1000D4B14(uint64_t a1)
{
  v2[2] = 0LL;
  v2[3] = a1;
  v2[0] = (uint64_t)off_1002B2BD0 + 1;
  v2[1] = (uint64_t)sub_1000D9EF8;
  sub_1000D9DC8(a1, "IPv6:MulticastAddresses", v2);
  return sub_100071048(v2);
}

void sub_1000D4B68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1000D4B7C(uint64_t a1)
{
  v2[2] = 0LL;
  v2[3] = a1;
  v2[0] = (uint64_t)off_1002B2BD0 + 1;
  v2[1] = (uint64_t)sub_1000DA334;
  sub_1000DA204(a1, "IPv6:MulticastAddresses", v2);
  return sub_100071048(v2);
}

void sub_1000D4BD0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__int128 *sub_1000D4BE4(__int128 *a1, __int128 *a2)
{
  __int128 v3 = *a2;
  *(void *)a2 = 0LL;
  *((void *)a2 + 1) = 0LL;
  __int128 v4 = *a1;
  *a1 = v3;
  *((void *)&v6 + 1) = *((void *)&v4 + 1);
  sub_10000F9EC((uint64_t *)&v6 + 1);
  return a1;
}

void *sub_1000D4C2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  return sub_1000DC668(*(void *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_1000D4C34(uint64_t a1)
{
  __int128 v3 = (void **)a1;
  sub_10000EFEC(&v3);
  return a1;
}

void *sub_1000D4C70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  return sub_1000DDC9C(*(void *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_1000D4C78(uint64_t a1)
{
  __int128 v3 = (void **)a1;
  sub_10000EFEC(&v3);
  return a1;
}

void *sub_1000D4CB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  return sub_1000DEEE8(*(void *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_1000D4CBC(uint64_t a1)
{
  __int128 v3 = (void **)a1;
  sub_10000EFEC(&v3);
  return a1;
}

void sub_1000D4CF8(uint64_t a1, uint64_t *a2, void *a3)
{
  int size = (char)__p.__r_.__value_.__s.__size_;
  std::string::size_type v6 = __p.__r_.__value_.__r.__words[0];
  uint64_t v7 = sub_10015A044(0);
  if (size >= 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)v6;
  }
  int v9 = sub_100159C90((const char *)p_p, v7);
  sub_10015A044(v9);
  sub_100147B4C(a2, &__p);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v10 = &__p;
  }
  else {
    uint64_t v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  sub_10010FFCC("Daemon:SyslogMask", (char *)v10);
  uint64_t v11 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v11)
  {
    if (sub_10015A058(6) && os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      sub_100147B4C(a2, &__p);
      uint64_t v12 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)std::string buf = 136315138;
      char v16 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Saved the SysLogMask as %s ", buf, 0xCu);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  if (*a3) {
    uint64_t v13 = nullsub_78;
  }
  else {
    uint64_t v13 = 0LL;
  }
  if (v13) {
    sub_100006FF8(a3);
  }
}

void sub_1000D4EB0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1000D4ED8(char *a1)
{
  int v1 = a1;
  if (a1[23] < 0) {
    int v1 = *(const char **)a1;
  }
  return !strcasecmp(v1, "Config:NCP:HardResetPath")
      || !strcasecmp(v1, "Config:NCP:PowerPath")
      || !strcasecmp(v1, "Config:NCP:SocketPath")
      || !strcasecmp(v1, "Config:TUN:InterfaceName")
      || !strcasecmp(v1, "Config:NCP:DriverName")
      || !strcasecmp(v1, "Config:NCP:FirmwareCheckCommand")
      || !strcasecmp(v1, "Daemon:AutoFirmwareUpdate")
      || !strcasecmp(v1, "Config:NCP:FirmwareUpgradeCommand")
      || strcasecmp(v1, "Config:Daemon:NetworkRetainCommand") == 0;
}

void *sub_1000D4FC0(uint64_t a1)
{
  *(void *)a1 = off_1002B2188;
  *(void *)(a1 + 32) = off_1002B2318;
  uint64_t v2 = a1 + 32;
  __int128 v3 = *(const void **)(a1 + 67208);
  if (v3) {
    CFRelease(v3);
  }
  sub_10010ABEC(a1 + 1776);
  sub_100101790(a1 + 1768);
  sub_1001009CC(a1 + 1756);
  sub_10000F9EC((uint64_t *)(a1 + 1728));
  sub_10000F9EC((uint64_t *)(a1 + 1704));
  sub_1000B6040(a1 + 1608);
  sub_10000D0D4(a1 + 1568);
  sub_10000F9EC((uint64_t *)(a1 + 1560));
  sub_10000D0D4(a1 + 1320);
  sub_10000D0D4(a1 + 1296);
  char v5 = (void **)(a1 + 1216);
  sub_100075CA4(&v5);
  char v5 = (void **)(a1 + 1192);
  sub_100075CA4(&v5);
  sub_10000D0D4(a1 + 1168);
  sub_10000D0D4(a1 + 1144);
  sub_10000D0D4(a1 + 1120);
  sub_10000D0D4(a1 + 1096);
  sub_10000D0D4(a1 + 1072);
  sub_10000D0D4(a1 + 1048);
  sub_10000F9EC((uint64_t *)(a1 + 224));
  sub_10000F9EC((uint64_t *)(a1 + 208));
  sub_10000F9EC((uint64_t *)(a1 + 192));
  sub_1000DC48C(a1 + 160);
  sub_1000DC48C(a1 + 136);
  sub_1000DC48C(a1 + 112);
  sub_1000DC3D0(a1 + 88);
  nullsub_2(v2);
  return sub_1000EA76C((void *)a1);
}

uint64_t sub_1000D513C(uint64_t a1)
{
  return sub_10011EC48(*(void *)(a1 + 184));
}

uint64_t sub_1000D5144(uint64_t a1)
{
  return a1 + 1464;
}

uint64_t sub_1000D514C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10015A014(a1 + 32, a2, a3, a4, a5, a6, a7, a8, a9);
}

void *sub_1000D5154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  v13[0] = 0LL;
  __n128 v11 = sub_100007640((uint64_t)v13, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *, __n128))(*(void *)a1 + 200LL))( a1,  a2,  a3,  a4,  a5,  v13,  v11);
  return sub_1000075F0(v13);
}

void sub_1000D51D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1000D51E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  v9[0] = 0LL;
  __n128 v7 = sub_100007640((uint64_t)v9, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *, __n128))(*(void *)a1 + 208LL))(a1, a2, a3, v9, v7);
  return sub_1000075F0(v9);
}

void sub_1000D5250( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000D5264(uint64_t a1, std::string *__str)
{
  __int128 v4 = (std::string *)(a1 + 1352);
  int size = (char)__str->__r_.__value_.__s.__size_;
  if (size >= 0) {
    size_t v6 = __str->__r_.__value_.__s.__size_;
  }
  else {
    size_t v6 = __str->__r_.__value_.__l.__size_;
  }
  uint64_t v7 = *(unsigned __int8 *)(a1 + 1375);
  else {
    uint64_t v8 = *(unsigned __int8 *)(a1 + 1375);
  }
  if (v6 == v8)
  {
    if ((v7 & 0x80u) == 0LL) {
      int v9 = (unsigned __int8 *)(a1 + 1352);
    }
    else {
      int v9 = (unsigned __int8 *)v4->__r_.__value_.__r.__words[0];
    }
    if (size < 0)
    {
      if (!memcmp(__str->__r_.__value_.__l.__data_, v9, v6)) {
        return 0LL;
      }
    }

    else
    {
      if (!v6) {
        return 0LL;
      }
      for (uint64_t i = __str; i->__r_.__value_.__s.__data_[0] == *v9; uint64_t i = (std::string *)((char *)i + 1))
      {
        ++v9;
        if (!--v6) {
          return 0LL;
        }
      }
    }
  }

  if ((v7 & 0x80) != 0) {
    uint64_t v7 = *(void *)(a1 + 1360);
  }
  if (!v7)
  {
    std::string::operator=(v4, __str);
    uint64_t v13 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v13)
    {
      uint64_t v14 = v13;
      if (sub_10015A058(5) && os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "NCP is running %s", (uint8_t *)&__p, 0xCu);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    unsigned int v17 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v17)
    {
      if (sub_10015A058(5) && os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        sub_1000F3E2C(&__p);
        uint64_t v18 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)std::string buf = 136315138;
        uint64_t v23 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Driver is running %s", buf, 0xCu);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    if (*(_BYTE *)(a1 + 1378)
      && (*(unsigned int (**)(uint64_t, std::string *))(*(void *)a1 + 264LL))(a1, __str))
    {
      uint64_t v19 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v19)
      {
        if (sub_10015A058(5) && os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          LOWORD(__p.__r_.__value_.__l.__data_) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "NCP FIRMWARE UPGRADE IS REQUIRED",  (uint8_t *)&__p,  2u);
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }

      uint64_t v15 = 0LL;
      uint64_t v16 = 34LL;
      goto LABEL_34;
    }

    return 0LL;
  }

  __n128 v11 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v11)
  {
    uint64_t v12 = v11;
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  uint64_t v15 = 2LL;
  uint64_t v16 = 18LL;
LABEL_34:
  (*(void (**)(uint64_t))(*(void *)a1 + 8 * v16))(a1);
  return v15;
}

void sub_1000D55E4(unsigned __int8 *a1@<X0>, void *a2@<X8>)
{
  a2[2] = 0LL;
  a2[1] = 0LL;
  *a2 = a2 + 1;
  sub_10000AC00(__p, "Daemon:Enabled");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "Network:IsCommissioned");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "Interface:Up");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "Network:Name");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "Network:PartitionId");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "Network:PANID");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "Network:XPANID");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "Network:Key");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "Network:PSKc");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "Network:KeyIndex");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "Network:NodeType");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "NCP:State");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "NCP:Channel");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "NCP:TXPower");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "IPv6:MeshLocalPrefix");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "IPv6:MeshLocalAddress");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "IPv6:LinkLocalAddress");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "IPv6:AllAddresses");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "IPv6:MulticastAddresses");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "IPv6:SetSLAACForAutoAddedPrefix");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "IPv6:Routes");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "Thread:OnMeshPrefixes");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "Thread:OffMeshRoutes");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "Daemon:AutoAssociateAfterReset");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "Daemon:AutoDeepSleep");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "Daemon:ReadyForHostSleep");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "Daemon:TerminateOnFault");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "Daemon:SetDefaultRouteForAutoAddedPrefix");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "Daemon:PromiscuousPcap");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "Daemon:PromiscuousModeNetwork");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "com.nestlabs.internal:Network:AllowingJoin");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "Daemon:Version");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "Daemon:TerminateOnFault");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "NCP:Version");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "NCP:HardwareAddress");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "NCP:CCAThreshold");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "NCP:MACAddress");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "Thread:ActiveDataset:Bytes");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "Config:TUN:InterfaceName");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (a1[1600] || a1[1601] || sub_100159E98(a1 + 1592, 8LL))
  {
    sub_10000AC00(__p, "com.nestlabs.internal:Legacy:MeshLocalAddress");
    sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
    sub_10000AC00(__p, "com.nestlabs.internal:Legacy:MeshLocalPrefix");
    sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }

  sub_10000AC00(__p, "com.nestlabs.internal:Network:PassthruPort");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10000AC00(__p, "Daemon:VirtualInterface:ReadBufferSize");
  sub_10007166C((uint64_t)a2, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000D5E48( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

std::string *sub_1000D5FC8@<X0>(std::string *__str@<X0>, std::string *a2@<X8>)
{
  double result = std::string::basic_string(a2, __str);
  for (std::string::size_type i = 0LL; ; ++i)
  {
    std::string::size_type size = __str->__r_.__value_.__s.__size_;
    if ((size & 0x80u) != 0LL) {
      std::string::size_type size = __str->__r_.__value_.__l.__size_;
    }
    if (i >= size) {
      break;
    }
    if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    double result = (std::string *)__toupper(v7->__r_.__value_.__s.__data_[i]);
    if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    v8->__r_.__value_.__s.__data_[i] = (char)result;
  }

  return result;
}

void sub_1000D6050(_Unwind_Exception *exception_object)
{
}

void sub_1000D606C(uint64_t a1, char *a2, uint64_t *a3)
{
  size_t v6 = sub_1000D619C((uint64_t **)(a1 + 88), &v10);
  sub_100014D08((uint64_t)v6, (__int128 *)&__p);
  sub_1000DC0B0(v6 + 3, v9);
  sub_100070E0C(v9);
}

void sub_1000D6144( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000D619C(uint64_t **a1, std::string *a2)
{
  __int128 v3 = a2;
  return sub_1000E01A4(a1, (const void **)&a2->__r_.__value_.__l.__data_, (uint64_t)&unk_100228867, &v3) + 7;
}

uint64_t sub_1000D61D0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000D6208(uint64_t a1, void *a2)
{
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 320LL))(v5);
  __int128 v3 = operator new(0x20uLL);
  void *v3 = off_1002B2B98;
  sub_100044D20(v3 + 1, v5);
  size_t v6 = v3;
  sub_10003446C(a2);
  if (v6) {
    (*(void (**)(void *))(*v6 + 8LL))(v6);
  }
  return sub_10000AD30((uint64_t)v5);
}

void sub_1000D628C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8LL))(a12);
  }
  sub_10000AD30((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D62BC(uint64_t a1, void *a2)
{
  __int128 v3 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
  sub_100071608(&v5, v3);
  sub_10003446C(a2);
  uint64_t result = v5;
  if (v5) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  return result;
}

void sub_1000D631C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D633C(uint64_t a1, void *a2)
{
  __int128 v4 = operator new(0x10uLL);
  *(void *)__int128 v4 = &off_1002AEA00;
  _BYTE v4[8] = *(_BYTE *)(a1 + 1376);
  size_t v6 = v4;
  sub_10003446C(a2);
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*(void *)v6 + 8LL))(v6);
  }
  return result;
}

void sub_1000D63A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D63C8(uint64_t a1, void *a2)
{
  BOOL v3 = sub_10011F1B8(*(void *)(a1 + 184));
  __int128 v4 = operator new(0x10uLL);
  *(void *)__int128 v4 = &off_1002AEA00;
  _BYTE v4[8] = v3;
  size_t v6 = v4;
  sub_10003446C(a2);
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*(void *)v6 + 8LL))(v6);
  }
  return result;
}

void sub_1000D6438( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D6458(uint64_t a1, void *a2)
{
  char v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 296LL))(a1);
  __int128 v4 = operator new(0x10uLL);
  *(void *)__int128 v4 = &off_1002AEA00;
  _BYTE v4[8] = v3 ^ 1;
  size_t v6 = v4;
  sub_10003446C(a2);
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*(void *)v6 + 8LL))(v6);
  }
  return result;
}

void sub_1000D64D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D64F0(uint64_t a1, void *a2)
{
  uint64_t result = v4;
  if (v4) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  return result;
}

void sub_1000D654C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D656C(const std::string *a1, void *a2)
{
  uint64_t result = v4;
  if (v4) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  return result;
}

void sub_1000D65C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D65E0(uint64_t a1, void *a2)
{
  uint64_t v4 = operator new(0x10uLL);
  *(void *)uint64_t v4 = &off_1002AE1C8;
  v4[2] = *(_DWORD *)(a1 + 1516);
  size_t v6 = v4;
  sub_10003446C(a2);
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*(void *)v6 + 8LL))(v6);
  }
  return result;
}

void sub_1000D664C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D666C(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 1408);
  if (sub_1000B50D0(v3))
  {
    uint64_t v4 = operator new(0x10uLL);
    *(void *)uint64_t v4 = &off_1002AEA00;
    _BYTE v4[8] = 1;
    __p[0] = v4;
    sub_10003446C(a2);
    goto LABEL_5;
  }

  if (v3 - 3 <= 1)
  {
    uint64_t v5 = operator new(0x10uLL);
    *(void *)uint64_t v5 = &off_1002AEA00;
    _BYTE v5[8] = 0;
    __p[0] = v5;
    sub_10003446C(a2);
LABEL_5:
    if (__p[0]) {
      (*(void (**)(void *))(*(void *)__p[0] + 8LL))(__p[0]);
    }
    return;
  }

  sub_10000AC00(__p, "Unable to determine association state at this time");
  size_t v6 = (char *)operator new(0x20uLL);
  *(void *)size_t v6 = &off_1002AE030;
  *(_OWORD *)(v6 + 8) = *(_OWORD *)__p;
  *((void *)v6 + 3) = v8;
  __p[0] = 0LL;
  __p[1] = 0LL;
  uint64_t v8 = 0LL;
  int v9 = v6;
  sub_10003446C(a2);
  if (v9) {
    (*(void (**)(char *))(*(void *)v9 + 8LL))(v9);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000D6794( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8LL))(a15);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D67EC(uint64_t a1, void *a2)
{
  uint64_t v4 = operator new(0x10uLL);
  *(void *)uint64_t v4 = &off_1002AEA00;
  _BYTE v4[8] = *(_BYTE *)(a1 + 1600);
  size_t v6 = v4;
  sub_10003446C(a2);
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*(void *)v6 + 8LL))(v6);
  }
  return result;
}

void sub_1000D6858( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D6878(uint64_t a1, void *a2)
{
  uint64_t v4 = operator new(0x10uLL);
  *(void *)uint64_t v4 = &off_1002AEA00;
  _BYTE v4[8] = *(_BYTE *)(a1 + 1499);
  size_t v6 = v4;
  sub_10003446C(a2);
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*(void *)v6 + 8LL))(v6);
  }
  return result;
}

void sub_1000D68E4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D6904(uint64_t a1, void *a2)
{
  uint64_t v4 = operator new(0x10uLL);
  *(void *)uint64_t v4 = &off_1002AE0D0;
  uint64_t v4[4] = *(_WORD *)(a1 + 1496);
  size_t v6 = v4;
  sub_10003446C(a2);
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*(void *)v6 + 8LL))(v6);
  }
  return result;
}

void sub_1000D6970( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D6990(uint64_t a1, void *a2)
{
  uint64_t v3 = v7;
  uint64_t v4 = operator new(0x10uLL);
  *uint64_t v4 = &off_1002AE088;
  v4[1] = v3;
  size_t v6 = v4;
  sub_10003446C(a2);
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*v6 + 8LL))(v6);
  }
  return result;
}

void sub_1000D6A04( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8LL))(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D6A24(uint64_t a1, void *a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 1498);
  uint64_t v4 = operator new(0x10uLL);
  *(void *)uint64_t v4 = &off_1002AE160;
  v4[2] = v3;
  size_t v6 = v4;
  sub_10003446C(a2);
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*(void *)v6 + 8LL))(v6);
  }
  return result;
}

void sub_1000D6A8C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D6AAC(uint64_t a1, void *a2)
{
  int v3 = (char *)operator new(0x20uLL);
  *(void *)int v3 = &off_1002AE030;
  *(std::string *)(v3 + 8) = __p;
  memset(&__p, 0, sizeof(__p));
  uint64_t v5 = v3;
  sub_10003446C(a2);
  if (v5) {
    (*(void (**)(char *))(*(void *)v5 + 8LL))(v5);
  }
}

void sub_1000D6B38( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8LL))(a15);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D6B70(uint64_t a1, void *a2)
{
  char v3 = *(_BYTE *)(a1 + 1379);
  uint64_t v4 = operator new(0x10uLL);
  *(void *)uint64_t v4 = &off_1002AEA00;
  _BYTE v4[8] = v3;
  size_t v6 = v4;
  sub_10003446C(a2);
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*(void *)v6 + 8LL))(v6);
  }
  return result;
}

void sub_1000D6BD8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D6BF8(uint64_t a1, void *a2)
{
  uint64_t v4 = operator new(0x10uLL);
  *(void *)uint64_t v4 = &off_1002AEA00;
  _BYTE v4[8] = *(_BYTE *)(a1 + 1380);
  size_t v6 = v4;
  sub_10003446C(a2);
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*(void *)v6 + 8LL))(v6);
  }
  return result;
}

void sub_1000D6C64( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D6C84(uint64_t a1, void *a2)
{
  uint64_t v4 = operator new(0x10uLL);
  *(void *)uint64_t v4 = &off_1002AEA00;
  _BYTE v4[8] = *(_BYTE *)(a1 + 1378);
  size_t v6 = v4;
  sub_10003446C(a2);
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*(void *)v6 + 8LL))(v6);
  }
  return result;
}

void sub_1000D6CF0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D6D10(uint64_t a1, void *a2)
{
  uint64_t v4 = operator new(0x10uLL);
  *(void *)uint64_t v4 = &off_1002AEA00;
  _BYTE v4[8] = *(_BYTE *)(a1 + 1377);
  size_t v6 = v4;
  sub_10003446C(a2);
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*(void *)v6 + 8LL))(v6);
  }
  return result;
}

void sub_1000D6D7C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D6D9C(uint64_t a1, void *a2)
{
  uint64_t v4 = operator new(0x10uLL);
  *(void *)uint64_t v4 = &off_1002AEA00;
  _BYTE v4[8] = *(_BYTE *)(a1 + 1396);
  size_t v6 = v4;
  sub_10003446C(a2);
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*(void *)v6 + 8LL))(v6);
  }
  return result;
}

void sub_1000D6E08( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D6E28(uint64_t a1, void *a2)
{
  uint64_t v4 = operator new(0x10uLL);
  *(void *)uint64_t v4 = &off_1002AEA00;
  _BYTE v4[8] = *(_BYTE *)(a1 + 1397);
  size_t v6 = v4;
  sub_10003446C(a2);
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*(void *)v6 + 8LL))(v6);
  }
  return result;
}

void sub_1000D6E94( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D6EB4(uint64_t a1, void *a2)
{
  uint64_t v4 = operator new(0x10uLL);
  *(void *)uint64_t v4 = &off_1002AEA00;
  _BYTE v4[8] = *(_BYTE *)(a1 + 1398);
  size_t v6 = v4;
  sub_10003446C(a2);
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*(void *)v6 + 8LL))(v6);
  }
  return result;
}

void sub_1000D6F20( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D6F40(uint64_t a1, void *a2)
{
  uint64_t v4 = operator new(0x10uLL);
  *(void *)uint64_t v4 = &off_1002AEA00;
  _BYTE v4[8] = *(_BYTE *)(a1 + 1400);
  size_t v6 = v4;
  sub_10003446C(a2);
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*(void *)v6 + 8LL))(v6);
  }
  return result;
}

void sub_1000D6FAC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D6FCC(uint64_t a1, void *a2)
{
  uint64_t v4 = operator new(0x10uLL);
  *(void *)uint64_t v4 = &off_1002AE0D0;
  uint64_t v4[4] = *(_WORD *)(a1 + 1388);
  size_t v6 = v4;
  sub_10003446C(a2);
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*(void *)v6 + 8LL))(v6);
  }
  return result;
}

void sub_1000D7038( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D7058(uint64_t a1, void *a2)
{
  __n128 v5 = 0uLL;
  uint64_t v6 = 0LL;
  sub_100018E8C(&v5, (const void *)(a1 + 1415), a1 + 1423, 8uLL);
  char v3 = operator new(0x20uLL);
  sub_10001A3BC(v3, &v5);
  uint64_t v7 = v4;
  sub_10003446C(a2);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  uint64_t v8 = &v5;
  sub_100006F6C((void ***)&v8);
}

void sub_1000D70E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8LL))(a13);
  }
  *(void *)(v13 - 24) = &a10;
  sub_100006F6C((void ***)(v13 - 24));
  _Unwind_Resume(a1);
}

void sub_1000D7118(uint64_t a1, void *a2)
{
  __n128 v5 = 0uLL;
  uint64_t v6 = 0LL;
  sub_100018E8C(&v5, (const void *)(a1 + 1423), a1 + 1431, 8uLL);
  char v3 = operator new(0x20uLL);
  sub_10001A3BC(v3, &v5);
  uint64_t v7 = v4;
  sub_10003446C(a2);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  uint64_t v8 = &v5;
  sub_100006F6C((void ***)&v8);
}

void sub_1000D71A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8LL))(a13);
  }
  *(void *)(v13 - 24) = &a10;
  sub_100006F6C((void ***)(v13 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_1000D71D8(uint64_t a1, void *a2)
{
  uint64_t v4 = operator new(0x10uLL);
  *(void *)uint64_t v4 = &off_1002AEA00;
  _BYTE v4[8] = *(_BYTE *)(a1 + 1401);
  uint64_t v6 = v4;
  sub_10003446C(a2);
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*(void *)v6 + 8LL))(v6);
  }
  return result;
}

void sub_1000D7244( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D7264(uint64_t a1, void *a2)
{
  uint64_t v4 = operator new(0x10uLL);
  *(void *)uint64_t v4 = &off_1002AEA00;
  _BYTE v4[8] = *(_BYTE *)(a1 + 1402);
  uint64_t v6 = v4;
  sub_10003446C(a2);
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*(void *)v6 + 8LL))(v6);
  }
  return result;
}

void sub_1000D72D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D72F0(uint64_t a1, void *a2)
{
  uint64_t v4 = operator new(0x10uLL);
  *(void *)uint64_t v4 = &off_1002AEA00;
  _BYTE v4[8] = *(_BYTE *)(a1 + 1403);
  uint64_t v6 = v4;
  sub_10003446C(a2);
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*(void *)v6 + 8LL))(v6);
  }
  return result;
}

void sub_1000D735C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D737C(uint64_t a1, void *a2)
{
  uint64_t v4 = operator new(0x10uLL);
  *(void *)uint64_t v4 = &off_1002AEA00;
  _BYTE v4[8] = *(_BYTE *)(a1 + 1404);
  uint64_t v6 = v4;
  sub_10003446C(a2);
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*(void *)v6 + 8LL))(v6);
  }
  return result;
}

void sub_1000D73E8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D7408(uint64_t a1, void *a2)
{
  char v3 = (void *)(a1 + 1432);
  if (!sub_100159E98((unsigned __int8 *)(a1 + 1432), 8LL))
  {
    sub_10000AC00(&v10, "Property is unavailable");
    int v9 = (char *)operator new(0x20uLL);
    *(void *)int v9 = &off_1002AE030;
    *(std::string *)(v9 + 8) = v10;
    memset(&v10, 0, sizeof(v10));
    v12[0] = v9;
    sub_10003446C(a2);
    uint64_t v8 = (void *)v12[0];
    if (!v12[0]) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  v12[0] = *v3;
  v12[1] = 0LL;
  sub_100108154(v12, &v10);
  uint64_t v4 = std::string::append(&v10, "/64");
  std::string::size_type v5 = v4->__r_.__value_.__r.__words[0];
  v13[0] = v4->__r_.__value_.__l.__size_;
  *(void *)((char *)v13 + 7) = *(std::string::size_type *)((char *)&v4->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 size = v4->__r_.__value_.__s.__size_;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v7 = operator new(0x20uLL);
  *uint64_t v7 = &off_1002AE030;
  v7[1] = v5;
  v7[2] = v13[0];
  *(void *)((char *)v7 + 23) = *(void *)((char *)v13 + 7);
  *((_BYTE *)v7 + 31) = size;
  __n128 v11 = v7;
  sub_10003446C(a2);
  uint64_t v8 = v11;
  if (v11) {
LABEL_5:
  }
    (*(void (**)(void *))(*v8 + 8LL))(v8);
LABEL_6:
}

void sub_1000D7570( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8LL))(a17);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D75D8(uint64_t a1, void *a2)
{
  char v3 = (void *)(a1 + 1432);
  else {
    sub_10000AC00(__p, "Property is unavailable");
  }
  uint64_t v4 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v4 = &off_1002AE030;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)__p;
  *((void *)v4 + 3) = v6;
  __p[0] = 0LL;
  __p[1] = 0LL;
  uint64_t v6 = 0LL;
  uint64_t v7 = v4;
  sub_10003446C(a2);
  if (v7) {
    (*(void (**)(char *))(*(void *)v7 + 8LL))(v7);
  }
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000D76CC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8LL))(a15);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D770C(uint64_t a1, void *a2)
{
  char v3 = (void *)(a1 + 1448);
  else {
    sub_10000AC00(__p, "Property is unavailable");
  }
  uint64_t v4 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v4 = &off_1002AE030;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)__p;
  *((void *)v4 + 3) = v6;
  __p[0] = 0LL;
  __p[1] = 0LL;
  uint64_t v6 = 0LL;
  uint64_t v7 = v4;
  sub_10003446C(a2);
  if (v7) {
    (*(void (**)(char *))(*(void *)v7 + 8LL))(v7);
  }
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000D7800( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8LL))(a15);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D7840(_BYTE *a1, void *a2)
{
  if (a1[1600] || a1[1601] || sub_100159E98(a1 + 1592, 8LL))
  {
    __p[0] = 0LL;
    __p[1] = 0LL;
    uint64_t v8 = 0LL;
    sub_100018E8C(__p, a1 + 1592, (uint64_t)(a1 + 1600), 8uLL);
    uint64_t v4 = operator new(0x20uLL);
    sub_10001A3BC(v4, (__n128 *)__p);
    uint64_t v9 = v5;
    sub_10003446C(a2);
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
    }
    std::string v10 = __p;
    sub_100006F6C(&v10);
  }

  else
  {
    sub_10000AC00(__p, "Property is unavailable");
    uint64_t v6 = (char *)operator new(0x20uLL);
    *(void *)uint64_t v6 = &off_1002AE030;
    *(_OWORD *)(v6 + 8) = *(_OWORD *)__p;
    *((void *)v6 + 3) = v8;
    __p[0] = 0LL;
    __p[1] = 0LL;
    uint64_t v8 = 0LL;
    std::string v10 = (void **)v6;
    sub_10003446C(a2);
    if (v10) {
      (*((void (**)(void **))*v10 + 1))(v10);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }

void sub_1000D7964( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  uint64_t v18 = *(void *)(v16 - 24);
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D79D0(unsigned __int8 *a1, void *a2)
{
  if ((a1[1600] || a1[1601]) && sub_100159E98(a1 + 1592, 8LL))
  {
    v10[0] = sub_100148E4C((uint64_t)(a1 + 1592));
    v10[1] = v4;
    sub_100108154(v10, __p);
    uint64_t v5 = (char *)operator new(0x20uLL);
    *(void *)uint64_t v5 = &off_1002AE030;
    *(_OWORD *)(v5 + 8) = *(_OWORD *)__p;
    *((void *)v5 + 3) = v8;
    __p[0] = 0LL;
    __p[1] = 0LL;
    uint64_t v8 = 0LL;
    uint64_t v9 = v5;
    sub_10003446C(a2);
  }

  else
  {
    sub_10000AC00(__p, "Property is unavailable");
    uint64_t v6 = (char *)operator new(0x20uLL);
    *(void *)uint64_t v6 = &off_1002AE030;
    *(_OWORD *)(v6 + 8) = *(_OWORD *)__p;
    *((void *)v6 + 3) = v8;
    __p[0] = 0LL;
    __p[1] = 0LL;
    uint64_t v8 = 0LL;
    uint64_t v9 = v6;
    sub_10003446C(a2);
  }

  if (v9) {
    (*(void (**)(char *))(*(void *)v9 + 8LL))(v9);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000D7AF0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8LL))(a15);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D7B30(unsigned int *a1, void *a2)
{
  if ((*(unsigned int (**)(unsigned int *))(*(void *)a1 + 160LL))(a1) && !sub_1000B5104(a1[352]))
  {
    sub_10000AC00(__p, "uninitialized");
    uint64_t v5 = (char *)operator new(0x20uLL);
    *(void *)uint64_t v5 = &off_1002AE030;
    *(_OWORD *)(v5 + 8) = *(_OWORD *)__p;
    *((void *)v5 + 3) = v7;
    __p[0] = 0LL;
    __p[1] = 0LL;
    uint64_t v7 = 0LL;
    uint64_t v8 = v5;
    sub_10003446C(a2);
  }

  else
  {
    sub_1000B5130(a1[352], __p);
    uint64_t v4 = (char *)operator new(0x20uLL);
    *(void *)uint64_t v4 = &off_1002AE030;
    *(_OWORD *)(v4 + 8) = *(_OWORD *)__p;
    *((void *)v4 + 3) = v7;
    __p[0] = 0LL;
    __p[1] = 0LL;
    uint64_t v7 = 0LL;
    uint64_t v8 = v4;
    sub_10003446C(a2);
  }

  if (v8) {
    (*(void (**)(char *))(*(void *)v8 + 8LL))(v8);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000D7C30( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8LL))(a15);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D7C70(uint64_t a1, void *a2)
{
  char v3 = (char *)operator new(0x20uLL);
  *(void *)char v3 = &off_1002AE030;
  *(std::string *)(v3 + 8) = __p;
  memset(&__p, 0, sizeof(__p));
  uint64_t v5 = v3;
  sub_10003446C(a2);
  if (v5) {
    (*(void (**)(char *))(*(void *)v5 + 8LL))(v5);
  }
}

void sub_1000D7D00( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8LL))(a15);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D7D38(uint64_t a1, void *a2)
{
  v8[0] = (uint64_t)v8;
  v8[1] = (uint64_t)v8;
  v8[2] = 0LL;
  uint64_t v3 = *(void *)(a1 + 1096);
  uint64_t v7 = v3;
  uint64_t v4 = a1 + 1104;
  while (v3 != v4)
  {
    sub_1000EBBAC((void *)(v3 + 28), v3 + 48, 1, __p);
    sub_100044B24(v8, (uint64_t)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    sub_10000B338((uint64_t)&v7);
    uint64_t v3 = v7;
  }

  sub_1000731A0(__p, (uint64_t)v8);
  sub_10003446C(a2);
  if (__p[0]) {
    (*(void (**)(void *))(*(void *)__p[0] + 8LL))(__p[0]);
  }
  sub_10000C0E8(v8);
}

void sub_1000D7DFC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (__p) {
    (*(void (**)(void *))(*(void *)__p + 8LL))(__p);
  }
  sub_10000C0E8(&a17);
  _Unwind_Resume(a1);
}

void sub_1000D7E48(uint64_t a1, void *a2)
{
  v8[0] = (uint64_t)v8;
  v8[1] = (uint64_t)v8;
  v8[2] = 0LL;
  uint64_t v3 = *(void *)(a1 + 1120);
  uint64_t v7 = v3;
  uint64_t v4 = a1 + 1128;
  while (v3 != v4)
  {
    sub_1000EBE40((int *)(v3 + 48), (unsigned __int8 *)(v3 + 28), 1, __p);
    sub_100044B24(v8, (uint64_t)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    sub_10000B338((uint64_t)&v7);
    uint64_t v3 = v7;
  }

  sub_1000731A0(__p, (uint64_t)v8);
  sub_10003446C(a2);
  if (__p[0]) {
    (*(void (**)(void *))(*(void *)__p[0] + 8LL))(__p[0]);
  }
  sub_10000C0E8(v8);
}

void sub_1000D7F0C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (__p) {
    (*(void (**)(void *))(*(void *)__p + 8LL))(__p);
  }
  sub_10000C0E8(&a17);
  _Unwind_Resume(a1);
}

void sub_1000D7F58(uint64_t a1, void *a2)
{
  v17[0] = (uint64_t)v17;
  v17[1] = (uint64_t)v17;
  v17[2] = 0LL;
  uint64_t v3 = *(void *)(a1 + 1192);
  if (v3 != *(void *)(a1 + 1200))
  {
    uint64_t v5 = v3 + 48;
    do
    {
      v16[0] = 0LL;
      v16[1] = 0LL;
      uint64_t v15 = v16;
      v11.n128_u32[0] = *(_DWORD *)(v5 - 36);
      sub_10000AC00(&__p, "EnterpriseNumber");
      char v6 = sub_10000ED88(&v15, &__p);
      sub_100017F70(v6, &v11);
      if (v14 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      sub_10000AC00(&__p, "ServiceData");
      uint64_t v7 = sub_10000ED88(&v15, &__p);
      sub_10008C89C(v7, v5 - 32);
      if (v14 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      v11.n128_u8[0] = *(_BYTE *)(v5 - 8);
      sub_10000AC00(&__p, "Stable");
      uint64_t v8 = sub_10000ED88(&v15, &__p);
      sub_100020B4C(v8, &v11);
      if (v14 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      sub_10000AC00(&__p, "ServerData");
      uint64_t v9 = sub_10000ED88(&v15, &__p);
      sub_10008C89C(v9, v5);
      if (v14 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      sub_1000EB454((int *)(v5 - 40), &__p);
      sub_10000AC00(&v11, "Origin");
      std::string v10 = sub_10000ED88(&v15, &v11);
      sub_1000175B4(v10, (uint64_t)&__p);
      if (v12 < 0) {
        operator delete((void *)v11.n128_u64[0]);
      }
      if (v14 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      sub_10000D584(v17, (uint64_t *)&v15);
      v5 += 72LL;
      sub_10000D448((uint64_t)&v15);
    }

    while (v5 - 48 != *(void *)(a1 + 1200));
  }

  sub_1000737B8(&v15, (uint64_t)v17);
  sub_10003446C(a2);
  if (v15) {
    (*(void (**)(uint64_t *))(*v15 + 8))(v15);
  }
  sub_10000C178(v17);
}

void sub_1000D817C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  if (a21) {
    (*(void (**)(uint64_t))(*(void *)a21 + 8LL))(a21);
  }
  sub_10000C178(&a24);
  _Unwind_Resume(a1);
}

void sub_1000D8210(uint64_t a1, void *a2)
{
  v15[0] = (uint64_t)v15;
  v15[1] = (uint64_t)v15;
  void v15[2] = 0LL;
  v14[0] = 0LL;
  v14[1] = 0LL;
  uint64_t v13 = v14;
  uint64_t v3 = *(void *)(a1 + 1192);
  if (v3 != *(void *)(a1 + 1200))
  {
    uint64_t v5 = v3 + 48;
    do
    {
      int v12 = *(_DWORD *)(v5 - 36);
      sub_10000AC00(&__p, "EnterpriseNumber");
      char v6 = sub_10000ED88(&v13, &__p);
      sub_100017F70(v6, &v12);
      if (v11 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      sub_10000AC00(&__p, "ServiceData");
      uint64_t v7 = sub_10000ED88(&v13, &__p);
      sub_10008C89C(v7, v5 - 32);
      if (v11 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      LOBYTE(v12) = *(_BYTE *)(v5 - 8);
      sub_10000AC00(&__p, "Stable");
      uint64_t v8 = sub_10000ED88(&v13, &__p);
      sub_100020B4C(v8, &v12);
      if (v11 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      sub_10000AC00(&__p, "ServerData");
      uint64_t v9 = sub_10000ED88(&v13, &__p);
      sub_10008C89C(v9, v5);
      if (v11 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      sub_10000D584(v15, (uint64_t *)&v13);
      v5 += 72LL;
    }

    while (v5 - 48 != *(void *)(a1 + 1200));
  }

  sub_1000737B8(&__p, (uint64_t)v15);
  sub_10003446C(a2);
  if (__p.n128_u64[0]) {
    (*(void (**)(unint64_t))(*(void *)__p.n128_u64[0] + 8LL))(__p.n128_u64[0]);
  }
  sub_10000D448((uint64_t)&v13);
  sub_10000C178(v15);
}

void sub_1000D83D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (__p) {
    (*(void (**)(void *))(*(void *)__p + 8LL))(__p);
  }
  sub_10000D448((uint64_t)&a16);
  sub_10000C178(&a19);
  _Unwind_Resume(a1);
}

void sub_1000D8448(uint64_t a1, void *a2)
{
  v8[0] = (uint64_t)v8;
  v8[1] = (uint64_t)v8;
  v8[2] = 0LL;
  uint64_t v3 = *(void *)(a1 + 1048);
  uint64_t v7 = v3;
  uint64_t v4 = a1 + 1056;
  while (v3 != v4)
  {
    sub_1000EB494((void *)(v3 + 28), (int *)(v3 + 44), 1, __p);
    sub_100044B24(v8, (uint64_t)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    sub_10000B338((uint64_t)&v7);
    uint64_t v3 = v7;
  }

  sub_1000731A0(__p, (uint64_t)v8);
  sub_10003446C(a2);
  if (__p[0]) {
    (*(void (**)(void *))(*(void *)__p[0] + 8LL))(__p[0]);
  }
  sub_10000C0E8(v8);
}

void sub_1000D850C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (__p) {
    (*(void (**)(void *))(*(void *)__p + 8LL))(__p);
  }
  sub_10000C0E8(&a17);
  _Unwind_Resume(a1);
}

void sub_1000D8558(uint64_t a1, void *a2)
{
  v8[0] = (uint64_t)v8;
  v8[1] = (uint64_t)v8;
  v8[2] = 0LL;
  uint64_t v3 = *(void *)(a1 + 1072);
  uint64_t v7 = v3;
  uint64_t v4 = a1 + 1080;
  while (v3 != v4)
  {
    sub_1000EB700((void *)(v3 + 28), (int *)(v3 + 44), 1, __p);
    sub_100044B24(v8, (uint64_t)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    sub_10000B338((uint64_t)&v7);
    uint64_t v3 = v7;
  }

  sub_1000731A0(__p, (uint64_t)v8);
  sub_10003446C(a2);
  if (__p[0]) {
    (*(void (**)(void *))(*(void *)__p[0] + 8LL))(__p[0]);
  }
  sub_10000C0E8(v8);
}

void sub_1000D861C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (__p) {
    (*(void (**)(void *))(*(void *)__p + 8LL))(__p);
  }
  sub_10000C0E8(&a17);
  _Unwind_Resume(a1);
}

void sub_1000D8668(uint64_t a1, void *a2)
{
  v14[0] = (uint64_t)v14;
  v14[1] = (uint64_t)v14;
  void v14[2] = 0LL;
  uint64_t v3 = *(void *)(a1 + 1144);
  uint64_t v13 = v3;
  for (i = a1 + 1152; v13 != i; uint64_t v3 = v13)
  {
    v12[0] = 0LL;
    v12[1] = 0LL;
    char v11 = v12;
    sub_1000EB3A0((unsigned __int8 *)(v3 + 28), &v9);
    sub_10000AC00(&__p, "Address");
    uint64_t v5 = sub_10000ED88(&v11, &__p);
    sub_1000175B4(v5, (uint64_t)&v9);
    if (v8 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    if (v10 < 0) {
      operator delete((void *)v9.n128_u64[0]);
    }
    __p.n128_u32[0] = *(_DWORD *)(v13 + 48);
    sub_10000AC00(&v9, "Metric");
    char v6 = sub_10000ED88(&v11, &v9);
    sub_100017F70(v6, &__p);
    if (v10 < 0) {
      operator delete((void *)v9.n128_u64[0]);
    }
    sub_10000D584(v14, (uint64_t *)&v11);
    sub_10000D448((uint64_t)&v11);
    sub_10000B338((uint64_t)&v13);
  }

  sub_1000737B8(&v11, (uint64_t)v14);
  sub_10003446C(a2);
  if (v11) {
    (*(void (**)(uint64_t *))(*v11 + 8))(v11);
  }
  sub_10000C178(v14);
}

void sub_1000D87CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22)
{
  if (a22) {
    (*(void (**)(uint64_t))(*(void *)a22 + 8LL))(a22);
  }
  sub_10000C178((uint64_t *)(v22 - 72));
  _Unwind_Resume(a1);
}

void sub_1000D8848(uint64_t a1, void *a2)
{
  unsigned int v3 = sub_10015A044(0);
  sub_10015A044(v3);
  int v4 = (v3 >> 3) & 0x7F;
  if (v4 == 8)
  {
    uint64_t v5 = "user ";
  }

  else
  {
    if (v4 != 24) {
      goto LABEL_6;
    }
    uint64_t v5 = "daemon ";
  }

  std::string::append(&v7, v5);
LABEL_6:
  if ((v3 & 1) != 0) {
    std::string::append(&v7, "emerg ");
  }
  if ((v3 & 2) != 0) {
    std::string::append(&v7, "alert ");
  }
  if ((v3 & 4) != 0) {
    std::string::append(&v7, "crit ");
  }
  if ((v3 & 8) != 0) {
    std::string::append(&v7, "err ");
  }
  if ((v3 & 0x10) != 0) {
    std::string::append(&v7, "warning ");
  }
  if ((v3 & 0x20) != 0) {
    std::string::append(&v7, "notice ");
  }
  if ((v3 & 0x40) != 0) {
    std::string::append(&v7, "info ");
  }
  if ((v3 & 0x80) != 0) {
    std::string::append(&v7, "debug ");
  }
  sub_100030134(&v6, &v7);
  sub_10003446C(a2);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
}

void sub_1000D899C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8LL))(a9);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D89D8(uint64_t a1, void *a2)
{
  char v3 = *(_BYTE *)(a1 + 1405);
  int v4 = operator new(0x10uLL);
  *(void *)int v4 = &off_1002AEA00;
  _BYTE v4[8] = v3;
  uint64_t v6 = v4;
  sub_10003446C(a2);
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*(void *)v6 + 8LL))(v6);
  }
  return result;
}

void sub_1000D8A40( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D8A60(uint64_t a1, void *a2)
{
  char v3 = *(_BYTE *)(a1 + 1406);
  int v4 = operator new(0x10uLL);
  *(void *)int v4 = &off_1002AEA00;
  _BYTE v4[8] = v3;
  uint64_t v6 = v4;
  sub_10003446C(a2);
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*(void *)v6 + 8LL))(v6);
  }
  return result;
}

void sub_1000D8AC8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D8AE8(uint64_t a1, void *a2)
{
  int v4 = operator new(0x10uLL);
  *(void *)int v4 = &off_1002AE1C8;
  v4[2] = *(_DWORD *)(a1 + 1392);
  uint64_t v6 = v4;
  sub_10003446C(a2);
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*(void *)v6 + 8LL))(v6);
  }
  return result;
}

void sub_1000D8B54( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D8B74(uint64_t a1, std::string *__str, uint64_t *a3)
{
  uint64_t v6 = a1 + 88;
  sub_1000D5FC8(__str, &v16);
  uint64_t v7 = sub_1000AA160(v6, (const void **)&v16.__r_.__value_.__l.__data_);
  if (a1 + 96 != v7)
  {
    v15[0] = 0LL;
    sub_100007640((uint64_t)v15, a3);
    sub_1000D8D88(v7 + 56, v15);
    char v8 = v15;
LABEL_7:
    sub_100006E7C(v8);
    return;
  }

  if (sub_10010BF0C((const char *)__str))
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    v14[0] = 0LL;
    sub_100007640((uint64_t)v14, a3);
    sub_10010CB20(v9, __str, v14);
    char v8 = v14;
    goto LABEL_7;
  }

  char v10 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v10)
  {
    char v11 = v10;
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  sub_10000AC00(&v16, "Property Not Found");
  int v12 = (char *)operator new(0x20uLL);
  *(void *)int v12 = &off_1002AE030;
  *(std::string *)(v12 + 8) = v16;
  memset(&v16, 0, sizeof(v16));
  uint64_t v13 = v12;
  sub_10003446C(a3);
  if (v13) {
    (*(void (**)(char *))(*(void *)v13 + 8LL))(v13);
  }
}

void sub_1000D8D30( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8LL))(a9);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000D8D88(uint64_t a1, uint64_t *a2)
{
  char v3 = (void *)(a1 + 24);
  v5[0] = 0LL;
  sub_100007640((uint64_t)v5, a2);
  sub_1000583E4(v3, v5, a1);
  return sub_100006E7C(v5);
}

void sub_1000D8DD4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000D8DE8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1408);
}

void sub_1000D8DF0(uint64_t a1, char *a2, uint64_t *a3)
{
  uint64_t v6 = sub_1000D8F20((uint64_t **)(a1 + 112), &v10);
  sub_100014D08((uint64_t)v6, (__int128 *)&__p);
  sub_1000DC268(v6 + 3, v9);
  sub_100071048(v9);
}

void sub_1000D8EC8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000D8F20(uint64_t **a1, std::string *a2)
{
  char v3 = a2;
  return sub_1000E05AC(a1, (const void **)&a2->__r_.__value_.__l.__data_, (uint64_t)&unk_100228867, &v3) + 7;
}

uint64_t sub_1000D8F54(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000D8F8C(uint64_t a1, uint64_t *a2, void *a3)
{
  *(_BYTE *)(a1 + 1376) = sub_1001478B8(a2);
  return sub_100006FF8(a3);
}

uint64_t sub_1000D8FC0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  BOOL v5 = sub_1001478B8(a2);
  if (v5 == sub_10011F1B8(*(void *)(a1 + 184))) {
    return sub_100006FF8(a3);
  }
  if (v5)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
    v12[0] = 0LL;
    __n128 v7 = sub_100007640((uint64_t)v12, a3);
    (*(void (**)(uint64_t, void *, __n128))(*(void *)v6 + 32LL))(v6, v12, v7);
    char v8 = v12;
  }

  else
  {
    uint64_t result = sub_1000B50F4(*(_DWORD *)(a1 + 1408));
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
    v11[0] = (char *)off_1002AED78 + 1;
    (*(void (**)(uint64_t, void *))(*(void *)v10 + 40LL))(v10, v11);
    char v8 = v11;
  }

  return (uint64_t)sub_1000075F0(v8);
}

void sub_1000D90B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000D90D0(uint64_t a1, uint64_t *a2, void *a3)
{
  *(_BYTE *)(a1 + 1379) = sub_1001478B8(a2);
  return sub_100006FF8(a3);
}

uint64_t sub_1000D9104(uint64_t a1, uint64_t *a2, void *a3)
{
  *(_WORD *)(a1 + 1388) = sub_1001472F4(a2);
  return sub_100006FF8(a3);
}

uint64_t sub_1000D9138(_BYTE *a1, uint64_t *a2, void *a3)
{
  BOOL v5 = sub_1001478B8(a2);
  BOOL v6 = v5;
  if (v5 && !a1[1378])
  {
    int v7 = *((_DWORD *)a1 + 352);
    if (v7)
    {
      if (v7 == 1)
      {
        char v8 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v8)
        {
          uint64_t v9 = v8;
          goto LABEL_18;
        }

        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          goto LABEL_17;
        }
        goto LABEL_18;
      }

      if ((*(unsigned int (**)(_BYTE *, _BYTE *))(*(void *)a1 + 264LL))(a1, a1 + 1352))
      {
        unsigned int v17 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v17)
        {
          uint64_t v18 = v17;
          if (sub_10015A058(5) && os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)uint64_t v20 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "NCP FIRMWARE UPGRADE IS REQUIRED",  v20,  2u);
          }

          goto LABEL_18;
        }

        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
LABEL_17:
        }
          sub_1001FB53C();
LABEL_18:
        (*(void (**)(_BYTE *))(*(void *)a1 + 272LL))(a1);
      }
    }
  }

  a1[1378] = v6;
  return sub_100006FF8(a3);
}

uint64_t sub_1000D92A8(uint64_t a1, uint64_t *a2, void *a3)
{
  *(_BYTE *)(a1 + 1377) = sub_1001478B8(a2);
  uint64_t result = sub_100006FF8(a3);
  if (*(_BYTE *)(a1 + 1377))
  {
    if (*(_DWORD *)(a1 + 1408) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
    }
  }

  return result;
}

uint64_t sub_1000D930C(uint64_t a1, uint64_t *a2, void *a3)
{
  *(_BYTE *)(a1 + 1396) = sub_1001478B8(a2);
  return sub_100006FF8(a3);
}

uint64_t sub_1000D9340(uint64_t a1, uint64_t *a2, void *a3)
{
  *(_BYTE *)(a1 + 1397) = sub_1001478B8(a2);
  return sub_100006FF8(a3);
}

uint64_t sub_1000D9374(uint64_t a1, uint64_t *a2, void *a3)
{
  *(_BYTE *)(a1 + 1398) = sub_1001478B8(a2);
  return sub_100006FF8(a3);
}

uint64_t sub_1000D93A8(uint64_t a1, uint64_t *a2, void *a3)
{
  *(_BYTE *)(a1 + 1400) = sub_1001478B8(a2);
  return sub_100006FF8(a3);
}

uint64_t sub_1000D93DC(uint64_t a1, uint64_t *a2, void *a3)
{
  *(_BYTE *)(a1 + 1401) = sub_1001478B8(a2);
  return sub_100006FF8(a3);
}

uint64_t sub_1000D9410(uint64_t a1, uint64_t *a2, void *a3)
{
  *(_BYTE *)(a1 + 1402) = sub_1001478B8(a2);
  return sub_100006FF8(a3);
}

uint64_t sub_1000D9444(uint64_t a1, uint64_t *a2, void *a3)
{
  *(_BYTE *)(a1 + 1403) = sub_1001478B8(a2);
  return sub_100006FF8(a3);
}

uint64_t sub_1000D9478(uint64_t a1, uint64_t *a2, void *a3)
{
  *(_BYTE *)(a1 + 1404) = sub_1001478B8(a2);
  return sub_100006FF8(a3);
}

void sub_1000D94AC(uint64_t a1, uint64_t *a2, void *a3)
{
  if (*(int *)(a1 + 1408) > 4)
  {
    sub_100006FF8(a3);
    return;
  }

  uint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  uint64_t v14 = 0LL;
  BOOL v6 = sub_10000BD6C(a2);
  {
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    sub_100147B4C(a2, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    int v8 = inet_pton(30, (const char *)p_p, &v16);
    if (v8 <= 0)
    {
      sub_100006FF8(a3);
    }

    else
    {
      __n128 v9 = 0uLL;
      uint64_t v10 = 0LL;
      sub_100018E8C(&v9, &v16, (uint64_t)&v17, 8uLL);
      sub_100006EFC((uint64_t)&v12, &v9);
      uint64_t v15 = &v9;
      sub_100006F6C((void ***)&v15);
    }

    if (v8 <= 0) {
      goto LABEL_17;
    }
  }

  else
  {
    sub_100147058(a2, (uint64_t)&__p);
    sub_100006EFC((uint64_t)&v12, (__n128 *)&__p);
    v9.n128_u64[0] = (unint64_t)&__p;
    sub_100006F6C((void ***)&v9);
  }

  *(void *)(a1 + 1432) = *v12;
  sub_100006FF8(a3);
LABEL_17:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  sub_100006F6C((void ***)&__p);
}

void sub_1000D967C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::string __p = &a19;
  sub_100006F6C((void ***)&__p);
  _Unwind_Resume(a1);
}

void *sub_1000D96BC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  v6[0] = 0LL;
  sub_100007640((uint64_t)v6, a3);
  sub_1000D94AC(a1, a2, v6);
  return sub_1000075F0(v6);
}

void sub_1000D970C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1000D9720(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  BOOL v5 = sub_1001478B8(a2);
  *(_BYTE *)(a1 + 1380) = v5;
  if (v5 || *(_DWORD *)(a1 + 1408) != 3 || !*(_BYTE *)(a1 + 1376)) {
    return (void *)sub_100006FF8(a3);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
  v8[0] = 0LL;
  sub_100007640((uint64_t)v8, a3);
  sub_1000456D0(v8, 0, (uint64_t)v9);
  sub_10004C720(v10, (uint64_t)v9);
  (*(void (**)(uint64_t, uint64_t (***)()))(*(void *)v6 + 48LL))(v6, v10);
  sub_1000075F0(v10);
  sub_1000075F0(v9);
  return sub_1000075F0(v8);
}

void sub_1000D97F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_1000075F0((void *)(v2 - 48));
  sub_1000075F0((uint64_t *)va1);
  sub_1000075F0((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D9828(uint64_t a1, uint64_t *a2, void *a3)
{
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  sub_10010FFCC("Daemon:PromiscuousPcap", (char *)p_p);
  *(_BYTE *)(a1 + 1405) = sub_1001478B8(a2);
  return sub_100006FF8(a3);
}

void sub_1000D98B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D98CC(uint64_t a1, uint64_t *a2, void *a3)
{
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  sub_10010FFCC("Daemon:PromiscuousModeNetwork", (char *)p_p);
  *(_BYTE *)(a1 + 1406) = sub_1001478B8(a2);
  return sub_100006FF8(a3);
}

void sub_1000D9954( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D9970(uint64_t a1, uint64_t *a2, void *a3)
{
  *(_DWORD *)(a1 + 1392) = sub_1001476B4(a2, 0);
  sub_100147B4C(a2, &__p);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  sub_10010FFCC("Daemon:VirtualInterface:ReadBufferSize", (char *)p_p);
  return sub_100006FF8(a3);
}

void sub_1000D99FC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000D9A18(_BYTE *a1, std::string *__str, uint64_t *a3, uint64_t *a4)
{
  if (!a1[1376])
  {
    uint64_t v10 = (__str->__r_.__value_.__s.__size_ & 0x80u) == 0 ? __str : (std::string *)__str->__r_.__value_.__r.__words[0];
  }

  sub_1000D5FC8(__str, &__p);
  uint64_t v8 = sub_1000AA160((uint64_t)(a1 + 112), (const void **)&__p.__r_.__value_.__l.__data_);
  if (a1 + 120 != (_BYTE *)v8)
  {
    v15[0] = 0LL;
    sub_100007640((uint64_t)v15, a4);
    sub_1000D9D54(v8 + 56, (uint64_t)a3, v15);
    __n128 v9 = v15;
    return sub_1000075F0(v9);
  }

  if (sub_10010BF0C((const char *)__str))
  {
    uint64_t v12 = (*(uint64_t (**)(_BYTE *))(*(void *)a1 + 32LL))(a1);
    v14[0] = 0LL;
    sub_100007640((uint64_t)v14, a4);
    sub_10010D39C(v12, __str, a3, v14);
    __n128 v9 = v14;
    return sub_1000075F0(v9);
  }

  uint64_t v13 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v13)
  {
    if (sub_10015A058(3))
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        sub_10020DAB8();
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  return (void *)sub_100006FF8(a4);
}

void sub_1000D9BC0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a2 == 2)
  {
    uint64_t v27 = __cxa_begin_catch(a1);
    uint64_t v28 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v28)
    {
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }
  }

  else
  {
    if (a2 != 1) {
      _Unwind_Resume(a1);
    }
    char v29 = __cxa_begin_catch(a1);
    unsigned int v30 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v30)
    {
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }
  }

  sub_100006FF8(v23);
  __cxa_end_catch();
  JUMPOUT(0x1000D9B34LL);
}

void *sub_1000D9D54(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  BOOL v5 = (void *)(a1 + 24);
  v7[0] = 0LL;
  sub_100007640((uint64_t)v7, a3);
  sub_100060418(v5, a2, v7, a1);
  return sub_1000075F0(v7);
}

void sub_1000D9DB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D9DC8(uint64_t a1, char *a2, uint64_t *a3)
{
  uint64_t v6 = sub_1000D8F20((uint64_t **)(a1 + 136), &v10);
  sub_100014D08((uint64_t)v6, (__int128 *)&__p);
  sub_1000DC268(v6 + 3, v9);
  sub_100071048(v9);
}

void sub_1000D9EA0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000D9EF8(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  v8.n128_u64[0] = sub_1001474A0(a2);
  v8.n128_u64[1] = v5;
  v7[0] = 0LL;
  sub_100007640((uint64_t)v7, a3);
  sub_1000EF6BC(a1, 2, &v8, v7);
  return sub_1000075F0(v7);
}

void sub_1000D9F58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1000D9F6C(uint64_t a1, std::string *__str, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = sub_1000AA160(a1 + 136, (const void **)&__p.__r_.__value_.__l.__data_);
  if (a1 + 144 == v7)
  {
    __n128 v9 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v9)
    {
      if (sub_10015A058(3))
      {
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
          sub_10020DB18();
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    return (void *)sub_100006FF8(a4);
  }

  else
  {
    v10[0] = 0LL;
    sub_100007640((uint64_t)v10, a4);
    sub_1000D9D54(v7 + 56, a3, v10);
    return sub_1000075F0(v10);
  }

void sub_1000DA080( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a2 == 2)
  {
    uint64_t v21 = __cxa_begin_catch(exception_object);
    uint64_t v22 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v22)
    {
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }
  }

  else
  {
    if (a2 != 1) {
      _Unwind_Resume(exception_object);
    }
    uint64_t v23 = __cxa_begin_catch(exception_object);
    uint64_t v24 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v24)
    {
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }
  }

  sub_100006FF8(v19);
  __cxa_end_catch();
  JUMPOUT(0x1000DA060LL);
}

void sub_1000DA204(uint64_t a1, char *a2, uint64_t *a3)
{
  uint64_t v6 = sub_1000D8F20((uint64_t **)(a1 + 160), &v10);
  sub_100014D08((uint64_t)v6, (__int128 *)&__p);
  sub_1000DC268(v6 + 3, v9);
  sub_100071048(v9);
}

void sub_1000DA2DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000DA334(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  v8.n128_u64[0] = sub_1001474A0(a2);
  v8.n128_u64[1] = v5;
  v7[0] = 0LL;
  sub_100007640((uint64_t)v7, a3);
  sub_1000EF25C(a1, 2, &v8, v7);
  return sub_1000075F0(v7);
}

void sub_1000DA394( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1000DA3A8(uint64_t a1, std::string *__str, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = sub_1000AA160(a1 + 160, (const void **)&__p.__r_.__value_.__l.__data_);
  if (a1 + 168 == v7)
  {
    __n128 v9 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v9)
    {
      if (sub_10015A058(3))
      {
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
          sub_10020DB78();
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    return (void *)sub_100006FF8(a4);
  }

  else
  {
    v10[0] = 0LL;
    sub_100007640((uint64_t)v10, a4);
    sub_1000D9D54(v7 + 56, a3, v10);
    return sub_1000075F0(v10);
  }

void sub_1000DA4BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a2 == 2)
  {
    uint64_t v21 = __cxa_begin_catch(exception_object);
    uint64_t v22 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v22)
    {
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }
  }

  else
  {
    if (a2 != 1) {
      _Unwind_Resume(exception_object);
    }
    uint64_t v23 = __cxa_begin_catch(exception_object);
    uint64_t v24 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v24)
    {
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }
  }

  sub_100006FF8(v19);
  __cxa_end_catch();
  JUMPOUT(0x1000DA49CLL);
}

uint64_t *sub_1000DA640(uint64_t a1, pthread_mutex_t *a2, pthread_mutex_t *a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1) + 104;
  return sub_1000DA678(v5, a2, a3);
}

uint64_t *sub_1000DA678(uint64_t a1, pthread_mutex_t *a2, pthread_mutex_t *a3)
{
  return sub_1000E08FC(*(void *)(a1 + 8), a2, a3);
}

uint64_t sub_1000DA680(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 1412) != a2)
  {
    uint64_t v2 = result;
    *(_BYTE *)(result + 1412) = a2;
    if (a2)
    {
      sub_1000DA700(result, 0LL);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 104LL))(v2, 1LL);
    }

    else if (*(_DWORD *)(result + 1408) >= 3u)
    {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 136LL))(result);
    }
  }

  return result;
}

void sub_1000DA700(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 1408);
  if ((_DWORD)v2 == (_DWORD)a2) {
    return;
  }
  BOOL v5 = sub_1000B5104(*(_DWORD *)(a1 + 1408));
  uint64_t v6 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  uint64_t v7 = v6;
  if (!(_DWORD)a2 || !v5)
  {
    if (v6)
    {
      if (sub_10015A058(5) && os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        sub_1000B5130(v2, v18);
        int v12 = v19;
        uint64_t v13 = (void **)v18[0];
        sub_1000B5130(a2, __p);
        uint64_t v14 = v18;
        if (v12 < 0) {
          uint64_t v14 = v13;
        }
        if (v17 >= 0) {
          uint64_t v15 = __p;
        }
        else {
          uint64_t v15 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136315394;
        uint64_t v21 = v14;
        __int16 v22 = 2080;
        uint64_t v23 = v15;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "State change: %s -> %s", buf, 0x16u);
        if (v17 < 0) {
          operator delete(__p[0]);
        }
        if (v19 < 0) {
          operator delete(v18[0]);
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    goto LABEL_34;
  }

  if (v6)
  {
    if (sub_10015A058(4) && os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      sub_1000B5130(v2, v18);
      int v8 = v19;
      __n128 v9 = (void **)v18[0];
      sub_1000B5130(a2, __p);
      std::string v10 = v18;
      if (v8 < 0) {
        std::string v10 = v9;
      }
      if (v17 >= 0) {
        uint64_t v11 = __p;
      }
      else {
        uint64_t v11 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v21 = v10;
      __int16 v22 = 2080;
      uint64_t v23 = v11;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "BUG: Invalid state change: %s -> %s",  buf,  0x16u);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
      if (v19 < 0) {
        operator delete(v18[0]);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  if (!sub_1000B5104(*(_DWORD *)(a1 + 1408)))
  {
LABEL_34:
    *(_DWORD *)(a1 + 1408) = a2;
  }

void sub_1000DA998( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000DA9C0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1412);
}

std::string *sub_1000DA9C8(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 56), a2);
}

void sub_1000DA9D0( uint64_t a1, const std::string *a2, const std::string *a3, const std::string *a4, uint64_t a5, char a6)
{
  if ((a6 & 1) == 0) {
    std::string::assign(&__str, "ABSENT");
  }
  std::string::basic_string(&v17, &__str);
  std::string::basic_string(&v16, (const std::string *)(a1 + 56));
  std::string::basic_string(&v15, &v18);
  std::string::basic_string(&v14, a2);
  std::string::basic_string(&v13, a3);
  std::string::basic_string(&__p, a4);
  sub_1000E892C( (const std::string::value_type *)&v17,  (uint64_t)&v16,  (uint64_t)&v15,  (uint64_t *)&v14,  (uint64_t *)&v13,  (const std::string::value_type *)&__p,  a5);
}

void sub_1000DAB30( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, void *a27, uint64_t a28, int a29, __int16 a30, char a31, char a32, void *a33, uint64_t a34, int a35, __int16 a36, char a37, char a38, void *a39, uint64_t a40, int a41, __int16 a42, char a43, char a44)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000DABF4(uint64_t a1, int a2)
{
  BOOL v3 = !sub_1000B5104(*(_DWORD *)(a1 + 1408));
  return !a2 || v3;
}

void sub_1000DAC24(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (sub_1000B5104(a3) && !sub_1000B5104(a2))
  {
    if (a2)
    {
      uint64_t v6 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v6)
      {
        uint64_t v7 = v6;
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }
    }

    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 104LL))(a1, 1LL);
    if (*(void *)(a1 + 1696)) {
      (*(void (**)(uint64_t))(*(void *)a1 + 96LL))(a1);
    }
    (*(void (**)(void))(**(void **)(a1 + 216) + 104LL))(*(void *)(a1 + 216));
    *(_WORD *)(a1 + 40) = 0;
LABEL_18:
    if ((sub_1000B50B8(a3) & 1) != 0 || (sub_1000B50B8(a2) & 1) == 0)
    {
      int v9 = sub_1000B50B8(a3);
      if (a2 == 5 && v9 && *(_BYTE *)(a1 + 1379) && *(_BYTE *)(a1 + 1376)) {
        return;
      }
      if (sub_1000B50D0(a3)
        && (sub_1000B50D0(a2) & 1) == 0
        && !sub_1000B50A8(a2)
        && (BOOL v10 = sub_1000B5088(a2), a2)
        && !v10
        || a2 == 4 && !a3)
      {
        sub_1001130E0(a1);
        goto LABEL_45;
      }

      if (!sub_1000B50B8(a3) || (char v11 = sub_1000B50B8(a2), a2 == 10) || (v11 & 1) != 0)
      {
LABEL_44:
        if (!a2)
        {
LABEL_56:
          sub_100101794((int *)(a1 + 1768), a2, a3);
          return;
        }

LABEL_45:
        sub_10000AC00(buf, "NCP:State");
        sub_1000B5130(a2, __p);
        std::string v14 = (char *)operator new(0x20uLL);
        *(void *)std::string v14 = &off_1002AE030;
        *(_OWORD *)(v14 + 8) = *(_OWORD *)__p;
        *((void *)v14 + 3) = v17;
        __p[0] = 0LL;
        __p[1] = 0LL;
        uint64_t v17 = 0LL;
        std::string v18 = v14;
        (*(void (**)(uint64_t, uint8_t *, char **))(*(void *)a1 + 360LL))(a1, buf, &v18);
        if (v18) {
          (*(void (**)(char *))(*(void *)v18 + 8LL))(v18);
        }
        if (SHIBYTE(v17) < 0) {
          operator delete(__p[0]);
        }
        if (v20 < 0) {
          operator delete(*(void **)buf);
        }
        if (a2 == 8)
        {
          sub_10000AC00(buf, "NCP:Channel");
          std::string v15 = operator new(0x10uLL);
          *(void *)std::string v15 = &off_1002AE118;
          v15[8] = *(_BYTE *)(a1 + 1498);
          __p[0] = v15;
          (*(void (**)(uint64_t, uint8_t *, void **))(*(void *)a1 + 360LL))(a1, buf, __p);
          if (__p[0]) {
            (*(void (**)(void *))(*(void *)__p[0] + 8LL))(__p[0]);
          }
          if (v20 < 0) {
            operator delete(*(void **)buf);
          }
        }

        goto LABEL_56;
      }

      int v12 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v12)
      {
        std::string v13 = v12;
        if (sub_10015A058(5) && os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Taking interface(s) down. . .", buf, 2u);
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }

      *(_BYTE *)(a1 + 1499) = 0;
      sub_1001131C8(a1, 0, 0, 0);
      int v8 = 0;
    }

    else
    {
      int v8 = 1;
    }

    sub_100112AB8(a1, v8);
    goto LABEL_44;
  }

  if (sub_1000B5104(a3) || !sub_1000B5104(a2)) {
    goto LABEL_18;
  }
  (*(void (**)(void))(**(void **)(a1 + 216) + 128LL))(*(void *)(a1 + 216));
  *(_WORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(void *)(a1 + 1040) = 0LL;
  sub_10011D8C0(a1 + 640);
  *(_OWORD *)(a1 + 232) = 0u;
  *(void *)(a1 + 632) = 0LL;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  sub_10011D8C0(a1 + 232);
  *(_DWORD *)(a1 + 1524) = 0;
  if (a2 == 1)
  {
    (*(void (**)(uint64_t, void))(*(void *)a1 + 104LL))(a1, 0LL);
    if (*(_BYTE *)(a1 + 1377)) {
      sub_1000EA7AC(a1, 1);
    }
  }

          sub_10010BB04(a1, a3);
          return 0LL;
        }

void sub_1000DB080( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a9) {
    (*(void (**)(void *))(*(void *)a9 + 8LL))(a9);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000DB0F0(uint64_t a1)
{
  *(_WORD *)(a1 + 40) = 0;
  sub_1000DA700(a1, 0LL);
}

uint64_t *sub_1000DB100(uint64_t a1, pthread_mutex_t *a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1) + 56;
  return sub_1000DB130(v3, a2);
}

uint64_t *sub_1000DB130(uint64_t a1, pthread_mutex_t *a2)
{
  return sub_1000E119C(*(void *)(a1 + 8), a2);
}

uint64_t *sub_1000DB138(uint64_t a1, pthread_mutex_t *a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1) + 80;
  return sub_1000DB168(v3, a2);
}

uint64_t *sub_1000DB168(uint64_t a1, pthread_mutex_t *a2)
{
  return sub_1000E19C0(*(void *)(a1 + 8), a2);
}

uint64_t sub_1000DB174(_DWORD *a1)
{
  unsigned int v2 = a1[352];
  unsigned int v3 = sub_1000B5114(v2);
  if (v2 == 1) {
    return 0LL;
  }
  return v3;
}

uint64_t sub_1000DB1EC(uint64_t a1)
{
  return a1 + 1776;
}

void sub_1000DB1F4(uint64_t a1)
{
  __darwin_time_t v2 = sub_10014314C();
  int v3 = *(unsigned __int8 *)(a1 + 1738);
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 296LL))(a1);
  char v5 = *(_BYTE *)(a1 + 1738);
  if (v3 == v4)
  {
    if (!*(_BYTE *)(a1 + 1738)) {
      return;
    }
    uint64_t v6 = *(void *)(a1 + 1744);
    if (!v6) {
      return;
    }
    BOOL v7 = __OFSUB__(v2, v6);
    __darwin_time_t v8 = v2 - v6;
    if (!v7)
    {
      if ((unint64_t)(v8 - 180001) <= 0x18B81E)
      {
        int v9 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v9)
        {
          BOOL v10 = v9;
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FB53C();
        }

        (*(void (**)(uint64_t))(*(void *)a1 + 304LL))(a1);
        if (*(_DWORD *)(a1 + 1408) != 7)
        {
          sub_10000AC00(v30, "Performance");
          sub_10000AC00(v28, "Data Stall");
          sub_10000AC00(__p, "Experiencing extended insomnia");
          (*(void (**)(uint64_t, void **, void **, void **, void, uint64_t))(*(void *)a1 + 72LL))( a1,  v30,  v28,  __p,  0LL,  1LL);
          if (v27 < 0) {
            operator delete(__p[0]);
          }
          if (v29 < 0) {
            operator delete(v28[0]);
          }
          if (v31 < 0) {
            operator delete(v30[0]);
          }
        }

        *(void *)(a1 + 1744) = v2;
        (*(void (**)(uint64_t))(*(void *)a1 + 144LL))(a1);
      }

      return;
    }

void sub_1000DB650( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000DB6DC(uint64_t result)
{
  *(_BYTE *)(result + 1752) = 1;
  return result;
}

uint64_t sub_1000DB6E8(uint64_t a1, _BYTE *a2)
{
  return sub_1001009D0(a1 + 1756, a2);
}

void sub_1000DB6F0(_DWORD *a1)
{
}

uint64_t sub_1000DB72C(uint64_t a1)
{
  return sub_100101564((unsigned int *)(a1 + 1756));
}

BOOL sub_1000DB734(uint64_t a1)
{
  return sub_100101554(a1 + 1756);
}

void *sub_1000DB73C(void *a1)
{
  *a1 = off_1002B2380;
  __darwin_time_t v2 = (uint64_t *)operator new(0x28uLL);
  sub_1000DB834(v2);
  sub_1000DBEAC(a1 + 1, (uint64_t)v2);
  return a1;
}

void sub_1000DB79C(_Unwind_Exception *a1)
{
}

void *sub_1000DB7B0(void *a1)
{
  *a1 = off_1002B2380;
  sub_10000F9EC(a1 + 2);
  return a1;
}

void sub_1000DB7E0(uint64_t *a1)
{
  *a1 = (uint64_t)off_1002B2380;
  sub_10000F9EC(a1 + 2);
  operator delete(a1);
}

uint64_t sub_1000DB810@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    int v3 = (unsigned int *)(v2 + 8);
    do
      unsigned int v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

uint64_t *sub_1000DB834(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)operator new(0x20uLL);
  v5[0] = (uint64_t)v5;
  v5[1] = (uint64_t)v5;
  v7[0] = 0LL;
  v7[1] = 0LL;
  v5[2] = 0LL;
  uint64_t v6 = v7;
  sub_1000DB9C0(v2, (uint64_t)v5);
  sub_1000DBD70(a1, (uint64_t)v2);
  sub_10000D0D4((uint64_t)&v6);
  sub_1000DB960(v5);
  a1[2] = *(void *)*a1;
  int v3 = (pthread_mutex_t *)operator new(0x40uLL);
  pthread_mutex_init(v3, 0LL);
  sub_100049FA8(a1 + 3, (uint64_t)v3);
  return a1;
}

void sub_1000DB8DC(_Unwind_Exception *a1)
{
  int v3 = v2;
  operator delete(v3);
  sub_10000F9EC((uint64_t *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1000DB930(uint64_t *a1)
{
  return a1;
}

void sub_1000DB960(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    uint64_t v2 = (uint64_t *)a1[1];
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v3 + 8) = v4;
    a1[2] = 0LL;
    while (v2 != a1)
    {
      char v5 = (uint64_t *)v2[1];
      sub_100010A14((uint64_t)a1, v2);
      uint64_t v2 = v5;
    }
  }

uint64_t *sub_1000DB9C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = operator new(0x40uLL);
  sub_1000DBA48((uint64_t)v4, a2);
  sub_1000DBBFC(a1, (uint64_t)v4);
  char v5 = operator new(1uLL);
  sub_100049E98(a1 + 2, (uint64_t)v5);
  return a1;
}

void sub_1000DBA20(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DBA48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000DBB48((uint64_t *)a1, a2);
  sub_1000DBBB4((uint64_t)(v4 + 3), (uint64_t *)(a2 + 24));
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = 0LL;
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v12 = v6;
  while (v6 != a2 + 32)
  {
    *(void *)(v11 + 48) = v5;
    uint64_t v7 = sub_100010820(a2, (uint64_t)&v12);
    uint64_t v10 = v12;
    sub_10000B338((uint64_t)&v10);
    uint64_t v8 = sub_100010820(a2, (uint64_t)&v10);
    while (v7 != v8)
    {
      uint64_t v7 = *(void *)(v7 + 8);
      uint64_t v5 = *(void *)(v5 + 8);
    }

    sub_10000B338((uint64_t)&v12);
    sub_10000B338((uint64_t)&v11);
    uint64_t v6 = v12;
  }

  return a1;
}

void sub_1000DBB20(_Unwind_Exception *a1)
{
}

uint64_t *sub_1000DBB48(uint64_t *a1, uint64_t a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
    sub_1000108A4(a1, (void *)(i + 16));
  return a1;
}

void sub_1000DBBA0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000DBBB4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_100010AEC(a1, (uint64_t)a2);
  sub_100010A84(v4, *a2, (uint64_t)(a2 + 1));
  return a1;
}

void sub_1000DBBE8(_Unwind_Exception *a1)
{
}

uint64_t *sub_1000DBBFC(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0LL;
  sub_1000DBC64(&v5, a2);
  uint64_t v3 = a1[1];
  a1[1] = v5;
  uint64_t v5 = v3;
  sub_10000F9EC(&v5);
  return a1;
}

void sub_1000DBC50(_Unwind_Exception *a1)
{
}

void *sub_1000DBC64(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  uint64_t v4 = operator new(0x18uLL);
  v4[1] = 0x100000001LL;
  *uint64_t v4 = &off_1002B23F0;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1000DBCB0(void *a1)
{
}

void sub_1000DBCC4(_Unwind_Exception *a1)
{
}

void sub_1000DBCD8(uint64_t *a1)
{
  if (a1)
  {
    sub_10000D0D4((uint64_t)(a1 + 3));
    sub_1000DB960(a1);
    operator delete(a1);
  }

void sub_1000DBD18(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    sub_10000D0D4((uint64_t)(v1 + 3));
    sub_1000DB960(v1);
    operator delete(v1);
  }

uint64_t sub_1000DBD58()
{
  return 0LL;
}

uint64_t sub_1000DBD60()
{
  return 0LL;
}

uint64_t sub_1000DBD68()
{
  return 0LL;
}

uint64_t *sub_1000DBD70(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0LL;
  sub_1000DBDD8(&v5, a2);
  uint64_t v3 = a1[1];
  a1[1] = v5;
  uint64_t v5 = v3;
  sub_10000F9EC(&v5);
  return a1;
}

void sub_1000DBDC4(_Unwind_Exception *a1)
{
}

void *sub_1000DBDD8(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  uint64_t v4 = operator new(0x18uLL);
  v4[1] = 0x100000001LL;
  *uint64_t v4 = &off_1002B2450;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1000DBE24(void *a1)
{
}

void sub_1000DBE38(_Unwind_Exception *a1)
{
}

void sub_1000DBE54(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    sub_10000F9EC(v1 + 3);
    sub_10000F9EC(v1 + 1);
    operator delete(v1);
  }

uint64_t sub_1000DBE94()
{
  return 0LL;
}

uint64_t sub_1000DBE9C()
{
  return 0LL;
}

uint64_t sub_1000DBEA4()
{
  return 0LL;
}

uint64_t *sub_1000DBEAC(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0LL;
  sub_1000DBF14(&v5, a2);
  uint64_t v3 = a1[1];
  a1[1] = v5;
  uint64_t v5 = v3;
  sub_10000F9EC(&v5);
  return a1;
}

void sub_1000DBF00(_Unwind_Exception *a1)
{
}

void *sub_1000DBF14(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  uint64_t v4 = operator new(0x18uLL);
  v4[1] = 0x100000001LL;
  *uint64_t v4 = &off_1002B24B0;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1000DBF60(void *a1)
{
}

void sub_1000DBF74(_Unwind_Exception *a1)
{
}

void sub_1000DBF90(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    sub_10000F9EC(v1 + 4);
    sub_10000F9EC(v1 + 1);
    operator delete(v1);
  }

uint64_t sub_1000DBFD0()
{
  return 0LL;
}

uint64_t sub_1000DBFD8()
{
  return 0LL;
}

uint64_t sub_1000DBFE0()
{
  return 0LL;
}

void *sub_1000DBFE8(void *a1)
{
  return a1;
}

void *sub_1000DC010(void *a1)
{
  return a1;
}

void *sub_1000DC038(void *a1)
{
  return a1;
}

std::string *sub_1000DC060(std::string *a1, const std::string *a2, uint64_t *a3)
{
  uint64_t v5 = std::string::basic_string(a1, a2);
  v5[1].__r_.__value_.__r.__words[0] = 0LL;
  sub_100007640((uint64_t)&v5[1], a3);
  return a1;
}

void sub_1000DC094(_Unwind_Exception *exception_object)
{
}

uint64_t *sub_1000DC0B0(uint64_t *a1, uint64_t *a2)
{
  v4[0] = 0LL;
  sub_1000DC180(v4, a2);
  sub_1000DC10C(v4, a1);
  sub_100070E0C(v4);
  return a1;
}

void sub_1000DC0F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_1000DC10C(uint64_t *result, uint64_t *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    v4[0] = 0LL;
    sub_1000DC180(v4, result);
    sub_1000DC180(v3, a2);
    sub_1000DC180(a2, v4);
    return sub_100070E0C(v4);
  }

  return result;
}

void sub_1000DC16C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_1000DC180(uint64_t *result, uint64_t *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = *a2;
    if (*a2)
    {
      *uint64_t result = v3;
      if ((v3 & 1) != 0)
      {
        __int128 v4 = *(_OWORD *)(a2 + 1);
        result[3] = a2[3];
        *(_OWORD *)(result + 1) = v4;
      }

      else
      {
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL))( a2 + 1,  result + 1,  1LL);
      }

      *a2 = 0LL;
    }

    else
    {
      return sub_100006EA4(result);
    }
  }

  return result;
}

void sub_1000DC1F4(void *a1)
{
  void *v1 = 0LL;
  __cxa_rethrow();
}

void sub_1000DC204(_Unwind_Exception *a1)
{
}

std::string *sub_1000DC218(std::string *a1, const std::string *a2, uint64_t *a3)
{
  uint64_t v5 = std::string::basic_string(a1, a2);
  v5[1].__r_.__value_.__r.__words[0] = 0LL;
  sub_100007640((uint64_t)&v5[1], a3);
  return a1;
}

void sub_1000DC24C(_Unwind_Exception *exception_object)
{
}

uint64_t *sub_1000DC268(uint64_t *a1, uint64_t *a2)
{
  v4[0] = 0LL;
  sub_1000DC338(v4, a2);
  sub_1000DC2C4(v4, a1);
  sub_100071048(v4);
  return a1;
}

void sub_1000DC2B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_1000DC2C4(uint64_t *result, uint64_t *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    v4[0] = 0LL;
    sub_1000DC338(v4, result);
    sub_1000DC338(v3, a2);
    sub_1000DC338(a2, v4);
    return sub_100071048(v4);
  }

  return result;
}

void sub_1000DC324( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_1000DC338(uint64_t *result, uint64_t *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = *a2;
    if (*a2)
    {
      *uint64_t result = v3;
      if ((v3 & 1) != 0)
      {
        __int128 v4 = *(_OWORD *)(a2 + 1);
        result[3] = a2[3];
        *(_OWORD *)(result + 1) = v4;
      }

      else
      {
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL))( a2 + 1,  result + 1,  1LL);
      }

      *a2 = 0LL;
    }

    else
    {
      return sub_100006EA4(result);
    }
  }

  return result;
}

void sub_1000DC3AC(void *a1)
{
  void *v1 = 0LL;
  __cxa_rethrow();
}

void sub_1000DC3BC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000DC3D0(uint64_t a1)
{
  return a1;
}

void sub_1000DC3F8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1000DC3F8(a1, *a2);
    sub_1000DC3F8(a1, a2[1]);
    sub_1000DC440((uint64_t)(a2 + 4));
    operator delete(a2);
  }

void sub_1000DC440(uint64_t a1)
{
}

uint64_t sub_1000DC48C(uint64_t a1)
{
  return a1;
}

void sub_1000DC4B4(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1000DC4B4(a1, *a2);
    sub_1000DC4B4(a1, a2[1]);
    sub_1000DC4FC((uint64_t)(a2 + 4));
    operator delete(a2);
  }

void sub_1000DC4FC(uint64_t a1)
{
}

uint64_t *sub_1000DC548(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0LL;
  sub_1000DC5B0(&v5, a2);
  uint64_t v3 = a1[1];
  a1[1] = v5;
  uint64_t v5 = v3;
  sub_10000F9EC(&v5);
  return a1;
}

void sub_1000DC59C(_Unwind_Exception *a1)
{
}

void *sub_1000DC5B0(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  __int128 v4 = operator new(0x18uLL);
  v4[1] = 0x100000001LL;
  *__int128 v4 = &off_1002B2510;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1000DC5FC(void *a1)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  __cxa_rethrow();
}

void sub_1000DC61C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000DC638(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t sub_1000DC650()
{
  return 0LL;
}

uint64_t sub_1000DC658()
{
  return 0LL;
}

uint64_t sub_1000DC660()
{
  return 0LL;
}

void *sub_1000DC668@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  return sub_10000F8D8(v9);
}

void sub_1000DC70C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_1000DC730@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  LOBYTE(v16) = 0;
  if (a4)
  {
    int v15 = 0;
    sub_100010148(*(void *)*a1, &v15, &v17);
  }

  else
  {
    int v15 = 2;
    sub_1000100DC(*(void *)*a1, &v15, &v17);
  }

  uint64_t v8 = v17;
  int v9 = v18;
  *(_DWORD *)(v17 + 64) = v15;
  *(void *)(v8 + 68) = v16;
  std::string v14 = v9;
  if (v9)
  {
    uint64_t v10 = v9 + 3;
    do
      unsigned int v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    *a5 = v8;
    a5[1] = (uint64_t)v9;
    do
      unsigned int v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }

  else
  {
    *a5 = v8;
    a5[1] = 0LL;
  }

  sub_10000EF74(&v14);
  return sub_10000F9EC((uint64_t *)&v18);
}

void sub_1000DC814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

uint64_t *sub_1000DC82C@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = operator new(0x50uLL);
  sub_1000DD0F0((uint64_t)v7, a3, a1 + 3);
  return sub_1000DD584(a4, (uint64_t)v7);
}

void sub_1000DC87C(_Unwind_Exception *a1)
{
}

uint64_t *sub_1000DC890(uint64_t *a1, void *a2)
{
  uint64_t v4 = a1[1];
  if (v4)
  {
    unsigned int v5 = atomic_load((unsigned int *)(v4 + 8));
    if (v5 == 1) {
      return sub_1000DCA5C((uint64_t)a1, a2, 1, 2);
    }
  }

  uint64_t v7 = (uint64_t *)operator new(0x20uLL);
  sub_1000DCBD8(v7, *a1, *(void *)*a1);
  sub_1000DC95C((__int128 *)a1, (uint64_t)v7);
  uint64_t v8 = *(uint64_t **)(*(void *)*a1 + 8LL);
  return sub_1000DC9A4((uint64_t)a1, a2, 1, &v8, 0);
}

void sub_1000DC948(_Unwind_Exception *a1)
{
}

uint64_t *sub_1000DC95C(__int128 *a1, uint64_t a2)
{
  __int128 v3 = *a1;
  *a1 = v5;
  __int128 v5 = v3;
  return sub_10000F9EC((uint64_t *)&v5 + 1);
}

uint64_t *sub_1000DC9A4(uint64_t a1, void *a2, int a3, uint64_t **a4, int a5)
{
  unsigned int v8 = 0;
  uint64_t result = *a4;
  std::string v13 = *a4;
  unsigned int v10 = a5 - 1;
  while (1)
  {
    if (result == **(uint64_t ***)a1 || v10 < v8)
    {
      *(void *)(a1 + 16) = result;
      return result;
    }

    if (a3)
    {
      sub_1000DCFE4((uint64_t *)result[2], a2);
      uint64_t result = v13;
    }

    uint64_t v12 = result[2];
    uint64_t result = (uint64_t *)(*(_BYTE *)(v12 + 24) ? result[1] : sub_1000DD028(**(void **)a1, (void *)(v12 + 64), &v13));
    std::string v13 = result;
    if (v8 == -1) {
      break;
    }
    ++v8;
  }

  __break(0x5500u);
  return result;
}

uint64_t *sub_1000DCA5C(uint64_t a1, void *a2, int a3, int a4)
{
  uint64_t v4 = **(void **)a1;
  __int128 v5 = *(uint64_t **)(a1 + 16);
  uint64_t v7 = v5;
  return sub_1000DC9A4(a1, a2, a3, &v7, a4);
}

uint64_t *sub_1000DCA9C(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0LL;
  sub_1000DCB04(&v5, a2);
  uint64_t v3 = a1[1];
  a1[1] = v5;
  uint64_t v5 = v3;
  sub_10000F9EC(&v5);
  return a1;
}

void sub_1000DCAF0(_Unwind_Exception *a1)
{
}

void *sub_1000DCB04(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  uint64_t v4 = operator new(0x18uLL);
  v4[1] = 0x100000001LL;
  *uint64_t v4 = &off_1002B2570;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1000DCB50(void *a1)
{
}

void sub_1000DCB64(_Unwind_Exception *a1)
{
}

void sub_1000DCB80(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    sub_10000F9EC(v1 + 3);
    sub_10000F9EC(v1 + 1);
    operator delete(v1);
  }

uint64_t sub_1000DCBC0()
{
  return 0LL;
}

uint64_t sub_1000DCBC8()
{
  return 0LL;
}

uint64_t sub_1000DCBD0()
{
  return 0LL;
}

uint64_t *sub_1000DCBD8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = operator new(0x40uLL);
  sub_1000DCC5C((uint64_t)v6, a3);
  sub_1000DCE70(a1, (uint64_t)v6);
  uint64_t v7 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v7;
  if (v7)
  {
    unsigned int v8 = (unsigned int *)(v7 + 8);
    do
      unsigned int v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }

  return a1;
}

void sub_1000DCC48(_Unwind_Exception *a1)
{
}

uint64_t sub_1000DCC5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000DCD5C((uint64_t *)a1, a2);
  sub_1000DCE28((uint64_t)(v4 + 3), (uint64_t *)(a2 + 24));
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = 0LL;
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v12 = v6;
  while (v6 != a2 + 32)
  {
    *(void *)(v11 + 48) = v5;
    uint64_t v7 = sub_100010820(a2, (uint64_t)&v12);
    uint64_t v10 = v12;
    sub_10000B338((uint64_t)&v10);
    uint64_t v8 = sub_100010820(a2, (uint64_t)&v10);
    while (v7 != v8)
    {
      uint64_t v7 = *(void *)(v7 + 8);
      uint64_t v5 = *(void *)(v5 + 8);
    }

    sub_10000B338((uint64_t)&v12);
    sub_10000B338((uint64_t)&v11);
    uint64_t v6 = v12;
  }

  return a1;
}

void sub_1000DCD34(_Unwind_Exception *a1)
{
}

uint64_t *sub_1000DCD5C(uint64_t *a1, uint64_t a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
    sub_1000108A4(a1, (void *)(i + 16));
  return a1;
}

void sub_1000DCDB4(_Unwind_Exception *a1)
{
}

void sub_1000DCDC8(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    uint64_t v2 = (uint64_t *)a1[1];
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v3 + 8) = v4;
    a1[2] = 0LL;
    while (v2 != a1)
    {
      uint64_t v5 = (uint64_t *)v2[1];
      sub_100010A14((uint64_t)a1, v2);
      uint64_t v2 = v5;
    }
  }

uint64_t sub_1000DCE28(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_100010AEC(a1, (uint64_t)a2);
  sub_100010A84(v4, *a2, (uint64_t)(a2 + 1));
  return a1;
}

void sub_1000DCE5C(_Unwind_Exception *a1)
{
}

uint64_t *sub_1000DCE70(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0LL;
  sub_1000DCED8(&v5, a2);
  uint64_t v3 = a1[1];
  a1[1] = v5;
  uint64_t v5 = v3;
  sub_10000F9EC(&v5);
  return a1;
}

void sub_1000DCEC4(_Unwind_Exception *a1)
{
}

void *sub_1000DCED8(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  uint64_t v4 = operator new(0x18uLL);
  v4[1] = 0x100000001LL;
  *uint64_t v4 = &off_1002B25D0;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1000DCF24(void *a1)
{
}

void sub_1000DCF38(_Unwind_Exception *a1)
{
}

void sub_1000DCF4C(uint64_t *a1)
{
  if (a1)
  {
    sub_10000D0D4((uint64_t)(a1 + 3));
    sub_1000DCDC8(a1);
    operator delete(a1);
  }

void sub_1000DCF8C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    sub_10000D0D4((uint64_t)(v1 + 3));
    sub_1000DCDC8(v1);
    operator delete(v1);
  }

uint64_t sub_1000DCFCC()
{
  return 0LL;
}

uint64_t sub_1000DCFD4()
{
  return 0LL;
}

uint64_t sub_1000DCFDC()
{
  return 0LL;
}

uint64_t *sub_1000DCFE4(uint64_t *a1, void *a2)
{
  uint64_t result = (uint64_t *)a1[4];
  if (result)
  {
    uint64_t result = (uint64_t *)sub_1000110BC(result);
    if ((_DWORD)result) {
      return sub_100011120(a1, a2);
    }
  }

  return result;
}

uint64_t sub_1000DD028(uint64_t a1, void *a2, uint64_t **a3)
{
  uint64_t v6 = (uint64_t **)(a1 + 24);
  uint64_t v7 = sub_100011390(a1 + 24, (uint64_t)a2);
  uint64_t v8 = (uint64_t *)v7[6];
  unsigned int v9 = *a3;
  if (v8 == *a3)
  {
    uint64_t v10 = v7;
    uint64_t v11 = v8[1];
    else {
      *sub_1000DD0BC(v6, a2) = v11;
    }
    unsigned int v9 = *a3;
  }

  return sub_10001134C(a1, v9);
}

void *sub_1000DD0BC(uint64_t **a1, void *a2)
{
  uint64_t v3 = a2;
  return sub_100011468(a1, (uint64_t)a2, (uint64_t)&unk_100228867, &v3) + 6;
}

uint64_t sub_1000DD0F0(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)a1 = off_1002B2630;
  uint64_t v6 = operator new(0x38uLL);
  sub_100011AD4(v6, (_DWORD **)a2);
  v6[3] = 0LL;
  sub_100007640((uint64_t)(v6 + 3), (uint64_t *)(a2 + 24));
  sub_1000DD2D8((uint64_t *)(a1 + 32), (uint64_t)v6);
  uint64_t v7 = a3[1];
  *(void *)(a1 + 48) = *a3;
  *(void *)(a1 + 56) = v7;
  if (v7)
  {
    uint64_t v8 = (unsigned int *)(v7 + 8);
    do
      unsigned int v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }

  *(_DWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 68) = 0;
  return a1;
}

void sub_1000DD19C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  *(void *)uint64_t v2 = off_1002ADE80;
  sub_10000EF74((unsigned int **)(v2 + 16));
  _Unwind_Resume(a1);
}

void sub_1000DD1E4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000DD45C(a1);
  operator delete(v1);
}

uint64_t sub_1000DD1F8(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 24);
  sub_10000F788(&v5);
  sub_10000F8D8(v4);
  return v2;
}

void sub_1000DD280(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1000DD2A4(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t sub_1000DD2AC(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t *sub_1000DD2B4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v2 = (__int128 *)(a1 + 32);
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    uint64_t v5 = (unsigned int *)(v3 + 8);
    do
      unsigned int v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  return sub_100012390(v2);
}

uint64_t *sub_1000DD2D8(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0LL;
  sub_1000DD340(&v5, a2);
  uint64_t v3 = a1[1];
  a1[1] = v5;
  uint64_t v5 = v3;
  sub_10000F9EC(&v5);
  return a1;
}

void sub_1000DD32C(_Unwind_Exception *a1)
{
}

void *sub_1000DD340(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  uint64_t v4 = operator new(0x18uLL);
  v4[1] = 0x100000001LL;
  *uint64_t v4 = &off_1002B2688;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1000DD38C(void *a1)
{
}

void sub_1000DD3A0(_Unwind_Exception *a1)
{
}

void sub_1000DD3B4(uint64_t a1)
{
  if (a1)
  {
    sub_1000DBFE8((void *)(a1 + 24));
    uint64_t v2 = (void **)a1;
    sub_10000EFEC(&v2);
    operator delete((void *)a1);
  }

void sub_1000DD400(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1000DBFE8((void *)(v1 + 24));
    uint64_t v2 = (void **)v1;
    sub_10000EFEC(&v2);
    operator delete((void *)v1);
  }

uint64_t sub_1000DD444()
{
  return 0LL;
}

uint64_t sub_1000DD44C()
{
  return 0LL;
}

uint64_t sub_1000DD454()
{
  return 0LL;
}

uint64_t sub_1000DD45C(uint64_t a1)
{
  *(void *)a1 = off_1002B2630;
  sub_10000F9EC((uint64_t *)(a1 + 56));
  sub_10000F9EC((uint64_t *)(a1 + 40));
  *(void *)a1 = off_1002ADE80;
  sub_10000EF74((unsigned int **)(a1 + 16));
  return a1;
}

uint64_t *sub_1000DD4A8(uint64_t *result, void *a2)
{
  uint64_t v2 = (_DWORD **)result[4];
  if (v2)
  {
    uint64_t v4 = result;
    for (uint64_t i = *v2; i != v2[1]; i += 6)
    {
      sub_100012108(i, (uint64_t)v7);
      if (sub_100011134((uint64_t)i, (uint64_t)&v6))
      {
        sub_100011120(v4, a2);
        return sub_1000122FC((uint64_t)v7);
      }

      uint64_t result = sub_1000122FC((uint64_t)v7);
      uint64_t v2 = (_DWORD **)v4[4];
    }
  }

  return result;
}

void sub_1000DD564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t *sub_1000DD584(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0LL;
  sub_1000DD5EC(&v5, a2);
  uint64_t v3 = a1[1];
  a1[1] = v5;
  uint64_t v5 = v3;
  sub_10000F9EC(&v5);
  return a1;
}

void sub_1000DD5D8(_Unwind_Exception *a1)
{
}

void *sub_1000DD5EC(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  uint64_t v4 = operator new(0x18uLL);
  v4[1] = 0x100000001LL;
  *uint64_t v4 = &off_1002B26E8;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1000DD638(void *a1)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  __cxa_rethrow();
}

void sub_1000DD658(_Unwind_Exception *a1)
{
}

uint64_t sub_1000DD674(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t sub_1000DD68C()
{
  return 0LL;
}

uint64_t sub_1000DD694()
{
  return 0LL;
}

uint64_t sub_1000DD69C()
{
  return 0LL;
}

void *sub_1000DD6A4(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  a1[3] = 0LL;
  sub_1000DD6F8((uint64_t)a1, a2);
  return a1;
}

void sub_1000DD6D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)v10;
  sub_10000EFEC(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000DD6F8(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  v4[0] = *(_OWORD *)a2;
  v4[1] = v2;
  uint64_t v5 = *(void *)(a2 + 32);
  return sub_1000DD72C((uint64_t *)(a1 + 24), (uint64_t)v4);
}

uint64_t *sub_1000DD72C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = operator new(0x28uLL);
  __int128 v5 = *(_OWORD *)(a2 + 16);
  *uint64_t v4 = *(_OWORD *)a2;
  v4[1] = v5;
  *((void *)v4 + 4) = *(void *)(a2 + 32);
  v7[0] = (uint64_t)off_1002B2738;
  v7[1] = (uint64_t)v4;
  sub_1000DD7A4(v7, a1);
  sub_1000DBFE8(v7);
  return a1;
}

void sub_1000DD790( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_1000DD7A4(uint64_t *result, uint64_t *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    v4[0] = 0LL;
    sub_1000DD9B4(v4, result);
    sub_1000DD9B4(v3, a2);
    sub_1000DD9B4(a2, v4);
    return sub_1000DBFE8(v4);
  }

  return result;
}

void sub_1000DD804( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000DD818(uint64_t *a1, uint64_t a2, int a3)
{
  if (a3 == 4)
  {
    *(_WORD *)(a2 + 8) = 0;
  }

  else
  {
    sub_1000DD860(a1, a2, a3);
  }

uint64_t sub_1000DD838(uint64_t *a1, uint64_t a2, char a3)
{
  char v4 = a3;
  return sub_1000DD934(*a1, a2, (uint64_t)&v4);
}

void sub_1000DD860(uint64_t *a1, uint64_t a2, int a3)
{
  switch(a3)
  {
    case 0:
      uint64_t v5 = *a1;
      char v6 = operator new(0x28uLL);
      uint64_t v7 = *(void *)(v5 + 32);
      __int128 v8 = *(_OWORD *)(v5 + 16);
      *char v6 = *(_OWORD *)v5;
      v6[1] = v8;
      *((void *)v6 + 4) = v7;
      *(void *)a2 = v6;
      break;
    case 1:
      *(void *)a2 = *a1;
      *a1 = 0LL;
      break;
    case 2:
      if (*(void *)a2) {
        operator delete(*(void **)a2);
      }
      goto LABEL_9;
    case 3:
      unsigned int v9 = (const char *)(*(void *)(*(void *)a2 + 8LL) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf5IvN2nl8wpantund15NCPInstanceBaseENS6_6"
                                                  "OriginERK8in6_addrhjjEENS0_5list6INS0_5valueIPS6_EENSD_IS7_EENS_3argIL"
                                                  "i1EEENSH_ILi2EEENSD_IjEESK_EEEE" & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp( v9,  (const char *)((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf5IvN2nl8wpantund15NCPInstanceBaseENS6_6Ori ginERK8in6_addrhjjEENS0_5list6INS0_5valueIPS6_EENSD_IS7_EENS_3argILi1EEEN SH_ILi2EEENSD_IjEESK_EEEE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = *a1;
      }

      else
      {
LABEL_9:
        *(void *)a2 = 0LL;
      }

      break;
    default:
      *(_WORD *)(a2 + 8) = 0;
      break;
  }

uint64_t sub_1000DD934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a2;
  v4[1] = a3;
  return sub_1000DD968(a1 + 16, a1, (uint64_t)v4);
}

uint64_t sub_1000DD968(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DD988( a2,  *(void *)a1,  *(unsigned int *)(a1 + 8),  *(void *)a3,  **(unsigned __int8 **)(a3 + 8),  *(unsigned int *)(a1 + 12),  *(unsigned int *)(a1 + 16));
}

uint64_t sub_1000DD988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a1;
  uint64_t v8 = *(void *)(a1 + 8);
  unsigned int v9 = (void *)(a2 + (v8 >> 1));
  if ((v8 & 1) != 0) {
    uint64_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v9 + v7);
  }
  return v7(v9, a3, a4, a5, a6, a7);
}

uint64_t *sub_1000DD9B4(uint64_t *result, uint64_t *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = *a2;
    if (*a2)
    {
      *uint64_t result = v3;
      if ((v3 & 1) != 0)
      {
        __int128 v4 = *(_OWORD *)(a2 + 1);
        result[3] = a2[3];
        *(_OWORD *)(result + 1) = v4;
      }

      else
      {
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL))( a2 + 1,  result + 1,  1LL);
      }

      *a2 = 0LL;
    }

    else
    {
      return sub_100006EA4(result);
    }
  }

  return result;
}

void sub_1000DDA28(void *a1)
{
  void *v1 = 0LL;
  __cxa_rethrow();
}

void sub_1000DDA38(_Unwind_Exception *a1)
{
}

void *sub_1000DDA4C(void *a1, _OWORD *a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  a1[3] = 0LL;
  sub_1000DDAA0((uint64_t)a1, a2);
  return a1;
}

void sub_1000DDA80( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)v10;
  sub_10000EFEC(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000DDAA0(uint64_t a1, _OWORD *a2)
{
  __int128 v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  return sub_1000DDACC((uint64_t *)(a1 + 24), v4);
}

uint64_t *sub_1000DDACC(uint64_t *a1, _OWORD *a2)
{
  __int128 v4 = operator new(0x20uLL);
  __int128 v5 = a2[1];
  *__int128 v4 = *a2;
  v4[1] = v5;
  v7[0] = (uint64_t)off_1002B2758;
  v7[1] = (uint64_t)v4;
  sub_1000DD7A4(v7, a1);
  sub_1000DBFE8(v7);
  return a1;
}

void sub_1000DDB28( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000DDB3C(_OWORD **a1, uint64_t a2, int a3)
{
  if (a3 == 4)
  {
    *(_WORD *)(a2 + 8) = 0;
  }

  else
  {
    sub_1000DDB84(a1, a2, a3);
  }

uint64_t sub_1000DDB5C(uint64_t *a1, uint64_t a2, char a3)
{
  char v4 = a3;
  return sub_1000DDC50(*a1, a2, (uint64_t)&v4);
}

void sub_1000DDB84(_OWORD **a1, uint64_t a2, int a3)
{
  switch(a3)
  {
    case 0:
      __int128 v5 = *a1;
      char v6 = operator new(0x20uLL);
      __int128 v7 = v5[1];
      *char v6 = *v5;
      v6[1] = v7;
      *(void *)a2 = v6;
      break;
    case 1:
      *(void *)a2 = *a1;
      *a1 = 0LL;
      break;
    case 2:
      if (*(void *)a2) {
        operator delete(*(void **)a2);
      }
      goto LABEL_9;
    case 3:
      uint64_t v8 = (const char *)(*(void *)(*(void *)a2 + 8LL) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf2IvN2nl8wpantund15NCPInstanceBaseENS6_6"
                                                  "OriginERK8in6_addrEENS0_5list3INS0_5valueIPS6_EENSD_IS7_EENS_3argILi1EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp( v8,  (const char *)((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf2IvN2nl8wpantund15NCPInstanceBaseENS6_6Ori ginERK8in6_addrEENS0_5list3INS0_5valueIPS6_EENSD_IS7_EENS_3argILi1EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = *a1;
      }

      else
      {
LABEL_9:
        *(void *)a2 = 0LL;
      }

      break;
    default:
      *(_WORD *)(a2 + 8) = 0;
      break;
  }

uint64_t sub_1000DDC50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a2;
  v4[1] = a3;
  return sub_1000DDC84(a1 + 16, a1, v4);
}

uint64_t sub_1000DDC84(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_100012928(a2, *(void *)a1, *(unsigned int *)(a1 + 8), *a3);
}

void *sub_1000DDC9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  return sub_10000F8D8(v9);
}

void sub_1000DDD40(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_1000DDD64@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  LOBYTE(v16) = 0;
  if (a4)
  {
    int v15 = 0;
    sub_100010148(*(void *)*a1, &v15, &v17);
  }

  else
  {
    int v15 = 2;
    sub_1000100DC(*(void *)*a1, &v15, &v17);
  }

  uint64_t v8 = v17;
  unsigned int v9 = v18;
  *(_DWORD *)(v17 + 64) = v15;
  *(void *)(v8 + 68) = v16;
  std::string v14 = v9;
  if (v9)
  {
    uint64_t v10 = v9 + 3;
    do
      unsigned int v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    *a5 = v8;
    a5[1] = (uint64_t)v9;
    do
      unsigned int v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }

  else
  {
    *a5 = v8;
    a5[1] = 0LL;
  }

  sub_10000EF74(&v14);
  return sub_10000F9EC((uint64_t *)&v18);
}

void sub_1000DDE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

uint64_t *sub_1000DDE60@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  __int128 v7 = operator new(0x50uLL);
  sub_1000DE520((uint64_t)v7, a3, a1 + 3);
  return sub_1000DE9B4(a4, (uint64_t)v7);
}

void sub_1000DDEB0(_Unwind_Exception *a1)
{
}

uint64_t *sub_1000DDEC4(uint64_t *a1, void *a2)
{
  uint64_t v4 = a1[1];
  if (v4)
  {
    unsigned int v5 = atomic_load((unsigned int *)(v4 + 8));
    if (v5 == 1) {
      return sub_1000DCA5C((uint64_t)a1, a2, 1, 2);
    }
  }

  __int128 v7 = (uint64_t *)operator new(0x20uLL);
  sub_1000DE114(v7, *a1, *(void *)*a1);
  sub_1000DDF90((__int128 *)a1, (uint64_t)v7);
  uint64_t v8 = *(uint64_t **)(*(void *)*a1 + 8LL);
  return sub_1000DC9A4((uint64_t)a1, a2, 1, &v8, 0);
}

void sub_1000DDF7C(_Unwind_Exception *a1)
{
}

uint64_t *sub_1000DDF90(__int128 *a1, uint64_t a2)
{
  __int128 v3 = *a1;
  *a1 = v5;
  __int128 v5 = v3;
  return sub_10000F9EC((uint64_t *)&v5 + 1);
}

uint64_t *sub_1000DDFD8(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0LL;
  sub_1000DE040(&v5, a2);
  uint64_t v3 = a1[1];
  a1[1] = v5;
  uint64_t v5 = v3;
  sub_10000F9EC(&v5);
  return a1;
}

void sub_1000DE02C(_Unwind_Exception *a1)
{
}

void *sub_1000DE040(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  uint64_t v4 = operator new(0x18uLL);
  v4[1] = 0x100000001LL;
  *uint64_t v4 = &off_1002B2788;
  uint64_t v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1000DE08C(void *a1)
{
}

void sub_1000DE0A0(_Unwind_Exception *a1)
{
}

void sub_1000DE0BC(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    sub_10000F9EC(v1 + 3);
    sub_10000F9EC(v1 + 1);
    operator delete(v1);
  }

uint64_t sub_1000DE0FC()
{
  return 0LL;
}

uint64_t sub_1000DE104()
{
  return 0LL;
}

uint64_t sub_1000DE10C()
{
  return 0LL;
}

uint64_t *sub_1000DE114(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char v6 = operator new(0x40uLL);
  sub_1000DE198((uint64_t)v6, a3);
  sub_1000DE3AC(a1, (uint64_t)v6);
  uint64_t v7 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v7;
  if (v7)
  {
    uint64_t v8 = (unsigned int *)(v7 + 8);
    do
      unsigned int v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }

  return a1;
}

void sub_1000DE184(_Unwind_Exception *a1)
{
}

uint64_t sub_1000DE198(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000DE298((uint64_t *)a1, a2);
  sub_1000DE364((uint64_t)(v4 + 3), (uint64_t *)(a2 + 24));
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = 0LL;
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v12 = v6;
  while (v6 != a2 + 32)
  {
    *(void *)(v11 + 48) = v5;
    uint64_t v7 = sub_100010820(a2, (uint64_t)&v12);
    uint64_t v10 = v12;
    sub_10000B338((uint64_t)&v10);
    uint64_t v8 = sub_100010820(a2, (uint64_t)&v10);
    while (v7 != v8)
    {
      uint64_t v7 = *(void *)(v7 + 8);
      uint64_t v5 = *(void *)(v5 + 8);
    }

    sub_10000B338((uint64_t)&v12);
    sub_10000B338((uint64_t)&v11);
    uint64_t v6 = v12;
  }

  return a1;
}

void sub_1000DE270(_Unwind_Exception *a1)
{
}

uint64_t *sub_1000DE298(uint64_t *a1, uint64_t a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
    sub_1000108A4(a1, (void *)(i + 16));
  return a1;
}

void sub_1000DE2F0(_Unwind_Exception *a1)
{
}

void sub_1000DE304(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    uint64_t v2 = (uint64_t *)a1[1];
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v3 + 8) = v4;
    a1[2] = 0LL;
    while (v2 != a1)
    {
      uint64_t v5 = (uint64_t *)v2[1];
      sub_100010A14((uint64_t)a1, v2);
      uint64_t v2 = v5;
    }
  }

uint64_t sub_1000DE364(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_100010AEC(a1, (uint64_t)a2);
  sub_100010A84(v4, *a2, (uint64_t)(a2 + 1));
  return a1;
}

void sub_1000DE398(_Unwind_Exception *a1)
{
}

uint64_t *sub_1000DE3AC(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0LL;
  sub_1000DE414(&v5, a2);
  uint64_t v3 = a1[1];
  a1[1] = v5;
  uint64_t v5 = v3;
  sub_10000F9EC(&v5);
  return a1;
}

void sub_1000DE400(_Unwind_Exception *a1)
{
}

void *sub_1000DE414(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  uint64_t v4 = operator new(0x18uLL);
  v4[1] = 0x100000001LL;
  *uint64_t v4 = &off_1002B27E8;
  uint64_t v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1000DE460(void *a1)
{
}

void sub_1000DE474(_Unwind_Exception *a1)
{
}

void sub_1000DE488(uint64_t *a1)
{
  if (a1)
  {
    sub_10000D0D4((uint64_t)(a1 + 3));
    sub_1000DE304(a1);
    operator delete(a1);
  }

void sub_1000DE4C8(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    sub_10000D0D4((uint64_t)(v1 + 3));
    sub_1000DE304(v1);
    operator delete(v1);
  }

uint64_t sub_1000DE508()
{
  return 0LL;
}

uint64_t sub_1000DE510()
{
  return 0LL;
}

uint64_t sub_1000DE518()
{
  return 0LL;
}

uint64_t sub_1000DE520(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)a1 = off_1002B2848;
  uint64_t v6 = operator new(0x38uLL);
  sub_100011AD4(v6, (_DWORD **)a2);
  v6[3] = 0LL;
  sub_100007640((uint64_t)(v6 + 3), (uint64_t *)(a2 + 24));
  sub_1000DE708((uint64_t *)(a1 + 32), (uint64_t)v6);
  uint64_t v7 = a3[1];
  *(void *)(a1 + 48) = *a3;
  *(void *)(a1 + 56) = v7;
  if (v7)
  {
    uint64_t v8 = (unsigned int *)(v7 + 8);
    do
      unsigned int v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }

  *(_DWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 68) = 0;
  return a1;
}

void sub_1000DE5CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  *(void *)uint64_t v2 = off_1002ADE80;
  sub_10000EF74((unsigned int **)(v2 + 16));
  _Unwind_Resume(a1);
}

void sub_1000DE614(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000DE88C(a1);
  operator delete(v1);
}

uint64_t sub_1000DE628(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 24);
  sub_10000F788(&v5);
  sub_10000F8D8(v4);
  return v2;
}

void sub_1000DE6B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1000DE6D4(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t sub_1000DE6DC(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t *sub_1000DE6E4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v2 = (__int128 *)(a1 + 32);
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    uint64_t v5 = (unsigned int *)(v3 + 8);
    do
      unsigned int v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  return sub_100012390(v2);
}

uint64_t *sub_1000DE708(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0LL;
  sub_1000DE770(&v5, a2);
  uint64_t v3 = a1[1];
  a1[1] = v5;
  uint64_t v5 = v3;
  sub_10000F9EC(&v5);
  return a1;
}

void sub_1000DE75C(_Unwind_Exception *a1)
{
}

void *sub_1000DE770(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  uint64_t v4 = operator new(0x18uLL);
  v4[1] = 0x100000001LL;
  *uint64_t v4 = &off_1002B28A0;
  uint64_t v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1000DE7BC(void *a1)
{
}

void sub_1000DE7D0(_Unwind_Exception *a1)
{
}

void sub_1000DE7E4(uint64_t a1)
{
  if (a1)
  {
    sub_1000DC010((void *)(a1 + 24));
    uint64_t v2 = (void **)a1;
    sub_10000EFEC(&v2);
    operator delete((void *)a1);
  }

void sub_1000DE830(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1000DC010((void *)(v1 + 24));
    uint64_t v2 = (void **)v1;
    sub_10000EFEC(&v2);
    operator delete((void *)v1);
  }

uint64_t sub_1000DE874()
{
  return 0LL;
}

uint64_t sub_1000DE87C()
{
  return 0LL;
}

uint64_t sub_1000DE884()
{
  return 0LL;
}

uint64_t sub_1000DE88C(uint64_t a1)
{
  *(void *)a1 = off_1002B2848;
  sub_10000F9EC((uint64_t *)(a1 + 56));
  sub_10000F9EC((uint64_t *)(a1 + 40));
  *(void *)a1 = off_1002ADE80;
  sub_10000EF74((unsigned int **)(a1 + 16));
  return a1;
}

uint64_t *sub_1000DE8D8(uint64_t *result, void *a2)
{
  uint64_t v2 = (_DWORD **)result[4];
  if (v2)
  {
    uint64_t v4 = result;
    for (uint64_t i = *v2; i != v2[1]; i += 6)
    {
      sub_100012108(i, (uint64_t)v7);
      if (sub_100011134((uint64_t)i, (uint64_t)&v6))
      {
        sub_100011120(v4, a2);
        return sub_1000122FC((uint64_t)v7);
      }

      uint64_t result = sub_1000122FC((uint64_t)v7);
      uint64_t v2 = (_DWORD **)v4[4];
    }
  }

  return result;
}

void sub_1000DE994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t *sub_1000DE9B4(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0LL;
  sub_1000DEA1C(&v5, a2);
  uint64_t v3 = a1[1];
  a1[1] = v5;
  uint64_t v5 = v3;
  sub_10000F9EC(&v5);
  return a1;
}

void sub_1000DEA08(_Unwind_Exception *a1)
{
}

void *sub_1000DEA1C(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  uint64_t v4 = operator new(0x18uLL);
  v4[1] = 0x100000001LL;
  *uint64_t v4 = &off_1002B2900;
  uint64_t v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1000DEA68(void *a1)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  __cxa_rethrow();
}

void sub_1000DEA88(_Unwind_Exception *a1)
{
}

uint64_t sub_1000DEAA4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t sub_1000DEABC()
{
  return 0LL;
}

uint64_t sub_1000DEAC4()
{
  return 0LL;
}

uint64_t sub_1000DEACC()
{
  return 0LL;
}

void *sub_1000DEAD4(void *a1, _OWORD *a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  a1[3] = 0LL;
  sub_1000DEB28((uint64_t)a1, a2);
  return a1;
}

void sub_1000DEB08( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)v10;
  sub_10000EFEC(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000DEB28(uint64_t a1, _OWORD *a2)
{
  __int128 v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  return sub_1000DEB54((uint64_t *)(a1 + 24), v4);
}

uint64_t *sub_1000DEB54(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4 = operator new(0x20uLL);
  __int128 v5 = a2[1];
  *uint64_t v4 = *a2;
  v4[1] = v5;
  v7[0] = (uint64_t)off_1002B2950;
  v7[1] = (uint64_t)v4;
  sub_1000DEBC4(v7, a1);
  sub_1000DC010(v7);
  return a1;
}

void sub_1000DEBB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_1000DEBC4(uint64_t *result, uint64_t *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    v4[0] = 0LL;
    sub_1000DEE50(v4, result);
    sub_1000DEE50(v3, a2);
    sub_1000DEE50(a2, v4);
    return sub_1000DC010(v4);
  }

  return result;
}

void sub_1000DEC24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000DEC38(_OWORD **a1, uint64_t a2, int a3)
{
  if (a3 == 4)
  {
    *(_WORD *)(a2 + 8) = 0;
  }

  else
  {
    sub_1000DEC60(a1, a2, a3);
  }

void *sub_1000DEC58(uint64_t *a1, uint64_t a2)
{
  return sub_1000DED2C(*a1, a2);
}

void sub_1000DEC60(_OWORD **a1, uint64_t a2, int a3)
{
  switch(a3)
  {
    case 0:
      __int128 v5 = *a1;
      char v6 = operator new(0x20uLL);
      __int128 v7 = v5[1];
      *char v6 = *v5;
      v6[1] = v7;
      *(void *)a2 = v6;
      break;
    case 1:
      *(void *)a2 = *a1;
      *a1 = 0LL;
      break;
    case 2:
      if (*(void *)a2) {
        operator delete(*(void **)a2);
      }
      goto LABEL_9;
    case 3:
      uint64_t v8 = (const char *)(*(void *)(*(void *)a2 + 8LL) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf3IvN2nl8wpantund15NCPInstanceBaseENS6_6"
                                                  "OriginERK8in6_addrNS_8functionIFviEEEEENS0_5list4INS0_5valueIPS6_EENSG"
                                                  "_IS7_EENS_3argILi1EEENSG_INS4_9NilReturnEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp( v8,  (const char *)((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf3IvN2nl8wpantund15NCPInstanceBaseENS6_6Ori ginERK8in6_addrNS_8functionIFviEEEEENS0_5list4INS0_5valueIPS6_EENSG_IS7_E ENS_3argILi1EEENSG_INS4_9NilReturnEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = *a1;
      }

      else
      {
LABEL_9:
        *(void *)a2 = 0LL;
      }

      break;
    default:
      *(_WORD *)(a2 + 8) = 0;
      break;
  }

void *sub_1000DED2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return sub_1000DED60(a1 + 16, a1, &v3);
}

void *sub_1000DED60(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  uint64_t v6 = *a3;
  v8[0] = (uint64_t)off_1002AED78 + 1;
  sub_1000DEDCC(a2, v4, v5, v6, v8);
  return sub_1000075F0(v8);
}

void sub_1000DEDB8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1000DEDCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8 = *(void (**)(void *, uint64_t, uint64_t, void *, __n128))a1;
  uint64_t v7 = *(void *)(a1 + 8);
  unsigned int v9 = (void *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0) {
    uint64_t v8 = *(void (**)(void *, uint64_t, uint64_t, void *, __n128))(*v9 + v8);
  }
  v12[0] = 0LL;
  __n128 v10 = sub_100007640((uint64_t)v12, a5);
  v8(v9, a3, a4, v12, v10);
  return sub_1000075F0(v12);
}

void sub_1000DEE3C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_1000DEE50(uint64_t *result, uint64_t *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = *a2;
    if (*a2)
    {
      *uint64_t result = v3;
      if ((v3 & 1) != 0)
      {
        __int128 v4 = *(_OWORD *)(a2 + 1);
        result[3] = a2[3];
        *(_OWORD *)(result + 1) = v4;
      }

      else
      {
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL))( a2 + 1,  result + 1,  1LL);
      }

      *a2 = 0LL;
    }

    else
    {
      return sub_100006EA4(result);
    }
  }

  return result;
}

void sub_1000DEEC4(void *a1)
{
  void *v1 = 0LL;
  __cxa_rethrow();
}

void sub_1000DEED4(_Unwind_Exception *a1)
{
}

void *sub_1000DEEE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  return sub_10000F8D8(v9);
}

void sub_1000DEF8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_1000DEFB0@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  LOBYTE(v16) = 0;
  if (a4)
  {
    int v15 = 0;
    sub_100010148(*(void *)*a1, &v15, &v17);
  }

  else
  {
    int v15 = 2;
    sub_1000100DC(*(void *)*a1, &v15, &v17);
  }

  uint64_t v8 = v17;
  unsigned int v9 = v18;
  *(_DWORD *)(v17 + 64) = v15;
  *(void *)(v8 + 68) = v16;
  std::string v14 = v9;
  if (v9)
  {
    __n128 v10 = v9 + 3;
    do
      unsigned int v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    *a5 = v8;
    a5[1] = (uint64_t)v9;
    do
      unsigned int v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }

  else
  {
    *a5 = v8;
    a5[1] = 0LL;
  }

  sub_10000EF74(&v14);
  return sub_10000F9EC((uint64_t *)&v18);
}

void sub_1000DF094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

uint64_t *sub_1000DF0AC@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = operator new(0x50uLL);
  sub_1000DF76C((uint64_t)v7, a3, a1 + 3);
  return sub_1000DFC00(a4, (uint64_t)v7);
}

void sub_1000DF0FC(_Unwind_Exception *a1)
{
}

uint64_t *sub_1000DF110(uint64_t *a1, void *a2)
{
  uint64_t v4 = a1[1];
  if (v4)
  {
    unsigned int v5 = atomic_load((unsigned int *)(v4 + 8));
    if (v5 == 1) {
      return sub_1000DCA5C((uint64_t)a1, a2, 1, 2);
    }
  }

  uint64_t v7 = (uint64_t *)operator new(0x20uLL);
  sub_1000DF360(v7, *a1, *(void *)*a1);
  sub_1000DF1DC((__int128 *)a1, (uint64_t)v7);
  uint64_t v8 = *(uint64_t **)(*(void *)*a1 + 8LL);
  return sub_1000DC9A4((uint64_t)a1, a2, 1, &v8, 0);
}

void sub_1000DF1C8(_Unwind_Exception *a1)
{
}

uint64_t *sub_1000DF1DC(__int128 *a1, uint64_t a2)
{
  __int128 v3 = *a1;
  *a1 = v5;
  __int128 v5 = v3;
  return sub_10000F9EC((uint64_t *)&v5 + 1);
}

uint64_t *sub_1000DF224(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0LL;
  sub_1000DF28C(&v5, a2);
  uint64_t v3 = a1[1];
  a1[1] = v5;
  uint64_t v5 = v3;
  sub_10000F9EC(&v5);
  return a1;
}

void sub_1000DF278(_Unwind_Exception *a1)
{
}

void *sub_1000DF28C(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  uint64_t v4 = operator new(0x18uLL);
  v4[1] = 0x100000001LL;
  *uint64_t v4 = &off_1002B2980;
  _OWORD v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1000DF2D8(void *a1)
{
}

void sub_1000DF2EC(_Unwind_Exception *a1)
{
}

void sub_1000DF308(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    sub_10000F9EC(v1 + 3);
    sub_10000F9EC(v1 + 1);
    operator delete(v1);
  }

uint64_t sub_1000DF348()
{
  return 0LL;
}

uint64_t sub_1000DF350()
{
  return 0LL;
}

uint64_t sub_1000DF358()
{
  return 0LL;
}

uint64_t *sub_1000DF360(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = operator new(0x40uLL);
  sub_1000DF3E4((uint64_t)v6, a3);
  sub_1000DF5F8(a1, (uint64_t)v6);
  uint64_t v7 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v7;
  if (v7)
  {
    uint64_t v8 = (unsigned int *)(v7 + 8);
    do
      unsigned int v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }

  return a1;
}

void sub_1000DF3D0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000DF3E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000DF4E4((uint64_t *)a1, a2);
  sub_1000DF5B0((uint64_t)(v4 + 3), (uint64_t *)(a2 + 24));
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = 0LL;
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v12 = v6;
  while (v6 != a2 + 32)
  {
    *(void *)(v11 + 48) = v5;
    uint64_t v7 = sub_100010820(a2, (uint64_t)&v12);
    uint64_t v10 = v12;
    sub_10000B338((uint64_t)&v10);
    uint64_t v8 = sub_100010820(a2, (uint64_t)&v10);
    while (v7 != v8)
    {
      uint64_t v7 = *(void *)(v7 + 8);
      uint64_t v5 = *(void *)(v5 + 8);
    }

    sub_10000B338((uint64_t)&v12);
    sub_10000B338((uint64_t)&v11);
    uint64_t v6 = v12;
  }

  return a1;
}

void sub_1000DF4BC(_Unwind_Exception *a1)
{
}

uint64_t *sub_1000DF4E4(uint64_t *a1, uint64_t a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
    sub_1000108A4(a1, (void *)(i + 16));
  return a1;
}

void sub_1000DF53C(_Unwind_Exception *a1)
{
}

void sub_1000DF550(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    uint64_t v2 = (uint64_t *)a1[1];
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v3 + 8) = v4;
    a1[2] = 0LL;
    while (v2 != a1)
    {
      uint64_t v5 = (uint64_t *)v2[1];
      sub_100010A14((uint64_t)a1, v2);
      uint64_t v2 = v5;
    }
  }

uint64_t sub_1000DF5B0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_100010AEC(a1, (uint64_t)a2);
  sub_100010A84(v4, *a2, (uint64_t)(a2 + 1));
  return a1;
}

void sub_1000DF5E4(_Unwind_Exception *a1)
{
}

uint64_t *sub_1000DF5F8(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0LL;
  sub_1000DF660(&v5, a2);
  uint64_t v3 = a1[1];
  a1[1] = v5;
  uint64_t v5 = v3;
  sub_10000F9EC(&v5);
  return a1;
}

void sub_1000DF64C(_Unwind_Exception *a1)
{
}

void *sub_1000DF660(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  uint64_t v4 = operator new(0x18uLL);
  v4[1] = 0x100000001LL;
  *uint64_t v4 = &off_1002B29E0;
  _OWORD v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1000DF6AC(void *a1)
{
}

void sub_1000DF6C0(_Unwind_Exception *a1)
{
}

void sub_1000DF6D4(uint64_t *a1)
{
  if (a1)
  {
    sub_10000D0D4((uint64_t)(a1 + 3));
    sub_1000DF550(a1);
    operator delete(a1);
  }

void sub_1000DF714(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    sub_10000D0D4((uint64_t)(v1 + 3));
    sub_1000DF550(v1);
    operator delete(v1);
  }

uint64_t sub_1000DF754()
{
  return 0LL;
}

uint64_t sub_1000DF75C()
{
  return 0LL;
}

uint64_t sub_1000DF764()
{
  return 0LL;
}

uint64_t sub_1000DF76C(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)a1 = off_1002B2A40;
  uint64_t v6 = operator new(0x38uLL);
  sub_100011AD4(v6, (_DWORD **)a2);
  v6[3] = 0LL;
  sub_100007640((uint64_t)(v6 + 3), (uint64_t *)(a2 + 24));
  sub_1000DF954((uint64_t *)(a1 + 32), (uint64_t)v6);
  uint64_t v7 = a3[1];
  *(void *)(a1 + 48) = *a3;
  *(void *)(a1 + 56) = v7;
  if (v7)
  {
    uint64_t v8 = (unsigned int *)(v7 + 8);
    do
      unsigned int v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }

  *(_DWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 68) = 0;
  return a1;
}

void sub_1000DF818(_Unwind_Exception *a1, uint64_t a2, ...)
{
  *(void *)uint64_t v2 = off_1002ADE80;
  sub_10000EF74((unsigned int **)(v2 + 16));
  _Unwind_Resume(a1);
}

void sub_1000DF860(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000DFAD8(a1);
  operator delete(v1);
}

uint64_t sub_1000DF874(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 24);
  sub_10000F788(&v5);
  sub_10000F8D8(v4);
  return v2;
}

void sub_1000DF8FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1000DF920(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t sub_1000DF928(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t *sub_1000DF930@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v2 = (__int128 *)(a1 + 32);
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    uint64_t v5 = (unsigned int *)(v3 + 8);
    do
      unsigned int v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  return sub_100012390(v2);
}

uint64_t *sub_1000DF954(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0LL;
  sub_1000DF9BC(&v5, a2);
  uint64_t v3 = a1[1];
  a1[1] = v5;
  uint64_t v5 = v3;
  sub_10000F9EC(&v5);
  return a1;
}

void sub_1000DF9A8(_Unwind_Exception *a1)
{
}

void *sub_1000DF9BC(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  uint64_t v4 = operator new(0x18uLL);
  v4[1] = 0x100000001LL;
  *uint64_t v4 = &off_1002B2A98;
  _OWORD v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1000DFA08(void *a1)
{
}

void sub_1000DFA1C(_Unwind_Exception *a1)
{
}

void sub_1000DFA30(uint64_t a1)
{
  if (a1)
  {
    sub_1000DC038((void *)(a1 + 24));
    uint64_t v2 = (void **)a1;
    sub_10000EFEC(&v2);
    operator delete((void *)a1);
  }

void sub_1000DFA7C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1000DC038((void *)(v1 + 24));
    uint64_t v2 = (void **)v1;
    sub_10000EFEC(&v2);
    operator delete((void *)v1);
  }

uint64_t sub_1000DFAC0()
{
  return 0LL;
}

uint64_t sub_1000DFAC8()
{
  return 0LL;
}

uint64_t sub_1000DFAD0()
{
  return 0LL;
}

uint64_t sub_1000DFAD8(uint64_t a1)
{
  *(void *)a1 = off_1002B2A40;
  sub_10000F9EC((uint64_t *)(a1 + 56));
  sub_10000F9EC((uint64_t *)(a1 + 40));
  *(void *)a1 = off_1002ADE80;
  sub_10000EF74((unsigned int **)(a1 + 16));
  return a1;
}

uint64_t *sub_1000DFB24(uint64_t *result, void *a2)
{
  uint64_t v2 = (_DWORD **)result[4];
  if (v2)
  {
    uint64_t v4 = result;
    for (uint64_t i = *v2; i != v2[1]; i += 6)
    {
      sub_100012108(i, (uint64_t)v7);
      if (sub_100011134((uint64_t)i, (uint64_t)&v6))
      {
        sub_100011120(v4, a2);
        return sub_1000122FC((uint64_t)v7);
      }

      uint64_t result = sub_1000122FC((uint64_t)v7);
      uint64_t v2 = (_DWORD **)v4[4];
    }
  }

  return result;
}

void sub_1000DFBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t *sub_1000DFC00(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0LL;
  sub_1000DFC68(&v5, a2);
  uint64_t v3 = a1[1];
  a1[1] = v5;
  uint64_t v5 = v3;
  sub_10000F9EC(&v5);
  return a1;
}

void sub_1000DFC54(_Unwind_Exception *a1)
{
}

void *sub_1000DFC68(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  uint64_t v4 = operator new(0x18uLL);
  v4[1] = 0x100000001LL;
  *uint64_t v4 = &off_1002B2AF8;
  _OWORD v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1000DFCB4(void *a1)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  __cxa_rethrow();
}

void sub_1000DFCD4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000DFCF0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t sub_1000DFD08()
{
  return 0LL;
}

uint64_t sub_1000DFD10()
{
  return 0LL;
}

uint64_t sub_1000DFD18()
{
  return 0LL;
}

void *sub_1000DFD20(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  a1[3] = 0LL;
  sub_1000DFD74((uint64_t)a1, a2);
  return a1;
}

void sub_1000DFD54( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)v10;
  sub_10000EFEC(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000DFD74(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  return sub_1000DFDA8((uint64_t *)(a1 + 24), &v3);
}

uint64_t *sub_1000DFDA8(uint64_t *a1, __int128 *a2)
{
  __int128 v5 = *a2;
  uint64_t v6 = *((void *)a2 + 2);
  uint64_t v4 = (uint64_t)off_1002B2B48 + 1;
  sub_1000DFE18(&v4, a1);
  sub_1000DC038(&v4);
  return a1;
}

void sub_1000DFE04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_1000DFE18(uint64_t *result, uint64_t *a2)
{
  if (a2 != result)
  {
    __int128 v3 = result;
    v4[0] = 0LL;
    sub_1000DFFC0(v4, result);
    sub_1000DFFC0(v3, a2);
    sub_1000DFFC0(a2, v4);
    return sub_1000DC038(v4);
  }

  return result;
}

void sub_1000DFE78( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000DFE8C(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }

      uint64_t result = *(void *)(*(void *)a2 + 8LL) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf2IvN2nl8wpantund15NCPInstanceBaseEbbEENS0_5list3I"
                                        "NS0_5valueIPS6_EENS_3argILi1EEENSC_ILi2EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp( (const char *)result,  (const char *)((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf2IvN2nl8wpantund15NCPInstanceBase EbbEENS0_5list3INS0_5valueIPS6_EENS_3argILi1EEENSC_ILi2EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)),  !(_DWORD)result))
      {
        *(void *)a2 = v4;
      }

      else
      {
        *(void *)a2 = 0LL;
      }
    }
  }

  else
  {
    __int128 v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }

  return result;
}

uint64_t sub_1000DFF28(uint64_t a1, unsigned __int8 a2, unsigned __int8 a3)
{
  unsigned __int8 v5 = a2;
  unsigned __int8 v4 = a3;
  return sub_1000DFF54(a1, &v5, &v4);
}

uint64_t sub_1000DFF54(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  v4[0] = a2;
  v4[1] = a3;
  return sub_1000DFF88((void *)(a1 + 16), a1, v4);
}

uint64_t sub_1000DFF88(void *a1, uint64_t a2, unsigned __int8 **a3)
{
  __int128 v3 = *(uint64_t (**)(void *, BOOL, BOOL))a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = (void *)(*a1 + (v4 >> 1));
  if ((v4 & 1) != 0) {
    __int128 v3 = *(uint64_t (**)(void *, BOOL, BOOL))(*v5 + v3);
  }
  return v3(v5, **a3 != 0, *a3[1] != 0);
}

uint64_t *sub_1000DFFC0(uint64_t *result, uint64_t *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = *a2;
    if (*a2)
    {
      *uint64_t result = v3;
      if ((v3 & 1) != 0)
      {
        __int128 v4 = *(_OWORD *)(a2 + 1);
        result[3] = a2[3];
        *(_OWORD *)(result + 1) = v4;
      }

      else
      {
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL))( a2 + 1,  result + 1,  1LL);
      }

      *a2 = 0LL;
    }

    else
    {
      return sub_100006EA4(result);
    }
  }

  return result;
}

void sub_1000E0034(void *a1)
{
  void *v1 = 0LL;
  __cxa_rethrow();
}

void sub_1000E0044(_Unwind_Exception *a1)
{
}

char *sub_1000E0058(uint64_t **a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned __int8 v5 = (void **)sub_1000E0114((uint64_t)a1, &v12, a2);
  uint64_t v6 = (char *)*v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    uint64_t v6 = (char *)operator new(0x50uLL);
    v10[1] = a1 + 1;
    __int128 v8 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(v6 + 28) = *(_OWORD *)a3;
    *(_OWORD *)(v6 + 44) = v8;
    *(_OWORD *)(v6 + 60) = *(_OWORD *)(a3 + 32);
    *((_DWORD *)v6 + 19) = *(_DWORD *)(a3 + 48);
    char v11 = 1;
    sub_10000AF70(a1, v12, (void **)v7, v6);
    v10[0] = 0LL;
    sub_10000D0A8(v10, 0LL);
  }

  return v6;
}

void *sub_1000E0114(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  unsigned __int8 v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = (void *)v4;
        __int128 v8 = (unsigned __int8 *)(v4 + 28);
        uint64_t v4 = *v7;
        unsigned __int8 v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      unsigned __int8 v5 = v7 + 1;
      uint64_t v4 = v7[1];
    }

    while (v4);
  }

  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }

void *sub_1000E01A4(uint64_t **a1, const void **a2, uint64_t a3, const std::string **a4)
{
  uint64_t v7 = sub_10000AE50((uint64_t)a1, &v12, a2);
  __int128 v8 = (void *)*v7;
  if (!*v7)
  {
    unsigned int v9 = (void **)v7;
    sub_1000E024C((uint64_t)a1, a3, a4, (uint64_t)v11);
    sub_10000AF70(a1, v12, v9, (void *)v11[0]);
    __int128 v8 = v11[0];
    v11[0] = 0LL;
    sub_1000E02FC(v11, 0LL);
  }

  return v8;
}

void sub_1000E024C(uint64_t a1@<X0>, uint64_t a2@<X1>, const std::string **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  __int128 v8 = (char *)operator new(0x70uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  sub_1000E02D0(v7, (std::string *)(v8 + 32), a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1000E02B8(_Unwind_Exception *a1)
{
}

double sub_1000E02D0(uint64_t a1, std::string *a2, uint64_t a3, const std::string **a4)
{
  return sub_1000E02DC(a2, *a4);
}

double sub_1000E02DC(std::string *a1, const std::string *a2)
{
  uint64_t v2 = std::string::basic_string(a1, a2);
  double result = 0.0;
  *(_OWORD *)&v2[1].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&v2[1].__r_.__value_.__r.__words[2] = 0u;
  return result;
}

void sub_1000E02FC(void **a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3) {
    sub_1000E0318((uint64_t)(a1 + 1), v3);
  }
}

void sub_1000E0318(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8)) {
    sub_1000DC440((uint64_t)__p + 32);
  }
  if (__p) {
    operator delete(__p);
  }
}

uint64_t sub_1000E0358(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }

      double result = *(void *)(*(void *)a2 + 8LL) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf1IvN2nl8wpantund15NCPInstanceBaseENS_8functionIFv"
                                        "iRKNS_3anyEEEEEENS0_5list2INS0_5valueIPS6_EENS_3argILi1EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)
        || (double result = strcmp( (const char *)result,  (const char *)((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf1IvN2nl8wpantund15NCPInstanceBase ENS_8functionIFviRKNS_3anyEEEEEENS0_5list2INS0_5valueIPS6_EENS_3argILi1EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)),  !(_DWORD)result))
      {
        *(void *)a2 = v4;
      }

      else
      {
        *(void *)a2 = 0LL;
      }
    }
  }

  else
  {
    __int128 v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }

  return result;
}

void *sub_1000E03F8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  v4[0] = a2;
  v4[1] = a3;
  return sub_1000E042C((uint64_t *)(a1 + 16), a1, v4);
}

void *sub_1000E042C(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = *a1;
  v7[0] = 0LL;
  sub_100035654(v7, v4);
  sub_1000E0490(a2, v5, v7);
  return sub_100006E7C(v7);
}

void sub_1000E047C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1000E0490(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(void (**)(void *, void *, __n128))a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v5 = (void *)(a2 + (v3 >> 1));
  if ((v3 & 1) != 0) {
    uint64_t v4 = *(void (**)(void *, void *, __n128))(*v5 + v4);
  }
  v8[0] = 0LL;
  __n128 v6 = sub_100007640((uint64_t)v8, a3);
  v4(v5, v8, v6);
  return sub_100006E7C(v8);
}

void sub_1000E04E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000E04FC(uint64_t a1)
{
  return a1;
}

void sub_1000E0524(void *a1)
{
}

_UNKNOWN **sub_1000E054C()
{
}

void *sub_1000E0558(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_1002B2B98;
  sub_10000C848(v2 + 1, (uint64_t *)(a1 + 8));
  return v2;
}

void sub_1000E0598(_Unwind_Exception *a1)
{
}

void *sub_1000E05AC(uint64_t **a1, const void **a2, uint64_t a3, const std::string **a4)
{
  uint64_t v7 = sub_10000AE50((uint64_t)a1, &v12, a2);
  __int128 v8 = (void *)*v7;
  if (!*v7)
  {
    unsigned int v9 = (void **)v7;
    sub_1000E0654((uint64_t)a1, a3, a4, (uint64_t)v11);
    sub_10000AF70(a1, v12, v9, (void *)v11[0]);
    __int128 v8 = v11[0];
    v11[0] = 0LL;
    sub_1000E06D8(v11, 0LL);
  }

  return v8;
}

void sub_1000E0654(uint64_t a1@<X0>, uint64_t a2@<X1>, const std::string **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  __int128 v8 = (char *)operator new(0x70uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  sub_1000E02D0(v7, (std::string *)(v8 + 32), a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1000E06C0(_Unwind_Exception *a1)
{
}

void sub_1000E06D8(void **a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3) {
    sub_1000E06F4((uint64_t)(a1 + 1), v3);
  }
}

void sub_1000E06F4(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8)) {
    sub_1000DC4FC((uint64_t)__p + 32);
  }
  if (__p) {
    operator delete(__p);
  }
}

uint64_t sub_1000E0734(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }

      double result = *(void *)(*(void *)a2 + 8LL) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf2IvN2nl8wpantund15NCPInstanceBaseERKNS_3anyENS_8f"
                                        "unctionIFviEEEEENS0_5list3INS0_5valueIPS6_EENS_3argILi1EEENSI_ILi2EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)
        || (double result = strcmp( (const char *)result,  (const char *)((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf2IvN2nl8wpantund15NCPInstanceBase ERKNS_3anyENS_8functionIFviEEEEENS0_5list3INS0_5valueIPS6_EENS_3 argILi1EEENSI_ILi2EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)),  !(_DWORD)result))
      {
        *(void *)a2 = v4;
      }

      else
      {
        *(void *)a2 = 0LL;
      }
    }
  }

  else
  {
    __int128 v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }

  return result;
}

void *sub_1000E07D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[0] = a2;
  v5[1] = a3;
  v5[2] = a4;
  return sub_1000E080C((uint64_t *)(a1 + 16), a1, v5);
}

void *sub_1000E080C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  uint64_t v6 = *a3;
  __int128 v5 = (uint64_t *)a3[1];
  v8[0] = 0LL;
  sub_1000080D0(v8, v5);
  sub_1000E087C(a2, v4, v6, v8);
  return sub_1000075F0(v8);
}

void sub_1000E0868( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1000E087C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *(void (**)(void *, uint64_t, void *, __n128))a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)(a2 + (v5 >> 1));
  if ((v5 & 1) != 0) {
    uint64_t v6 = *(void (**)(void *, uint64_t, void *, __n128))(*v7 + v6);
  }
  v10[0] = 0LL;
  __n128 v8 = sub_100007640((uint64_t)v10, a4);
  v6(v7, a3, v10, v8);
  return sub_1000075F0(v10);
}

void sub_1000E08E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_1000E08FC(uint64_t a1, pthread_mutex_t *a2, pthread_mutex_t *a3)
{
  __int128 v16 = 0uLL;
  sub_100010030(&v19, *(pthread_mutex_t **)(a1 + 24));
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    unsigned int v7 = atomic_load((unsigned int *)(v6 + 8));
    if (v7 == 1) {
      sub_100010440((uint64_t *)a1, &v19, 0, 1);
    }
  }

  sub_10008AE9C(&v16, (uint64_t *)a1);
  sub_10000F788(v21);
  sub_10000F8D8(&v19);
  LOBYTE(v19) = 0;
  v21[8] = (pthread_mutex_t *)10;
  v21[9] = (pthread_mutex_t *)&v20;
  v21[10] = 0LL;
  v21[11] = a2;
  v21[13] = 0LL;
  v21[14] = 0LL;
  v21[12] = a3;
  uint64_t v8 = *(void *)v16;
  v15[0] = (uint64_t)&v19;
  v15[1] = a1;
  void v15[2] = v8;
  uint64_t v9 = *(void *)(v16 + 16);
  *(void *)&__int128 v13 = *(void *)(v8 + 8);
  *((void *)&v13 + 1) = v8;
  *(void *)&__int128 v14 = &v19;
  *((void *)&v14 + 1) = v8;
  sub_1000E0C7C((uint64_t *)&v13);
  *(void *)&__int128 v11 = *(void *)v16;
  *((void *)&v11 + 1) = v11;
  *(void *)&__int128 v12 = &v19;
  *((void *)&v12 + 1) = v11;
  sub_1000E0C7C((uint64_t *)&v11);
  v18[0] = v13;
  v18[1] = v14;
  v17[0] = v11;
  v17[1] = v12;
  sub_1000E0AB0(v9, (uint64_t *)v18, v17);
  sub_1000E0F94(v15);
  sub_1000E10F8((uint64_t)&v19);
  return sub_10000F9EC((uint64_t *)&v16 + 1);
}

void sub_1000E0A68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32)
{
}

uint64_t *sub_1000E0AB0(uint64_t a1, uint64_t *a2, void *a3)
{
  while (*a2 != *a3)
  {
    sub_1000E0B00(a2);
    double result = sub_1000E0C40(a2);
  }

  return result;
}

uint64_t sub_1000E0B00(void *a1)
{
  uint64_t v2 = (_BYTE *)a1[2];
  if (!*v2)
  {
    sub_1000E0B8C((uint64_t)(v2 + 272), *a1 + 16LL);
    if (!*v2) {
      *uint64_t v2 = 1;
    }
  }

  return a1[2] + 1LL;
}

uint64_t sub_1000E0B8C(uint64_t a1, uint64_t a2)
{
  return sub_1000E0BC0((uint64_t)&v3, (void *)(*(void *)(*(void *)a2 + 32LL) + 24LL));
}

uint64_t sub_1000E0BC0(uint64_t a1, void *a2)
{
  return sub_1000E0BCC(a2);
}

uint64_t sub_1000E0BCC(void *a1)
{
  if (!*a1)
  {
    std::runtime_error::runtime_error(&v2, "call to empty boost::function");
    v2.__vftable = (std::runtime_error_vtbl *)&off_1002AD8D8;
    sub_10000706C(&v2);
  }

  return (*(uint64_t (**)(void *))((*a1 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 1);
}

void sub_1000E0C2C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
}

uint64_t *sub_1000E0C40(uint64_t *a1)
{
  *a1 = *(void *)(*a1 + 8);
  double result = sub_1000E0C7C(a1);
  char v3 = (_BYTE *)a1[2];
  if (*v3) {
    _BYTE *v3 = 0;
  }
  return result;
}

uint64_t *sub_1000E0C7C(uint64_t *result)
{
  uint64_t v1 = *result;
  if (*result != result[3])
  {
    std::runtime_error v2 = result;
    if (v1 == result[1]) {
      goto LABEL_12;
    }
    while (1)
    {
      sub_10008B464((uint64_t *)(v2[2] + 8), *(void *)(v2[2] + 264));
      sub_10000F810(v12, *(void *)(*v2 + 16));
      sub_1000E0E3C(*(uint64_t **)(*v2 + 16), v12, v2[2] + 8);
      uint64_t v3 = *(void *)(*v2 + 16);
      uint64_t v4 = v2[2];
      if (*(_BYTE *)(v3 + 24))
      {
        int v5 = *(_DWORD *)(v4 + 288);
        BOOL v6 = __CFADD__(v5, 1);
        int v7 = v5 + 1;
        if (v6) {
          goto LABEL_15;
        }
        *(_DWORD *)(v4 + 288) = v7;
      }

      else
      {
        int v8 = *(_DWORD *)(v4 + 292);
        BOOL v6 = __CFADD__(v8, 1);
        int v9 = v8 + 1;
        if (v6) {
LABEL_15:
        }
          __break(0x5500u);
        *(_DWORD *)(v4 + 292) = v9;
      }

      if (!sub_10008B410(v3)) {
        break;
      }
      sub_10000FE20(&v13);
      double result = sub_10000F8D8(v12);
      uint64_t v10 = v2[1];
      uint64_t v1 = *(void *)(*v2 + 8);
      *std::runtime_error v2 = v1;
      if (v1 == v10) {
        goto LABEL_12;
      }
    }

    sub_1000E0F2C(v2, v12, *v2);
    sub_10000FE20(&v13);
    double result = sub_10000F8D8(v12);
    uint64_t v1 = v2[1];
    if (*v2 == v1)
    {
LABEL_12:
      uint64_t v11 = v2[3];
      if (v11 != v1)
      {
        sub_10000F810(v12, *(void *)(v11 + 16));
        sub_1000E0F2C(v2, v12, v2[1]);
        sub_10000FE20(&v13);
        return sub_10000F8D8(v12);
      }
    }
  }

  return result;
}

void sub_1000E0E08(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_1000E0E3C(uint64_t *result, void *a2, uint64_t a3)
{
  uint64_t v3 = (_DWORD **)result[4];
  if (v3)
  {
    BOOL v6 = result;
    for (uint64_t i = *v3; i != v3[1]; i += 6)
    {
      sub_100012108(i, (uint64_t)v9);
      if (sub_100011134((uint64_t)i, (uint64_t)&v8))
      {
        sub_10000F6C4(v6, a2);
        return sub_1000122FC((uint64_t)v9);
      }

      sub_10008B4F8(a3, v9);
      double result = sub_1000122FC((uint64_t)v9);
      uint64_t v3 = (_DWORD **)v6[4];
    }
  }

  return result;
}

void sub_1000E0F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t *sub_1000E0F2C(void *a1, void *a2, uint64_t a3)
{
  a1[3] = a3;
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  if (v4 == a3) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = *(void *)(a3 + 16);
  }
  return sub_1000E0F4C(v3, a2, v5);
}

uint64_t *sub_1000E0F4C(uint64_t a1, void *a2, uint64_t a3)
{
  double result = *(uint64_t **)(a1 + 296);
  if (result) {
    double result = sub_10000FB70(result, a2);
  }
  *(void *)(a1 + 296) = a3;
  if (a3)
  {
    int v6 = *(_DWORD *)(a3 + 28);
    BOOL v7 = __CFADD__(v6, 1);
    int v8 = v6 + 1;
    if (v7) {
      __break(0x5500u);
    }
    else {
      *(_DWORD *)(a3 + 28) = v8;
    }
  }

  return result;
}

uint64_t *sub_1000E0F94(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 292) > *(_DWORD *)(*a1 + 288)) {
    sub_1000E0FD4(a1[1], a1[2]);
  }
  return a1;
}

void *sub_1000E0FD4(uint64_t a1, uint64_t a2)
{
  if (**(void **)a1 == a2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4 || (unsigned int v5 = atomic_load((unsigned int *)(v4 + 8)), v5 != 1))
    {
      int v6 = (uint64_t *)operator new(0x20uLL);
      sub_10001065C(v6, *(void *)a1, **(void **)a1);
      sub_10001029C((void *)a1, (uint64_t)v6);
    }

    int v8 = *(uint64_t **)(**(void **)a1 + 8LL);
    sub_100010338((uint64_t *)a1, v9, 0, &v8, 0);
  }

  sub_10000F788(&v10);
  return sub_10000F8D8(v9);
}

void sub_1000E10BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, ...)
{
}

uint64_t sub_1000E10F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 296);
  if (v2)
  {
    sub_10000F810(v4, v2);
    sub_10000FB70(*(uint64_t **)(a1 + 296), v4);
    sub_10000FE20(&v5);
    sub_10000F8D8(v4);
  }

  sub_10008BB48(a1 + 8);
  if (*(_BYTE *)a1) {
    *(_BYTE *)a1 = 0;
  }
  return a1;
}

void sub_1000E1190(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006EEC(a1);
}

uint64_t *sub_1000E119C(uint64_t a1, pthread_mutex_t *a2)
{
  __int128 v14 = 0uLL;
  sub_100010030(&v17, *(pthread_mutex_t **)(a1 + 24));
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    unsigned int v5 = atomic_load((unsigned int *)(v4 + 8));
    if (v5 == 1) {
      sub_10002F0D0((uint64_t *)a1, &v17, 0LL, 1);
    }
  }

  sub_10008AE9C(&v14, (uint64_t *)a1);
  sub_10000F788(v19);
  sub_10000F8D8(&v17);
  LOBYTE(v17) = 0;
  v19[8] = (pthread_mutex_t *)10;
  v19[9] = (pthread_mutex_t *)&v18;
  v19[10] = 0LL;
  v19[11] = a2;
  v19[12] = 0LL;
  v19[13] = 0LL;
  uint64_t v6 = *(void *)v14;
  v13[0] = (uint64_t)&v17;
  v13[1] = a1;
  void v13[2] = v6;
  uint64_t v7 = *(void *)(v14 + 16);
  *(void *)&__int128 v11 = *(void *)(v6 + 8);
  *((void *)&v11 + 1) = v6;
  *(void *)&__int128 v12 = &v17;
  *((void *)&v12 + 1) = v6;
  sub_1000E1508((uint64_t *)&v11);
  *(void *)&__int128 v9 = *(void *)v14;
  *((void *)&v9 + 1) = v9;
  *(void *)&__int128 v10 = &v17;
  *((void *)&v10 + 1) = v9;
  sub_1000E1508((uint64_t *)&v9);
  v16[0] = v11;
  v16[1] = v12;
  v15[0] = v9;
  v15[1] = v10;
  sub_1000E1340(v7, (uint64_t *)v16, v15);
  sub_1000E17B8(v13);
  sub_1000E191C((uint64_t)&v17);
  return sub_10000F9EC((uint64_t *)&v14 + 1);
}

void sub_1000E12F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31)
{
}

uint64_t *sub_1000E1340(uint64_t a1, uint64_t *a2, void *a3)
{
  while (*a2 != *a3)
  {
    sub_1000E1390(a2);
    double result = sub_1000E14CC(a2);
  }

  return result;
}

uint64_t sub_1000E1390(void *a1)
{
  uint64_t v2 = (_BYTE *)a1[2];
  if (!*v2)
  {
    sub_1000E141C((uint64_t)(v2 + 272), *a1 + 16LL);
    if (!*v2) {
      *uint64_t v2 = 1;
    }
  }

  return a1[2] + 1LL;
}

uint64_t sub_1000E141C(uint64_t a1, uint64_t a2)
{
  return sub_1000E144C((uint64_t)&v3, (void *)(*(void *)(*(void *)a2 + 32LL) + 24LL));
}

uint64_t sub_1000E144C(uint64_t a1, void *a2)
{
  return sub_1000E1458(a2);
}

uint64_t sub_1000E1458(void *a1)
{
  if (!*a1)
  {
    std::runtime_error::runtime_error(&v2, "call to empty boost::function");
    v2.__vftable = (std::runtime_error_vtbl *)&off_1002AD8D8;
    sub_10000706C(&v2);
  }

  return (*(uint64_t (**)(void *))((*a1 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 1);
}

void sub_1000E14B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
}

uint64_t *sub_1000E14CC(uint64_t *a1)
{
  *a1 = *(void *)(*a1 + 8);
  double result = sub_1000E1508(a1);
  char v3 = (_BYTE *)a1[2];
  if (*v3) {
    _BYTE *v3 = 0;
  }
  return result;
}

uint64_t *sub_1000E1508(uint64_t *result)
{
  uint64_t v1 = *result;
  if (*result != result[3])
  {
    std::runtime_error v2 = result;
    if (v1 == result[1]) {
      goto LABEL_12;
    }
    while (1)
    {
      sub_10008B464((uint64_t *)(v2[2] + 8), *(void *)(v2[2] + 264));
      sub_10000F810(v12, *(void *)(*v2 + 16));
      sub_1000E16C8(*(uint64_t **)(*v2 + 16), v12, v2[2] + 8);
      uint64_t v3 = *(void *)(*v2 + 16);
      uint64_t v4 = v2[2];
      if (*(_BYTE *)(v3 + 24))
      {
        int v5 = *(_DWORD *)(v4 + 280);
        BOOL v6 = __CFADD__(v5, 1);
        int v7 = v5 + 1;
        if (v6) {
          goto LABEL_15;
        }
        *(_DWORD *)(v4 + 280) = v7;
      }

      else
      {
        int v8 = *(_DWORD *)(v4 + 284);
        BOOL v6 = __CFADD__(v8, 1);
        int v9 = v8 + 1;
        if (v6) {
LABEL_15:
        }
          __break(0x5500u);
        *(_DWORD *)(v4 + 284) = v9;
      }

      if (!sub_10008B410(v3)) {
        break;
      }
      sub_10000FE20(&v13);
      double result = sub_10000F8D8(v12);
      uint64_t v10 = v2[1];
      uint64_t v1 = *(void *)(*v2 + 8);
      *std::runtime_error v2 = v1;
      if (v1 == v10) {
        goto LABEL_12;
      }
    }

    sub_10008B444(v2, v12, *v2);
    sub_10000FE20(&v13);
    double result = sub_10000F8D8(v12);
    uint64_t v1 = v2[1];
    if (*v2 == v1)
    {
LABEL_12:
      uint64_t v11 = v2[3];
      if (v11 != v1)
      {
        sub_10000F810(v12, *(void *)(v11 + 16));
        sub_10008B444(v2, v12, v2[1]);
        sub_10000FE20(&v13);
        return sub_10000F8D8(v12);
      }
    }
  }

  return result;
}

void sub_1000E1694(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_1000E16C8(uint64_t *result, void *a2, uint64_t a3)
{
  uint64_t v3 = (_DWORD **)result[4];
  if (v3)
  {
    BOOL v6 = result;
    for (uint64_t i = *v3; i != v3[1]; i += 6)
    {
      sub_100012108(i, (uint64_t)v9);
      if (sub_100011134((uint64_t)i, (uint64_t)&v8))
      {
        sub_10000F6C4(v6, a2);
        return sub_1000122FC((uint64_t)v9);
      }

      sub_10008B4F8(a3, v9);
      double result = sub_1000122FC((uint64_t)v9);
      uint64_t v3 = (_DWORD **)v6[4];
    }
  }

  return result;
}

void sub_1000E1794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t *sub_1000E17B8(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 284) > *(_DWORD *)(*a1 + 280)) {
    sub_1000E17F8(a1[1], a1[2]);
  }
  return a1;
}

void *sub_1000E17F8(uint64_t a1, uint64_t a2)
{
  if (**(void **)a1 == a2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4 || (unsigned int v5 = atomic_load((unsigned int *)(v4 + 8)), v5 != 1))
    {
      BOOL v6 = (uint64_t *)operator new(0x20uLL);
      sub_10002F2A0(v6, *(void *)a1, **(void **)a1);
      sub_10002EF2C((void *)a1, (uint64_t)v6, v7);
    }

    int v9 = *(uint64_t **)(**(void **)a1 + 8LL);
    sub_10002EFC8((uint64_t *)a1, v10, 0LL, &v9, 0);
  }

  sub_10000F788(&v11);
  return sub_10000F8D8(v10);
}

void sub_1000E18E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, ...)
{
}

uint64_t sub_1000E191C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 288);
  if (v2)
  {
    sub_10000F810(v4, v2);
    sub_10000FB70(*(uint64_t **)(a1 + 288), v4);
    sub_10000FE20(&v5);
    sub_10000F8D8(v4);
  }

  sub_10008BB48(a1 + 8);
  if (*(_BYTE *)a1) {
    *(_BYTE *)a1 = 0;
  }
  return a1;
}

void sub_1000E19B4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006EEC(a1);
}

uint64_t *sub_1000E19C0(uint64_t a1, pthread_mutex_t *a2)
{
  __int128 v14 = 0uLL;
  sub_100010030(&v17, *(pthread_mutex_t **)(a1 + 24));
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    unsigned int v5 = atomic_load((unsigned int *)(v4 + 8));
    if (v5 == 1) {
      sub_1000DCA5C(a1, &v17, 0, 1);
    }
  }

  sub_10008AE9C(&v14, (uint64_t *)a1);
  sub_10000F788(v19);
  sub_10000F8D8(&v17);
  LOBYTE(v17) = 0;
  v19[8] = (pthread_mutex_t *)10;
  v19[9] = (pthread_mutex_t *)&v18;
  v19[10] = 0LL;
  v19[11] = a2;
  v19[12] = 0LL;
  v19[13] = 0LL;
  uint64_t v6 = *(void *)v14;
  v13[0] = (uint64_t)&v17;
  v13[1] = a1;
  void v13[2] = v6;
  uint64_t v7 = *(void *)(v14 + 16);
  *(void *)&__int128 v11 = *(void *)(v6 + 8);
  *((void *)&v11 + 1) = v6;
  *(void *)&__int128 v12 = &v17;
  *((void *)&v12 + 1) = v6;
  sub_1000E1D2C((uint64_t *)&v11);
  *(void *)&__int128 v9 = *(void *)v14;
  *((void *)&v9 + 1) = v9;
  *(void *)&__int128 v10 = &v17;
  *((void *)&v10 + 1) = v9;
  sub_1000E1D2C((uint64_t *)&v9);
  v16[0] = v11;
  v16[1] = v12;
  v15[0] = v9;
  v15[1] = v10;
  sub_1000E1B64(v7, (uint64_t *)v16, v15);
  sub_1000E1FDC(v13);
  sub_1000E220C((uint64_t)&v17);
  return sub_10000F9EC((uint64_t *)&v14 + 1);
}

void sub_1000E1B1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31)
{
}

uint64_t *sub_1000E1B64(uint64_t a1, uint64_t *a2, void *a3)
{
  while (*a2 != *a3)
  {
    sub_1000E1BB4(a2);
    double result = sub_1000E1CF0(a2);
  }

  return result;
}

uint64_t sub_1000E1BB4(void *a1)
{
  uint64_t v2 = (_BYTE *)a1[2];
  if (!*v2)
  {
    sub_1000E1C40((uint64_t)(v2 + 272), *a1 + 16LL);
    if (!*v2) {
      *uint64_t v2 = 1;
    }
  }

  return a1[2] + 1LL;
}

uint64_t sub_1000E1C40(uint64_t a1, uint64_t a2)
{
  return sub_1000E1C70((uint64_t)&v3, (void *)(*(void *)(*(void *)a2 + 32LL) + 24LL));
}

uint64_t sub_1000E1C70(uint64_t a1, void *a2)
{
  return sub_1000E1C7C(a2);
}

uint64_t sub_1000E1C7C(void *a1)
{
  if (!*a1)
  {
    std::runtime_error::runtime_error(&v2, "call to empty boost::function");
    v2.__vftable = (std::runtime_error_vtbl *)&off_1002AD8D8;
    sub_10000706C(&v2);
  }

  return (*(uint64_t (**)(void *))((*a1 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 1);
}

void sub_1000E1CDC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
}

uint64_t *sub_1000E1CF0(uint64_t *a1)
{
  *a1 = *(void *)(*a1 + 8);
  double result = sub_1000E1D2C(a1);
  char v3 = (_BYTE *)a1[2];
  if (*v3) {
    _BYTE *v3 = 0;
  }
  return result;
}

uint64_t *sub_1000E1D2C(uint64_t *result)
{
  uint64_t v1 = *result;
  if (*result != result[3])
  {
    std::runtime_error v2 = result;
    if (v1 == result[1]) {
      goto LABEL_12;
    }
    while (1)
    {
      sub_10008B464((uint64_t *)(v2[2] + 8), *(void *)(v2[2] + 264));
      sub_10000F810(v12, *(void *)(*v2 + 16));
      sub_1000E1EEC(*(uint64_t **)(*v2 + 16), v12, v2[2] + 8);
      uint64_t v3 = *(void *)(*v2 + 16);
      uint64_t v4 = v2[2];
      if (*(_BYTE *)(v3 + 24))
      {
        int v5 = *(_DWORD *)(v4 + 280);
        BOOL v6 = __CFADD__(v5, 1);
        int v7 = v5 + 1;
        if (v6) {
          goto LABEL_15;
        }
        *(_DWORD *)(v4 + 280) = v7;
      }

      else
      {
        int v8 = *(_DWORD *)(v4 + 284);
        BOOL v6 = __CFADD__(v8, 1);
        int v9 = v8 + 1;
        if (v6) {
LABEL_15:
        }
          __break(0x5500u);
        *(_DWORD *)(v4 + 284) = v9;
      }

      if (!sub_10008B410(v3)) {
        break;
      }
      sub_10000FE20(&v13);
      double result = sub_10000F8D8(v12);
      uint64_t v10 = v2[1];
      uint64_t v1 = *(void *)(*v2 + 8);
      *std::runtime_error v2 = v1;
      if (v1 == v10) {
        goto LABEL_12;
      }
    }

    sub_10008B444(v2, v12, *v2);
    sub_10000FE20(&v13);
    double result = sub_10000F8D8(v12);
    uint64_t v1 = v2[1];
    if (*v2 == v1)
    {
LABEL_12:
      uint64_t v11 = v2[3];
      if (v11 != v1)
      {
        sub_10000F810(v12, *(void *)(v11 + 16));
        sub_10008B444(v2, v12, v2[1]);
        sub_10000FE20(&v13);
        return sub_10000F8D8(v12);
      }
    }
  }

  return result;
}

void sub_1000E1EB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_1000E1EEC(uint64_t *result, void *a2, uint64_t a3)
{
  uint64_t v3 = (_DWORD **)result[4];
  if (v3)
  {
    BOOL v6 = result;
    for (uint64_t i = *v3; i != v3[1]; i += 6)
    {
      sub_100012108(i, (uint64_t)v9);
      if (sub_100011134((uint64_t)i, (uint64_t)&v8))
      {
        sub_10000F6C4(v6, a2);
        return sub_1000122FC((uint64_t)v9);
      }

      sub_10008B4F8(a3, v9);
      double result = sub_1000122FC((uint64_t)v9);
      uint64_t v3 = (_DWORD **)v6[4];
    }
  }

  return result;
}

void sub_1000E1FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t *sub_1000E1FDC(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 284) > *(_DWORD *)(*a1 + 280)) {
    sub_1000E201C(a1[1], a1[2]);
  }
  return a1;
}

void *sub_1000E201C(uint64_t a1, uint64_t a2)
{
  if (**(void **)a1 == a2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4 || (unsigned int v5 = atomic_load((unsigned int *)(v4 + 8)), v5 != 1))
    {
      BOOL v6 = (uint64_t *)operator new(0x20uLL);
      sub_1000E2188(v6, *(void *)a1, **(void **)a1);
      sub_1000E2140((__int128 *)a1, (uint64_t)v6);
    }

    char v8 = *(uint64_t **)(**(void **)a1 + 8LL);
    sub_1000DC9A4(a1, v9, 0, &v8, 0);
  }

  sub_10000F788(&v10);
  return sub_10000F8D8(v9);
}

void sub_1000E2104( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, ...)
{
}

uint64_t *sub_1000E2140(__int128 *a1, uint64_t a2)
{
  __int128 v3 = *a1;
  *a1 = v5;
  __int128 v5 = v3;
  return sub_10000F9EC((uint64_t *)&v5 + 1);
}

uint64_t *sub_1000E2188(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  BOOL v6 = operator new(0x40uLL);
  sub_10004ACCC((uint64_t)v6, a3);
  sub_10004AE80(a1, (uint64_t)v6);
  uint64_t v7 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v7;
  if (v7)
  {
    char v8 = (unsigned int *)(v7 + 8);
    do
      unsigned int v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }

  return a1;
}

void sub_1000E21F8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000E220C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 288);
  if (v2)
  {
    sub_10000F810(v4, v2);
    sub_10000FB70(*(uint64_t **)(a1 + 288), v4);
    sub_10000FE20(&v5);
    sub_10000F8D8(v4);
  }

  sub_10008BB48(a1 + 8);
  if (*(_BYTE *)a1) {
    *(_BYTE *)a1 = 0;
  }
  return a1;
}

void sub_1000E22A4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006EEC(a1);
}

void sub_1000E22B0(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

  ;
}

void sub_1000E22D4()
{
  dispatch_queue_attr_t v0 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_USER_INITIATED, 0);
  __int128 v3 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v0);
  dispatch_queue_t v1 = dispatch_queue_create("awdmetricsclient.xpc.queue", v3);
  uint64_t v2 = (void *)qword_1002C97B0;
  qword_1002C97B0 = (uint64_t)v1;
}

id sub_1000E2328()
{
  return (id)qword_1002C97B0;
}

void sub_1000E2334(uint64_t *a1@<X0>, const char *a2@<X1>, const char *a3@<X2>, xpc_object_t *a4@<X8>)
{
  xpc_object_t v8 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_string(v8, "method", a3);
  xpc_dictionary_set_string(v8, "key", a2);
  if (*a1)
  {
    sub_10012C860(v8, a1);
  }

  else
  {
    sub_10000AC00(__p, "<empty>");
    unsigned int v9 = (char *)operator new(0x20uLL);
    *(void *)unsigned int v9 = &off_1002AE030;
    *(_OWORD *)(v9 + 8) = *(_OWORD *)__p;
    *((void *)v9 + 3) = v15;
    __p[0] = 0LL;
    __p[1] = 0LL;
    uint64_t v15 = 0LL;
    __int128 v16 = v9;
    sub_10012C860(v8, (uint64_t *)&v16);
    if (v16) {
      (*(void (**)(char *))(*(void *)v16 + 8LL))(v16);
    }
    if (SHIBYTE(v15) < 0) {
      operator delete(__p[0]);
    }
  }

  id v10 = v8;
  xpc_object_t v11 = v10;
  if (!v10) {
    xpc_object_t v11 = xpc_null_create();
  }

  id v12 = v11;
  uint64_t v13 = v12;
  *a4 = v12;
  if (v12)
  {
    if (xpc_get_type(v12) != (xpc_type_t)&_xpc_type_dictionary)
    {
      *a4 = xpc_null_create();
    }
  }

  else
  {
    *a4 = xpc_null_create();
  }
}

void sub_1000E24BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8LL))(a15);
  }
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1000E2508()
{
  id v0 = -[CtrInternalClient init:](objc_alloc(&OBJC_CLASS___CtrInternalClient), "init:", "internal AWDMetrics-Client");
  dispatch_queue_t v1 = (void *)qword_1002D1248;
  qword_1002D1248 = (uint64_t)v0;

  uint64_t v2 = (void *)qword_1002D1248;
  sub_10000AC00(v151, "Daemon:Version");
  id v3 = (id)qword_1002C97B0;
  id v150 = v3;
  [v2 setEventHandler:v151 InternalClientEventBlock:&stru_1002B2C10 dqueue:&v150];
  id v4 = v150;
  id v150 = 0LL;

  if (v152 < 0) {
    operator delete(v151[0]);
  }
  uint64_t v5 = (void *)qword_1002D1248;
  sub_10000AC00(v148, "vendor:version");
  id v6 = (id)qword_1002C97B0;
  id v147 = v6;
  [v5 setEventHandler:v148 InternalClientEventBlock:&stru_1002B2C30 dqueue:&v147];
  id v7 = v147;
  id v147 = 0LL;

  if (v149 < 0) {
    operator delete(v148[0]);
  }
  xpc_object_t v8 = (void *)qword_1002D1248;
  sub_10000AC00(v145, "NCP:Channel");
  id v9 = (id)qword_1002C97B0;
  id v144 = v9;
  [v8 setEventHandler:v145 InternalClientEventBlock:&stru_1002B2C50 dqueue:&v144];
  id v10 = v144;
  id v144 = 0LL;

  if (v146 < 0) {
    operator delete(v145[0]);
  }
  xpc_object_t v11 = (void *)qword_1002D1248;
  sub_10000AC00(v142, "vendor:MAC:packet:RSSIHistogram:AsValMap");
  v141[0] = _NSConcreteStackBlock;
  v141[1] = 3221225472LL;
  v141[2] = sub_1000E34D8;
  v141[3] = &unk_1002B2C70;
  v141[4] = 0LL;
  id v12 = (id)qword_1002C97B0;
  id v140 = v12;
  [v11 setEventHandler:v142 InternalClientEventBlock:v141 dqueue:&v140];
  id v13 = v140;
  id v140 = 0LL;

  if (v143 < 0) {
    operator delete(v142[0]);
  }
  __int128 v14 = (void *)qword_1002D1248;
  sub_10000AC00(__p, "vendor:MAC:packet:LQIHistogram:AsValMap");
  v137[0] = _NSConcreteStackBlock;
  v137[1] = 3221225472LL;
  v137[2] = sub_1000E35C0;
  v137[3] = &unk_1002B2C70;
  v137[4] = 0LL;
  id v15 = (id)qword_1002C97B0;
  id v136 = v15;
  [v14 setEventHandler:__p InternalClientEventBlock:v137 dqueue:&v136];
  id v16 = v136;
  id v136 = 0LL;

  if (v139 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v17 = (void *)qword_1002D1248;
  sub_10000AC00(v134, "vendor:MAC:packet:SizeHistogram:AsValMap");
  v133[0] = _NSConcreteStackBlock;
  v133[1] = 3221225472LL;
  v133[2] = sub_1000E36A8;
  v133[3] = &unk_1002B2C70;
  v133[4] = 0LL;
  id v18 = (id)qword_1002C97B0;
  id v132 = v18;
  [v17 setEventHandler:v134 InternalClientEventBlock:v133 dqueue:&v132];
  id v19 = v132;
  id v132 = 0LL;

  if (v135 < 0) {
    operator delete(v134[0]);
  }
  uint64_t v20 = (void *)qword_1002D1248;
  sub_10000AC00(v130, "TPC:FrameTxPowerHistogram");
  v129[0] = _NSConcreteStackBlock;
  v129[1] = 3221225472LL;
  v129[2] = sub_1000E3790;
  v129[3] = &unk_1002B2C70;
  v129[4] = 0LL;
  id v21 = (id)qword_1002C97B0;
  id v128 = v21;
  [v20 setEventHandler:v130 InternalClientEventBlock:v129 dqueue:&v128];
  id v22 = v128;
  id v128 = 0LL;

  if (v131 < 0) {
    operator delete(v130[0]);
  }
  uint64_t v23 = (void *)qword_1002D1248;
  sub_10000AC00(v126, "TPC:NeighborTxPowerHistogram");
  v125[0] = _NSConcreteStackBlock;
  v125[1] = 3221225472LL;
  v125[2] = sub_1000E3878;
  v125[3] = &unk_1002B2C70;
  v125[4] = 0LL;
  id v24 = (id)qword_1002C97B0;
  id v124 = v24;
  [v23 setEventHandler:v126 InternalClientEventBlock:v125 dqueue:&v124];
  id v25 = v124;
  id v124 = 0LL;

  if (v127 < 0) {
    operator delete(v126[0]);
  }
  uint64_t v26 = (void *)qword_1002D1248;
  sub_10000AC00(v122, "TPC:NeighborEnergySavingsFactorHistogram");
  v121[0] = _NSConcreteStackBlock;
  v121[1] = 3221225472LL;
  v121[2] = sub_1000E3960;
  v121[3] = &unk_1002B2C70;
  v121[4] = 0LL;
  id v27 = (id)qword_1002C97B0;
  id v120 = v27;
  [v26 setEventHandler:v122 InternalClientEventBlock:v121 dqueue:&v120];
  id v28 = v120;
  id v120 = 0LL;

  if (v123 < 0) {
    operator delete(v122[0]);
  }
  char v29 = (void *)qword_1002D1248;
  sub_10000AC00(v118, "vendor:radio:stats:asvalmap");
  v117[0] = _NSConcreteStackBlock;
  v117[1] = 3221225472LL;
  v117[2] = sub_1000E3A48;
  v117[3] = &unk_1002B2C70;
  v117[4] = 0LL;
  id v30 = (id)qword_1002C97B0;
  id v116 = v30;
  [v29 setEventHandler:v118 InternalClientEventBlock:v117 dqueue:&v116];
  id v31 = v116;
  id v116 = 0LL;

  if (v119 < 0) {
    operator delete(v118[0]);
  }
  uint64_t v32 = (void *)qword_1002D1248;
  sub_10000AC00(v114, "vendor:radio:counters:asvalmap");
  v113[0] = _NSConcreteStackBlock;
  v113[1] = 3221225472LL;
  v113[2] = sub_1000E3B30;
  v113[3] = &unk_1002B2C70;
  v113[4] = 0LL;
  id v33 = (id)qword_1002C97B0;
  id v112 = v33;
  [v32 setEventHandler:v114 InternalClientEventBlock:v113 dqueue:&v112];
  id v34 = v112;
  id v112 = 0LL;

  if (v115 < 0) {
    operator delete(v114[0]);
  }
  __darwin_time_t v35 = (void *)qword_1002D1248;
  sub_10000AC00(v110, "vendor:openthread:radio:counters:AsValMap");
  v109[0] = _NSConcreteStackBlock;
  v109[1] = 3221225472LL;
  v109[2] = sub_1000E3C18;
  v109[3] = &unk_1002B2C70;
  v109[4] = 0LL;
  id v36 = (id)qword_1002C97B0;
  id v108 = v36;
  [v35 setEventHandler:v110 InternalClientEventBlock:v109 dqueue:&v108];
  id v37 = v108;
  id v108 = 0LL;

  if (v111 < 0) {
    operator delete(v110[0]);
  }
  uint64_t v38 = (void *)qword_1002D1248;
  sub_10000AC00(v106, "NCP:Counter:AllMac:AsValMap");
  v105[0] = _NSConcreteStackBlock;
  v105[1] = 3221225472LL;
  v105[2] = sub_1000E3D00;
  v105[3] = &unk_1002B2C70;
  v105[4] = 0LL;
  id v39 = (id)qword_1002C97B0;
  id v104 = v39;
  [v38 setEventHandler:v106 InternalClientEventBlock:v105 dqueue:&v104];
  id v40 = v104;
  id v104 = 0LL;

  if (v107 < 0) {
    operator delete(v106[0]);
  }
  int v41 = (void *)qword_1002D1248;
  sub_10000AC00(v102, "NCP:MacRetryHistogram:AsValMap");
  v101[0] = _NSConcreteStackBlock;
  v101[1] = 3221225472LL;
  v101[2] = sub_1000E3DE8;
  v101[3] = &unk_1002B2C70;
  v101[4] = 0LL;
  id v42 = (id)qword_1002C97B0;
  id v100 = v42;
  [v41 setEventHandler:v102 InternalClientEventBlock:v101 dqueue:&v100];
  id v43 = v100;
  id v100 = 0LL;

  if (v103 < 0) {
    operator delete(v102[0]);
  }
  uint64_t v44 = (void *)qword_1002D1248;
  sub_10000AC00(v98, "vendor:cca:energydetected:histogram:AsValMap");
  v97[0] = _NSConcreteStackBlock;
  v97[1] = 3221225472LL;
  v97[2] = sub_1000E3ED0;
  _OWORD v97[3] = &unk_1002B2C70;
  v97[4] = 0LL;
  id v45 = (id)qword_1002C97B0;
  id v96 = v45;
  [v44 setEventHandler:v98 InternalClientEventBlock:v97 dqueue:&v96];
  id v46 = v96;
  id v96 = 0LL;

  if (v99 < 0) {
    operator delete(v98[0]);
  }
  uint64_t v47 = (void *)qword_1002D1248;
  sub_10000AC00(v94, "vendor:csma:backoff:histogram:AsValMap");
  v93[0] = _NSConcreteStackBlock;
  v93[1] = 3221225472LL;
  v93[2] = sub_1000E3FB8;
  v93[3] = &unk_1002B2C70;
  v93[4] = 0LL;
  id v48 = (id)qword_1002C97B0;
  id v92 = v48;
  [v47 setEventHandler:v94 InternalClientEventBlock:v93 dqueue:&v92];
  id v49 = v92;
  id v92 = 0LL;

  if (v95 < 0) {
    operator delete(v94[0]);
  }
  uint64_t v50 = (void *)qword_1002D1248;
  sub_10000AC00(v90, "vendor:coex:counters:asvalmap");
  v89[0] = _NSConcreteStackBlock;
  v89[1] = 3221225472LL;
  v89[2] = sub_1000E40A0;
  v89[3] = &unk_1002B2C70;
  v89[4] = 0LL;
  id v51 = (id)qword_1002C97B0;
  id v88 = v51;
  [v50 setEventHandler:v90 InternalClientEventBlock:v89 dqueue:&v88];
  id v52 = v88;
  id v88 = 0LL;

  if (v91 < 0) {
    operator delete(v90[0]);
  }
  uint64_t v53 = (void *)qword_1002D1248;
  sub_10000AC00(v86, "vendor:coex:histograms:asvalmap");
  v85[0] = _NSConcreteStackBlock;
  v85[1] = 3221225472LL;
  v85[2] = sub_1000E4188;
  v85[3] = &unk_1002B2C70;
  v85[4] = 0LL;
  id v54 = (id)qword_1002C97B0;
  id v84 = v54;
  [v53 setEventHandler:v86 InternalClientEventBlock:v85 dqueue:&v84];
  id v55 = v84;
  id v84 = 0LL;

  if (v87 < 0) {
    operator delete(v86[0]);
  }
  uint64_t v56 = (void *)qword_1002D1248;
  sub_10000AC00(v82, "NCP:Counter:Thread:Mle:AsValMap");
  v81[0] = _NSConcreteStackBlock;
  v81[1] = 3221225472LL;
  v81[2] = sub_1000E4270;
  v81[3] = &unk_1002B2C70;
  v81[4] = 0LL;
  id v57 = (id)qword_1002C97B0;
  id v80 = v57;
  [v56 setEventHandler:v82 InternalClientEventBlock:v81 dqueue:&v80];
  id v58 = v80;
  id v80 = 0LL;

  if (v83 < 0) {
    operator delete(v82[0]);
  }
  std::string v59 = (void *)qword_1002D1248;
  sub_10000AC00(v78, "NCP:Counter:AllIPv6:AsValMap");
  v77[0] = _NSConcreteStackBlock;
  v77[1] = 3221225472LL;
  v77[2] = sub_1000E4358;
  v77[3] = &unk_1002B2C70;
  v77[4] = 0LL;
  id v60 = (id)qword_1002C97B0;
  id v76 = v60;
  [v59 setEventHandler:v78 InternalClientEventBlock:v77 dqueue:&v76];
  id v61 = v76;
  id v76 = 0LL;

  if (v79 < 0) {
    operator delete(v78[0]);
  }
  uint64_t v62 = (void *)qword_1002D1248;
  sub_10000AC00(v74, "vendor:neighbor:count:histogram");
  v73[0] = _NSConcreteStackBlock;
  v73[1] = 3221225472LL;
  v73[2] = sub_1000E4440;
  v73[3] = &unk_1002B2C70;
  v73[4] = 0LL;
  id v63 = (id)qword_1002C97B0;
  id v72 = v63;
  [v62 setEventHandler:v74 InternalClientEventBlock:v73 dqueue:&v72];
  id v64 = v72;
  id v72 = 0LL;

  if (v75 < 0) {
    operator delete(v74[0]);
  }
  int v65 = (void *)qword_1002D1248;
  sub_10000AC00(v70, "vendor:neighbor:count:histogram:AsValMap");
  v69[0] = _NSConcreteStackBlock;
  v69[1] = 3221225472LL;
  v69[2] = sub_1000E4528;
  v69[3] = &unk_1002B2C70;
  v69[4] = 0LL;
  id v66 = (id)qword_1002C97B0;
  id v68 = v66;
  [v65 setEventHandler:v70 InternalClientEventBlock:v69 dqueue:&v68];
  id v67 = v68;
  id v68 = 0LL;

  if (v71 < 0) {
    operator delete(v70[0]);
  }
}

void sub_1000E3024( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  id v22 = v21;
  sub_1000E33BC(&a10);

  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void sub_1000E3348(id a1, any a2)
{
  uint64_t v2 = *(void *)a2.var0;
  if (*(void *)a2.var0) {
    uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  }
  uint64_t v3 = v2;
  sub_100149088(&v3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
}

void sub_1000E339C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

id *sub_1000E33BC(id *a1)
{
  id v2 = *a1;
  *a1 = 0LL;

  return a1;
}

void sub_1000E33F0(id a1, any a2)
{
  uint64_t v2 = *(void *)a2.var0;
  if (*(void *)a2.var0) {
    uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  }
  uint64_t v3 = v2;
  sub_1001490CC(&v3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
}

void sub_1000E3444( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000E3464(id a1, any a2)
{
  uint64_t v2 = *(void *)a2.var0;
  if (*(void *)a2.var0) {
    uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  }
  uint64_t v3 = v2;
  sub_100149110(&v3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
}

void sub_1000E34B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000E34D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  uint64_t v8 = v3;
  sub_1000E2334(&v8, "vendor:MAC:packet:RSSIHistogram:AsValMap", "property_changed", &v9);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  v7[0] = &v9;
  v7[1] = "value";
  xpc_object_t v4 = sub_1000A9F60((uint64_t)v7);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_100149BB4(v5, *(void **)(a1 + 32));

  xpc_object_t v6 = v9;
  xpc_object_t v9 = 0LL;
}

void sub_1000E3584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  sub_1000089BC((xpc_object_t *)va);
  _Unwind_Resume(a1);
}

void sub_1000E35C0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  uint64_t v8 = v3;
  sub_1000E2334(&v8, "vendor:MAC:packet:LQIHistogram:AsValMap", "property_changed", &v9);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  v7[0] = &v9;
  v7[1] = "value";
  xpc_object_t v4 = sub_1000A9F60((uint64_t)v7);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_10014AB44(v5, *(void **)(a1 + 32));

  xpc_object_t v6 = v9;
  xpc_object_t v9 = 0LL;
}

void sub_1000E366C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  sub_1000089BC((xpc_object_t *)va);
  _Unwind_Resume(a1);
}

void sub_1000E36A8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  uint64_t v8 = v3;
  sub_1000E2334(&v8, "vendor:MAC:packet:SizeHistogram:AsValMap", "property_changed", &v9);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  v7[0] = &v9;
  v7[1] = "value";
  xpc_object_t v4 = sub_1000A9F60((uint64_t)v7);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_10014AF2C(v5, *(void **)(a1 + 32));

  xpc_object_t v6 = v9;
  xpc_object_t v9 = 0LL;
}

void sub_1000E3754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  sub_1000089BC((xpc_object_t *)va);
  _Unwind_Resume(a1);
}

void sub_1000E3790(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  uint64_t v8 = v3;
  sub_1000E2334(&v8, "TPC:FrameTxPowerHistogram", "property_changed", &v9);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  v7[0] = &v9;
  v7[1] = "value";
  xpc_object_t v4 = sub_1000A9F60((uint64_t)v7);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_10014C1E4(v5, *(void **)(a1 + 32));

  xpc_object_t v6 = v9;
  xpc_object_t v9 = 0LL;
}

void sub_1000E383C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  sub_1000089BC((xpc_object_t *)va);
  _Unwind_Resume(a1);
}

void sub_1000E3878(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  uint64_t v8 = v3;
  sub_1000E2334(&v8, "TPC:NeighborTxPowerHistogram", "property_changed", &v9);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  v7[0] = &v9;
  v7[1] = "value";
  xpc_object_t v4 = sub_1000A9F60((uint64_t)v7);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_10014C5C8(v5, *(void **)(a1 + 32));

  xpc_object_t v6 = v9;
  xpc_object_t v9 = 0LL;
}

void sub_1000E3924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  sub_1000089BC((xpc_object_t *)va);
  _Unwind_Resume(a1);
}

void sub_1000E3960(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  uint64_t v8 = v3;
  sub_1000E2334(&v8, "TPC:NeighborEnergySavingsFactorHistogram", "property_changed", &v9);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  v7[0] = &v9;
  v7[1] = "value";
  xpc_object_t v4 = sub_1000A9F60((uint64_t)v7);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_10014C9B0(v5, *(void **)(a1 + 32));

  xpc_object_t v6 = v9;
  xpc_object_t v9 = 0LL;
}

void sub_1000E3A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  sub_1000089BC((xpc_object_t *)va);
  _Unwind_Resume(a1);
}

void sub_1000E3A48(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  uint64_t v8 = v3;
  sub_1000E2334(&v8, "vendor:radio:stats:asvalmap", "property_changed", &v9);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  v7[0] = &v9;
  v7[1] = "value";
  xpc_object_t v4 = sub_1000A9F60((uint64_t)v7);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_10014D210(v5, *(void **)(a1 + 32));

  xpc_object_t v6 = v9;
  xpc_object_t v9 = 0LL;
}

void sub_1000E3AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  sub_1000089BC((xpc_object_t *)va);
  _Unwind_Resume(a1);
}

void sub_1000E3B30(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  uint64_t v8 = v3;
  sub_1000E2334(&v8, "vendor:radio:counters:asvalmap", "property_changed", &v9);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  v7[0] = &v9;
  v7[1] = "value";
  xpc_object_t v4 = sub_1000A9F60((uint64_t)v7);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_10014CD5C(v5, *(void **)(a1 + 32));

  xpc_object_t v6 = v9;
  xpc_object_t v9 = 0LL;
}

void sub_1000E3BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  sub_1000089BC((xpc_object_t *)va);
  _Unwind_Resume(a1);
}

void sub_1000E3C18(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  uint64_t v8 = v3;
  sub_1000E2334(&v8, "vendor:openthread:radio:counters:AsValMap", "property_changed", &v9);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  v7[0] = &v9;
  v7[1] = "value";
  xpc_object_t v4 = sub_1000A9F60((uint64_t)v7);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_10014DA24(v5, *(void **)(a1 + 32));

  xpc_object_t v6 = v9;
  xpc_object_t v9 = 0LL;
}

void sub_1000E3CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  sub_1000089BC((xpc_object_t *)va);
  _Unwind_Resume(a1);
}

void sub_1000E3D00(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  uint64_t v8 = v3;
  sub_1000E2334(&v8, "NCP:Counter:AllMac:AsValMap", "property_changed", &v9);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  v7[0] = &v9;
  v7[1] = "value";
  xpc_object_t v4 = sub_1000A9F60((uint64_t)v7);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_10015132C(v5, *(void **)(a1 + 32));

  xpc_object_t v6 = v9;
  xpc_object_t v9 = 0LL;
}

void sub_1000E3DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  sub_1000089BC((xpc_object_t *)va);
  _Unwind_Resume(a1);
}

void sub_1000E3DE8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  uint64_t v8 = v3;
  sub_1000E2334(&v8, "NCP:MacRetryHistogram:AsValMap", "property_changed", &v9);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  v7[0] = &v9;
  v7[1] = "value";
  xpc_object_t v4 = sub_1000A9F60((uint64_t)v7);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_10014FA10(v5, *(void **)(a1 + 32));

  xpc_object_t v6 = v9;
  xpc_object_t v9 = 0LL;
}

void sub_1000E3E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  sub_1000089BC((xpc_object_t *)va);
  _Unwind_Resume(a1);
}

void sub_1000E3ED0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  uint64_t v8 = v3;
  sub_1000E2334(&v8, "vendor:cca:energydetected:histogram:AsValMap", "property_changed", &v9);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  v7[0] = &v9;
  v7[1] = "value";
  xpc_object_t v4 = sub_1000A9F60((uint64_t)v7);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_100150798(v5, *(void **)(a1 + 32));

  xpc_object_t v6 = v9;
  xpc_object_t v9 = 0LL;
}

void sub_1000E3F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  sub_1000089BC((xpc_object_t *)va);
  _Unwind_Resume(a1);
}

void sub_1000E3FB8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  uint64_t v8 = v3;
  sub_1000E2334(&v8, "vendor:csma:backoff:histogram:AsValMap", "property_changed", &v9);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  v7[0] = &v9;
  v7[1] = "value";
  xpc_object_t v4 = sub_1000A9F60((uint64_t)v7);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_100150F44(v5, *(void **)(a1 + 32));

  xpc_object_t v6 = v9;
  xpc_object_t v9 = 0LL;
}

void sub_1000E4064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  sub_1000089BC((xpc_object_t *)va);
  _Unwind_Resume(a1);
}

void sub_1000E40A0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  uint64_t v8 = v3;
  sub_1000E2334(&v8, "vendor:coex:counters:asvalmap", "property_changed", &v9);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  v7[0] = &v9;
  v7[1] = "value";
  xpc_object_t v4 = sub_1000A9F60((uint64_t)v7);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_100152F7C(v5, *(void **)(a1 + 32));

  xpc_object_t v6 = v9;
  xpc_object_t v9 = 0LL;
}

void sub_1000E414C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  sub_1000089BC((xpc_object_t *)va);
  _Unwind_Resume(a1);
}

void sub_1000E4188(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  uint64_t v8 = v3;
  sub_1000E2334(&v8, "vendor:coex:histograms:asvalmap", "property_changed", &v9);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  v7[0] = &v9;
  v7[1] = "value";
  xpc_object_t v4 = sub_1000A9F60((uint64_t)v7);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_100152534(v5, *(void **)(a1 + 32));

  xpc_object_t v6 = v9;
  xpc_object_t v9 = 0LL;
}

void sub_1000E4234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  sub_1000089BC((xpc_object_t *)va);
  _Unwind_Resume(a1);
}

void sub_1000E4270(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  uint64_t v8 = v3;
  sub_1000E2334(&v8, "NCP:Counter:Thread:Mle:AsValMap", "property_changed", &v9);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  v7[0] = &v9;
  v7[1] = "value";
  xpc_object_t v4 = sub_1000A9F60((uint64_t)v7);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_100153B70(v5, *(void **)(a1 + 32));

  xpc_object_t v6 = v9;
  xpc_object_t v9 = 0LL;
}

void sub_1000E431C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  sub_1000089BC((xpc_object_t *)va);
  _Unwind_Resume(a1);
}

void sub_1000E4358(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  uint64_t v8 = v3;
  sub_1000E2334(&v8, "NCP:Counter:AllIPv6:AsValMap", "property_changed", &v9);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  v7[0] = &v9;
  v7[1] = "value";
  xpc_object_t v4 = sub_1000A9F60((uint64_t)v7);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_100154360(v5, *(void **)(a1 + 32));

  xpc_object_t v6 = v9;
  xpc_object_t v9 = 0LL;
}

void sub_1000E4404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  sub_1000089BC((xpc_object_t *)va);
  _Unwind_Resume(a1);
}

void sub_1000E4440(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  uint64_t v8 = v3;
  sub_1000E2334(&v8, "vendor:neighbor:count:histogram", "property_changed", &v9);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  v7[0] = &v9;
  v7[1] = "value";
  xpc_object_t v4 = sub_1000A9F60((uint64_t)v7);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_100154360(v5, *(void **)(a1 + 32));

  xpc_object_t v6 = v9;
  xpc_object_t v9 = 0LL;
}

void sub_1000E44EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  sub_1000089BC((xpc_object_t *)va);
  _Unwind_Resume(a1);
}

void sub_1000E4528(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  uint64_t v8 = v3;
  sub_1000E2334(&v8, "vendor:neighbor:count:histogram:AsValMap", "property_changed", &v9);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  v7[0] = &v9;
  v7[1] = "value";
  xpc_object_t v4 = sub_1000A9F60((uint64_t)v7);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_100155324(v5, *(void **)(a1 + 32));

  xpc_object_t v6 = v9;
  xpc_object_t v9 = 0LL;
}

void sub_1000E45D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  sub_1000089BC((xpc_object_t *)va);
  _Unwind_Resume(a1);
}

id sub_1000E4610()
{
  return (id)qword_1002D1248;
}

void sub_1000E461C()
{
  int v14 = 3;
  __int128 v15 = *(_OWORD *)__p;
  uint64_t v16 = v12;
  id v0 = (void *)qword_1002D1248;
  uint64_t v13 = 0LL;
  sub_10000AC00(v9, "Daemon:Version");
  if (v0)
  {
    [v0 getProperty:v9 output:&v13];
  }

  else
  {
    *(_OWORD *)std::string __p = 0u;
    __int128 v12 = 0u;
  }

  sub_1000E4898(&v14, (uint64_t)__p);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[1]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (!v14)
  {
    uint64_t v1 = v13;
    if (v13) {
      uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 24LL))(v13);
    }
    uint64_t v8 = v1;
    sub_100149088(&v8);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
    }
  }

  uint64_t v7 = 0LL;
  uint64_t v2 = (void *)qword_1002D1248;
  sub_10000AC00(v5, "vendor:version");
  if (v2)
  {
    [v2 getProperty:v5 output:&v7];
  }

  else
  {
    *(_OWORD *)std::string __p = 0u;
    __int128 v12 = 0u;
  }

  sub_1000E4898(&v14, (uint64_t)__p);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[1]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (!v14)
  {
    uint64_t v3 = v7;
    if (v7) {
      uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 24LL))(v7);
    }
    uint64_t v4 = v3;
    sub_1001490CC(&v4);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
  }

  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete((void *)v15);
  }
}

void sub_1000E47E8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8LL))(a17);
  }
  uint64_t v26 = *(void *)(v24 - 56);
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8LL))(v26);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_1000E4898(_DWORD *a1, uint64_t a2)
{
  *a1 = *(_DWORD *)a2;
  sub_100014D08((uint64_t)(a1 + 2), (__int128 *)(a2 + 8));
  return a1;
}

void sub_1000E48C4(void *a1)
{
  int v52 = 3;
  __int128 v53 = *(_OWORD *)__p;
  uint64_t v54 = v49;
  id v51 = xpc_null_create();
  id v2 = a1;
  uint64_t v3 = objc_opt_new(&OBJC_CLASS___AWDHeaderInfoS);
  [v2 setHeader:v3];

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 header]);
  sub_100148FC0(v4);

  uint64_t v5 = objc_opt_new(&OBJC_CLASS___AWDCountersEngagementS);
  [v2 setSCntrsEngagement:v5];

  uint64_t v50 = 0LL;
  char v6 = (void *)qword_1002D1248;
  sub_10000AC00(v46, "vendor:neighbor:count:histogram:AsValMap");
  if (v6)
  {
    [v6 getProperty:v46 output:&v50];
  }

  else
  {
    *(_OWORD *)std::string __p = 0u;
    __int128 v49 = 0u;
  }

  sub_1000E4898(&v52, (uint64_t)__p);
  if (SHIBYTE(v49) < 0) {
    operator delete(__p[1]);
  }
  if (v47 < 0) {
    operator delete(v46[0]);
  }
  uint64_t v7 = v50;
  if (v50) {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v50 + 24LL))(v50);
  }
  uint64_t v45 = v7;
  sub_1000E2334(&v45, "vendor:neighbor:count:histogram:AsValMap", "PropGet", __p);
  uint64_t v8 = __p[0];
  xpc_object_t v9 = xpc_null_create();

  id v10 = v51;
  id v51 = v8;

  if (v45) {
    (*(void (**)(uint64_t))(*(void *)v45 + 8LL))(v45);
  }
  if (!v52)
  {
    __p[0] = &v51;
    __p[1] = "value";
    xpc_object_t v11 = sub_1000A9F60((uint64_t)__p);
    __int128 v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v2 sCntrsEngagement]);
    sub_100155324(v12, v13);
  }

  int v14 = objc_opt_new(&OBJC_CLASS___AWDCountersDiscoveryJoinS);
  [v2 setSCntrsDiscoveryJoin:v14];

  uint64_t v44 = 0LL;
  __int128 v15 = (void *)qword_1002D1248;
  sub_10000AC00(v42, "vendor:joiner:RSSIHistogram:AsValMap");
  if (v15)
  {
    [v15 getProperty:v42 output:&v44];
  }

  else
  {
    *(_OWORD *)std::string __p = 0u;
    __int128 v49 = 0u;
  }

  sub_1000E4898(&v52, (uint64_t)__p);
  if (SHIBYTE(v49) < 0) {
    operator delete(__p[1]);
  }
  if (v43 < 0) {
    operator delete(v42[0]);
  }
  uint64_t v16 = v44;
  if (v44) {
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v44 + 24LL))(v44);
  }
  uint64_t v41 = v16;
  sub_1000E2334(&v41, "vendor:joiner:RSSIHistogram:AsValMap", "PropGet", __p);
  uint64_t v17 = __p[0];
  xpc_object_t v18 = xpc_null_create();

  id v19 = v51;
  id v51 = v17;

  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 8LL))(v41);
  }
  if (!v52)
  {
    __p[0] = &v51;
    __p[1] = "value";
    xpc_object_t v20 = sub_1000A9F60((uint64_t)__p);
    id v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    id v22 = (void *)objc_claimAutoreleasedReturnValue([v2 sCntrsDiscoveryJoin]);
    sub_1001494F4(v21, v22);
  }

  uint64_t v23 = objc_opt_new(&OBJC_CLASS___AWDCountersJoinerS);
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v2 sCntrsDiscoveryJoin]);
  [v24 setSCntrsJoiner:v23];

  id v25 = (void *)objc_claimAutoreleasedReturnValue([v2 sCntrsDiscoveryJoin]);
  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v25 sCntrsJoiner]);
  sub_10014915C(v26);

  id v27 = objc_opt_new(&OBJC_CLASS___AWDCountersReachabilityS);
  [v2 setSCntrsReachability:v27];

  uint64_t v40 = 0LL;
  id v28 = (void *)qword_1002D1248;
  sub_10000AC00(v38, "vendor:linkloss:counters:AsValMap");
  if (v28)
  {
    [v28 getProperty:v38 output:&v40];
  }

  else
  {
    *(_OWORD *)std::string __p = 0u;
    __int128 v49 = 0u;
  }

  sub_1000E4898(&v52, (uint64_t)__p);
  if (SHIBYTE(v49) < 0) {
    operator delete(__p[1]);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v29 = v40;
  if (v40) {
    uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 24LL))(v40);
  }
  uint64_t v37 = v29;
  sub_1000E2334(&v37, "vendor:linkloss:counters:AsValMap", "PropGet", __p);
  id v30 = __p[0];
  xpc_object_t v31 = xpc_null_create();

  id v32 = v51;
  id v51 = v30;

  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8LL))(v37);
  }
  if (!v52)
  {
    __p[0] = &v51;
    __p[1] = "value";
    xpc_object_t v33 = sub_1000A9F60((uint64_t)__p);
    id v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
    __darwin_time_t v35 = (void *)objc_claimAutoreleasedReturnValue([v2 sCntrsReachability]);
    sub_1001498C4(v34, v35);
  }

  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8LL))(v40);
  }
  if (v44) {
    (*(void (**)(uint64_t))(*(void *)v44 + 8LL))(v44);
  }
  if (v50) {
    (*(void (**)(uint64_t))(*(void *)v50 + 8LL))(v50);
  }

  id v36 = v51;
  id v51 = 0LL;

  if (SHIBYTE(v54) < 0) {
    operator delete((void *)v53);
  }
}

void sub_1000E4DEC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31)
{
  __darwin_time_t v35 = v32;

  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8LL))(a16);
  }
  if (a24) {
    (*(void (**)(uint64_t))(*(void *)a24 + 8LL))(a24);
  }
  uint64_t v37 = *(void *)(v34 - 80);
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8LL))(v37);
  }

  sub_1000089BC((xpc_object_t *)(v34 - 72));
  _Unwind_Resume(a1);
}

void sub_1000E4F9C(void *a1)
{
  int v108 = 3;
  __int128 v109 = v104;
  uint64_t v110 = v105;
  id v107 = xpc_null_create();
  id v2 = a1;
  uint64_t v3 = objc_opt_new(&OBJC_CLASS___AWDHeaderInfoS);
  [v2 setHeader:v3];

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 header]);
  sub_100148FC0(v4);

  uint64_t v5 = objc_opt_new(&OBJC_CLASS___AWDCountersNetworkS);
  [v2 setSCntrsNetwork:v5];

  uint64_t v106 = 0LL;
  char v6 = (void *)qword_1002D1248;
  sub_10000AC00(v102, "vendor:MAC:packet:RSSIHistogram:AsValMap");
  if (v6)
  {
    [v6 getProperty:v102 output:&v106];
  }

  else
  {
    __int128 v104 = 0u;
    __int128 v105 = 0u;
  }

  sub_1000E4898(&v108, (uint64_t)&v104);
  if (SHIBYTE(v105) < 0) {
    operator delete(*((void **)&v104 + 1));
  }
  if (v103 < 0) {
    operator delete(v102[0]);
  }
  uint64_t v7 = v106;
  if (v106) {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v106 + 24LL))(v106);
  }
  uint64_t v101 = v7;
  sub_1000E2334(&v101, "vendor:MAC:packet:RSSIHistogram:AsValMap", "PropGet", (xpc_object_t *)&v104);
  id v8 = (id)v104;
  xpc_object_t v9 = xpc_null_create();

  id v10 = v107;
  id v107 = v8;

  if (v101) {
    (*(void (**)(uint64_t))(*(void *)v101 + 8LL))(v101);
  }
  if (!v108)
  {
    *(void *)&__int128 v104 = &v107;
    *((void *)&v104 + 1) = "value";
    xpc_object_t v11 = sub_1000A9F60((uint64_t)&v104);
    __int128 v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v2 sCntrsNetwork]);
    sub_100149BB4(v12, v13);
  }

  int v14 = (void *)objc_claimAutoreleasedReturnValue([v2 sCntrsNetwork]);
  sub_10014C174(v14);

  uint64_t v100 = 0LL;
  __int128 v15 = (void *)qword_1002D1248;
  sub_10000AC00(v98, "vendor:MAC:packet:LQIHistogram:AsValMap");
  if (v15)
  {
    [v15 getProperty:v98 output:&v100];
  }

  else
  {
    __int128 v104 = 0u;
    __int128 v105 = 0u;
  }

  sub_1000E4898(&v108, (uint64_t)&v104);
  if (SHIBYTE(v105) < 0) {
    operator delete(*((void **)&v104 + 1));
  }
  if (v99 < 0) {
    operator delete(v98[0]);
  }
  uint64_t v16 = v100;
  if (v100) {
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v100 + 24LL))(v100);
  }
  uint64_t v97 = v16;
  sub_1000E2334(&v97, "vendor:MAC:packet:LQIHistogram:AsValMap", "PropGet", (xpc_object_t *)&v104);
  id v17 = (id)v104;
  xpc_object_t v18 = xpc_null_create();

  id v19 = v107;
  id v107 = v17;

  if (v97) {
    (*(void (**)(uint64_t))(*(void *)v97 + 8LL))(v97);
  }
  if (!v108)
  {
    *(void *)&__int128 v104 = &v107;
    *((void *)&v104 + 1) = "value";
    xpc_object_t v20 = sub_1000A9F60((uint64_t)&v104);
    id v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    id v22 = (void *)objc_claimAutoreleasedReturnValue([v2 sCntrsNetwork]);
    sub_10014AB44(v21, v22);
  }

  uint64_t v96 = 0LL;
  uint64_t v23 = (void *)qword_1002D1248;
  sub_10000AC00(__p, "TPC:FrameTxPowerHistogram");
  if (v23)
  {
    [v23 getProperty:__p output:&v96];
  }

  else
  {
    __int128 v104 = 0u;
    __int128 v105 = 0u;
  }

  sub_1000E4898(&v108, (uint64_t)&v104);
  if (SHIBYTE(v105) < 0) {
    operator delete(*((void **)&v104 + 1));
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v24 = v96;
  if (v96) {
    uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v96 + 24LL))(v96);
  }
  uint64_t v93 = v24;
  sub_1000E2334(&v93, "TPC:FrameTxPowerHistogram", "PropGet", (xpc_object_t *)&v104);
  id v25 = (id)v104;
  xpc_object_t v26 = xpc_null_create();

  id v27 = v107;
  id v107 = v25;

  if (v93) {
    (*(void (**)(uint64_t))(*(void *)v93 + 8LL))(v93);
  }
  if (!v108)
  {
    *(void *)&__int128 v104 = &v107;
    *((void *)&v104 + 1) = "value";
    xpc_object_t v28 = sub_1000A9F60((uint64_t)&v104);
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
    id v30 = (void *)objc_claimAutoreleasedReturnValue([v2 sCntrsNetwork]);
    sub_10014C1E4(v29, v30);
  }

  uint64_t v92 = 0LL;
  xpc_object_t v31 = (void *)qword_1002D1248;
  sub_10000AC00(v90, "TPC:NeighborTxPowerHistogram");
  if (v31)
  {
    [v31 getProperty:v90 output:&v92];
  }

  else
  {
    __int128 v104 = 0u;
    __int128 v105 = 0u;
  }

  sub_1000E4898(&v108, (uint64_t)&v104);
  if (SHIBYTE(v105) < 0) {
    operator delete(*((void **)&v104 + 1));
  }
  if (v91 < 0) {
    operator delete(v90[0]);
  }
  uint64_t v32 = v92;
  if (v92) {
    uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v92 + 24LL))(v92);
  }
  uint64_t v89 = v32;
  sub_1000E2334(&v89, "TPC:NeighborTxPowerHistogram", "PropGet", (xpc_object_t *)&v104);
  id v33 = (id)v104;
  xpc_object_t v34 = xpc_null_create();

  id v35 = v107;
  id v107 = v33;

  if (v89) {
    (*(void (**)(uint64_t))(*(void *)v89 + 8LL))(v89);
  }
  if (!v108)
  {
    *(void *)&__int128 v104 = &v107;
    *((void *)&v104 + 1) = "value";
    xpc_object_t v36 = sub_1000A9F60((uint64_t)&v104);
    uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
    uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v2 sCntrsNetwork]);
    sub_10014C5C8(v37, v38);
  }

  uint64_t v88 = 0LL;
  char v39 = (void *)qword_1002D1248;
  sub_10000AC00(v86, "TPC:NeighborEnergySavingsFactorHistogram");
  if (v39)
  {
    [v39 getProperty:v86 output:&v88];
  }

  else
  {
    __int128 v104 = 0u;
    __int128 v105 = 0u;
  }

  sub_1000E4898(&v108, (uint64_t)&v104);
  if (SHIBYTE(v105) < 0) {
    operator delete(*((void **)&v104 + 1));
  }
  if (v87 < 0) {
    operator delete(v86[0]);
  }
  uint64_t v40 = v88;
  if (v88) {
    uint64_t v40 = (*(uint64_t (**)(uint64_t))(*(void *)v88 + 24LL))(v88);
  }
  uint64_t v85 = v40;
  sub_1000E2334(&v85, "TPC:NeighborEnergySavingsFactorHistogram", "PropGet", (xpc_object_t *)&v104);
  id v41 = (id)v104;
  xpc_object_t v42 = xpc_null_create();

  id v43 = v107;
  id v107 = v41;

  if (v85) {
    (*(void (**)(uint64_t))(*(void *)v85 + 8LL))(v85);
  }
  if (!v108)
  {
    *(void *)&__int128 v104 = &v107;
    *((void *)&v104 + 1) = "value";
    xpc_object_t v44 = sub_1000A9F60((uint64_t)&v104);
    uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
    id v46 = (void *)objc_claimAutoreleasedReturnValue([v2 sCntrsNetwork]);
    sub_10014C9B0(v45, v46);
  }

  char v47 = objc_opt_new(&OBJC_CLASS___AWDCountersRadioS);
  [v2 setSCntrsRadio:v47];

  uint64_t v84 = 0LL;
  id v48 = (void *)qword_1002D1248;
  sub_10000AC00(v82, "vendor:radio:counters:asvalmap");
  if (v48)
  {
    [v48 getProperty:v82 output:&v84];
  }

  else
  {
    __int128 v104 = 0u;
    __int128 v105 = 0u;
  }

  sub_1000E4898(&v108, (uint64_t)&v104);
  if (SHIBYTE(v105) < 0) {
    operator delete(*((void **)&v104 + 1));
  }
  if (v83 < 0) {
    operator delete(v82[0]);
  }
  uint64_t v49 = v84;
  if (v84) {
    uint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)v84 + 24LL))(v84);
  }
  uint64_t v81 = v49;
  sub_1000E2334(&v81, "vendor:radio:counters:asvalmap", "PropGet", (xpc_object_t *)&v104);
  id v50 = (id)v104;
  xpc_object_t v51 = xpc_null_create();

  id v52 = v107;
  id v107 = v50;

  if (v81) {
    (*(void (**)(uint64_t))(*(void *)v81 + 8LL))(v81);
  }
  if (!v108)
  {
    *(void *)&__int128 v104 = &v107;
    *((void *)&v104 + 1) = "value";
    xpc_object_t v53 = sub_1000A9F60((uint64_t)&v104);
    uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
    id v55 = (void *)objc_claimAutoreleasedReturnValue([v2 sCntrsRadio]);
    sub_10014CD5C(v54, v55);
  }

  uint64_t v80 = 0LL;
  uint64_t v56 = (void *)qword_1002D1248;
  sub_10000AC00(v78, "vendor:radio:stats:asvalmap");
  if (v56)
  {
    [v56 getProperty:v78 output:&v80];
  }

  else
  {
    __int128 v104 = 0u;
    __int128 v105 = 0u;
  }

  sub_1000E4898(&v108, (uint64_t)&v104);
  if (SHIBYTE(v105) < 0) {
    operator delete(*((void **)&v104 + 1));
  }
  if (v79 < 0) {
    operator delete(v78[0]);
  }
  uint64_t v57 = v80;
  if (v80) {
    uint64_t v57 = (*(uint64_t (**)(uint64_t))(*(void *)v80 + 24LL))(v80);
  }
  uint64_t v77 = v57;
  sub_1000E2334(&v77, "vendor:radio:stats:asvalmap", "PropGet", (xpc_object_t *)&v104);
  id v58 = (id)v104;
  xpc_object_t v59 = xpc_null_create();

  id v60 = v107;
  id v107 = v58;

  if (v77) {
    (*(void (**)(uint64_t))(*(void *)v77 + 8LL))(v77);
  }
  if (!v108)
  {
    *(void *)&__int128 v104 = &v107;
    *((void *)&v104 + 1) = "value";
    xpc_object_t v61 = sub_1000A9F60((uint64_t)&v104);
    uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
    id v63 = (void *)objc_claimAutoreleasedReturnValue([v2 sCntrsRadio]);
    sub_10014D210(v62, v63);
  }

  uint64_t v76 = 0LL;
  id v64 = (void *)qword_1002D1248;
  sub_10000AC00(v74, "vendor:openthread:radio:counters:AsValMap");
  if (v64)
  {
    [v64 getProperty:v74 output:&v76];
  }

  else
  {
    __int128 v104 = 0u;
    __int128 v105 = 0u;
  }

  sub_1000E4898(&v108, (uint64_t)&v104);
  if (SHIBYTE(v105) < 0) {
    operator delete(*((void **)&v104 + 1));
  }
  if (v75 < 0) {
    operator delete(v74[0]);
  }
  uint64_t v65 = v76;
  if (v76) {
    uint64_t v65 = (*(uint64_t (**)(uint64_t))(*(void *)v76 + 24LL))(v76);
  }
  uint64_t v73 = v65;
  sub_1000E2334(&v73, "vendor:openthread:radio:counters:AsValMap", "PropGet", (xpc_object_t *)&v104);
  id v66 = (id)v104;
  xpc_object_t v67 = xpc_null_create();

  id v68 = v107;
  id v107 = v66;

  if (v73) {
    (*(void (**)(uint64_t))(*(void *)v73 + 8LL))(v73);
  }
  if (!v108)
  {
    *(void *)&__int128 v104 = &v107;
    *((void *)&v104 + 1) = "value";
    xpc_object_t v69 = sub_1000A9F60((uint64_t)&v104);
    BOOL v70 = (void *)objc_claimAutoreleasedReturnValue(v69);
    char v71 = (void *)objc_claimAutoreleasedReturnValue([v2 sCntrsRadio]);
    sub_10014DA24(v70, v71);
  }

  if (v76) {
    (*(void (**)(uint64_t))(*(void *)v76 + 8LL))(v76);
  }
  if (v80) {
    (*(void (**)(uint64_t))(*(void *)v80 + 8LL))(v80);
  }
  if (v84) {
    (*(void (**)(uint64_t))(*(void *)v84 + 8LL))(v84);
  }
  if (v88) {
    (*(void (**)(uint64_t))(*(void *)v88 + 8LL))(v88);
  }
  if (v92) {
    (*(void (**)(uint64_t))(*(void *)v92 + 8LL))(v92);
  }
  if (v96) {
    (*(void (**)(uint64_t))(*(void *)v96 + 8LL))(v96);
  }
  if (v100) {
    (*(void (**)(uint64_t))(*(void *)v100 + 8LL))(v100);
  }
  if (v106) {
    (*(void (**)(uint64_t))(*(void *)v106 + 8LL))(v106);
  }

  id v72 = v107;
  id v107 = 0LL;

  if (SHIBYTE(v110) < 0) {
    operator delete((void *)v109);
  }
}

void sub_1000E5A88( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, int a29, __int16 a30, char a31, char a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40, uint64_t a41, uint64_t a42, void *a43, uint64_t a44, int a45, __int16 a46, char a47, char a48, uint64_t a49, uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  id v60 = v57;

  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8LL))(a17);
  }
  if (a25) {
    (*(void (**)(uint64_t))(*(void *)a25 + 8LL))(a25);
  }
  if (a33) {
    (*(void (**)(uint64_t))(*(void *)a33 + 8LL))(a33);
  }
  if (a41) {
    (*(void (**)(uint64_t))(*(void *)a41 + 8LL))(a41);
  }
  if (a49) {
    (*(void (**)(uint64_t))(*(void *)a49 + 8LL))(a49);
  }
  uint64_t v62 = *(void *)(v59 - 208);
  if (v62) {
    (*(void (**)(uint64_t))(*(void *)v62 + 8LL))(v62);
  }
  uint64_t v63 = *(void *)(v59 - 168);
  if (v63) {
    (*(void (**)(uint64_t))(*(void *)v63 + 8LL))(v63);
  }
  uint64_t v64 = *(void *)(v59 - 96);
  if (v64) {
    (*(void (**)(uint64_t))(*(void *)v64 + 8LL))(v64);
  }

  sub_1000089BC((xpc_object_t *)(v59 - 88));
  _Unwind_Resume(a1);
}

void sub_1000E5DA8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30)
{
  if (!a30) {
    JUMPOUT(0x1000E5D30LL);
  }
  JUMPOUT(0x1000E5D24LL);
}

void sub_1000E5DC4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35)
{
  if (!a35) {
    JUMPOUT(0x1000E5D44LL);
  }
  JUMPOUT(0x1000E5D38LL);
}

void sub_1000E5DE0()
{
  if (!*(void *)(v0 - 200)) {
    JUMPOUT(0x1000E5D58LL);
  }
  JUMPOUT(0x1000E5D4CLL);
}

void sub_1000E5E0C()
{
  if (!*(void *)(v0 - 160)) {
    JUMPOUT(0x1000E5D6CLL);
  }
  JUMPOUT(0x1000E5D60LL);
}

void sub_1000E5E1C()
{
}

void sub_1000E5E24()
{
  JUMPOUT(0x1000E5D80LL);
}

void sub_1000E5E3C()
{
}

void sub_1000E5E44(void *a1)
{
  int v75 = 3;
  __int128 v76 = v71;
  uint64_t v77 = v72;
  id v74 = xpc_null_create();
  id v2 = a1;
  uint64_t v3 = objc_opt_new(&OBJC_CLASS___AWDHeaderInfoS);
  [v2 setHeader:v3];

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 header]);
  sub_100148FC0(v4);

  uint64_t v73 = 0LL;
  uint64_t v5 = (void *)qword_1002D1248;
  sub_10000AC00(v69, "NCP:Counter:AllMac:AsValMap");
  if (v5)
  {
    [v5 getProperty:v69 output:&v73];
  }

  else
  {
    __int128 v71 = 0u;
    __int128 v72 = 0u;
  }

  sub_1000E4898(&v75, (uint64_t)&v71);
  if (SHIBYTE(v72) < 0) {
    operator delete(*((void **)&v71 + 1));
  }
  if (v70 < 0) {
    operator delete(v69[0]);
  }
  uint64_t v6 = v73;
  if (v73) {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v73 + 24LL))(v73);
  }
  uint64_t v68 = v6;
  sub_1000E2334(&v68, "NCP:Counter:AllMac:AsValMap", "PropGet", (xpc_object_t *)&v71);
  id v7 = (id)v71;
  xpc_object_t v8 = xpc_null_create();

  id v9 = v74;
  id v74 = v7;

  if (v68) {
    (*(void (**)(uint64_t))(*(void *)v68 + 8LL))(v68);
  }
  if (!v75)
  {
    *(void *)&__int128 v71 = &v74;
    *((void *)&v71 + 1) = "value";
    xpc_object_t v10 = sub_1000A9F60((uint64_t)&v71);
    xpc_object_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    sub_10015132C(v11, v2);
  }

  uint64_t v67 = 0LL;
  __int128 v12 = (void *)qword_1002D1248;
  sub_10000AC00(__p, "vendor:MAC:packet:SizeHistogram:AsValMap");
  if (v12)
  {
    [v12 getProperty:__p output:&v67];
  }

  else
  {
    __int128 v71 = 0u;
    __int128 v72 = 0u;
  }

  sub_1000E4898(&v75, (uint64_t)&v71);
  if (SHIBYTE(v72) < 0) {
    operator delete(*((void **)&v71 + 1));
  }
  if (v66 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v13 = v67;
  if (v67) {
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v67 + 24LL))(v67);
  }
  uint64_t v64 = v13;
  sub_1000E2334(&v64, "vendor:MAC:packet:SizeHistogram:AsValMap", "PropGet", (xpc_object_t *)&v71);
  id v14 = (id)v71;
  xpc_object_t v15 = xpc_null_create();

  id v16 = v74;
  id v74 = v14;

  if (v64) {
    (*(void (**)(uint64_t))(*(void *)v64 + 8LL))(v64);
  }
  if (!v75)
  {
    *(void *)&__int128 v71 = &v74;
    *((void *)&v71 + 1) = "value";
    xpc_object_t v17 = sub_1000A9F60((uint64_t)&v71);
    xpc_object_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    sub_10014AF2C(v18, v2);
  }

  uint64_t v63 = 0LL;
  id v19 = (void *)qword_1002D1248;
  sub_10000AC00(v61, "NCP:MacRetryHistogram:AsValMap");
  if (v19)
  {
    [v19 getProperty:v61 output:&v63];
  }

  else
  {
    __int128 v71 = 0u;
    __int128 v72 = 0u;
  }

  sub_1000E4898(&v75, (uint64_t)&v71);
  if (SHIBYTE(v72) < 0) {
    operator delete(*((void **)&v71 + 1));
  }
  if (v62 < 0) {
    operator delete(v61[0]);
  }
  uint64_t v20 = v63;
  if (v63) {
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v63 + 24LL))(v63);
  }
  uint64_t v60 = v20;
  sub_1000E2334(&v60, "NCP:MacRetryHistogram:AsValMap", "PropGet", (xpc_object_t *)&v71);
  id v21 = (id)v71;
  xpc_object_t v22 = xpc_null_create();

  id v23 = v74;
  id v74 = v21;

  if (v60) {
    (*(void (**)(uint64_t))(*(void *)v60 + 8LL))(v60);
  }
  if (!v75)
  {
    *(void *)&__int128 v71 = &v74;
    *((void *)&v71 + 1) = "value";
    xpc_object_t v24 = sub_1000A9F60((uint64_t)&v71);
    id v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
    sub_10014FA10(v25, v2);
  }

  uint64_t v59 = 0LL;
  xpc_object_t v26 = (void *)qword_1002D1248;
  sub_10000AC00(v57, "vendor:cca:energydetected:histogram:AsValMap");
  if (v26)
  {
    [v26 getProperty:v57 output:&v59];
  }

  else
  {
    __int128 v71 = 0u;
    __int128 v72 = 0u;
  }

  sub_1000E4898(&v75, (uint64_t)&v71);
  if (SHIBYTE(v72) < 0) {
    operator delete(*((void **)&v71 + 1));
  }
  if (v58 < 0) {
    operator delete(v57[0]);
  }
  uint64_t v27 = v59;
  if (v59) {
    uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v59 + 24LL))(v59);
  }
  uint64_t v56 = v27;
  sub_1000E2334(&v56, "vendor:cca:energydetected:histogram:AsValMap", "PropGet", (xpc_object_t *)&v71);
  id v28 = (id)v71;
  xpc_object_t v29 = xpc_null_create();

  id v30 = v74;
  id v74 = v28;

  if (v56) {
    (*(void (**)(uint64_t))(*(void *)v56 + 8LL))(v56);
  }
  if (!v75)
  {
    *(void *)&__int128 v71 = &v74;
    *((void *)&v71 + 1) = "value";
    xpc_object_t v31 = sub_1000A9F60((uint64_t)&v71);
    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
    sub_100150798(v32, v2);
  }

  uint64_t v55 = 0LL;
  id v33 = (void *)qword_1002D1248;
  sub_10000AC00(v53, "vendor:MAC:packet:ErrorHistogram:AsValMap");
  if (v33)
  {
    [v33 getProperty:v53 output:&v55];
  }

  else
  {
    __int128 v71 = 0u;
    __int128 v72 = 0u;
  }

  sub_1000E4898(&v75, (uint64_t)&v71);
  if (SHIBYTE(v72) < 0) {
    operator delete(*((void **)&v71 + 1));
  }
  if (v54 < 0) {
    operator delete(v53[0]);
  }
  uint64_t v34 = v55;
  if (v55) {
    uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)v55 + 24LL))(v55);
  }
  uint64_t v52 = v34;
  sub_1000E2334(&v52, "vendor:MAC:packet:ErrorHistogram:AsValMap", "PropGet", (xpc_object_t *)&v71);
  id v35 = (id)v71;
  xpc_object_t v36 = xpc_null_create();

  id v37 = v74;
  id v74 = v35;

  if (v52) {
    (*(void (**)(uint64_t))(*(void *)v52 + 8LL))(v52);
  }
  if (!v75)
  {
    *(void *)&__int128 v71 = &v74;
    *((void *)&v71 + 1) = "value";
    xpc_object_t v38 = sub_1000A9F60((uint64_t)&v71);
    char v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
    sub_10014E814(v39, v2);
  }

  uint64_t v51 = 0LL;
  uint64_t v40 = (void *)qword_1002D1248;
  sub_10000AC00(v49, "vendor:csma:backoff:histogram:AsValMap");
  if (v40)
  {
    [v40 getProperty:v49 output:&v51];
  }

  else
  {
    __int128 v71 = 0u;
    __int128 v72 = 0u;
  }

  sub_1000E4898(&v75, (uint64_t)&v71);
  if (SHIBYTE(v72) < 0) {
    operator delete(*((void **)&v71 + 1));
  }
  if (v50 < 0) {
    operator delete(v49[0]);
  }
  uint64_t v41 = v51;
  if (v51) {
    uint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)v51 + 24LL))(v51);
  }
  uint64_t v48 = v41;
  sub_1000E2334(&v48, "vendor:csma:backoff:histogram:AsValMap", "PropGet", (xpc_object_t *)&v71);
  id v42 = (id)v71;
  xpc_object_t v43 = xpc_null_create();

  id v44 = v74;
  id v74 = v42;

  if (v48) {
    (*(void (**)(uint64_t))(*(void *)v48 + 8LL))(v48);
  }
  if (!v75)
  {
    *(void *)&__int128 v71 = &v74;
    *((void *)&v71 + 1) = "value";
    xpc_object_t v45 = sub_1000A9F60((uint64_t)&v71);
    id v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
    sub_100150F44(v46, v2);
  }

  if (v51) {
    (*(void (**)(uint64_t))(*(void *)v51 + 8LL))(v51);
  }
  if (v55) {
    (*(void (**)(uint64_t))(*(void *)v55 + 8LL))(v55);
  }
  if (v59) {
    (*(void (**)(uint64_t))(*(void *)v59 + 8LL))(v59);
  }
  if (v63) {
    (*(void (**)(uint64_t))(*(void *)v63 + 8LL))(v63);
  }
  if (v67) {
    (*(void (**)(uint64_t))(*(void *)v67 + 8LL))(v67);
  }
  if (v73) {
    (*(void (**)(uint64_t))(*(void *)v73 + 8LL))(v73);
  }

  id v47 = v74;
  id v74 = 0LL;

  if (SHIBYTE(v77) < 0) {
    operator delete((void *)v76);
  }
}

void sub_1000E65D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, int a29, __int16 a30, char a31, char a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40, uint64_t a41, uint64_t a42, void *a43, uint64_t a44, int a45, __int16 a46, char a47, char a48)
{
  uint64_t v51 = v49;

  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8LL))(a17);
  }
  if (a25) {
    (*(void (**)(uint64_t))(*(void *)a25 + 8LL))(a25);
  }
  if (a33) {
    (*(void (**)(uint64_t))(*(void *)a33 + 8LL))(a33);
  }
  if (a41) {
    (*(void (**)(uint64_t))(*(void *)a41 + 8LL))(a41);
  }
  uint64_t v53 = *(void *)(v50 - 168);
  if (v53) {
    (*(void (**)(uint64_t))(*(void *)v53 + 8LL))(v53);
  }
  uint64_t v54 = *(void *)(v50 - 96);
  if (v54) {
    (*(void (**)(uint64_t))(*(void *)v54 + 8LL))(v54);
  }

  sub_1000089BC((xpc_object_t *)(v50 - 88));
  _Unwind_Resume(a1);
}

void sub_1000E6810( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30)
{
  if (!a30) {
    JUMPOUT(0x1000E67C0LL);
  }
  JUMPOUT(0x1000E67B4LL);
}

void sub_1000E682C()
{
  if (!*(void *)(v0 - 160)) {
    JUMPOUT(0x1000E67D4LL);
  }
  JUMPOUT(0x1000E67C8LL);
}

void sub_1000E6844()
{
  JUMPOUT(0x1000E67E8LL);
}

void sub_1000E685C()
{
}

void sub_1000E6864(void *a1)
{
  int v31 = 3;
  __int128 v32 = *(_OWORD *)__p;
  uint64_t v33 = v28;
  id v30 = xpc_null_create();
  id v2 = a1;
  uint64_t v3 = objc_opt_new(&OBJC_CLASS___AWDHeaderInfoS);
  [v2 setHeader:v3];

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 header]);
  sub_100148FC0(v4);

  uint64_t v29 = 0LL;
  uint64_t v5 = (void *)qword_1002D1248;
  sub_10000AC00(v25, "vendor:coex:counters:asvalmap");
  if (v5)
  {
    [v5 getProperty:v25 output:&v29];
  }

  else
  {
    *(_OWORD *)std::string __p = 0u;
    __int128 v28 = 0u;
  }

  sub_1000E4898(&v31, (uint64_t)__p);
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[1]);
  }
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  uint64_t v6 = v29;
  if (v29) {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 24LL))(v29);
  }
  uint64_t v24 = v6;
  sub_1000E2334(&v24, "vendor:coex:counters:asvalmap", "PropGet", __p);
  id v7 = __p[0];
  xpc_object_t v8 = xpc_null_create();

  id v9 = v30;
  id v30 = v7;

  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
  }
  if (!v31)
  {
    __p[0] = &v30;
    __p[1] = "value";
    xpc_object_t v10 = sub_1000A9F60((uint64_t)__p);
    xpc_object_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    sub_100152F7C(v11, v2);
  }

  uint64_t v23 = 0LL;
  __int128 v12 = (void *)qword_1002D1248;
  sub_10000AC00(v21, "vendor:coex:histograms:asvalmap");
  if (v12)
  {
    [v12 getProperty:v21 output:&v23];
  }

  else
  {
    *(_OWORD *)std::string __p = 0u;
    __int128 v28 = 0u;
  }

  sub_1000E4898(&v31, (uint64_t)__p);
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[1]);
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  uint64_t v13 = v23;
  if (v23) {
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 24LL))(v23);
  }
  uint64_t v20 = v13;
  sub_1000E2334(&v20, "vendor:coex:histograms:asvalmap", "PropGet", __p);
  id v14 = __p[0];
  xpc_object_t v15 = xpc_null_create();

  id v16 = v30;
  id v30 = v14;

  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
  }
  if (!v31)
  {
    __p[0] = &v30;
    __p[1] = "value";
    xpc_object_t v17 = sub_1000A9F60((uint64_t)__p);
    xpc_object_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    sub_100152534(v18, v2);
  }

  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
  }
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8LL))(v29);
  }

  id v19 = v30;
  id v30 = 0LL;

  if (SHIBYTE(v33) < 0) {
    operator delete((void *)v32);
  }
}

void sub_1000E6B6C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  uint64_t v27 = v25;

  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8LL))(a17);
  }
  uint64_t v29 = *(void *)(v26 - 80);
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8LL))(v29);
  }

  sub_1000089BC((xpc_object_t *)(v26 - 72));
  _Unwind_Resume(a1);
}

void sub_1000E6C78(void *a1)
{
  int v31 = 3;
  __int128 v32 = *(_OWORD *)__p;
  uint64_t v33 = v28;
  id v30 = xpc_null_create();
  id v2 = a1;
  uint64_t v3 = objc_opt_new(&OBJC_CLASS___AWDHeaderInfoS);
  [v2 setHeader:v3];

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 header]);
  sub_100148FC0(v4);

  uint64_t v29 = 0LL;
  uint64_t v5 = (void *)qword_1002D1248;
  sub_10000AC00(v25, "NCP:Counter:AllIPv6:AsValMap");
  if (v5)
  {
    [v5 getProperty:v25 output:&v29];
  }

  else
  {
    *(_OWORD *)std::string __p = 0u;
    __int128 v28 = 0u;
  }

  sub_1000E4898(&v31, (uint64_t)__p);
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[1]);
  }
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  uint64_t v6 = v29;
  if (v29) {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 24LL))(v29);
  }
  uint64_t v24 = v6;
  sub_1000E2334(&v24, "NCP:Counter:AllIPv6:AsValMap", "PropGet", __p);
  id v7 = __p[0];
  xpc_object_t v8 = xpc_null_create();

  id v9 = v30;
  id v30 = v7;

  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
  }
  if (!v31)
  {
    __p[0] = &v30;
    __p[1] = "value";
    xpc_object_t v10 = sub_1000A9F60((uint64_t)__p);
    xpc_object_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    sub_100154360(v11, v2);
  }

  uint64_t v23 = 0LL;
  __int128 v12 = (void *)qword_1002D1248;
  sub_10000AC00(v21, "NCP:Counter:Thread:Mle:AsValMap");
  if (v12)
  {
    [v12 getProperty:v21 output:&v23];
  }

  else
  {
    *(_OWORD *)std::string __p = 0u;
    __int128 v28 = 0u;
  }

  sub_1000E4898(&v31, (uint64_t)__p);
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[1]);
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  uint64_t v13 = v23;
  if (v23) {
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 24LL))(v23);
  }
  uint64_t v20 = v13;
  sub_1000E2334(&v20, "NCP:Counter:Thread:Mle:AsValMap", "PropGet", __p);
  id v14 = __p[0];
  xpc_object_t v15 = xpc_null_create();

  id v16 = v30;
  id v30 = v14;

  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
  }
  if (!v31)
  {
    __p[0] = &v30;
    __p[1] = "value";
    xpc_object_t v17 = sub_1000A9F60((uint64_t)__p);
    xpc_object_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    sub_100153B70(v18, v2);
  }

  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
  }
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8LL))(v29);
  }

  id v19 = v30;
  id v30 = 0LL;

  if (SHIBYTE(v33) < 0) {
    operator delete((void *)v32);
  }
}

void sub_1000E6F80( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  uint64_t v27 = v25;

  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8LL))(a17);
  }
  uint64_t v29 = *(void *)(v26 - 80);
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8LL))(v29);
  }

  sub_1000089BC((xpc_object_t *)(v26 - 72));
  _Unwind_Resume(a1);
}

void sub_1000E708C(void *a1)
{
  id v5 = a1;
  uint64_t v1 = objc_opt_new(&OBJC_CLASS___AWDHeaderInfoS);
  [v5 setHeader:v1];

  id v2 = (void *)objc_claimAutoreleasedReturnValue([v5 header]);
  sub_100148FC0(v2);

  uint64_t v3 = objc_opt_new(&OBJC_CLASS___AWDCountersStabilityS);
  [v5 setSCntrsStability:v3];

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v5 sCntrsStability]);
  sub_100154A38(v4);
}

void sub_1000E7128( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  xpc_object_t v11 = v10;

  _Unwind_Resume(a1);
}

void sub_1000E7158(void *a1)
{
  id v1 = a1;
  id v2 = objc_opt_new(&OBJC_CLASS___AWDHeaderInfoS);
  [v1 setHeader:v2];

  sub_1001549F8(&v3);
  [v1 setHasNumberOfThirdPartyBorderRouters:1];
  [v1 setNumberOfThirdPartyBorderRouters:v3];
}

void sub_1000E71CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000E71EC(void *a1)
{
  id v1 = a1;
  id v2 = objc_opt_new(&OBJC_CLASS___AWDHeaderInfoS);
  [v1 setHeader:v2];

  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue([v1 header]);
  sub_100148FC0(v3);

  sub_100154A10(&v5, &v4);
  [v1 setHasNumberOfPreferredNwByAppleBorderRouters:1];
  [v1 setHasNumberOfPreferredNwByAppleBorderRouters:1];
  [v1 setNumberOfPreferredNwByThirdPartyBorderRouters:v5];
  [v1 setNumberOfPreferredNwByAppleBorderRouters:v4];
}

void sub_1000E728C(_Unwind_Exception *a1)
{
  unsigned int v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1000E72B4(_OWORD *a1)
{
  __int128 v1 = a1[1];
  v2[0] = *a1;
  v2[1] = v1;
  sub_100154C68((uint64_t)v2);
  sub_100104E84();
}

void sub_1000E72E4(void *a1)
{
  id v5 = a1;
  __int128 v1 = objc_opt_new(&OBJC_CLASS___AWDHeaderInfoS);
  [v5 setHeader:v1];

  id v2 = (void *)objc_claimAutoreleasedReturnValue([v5 header]);
  sub_100148FC0(v2);

  unsigned int v3 = objc_opt_new(&OBJC_CLASS___AWDCountersPowerS);
  [v5 setSCntrsPower:v3];

  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([v5 sCntrsPower]);
  sub_1001552AC(v4);
}

void sub_1000E7380( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  xpc_object_t v11 = v10;

  _Unwind_Resume(a1);
}

void sub_1000E73B0(unsigned int a1)
{
  int v1 = sub_1000D1DE0(a1);
  sub_1001551A0(v1);
}

void sub_1000E73C4()
{
  int v11 = 3;
  __int128 v12 = *(_OWORD *)__p;
  uint64_t v13 = v10;
  uint64_t v0 = (void *)qword_1002D1248;
  sub_10000AC00(v7, "vendor:neighbor:count:histogram");
  if (v0)
  {
    objc_msgSend(v0, "setProperty:property_val:", v7, "0");
  }

  else
  {
    *(_OWORD *)std::string __p = 0u;
    __int128 v10 = 0u;
  }

  sub_1000E4898(&v11, (uint64_t)__p);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[1]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  int v1 = (void *)qword_1002D1248;
  sub_10000AC00(v5, "vendor:joiner:RSSIHistogram");
  if (v1)
  {
    objc_msgSend(v1, "setProperty:property_val:", v5, "0");
  }

  else
  {
    *(_OWORD *)std::string __p = 0u;
    __int128 v10 = 0u;
  }

  sub_1000E4898(&v11, (uint64_t)__p);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[1]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  sub_100148F48();
  id v2 = (void *)qword_1002D1248;
  sub_10000AC00(v3, "vendor:linkloss:counters");
  if (v2)
  {
    objc_msgSend(v2, "setProperty:property_val:", v3, "0");
  }

  else
  {
    *(_OWORD *)std::string __p = 0u;
    __int128 v10 = 0u;
  }

  sub_1000E4898(&v11, (uint64_t)__p);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[1]);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete((void *)v12);
  }
}

void sub_1000E755C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000E75C4()
{
  unsigned int v30 = 3;
  std::string v31 = *(std::string *)buf;
  uint64_t v0 = (void *)qword_1002D1248;
  sub_10000AC00(v28, "vendor:MAC:packet:RSSIHistogram");
  if (v0) {
    objc_msgSend(v0, "setProperty:property_val:", v28, "0");
  }
  else {
    memset(buf, 0, sizeof(buf));
  }
  sub_1000E4898(&v30, (uint64_t)buf);
  if ((buf[31] & 0x80000000) != 0) {
    operator delete(*(void **)&buf[8]);
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  sub_100148F2C();
  int v1 = (void *)qword_1002D1248;
  sub_10000AC00(__p, "vendor:MAC:packet:LQIHistogram");
  if (v1) {
    objc_msgSend(v1, "setProperty:property_val:", __p, "0");
  }
  else {
    memset(buf, 0, sizeof(buf));
  }
  sub_1000E4898(&v30, (uint64_t)buf);
  if ((buf[31] & 0x80000000) != 0) {
    operator delete(*(void **)&buf[8]);
  }
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  id v2 = (void *)qword_1002D1248;
  sub_10000AC00(v24, "TPC:FrameTxPowerHistogram");
  if (v2) {
    objc_msgSend(v2, "setProperty:property_val:", v24, "0");
  }
  else {
    memset(buf, 0, sizeof(buf));
  }
  sub_1000E4898(&v30, (uint64_t)buf);
  if ((buf[31] & 0x80000000) != 0) {
    operator delete(*(void **)&buf[8]);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  unsigned int v3 = (void *)qword_1002D1248;
  sub_10000AC00(v22, "TPC:NeighborTxPowerHistogram");
  if (v3) {
    objc_msgSend(v3, "setProperty:property_val:", v22, "0");
  }
  else {
    memset(buf, 0, sizeof(buf));
  }
  sub_1000E4898(&v30, (uint64_t)buf);
  if ((buf[31] & 0x80000000) != 0) {
    operator delete(*(void **)&buf[8]);
  }
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  char v4 = (void *)qword_1002D1248;
  sub_10000AC00(v20, "TPC:NeighborEnergySavingsFactorHistogram");
  if (v4) {
    objc_msgSend(v4, "setProperty:property_val:", v20, "0");
  }
  else {
    memset(buf, 0, sizeof(buf));
  }
  sub_1000E4898(&v30, (uint64_t)buf);
  if ((buf[31] & 0x80000000) != 0) {
    operator delete(*(void **)&buf[8]);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  id v5 = (void *)qword_1002D1248;
  sub_10000AC00(v18, "vendor:radio:counters");
  if (v5) {
    objc_msgSend(v5, "setProperty:property_val:", v18, "0");
  }
  else {
    memset(buf, 0, sizeof(buf));
  }
  sub_1000E4898(&v30, (uint64_t)buf);
  if ((buf[31] & 0x80000000) != 0) {
    operator delete(*(void **)&buf[8]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  char v6 = sub_1000160F4("com.apple.wpantund.awd", "default");
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    sub_1000E7B14(v30, v16);
    int v8 = v17;
    id v9 = (void **)v16[0];
    std::string::basic_string(&v15, &v31);
    __int128 v10 = v16;
    if (v8 < 0) {
      __int128 v10 = v9;
    }
    if ((v15.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v11 = &v15;
    }
    else {
      int v11 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = "vendor:radio:counters";
    *(_WORD *)&_BYTE buf[12] = 2080;
    *(void *)&_BYTE buf[14] = v10;
    *(_WORD *)&_BYTE buf[22] = 2080;
    *(void *)&_BYTE buf[24] = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "AWDMetrics kWPANTUNDVendor_Radio_Counters set %s ==> res = %s, Error Info: %s \n",  buf,  0x20u);
    if (v17 < 0) {
      operator delete(v16[0]);
    }
  }

  __int128 v12 = (void *)qword_1002D1248;
  sub_10000AC00(v13, "vendor:radio:stats");
  if (v12) {
    objc_msgSend(v12, "setProperty:property_val:", v13, "0");
  }
  else {
    memset(buf, 0, sizeof(buf));
  }
  sub_1000E4898(&v30, (uint64_t)buf);
  if ((buf[31] & 0x80000000) != 0) {
    operator delete(*(void **)&buf[8]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
}

void sub_1000E7A1C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24, uint64_t a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, uint64_t a32, int a33, __int16 a34, char a35, char a36, uint64_t a37, uint64_t a38, int a39, __int16 a40, char a41, char a42, uint64_t a43, uint64_t a44, int a45, __int16 a46, char a47, char a48, uint64_t a49, uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a24 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void *sub_1000E7B14@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 0xE) {
    id v2 = "kInvalidErrorCode";
  }
  else {
    id v2 = off_1002B2D50[a1];
  }
  return sub_10000AC00(a2, v2);
}

void sub_1000E7B40()
{
  int v11 = 3;
  __int128 v12 = *(_OWORD *)__p;
  uint64_t v13 = v10;
  uint64_t v0 = (void *)qword_1002D1248;
  sub_10000AC00(v7, "NCP:Counter:AllMac");
  if (v0)
  {
    objc_msgSend(v0, "setProperty:property_val:", v7, "0");
  }

  else
  {
    *(_OWORD *)std::string __p = 0u;
    __int128 v10 = 0u;
  }

  sub_1000E4898(&v11, (uint64_t)__p);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[1]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  int v1 = (void *)qword_1002D1248;
  sub_10000AC00(v5, "vendor:MAC:packet:SizeHistogram");
  if (v1)
  {
    objc_msgSend(v1, "setProperty:property_val:", v5, "0");
  }

  else
  {
    *(_OWORD *)std::string __p = 0u;
    __int128 v10 = 0u;
  }

  sub_1000E4898(&v11, (uint64_t)__p);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[1]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  id v2 = (void *)qword_1002D1248;
  sub_10000AC00(v3, "NCP:MacRetryHistogram");
  if (v2)
  {
    objc_msgSend(v2, "setProperty:property_val:", v3, "0");
  }

  else
  {
    *(_OWORD *)std::string __p = 0u;
    __int128 v10 = 0u;
  }

  sub_1000E4898(&v11, (uint64_t)__p);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[1]);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete((void *)v12);
  }
}

void sub_1000E7CD4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000E7D38()
{
  int v5 = 3;
  __int128 v6 = *(_OWORD *)__p;
  uint64_t v7 = v4;
  uint64_t v0 = (void *)qword_1002D1248;
  sub_10000AC00(v1, "vendor:coex:counters");
  if (v0)
  {
    objc_msgSend(v0, "setProperty:property_val:", v1, "0");
  }

  else
  {
    *(_OWORD *)std::string __p = 0u;
    __int128 v4 = 0u;
  }

  sub_1000E4898(&v5, (uint64_t)__p);
  if (SHIBYTE(v4) < 0) {
    operator delete(__p[1]);
  }
  if (v2 < 0) {
    operator delete(v1[0]);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete((void *)v6);
  }
}

void sub_1000E7DFC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000E7E30()
{
  int v8 = 3;
  __int128 v9 = *(_OWORD *)__p;
  uint64_t v10 = v7;
  uint64_t v0 = (void *)qword_1002D1248;
  sub_10000AC00(v4, "NCP:Counter:AllIPv6");
  if (v0)
  {
    objc_msgSend(v0, "setProperty:property_val:", v4, "0");
  }

  else
  {
    *(_OWORD *)std::string __p = 0u;
    __int128 v7 = 0u;
  }

  sub_1000E4898(&v8, (uint64_t)__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[1]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  int v1 = (void *)qword_1002D1248;
  sub_10000AC00(v2, "NCP:Counter:Thread:Mle");
  if (v1)
  {
    objc_msgSend(v1, "setProperty:property_val:", v2, "0");
  }

  else
  {
    *(_OWORD *)std::string __p = 0u;
    __int128 v7 = 0u;
  }

  sub_1000E4898(&v8, (uint64_t)__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[1]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete((void *)v9);
  }
}

void sub_1000E7F5C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000E7FB8(void *a1)
{
  id v3 = a1;
  int v1 = objc_opt_new(&OBJC_CLASS___AWDHeaderInfoS);
  [v3 setHeader:v1];

  char v2 = (void *)objc_claimAutoreleasedReturnValue([v3 header]);
  sub_100148FC0(v2);

  sub_100155B34(v3);
}

void sub_1000E8024( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v11 = v10;

  _Unwind_Resume(a1);
}

void sub_1000E8054(int a1, int a2, int a3)
{
  if (sub_100155814(a1, a2, a3))
  {
    sub_100104EFC();
    sub_100104F74();
  }

void sub_1000E8078(uint64_t *a1, uint64_t *a2, const std::string::value_type *a3, uint64_t a4)
{
  int v8 = sub_1000160F4("com.apple.wpantund.awd", "default");
  __int128 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
    sub_10020DD7C(v9, v10, v11, v12, v13, v14, v15, v16);
  }

  sub_10000AC00(buf, "Command Error");
  int v52 = 3;
  *(_OWORD *)uint64_t v53 = *(_OWORD *)buf;
  uint64_t v54 = *(void *)&buf[16];
  sub_10000AC00(&v51, "Error_str = ");
  sub_10000D650(&v51, a3);
  std::string::append(&v51, "::NCPState = ");
  sub_10000AC00(v49, "Wpantund");
  uint64_t v48 = 0LL;
  id v17 = (id)qword_1002D1248;
  sub_10000AC00(__p, "NCP:State");
  if (v17) {
    [v17 getProperty:__p output:&v48];
  }
  else {
    memset(buf, 0, sizeof(buf));
  }
  sub_1000E4898(&v52, (uint64_t)buf);
  if ((buf[31] & 0x80000000) != 0) {
    operator delete(*(void **)&buf[8]);
  }
  if (v47 < 0) {
    operator delete(__p[0]);
  }

  if (v52)
  {
    std::string::append(&v51, " ");
  }

  else
  {
    sub_100147B4C(&v48, (std::string *)buf);
    sub_10000D650(&v51, buf);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }

  std::string::append(&v51, "::Wpantund:Versiouint64_t n = ");
  context = objc_autoreleasePoolPush();
  id v18 = objc_alloc_init(&OBJC_CLASS___SDRDiagnosticReporter);
  if (v18)
  {
    char v19 = sub_1000160F4("com.apple.wpantund.awd", "default");
    uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = "AWDMetricsClient_TriggerAutoBugCaptures";
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "%s : SDRDiagnosticReporter init success",  buf,  0xCu);
    }

    char v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a1, context));
    char v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a2));
    if ((v51.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      char v23 = &v51;
    }
    else {
      char v23 = (std::string *)v51.__r_.__value_.__r.__words[0];
    }
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v23));
    if (v50 >= 0) {
      char v25 = v49;
    }
    else {
      char v25 = (void **)v49[0];
    }
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v25));
    v58[0] = kSymptomDiagnosticActionGetNetworkInfo;
    v58[1] = kSymptomDiagnosticActionProbePacketCapture;
    v59[0] = &__kCFBooleanFalse;
    v59[1] = &__kCFBooleanFalse;
    v58[2] = kSymptomDiagnosticActionDiagnosticExtensions;
    v59[2] = &__kCFBooleanFalse;
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v59,  v58,  3LL));
    __int128 v28 = sub_1000160F4("com.apple.wpantund.awd", "default");
    char v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 138412802;
      *(void *)&uint8_t buf[4] = v22;
      *(_WORD *)&_BYTE buf[12] = 2112;
      *(void *)&_BYTE buf[14] = v24;
      *(_WORD *)&_BYTE buf[22] = 2112;
      *(void *)&_BYTE buf[24] = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_INFO,  "AWDMetricsClient_TriggerAutoBugCapture : signatureWithDomain API call with args: SubType=%@, SubTypeContext=%@ D etectedProcess=%@.",  buf,  0x20u);
    }

    unsigned int v30 = (void *)objc_claimAutoreleasedReturnValue( [v18 signatureWithDomain:@"Thread SW" type:v21 subType:v22 subtypeContext:v24 detectedProcess:v26 triggerThresholdValues:0]);
    if (v30)
    {
      if (a4)
      {
        std::string v31 = -[NSString initWithUTF8String:](objc_alloc(&OBJC_CLASS___NSString), "initWithUTF8String:", a4);
        __int128 v32 = sub_1000160F4("com.apple.wpantund.awd", "default");
        uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "AWDMetricsClient_TriggerAutoBugCaptures";
          *(_WORD *)&_BYTE buf[12] = 2112;
          *(void *)&_BYTE buf[14] = v31;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "%s : crashFileName=%@.", buf, 0x16u);
        }

        uint64_t v55 = v31;
        uint64_t v56 = kSymptomDiagnosticKeyPayloadPath;
        uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v55, 1LL));
        uint64_t v57 = v34;
        id v35 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v57,  &v56,  1LL));
      }

      else
      {
        id v35 = 0LL;
      }

      [v18 snapshotWithSignature:v30 duration:0 events:v35 payload:v27 actions:&stru_1002B2CB0 reply:1.0];
    }

    else
    {
      id v44 = sub_1000160F4("com.apple.wpantund.awd", "default");
      id v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
        sub_10020DD50();
      }
    }
  }

  else
  {
    xpc_object_t v36 = sub_1000160F4("com.apple.wpantund.awd", "default");
    char v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      sub_10020DCE0(v21, v37, v38, v39, v40, v41, v42, v43);
    }
  }

  objc_autoreleasePoolPop(context);
  if (v48) {
    (*(void (**)(uint64_t))(*(void *)v48 + 8LL))(v48);
  }
  if (v50 < 0) {
    operator delete(v49[0]);
  }
  if (SHIBYTE(v54) < 0) {
    operator delete(v53[0]);
  }
}

void sub_1000E8650( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8LL))(a16);
  }
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  _Unwind_Resume(a1);
}

void sub_1000E878C(id a1, NSDictionary *a2)
{
  char v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue( -[NSDictionary objectForKeyedSubscript:]( v2,  "objectForKeyedSubscript:",  kSymptomDiagnosticReplySuccess));
  unsigned int v4 = [v3 BOOLValue];

  if (v4)
  {
    char v5 = (os_log_s *)objc_claimAutoreleasedReturnValue( -[NSDictionary objectForKeyedSubscript:]( v2,  "objectForKeyedSubscript:",  kSymptomDiagnosticReplySessionID));
    __int128 v6 = sub_1000160F4("com.apple.wpantund.awd", "default");
    __int128 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v9 = 136315394;
      uint64_t v10 = "AWDMetricsClient_TriggerAutoBugCaptures_block_invoke";
      __int16 v11 = 2112;
      uint64_t v12 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s : SDR accepted snapshotWithSignature. SessionID=%@",  (uint8_t *)&v9,  0x16u);
    }
  }

  else
  {
    int v8 = sub_1000160F4("com.apple.wpantund.awd", "default");
    char v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v2, "objectForKeyedSubscript:", kSymptomDiagnosticReplyReason));
      sub_10020DDEC();
    }
  }
}

void sub_1000E88F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000E892C( const std::string::value_type *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, const std::string::value_type *a6, uint64_t a7)
{
  uint64_t v12 = sub_1000160F4("com.apple.wpantund.awd", "default");
  uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
    sub_10020DEA4(v13, v14, v15, v16, v17, v18, v19, v20);
  }

  sub_10000AC00(buf, "Command Error");
  uint64_t v53 = *(void **)buf;
  int v55 = SHIBYTE(v65);
  sub_10000AC00(&v58, "Error_str = ");
  sub_10000D650(&v58, a6);
  sub_10000AC00(__p, "Wpantund");
  int v21 = a1[23];
  if (v21 < 0)
  {
    if (*((void *)a1 + 1) != 6LL)
    {
LABEL_12:
      std::string::append(&v58, "::NCPState = ");
      sub_10000D650(&v58, a1);
      goto LABEL_13;
    }

    char v22 = *(int **)a1;
  }

  else
  {
    char v22 = (int *)a1;
    if (v21 != 6) {
      goto LABEL_12;
    }
  }

  int v23 = *v22;
  int v24 = *((unsigned __int16 *)v22 + 2);
  if (v23 != 1163084353 || v24 != 21582) {
    goto LABEL_12;
  }
LABEL_13:
  std::string::append(&v58, "::Wpantund:Versiouint64_t n = ");
  context = objc_autoreleasePoolPush();
  id v26 = objc_alloc_init(&OBJC_CLASS___SDRDiagnosticReporter);
  if (v26)
  {
    uint64_t v27 = sub_1000160F4("com.apple.wpantund.awd", "default");
    __int128 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = "AWDMetricsClient_TriggerAutoBugCaptures_internal";
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_INFO,  "%s : SDRDiagnosticReporter init success",  buf,  0xCu);
    }

    char v29 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  a4,  v53,  context));
    unsigned int v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a5));
    if ((v58.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string v31 = &v58;
    }
    else {
      std::string v31 = (std::string *)v58.__r_.__value_.__r.__words[0];
    }
    __int128 v32 = (NSString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v31));
    if (v57 >= 0) {
      uint64_t v33 = __p;
    }
    else {
      uint64_t v33 = (void **)__p[0];
    }
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v33));
    v67[0] = kSymptomDiagnosticActionGetNetworkInfo;
    v67[1] = kSymptomDiagnosticActionProbePacketCapture;
    v68[0] = &__kCFBooleanFalse;
    v68[1] = &__kCFBooleanFalse;
    v67[2] = kSymptomDiagnosticActionDiagnosticExtensions;
    v68[2] = &__kCFBooleanFalse;
    id v35 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v68,  v67,  3LL));
    xpc_object_t v36 = sub_1000160F4("com.apple.wpantund.awd", "default");
    uint64_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 138412802;
      *(void *)&uint8_t buf[4] = v30;
      __int16 v63 = 2112;
      uint64_t v64 = v32;
      __int16 v65 = 2112;
      char v66 = v34;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_INFO,  "AWDMetricsClient_TriggerAutoBugCapture : signatureWithDomain API call with args: SubType=%@, SubTypeContext=%@, DetectedProcess=%@.",  buf,  0x20u);
    }

    uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue( [v26 signatureWithDomain:@"Thread SW" type:v29 subType:v30 subtypeContext:v32 detectedProcess:v34 triggerThresholdValues:0]);
    if (v38)
    {
      if (a7)
      {
        uint64_t v39 = -[NSString initWithUTF8String:](objc_alloc(&OBJC_CLASS___NSString), "initWithUTF8String:", a7);
        uint64_t v40 = sub_1000160F4("com.apple.wpantund.awd", "default");
        uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
        if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "AWDMetricsClient_TriggerAutoBugCaptures_internal";
          __int16 v63 = 2112;
          uint64_t v64 = v39;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "%s : crashFileName=%@.", buf, 0x16u);
        }

        uint64_t v59 = v39;
        uint64_t v60 = kSymptomDiagnosticKeyPayloadPath;
        uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v59, 1LL));
        xpc_object_t v61 = v42;
        uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v61,  &v60,  1LL));
      }

      else
      {
        uint64_t v43 = 0LL;
      }

      [v26 snapshotWithSignature:v38 duration:0 events:v43 payload:v35 actions:&stru_1002B2CD0 reply:1.0];
    }

    else
    {
      int v52 = sub_1000160F4("com.apple.wpantund.awd", "default");
      uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
      if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
        sub_10020DD50();
      }
    }
  }

  else
  {
    id v44 = sub_1000160F4("com.apple.wpantund.awd", "default");
    char v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
      sub_10020DE34(v29, v45, v46, v47, v48, v49, v50, v51);
    }
  }

  objc_autoreleasePoolPop(context);
  if (v57 < 0) {
    operator delete(__p[0]);
  }
  if (v55 < 0) {
    operator delete(v53);
  }
}

void sub_1000E8E80( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, _Unwind_Exception *exception_object, int a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a12 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(a1);
}

void sub_1000E8F68(id a1, NSDictionary *a2)
{
  char v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue( -[NSDictionary objectForKeyedSubscript:]( v2,  "objectForKeyedSubscript:",  kSymptomDiagnosticReplySuccess));
  unsigned int v4 = [v3 BOOLValue];

  if (v4)
  {
    char v5 = (os_log_s *)objc_claimAutoreleasedReturnValue( -[NSDictionary objectForKeyedSubscript:]( v2,  "objectForKeyedSubscript:",  kSymptomDiagnosticReplySessionID));
    __int128 v6 = sub_1000160F4("com.apple.wpantund.awd", "default");
    __int128 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v9 = 136315394;
      uint64_t v10 = "AWDMetricsClient_TriggerAutoBugCaptures_internal_block_invoke";
      __int16 v11 = 2112;
      uint64_t v12 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s : SDR accepted snapshotWithSignature. SessionID=%@",  (uint8_t *)&v9,  0x16u);
    }
  }

  else
  {
    int v8 = sub_1000160F4("com.apple.wpantund.awd", "default");
    char v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v2, "objectForKeyedSubscript:", kSymptomDiagnosticReplyReason));
      sub_10020DF14();
    }
  }
}

void sub_1000E90D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1000E9108( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, const std::string::value_type *a5, int a6)
{
  uint64_t v10 = sub_1000160F4("com.apple.wpantund.awd", "default");
  __int16 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
    sub_10020DFF8(v11, v12, v13, v14, v15, v16, v17, v18);
  }

  sub_10000AC00(buf, "Command Error");
  uint64_t v47 = *(void **)buf;
  int v19 = SHIBYTE(v54);
  sub_10000AC00(__p, "Threadradiod");
  sub_10000AC00(&v48, "Error_str = ");
  sub_10000D650(&v48, a5);
  if (a6) {
    uint64_t v20 = "::primary";
  }
  else {
    uint64_t v20 = "::non_primary";
  }
  std::string::append(&v48, v20);
  int v21 = objc_autoreleasePoolPush();
  id v22 = objc_alloc_init(&OBJC_CLASS___SDRDiagnosticReporter);
  if (v22)
  {
    int v23 = sub_1000160F4("com.apple.wpantund.awd", "default");
    int v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = "AWDMetricsClient_TriggerGroupAutoBugCapture";
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "%s : SDRDiagnosticReporter init success",  buf,  0xCu);
    }

    char v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a3));
    id v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a4));
    if ((v48.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v27 = &v48;
    }
    else {
      uint64_t v27 = (std::string *)v48.__r_.__value_.__r.__words[0];
    }
    __int128 v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v27));
    if (v50 >= 0) {
      char v29 = __p;
    }
    else {
      char v29 = (void **)__p[0];
    }
    unsigned int v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v29));
    v56[0] = kSymptomDiagnosticActionGetNetworkInfo;
    v56[1] = kSymptomDiagnosticActionProbePacketCapture;
    v57[0] = &__kCFBooleanFalse;
    v57[1] = &__kCFBooleanFalse;
    _OWORD v56[2] = kSymptomDiagnosticActionDiagnosticExtensions;
    void v57[2] = &__kCFBooleanFalse;
    std::string v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v57,  v56,  3LL));
    __int128 v32 = sub_1000160F4("com.apple.wpantund.awd", "default");
    uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 138412802;
      *(void *)&uint8_t buf[4] = v26;
      __int16 v52 = 2112;
      uint64_t v53 = v28;
      __int16 v54 = 2112;
      int v55 = v30;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_INFO,  "AWDMetricsClient_TriggerGroupAutoBugCapture : signatureWithDomain API call with args: SubType=%@, SubTypeContext =%@, DetectedProcess=%@.",  buf,  0x20u);
    }

    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue( [v22 signatureWithDomain:@"Thread SW" type:v25 subType:v26 subtypeContext:v28 detectedProcess:v30 triggerThresholdValues:0]);
    if (v34)
    {
      [v22 snapshotWithSignature:v34 duration:0 events:0 payload:v31 actions:1 wantsRemoteCase:&stru_1002B2CF0 reply:1.0];
      int v35 = 0;
    }

    else
    {
      id v44 = sub_1000160F4("com.apple.wpantund.awd", "default");
      uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
        sub_10020DFCC();
      }

      int v35 = 1;
    }
  }

  else
  {
    xpc_object_t v36 = sub_1000160F4("com.apple.wpantund.awd", "default");
    char v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      sub_10020DF5C(v25, v37, v38, v39, v40, v41, v42, v43);
    }
    int v35 = 1;
  }

  objc_autoreleasePoolPop(v21);
  if (v50 < 0)
  {
    operator delete(__p[0]);
    if ((v19 & 0x80000000) == 0) {
      return v35 == 0;
    }
LABEL_36:
    operator delete(v47);
    return v35 == 0;
  }

  if (v19 < 0) {
    goto LABEL_36;
  }
  return v35 == 0;
}

void sub_1000E9530( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (v22 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void sub_1000E95E8(id a1, NSDictionary *a2)
{
  char v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue( -[NSDictionary objectForKeyedSubscript:]( v2,  "objectForKeyedSubscript:",  kSymptomDiagnosticReplySuccess));
  unsigned int v4 = [v3 BOOLValue];

  if (v4)
  {
    char v5 = (os_log_s *)objc_claimAutoreleasedReturnValue( -[NSDictionary objectForKeyedSubscript:]( v2,  "objectForKeyedSubscript:",  kSymptomDiagnosticReplySessionID));
    memset(&v12, 0, sizeof(v12));
    id v6 = objc_claimAutoreleasedReturnValue( -[NSDictionary objectForKeyedSubscript:]( v2, "objectForKeyedSubscript:", kSymptomDiagnosticReplyGroupID));
    std::string::append(&v12, (const std::string::value_type *)[v6 UTF8String]);
    __int128 v7 = sub_1000160F4("com.apple.wpantund.awd", "default");
    int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      std::string::size_type size = v12.__r_.__value_.__s.__size_;
      uint64_t v10 = &v12;
      if ((v12.__r_.__value_.__s.__size_ & 0x80u) != 0)
      {
        std::string::size_type size = v12.__r_.__value_.__l.__size_;
        uint64_t v10 = (std::string *)v12.__r_.__value_.__r.__words[0];
      }

      *(_DWORD *)std::string buf = 136316162;
      uint64_t v14 = "AWDMetricsClient_TriggerGroupAutoBugCapture_block_invoke";
      __int16 v15 = 2112;
      uint64_t v16 = v5;
      __int16 v17 = 2112;
      id v18 = v6;
      __int16 v19 = 2080;
      uint64_t v20 = v10;
      __int16 v21 = 2048;
      std::string::size_type v22 = size;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s : SDR accepted snapshotWithSignature. SessionID=%@ GroupId=%@ str[%s] len[%zu]",  buf,  0x34u);
    }
  }

  else
  {
    __int16 v11 = sub_1000160F4("com.apple.wpantund.awd", "default");
    char v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v2, "objectForKeyedSubscript:", kSymptomDiagnosticReplyReason));
      sub_10020E068();
    }
  }
}

void sub_1000E97DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_1000E9838( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, const std::string::value_type *a5, uint64_t *a6, int a7)
{
  std::string v12 = sub_1000160F4("com.apple.wpantund.awd", "default");
  uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
    sub_10020E120(v13, v14, v15, v16, v17, v18, v19, v20);
  }

  sub_10000AC00(buf, "Command Error");
  std::string v48 = *(void **)buf;
  int v49 = SHIBYTE(v56);
  sub_10000AC00(__p, "Threadradiod");
  sub_10000AC00(&v50, "Error_str = ");
  sub_10000D650(&v50, a5);
  if (a7) {
    __int16 v21 = "::primary";
  }
  else {
    __int16 v21 = "::non_primary";
  }
  std::string::append(&v50, v21);
  std::string::size_type v22 = objc_autoreleasePoolPush();
  id v23 = objc_alloc_init(&OBJC_CLASS___SDRDiagnosticReporter);
  if (v23)
  {
    int v24 = sub_1000160F4("com.apple.wpantund.awd", "default");
    char v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = "AWDMetricsClient_GroupAutoBugCapture_Rx";
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_INFO,  "%s : SDRDiagnosticReporter init success",  buf,  0xCu);
    }

    id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a3, v48));
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a4));
    if ((v50.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v28 = &v50;
    }
    else {
      __int128 v28 = (std::string *)v50.__r_.__value_.__r.__words[0];
    }
    char v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v28));
    if (v52 >= 0) {
      unsigned int v30 = __p;
    }
    else {
      unsigned int v30 = (void **)__p[0];
    }
    std::string v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v30));
    __int128 v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a6));
    v58[0] = kSymptomDiagnosticActionGetNetworkInfo;
    v58[1] = kSymptomDiagnosticActionProbePacketCapture;
    v59[0] = &__kCFBooleanFalse;
    v59[1] = &__kCFBooleanFalse;
    v58[2] = kSymptomDiagnosticActionDiagnosticExtensions;
    v59[2] = &__kCFBooleanFalse;
    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v59,  v58,  3LL));
    uint64_t v34 = sub_1000160F4("com.apple.wpantund.awd", "default");
    int v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 138412802;
      *(void *)&uint8_t buf[4] = v27;
      __int16 v54 = 2112;
      int v55 = v29;
      __int16 v56 = 2112;
      char v57 = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_INFO,  "AWDMetricsClient_TriggerGroupAutoBugCapture : signatureWithDomain API call with args: SubType=%@, SubTypeContext =%@, DetectedProcess=%@.",  buf,  0x20u);
    }

    xpc_object_t v36 = (void *)objc_claimAutoreleasedReturnValue( [v23 signatureWithDomain:@"Thread SW" type:v26 subType:v27 subtypeContext:v29 detectedProcess:v31 triggerThresholdValues:0]);
    uint64_t v37 = v36;
    if (v36)
    {
      [v36 setObject:v32 forKey:kSymptomDiagnosticSignatureCaseGroupID];
      [v23 snapshotWithSignature:v37 duration:0 events:0 payload:v33 actions:&stru_1002B2D10 reply:1.0];
    }

    else
    {
      uint64_t v46 = sub_1000160F4("com.apple.wpantund.awd", "default");
      uint64_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)) {
        sub_10020DFCC();
      }
    }
  }

  else
  {
    uint64_t v38 = sub_1000160F4("com.apple.wpantund.awd", "default");
    id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
      sub_10020E0B0(v26, v39, v40, v41, v42, v43, v44, v45);
    }
  }

  objc_autoreleasePoolPop(v22);
  if (v52 < 0) {
    operator delete(__p[0]);
  }
  if (v49 < 0) {
    operator delete(v48);
  }
}

void sub_1000E9C88( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, int a10, int a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a11 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(a1);
}

void sub_1000E9D54(id a1, NSDictionary *a2)
{
  char v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue( -[NSDictionary objectForKeyedSubscript:]( v2,  "objectForKeyedSubscript:",  kSymptomDiagnosticReplySuccess));
  unsigned int v4 = [v3 BOOLValue];

  if (v4)
  {
    char v5 = (os_log_s *)objc_claimAutoreleasedReturnValue( -[NSDictionary objectForKeyedSubscript:]( v2,  "objectForKeyedSubscript:",  kSymptomDiagnosticReplySessionID));
    id v6 = sub_1000160F4("com.apple.wpantund.awd", "default");
    __int128 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v9 = 136315394;
      uint64_t v10 = "AWDMetricsClient_GroupAutoBugCapture_Rx_block_invoke";
      __int16 v11 = 2112;
      std::string v12 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s : SDR accepted snapshotWithSignature. SessionID=%@",  (uint8_t *)&v9,  0x16u);
    }
  }

  else
  {
    int v8 = sub_1000160F4("com.apple.wpantund.awd", "default");
    char v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v2, "objectForKeyedSubscript:", kSymptomDiagnosticReplyReason));
      sub_10020E190();
    }
  }
}

void sub_1000E9EC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000E9EF4(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = sub_1000160F4("com.apple.wpantund.awd", "default");
  char v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
    sub_10020E204();
  }

  id v6 = objc_autoreleasePoolPush();
  id v7 = objc_alloc_init(&OBJC_CLASS___SDRDiagnosticReporter);
  if (v7)
  {
    int v8 = sub_1000160F4("com.apple.wpantund.awd", "default");
    int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "AWDMetricsClient_TriggerAutoBugCapture : SDRDiagnosticReporter init success",  (uint8_t *)&buf,  2u);
    }

    memset(&v32, 0, sizeof(v32));
    std::string::append(&v32, "{");
    v38[0] = kSymptomDiagnosticActionGetNetworkInfo;
    v38[1] = kSymptomDiagnosticActionProbePacketCapture;
    v39[0] = &__kCFBooleanFalse;
    v39[1] = &__kCFBooleanFalse;
    v38[2] = kSymptomDiagnosticActionDiagnosticExtensions;
    void v39[2] = &__kCFBooleanFalse;
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v39,  v38,  3LL));
    int v11 = *(_DWORD *)(a1 + 4);
    switch(v11)
    {
      case 1:
        std::string v12 = objc_alloc(&OBJC_CLASS___NSString);
        uint64_t v13 = "Assert";
        break;
      case 2:
        std::string v12 = objc_alloc(&OBJC_CLASS___NSString);
        uint64_t v13 = "Hard_Fault";
        break;
      case 3:
        std::string v12 = objc_alloc(&OBJC_CLASS___NSString);
        uint64_t v13 = "Stack_Overflow";
        break;
      default:
        std::string v12 = objc_alloc(&OBJC_CLASS___NSString);
        uint64_t v13 = "Other";
        break;
    }

    uint64_t v15 = -[NSString initWithUTF8String:](v12, "initWithUTF8String:", v13);
    std::string::append(&v32, " ADDRESS=");
    std::to_string(&buf, *(_DWORD *)(a1 + 16));
    sub_10000D650(&v32, (const std::string::value_type *)&buf);
    std::string::append(&v32, ";");
    std::string::append(&v32, " LINE=");
    std::to_string(&buf, *(_DWORD *)(a1 + 20));
    sub_10000D650(&v32, (const std::string::value_type *)&buf);
    std::string::append(&v32, ";");
    std::string::append(&v32, " COUNT=");
    std::to_string(&buf, *(unsigned __int16 *)(a1 + 24));
    sub_10000D650(&v32, (const std::string::value_type *)&buf);
    std::string::append(&v32, ";");
    std::string::append(&v32, "}");
    uint64_t v16 = objc_alloc(&OBJC_CLASS___NSString);
    if ((v32.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v17 = &v32;
    }
    else {
      uint64_t v17 = (std::string *)v32.__r_.__value_.__r.__words[0];
    }
    uint64_t v18 = -[NSString initWithUTF8String:](v16, "initWithUTF8String:", v17);
    sub_10000AC00(__p, "Wpantund");
    if (v31 >= 0) {
      uint64_t v19 = __p;
    }
    else {
      uint64_t v19 = (void **)__p[0];
    }
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v19));
    __int16 v21 = sub_1000160F4("com.apple.wpantund.awd", "default");
    std::string::size_type v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 138412802;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v15;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v18;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2112;
      uint64_t v37 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_INFO,  "AWDMetricsClient_TriggerAutoBugCapture : signatureWithDomain API call with args: SubType=%@, SubTypeContext=%@, DetectedProcess=%@.",  (uint8_t *)&buf,  0x20u);
    }

    id v23 = (void *)objc_claimAutoreleasedReturnValue( [v7 signatureWithDomain:@"Thread SW" type:@"Crash" subType:v15 subtypeContext:v18 detectedProcess:v20 triggerThresholdValues:0]);
    if (v23)
    {
      int v24 = -[NSString initWithUTF8String:](objc_alloc(&OBJC_CLASS___NSString), "initWithUTF8String:", a2);
      char v25 = sub_1000160F4("com.apple.wpantund.awd", "default");
      id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 138412290;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "AWDMetricsClient_TriggerAutoBugCapture : crashFileName=%@.",  (uint8_t *)&buf,  0xCu);
      }

      uint64_t v33 = v24;
      uint64_t v34 = kSymptomDiagnosticKeyPayloadPath;
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v33, 1LL));
      int v35 = v27;
      __int128 v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v35,  &v34,  1LL));

      [v7 snapshotWithSignature:v23 duration:0 events:v28 payload:v10 actions:&stru_1002B2D30 reply:1.0];
    }

    else
    {
      char v29 = sub_1000160F4("com.apple.wpantund.awd", "default");
      int v24 = (NSString *)objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled((os_log_t)v24, OS_LOG_TYPE_ERROR)) {
        sub_10020DD50();
      }
    }

    if (v31 < 0) {
      operator delete(__p[0]);
    }
  }

  else
  {
    uint64_t v14 = sub_1000160F4("com.apple.wpantund.awd", "default");
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      sub_10020E1D8();
    }
  }

  objc_autoreleasePoolPop(v6);
}

void sub_1000EA48C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  if (a21 < 0) {
    operator delete(a16);
  }

  _Unwind_Resume(a1);
}

void sub_1000EA574(id a1, NSDictionary *a2)
{
  char v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue( -[NSDictionary objectForKeyedSubscript:]( v2,  "objectForKeyedSubscript:",  kSymptomDiagnosticReplySuccess));
  unsigned int v4 = [v3 BOOLValue];

  if (v4)
  {
    char v5 = (os_log_s *)objc_claimAutoreleasedReturnValue( -[NSDictionary objectForKeyedSubscript:]( v2,  "objectForKeyedSubscript:",  kSymptomDiagnosticReplySessionID));
    id v6 = sub_1000160F4("com.apple.wpantund.awd", "default");
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v9 = 138412290;
      uint64_t v10 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "AWDMetricsClient_TriggerAutoBugCapture : SDR accepted snapshotWithSignature. SessionID=%@",  (uint8_t *)&v9,  0xCu);
    }
  }

  else
  {
    int v8 = sub_1000160F4("com.apple.wpantund.awd", "default");
    char v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v2, "objectForKeyedSubscript:", kSymptomDiagnosticReplyReason));
      sub_10020E23C();
    }
  }
}

void sub_1000EA6CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000EA704(id *a1)
{
  return *a1;
}

void sub_1000EA70C( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_1000EA71C(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
}

uint64_t sub_1000EA72C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a2 + 4) = a3;
  *(_WORD *)(a2 + 12) = 2112;
  *(void *)(a2 + 14) = result;
  return result;
}

  ;
}

  ;
}

void sub_1000EA754()
{
}

void *sub_1000EA76C(void *a1)
{
  *a1 = off_1002B2DD8;
  a1[1] = off_1002B2380;
  sub_10000F9EC(a1 + 3);
  return a1;
}

uint64_t *sub_1000EA7AC(uint64_t a1, int a2)
{
  unsigned int v4 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  char v5 = v4;
  if (a2 == 9)
  {
    if (v4)
    {
      return sub_1000EA894(*(void *)(a1 + 16), a2);
    }

    BOOL v6 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (!v6) {
      return sub_1000EA894(*(void *)(a1 + 16), a2);
    }
LABEL_13:
    sub_10020E288(v6, v7, v8, v9, v10, v11, v12, v13);
    return sub_1000EA894(*(void *)(a1 + 16), a2);
  }

  if (!v4)
  {
    BOOL v6 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (!v6) {
      return sub_1000EA894(*(void *)(a1 + 16), a2);
    }
    goto LABEL_13;
  }

  return sub_1000EA894(*(void *)(a1 + 16), a2);
}

uint64_t *sub_1000EA894(uint64_t a1, int a2)
{
  int v14 = a2;
  __int128 v13 = 0uLL;
  sub_100010030(&v17, *(pthread_mutex_t **)(a1 + 24));
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    unsigned int v4 = atomic_load((unsigned int *)(v3 + 8));
    if (v4 == 1) {
      sub_1000EAA30(a1, &v17, 0, 1);
    }
  }

  sub_10008AE9C(&v13, (uint64_t *)a1);
  sub_10000F788(v19);
  sub_10000F8D8(&v17);
  LOBYTE(v17) = 0;
  v19[8] = (pthread_mutex_t *)10;
  v19[9] = (pthread_mutex_t *)&v18;
  v19[10] = 0LL;
  v19[11] = (pthread_mutex_t *)&v14;
  v19[12] = 0LL;
  v19[13] = 0LL;
  uint64_t v5 = *(void *)v13;
  v12[0] = (uint64_t)&v17;
  v12[1] = a1;
  void v12[2] = v5;
  uint64_t v6 = *(void *)(v13 + 16);
  *(void *)&__int128 v10 = *(void *)(v5 + 8);
  *((void *)&v10 + 1) = v5;
  *(void *)&__int128 v11 = &v17;
  *((void *)&v11 + 1) = v5;
  sub_1000EAD48((uint64_t *)&v10);
  *(void *)&__int128 v8 = *(void *)v13;
  *((void *)&v8 + 1) = v8;
  *(void *)&__int128 v9 = &v17;
  *((void *)&v9 + 1) = v8;
  sub_1000EAD48((uint64_t *)&v8);
  v16[0] = v10;
  v16[1] = v11;
  v15[0] = v8;
  v15[1] = v9;
  sub_1000EABF0(v6, (uint64_t *)v16, v15);
  sub_1000EAFF8(v12);
  sub_1000EB228((uint64_t)&v17);
  return sub_10000F9EC((uint64_t *)&v13 + 1);
}

void sub_1000EA9E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31)
{
}

uint64_t *sub_1000EAA30(uint64_t a1, void *a2, int a3, int a4)
{
  uint64_t v4 = **(void **)a1;
  uint64_t v5 = *(uint64_t **)(a1 + 16);
  uint64_t v7 = v5;
  return sub_1000EAA70(a1, a2, a3, &v7, a4);
}

uint64_t *sub_1000EAA70(uint64_t a1, void *a2, int a3, uint64_t **a4, int a5)
{
  unsigned int v8 = 0;
  double result = *a4;
  __int128 v13 = *a4;
  unsigned int v10 = a5 - 1;
  while (1)
  {
    if (result == **(uint64_t ***)a1 || v10 < v8)
    {
      *(void *)(a1 + 16) = result;
      return result;
    }

    if (a3)
    {
      sub_1000DCFE4((uint64_t *)result[2], a2);
      double result = v13;
    }

    uint64_t v12 = result[2];
    double result = (uint64_t *)(*(_BYTE *)(v12 + 24) ? result[1] : sub_1000EAB28(**(void **)a1, (void *)(v12 + 64), &v13));
    __int128 v13 = result;
    if (v8 == -1) {
      break;
    }
    ++v8;
  }

  __break(0x5500u);
  return result;
}

uint64_t sub_1000EAB28(uint64_t a1, void *a2, uint64_t **a3)
{
  uint64_t v6 = (uint64_t **)(a1 + 24);
  uint64_t v7 = sub_100011390(a1 + 24, (uint64_t)a2);
  unsigned int v8 = (uint64_t *)v7[6];
  __int128 v9 = *a3;
  if (v8 == *a3)
  {
    unsigned int v10 = v7;
    uint64_t v11 = v8[1];
    else {
      *sub_1000EABBC(v6, a2) = v11;
    }
    __int128 v9 = *a3;
  }

  return sub_10001134C(a1, v9);
}

void *sub_1000EABBC(uint64_t **a1, void *a2)
{
  uint64_t v3 = a2;
  return sub_100011468(a1, (uint64_t)a2, (uint64_t)&unk_1002294FC, &v3) + 6;
}

uint64_t *sub_1000EABF0(uint64_t a1, uint64_t *a2, void *a3)
{
  while (*a2 != *a3)
  {
    sub_1000EAC40(a2);
    double result = sub_1000EAD0C(a2);
  }

  return result;
}

uint64_t sub_1000EAC40(void *a1)
{
  char v2 = (_BYTE *)a1[2];
  if (!*v2)
  {
    sub_1000EACCC((uint64_t)(v2 + 272), *a1 + 16LL);
    if (!*v2) {
      *char v2 = 1;
    }
  }

  return a1[2] + 1LL;
}

uint64_t sub_1000EACCC(uint64_t a1, uint64_t a2)
{
  return sub_1000EACFC((uint64_t)&v3, (void *)(*(void *)(*(void *)a2 + 32LL) + 24LL));
}

uint64_t sub_1000EACFC(uint64_t a1, void *a2)
{
  return sub_100006FF8(a2);
}

uint64_t *sub_1000EAD0C(uint64_t *a1)
{
  *a1 = *(void *)(*a1 + 8);
  double result = sub_1000EAD48(a1);
  char v3 = (_BYTE *)a1[2];
  if (*v3) {
    _BYTE *v3 = 0;
  }
  return result;
}

uint64_t *sub_1000EAD48(uint64_t *result)
{
  uint64_t v1 = *result;
  if (*result != result[3])
  {
    char v2 = result;
    if (v1 == result[1]) {
      goto LABEL_12;
    }
    while (1)
    {
      sub_10008B464((uint64_t *)(v2[2] + 8), *(void *)(v2[2] + 264));
      sub_10000F810(v12, *(void *)(*v2 + 16));
      sub_1000EAF08(*(uint64_t **)(*v2 + 16), v12, v2[2] + 8);
      uint64_t v3 = *(void *)(*v2 + 16);
      uint64_t v4 = v2[2];
      if (*(_BYTE *)(v3 + 24))
      {
        int v5 = *(_DWORD *)(v4 + 280);
        BOOL v6 = __CFADD__(v5, 1);
        int v7 = v5 + 1;
        if (v6) {
          goto LABEL_15;
        }
        *(_DWORD *)(v4 + 280) = v7;
      }

      else
      {
        int v8 = *(_DWORD *)(v4 + 284);
        BOOL v6 = __CFADD__(v8, 1);
        int v9 = v8 + 1;
        if (v6) {
LABEL_15:
        }
          __break(0x5500u);
        *(_DWORD *)(v4 + 284) = v9;
      }

      if (!sub_10008B410(v3)) {
        break;
      }
      sub_10000FE20(&v13);
      double result = sub_10000F8D8(v12);
      uint64_t v10 = v2[1];
      uint64_t v1 = *(void *)(*v2 + 8);
      *char v2 = v1;
      if (v1 == v10) {
        goto LABEL_12;
      }
    }

    sub_10008B444(v2, v12, *v2);
    sub_10000FE20(&v13);
    double result = sub_10000F8D8(v12);
    uint64_t v1 = v2[1];
    if (*v2 == v1)
    {
LABEL_12:
      uint64_t v11 = v2[3];
      if (v11 != v1)
      {
        sub_10000F810(v12, *(void *)(v11 + 16));
        sub_10008B444(v2, v12, v2[1]);
        sub_10000FE20(&v13);
        return sub_10000F8D8(v12);
      }
    }
  }

  return result;
}

void sub_1000EAED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_1000EAF08(uint64_t *result, void *a2, uint64_t a3)
{
  uint64_t v3 = (_DWORD **)result[4];
  if (v3)
  {
    BOOL v6 = result;
    for (uint64_t i = *v3; i != v3[1]; i += 6)
    {
      sub_100012108(i, (uint64_t)v9);
      if (sub_100011134((uint64_t)i, (uint64_t)&v8))
      {
        sub_10000F6C4(v6, a2);
        return sub_1000122FC((uint64_t)v9);
      }

      sub_10008B4F8(a3, v9);
      double result = sub_1000122FC((uint64_t)v9);
      uint64_t v3 = (_DWORD **)v6[4];
    }
  }

  return result;
}

void sub_1000EAFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t *sub_1000EAFF8(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 284) > *(_DWORD *)(*a1 + 280)) {
    sub_1000EB038(a1[1], a1[2]);
  }
  return a1;
}

void *sub_1000EB038(uint64_t a1, uint64_t a2)
{
  if (**(void **)a1 == a2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4 || (unsigned int v5 = atomic_load((unsigned int *)(v4 + 8)), v5 != 1))
    {
      BOOL v6 = (uint64_t *)operator new(0x20uLL);
      sub_1000EB1A4(v6, *(void *)a1, **(void **)a1);
      sub_1000EB15C((__int128 *)a1, (uint64_t)v6);
    }

    char v8 = *(uint64_t **)(**(void **)a1 + 8LL);
    sub_1000EAA70(a1, v9, 0, &v8, 0);
  }

  sub_10000F788(&v10);
  return sub_10000F8D8(v9);
}

void sub_1000EB120( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, ...)
{
}

uint64_t *sub_1000EB15C(__int128 *a1, uint64_t a2)
{
  __int128 v3 = *a1;
  *a1 = v5;
  __int128 v5 = v3;
  return sub_10000F9EC((uint64_t *)&v5 + 1);
}

uint64_t *sub_1000EB1A4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  BOOL v6 = operator new(0x40uLL);
  sub_1000DBA48((uint64_t)v6, a3);
  sub_1000DBBFC(a1, (uint64_t)v6);
  uint64_t v7 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v7;
  if (v7)
  {
    char v8 = (unsigned int *)(v7 + 8);
    do
      unsigned int v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }

  return a1;
}

void sub_1000EB214(_Unwind_Exception *a1)
{
}

uint64_t sub_1000EB228(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 288);
  if (v2)
  {
    sub_10000F810(v4, v2);
    sub_10000FB70(*(uint64_t **)(a1 + 288), v4);
    sub_10000FE20(&v5);
    sub_10000F8D8(v4);
  }

  sub_10008BB48(a1 + 8);
  if (*(_BYTE *)a1) {
    *(_BYTE *)a1 = 0;
  }
  return a1;
}

void sub_1000EB2C0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006EEC(a1);
}

uint64_t sub_1000EB2CC(uint64_t a1, _OWORD *a2, unsigned int a3)
{
  *(_OWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 16) = a3;
  sub_100148E5C(a1, a3);
  return a1;
}

BOOL sub_1000EB300(uint64_t a1, uint64_t a2)
{
  return *(void *)a1 == *(void *)a2
      && *(void *)(a1 + 8) == *(void *)(a2 + 8)
      && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
}

uint64_t sub_1000EB330(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 16);
  unsigned int v3 = *(unsigned __int8 *)(a2 + 16);
  if (v2 < v3) {
    return 1LL;
  }
  if (v2 != v3) {
    return 0LL;
  }
  unint64_t v5 = bswap64(*(void *)a1);
  unint64_t v6 = bswap64(*(void *)a2);
  if (v5 == v6 && (unint64_t v5 = bswap64(*(void *)(a1 + 8)), v6 = bswap64(*(void *)(a2 + 8)), v5 == v6))
  {
    unsigned int v7 = 0;
  }

  else if (v5 < v6)
  {
    unsigned int v7 = -1;
  }

  else
  {
    unsigned int v7 = 1;
  }

  return v7 >> 31;
}

void *sub_1000EB3A0@<X0>(unsigned __int8 *a1@<X0>, void *a2@<X8>)
{
  if (v7 >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  snprintf(__str, 0x64uLL, "%s/%d", (const char *)v4, a1[16]);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return sub_10000AC00(a2, __str);
}

void *sub_1000EB454@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  else {
    unint64_t v5 = off_1002B2F98[v4];
  }
  return sub_10000AC00(a2, v5);
}

uint64_t sub_1000EB484(uint64_t result, int a2, char a3, int a4, int a5)
{
  *(_DWORD *)double result = a2;
  *(_BYTE *)(result + 4) = a3;
  *(_DWORD *)(result + 8) = a4;
  *(_DWORD *)(result + 12) = a5;
  return result;
}

void *sub_1000EB494@<X0>(void *a1@<X1>, int *a2@<X0>, int a3@<W2>, void *a4@<X8>)
{
  int v6 = a2[2];
  if (a3)
  {
    if (v6 == -1 && a2[3] == -1)
    {
      sub_100108154(a1, v10);
      sub_1000EB454(a2, __p);
      snprintf(__str, 0x12CuLL, "%-40s prefix_len:%-4d origin:%-8s valid:forever   preferred:forever");
    }

    else
    {
      sub_100108154(a1, v10);
      sub_1000EB454(a2, __p);
      snprintf(__str, 0x12CuLL, "%-40s prefix_len:%-4d origin:%-8s valid:%-10u preferred:%-10u");
    }
  }

  else if (v6 == -1 && a2[3] == -1)
  {
    sub_100108154(a1, v10);
    sub_1000EB454(a2, __p);
    snprintf(__str, 0x12CuLL, "%s/%d, origin:%s, valid:forever, preferred:forever");
  }

  else
  {
    sub_100108154(a1, v10);
    sub_1000EB454(a2, __p);
    snprintf(__str, 0x12CuLL, "%s/%d, origin:%s, valid:%u, preferred:%u");
  }

  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  return sub_10000AC00(a4, __str);
}

void sub_1000EB6D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000EB700@<X0>(void *a1@<X1>, int *a2@<X0>, int a3@<W2>, void *a4@<X8>)
{
  if (a3)
  {
    sub_100108154(a1, v9);
    sub_1000EB454(a2, __p);
    snprintf(__str, 0x12CuLL, "%-40s origin:%s");
  }

  else
  {
    sub_100108154(a1, v9);
    sub_1000EB454(a2, __p);
    snprintf(__str, 0x12CuLL, "%s, origin:%s");
  }

  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  return sub_10000AC00(a4, __str);
}

void sub_1000EB83C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000EB864@<X0>(int a1@<W0>, int a2@<W1>, void *a3@<X8>)
{
  if (a2)
  {
    int v5 = a1 & 0xC0;
    if ((a1 & 0xC0) != 0)
    {
      if (v5 == 192)
      {
        int v6 = "low";
      }

      else if (v5 == 64)
      {
        int v6 = "high";
      }

      else
      {
        int v6 = "none";
      }
    }

    else
    {
      int v6 = "med";
    }

    char v8 = "1";
    if ((a1 & 1) != 0) {
      char v9 = "1";
    }
    else {
      char v9 = "0";
    }
    if ((a1 & 2) != 0) {
      char v10 = "1";
    }
    else {
      char v10 = "0";
    }
    if ((a1 & 4) != 0) {
      char v11 = "1";
    }
    else {
      char v11 = "0";
    }
    if ((a1 & 8) != 0) {
      uint64_t v12 = "1";
    }
    else {
      uint64_t v12 = "0";
    }
    if ((a1 & 0x10) != 0) {
      uint64_t v13 = "1";
    }
    else {
      uint64_t v13 = "0";
    }
    if ((a1 & 0x20) != 0) {
      int v14 = "1";
    }
    else {
      int v14 = "0";
    }
    if ((a1 & 0x8000u) != 0) {
      uint64_t v15 = "1";
    }
    else {
      uint64_t v15 = "0";
    }
    if ((a1 & 0x4000) == 0) {
      char v8 = "0";
    }
    snprintf( __str,  0x12CuLL,  "flags:0x%02x [on-mesh:%s def-route:%s config:%s dhcp:%s slaac:%s pref:%s nd-dns:%s dp:%s prio:%s]",  a1,  v9,  v10,  v11,  v12,  v13,  v14,  v15,  v8,  v6);
  }

  else
  {
    sub_1000B5774(a1, "ppPSDCRM", &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    snprintf(__str, 0x12CuLL, "%s(0x%02x)", (const char *)p_p, a1);
  }

  return sub_10000AC00(a3, __str);
}

uint64_t sub_1000EB9EC(uint64_t a1, int a2)
{
  int v17 = 5;
  uint64_t v4 = sub_1000F165C(a1, &v17);
  int v17 = 4;
  uint64_t v5 = sub_1000F165C(a1, &v17);
  int v17 = 3;
  uint64_t v6 = sub_1000F165C(a1, &v17);
  int v17 = 2;
  uint64_t v7 = sub_1000F165C(a1, &v17);
  int v17 = 1;
  uint64_t v8 = sub_1000F165C(a1, &v17);
  int v17 = 0;
  uint64_t v9 = sub_1000F165C(a1, &v17);
  int v17 = 6;
  uint64_t v10 = sub_1000F165C(a1, &v17);
  int v17 = 7;
  if (a2 == -1) {
    __int16 v11 = 192;
  }
  else {
    __int16 v11 = 0;
  }
  if (a2 == 1) {
    __int16 v11 = 64;
  }
  unsigned __int16 v12 = v11 | (v4 != 0);
  if (v5) {
    v12 |= 2u;
  }
  if (v6) {
    v12 |= 4u;
  }
  if (v7) {
    v12 |= 8u;
  }
  if (v8) {
    v12 |= 0x10u;
  }
  if (v9) {
    v12 |= 0x20u;
  }
  if (v10) {
    unsigned __int16 v13 = v12 | 0x4000;
  }
  else {
    unsigned __int16 v13 = v12;
  }
  uint64_t v14 = sub_1000F165C(a1, &v17);
  unsigned __int16 v15 = v13 | 0x8000;
  if (!v14) {
    return v13;
  }
  return v15;
}

BOOL sub_1000EBB58(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2
      && (*(_DWORD *)a1
       || *(unsigned __int16 *)(a1 + 4) == *(unsigned __int16 *)(a2 + 4)
}

void *sub_1000EBBAC@<X0>(void *a1@<X1>, uint64_t a2@<X0>, int a3@<W2>, void *a4@<X8>)
{
  if (a3)
  {
    uint64_t v6 = v12;
    sub_100108154(a1, v12);
    if (v13 < 0) {
      uint64_t v6 = (void **)v12[0];
    }
    sub_1000EB454((int *)a2, v10);
    sub_1000EB864(*(unsigned __int16 *)(a2 + 4), 1, __p);
    snprintf(__str, 0x12CuLL, "%-22s prefix_len:%-4d origin:%-8s stable:%s %s rloc:0x%04x", v6);
  }

  else
  {
    sub_1000EB3A0((unsigned __int8 *)a1, v12);
    sub_1000EB454((int *)a2, v10);
    sub_1000EB864(*(unsigned __int16 *)(a2 + 4), 0, __p);
    snprintf(__str, 0x12CuLL, "%s, origin:%s, stable:%s, flags:%s, rloc:0x%04x");
  }

  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  return sub_10000AC00(a4, __str);
}

void sub_1000EBDA8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1000EBDEC(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2
      && (*(_DWORD *)a1
       || *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
}

void *sub_1000EBE40@<X0>(int *a1@<X0>, unsigned __int8 *a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  if (a3)
  {
    uint64_t v6 = v19;
    sub_1000EB3A0(a2, v19);
    if (v20 < 0) {
      uint64_t v6 = (void **)v19[0];
    }
    sub_1000EB454(a1, v17);
    int v7 = v18;
    uint64_t v8 = (void **)v17[0];
    sub_1000FC6F0(a1[1], __p);
    char v9 = v17;
    if (v7 < 0) {
      char v9 = v8;
    }
    snprintf( __str,  0x12CuLL,  "%-26s origin:%-8s nat64:%s stable:%s preference:%-7s rloc:0x%04x next_hop_is_host:%s",  v6,  v9);
  }

  else
  {
    uint64_t v10 = v19;
    sub_1000EB3A0(a2, v19);
    if (v20 < 0) {
      uint64_t v10 = (void **)v19[0];
    }
    sub_1000EB454(a1, v17);
    int v11 = v18;
    unsigned __int16 v12 = (void **)v17[0];
    sub_1000FC6F0(a1[1], __p);
    char v13 = v17;
    if (v11 < 0) {
      char v13 = v12;
    }
    snprintf( __str,  0x12CuLL,  "%s, origin:%s, nat64:%s stable:%s, preference:%s, rloc:0x%04x, next_hop_is_host:%s",  v10,  v13);
  }

  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  return sub_10000AC00(a4, __str);
}

void sub_1000EC064( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1000EC0A8(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && (uint64_t v3 = a1 + 16,
        unsigned int v2 = *(const void **)(a1 + 16),
        size_t v4 = *(void *)(v3 + 8) - (void)v2,
        uint64_t v6 = a2 + 16,
        uint64_t v5 = *(const void **)(a2 + 16),
        v4 == *(void *)(v6 + 8) - (void)v5))
  {
    return memcmp(v2, v5, v4) == 0;
  }

  else
  {
    return 0LL;
  }

void sub_1000EC104(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  p_p = &__p;
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  snprintf(__str, 0xC8uLL, "EnterpriseNumber:%u, Service Data: 0x%s", *(_DWORD *)(a1 + 12), (const char *)p_p);
  sub_10000AC00(a2, __str);
}

void sub_1000EC1D8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000EC218(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  size_t v4 = v8;
  if (v9 < 0) {
    size_t v4 = (void **)v8[0];
  }
  p_p = &__p;
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  snprintf( __str,  0xC8uLL,  "%s, Stable:%d, Origin: %d, Server Data: 0x%s",  (const char *)v4,  *(unsigned __int8 *)(a1 + 40),  *(_DWORD *)(a1 + 8),  (const char *)p_p);
  sub_10000AC00(a2, __str);
  if (v9 < 0) {
    operator delete(v8[0]);
  }
}

void sub_1000EC320( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000EC378@<X0>(unsigned __int8 *a1@<X1>, int a2@<W2>, void *a3@<X8>)
{
  if (a2)
  {
    sub_1000EB3A0(a1, __p);
    snprintf(__str, 0x12CuLL, "%-26s metric:%-6d");
  }

  else
  {
    sub_1000EB3A0(a1, __p);
    snprintf(__str, 0x12CuLL, "%s, metric:%d");
  }

  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return sub_10000AC00(a3, __str);
}

void sub_1000EC468(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 1414))
  {
    *(_BYTE *)(a1 + 1414) = 0;
    sub_1000EC47C(a1);
  }

void sub_1000EC47C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 1402) || *(_BYTE *)(a1 + 1404))
  {
    unsigned int v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v2)
    {
      uint64_t v3 = v2;
      if (sub_10015A058(6) && os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Refreshing routes on primary interface",  buf,  2u);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }
  }

  size_t v4 = *(uint64_t **)(a1 + 1144);
  uint64_t i = v4;
  while (v4 != (uint64_t *)(a1 + 1152))
  {
    if (sub_1000F059C(a1, (uint64_t)v4 + 28, &v17) && v17 == *((_DWORD *)i + 12))
    {
      sub_10000B338((uint64_t)&i);
      size_t v4 = i;
    }

    else
    {
      uint64_t v5 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v5)
      {
        if (sub_10015A058(6) && os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        {
          sub_1000EC378((unsigned __int8 *)i + 28, 0, buf);
          char v6 = v21 >= 0 ? buf : *(_BYTE **)buf;
          *(_DWORD *)std::string::size_type v22 = 136315138;
          id v23 = v6;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "InterfaceRoutes: Removing %s", v22, 0xCu);
          if (v21 < 0) {
            operator delete(*(void **)buf);
          }
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "com.apple.wpantund.ncp";
        __int16 v19 = 2080;
        char v20 = "default";
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging Module is not defined for SubSystem: %s, Category: %s",  buf,  0x16u);
      }

      sub_10012054C(*(void *)(a1 + 184), (char *)i + 28, *((unsigned __int8 *)i + 44));
      sub_100011568(a1 + 1144, i);
      size_t v4 = *(uint64_t **)(a1 + 1144);
      uint64_t i = v4;
    }
  }

  if (*(_BYTE *)(a1 + 1402))
  {
    int v7 = *(void **)(a1 + 1120);
    if (v7 != (void *)(a1 + 1128))
    {
      do
      {
        uint64_t v8 = sub_100075788(a1 + 1120, (uint64_t)v7 + 28);
        if (sub_1000F059C(a1, (uint64_t)v7 + 28, &v17) && !sub_1000F2A38(a1 + 1144, (uint64_t)v7 + 28))
        {
          char v9 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v9)
          {
            if (sub_10015A058(6) && os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
            {
              sub_1000EBE40((int *)v7 + 12, (unsigned __int8 *)v7 + 28, 0, buf);
              uint64_t v10 = buf;
              if (v21 < 0) {
                uint64_t v10 = *(_BYTE **)buf;
              }
              *(_DWORD *)std::string::size_type v22 = 136315138;
              id v23 = v10;
              _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "InterfaceRoutes: Adding %s", v22, 0xCu);
              if (v21 < 0) {
                operator delete(*(void **)buf);
              }
            }
          }

          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 136315394;
            *(void *)&uint8_t buf[4] = "com.apple.wpantund.ncp";
            __int16 v19 = 2080;
            char v20 = "default";
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging Module is not defined for SubSystem: %s, Category: %s",  buf,  0x16u);
          }

          int v11 = v17;
          sub_1001203B4(*(void *)(a1 + 184), (char *)v7 + 28, *((unsigned __int8 *)v7 + 44));
          *(_DWORD *)sub_1000F075C((uint64_t **)(a1 + 1144), (__n128 *)((char *)v7 + 2sub_10000F9EC((uint64_t *)(v36 + 8)) = v11;
        }

        int v7 = v8;
      }

      while ((void *)(a1 + 1128) != v8);
    }
  }

  if (*(_BYTE *)(a1 + 1404))
  {
    unsigned __int16 v12 = *(uint64_t **)(a1 + 1096);
    for (i = v12; i != (uint64_t *)(a1 + 1104); unsigned __int16 v12 = i)
    {
      if (sub_1000F059C(a1, (uint64_t)v12 + 28, &v17) && !sub_1000F2A38(a1 + 1144, (uint64_t)i + 28))
      {
        char v13 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v13)
        {
          if (sub_10015A058(6) && os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            sub_1000EBBAC((char *)i + 28, (uint64_t)(i + 6), 0, buf);
            if (v21 >= 0) {
              uint64_t v14 = buf;
            }
            else {
              uint64_t v14 = *(_BYTE **)buf;
            }
            *(_DWORD *)std::string::size_type v22 = 136315138;
            id v23 = v14;
            _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "InterfaceRoutes: Adding route for prefix %s",  v22,  0xCu);
            if (v21 < 0) {
              operator delete(*(void **)buf);
            }
          }
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "com.apple.wpantund.ncp";
          __int16 v19 = 2080;
          char v20 = "default";
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging Module is not defined for SubSystem: %s, Category: %s",  buf,  0x16u);
        }

        int v15 = v17;
        sub_1001203B4(*(void *)(a1 + 184), (char *)i + 28, *((unsigned __int8 *)i + 44));
        *(_DWORD *)sub_1000F075C((uint64_t **)(a1 + 1144), (__n128 *)((char *)i + 2sub_10000F9EC((uint64_t *)(v36 + 8)) = v15;
      }

      sub_10000B338((uint64_t)&i);
    }
  }

  sub_1000ECC40((uint64_t *)a1);
}

void sub_1000ECA90(uint64_t a1)
{
  unsigned int v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v2)
  {
    uint64_t v3 = v2;
    if (sub_10015A058(6) && os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v7 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Removing all address/prefix/route entries",  v7,  2u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  uint64_t v4 = *(void *)(a1 + 1048);
  *(void *)int v7 = v4;
  while (v4 != a1 + 1056)
  {
    sub_10011FD44(*(void *)(a1 + 184), v4 + 28);
    sub_10000B338((uint64_t)v7);
    uint64_t v4 = *(void *)v7;
  }

  uint64_t v5 = *(void *)(a1 + 1072);
  *(void *)int v7 = v5;
  while (v5 != a1 + 1080)
  {
    sub_100120190(*(void *)(a1 + 184), v5 + 28);
    sub_10000B338((uint64_t)v7);
    uint64_t v5 = *(void *)v7;
  }

  uint64_t v6 = *(void *)(a1 + 1144);
  *(void *)int v7 = v6;
  while (v6 != a1 + 1152)
  {
    sub_10012054C(*(void *)(a1 + 184), (void *)(v6 + 28), *(unsigned __int8 *)(v6 + 44));
    sub_10000B338((uint64_t)v7);
    uint64_t v6 = *(void *)v7;
  }

  *(void *)(a1 + 1456) = 0LL;
  *(void *)(a1 + 1448) = 0LL;
  *(void *)(a1 + 1440) = 0LL;
  *(void *)(a1 + 1432) = 0LL;
  sub_1000F1694(a1 + 1048);
  sub_1000F1694(a1 + 1072);
  sub_1000F1694(a1 + 1096);
  sub_1000F1694(a1 + 1120);
  sub_1000F1694(a1 + 1144);
  sub_100075D20(a1 + 1192, *(uint64_t (****)(void))(a1 + 1192));
  sub_1000ECC40((uint64_t *)a1);
  sub_1000ECF4C((uint64_t *)a1);
}

void sub_1000ECC40(uint64_t *a1)
{
  unsigned int v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v2)
  {
    uint64_t v3 = v2;
    if (sub_10015A058(6) && os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = a1[145];
      uint64_t v5 = a1[148];
      *(_DWORD *)std::string buf = 134218240;
      *(void *)&uint8_t buf[4] = v4;
      *(_WORD *)&_BYTE buf[12] = 2048;
      *(void *)&_BYTE buf[14] = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "signal_router_list_change Router:Size[%lu] Backup[%lu]",  buf,  0x16u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  if (sub_1000F0790(a1))
  {
    sub_1000F2C30(a1 + 146, a1 + 143);
    *(void *)std::string buf = buf;
    *(_OWORD *)&uint8_t buf[8] = (unint64_t)buf;
    uint64_t v6 = a1[143];
    for (i = v6; (uint64_t *)i != a1 + 144; uint64_t v6 = i)
    {
      uint64_t v14 = 0LL;
      uint64_t v15 = 0LL;
      char v13 = &v14;
      sub_1000EB3A0((unsigned __int8 *)(v6 + 28), &v11);
      sub_10000AC00(&__p, "Address");
      int v7 = sub_10000ED88((uint64_t **)&v13, &__p);
      sub_1000175B4(v7, (uint64_t)&v11);
      if (v10 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      if (v12 < 0) {
        operator delete((void *)v11.n128_u64[0]);
      }
      __p.n128_u32[0] = *(_DWORD *)(i + 48);
      sub_10000AC00(&v11, "Metric");
      uint64_t v8 = sub_10000ED88((uint64_t **)&v13, &v11);
      sub_100017F70(v8, &__p);
      if (v12 < 0) {
        operator delete((void *)v11.n128_u64[0]);
      }
      sub_10000D584((uint64_t *)buf, (uint64_t *)&v13);
      sub_10000D448((uint64_t)&v13);
      sub_10000B338((uint64_t)&i);
    }

    sub_10000AC00(&v13, "IPv6:Routes");
    sub_1000737B8(&v11, (uint64_t)buf);
    (*(void (**)(uint64_t *, void **, __n128 *))(*a1 + 360))(a1, &v13, &v11);
    if (v11.n128_u64[0]) {
      (*(void (**)(unint64_t))(*(void *)v11.n128_u64[0] + 8LL))(v11.n128_u64[0]);
    }
    if (SHIBYTE(v15) < 0) {
      operator delete(v13);
    }
    sub_10000C178((uint64_t *)buf);
  }

void sub_1000ECEB0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, uint64_t a28)
{
  if (a15) {
    (*(void (**)(void *))(*(void *)a15 + 8LL))(a15);
  }
  if (a26 < 0) {
    operator delete(__p);
  }
  sub_10000C178(&a28);
  _Unwind_Resume(a1);
}

void sub_1000ECF4C(uint64_t *a1)
{
  unsigned int v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v2)
  {
    uint64_t v3 = v2;
    if (sub_10015A058(6) && os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      unint64_t v4 = 0x8E38E38E38E38E39LL * ((a1[150] - a1[149]) >> 3);
      unint64_t v5 = 0x8E38E38E38E38E39LL * ((a1[153] - a1[152]) >> 3);
      *(_DWORD *)std::string buf = 134218240;
      *(void *)&uint8_t buf[4] = v4;
      *(_WORD *)&_BYTE buf[12] = 2048;
      *(void *)&_BYTE buf[14] = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "signal_service_list_change service:Size[%lu] backup[%lu]",  buf,  0x16u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  if (sub_1000F1570(a1))
  {
    sub_1000F2E30((uint64_t)(a1 + 152), a1[149], a1[150], 0x8E38E38E38E38E39LL * ((a1[150] - a1[149]) >> 3));
    *(void *)std::string buf = buf;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0LL;
    for (uint64_t i = a1[149]; i != a1[150]; i += 72LL)
    {
      uint64_t v15 = 0LL;
      uint64_t v16 = 0LL;
      uint64_t v14 = &v15;
      v17.n128_u32[0] = *(_DWORD *)(i + 12);
      sub_10000AC00(__p, "EnterpriseNumber");
      int v7 = sub_10000ED88((uint64_t **)&v14, (__n128 *)__p);
      sub_100017F70(v7, &v17);
      if (v22 < 0) {
        operator delete(*(void **)__p);
      }
      sub_10000AC00(__p, "ServiceData");
      uint64_t v8 = sub_10000ED88((uint64_t **)&v14, (__n128 *)__p);
      sub_10008C89C(v8, i + 16);
      if (v22 < 0) {
        operator delete(*(void **)__p);
      }
      v17.n128_u8[0] = *(_BYTE *)(i + 40);
      sub_10000AC00(__p, "Stable");
      char v9 = sub_10000ED88((uint64_t **)&v14, (__n128 *)__p);
      sub_100020B4C(v9, &v17);
      if (v22 < 0) {
        operator delete(*(void **)__p);
      }
      sub_10000AC00(__p, "ServerData");
      char v10 = sub_10000ED88((uint64_t **)&v14, (__n128 *)__p);
      sub_10008C89C(v10, i + 48);
      if (v22 < 0) {
        operator delete(*(void **)__p);
      }
      sub_1000EB454((int *)(i + 8), __p);
      sub_10000AC00(&v17, "Origin");
      __n128 v11 = sub_10000ED88((uint64_t **)&v14, &v17);
      sub_1000175B4(v11, (uint64_t)__p);
      if (v18 < 0) {
        operator delete((void *)v17.n128_u64[0]);
      }
      if (v22 < 0) {
        operator delete(*(void **)__p);
      }
      sub_10000D584((uint64_t *)buf, (uint64_t *)&v14);
      char v12 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v12)
      {
        if (sub_10015A058(6) && os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)i + 16LL))(__p, i);
          char v13 = __p;
          if (v22 < 0) {
            char v13 = *(_BYTE **)__p;
          }
          v17.n128_u32[0] = 136315138;
          *(unint64_t *)((char *)v17.n128_u64 + 4) = (unint64_t)v13;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Signaling Service: %s",  (uint8_t *)&v17,  0xCu);
          if (v22 < 0) {
            operator delete(*(void **)__p);
          }
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__n128 __p = 136315394;
        *(void *)&__p[4] = "com.apple.wpantund.ncp";
        __int16 v20 = 2080;
        char v21 = "default";
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging Module is not defined for SubSystem: %s, Category: %s",  __p,  0x16u);
      }

      sub_10000D448((uint64_t)&v14);
    }

    sub_10000AC00(&v14, "Thread:Services");
    sub_1000737B8(__p, (uint64_t)buf);
    (*(void (**)(uint64_t *, void **, _BYTE *))(*a1 + 360))(a1, &v14, __p);
    if (*(void *)__p) {
      (*(void (**)(void))(**(void **)__p + 8LL))(*(void *)__p);
    }
    if (SHIBYTE(v16) < 0) {
      operator delete(v14);
    }
    sub_10000C178((uint64_t *)buf);
  }

void sub_1000ED3F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, void *a27, uint64_t a28, int a29, __int16 a30, char a31, char a32)
{
  if (a27) {
    (*(void (**)(void *))(*(void *)a27 + 8LL))(a27);
  }
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_10000C178((uint64_t *)(v32 - 112));
  _Unwind_Resume(a1);
}

void sub_1000ED4AC(uint64_t a1)
{
  unsigned int v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v2)
  {
    uint64_t v3 = v2;
    if (sub_10015A058(6) && os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Removing all NCP originated addresses", buf, 2u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  unint64_t v4 = *(uint64_t **)(a1 + 1048);
  char v22 = v4;
  while (v4 != (uint64_t *)(a1 + 1056))
  {
    if (*((_DWORD *)v4 + 11))
    {
      sub_10000B338((uint64_t)&v22);
      unint64_t v4 = v22;
    }

    else
    {
      unint64_t v5 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v5)
      {
        if (sub_10015A058(6) && os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        {
          sub_1000EB494((char *)v22 + 28, (int *)v22 + 11, 0, buf);
          uint64_t v6 = v26 >= 0 ? buf : *(_BYTE **)buf;
          *(_DWORD *)uint64_t v27 = 136315138;
          __int128 v28 = v6;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "UnicastAddresses: Removing %s", v27, 0xCu);
          if (v26 < 0) {
            operator delete(*(void **)buf);
          }
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "com.apple.wpantund.ncp";
        __int16 v24 = 2080;
        char v25 = "default";
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging Module is not defined for SubSystem: %s, Category: %s",  buf,  0x16u);
      }

      sub_10011FD44(*(void *)(a1 + 184), (uint64_t)v22 + 28);
      sub_100011568(a1 + 1048, v22);
      unint64_t v4 = *(uint64_t **)(a1 + 1048);
      char v22 = v4;
    }
  }

  int v7 = *(uint64_t **)(a1 + 1072);
  char v22 = v7;
  while (v7 != (uint64_t *)(a1 + 1080))
  {
    if (*((_DWORD *)v7 + 11))
    {
      sub_10000B338((uint64_t)&v22);
      int v7 = v22;
    }

    else
    {
      uint64_t v8 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v8)
      {
        if (sub_10015A058(6) && os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          sub_1000EB700((char *)v22 + 28, (int *)v22 + 11, 0, buf);
          char v9 = v26 >= 0 ? buf : *(_BYTE **)buf;
          *(_DWORD *)uint64_t v27 = 136315138;
          __int128 v28 = v9;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "MulticastAddresses: Removing %s", v27, 0xCu);
          if (v26 < 0) {
            operator delete(*(void **)buf);
          }
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "com.apple.wpantund.ncp";
        __int16 v24 = 2080;
        char v25 = "default";
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging Module is not defined for SubSystem: %s, Category: %s",  buf,  0x16u);
      }

      sub_100120190(*(void *)(a1 + 184), (uint64_t)v22 + 28);
      sub_100011568(a1 + 1072, v22);
      int v7 = *(uint64_t **)(a1 + 1072);
      char v22 = v7;
    }
  }

  char v10 = *(uint64_t **)(a1 + 1096);
  char v22 = v10;
  while (v10 != (uint64_t *)(a1 + 1104))
  {
    if (*((_DWORD *)v10 + 12))
    {
      sub_10000B338((uint64_t)&v22);
      char v10 = v22;
    }

    else
    {
      __n128 v11 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v11)
      {
        if (sub_10015A058(6) && os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          sub_1000EBBAC((char *)v22 + 28, (uint64_t)(v22 + 6), 0, buf);
          char v12 = buf;
          if (v26 < 0) {
            char v12 = *(_BYTE **)buf;
          }
          *(_DWORD *)uint64_t v27 = 136315138;
          __int128 v28 = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "OnMeshPrefixes: Removing %s", v27, 0xCu);
          if (v26 < 0) {
            operator delete(*(void **)buf);
          }
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "com.apple.wpantund.ncp";
        __int16 v24 = 2080;
        char v25 = "default";
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging Module is not defined for SubSystem: %s, Category: %s",  buf,  0x16u);
      }

      sub_100011568(a1 + 1096, v22);
      *(_BYTE *)(a1 + 1414) = 1;
      char v10 = *(uint64_t **)(a1 + 1096);
      char v22 = v10;
    }
  }

  char v13 = *(uint64_t **)(a1 + 1120);
  char v22 = v13;
  while (v13 != (uint64_t *)(a1 + 1128))
  {
    if (*((_DWORD *)v13 + 12))
    {
      sub_10000B338((uint64_t)&v22);
      char v13 = v22;
    }

    else
    {
      uint64_t v14 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v14)
      {
        if (sub_10015A058(6) && os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          sub_1000EBE40((int *)v22 + 12, (unsigned __int8 *)v22 + 28, 0, buf);
          uint64_t v15 = buf;
          if (v26 < 0) {
            uint64_t v15 = *(_BYTE **)buf;
          }
          *(_DWORD *)uint64_t v27 = 136315138;
          __int128 v28 = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "OffMeshRoutes: Removing %s", v27, 0xCu);
          if (v26 < 0) {
            operator delete(*(void **)buf);
          }
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "com.apple.wpantund.ncp";
        __int16 v24 = 2080;
        char v25 = "default";
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging Module is not defined for SubSystem: %s, Category: %s",  buf,  0x16u);
      }

      sub_100011568(a1 + 1120, v22);
      *(_BYTE *)(a1 + 1414) = 1;
      char v13 = *(uint64_t **)(a1 + 1120);
      char v22 = v13;
    }
  }

  while (1)
  {
    uint64_t v16 = *(void *)(a1 + 1192);
    __n128 v17 = *(_DWORD **)(a1 + 1200);
    if ((_DWORD *)v16 == v17) {
      break;
    }
    uint64_t v18 = -v16;
    while (*(_DWORD *)(v16 + 8))
    {
      v16 += 72LL;
      v18 -= 72LL;
      if ((_DWORD *)v16 == v17) {
        goto LABEL_80;
      }
    }

    __int16 v19 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v19)
    {
      if (sub_10015A058(6) && os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)v16 + 16LL))(buf, v16);
        __int16 v20 = buf;
        if (v26 < 0) {
          __int16 v20 = *(_BYTE **)buf;
        }
        *(_DWORD *)uint64_t v27 = 136315138;
        __int128 v28 = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Services: Removing %s", v27, 0xCu);
        if (v26 < 0) {
          operator delete(*(void **)buf);
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "com.apple.wpantund.ncp";
      __int16 v24 = 2080;
      char v25 = "default";
      _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging Module is not defined for SubSystem: %s, Category: %s",  buf,  0x16u);
    }

    sub_100075DD4((uint64_t)buf, 72 - v18, *(void *)(a1 + 1200), -v18);
    sub_100075D20(a1 + 1192, v21);
  }

LABEL_80:
  sub_1000ECF4C((uint64_t *)a1);
}

  __int128 v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_receivingTime));
  [v3 setObject:v28 forKey:@"receiving_time"];

  uint64_t v8 = self->_has;
  if ((*(void *)&v8 & 0x800000000LL) == 0)
  {
LABEL_23:
    if ((*(void *)&v8 & 0x400000000LL) == 0) {
      goto LABEL_24;
    }
    goto LABEL_82;
  }

  PBDataWriterWriteUint32Field(v7, self->_receivingTime, 19LL);
  uint64_t v6 = self->_has;
  if ((*(void *)&v6 & 0x800000000LL) == 0)
  {
LABEL_23:
    if ((*(void *)&v6 & 0x400000000LL) == 0) {
      goto LABEL_24;
    }
    goto LABEL_82;
  }

  v4[11] = self->_receivingTime;
  *((void *)v4 + 31) |= 0x200uLL;
  uint64_t v6 = self->_has;
  if ((*(void *)&v6 & 0x800000000LL) == 0)
  {
LABEL_23:
    if ((*(void *)&v6 & 0x400000000LL) == 0) {
      goto LABEL_24;
    }
    goto LABEL_82;
  }

  *((_DWORD *)v6 + 39) = self->_transmittedFrames;
  v6[31] |= 0x400000000uLL;
  char v10 = self->_has;
  if ((*(void *)&v10 & 0x1000000000000LL) == 0)
  {
LABEL_23:
    if ((*(void *)&v10 & 0x800000000000LL) == 0) {
      goto LABEL_24;
    }
    goto LABEL_82;
  }

  uint64_t v42 = 0LL;
  if ((*(void *)&v4 & 0x800000000000LL) != 0)
  {
LABEL_28:
    uint64_t v41 = 2654435761LL * self->_txErrorTimeslotDenied;
    if ((*(void *)&v4 & 0x20000000000LL) != 0) {
      goto LABEL_29;
    }
    goto LABEL_82;
  }

  self->_txDelayMax = v5[43];
  *(void *)&self->_has |= 0x4000000000uLL;
  char v9 = *((void *)v5 + 31);
  if ((v9 & 0x2000000000LL) == 0)
  {
LABEL_27:
    if ((v9 & 0x1000000000LL) == 0) {
      goto LABEL_28;
    }
    goto LABEL_82;
  }

  char v83 = 0LL;
  uint64_t v40 = v10;
LABEL_81:

  return v83;
}

void sub_1000EDD28(uint64_t a1)
{
  unsigned int v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v2)
  {
    uint64_t v3 = v2;
    if (sub_10015A058(6) && os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Restoring interface/user originated address/prefix/route entries on NCP",  buf,  2u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  uint64_t v4 = *(void *)(a1 + 1048);
  *(void *)std::string buf = v4;
  while (v4 != a1 + 1056)
  {
    sub_10000B338((uint64_t)buf);
    uint64_t v4 = *(void *)buf;
  }

  uint64_t v5 = *(void *)(a1 + 1072);
  for (*(void *)buf = v5; *(void *)buf != a1 + 1080; uint64_t v5 = *(void *)buf)
  {
    if ((*(_DWORD *)(v5 + 44) - 1) <= 1)
    {
      uint64_t v6 = v5 + 28;
      int v7 = operator new(0x28uLL);
      *int v7 = sub_1000EE234;
      v7[1] = 0LL;
      void v7[2] = a1;
      v7[3] = "restoring multicast address";
      v28[0] = off_1002B2F38;
      v28[1] = v7;
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 184LL))(a1, v6, v28);
      sub_1000075F0(v28);
    }

    sub_10000B338((uint64_t)buf);
  }

  uint64_t v8 = *(void *)(a1 + 1096);
  for (*(void *)buf = v8; *(void *)buf != a1 + 1104; uint64_t v8 = *(void *)buf)
  {
    if ((*(_DWORD *)(v8 + 48) - 1) <= 1)
    {
      uint64_t v9 = v8 + 28;
      uint64_t v10 = *(unsigned __int8 *)(v8 + 44);
      uint64_t v11 = *(unsigned __int16 *)(v8 + 52);
      uint64_t v12 = *(unsigned __int8 *)(v8 + 54);
      char v13 = operator new(0x28uLL);
      *char v13 = sub_1000EE234;
      v13[1] = 0LL;
      void v13[2] = a1;
      uint64_t v13[3] = "restoring on-mesh prefix";
      v27[0] = off_1002B2F38;
      v27[1] = v13;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 216LL))( a1,  v9,  v10,  v11,  v12,  v27);
      sub_1000075F0(v27);
    }

    sub_10000B338((uint64_t)buf);
  }

  uint64_t v14 = *(void *)(a1 + 1120);
  for (*(void *)buf = v14; *(void *)buf != a1 + 1128; uint64_t v14 = *(void *)buf)
  {
    if ((*(_DWORD *)(v14 + 48) - 1) <= 1)
    {
      uint64_t v15 = v14 + 28;
      uint64_t v16 = *(unsigned __int8 *)(v14 + 44);
      uint64_t v17 = *(unsigned int *)(v14 + 52);
      uint64_t v18 = *(unsigned __int8 *)(v14 + 56);
      uint64_t v19 = *(unsigned __int8 *)(v14 + 57);
      __int16 v20 = operator new(0x28uLL);
      *__int16 v20 = sub_1000EE234;
      v20[1] = 0LL;
      void v20[2] = a1;
      v20[3] = "restoring off-mesh route";
      v26[0] = off_1002B2F38;
      v26[1] = v20;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 232LL))( a1,  v15,  v16,  v17,  v18,  v19,  v26);
      sub_1000075F0(v26);
    }

    sub_10000B338((uint64_t)buf);
  }

  for (uint64_t i = *(void *)(a1 + 1192); i != *(void *)(a1 + 1200); i += 72LL)
  {
    if ((*(_DWORD *)(i + 8) - 1) <= 1)
    {
      uint64_t v22 = *(unsigned int *)(i + 12);
      uint64_t v23 = *(unsigned __int8 *)(i + 40);
      __int16 v24 = operator new(0x28uLL);
      void *v24 = sub_1000EE234;
      v24[1] = 0LL;
      v24[2] = a1;
      v24[3] = "restoring service";
      v25[0] = off_1002B2F38;
      v25[1] = v24;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 200LL))( a1,  v22,  i + 16,  v23,  i + 48,  v25);
      sub_1000075F0(v25);
    }
  }

void sub_1000EE098( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1000EE0D0(unsigned __int8 *a1, unsigned __int8 *a2, unsigned int *a3)
{
  uint64_t v6 = *((unsigned __int8 *)a3 + 4);
  int v7 = operator new(0x28uLL);
  *int v7 = sub_1000EE234;
  v7[1] = 0LL;
  void v7[2] = a1;
  v7[3] = "adding unicast address";
  v15[0] = off_1002B2F38;
  v15[1] = v7;
  (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, void *))(*(void *)a1 + 168LL))( a1,  a2,  v6,  v15);
  double result = sub_1000075F0(v15);
  if (*a3 && (*a2 != 254 || (a2[1] & 0xC0) != 0x80))
  {
    double result = (void *)sub_100159E98(a1 + 1432, 8LL);
    if (!(_DWORD)result || *((void *)a1 + 179) != *(void *)a2)
    {
      __int128 v14 = *(_OWORD *)a2;
      if (a1[1400]) {
        unsigned int v9 = 35;
      }
      else {
        unsigned int v9 = 33;
      }
      if (a1[1401]) {
        uint64_t v10 = v9 | 0x10;
      }
      else {
        uint64_t v10 = v9;
      }
      sub_100148E5C((uint64_t)&v14, *((unsigned __int8 *)a3 + 4));
      uint64_t v11 = *a3;
      uint64_t v12 = *((unsigned __int8 *)a3 + 4);
      v13[0] = (char *)off_1002AED78 + 1;
      ((void (*)(unsigned __int8 *, uint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t, void, void *))sub_1000EE8F4)( a1,  v11,  a2,  v12,  v10,  1LL,  0LL,  v13);
      return sub_1000075F0(v13);
    }
  }

  return result;
}

void sub_1000EE214( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000EE234(uint64_t a1, unsigned int a2, uint64_t *a3, void *a4)
{
  if (a2)
  {
    uint64_t v8 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v8)
    {
      unsigned int v9 = v8;
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    (*(void (**)(uint64_t))(*(void *)a1 + 144LL))(a1);
  }

  return sub_100006FF8(a4);
}

void sub_1000EE2F4(uint64_t a1, int a2, unint64_t *a3, unsigned int a4, int a5, int a6)
{
  if ((a2 - 1) > 1
    || !*(_BYTE *)(a1 + 1397)
    || *(unsigned __int8 *)a3 != 254
    || (*((_BYTE *)a3 + 1) & 0xC0) != 0x80)
  {
    if (sub_1000F1974(a1 + 1048, a3)) {
      return;
    }
    *(_DWORD *)std::string buf = a2;
    uint8_t buf[4] = a4;
    *(_DWORD *)&uint8_t buf[8] = a5;
    *(_DWORD *)&_BYTE buf[12] = a6;
    *(_OWORD *)sub_1000EE5B0((uint64_t **)(a1 + 1048), a3) = *(_OWORD *)buf;
    uint64_t v15 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v15)
    {
      uint64_t v16 = v15;
      if (sub_10015A058(6) && os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        sub_1000EB494(a3, (int *)buf, 0, __p);
        uint64_t v17 = v19 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)__int16 v20 = 136315138;
        char v21 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "UnicastAddresses: Adding %s", v20, 0xCu);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    switch(a2)
    {
      case 2:
        goto LABEL_27;
      case 1:
        if (!*(_BYTE *)(a1 + 1396)) {
          return;
        }
LABEL_31:
        sub_1000EE0D0((unsigned __int8 *)a1, (unsigned __int8 *)a3, (unsigned int *)buf);
        return;
      case 0:
LABEL_27:
        sub_10011F95C(*(void *)(a1 + 184), (uint64_t)a3, a4);
        break;
    }

    if (a2 != 2) {
      return;
    }
    goto LABEL_31;
  }

  uint64_t v12 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v12)
  {
    char v13 = v12;
    if (sub_10015A058(6) && os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      sub_100108154(a3, __p);
      if (v19 >= 0) {
        __int128 v14 = __p;
      }
      else {
        __int128 v14 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "UnicastAddresses: Skipping user/interface added link-local IPv6 address %s",  buf,  0xCu);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

char *sub_1000EE5B0(uint64_t **a1, _OWORD *a2)
{
  uint64_t v3 = a2;
  return (char *)sub_1000F1A24(a1, (unint64_t *)a2, (uint64_t)&unk_100229689, &v3) + 44;
}

void *sub_1000EE5E4(uint64_t a1, int a2, unint64_t *a3)
{
  uint64_t v6 = (uint64_t **)(a1 + 1048);
  double result = (void *)sub_1000F1974(a1 + 1048, a3);
  if (result)
  {
    double result = sub_1000EE5B0(v6, a3);
    __int128 v13 = *(_OWORD *)result;
    if (a2 == 2 || (_DWORD)v13 == a2)
    {
      uint64_t v8 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v8)
      {
        unsigned int v9 = v8;
        if (sub_10015A058(6) && os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          sub_1000EB494(a3, (int *)&v13, 0, __p);
          uint64_t v10 = v12 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)std::string buf = 136315138;
          uint64_t v15 = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "UnicastAddresses: Removing %s", buf, 0xCu);
          if (v12 < 0) {
            operator delete(__p[0]);
          }
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }

      double result = (void *)sub_100077574((uint64_t)v6, a3);
      if ((a2 | 2) == 2) {
        double result = (void *)sub_10011FD44(*(void *)(a1 + 184), (uint64_t)a3);
      }
    }
  }

  return result;
}

void *sub_1000EE790(unsigned __int8 *a1, unsigned __int8 *a2, unsigned int *a3)
{
  uint64_t v6 = *((unsigned __int8 *)a3 + 4);
  int v7 = operator new(0x28uLL);
  *int v7 = sub_1000EE234;
  v7[1] = 0LL;
  void v7[2] = a1;
  v7[3] = "removing unicast address";
  v15[0] = off_1002B2F38;
  v15[1] = v7;
  (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, void *))(*(void *)a1 + 176LL))( a1,  a2,  v6,  v15);
  double result = sub_1000075F0(v15);
  if (*a3 && (*a2 != 254 || (a2[1] & 0xC0) != 0x80))
  {
    double result = (void *)sub_100159E98(a1 + 1432, 8LL);
    if (!(_DWORD)result || *((void *)a1 + 179) != *(void *)a2)
    {
      __int128 v14 = *(_OWORD *)a2;
      if (a1[1400]) {
        unsigned int v9 = 35;
      }
      else {
        unsigned int v9 = 33;
      }
      if (a1[1401]) {
        uint64_t v10 = v9 | 0x10;
      }
      else {
        uint64_t v10 = v9;
      }
      sub_100148E5C((uint64_t)&v14, *((unsigned __int8 *)a3 + 4));
      uint64_t v11 = *a3;
      uint64_t v12 = *((unsigned __int8 *)a3 + 4);
      v13[0] = (char *)off_1002AED78 + 1;
      ((void (*)(unsigned __int8 *, uint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t, void, void *))sub_1000EED40)( a1,  v11,  a2,  v12,  v10,  1LL,  0LL,  v13);
      return sub_1000075F0(v13);
    }
  }

  return result;
}

void sub_1000EE8D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000EE8F4( uint64_t **a1, int a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, __int16 a7, uint64_t *a8)
{
  __int128 v34 = *a3;
  LOBYTE(v35) = a4;
  sub_100148E5C((uint64_t)&v34, a4);
  LODWORD(v32) = a2;
  WORD2(v32) = a5;
  BYTE6(v32) = a6;
  LOWORD(v33) = a7;
  if (a1 + 138 == sub_1000EFEF4((uint64_t)a1, (uint64_t)&v34, (uint64_t)&v32))
  {
    *(_OWORD *)__n128 __p = v34;
    uint64_t v30 = v32;
    int v29 = v35;
    int v31 = v33;
    sub_1000F28D0(a1 + 137, (uint64_t)__p);
    uint64_t v15 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v15)
    {
      if (sub_10015A058(6) && os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        sub_1000EBBAC(&v34, (uint64_t)&v32, 0, __p);
        uint64_t v16 = (v30 & 0x80000000LL) == 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 136315138;
        uint64_t v37 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "OnMeshPrefixes: Adding %s", buf, 0xCu);
        if (SBYTE3(v30) < 0) {
          operator delete(__p[0]);
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    if (a2)
    {
      uint64_t v17 = v35;
      v24[0] = 0LL;
      sub_100007640((uint64_t)v24, a8);
      sub_1000EFBBC((uint64_t)sub_1000EE234, 0LL, (uint64_t)a1, (uint64_t)"adding on-mesh prefix", v24, (uint64_t)v25);
      sub_1000F1D34(v27, (uint64_t)v25);
      ((void (*)(uint64_t **, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t (***)()))(*a1)[27])( a1,  &v34,  v17,  a5,  a6,  v27);
      sub_1000075F0(v27);
      sub_1000075F0(v26);
      sub_1000075F0(v24);
    }

    else
    {
      sub_100006FF8(a8);
    }

    if (*((_BYTE *)a1 + 1404)) {
      *((_BYTE *)a1 + 1414) = 1;
    }
  }

  else
  {
    sub_100006FF8(a8);
  }

  if (*((_BYTE *)a1 + 1398)
    && !*((_BYTE *)a1 + 1399)
    && (~WORD2(v32) & 0x11) == 0
    && v35 == 64
    && !sub_1000EFD2C((uint64_t)a1, (uint64_t)&v34))
  {
    v23[0] = sub_100148E4C((uint64_t)&v34);
    v23[1] = v18;
    char v19 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v19)
    {
      if (sub_10015A058(5) && os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        sub_100108154(v23, __p);
        if ((v30 & 0x80000000LL) == 0) {
          __int16 v20 = __p;
        }
        else {
          __int16 v20 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136315394;
        uint64_t v37 = v20;
        __int16 v38 = 1024;
        int v39 = a4;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "Pushing a new SLAAC address %s/%d to NCP",  buf,  0x12u);
        if (SBYTE3(v30) < 0) {
          operator delete(__p[0]);
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    char v21 = operator new(0x28uLL);
    *char v21 = sub_1000EE234;
    v21[1] = 0LL;
    v21[2] = a1;
    v21[3] = "adding SLAAC address";
    v22[1] = v21;
    v22[0] = off_1002B2F38;
    ((void (*)(uint64_t **, unint64_t *, uint64_t, void *))(*a1)[21])(a1, v23, a4, v22);
    sub_1000075F0(v22);
    sub_1000EE2F4((uint64_t)a1, 0, v23, a4, -1, -1);
  }

void sub_1000EECF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000EED40( _BYTE *a1, int a2, __int128 *a3, uint64_t a4, unsigned __int16 a5, unsigned __int8 a6, __int16 a7, uint64_t *a8)
{
  __int128 v37 = *a3;
  unsigned __int8 v38 = a4;
  sub_100148E5C((uint64_t)&v37, a4);
  int v33 = a2;
  unsigned __int16 v34 = a5;
  unsigned __int8 v35 = a6;
  __int16 v36 = a7;
  uint64_t v15 = sub_1000EFEF4((uint64_t)a1, (uint64_t)&v37, (uint64_t)&v33);
  if (a1 + 1104 == (_BYTE *)v15) {
    return sub_100006FF8(a8);
  }
  uint64_t v16 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v16)
  {
    if (sub_10015A058(6) && os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      sub_1000EBBAC(&v37, (uint64_t)&v33, 0, __p);
      uint64_t v17 = v32 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v40 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "OnMeshPrefixes: Removing %s", buf, 0xCu);
      if (v32 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  sub_100011568((uint64_t)(a1 + 1096), v15);
  if (a2)
  {
    uint64_t v19 = v38;
    unsigned __int8 v20 = v34;
    int v21 = v35;
    v27[0] = 0LL;
    sub_100007640((uint64_t)v27, a8);
    sub_1000EFBBC((uint64_t)sub_1000EE234, 0LL, (uint64_t)a1, (uint64_t)"removing on-mesh prefix", v27, (uint64_t)v28);
    sub_1000F1D34(v30, (uint64_t)v28);
    (*(void (**)(_BYTE *, __int128 *, uint64_t, void, BOOL, uint64_t (***)()))(*(void *)a1 + 224LL))( a1,  &v37,  v19,  v20,  v21 != 0,  v30);
    sub_1000075F0(v30);
    sub_1000075F0(v29);
    uint64_t result = (uint64_t)sub_1000075F0(v27);
  }

  else
  {
    uint64_t result = sub_100006FF8(a8);
  }

  if (a1[1404]) {
    a1[1414] = 1;
  }
  if ((~v34 & 0x11) == 0 && v38 == 64)
  {
    uint64_t result = sub_1000EFE50((uint64_t)a1, (uint64_t)&v37);
    if ((result & 1) == 0)
    {
      uint64_t result = sub_1000EFDB4((uint64_t)a1, (uint64_t)&v37, 0);
      if (a1 + 1056 != (_BYTE *)result)
      {
        *(_OWORD *)char v26 = *(_OWORD *)(result + 28);
        uint64_t v22 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v22)
        {
          if (sub_10015A058(5) && os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
          {
            sub_100108154(v26, __p);
            if (v32 >= 0) {
              uint64_t v23 = __p;
            }
            else {
              uint64_t v23 = (void **)__p[0];
            }
            *(_DWORD *)std::string buf = 136315394;
            uint64_t v40 = v23;
            __int16 v41 = 1024;
            int v42 = a4;
            _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_INFO,  "Removing SLAAC address %s/%d from NCP",  buf,  0x12u);
            if (v32 < 0) {
              operator delete(__p[0]);
            }
          }
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FB53C();
        }

        __int16 v24 = operator new(0x28uLL);
        void *v24 = sub_1000EE234;
        v24[1] = 0LL;
        v24[2] = a1;
        v24[3] = "removing SLAAC address";
        v25[1] = v24;
        v25[0] = off_1002B2F38;
        (*(void (**)(_BYTE *, unint64_t *, uint64_t, void *))(*(void *)a1 + 176LL))( a1,  v26,  a4,  v25);
        sub_1000075F0(v25);
        return (uint64_t)sub_1000EE5E4((uint64_t)a1, 0, v26);
      }
    }
  }

  return result;
}

void sub_1000EF124( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000EF170(uint64_t *a1, unsigned int a2, unint64_t a3, unint64_t a4, void *a5)
{
  v12.n128_u64[0] = a3;
  v12.n128_u64[1] = a4;
  if (a2)
  {
    uint64_t v8 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v8)
    {
      unsigned int v9 = v8;
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    v11[0] = (uint64_t)off_1002AED78 + 1;
    sub_1000EF25C(a1, 2, &v12, v11);
    sub_1000075F0(v11);
  }

  return sub_100006FF8(a5);
}

void sub_1000EF248( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1000EF25C(uint64_t *a1, int a2, __n128 *a3, uint64_t *a4)
{
  uint64_t v8 = (uint64_t **)(a1 + 134);
  int v9 = *(_DWORD *)sub_1000EFB88(v8, a3);
  int v26 = v9;
  if (a2 != 2 && v9 != a2) {
    return (void *)sub_100006FF8(a4);
  }
  uint64_t v11 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v11)
  {
    __n128 v12 = v11;
    if (sub_10015A058(6) && os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      sub_1000EB700(a3, &v26, 0, __p);
      __int128 v13 = v25 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136315138;
      __int128 v28 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "MulticastAddresses: Removing %s", buf, 0xCu);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  sub_100077574((uint64_t)v8, a3->n128_u64);
  if ((a2 | 2) != 2) {
    goto LABEL_40;
  }
  sub_100120190(a1[23], (uint64_t)a3);
  if (*((_BYTE *)sub_1000AD5C0() + 42012))
  {
    uint64_t v15 = sub_1000AD5C0();
    uint64_t v16 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v16)
    {
      if (sub_10015A058(6) && os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        sub_1000EB700(a3, &v26, 0, __p);
        if (v25 >= 0) {
          uint64_t v17 = __p;
        }
        else {
          uint64_t v17 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136315138;
        __int128 v28 = v17;
        unint64_t v18 = "Failed to unsubscribe large scope multicast %s on backbone interface";
LABEL_34:
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, v18, buf, 0xCu);
        if (v25 < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_40;
      }

      goto LABEL_40;
    }

    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_40;
    }
LABEL_39:
    sub_1001FB53C();
    goto LABEL_40;
  }

  uint64_t v16 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (!v16)
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }

  if (sub_10015A058(6) && os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    sub_100108154(a3, __p);
    if (v25 >= 0) {
      uint64_t v19 = __p;
    }
    else {
      uint64_t v19 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    __int128 v28 = v19;
    unint64_t v18 = "MulticastAddresses: Don't remove %s from MulticastRoutingManager as not primary";
    goto LABEL_34;
  }

void sub_1000EF67C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
}

void *sub_1000EF6BC(uint64_t *a1, int a2, __n128 *a3, uint64_t *a4)
{
  uint64_t v8 = (uint64_t **)(a1 + 134);
  int v32 = a2;
  *(_DWORD *)sub_1000EFB88(v8, a3) = a2;
  uint64_t v10 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v10)
  {
    uint64_t v11 = v10;
    if (sub_10015A058(6) && os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      sub_1000EB700(a3, &v32, 0, v30);
      __n128 v12 = v31 >= 0 ? v30 : (void **)v30[0];
      *(_DWORD *)std::string buf = 136315138;
      unsigned __int16 v34 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "MulticastAddresses: Adding %s", buf, 0xCu);
      if (v31 < 0) {
        operator delete(v30[0]);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  if (a2 != 2)
  {
    if (a2 == 1)
    {
      v26[0] = 0LL;
      sub_100007640((uint64_t)v26, a4);
      sub_1000EFBBC((uint64_t)sub_1000EE234, 0LL, (uint64_t)a1, (uint64_t)"adding multicast address", v26, (uint64_t)v27);
      sub_1000F1D34(v29, (uint64_t)v27);
      (*(void (**)(uint64_t *, __n128 *, uint64_t (***)()))(*a1 + 184))(a1, a3, v29);
      sub_1000075F0(v29);
      sub_1000075F0(v28);
      uint64_t v19 = v26;
      return sub_1000075F0(v19);
    }

    if (a2) {
      return (void *)sub_100006FF8(a4);
    }
  }

  sub_10011FF68(a1[23], (uint64_t)a3);
  if (ot::IsMulticastLargerThanRealmLocal((ot *)a3, v13))
  {
    if (*((_BYTE *)sub_1000AD5C0() + 42012))
    {
      __int128 v14 = sub_1000AD5C0();
      if (!sub_100014D5C((uint64_t)v14 + 42016, a3))
      {
        uint64_t v15 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v15)
        {
          sub_1000EB700(a3, &v32, 0, v30);
          if (v31 >= 0) {
            uint64_t v16 = v30;
          }
          else {
            uint64_t v16 = (void **)v30[0];
          }
          *(_DWORD *)std::string buf = 136315138;
          unsigned __int16 v34 = v16;
          uint64_t v17 = "Failed to subscribe large scope multicast %s on backbone interface";
          goto LABEL_33;
        }

        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
LABEL_38:
        }
          sub_1001FB53C();
      }
    }

    else
    {
      uint64_t v15 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v15)
      {
        sub_100108154(a3, v30);
        if (v31 >= 0) {
          unint64_t v18 = v30;
        }
        else {
          unint64_t v18 = (void **)v30[0];
        }
        *(_DWORD *)std::string buf = 136315138;
        unsigned __int16 v34 = v18;
        uint64_t v17 = "MulticastAddresses: Don't add %s to MulticastRoutingManager as not primary";
LABEL_33:
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, v17, buf, 0xCu);
        if (v31 < 0) {
          operator delete(v30[0]);
        }
        goto LABEL_39;
      }

      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_38;
      }
    }
  }

void sub_1000EFB18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  sub_1000075F0(va2);
  sub_1000075F0((uint64_t *)va1);
  sub_1000075F0((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_1000EFB88(uint64_t **a1, __n128 *a2)
{
  uint64_t v3 = a2;
  return (char *)sub_1000F1B7C(a1, a2->n128_u64, (uint64_t)&unk_100229689, &v3) + 44;
}

void *sub_1000EFBBC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  v12[0] = 0LL;
  sub_100007640((uint64_t)v12, a5);
  sub_1000F1CBC(v13, a3, a4, v12);
  sub_100071A18(a6, a1, a2, (uint64_t)v13);
  sub_1000075F0(v14);
  return sub_1000075F0(v12);
}

void sub_1000EFC4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1000EFC70@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X8>)
{
  v14[0] = 0LL;
  sub_100007640((uint64_t)v14, a6);
  sub_1000F2234(&v15, a3, a4, a5, v14);
  sub_1000F22E8(a7, a1, a2, &v15);
  sub_1000075F0(v16);
  return sub_1000075F0(v14);
}

void sub_1000EFD08(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_1000EFD2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 1048);
  uint64_t v10 = v2;
  uint64_t v3 = a1 + 1056;
  for (BOOL i = v2 != a1 + 1056; v10 != v3; BOOL i = v10 != v3)
  {
    unsigned int v6 = *(unsigned __int8 *)(v2 + 48);
    __int128 v8 = *(_OWORD *)(v2 + 28);
    char v9 = v6;
    sub_100148E5C((uint64_t)&v8, v6);
    sub_10000B338((uint64_t)&v10);
    uint64_t v2 = v10;
  }

  return i;
}

uint64_t sub_1000EFDB4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 1048);
  uint64_t v11 = v3;
  uint64_t v4 = a1 + 1056;
  if (v3 != a1 + 1056)
  {
    while (1)
    {
      unsigned int v7 = *(unsigned __int8 *)(v3 + 48);
      __int128 v9 = *(_OWORD *)(v3 + 28);
      char v10 = v7;
      sub_100148E5C((uint64_t)&v9, v7);
      sub_10000B338((uint64_t)&v11);
      uint64_t v3 = v11;
      if (v11 == v4) {
        return v4;
      }
    }

    return v11;
  }

  return v4;
}

BOOL sub_1000EFE50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 1096;
  uint64_t v5 = sub_100075724(a1 + 1096, a2);
  uint64_t v12 = v5;
  if ((void *)(a1 + 1104) == v5) {
    return 0LL;
  }
  unsigned int v6 = v5;
  unsigned int v7 = sub_100075788(v4, a2);
  if (v6 == v7) {
    return 0LL;
  }
  __int128 v8 = v7;
  do
  {
    int v9 = *((_WORD *)v6 + 26) & 0x11;
    BOOL v10 = v9 == 17;
    if (v9 == 17) {
      break;
    }
    sub_10000B338((uint64_t)&v12);
    unsigned int v6 = v12;
  }

  while (v12 != v8);
  return v10;
}

void *sub_1000EFEF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1096;
  unsigned int v7 = sub_100075724(a1 + 1096, a2);
  uint64_t v11 = v7;
  __int128 v8 = (void *)(a1 + 1104);
  if (v8 != v7)
  {
    int v9 = sub_100075788(v6, a2);
    if (v7 != v9)
    {
      while (!sub_1000EBB58((uint64_t)(v7 + 6), a3))
      {
        sub_10000B338((uint64_t)&v11);
        unsigned int v7 = v11;
        if (v11 == v9) {
          return v8;
        }
      }

      unsigned int v7 = v11;
    }

    if (v7 == v9) {
      return v8;
    }
  }

  return v7;
}

void *sub_1000EFFA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1120;
  unsigned int v7 = sub_100075724(a1 + 1120, a2);
  uint64_t v11 = v7;
  __int128 v8 = (void *)(a1 + 1128);
  if (v8 != v7)
  {
    int v9 = sub_100075788(v6, a2);
    if (v7 != v9)
    {
      while (!sub_1000EBDEC((uint64_t)(v7 + 6), a3))
      {
        sub_10000B338((uint64_t)&v11);
        unsigned int v7 = v11;
        if (v11 == v9) {
          return v8;
        }
      }

      unsigned int v7 = v11;
    }

    if (v7 == v9) {
      return v8;
    }
  }

  return v7;
}

void *sub_1000F005C( uint64_t a1, unsigned int a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __int16 a8, char a9, uint64_t *a10)
{
  *(void *)&__int128 v28 = __PAIR64__(a5, a2);
  BYTE8(v28) = a6;
  BYTE9(v28) = a7;
  WORD5(v28) = a8;
  BYTE12(v28) = a9;
  __int128 v26 = *a3;
  LOBYTE(v27) = a4;
  sub_100148E5C((uint64_t)&v26, a4);
  *(_OWORD *)__n128 __p = v26;
  int v24 = v27;
  __int128 v25 = v28;
  sub_1000F2988((uint64_t **)(a1 + 1120), (uint64_t)__p);
  *(_BYTE *)(a1 + 1414) = 1;
  uint64_t v17 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v17)
  {
    if (sub_10015A058(6) && os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      sub_1000EBE40((int *)&v28, (unsigned __int8 *)&v26, 0, __p);
      if ((SBYTE3(v25) & 0x80u) == 0) {
        unint64_t v18 = __p;
      }
      else {
        unint64_t v18 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v30 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "OffMeshRoutes: Adding %s", buf, 0xCu);
      if (SBYTE3(v25) < 0) {
        operator delete(__p[0]);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  if (!a2) {
    return (void *)sub_100006FF8(a10);
  }
  v19[0] = 0LL;
  sub_100007640((uint64_t)v19, a10);
  sub_1000EFBBC((uint64_t)sub_1000EE234, 0LL, a1, (uint64_t)"adding off-mesh route", v19, (uint64_t)v20);
  sub_1000F1D34(v22, (uint64_t)v20);
  (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (***)()))(*(void *)a1 + 232LL))( a1,  &v26,  a4,  a5,  a6,  a7,  v22);
  sub_1000075F0(v22);
  sub_1000075F0(v21);
  return sub_1000075F0(v19);
}

void sub_1000F02CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
}

void *sub_1000F030C( _BYTE *a1, int a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, __int16 a7, uint64_t *a8)
{
  v26[0] = a2;
  v26[1] = a5;
  char v27 = a6;
  char v28 = 0;
  __int16 v29 = a7;
  char v30 = 0;
  __int128 v24 = *a3;
  char v25 = a4;
  sub_100148E5C((uint64_t)&v24, a4);
  __int128 v14 = (int *)sub_1000EFFA8((uint64_t)a1, (uint64_t)&v24, (uint64_t)v26);
  if (a1 + 1128 == (_BYTE *)v14) {
    return (void *)sub_100006FF8(a8);
  }
  __int128 v15 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v15)
  {
    if (sub_10015A058(6) && os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      sub_1000EBE40(v14 + 12, (unsigned __int8 *)&v24, 0, __p);
      if (v23 >= 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315138;
      int v32 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "OffMeshRoutes: Removing %s", buf, 0xCu);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  sub_100011568((uint64_t)(a1 + 1120), (uint64_t *)v14);
  a1[1414] = 1;
  if (!a2) {
    return (void *)sub_100006FF8(a8);
  }
  v18[0] = 0LL;
  sub_100007640((uint64_t)v18, a8);
  sub_1000EFBBC((uint64_t)sub_1000EE234, 0LL, (uint64_t)a1, (uint64_t)"removing off-mesh route", v18, (uint64_t)v19);
  sub_1000F1D34(v21, (uint64_t)v19);
  (*(void (**)(_BYTE *, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t (***)()))(*(void *)a1 + 240LL))( a1,  &v24,  a4,  a5,  a6,  v21);
  sub_1000075F0(v21);
  sub_1000075F0(v20);
  return sub_1000075F0(v18);
}

void sub_1000F055C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  sub_1000075F0((uint64_t *)va2);
  sub_1000075F0((uint64_t *)va1);
  sub_1000075F0((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_1000F059C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3 = a3;
  if (*(_BYTE *)(a1 + 1402))
  {
    uint64_t v18 = a1;
    uint64_t v19 = 0LL;
    uint64_t v5 = (void *)(a1 + 1128);
    uint64_t v6 = *(void **)(a1 + 1120);
    if (v6 == (void *)(a1 + 1128))
    {
      char v8 = 0;
      char v7 = 0;
      int v11 = -1;
      int v10 = -1;
    }

    else
    {
      char v7 = 0;
      char v8 = 0;
      uint64_t v9 = a1 + 1120;
      int v10 = -1;
      int v11 = -1;
      do
      {
        uint64_t v12 = sub_100075788(v9, (uint64_t)v6 + 28);
        if (sub_1000EB300((uint64_t)v6 + 28, a2))
        {
          uint64_t v19 = v6;
          while (v6 != v12)
          {
            if (*((_DWORD *)v6 + 12) || *((_BYTE *)v6 + 60))
            {
              if (v11 <= *((_DWORD *)v6 + 13)) {
                int v11 = *((_DWORD *)v6 + 13);
              }
              char v8 = 1;
            }

            else
            {
              if (v10 <= *((_DWORD *)v6 + 13)) {
                int v10 = *((_DWORD *)v6 + 13);
              }
              char v7 = 1;
            }

            sub_10000B338((uint64_t)&v19);
            uint64_t v6 = v19;
          }
        }

        uint64_t v6 = v12;
      }

      while (v5 != v12);
    }

    a1 = v18;
    if ((v7 & 1) != 0 && ((v8 & 1) == 0 || !*(_BYTE *)(v18 + 1403) && v10 > v11))
    {
      return 1;
    }

    uint64_t v3 = a3;
  }

  if (*(_BYTE *)(a1 + 1404))
  {
    uint64_t v14 = *(void **)(a1 + 1096);
    uint64_t v19 = v14;
    uint64_t v15 = (void *)(a1 + 1104);
    while (1)
    {
      BOOL v13 = v14 != v15;
      if (v14 == v15) {
        break;
      }
      if (sub_1000EB300((uint64_t)v14 + 28, a2) && !*((_DWORD *)v19 + 12) && (*((_WORD *)v19 + 26) & 1) != 0)
      {
        _DWORD *v3 = 256;
        return v13;
      }

      sub_10000B338((uint64_t)&v19);
      uint64_t v14 = v19;
    }
  }

  else
  {
    return 0;
  }

  return v13;
}

void *sub_1000F075C(uint64_t **a1, __n128 *a2)
{
  uint64_t v3 = a2;
  return sub_1000F2AA0(a1, (uint64_t)a2, (uint64_t)&unk_100229689, &v3) + 6;
}

BOOL sub_1000F0790(void *a1)
{
  uint64_t v1 = a1[145];
  if (v1 == a1[148])
  {
    if (v1)
    {
      uint64_t v12 = (void *)a1[143];
      uint64_t v3 = a1 + 144;
      BOOL v4 = v12 != a1 + 144;
      if (v12 != a1 + 144)
      {
        uint64_t v5 = a1 + 147;
LABEL_5:
        uint64_t v6 = (void *)a1[146];
        int v11 = v6;
        while (v6 != v5)
        {
          uint64_t v7 = *(void *)((char *)v6 + 28);
          uint64_t v8 = *(void *)((char *)v6 + 36);
          if (v7 == *(void *)((char *)v12 + 28) && v8 == *(void *)((char *)v12 + 36))
          {
            sub_10000B338((uint64_t)&v12);
            BOOL v4 = v12 != v3;
            if (v12 != v3) {
              goto LABEL_5;
            }
            return v4;
          }

          sub_10000B338((uint64_t)&v11);
          uint64_t v6 = v11;
        }
      }
    }

    else
    {
      return 0;
    }
  }

  else
  {
    return 1;
  }

  return v4;
}

uint64_t sub_1000F0858(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v14 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v14)
  {
    uint64_t v15 = v14;
    if (sub_10015A058(6) && os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "service_was_added", buf, 2u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  sub_1000711B4((uint64_t)buf, a2, a3, a4, a5, a6);
  uint64_t v16 = a1[149];
  uint64_t v17 = sub_100075D7C(v16, a1[150], (uint64_t)buf);
  unint64_t v18 = v17;
  if (v17 == a1[150])
  {
    __int128 v24 = a1 + 149;
    if (v18 >= a1[151])
    {
      uint64_t v25 = sub_100075EC4(v24, (uint64_t)buf);
    }

    else
    {
      sub_100075E84((uint64_t)v24, (uint64_t)buf);
      uint64_t v25 = v18 + 72;
    }

    a1[150] = v25;
    __int16 v29 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v29)
    {
      if (sub_10015A058(6) && os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        sub_1000EC218((uint64_t)buf, v42);
        char v30 = v43 >= 0 ? v42 : (void **)v42[0];
        *(_DWORD *)uint64_t v45 = 136315138;
        uint64_t v46 = v30;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "Services: Adding %s", v45, 0xCu);
        if (v43 < 0) {
          operator delete(v42[0]);
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    v38[0] = 0LL;
    sub_100007640((uint64_t)v38, a7);
    sub_1000EFBBC((uint64_t)sub_1000EE234, 0LL, (uint64_t)a1, (uint64_t)"adding service", v38, (uint64_t)v39);
    sub_1000F1D34(v41, (uint64_t)v39);
    __int128 v26 = v41;
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (***)()))(*a1 + 200))( a1,  a3,  a4,  a5,  a6,  v41);
    char v27 = &v40;
    char v28 = v38;
    goto LABEL_35;
  }

  uint64_t v19 = v16 + 8 * ((v17 - v16) >> 3);
  uint64_t v20 = *(const void **)(v19 + 48);
  size_t v21 = *(void *)(v19 + 56) - (void)v20;
  if (v21 != *(void *)(a6 + 8) - *(void *)a6 || memcmp(v20, *(const void **)a6, v21))
  {
    uint64_t v22 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v22)
    {
      if (sub_10015A058(6) && os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        sub_1000EC218((uint64_t)buf, v42);
        if (v43 >= 0) {
          char v23 = v42;
        }
        else {
          char v23 = (void **)v42[0];
        }
        *(_DWORD *)uint64_t v45 = 136315138;
        uint64_t v46 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "Services: Updating Server Data %s", v45, 0xCu);
        if (v43 < 0) {
          operator delete(v42[0]);
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    sub_1000F0E04(v18, a6);
    v34[0] = 0LL;
    sub_100007640((uint64_t)v34, a7);
    sub_1000EFBBC((uint64_t)sub_1000EE234, 0LL, (uint64_t)a1, (uint64_t)"updating service", v34, (uint64_t)v35);
    sub_1000F1D34(v37, (uint64_t)v35);
    __int128 v26 = v37;
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (***)()))(*a1 + 200))( a1,  a3,  a4,  a5,  a6,  v37);
    char v27 = &v36;
    char v28 = v34;
LABEL_35:
    sub_1000075F0(v26);
    sub_1000075F0(v27);
    sub_1000075F0(v28);
    return sub_100071254((uint64_t)buf);
  }

  int v32 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v32)
  {
    if (sub_10015A058(6) && os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
    {
      sub_1000EC218((uint64_t)buf, v42);
      int v33 = v43 >= 0 ? v42 : (void **)v42[0];
      *(_DWORD *)uint64_t v45 = 136315138;
      uint64_t v46 = v33;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_INFO,  "Services: Adding %s, already present",  v45,  0xCu);
      if (v43 < 0) {
        operator delete(v42[0]);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  sub_100006FF8(a7);
  return sub_100071254((uint64_t)buf);
}

void sub_1000F0D6C(_Unwind_Exception *a1)
{
}

uint64_t *sub_1000F0E04(uint64_t a1, uint64_t a2)
{
  uint64_t result = (uint64_t *)(a1 + 48);
  return result;
}

BOOL sub_1000F0E28(uint64_t a1, int a2, int a3, const void **a4, uint64_t a5, const void **a6, uint64_t *a7)
{
  uint64_t v12 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v12)
  {
    BOOL v13 = v12;
    if (sub_10015A058(6) && os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v26[0] = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "find_service_entry:", (uint8_t *)v26, 2u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  uint64_t v14 = *a7;
  uint64_t v15 = a7[1];
  BOOL v16 = *a7 != v15;
  if (*a7 != v15)
  {
    unint64_t v18 = a4;
    uint64_t v17 = *a4;
    size_t v19 = (_BYTE *)v18[1] - v17;
    size_t v21 = a6;
    uint64_t v20 = *a6;
    size_t v22 = (_BYTE *)v21[1] - v20;
    do
    {
      if (*(_DWORD *)(v14 + 8) == a2 && *(_DWORD *)(v14 + 12) == a3)
      {
        char v23 = *(const void **)(v14 + 16);
        if (*(void *)(v14 + 24) - (void)v23 == v19 && !memcmp(v23, v17, v19))
        {
          __int128 v24 = *(const void **)(v14 + 48);
          if (v22 == *(void *)(v14 + 56) - (void)v24 && !memcmp(v20, v24, v22)) {
            break;
          }
        }
      }

      v14 += 72LL;
      BOOL v16 = v14 != v15;
    }

    while (v14 != v15);
  }

  return v16;
}

void sub_1000F0F88(uint64_t a1, int a2, int a3, const void **a4, uint64_t a5, const void **a6, uint64_t *a7)
{
  uint64_t v12 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v12)
  {
    BOOL v13 = v12;
    if (sub_10015A058(6) && os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v26[0] = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "find_and_erase_service_entry:",  (uint8_t *)v26,  2u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  uint64_t v15 = *a7;
  uint64_t v14 = a7[1];
  if (*a7 != v14)
  {
    uint64_t v16 = 0LL;
    unint64_t v18 = a4;
    uint64_t v17 = *a4;
    size_t v19 = (_BYTE *)v18[1] - v17;
    size_t v21 = a6;
    uint64_t v20 = *a6;
    size_t v22 = (_BYTE *)v21[1] - v20;
    while (1)
    {
      if (*(_DWORD *)(v15 + v16 + 8) == a2 && *(_DWORD *)(v15 + v16 + 12) == a3)
      {
        char v23 = *(const void **)(v15 + v16 + 16);
        if (*(void *)(v15 + v16 + 24) - (void)v23 == v19 && !memcmp(v23, v17, v19))
        {
          __int128 v24 = *(const void **)(v15 + v16 + 48);
          if (*(void *)(v15 + v16 + 56) - (void)v24 == v22 && !memcmp(v24, v20, v22)) {
            break;
          }
        }
      }

      v16 += 72LL;
      if (v15 + v16 == v14) {
        return;
      }
    }

    sub_100075DD4((uint64_t)&v27, v15 + v16 + 72, v14, v15 + v16);
    sub_100075D20((uint64_t)a7, v25);
  }

void sub_1000F1110(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  int v10 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v10)
  {
    int v11 = v10;
    if (sub_10015A058(6) && os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "service_was_removed", buf, 2u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  *(void *)std::string buf = off_1002B2EA8;
  int v25 = a2;
  int v26 = a3;
  sub_10000CBF8(v27, a4);
  uint64_t v12 = sub_100075D7C(a1[149], a1[150], (uint64_t)buf);
  if (v12 == a1[150])
  {
    uint64_t v15 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v15)
    {
      if (sub_10015A058(6) && os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        sub_1000EC104((uint64_t)buf, __p);
        uint64_t v16 = v23 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)char v28 = 136315138;
        __int16 v29 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "Services: Removing %s, already removed",  v28,  0xCu);
        if (v23 < 0) {
          operator delete(__p[0]);
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    sub_100006FF8(a5);
  }

  else
  {
    BOOL v13 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v13)
    {
      if (sub_10015A058(6) && os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v12 + 16LL))(__p, v12);
        if (v23 >= 0) {
          uint64_t v14 = __p;
        }
        else {
          uint64_t v14 = (void **)__p[0];
        }
        *(_DWORD *)char v28 = 136315138;
        __int16 v29 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Services: Removing %s", v28, 0xCu);
        if (v23 < 0) {
          operator delete(__p[0]);
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    sub_100075DD4((uint64_t)v28, v12 + 72, a1[150], v12);
    sub_100075D20((uint64_t)(a1 + 149), v17);
    v18[0] = 0LL;
    sub_100007640((uint64_t)v18, a5);
    sub_1000EFBBC((uint64_t)sub_1000EE234, 0LL, (uint64_t)a1, (uint64_t)"removing service", v18, (uint64_t)v19);
    sub_1000F1D34(v21, (uint64_t)v19);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t (***)()))(*a1 + 208))(a1, a3, a4, v21);
    sub_1000075F0(v21);
    sub_1000075F0(v20);
    sub_1000075F0(v18);
  }

  *(void *)std::string buf = off_1002B2EA8;
  __p[0] = v27;
  sub_100006F6C((void ***)__p);
}

void sub_1000F1488( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void **a26)
{
}

uint64_t sub_1000F14F0(uint64_t a1)
{
  *(void *)a1 = off_1002B2EA8;
  uint64_t v3 = (void **)(a1 + 16);
  sub_100006F6C(&v3);
  return a1;
}

uint64_t sub_1000F1534(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 1192);
  uint64_t v2 = *(void *)(a1 + 1200);
  if (v1 == v2) {
    return 0LL;
  }
  for (uint64_t i = 0LL; ; ++i)
  {
    uint64_t result = i + 1;
    if (i == -1) {
      break;
    }
    v1 += 72LL;
    if (v1 == v2) {
      return result;
    }
  }

  __break(0x5500u);
  return result;
}

uint64_t sub_1000F1570(void *a1)
{
  uint64_t v1 = a1[150];
  uint64_t v2 = a1[149];
  if (v1 - v2 != a1[153] - a1[152]) {
    return 1LL;
  }
  if (v1 == v2) {
    return 0LL;
  }
  uint64_t v3 = a1;
  BOOL v4 = a1 + 152;
  do
  {
    LODWORD(a1) = sub_1000F0E28( (uint64_t)a1,  *(_DWORD *)(v2 + 8),  *(_DWORD *)(v2 + 12),  (const void **)(v2 + 16),  0LL,  (const void **)(v2 + 48),  v4);
    if (!(_DWORD)a1) {
      break;
    }
    v2 += 72LL;
  }

  while (v2 != v3[150]);
  return a1 ^ 1;
}

void sub_1000F1600(char *a1)
{
  *(void *)a1 = off_1002B2EA8;
  uint64_t v2 = (void **)(a1 + 16);
  sub_100006F6C(&v2);
  operator delete(a1);
}

void sub_1000F1648(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100071254(a1);
  operator delete(v1);
}

uint64_t sub_1000F165C(uint64_t a1, int *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    int v3 = *a2;
    uint64_t result = 1LL;
    do
    {
      int v5 = *((_DWORD *)v2 + 7);
      if (v3 >= v5)
      {
        if (v5 >= v3) {
          return result;
        }
        ++v2;
      }

      uint64_t v2 = (uint64_t *)*v2;
    }

    while (v2);
  }

  return 0LL;
}

void sub_1000F1694(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 8);
  sub_10000D0FC(a1, *(void **)(a1 + 8));
  *(void *)a1 = v2;
  *(void *)(a1 + 16) = 0LL;
  *uint64_t v2 = 0LL;
}

void sub_1000F16C8(uint64_t *a1, uint64_t a2, int a3)
{
  if (a3 == 4)
  {
    *(_WORD *)(a2 + 8) = 0;
  }

  else
  {
    sub_1000F1710(a1, a2, a3);
  }

void sub_1000F16E8(uint64_t *a1, unsigned int a2)
{
  unsigned int v2 = a2;
  sub_1000F17E4(*a1, &v2);
}

void sub_1000F1710(uint64_t *a1, uint64_t a2, int a3)
{
  switch(a3)
  {
    case 0:
      uint64_t v5 = *a1;
      uint64_t v6 = operator new(0x28uLL);
      uint64_t v7 = *(void *)(v5 + 32);
      __int128 v8 = *(_OWORD *)(v5 + 16);
      *uint64_t v6 = *(_OWORD *)v5;
      v6[1] = v8;
      *((void *)v6 + 4) = v7;
      *(void *)a2 = v6;
      break;
    case 1:
      *(void *)a2 = *a1;
      *a1 = 0LL;
      break;
    case 2:
      if (*(void *)a2) {
        operator delete(*(void **)a2);
      }
      goto LABEL_9;
    case 3:
      uint64_t v9 = (const char *)(*(void *)(*(void *)a2 + 8LL) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf3IvN2nl8wpantund15NCPInstanceBaseEiNSt3"
                                                  "__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS_8functi"
                                                  "onIFviEEEEENS0_5list4INS0_5valueIPS6_EENS_3argILi1EEENSJ_IPKcEENSJ_INS"
                                                  "4_9NilReturnEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp( v9,  (const char *)((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf3IvN2nl8wpantund15NCPInstanceBaseEiNSt3__1 12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS_8functionIFvi EEEEENS0_5list4INS0_5valueIPS6_EENS_3argILi1EEENSJ_IPKcEENSJ_INS4_9NilReturnEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = *a1;
      }

      else
      {
LABEL_9:
        *(void *)a2 = 0LL;
      }

      break;
    default:
      *(_WORD *)(a2 + 8) = 0;
      break;
  }

void sub_1000F17E4(uint64_t a1, unsigned int *a2)
{
  unsigned int v2 = a2;
  sub_1000F1818(a1 + 16, a1, &v2);
}

void sub_1000F1818(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  uint64_t v4 = **a3;
  uint64_t v5 = *(void *)a1;
  sub_10000AC00(&__p, *(char **)(a1 + 8));
  v6[0] = (uint64_t)off_1002AED78 + 1;
  sub_1000F18BC(a2, v5, v4, &__p, v6);
  sub_1000075F0(v6);
}

void sub_1000F1898( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1000F18BC(uint64_t a1, uint64_t a2, uint64_t a3, std::string *__str, uint64_t *a5)
{
  __int128 v8 = *(void (**)(void *, uint64_t, std::string *, void *, __n128))a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v9 = (void *)(a2 + (v7 >> 1));
  if ((v7 & 1) != 0) {
    __int128 v8 = *(void (**)(void *, uint64_t, std::string *, void *, __n128))(*v9 + v8);
  }
  std::string::basic_string(&v12, __str);
  v11[0] = 0LL;
  __n128 v10 = sub_100007640((uint64_t)v11, a5);
  v8(v9, a3, &v12, v11, v10);
  sub_1000075F0(v11);
}

void sub_1000F1948( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000F1974(uint64_t a1, unint64_t *a2)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t result = 1LL;
    do
    {
      unint64_t v4 = bswap64(*a2);
      unint64_t v5 = bswap64(*(void *)((char *)v2 + 28));
      if (v4 == v5 && (v4 = bswap64(a2[1]), unint64_t v5 = bswap64(*(void *)((char *)v2 + 36)), v4 == v5)
        || (v4 < v5 ? (int v6 = -1) : (int v6 = 1), (v6 & 0x80000000) == 0))
      {
        unint64_t v7 = bswap64(*(void *)((char *)v2 + 28));
        unint64_t v8 = bswap64(*a2);
        if (v7 == v8 && (unint64_t v7 = bswap64(*(void *)((char *)v2 + 36)), v8 = bswap64(a2[1]), v7 == v8))
        {
          int v9 = 0;
        }

        else if (v7 < v8)
        {
          int v9 = -1;
        }

        else
        {
          int v9 = 1;
        }

        if ((v9 & 0x80000000) == 0) {
          return result;
        }
        ++v2;
      }

      unsigned int v2 = (void *)*v2;
    }

    while (v2);
  }

  return 0LL;
}

void *sub_1000F1A24(uint64_t **a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = sub_1000774AC((uint64_t)a1, &v12, a2);
  unint64_t v8 = (void *)*v7;
  if (!*v7)
  {
    int v9 = (void **)v7;
    sub_1000F1ACC((uint64_t)a1, a3, a4, (uint64_t)v11);
    sub_10000AF70(a1, v12, v9, (void *)v11[0]);
    unint64_t v8 = v11[0];
    v11[0] = 0LL;
    sub_10000D0A8(v11, 0LL);
  }

  return v8;
}

void sub_1000F1ACC(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  unint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  sub_1000F1B50(v7, (uint64_t)v8 + 28, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1000F1B38(_Unwind_Exception *a1)
{
}

double sub_1000F1B50(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  return sub_1000F1B5C(a2, *a4);
}

double sub_1000F1B5C(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 64;
  double result = NAN;
  *(void *)(a1 + 24) = -1LL;
  return result;
}

void *sub_1000F1B7C(uint64_t **a1, unint64_t *a2, uint64_t a3, __n128 **a4)
{
  uint64_t v7 = sub_1000774AC((uint64_t)a1, &v12, a2);
  unint64_t v8 = (void *)*v7;
  if (!*v7)
  {
    int v9 = (void **)v7;
    sub_1000F1C24((uint64_t)a1, a3, a4, (uint64_t)v11);
    sub_10000AF70(a1, v12, v9, (void *)v11[0]);
    unint64_t v8 = v11[0];
    v11[0] = 0LL;
    sub_10000D0A8(v11, 0LL);
  }

  return v8;
}

void sub_1000F1C24(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  unint64_t v8 = (char *)operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  sub_1000F1CA8(v7, (__n128 *)(v8 + 28), a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1000F1C90(_Unwind_Exception *a1)
{
}

__n128 sub_1000F1CA8(uint64_t a1, __n128 *a2, uint64_t a3, __n128 **a4)
{
  __n128 result = **a4;
  *a2 = result;
  a2[1].n128_u32[0] = 0;
  return result;
}

void *sub_1000F1CBC(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  v8[0] = 0LL;
  sub_100007640((uint64_t)v8, a4);
  *a1 = a2;
  a1[1] = a3;
  a1[2] = 0LL;
  sub_100007640((uint64_t)(a1 + 2), v8);
  sub_1000075F0(v8);
  return a1;
}

void sub_1000F1D20( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t (***sub_1000F1D34(uint64_t (***a1)(), uint64_t a2))()
{
  __int128 v3 = *(_OWORD *)(a2 + 16);
  v5[0] = *(_OWORD *)a2;
  v5[1] = v3;
  v6[0] = 0LL;
  sub_100007640((uint64_t)v6, (uint64_t *)(a2 + 32));
  sub_1000F1DA4(a1, (uint64_t)v5);
  sub_1000075F0(v6);
  return a1;
}

void sub_1000F1D90(_Unwind_Exception *a1)
{
}

uint64_t (***sub_1000F1DA4(uint64_t (***a1)(), uint64_t a2))()
{
  *a1 = 0LL;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  v5[0] = *(_OWORD *)a2;
  v5[1] = v3;
  v6[0] = 0LL;
  sub_100007640((uint64_t)v6, (uint64_t *)(a2 + 32));
  sub_1000F1E14(a1, (uint64_t)v5);
  sub_1000075F0(v6);
  return a1;
}

void sub_1000F1E00(_Unwind_Exception *a1)
{
}

void *sub_1000F1E14(uint64_t (***a1)(), uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8[0] = 0LL;
  sub_100007640((uint64_t)v8, (uint64_t *)(a2 + 32));
  int v4 = sub_1000F1EE8((uint64_t)off_1002B2F58, (uint64_t)v7, a1 + 1);
  __n128 result = sub_1000075F0(v8);
  if (v4) {
    int v6 = off_1002B2F58;
  }
  else {
    int v6 = 0LL;
  }
  *a1 = v6;
  return result;
}

void sub_1000F1E8C(_Unwind_Exception *a1)
{
}

void sub_1000F1EA0(uint64_t *a1, _WORD *a2, int a3)
{
  if (a3 == 4)
  {
    a2[4] = 0;
  }

  else
  {
    sub_1000F1F68(a1, a2, a3);
  }

void sub_1000F1EC0(uint64_t *a1, unsigned int a2)
{
  unsigned int v2 = a2;
  sub_1000F2074(*a1, &v2);
}

uint64_t sub_1000F1EE8(uint64_t a1, uint64_t a2, void *a3)
{
  __int128 v5 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v5;
  v9[0] = 0LL;
  sub_100007640((uint64_t)v9, (uint64_t *)(a2 + 32));
  uint64_t v6 = sub_1000F2158(a1, (uint64_t)v8, a3);
  sub_1000075F0(v9);
  return v6;
}

void sub_1000F1F54(_Unwind_Exception *a1)
{
}

void sub_1000F1F68(uint64_t *a1, _WORD *a2, int a3)
{
  switch(a3)
  {
    case 0:
      uint64_t v5 = *a1;
      uint64_t v6 = operator new(0x40uLL);
      *uint64_t v6 = *(_OWORD *)v5;
      v6[1] = *(_OWORD *)(v5 + 16);
      *((void *)v6 + 4) = 0LL;
      sub_100007640((uint64_t)(v6 + 2), (uint64_t *)(v5 + 32));
      *(void *)a2 = v6;
      break;
    case 1:
      *(void *)a2 = *a1;
      *a1 = 0LL;
      break;
    case 2:
      uint64_t v7 = *(void **)a2;
      if (*(void *)a2)
      {
        sub_1000075F0(v7 + 4);
        operator delete(v7);
      }

      goto LABEL_7;
    case 3:
      unint64_t v8 = (const char *)(*(void *)(*(void *)a2 + 8LL) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf3IvN2nl8wpantund15NCPInstanceBaseEiNSt3"
                                                  "__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS_8functi"
                                                  "onIFviEEEEENS0_5list4INS0_5valueIPS6_EENS_3argILi1EEENSJ_IPKcEENSJ_ISG_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp( v8,  (const char *)((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf3IvN2nl8wpantund15NCPInstanceBaseEiNSt3__1 12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS_8functionIFvi EEEEENS0_5list4INS0_5valueIPS6_EENS_3argILi1EEENSJ_IPKcEENSJ_ISG_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = *a1;
      }

      else
      {
LABEL_7:
        *(void *)a2 = 0LL;
      }

      break;
    default:
      a2[4] = 0;
      break;
  }

void sub_1000F2060(_Unwind_Exception *a1)
{
}

void sub_1000F2074(uint64_t a1, unsigned int *a2)
{
  unsigned int v2 = a2;
  sub_1000F20A8(a1 + 16, a1, &v2);
}

void sub_1000F20A8(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  uint64_t v5 = **a3;
  uint64_t v6 = *(void *)a1;
  sub_10000AC00(&__p, *(char **)(a1 + 8));
  v7[0] = 0LL;
  sub_100007640((uint64_t)v7, (uint64_t *)(a1 + 16));
  sub_1000F18BC(a2, v6, v5, &__p, v7);
  sub_1000075F0(v7);
}

void sub_1000F212C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000F2158(uint64_t a1, uint64_t a2, void *a3)
{
  __int128 v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  v8[0] = 0LL;
  sub_100007640((uint64_t)v8, (uint64_t *)(a2 + 32));
  sub_1000F21D4(a1, (uint64_t)v7, a3);
  sub_1000075F0(v8);
  return 1LL;
}

void sub_1000F21C0(_Unwind_Exception *a1)
{
}

void sub_1000F21D4(uint64_t a1, uint64_t a2, void *a3)
{
  __int128 v5 = operator new(0x40uLL);
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *__int128 v5 = *(_OWORD *)a2;
  v5[1] = v6;
  *((void *)v5 + 4) = 0LL;
  sub_100007640((uint64_t)(v5 + 2), (uint64_t *)(a2 + 32));
  *a3 = v5;
}

void sub_1000F2220(_Unwind_Exception *a1)
{
}

void *sub_1000F2234(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  v10[0] = 0LL;
  sub_100007640((uint64_t)v10, a5);
  sub_1000F22B4(a1, a2, a3, a4, v10);
  sub_1000075F0(v10);
  return a1;
}

void sub_1000F22A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1000F22B4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = 0LL;
  sub_100007640((uint64_t)(a1 + 3), a5);
  return a1;
}

uint64_t sub_1000F22E8(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  __int128 v5 = *a4;
  *(void *)(a1 + 32) = *((void *)a4 + 2);
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 40) = 0LL;
  sub_100007640(a1 + 40, (uint64_t *)a4 + 3);
  return a1;
}

uint64_t (***sub_1000F2328(uint64_t (***a1)(), uint64_t a2))()
{
  __int128 v3 = *(_OWORD *)(a2 + 16);
  v5[0] = *(_OWORD *)a2;
  v5[1] = v3;
  uint64_t v6 = *(void *)(a2 + 32);
  v7[0] = 0LL;
  sub_100007640((uint64_t)v7, (uint64_t *)(a2 + 40));
  sub_1000F23A0(a1, (uint64_t)v5);
  sub_1000075F0(v7);
  return a1;
}

void sub_1000F238C(_Unwind_Exception *a1)
{
}

uint64_t (***sub_1000F23A0(uint64_t (***a1)(), uint64_t a2))()
{
  *a1 = 0LL;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  v5[0] = *(_OWORD *)a2;
  v5[1] = v3;
  uint64_t v6 = *(void *)(a2 + 32);
  v7[0] = 0LL;
  sub_100007640((uint64_t)v7, (uint64_t *)(a2 + 40));
  sub_1000F2418(a1, (uint64_t)v5);
  sub_1000075F0(v7);
  return a1;
}

void sub_1000F2404(_Unwind_Exception *a1)
{
}

void *sub_1000F2418(uint64_t (***a1)(), uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  v9[0] = 0LL;
  sub_100007640((uint64_t)v9, (uint64_t *)(a2 + 40));
  int v4 = sub_1000F24F4((uint64_t)off_1002B2F78, (uint64_t)v7, a1 + 1);
  __n128 result = sub_1000075F0(v9);
  if (v4) {
    uint64_t v6 = off_1002B2F78;
  }
  else {
    uint64_t v6 = 0LL;
  }
  *a1 = v6;
  return result;
}

void sub_1000F2498(_Unwind_Exception *a1)
{
}

void sub_1000F24AC(uint64_t *a1, _WORD *a2, int a3)
{
  if (a3 == 4)
  {
    a2[4] = 0;
  }

  else
  {
    sub_1000F257C(a1, a2, a3);
  }

void *sub_1000F24CC(uint64_t *a1, unsigned int a2)
{
  unsigned int v3 = a2;
  return sub_1000F2690(*a1, &v3);
}

uint64_t sub_1000F24F4(uint64_t a1, uint64_t a2, void *a3)
{
  __int128 v5 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v5;
  uint64_t v9 = *(void *)(a2 + 32);
  v10[0] = 0LL;
  sub_100007640((uint64_t)v10, (uint64_t *)(a2 + 40));
  uint64_t v6 = sub_1000F27E4(a1, (uint64_t)v8, a3);
  sub_1000075F0(v10);
  return v6;
}

void sub_1000F2568(_Unwind_Exception *a1)
{
}

void sub_1000F257C(uint64_t *a1, _WORD *a2, int a3)
{
  switch(a3)
  {
    case 0:
      uint64_t v5 = *a1;
      uint64_t v6 = operator new(0x48uLL);
      *(_OWORD *)uint64_t v6 = *(_OWORD *)v5;
      __int128 v7 = *(_OWORD *)(v5 + 16);
      void v6[4] = *(void *)(v5 + 32);
      *((_OWORD *)v6 + 1) = v7;
      v6[5] = 0LL;
      sub_100007640((uint64_t)(v6 + 5), (uint64_t *)(v5 + 40));
      *(void *)a2 = v6;
      break;
    case 1:
      *(void *)a2 = *a1;
      *a1 = 0LL;
      break;
    case 2:
      uint64_t v8 = *(void **)a2;
      if (*(void *)a2)
      {
        sub_1000075F0(v8 + 5);
        operator delete(v8);
      }

      goto LABEL_7;
    case 3:
      uint64_t v9 = (const char *)(*(void *)(*(void *)a2 + 8LL) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf3IvN2nl8wpantund15NCPInstanceBaseEi8in6"
                                                  "_addrNS_8functionIFviEEEEENS0_5list4INS0_5valueIPS6_EENS_3argILi1EEENS"
                                                  "D_IS7_EENSD_ISA_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp( v9,  (const char *)((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf3IvN2nl8wpantund15NCPInstanceBaseEi8in6_ad drNS_8functionIFviEEEEENS0_5list4INS0_5valueIPS6_EENS_3argILi1EEENSD_IS7_ EENSD_ISA_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = *a1;
      }

      else
      {
LABEL_7:
        *(void *)a2 = 0LL;
      }

      break;
    default:
      a2[4] = 0;
      break;
  }

void sub_1000F267C(_Unwind_Exception *a1)
{
}

void *sub_1000F2690(uint64_t a1, unsigned int *a2)
{
  unsigned int v3 = a2;
  return sub_1000F26C4((uint64_t *)(a1 + 16), a1, &v3);
}

void *sub_1000F26C4(uint64_t *a1, uint64_t a2, unsigned int **a3)
{
  uint64_t v4 = **a3;
  uint64_t v6 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v7 = *a1;
  v9[0] = 0LL;
  sub_100007640((uint64_t)v9, a1 + 3);
  sub_1000F2750(a2, v7, v4, v6, v5, v9);
  return sub_1000075F0(v9);
}

void sub_1000F273C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1000F2750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  __n128 v10 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, void *, __n128))a1;
  uint64_t v9 = *(void *)(a1 + 8);
  int v11 = (void *)(a2 + (v9 >> 1));
  if ((v9 & 1) != 0) {
    __n128 v10 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, void *, __n128))(*v11 + v10);
  }
  v14[0] = 0LL;
  __n128 v12 = sub_100007640((uint64_t)v14, a6);
  v10(v11, a3, a4, a5, v14, v12);
  return sub_1000075F0(v14);
}

void sub_1000F27D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000F27E4(uint64_t a1, uint64_t a2, void *a3)
{
  __int128 v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  uint64_t v8 = *(void *)(a2 + 32);
  v9[0] = 0LL;
  sub_100007640((uint64_t)v9, (uint64_t *)(a2 + 40));
  sub_1000F2868(a1, (uint64_t)v7, a3);
  sub_1000075F0(v9);
  return 1LL;
}

void sub_1000F2854(_Unwind_Exception *a1)
{
}

void sub_1000F2868(uint64_t a1, uint64_t a2, void *a3)
{
  __int128 v5 = operator new(0x48uLL);
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *__int128 v5 = *(_OWORD *)a2;
  v5[1] = v6;
  *((void *)v5 + 4) = *(void *)(a2 + 32);
  *((void *)v5 + 5) = 0LL;
  sub_100007640((uint64_t)v5 + 40, (uint64_t *)(a2 + 40));
  *a3 = v5;
}

void sub_1000F28BC(_Unwind_Exception *a1)
{
}

void *sub_1000F28D0(uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = a1 + 1;
  __int128 v5 = (char *)operator new(0x40uLL);
  v10[0] = v5;
  v10[1] = v4;
  *(_OWORD *)(v5 + 28) = *(_OWORD *)a2;
  *((_DWORD *)v5 + 11) = *(_DWORD *)(a2 + 16);
  *((void *)v5 + 6) = *(void *)(a2 + 20);
  *((_DWORD *)v5 + 14) = *(_DWORD *)(a2 + 28);
  char v11 = 1;
  __int128 v6 = sub_100075640((uint64_t)a1, &v9, (uint64_t)(v5 + 28));
  sub_10000AF70(a1, v9, (void **)v6, (void *)v10[0]);
  uint64_t v7 = v10[0];
  v10[0] = 0LL;
  sub_10000D0A8(v10, 0LL);
  return v7;
}

void sub_1000F2970(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_1000F2988(uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = a1 + 1;
  __int128 v5 = (char *)operator new(0x40uLL);
  v10[0] = v5;
  v10[1] = v4;
  *(_OWORD *)(v5 + 28) = *(_OWORD *)a2;
  *((_DWORD *)v5 + 11) = *(_DWORD *)(a2 + 16);
  *((_OWORD *)v5 + 3) = *(_OWORD *)(a2 + 20);
  char v11 = 1;
  __int128 v6 = sub_100075640((uint64_t)a1, &v9, (uint64_t)(v5 + 28));
  sub_10000AF70(a1, v9, (void **)v6, (void *)v10[0]);
  uint64_t v7 = v10[0];
  v10[0] = 0LL;
  sub_10000D0A8(v10, 0LL);
  return v7;
}

void sub_1000F2A20(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1000F2A38(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = 1LL;
    do
    {
      if ((sub_1000EB330(a2, (uint64_t)v2 + 28) & 1) == 0)
      {
        ++v2;
      }

      unsigned int v2 = (void *)*v2;
    }

    while (v2);
  }

  return 0LL;
}

void *sub_1000F2AA0(uint64_t **a1, uint64_t a2, uint64_t a3, __n128 **a4)
{
  __int128 v6 = sub_1000F2B48((uint64_t)a1, &v11, a2);
  uint64_t v7 = (void *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (void **)v6;
    sub_1000F2BD8((uint64_t)a1, a4, (uint64_t)v10);
    sub_10000AF70(a1, v11, v8, (void *)v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0LL;
    sub_10000D0A8(v10, 0LL);
  }

  return v7;
}

void *sub_1000F2B48(uint64_t a1, void *a2, uint64_t a3)
{
  __int128 v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v8 = (uint64_t)v4 + 28;
        uint64_t v4 = (void *)*v7;
        __int128 v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      __int128 v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }

    while (v4);
  }

  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }

__n128 sub_1000F2BD8@<Q0>(uint64_t a1@<X0>, __n128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  __int128 v6 = (char *)operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  unsigned __int32 v7 = (*a2)[1].n128_u32[0];
  __n128 result = **a2;
  *(__n128 *)(v6 + 28) = result;
  *((_DWORD *)v6 + 11) = v7;
  *((_DWORD *)v6 + 12) = 512;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t *sub_1000F2C30(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2) {
    sub_1000F2C68(a1, *a2, (uint64_t)(a2 + 1));
  }
  return a1;
}

uint64_t *sub_1000F2C68(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t **)result;
  uint64_t v11 = a2;
  if (!result[2]) {
    goto LABEL_11;
  }
  sub_100076F44(&v8, result);
  while (1)
  {
    uint64_t v5 = v10;
    if (!v10) {
      break;
    }
    uint64_t v6 = v11;
    if (v11 == a3) {
      break;
    }
    __int128 v7 = *(_OWORD *)(v11 + 28);
    *((_BYTE *)v10 + 44) = *(_BYTE *)(v11 + 44);
    *(_OWORD *)((char *)v5 + 28) = v7;
    *((_DWORD *)v5 + 12) = *(_DWORD *)(v6 + 48);
    sub_1000F2D3C(v4, v5);
    __n128 v10 = v9;
    if (v9) {
      uint64_t v9 = sub_100076FF4((uint64_t)v9);
    }
    sub_10000B338((uint64_t)&v11);
  }

  for (__n128 result = (uint64_t *)sub_100077048((uint64_t)&v8); ; __n128 result = (uint64_t *)sub_10000B338((uint64_t)&v11))
  {
    a2 = v11;
LABEL_11:
    if (a2 == a3) {
      break;
    }
    sub_1000F2D88(v4, a2 + 28);
  }

  return result;
}

void *sub_1000F2D3C(uint64_t **a1, void *a2)
{
  uint64_t v4 = sub_100075640((uint64_t)a1, &v6, (uint64_t)a2 + 28);
  sub_10000AF70(a1, v6, (void **)v4, a2);
  return a2;
}

void *sub_1000F2D88(uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = a1 + 1;
  uint64_t v5 = (char *)operator new(0x38uLL);
  v10[0] = v5;
  v10[1] = v4;
  *(_OWORD *)(v5 + 28) = *(_OWORD *)a2;
  *(void *)(v5 + 44) = *(void *)(a2 + 16);
  char v11 = 1;
  uint64_t v6 = sub_100075640((uint64_t)a1, &v9, (uint64_t)(v5 + 28));
  sub_10000AF70(a1, v9, (void **)v6, (void *)v10[0]);
  __int128 v7 = v10[0];
  v10[0] = 0LL;
  sub_10000D0A8(v10, 0LL);
  return v7;
}

void sub_1000F2E18(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1000F2E30(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = *(void *)a1;
  if (0x8E38E38E38E38E39LL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= a4)
  {
    if (0x8E38E38E38E38E39LL * ((*(void *)(a1 + 8) - v8) >> 3) >= a4)
    {
      sub_100075DD4((uint64_t)&v15, a2, a3, v8);
      return sub_100075D20(a1, v13);
    }

    else
    {
      uint64_t v12 = a2 + 8 * ((*(void *)(a1 + 8) - v8) >> 3);
      uint64_t result = sub_100075DD4((uint64_t)&v14, a2, v12, v8);
      else {
        return sub_100075A70(a1, v12, a3);
      }
    }
  }

  else
  {
    sub_1000F2FC4((void **)a1);
    if (a4 > 0x38E38E38E38E38ELL) {
      sub_10000CCF0();
    }
    unint64_t v9 = 0x1C71C71C71C71C72LL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v9 <= a4) {
      unint64_t v9 = a4;
    }
    else {
      unint64_t v10 = v9;
    }
    sub_100075A18((void *)a1, v10);
    return sub_100075A70(a1, a2, a3);
  }

  return result;
}

void sub_1000F2FC4(void **a1)
{
  if (*a1)
  {
    sub_100075D20((uint64_t)a1, (uint64_t (***)(void))*a1);
    if (0x8E38E38E38E38E39LL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x38E38E38E38E38FLL)
    {
      __break(0x550Cu);
    }

    else
    {
      operator delete(*a1);
      *a1 = 0LL;
      a1[1] = 0LL;
      a1[2] = 0LL;
    }
  }

BOOL sub_1000F304C(uint64_t a1)
{
  return *(void *)(a1 + 1720) != 0LL;
}

uint64_t sub_1000F305C(char *a1, int a2)
{
  if (!(*(unsigned int (**)(char *))(*(void *)a1 + 112LL))(a1))
  {
    uint64_t v5 = -1LL;
    return v5 & (v5 >> 63);
  }

  (*(void (**)(void *, void, void))(**((void **)a1 + 215) + 32LL))(*((void **)a1 + 215), 0LL, 0LL);
  uint64_t v4 = 1736LL;
  if (!a2) {
    uint64_t v4 = 1737LL;
  }
  uint64_t v5 = (*(uint64_t (**)(void *, char *, uint64_t))(**((void **)a1 + 215) + 16LL))( *((void **)a1 + 215),  &a1[v4],  1LL);
  if ((v5 & 0x8000000000000000LL) == 0)
  {
    (*(void (**)(void *, const char *, uint64_t))(**((void **)a1 + 215) + 16LL))( *((void **)a1 + 215),  "\n",  1LL);
    return v5 & (v5 >> 63);
  }

  __int128 v7 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v7)
  {
    uint64_t v8 = v7;
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  return v5;
}

void sub_1000F315C(uint64_t a1)
{
  *(void *)(a1 + 1040) = 0LL;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  sub_10011D8C0(a1 + 640);
  *(_OWORD *)(a1 + 232) = 0u;
  *(void *)(a1 + 632) = 0LL;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  sub_10011D8C0(a1 + 232);
  if (!*(void *)(a1 + 67208))
  {
    (*(void (**)(void))(**(void **)(a1 + 216) + 104LL))(*(void *)(a1 + 216));
    return;
  }

  char v2 = FillmoreReset();
  unsigned int v3 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  uint64_t v4 = v3;
  if ((v2 & 1) != 0)
  {
    if (v3)
    {
      if (sub_10015A058(6))
      {
        if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t v5 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "fillmoreController hard reset successful",  v5,  2u);
        }
      }

      return;
    }

    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      return;
    }
LABEL_15:
    sub_1001FB53C();
    return;
  }

  if (!v3)
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      return;
    }
    goto LABEL_15;
  }

__int128 *sub_1000F330C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (!*a2) {
    return sub_10008AE9C((__int128 *)(a1 + 216), (uint64_t *)(a1 + 200));
  }
  uint64_t v5 = *(void *)(a1 + 208);
  uint64_t v9 = *(void *)(a1 + 200);
  uint64_t v10 = v5;
  if (v5)
  {
    uint64_t v6 = (unsigned int *)(v5 + 8);
    do
      unsigned int v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 136LL))(v3, &v9);
  sub_10000F9EC(&v10);
  return sub_1000F33C0((__int128 *)(a1 + 216), a2);
}

void sub_1000F33AC(_Unwind_Exception *a1)
{
}

__int128 *sub_1000F33C0(__int128 *a1, void *a2)
{
  __int128 v3 = *a1;
  *a1 = v5;
  __int128 v5 = v3;
  sub_10000F9EC((uint64_t *)&v5 + 1);
  return a1;
}

__darwin_time_t sub_1000F340C(uint64_t a1)
{
  __darwin_time_t v10 = sub_100159F84(a1 + 32);
  (*(void (**)(void, void, void, void, void, __darwin_time_t *))(**(void **)(a1 + 216) + 120LL))( *(void *)(a1 + 216),  0LL,  0LL,  0LL,  0LL,  &v10);
  (*(void (**)(void, void, void, void, void, __darwin_time_t *))(**(void **)(a1 + 184) + 120LL))( *(void *)(a1 + 184),  0LL,  0LL,  0LL,  0LL,  &v10);
  if (*((_BYTE *)sub_1000AD5C0() + 42012))
  {
    char v2 = sub_1000AD5C0();
    (*(void (**)(void *, void, void, void, void, __darwin_time_t *))(v2[5252] + 16LL))( v2 + 5252,  0LL,  0LL,  0LL,  0LL,  &v10);
  }

  sub_10010156C((_DWORD *)(a1 + 1756), 0LL, 0, 0LL, 0LL);
  if (*(_BYTE *)(a1 + 1738) && *(void *)(a1 + 1744))
  {
    __darwin_time_t result = sub_10014314C();
    uint64_t v4 = *(void *)(a1 + 1744);
    BOOL v5 = __OFSUB__(result, v4);
    unint64_t v6 = result - v4;
    if (v5 || (BOOL v7 = v6 <= 0x2BF20, v8 = 180000 - v6, !v7))
    {
      __break(0x5515u);
      return result;
    }

    uint64_t v9 = v10;
    if (v8 < v10)
    {
      __darwin_time_t v10 = v8;
      uint64_t v9 = v8;
    }
  }

  if (*(_BYTE *)(a1 + 1414)) {
    __darwin_time_t v10 = 0LL;
  }
  if (*(_BYTE *)(a1 + 1752)) {
    return 0LL;
  }
  else {
    return v10 & ~(v10 >> 63);
  }
}

__darwin_time_t sub_1000F3568(uint64_t a1)
{
  return sub_1000F340C(a1 - 32);
}

uint64_t sub_1000F3570(uint64_t a1, char *a2, _DWORD *a3, char *a4, int *a5, uint64_t *a6)
{
  if (a6)
  {
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48LL))(a1);
    uint64_t v13 = *a6;
    if (v12 < *a6) {
      uint64_t v13 = v12;
    }
    *a6 = v13;
  }

  uint64_t v14 = sub_10010156C((_DWORD *)(a1 + 1756), a2, (int)a3, a4, a5);
  if ((_DWORD)v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v16)
    {
      uint64_t v17 = v16;
      return v15;
    }

    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      return v15;
    }
LABEL_13:
    sub_1001FB53C();
    return v15;
  }

  int v18 = sub_1000D8DE8(a1);
  if (sub_1000B5104(v18)) {
    return 0LL;
  }
  if (*(_BYTE *)(a1 + 80)) {
    sub_10011D784((int *)(a1 + 640), a2, a3, a4, a5);
  }
  sub_10011D784((int *)(a1 + 232), a2, a3, a4, a5);
  uint64_t v20 = (*(uint64_t (**)(void, char *, _DWORD *, char *, int *, uint64_t *))(**(void **)(a1 + 184) + 120LL))( *(void *)(a1 + 184),  a2,  a3,  a4,  a5,  a6);
  if ((_DWORD)v20)
  {
    uint64_t v15 = v20;
    size_t v21 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (!v21)
    {
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        return v15;
      }
      goto LABEL_13;
    }

    size_t v22 = v21;
  }

  else if (*((_BYTE *)sub_1000AD5C0() + 42012) {
         && (char v23 = sub_1000AD5C0(),
  }
             uint64_t v24 = (*(uint64_t (**)(void *, char *, _DWORD *, char *, int *, uint64_t *))(v23[5252] + 16LL))( v23 + 5252,  a2,  a3,  a4,  a5,  a6),  (_DWORD)v24))
  {
    uint64_t v15 = v24;
    int v25 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (!v25)
    {
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        return v15;
      }
      goto LABEL_13;
    }

    int v26 = v25;
  }

  else if (sub_100113424(a1) {
         && (uint64_t v27 = (*(uint64_t (**)(void, char *, _DWORD *, char *, int *, uint64_t *))(**(void **)(a1 + 1552)
  }
                                                                                                 + 120LL))( *(void *)(a1 + 1552),  a2,  a3,  a4,  a5,  a6),  (_DWORD)v27))
  {
    uint64_t v15 = v27;
    char v28 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (!v28)
    {
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        return v15;
      }
      goto LABEL_13;
    }

    __int16 v29 = v28;
  }

  else
  {
    uint64_t v15 = (*(uint64_t (**)(void, char *, _DWORD *, char *, int *, uint64_t *))(**(void **)(a1 + 216) + 120LL))( *(void *)(a1 + 216),  a2,  a3,  a4,  a5,  a6);
    if (!(_DWORD)v15) {
      return v15;
    }
    char v30 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (!v30)
    {
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        return v15;
      }
      goto LABEL_13;
    }

    char v31 = v30;
  }

  return v15;
}

uint64_t *sub_1000F3908(uint64_t *result)
{
  uint64_t v1 = result;
  if (!*((_BYTE *)result + 1752))
  {
    sub_1001145CC((time_t)(result + 192));
    sub_100101644((uint64_t)v1 + 1756);
    nullsub_2(v1 + 201);
    if ((*(unsigned int (**)(uint64_t *))(*v1 + 280))(v1) == 36)
    {
LABEL_8:
      sub_10015A014((uint64_t)(v1 + 4), 1LL, v7, v8, v9, v10, v11, v12, v22);
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v1 + 312))(v1);
    }

    sub_1000EC468((uint64_t)v1);
    int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v1[23] + 56LL))(v1[23]);
    if (v15)
    {
      int v16 = v15;
      uint64_t v17 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v17)
      {
        int v18 = v17;
        return sub_1000EA7AC((uint64_t)v1, v16);
      }

      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
LABEL_42:
      }
        sub_1001FB53C();
    }

    else
    {
      int v19 = (*(uint64_t (**)(uint64_t))(*(void *)v1[27] + 56LL))(v1[27]);
      if (!v19)
      {
        (*(void (**)(uint64_t *))(*v1 + 80))(v1);
        goto LABEL_8;
      }

      int v16 = v19;
      uint64_t v20 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v20)
      {
        size_t v21 = v20;
        return sub_1000EA7AC((uint64_t)v1, v16);
      }

      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_42;
      }
    }

    return sub_1000EA7AC((uint64_t)v1, v16);
  }

  int v2 = *((_DWORD *)result + 381);
  BOOL v3 = __OFADD__(v2, 1);
  int v4 = v2 + 1;
  if (!v3)
  {
    *((_DWORD *)result + 381) = v4;
    BOOL v5 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v5)
    {
      unint64_t v6 = v5;
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    (*(void (**)(uint64_t *))(*v1 + 96))(v1);
    (*(void (**)(uint64_t *, uint64_t))(*v1 + 128))(v1, 11LL);
    (*(void (**)(uint64_t *))(*v1 + 120))(v1);
    if (*((_DWORD *)v1 + 381) >= *((_DWORD *)v1 + 382))
    {
      uint64_t v13 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v13)
      {
        uint64_t v14 = v13;
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }

      sub_10000AC00(v27, "Stability");
      sub_10000AC00(v25, "Invalid State");
      sub_10000AC00(__p, "NCP command Failure Threshold crossed");
      (*(void (**)(uint64_t *, void **, void **, void **, void, uint64_t))(*v1 + 72))( v1,  v27,  v25,  __p,  0LL,  1LL);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
      if (v26 < 0) {
        operator delete(v25[0]);
      }
      if (v28 < 0) {
        operator delete(v27[0]);
      }
      sub_1000DA700((uint64_t)v1, 1LL);
    }

    int v16 = 0;
    *((_BYTE *)v1 + 1752) = 0;
    return sub_1000EA7AC((uint64_t)v1, v16);
  }

  __break(0x5500u);
  return result;
}

void sub_1000F3CB8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000F3D04(void *result, void *a2)
{
  uint64_t v2 = a2[1];
  *__darwin_time_t result = *a2;
  result[1] = v2;
  if (v2)
  {
    BOOL v3 = (unsigned int *)(v2 + 8);
    do
      unsigned int v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

void sub_1000F3D28(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

void sub_1000F3D3C()
{
  byte_1002D1250 = 1;
}

uint64_t sub_1000F3D4C()
{
  return byte_1002D1250;
}

uint64_t sub_1000F3D58(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000LL;
  v3[2] = sub_1000F3DCC;
  v3[3] = &unk_1002B2FB0;
  uint64_t v3[4] = a1;
  v3[5] = a2;
  if (qword_1002D1258 != -1) {
    dispatch_once(&qword_1002D1258, v3);
  }
  return byte_1002D1251;
}

void sub_1000F3DCC(uint64_t a1)
{
  uint64_t v2 = (const __CFString *)MGCopyAnswer(@"BuildVersion", 0LL);
  if (v2)
  {
    BOOL v3 = v2;
    byte_1002D1251 = 1;
    CFStringGetCString(v2, *(char **)(a1 + 32), *(void *)(a1 + 40), 0x8000100u);
    CFRelease(v3);
  }

std::string *sub_1000F3E2C@<X0>(std::string *a1@<X8>)
{
  uint64_t v2 = off_1002C9280[0];
  if (!*off_1002C9280[0] || !strcmp("0.07.01-340-gb161410", off_1002C9280[0]))
  {
    std::string::append(a1, " (");
    std::string::append(a1, "0.07.01-340-gb161410");
  }

  else
  {
    if (!strcmp("0.08.00d", v2))
    {
      BOOL v3 = " (";
    }

    else
    {
      std::string::append(a1, " (");
      std::string::append(a1, "0.07.01-340-gb161410");
      BOOL v3 = "/";
    }

    std::string::append(a1, v3);
    std::string::append(a1, off_1002C9280[0]);
  }

  std::string::append(a1, "; ");
  std::string::append(a1, off_1002C9288);
  return std::string::append(a1, ")");
}

void sub_1000F3F3C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1000F3F58(int a1, unsigned int a2)
{
  if (a2 > 0x3FF) {
    return 0LL;
  }
  uint64_t result = __darwin_check_fd_set_overflow(a2, &xmmword_1002D1260, 0);
  unsigned int v4 = a2 >> 5;
  if (!(_DWORD)result) {
    goto LABEL_7;
  }
  if (v4 == 32) {
    goto LABEL_18;
  }
  if (((*((_DWORD *)&xmmword_1002D1260 + v4) >> a2) & 1) != 0)
  {
    uint64_t v5 = 1LL;
  }

  else
  {
LABEL_7:
    uint64_t result = __darwin_check_fd_set_overflow(a2, &xmmword_1002D12E0, 0);
    if ((_DWORD)result)
    {
      if (v4 == 32) {
        goto LABEL_18;
      }
      uint64_t v5 = (*((_DWORD *)&xmmword_1002D12E0 + v4) >> a2) & 1;
    }

    else
    {
      uint64_t v5 = 0LL;
    }
  }

  uint64_t result = __darwin_check_fd_set_overflow(a2, &xmmword_1002D1260, 0);
  if ((_DWORD)result)
  {
    if (v4 == 32) {
      goto LABEL_18;
    }
    *((_DWORD *)&xmmword_1002D1260 + v4) &= ~(1 << a2);
  }

  uint64_t result = __darwin_check_fd_set_overflow(a2, &xmmword_1002D12E0, 0);
  if (!(_DWORD)result) {
    return v5;
  }
  if (v4 != 32)
  {
    *((_DWORD *)&xmmword_1002D12E0 + v4) &= ~(1 << a2);
    return v5;
  }

uint64_t sub_1000F4098(int a1, unsigned int a2)
{
  if (a2 > 0x3FF) {
    return 0LL;
  }
  uint64_t result = __darwin_check_fd_set_overflow(a2, &xmmword_1002D1360, 0);
  unsigned int v4 = a2 >> 5;
  if (!(_DWORD)result) {
    goto LABEL_7;
  }
  if (v4 == 32) {
    goto LABEL_18;
  }
  if (((*((_DWORD *)&xmmword_1002D1360 + v4) >> a2) & 1) != 0)
  {
    uint64_t v5 = 1LL;
  }

  else
  {
LABEL_7:
    uint64_t result = __darwin_check_fd_set_overflow(a2, &xmmword_1002D12E0, 0);
    if ((_DWORD)result)
    {
      if (v4 == 32) {
        goto LABEL_18;
      }
      uint64_t v5 = (*((_DWORD *)&xmmword_1002D12E0 + v4) >> a2) & 1;
    }

    else
    {
      uint64_t v5 = 0LL;
    }
  }

  uint64_t result = __darwin_check_fd_set_overflow(a2, &xmmword_1002D1360, 0);
  if ((_DWORD)result)
  {
    if (v4 == 32) {
      goto LABEL_18;
    }
    *((_DWORD *)&xmmword_1002D1360 + v4) &= ~(1 << a2);
  }

  uint64_t result = __darwin_check_fd_set_overflow(a2, &xmmword_1002D12E0, 0);
  if (!(_DWORD)result) {
    return v5;
  }
  if (v4 != 32)
  {
    *((_DWORD *)&xmmword_1002D12E0 + v4) &= ~(1 << a2);
    return v5;
  }

uint64_t sub_1000F41D8(void *a1)
{
  if (qword_1002D1408 != -1) {
    dispatch_once(&qword_1002D1408, &stru_1002B3050);
  }
  if (byte_1002D1400) {
    sub_100129168(a1);
  }
  sub_10015B068(a1);
  sub_100143B94();
  uint64_t v2 = CTRBorderAgentSetLoggingLevel(7);
  return nullsub_2(v2);
}

uint64_t sub_1000F424C()
{
  if (qword_1002D1408 != -1) {
    dispatch_once(&qword_1002D1408, &stru_1002B3050);
  }
  return byte_1002D1400;
}

uint64_t start(int a1, char **a2)
{
  v206[0] = (uint64_t)v206;
  v206[1] = (uint64_t)v206;
  v206[2] = 0LL;
  uint64_t v202 = 0LL;
  uint64_t v203 = &v202;
  uint64_t v204 = 0x2000000000LL;
  uint64_t v205 = 0LL;
  v201[0] = 0LL;
  v201[1] = 0LL;
  uint64_t v199 = 0LL;
  uint64_t v200 = v201;
  uint64_t v197 = &v198;
  uint64_t v198 = 0LL;
  sub_100016328();
  unint64_t v4 = sub_10000B370();
  uint64_t v5 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v5)
  {
    if (sub_10015A058(6) && os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Time since system start: %llu sec",  (uint8_t *)&buf,  0xCu);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  BOOL v6 = sub_1000F75E4(v4);
  if (pipe(&dword_1002C97C0) == -1)
  {
    dword_1002D13E0 = 9;
    char v23 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v23)
    {
      goto LABEL_70;
    }

    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_70;
    }
    goto LABEL_69;
  }

  int v7 = fcntl(dword_1002C97C0, 3);
  if (v7 == -1)
  {
    char v24 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v24)
    {
      goto LABEL_70;
    }

    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_70;
    }
LABEL_69:
    sub_1001FB53C();
    goto LABEL_70;
  }

  if (fcntl(dword_1002C97C0, 4, v7 | 4u) == -1)
  {
    int v25 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v25)
    {
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }
  }

  int v8 = fcntl(dword_1002C97C4, 3);
  if (v8 == -1)
  {
    char v26 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v26)
    {
      goto LABEL_70;
    }

    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_69;
    }
LABEL_70:
    dispatch_queue_t v29 = 0LL;
    char v30 = 0LL;
    goto LABEL_105;
  }

  if (fcntl(dword_1002C97C4, 4, v8 | 4u) == -1)
  {
    char v28 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v28)
    {
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }
  }

  unsigned __int8 v9 = sub_10015A044(0);
  sub_10015A044(v9);
  dword_1002D13E0 = 4;
  if (a1 && **a2) {
    off_1002C8FF8[0] = basename(*a2);
  }
  BOOL v192 = v6;
  optind = 0;
  while (2)
  {
    while (2)
    {
      LODWORD(v207.__r_.__value_.__l.__data_) = 0;
      int v10 = getopt_long(a1, a2, "hvd:c:o:I:s:b:u:", (const option *)&off_1002C9000, (int *)&v207);
      if (v10 <= 110)
      {
        switch(v10)
        {
          case 'b':
            uint64_t v11 = optarg;
            sub_10000AC00(&buf, "Config:NCP:SocketBaud");
            uint64_t v12 = (std::string *)sub_1000F76B8(&v200, (__n128 *)&buf);
            std::string::assign(v12, v11);
            goto LABEL_32;
          case 'c':
            int v19 = optarg;
            uint64_t v20 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
            if (v20)
            {
              if (sub_10015A058(5) && os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
              {
                LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v19;
                _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "config_file = %s",  (uint8_t *)&buf,  0xCu);
              }
            }

            else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"com.apple.wpantund.ncp";
              WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"default";
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging Module is not defined for SubSystem: %s, Category: %s",  (uint8_t *)&buf,  0x16u);
            }

            continue;
          case 'd':
            sub_10015A044(-1);
            continue;
          case 'e':
          case 'f':
          case 'g':
            continue;
          case 'h':
            char v31 = *a2;
            puts("Syntax:");
            printf("   %s %s\n", v31, "[options]");
            puts("Options:");
            unint64_t v32 = 0LL;
            uint64_t v33 = 0LL;
            unsigned __int16 v34 = byte_1002C9140;
            while (2)
            {
              if (((32 * v33) | 0x18uLL) > 0x140) {
                goto LABEL_542;
              }
              if (*(void *)&byte_1002C9140[32 * v33 + 24])
              {
                if (v32 > 0x13F) {
                  goto LABEL_542;
                }
                if (*v34) {
                  printf("   -%c");
                }
                else {
                  printf("     ");
                }
                if (((32 * v33) | 8uLL) > 0x140) {
                  goto LABEL_542;
                }
                if (*(void *)&byte_1002C9140[32 * v33 + 8])
                {
                  int v35 = *v34 ? 47 : 32;
                  putchar(v35);
                  printf("--%s");
                }

                else
                {
                  printf("                       ");
                }

                if (((32 * v33) | 0x10uLL) > 0x140)
                {
LABEL_542:
                  __break(1u);
                }

                else
                {
                  if (*(void *)&byte_1002C9140[32 * v33 + 16]) {
                    printf(" %s [%s]\n");
                  }
                  else {
                    printf(" %s\n");
                  }
                  int v36 = v33 + 1;
                  if (!__OFADD__((_DWORD)v33, 1))
                  {
                    uint64_t v33 = v36;
                    unint64_t v32 = 32LL * v36;
                    unsigned __int16 v34 = &byte_1002C9140[32 * v33];
                    continue;
                  }
                }

                __break(0x5500u);
              }

              break;
            }

            int v38 = 1;
            goto LABEL_103;
          default:
            if (v10 == 73)
            {
              int v15 = optarg;
              sub_10000AC00(&buf, "Config:TUN:InterfaceName");
              int v16 = (std::string *)sub_1000F76B8(&v200, (__n128 *)&buf);
              std::string::assign(v16, v15);
              goto LABEL_32;
            }

            if (v10 != -1) {
              continue;
            }
            if (optind < a1)
            {
              fprintf(__stderrp, "%s: error: Unexpected extra argument: %s\n", *a2, a2[optind]);
              dispatch_queue_t v29 = 0LL;
              char v30 = 0LL;
              int v38 = 2;
              goto LABEL_104;
            }

            sub_1000F3D3C();
            uint64_t v45 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
            if (v45)
            {
              if (sub_10015A058(6) && os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
              {
                int v46 = sub_1000F3D4C();
                uint64_t v47 = "Disabled";
                if (v46) {
                  uint64_t v47 = "Enabled";
                }
                LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v47;
                _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_INFO,  "Home Thread Feature is : %s",  (uint8_t *)&buf,  0xCu);
              }
            }

            else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              sub_1001FB53C();
            }

            std::string v48 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
            if (v48)
            {
              if (sub_10015A058(6) && os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
              {
                LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
                *(char **)((char *)buf.__r_.__value_.__r.__words + 4) = off_1002C8FF8[0];
                WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)off_1002C9288;
                _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_INFO,  "Starting %s 0.08.00d (%s) . . .",  (uint8_t *)&buf,  0x16u);
              }
            }

            else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              sub_1001FB53C();
            }

            int v49 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
            if (v49)
            {
              if (sub_10015A058(6) && os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
              {
                LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_INFO,  "\tSOURCE_VERSION = 0.07.01-340-gb161410",  (uint8_t *)&buf,  2u);
              }
            }

            else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              sub_1001FB53C();
            }

            if (*off_1002C9280[0])
            {
              std::string v50 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
              if (v50)
              {
                if (sub_10015A058(6) && os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
                {
                  LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                  *(char **)((char *)buf.__r_.__value_.__r.__words + 4) = off_1002C9280[0];
                  _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_INFO,  "\tBUILD_VERSION = %s",  (uint8_t *)&buf,  0xCu);
                }
              }

              else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                sub_1001FB53C();
              }
            }

            if (getuid())
            {
              uint64_t v51 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
              if (v51)
              {
              }

              else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                sub_1001FB53C();
              }
            }

            sub_10000AC00(&buf, "Config:NCP:SocketPath");
            char v52 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
            std::string::assign(v52, "/dev/tty.fillmore-uart");
            sub_10000AC00(&buf, "Daemon:AutoAssociateAfterReset");
            uint64_t v53 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
            std::string::assign(v53, "false");
            __int16 v54 = sub_100110CE0("Daemon:VirtualInterface:ReadBufferSize");
            int v55 = (const std::string::value_type *)v54;
            if (!v54 || !strcmp((const char *)v54, "0"))
            {
              sub_10000AC00(&buf, "Daemon:VirtualInterface:ReadBufferSize");
              char v57 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
              std::string::assign(v57, "8192");
            }

            else
            {
              sub_10000AC00(&buf, "Daemon:VirtualInterface:ReadBufferSize");
              __int16 v56 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
              std::string::assign(v56, v55);
            }

            std::string v58 = sub_100110CE0("vendor:coex:rx_mode");
            sub_10000AC00(&buf, "vendor:coex:rx_mode");
            uint64_t v59 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
            if (v58) {
              std::string::assign(v59, (const std::string::value_type *)v58);
            }
            else {
              std::string::assign(v59, "2");
            }
            uint64_t v60 = sub_100110CE0("vendor:coex:tx_mode");
            sub_10000AC00(&buf, "vendor:coex:tx_mode");
            xpc_object_t v61 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
            if (v60) {
              std::string::assign(v61, (const std::string::value_type *)v60);
            }
            else {
              std::string::assign(v61, "4");
            }
            char v62 = sub_100110CE0("vendor:coex:enabled");
            sub_10000AC00(&buf, "vendor:coex:enabled");
            __int16 v63 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
            if (v62) {
              std::string::assign(v63, (const std::string::value_type *)v62);
            }
            else {
              std::string::assign(v63, "1");
            }
            uint64_t v64 = sub_100110CE0("NCP:MacMaxRetryDirect");
            sub_10000AC00(&buf, "NCP:MacMaxRetryDirect");
            __int16 v65 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
            if (v64) {
              std::string::assign(v65, (const std::string::value_type *)v64);
            }
            else {
              std::string::assign(v65, "15");
            }
            char v66 = sub_100110CE0("OpenThread:LogLevel");
            sub_10000AC00(&buf, "OpenThread:LogLevel");
            uint64_t v67 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
            if (v66) {
              std::string::assign(v67, (const std::string::value_type *)v66);
            }
            else {
              std::string::assign(v67, "0x7");
            }
            uint64_t Controller = FillmoreCreateController(kCFAllocatorDefault);
            xpc_object_t v69 = (const void *)Controller;
            if (!Controller) {
              goto LABEL_235;
            }
            v207.__r_.__value_.__s.__data_[0] = 0;
            if (FillmoreHasEPA(Controller, &v207))
            {
              char v70 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
              if (v70)
              {
                if (sub_10015A058(6) && os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
                {
                  if (v207.__r_.__value_.__s.__data_[0]) {
                    __int128 v71 = "TRUE";
                  }
                  else {
                    __int128 v71 = "FALSE";
                  }
                  LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v71;
                  _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_INFO,  "FillmoreHasEPA = %s",  (uint8_t *)&buf,  0xCu);
                }
              }

              else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                sub_1001FB53C();
              }

              if (v207.__r_.__value_.__s.__data_[0])
              {
                sub_10000AC00(&buf, "vendor:NCP:RSSI:Offset");
                uint64_t v73 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
                std::string::assign(v73, "-13");
                id v74 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                if (v74)
                {
                  LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                  int v75 = "Setting RSSI Offset to = -13";
                  goto LABEL_229;
                }

                if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_234;
                }
              }

              else
              {
                sub_10000AC00(&buf, "vendor:NCP:RSSI:Offset");
                __int128 v76 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
                std::string::assign(v76, "0");
                id v74 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                if (v74)
                {
                  LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                  int v75 = "Setting RSSI Offset to = 0";
LABEL_229:
                  _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_INFO, v75, (uint8_t *)&buf, 2u);
                  goto LABEL_234;
                }

                if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_234;
                }
              }
            }

            else
            {
              __int128 v72 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
              if (v72)
              {
                goto LABEL_234;
              }

              if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
LABEL_234:
                CFRelease(v69);
LABEL_235:
                uint64_t v77 = sub_100110CE0("vendor:mle:adv:tx:num");
                sub_10000AC00(&buf, "vendor:mle:adv:tx:num");
                int v78 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
                if (v77) {
                  std::string::assign(v78, (const std::string::value_type *)v77);
                }
                else {
                  std::string::assign(v78, "3");
                }
                char v79 = sub_100110CE0("vendor:csma:cca:idleattempts");
                sub_10000AC00(&buf, "vendor:csma:cca:idleattempts");
                uint64_t v80 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
                if (v79) {
                  std::string::assign(v80, (const std::string::value_type *)v79);
                }
                else {
                  std::string::assign(v80, "1");
                }
                uint64_t v81 = sub_100110CE0("vendor:ifs:ackturnaround:time");
                sub_10000AC00(&buf, "vendor:ifs:ackturnaround:time");
                int v82 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
                if (v81) {
                  std::string::assign(v82, (const std::string::value_type *)v81);
                }
                else {
                  std::string::assign(v82, "192");
                }
                char v83 = sub_100110CE0("vendor:ifs:ackturnaround:mode");
                if (v83)
                {
                  uint64_t v84 = (const std::string *)sub_10000AC00(&buf, (char *)v83);
                  int v85 = std::stoi(v84, 0LL, 10);
                  sub_10000AC00(&buf, "vendor:ifs:ackturnaround:mode");
                  int v86 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
                  else {
                    std::string::assign(v86, (const std::string::value_type *)v83);
                  }
                }

                else
                {
                  sub_10000AC00(&buf, "vendor:ifs:ackturnaround:mode");
                  char v87 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
                  std::string::assign(v87, "1");
                }

                uint64_t v88 = sub_100110CE0("vendor:ifs:ackturnaround:enable");
                sub_10000AC00(&buf, "vendor:ifs:ackturnaround:enable");
                uint64_t v89 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
                if (v88) {
                  std::string::assign(v89, (const std::string::value_type *)v88);
                }
                else {
                  std::string::assign(v89, "1");
                }
                sub_10000AC00(&buf, "Thread:RouterSelectionJitter");
                unsigned int v90 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
                std::string::assign(v90, "5");
                sub_10000AC00(&buf, "NCP:ChannelMask");
                char v91 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
                std::string::assign(v91, "0x3FFF800");
                sub_10000AC00(&buf, "ChannelUtilizationMonitor:Enabled");
                uint64_t v92 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
                std::string::assign(v92, "0");
                uint64_t v93 = sub_100110CE0("TPC:Mode");
                sub_10000AC00(&buf, "TPC:Mode");
                unsigned int v94 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
                if (v93) {
                  std::string::assign(v94, (const std::string::value_type *)v93);
                }
                else {
                  std::string::assign(v94, "7");
                }
                char v95 = sub_100110CE0("NCP:TXPower");
                uint64_t v96 = (const std::string::value_type *)v95;
                if (v95)
                {
                  if (strcmp((const char *)v95, "127"))
                  {
                    sub_10000AC00(&buf, "NCP:TXPower");
                    uint64_t v97 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
                    std::string::assign(v97, v96);
LABEL_286:
                    sub_10000AC00(&buf, "vendor:min:mac:interframedelay");
                    uint64_t v100 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
                    std::string::assign(v100, "0");
                    uint64_t v101 = sub_100110CE0("Cmmissioner:Joiner:Scan:Retries");
                    sub_10000AC00(&buf, "Cmmissioner:Joiner:Scan:Retries");
                    __int128 v102 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
                    if (v101) {
                      std::string::assign(v102, (const std::string::value_type *)v101);
                    }
                    else {
                      std::string::assign(v102, "2");
                    }
                    char v103 = sub_100110CE0("vendor:coex:RxThrottle:RxReq:TxAckOnGrant");
                    sub_10000AC00(&buf, "vendor:coex:RxThrottle:RxReq:TxAckOnGrant");
                    __int128 v104 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
                    if (v103) {
                      std::string::assign(v104, (const std::string::value_type *)v103);
                    }
                    else {
                      std::string::assign(v104, "0");
                    }
                    __int128 v105 = sub_100110CE0("vendor:coex:RxThrottle:RxReq:TxAlwaysAck");
                    sub_10000AC00(&buf, "vendor:coex:RxThrottle:RxReq:TxAlwaysAck");
                    uint64_t v106 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
                    if (v105) {
                      std::string::assign(v106, (const std::string::value_type *)v105);
                    }
                    else {
                      std::string::assign(v106, "0");
                    }
                    id v107 = sub_100110CE0("vendor:coex:RxThrottle:NoRxReq:TxAckOnUnsolGrant");
                    sub_10000AC00(&buf, "vendor:coex:RxThrottle:NoRxReq:TxAckOnUnsolGrant");
                    int v108 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
                    if (v107) {
                      std::string::assign(v108, (const std::string::value_type *)v107);
                    }
                    else {
                      std::string::assign(v108, "0");
                    }
                    __int128 v109 = sub_100110CE0("vendor:coex:RxThrottle:Timeout");
                    sub_10000AC00(&buf, "vendor:coex:RxThrottle:Timeout");
                    uint64_t v110 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
                    if (v109) {
                      std::string::assign(v110, (const std::string::value_type *)v109);
                    }
                    else {
                      std::string::assign(v110, "0");
                    }
                    char v111 = sub_100110CE0("vendor:deepsleep:loglevel");
                    if (v111)
                    {
                      id v112 = (const std::string *)sub_10000AC00(&buf, (char *)v111);
                      unsigned __int8 v113 = std::stoi(v112, 0LL, 10);
                      sub_100129068(v113);
                    }

                    unsigned int v114 = sub_100110CE0("vendor:ncp:buffer:thresh");
                    if (v114)
                    {
                      sub_10000AC00(&buf, "vendor:ncp:buffer:thresh");
                      char v115 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
                      std::string::assign(v115, (const std::string::value_type *)v114);
                    }

                    id v116 = sub_100110CE0("vendor:ncp:logsdropped:filter:threshold");
                    sub_10000AC00(&buf, "vendor:ncp:logsdropped:filter:threshold");
                    unsigned int v117 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
                    if (v116) {
                      std::string::assign(v117, (const std::string::value_type *)v116);
                    }
                    else {
                      std::string::assign(v117, "100");
                    }
                    unsigned int v118 = sub_100110CE0("vendor:ncp:logsdropped:filter:timeout:ms");
                    sub_10000AC00(&buf, "vendor:ncp:logsdropped:filter:timeout:ms");
                    char v119 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
                    if (v118) {
                      std::string::assign(v119, (const std::string::value_type *)v118);
                    }
                    else {
                      std::string::assign(v119, "120000");
                    }
                    id v120 = sub_100110CE0("vendor:ncp:logsdropped:counter");
                    if (v120)
                    {
                      sub_10000AC00(&buf, "vendor:ncp:logsdropped:counter");
                      unsigned int v121 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
                      std::string::assign(v121, (const std::string::value_type *)v120);
                    }

                    else
                    {
                      sub_10000AC00(&buf, "vendor:ncp:logsdropped:filter:timeout:ms");
                      BOOL v122 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
                      std::string::assign(v122, "0");
                    }

                    if (v192)
                    {
                      sub_10000AC00(&buf, "NCP:PcapEnabled");
                      char v123 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
                      std::string::assign(v123, "0");
                      sub_10000AC00(&buf, "Daemon:PromiscuousPcap");
                      id v124 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
                      std::string::assign(v124, "0");
                      sub_10000AC00(&buf, "Daemon:PromiscuousModeNetwork");
                      unsigned int v125 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
                      std::string::assign(v125, "0");
                      sub_1000817B0();
                    }

                    else
                    {
                      unsigned int v126 = sub_100110CE0("NCP:PcapEnabled");
                      sub_10000AC00(&buf, "NCP:PcapEnabled");
                      char v127 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
                      if (v126) {
                        std::string::assign(v127, (const std::string::value_type *)v126);
                      }
                      else {
                        std::string::assign(v127, "0");
                      }
                      id v128 = sub_100110CE0("Daemon:PromiscuousPcap");
                      sub_10000AC00(&buf, "Daemon:PromiscuousPcap");
                      unsigned int v129 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
                      if (v128) {
                        std::string::assign(v129, (const std::string::value_type *)v128);
                      }
                      else {
                        std::string::assign(v129, "0");
                      }
                      unsigned int v130 = sub_100110CE0("Daemon:PromiscuousModeNetwork");
                      sub_10000AC00(&buf, "Daemon:PromiscuousModeNetwork");
                      char v131 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
                      if (v130) {
                        std::string::assign(v131, (const std::string::value_type *)v130);
                      }
                      else {
                        std::string::assign(v131, "0");
                      }
                    }

                    sub_1000F76EC((uint64_t)&v200, (uint64_t)v197, (uint64_t)&v198);
                    *(void *)uint64_t v211 = 0LL;
                    sub_1000FA064((uint64_t)&v197);
                    id v132 = v200;
                    *(void *)uint64_t v211 = v200;
                    if (v200 != v201)
                    {
                      do
                      {
                        std::string::basic_string(&buf, (const std::string *)(v132 + 4));
                        sub_100071608(&v196, (const std::string *)(*(void *)v211 + 56LL));
                        if (sub_1000FCAF8(&buf))
                        {
                          std::string::size_type size = buf.__r_.__value_.__s.__size_;
                          if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                            std::string::size_type size = buf.__r_.__value_.__l.__size_;
                          }
                          if (size)
                          {
                            unsigned int v134 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                            if (v134)
                            {
                              char v135 = (void *)(*(void *)v211 + 32LL);
                              if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                                p_std::string buf = &buf;
                              }
                              else {
                                p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
                              }
                              LODWORD(v207.__r_.__value_.__l.__data_) = 136315394;
                              *(std::string::size_type *)((char *)v207.__r_.__value_.__r.__words + 4) = (std::string::size_type)v135;
                              WORD2(v207.__r_.__value_.__r.__words[1]) = 2080;
                              *(std::string::size_type *)((char *)&v207.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_buf;
                              unsigned int v137 = v134;
                              unsigned int v138 = "CONFIGURATION PROPERTY %s IS DEPRECATED. Please use %s instead.";
                              goto LABEL_381;
                            }

                            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                              goto LABEL_380;
                            }
                          }

                          else
                          {
                            char v139 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                            if (v139)
                            {
                              goto LABEL_382;
                            }

                            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                            {
LABEL_380:
                              LODWORD(v207.__r_.__value_.__l.__data_) = 136315394;
                              *(std::string::size_type *)((char *)v207.__r_.__value_.__r.__words + 4) = (std::string::size_type)"com.apple.wpantund.ncp";
                              WORD2(v207.__r_.__value_.__r.__words[1]) = 2080;
                              *(std::string::size_type *)((char *)&v207.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"default";
                              unsigned int v137 = (os_log_s *)&_os_log_default;
                              unsigned int v138 = "Logging Module is not defined for SubSystem: %s, Category: %s";
LABEL_381:
                              _os_log_error_impl( (void *)&_mh_execute_header,  v137,  OS_LOG_TYPE_ERROR,  v138,  (uint8_t *)&v207,  0x16u);
                            }
                          }
                        }

LABEL_382:
                        std::string::size_type v140 = buf.__r_.__value_.__s.__size_;
                        if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                          std::string::size_type v140 = buf.__r_.__value_.__l.__size_;
                        }
                        if (v140)
                        {
                          sub_100147B4C((uint64_t *)&v196, &v207);
                          unsigned int v141 = sub_1000A36C4(&v197, &buf);
                          sub_100014D08((uint64_t)v141, (__int128 *)&v207);
                        }

                        if (v196) {
                          (*(void (**)(uint64_t *))(*v196 + 8))(v196);
                        }
                        sub_10000B338((uint64_t)v211);
                        id v132 = *(uint64_t **)v211;
                      }

                      while (*(void **)v211 != v201);
                    }

                    if (v199)
                    {
                      *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0uLL;
                      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf.__r_.__value_.__l.__size_;
                      __int128 v142 = v197;
                      xpc_object_t v196 = v197;
                      if (v197 != &v198)
                      {
                        while (1)
                        {
                          char v143 = (const char *)(v142 + 4);
                          id v144 = (const char *)(v142 + 7);
                          unsigned int v145 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                          if (v145)
                          {
                            if (sub_10015A058(6) && os_log_type_enabled(v145, OS_LOG_TYPE_INFO))
                            {
                              LODWORD(v207.__r_.__value_.__l.__data_) = 136315394;
                              *(std::string::size_type *)((char *)v207.__r_.__value_.__r.__words + 4) = (std::string::size_type)v143;
                              WORD2(v207.__r_.__value_.__r.__words[1]) = 2080;
                              *(std::string::size_type *)((char *)&v207.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v144;
                              _os_log_impl( (void *)&_mh_execute_header,  v145,  OS_LOG_TYPE_INFO,  "set-config-param: %s = %s",  (uint8_t *)&v207,  0x16u);
                            }
                          }

                          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                          {
                            LODWORD(v207.__r_.__value_.__l.__data_) = 136315394;
                            *(std::string::size_type *)((char *)v207.__r_.__value_.__r.__words + 4) = (std::string::size_type)"com.apple.wpantund.ncp";
                            WORD2(v207.__r_.__value_.__r.__words[1]) = 2080;
                            *(std::string::size_type *)((char *)&v207.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"default";
                            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging Module is not defined for SubSystem: %s, Category: %s",  (uint8_t *)&v207,  0x16u);
                          }

                          if (!strcasecmp(v143, "Config:NCP:SocketBaud"))
                          {
                            int v147 = atoi(v144);
                            if (v147 > 9599)
                            {
                              dword_1002C9294 = v147;
                              goto LABEL_430;
                            }

                            char v149 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                            if (v149)
                            {
                              v207.__r_.__value_.__r.__words[0] = 0x16D04000202LL;
                              LOWORD(v207.__r_.__value_.__r.__words[1]) = 2080;
                              *(std::string::size_type *)((char *)&v207.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"9600 <= baud";
                              id v150 = v149;
                              unsigned int v151 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/wpantund/src/wpantund/wpantun"
                                     "d.cpp:%d: Requirement Failed (%s)";
                              uint32_t v152 = 18;
                            }

                            else
                            {
                              if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                                goto LABEL_430;
                              }
                              LODWORD(v207.__r_.__value_.__l.__data_) = 136315394;
                              *(std::string::size_type *)((char *)v207.__r_.__value_.__r.__words + 4) = (std::string::size_type)"com.apple.wpantund.ncp";
                              WORD2(v207.__r_.__value_.__r.__words[1]) = 2080;
                              *(std::string::size_type *)((char *)&v207.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"default";
                              id v150 = (os_log_s *)&_os_log_default;
                              unsigned int v151 = "Logging Module is not defined for SubSystem: %s, Category: %s";
                              uint32_t v152 = 22;
                            }

                            _os_log_error_impl( (void *)&_mh_execute_header,  v150,  OS_LOG_TYPE_ERROR,  v151,  (uint8_t *)&v207,  v152);
                            goto LABEL_430;
                          }

                          if (!strcasecmp(v143, "Config:Daemon:PrivDropToUser")) {
                            break;
                          }
                          if (!strcasecmp(v143, "Daemon:SyslogMask"))
                          {
                            uint64_t v153 = sub_10015A044(0);
                            int v154 = sub_100159C90(v144, v153);
                            sub_10015A044(v154);
                            goto LABEL_430;
                          }

                          if (!strcasecmp(v143, "Config:Daemon:Chroot"))
                          {
                            if (*v144) {
                              uint64_t v155 = strdup(v144);
                            }
                            else {
                              uint64_t v155 = 0LL;
                            }
                            qword_1002D13E8 = (uint64_t)v155;
                            goto LABEL_430;
                          }

                          if (!strcasecmp(v143, "Config:Daemon:PIDFile") && !qword_1002D13F8)
                          {
                            qword_1002D13F8 = (uint64_t)strdup(v144);
                            unlink((const char *)qword_1002D13F8);
                            char v146 = fopen((const char *)qword_1002D13F8, "w");
                            if (v146)
                            {
                              fclose(v146);
                              goto LABEL_430;
                            }

                            uint64_t v157 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                            if (v157)
                            {
                            }

                            else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                            {
                              LODWORD(v207.__r_.__value_.__l.__data_) = 136315394;
                              *(std::string::size_type *)((char *)v207.__r_.__value_.__r.__words + 4) = (std::string::size_type)"com.apple.wpantund.ncp";
                              WORD2(v207.__r_.__value_.__r.__words[1]) = 2080;
                              *(std::string::size_type *)((char *)&v207.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"default";
                              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging Module is not defined for SubSystem: %s, Category: %s",  (uint8_t *)&v207,  0x16u);
                            }
                          }

                          uint64_t v158 = v196;
                          uint64_t v159 = (std::string *)sub_1000A36C4((uint64_t **)&buf, (std::string *)(v196 + 4));
                          std::string::operator=(v159, (const std::string *)(v158 + 7));
LABEL_443:
                          sub_10000B338((uint64_t)&v196);
                          __int128 v142 = v196;
                          if (v196 == &v198) {
                            goto LABEL_444;
                          }
                        }

                        if (*v144) {
                          __int128 v148 = strdup(v144);
                        }
                        else {
                          __int128 v148 = 0LL;
                        }
                        qword_1002D13F0 = (uint64_t)v148;
LABEL_430:
                        uint64_t v156 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                        if (v156)
                        {
                          if (sub_10015A058(6) && os_log_type_enabled(v156, OS_LOG_TYPE_INFO))
                          {
                            LODWORD(v207.__r_.__value_.__l.__data_) = 136315138;
                            *(std::string::size_type *)((char *)v207.__r_.__value_.__r.__words + 4) = (std::string::size_type)v143;
                            _os_log_impl( (void *)&_mh_execute_header,  v156,  OS_LOG_TYPE_INFO,  "set-config-param: %s set succeded",  (uint8_t *)&v207,  0xCu);
                          }
                        }

                        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                        {
                          LODWORD(v207.__r_.__value_.__l.__data_) = 136315394;
                          *(std::string::size_type *)((char *)v207.__r_.__value_.__r.__words + 4) = (std::string::size_type)"com.apple.wpantund.ncp";
                          WORD2(v207.__r_.__value_.__r.__words[1]) = 2080;
                          *(std::string::size_type *)((char *)&v207.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"default";
                          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging Module is not defined for SubSystem: %s, Category: %s",  (uint8_t *)&v207,  0x16u);
                        }

                        goto LABEL_443;
                      }

LABEL_444:
                      sub_1000FA098((uint64_t *)&v197, (uint64_t *)&buf);
                      sub_100016450((uint64_t)&buf);
                    }

                    if ((sub_1001242C8() & 0x80000000) == 0)
                    {
                      if (!qword_1002D13E8) {
                        goto LABEL_465;
                      }
                      if (getuid())
                      {
                        unint64_t v160 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                        if (v160)
                        {
                          goto LABEL_465;
                        }

                        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                          goto LABEL_465;
                        }
                      }

                      else
                      {
                        if (chdir((const char *)qword_1002D13E8))
                        {
                          uint64_t v165 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                          if (v165)
                          {
                            if (sub_10015A058(2) && os_log_type_enabled(v165, OS_LOG_TYPE_ERROR))
                            {
                              uint64_t v166 = __error();
                              unsigned int v167 = strerror(*v166);
                              sub_10020EC5C((uint64_t)v167, (uint64_t)&buf);
                            }

                            goto LABEL_527;
                          }

                          if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                            goto LABEL_527;
                          }
                          goto LABEL_526;
                        }

                        if (chroot((const char *)qword_1002D13E8))
                        {
                          unsigned int v176 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                          if (v176)
                          {
                            if (sub_10015A058(2) && os_log_type_enabled(v176, OS_LOG_TYPE_ERROR))
                            {
                              unsigned int v177 = __error();
                              uint64_t v178 = strerror(*v177);
                              sub_10020EC24((uint64_t)v178, (uint64_t)&buf);
                            }

                            goto LABEL_527;
                          }

                          if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                            goto LABEL_527;
                          }
                          goto LABEL_526;
                        }

                        if (chdir("/"))
                        {
                          unsigned int v182 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                          if (v182)
                          {
                            if (sub_10015A058(6) && os_log_type_enabled(v182, OS_LOG_TYPE_INFO))
                            {
                              LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = qword_1002D13E8;
                            }

                            goto LABEL_527;
                          }

                          if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                            goto LABEL_527;
                          }
                          goto LABEL_526;
                        }

                        uint64_t v184 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                        if (v184)
                        {
                          if (sub_10015A058(6) && os_log_type_enabled(v184, OS_LOG_TYPE_INFO))
                          {
                            LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = qword_1002D13E8;
                            _os_log_impl( (void *)&_mh_execute_header,  v184,  OS_LOG_TYPE_INFO,  "Successfully changed root directory to %s.",  (uint8_t *)&buf,  0xCu);
                          }

LABEL_465:
                          if (getuid())
                          {
                            if (!qword_1002D13F0) {
                              goto LABEL_538;
                            }
                            unsigned int v168 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                            if (v168)
                            {
                              if (sub_10015A058(6) && os_log_type_enabled(v168, OS_LOG_TYPE_INFO))
                              {
                                LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                                unsigned int v169 = "Not running as root, skipping dropping privileges";
LABEL_535:
                                _os_log_impl( (void *)&_mh_execute_header,  v168,  OS_LOG_TYPE_INFO,  v169,  (uint8_t *)&buf,  2u);
                                goto LABEL_538;
                              }

                              goto LABEL_538;
                            }

                            if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                              goto LABEL_538;
                            }
                            goto LABEL_537;
                          }

                          if (qword_1002D13F0)
                          {
                            uint64_t v170 = getpwnam((const char *)qword_1002D13F0);
                            if (!v170)
                            {
                              unsigned int v179 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                              if (v179)
                              {
                                goto LABEL_527;
                              }

                              if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                                goto LABEL_527;
                              }
                              goto LABEL_526;
                            }

                            uid_t pw_uid = v170->pw_uid;
                            gid_t pw_gid = v170->pw_gid;
                            if (pw_gid)
                            {
                              if (setgid(v170->pw_gid))
                              {
                                unsigned int v173 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                                if (v173)
                                {
                                  if (sub_10015A058(2) && os_log_type_enabled(v173, OS_LOG_TYPE_ERROR))
                                  {
                                    unsigned int v174 = __error();
                                    unsigned int v175 = strerror(*v174);
                                    sub_10020EBEC((uint64_t)v175, (uint64_t)&buf);
                                  }

                                  goto LABEL_527;
                                }

                                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                                  goto LABEL_526;
                                }
LABEL_527:
                                dispatch_queue_t v29 = 0LL;
                                char v30 = 0LL;
                                int v38 = 9;
                                goto LABEL_104;
                              }

                              uint64_t v183 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                              if (v183)
                              {
                                if (sub_10015A058(6) && os_log_type_enabled(v183, OS_LOG_TYPE_INFO))
                                {
                                  LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
                                  HIDWORD(buf.__r_.__value_.__r.__words[0]) = pw_gid;
                                  _os_log_impl( (void *)&_mh_execute_header,  v183,  OS_LOG_TYPE_INFO,  "Group privileges dropped to GID:%d",  (uint8_t *)&buf,  8u);
                                }
                              }

                              else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                              {
                                sub_1001FB53C();
                              }
                            }

                            if (pw_uid)
                            {
                              if (setuid(pw_uid))
                              {
                                unsigned int v185 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                                if (v185)
                                {
                                  if (sub_10015A058(2) && os_log_type_enabled(v185, OS_LOG_TYPE_ERROR))
                                  {
                                    uint64_t v186 = __error();
                                    uint64_t v187 = strerror(*v186);
                                    sub_10020EBB4((uint64_t)v187, (uint64_t)&buf);
                                  }

                                  goto LABEL_527;
                                }

                                if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                                  goto LABEL_527;
                                }
LABEL_526:
                                sub_1001FB53C();
                                goto LABEL_527;
                              }

                              unsigned int v188 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                              if (v188)
                              {
                                if (sub_10015A058(6) && os_log_type_enabled(v188, OS_LOG_TYPE_INFO))
                                {
                                  LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
                                  HIDWORD(buf.__r_.__value_.__r.__words[0]) = pw_uid;
                                  _os_log_impl( (void *)&_mh_execute_header,  v188,  OS_LOG_TYPE_INFO,  "User privileges dropped to UID:%d",  (uint8_t *)&buf,  8u);
                                }
                              }

                              else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                              {
                                sub_1001FB53C();
                              }

                              if (pw_gid) {
                                goto LABEL_538;
                              }
                            }
                          }

                          unsigned int v168 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                          if (v168)
                          {
                            if (sub_10015A058(6) && os_log_type_enabled(v168, OS_LOG_TYPE_INFO))
                            {
                              LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                              unsigned int v169 = "Running as root without dropping privileges!";
                              goto LABEL_535;
                            }

LABEL_538:
                            sub_10000B414();
                            uint64_t v189 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_USER_INITIATED, 0);
                            char v30 = dispatch_queue_create("wpantund.Run.Queue", v189);
                            uint64_t v190 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_USER_INITIATED, 0);
                            dispatch_queue_t v29 = dispatch_queue_create("wpantund.Process.Queue", v190);
                            block[0] = _NSConcreteStackBlock;
                            block[1] = 1174405120LL;
                            block[2] = sub_1000F7754;
                            block[3] = &unk_1002B2FD8;
                            block[4] = &v202;
                            sub_1000FA01C(v195, (uint64_t *)&v197);
                            v195[3] = v29;
                            dispatch_sync(v30, block);
                            v193[0] = _NSConcreteStackBlock;
                            v193[1] = 0x40000000LL;
                            v193[2] = sub_1000F7A20;
                            v193[3] = &unk_1002B3010;
                            v193[4] = &v202;
                            v193[5] = v29;
                            dispatch_async(v30, v193);
                            sub_100016450((uint64_t)v195);
                            CFRunLoopRun();
                            uint64_t v191 = v203[3];
                            if (v191) {
                              sub_1000F7B4C(v191);
                            }
                            goto LABEL_105;
                          }

                          if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                            goto LABEL_538;
                          }
LABEL_537:
                          sub_1001FB53C();
                          goto LABEL_538;
                        }

                        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                          goto LABEL_465;
                        }
                      }

                      sub_1001FB53C();
                      goto LABEL_465;
                    }

                    uint64_t v161 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                    if (v161)
                    {
                      if (sub_10015A058(3) && os_log_type_enabled(v161, OS_LOG_TYPE_ERROR))
                      {
                        uint64_t v162 = *__error();
                        uint64_t v163 = __error();
                        unsigned int v164 = strerror(*v163);
                        sub_10020EAF4((uint64_t)v164, (uint64_t)&buf, v162, v161);
                      }
                    }

                    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                    {
                      sub_1001FB53C();
                    }

                    goto LABEL_70;
                  }

                  uint64_t v98 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                  if (v98)
                  {
                  }

                  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                  {
                    sub_1001FB53C();
                  }
                }

                sub_10000AC00(&buf, "NCP:TXPower");
                char v99 = (std::string *)sub_1000F76B8(&v197, (__n128 *)&buf);
                std::string::assign(v99, "20");
                goto LABEL_286;
              }
            }

            sub_1001FB53C();
            goto LABEL_234;
        }
      }

      break;
    }

    switch(v10)
    {
      case 'o':
        if (optind < a1)
        {
          uint64_t v13 = a2[optind];
          if (*v13 != 45)
          {
            ++optind;
            sub_10000AC00(&buf, optarg);
            uint64_t v14 = (std::string *)sub_1000F76B8(&v200, (__n128 *)&buf);
            std::string::assign(v14, v13);
LABEL_32:
            continue;
          }
        }

        uint64_t v27 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v27)
        {
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FB53C();
        }

        int v38 = 2;
LABEL_103:
        dispatch_queue_t v29 = 0LL;
        char v30 = 0LL;
LABEL_104:
        dword_1002D13E0 = v38;
LABEL_105:
        int v39 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v39)
        {
          if (sub_10015A058(6) && os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
          {
            LODWORD(v207.__r_.__value_.__l.__data_) = 67109120;
            HIDWORD(v207.__r_.__value_.__r.__words[0]) = dword_1002D13E0;
            _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_INFO,  "Cleaning up. (gRet = %d)",  (uint8_t *)&v207,  8u);
          }
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FB53C();
        }

        if (v30) {
          dispatch_release(v30);
        }
        if (v29) {
          dispatch_release(v29);
        }
        uint64_t v40 = (uint64_t *)v203[3];
        if (v40)
        {
          __int16 v41 = sub_1000F9E24(v40);
          operator delete(v41);
        }

        if (dword_1002D13E0 == 7) {
          dword_1002D13E0 = 0;
        }
        if (qword_1002D13F8) {
          unlink((const char *)qword_1002D13F8);
        }
        int v42 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v42)
        {
          if (sub_10015A058(6) && os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
          {
            LOWORD(v207.__r_.__value_.__l.__data_) = 0;
            _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "Stopped.", (uint8_t *)&v207, 2u);
          }
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FB53C();
        }

        uint64_t v43 = dword_1002D13E0;
        sub_100016450((uint64_t)&v197);
        sub_100016450((uint64_t)&v200);
        _Block_object_dispose(&v202, 8);
        sub_1000F9E68(v206);
        return v43;
      case 's':
        size_t v21 = optarg;
        sub_10000AC00(&buf, "Config:NCP:SocketPath");
        uint64_t v22 = (std::string *)sub_1000F76B8(&v200, (__n128 *)&buf);
        std::string::assign(v22, v21);
        goto LABEL_32;
      case 'u':
        uint64_t v17 = optarg;
        sub_10000AC00(&buf, "Config:Daemon:PrivDropToUser");
        int v18 = (std::string *)sub_1000F76B8(&v200, (__n128 *)&buf);
        std::string::assign(v18, v17);
        goto LABEL_32;
      case 'v':
        sub_1000F3E2C(&buf);
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          __int128 v37 = &buf;
        }
        else {
          __int128 v37 = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        printf("wpantund %s\n", (const char *)v37);
        int v38 = 0;
        goto LABEL_103;
      default:
        continue;
    }
  }

void sub_1000F70B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36, uint64_t a37, uint64_t a38, char a39, uint64_t a40, uint64_t a41, char a42)
{
}

BOOL sub_1000F75E4(unint64_t a1)
{
  uint64_t v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  BOOL v3 = v2;
  if (a1 < 0x15)
  {
    if (v2)
    {
      return a1 < 0x15;
    }

    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      return a1 < 0x15;
    }
LABEL_13:
    sub_1001FB53C();
    return a1 < 0x15;
  }

  if (!v2)
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      return a1 < 0x15;
    }
    goto LABEL_13;
  }

  return a1 < 0x15;
}

void *sub_1000F76B8(uint64_t **a1, __n128 *a2)
{
  BOOL v3 = a2;
  return sub_1000F9EC8(a1, (const void **)a2, (uint64_t)&unk_100229916, &v3) + 7;
}

uint64_t sub_1000F76EC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a2;
  if (a2 != a3)
  {
    unint64_t v4 = (const void **)result;
    uint64_t v5 = result + 8;
    do
    {
      sub_1000AA014(v4, v5, (const void **)(a2 + 32), (const std::string *)(a2 + 32));
      uint64_t result = sub_10000B338((uint64_t)&v6);
      a2 = v6;
    }

    while (v6 != a3);
  }

  return result;
}

void sub_1000F7754(void *a1)
{
  uint64_t v2 = operator new(0x60uLL);
  sub_1000F7DC8((uint64_t)v2, a1 + 5);
  *(void *)(*(void *)(a1[4] + 8LL) + 24LL) = v2;
  BOOL v3 = *(uint64_t **)(*(void *)(a1[4] + 8LL) + 24LL);
  unint64_t v4 = operator new(0x128uLL);
  sub_10000A088((uint64_t)v4, a1[8]);
  sub_1000FA3A0(&v9, (uint64_t)v4);
  sub_1000108A4(v3, &v9);
  sub_10000F9EC(&v10);
  uint64_t v5 = *(uint64_t **)(*(void *)(a1[4] + 8LL) + 24LL);
  uint64_t v6 = operator new(0x48uLL);
  sub_100079610(v6, a1[8]);
  sub_1000FA4C0(&v7, (uint64_t)v6);
  sub_1000108A4(v5, &v7);
  sub_10000F9EC(&v8);
  CTRBorderAgentInitialize();
}

void sub_1000F782C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12, char a13)
{
  if (a2 == 1)
  {
    __cxa_get_exception_ptr(a1);
    __cxa_begin_catch(a1);
    int v16 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v16)
    {
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    std::exception::~exception(&a12);
    __cxa_end_catch();
    JUMPOUT(0x1000F7814LL);
  }

  _Unwind_Resume(a1);
}

void sub_1000F793C( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void sub_1000F7950()
{
}

void sub_1000F79F4( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void *sub_1000F7A0C(uint64_t a1, uint64_t a2)
{
  return sub_1000FA01C((void *)(a1 + 40), (uint64_t *)(a2 + 40));
}

uint64_t sub_1000F7A18(uint64_t a1)
{
  return sub_100016450(a1 + 40);
}

void sub_1000F7A20(uint64_t a1)
{
  Maiuint64_t n = CFRunLoopGetMain();
  uint64_t v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v2)
  {
    BOOL v3 = v2;
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  CFRunLoopStop(Main);
}

void sub_1000F7AB8(uint64_t a1, dispatch_queue_s *a2)
{
  dword_1002D13E0 = 0;
  do
  {
    sub_1000F8AD0(a1);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 0x40000000LL;
    _OWORD v4[2] = sub_1000F98B4;
    v4[3] = &unk_1002B31C8;
    uint64_t v4[4] = a1;
    uint64_t v4[5] = a2;
    dispatch_sync(a2, v4);
  }

  while (!dword_1002D13E0);
}

void sub_1000F7B4C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v2)
  {
    BOOL v3 = v2;
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  if (!*(_BYTE *)(a1 + 60))
  {
    for (uint64_t i = *(void *)(a1 + 8); i != a1; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v11 = *(void *)(i + 16);
      uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 24LL))(*(void *)(a1 + 48));
      (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 40LL))(v11, v12);
    }

    uint64_t v13 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v13)
    {
      uint64_t v14 = v13;
      if (sub_10015A058(3))
      {
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
          sub_10020F12C();
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    *(_BYTE *)(a1 + 60) = 1;
  }

void sub_1000F7C80(id a1)
{
  uint64_t v1 = (const __CFString *)MGCopyAnswer(@"HWModelStr", 0LL);
  if (v1)
  {
    uint64_t v2 = v1;
    if (CFStringHasPrefix(v1, @"j305")) {
      BOOL v3 = 1;
    }
    else {
      BOOL v3 = CFStringHasPrefix(v2, @"J305") != 0;
    }
    byte_1002D1400 = v3;
    uint64_t v4 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v4)
    {
      uint64_t v5 = v4;
      if (sub_10015A058(6))
      {
        if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        {
          int v6 = 138412546;
          uint64_t v7 = v2;
          __int16 v8 = 1024;
          int v9 = byte_1002D1400;
          _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "hwModelStr: %@, validDevice: %d",  (uint8_t *)&v6,  0x12u);
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    CFRelease(v2);
  }

uint64_t sub_1000F7DC8(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = a1;
  *(void *)(a1 + 8) = a1;
  *(void *)(a1 + 16) = 0LL;
  uint64_t v4 = (uint64_t **)(a1 + 24);
  sub_1000FA01C((void *)(a1 + 24), a2);
  uint64_t v5 = sub_1000EA768(a2);
  *(void *)(a1 + 48) = v5;
  *(_DWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  *(_DWORD *)(a1 + 88) = 0;
  if (!v5)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unknown NCP Driver");
  }

  int v18 = sub_1000F8050;
  sub_1000F8940(&v19, (uint64_t *)&v18);
  sub_1000F8048((uint64_t)v5 + 8, (uint64_t)&v19, 0, &v22);
  sub_10000EF74(&v23);
  sub_1000075F0(v21);
  char v24 = &v19;
  sub_10000EFEC((void ***)&v24);
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 32LL))(*(void *)(a1 + 48));
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 24LL))(*(void *)(a1 + 48));
  sub_10010AC04(v6, v7);
  __int16 v8 = sub_1000AD5C0();
  uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 24LL))(*(void *)(a1 + 48));
  sub_10000EDBC((uint64_t)v8, v9);
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 24LL))(*(void *)(a1 + 48));
  sub_100128FA4(v10);
  uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 24LL))(*(void *)(a1 + 48));
  sub_10015AFA4(v11);
  uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 24LL))(*(void *)(a1 + 48));
  sub_100143AE8(v12);
  uint64_t v13 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 24LL))(*(void *)(a1 + 48));
  sub_10000AC00(&v19, "NCP:PcapEnabled");
  uint64_t v14 = (const std::string *)sub_1000F76B8(v4, &v19);
  std::string::basic_string(&__p, v14);
  (*(void (**)(uint64_t, std::string *))(*(void *)v13 + 400LL))(v13, &__p);
  if (v20 < 0) {
    operator delete((void *)v19.n128_u64[0]);
  }
  return a1;
}

void sub_1000F7FCC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
}

void *sub_1000F8048@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  return sub_1000F8098(*(void *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_1000F8050(uint64_t result)
{
  dword_1002D13E0 = result;
  return result;
}

uint64_t sub_1000F805C(uint64_t a1)
{
  BOOL v3 = (void **)a1;
  sub_10000EFEC(&v3);
  return a1;
}

void *sub_1000F8098@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  return sub_10000F8D8(v9);
}

void sub_1000F813C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_1000F8160@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  LOBYTE(v16) = 0;
  if (a4)
  {
    int v15 = 0;
    sub_100010148(*(void *)*a1, &v15, &v17);
  }

  else
  {
    int v15 = 2;
    sub_1000100DC(*(void *)*a1, &v15, &v17);
  }

  uint64_t v8 = v17;
  uint64_t v9 = v18;
  *(_DWORD *)(v17 + 64) = v15;
  *(void *)(v8 + 68) = v16;
  uint64_t v14 = v9;
  if (v9)
  {
    uint64_t v10 = v9 + 3;
    do
      unsigned int v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    *a5 = v8;
    a5[1] = (uint64_t)v9;
    do
      unsigned int v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }

  else
  {
    *a5 = v8;
    a5[1] = 0LL;
  }

  sub_10000EF74(&v14);
  return sub_10000F9EC((uint64_t *)&v18);
}

void sub_1000F8244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

uint64_t *sub_1000F825C@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = operator new(0x50uLL);
  sub_1000F838C((uint64_t)v7, a3, a1 + 3);
  return sub_1000F8820(a4, (uint64_t)v7);
}

void sub_1000F82AC(_Unwind_Exception *a1)
{
}

uint64_t *sub_1000F82C0(uint64_t *a1, void *a2)
{
  uint64_t v4 = a1[1];
  if (v4)
  {
    unsigned int v5 = atomic_load((unsigned int *)(v4 + 8));
    if (v5 == 1) {
      return sub_1000EAA30((uint64_t)a1, a2, 1, 2);
    }
  }

  uint64_t v7 = (uint64_t *)operator new(0x20uLL);
  sub_1000EB1A4(v7, *a1, *(void *)*a1);
  sub_1000EB15C((__int128 *)a1, (uint64_t)v7);
  uint64_t v8 = *(uint64_t **)(*(void *)*a1 + 8LL);
  return sub_1000EAA70((uint64_t)a1, a2, 1, &v8, 0);
}

void sub_1000F8378(_Unwind_Exception *a1)
{
}

uint64_t sub_1000F838C(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)a1 = off_1002B3080;
  uint64_t v6 = operator new(0x38uLL);
  sub_100011AD4(v6, (_DWORD **)a2);
  v6[3] = 0LL;
  sub_100007640((uint64_t)(v6 + 3), (uint64_t *)(a2 + 24));
  sub_1000F8574((uint64_t *)(a1 + 32), (uint64_t)v6);
  uint64_t v7 = a3[1];
  *(void *)(a1 + 48) = *a3;
  *(void *)(a1 + 56) = v7;
  if (v7)
  {
    uint64_t v8 = (unsigned int *)(v7 + 8);
    do
      unsigned int v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }

  *(_DWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 68) = 0;
  return a1;
}

void sub_1000F8438(_Unwind_Exception *a1, uint64_t a2, ...)
{
  *(void *)uint64_t v2 = off_1002ADE80;
  sub_10000EF74((unsigned int **)(v2 + 16));
  _Unwind_Resume(a1);
}

void sub_1000F8480(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000F86F8(a1);
  operator delete(v1);
}

uint64_t sub_1000F8494(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 24);
  sub_10000F788(&v5);
  sub_10000F8D8(v4);
  return v2;
}

void sub_1000F851C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1000F8540(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t sub_1000F8548(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t *sub_1000F8550@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v2 = (__int128 *)(a1 + 32);
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    unsigned int v5 = (unsigned int *)(v3 + 8);
    do
      unsigned int v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  return sub_100012390(v2);
}

uint64_t *sub_1000F8574(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0LL;
  sub_1000F85DC(&v5, a2);
  uint64_t v3 = a1[1];
  a1[1] = v5;
  uint64_t v5 = v3;
  sub_10000F9EC(&v5);
  return a1;
}

void sub_1000F85C8(_Unwind_Exception *a1)
{
}

void *sub_1000F85DC(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  uint64_t v4 = operator new(0x18uLL);
  v4[1] = 0x100000001LL;
  *uint64_t v4 = &off_1002B30D8;
  _OWORD v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1000F8628(void *a1)
{
}

void sub_1000F863C(_Unwind_Exception *a1)
{
}

void sub_1000F8650(uint64_t a1)
{
  if (a1)
  {
    sub_1000075F0((void *)(a1 + 24));
    uint64_t v2 = (void **)a1;
    sub_10000EFEC(&v2);
    operator delete((void *)a1);
  }

void sub_1000F869C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1000075F0((void *)(v1 + 24));
    uint64_t v2 = (void **)v1;
    sub_10000EFEC(&v2);
    operator delete((void *)v1);
  }

uint64_t sub_1000F86E0()
{
  return 0LL;
}

uint64_t sub_1000F86E8()
{
  return 0LL;
}

uint64_t sub_1000F86F0()
{
  return 0LL;
}

uint64_t sub_1000F86F8(uint64_t a1)
{
  *(void *)a1 = off_1002B3080;
  sub_10000F9EC((uint64_t *)(a1 + 56));
  sub_10000F9EC((uint64_t *)(a1 + 40));
  *(void *)a1 = off_1002ADE80;
  sub_10000EF74((unsigned int **)(a1 + 16));
  return a1;
}

uint64_t *sub_1000F8744(uint64_t *result, void *a2)
{
  uint64_t v2 = (_DWORD **)result[4];
  if (v2)
  {
    uint64_t v4 = result;
    for (uint64_t i = *v2; i != v2[1]; i += 6)
    {
      sub_100012108(i, (uint64_t)v7);
      if (sub_100011134((uint64_t)i, (uint64_t)&v6))
      {
        sub_100011120(v4, a2);
        return sub_1000122FC((uint64_t)v7);
      }

      uint64_t result = sub_1000122FC((uint64_t)v7);
      uint64_t v2 = (_DWORD **)v4[4];
    }
  }

  return result;
}

void sub_1000F8800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t *sub_1000F8820(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0LL;
  sub_1000F8888(&v5, a2);
  uint64_t v3 = a1[1];
  a1[1] = v5;
  uint64_t v5 = v3;
  sub_10000F9EC(&v5);
  return a1;
}

void sub_1000F8874(_Unwind_Exception *a1)
{
}

void *sub_1000F8888(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  uint64_t v4 = operator new(0x18uLL);
  v4[1] = 0x100000001LL;
  *uint64_t v4 = &off_1002B3138;
  _OWORD v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1000F88D4(void *a1)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  __cxa_rethrow();
}

void sub_1000F88F4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000F8910(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t sub_1000F8928()
{
  return 0LL;
}

uint64_t sub_1000F8930()
{
  return 0LL;
}

uint64_t sub_1000F8938()
{
  return 0LL;
}

void *sub_1000F8940(void *a1, uint64_t *a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[3] = 0LL;
  a1[2] = 0LL;
  sub_1000F89AC(a1 + 3, *a2);
  return a1;
}

void sub_1000F898C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_1000F89AC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (char *)off_1002B3188 + 1;
  if (!a2) {
    uint64_t v3 = 0LL;
  }
  v5[0] = (uint64_t)v3;
  v5[1] = a2;
  sub_10000805C(v5, a1);
  sub_1000075F0(v5);
  return a1;
}

void sub_1000F8A00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000F8A14(uint64_t result, _WORD *a2, int a3)
{
  uint64_t v4 = result;
  switch(a3)
  {
    case 0:
      *(void *)a2 = *(void *)result;
      break;
    case 1:
      *(void *)a2 = *(void *)result;
      *(void *)uint64_t result = 0LL;
      break;
    case 2:
      goto LABEL_7;
    case 3:
      uint64_t result = *(void *)(*(void *)a2 + 8LL) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x8000000100229AA9LL & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x8000000100229AA9LL & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(void *)a2 = v4;
      }

      else
      {
LABEL_7:
        *(void *)a2 = 0LL;
      }

      break;
    default:
      *(void *)a2 = &off_1002B31A8;
      a2[4] = 0;
      break;
  }

  return result;
}

uint64_t sub_1000F8AC4(uint64_t (**a1)(uint64_t), uint64_t a2)
{
  return (*a1)(a2);
}

uint64_t sub_1000F8AD0(uint64_t a1)
{
  __darwin_time_t v60 = 0x7FFFFFFFFFFFFFFFLL;
  int v59 = -1;
  xmmword_1002D1260 = 0u;
  *(_OWORD *)algn_1002D1270 = 0u;
  xmmword_1002D1280 = 0u;
  unk_1002D1290 = 0u;
  xmmword_1002D12A0 = 0u;
  unk_1002D12B0 = 0u;
  xmmword_1002D12C0 = 0u;
  unk_1002D12D0 = 0u;
  xmmword_1002D1360 = 0u;
  *(_OWORD *)algn_1002D1370 = 0u;
  xmmword_1002D1380 = 0u;
  unk_1002D1390 = 0u;
  xmmword_1002D13A0 = 0u;
  unk_1002D13B0 = 0u;
  xmmword_1002D13C0 = 0u;
  unk_1002D13D0 = 0u;
  xmmword_1002D1340 = 0u;
  unk_1002D1350 = 0u;
  xmmword_1002D1320 = 0u;
  unk_1002D1330 = 0u;
  xmmword_1002D1300 = 0u;
  unk_1002D1310 = 0u;
  xmmword_1002D12E0 = 0u;
  *(_OWORD *)algn_1002D12F0 = 0u;
  (*(void (**)(void))(**(void **)(a1 + 48) + 64LL))(*(void *)(a1 + 48));
  __darwin_time_t v45 = v60;
  sub_100142F08(&v60);
  __darwin_time_t v2 = v60;
  for (uint64_t i = *(void *)(a1 + 8); i != a1; uint64_t i = *(void *)(i + 8))
    (*(void (**)(void, __int128 *, __int128 *, __int128 *, int *, __darwin_time_t *))(**(void **)(i + 16)
                                                                                                 + 32LL))( *(void *)(i + 16),  &xmmword_1002D1260,  &xmmword_1002D1360,  &xmmword_1002D12E0,  &v59,  &v60);
  __darwin_time_t v4 = v60;
  int v5 = v59;
  signed int v6 = dword_1002C97C0;
  uint64_t result = __darwin_check_fd_set_overflow(dword_1002C97C0, &xmmword_1002D1260, 0);
  if ((_DWORD)result)
  {
    *((_DWORD *)&xmmword_1002D1260 + ((unint64_t)v6 >> 5)) |= 1 << v6;
  }

  int v8 = dword_1002C97C0 + 1;
  if (__OFADD__(dword_1002C97C0, 1)) {
LABEL_155:
  }
    __break(0x5500u);
  if (v59 > v8) {
    int v8 = v59;
  }
  int v59 = v8;
  if (v8 < 1024)
  {
    uint64_t v10 = v60;
    if (v60 < 0)
    {
      unsigned int v11 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v11)
      {
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }

      __darwin_time_t v60 = 0LL;
    }

    else if (v60)
    {
      *(_DWORD *)(a1 + 64) = 0;
      goto LABEL_85;
    }

    __int128 v73 = xmmword_100229AB8;
    unint64_t v74 = 0xBFF0000000000000LL;
    getloadavg((double *)&v73, 3);
    int v16 = *(_DWORD *)(a1 + 64);
    BOOL v17 = __OFADD__(v16, 1);
    int v18 = v16 + 1;
    if (v17) {
      goto LABEL_155;
    }
    *(_DWORD *)(a1 + 64) = v18;
    switch(v18)
    {
      case 1000:
        size_t v21 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v21)
        {
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FB53C();
        }

        char v28 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v28)
        {
          if (sub_10015A058(3) && os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 134218752;
            *(void *)__int16 v63 = v45;
            *(_WORD *)&v63[8] = 2048;
            __darwin_time_t v64 = v2;
            __int16 v65 = 2048;
            unint64_t v66 = v4;
            __int16 v67 = 2048;
            uint64_t v68 = 0LL;
            _os_log_error_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_ERROR,  "cms_timeout 1[%lld] 2[%lld] 3[%lld] 4[%lld]",  buf,  0x2Au);
          }
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FB53C();
        }

        *(_DWORD *)(a1 + 64) = 0;
        break;
      case 200:
        __darwin_time_t v22 = sub_10014314C();
        char v23 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v23)
        {
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FB53C();
        }

        uint64_t v29 = *(void *)(a1 + 48);
        sub_10000AC00(v56, "Stability");
        sub_10000AC00(v54, "Invalid State");
        sub_10000AC00(__p, "Main Loop is thrashing");
        (*(void (**)(uint64_t, void **, void **, void **, void, uint64_t))(*(void *)v29 + 72LL))( v29,  v56,  v54,  __p,  0LL,  1LL);
        if (v53 < 0) {
          operator delete(__p[0]);
        }
        if (v55 < 0) {
          operator delete(v54[0]);
        }
        if (v57 < 0) {
          operator delete(v56[0]);
        }
        char v30 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (!v30)
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            sub_1001FB53C();
          }
          break;
        }

        if (sub_10015A058(3) && os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 134219264;
          *(void *)__int16 v63 = v45;
          *(_WORD *)&v63[8] = 2048;
          __darwin_time_t v64 = v2;
          __int16 v65 = 2048;
          unint64_t v66 = v4;
          __int16 v67 = 2048;
          uint64_t v68 = 0LL;
          __int16 v69 = 2048;
          __darwin_time_t v70 = v22;
          __int16 v71 = 1024;
          int v72 = 1;
          int v25 = "cms_timeout 1[%lld] 2[%lld] 3[%lld] 4[%lld] thrashing_issue_hit_time[%lldms] main_loop_thrashing_issue_hit = %d";
          char v26 = v30;
          uint32_t v27 = 58;
          goto LABEL_76;
        }

        break;
      case 20:
        __n128 v19 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v19)
        {
          if (sub_10015A058(6) && os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
          {
            int v20 = *(unsigned __int8 *)(a1 + 60);
            *(_DWORD *)std::string buf = 134218752;
            *(void *)__int16 v63 = v73;
            *(_WORD *)&v63[8] = 2048;
            __darwin_time_t v64 = *((void *)&v73 + 1);
            __int16 v65 = 2048;
            unint64_t v66 = v74;
            __int16 v67 = 1024;
            LODWORD(v68) = v20;
            _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "BUG: Main loop is thrashing! (%f %f %f) mInterfaceAdded(%d)",  buf,  0x26u);
          }
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FB53C();
        }

        char v24 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (!v24)
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            sub_1001FB53C();
          }
          break;
        }

        if (sub_10015A058(3) && os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 134218752;
          *(void *)__int16 v63 = v45;
          *(_WORD *)&v63[8] = 2048;
          __darwin_time_t v64 = v2;
          __int16 v65 = 2048;
          unint64_t v66 = v4;
          __int16 v67 = 2048;
          uint64_t v68 = 0LL;
          int v25 = "cms_timeout 1[%lld] 2[%lld] 3[%lld] 4[%lld]";
          char v26 = v24;
          uint32_t v27 = 42;
LABEL_76:
          _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, v25, buf, v27);
        }

        break;
    }

    if (*(int *)(a1 + 64) <= 200)
    {
      uint64_t v10 = v60;
    }

    else
    {
      uint64_t v10 = 10LL;
      __darwin_time_t v60 = 10LL;
    }

LABEL_85:
    unint64_t v31 = v10;
    if (v10 > 3600000)
    {
      unint64_t v32 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v32)
      {
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }

      uint64_t v33 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v33)
      {
        if (sub_10015A058(3) && os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 67109632;
          *(_DWORD *)__int16 v63 = v59;
          *(_WORD *)&v63[4] = 1024;
          *(_DWORD *)&v63[6] = -1;
          LOWORD(v64) = 1024;
          *(_DWORD *)((char *)&v64 + 2) = v5;
          _os_log_error_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_ERROR,  "maxfd[%d] maxfd1[%d] maxfd2[%d] ",  buf,  0x14u);
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }

      unsigned __int16 v34 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v34)
      {
        if (sub_10015A058(3) && os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 134218752;
          *(void *)__int16 v63 = v45;
          *(_WORD *)&v63[8] = 2048;
          __darwin_time_t v64 = v2;
          __int16 v65 = 2048;
          unint64_t v66 = v4;
          __int16 v67 = 2048;
          uint64_t v68 = v10;
          _os_log_error_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_ERROR,  "cms_timeout 1[%lld] 2[%lld] 3[%lld] 4[%lld]",  buf,  0x2Au);
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }

      sub_1000F9C9C(a1);
      if (v35)
      {
        uint64_t v36 = *(void *)(a1 + 48);
        sub_10000AC00(v50, "Stability");
        sub_10000AC00(v48, "Invalid State");
        sub_10000AC00(v46, "cmstimeout value too high");
        (*(void (**)(uint64_t, void **, void **, void **, void, uint64_t))(*(void *)v36 + 72LL))( v36,  v50,  v48,  v46,  0LL,  1LL);
        if (v47 < 0) {
          operator delete(v46[0]);
        }
        if (v49 < 0) {
          operator delete(v48[0]);
        }
        if (v51 < 0) {
          operator delete(v50[0]);
        }
      }

      __darwin_time_t v60 = 3600000LL;
      unint64_t v31 = 3600000LL;
    }

    v58.tv_sec = v31 / 0x3E8;
    v58.__darwin_suseconds_t tv_usec = 1000 * (v31 % 0x3E8);
    if (!__OFADD__(v59, 1))
    {
      int v37 = select( v59 + 1,  (fd_set *)&xmmword_1002D1260,  (fd_set *)&xmmword_1002D1360,  (fd_set *)&xmmword_1002D12E0,  &v58);
      int v12 = v37;
      if (v37 < 1)
      {
        if ((v37 & 0x80000000) == 0)
        {
          int v12 = 0;
          return v12 > 0 || v60 == 0;
        }

        int v39 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v39)
        {
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FB53C();
        }

        uint64_t v40 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v40)
        {
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FB53C();
        }

        __int16 v41 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v41)
        {
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FB53C();
        }

        uint64_t v42 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v42)
        {
          if (sub_10015A058(3) && os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 67109632;
            *(_DWORD *)__int16 v63 = v59;
            *(_WORD *)&v63[4] = 1024;
            *(_DWORD *)&v63[6] = -1;
            LOWORD(v64) = 1024;
            *(_DWORD *)((char *)&v64 + 2) = v5;
            _os_log_error_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_ERROR,  "maxfd[%d] maxfd1[%d] maxfd2[%d] ",  buf,  0x14u);
          }
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FB53C();
        }

        uint64_t v43 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v43)
        {
          if (sub_10015A058(3) && os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
          {
            int v44 = *(unsigned __int8 *)(a1 + 60);
            *(_DWORD *)std::string buf = 134219008;
            *(void *)__int16 v63 = v45;
            *(_WORD *)&v63[8] = 2048;
            __darwin_time_t v64 = v2;
            __int16 v65 = 2048;
            unint64_t v66 = v4;
            __int16 v67 = 2048;
            uint64_t v68 = v10;
            __int16 v69 = 1024;
            LODWORD(v70) = v44;
            _os_log_error_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_ERROR,  "cms_timeout 1[%lld] 2[%lld] 3[%lld] 4[%lld] mInterfaceAdded (%d)",  buf,  0x30u);
          }
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FB53C();
        }

        if (*__error() == 4) {
          return v12 > 0 || v60 == 0;
        }
        uint64_t v13 = (_DWORD *)&unk_1002D1000;
        int v14 = 9;
        goto LABEL_25;
      }

      signed int v38 = dword_1002C97C0;
      uint64_t result = __darwin_check_fd_set_overflow(dword_1002C97C0, &xmmword_1002D1260, 0);
      if (!(_DWORD)result) {
        return v12 > 0 || v60 == 0;
      }
      if (v38 <= 0x41F && (unint64_t)v38 >> 5 != 32)
      {
        return v12 > 0 || v60 == 0;
      }

  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_txErrorBusyChannelCcaNotStarted));
  [v3 setObject:v33 forKey:@"tx_error_busy_channel_cca_not_started"];

  int v8 = self->_has;
  if ((*(void *)&v8 & 0x40000000000LL) == 0)
  {
LABEL_28:
    if ((*(void *)&v8 & 0x80000000000LL) == 0) {
      goto LABEL_29;
    }
    goto LABEL_87;
  }

  PBDataWriterWriteUint32Field(v7, self->_txErrorBusyChannelCcaNotStarted, 24LL);
  signed int v6 = self->_has;
  if ((*(void *)&v6 & 0x40000000000LL) == 0)
  {
LABEL_28:
    if ((*(void *)&v6 & 0x80000000000LL) == 0) {
      goto LABEL_29;
    }
    goto LABEL_87;
  }

  v4[46] = self->_txErrorBusyChannelCcaNotStarted;
  *((void *)v4 + 31) |= 0x20000000000uLL;
  signed int v6 = self->_has;
  if ((*(void *)&v6 & 0x40000000000LL) == 0)
  {
LABEL_28:
    if ((*(void *)&v6 & 0x80000000000LL) == 0) {
      goto LABEL_29;
    }
    goto LABEL_87;
  }

  *((_DWORD *)v6 + 48) = self->_txErrorChannelAccessFailure;
  v6[31] |= 0x80000000000uLL;
  uint64_t v10 = self->_has;
  if ((*(void *)&v10 & 0x2000000000000LL) == 0)
  {
LABEL_28:
    if ((*(void *)&v10 & 0x10000000000000LL) == 0) {
      goto LABEL_29;
    }
    goto LABEL_87;
  }

  int v37 = 0LL;
  if ((*(void *)&v4 & 0x10000000000000LL) != 0)
  {
LABEL_33:
    uint64_t v36 = 2654435761LL * self->_txErrorTxAbortedCsmaCfgBackoff;
    if ((*(void *)&v4 & 0x8000000000000LL) != 0) {
      goto LABEL_34;
    }
    goto LABEL_87;
  }

  self->_transmittingTime = v5[40];
  *(void *)&self->_has |= 0x800000000uLL;
  unsigned int v9 = *((void *)v5 + 31);
  if ((v9 & 0x400000000LL) == 0)
  {
LABEL_32:
    if ((v9 & 0x1000000000000LL) == 0) {
      goto LABEL_33;
    }
    goto LABEL_87;
  }

LABEL_156:
      __break(1u);
      return result;
    }

    goto LABEL_155;
  }

  unsigned int v9 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v9)
  {
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  int v12 = 0;
  uint64_t v13 = &unk_1002D1000;
  int v14 = 4;
LABEL_25:
  v13[248] = v14;
  return v12 > 0 || v60 == 0;
}

void sub_1000F981C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *__p, uint64_t a29, int a30, __int16 a31, char a32, char a33, void *a34, uint64_t a35, int a36, __int16 a37, char a38, char a39, void *a40, uint64_t a41, int a42, __int16 a43, char a44, char a45)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000F98B4(uint64_t a1)
{
  return sub_1000F98C0(*(void *)(a1 + 32), *(void *)(a1 + 40));
}

uint64_t sub_1000F98C0(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a1; uint64_t i = *(void *)(i + 8))
    (*(void (**)(void))(**(void **)(i + 16) + 24LL))(*(void *)(i + 16));
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 56LL))(*(void *)(a1 + 48));
  if (!*(_BYTE *)(a1 + 60))
  {
    uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 24LL))(*(void *)(a1 + 48));
    sub_10000AC00(&__p, "NCP:State");
    sub_1000FC7CC(v6, (uint64_t)&__p, &v25);
    if (v25) {
      uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v25 + 16LL))(v25);
    }
    else {
    int v8 = operator new(0x20uLL);
    }
    *int v8 = &off_1002AE030;
    v8[1] = 0LL;
    _OWORD v8[2] = 0LL;
    uint64_t v8[3] = 0LL;
    {
      (*(void (**)(void *))(*v8 + 8LL))(v8);
LABEL_39:
      uint64_t result = v25;
      if (v25) {
        return (*(uint64_t (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
      }
      return result;
    }

    unsigned int v9 = (const std::string *)sub_10000F154((uint64_t)&v25);
    std::string::basic_string(&__p, v9);
    if ((char)__p.__r_.__value_.__s.__size_ < 0)
    {
      if (__p.__r_.__value_.__l.__size_ != 13) {
        goto LABEL_21;
      }
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }

    else
    {
      if (__p.__r_.__value_.__s.__size_ != 13) {
        goto LABEL_21;
      }
      p_p = &__p;
    }

    std::string::size_type v11 = p_p->__r_.__value_.__r.__words[0];
    uint64_t v12 = *(std::string::size_type *)((char *)p_p->__r_.__value_.__r.__words + 5);
    if (v11 == 0x616974696E696E75LL && v12 == 0x64657A696C616974LL)
    {
      BOOL v14 = 0;
      if (((char)__p.__r_.__value_.__s.__size_ & 0x80000000) == 0)
      {
LABEL_23:
        (*(void (**)(void *))(*v8 + 8LL))(v8);
        if (v14)
        {
          for (uint64_t j = *(void *)(a1 + 8); j != a1; uint64_t j = *(void *)(j + 8))
          {
            uint64_t v16 = *(void *)(j + 16);
            uint64_t v17 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 24LL))(*(void *)(a1 + 48));
            (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 40LL))(v16, v17);
          }

          *(_BYTE *)(a1 + 60) = 1;
          int v18 = (const std::string *)sub_10000F154((uint64_t)&v25);
          std::string::basic_string(&__p, v18);
          __n128 v19 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v19)
          {
            if (sub_10015A058(6) && os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
            {
              int v20 = &__p;
              if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                int v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              int v21 = *(unsigned __int8 *)(a1 + 60);
              *(_DWORD *)std::string buf = 136315394;
              uint32_t v27 = v20;
              __int16 v28 = 1024;
              int v29 = v21;
              _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "XPC server list add_interface done in ncp state(%s) mInterfaceAdded(%d)",  buf,  0x12u);
            }
          }

          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            sub_1001FB53C();
          }

          dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
          block[0] = _NSConcreteStackBlock;
          block[1] = 0x40000000LL;
          block[2] = sub_1000F9E1C;
          block[3] = &unk_1002B31E8;
          block[4] = a2;
          dispatch_async(global_queue, block);
        }

        goto LABEL_39;
      }

void sub_1000F9C24( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a21) {
    (*(void (**)(uint64_t))(*(void *)a21 + 8LL))(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000F9C9C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  __darwin_time_t v3 = v2 + 86400;
  if (__OFADD__(v2, 86400LL)) {
    goto LABEL_27;
  }
  int v5 = (_DWORD *)(a1 + 88);
  int v4 = *(_DWORD *)(a1 + 88);
  __darwin_time_t tv_sec = v20.tv_sec;
  if (v4) {
    BOOL v7 = v20.tv_sec < v3;
  }
  else {
    BOOL v7 = 0;
  }
  int v8 = !v7;
  if (v8 == 1)
  {
    *(void *)(a1 + 72) = v20.tv_sec;
    *int v5 = 1;
    unsigned int v9 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v9)
    {
      uint64_t v10 = v9;
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }
  }

  else
  {
    BOOL v12 = __CFADD__(v4, 1);
    int v13 = v4 + 1;
    if (v12)
    {
LABEL_27:
      __break(0x5500u);
      return;
    }

    *int v5 = v13;
  }

  uint64_t v14 = *(void *)(a1 + 80);
  BOOL v15 = __OFADD__(v14, 1800LL);
  __darwin_time_t v16 = v14 + 1800;
  if (v15) {
    goto LABEL_27;
  }
  if (tv_sec >= v16)
  {
    uint64_t v17 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v17)
    {
      int v18 = v17;
      if (sub_10015A058(3))
      {
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
          sub_10020F578((int *)(a1 + 88), (uint64_t *)(a1 + 72), v18);
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    *(void *)(a1 + 80) = tv_sec;
  }

uint64_t sub_1000F9E1C(uint64_t a1)
{
  return sub_1000F41D8(*(void **)(a1 + 32));
}

uint64_t *sub_1000F9E24(uint64_t *a1)
{
  uint64_t v2 = a1[6];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  sub_100016450((uint64_t)(a1 + 3));
  sub_1000F9E68(a1);
  return a1;
}

void sub_1000F9E68(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    uint64_t v2 = (uint64_t *)a1[1];
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v3 + 8) = v4;
    a1[2] = 0LL;
    while (v2 != a1)
    {
      int v5 = (uint64_t *)v2[1];
      sub_100010A14((uint64_t)a1, v2);
      uint64_t v2 = v5;
    }
  }

void *sub_1000F9EC8(uint64_t **a1, const void **a2, uint64_t a3, __n128 **a4)
{
  BOOL v7 = sub_10000AE50((uint64_t)a1, &v12, a2);
  int v8 = (void *)*v7;
  if (!*v7)
  {
    unsigned int v9 = (void **)v7;
    sub_1000F9F70((uint64_t)a1, a3, a4, (uint64_t)v11);
    sub_10000AF70(a1, v12, v9, (void *)v11[0]);
    int v8 = v11[0];
    v11[0] = 0LL;
    sub_100016868(v11, 0LL);
  }

  return v8;
}

void sub_1000F9F70(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  int v8 = (__n128 *)operator new(0x50uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  sub_1000F9FF4(v7, v8 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1000F9FDC(_Unwind_Exception *a1)
{
}

__n128 sub_1000F9FF4(uint64_t a1, __n128 *a2, uint64_t a3, __n128 **a4)
{
  uint64_t v4 = *a4;
  __n128 result = **a4;
  a2[1].n128_u64[0] = (*a4)[1].n128_u64[0];
  *a2 = result;
  v4->n128_u64[1] = 0LL;
  v4[1].n128_u64[0] = 0LL;
  v4->n128_u64[0] = 0LL;
  a2[1].n128_u64[1] = 0LL;
  a2[2].n128_u64[0] = 0LL;
  a2[2].n128_u64[1] = 0LL;
  return result;
}

void *sub_1000FA01C(void *a1, uint64_t *a2)
{
  uint64_t v4 = sub_10000C8F8(a1);
  sub_1000F76EC((uint64_t)v4, *a2, (uint64_t)(a2 + 1));
  return a1;
}

void sub_1000FA050(_Unwind_Exception *a1)
{
}

void sub_1000FA064(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 8);
  sub_100016478(a1, *(void **)(a1 + 8));
  *(void *)a1 = v2;
  *(void *)(a1 + 16) = 0LL;
  *uint64_t v2 = 0LL;
}

uint64_t *sub_1000FA098(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2) {
    sub_1000FA0D0(a1, *a2, (uint64_t)(a2 + 1));
  }
  return a1;
}

uint64_t *sub_1000FA0D0(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t **)result;
  uint64_t v8 = a2;
  if (!result[2]) {
    goto LABEL_11;
  }
  sub_100076F44(&v5, result);
  while (v7 && v8 != a3)
  {
    sub_1000FA19C((std::string *)(v7 + 4), (const std::string *)(v8 + 32));
    sub_1000FA1D4(v4, (uint64_t)v7);
    uint64_t v7 = v6;
    if (v6) {
      uint64_t v6 = sub_100076FF4((uint64_t)v6);
    }
    sub_10000B338((uint64_t)&v8);
  }

  for (__n128 result = (uint64_t *)sub_1000FA2D0((uint64_t)&v5); ; __n128 result = (uint64_t *)sub_10000B338((uint64_t)&v8))
  {
    a2 = v8;
LABEL_11:
    if (a2 == a3) {
      break;
    }
    sub_1000FA320(v4, (const std::string *)(a2 + 32));
  }

  return result;
}

std::string *sub_1000FA19C(std::string *a1, const std::string *a2)
{
  v4[0] = a1;
  v4[1] = a1 + 1;
  sub_1000FA220(v4, a2);
  return a1;
}

uint64_t sub_1000FA1D4(uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = sub_1000FA258((uint64_t)a1, &v6, (const void **)(a2 + 32));
  sub_10000AF70(a1, v6, (void **)v4, (void *)a2);
  return a2;
}

std::string **sub_1000FA220(std::string **a1, const std::string *a2)
{
  std::string::operator=(*a1, a2);
  std::string::operator=(a1[1], a2 + 1);
  return a1;
}

void *sub_1000FA258(uint64_t a1, void *a2, const void **a3)
{
  int v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        int v5 = (void *)v4;
        uint64_t v4 = *v5;
        __n128 result = v5;
        if (!*v5) {
          goto LABEL_9;
        }
      }

      uint64_t v4 = v5[1];
    }

    while (v4);
    __n128 result = v5 + 1;
  }

  else
  {
    __n128 result = (void *)(a1 + 8);
  }

uint64_t sub_1000FA2D0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    while (1)
    {
      uint64_t v3 = (void *)v2[2];
      if (!v3) {
        break;
      }
      *(void *)(a1 + 8) = v3;
      uint64_t v2 = v3;
    }

    sub_100016478(*(void *)a1, v2);
  }

  return a1;
}

void *sub_1000FA320(uint64_t **a1, const std::string *a2)
{
  uint64_t v3 = sub_1000FA258((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  sub_10000AF70(a1, v6, (void **)v3, (void *)v7[0]);
  uint64_t v4 = v7[0];
  v7[0] = 0LL;
  sub_100016868(v7, 0LL);
  return v4;
}

void sub_1000FA388(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_1000FA3A0(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0LL;
  sub_1000FA408(&v5, a2);
  uint64_t v3 = a1[1];
  a1[1] = v5;
  uint64_t v5 = v3;
  sub_10000F9EC(&v5);
  return a1;
}

void sub_1000FA3F4(_Unwind_Exception *a1)
{
}

void *sub_1000FA408(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  uint64_t v4 = operator new(0x18uLL);
  v4[1] = 0x100000001LL;
  *uint64_t v4 = &off_1002B3218;
  _OWORD v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1000FA454(void *a1)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  __cxa_rethrow();
}

void sub_1000FA474(_Unwind_Exception *a1)
{
}

uint64_t sub_1000FA490(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t sub_1000FA4A8()
{
  return 0LL;
}

uint64_t sub_1000FA4B0()
{
  return 0LL;
}

uint64_t sub_1000FA4B8()
{
  return 0LL;
}

uint64_t *sub_1000FA4C0(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0LL;
  sub_1000FA528(&v5, a2);
  uint64_t v3 = a1[1];
  a1[1] = v5;
  uint64_t v5 = v3;
  sub_10000F9EC(&v5);
  return a1;
}

void sub_1000FA514(_Unwind_Exception *a1)
{
}

void *sub_1000FA528(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  uint64_t v4 = operator new(0x18uLL);
  v4[1] = 0x100000001LL;
  *uint64_t v4 = &off_1002B3278;
  _OWORD v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1000FA574(void *a1)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  __cxa_rethrow();
}

void sub_1000FA594(_Unwind_Exception *a1)
{
}

uint64_t sub_1000FA5B0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t sub_1000FA5C8()
{
  return 0LL;
}

uint64_t sub_1000FA5D0()
{
  return 0LL;
}

uint64_t sub_1000FA5D8()
{
  return 0LL;
}

  ;
}

  ;
}

void sub_1000FA624(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

const char *sub_1000FA638(const std::exception *this)
{
  return std::exception::what(this);
}

uint64_t sub_1000FA640(uint64_t result, uint64_t a2, float a3)
{
  *(float *)a2 = a3;
  *(void *)(a2 + 4) = result;
  return result;
}

void sub_1000FA64C(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_1000FA908(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
       && !*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
  {
    char v4 = 0;
    unsigned int v5 = 0;
    uint64_t v6 = 0LL;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1)
      {
LABEL_57:
        __break(0x5500u);
        return;
      }

      if (v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v11 = 0LL;
        uint64_t v12 = OBJC_IVAR___PBDataReader__error;
        goto LABEL_14;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    uint64_t v12 = OBJC_IVAR___PBDataReader__error;
    unint64_t v11 = *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) ? 0LL : v6;
LABEL_14:
    int v13 = v11 & 7;
    if (*(_BYTE *)(a2 + v12) || v13 == 4) {
      break;
    }
    if ((v11 >> 3) == 2)
    {
      __darwin_time_t v22 = objc_alloc_init(&OBJC_CLASS___AWDCountersJoinerS);
      objc_storeStrong((id *)(a1 + 32), v22);
      if (PBReaderPlaceMark(a2, v30) && (sub_1000FB730((uint64_t)v22, a2) & 1) != 0)
      {
        PBReaderRecallMark(a2, v30);

        continue;
      }

      return;
    }

    if ((v11 >> 3) != 1)
    {
      if ((PBReaderSkipValueWithTag(a2) & 1) != 0) {
        continue;
      }
      return;
    }

    if (v13 != 2)
    {
      char v23 = 0;
      unsigned int v24 = 0;
      uint64_t v25 = 0LL;
      while (1)
      {
        uint64_t v26 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v27 = v26 + 1;
        if (v26 == -1) {
          goto LABEL_57;
        }
        if (v27 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v28 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27;
        v25 |= (unint64_t)(v28 & 0x7F) << v23;
        if ((v28 & 0x80) == 0) {
          goto LABEL_50;
        }
        v23 += 7;
        BOOL v10 = v24++ >= 9;
        if (v10)
        {
          uint64_t v29 = 0LL;
          goto LABEL_53;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_50:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v29 = 0LL;
      }
      else {
        uint64_t v29 = v25;
      }
LABEL_53:
      PBRepeatedUInt32Add(a1 + 8, v29);
      continue;
    }

    while (2)
    {
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
        && !*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      {
        char v15 = 0;
        unsigned int v16 = 0;
        uint64_t v17 = 0LL;
        while (1)
        {
          uint64_t v18 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v19 = v18 + 1;
          if (v18 == -1) {
            goto LABEL_57;
          }
          if (v19 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v20 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19;
          v17 |= (unint64_t)(v20 & 0x7F) << v15;
          if ((v20 & 0x80) == 0) {
            goto LABEL_32;
          }
          v15 += 7;
          BOOL v10 = v16++ >= 9;
          if (v10)
          {
            uint64_t v21 = 0LL;
            goto LABEL_35;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_32:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v21 = 0LL;
        }
        else {
          uint64_t v21 = v17;
        }
LABEL_35:
        PBRepeatedUInt32Add(a1 + 8, v21);
        continue;
      }

      break;
    }

    PBReaderRecallMark(a2, v30);
  }

uint64_t sub_1000FB730(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  while (2)
  {
    int v4 = OBJC_IVAR___PBDataReader__error;
    if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
      || *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
    {
      return *(unsigned __int8 *)(a2 + v4) == 0;
    }

    char v5 = 0;
    unsigned int v6 = 0;
    uint64_t v7 = 0LL;
    while (1)
    {
      uint64_t v8 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v9 = v8 + 1;
      if (v8 == -1) {
        goto LABEL_139;
      }
      if (v9 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v10 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v8);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v9;
      v7 |= (unint64_t)(v10 & 0x7F) << v5;
      if ((v10 & 0x80) == 0) {
        goto LABEL_12;
      }
      v5 += 7;
      BOOL v11 = v6++ >= 9;
      if (v11)
      {
        unint64_t v12 = 0LL;
        int v4 = OBJC_IVAR___PBDataReader__error;
        uint64_t v13 = OBJC_IVAR___PBDataReader__error;
        goto LABEL_16;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
    uint64_t v13 = OBJC_IVAR___PBDataReader__error;
    unint64_t v12 = *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) ? 0LL : v7;
    int v4 = OBJC_IVAR___PBDataReader__error;
LABEL_16:
    int v14 = v12 & 7;
    if (*(_BYTE *)(a2 + v13) || v14 == 4) {
      return *(unsigned __int8 *)(a2 + v4) == 0;
    }
    switch((v12 >> 3))
    {
      case 1u:
        *(_BYTE *)(v3 + 112) |= 2u;
        unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v17 = v16 + 4;
        if (v16 >= 0xFFFFFFFFFFFFFFFCLL) {
          goto LABEL_139;
        }
        if (v17 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v18 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17;
        }

        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          int v18 = 0;
        }

        *(_DWORD *)(v3 + 108) = v18;
        continue;
      case 2u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0LL;
        *(_BYTE *)(v3 + 112) |= 1u;
        while (1)
        {
          uint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v23 = v22 + 1;
          if (v22 == -1) {
            goto LABEL_139;
          }
          if (v23 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v24 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0) {
            goto LABEL_134;
          }
          v19 += 7;
          BOOL v11 = v20++ >= 9;
          if (v11)
          {
            LODWORD(v21) = 0;
            goto LABEL_136;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_134:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v21) = 0;
        }
LABEL_136:
        *(_DWORD *)(v3 + 104) = v21;
        continue;
      case 3u:
        if (v14 != 2)
        {
          char v53 = 0;
          unsigned int v54 = 0;
          uint64_t v55 = 0LL;
          uint64_t result = v3 + 32;
          while (1)
          {
            uint64_t v56 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v57 = v56 + 1;
            if (v56 == -1) {
              goto LABEL_139;
            }
            if (v57 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              goto LABEL_128;
            }
            char v58 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v56);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v57;
            v55 |= (unint64_t)(v58 & 0x7F) << v53;
            if ((v58 & 0x80) == 0) {
              goto LABEL_129;
            }
            v53 += 7;
            BOOL v11 = v54++ >= 9;
            if (v11) {
              goto LABEL_127;
            }
          }
        }

        uint64_t result = PBReaderPlaceMark(a2, v75);
        if (!(_DWORD)result) {
          return result;
        }
        while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
             && !*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        {
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v27 = 0LL;
          while (1)
          {
            uint64_t v28 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v29 = v28 + 1;
            if (v28 == -1) {
              goto LABEL_139;
            }
            if (v29 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v30 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if ((v30 & 0x80) == 0) {
              goto LABEL_45;
            }
            v25 += 7;
            BOOL v11 = v26++ >= 9;
            if (v11)
            {
              uint64_t v31 = 0LL;
              goto LABEL_48;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_45:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v31 = 0LL;
          }
          else {
            uint64_t v31 = v27;
          }
LABEL_48:
          uint64_t result = PBRepeatedUInt32Add(v3 + 32, v31);
        }

        goto LABEL_97;
      case 4u:
        if (v14 != 2)
        {
          char v59 = 0;
          unsigned int v60 = 0;
          uint64_t v55 = 0LL;
          uint64_t result = v3 + 80;
          while (1)
          {
            uint64_t v61 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v62 = v61 + 1;
            if (v61 == -1) {
              goto LABEL_139;
            }
            if (v62 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              goto LABEL_128;
            }
            char v63 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v61);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v62;
            v55 |= (unint64_t)(v63 & 0x7F) << v59;
            if ((v63 & 0x80) == 0) {
              goto LABEL_129;
            }
            v59 += 7;
            BOOL v11 = v60++ >= 9;
            if (v11) {
              goto LABEL_127;
            }
          }
        }

        uint64_t result = PBReaderPlaceMark(a2, v75);
        if (!(_DWORD)result) {
          return result;
        }
        while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
             && !*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        {
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v34 = 0LL;
          while (1)
          {
            uint64_t v35 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v36 = v35 + 1;
            if (v35 == -1) {
              goto LABEL_139;
            }
            if (v36 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v37 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v35);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v36;
            v34 |= (unint64_t)(v37 & 0x7F) << v32;
            if ((v37 & 0x80) == 0) {
              goto LABEL_61;
            }
            v32 += 7;
            BOOL v11 = v33++ >= 9;
            if (v11)
            {
              uint64_t v38 = 0LL;
              goto LABEL_64;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_61:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v38 = 0LL;
          }
          else {
            uint64_t v38 = v34;
          }
LABEL_64:
          uint64_t result = PBRepeatedUInt32Add(v3 + 80, v38);
        }

        goto LABEL_97;
      case 5u:
        if (v14 == 2)
        {
          uint64_t result = PBReaderPlaceMark(a2, v75);
          if (!(_DWORD)result) {
            return result;
          }
          while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
               && !*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          {
            char v39 = 0;
            unsigned int v40 = 0;
            uint64_t v41 = 0LL;
            while (1)
            {
              uint64_t v42 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              unint64_t v43 = v42 + 1;
              if (v42 == -1) {
                goto LABEL_139;
              }
              if (v43 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                break;
              }
              char v44 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v42);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v43;
              v41 |= (unint64_t)(v44 & 0x7F) << v39;
              if ((v44 & 0x80) == 0) {
                goto LABEL_77;
              }
              v39 += 7;
              BOOL v11 = v40++ >= 9;
              if (v11)
              {
                uint64_t v45 = 0LL;
                goto LABEL_80;
              }
            }

            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_77:
            if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
              uint64_t v45 = 0LL;
            }
            else {
              uint64_t v45 = v41;
            }
LABEL_80:
            uint64_t result = PBRepeatedUInt32Add(v3 + 8, v45);
          }

LABEL_128:
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_129:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v74 = 0LL;
          }
          else {
            uint64_t v74 = v55;
          }
LABEL_132:
          uint64_t result = PBRepeatedUInt32Add(result, v74);
          continue;
        }

        uint64_t result = PBReaderPlaceMark(a2, v75);
        if (!(_DWORD)result) {
          return result;
        }
        while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
             && !*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        {
          char v46 = 0;
          unsigned int v47 = 0;
          uint64_t v48 = 0LL;
          while (1)
          {
            uint64_t v49 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v50 = v49 + 1;
            if (v49 == -1) {
              goto LABEL_139;
            }
            if (v50 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v51 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v49);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v50;
            v48 |= (unint64_t)(v51 & 0x7F) << v46;
            if ((v51 & 0x80) == 0) {
              goto LABEL_93;
            }
            v46 += 7;
            BOOL v11 = v47++ >= 9;
            if (v11)
            {
              uint64_t v52 = 0LL;
              goto LABEL_96;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_93:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v52 = 0LL;
          }
          else {
            uint64_t v52 = v48;
          }
LABEL_96:
          uint64_t result = PBRepeatedUInt32Add(v3 + 56, v52);
        }

        goto LABEL_97;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if ((result & 1) != 0) {
          continue;
        }
        return 0LL;
    }
  }

void *sub_1000FC6F0@<X0>(int a1@<W0>, void *a2@<X8>)
{
  else {
    uint64_t v2 = off_1002B34D8[a1 + 1];
  }
  return sub_10000AC00(a2, v2);
}

uint64_t *sub_1000FC720(uint64_t *a1)
{
  *a1 = (uint64_t)&off_1002B32D8;
  a1[16] = (uint64_t)off_1002AF6F8;
  sub_10000F9EC(a1 + 18);
  a1[13] = (uint64_t)off_1002AF628;
  sub_10000F9EC(a1 + 15);
  a1[10] = (uint64_t)off_1002AF498;
  sub_10000F9EC(a1 + 12);
  a1[7] = (uint64_t)off_1002AF3C8;
  sub_10000F9EC(a1 + 9);
  a1[4] = (uint64_t)off_1002AF2F8;
  sub_10000F9EC(a1 + 6);
  a1[1] = (uint64_t)off_1002AF118;
  sub_10000F9EC(a1 + 3);
  return a1;
}

void *sub_1000FC7CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0LL;
  char v9 = 0;
  unsigned int v6 = operator new(0x10uLL);
  *unsigned int v6 = a3;
  v6[1] = &v9;
  _OWORD v8[2] = 0LL;
  uint64_t v8[3] = v6;
  v8[0] = (char *)off_1002B3498 + 1;
  v8[1] = sub_1000FC88C;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 56LL))(a1, a2, v8);
  uint64_t result = sub_100006E7C(v8);
  if (!v9)
  {
    *unsigned int v6 = 0LL;
    v6[1] = 0LL;
  }

  return result;
}

void sub_1000FC864(_Unwind_Exception *a1, uint64_t a2, ...)
{
  if (*v2) {
    (*(void (**)(void))(*(void *)*v2 + 8LL))(*v2);
  }
  _Unwind_Resume(a1);
}

void sub_1000FC88C(uint64_t **__p, int a2, void *a3)
{
  int v4 = *__p;
  if (v4)
  {
    if (!a2) {
      sub_100018024(v4, a3);
    }
    *(_BYTE *)__p[1] = 1;
  }

  operator delete(__p);
}

void sub_1000FC8CC(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000FC944( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8LL))(a15);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000FC97C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v10 = 12;
  char v9 = 0;
  uint64_t v6 = operator new(0x10uLL);
  *uint64_t v6 = &v10;
  v6[1] = &v9;
  _OWORD v8[2] = 0LL;
  uint64_t v8[3] = v6;
  v8[0] = (char *)off_1002B34B8 + 1;
  v8[1] = sub_1000FCA38;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 64LL))(a1, a2, a3, v8);
  sub_1000075F0(v8);
  if (!v9)
  {
    *uint64_t v6 = 0LL;
    v6[1] = 0LL;
  }

  return v10;
}

void sub_1000FCA24(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1000FCA38(void *__p, int a2)
{
  if (*(void *)__p)
  {
    **(_DWORD **)std::string __p = a2;
    **((_BYTE **)__p + 1) = 1;
  }

  operator delete(__p);
}

std::string *sub_1000FCA54@<X0>(std::string *__str@<X0>, std::string *a2@<X8>)
{
  uint64_t result = std::string::basic_string(a2, __str);
  for (std::string::size_type i = 0LL; ; ++i)
  {
    std::string::size_type size = __str->__r_.__value_.__s.__size_;
    if ((size & 0x80u) != 0LL) {
      std::string::size_type size = __str->__r_.__value_.__l.__size_;
    }
    if (i >= size) {
      break;
    }
    if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    uint64_t result = (std::string *)__toupper(v7->__r_.__value_.__s.__data_[i]);
    if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    v8->__r_.__value_.__s.__data_[i] = (char)result;
  }

  return result;
}

void sub_1000FCADC(_Unwind_Exception *exception_object)
{
}

BOOL sub_1000FCAF8(std::string *__str)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_1002D1428);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1002D1428))
  {
    qword_1002D1420 = 0LL;
    qword_1002D1418 = 0LL;
    qword_1002D1410 = (uint64_t)&qword_1002D1418;
    __cxa_atexit((void (*)(void *))sub_1000A949C, &qword_1002D1410, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1002D1428);
  }

  if ((byte_1002D1430 & 1) == 0)
  {
    sub_10000AC00(&v57, "Prefix");
    sub_1000FCA54(&v57, &__p);
    uint64_t v3 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v3, "IPv6:MeshLocalPrefix");
    sub_10000AC00(&v57, "NCPSocketName");
    sub_1000FCA54(&v57, &__p);
    int v4 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v4, "Config:NCP:SocketPath");
    sub_10000AC00(&v57, "NCPSocketBaud");
    sub_1000FCA54(&v57, &__p);
    char v5 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v5, "Config:NCP:SocketBaud");
    sub_10000AC00(&v57, "NCPDriverName");
    sub_1000FCA54(&v57, &__p);
    uint64_t v6 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v6, "Config:NCP:DriverName");
    sub_10000AC00(&v57, "NCPHardResetPath");
    sub_1000FCA54(&v57, &__p);
    uint64_t v7 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v7, "Config:NCP:HardResetPath");
    sub_10000AC00(&v57, "NCPPowerPath");
    sub_1000FCA54(&v57, &__p);
    uint64_t v8 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v8, "Config:NCP:PowerPath");
    sub_10000AC00(&v57, "WPANInterfaceName");
    sub_1000FCA54(&v57, &__p);
    char v9 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v9, "Config:TUN:InterfaceName");
    sub_10000AC00(&v57, "PIDFile");
    sub_1000FCA54(&v57, &__p);
    unsigned int v10 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v10, "Config:Daemon:PIDFile");
    sub_10000AC00(&v57, "FirmwareCheckCommand");
    sub_1000FCA54(&v57, &__p);
    BOOL v11 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v11, "Config:NCP:FirmwareCheckCommand");
    sub_10000AC00(&v57, "FirmwareUpgradeCommand");
    sub_1000FCA54(&v57, &__p);
    unint64_t v12 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v12, "Config:NCP:FirmwareUpgradeCommand");
    sub_10000AC00(&v57, "TerminateOnFault");
    sub_1000FCA54(&v57, &__p);
    uint64_t v13 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v13, "Daemon:TerminateOnFault");
    sub_10000AC00(&v57, "PrivDropToUser");
    sub_1000FCA54(&v57, &__p);
    int v14 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v14, "Config:Daemon:PrivDropToUser");
    sub_10000AC00(&v57, "Chroot");
    sub_1000FCA54(&v57, &__p);
    char v15 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v15, "Config:Daemon:Chroot");
    sub_10000AC00(&v57, "NCPReliabilityLayer");
    sub_1000FCA54(&v57, &__p);
    unint64_t v16 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v16, "Config:NCP:ReliabilityLayer");
    sub_10000AC00(&v57, "NCPVersion");
    sub_1000FCA54(&v57, &__p);
    unint64_t v17 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v17, "NCP:Version");
    sub_10000AC00(&v57, "DriverVersion");
    sub_1000FCA54(&v57, &__p);
    int v18 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v18, "Daemon:Version");
    sub_10000AC00(&v57, "AssociationState");
    sub_1000FCA54(&v57, &__p);
    char v19 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v19, "NCP:State");
    sub_10000AC00(&v57, "Enabled");
    sub_1000FCA54(&v57, &__p);
    unsigned int v20 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v20, "Daemon:Enabled");
    sub_10000AC00(&v57, "AutoResume");
    sub_1000FCA54(&v57, &__p);
    uint64_t v21 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v21, "Daemon:AutoAssociateAfterReset");
    sub_10000AC00(&v57, "AutoUpdateFirmware");
    sub_1000FCA54(&v57, &__p);
    uint64_t v22 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v22, "Daemon:AutoFirmwareUpdate");
    sub_10000AC00(&v57, "HWAddr");
    sub_1000FCA54(&v57, &__p);
    unint64_t v23 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v23, "NCP:HardwareAddress");
    sub_10000AC00(&v57, "Channel");
    sub_1000FCA54(&v57, &__p);
    char v24 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v24, "NCP:Channel");
    sub_10000AC00(&v57, "TXPower");
    sub_1000FCA54(&v57, &__p);
    char v25 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v25, "NCP:TXPower");
    sub_10000AC00(&v57, "NCPTXPowerLimit");
    sub_1000FCA54(&v57, &__p);
    unsigned int v26 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v26, "NCP:TXPowerLimit");
    sub_10000AC00(&v57, "CCAThreshold");
    sub_1000FCA54(&v57, &__p);
    uint64_t v27 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v27, "NCP:CCAThreshold");
    sub_10000AC00(&v57, "DefaultChannelMask");
    sub_1000FCA54(&v57, &__p);
    uint64_t v28 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v28, "NCP:ChannelMask");
    sub_10000AC00(&v57, "NetworkName");
    sub_1000FCA54(&v57, &__p);
    unint64_t v29 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v29, "Network:Name");
    sub_10000AC00(&v57, "XPANID");
    sub_1000FCA54(&v57, &__p);
    char v30 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v30, "Network:XPANID");
    sub_10000AC00(&v57, "PANID");
    sub_1000FCA54(&v57, &__p);
    uint64_t v31 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v31, "Network:PANID");
    sub_10000AC00(&v57, "NodeType");
    sub_1000FCA54(&v57, &__p);
    char v32 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v32, "Network:NodeType");
    sub_10000AC00(&v57, "NetworkKey");
    sub_1000FCA54(&v57, &__p);
    unsigned int v33 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v33, "Network:Key");
    sub_10000AC00(&v57, "NetworkKeyIndex");
    sub_1000FCA54(&v57, &__p);
    uint64_t v34 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v34, "Network:KeyIndex");
    sub_10000AC00(&v57, "MeshLocalPrefix");
    sub_1000FCA54(&v57, &__p);
    uint64_t v35 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v35, "IPv6:MeshLocalPrefix");
    sub_10000AC00(&v57, "AllowingJoin");
    sub_1000FCA54(&v57, &__p);
    unint64_t v36 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v36, "com.nestlabs.internal:Network:AllowingJoin");
    sub_10000AC00(&v57, "IsAssociated");
    sub_1000FCA54(&v57, &__p);
    char v37 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v37, "Network:IsCommissioned");
    sub_10000AC00(&v57, "IsOKToSleep");
    sub_1000FCA54(&v57, &__p);
    uint64_t v38 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v38, "Daemon:ReadyForHostSleep");
    sub_10000AC00(&v57, "UseDeepSleepOnLowPower");
    sub_1000FCA54(&v57, &__p);
    char v39 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v39, "com.nestlabs.internal:Hack:UseDeepSleepOnLowPower");
    sub_10000AC00(&v57, "AlwaysResetToWake");
    sub_1000FCA54(&v57, &__p);
    unsigned int v40 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v40, "com.nestlabs.internal:Hack:AlwaysResetToWake");
    sub_10000AC00(&v57, "AutoDeepSleep");
    sub_1000FCA54(&v57, &__p);
    uint64_t v41 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v41, "Daemon:AutoDeepSleep");
    sub_10000AC00(&v57, "SleepPollInterval");
    sub_1000FCA54(&v57, &__p);
    uint64_t v42 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v42, "NCP:SleepyPollInterval");
    sub_10000AC00(&v57, "SyslogMask");
    sub_1000FCA54(&v57, &__p);
    unint64_t v43 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v43, "Daemon:SyslogMask");
    sub_10000AC00(&v57, "PassthruPort");
    sub_1000FCA54(&v57, &__p);
    char v44 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v44, "com.nestlabs.internal:Network:PassthruPort");
    sub_10000AC00(&v57, "TransmitHookActive");
    sub_1000FCA54(&v57, &__p);
    uint64_t v45 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v45, "com.nestlabs.internal:NCP:TransmitHookActive");
    sub_10000AC00(&v57, "LegacyPrefix");
    sub_1000FCA54(&v57, &__p);
    char v46 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v46, "com.nestlabs.internal:Legacy:MeshLocalPrefix");
    sub_10000AC00(&v57, "NetWakeData");
    sub_1000FCA54(&v57, &__p);
    unsigned int v47 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v47, "com.nestlabs.internal:NetworkWake:Data");
    sub_10000AC00(&v57, "NetWakeRemaining");
    sub_1000FCA54(&v57, &__p);
    uint64_t v48 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v48, "com.nestlabs.internal:NetworkWake:Remaining");
    sub_10000AC00(&v57, "ActiveWakeupBlacklist");
    sub_1000FCA54(&v57, &__p);
    uint64_t v49 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v49, "com.nestlabs.internal:NetworkWake:Blacklist");
    sub_10000AC00(&v57, "ActiveWakeupMask");
    sub_1000FCA54(&v57, &__p);
    unint64_t v50 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v50, "com.nestlabs.internal:NetworkWake:Blacklist");
    sub_10000AC00(&v57, "LegacyInterfaceEnabled");
    sub_1000FCA54(&v57, &__p);
    char v51 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v51, "com.nestlabs.internal:Legacy:Enabled");
    sub_10000AC00(&v57, "UseLegacyChannel");
    sub_1000FCA54(&v57, &__p);
    uint64_t v52 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v52, "com.nestlabs.internal:Legacy:PreferInterface");
    sub_10000AC00(&v57, "GlobalIPAddresses");
    sub_1000FCA54(&v57, &__p);
    char v53 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v53, "IPv6:AllAddresses");
    sub_10000AC00(&v57, "GlobalIPAddressList");
    sub_1000FCA54(&v57, &__p);
    unsigned int v54 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1410, (__n128 *)&__p);
    std::string::assign(v54, "Debug:IPv6:GlobalIPAddressList");
    byte_1002D1430 = 1;
  }

  sub_1000FCA54(__str, &__p);
  uint64_t v55 = (uint64_t *)sub_1000AA160((uint64_t)&qword_1002D1410, (const void **)&__p.__r_.__value_.__l.__data_);
  if (v55 != &qword_1002D1418) {
    std::string::operator=(__str, (const std::string *)(v55 + 7));
  }
  return v55 != &qword_1002D1418;
}

void sub_1000FDDC8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000FDFA8(std::string *__str)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_1002D1450);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1002D1450))
  {
    qword_1002D1448 = 0LL;
    qword_1002D1440 = 0LL;
    qword_1002D1438 = (uint64_t)&qword_1002D1440;
    __cxa_atexit((void (*)(void *))sub_1000A949C, &qword_1002D1438, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1002D1450);
  }

  if ((byte_1002D1458 & 1) == 0)
  {
    sub_10000AC00(&v5, "NCP:TXPower");
    sub_1000FCA54(&v5, &__p);
    uint64_t v3 = (std::string *)sub_1000F76B8((uint64_t **)&qword_1002D1438, (__n128 *)&__p);
    std::string::assign(v3, "NCP:TXPower");
    byte_1002D1458 = 1;
  }

  sub_1000FCA54(__str, &__p);
  uint64_t v4 = sub_1000AA160((uint64_t)&qword_1002D1438, (const void **)&__p.__r_.__value_.__l.__data_);
}

void sub_1000FE0E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000FE12C(int a1, int a2, std::string *a3)
{
  if (!a1)
  {
    uint64_t v5 = 0LL;
    if (!a2) {
      return v5;
    }
    goto LABEL_8;
  }

  uint64_t v5 = sub_100146808(5400LL, byte_1002C98D8);
  if ((_DWORD)v5)
  {
    std::string::append(a3, "ACTIVE DATASET\n");
    std::string::append(a3, "---------------\n");
    sub_1001454C8((uint64_t)byte_1002C98D8, a3);
    uint64_t v6 = "\n";
  }

  else
  {
    uint64_t v6 = "ACTIVE DATASET: Keychain entry does not exist\n";
  }

  std::string::append(a3, v6);
  if (a2)
  {
LABEL_8:
    if (sub_100146808(5401LL, byte_1002C98D8))
    {
      std::string::append(a3, "PENDING DATASET\n");
      std::string::append(a3, "---------------\n");
      sub_1001454C8((uint64_t)byte_1002C98D8, a3);
      return 1LL;
    }

    else
    {
      std::string::append(a3, "PENDING DATASET: Keychain entry does not exist\n");
    }
  }

  return v5;
}

uint64_t sub_1000FE22C(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }

      uint64_t result = *(void *)(*(void *)a2 + 8LL) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi4cmf2Iv17GetPropertyHelperiRKNS_3anyEEENS0_5list3INS"
                                        "0_5valueIPS4_EENS_3argILi1EEENSD_ILi2EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp( (const char *)result,  (const char *)((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi4cmf2Iv17GetPropertyHelperiRKNS_3any EEENS0_5list3INS0_5valueIPS4_EENS_3argILi1EEENSD_ILi2EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)),  !(_DWORD)result))
      {
        *(void *)a2 = v4;
      }

      else
      {
        *(void *)a2 = 0LL;
      }
    }
  }

  else
  {
    __int128 v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }

  return result;
}

uint64_t sub_1000FE2C8(uint64_t a1, int a2, uint64_t a3)
{
  int v4 = a2;
  return sub_1000FE2EC(a1, (uint64_t)&v4, a3);
}

uint64_t sub_1000FE2EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a2;
  v4[1] = a3;
  return sub_1000FE320((void *)(a1 + 16), a1, (uint64_t)v4);
}

uint64_t sub_1000FE320(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FE338(a2, a1, **(_DWORD **)a3, *(void *)(a3 + 8));
}

uint64_t sub_1000FE338(uint64_t a1, void *a2, unsigned int a3, uint64_t a4)
{
  unsigned int v5 = a3;
  return sub_1000FE364(a1, a2, 0LL, &v5, a4);
}

uint64_t sub_1000FE364(uint64_t a1, void *a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  uint64_t v6 = *(uint64_t (**)(void *, void, uint64_t))a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = (void *)(*a2 + (v7 >> 1));
  if ((v7 & 1) != 0) {
    uint64_t v6 = *(uint64_t (**)(void *, void, uint64_t))(*v8 + v6);
  }
  return v6(v8, *a4, a5);
}

uint64_t sub_1000FE388(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }

      uint64_t result = *(void *)(*(void *)a2 + 8LL) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi4cmf1Iv17SetPropertyHelperiEENS0_5list2INS0_5valueIP"
                                        "S4_EENS_3argILi1EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp( (const char *)result,  (const char *)((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi4cmf1Iv17SetPropertyHelperiEENS0_5li st2INS0_5valueIPS4_EENS_3argILi1EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)),  !(_DWORD)result))
      {
        *(void *)a2 = v4;
      }

      else
      {
        *(void *)a2 = 0LL;
      }
    }
  }

  else
  {
    __int128 v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }

  return result;
}

uint64_t sub_1000FE424(uint64_t a1, unsigned int a2)
{
  unsigned int v3 = a2;
  return sub_1000FE448(a1, &v3);
}

uint64_t sub_1000FE448(uint64_t a1, unsigned int *a2)
{
  unsigned int v3 = a2;
  return sub_1000FE47C((void *)(a1 + 16), a1, &v3);
}

uint64_t sub_1000FE47C(void *a1, uint64_t a2, unsigned int **a3)
{
  return sub_1000FE494(a2, a1, **a3);
}

uint64_t sub_1000FE494(uint64_t a1, void *a2, uint64_t a3)
{
  unsigned int v3 = *(uint64_t (**)(void *, uint64_t))a1;
  uint64_t v4 = *(void *)(a1 + 8);
  __int128 v5 = (void *)(*a2 + (v4 >> 1));
  if ((v4 & 1) != 0) {
    unsigned int v3 = *(uint64_t (**)(void *, uint64_t))(*v5 + v3);
  }
  return v3(v5, a3);
}

uint64_t sub_1000FEF48(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  while (2)
  {
    int v4 = OBJC_IVAR___PBDataReader__error;
    if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
      || *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
    {
      return *(unsigned __int8 *)(a2 + v4) == 0;
    }

    char v5 = 0;
    unsigned int v6 = 0;
    uint64_t v7 = 0LL;
    while (1)
    {
      uint64_t v8 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v9 = v8 + 1;
      if (v8 == -1) {
        goto LABEL_198;
      }
      if (v9 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v10 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v8);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v9;
      v7 |= (unint64_t)(v10 & 0x7F) << v5;
      if ((v10 & 0x80) == 0) {
        goto LABEL_12;
      }
      v5 += 7;
      BOOL v11 = v6++ >= 9;
      if (v11)
      {
        unint64_t v12 = 0LL;
        int v4 = OBJC_IVAR___PBDataReader__error;
        uint64_t v13 = OBJC_IVAR___PBDataReader__error;
        goto LABEL_16;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
    uint64_t v13 = OBJC_IVAR___PBDataReader__error;
    unint64_t v12 = *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) ? 0LL : v7;
    int v4 = OBJC_IVAR___PBDataReader__error;
LABEL_16:
    int v14 = v12 & 7;
    if (*(_BYTE *)(a2 + v13) || v14 == 4) {
      return *(unsigned __int8 *)(a2 + v4) == 0;
    }
    switch((v12 >> 3))
    {
      case 1u:
        char v16 = 0;
        unsigned int v17 = 0;
        uint64_t v18 = 0LL;
        *(_WORD *)(v3 + 100) |= 0x40u;
        while (1)
        {
          uint64_t v19 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v20 = v19 + 1;
          if (v19 == -1) {
            goto LABEL_198;
          }
          if (v20 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v21 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20;
          v18 |= (unint64_t)(v21 & 0x7F) << v16;
          if ((v21 & 0x80) == 0) {
            goto LABEL_148;
          }
          v16 += 7;
          BOOL v11 = v17++ >= 9;
          if (v11)
          {
            LODWORD(v18) = 0;
            goto LABEL_150;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_148:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v18) = 0;
        }
LABEL_150:
        *(_DWORD *)(v3 + 80) = v18;
        continue;
      case 2u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0LL;
        *(_WORD *)(v3 + 100) |= 0x20u;
        while (1)
        {
          uint64_t v25 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v26 = v25 + 1;
          if (v25 == -1) {
            goto LABEL_198;
          }
          if (v26 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v27 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26;
          v24 |= (unint64_t)(v27 & 0x7F) << v22;
          if ((v27 & 0x80) == 0) {
            goto LABEL_152;
          }
          v22 += 7;
          BOOL v11 = v23++ >= 9;
          if (v11)
          {
            LODWORD(v24) = 0;
            goto LABEL_154;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_152:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v24) = 0;
        }
LABEL_154:
        *(_DWORD *)(v3 + 76) = v24;
        continue;
      case 3u:
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0LL;
        *(_WORD *)(v3 + 100) |= 0x10u;
        while (1)
        {
          uint64_t v31 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v32 = v31 + 1;
          if (v31 == -1) {
            goto LABEL_198;
          }
          if (v32 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v33 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v31);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v32;
          v30 |= (unint64_t)(v33 & 0x7F) << v28;
          if ((v33 & 0x80) == 0) {
            goto LABEL_156;
          }
          v28 += 7;
          BOOL v11 = v29++ >= 9;
          if (v11)
          {
            LODWORD(v30) = 0;
            goto LABEL_158;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_156:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v30) = 0;
        }
LABEL_158:
        *(_DWORD *)(v3 + 72) = v30;
        continue;
      case 4u:
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0LL;
        *(_WORD *)(v3 + 100) |= 8u;
        while (1)
        {
          uint64_t v37 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v38 = v37 + 1;
          if (v37 == -1) {
            goto LABEL_198;
          }
          if (v38 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v39 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v37);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v38;
          v36 |= (unint64_t)(v39 & 0x7F) << v34;
          if ((v39 & 0x80) == 0) {
            goto LABEL_160;
          }
          v34 += 7;
          BOOL v11 = v35++ >= 9;
          if (v11)
          {
            LODWORD(v36) = 0;
            goto LABEL_162;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_160:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v36) = 0;
        }
LABEL_162:
        *(_DWORD *)(v3 + 68) = v36;
        continue;
      case 5u:
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v42 = 0LL;
        *(_WORD *)(v3 + 100) |= 4u;
        while (1)
        {
          uint64_t v43 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v44 = v43 + 1;
          if (v43 == -1) {
            goto LABEL_198;
          }
          if (v44 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v45 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v43);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v44;
          v42 |= (unint64_t)(v45 & 0x7F) << v40;
          if ((v45 & 0x80) == 0) {
            goto LABEL_164;
          }
          v40 += 7;
          BOOL v11 = v41++ >= 9;
          if (v11)
          {
            LODWORD(v42) = 0;
            goto LABEL_166;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_164:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v42) = 0;
        }
LABEL_166:
        *(_DWORD *)(v3 + 64) = v42;
        continue;
      case 6u:
        char v46 = 0;
        unsigned int v47 = 0;
        uint64_t v48 = 0LL;
        *(_WORD *)(v3 + 100) |= 2u;
        while (1)
        {
          uint64_t v49 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v50 = v49 + 1;
          if (v49 == -1) {
            goto LABEL_198;
          }
          if (v50 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v51 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v49);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v50;
          v48 |= (unint64_t)(v51 & 0x7F) << v46;
          if ((v51 & 0x80) == 0) {
            goto LABEL_168;
          }
          v46 += 7;
          BOOL v11 = v47++ >= 9;
          if (v11)
          {
            LODWORD(v48) = 0;
            goto LABEL_170;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_168:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v48) = 0;
        }
LABEL_170:
        *(_DWORD *)(v3 + 60) = v48;
        continue;
      case 7u:
        char v52 = 0;
        unsigned int v53 = 0;
        uint64_t v54 = 0LL;
        *(_WORD *)(v3 + 100) |= 1u;
        while (1)
        {
          uint64_t v55 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v56 = v55 + 1;
          if (v55 == -1) {
            goto LABEL_198;
          }
          if (v56 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v57 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v55);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v56;
          v54 |= (unint64_t)(v57 & 0x7F) << v52;
          if ((v57 & 0x80) == 0) {
            goto LABEL_172;
          }
          v52 += 7;
          BOOL v11 = v53++ >= 9;
          if (v11)
          {
            LODWORD(v54) = 0;
            goto LABEL_174;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_172:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v54) = 0;
        }
LABEL_174:
        *(_DWORD *)(v3 + 56) = v54;
        continue;
      case 8u:
        if (v14 == 2)
        {
          uint64_t result = PBReaderPlaceMark(a2, v108);
          if (!(_DWORD)result) {
            return result;
          }
          while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
               && !*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          {
            char v58 = 0;
            unsigned int v59 = 0;
            uint64_t v60 = 0LL;
            while (1)
            {
              uint64_t v61 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              unint64_t v62 = v61 + 1;
              if (v61 == -1) {
                goto LABEL_198;
              }
              if (v62 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                break;
              }
              char v63 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v61);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v62;
              v60 |= (unint64_t)(v63 & 0x7F) << v58;
              if ((v63 & 0x80) == 0) {
                goto LABEL_84;
              }
              v58 += 7;
              BOOL v11 = v59++ >= 9;
              if (v11)
              {
                uint64_t v64 = 0LL;
                goto LABEL_87;
              }
            }

            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_84:
            if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
              uint64_t v64 = 0LL;
            }
            else {
              uint64_t v64 = v60;
            }
LABEL_87:
            uint64_t result = PBRepeatedUInt32Add(v3 + 8, v64);
          }

LABEL_191:
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_192:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v107 = 0LL;
          }
          else {
            uint64_t v107 = v98;
          }
LABEL_195:
          uint64_t result = PBRepeatedUInt32Add(result, v107);
          continue;
        }

        uint64_t result = PBReaderPlaceMark(a2, v108);
        if (!(_DWORD)result) {
          return result;
        }
        while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
             && !*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        {
          char v65 = 0;
          unsigned int v66 = 0;
          uint64_t v67 = 0LL;
          while (1)
          {
            uint64_t v68 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v69 = v68 + 1;
            if (v68 == -1) {
              goto LABEL_198;
            }
            if (v69 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v70 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v68);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v69;
            v67 |= (unint64_t)(v70 & 0x7F) << v65;
            if ((v70 & 0x80) == 0) {
              goto LABEL_100;
            }
            v65 += 7;
            BOOL v11 = v66++ >= 9;
            if (v11)
            {
              uint64_t v71 = 0LL;
              goto LABEL_103;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_100:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v71 = 0LL;
          }
          else {
            uint64_t v71 = v67;
          }
LABEL_103:
          uint64_t result = PBRepeatedUInt32Add(v3 + 32, v71);
        }

        goto LABEL_132;
      case 0xAu:
        char v72 = 0;
        unsigned int v73 = 0;
        uint64_t v74 = 0LL;
        *(_WORD *)(v3 + 100) |= 0x400u;
        while (1)
        {
          uint64_t v75 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v76 = v75 + 1;
          if (v75 == -1) {
            goto LABEL_198;
          }
          if (v76 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v77 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v75);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v76;
          v74 |= (unint64_t)(v77 & 0x7F) << v72;
          if ((v77 & 0x80) == 0) {
            goto LABEL_176;
          }
          v72 += 7;
          BOOL v11 = v73++ >= 9;
          if (v11)
          {
            LODWORD(v74) = 0;
            goto LABEL_178;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_176:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v74) = 0;
        }
LABEL_178:
        *(_DWORD *)(v3 + 96) = v74;
        continue;
      case 0xBu:
        char v78 = 0;
        unsigned int v79 = 0;
        uint64_t v80 = 0LL;
        *(_WORD *)(v3 + 100) |= 0x100u;
        while (1)
        {
          uint64_t v81 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v82 = v81 + 1;
          if (v81 == -1) {
            goto LABEL_198;
          }
          if (v82 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v83 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v81);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v82;
          v80 |= (unint64_t)(v83 & 0x7F) << v78;
          if ((v83 & 0x80) == 0) {
            goto LABEL_180;
          }
          v78 += 7;
          BOOL v11 = v79++ >= 9;
          if (v11)
          {
            LODWORD(v80) = 0;
            goto LABEL_182;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_180:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v80) = 0;
        }
LABEL_182:
        *(_DWORD *)(v3 + 88) = v80;
        continue;
      case 0xCu:
        char v84 = 0;
        unsigned int v85 = 0;
        uint64_t v86 = 0LL;
        *(_WORD *)(v3 + 100) |= 0x200u;
        while (1)
        {
          uint64_t v87 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v88 = v87 + 1;
          if (v87 == -1) {
            goto LABEL_198;
          }
          if (v88 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v89 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v87);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v88;
          v86 |= (unint64_t)(v89 & 0x7F) << v84;
          if ((v89 & 0x80) == 0) {
            goto LABEL_184;
          }
          v84 += 7;
          BOOL v11 = v85++ >= 9;
          if (v11)
          {
            LODWORD(v86) = 0;
            goto LABEL_186;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_184:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v86) = 0;
        }
LABEL_186:
        *(_DWORD *)(v3 + 92) = v86;
        continue;
      case 0xDu:
        char v90 = 0;
        unsigned int v91 = 0;
        uint64_t v92 = 0LL;
        *(_WORD *)(v3 + 100) |= 0x80u;
        while (1)
        {
          uint64_t v93 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v94 = v93 + 1;
          if (v93 == -1) {
            goto LABEL_198;
          }
          if (v94 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v95 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v93);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v94;
          v92 |= (unint64_t)(v95 & 0x7F) << v90;
          if ((v95 & 0x80) == 0) {
            goto LABEL_188;
          }
          v90 += 7;
          BOOL v11 = v91++ >= 9;
          if (v11)
          {
            LODWORD(v92) = 0;
            goto LABEL_190;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_188:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v92) = 0;
        }
LABEL_190:
        *(_DWORD *)(v3 + 84) = v92;
        continue;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if ((result & 1) != 0) {
          continue;
        }
        return 0LL;
    }
  }

                char v70 = sub_1000BE984(4, uint64);
                goto LABEL_193;
              }

double sub_100100900(uint64_t a1)
{
  double result = NAN;
  *(void *)a1 = 0xFFFFFFFF00000000LL;
  *(_DWORD *)(a1 + 8) = -1;
  return result;
}

uint64_t sub_100100914(uint64_t a1)
{
  return a1;
}

uint64_t sub_100100944(uint64_t a1)
{
  uint64_t result = *(unsigned int *)(a1 + 4);
  if ((result & 0x80000000) == 0)
  {
    write(result, "X\n", 1uLL);
    uint64_t result = close(*(_DWORD *)(a1 + 4));
    *(_DWORD *)(a1 + 4) = -1;
  }

  return result;
}

uint64_t sub_100100988(uint64_t a1)
{
  uint64_t result = *(unsigned int *)(a1 + 8);
  if ((result & 0x80000000) == 0)
  {
    write(result, "X", 1uLL);
    uint64_t result = close(*(_DWORD *)(a1 + 8));
    *(_DWORD *)(a1 + 8) = -1;
  }

  return result;
}

uint64_t sub_1001009D0(uint64_t a1, _BYTE *a2)
{
  char v17 = 1;
  char v3 = a2[23];
  if (v3 >= 0) {
    uint64_t v4 = a2[23];
  }
  else {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v4)
  {
    int v5 = *(_DWORD *)(a1 + 4);
    if (v5 < 0) {
      goto LABEL_38;
    }
    size_t v6 = *((void *)a2 + 1);
    if (v3 >= 0)
    {
      size_t v7 = a2[23];
    }

    else
    {
      a2 = *(_BYTE **)a2;
      size_t v7 = v6;
    }

    if (write(v5, a2, v7) < 0)
    {
      BOOL v11 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v11)
      {
        unint64_t v12 = v11;
        goto LABEL_38;
      }

      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_35;
      }
    }

    else
    {
      if (write(*(_DWORD *)(a1 + 4), "\n", 1uLL) == 1)
      {
        if (read(*(_DWORD *)(a1 + 4), &v17, 1uLL) == 1)
        {
          if (!v17) {
            return 1LL;
          }
        }

        else
        {
          char v15 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v15)
          {
            char v16 = v15;
            if (sub_10015A058(4))
            {
              if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
                sub_10020F6E0();
              }
            }
          }

          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            sub_1001FB53C();
          }
        }

        goto LABEL_38;
      }

      uint64_t v13 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v13)
      {
        int v14 = v13;
        goto LABEL_38;
      }

      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
LABEL_35:
      }
        sub_1001FB53C();
    }
  }

  else
  {
    unint64_t v9 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v9)
    {
      char v10 = v9;
      goto LABEL_38;
    }

    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_35;
    }
  }

void sub_100100C10(_DWORD *a1)
{
  if (*a1 == 36)
  {
    uint64_t v1 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v1)
    {
      unsigned __int8 v2 = v1;
      if (sub_10015A058(4))
      {
        if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
          sub_10020F83C();
        }
      }

      return;
    }

    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      return;
    }
LABEL_22:
    sub_1001FB53C();
    return;
  }

  *a1 = 22;
  int v4 = a1[2];
  if (v4 < 0)
  {
    int v5 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (!v5)
    {
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        return;
      }
      goto LABEL_22;
    }

    size_t v6 = v5;
  }

  else
  {
    if (write(v4, "1", 1uLL) == 1)
    {
      *a1 = 36;
      return;
    }

    size_t v7 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (!v7)
    {
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        return;
      }
      goto LABEL_22;
    }

    uint64_t v8 = v7;
  }

uint64_t sub_100100D8C(uint64_t a1, uint64_t a2)
{
  int v23 = -1;
  int v4 = (int *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 8);
  if ((v3 & 0x80000000) == 0)
  {
    close(v3);
    *int v4 = -1;
  }

  uint64_t result = sub_100125250(v4);
  if ((result & 0x80000000) == 0)
  {
    if (!(_DWORD)result)
    {
      int v12 = dup(1);
      int v13 = dup(0);
      dup2(2, 1);
      close(0);
      if (v13 < 0) {
        int v14 = 0LL;
      }
      else {
        int v14 = fdopen(v13, "r");
      }
      if (v12 < 0) {
        char v15 = 0LL;
      }
      else {
        char v15 = fdopen(v12, "w");
      }
      pid_t v16 = fork();
      if (v16 < 0)
      {
        char v17 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v17)
        {
          char v21 = v17;
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FB53C();
        }

        char v22 = __error();
        _exit(*v22);
      }

      if (!v16)
      {
        setenv("SHELL", "/bin/sh", 0);
        while (1)
        {
          if (ferror(v14) || feof(v14)) {
            goto LABEL_49;
          }
          int v18 = fgetc(v14);
          if (v18 != 49) {
            break;
          }
          setsid();
          else {
            uint64_t v19 = *(const char **)a2;
          }
          int v20 = system(v19);
          fputc(BYTE1(v20), v15);
          fflush(v15);
        }

        if (v18 != 88)
        {
          fputc(1, v15);
          fflush(v15);
LABEL_49:
          _exit(1);
        }

        fputc(0, v15);
        fflush(v15);
      }

      _exit(0);
    }

    if (waitpid(result, &v23, 0) < 0)
    {
      uint64_t v8 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v8)
      {
        unint64_t v9 = v8;
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }
    }

    if (BYTE1(v23))
    {
      size_t v6 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v6)
      {
        size_t v7 = v6;
        if (sub_10015A058(3))
        {
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
            sub_10020FA1C((uint64_t)&v23);
          }
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }

      close(*v4);
      *int v4 = -1;
      int v11 = BYTE1(v23);
      uint64_t result = (uint64_t)__error();
      *(_DWORD *)uint64_t result = v11;
    }

    else
    {
      int v10 = fcntl(*v4, 3, 0LL);
      return fcntl(*v4, 4, v10 | 4u);
    }
  }

  return result;
}

void sub_100101098(uint64_t a1, const void **a2)
{
  int v33 = -1;
  int v4 = (int *)(a1 + 4);
  int v3 = *(_DWORD *)(a1 + 4);
  if ((v3 & 0x80000000) == 0)
  {
    close(v3);
    *int v4 = -1;
  }

  pid_t v5 = sub_100125250(v4);
  if ((v5 & 0x80000000) == 0)
  {
    if (!v5)
    {
      int v11 = dup(1);
      int v12 = dup(0);
      dup2(2, 1);
      if (v12 < 0)
      {
        int v13 = 0LL;
      }

      else
      {
        close(0);
        int v13 = fdopen(v12, "r");
      }

      if (v11 < 0) {
        int v14 = 0LL;
      }
      else {
        int v14 = fdopen(v11, "w");
      }
      pid_t v15 = fork();
      if (v15 < 0)
      {
        unint64_t v26 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v26)
        {
          char v27 = v26;
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FB53C();
        }

        char v28 = __error();
        _exit(*v28);
      }

      if (v15) {
        _exit(0);
      }
      setenv("SHELL", "/bin/sh", 0);
      while (!ferror(v13))
      {
        if (feof(v13)) {
          break;
        }
        size_t v32 = 0LL;
        memset(&v31, 0, sizeof(v31));
        pid_t v16 = fgetln(v13, &v32);
        char v17 = v16;
        if (v16 && v32)
        {
          if (*v16 == 88 && !v16[1]) {
            goto LABEL_69;
          }
          std::string::assign(&v31, " '");
          if (v32)
          {
            while (1)
            {
              int v18 = *v17;
              if (v18 <= 31 && *v17 - 9 >= 2 && *v17 != 13)
              {
                uint64_t v24 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
                uint64_t v25 = v24;
                if (v24)
                {
                }

                else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  sub_1001FB53C();
                }

                fputc(69, v14);
                fflush(v14);
                _exit(1);
              }

              if (v18 != 10 && v18 != 13)
              {
                if (v18 == 39) {
                  std::string::append(&v31, "'''");
                }
                else {
                  std::string::push_back(&v31, v18);
                }
              }

              size_t v21 = v32 - 1;
              if (!v32) {
                break;
              }
              --v32;
              ++v17;
              if (!v21) {
                goto LABEL_51;
              }
            }

            __break(0x5515u);
LABEL_69:
            fputc(0, v14);
            fflush(v14);
            _exit(0);
          }

void sub_10010150C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100101554(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) >= 0;
}

uint64_t sub_100101564(unsigned int *a1)
{
  return *a1;
}

uint64_t sub_10010156C(_DWORD *a1, char *a2, int a3, char *a4, int *a5)
{
  if (*a1 == 36)
  {
    unint64_t v6 = a1[2];
    if ((v6 & 0x80000000) == 0)
    {
      if (a2 && __darwin_check_fd_set_overflow(a1[2], a2, 0)) {
        *(_DWORD *)&a2[(v6 >> 3) & 0x1FFFFFFC] |= 1 << v6;
      }
      if (a4)
      {
        int v10 = a1[2];
        if (__darwin_check_fd_set_overflow(v10, a4, 0)) {
          *(_DWORD *)&a4[((unint64_t)v10 >> 3) & 0x1FFFFFFFFFFFFFFCLL] |= 1 << v10;
        }
      }

      if (a5)
      {
        int v11 = a1[2];
        if (*a5 > v11) {
          int v11 = *a5;
        }
        *a5 = v11;
      }
    }
  }

  return 0LL;
}

uint64_t sub_100101644(uint64_t result)
{
  if (*(_DWORD *)result == 36)
  {
    uint64_t v1 = (_DWORD *)result;
    uint64_t result = read(*(_DWORD *)(result + 8), &v3, 1uLL);
    if (result < 0)
    {
      uint64_t result = (uint64_t)__error();
      if (*(_DWORD *)result != 35)
      {
        uint64_t result = (uint64_t)__error();
        _DWORD *v1 = *(_DWORD *)result;
      }
    }

    else if (result == 1)
    {
      int v2 = v3;
      _DWORD *v1 = v3;
      if (!v2)
      {
        sub_100100944((uint64_t)v1);
        return sub_100100988((uint64_t)v1);
      }
    }
  }

  return result;
}

  ;
}

  ;
}

int *sub_1001016F8()
{
  return __error();
}

  ;
}

_DWORD *sub_100101718(_DWORD *result)
{
  *uint64_t result = -1;
  return result;
}

int *sub_100101724(int *a1)
{
  return a1;
}

uint64_t sub_10010174C(int *a1)
{
  uint64_t result = *a1;
  if ((result & 0x80000000) == 0)
  {
    write(result, "X", 1uLL);
    uint64_t result = close(*a1);
    *a1 = -1;
  }

  return result;
}

void sub_100101794(int *a1, int a2, unsigned int a3)
{
  if ((*a1 & 0x80000000) == 0)
  {
    if (sub_1000B5098(a3) || !sub_1000B5098(a2))
    {
      BOOL v6 = sub_1000B50E8(a3);
      if (a2 == 4 && v6)
      {
        sub_100101964(a1);
      }

      else
      {
        int v7 = sub_1000B50D0(a3);
        if (a2 == 4)
        {
          if (v7) {
            sub_100101A84(a1);
          }
        }
      }
    }

    else
    {
      sub_100101844(a1);
    }
  }

void sub_100101844(int *a1)
{
  int v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v2)
  {
    unsigned __int8 v3 = v2;
    if (sub_10015A058(5) && os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)BOOL v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "NetworkRetain - Saving network info...", v6, 2u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  if (write(*a1, "S", 1uLL) != 1)
  {
    int v4 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v4)
    {
      pid_t v5 = v4;
      if (sub_10015A058(4))
      {
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
          sub_10020FC78();
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }
  }

void sub_100101964(int *a1)
{
  int v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v2)
  {
    unsigned __int8 v3 = v2;
    if (sub_10015A058(5) && os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)BOOL v6 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "NetworkRetain - Recalling/restoring network info...",  v6,  2u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  if (write(*a1, "R", 1uLL) != 1)
  {
    int v4 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v4)
    {
      pid_t v5 = v4;
      if (sub_10015A058(4))
      {
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
          sub_10020FCEC();
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }
  }

void sub_100101A84(int *a1)
{
  int v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v2)
  {
    unsigned __int8 v3 = v2;
    if (sub_10015A058(5) && os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)BOOL v6 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "NetworkRetaine - Erasing network info...",  v6,  2u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  if (write(*a1, "E", 1uLL) != 1)
  {
    int v4 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v4)
    {
      pid_t v5 = v4;
      if (sub_10015A058(4))
      {
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
          sub_10020FD60();
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }
  }

void sub_100101BA4(int *a1, const void **a2)
{
  int v25 = -1;
  if ((*a1 & 0x80000000) == 0) {
    sub_10010174C(a1);
  }
  pid_t v4 = sub_100125250(a1);
  if ((v4 & 0x80000000) == 0)
  {
    if (v4)
    {
      if (waitpid(v4, &v25, 0) < 0)
      {
        BOOL v6 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v6)
        {
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FB53C();
        }
      }

      if (BYTE1(v25))
      {
        pid_t v5 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v5)
        {
          if (sub_10015A058(3))
          {
            if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
              sub_10020FE98((uint64_t)&v25);
            }
          }
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FB53C();
        }

        close(*a1);
        *a1 = -1;
        unsigned __int8 v7 = BYTE1(v25);
        *__error() = v7;
      }

      return;
    }

    int v8 = dup(1);
    int v9 = dup(0);
    dup2(2, 1);
    if (v9 < 0)
    {
      int v10 = 0LL;
    }

    else
    {
      close(0);
      int v10 = fdopen(v9, "r");
    }

    if ((v8 & 0x80000000) == 0)
    {
      int v11 = fdopen(v8, "w");
      if (ferror(v11))
      {
        int v14 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v14)
        {
          char v22 = v14;
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FB53C();
        }
      }
    }

    pid_t v12 = fork();
    if (v12 < 0)
    {
      int v13 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v13)
      {
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }

      unsigned __int8 v23 = __error();
      _exit(*v23);
    }

    if (v12) {
      _exit(0);
    }
    setenv("SHELL", "/bin/sh", 0);
    if (ferror(v10)) {
LABEL_63:
    }
      _exit(1);
    while (1)
    {
      if (feof(v10)) {
        goto LABEL_63;
      }
      memset(&v24, 0, sizeof(v24));
      int v15 = fgetc(v10);
      int v16 = v15;
      if ((v15 - 82) < 2 || v15 == 69)
      {
        std::string::assign(&v24, " ");
        std::string::push_back(&v24, v16);
        sub_100066088(a2, (const void **)&v24.__r_.__value_.__l.__data_, (uint64_t)__p);
        if (v29 >= 0) {
          size_t v21 = __p;
        }
        else {
          size_t v21 = *(const char **)__p;
        }
        system(v21);
        if (v29 < 0) {
          operator delete(*(void **)__p);
        }
        goto LABEL_49;
      }

      if (v15 == 88) {
        _exit(0);
      }
      char v17 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v17) {
        break;
      }
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = "com.apple.wpantund.ncp";
        __int16 v27 = 2080;
        char v28 = "default";
        int v18 = (os_log_s *)&_os_log_default;
        uint64_t v19 = "Logging Module is not defined for SubSystem: %s, Category: %s";
        uint32_t v20 = 22;
LABEL_54:
        _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, v19, __p, v20);
      }

void sub_100102060( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1001020A8(unsigned int a1)
{
  if ((a1 & 0x80000000) != 0) {
    return strerror(a1);
  }
  if ((a1 & 0xFFFF0000) == 0xEA0000) {
    return "NCP-Specific Errorcode";
  }
  if (a1 > 0x21) {
    return "";
  }
  return off_1002B34F0[a1];
}

uint64_t sub_1001023C8(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  while (1)
  {
    int v4 = OBJC_IVAR___PBDataReader__error;
    if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
      || *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
    {
      break;
    }

    char v5 = 0;
    unsigned int v6 = 0;
    uint64_t v7 = 0LL;
    while (1)
    {
      uint64_t v8 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v9 = v8 + 1;
      if (v8 == -1)
      {
LABEL_35:
        __break(0x5500u);
        return result;
      }

      if (v9 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v10 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v8);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v9;
      v7 |= (unint64_t)(v10 & 0x7F) << v5;
      if ((v10 & 0x80) == 0) {
        goto LABEL_12;
      }
      v5 += 7;
      BOOL v11 = v6++ >= 9;
      if (v11)
      {
        unint64_t v12 = 0LL;
        int v4 = OBJC_IVAR___PBDataReader__error;
        uint64_t v13 = OBJC_IVAR___PBDataReader__error;
        goto LABEL_16;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
    uint64_t v13 = OBJC_IVAR___PBDataReader__error;
    unint64_t v12 = *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) ? 0LL : v7;
    int v4 = OBJC_IVAR___PBDataReader__error;
LABEL_16:
    if (*(_BYTE *)(a2 + v13) || (v12 & 7) == 4) {
      break;
    }
    if ((v12 >> 3) == 1)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      uint64_t v17 = 0LL;
      *(_BYTE *)(v3 + 12) |= 1u;
      while (1)
      {
        uint64_t v18 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v19 = v18 + 1;
        if (v18 == -1) {
          goto LABEL_35;
        }
        if (v19 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v20 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19;
        v17 |= (unint64_t)(v20 & 0x7F) << v15;
        if ((v20 & 0x80) == 0) {
          goto LABEL_31;
        }
        v15 += 7;
        BOOL v11 = v16++ >= 9;
        if (v11)
        {
          LODWORD(v17) = 0;
          goto LABEL_33;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_31:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v17) = 0;
      }
LABEL_33:
      *(_DWORD *)(v3 + 8) = v17;
      continue;
    }

    uint64_t result = PBReaderSkipValueWithTag(a2);
    if ((result & 1) == 0) {
      return 0LL;
    }
  }

  return *(unsigned __int8 *)(a2 + v4) == 0;
}

LABEL_6:
    unsigned int v6 = 0;
  }

  sRadioStats = self->_sRadioStats;
  if (sRadioStats)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(-[AWDRadioStatsS dictionaryRepresentation](sRadioStats, "dictionaryRepresentation"));
    [v3 setObject:v7 forKey:@"s_radio_stats"];
  }

  uint64_t v8 = self->_has;
  if ((*(_DWORD *)&v8 & 0x20000) != 0)
  {
    char v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_rttMinVal));
    [v3 setObject:v15 forKey:@"rtt_min_val"];

    uint64_t v8 = self->_has;
    if ((*(_DWORD *)&v8 & 0x10000) == 0)
    {
LABEL_10:
      if ((*(_WORD *)&v8 & 0x8000) == 0) {
        goto LABEL_11;
      }
      goto LABEL_69;
    }
  }

  else if ((*(_DWORD *)&v8 & 0x10000) == 0)
  {
    goto LABEL_10;
  }

  unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", self->_rttMaxVal));
  [v3 setObject:v16 forKey:@"rtt_max_val"];

  uint64_t v8 = self->_has;
  if ((*(_WORD *)&v8 & 0x8000) == 0)
  {
LABEL_11:
    if ((*(_WORD *)&v8 & 0x4000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_70;
  }

  if (self->_sRadioStats)
  {
    uint64_t v7 = v4;
    objc_msgSend(v4, "setSRadioStats:");
    int v4 = v7;
  }

  unsigned int v6 = self->_has;
  if ((*(_DWORD *)&v6 & 0x20000) != 0)
  {
    v4[19] = self->_rttMinVal;
    *((void *)v4 + 31) |= 0x20000uLL;
    unsigned int v6 = self->_has;
    if ((*(_DWORD *)&v6 & 0x10000) == 0)
    {
LABEL_10:
      if ((*(_WORD *)&v6 & 0x8000) == 0) {
        goto LABEL_11;
      }
      goto LABEL_69;
    }
  }

  else if ((*(_DWORD *)&v6 & 0x10000) == 0)
  {
    goto LABEL_10;
  }

  v4[18] = self->_rttMaxVal;
  *((void *)v4 + 31) |= 0x10000uLL;
  unsigned int v6 = self->_has;
  if ((*(_WORD *)&v6 & 0x8000) == 0)
  {
LABEL_11:
    if ((*(_WORD *)&v6 & 0x4000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_70;
  }

  uint64_t v8 = -[AWDRadioStatsS copyWithZone:](self->_sRadioStats, "copyWithZone:", a3);
  unint64_t v9 = (void *)v6[18];
  v6[18] = v8;

  char v10 = self->_has;
  if ((*(_DWORD *)&v10 & 0x20000) != 0)
  {
    *((_DWORD *)v6 + 19) = self->_rttMinVal;
    v6[31] |= 0x20000uLL;
    char v10 = self->_has;
    if ((*(_DWORD *)&v10 & 0x10000) == 0)
    {
LABEL_8:
      if ((*(_WORD *)&v10 & 0x8000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_67;
    }
  }

  else if ((*(_DWORD *)&v10 & 0x10000) == 0)
  {
    goto LABEL_8;
  }

  *((_DWORD *)v6 + 18) = self->_rttMaxVal;
  v6[31] |= 0x10000uLL;
  char v10 = self->_has;
  if ((*(_WORD *)&v10 & 0x8000) == 0)
  {
LABEL_9:
    if ((*(_WORD *)&v10 & 0x4000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_68;
  }

  sRadioStats = self->_sRadioStats;
  uint64_t v8 = *((void *)v5 + 18);
  if (sRadioStats)
  {
    if (!v8) {
      goto LABEL_16;
    }
    char v10 = v5;
    -[AWDRadioStatsS mergeFrom:](sRadioStats, "mergeFrom:");
  }

  else
  {
    if (!v8) {
      goto LABEL_16;
    }
    char v10 = v5;
    -[AWDCountersRadioS setSRadioStats:](self, "setSRadioStats:");
  }

  char v5 = v10;
LABEL_16:
  unint64_t v9 = *((void *)v5 + 31);
  if ((v9 & 0x20000) != 0)
  {
    self->_rttMinVal = v5[19];
    *(void *)&self->_has |= 0x20000uLL;
    unint64_t v9 = *((void *)v5 + 31);
    if ((v9 & 0x10000) == 0)
    {
LABEL_18:
      if ((v9 & 0x8000) == 0) {
        goto LABEL_19;
      }
      goto LABEL_73;
    }
  }

  else if ((v9 & 0x10000) == 0)
  {
    goto LABEL_18;
  }

  self->_rttMaxVal = v5[18];
  *(void *)&self->_has |= 0x10000uLL;
  unint64_t v9 = *((void *)v5 + 31);
  if ((v9 & 0x8000) == 0)
  {
LABEL_19:
    if ((v9 & 0x4000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_74;
  }
}

LABEL_7:
  return v6;
}

  __break(0x5500u);
  return result;
}

    *a6++ = v8;
  }

  char v10 = 0LL;
  BOOL v11 = v9 - 1;
  while (1)
  {
    unint64_t v12 = (char *)&a3[v10];
    uint64_t v8 = a3[v10 + 1] + (v8 << 6) - 128;
    uint64_t v13 = v11 == (_DWORD)v10;
    int v14 = v11 != v10++;
    if (v13 || v12 + 2 == a4)
    {
      a3 += v10 + 1;
      goto LABEL_26;
    }
  }

  *a5 = (unsigned __int8 *)(v12 + 1);
LABEL_32:
  *a8 = a6;
  return 2LL;
}

  uint64_t v13 = sub_1001768B4(1);
  int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
    sub_10019BB58(self, v14);
  }

  unint64_t v12 = 0LL;
  return v12;
}

  unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue([v3 wifiSSID]);
  uint64_t v17 = [v16 length];

  if (!v17)
  {
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v3 ipv6NwSignature]);
    unint64_t v19 = [v18 length];

    if (v19)
    {
      v27[0] = kSecAttrProtocol;
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 ipv6NwSignature]);
      char v20 = sub_1001744E8(v8);
      char v10 = (void *)objc_claimAutoreleasedReturnValue(v20);
      v28[0] = v10;
      v28[1] = kSecClassInternetPassword;
      v27[1] = kSecClass;
      void v27[2] = kSecAttrSynchronizable;
      v28[2] = kSecAttrSynchronizableAny;
      uint64_t v28[3] = @"com.apple.preferred.network";
      v27[3] = kSecAttrAccessGroup;
      void v27[4] = kSecAttrSyncViewHint;
      uint8_t v28[4] = kSecAttrViewHintHome;
      size_t v21 = v28;
      char v22 = v27;
    }

    else
    {
      v25[0] = kSecAttrPort;
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 ipv4NwSignature]);
      unsigned __int8 v23 = sub_1001744E8(v8);
      char v10 = (void *)objc_claimAutoreleasedReturnValue(v23);
      v26[0] = v10;
      v26[1] = kSecClassInternetPassword;
      v25[1] = kSecClass;
      void v25[2] = kSecAttrSynchronizable;
      _DWORD v26[2] = kSecAttrSynchronizableAny;
      unint64_t v26[3] = @"com.apple.preferred.network";
      v25[3] = kSecAttrAccessGroup;
      void v25[4] = kSecAttrSyncViewHint;
      uint64_t v26[4] = kSecAttrViewHintHome;
      size_t v21 = v26;
      char v22 = v25;
    }

    char v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v21,  v22,  5LL));
    goto LABEL_13;
  }

  v29[0] = kSecAttrSecurityDomain;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 wifiSSID]);
  v30[0] = v8;
  v30[1] = kSecClassInternetPassword;
  v29[1] = kSecClass;
  void v29[2] = kSecAttrSynchronizable;
  void v30[2] = kSecAttrSynchronizableAny;
  v30[3] = @"com.apple.preferred.network";
  v29[3] = kSecAttrAccessGroup;
  void v29[4] = kSecAttrSyncViewHint;
  uint64_t v30[4] = kSecAttrViewHintHome;
  char v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v30,  v29,  5LL));
LABEL_14:

  return v15;
}

  *(_OWORD *)uint64_t v37 = 0u;
  memset(v38, 0, sizeof(v38));
  inet_ntop(30, a5, v37, 0x2Eu);
  char v20 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109890;
    char v30 = (_DWORD)v28 - (_DWORD)__dst;
    std::string v31 = 2080;
    size_t v32 = v37;
    int v33 = 1024;
    char v34 = a4;
    unsigned int v35 = 1024;
    uint64_t v36 = a6;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "UDP->NCP [%04d] [ %s:%d -> ::%d]", buf, 0x1Eu);
  }

  size_t v21 = (void *)*((void *)this + 4);
  sub_10000AC00(&v23, "UdpForward:Stream");
  sub_1000B7DD0(v21, &v23, v17, (uint64_t)v24);
  if (v26 < 0) {
    operator delete(__p);
  }
  free(v17);
  *(void *)uint64_t v37 = &__dst;
  sub_100006F6C((void ***)v37);
  return 0LL;
}

    int v14 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 136315394;
      char v40 = "virtual otbrError ot::BorderRouter::Mdns::PublisherMDnsSd::PublishService(uint16_t, const char *, const char"
            " *, const TxtList &)";
      unsigned int v41 = 1024;
      uint64_t v42 = 468;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "%s:%d:Calling DNSServiceRegister function",  buf,  0x12u);
    }

    char v15 = DNSServiceRegister( &sdRef,  0,  0,  a3,  a4,  (const char *)a1[5],  (const char *)a1[4],  __rev16(a2),  v34 - (_WORD)rdata,  rdata,  (DNSServiceRegisterReply)ot::BorderRouter::Mdns::PublisherMDnsSd::HandleServiceRegisterResult,  a1);
    if (v15)
    {
      unsigned int v16 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        uint64_t v17 = sub_1001F8448(v15);
        sub_1001FA7C4((uint64_t)v17, (uint64_t)buf, v16);
      }

      uint64_t v18 = dispatch_time(0LL, 10000000000LL);
      if (a1[9]
        || (unint64_t v19 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  &_dispatch_main_q),  (a1[9] = v19) != 0LL))
      {
        char v20 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          size_t v21 = sub_1001F8448(v15);
          sub_1001FA78C((uint64_t)v21, (uint64_t)v45, v20);
        }

        dispatch_source_set_timer(a1[9], v18, 0xFFFFFFFFFFFFFFFFLL, 0LL);
        char v22 = a1[9];
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 0x40000000LL;
        handler[2] = sub_1001F92EC;
        handler[3] = &unk_1002B5FB0;
        handler[4] = a1;
        dispatch_source_set_event_handler(v22, handler);
        dispatch_activate(a1[9]);
      }

      else
      {
        std::string v31 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
        if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)char v45 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_INFO,  "PublisherMDnsSd::Could not create Timer !!",  v45,  2u);
        }
      }

      unsigned __int8 v23 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        std::string v24 = sub_1001F8448(v15);
        sub_1001FA754((uint64_t)v24, (uint64_t)v38, v23);
      }

      unint64_t v9 = 4294967292LL;
    }

    else
    {
      DNSServiceSetDispatchQueue(sdRef, &_dispatch_main_q);
      int v25 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 136315650;
        char v40 = "virtual otbrError ot::BorderRouter::Mdns::PublisherMDnsSd::PublishService(uint16_t, const char *, const ch"
              "ar *, const TxtList &)";
        unsigned int v41 = 1024;
        uint64_t v42 = 502;
        uint64_t v43 = 1024;
        unint64_t v44 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_INFO,  "%s:%d:After Calling DNSServiceRegister function, error : %d",  buf,  0x18u);
      }

      if (sdRef) {
        ot::BorderRouter::Mdns::PublisherMDnsSd::RecordService( (ot::BorderRouter::Mdns::PublisherMDnsSd *)a1,  a3,  a4,  sdRef);
      }
      if (!a1[9])
      {
LABEL_32:
        unint64_t v9 = 0LL;
        goto LABEL_33;
      }

      unint64_t v26 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "After publishing Clean up timer", buf, 2u);
      }

      dispatch_source_cancel(a1[9]);
      unint64_t v9 = 0LL;
      a1[9] = 0LL;
    }
  }

void sub_100102AF0(uint64_t a1, uint64_t a2)
{
LABEL_1:
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
    || *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
  {
    return;
  }

  char v4 = 0;
  unsigned int v5 = 0;
  unint64_t v6 = 0LL;
  while (1)
  {
    uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
    unint64_t v8 = v7 + 1;
    if (v7 == -1) {
      break;
    }
    if (v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
    {
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      uint64_t v12 = OBJC_IVAR___PBDataReader__error;
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v11 = 0LL;
      }
      else {
        unint64_t v11 = v6;
      }
LABEL_14:
      if (*(_BYTE *)(a2 + v12)) {
        BOOL v13 = 1;
      }
      else {
        BOOL v13 = (v11 & 7) == 4;
      }
      if (v13) {
        return;
      }
      switch((v11 >> 3))
      {
        case 1u:
          char v14 = 0;
          unsigned int v15 = 0;
          uint64_t v16 = 0LL;
          *(_BYTE *)(a1 + 32) |= 1u;
          while (1)
          {
            uint64_t v17 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v18 = v17 + 1;
            if (v17 == -1) {
              goto LABEL_59;
            }
            if (v18 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v19 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18;
            v16 |= (unint64_t)(v19 & 0x7F) << v14;
            if ((v19 & 0x80) == 0) {
              goto LABEL_46;
            }
            v14 += 7;
            BOOL v10 = v15++ >= 9;
            if (v10)
            {
              uint64_t v16 = 0LL;
              goto LABEL_48;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_46:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v16 = 0LL;
          }
LABEL_48:
          *(void *)(a1 + 8) = v16;
          goto LABEL_1;
        case 2u:
          char v20 = objc_alloc_init(&OBJC_CLASS___AWDHeaderInfoS);
          objc_storeStrong((id *)(a1 + 16), v20);
          if (!PBReaderPlaceMark(a2, v34) || (sub_10012DC90((uint64_t)v20, a2), (v21 & 1) == 0))
          {

            return;
          }

          PBReaderRecallMark(a2, v34);

          break;
        case 3u:
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0LL;
          *(_BYTE *)(a1 + 32) |= 4u;
          while (1)
          {
            uint64_t v25 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v26 = v25 + 1;
            if (v25 == -1) {
              goto LABEL_59;
            }
            if (v26 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v27 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26;
            v24 |= (unint64_t)(v27 & 0x7F) << v22;
            if ((v27 & 0x80) == 0) {
              goto LABEL_50;
            }
            v22 += 7;
            BOOL v10 = v23++ >= 9;
            if (v10)
            {
              LODWORD(v24) = 0;
              goto LABEL_52;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_50:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v24) = 0;
          }
LABEL_52:
          *(_DWORD *)(a1 + 28) = v24;
          goto LABEL_1;
        case 4u:
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v30 = 0LL;
          *(_BYTE *)(a1 + 32) |= 2u;
          while (1)
          {
            uint64_t v31 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v32 = v31 + 1;
            if (v31 == -1) {
              goto LABEL_59;
            }
            if (v32 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v33 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v31);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v32;
            v30 |= (unint64_t)(v33 & 0x7F) << v28;
            if ((v33 & 0x80) == 0) {
              goto LABEL_54;
            }
            v28 += 7;
            BOOL v10 = v29++ >= 9;
            if (v10)
            {
              LODWORD(v30) = 0;
              goto LABEL_56;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_54:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v30) = 0;
          }
LABEL_56:
          *(_DWORD *)(a1 + 24) = v30;
          goto LABEL_1;
        default:
          if ((PBReaderSkipValueWithTag(a2) & 1) != 0) {
            goto LABEL_1;
          }
          return;
      }

      goto LABEL_1;
    }

    char v9 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
    *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
    v6 |= (unint64_t)(v9 & 0x7F) << v4;
    if ((v9 & 0x80) == 0) {
      goto LABEL_11;
    }
    v4 += 7;
    BOOL v10 = v5++ >= 9;
    if (v10)
    {
      unint64_t v11 = 0LL;
      uint64_t v12 = OBJC_IVAR___PBDataReader__error;
      goto LABEL_14;
    }
  }

void sub_100103418()
{
  uint64_t v0 = objc_autoreleasePoolPush();
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CTRFollowUpController);
  int v2 = v1;
  if (!v1)
  {
    unsigned int v5 = sub_1000160F4("com.apple.wpantund", "default");
    unint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_10020FFA8(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    __assert_rtn("postFollowUpNotification", "ctr_util_obj_c_interface.mm", 21, "false");
  }

  if (!-[CTRFollowUpController ctrUtilPostFollowUpItem:](v1, "ctrUtilPostFollowUpItem:", @"x-hw"))
  {
    char v14 = sub_1000160F4("com.apple.wpantund", "default");
    unsigned int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      sub_100210018(v15);
    }

    __assert_rtn("postFollowUpNotification", "ctr_util_obj_c_interface.mm", 27, "false");
  }

  uint64_t v3 = sub_1000160F4("com.apple.wpantund", "default");
  char v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v16 = 136315394;
    uint64_t v17 = "postFollowUpNotification";
    __int16 v18 = 1024;
    int v19 = 1;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s: FAULT detected, Posted Followup Notification : return val : %d",  (uint8_t *)&v16,  0x12u);
  }

  objc_autoreleasePoolPop(v0);
}

void sub_1001035D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001035F8()
{
  uint64_t v0 = objc_autoreleasePoolPush();
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CTRFollowUpController);
  int v2 = v1;
  if (!v1)
  {
    uint64_t v3 = sub_1000160F4("com.apple.wpantund", "default");
    char v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1002100A0(v4, v5, v6, v7, v8, v9, v10, v11);
    }

    __assert_rtn("clearFollowUpNotification", "ctr_util_obj_c_interface.mm", 41, "false");
  }

  -[CTRFollowUpController ctrUtilClearFollowUpItem:](v1, "ctrUtilClearFollowUpItem:", @"x-hw");

  objc_autoreleasePoolPop(v0);
}

void sub_10010369C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001038A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100103E9C(uint64_t a1, int a2)
{
  char v4 = sub_1000160F4("com.apple.wpantund.awd", "default");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v10 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "AWDMetricsServerInterface : setupAWDMetricsServerConnections - incoming metricId = %d",  buf,  8u);
  }

  uint64_t v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) msgQueue]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _OWORD v7[2] = sub_100103FAC;
  v7[3] = &unk_1002B3638;
  uint64_t v7[4] = *(void *)(a1 + 32);
  int v8 = a2;
  dispatch_async(v6, v7);
}

id sub_100103FAC(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleMetricQuery:*(unsigned int *)(a1 + 40)];
}

void sub_100103FBC(uint64_t a1, int a2)
{
  char v4 = sub_1000160F4("com.apple.wpantund.awd", "default");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v10 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "AWDMetricsServerInterface : setupAWDMetricsServerConnections - incoming metricId = %d",  buf,  8u);
  }

  uint64_t v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) msgQueue]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _OWORD v7[2] = sub_1001040CC;
  v7[3] = &unk_1002B3638;
  uint64_t v7[4] = *(void *)(a1 + 32);
  int v8 = a2;
  dispatch_async(v6, v7);
}

id sub_1001040CC(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleMetricQuery:*(unsigned int *)(a1 + 40)];
}

void sub_1001040DC(uint64_t a1, int a2)
{
  char v4 = sub_1000160F4("com.apple.wpantund.awd", "default");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v10 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "AWDMetricsServerInterface : setupAWDMetricsServerConnections - incoming metricId = %d",  buf,  8u);
  }

  uint64_t v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) msgQueue]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _OWORD v7[2] = sub_1001041EC;
  v7[3] = &unk_1002B3638;
  uint64_t v7[4] = *(void *)(a1 + 32);
  int v8 = a2;
  dispatch_async(v6, v7);
}

id sub_1001041EC(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleMetricQuery:*(unsigned int *)(a1 + 40)];
}

void sub_1001041FC(uint64_t a1, int a2)
{
  char v4 = sub_1000160F4("com.apple.wpantund.awd", "default");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v10 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "AWDMetricsServerInterface : setupAWDMetricsServerConnections - incoming metricId = %d",  buf,  8u);
  }

  uint64_t v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) msgQueue]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _OWORD v7[2] = sub_10010430C;
  v7[3] = &unk_1002B3638;
  uint64_t v7[4] = *(void *)(a1 + 32);
  int v8 = a2;
  dispatch_async(v6, v7);
}

id sub_10010430C(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleMetricQuery:*(unsigned int *)(a1 + 40)];
}

void sub_10010431C(uint64_t a1, int a2)
{
  char v4 = sub_1000160F4("com.apple.wpantund.awd", "default");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v10 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "AWDMetricsServerInterface : setupAWDMetricsServerConnections - incoming metricId = %d",  buf,  8u);
  }

  uint64_t v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) msgQueue]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _OWORD v7[2] = sub_10010442C;
  v7[3] = &unk_1002B3638;
  uint64_t v7[4] = *(void *)(a1 + 32);
  int v8 = a2;
  dispatch_async(v6, v7);
}

id sub_10010442C(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleMetricQuery:*(unsigned int *)(a1 + 40)];
}

void sub_10010443C(uint64_t a1, int a2)
{
  char v4 = sub_1000160F4("com.apple.wpantund.awd", "default");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v10 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "AWDMetricsServerInterface : setupAWDMetricsServerConnections - incoming metricId = %d",  buf,  8u);
  }

  uint64_t v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) msgQueue]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _OWORD v7[2] = sub_10010454C;
  v7[3] = &unk_1002B3638;
  uint64_t v7[4] = *(void *)(a1 + 32);
  int v8 = a2;
  dispatch_async(v6, v7);
}

id sub_10010454C(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleMetricQuery:*(unsigned int *)(a1 + 40)];
}

void sub_10010455C(uint64_t a1, int a2)
{
  char v4 = sub_1000160F4("com.apple.wpantund.awd", "default");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v10 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "AWDMetricsServerInterface : setupAWDMetricsServerConnections - incoming metricId = %d",  buf,  8u);
  }

  uint64_t v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) msgQueue]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _OWORD v7[2] = sub_10010466C;
  v7[3] = &unk_1002B3638;
  uint64_t v7[4] = *(void *)(a1 + 32);
  int v8 = a2;
  dispatch_async(v6, v7);
}

id sub_10010466C(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleMetricQuery:*(unsigned int *)(a1 + 40)];
}

void sub_100104B1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100104C30()
{
  int v2 = objc_alloc_init(&OBJC_CLASS___AWDFlagstoneEngagementMetrics);
  if (v2)
  {
    sub_1000E48C4(v2);
    AWDPostMetric(8978433LL, v2);
    if (byte_1002C97C8) {
      sub_100081BB8(v2);
    }
  }

  uint64_t v3 = objc_alloc_init(&OBJC_CLASS___AWDFlagstoneNetworkRadioMetrics);
  if (v3)
  {
    sub_1000E4F9C(v3);
    AWDPostMetric(8978434LL, v3);
    if (byte_1002C97C8) {
      sub_1000828F0(v3);
    }
  }

  char v4 = objc_alloc_init(&OBJC_CLASS___AWDFlagstoneMACMetrics);
  if (v4)
  {
    sub_1000E5E44(v4);
    AWDPostMetric(8978435LL, v4);
    if (byte_1002C97C8) {
      sub_100084EB4(v4);
    }
  }

  uint64_t v5 = objc_alloc_init(&OBJC_CLASS___AWDFlagstoneCoexMetrics);
  if (v5)
  {
    sub_1000E6864(v5);
    AWDPostMetric(8978436LL, v5);
    if (byte_1002C97C8) {
      sub_100086B98(v5);
    }
  }

  uint64_t v6 = objc_alloc_init(&OBJC_CLASS___AWDFlagstoneIPMLEMetrics);
  if (v6)
  {
    sub_1000E6C78(v6);
    AWDPostMetric(8978437LL, v6);
    if (byte_1002C97C8) {
      sub_100087CE8(v6);
    }
  }

  uint64_t v7 = objc_alloc_init(&OBJC_CLASS___AWDFlagstonePowerMetrics);
  if (v7)
  {
    sub_1000E72E4(v7);
    AWDPostMetric(8978439LL, v7);
    if (byte_1002C97C8) {
      sub_1000889B0(v7);
    }
  }

  if (sub_1000E7FB4(v0, v1))
  {
    int v8 = objc_alloc_init(&OBJC_CLASS___AWDFlagstoneTopologyMetrics);
    if (v8)
    {
      sub_1000E7FB8(v8);
      AWDPostMetric(8978440LL, v8);
      if (byte_1002C97C8) {
        sub_1000891C0(v8);
      }
    }
  }

void sub_100104E44( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_100104E70()
{
  if (!dword_1002C97CC) {
    sub_100104C30();
  }
}

void sub_100104E84()
{
  uint64_t v0 = objc_alloc_init(&OBJC_CLASS___AWDFlagstoneStabilityMetrics);
  if (v0)
  {
    sub_1000E708C(v0);
    AWDPostMetric(8978438LL, v0);
    if (byte_1002C97C8) {
      sub_100088DA4(v0);
    }
  }
}

void sub_100104EE8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100104EFC()
{
  uint64_t v0 = objc_alloc_init(&OBJC_CLASS___AWDFlagstoneCTCSNumberOfThirdPartyBRs);
  if (v0)
  {
    sub_1000E7158(v0);
    AWDPostMetric(8978441LL, v0);
    if (byte_1002C97C8) {
      sub_1000896C0(v0);
    }
  }
}

void sub_100104F60( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100104F74()
{
  uint64_t v0 = objc_alloc_init(&OBJC_CLASS___AWDFlagstoneCTCSNumberPreferredNetworksByBorderRouters);
  if (v0)
  {
    sub_1000E71EC(v0);
    AWDPostMetric(8978442LL, v0);
    if (byte_1002C97C8) {
      sub_1000899A8(v0);
    }
  }
}

void sub_100104FD8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100104FEC(int a1, char a2)
{
  char v4 = sub_1000160F4("com.apple.wpantund.awd", "default");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "AWDMetricsServerInterface : AWDMetricsServerInterface_Init",  v7,  2u);
  }

  dword_1002C97CC = a1;
  byte_1002C97C8 = a2;
  uint64_t v6 = objc_alloc(&OBJC_CLASS___AWDMetricsServerInterface);
}

void sub_1001050A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001050B4()
{
}

void sub_1001051D0(uint64_t a1, void *a2)
{
  path = a2;
  uint64_t v3 = (nw_interface *)nw_path_copy_interface();
  name = nw_interface_get_name(v3);
  if (name)
  {
    uint64_t v5 = (char *)name;
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", name));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) interfaceName]);
    if ([v7 length])
    {
      int v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) interfaceName]);
      unsigned __int8 v9 = [v6 isEqualToString:v8];

      if ((v9 & 1) == 0)
      {
        int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) interfaceName]);
        NSLog( @"BackboneInterfaceNetworkMonitor:Backbone interface was switched, old intf = %@, new intf = %@\n . Clean up the old interface",  v10,  v6);

        [*(id *)(a1 + 32) setIsConnected:0];
        id v11 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) interfaceName]);
        sub_100158014((char *)[v11 UTF8String], (char)objc_msgSend(*(id *)(a1 + 32), "isConnected"));

        if (v3)
        {
          unsigned __int8 type = nw_interface_get_type(v3);
        }

        else
        {
          NSLog( @"BackboneInterfaceNetworkMonitor:%s interface is NULL\n",  "-[BackboneNetworkMonitor startNetworkMonitoring]_block_invoke");
          unsigned __int8 type = 0;
        }

        [*(id *)(a1 + 32) setInterfaceNameEnum:type];
      }
    }

    else
    {
    }

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v5));
    [*(id *)(a1 + 32) setInterfaceName:v13];

    if (nw_path_get_status(path) == nw_path_status_satisfied)
    {
      NSLog( @"BackboneInterfaceNetworkMonitor:%s interface: %s... is connected\n",  "-[BackboneNetworkMonitor startNetworkMonitoring]_block_invoke",  v5);
      if (([*(id *)(a1 + 32) isConnected] & 1) == 0)
      {
        [*(id *)(a1 + 32) stopTimeAndCalculateCurrentDuration];
        sub_100158014(v5, (char)[*(id *)(a1 + 32) isConnected]);
        if (v3)
        {
          unsigned __int8 v14 = nw_interface_get_type(v3);
        }

        else
        {
          NSLog( @"BackboneInterfaceNetworkMonitor:%s interface is NULL\n",  "-[BackboneNetworkMonitor startNetworkMonitoring]_block_invoke");
          unsigned __int8 v14 = 0;
        }

        [*(id *)(a1 + 32) setInterfaceNameEnum:v14];
        if (!strcmp(v5, "ir0")) {
          [*(id *)(a1 + 32) setInterfaceNameEnum:5];
        }
        [*(id *)(a1 + 32) startTimeAndGetCurrentDimension];
      }

      [*(id *)(a1 + 32) setIsConnected:1];
      sub_100158014(v5, (char)[*(id *)(a1 + 32) isConnected]);
    }

    else
    {
      NSLog( @"BackboneInterfaceNetworkMonitor:%s interface: %s... is disconnected\n",  "-[BackboneNetworkMonitor startNetworkMonitoring]_block_invoke",  v5);
      [*(id *)(a1 + 32) setIsConnected:0];
      sub_100158014(v5, (char)[*(id *)(a1 + 32) isConnected]);
      if (v3)
      {
        unsigned __int8 v15 = nw_interface_get_type(v3);
      }

      else
      {
        NSLog( @"BackboneInterfaceNetworkMonitor:%s interface is NULL\n",  "-[BackboneNetworkMonitor startNetworkMonitoring]_block_invoke");
        unsigned __int8 v15 = 0;
      }

      [*(id *)(a1 + 32) setInterfaceNameEnum:v15];
    }
  }

  else
  {
    NSLog(@"BackboneInterfaceNetworkMonitor:name is NULL\n");
    if ([*(id *)(a1 + 32) isConnected])
    {
      NSLog(@"BackboneInterfaceNetworkMonitor:name is NULL, previously connected interface is now disconnected\n");
      [*(id *)(a1 + 32) stopTimeAndCalculateCurrentDuration];
      [*(id *)(a1 + 32) setIsConnected:0];
      sub_100158014(0, (char)[*(id *)(a1 + 32) isConnected]);
      [*(id *)(a1 + 32) setInterfaceNameEnum:0];
    }
  }
}

uint64_t sub_100105888(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
LABEL_2:
  while (2)
  {
    int v4 = OBJC_IVAR___PBDataReader__error;
    if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
      || *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
    {
      return *(unsigned __int8 *)(a2 + v4) == 0;
    }

    char v5 = 0;
    unsigned int v6 = 0;
    uint64_t v7 = 0LL;
    while (1)
    {
      uint64_t v8 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v9 = v8 + 1;
      if (v8 == -1) {
        goto LABEL_47;
      }
      if (v9 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v10 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v8);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v9;
      v7 |= (unint64_t)(v10 & 0x7F) << v5;
      if ((v10 & 0x80) == 0) {
        goto LABEL_12;
      }
      v5 += 7;
      if (v6++ >= 9)
      {
        unint64_t v12 = 0LL;
        int v4 = OBJC_IVAR___PBDataReader__error;
        uint64_t v13 = OBJC_IVAR___PBDataReader__error;
        goto LABEL_16;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
    uint64_t v13 = OBJC_IVAR___PBDataReader__error;
    unint64_t v12 = *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) ? 0LL : v7;
    int v4 = OBJC_IVAR___PBDataReader__error;
LABEL_16:
    if (*(_BYTE *)(a2 + v13) || (v12 & 7) == 4) {
      return *(unsigned __int8 *)(a2 + v4) == 0;
    }
    if ((v12 >> 3) == 2)
    {
      char v23 = 0;
      unsigned int v24 = 0;
      uint64_t v17 = 0LL;
      *(_BYTE *)(v3 + 16) |= 1u;
      while (1)
      {
        uint64_t v25 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v26 = v25 + 1;
        if (v25 == -1) {
          goto LABEL_47;
        }
        if (v26 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v27 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26;
        v17 |= (unint64_t)(v27 & 0x7F) << v23;
        if ((v27 & 0x80) == 0)
        {
          char v22 = &OBJC_IVAR___AWDCountersReachabilityS__linkLossNbrChildCount;
LABEL_43:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v17) = 0;
          }
          goto LABEL_45;
        }

        v23 += 7;
        BOOL v21 = v24++ > 8;
        if (v21)
        {
          LODWORD(v17) = 0;
          char v22 = &OBJC_IVAR___AWDCountersReachabilityS__linkLossNbrChildCount;
LABEL_45:
          *(_DWORD *)(v3 + *v22) = v17;
          goto LABEL_2;
        }
      }

      char v22 = &OBJC_IVAR___AWDCountersReachabilityS__linkLossNbrChildCount;
LABEL_40:
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
      goto LABEL_43;
    }

    if ((v12 >> 3) == 1)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      uint64_t v17 = 0LL;
      *(_BYTE *)(v3 + 16) |= 2u;
      while (1)
      {
        uint64_t v18 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v19 = v18 + 1;
        if (v18 == -1) {
          break;
        }
        if (v19 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          char v22 = &OBJC_IVAR___AWDCountersReachabilityS__linkLossNbrRouterCount;
          goto LABEL_40;
        }

        char v20 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19;
        v17 |= (unint64_t)(v20 & 0x7F) << v15;
        if ((v20 & 0x80) == 0)
        {
          char v22 = &OBJC_IVAR___AWDCountersReachabilityS__linkLossNbrRouterCount;
          goto LABEL_43;
        }

        v15 += 7;
        BOOL v21 = v16++ > 8;
        if (v21)
        {
          LODWORD(v17) = 0;
          char v22 = &OBJC_IVAR___AWDCountersReachabilityS__linkLossNbrRouterCount;
          goto LABEL_45;
        }
      }

uint64_t sub_100106838(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  while (1)
  {
    int v4 = OBJC_IVAR___PBDataReader__error;
    if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
      || *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
    {
      break;
    }

    char v5 = 0;
    unsigned int v6 = 0;
    uint64_t v7 = 0LL;
    while (1)
    {
      uint64_t v8 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v9 = v8 + 1;
      if (v8 == -1)
      {
LABEL_186:
        __break(0x5500u);
        return result;
      }

      if (v9 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v10 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v8);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v9;
      v7 |= (unint64_t)(v10 & 0x7F) << v5;
      if ((v10 & 0x80) == 0) {
        goto LABEL_12;
      }
      v5 += 7;
      BOOL v11 = v6++ >= 9;
      if (v11)
      {
        unint64_t v12 = 0LL;
        int v4 = OBJC_IVAR___PBDataReader__error;
        uint64_t v13 = OBJC_IVAR___PBDataReader__error;
        goto LABEL_16;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
    uint64_t v13 = OBJC_IVAR___PBDataReader__error;
    unint64_t v12 = *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) ? 0LL : v7;
    int v4 = OBJC_IVAR___PBDataReader__error;
LABEL_16:
    int v14 = v12 & 7;
    if (*(_BYTE *)(a2 + v13) || v14 == 4) {
      break;
    }
    switch((v12 >> 3))
    {
      case 1u:
        char v16 = 0;
        unsigned int v17 = 0;
        uint64_t v18 = 0LL;
        *(_WORD *)(v3 + 80) |= 0x400u;
        while (1)
        {
          uint64_t v19 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v20 = v19 + 1;
          if (v19 == -1) {
            goto LABEL_186;
          }
          if (v20 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v21 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20;
          v18 |= (unint64_t)(v21 & 0x7F) << v16;
          if ((v21 & 0x80) == 0) {
            goto LABEL_132;
          }
          v16 += 7;
          BOOL v11 = v17++ >= 9;
          if (v11)
          {
            LODWORD(v18) = 0;
            goto LABEL_134;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_132:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v18) = 0;
        }
LABEL_134:
        *(_DWORD *)(v3 + 72) = v18;
        continue;
      case 2u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0LL;
        *(_WORD *)(v3 + 80) |= 2u;
        while (1)
        {
          uint64_t v25 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v26 = v25 + 1;
          if (v25 == -1) {
            goto LABEL_186;
          }
          if (v26 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v27 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26;
          v24 |= (unint64_t)(v27 & 0x7F) << v22;
          if ((v27 & 0x80) == 0) {
            goto LABEL_136;
          }
          v22 += 7;
          BOOL v11 = v23++ >= 9;
          if (v11)
          {
            LODWORD(v24) = 0;
            goto LABEL_138;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_136:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v24) = 0;
        }
LABEL_138:
        *(_DWORD *)(v3 + 36) = v24;
        continue;
      case 3u:
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0LL;
        *(_WORD *)(v3 + 80) |= 0x800u;
        while (1)
        {
          uint64_t v31 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v32 = v31 + 1;
          if (v31 == -1) {
            goto LABEL_186;
          }
          if (v32 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v33 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v31);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v32;
          v30 |= (unint64_t)(v33 & 0x7F) << v28;
          if ((v33 & 0x80) == 0) {
            goto LABEL_140;
          }
          v28 += 7;
          BOOL v11 = v29++ >= 9;
          if (v11)
          {
            LODWORD(v30) = 0;
            goto LABEL_142;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_140:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v30) = 0;
        }
LABEL_142:
        *(_DWORD *)(v3 + 76) = v30;
        continue;
      case 4u:
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0LL;
        *(_WORD *)(v3 + 80) |= 1u;
        while (1)
        {
          uint64_t v37 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v38 = v37 + 1;
          if (v37 == -1) {
            goto LABEL_186;
          }
          if (v38 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v39 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v37);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v38;
          v36 |= (unint64_t)(v39 & 0x7F) << v34;
          if ((v39 & 0x80) == 0) {
            goto LABEL_144;
          }
          v34 += 7;
          BOOL v11 = v35++ >= 9;
          if (v11)
          {
            LODWORD(v36) = 0;
            goto LABEL_146;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_144:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v36) = 0;
        }
LABEL_146:
        *(_DWORD *)(v3 + 32) = v36;
        continue;
      case 5u:
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v42 = 0LL;
        *(_WORD *)(v3 + 80) |= 8u;
        while (1)
        {
          uint64_t v43 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v44 = v43 + 1;
          if (v43 == -1) {
            goto LABEL_186;
          }
          if (v44 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v45 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v43);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v44;
          v42 |= (unint64_t)(v45 & 0x7F) << v40;
          if ((v45 & 0x80) == 0) {
            goto LABEL_148;
          }
          v40 += 7;
          BOOL v11 = v41++ >= 9;
          if (v11)
          {
            LODWORD(v42) = 0;
            goto LABEL_150;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_148:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v42) = 0;
        }
LABEL_150:
        *(_DWORD *)(v3 + 44) = v42;
        continue;
      case 6u:
        char v46 = 0;
        unsigned int v47 = 0;
        uint64_t v48 = 0LL;
        *(_WORD *)(v3 + 80) |= 0x200u;
        while (1)
        {
          uint64_t v49 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v50 = v49 + 1;
          if (v49 == -1) {
            goto LABEL_186;
          }
          if (v50 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v51 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v49);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v50;
          v48 |= (unint64_t)(v51 & 0x7F) << v46;
          if ((v51 & 0x80) == 0) {
            goto LABEL_152;
          }
          v46 += 7;
          BOOL v11 = v47++ >= 9;
          if (v11)
          {
            LODWORD(v48) = 0;
            goto LABEL_154;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_152:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v48) = 0;
        }
LABEL_154:
        *(_DWORD *)(v3 + 68) = v48;
        continue;
      case 7u:
        char v52 = 0;
        unsigned int v53 = 0;
        uint64_t v54 = 0LL;
        *(_WORD *)(v3 + 80) |= 0x10u;
        while (1)
        {
          uint64_t v55 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v56 = v55 + 1;
          if (v55 == -1) {
            goto LABEL_186;
          }
          if (v56 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v57 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v55);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v56;
          v54 |= (unint64_t)(v57 & 0x7F) << v52;
          if ((v57 & 0x80) == 0) {
            goto LABEL_156;
          }
          v52 += 7;
          BOOL v11 = v53++ >= 9;
          if (v11)
          {
            LODWORD(v54) = 0;
            goto LABEL_158;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_156:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v54) = 0;
        }
LABEL_158:
        *(_DWORD *)(v3 + 48) = v54;
        continue;
      case 8u:
        char v58 = 0;
        unsigned int v59 = 0;
        uint64_t v60 = 0LL;
        *(_WORD *)(v3 + 80) |= 0x100u;
        while (1)
        {
          uint64_t v61 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v62 = v61 + 1;
          if (v61 == -1) {
            goto LABEL_186;
          }
          if (v62 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v63 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v61);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v62;
          v60 |= (unint64_t)(v63 & 0x7F) << v58;
          if ((v63 & 0x80) == 0) {
            goto LABEL_160;
          }
          v58 += 7;
          BOOL v11 = v59++ >= 9;
          if (v11)
          {
            LODWORD(v60) = 0;
            goto LABEL_162;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_160:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v60) = 0;
        }
LABEL_162:
        *(_DWORD *)(v3 + 64) = v60;
        continue;
      case 9u:
        char v64 = 0;
        unsigned int v65 = 0;
        uint64_t v66 = 0LL;
        *(_WORD *)(v3 + 80) |= 0x20u;
        while (1)
        {
          uint64_t v67 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v68 = v67 + 1;
          if (v67 == -1) {
            goto LABEL_186;
          }
          if (v68 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v69 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v67);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v68;
          v66 |= (unint64_t)(v69 & 0x7F) << v64;
          if ((v69 & 0x80) == 0) {
            goto LABEL_164;
          }
          v64 += 7;
          BOOL v11 = v65++ >= 9;
          if (v11)
          {
            LODWORD(v66) = 0;
            goto LABEL_166;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_164:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v66) = 0;
        }
LABEL_166:
        *(_DWORD *)(v3 + 52) = v66;
        continue;
      case 0xAu:
        char v70 = 0;
        unsigned int v71 = 0;
        uint64_t v72 = 0LL;
        *(_WORD *)(v3 + 80) |= 4u;
        while (1)
        {
          uint64_t v73 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v74 = v73 + 1;
          if (v73 == -1) {
            goto LABEL_186;
          }
          if (v74 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v75 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v73);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v74;
          v72 |= (unint64_t)(v75 & 0x7F) << v70;
          if ((v75 & 0x80) == 0) {
            goto LABEL_168;
          }
          v70 += 7;
          BOOL v11 = v71++ >= 9;
          if (v11)
          {
            LODWORD(v72) = 0;
            goto LABEL_170;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_168:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v72) = 0;
        }
LABEL_170:
        *(_DWORD *)(v3 + 40) = v72;
        continue;
      case 0xBu:
        char v76 = 0;
        unsigned int v77 = 0;
        uint64_t v78 = 0LL;
        *(_WORD *)(v3 + 80) |= 0x40u;
        while (1)
        {
          uint64_t v79 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v80 = v79 + 1;
          if (v79 == -1) {
            goto LABEL_186;
          }
          if (v80 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v81 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v79);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v80;
          v78 |= (unint64_t)(v81 & 0x7F) << v76;
          if ((v81 & 0x80) == 0) {
            goto LABEL_172;
          }
          v76 += 7;
          BOOL v11 = v77++ >= 9;
          if (v11)
          {
            LODWORD(v78) = 0;
            goto LABEL_174;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_172:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v78) = 0;
        }
LABEL_174:
        *(_DWORD *)(v3 + 56) = v78;
        continue;
      case 0xCu:
        if (v14 == 2)
        {
          uint64_t result = PBReaderPlaceMark(a2, v102);
          if (!(_DWORD)result) {
            return result;
          }
          while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
               && !*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          {
            char v82 = 0;
            unsigned int v83 = 0;
            uint64_t v84 = 0LL;
            while (1)
            {
              uint64_t v85 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              unint64_t v86 = v85 + 1;
              if (v85 == -1) {
                goto LABEL_186;
              }
              if (v86 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                break;
              }
              char v87 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v85);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v86;
              v84 |= (unint64_t)(v87 & 0x7F) << v82;
              if ((v87 & 0x80) == 0) {
                goto LABEL_112;
              }
              v82 += 7;
              BOOL v11 = v83++ >= 9;
              if (v11)
              {
                uint64_t v88 = 0LL;
                goto LABEL_115;
              }
            }

            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_112:
            if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
              uint64_t v88 = 0LL;
            }
            else {
              uint64_t v88 = v84;
            }
LABEL_115:
            uint64_t result = PBRepeatedUInt32Add(v3 + 8, v88);
          }

          uint64_t result = PBReaderRecallMark(a2, v102);
        }

        else
        {
          char v95 = 0;
          unsigned int v96 = 0;
          uint64_t v97 = 0LL;
          uint64_t result = v3 + 8;
          while (1)
          {
            uint64_t v98 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v99 = v98 + 1;
            if (v98 == -1) {
              goto LABEL_186;
            }
            if (v99 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v100 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v98);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v99;
            v97 |= (unint64_t)(v100 & 0x7F) << v95;
            if ((v100 & 0x80) == 0) {
              goto LABEL_180;
            }
            v95 += 7;
            BOOL v11 = v96++ >= 9;
            if (v11)
            {
              uint64_t v101 = 0LL;
              goto LABEL_183;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_180:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v101 = 0LL;
          }
          else {
            uint64_t v101 = v97;
          }
LABEL_183:
          uint64_t result = PBRepeatedUInt32Add(result, v101);
        }

        break;
      case 0xDu:
        char v89 = 0;
        unsigned int v90 = 0;
        uint64_t v91 = 0LL;
        *(_WORD *)(v3 + 80) |= 0x80u;
        while (1)
        {
          uint64_t v92 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v93 = v92 + 1;
          if (v92 == -1) {
            goto LABEL_186;
          }
          if (v93 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v94 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v92);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v93;
          v91 |= (unint64_t)(v94 & 0x7F) << v89;
          if ((v94 & 0x80) == 0) {
            goto LABEL_176;
          }
          v89 += 7;
          BOOL v11 = v90++ >= 9;
          if (v11)
          {
            LODWORD(v91) = 0;
            goto LABEL_178;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_176:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v91) = 0;
        }
LABEL_178:
        *(_DWORD *)(v3 + 60) = v91;
        continue;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if ((result & 1) != 0) {
          continue;
        }
        return 0LL;
    }
  }

  return *(unsigned __int8 *)(a2 + v4) == 0;
}

__n128 sub_100108148(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *sub_100108154@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  __int128 v5 = 0u;
  *(_WORD *)__s = 14906;
  inet_ntop(30, a1, __s, 0x2Eu);
  return sub_10000AC00(a2, __s);
}

BOOL sub_1001081DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 12LL;
  do
  {
    int v3 = *(_DWORD *)(a1 + v2);
    int v4 = *(_DWORD *)(a2 + v2);
    BOOL v5 = v3 != v4 || v2 == 4;
    v2 -= 4LL;
  }

  while (!v5);
  return v3 == v4;
}

uint64_t sub_100108204(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 12LL;
  while (1)
  {
    unsigned int v3 = *(_DWORD *)(a1 + v2);
    unsigned int v4 = *(_DWORD *)(a2 + v2);
    if (v3 < v4)
    {
      LODWORD(v2) = 1;
      unsigned int v3 = 1;
      return v2 & v3;
    }

    if (v3 > v4) {
      break;
    }
    v2 -= 4LL;
    if (!v2) {
      return v2 & v3;
    }
  }

  unsigned int v3 = 0;
  LODWORD(v2) = 1;
  return v2 & v3;
}

_DWORD *sub_100108248(_DWORD *result, unsigned int *a2)
{
  *__n128 result = bswap32(*a2);
  result[1] = bswap32(a2[1]);
  return result;
}

void *sub_100108264@<X0>(unsigned int *a1@<X0>, void *a2@<X8>)
{
  return sub_100108290("%08X%08X", a2, *a1, a1[1]);
}

void *sub_100108290@<X0>(char *__format@<X0>, void *a2@<X8>, ...)
{
  return sub_10000AC00(a2, __str);
}

BOOL sub_100108308(_DWORD *a1, _DWORD *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

BOOL sub_100108334(_DWORD *a1, _DWORD *a2)
{
  unsigned int v2 = a1[1];
  unsigned int v3 = a2[1];
  if (v2 < v3) {
    return 1LL;
  }
  if (v2 > v3) {
    return 0LL;
  }
  return *a1 < *a2;
}

void *sub_10010836C(void *result)
{
  *__n128 result = 0LL;
  return result;
}

__darwin_time_t sub_100108374(uint64_t *a1)
{
  __darwin_time_t result = sub_10014314C();
  if (result) {
    uint64_t v3 = result;
  }
  else {
    uint64_t v3 = -1LL;
  }
  *a1 = v3;
  return result;
}

__darwin_time_t sub_1001083A0(void *a1)
{
  __darwin_time_t v2 = sub_10014314C();
  BOOL v3 = __OFSUB__(v2, *a1);
  __darwin_time_t result = v2 - *a1;
  if (v3) {
    __break(0x5515u);
  }
  return result;
}

__darwin_time_t sub_1001083D0(void *a1)
{
  if (!*a1) {
    return 1LL;
  }
  __darwin_time_t result = sub_10014314C();
  if (!__OFSUB__(result, *a1)) {
    return (unint64_t)(result - *a1) >> 63;
  }
  __break(0x5515u);
  return result;
}

BOOL sub_100108414(void *a1)
{
  return *a1 == 0LL;
}

BOOL sub_100108424(void *a1, void *a2)
{
  return *a1 == *a2;
}

void *sub_100108438(void *result, void *a2)
{
  if (!__OFSUB__(*result, *a2)) {
    return (void *)((*result - *a2) >> 63);
  }
  __break(0x5515u);
  return result;
}

void *sub_100108454@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  __darwin_time_t result = (void *)sub_10014314C();
  unint64_t v5 = (unint64_t)result - *a1;
  if (__OFSUB__(result, *a1))
  {
    __break(0x5515u);
    return result;
  }

  if (!*a1)
  {
    unint64_t v12 = "never";
    return sub_10000AC00(a2, v12);
  }

  if ((v5 & 0x8000000000000000LL) != 0)
  {
    unint64_t v12 = "long time (>24.86 days) ago";
    return sub_10000AC00(a2, v12);
  }

  unint64_t v6 = v5 / 0x5265C00;
  unsigned int v7 = v5 % 0x5265C00;
  unint64_t v8 = v7 / 0x36EE80uLL;
  unsigned int v9 = v7 % 0x36EE80;
  unint64_t v10 = v7 % 0x36EE80 / 0xEA60uLL;
  if (!(_DWORD)v6) {
    return sub_100108290("%02d:%02d:%02d.%03d ago", a2, v8, v10, v9 % 0xEA60 / 0x3E8, v9 % 0xEA60 % 0x3E8);
  }
  BOOL v11 = "";
  return sub_100108290( "%2d day%s %02d:%02d:%02d.%03d ago",  a2,  v6,  v11,  v8,  v10,  v9 % 0xEA60 / 0x3E8,  v9 % 0xEA60 % 0x3E8);
}

uint64_t sub_100108584(uint64_t a1, uint64_t a2)
{
  BOOL v2 = __OFSUB__(a2, a1);
  uint64_t result = a2 - a1;
  if (v2) {
    __break(0x5515u);
  }
  return result;
}

uint64_t sub_100108594(uint64_t result)
{
  *(_WORD *)uint64_t result = 0;
  *(_DWORD *)(result + 4) = 0;
  return result;
}

unsigned __int16 *sub_1001085A0(unsigned __int16 *result, int a2)
{
  unsigned int v2 = *result + a2;
  int v3 = *((_DWORD *)result + 1);
  BOOL v4 = __CFADD__(v3, v2 >> 10);
  int v5 = v3 + (v2 >> 10);
  if (v4)
  {
    __break(0x5500u);
  }

  else
  {
    *((_DWORD *)result + 1) = v5;
    *uint64_t result = v2 & 0x3FF;
  }

  return result;
}

void *sub_1001085C8@<X0>(unsigned __int16 *a1@<X0>, void *a2@<X8>)
{
  if (!*((_DWORD *)a1 + 1)) {
    return sub_100108290("%d bytes", a2, *a1);
  }
  if (*a1) {
    return sub_100108290("%d Kbytes & %d bytes", a2, *((unsigned int *)a1 + 1), *a1);
  }
  return sub_100108290("%d Kbytes", a2, *((unsigned int *)a1 + 1));
}

BOOL sub_100108620(uint64_t a1, uint64_t a2)
{
  int v2 = *(_BYTE *)a2 & 0xF0;
  if (v2 == 96)
  {
    __darwin_time_t v5 = sub_10014314C();
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = -1LL;
    }
    *(void *)a1 = v6;
    *(_WORD *)(a1 + 8) = bswap32(*(unsigned __int16 *)(a2 + 4)) >> 16;
    int v7 = *(unsigned __int8 *)(a2 + 6);
    *(_BYTE *)(a1 + std::string::push_back(&v23, 10) = v7;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 24);
    if (v7 == 58)
    {
      *(_BYTE *)(a1 + 11) = *(_BYTE *)(a2 + 40);
LABEL_10:
      *(_DWORD *)(a1 + 12) = 0;
      return v2 == 96;
    }

    *(_BYTE *)(a1 + 11) = 0;
    if (v7 != 17 && v7 != 6) {
      goto LABEL_10;
    }
    *(_WORD *)(a1 + 12) = bswap32(*(unsigned __int16 *)(a2 + 40)) >> 16;
    *(_WORD *)(a1 + 14) = bswap32(*(unsigned __int16 *)(a2 + 42)) >> 16;
  }

  return v2 == 96;
}

void sub_1001086E8(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v4 = *(unsigned __int8 *)(a1 + 10);
  if (v4 != 58)
  {
    if (v4 == 17)
    {
      __darwin_time_t v5 = "UDP";
      goto LABEL_9;
    }

    if (v4 == 6)
    {
      __darwin_time_t v5 = "TCP";
LABEL_9:
      std::string::assign(&v29, v5);
      unint64_t v8 = __p;
      sub_100108454((void *)a1, __p);
      if (v28 < 0) {
        unint64_t v8 = (void **)__p[0];
      }
      if ((v29.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unsigned int v9 = &v29;
      }
      else {
        unsigned int v9 = (std::string *)v29.__r_.__value_.__r.__words[0];
      }
      uint64_t v10 = *(unsigned __int16 *)(a1 + 8);
      sub_100108154((void *)(a1 + 16), v25);
      int v11 = v26;
      unint64_t v12 = (void **)v25[0];
      uint64_t v13 = *(unsigned __int16 *)(a1 + 12);
      sub_100108154((void *)(a1 + 32), v23);
      int v14 = v25;
      if (v11 < 0) {
        int v14 = v12;
      }
      if (v24 >= 0) {
        char v15 = v23;
      }
      else {
        char v15 = (void **)v23[0];
      }
      sub_100108290( "%s -> type:%s len:%d from:[%s]:%d to:[%s]:%d",  a2,  v8,  v9,  v10,  v14,  v13,  v15,  *(unsigned __int16 *)(a1 + 14));
      goto LABEL_37;
    }

    sub_100108290("0x%02x", __p, *(unsigned __int8 *)(a1 + 10));
    goto LABEL_24;
  }

  int v6 = *(unsigned __int8 *)(a1 + 11);
  if (v6 == 129)
  {
    int v7 = "ICMP6(echo reply)";
  }

  else
  {
    if (v6 != 128)
    {
      sub_100108290("ICMP6(code:%d)", __p, *(unsigned __int8 *)(a1 + 11));
LABEL_24:
      sub_100014D08((uint64_t)&v29, (__int128 *)__p);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_26;
    }

    int v7 = "ICMP6(echo request)";
  }

  std::string::assign(&v29, v7);
LABEL_26:
  char v16 = __p;
  sub_100108454((void *)a1, __p);
  if (v28 < 0) {
    char v16 = (void **)__p[0];
  }
  if ((v29.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    unsigned int v17 = &v29;
  }
  else {
    unsigned int v17 = (std::string *)v29.__r_.__value_.__r.__words[0];
  }
  uint64_t v18 = *(unsigned __int16 *)(a1 + 8);
  sub_100108154((void *)(a1 + 16), v25);
  int v19 = v26;
  unint64_t v20 = (void **)v25[0];
  sub_100108154((void *)(a1 + 32), v23);
  char v21 = v25;
  if (v19 < 0) {
    char v21 = v20;
  }
  if (v24 >= 0) {
    char v22 = v23;
  }
  else {
    char v22 = (void **)v23[0];
  }
  sub_100108290("%s -> type:%s len:%d from:[%s] to:[%s]", a2, v16, v17, v18, v21, v22);
LABEL_37:
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  if (v28 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100108964( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, void *a29, uint64_t a30, int a31, __int16 a32, char a33, char a34)
{
}

__darwin_time_t sub_1001089E4(uint64_t a1, int a2)
{
  __darwin_time_t result = sub_10014314C();
  if (result) {
    uint64_t v5 = result;
  }
  else {
    uint64_t v5 = -1LL;
  }
  *(void *)(a1 + 8) = v5;
  *(_DWORD *)a1 = a2;
  return result;
}

void sub_100108A18(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v4 = v11;
  uint64_t v5 = (void **)v10[0];
  sub_1000B5130(*(_DWORD *)a1, __p);
  if (v4 >= 0) {
    int v6 = v10;
  }
  else {
    int v6 = v5;
  }
  if (v9 >= 0) {
    int v7 = __p;
  }
  else {
    int v7 = (void **)__p[0];
  }
  sub_100108290("%s -> %s", a2, v6, v7);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
}

void sub_100108AC4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

__darwin_time_t sub_100108AF8(uint64_t a1)
{
  return sub_1001083D0((void *)(a1 + 8));
}

__darwin_time_t sub_100108B00(void *a1, uint64_t a2)
{
  *a1 = a2;
  __darwin_time_t result = sub_10014314C();
  if (result) {
    uint64_t v4 = result;
  }
  else {
    uint64_t v4 = -1LL;
  }
  a1[1] = v4;
  return result;
}

void sub_100108B30(void *a1@<X0>, void *a2@<X8>)
{
  if (a1[1] && *a1)
  {
    sub_100108454(a1, &v9);
    uint64_t v4 = a1[1];
    if (__OFSUB__(v4, *a1))
    {
      __break(0x5515u);
    }

    else
    {
      sub_100108290(" host sleep was blocked for %ld ms", __p, v4 - *a1);
      uint64_t v5 = sub_10000D650(&v9, (const std::string::value_type *)__p);
      __int128 v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      a2[2] = v5->__r_.__value_.__l.__cap_;
      *(_OWORD *)a2 = v6;
      v5->__r_.__value_.__l.__size_ = 0LL;
      v5->__r_.__value_.__l.__cap_ = 0LL;
      v5->__r_.__value_.__r.__words[0] = 0LL;
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  else
  {
    sub_10000AC00(a2, "Uninitialized");
  }

void sub_100108BF8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100108C2C(uint64_t a1)
{
  __darwin_time_t result = sub_10010E0D0(a1);
  result[1989] = 0LL;
  result[1988] = 0LL;
  result[1987] = result + 1988;
  return result;
}

void *sub_100108C58(uint64_t a1)
{
  return sub_100108C84(a1);
}

void *sub_100108C84(uint64_t a1)
{
  int v2 = (uint64_t *)(a1 + 15872);
  sub_10010E070((uint64_t *)(a1 + 15872));
  uint64_t v6 = a1 + 15624;
  int v3 = -64;
  do
  {
    __darwin_time_t result = sub_10010E134(v2, &v6);
    v6 -= 248LL;
  }

  while (!__CFADD__(v3++, 1));
  return result;
}

uint64_t sub_100108CE8(uint64_t a1, uint64_t a2)
{
  int v3 = sub_10010E218(a1 + 15896, a2);
  if ((void *)(a1 + 15904) == v3) {
    return 0LL;
  }
  else {
    return v3[6];
  }
}

uint64_t sub_100108D2C(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = sub_100108DAC(a1);
  if (!v4)
  {
    do
    {
      sub_100108DF4((uint64_t *)a1);
      uint64_t v5 = sub_100108DAC(a1);
    }

    while (!v5);
    uint64_t v4 = v5;
  }

  sub_100108F30(v4);
  __n128 v7 = *a2;
  uint64_t v8 = v4;
  sub_10010E344((uint64_t **)(a1 + 15896), (uint64_t)&v7, &v7);
  return v4;
}

uint64_t sub_100108DAC(uint64_t a1)
{
  if (!*(void *)(a1 + 15888)) {
    return 0LL;
  }
  uint64_t v1 = a1 + 15872;
  uint64_t v2 = *(void *)sub_100070DA0(a1 + 15872);
  sub_10010E31C(v1);
  return v2;
}

void sub_100108DF4(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1987];
  char v11 = v2;
  int v3 = a1 + 1988;
  if (v2 != a1 + 1988)
  {
    uint64_t v4 = 0LL;
    uint64_t v5 = v2;
    do
    {
      uint64_t v6 = sub_100108F48(v5[6]);
      if (!v4)
      {
        uint64_t v2 = v11;
        uint64_t v4 = v6;
      }

      if (v6)
      {
        if (__OFSUB__(v6, v4))
        {
          __break(0x5515u);
          return;
        }

        if (v6 - v4 < 0)
        {
          uint64_t v2 = v11;
          uint64_t v4 = v6;
        }
      }

      sub_10000B338((uint64_t)&v11);
      uint64_t v5 = v11;
    }

    while (v11 != v3);
  }

  if (v3 != v2)
  {
    unint64_t v7 = v2[6];
    sub_100011568((uint64_t)(a1 + 1987), v2);
    sub_100108FBC(a1, v7);
    uint64_t v8 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v8)
    {
      std::string v9 = v8;
      if (sub_10015A058(6))
      {
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t v10 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "StatCollector: Out of NodeInfo objects --> Deleted the oldest NodeInfo",  v10,  2u);
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }
  }

double sub_100108F30(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 136) = 0LL;
  *(_DWORD *)(a1 + sub_1000B7CEC(v41 - 144) = 0;
  return result;
}

uint64_t sub_100108F48(uint64_t a1)
{
  uint64_t v2 = sub_100109E44(a1);
  uint64_t v6 = v2;
  uint64_t result = sub_100109EA0(a1);
  uint64_t v5 = result;
  if (!v2)
  {
    uint64_t v4 = &v5;
    return *v4;
  }

  if (!result)
  {
    uint64_t v4 = &v6;
    return *v4;
  }

  if (!__OFSUB__(v2, result))
  {
    uint64_t v4 = &v6;
    if (v2 - result < 0) {
      uint64_t v4 = &v5;
    }
    return *v4;
  }

  __break(0x5515u);
  return result;
}

uint64_t *sub_100108FBC(uint64_t *result, unint64_t a2)
{
  unint64_t v2 = a2;
  if (a2 >= (unint64_t)result)
  {
    result += 1984;
  }

  return result;
}

int *sub_100108FF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (__n128 *)(a2 + 16);
  uint64_t result = (int *)sub_100108CE8(a1, a2 + 16);
  if (result || (uint64_t result = (int *)sub_100108D2C(a1, v4)) != 0LL)
  {
    int v6 = result[3];
    BOOL v7 = __CFADD__(v6, 1);
    int v8 = v6 + 1;
    if (!v7)
    {
      result[3] = v8;
      int v9 = *(unsigned __int8 *)(a2 + 10);
      if (v9 == 6)
      {
        int v12 = result[5];
        BOOL v7 = __CFADD__(v12, 1);
        int v13 = v12 + 1;
        if (!v7)
        {
          result[5] = v13;
          return sub_1001090A4(result + 6, (__int128 *)a2);
        }
      }

      else
      {
        if (v9 != 17) {
          return sub_1001090A4(result + 6, (__int128 *)a2);
        }
        int v10 = result[4];
        BOOL v7 = __CFADD__(v10, 1);
        int v11 = v10 + 1;
        if (!v7)
        {
          result[4] = v11;
          return sub_1001090A4(result + 6, (__int128 *)a2);
        }
      }
    }

    __break(0x5500u);
  }

  return result;
}

int *sub_1001090A4(int *result, __int128 *a2)
{
  unint64_t v2 = &result[12 * result[1]];
  __int128 v3 = *a2;
  __int128 v4 = a2[2];
  *((_OWORD *)v2 + 2) = a2[1];
  *((_OWORD *)v2 + 3) = v4;
  *((_OWORD *)v2 + 1) = v3;
  LODWORD(v2) = result[1];
  BOOL v5 = __OFADD__((_DWORD)v2, 1);
  int v6 = (_DWORD)v2 + 1;
  if (v5) {
    goto LABEL_9;
  }
  if (v6 >= 0) {
    int v7 = v6 & 1;
  }
  else {
    int v7 = -(v6 & 1);
  }
  result[1] = v7;
  int v8 = result[2];
  if (v8 == 2)
  {
    *uint64_t result = v7;
    return result;
  }

  if (__OFADD__(v8, 1)) {
LABEL_9:
  }
    __break(0x5500u);
  else {
    result[2] = v8 + 1;
  }
  return result;
}

int *sub_100109104(uint64_t a1, uint64_t a2)
{
  __int128 v4 = (__n128 *)(a2 + 32);
  uint64_t result = (int *)sub_100108CE8(a1, a2 + 32);
  if (result || (uint64_t result = (int *)sub_100108D2C(a1, v4)) != 0LL)
  {
    if (*result != -1)
    {
      ++*result;
      int v6 = *(unsigned __int8 *)(a2 + 10);
      if (v6 == 6)
      {
        int v10 = result[2];
        BOOL v8 = __CFADD__(v10, 1);
        int v11 = v10 + 1;
        if (!v8)
        {
          result[2] = v11;
          return sub_1001090A4(result + 34, (__int128 *)a2);
        }
      }

      else
      {
        if (v6 != 17) {
          return sub_1001090A4(result + 34, (__int128 *)a2);
        }
        int v7 = result[1];
        BOOL v8 = __CFADD__(v7, 1);
        int v9 = v7 + 1;
        if (!v8)
        {
          result[1] = v9;
          return sub_1001090A4(result + 34, (__int128 *)a2);
        }
      }
    }

    __break(0x5500u);
  }

  return result;
}

void sub_1001091B0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_10000AC00(__p, "========================================================");
  sub_100044B24(a2, (uint64_t)__p);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  sub_100108154((void *)(*(void *)a3 + 32LL), &v7);
  BOOL v5 = std::string::insert(&v7, 0LL, "Address: ");
  __int128 v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  std::string::size_type cap = v5->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v6;
  v5->__r_.__value_.__l.__size_ = 0LL;
  v5->__r_.__value_.__l.__cap_ = 0LL;
  v5->__r_.__value_.__r.__words[0] = 0LL;
  sub_100044B24(a2, (uint64_t)__p);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  sub_1001092F4(*(void *)(*(void *)a3 + 48LL), (char **)a2);
  sub_10000AC00(__p, "");
  sub_100044B24(a2, (uint64_t)__p);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1001092A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001092F4(uint64_t a1, char **a2)
{
  if (*(_DWORD *)(a1 + 144))
  {
    sub_100108290("\tLast %d tx packets", __p, *(unsigned int *)(a1 + 144));
    sub_100044B24((uint64_t *)a2, (uint64_t)__p);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v4 = sub_100109E64(a1 + 136);
    if (v4)
    {
      uint64_t v5 = v4;
      while (1)
      {
        sub_1001086E8(v5, &v12);
        __int128 v6 = std::string::insert(&v12, 0LL, "\t");
        __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        std::string::size_type cap = v6->__r_.__value_.__l.__cap_;
        *(_OWORD *)std::string __p = v7;
        v6->__r_.__value_.__l.__size_ = 0LL;
        v6->__r_.__value_.__l.__cap_ = 0LL;
        v6->__r_.__value_.__r.__words[0] = 0LL;
        sub_100044B24((uint64_t *)a2, (uint64_t)__p);
        if (SHIBYTE(cap) < 0) {
          operator delete(__p[0]);
        }
        if (v5 == a1 + 152) {
          uint64_t v5 = a1 + 200;
        }
        else {
          v5 -= 48LL;
        }
      }
    }
  }

  sub_10000AC00(__p, "");
  sub_100044B24((uint64_t *)a2, (uint64_t)__p);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  sub_100109C50((unsigned int *)a1, a2, 0);
  if (*(_DWORD *)(a1 + 32))
  {
    sub_100108290("\tLast %d rx packets", __p, *(unsigned int *)(a1 + 32));
    sub_100044B24((uint64_t *)a2, (uint64_t)__p);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = sub_100109E64(a1 + 24);
    if (v8)
    {
      uint64_t v9 = v8;
      while (1)
      {
        sub_1001086E8(v9, &v12);
        int v10 = std::string::insert(&v12, 0LL, "\t");
        __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
        std::string::size_type cap = v10->__r_.__value_.__l.__cap_;
        *(_OWORD *)std::string __p = v11;
        v10->__r_.__value_.__l.__size_ = 0LL;
        v10->__r_.__value_.__l.__cap_ = 0LL;
        v10->__r_.__value_.__r.__words[0] = 0LL;
        sub_100044B24((uint64_t *)a2, (uint64_t)__p);
        if (SHIBYTE(cap) < 0) {
          operator delete(__p[0]);
        }
        if (v9 == a1 + 40) {
          uint64_t v9 = a1 + 88;
        }
        else {
          v9 -= 48LL;
        }
      }
    }
  }

void sub_100109548( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001095A0(uint64_t a1, uint64_t *a2, std::string *__str)
{
  __int128 v3 = __str;
  uint64_t v5 = (void *)a1;
  char v24 = 0LL;
  std::string::size_type size = __str->__r_.__value_.__s.__size_;
  if ((char)__str->__r_.__value_.__s.__size_ < 0)
  {
    if (!__str->__r_.__value_.__l.__size_) {
      goto LABEL_10;
    }
    __int128 v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }

  else
  {
    __int128 v7 = __str;
    if (!__str->__r_.__value_.__s.__size_)
    {
LABEL_10:
      uint64_t v9 = *(void **)(a1 + 15896);
      char v24 = v9;
      uint64_t v10 = a1 + 15904;
      while (v9 != (void *)v10)
      {
        sub_1001091B0(a1, a2, (uint64_t)&v24);
        a1 = sub_10000B338((uint64_t)&v24);
        uint64_t v9 = v24;
      }

      return;
    }
  }

  int v8 = v7->__r_.__value_.__s.__data_[0];
  if (v8 != 91 && v8 != 64)
  {
    __int128 v11 = __str;
    if ((size & 0x80) != 0) {
      __int128 v11 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    uint64_t v12 = strtol((const char *)v11, 0LL, 0);
    if ((unint64_t)(int)v12 < v5[1989])
    {
      char v24 = (void *)v5[1987];
      uint64_t v13 = sub_10010E4C0((uint64_t)&v24, (int)v12);
      sub_1001091B0(v13, a2, (uint64_t)&v24);
      return;
    }

    sub_100108290("Error: Out of bound index %d ('%s')", __p, v12, v3);
    sub_100044B24(a2, (uint64_t)__p);
    goto LABEL_51;
  }

  __p[0] = 0LL;
  __p[1] = 0LL;
  uint64_t v23 = 0LL;
  if (v8 == 64)
  {
    std::string::basic_string(&v21, __str, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v20);
  }

  else
  {
    if ((size & 0x80) != 0) {
      std::string::size_type v14 = __str->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type v14 = size;
    }
    BOOL v15 = v14 != 0;
    std::string::size_type v16 = v14 - 1;
    if (!v15) {
      goto LABEL_54;
    }
    unsigned int v17 = __str;
    if ((size & 0x80) != 0) {
      unsigned int v17 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    if (v17->__r_.__value_.__s.__data_[v16] != 93)
    {
      if ((size & 0x80) != 0) {
        __int128 v3 = (std::string *)__str->__r_.__value_.__r.__words[0];
      }
      sub_100108290("Error : Missing ']' in address format ('%s')", &v21, v3);
      sub_100044B24(a2, (uint64_t)&v21);
      goto LABEL_49;
    }

    if ((size & 0x80) != 0) {
      std::string::size_type size = __str->__r_.__value_.__l.__size_;
    }
    if (size < 2)
    {
LABEL_54:
      __break(0x5515u);
      return;
    }

    std::string::basic_string(&v21, __str, 1uLL, size - 2, (std::allocator<char> *)&v20);
  }

  sub_100014D08((uint64_t)__p, (__int128 *)&v21);
  if (v23 >= 0) {
    uint64_t v18 = __p;
  }
  else {
    uint64_t v18 = (void **)__p[0];
  }
  if (inet_pton(30, (const char *)v18, &v25) < 1)
  {
    sub_100108290("Error : Improper address format ('%s')", &v21, v3);
    sub_100044B24(a2, (uint64_t)&v21);
    goto LABEL_49;
  }

  __int128 v20 = v25;
  int v19 = sub_10010E218((uint64_t)(v5 + 1987), (uint64_t)&v20);
  char v24 = v19;
  if (v5 + 1988 == v19)
  {
    sub_100108290("Error : Address does not exist ('%s')", &v21, v3);
    sub_100044B24(a2, (uint64_t)&v21);
LABEL_49:
    goto LABEL_51;
  }

  sub_1001091B0((uint64_t)v19, a2, (uint64_t)&v24);
LABEL_51:
  if (SHIBYTE(v23) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100109894( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001098F8(uint64_t result, uint64_t *a2)
{
  uint64_t v9 = *(void *)(result + 15896);
  for (i = result + 15904; v9 != i; uint64_t result = sub_10000B338((uint64_t)&v9))
  {
    sub_10000AC00(__p, "========================================================");
    sub_100044B24(a2, (uint64_t)__p);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    sub_100108154((void *)(v9 + 32), &v6);
    uint64_t v4 = std::string::insert(&v6, 0LL, "Address: ");
    __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type cap = v4->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v5;
    v4->__r_.__value_.__l.__size_ = 0LL;
    v4->__r_.__value_.__l.__cap_ = 0LL;
    v4->__r_.__value_.__r.__words[0] = 0LL;
    sub_100044B24(a2, (uint64_t)__p);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    sub_100109A98(*(unsigned int **)(v9 + 48), (char **)a2, 1);
    sub_100109C50(*(unsigned int **)(v9 + 48), (char **)a2, 1);
    sub_10000AC00(__p, "");
    sub_100044B24(a2, (uint64_t)__p);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
  }

  return result;
}

void sub_100109A4C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100109A98(unsigned int *a1, char **a2, int a3)
{
  uint64_t v3 = *a1;
  if ((_DWORD)v3)
  {
    __int128 v5 = "s";
    if ((_DWORD)v3 == 1) {
      __int128 v5 = "";
    }
    uint64_t v6 = a1[1];
    unsigned int v7 = v3 - v6;
    if (v3 < v6
      || (v8 = a1[2], BOOL v9 = v7 >= v8, v10 = v7 - v8, !v9))
    {
      __break(0x5515u);
      return;
    }

    uint64_t v13 = "were";
    if ((_DWORD)v3 == 1) {
      uint64_t v13 = "was";
    }
    sub_100108290("%d packet%s (%d udp, %d tcp, %d other) %s sent to this address", __p, v3, v5, v6, v8, v10, v13);
    sub_100014D08((uint64_t)&v20, (__int128 *)__p);
    if (SHIBYTE(cap) < 0)
    {
      operator delete(__p[0]);
      if (!a3) {
        goto LABEL_18;
      }
    }

    else if (!a3)
    {
LABEL_18:
      sub_10000C6E4(a2, &v20);
      return;
    }

    uint64_t v17 = sub_100109EA0((uint64_t)a1);
    if (v17)
    {
      sub_100108454(&v17, &v16);
      std::string::size_type v14 = std::string::insert(&v16, 0LL, " - last tx happened ");
      __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      std::string::size_type cap = v14->__r_.__value_.__l.__cap_;
      *(_OWORD *)std::string __p = v15;
      v14->__r_.__value_.__l.__size_ = 0LL;
      v14->__r_.__value_.__l.__cap_ = 0LL;
      v14->__r_.__value_.__r.__words[0] = 0LL;
      sub_10000D650(&v20, (const std::string::value_type *)__p);
      if (SHIBYTE(cap) < 0) {
        operator delete(__p[0]);
      }
    }

    goto LABEL_18;
  }

void sub_100109BFC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100109C50(unsigned int *a1, char **a2, int a3)
{
  uint64_t v3 = a1[3];
  if ((_DWORD)v3)
  {
    __int128 v5 = "s";
    if ((_DWORD)v3 == 1) {
      __int128 v5 = "";
    }
    uint64_t v6 = a1[4];
    unsigned int v7 = v3 - v6;
    if (v3 < v6
      || (v8 = a1[5], BOOL v9 = v7 >= v8, v10 = v7 - v8, !v9))
    {
      __break(0x5515u);
      return;
    }

    uint64_t v13 = "were";
    if ((_DWORD)v3 == 1) {
      uint64_t v13 = "was";
    }
    sub_100108290("%d packet%s (%d udp, %d tcp, %d other) %s received from this address", __p, v3, v5, v6, v8, v10, v13);
    sub_100014D08((uint64_t)&v20, (__int128 *)__p);
    if (SHIBYTE(cap) < 0)
    {
      operator delete(__p[0]);
      if (!a3) {
        goto LABEL_18;
      }
    }

    else if (!a3)
    {
LABEL_18:
      sub_10000C6E4(a2, &v20);
      return;
    }

    uint64_t v17 = sub_100109E44((uint64_t)a1);
    if (v17)
    {
      sub_100108454(&v17, &v16);
      std::string::size_type v14 = std::string::insert(&v16, 0LL, " - last rx happened ");
      __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      std::string::size_type cap = v14->__r_.__value_.__l.__cap_;
      *(_OWORD *)std::string __p = v15;
      v14->__r_.__value_.__l.__size_ = 0LL;
      v14->__r_.__value_.__l.__cap_ = 0LL;
      v14->__r_.__value_.__r.__words[0] = 0LL;
      sub_10000D650(&v20, (const std::string::value_type *)__p);
      if (SHIBYTE(cap) < 0) {
        operator delete(__p[0]);
      }
    }

    goto LABEL_18;
  }

void sub_100109DB4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100109E08(uint64_t a1)
{
  return a1;
}

uint64_t sub_100109E44(uint64_t a1)
{
  uint64_t result = sub_100109E64(a1 + 24);
  if (result) {
    return *(void *)result;
  }
  return result;
}

uint64_t sub_100109E64(uint64_t result)
{
  if (!*(_DWORD *)(result + 8)) {
    return 0LL;
  }
  int v1 = *(_DWORD *)(result + 4);
  if (v1)
  {
    BOOL v2 = __OFSUB__(v1, 1);
    int v3 = v1 - 1;
    if (v2) {
      __break(0x5515u);
    }
    else {
      result += 48LL * v3 + 16;
    }
  }

  else
  {
    result += 64LL;
  }

  return result;
}

uint64_t sub_100109EA0(uint64_t a1)
{
  uint64_t result = sub_100109E64(a1 + 136);
  if (result) {
    return *(void *)result;
  }
  return result;
}

uint64_t sub_100109EC0(uint64_t result)
{
  *(void *)(result + 8) = 0LL;
  *(_WORD *)uint64_t result = -256;
  return result;
}

__darwin_time_t sub_100109ED0(uint64_t a1, char a2, char a3, char a4)
{
  *(_BYTE *)a1 = a2;
  *(_BYTE *)(a1 + 1) = a4 & 0xF | (16 * a3);
  __darwin_time_t result = sub_10014314C();
  if (result) {
    uint64_t v6 = result;
  }
  else {
    uint64_t v6 = -1LL;
  }
  *(void *)(a1 + 8) = v6;
  return result;
}

uint64_t sub_100109F08(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_100109F10(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1) >> 4;
}

uint64_t sub_100109F1C(uint64_t a1)
{
  return *(_BYTE *)(a1 + 1) & 0xF;
}

void sub_100109F28(char *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *((void *)a1 + 1);
  uint64_t v4 = a1 + 8;
  if (v5)
  {
    sub_100108454(v4, &v10);
    sub_100108290( "-> RSSI: %-6d  LinkQuality(Incoming/Outgoing): %d/%d",  __p,  *a1,  a1[1] >> 4,  a1[1] & 0xF);
    uint64_t v6 = sub_10000D650(&v10, (const std::string::value_type *)__p);
    __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    a2[2] = v6->__r_.__value_.__l.__cap_;
    *(_OWORD *)a2 = v7;
    v6->__r_.__value_.__l.__size_ = 0LL;
    v6->__r_.__value_.__l.__cap_ = 0LL;
    v6->__r_.__value_.__r.__words[0] = 0LL;
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }

  else
  {
    sub_10000AC00(a2, "Uninitialized");
  }

void sub_100109FE8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10010A01C(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  sub_10010E534(a1 + 8);
  *(void *)(a1 + 8) = 0LL;
  *(_DWORD *)(a1 + 16) = 0;
  return a1;
}

uint64_t sub_10010A04C(uint64_t result)
{
  *(void *)(result + 8) = 0LL;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

BOOL sub_10010A05C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 0;
}

void sub_10010A06C(uint64_t a1, uint64_t *a2, int a3)
{
  int v3 = a3;
  if (!a3) {
    int v3 = *(_DWORD *)(a1 + 16);
  }
  uint64_t v6 = sub_10010A1C8(a1 + 8);
  if (v6 && v3)
  {
    __int128 v7 = (char *)v6;
    while (1)
    {
      sub_100109F28(v7, &v15);
      uint64_t v8 = std::string::insert(&v15, 0LL, "\t");
      __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      std::string::size_type cap = v8->__r_.__value_.__l.__cap_;
      *(_OWORD *)std::string __p = v9;
      v8->__r_.__value_.__l.__size_ = 0LL;
      v8->__r_.__value_.__l.__cap_ = 0LL;
      v8->__r_.__value_.__r.__words[0] = 0LL;
      sub_100044B24(a2, (uint64_t)__p);
      if (SHIBYTE(cap) < 0) {
        operator delete(__p[0]);
      }
      if (__OFSUB__(v3--, 1)) {
        break;
      }
      uint64_t v11 = a1 + 8 + 16LL * *(int *)(a1 + 8) + 16;
      uint64_t v12 = v7 - 16;
      BOOL v13 = v7 == (char *)v11;
      else {
        __int128 v7 = v12;
      }
      if (v13 || v3 == 0) {
        return;
      }
    }

    __break(0x5515u);
  }

void sub_10010A174( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10010A1A8(uint64_t a1)
{
  uint64_t result = sub_10010A1C8(a1 + 8);
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

uint64_t sub_10010A1C8(uint64_t result)
{
  if (!*(_DWORD *)(result + 8)) {
    return 0LL;
  }
  int v1 = *(_DWORD *)(result + 4);
  if (v1)
  {
    BOOL v2 = __OFSUB__(v1, 1);
    int v3 = v1 - 1;
    if (v2) {
      __break(0x5515u);
    }
    else {
      result += 16LL * v3 + 16;
    }
  }

  else
  {
    result += 640LL;
  }

  return result;
}

int64x2_t *sub_10010A200(uint64_t a1)
{
  int v1 = (void *)(a1 + 42520);
  uint64_t result = sub_10010E560(a1);
  v1[2] = 0LL;
  v1[1] = 0LL;
  void *v1 = v1 + 1;
  return result;
}

void *sub_10010A238(uint64_t a1)
{
  return sub_10010A264(a1);
}

void *sub_10010A264(uint64_t a1)
{
  BOOL v2 = (uint64_t *)(a1 + 42496);
  sub_10010E010((uint64_t *)(a1 + 42496));
  uint64_t v6 = a1 + 41832;
  int v3 = -64;
  do
  {
    uint64_t result = sub_10010E134(v2, &v6);
    v6 -= 664LL;
  }

  while (!__CFADD__(v3++, 1));
  return result;
}

uint64_t sub_10010A2C8(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = sub_10010E5C4(a1 + 42520, a2);
  if (a1 + 42528 == v3) {
    return 0LL;
  }
  else {
    return *(void *)(v3 + 40);
  }
}

uint64_t sub_10010A30C(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10010A388(a1);
  if (!v4)
  {
    do
    {
      sub_10010A3D4((uint64_t *)a1);
      uint64_t v5 = sub_10010A388(a1);
    }

    while (!v5);
    uint64_t v4 = v5;
  }

  *(void *)(v4 + 8) = 0LL;
  *(_DWORD *)(v4 + 16) = 0;
  v7[0] = *a2;
  v7[1] = v4;
  sub_10010E674((uint64_t **)(a1 + 42520), v7, v7);
  return v4;
}

uint64_t sub_10010A388(uint64_t a1)
{
  if (!*(void *)(a1 + 42512)) {
    return 0LL;
  }
  uint64_t v1 = a1 + 42496;
  uint64_t v2 = *(void *)sub_100070DA0(a1 + 42496);
  sub_10010E31C(v1);
  return v2;
}

void sub_10010A3D4(uint64_t *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 5315);
  uint64_t v3 = (uint64_t *)a1[5315];
  uint64_t v12 = v3;
  uint64_t v4 = a1 + 5316;
  if (v3 != a1 + 5316)
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = v3;
    do
    {
      uint64_t v7 = sub_10010A1A8(v6[5]);
      if (!v5)
      {
        uint64_t v3 = v12;
        uint64_t v5 = v7;
      }

      if (v7)
      {
        if (__OFSUB__(v7, v5))
        {
          __break(0x5515u);
          return;
        }

        if (v7 - v5 < 0)
        {
          uint64_t v3 = v12;
          uint64_t v5 = v7;
        }
      }

      sub_10000B338((uint64_t)&v12);
      uint64_t v6 = v12;
    }

    while (v12 != v4);
  }

  if (v4 != v3)
  {
    unint64_t v8 = v3[5];
    sub_100011568(v2, v3);
    sub_10010A51C(a1, v8);
    __int128 v9 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v9)
    {
      std::string v10 = v9;
      if (sub_10015A058(6))
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t v11 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "StatCollector: Out of LinkInfo objects --> Deleted the oldest LinkInfo",  v11,  2u);
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }
  }

uint64_t *sub_10010A51C(uint64_t *result, unint64_t a2)
{
  unint64_t v2 = a2;
  if (a2 >= (unint64_t)result)
  {
    result += 5312;
  }

  return result;
}

uint64_t sub_10010A558(uint64_t result, unsigned int *a2, char a3, char a4, char a5, int a6)
{
  if (a2)
  {
    uint64_t v10 = result;
    sub_100108248(&v14, a2);
    LOBYTE(v15) = a3;
    BYTE1(v15) = a5 & 0xF | (16 * a4);
    __darwin_time_t v11 = sub_10014314C();
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = -1LL;
    }
    *((void *)&v15 + 1) = v12;
    BOOL v13 = (_DWORD *)sub_10010A2C8(v10, &v14);
    if (v13 || (uint64_t result = sub_10010A30C(v10, &v14), (v13 = (_DWORD *)result) != 0LL))
    {
      uint64_t result = (uint64_t)sub_10010A5FC(v13 + 2, &v15);
      *BOOL v13 = a6;
    }
  }

  return result;
}

int *sub_10010A5FC(int *result, _OWORD *a2)
{
  *(_OWORD *)&result[4 * result[1] + 4] = *a2;
  int v2 = result[1];
  BOOL v3 = __OFADD__(v2, 1);
  int v4 = v2 + 1;
  if (v3) {
    goto LABEL_6;
  }
  int v5 = v4 % 40;
  result[1] = v5;
  int v6 = result[2];
  if (v6 == 40)
  {
    *uint64_t result = v5;
    return result;
  }

  if (__OFADD__(v6, 1)) {
LABEL_6:
  }
    __break(0x5500u);
  else {
    result[2] = v6 + 1;
  }
  return result;
}

uint64_t sub_10010A664(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v18 = *(void *)(result + 42520);
  for (i = result + 42528; v18 != i; uint64_t result = sub_10000B338((uint64_t)&v18))
  {
    sub_10000AC00(&v16, "========================================================");
    sub_100044B24(a2, (uint64_t)&v16);
    if (SHIBYTE(cap) < 0) {
      operator delete((void *)v16);
    }
    sub_100108290("%08X%08X", &v13, *(unsigned int *)(v18 + 32), *(unsigned int *)(v18 + 36));
    int v6 = std::string::insert(&v13, 0LL, "EUI64 address: ");
    __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0LL;
    v6->__r_.__value_.__l.__cap_ = 0LL;
    v6->__r_.__value_.__r.__words[0] = 0LL;
    unint64_t v8 = std::string::append(&v14, " -  Node type: ");
    __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0LL;
    v8->__r_.__value_.__l.__cap_ = 0LL;
    v8->__r_.__value_.__r.__words[0] = 0LL;
    sub_1000B51B4(**(_DWORD **)(v18 + 40), &__p);
    uint64_t v10 = sub_10000D650(&v15, (const std::string::value_type *)&__p);
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    std::string::size_type cap = v10->__r_.__value_.__l.__cap_;
    __int128 v16 = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    sub_100044B24(a2, (uint64_t)&v16);
    if (SHIBYTE(cap) < 0) {
      operator delete((void *)v16);
    }
    sub_10010A06C(*(void *)(v18 + 40), a2, a3);
    sub_10000AC00(&v16, "");
    sub_100044B24(a2, (uint64_t)&v16);
    if (SHIBYTE(cap) < 0) {
      operator delete((void *)v16);
    }
  }

  return result;
}

void sub_10010A858( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10010A8EC(uint64_t a1)
{
  *(void *)a1 = off_1002B36B8;
  *(_WORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_WORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 60) = 0;
  sub_10010E7DC(a1 + 64);
  sub_10010E7DC(a1 + 2384);
  sub_10010E7FC(a1 + 4704);
  sub_10010E81C(a1 + 5744);
  *(void *)(a1 + 6792) = 0LL;
  sub_100108C2C(a1 + 6800);
  sub_10010A200(a1 + 22720);
  sub_100142AC8(a1 + 65264);
  uint64_t result = sub_100142AC8(a1 + 65336);
  *(void *)(a1 + 8) = 0LL;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_BYTE *)(a1 + 6784) = 1;
  *(_DWORD *)(a1 + 65424) = 6;
  *(void *)(a1 + 65416) = 0x600000002LL;
  if (is_mul_ok(0xEA60uLL, 0x1EuLL))
  {
    *(void *)(a1 + 65408) = 1800000LL;
    sub_10010AA58(a1);
    return a1;
  }

  else
  {
    __break(0x550Cu);
  }

  return result;
}

void sub_10010AA14(_Unwind_Exception *a1)
{
}

void sub_10010AA58(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 65408);
  int v3 = *(_DWORD *)(a1 + 65416);
  uint64_t v4 = (void *)(a1 + 65264);
  if (v3)
  {
    uint64_t v5 = *v2;
    v6[2] = 0LL;
    v6[3] = a1;
    v6[0] = (uint64_t)off_1002B3728 + 1;
    v6[1] = (uint64_t)sub_10010DBA4;
    sub_100142BE0((uint64_t)v4, v5, v6, 2);
    sub_10004BFBC(v6);
    sub_10010DBA4(a1);
  }

  else
  {
    sub_100142D88(v4);
  }

void sub_10010AAE0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10010AAF4(uint64_t a1)
{
  return a1;
}

uint64_t sub_10010AB2C(uint64_t a1)
{
  return a1;
}

uint64_t *sub_10010AB68(uint64_t *a1)
{
  *a1 = (uint64_t)off_1002B36B8;
  uint64_t v2 = a1 + 8158;
  sub_100142D88(a1 + 8158);
  sub_100142BC8(a1 + 8167);
  sub_100142BC8(v2);
  sub_10000D0D4((uint64_t)(a1 + 8155));
  sub_10010E010(a1 + 8152);
  sub_10000D0D4((uint64_t)(a1 + 2837));
  sub_10010E070(a1 + 2834);
  return a1;
}

void sub_10010ABF0(uint64_t *a1)
{
  uint64_t v1 = sub_10010AB68(a1);
  operator delete(v1);
}

void sub_10010AC04(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2)
    {
      *(void *)&__int128 v12 = sub_10010AD80;
      *((void *)&v12 + 1) = 0LL;
      uint64_t v13 = a1;
      sub_10010AD58(v2 + 104, &v12);
      uint64_t v5 = *(void *)(a1 + 8) + 8LL;
      *(void *)&__int128 v12 = sub_10010AE80;
      *((void *)&v12 + 1) = 0LL;
      uint64_t v13 = a1;
      sub_10010AE58(v5, &v12);
    }

    *(void *)(a1 + 8) = a2;
    if (a2)
    {
      __int128 v9 = sub_10010AD80;
      uint64_t v10 = 0LL;
      uint64_t v11 = a1;
      sub_10010ED38(&v12, (uint64_t)&v9);
      sub_10000EEB4(a2 + 104, (uint64_t)&v12, 0, &v15);
      sub_10000EF74(&v16);
      sub_10000EFC4(v14);
      uint64_t v17 = (void **)&v12;
      sub_10000EFEC(&v17);
      uint64_t v6 = *(void *)(a1 + 8) + 8LL;
      __int128 v9 = sub_10010AE80;
      uint64_t v10 = 0LL;
      uint64_t v11 = a1;
      sub_10010EED0(&v12, (uint64_t)&v9);
      sub_10001BF28(v6, (uint64_t)&v12, 0, &v7);
      sub_10000EF74(&v8);
      sub_10002B7E4(v14);
      uint64_t v17 = (void **)&v12;
      sub_10000EFEC(&v17);
    }
  }

void sub_10010AD34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t *sub_10010AD58(uint64_t a1, __int128 *a2)
{
  int v3 = (void *)sub_10000F38C((uint64_t *)(a1 + 8));
  return sub_10010E844(v3, a2);
}

void sub_10010AD80(uint64_t a1, char *a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  if (a2[23] < 0) {
    uint64_t v4 = *(const char **)a2;
  }
  if (!strcasecmp(v4, "NCP:State"))
  {
    sub_100147B4C(a3, &__p);
    int v7 = sub_1000B5828(&__p);
    sub_10010B2F8(a1, v7);
  }

  else if (!strcasecmp(v4, "Daemon:ReadyForHostSleep"))
  {
    BOOL v6 = sub_1001478B8(a3);
    sub_10010B39C(a1, v6);
  }

void sub_10010AE3C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10010AE58(uint64_t a1, __int128 *a2)
{
  int v3 = (void *)sub_10002BF58((uint64_t *)(a1 + 8));
  return sub_10010EA74(v3, a2);
}

void sub_10010AE80(uint64_t a1, uint64_t *a2)
{
  int v3 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v3)
  {
    uint64_t v4 = v3;
    if (sub_10015A058(5) && os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      else {
        uint64_t v5 = (uint64_t *)*a2;
      }
      int v6 = *((unsigned __int16 *)a2 + 16);
      int v7 = *((unsigned __int8 *)a2 + 34);
      unint64_t v8 = "YES";
      if (!*((_BYTE *)a2 + 35)) {
        unint64_t v8 = "NO";
      }
      int v9 = *((unsigned __int8 *)a2 + 24);
      int v10 = *((unsigned __int8 *)a2 + 25);
      int v11 = *((unsigned __int8 *)a2 + 26);
      int v12 = *((unsigned __int8 *)a2 + 27);
      int v13 = *((unsigned __int8 *)a2 + 28);
      int v14 = *((unsigned __int8 *)a2 + 29);
      int v15 = *((unsigned __int8 *)a2 + 30);
      int v16 = *((unsigned __int8 *)a2 + 31);
      int v17 = *((unsigned __int8 *)a2 + 39);
      int v18 = *((unsigned __int8 *)a2 + 40);
      int v19 = *((unsigned __int8 *)a2 + 41);
      int v20 = *((unsigned __int8 *)a2 + 42);
      int v21 = *((unsigned __int8 *)a2 + 43);
      int v22 = *((unsigned __int8 *)a2 + 44);
      int v23 = *((unsigned __int8 *)a2 + 45);
      int v24 = *((unsigned __int8 *)a2 + 46);
      int v25 = *((char *)a2 + 36);
      int v26 = *((unsigned __int8 *)a2 + 37);
      int v27 = *((unsigned __int8 *)a2 + 38);
      int v28 = *((unsigned __int8 *)a2 + 50);
      int v29 = *((unsigned __int16 *)a2 + 24);
      int v30 = 136321282;
      uint64_t v31 = v5;
      __int16 v32 = 1024;
      int v33 = v6;
      __int16 v34 = 1024;
      int v35 = v7;
      __int16 v36 = 2080;
      uint64_t v37 = v8;
      __int16 v38 = 1024;
      int v39 = v9;
      __int16 v40 = 1024;
      int v41 = v10;
      __int16 v42 = 1024;
      int v43 = v11;
      __int16 v44 = 1024;
      int v45 = v12;
      __int16 v46 = 1024;
      int v47 = v13;
      __int16 v48 = 1024;
      int v49 = v14;
      __int16 v50 = 1024;
      int v51 = v15;
      __int16 v52 = 1024;
      int v53 = v16;
      __int16 v54 = 1024;
      int v55 = v17;
      __int16 v56 = 1024;
      int v57 = v18;
      __int16 v58 = 1024;
      int v59 = v19;
      __int16 v60 = 1024;
      int v61 = v20;
      __int16 v62 = 1024;
      int v63 = v21;
      __int16 v64 = 1024;
      int v65 = v22;
      __int16 v66 = 1024;
      int v67 = v23;
      __int16 v68 = 1024;
      int v69 = v24;
      __int16 v70 = 1024;
      int v71 = v25;
      __int16 v72 = 1024;
      int v73 = v26;
      __int16 v74 = 1024;
      int v75 = v27;
      __int16 v76 = 1024;
      int v77 = v28;
      __int16 v78 = 1024;
      int v79 = v29;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Scan -> Name:%-17s, PanId:0x%04X, Ch:%2d, Joinable:%-3s, XPanId:0x%02X%02X%02X%02X%02X%02X%02X%02X, HwAddr:0x%02 X%02X%02X%02X%02X%02X%02X%02X, RSSI:%-4d, LQI:%-3d, ProtoId:%-3d, Version:%2d, ShortAddr:0x%04X ",  (uint8_t *)&v30,  0xA0u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

int *sub_10010B0D0(uint64_t a1, uint64_t a2)
{
  *(void *)&v16[0] = 0LL;
  uint64_t result = (int *)sub_100108620((uint64_t)v16, a2);
  if ((_DWORD)result)
  {
    int v4 = *(_DWORD *)(a1 + 40);
    BOOL v5 = __CFADD__(v4, 1);
    int v6 = v4 + 1;
    if (!v5)
    {
      *(_DWORD *)(a1 + 40) = v6;
      switch(BYTE10(v16[0]))
      {
        case 6u:
          int v9 = *(_DWORD *)(a1 + 24);
          BOOL v5 = __CFADD__(v9, 1);
          int v10 = v9 + 1;
          if (v5) {
            goto LABEL_15;
          }
          *(_DWORD *)(a1 + 24) = v10;
          break;
        case 0x3Au:
          int v11 = *(_DWORD *)(a1 + 28);
          BOOL v5 = __CFADD__(v11, 1);
          int v12 = v11 + 1;
          if (v5) {
            goto LABEL_15;
          }
          *(_DWORD *)(a1 + 28) = v12;
          break;
        case 0x11u:
          int v7 = *(_DWORD *)(a1 + 20);
          BOOL v5 = __CFADD__(v7, 1);
          int v8 = v7 + 1;
          if (v5) {
            goto LABEL_15;
          }
          *(_DWORD *)(a1 + 20) = v8;
          break;
      }

      unsigned int v13 = *(unsigned __int16 *)(a1 + 56) + WORD4(v16[0]);
      int v14 = *(_DWORD *)(a1 + 60);
      BOOL v5 = __CFADD__(v14, v13 >> 10);
      int v15 = v14 + (v13 >> 10);
      if (!v5)
      {
        *(_DWORD *)(a1 + 60) = v15;
        *(_WORD *)(a1 + 56) = v13 & 0x3FF;
        sub_10010B1AC((int *)(a1 + 64), v16);
        return sub_100108FF8(a1 + 6800, (uint64_t)v16);
      }
    }

int *sub_10010B1AC(int *result, __int128 *a2)
{
  uint64_t v2 = &result[12 * result[1]];
  __int128 v3 = *a2;
  __int128 v4 = a2[2];
  *((_OWORD *)v2 + 2) = a2[1];
  *((_OWORD *)v2 + 3) = v4;
  *((_OWORD *)v2 + 1) = v3;
  LODWORD(v2) = result[1];
  BOOL v5 = __OFADD__((_DWORD)v2, 1);
  int v6 = (_DWORD)v2 + 1;
  if (v5) {
    goto LABEL_6;
  }
  int v7 = v6 % 48;
  result[1] = v6 % 48;
  int v8 = result[2];
  if (v8 == 48)
  {
    *uint64_t result = v7;
    return result;
  }

  if (__OFADD__(v8, 1)) {
LABEL_6:
  }
    __break(0x5500u);
  else {
    result[2] = v8 + 1;
  }
  return result;
}

int *sub_10010B21C(uint64_t a1, uint64_t a2)
{
  *(void *)&v16[0] = 0LL;
  uint64_t result = (int *)sub_100108620((uint64_t)v16, a2);
  if ((_DWORD)result)
  {
    int v4 = *(_DWORD *)(a1 + 16);
    BOOL v5 = __CFADD__(v4, 1);
    int v6 = v4 + 1;
    if (!v5)
    {
      *(_DWORD *)(a1 + 16) = v6;
      switch(BYTE10(v16[0]))
      {
        case 6u:
          int v9 = *(_DWORD *)(a1 + 48);
          BOOL v5 = __CFADD__(v9, 1);
          int v10 = v9 + 1;
          if (v5) {
            goto LABEL_15;
          }
          *(_DWORD *)(a1 + 48) = v10;
          break;
        case 0x3Au:
          int v11 = *(_DWORD *)(a1 + 52);
          BOOL v5 = __CFADD__(v11, 1);
          int v12 = v11 + 1;
          if (v5) {
            goto LABEL_15;
          }
          *(_DWORD *)(a1 + 52) = v12;
          break;
        case 0x11u:
          int v7 = *(_DWORD *)(a1 + 44);
          BOOL v5 = __CFADD__(v7, 1);
          int v8 = v7 + 1;
          if (v5) {
            goto LABEL_15;
          }
          *(_DWORD *)(a1 + 44) = v8;
          break;
      }

      unsigned int v13 = *(unsigned __int16 *)(a1 + 32) + WORD4(v16[0]);
      int v14 = *(_DWORD *)(a1 + 36);
      BOOL v5 = __CFADD__(v14, v13 >> 10);
      int v15 = v14 + (v13 >> 10);
      if (!v5)
      {
        *(_DWORD *)(a1 + 36) = v15;
        *(_WORD *)(a1 + 32) = v13 & 0x3FF;
        sub_10010B1AC((int *)(a1 + 2384), v16);
        return sub_100109104(a1 + 6800, (uint64_t)v16);
      }
    }

int *sub_10010B2F8(uint64_t a1, int a2)
{
  __darwin_time_t v4 = sub_10014314C();
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = -1LL;
  }
  *((void *)&v7 + 1) = v5;
  LODWORD(v7) = a2;
  return sub_10010B344((int *)(a1 + 4704), &v7);
}

int *sub_10010B344(int *result, _OWORD *a2)
{
  *(_OWORD *)&result[4 * result[1] + 4] = *a2;
  int v2 = result[1];
  BOOL v3 = __OFADD__(v2, 1);
  int v4 = v2 + 1;
  if (v3) {
    goto LABEL_8;
  }
  BOOL v5 = -v4 < 0;
  int v6 = -v4 & 0x3F;
  int v7 = v4 & 0x3F;
  if (!v5) {
    int v7 = -v6;
  }
  result[1] = v7;
  int v8 = result[2];
  if (v8 == 64)
  {
    *uint64_t result = v7;
    return result;
  }

  if (__OFADD__(v8, 1)) {
LABEL_8:
  }
    __break(0x5500u);
  else {
    result[2] = v8 + 1;
  }
  return result;
}

__darwin_time_t sub_10010B39C(__darwin_time_t result, int a2)
{
  int v2 = (_BYTE *)(result + 6784);
  if (*(unsigned __int8 *)(result + 6784) != a2)
  {
    char v3 = a2;
    __darwin_time_t v4 = result;
    if (a2)
    {
      *(void *)&__int128 v8 = *(void *)(result + 6792);
      __darwin_time_t v5 = sub_10014314C();
      if (v5) {
        uint64_t v6 = v5;
      }
      else {
        uint64_t v6 = -1LL;
      }
      *((void *)&v8 + 1) = v6;
      uint64_t result = (__darwin_time_t)sub_10010B344((int *)(v4 + 5744), &v8);
    }

    else
    {
      uint64_t result = sub_10014314C();
      if (result) {
        uint64_t v7 = result;
      }
      else {
        uint64_t v7 = -1LL;
      }
      *(void *)(v4 + 6792) = v7;
    }

    *int v2 = v3;
  }

  return result;
}

void sub_10010B424(uint64_t a1, uint64_t *a2, int a3)
{
  int v3 = a3;
  if (!a3) {
    int v3 = *(_DWORD *)(a1 + 2392);
  }
  if (*(_DWORD *)(a1 + 2392))
  {
    sub_10000AC00(__p, "Tx History");
    sub_100044B24(a2, (uint64_t)__p);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    sub_10000AC00(__p, "-------------------------");
    sub_100044B24(a2, (uint64_t)__p);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v6 = sub_10010F0CC(a1 + 2384);
    if (v6 && v3)
    {
      uint64_t v7 = v6;
      while (1)
      {
        sub_1001086E8(v7, __p);
        sub_100044B24(a2, (uint64_t)__p);
        if (v14 < 0) {
          operator delete(__p[0]);
        }
        if (__OFSUB__(v3--, 1)) {
          break;
        }
        uint64_t v9 = a1 + 2384 + 48LL * *(int *)(a1 + 2384) + 16;
        uint64_t v10 = v7 - 48;
        if (v7 == a1 + 2400) {
          uint64_t v10 = a1 + 4656;
        }
        BOOL v11 = v7 == v9;
        if (v7 == v9) {
          uint64_t v7 = 0LL;
        }
        else {
          uint64_t v7 = v10;
        }
        if (v11 || v3 == 0) {
          return;
        }
      }

      __break(0x5515u);
    }
  }

  else
  {
    sub_10000AC00(__p, "Tx history is empty");
    sub_100044B24(a2, (uint64_t)__p);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }

void sub_10010B588( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10010B5B0(uint64_t a1, uint64_t *a2, int a3)
{
  int v3 = a3;
  if (!a3) {
    int v3 = *(_DWORD *)(a1 + 72);
  }
  if (*(_DWORD *)(a1 + 72))
  {
    sub_10000AC00(__p, "Rx History");
    sub_100044B24(a2, (uint64_t)__p);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    sub_10000AC00(__p, "-------------------------");
    sub_100044B24(a2, (uint64_t)__p);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v6 = sub_10010F0CC(a1 + 64);
    if (v6 && v3)
    {
      uint64_t v7 = v6;
      while (1)
      {
        sub_1001086E8(v7, __p);
        sub_100044B24(a2, (uint64_t)__p);
        if (v14 < 0) {
          operator delete(__p[0]);
        }
        if (__OFSUB__(v3--, 1)) {
          break;
        }
        uint64_t v9 = a1 + 64 + 48LL * *(int *)(a1 + 64) + 16;
        uint64_t v10 = v7 - 48;
        if (v7 == a1 + 80) {
          uint64_t v10 = a1 + 2336;
        }
        BOOL v11 = v7 == v9;
        if (v7 == v9) {
          uint64_t v7 = 0LL;
        }
        else {
          uint64_t v7 = v10;
        }
        if (v11 || v3 == 0) {
          return;
        }
      }

      __break(0x5515u);
    }
  }

  else
  {
    sub_10000AC00(__p, "Rx history is empty");
    sub_100044B24(a2, (uint64_t)__p);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }

void sub_10010B710( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10010B738(uint64_t a1, uint64_t *a2, int a3)
{
  int v3 = a3;
  if (!a3) {
    int v3 = *(_DWORD *)(a1 + 4712);
  }
  if (*(_DWORD *)(a1 + 4712))
  {
    sub_10000AC00(__p, "NCP State History");
    sub_100044B24(a2, (uint64_t)__p);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    sub_10000AC00(__p, "-------------------------");
    sub_100044B24(a2, (uint64_t)__p);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v6 = sub_10010F108(a1 + 4704);
    if (v6 && v3)
    {
      uint64_t v7 = v6;
      while (1)
      {
        sub_100108A18(v7, __p);
        sub_100044B24(a2, (uint64_t)__p);
        if (v14 < 0) {
          operator delete(__p[0]);
        }
        if (__OFSUB__(v3--, 1)) {
          break;
        }
        uint64_t v9 = a1 + 4704 + 16LL * *(int *)(a1 + 4704) + 16;
        uint64_t v10 = v7 - 16;
        if (v7 == a1 + 4720) {
          uint64_t v10 = a1 + 5728;
        }
        BOOL v11 = v7 == v9;
        if (v7 == v9) {
          uint64_t v7 = 0LL;
        }
        else {
          uint64_t v7 = v10;
        }
        if (v11 || v3 == 0) {
          return;
        }
      }

      __break(0x5515u);
    }
  }

  else
  {
    sub_10000AC00(__p, "NCP state history is empty.");
    sub_100044B24(a2, (uint64_t)__p);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }

void sub_10010B8A4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10010B8CC(uint64_t a1, uint64_t *a2, int a3)
{
  int v3 = a3;
  if (!a3) {
    int v3 = *(_DWORD *)(a1 + 5752);
  }
  if (*(_DWORD *)(a1 + 5752) || !*(_BYTE *)(a1 + 6784))
  {
    sub_10000AC00(__p, "'NCP Ready For Host Sleep State' History");
    sub_100044B24(a2, (uint64_t)__p);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    sub_10000AC00(__p, "-------------------------");
    sub_100044B24(a2, (uint64_t)__p);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    if (!*(_BYTE *)(a1 + 6784))
    {
      sub_100108454((void *)(a1 + 6792), &v15);
      uint64_t v6 = std::string::append(&v15, " host sleep was blocked till now");
      __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      std::string::size_type cap = v6->__r_.__value_.__l.__cap_;
      *(_OWORD *)std::string __p = v7;
      v6->__r_.__value_.__l.__size_ = 0LL;
      v6->__r_.__value_.__l.__cap_ = 0LL;
      v6->__r_.__value_.__r.__words[0] = 0LL;
      sub_100044B24(a2, (uint64_t)__p);
      if (SHIBYTE(cap) < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v8 = sub_10010F108(a1 + 5744);
    if (v8 && v3)
    {
      uint64_t v9 = (void *)v8;
      while (1)
      {
        sub_100108B30(v9, __p);
        sub_100044B24(a2, (uint64_t)__p);
        if (SHIBYTE(cap) < 0) {
          operator delete(__p[0]);
        }
        if (__OFSUB__(v3--, 1)) {
          break;
        }
        uint64_t v11 = a1 + 5744 + 16LL * *(int *)(a1 + 5744) + 16;
        int v12 = v9 - 2;
        if (v9 == (void *)(a1 + 5760)) {
          int v12 = (void *)(a1 + 6768);
        }
        BOOL v13 = v9 == (void *)v11;
        if (v9 == (void *)v11) {
          uint64_t v9 = 0LL;
        }
        else {
          uint64_t v9 = v12;
        }
        if (v13 || v3 == 0) {
          return;
        }
      }

      __break(0x5515u);
    }
  }

  else
  {
    sub_10000AC00(__p, "'NCP Ready For Host Sleep State' history is empty.");
    sub_100044B24(a2, (uint64_t)__p);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
  }

void sub_10010BAB0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10010BB04(uint64_t a1, uint64_t *a2)
{
  __darwin_time_t v4 = "s";
  uint64_t v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5 == 1) {
    __darwin_time_t v4 = "";
  }
  sub_100108290( "Tx: %d packet%s (%d udp, %d tcp, %d icmp6) -- ",  &v10,  v5,  v4,  *(unsigned int *)(a1 + 44),  *(unsigned int *)(a1 + 48),  *(unsigned int *)(a1 + 52));
  sub_1001085C8((unsigned __int16 *)(a1 + 32), __p);
  uint64_t v6 = sub_10000D650(&v10, (const std::string::value_type *)__p);
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  std::string::size_type cap = v6->__r_.__value_.__l.__cap_;
  __int128 v11 = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  sub_100044B24(a2, (uint64_t)&v11);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v11);
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10010BBD8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_10010BC24(uint64_t a1, uint64_t *a2)
{
  __darwin_time_t v4 = "s";
  uint64_t v5 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v5 == 1) {
    __darwin_time_t v4 = "";
  }
  sub_100108290( "Rx: %d packet%s (%d udp, %d tcp, %d icmp6) -- ",  &v10,  v5,  v4,  *(unsigned int *)(a1 + 20),  *(unsigned int *)(a1 + 24),  *(unsigned int *)(a1 + 28));
  sub_1001085C8((unsigned __int16 *)(a1 + 56), __p);
  uint64_t v6 = sub_10000D650(&v10, (const std::string::value_type *)__p);
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  std::string::size_type cap = v6->__r_.__value_.__l.__cap_;
  __int128 v11 = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  sub_100044B24(a2, (uint64_t)&v11);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v11);
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10010BCF8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10010BD44(uint64_t a1, uint64_t *a2, int a3)
{
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  sub_10010BC24(a1, a2);
  sub_10010B5B0(a1, a2, a3);
  sub_10000AC00(__p, "");
  sub_100044B24(a2, (uint64_t)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  sub_10010B738(a1, a2, a3);
  sub_10000AC00(__p, "");
  sub_100044B24(a2, (uint64_t)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (a3)
  {
    sub_1001098F8(a1 + 6800, a2);
  }

  else
  {
    sub_10000AC00(&v7, "");
    sub_1001095A0(a1 + 6800, a2, &v7);
  }

  sub_10000AC00(__p, "");
  sub_100044B24(a2, (uint64_t)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  return sub_10010A664(a1 + 22720, a2, 8 * (a3 != 0));
}

void sub_10010BED0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10010BF0C(const char *a1)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  return strncasecmp(a1, "Stat:", 5uLL) == 0;
}

void sub_10010BF44(uint64_t a1, uint64_t *a2)
{
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_100108290("\t %-26s - RX statistics (all nodes)", __p, "Stat:RX");
  sub_100044B24(a2, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_100108290("\t %-26s - TX statistics (all nodes)", __p, "Stat:TX");
  sub_100044B24(a2, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_100108290("\t %-26s - RX packet info history (all nodes)", __p, "Stat:RX:History");
  sub_100044B24(a2, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_100108290("\t %-26s - TX packet info history (all nodes)", __p, "Stat:TX:History");
  sub_100044B24(a2, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_100108290("\t %-26s - Both RX & TX packet info history (all nodes)", __p, "Stat:History");
  sub_100044B24(a2, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_100108290("\t %-26s - NCP state change history", __p, "Stat:NCP");
  sub_100044B24(a2, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_100108290("\t %-26s - 'Blocking Host Sleep' state change history", __p, "Stat:BlockingHostSleep");
  sub_100044B24(a2, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_100108290("\t %-26s - List of nodes + RX/TX statistics per node", __p, "Stat:Node");
  sub_100044B24(a2, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_100108290("\t %-26s - List of nodes + RX/TX statistics and packet history per node", __p, "Stat:Node:History");
  sub_100044B24(a2, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_100108290( "\t %-26s - List of nodes + RX/TX statistics and packet history for a specific node with given IP address",  __p,  "Stat:Node:History:[<ipv6>]");
  sub_100044B24(a2, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_100108290( "\t %-26s - List of nodes + RX/TX statistics and packet history for a specific node with given index",  __p,  "Stat:Node:History:<index>");
  sub_100044B24(a2, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_100108290("\t %-26s - Peer link quality history - short version", __p, "Stat:LinkQuality:Short");
  sub_100044B24(a2, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_100108290("\t %-26s - Peer link quality history - long version", __p, "Stat:LinkQuality:Long");
  sub_100044B24(a2, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_100108290("\t %-26s - All info - short version", __p, "Stat:Short");
  sub_100044B24(a2, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_100108290("\t %-26s - All info - long version", __p, "Stat:Long");
  sub_100044B24(a2, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_100108290("\t ", __p);
  sub_100044B24(a2, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_100108290("\t %-26s - Peer link quality information - get only", __p, "Stat:LinkQuality");
  sub_100044B24(a2, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_100108290( "\t %-26s - Period interval (in seconds) for collecting peer link quality - get/set - zero to disable",  __p,  "Stat:LinkQuality:Period");
  sub_100044B24(a2, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_100108290("\t %-26s - AutoLog information - get only", __p, "Stat:AutoLog");
  sub_100044B24(a2, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_100108290("\t %-26s - AutoLog state ('disabled','long','short'') - get/set", __p, "Stat:AutoLog:State");
  sub_100044B24(a2, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_100108290("\t %-26s - AutoLog period in minutes - get/set", __p, "Stat:AutoLog:Period");
  sub_100044B24(a2, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_100108290("\t %-26s - AutoLog log level - get/set", __p, "Stat:AutoLog:LogLevel");
  sub_100044B24(a2, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_100108290("\t %-26s - Log level for user requested logs - get/set", __p, "Stat:UserRequest:LogLevel");
  sub_100044B24(a2, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_100108290( "\t %-26s : 'emerg', 'alert', 'crit', 'err', 'warning', 'notice', 'info', 'debug'",  __p,  "Valid log levels");
  sub_100044B24(a2, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_100108290("\t ", __p);
  sub_100044B24(a2, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_100108290("\t %-26s - Print this help", __p, "Stat:Help");
  sub_100044B24(a2, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10010C52C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10010C5B0(uint64_t a1, const std::string *a2, uint64_t *a3)
{
  char v4 = a2;
  if (((char)a2->__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    if (strcasecmp((const char *)a2, "Stat:Short"))
    {
      if (strcasecmp((const char *)v4, "Stat:Long"))
      {
        if (strcasecmp((const char *)v4, "Stat:RX"))
        {
          if (strcasecmp((const char *)v4, "Stat:TX"))
          {
            if (strcasecmp((const char *)v4, "Stat:RX:History"))
            {
              if (strcasecmp((const char *)v4, "Stat:TX:History"))
              {
                if (strcasecmp((const char *)v4, "Stat:History"))
                {
                  if (strcasecmp((const char *)v4, "Stat:NCP"))
                  {
                    if (strcasecmp((const char *)v4, "Stat:BlockingHostSleep"))
                    {
                      if (strcasecmp((const char *)v4, "Stat:Node"))
                      {
                        if (strcasecmp((const char *)v4, "Stat:Node:History"))
                        {
                          if (strncasecmp((const char *)v4, "Stat:Node:History:", 0x12uLL))
                          {
                            if (strcasecmp((const char *)v4, "Stat:LinkQuality:Long"))
                            {
                              goto LABEL_38;
                            }

void sub_10010CA98( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, uint64_t a30, int a31, __int16 a32, char a33, char a34)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10010CB20(uint64_t a1, const std::string *a2, void *a3)
{
  uint64_t v6 = a1 + 65408;
  if (((char)a2->__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    if (strcasecmp((const char *)a2, "Stat:AutoLog"))
    {
      if (strcasecmp((const char *)a2, "Stat:AutoLog:State"))
      {
        if (strcasecmp((const char *)a2, "Stat:AutoLog:Period"))
        {
          if (strcasecmp((const char *)a2, "Stat:AutoLog:LogLevel"))
          {
            if (strcasecmp((const char *)a2, "Stat:UserRequest:LogLevel"))
            {
              std::string v7 = (const char *)a2;
              if (strcasecmp((const char *)a2, "Stat:LinkQuality"))
              {
LABEL_8:
                if (strcasecmp(v7, "Stat:LinkQuality:Period"))
                {
                  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
                  v31.__r_.__value_.__l.__size_ = (std::string::size_type)&v31;
                  v31.__r_.__value_.__l.__cap_ = 0LL;
                  if (sub_10010C5B0(a1, a2, (uint64_t *)&v31))
                  {
                    memset(&v30, 0, sizeof(v30));
                    sub_10000AC00(&v26, "Unknown stat property. Please use get ");
                    __int128 v8 = std::string::append(&v26, "Stat:Help");
                    __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
                    v27.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
                    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v9;
                    v8->__r_.__value_.__l.__size_ = 0LL;
                    v8->__r_.__value_.__l.__cap_ = 0LL;
                    v8->__r_.__value_.__r.__words[0] = 0LL;
                    __int128 v10 = std::string::append(&v27, " to get help about StatCollector.");
                    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
                    int64_t cap = v10->__r_.__value_.__l.__cap_;
                    *(_OWORD *)std::string __p = v11;
                    v10->__r_.__value_.__l.__size_ = 0LL;
                    v10->__r_.__value_.__l.__cap_ = 0LL;
                    v10->__r_.__value_.__r.__words[0] = 0LL;
                    sub_100014D08((uint64_t)&v30, (__int128 *)__p);
                    if (SHIBYTE(cap) < 0) {
                      operator delete(__p[0]);
                    }
                    sub_100030134(__p, &v30);
                    sub_10003446C(a3);
                    if (__p[0]) {
                      (*(void (**)(void *))(*(void *)__p[0] + 8LL))(__p[0]);
                    }
                  }

                  else
                  {
                    sub_1000731A0(&v30, (uint64_t)&v31);
                    sub_10003446C(a3);
                    if (v30.__r_.__value_.__r.__words[0]) {
                      (*(void (**)(std::string::size_type))(*(void *)v30.__r_.__value_.__l.__data_ + 8LL))(v30.__r_.__value_.__r.__words[0]);
                    }
                  }

                  sub_10000C0E8(&v31);
                  return;
                }

                uint64_t v24 = sub_100142DC4(a1 + 65336) / 1000;
                int v25 = operator new(0x10uLL);
                *(void *)int v25 = &off_1002AE160;
                void v25[2] = v24;
                v31.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
                sub_10003446C(a3);
                goto LABEL_39;
              }

              goto LABEL_26;
            }

void sub_10010D1AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
}

void *sub_10010D2EC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  switch((int)a1)
  {
    case 0:
      int v2 = "emerg";
      goto LABEL_11;
    case 1:
      int v2 = "alert";
      goto LABEL_11;
    case 2:
      int v2 = "crit";
      goto LABEL_11;
    case 3:
      int v2 = "err";
      goto LABEL_11;
    case 4:
      int v2 = "warning";
      goto LABEL_11;
    case 5:
      int v2 = "notice";
      goto LABEL_11;
    case 6:
      int v2 = "info";
      goto LABEL_11;
    case 7:
      int v2 = "debug";
LABEL_11:
      uint64_t result = sub_10000AC00(a2, v2);
      break;
    default:
      uint64_t result = sub_100108290("unknown(%d)", a2, a1);
      break;
  }

  return result;
}

uint64_t sub_10010D39C(uint64_t a1, const std::string *a2, uint64_t *a3, void *a4)
{
  uint64_t v8 = a1 + 65408;
  if (((char)a2->__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    if (strcasecmp((const char *)a2, "Stat:AutoLog:State"))
    {
      if (strcasecmp((const char *)a2, "Stat:AutoLog:Period"))
      {
        if (strcasecmp((const char *)a2, "Stat:AutoLog:LogLevel"))
        {
          __int128 v9 = (const char *)a2;
LABEL_13:
          sub_100147B4C(a3, &v29);
          int size = (char)v29.__r_.__value_.__s.__size_;
          __int128 v11 = (void *)v29.__r_.__value_.__r.__words[0];
          if ((v29.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v12 = &v29;
          }
          else {
            uint64_t v12 = (std::string *)v29.__r_.__value_.__r.__words[0];
          }
          int v13 = sub_10010DA1C((const char *)v12);
          if (size < 0) {
            operator delete(v11);
          }
          if ((v13 & 0x80000000) == 0) {
            *(_DWORD *)(v8 + 16) = v13;
          }
          return sub_100006FF8(a4);
        }

void sub_10010D9E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
}

uint64_t sub_10010DA1C(const char *a1)
{
  uint64_t result = strcasecmp(a1, "emerg");
  if ((_DWORD)result)
  {
    if (!strcasecmp(a1, "alert"))
    {
      return 1LL;
    }

    else if (!strcasecmp(a1, "crit"))
    {
      return 2LL;
    }

    else if (!strcasecmp(a1, "err") || !strcasecmp(a1, "error"))
    {
      return 3LL;
    }

    else if (!strcasecmp(a1, "warning"))
    {
      return 4LL;
    }

    else if (!strcasecmp(a1, "notice"))
    {
      return 5LL;
    }

    else if (!strcasecmp(a1, "info"))
    {
      return 6LL;
    }

    else if (!strcasecmp(a1, "debug"))
    {
      return 7LL;
    }

    else
    {
      return 0xFFFFFFFFLL;
    }
  }

  return result;
}

void sub_10010DB20(uint64_t a1, uint64_t a2)
{
  int v3 = (void *)(a1 + 65336);
  if (a2)
  {
    void v4[2] = 0LL;
    v4[3] = a1;
    v4[0] = (uint64_t)off_1002B3728 + 1;
    v4[1] = (uint64_t)nullsub_83;
    sub_100142BE0((uint64_t)v3, a2, v4, 2);
    sub_10004BFBC(v4);
  }

  else
  {
    sub_100142D88(v3);
  }

void sub_10010DB90( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10010DBA4(uint64_t a1)
{
  uint64_t v2 = a1 + 65416;
  uint64_t v9 = (uint64_t)&v9;
  __int128 v10 = &v9;
  uint64_t v11 = 0LL;
  int v3 = *(_DWORD *)(a1 + 65416);
  if (v3 == 2)
  {
    sub_10000AC00(&__p, "Stat:Short");
    int v4 = sub_10010C5B0(a1, &__p, &v9);
  }

  else
  {
    if (v3 != 1)
    {
      if (!v3) {
        sub_100142D88((void *)(a1 + 65264));
      }
      goto LABEL_29;
    }

    sub_10000AC00(&__p, "Stat:Long");
    int v4 = sub_10010C5B0(a1, &__p, &v9);
  }

  int v5 = v4;
  if ((char)__p.__r_.__value_.__s.__size_ < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v5) {
      goto LABEL_29;
    }
  }

  else if (v4)
  {
    goto LABEL_29;
  }

  for (uint64_t i = v10; i != &v9; uint64_t i = (uint64_t *)i[1])
  {
    std::string v7 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v7)
    {
      if (sub_10015A058(*(_DWORD *)(v2 + 4)))
      {
        switch(*(_DWORD *)(v2 + 4))
        {
          case 0:
          case 1:
          case 2:
            if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
              goto LABEL_16;
            }
            break;
          case 3:
          case 4:
            if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
LABEL_16:
            }
              sub_10021047C();
            break;
          case 5:
          case 6:
            if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
            {
              uint64_t v8 = i + 2;
              LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
              _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "Stat (autolog): %s",  (uint8_t *)&__p,  0xCu);
            }

            break;
          case 7:
            if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
              sub_100210440();
            }
            break;
          default:
            continue;
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"com.apple.wpantund.ncp";
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"default";
      _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging Module is not defined for SubSystem: %s, Category: %s",  (uint8_t *)&__p,  0x16u);
    }
  }

void sub_10010DE90( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  sub_10000C0E8(&a16);
  _Unwind_Resume(a1);
}

void sub_10010DED8(uint64_t a1, int a2, uint64_t *a3)
{
  if (!a2)
  {
    int v5 = sub_10000BD6C(a3);
    {
      uint64_t v9 = (uint64_t)&v9;
      __int128 v10 = &v9;
      uint64_t v11 = 0LL;
      uint64_t v6 = sub_10010F250((uint64_t)a3);
      sub_10000D518(v8, v6);
      sub_10010F2B4(&v9, v8);
      sub_10000C178(v8);
      sub_10000C178(&v9);
    }
  }

void sub_10010DF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_10010DF98(uint64_t a1)
{
  int v3 = (void **)v2;
  sub_100006F6C(&v3);
  return 0LL;
}

void sub_10010DFF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_100006F6C(&a12);
  _Unwind_Resume(a1);
}

void sub_10010E010(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    uint64_t v2 = (uint64_t *)a1[1];
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v3 + 8) = v4;
    a1[2] = 0LL;
    while (v2 != a1)
    {
      int v5 = (uint64_t *)v2[1];
      sub_100071518((int)a1, v2);
      uint64_t v2 = v5;
    }
  }

void sub_10010E070(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    uint64_t v2 = (uint64_t *)a1[1];
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v3 + 8) = v4;
    a1[2] = 0LL;
    while (v2 != a1)
    {
      int v5 = (uint64_t *)v2[1];
      sub_100071518((int)a1, v2);
      uint64_t v2 = v5;
    }
  }

void *sub_10010E0D0(uint64_t a1)
{
  uint64_t v1 = (void *)a1;
  uint64_t v2 = 64LL;
  do
  {
    a1 = sub_100109E08(a1) + 248;
    --v2;
  }

  while (v2);
  v1[1984] = v1 + 1984;
  v1[1985] = v1 + 1984;
  v1[1986] = 0LL;
  sub_100108C84((uint64_t)v1);
  return v1;
}

void sub_10010E120(_Unwind_Exception *a1)
{
}

void *sub_10010E134(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10010E184((uint64_t)a1, 0LL, 0LL, a2);
  uint64_t v4 = *a1;
  *uint64_t result = *a1;
  result[1] = a1;
  *(void *)(v4 + 8) = result;
  *a1 = (uint64_t)result;
  uint64_t v5 = a1[2];
  BOOL v6 = __CFADD__(v5, 1LL);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(0x5500u);
  }
  else {
    a1[2] = v7;
  }
  return result;
}

void *sub_10010E184(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v10 = 1LL;
  uint64_t v7 = operator new(0x18uLL);
  *uint64_t v7 = a2;
  v7[1] = a3;
  void v7[2] = *a4;
  uint64_t v11 = 0LL;
  sub_10010E1E8((uint64_t)v9);
  return v7;
}

void sub_10010E1E8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    if (*(void *)(a1 + 8) >= 0xAAAAAAAAAAAAAABuLL) {
      __break(0x550Cu);
    }
    else {
      operator delete(v2);
    }
  }

void *sub_10010E218(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  uint64_t v5 = sub_10010E278(a1, a2, *(void **)(a1 + 8), (void *)(a1 + 8));
  if (v4 != v5)
  {
    BOOL v6 = v5;
  }

  return v4;
}

void *sub_10010E278(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a3)
  {
    uint64_t v5 = a3;
    uint64_t v7 = a1 + 16;
    do
    {
      int v8 = sub_10010E2D8(v7, (uint64_t)(v5 + 4), a2);
      uint64_t v9 = v5 + 1;
      if (!v8)
      {
        uint64_t v9 = v5;
        a4 = v5;
      }

      uint64_t v5 = (void *)*v9;
    }

    while (*v9);
  }

  return a4;
}

uint64_t sub_10010E2D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 12LL;
  while (1)
  {
    unsigned int v4 = *(_DWORD *)(a2 + v3);
    unsigned int v5 = *(_DWORD *)(a3 + v3);
    if (v4 < v5)
    {
      LODWORD(v3) = 1;
      unsigned int v4 = 1;
      return v3 & v4;
    }

    if (v4 > v5) {
      break;
    }
    v3 -= 4LL;
    if (!v3) {
      return v3 & v4;
    }
  }

  unsigned int v4 = 0;
  LODWORD(v3) = 1;
  return v3 & v4;
}

void sub_10010E31C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  *(void *)(v3 + 8) = v1[1];
  *(void *)v1[1] = v3;
  BOOL v4 = v2 != 0;
  uint64_t v5 = v2 - 1;
  if (v4)
  {
    *(void *)(a1 + 16) = v5;
    sub_100071518(a1, v1);
  }

  else
  {
    __break(0x5515u);
  }

void *sub_10010E344(uint64_t **a1, uint64_t a2, __n128 *a3)
{
  uint64_t v5 = sub_10010E3D4((uint64_t)a1, &v10, a2);
  BOOL v6 = (void *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (void **)v5;
    sub_10010E470((uint64_t)a1, a3, (uint64_t)v9);
    sub_10000AF70(a1, v10, v7, (void *)v9[0]);
    BOOL v6 = v9[0];
    v9[0] = 0LL;
    sub_10000D0A8(v9, 0LL);
  }

  return v6;
}

void *sub_10010E3D4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  BOOL v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        int v8 = v4;
        uint64_t v9 = (uint64_t)(v4 + 4);
        BOOL v4 = (void *)*v8;
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }

      uint64_t v5 = v8 + 1;
      BOOL v4 = (void *)v8[1];
    }

    while (v4);
  }

  else
  {
    int v8 = (void *)(a1 + 8);
  }

__n128 sub_10010E470@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  BOOL v6 = (__n128 *)operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  __n128 result = *a2;
  v6[2] = *a2;
  v6[3].n128_u64[0] = a2[1].n128_u64[0];
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t sub_10010E4C0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = (void **)result;
  if (a2 < 0)
  {
    do
      __n128 result = (uint64_t)sub_10000CB60(v3);
    while (!__CFADD__(v2++, 1LL));
  }

  else if (a2)
  {
    unint64_t v4 = a2 + 1;
    do
    {
      __n128 result = sub_10000B338((uint64_t)v3);
      --v4;
    }

    while (v4 > 1);
  }

  return result;
}

uint64_t sub_10010E514(uint64_t result)
{
  for (uint64_t i = 16LL; i != 112; i += 48LL)
    *(void *)(result + i) = 0LL;
  *(void *)__n128 result = 0LL;
  *(_DWORD *)(result + 8) = 0;
  return result;
}

uint64_t sub_10010E534(uint64_t result)
{
  for (uint64_t i = 0LL; i != 640; i += 16LL)
  {
    uint64_t v2 = result + i;
    *(void *)(v2 + 24) = 0LL;
    *(_WORD *)(v2 + 16) = -256;
  }

  *(void *)__n128 result = 0LL;
  *(_DWORD *)(result + 8) = 0;
  return result;
}

int64x2_t *sub_10010E560(uint64_t a1)
{
  uint64_t v1 = (int64x2_t *)a1;
  uint64_t v2 = 64LL;
  do
  {
    a1 = sub_10010A01C(a1) + 664;
    --v2;
  }

  while (v2);
  v1[2656] = vdupq_n_s64((unint64_t)&v1[2656]);
  v1[2657].i64[0] = 0LL;
  sub_10010A264((uint64_t)v1);
  return v1;
}

void sub_10010E5B0(_Unwind_Exception *a1)
{
}

uint64_t sub_10010E5C4(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = a1 + 8;
  uint64_t v4 = sub_10010E61C(a1, a2, *(void *)(a1 + 8), a1 + 8);
  if (v3 != v4)
  {
    uint64_t v5 = v4;
    if (!sub_100108334(a2, (_DWORD *)(v4 + 32))) {
      return v5;
    }
  }

  return v3;
}

uint64_t sub_10010E61C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v5 = a3;
    do
    {
      BOOL v7 = sub_100108334((_DWORD *)(v5 + 32), a2);
      int v8 = (uint64_t *)(v5 + 8);
      if (!v7)
      {
        int v8 = (uint64_t *)v5;
        a4 = v5;
      }

      uint64_t v5 = *v8;
    }

    while (*v8);
  }

  return a4;
}

void *sub_10010E674(uint64_t **a1, _DWORD *a2, void *a3)
{
  uint64_t v5 = sub_10010E704((uint64_t)a1, &v10, a2);
  BOOL v6 = (void *)*v5;
  if (!*v5)
  {
    BOOL v7 = (void **)v5;
    sub_10010E794((uint64_t)a1, a3, (uint64_t)v9);
    sub_10000AF70(a1, v10, v7, (void *)v9[0]);
    BOOL v6 = v9[0];
    v9[0] = 0LL;
    sub_10000D0A8(v9, 0LL);
  }

  return v6;
}

void *sub_10010E704(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        BOOL v7 = (void *)v4;
        int v8 = (_DWORD *)(v4 + 32);
        if (!sub_100108334(a3, (_DWORD *)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      if (!sub_100108334(v8, a3)) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = v7[1];
    }

    while (v4);
  }

  else
  {
    BOOL v7 = (void *)(a1 + 8);
  }

void *sub_10010E794@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  __n128 result = operator new(0x30uLL);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v5;
  uint64_t v7 = a2[1];
  result[4] = *a2;
  result[5] = v7;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t sub_10010E7DC(uint64_t result)
{
  for (uint64_t i = 16LL; i != 2320; i += 48LL)
    *(void *)(result + i) = 0LL;
  *(void *)__n128 result = 0LL;
  *(_DWORD *)(result + 8) = 0;
  return result;
}

uint64_t sub_10010E7FC(uint64_t result)
{
  for (uint64_t i = 24LL; i != 1048; i += 16LL)
    *(void *)(result + i) = 0LL;
  *(void *)__n128 result = 0LL;
  *(_DWORD *)(result + 8) = 0;
  return result;
}

uint64_t sub_10010E81C(uint64_t result)
{
  for (uint64_t i = 16LL; i != 1040; i += 32LL)
  {
    uint64_t v2 = (_OWORD *)(result + i);
    *uint64_t v2 = 0uLL;
    v2[1] = 0uLL;
  }

  *(void *)__n128 result = 0LL;
  *(_DWORD *)(result + 8) = 0;
  return result;
}

uint64_t *sub_10010E844(void *a1, __int128 *a2)
{
  uint64_t v3 = (uint64_t *)sub_10000F5D0(&v17);
  uint64_t v4 = sub_10000F7D0(v3);
  while (1)
  {
    uint64_t v4 = *(void *)(v4 + 8);
    uint64_t v5 = (uint64_t *)sub_10000F5D0(&v17);
    if (v4 == sub_10000F7D0(v5)) {
      break;
    }
    uint64_t v6 = sub_10000F610((uint64_t *)(v4 + 16));
    sub_10000F810(v21, v6);
    if (*(_BYTE *)(sub_10000F650((uint64_t *)(v4 + 16)) + 24))
    {
      uint64_t v7 = sub_10000F650((uint64_t *)(v4 + 16));
      uint64_t v8 = sub_10000FB30((uint64_t *)(v7 + 32));
      __int128 v15 = *a2;
      uint64_t v16 = *((void *)a2 + 2);
      unsigned int v9 = sub_10010E9E8((uint64_t *)(v8 + 24), &v15);
      uint64_t v10 = (uint64_t *)sub_10000F650((uint64_t *)(v4 + 16));
      if (v9)
      {
        sub_10000F6C4(v10, v21);
      }

      else
      {
        uint64_t v11 = sub_10000FB30(v10 + 4);
        uint64_t v12 = (uint64_t *)sub_10000F6D8((uint64_t *)(v11 + 24));
        if (v12)
        {
          __int128 v19 = *a2;
          uint64_t v20 = *((void *)a2 + 2);
          if (sub_10010E9E8(v12, &v19))
          {
            int v13 = (uint64_t *)sub_10000F650((uint64_t *)(v4 + 16));
            sub_10000F6C4(v13, v21);
          }
        }
      }
    }

    sub_10000FE20(&v22);
    sub_10000F8D8(v21);
  }

  return sub_10000F9EC(&v18);
}

void sub_10010E9AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

void *sub_10010E9E8(uint64_t *a1, void *a2)
{
  __n128 result = sub_10010EA1C(a1);
  if (result) {
    return (void *)sub_10000FAE8(result, a2);
  }
  return result;
}

_UNKNOWN **sub_10010EA1C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (!*a1) {
    return 0LL;
  }
  __int16 v4 = 1;
  (*(void (**)(uint64_t *, _UNKNOWN ***, uint64_t))(v1 & 0xFFFFFFFFFFFFFFFELL))(a1 + 1, &v3, 3LL);
  return v3;
}

uint64_t *sub_10010EA74(void *a1, __int128 *a2)
{
  uint64_t v3 = (uint64_t *)sub_10002C1D8(&v17);
  uint64_t v4 = sub_10002D278(v3);
  while (1)
  {
    uint64_t v4 = *(void *)(v4 + 8);
    uint64_t v5 = (uint64_t *)sub_10002C1D8(&v17);
    if (v4 == sub_10002D278(v5)) {
      break;
    }
    uint64_t v6 = sub_10010EC18((uint64_t *)(v4 + 16));
    sub_10000F810(v21, v6);
    if (*(_BYTE *)(sub_10002C218((uint64_t *)(v4 + 16)) + 24))
    {
      uint64_t v7 = sub_10002C218((uint64_t *)(v4 + 16));
      uint64_t v8 = sub_10002CC18((uint64_t *)(v7 + 32));
      __int128 v15 = *a2;
      uint64_t v16 = *((void *)a2 + 2);
      unsigned int v9 = sub_10010EC58((uint64_t *)(v8 + 24), &v15);
      uint64_t v10 = (uint64_t *)sub_10002C218((uint64_t *)(v4 + 16));
      if (v9)
      {
        sub_10000F6C4(v10, v21);
      }

      else
      {
        uint64_t v11 = sub_10002CC18(v10 + 4);
        uint64_t v12 = (uint64_t *)sub_10010EC8C((uint64_t *)(v11 + 24));
        if (v12)
        {
          __int128 v19 = *a2;
          uint64_t v20 = *((void *)a2 + 2);
          if (sub_10010EC58(v12, &v19))
          {
            int v13 = (uint64_t *)sub_10002C218((uint64_t *)(v4 + 16));
            sub_10000F6C4(v13, v21);
          }
        }
      }
    }

    sub_10000FE20(&v22);
    sub_10000F8D8(v21);
  }

  return sub_10000F9EC(&v18);
}

void sub_10010EBDC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

uint64_t sub_10010EC18(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator*", "shared_ptr.hpp", 780, "px != 0");
  }
  return result;
}

void *sub_10010EC58(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10010ECE0(a1);
  if (result) {
    return (void *)sub_10000FAE8(result, a2);
  }
  return result;
}

_UNKNOWN **sub_10010EC8C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (!*a1) {
    return 0LL;
  }
  __int16 v4 = 0;
  (*(void (**)(uint64_t *, _UNKNOWN ***, uint64_t))(v1 & 0xFFFFFFFFFFFFFFFELL))(a1 + 1, &v3, 3LL);
  return v3;
}

_UNKNOWN **sub_10010ECE0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (!*a1) {
    return 0LL;
  }
  __int16 v4 = 1;
  (*(void (**)(uint64_t *, _UNKNOWN ***, uint64_t))(v1 & 0xFFFFFFFFFFFFFFFELL))(a1 + 1, &v3, 3LL);
  return v3;
}

void *sub_10010ED38(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  a1[3] = 0LL;
  sub_10010ED8C((uint64_t)a1, a2);
  return a1;
}

void sub_10010ED6C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)v10;
  sub_10000EFEC(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_10010ED8C(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  return sub_10010EDC0((uint64_t *)(a1 + 24), &v3);
}

uint64_t *sub_10010EDC0(uint64_t *a1, __int128 *a2)
{
  __int128 v5 = *a2;
  uint64_t v6 = *((void *)a2 + 2);
  uint64_t v4 = (uint64_t)&off_1002B3708 + 1;
  sub_1000127C8(&v4, a1);
  sub_10000EFC4(&v4);
  return a1;
}

void sub_10010EE1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10010EE30(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }

      uint64_t result = *(void *)(*(void *)a2 + 8LL) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf2IvN2nl8wpantund13StatCollectorERKNSt3__112basic_"
                                        "stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEERKNS_3anyEEENS0_5list3INS0_5val"
                                        "ueIPS6_EENS_3argILi1EEENSO_ILi2EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp( (const char *)result,  (const char *)((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf2IvN2nl8wpantund13StatCollectorER KNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEE ERKNS_3anyEEENS0_5list3INS0_5valueIPS6_EENS_3argILi1EEENSO_ILi2EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)),  !(_DWORD)result))
      {
        *(void *)a2 = v4;
      }

      else
      {
        *(void *)a2 = 0LL;
      }
    }
  }

  else
  {
    __int128 v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }

  return result;
}

void *sub_10010EED0(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  a1[3] = 0LL;
  sub_10010EF24((uint64_t)a1, a2);
  return a1;
}

void sub_10010EF04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)v10;
  sub_10000EFEC(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_10010EF24(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  return sub_10010EF58((uint64_t *)(a1 + 24), &v3);
}

uint64_t *sub_10010EF58(uint64_t *a1, __int128 *a2)
{
  __int128 v5 = *a2;
  uint64_t v6 = *((void *)a2 + 2);
  uint64_t v4 = (uint64_t)off_1002B3718 + 1;
  sub_10002D3A8(&v4, a1);
  sub_10002B7E4(&v4);
  return a1;
}

void sub_10010EFB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10010EFC8(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }

      uint64_t result = *(void *)(*(void *)a2 + 8LL) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf1IvN2nl8wpantund13StatCollectorERKNS5_4WPAN15Netw"
                                        "orkInstanceEEENS0_5list2INS0_5valueIPS6_EENS_3argILi1EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp( (const char *)result,  (const char *)((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf1IvN2nl8wpantund13StatCollectorER KNS5_4WPAN15NetworkInstanceEEENS0_5list2INS0_5valueIPS6_EENS_3argILi1EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)),  !(_DWORD)result))
      {
        *(void *)a2 = v4;
      }

      else
      {
        *(void *)a2 = 0LL;
      }
    }
  }

  else
  {
    __int128 v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }

  return result;
}

uint64_t sub_10010F068(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return sub_10010F09C((uint64_t *)(a1 + 16), a1, &v3);
}

uint64_t sub_10010F09C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  return sub_10010F0B0(a2, *a1, *a3);
}

uint64_t sub_10010F0B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(uint64_t (**)(void *, uint64_t))a1;
  uint64_t v4 = *(void *)(a1 + 8);
  __int128 v5 = (void *)(a2 + (v4 >> 1));
  if ((v4 & 1) != 0) {
    uint64_t v3 = *(uint64_t (**)(void *, uint64_t))(*v5 + v3);
  }
  return v3(v5, a3);
}

uint64_t sub_10010F0CC(uint64_t result)
{
  if (!*(_DWORD *)(result + 8)) {
    return 0LL;
  }
  int v1 = *(_DWORD *)(result + 4);
  if (v1)
  {
    BOOL v2 = __OFSUB__(v1, 1);
    int v3 = v1 - 1;
    if (v2) {
      __break(0x5515u);
    }
    else {
      result += 48LL * v3 + 16;
    }
  }

  else
  {
    result += 2272LL;
  }

  return result;
}

uint64_t sub_10010F108(uint64_t result)
{
  if (!*(_DWORD *)(result + 8)) {
    return 0LL;
  }
  int v1 = *(_DWORD *)(result + 4);
  if (v1)
  {
    BOOL v2 = __OFSUB__(v1, 1);
    int v3 = v1 - 1;
    if (v2) {
      __break(0x5515u);
    }
    else {
      result += 16LL * v3 + 16;
    }
  }

  else
  {
    result += 1024LL;
  }

  return result;
}

uint64_t sub_10010F140(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }

      uint64_t result = *(void *)(*(void *)a2 + 8LL) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf0IvN2nl8wpantund13StatCollectorEEENS0_5list1INS0_"
                                        "5valueIPS6_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp( (const char *)result,  (const char *)((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf0IvN2nl8wpantund13StatCollectorEE ENS0_5list1INS0_5valueIPS6_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)),  !(_DWORD)result))
      {
        *(void *)a2 = v4;
      }

      else
      {
        *(void *)a2 = 0LL;
      }
    }
  }

  else
  {
    __int128 v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }

  return result;
}

uint64_t sub_10010F1DC(uint64_t a1)
{
  return sub_10010F200(a1);
}

uint64_t sub_10010F200(uint64_t a1)
{
  return sub_10010F234((void *)(a1 + 16), a1);
}

uint64_t sub_10010F234(void *a1, uint64_t a2)
{
  BOOL v2 = *(uint64_t (**)(void *))a2;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = (void *)(*a1 + (v3 >> 1));
  if ((v3 & 1) != 0) {
    BOOL v2 = *(uint64_t (**)(void *))(*v4 + v2);
  }
  return v2(v4);
}

uint64_t sub_10010F250(uint64_t a1)
{
  uint64_t result = sub_10000D4B8(a1);
  if (!result)
  {
    v2.__vftable = 0LL;
    std::bad_cast::bad_cast(&v2);
    v2.__vftable = (std::bad_cast_vtbl *)&off_1002ADCA8;
    sub_10000C268();
  }

  return result;
}

void sub_10010F2A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

uint64_t sub_10010F2B4(uint64_t *a1, void *a2)
{
  return sub_100044C80((uint64_t)a1, a1, a2);
}

  ;
}

void sub_10010F300(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, os_log_s *a4@<X8>)
{
}

void sub_10010F310(float a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, float *a6)
{
  *a6 = a1;
  *a4 = v6;
}

void sub_10010F31C(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, os_log_s *a4@<X8>)
{
}

id sub_10010F32C()
{
  if (qword_1002D1470 != -1) {
    dispatch_once(&qword_1002D1470, &stru_1002B3780);
  }
  id result = (id)qword_1002D1460;
  if (qword_1002D1460) {
    return [(id)qword_1002D1460 startNetworkMonitoring];
  }
  return result;
}

void sub_10010F378(id a1)
{
  int v1 = objc_alloc(&OBJC_CLASS___BackboneNetworkMonitor);
  std::bad_cast v2 = (void *)qword_1002D1460;
  qword_1002D1460 = (uint64_t)v1;

  dispatch_queue_attr_t v3 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_UTILITY, 0);
  uint64_t v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v3);
  if (qword_1002D1460)
  {
    uint64_t v6 = v4;
    dispatch_queue_t v5 = dispatch_queue_create("com.backbone.network.monitor", v4);
    [(id)qword_1002D1460 setMonitorQueue:v5];

    uint64_t v4 = v6;
  }
}

id sub_10010F3FC()
{
  id result = (id)qword_1002D1460;
  if (qword_1002D1460) {
    return [(id)qword_1002D1460 stopNetworkMonitoring];
  }
  return result;
}

void sub_10010F410(uint64_t a1)
{
  *(void *)a1 = 0LL;
  *(_WORD *)(a1 + 8) = 0;
  if (qword_1002D1460)
  {
    std::bad_cast v2 = objc_autoreleasePoolPush();
    dispatch_queue_attr_t v3 = (const char *)[(id)qword_1002D1460 getInterfaceName];
    if (v3) {
      strncpy((char *)a1, v3, 9uLL);
    }
    objc_autoreleasePoolPop(v2);
  }

  NSLog( @"BackboneIPv6InterfaceHelper: %s backbone interface name: %s... is connected\n",  "getNetworkInterfaceNameOnBackbone",  a1);
}

void sub_10010F494(uint64_t a1)
{
  *(_WORD *)(a1 + 8) = 0;
  *(void *)a1 = 0LL;
  std::bad_cast v2 = objc_autoreleasePoolPush();
  if (qword_1002D1478)
  {
    if ((unint64_t)[(id)qword_1002D1478 length] <= 9)
    {
      dispatch_queue_attr_t v3 = (const char *)[(id)qword_1002D1478 cStringUsingEncoding:4];
      if (v3) {
        strncpy((char *)a1, v3, 9uLL);
      }
    }
  }

  objc_autoreleasePoolPop(v2);
  NSLog( @"BackboneIPv6InterfaceHelper: %s WiFi interface name: %s... is connected\n",  "getWiFiNetworkInterfaceNameOnBackbone",  a1);
}

void sub_10010F528()
{
  if (qword_1002D1480 != -1) {
    dispatch_once(&qword_1002D1480, &stru_1002B37A0);
  }
}

void sub_10010F550(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___CWFInterface);
  std::bad_cast v2 = (void *)qword_1002D1468;
  qword_1002D1468 = (uint64_t)v1;

  if (qword_1002D1468)
  {
    [(id)qword_1002D1468 activate];
    dispatch_queue_attr_t v3 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    uint64_t v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v3);
    dispatch_queue_attr_t v5 = dispatch_queue_attr_make_with_qos_class(v4, QOS_CLASS_UTILITY, 0);
    attr = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v5);

    dispatch_queue_t v6 = dispatch_queue_create("com.backbone.wifi.monitor", attr);
    uint64_t v7 = (void *)qword_1002C97D0;
    qword_1002C97D0 = (uint64_t)v6;

    sub_10010F608();
  }

  else
  {
    NSLog(@"Failed to alloc wifi interface");
  }

void sub_10010F608()
{
  id v2 = 0LL;
  if (qword_1002D1468)
  {
    if (([(id)qword_1002D1468 startMonitoringEventType:6 error:&v2] & 1) != 0 || !v2)
    {
      if (([(id)qword_1002D1468 startMonitoringEventType:14 error:&v2] & 1) != 0
        || !v2)
      {
        if (([(id)qword_1002D1468 startMonitoringEventType:2 error:&v2] & 1) != 0
          || !v2)
        {
          if (([(id)qword_1002D1468 startMonitoringEventType:3 error:&v2] & 1) != 0
            || !v2)
          {
            if (([(id)qword_1002D1468 startMonitoringEventType:25 error:&v2] & 1) != 0
              || !v2)
            {
              id v1 = (void *)objc_claimAutoreleasedReturnValue([v2 description]);
              NSLog(@"%s: Register for WiFi link change event: %@", "startNetworkMonitoringOnWiFi", v1);

              dispatch_async((dispatch_queue_t)qword_1002C97D0, &stru_1002B37C0);
              return;
            }

            uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue([v2 description]);
            NSLog(@"Register for WiFi auto join state changed event failed: %@", v0);
          }

          else
          {
            uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue([v2 description]);
            NSLog(@"Register for WiFi BSSID changed event failed: %@", v0);
          }
        }

        else
        {
          uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue([v2 description]);
          NSLog(@"Register for WiFi SSID changed event failed: %@", v0);
        }
      }

      else
      {
        uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue([v2 description]);
        NSLog(@"Register for WiFi roam status event failed: %@", v0);
      }
    }

    else
    {
      uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue([v2 description]);
      NSLog(@"Register for WiFi link change event failed: %@", v0);
    }
  }

id sub_10010F794()
{
  id result = (id)qword_1002D1468;
  if (qword_1002D1468) {
    return [(id)qword_1002D1468 invalidate];
  }
  return result;
}

id sub_10010F7A8()
{
  return [(id)qword_1002D1468 stopMonitoringEventType:6];
}

void sub_10010F7B8(id a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue([(id)qword_1002D1468 channel]);
  byte_1002D1488 = [v1 is2GHz];

  uint64_t v2 = objc_claimAutoreleasedReturnValue([(id)qword_1002D1468 interfaceName]);
  dispatch_queue_attr_t v3 = (void *)qword_1002D1478;
  qword_1002D1478 = v2;

  id v5 = (id)objc_claimAutoreleasedReturnValue([(id)qword_1002D1468 cachedLinkDownStatus]);
  if (v5) {
    byte_1002C9290 = [v5 isLinkDown];
  }
  if (byte_1002D1488) {
    uint64_t v4 = "true";
  }
  else {
    uint64_t v4 = "false";
  }
  NSLog(@"%s: Is current WiFi channel in 2GHz band: %s\n", "startNetworkMonitoringOnWiFi_block_invoke", v4);
  [(id)qword_1002D1468 setEventHandler:&stru_1002B3800];
}

void sub_10010F88C(id a1, CWFEvent *a2)
{
  uint64_t v2 = a2;
  dispatch_queue_attr_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = (dispatch_queue_s *)qword_1002C97D0;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10010F90C;
    block[3] = &unk_1002B3828;
    dispatch_queue_t v6 = v2;
    dispatch_async(v4, block);
  }
}

void sub_10010F90C(uint64_t a1)
{
  unint64_t v2 = (unint64_t)[*(id *)(a1 + 32) type];
  if (v2 <= 0x19)
  {
    if (((1LL << v2) & 0x200400C) != 0)
    {
      dispatch_queue_attr_t v3 = (void *)objc_claimAutoreleasedReturnValue([(id)qword_1002D1468 channel]);
      byte_1002D1488 = [v3 is2GHz];

      uint64_t v4 = objc_claimAutoreleasedReturnValue([(id)qword_1002D1468 interfaceName]);
      id v5 = (void *)qword_1002D1478;
      qword_1002D1478 = v4;

      id v6 = [(id)qword_1002D1468 opMode];
      byte_1002C9290 = (_DWORD)v6 == 0;
      id v7 = [*(id *)(a1 + 32) type];
      uint64_t v8 = "true";
      if (byte_1002D1488) {
        unsigned int v9 = "true";
      }
      else {
        unsigned int v9 = "false";
      }
      if (!byte_1002C9290) {
        uint64_t v8 = "false";
      }
      NSLog( @"%s: %ld event received: WiFiInterfaceName:%@ Is current WiFi channel in 2GHz band: %s isLinkDown:%s opmode:%d\n",  "startNetworkMonitoringOnWiFi_block_invoke_3",  v7,  qword_1002D1478,  v9,  v8,  v6);
      nullsub_2([(id)qword_1002D1478 UTF8String]);
    }

    else if (v2 == 6)
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([(id)qword_1002D1468 channel]);
      byte_1002D1488 = [v10 is2GHz];

      uint64_t v11 = objc_claimAutoreleasedReturnValue([(id)qword_1002D1468 interfaceName]);
      uint64_t v12 = (void *)qword_1002D1478;
      qword_1002D1478 = v11;

      int v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) info]);
      id v17 = (id)objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:CWFEventLinkChangeStatusKey]);

      if (v17)
      {
        unsigned int v14 = [v17 isLinkDown];
        byte_1002C9290 = v14;
      }

      else
      {
        unsigned int v14 = byte_1002C9290;
      }

      __int128 v15 = "true";
      if (byte_1002D1488) {
        uint64_t v16 = "true";
      }
      else {
        uint64_t v16 = "false";
      }
      if (!v14) {
        __int128 v15 = "false";
      }
      NSLog( @"%s: CWFEventTypeLinkChanged received: WiFiInterfaceName:%@ Is current WiFi channel in 2GHz band: %s isLinkDown:%s\n",  "startNetworkMonitoringOnWiFi_block_invoke_3",  qword_1002D1478,  v16,  v15);
      nullsub_2([(id)qword_1002D1478 UTF8String]);
    }
  }

id sub_10010FB44()
{
  uint64_t v0 = objc_autoreleasePoolPush();
  if (qword_1002D1468
    && (id v1 = (void *)objc_claimAutoreleasedReturnValue([(id)qword_1002D1468 channel]),
        v1,
        v1))
  {
    unint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([(id)qword_1002D1468 channel]);
    id v3 = [v2 is2GHz];

    objc_autoreleasePoolPop(v0);
    uint64_t v4 = "false";
    if ((_DWORD)v3) {
      uint64_t v4 = "true";
    }
  }

  else
  {
    objc_autoreleasePoolPop(v0);
    id v3 = 0LL;
    uint64_t v4 = "false";
  }

  NSLog(@"%s: is2GHzWiFi enabled:%s", "isWiFiChannelOn2G", v4);
  return v3;
}

uint64_t sub_10010FC04()
{
  if (qword_1002D1490 != -1) {
    dispatch_once(&qword_1002D1490, &stru_1002B3848);
  }
  return byte_1002D1498;
}

void sub_10010FC44(id a1)
{
  id v1 = (void *)MGCopyAnswer(@"DeviceName", 0LL);
  if ([v1 isEqualToString:@"HomePod"])
  {
    byte_1002D1498 = 1;
    NSLog(@"%s deviceName: %@, is a homepod: %s", "isHWModelHomePod_block_invoke", v1, "true");
  }

  else
  {
    NSLog(@"%s deviceName: %@", "isHWModelHomePod_block_invoke", v1);
  }
}

id sub_10010FCD4()
{
  id result = (id)qword_1002D1460;
  if (qword_1002D1460) {
    return [(id)qword_1002D1460 getAndReset2GDuration];
  }
  return result;
}

id sub_10010FCE8()
{
  id result = (id)qword_1002D1460;
  if (qword_1002D1460) {
    return [(id)qword_1002D1460 getAndReset5GDuration];
  }
  return result;
}

id sub_10010FCFC()
{
  id result = (id)qword_1002D1460;
  if (qword_1002D1460) {
    return [(id)qword_1002D1460 getAndReset6GDuration];
  }
  return result;
}

id sub_10010FD10()
{
  id result = (id)qword_1002D1460;
  if (qword_1002D1460) {
    return [(id)qword_1002D1460 getAndResetOdeonDuration];
  }
  return result;
}

id sub_10010FD24()
{
  id result = (id)qword_1002D1460;
  if (qword_1002D1460) {
    return [(id)qword_1002D1460 getAndResetEthernetDuration];
  }
  return result;
}

id sub_10010FD38()
{
  id result = (id)qword_1002D1460;
  if (qword_1002D1460) {
    return [(id)qword_1002D1460 getAndResetUnknownDuration];
  }
  return result;
}

id sub_10010FD4C()
{
  id result = (id)qword_1002D1460;
  if (qword_1002D1460) {
    return [(id)qword_1002D1460 getCurrentBackhaul];
  }
  return result;
}

uint64_t sub_10010FD60()
{
  uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue([(id)qword_1002D1468 channel]);
  unsigned int v1 = [v0 is2GHz];

  unint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([(id)qword_1002D1468 channel]);
  id v3 = v2;
  if (v1)
  {
    byte_1002D1488 = [v2 is2GHz];

    uint64_t v4 = @"%s::current WiFi channel in 2GHz band\n";
    uint64_t v5 = 1LL;
  }

  else
  {
    int v6 = [v2 is5GHz];

    if ((v6 & 1) != 0)
    {
      uint64_t v4 = @"%s::current WiFi channel in 5GHz band\n";
      uint64_t v5 = 2LL;
    }

    else
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([(id)qword_1002D1468 channel]);
      unsigned int v8 = [v7 is6GHz];

      uint64_t v5 = 3LL;
      if (v8)
      {
        uint64_t v4 = @"%s::current WiFi channel in 6GHz band\n";
      }

      else
      {
        uint64_t v5 = 0LL;
        uint64_t v4 = @"%s::current WiFi channel in unknown state\n";
      }
    }
  }

  qword_1002D14A0 = v5;
  NSLog(&v4->isa, "getCurrentWIFI");
  return qword_1002D14A0;
}

void sub_10010FE54(const __CFString *a1, const void *a2)
{
}

void sub_10010FE60(const __CFString *a1, const void *a2, char *cStr)
{
  uint64_t v5 = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
  CFPreferencesSetAppValue(a1, a2, v5);
  if (v5) {
    CFRelease(v5);
  }
}

CFPropertyListRef sub_10010FEC8(const __CFString *a1)
{
  CFPropertyListRef result = CFPreferencesCopyAppValue(a1, @"com.apple.wpantundData");
  if (!result) {
    return CFPreferencesCopyAppValue( a1,  @"/System/Library/PrivateFrameworks/CoreThreadRadio.framework/com.apple.threadradiodDatatvOS.plist");
  }
  return result;
}

CFPropertyListRef sub_10010FF0C(const __CFString *a1, const char *a2)
{
  id v3 = CFStringCreateWithCString(0LL, a2, 0x8000100u);
  CFPropertyListRef v4 = CFPreferencesCopyAppValue(a1, v3);
  if (v3) {
    CFRelease(v3);
  }
  return v4;
}

BOOL sub_10010FF5C()
{
  return CFPreferencesAppSynchronize(@"com.apple.wpantundData") != 0;
}

CFStringRef sub_10010FF80(char *cStr)
{
  CFPropertyListRef result = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
  if (result)
  {
    unint64_t v2 = result;
    int v3 = CFPreferencesAppSynchronize(result);
    CFRelease(v2);
    return (const __CFString *)(v3 != 0);
  }

  return result;
}

void sub_10010FFCC(char *cStr, char *__s)
{
  if (__s && strlen(__s) >= 0x65)
  {
    CFPropertyListRef v4 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      int v13 = 67109634;
      *(_DWORD *)unsigned int v14 = 100;
      *(_WORD *)&void v14[4] = 2080;
      *(void *)&v14[6] = cStr;
      __int16 v15 = 2080;
      uint64_t v16 = __s;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Error: Input string value length is greater than %d. For key =>  %s . string value is => %s",  (uint8_t *)&v13,  0x1Cu);
    }
  }

  int v6 = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
  CFStringRef v7 = CFStringCreateWithCString(0LL, __s, 0x8000100u);
  CFStringRef v8 = v7;
  if (v6 && v7)
  {
    CFPreferencesSetAppValue(v6, v7, @"com.apple.wpantundData");
    if (!CFPreferencesAppSynchronize(@"com.apple.wpantundData"))
    {
      unsigned int v9 = sub_1000160F4("com.apple.wpantund.tnm", "default");
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        int v13 = 136315138;
        *(void *)unsigned int v14 = cStr;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "Failed to Sync key: %s",  (uint8_t *)&v13,  0xCu);
      }
    }

void sub_1001101E0(char *cStr)
{
  unint64_t v2 = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
  CFPreferencesSetAppValue(v2, 0LL, @"com.apple.wpantundData");
  if (!CFPreferencesAppSynchronize(@"com.apple.wpantundData"))
  {
    int v3 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    CFPropertyListRef v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      int v5 = 136315138;
      int v6 = cStr;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Failed to Sync key: %s",  (uint8_t *)&v5,  0xCu);
    }
  }

  if (v2) {
    CFRelease(v2);
  }
}

BOOL sub_1001102DC(char *cStr, double a2)
{
  double valuePtr = a2;
  int v3 = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
  CFNumberRef v4 = CFNumberCreate(0LL, kCFNumberDoubleType, &valuePtr);
  int v5 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 136315906;
    int v13 = "BOOL saveDoubleValue(const char *, double)";
    __int16 v14 = 1024;
    int v15 = 134;
    __int16 v16 = 2080;
    id v17 = cStr;
    __int16 v18 = 2112;
    CFNumberRef v19 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s:%d: - key = %s, v = %@", buf, 0x26u);
  }

  CFPreferencesSetAppValue(v3, v4, @"com.apple.wpantundData");
  int v7 = CFPreferencesAppSynchronize(@"com.apple.wpantundData");
  if (v7)
  {
    if (!v3) {
      goto LABEL_11;
    }
LABEL_10:
    CFRelease(v3);
    goto LABEL_11;
  }

  CFStringRef v8 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  unsigned int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 136315650;
    int v13 = "BOOL saveDoubleValue(const char *, double)";
    __int16 v14 = 1024;
    int v15 = 139;
    __int16 v16 = 2080;
    id v17 = cStr;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s:%d: Failed to Sync key: %s", buf, 0x1Cu);
  }

  if (v3)
  {
    CFPreferencesSetAppValue(v3, 0LL, @"com.apple.wpantundData");
    goto LABEL_10;
  }

void sub_1001104E4(char *cStr, int a2)
{
  int valuePtr = a2;
  int v3 = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
  CFNumberRef v4 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
  int v5 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 136315394;
    uint64_t v11 = cStr;
    __int16 v12 = 2112;
    CFNumberRef v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "saveIntValue - key = %s, v = %@", buf, 0x16u);
  }

  CFPreferencesSetAppValue(v3, v4, @"com.apple.wpantundData");
  if (!CFPreferencesAppSynchronize(@"com.apple.wpantundData"))
  {
    int v7 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    CFStringRef v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v11 = cStr;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Failed to Sync key: %s", buf, 0xCu);
    }
  }

  if (v3) {
    CFRelease(v3);
  }
  if (v4) {
    CFRelease(v4);
  }
}

void sub_100110674(char *cStr, uint64_t a2, char *a3)
{
  uint64_t valuePtr = a2;
  int v5 = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
  CFNumberRef v6 = CFNumberCreate(0LL, kCFNumberLongLongType, &valuePtr);
  int v7 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  CFStringRef v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 136315650;
    CFNumberRef v13 = cStr;
    __int16 v14 = 2112;
    CFNumberRef v15 = v6;
    __int16 v16 = 2048;
    uint64_t v17 = valuePtr;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "saveLLIntValue - key = %s, v = %@, val = 0x%llx",  buf,  0x20u);
  }

  sub_10010FE60(v5, v6, a3);
  if ((sub_10010FF80(a3) & 1) == 0)
  {
    unsigned int v9 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 136315138;
      CFNumberRef v13 = cStr;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Failed to Sync key: %s", buf, 0xCu);
    }
  }

  if (v5) {
    CFRelease(v5);
  }
  if (v6) {
    CFRelease(v6);
  }
}

void sub_100110818(char *cStr, char *a2)
{
  CFNumberRef v4 = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
  sub_10010FE60(v4, 0LL, a2);
  if ((sub_10010FF80(a2) & 1) == 0)
  {
    int v5 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    CFNumberRef v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v7 = 136315138;
      CFStringRef v8 = cStr;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Failed to Sync key: %s",  (uint8_t *)&v7,  0xCu);
    }
  }

  if (v4) {
    CFRelease(v4);
  }
}

uint64_t sub_100110910(char *cStr)
{
  unint64_t v2 = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
  unsigned int valuePtr = 0;
  CFPropertyListRef v3 = sub_10010FEC8(v2);
  CFNumberRef v4 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 136315394;
    uint64_t v10 = cStr;
    __int16 v11 = 2112;
    CFPropertyListRef v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "getIntValue - key = %s, v = %@", buf, 0x16u);
  }

  if (v3)
  {
    CFTypeID v6 = CFGetTypeID(v3);
    if (v6 == CFNumberGetTypeID()) {
      CFNumberGetValue((CFNumberRef)v3, kCFNumberIntType, &valuePtr);
    }
  }

  if (v2) {
    CFRelease(v2);
  }
  if (v3) {
    CFRelease(v3);
  }
  return valuePtr;
}

uint64_t sub_100110A40(char *cStr, const char *a2)
{
  CFNumberRef v4 = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
  uint64_t valuePtr = 0LL;
  int v5 = (const __CFNumber *)sub_10010FF0C(v4, a2);
  CFTypeID v6 = v5;
  if (v5)
  {
    CFTypeID v7 = CFGetTypeID(v5);
    if (v7 == CFNumberGetTypeID()) {
      CFNumberGetValue(v6, kCFNumberLongLongType, &valuePtr);
    }
  }

  CFStringRef v8 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  unsigned int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 136315650;
    CFNumberRef v13 = cStr;
    __int16 v14 = 2112;
    CFNumberRef v15 = v6;
    __int16 v16 = 2048;
    uint64_t v17 = valuePtr;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "getLLIntValue - key = %s, v = %@, value = 0x%llx",  buf,  0x20u);
  }

  if (v4) {
    CFRelease(v4);
  }
  if (v6) {
    CFRelease(v6);
  }
  return valuePtr;
}

double sub_100110B88(char *cStr)
{
  unint64_t v2 = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
  double valuePtr = 0.0;
  CFPropertyListRef v3 = (const __CFNumber *)sub_10010FEC8(v2);
  CFNumberRef v4 = v3;
  if (v3)
  {
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID()) {
      CFNumberGetValue(v4, kCFNumberDoubleType, &valuePtr);
    }
  }

  if (v2) {
    CFRelease(v2);
  }
  if (v4) {
    CFRelease(v4);
  }
  CFTypeID v6 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  CFTypeID v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 136315906;
    __int16 v11 = "double getDoubleValue(const char *)";
    __int16 v12 = 1024;
    int v13 = 277;
    __int16 v14 = 2080;
    CFNumberRef v15 = cStr;
    __int16 v16 = 2048;
    double v17 = valuePtr;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s:%d:  - key = %s, v = %f", buf, 0x26u);
  }

  return valuePtr;
}

__int128 *sub_100110CE0(char *cStr)
{
  unsigned int v1 = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
  unint64_t v2 = &xmmword_1002C97D8;
  xmmword_1002C97D8 = 0u;
  unk_1002C97E8 = 0u;
  xmmword_1002C97F8 = 0u;
  unk_1002C9808 = 0u;
  xmmword_1002C9818 = 0u;
  unk_1002C9828 = 0u;
  dword_1002C9838 = 0;
  CFPropertyListRef v3 = (const __CFString *)sub_10010FEC8(v1);
  CFNumberRef v4 = v3;
  if (!v3 || (CFTypeID v5 = CFGetTypeID(v3), v5 != CFStringGetTypeID()))
  {
    unint64_t v2 = 0LL;
    if (!v1) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }

  if (v1) {
LABEL_8:
  }
    CFRelease(v1);
LABEL_9:
  if (v4) {
    CFRelease(v4);
  }
  return v2;
}

void sub_100110DA0(char *cStr, char *a2, int a3)
{
  CFTypeID v5 = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
  CFTypeID v6 = (const __CFString *)sub_10010FEC8(v5);
  CFTypeID v7 = v6;
  if (v6)
  {
    CFTypeID v8 = CFGetTypeID(v6);
    if (v8 == CFStringGetTypeID())
    {
      CFStringGetCString(v7, a2, a3, 0x8000100u);
      unsigned int v9 = sub_1000160F4("com.apple.wpantund.tnm", "default");
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        int v11 = 136315138;
        __int16 v12 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "getStringValueLocal: Read String: %s",  (uint8_t *)&v11,  0xCu);
      }
    }
  }

  if (v5) {
    CFRelease(v5);
  }
  if (v7) {
    CFRelease(v7);
  }
}

BOOL sub_100110ED0()
{
  uint64_t v0 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  unsigned int v1 = (os_log_s *)objc_claimAutoreleasedReturnValue(v0);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    int v8 = 136315138;
    unsigned int v9 = "clearThreadConfiguration";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "Entered in %s", (uint8_t *)&v8, 0xCu);
  }

  unint64_t v2 = CFStringCreateWithCString(0LL, "TC", 0x8000100u);
  CFPropertyListRef v3 = CFStringCreateWithCString(0LL, "com.apple.wpantundData", 0x8000100u);
  CFPreferencesSetAppValue(v2, 0LL, v3);
  int v4 = CFPreferencesAppSynchronize(@"com.apple.wpantundData");
  if (!v4)
  {
    CFTypeID v5 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    CFTypeID v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      LOWORD(v8) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Failed to Sync Thread Credentials ",  (uint8_t *)&v8,  2u);
    }
  }

  if (v2) {
    CFRelease(v2);
  }
  if (v3) {
    CFRelease(v3);
  }
  return v4 != 0;
}

void sub_10011105C(int a1, uint64_t a2, const char *a3, const UInt8 *a4, const char *a5, int a6)
{
  __int16 valuePtr = a1;
  uint64_t v27 = a2;
  int v26 = a6;
  sub_100159A78((unint64_t)a4, 16LL, v37, 0x24uLL, 0);
  __int16 v12 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67110402;
    *(_DWORD *)&uint8_t buf[4] = a1;
    *(_WORD *)&uint8_t buf[8] = 2048;
    *(void *)&buf[10] = a2;
    *(_WORD *)&buf[18] = 2080;
    *(void *)&buf[20] = a3;
    *(_WORD *)&buf[28] = 2080;
    *(void *)&buf[30] = v37;
    *(_WORD *)&buf[38] = 2080;
    *(void *)&buf[40] = a5;
    __int16 v35 = 1024;
    int v36 = a6;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "Saving TC as follows - PANID: %d, XPANID: %llu, NWName: %s, key: %s, PSKc: %s, ch = %d",  buf,  0x36u);
  }

  *(_OWORD *)std::string buf = *(_OWORD *)off_1002B3868;
  *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)off_1002B3878;
  *(_OWORD *)&_BYTE buf[32] = *(_OWORD *)off_1002B3888;
  values[0] = CFNumberCreate(0LL, kCFNumberShortType, &valuePtr);
  values[1] = CFNumberCreate(0LL, kCFNumberLongLongType, &v27);
  values[2] = (void *)CFStringCreateWithCString(0LL, a3, 0x8000100u);
  values[3] = CFDataCreate(0LL, a4, 16LL);
  values[4] = (void *)CFStringCreateWithCString(0LL, a5, 0x8000100u);
  values[5] = CFNumberCreate(0LL, kCFNumberIntType, &v26);
  CFDictionaryRef v14 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)buf,  (const void **)values,  6LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  CFNumberRef v15 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  __int16 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string v29 = 138412546;
    CFDictionaryRef v30 = v14;
    __int16 v31 = 2112;
    CFDictionaryRef v32 = v14;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Saving TC Dict (%@): %@", v29, 0x16u);
  }

  if (v14)
  {
    double v17 = CFStringCreateWithCString(0LL, "TC", 0x8000100u);
    __int16 v18 = CFStringCreateWithCString(0LL, "com.apple.wpantundData", 0x8000100u);
    CFNumberRef v19 = v18;
    if (v17 && v18)
    {
      CFPreferencesSetAppValue(v17, v14, v18);
      if (!CFPreferencesAppSynchronize(@"com.apple.wpantundData"))
      {
        uint64_t v20 = sub_1000160F4("com.apple.wpantund.tnm", "default");
        std::string v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string v29 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_INFO,  "Failed to Sync Thread Credentials",  v29,  2u);
        }
      }

      CFRelease(v14);
    }

    else
    {
      uint64_t v22 = sub_1000160F4("com.apple.wpantund.tnm", "default");
      int v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string v29 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "Failed to save Thread Credentials",  v29,  2u);
      }

      if (!v17) {
        goto LABEL_17;
      }
    }

    CFRelease(v17);
LABEL_17:
    if (v19) {
      CFRelease(v19);
    }
  }

  for (uint64_t i = 0LL; i != 6; ++i)
  {
    uint64_t v25 = values[i];
    if (v25)
    {
      CFRelease(v25);
      if (values[i]) {
        CFRelease(*(CFTypeRef *)&buf[i * 8]);
      }
    }
  }

void sub_100111438( const char *a1, const char *a2, const char *a3, const char *a4, const char *a5, int a6)
{
  int valuePtr = a6;
  __int16 v12 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 136316418;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&_BYTE buf[12] = 2080;
    *(void *)&_BYTE buf[14] = a2;
    *(_WORD *)&_BYTE buf[22] = 2080;
    *(void *)&_BYTE buf[24] = a3;
    *(_WORD *)uint64_t v25 = 2080;
    *(void *)&void v25[2] = a4;
    *(_WORD *)&v25[10] = 2080;
    *(void *)&v25[12] = a5;
    __int16 v26 = 1024;
    int v27 = a6;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "Saving TC as follows - PANID: %s, XPANID: %s, NWName: %s, key: %s, PSKc: %s, ch = %d",  buf,  0x3Au);
  }

  *(_OWORD *)std::string buf = *(_OWORD *)off_1002B3868;
  *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)off_1002B3878;
  *(_OWORD *)uint64_t v25 = *(_OWORD *)off_1002B3888;
  values[0] = (void *)CFStringCreateWithCString(0LL, a1, 0x8000100u);
  values[1] = (void *)CFStringCreateWithCString(0LL, a2, 0x8000100u);
  values[2] = (void *)CFStringCreateWithCString(0LL, a3, 0x8000100u);
  values[3] = (void *)CFStringCreateWithCString(0LL, a4, 0x8000100u);
  values[4] = (void *)CFStringCreateWithCString(0LL, a5, 0x8000100u);
  values[5] = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
  CFDictionaryRef v14 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)buf,  (const void **)values,  6LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  CFNumberRef v15 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  __int16 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    int v21 = 138412290;
    CFDictionaryRef v22 = v14;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Saving TC Dict: %@", (uint8_t *)&v21, 0xCu);
  }

  if (v14)
  {
    CFPreferencesSetAppValue(@"TC", v14, @"com.apple.wpantundData");
    if (!CFPreferencesAppSynchronize(@"com.apple.wpantundData"))
    {
      double v17 = sub_1000160F4("com.apple.wpantund.tnm", "default");
      __int16 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        LOWORD(v21) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "Failed to Sync Thread Credentials",  (uint8_t *)&v21,  2u);
      }
    }

    CFRelease(v14);
  }

  for (uint64_t i = 0LL; i != 6; ++i)
  {
    uint64_t v20 = values[i];
    if (v20)
    {
      CFRelease(v20);
      if (values[i]) {
        CFRelease(*(CFTypeRef *)&buf[i * 8]);
      }
    }
  }

  __break(0x5512u);
}

void sub_1001116F4(const __CFDictionary *a1, const char *a2, char *a3, int a4)
{
  value = 0LL;
  CFStringRef v7 = CFStringCreateWithCString(0LL, a2, 0x8000100u);
  CFDictionaryGetValueIfPresent(a1, v7, (const void **)&value);
  if (value)
  {
    CFTypeID v8 = CFGetTypeID(value);
    if (v8 == CFStringGetTypeID())
    {
      CFStringGetCString((CFStringRef)value, a3, a4, 0x8000100u);
      unsigned int v9 = sub_1000160F4("com.apple.wpantund.tnm", "default");
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 136315138;
        int v13 = a3;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Read String: %s", buf, 0xCu);
      }
    }
  }

  if (v7) {
    CFRelease(v7);
  }
}

void sub_10011181C(const __CFDictionary *a1, const char *a2, unsigned __int16 a3)
{
  unsigned __int16 valuePtr = a3;
  CFTypeRef cf = 0LL;
  CFStringRef v4 = CFStringCreateWithCString(0LL, a2, 0x8000100u);
  CFDictionaryGetValueIfPresent(a1, v4, &cf);
  if (cf)
  {
    CFTypeID v5 = CFGetTypeID(cf);
    if (v5 == CFNumberGetTypeID())
    {
      CFNumberGetValue((CFNumberRef)cf, kCFNumberShortType, &valuePtr);
      CFTypeID v6 = sub_1000160F4("com.apple.wpantund.tnm", "default");
      CFStringRef v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 67109120;
        int v11 = valuePtr;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Read value: %d", buf, 8u);
      }
    }
  }

  if (v4) {
    CFRelease(v4);
  }
}

void sub_100111934(const __CFDictionary *a1, const char *a2, uint64_t a3)
{
  CFTypeRef cf = 0LL;
  uint64_t valuePtr = a3;
  CFStringRef v4 = CFStringCreateWithCString(0LL, a2, 0x8000100u);
  CFDictionaryGetValueIfPresent(a1, v4, &cf);
  if (cf)
  {
    CFTypeID v5 = CFGetTypeID(cf);
    if (v5 == CFNumberGetTypeID())
    {
      CFNumberGetValue((CFNumberRef)cf, kCFNumberLongLongType, &valuePtr);
      CFTypeID v6 = sub_1000160F4("com.apple.wpantund.tnm", "default");
      CFStringRef v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 134217984;
        uint64_t v11 = valuePtr;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Read long long value: %llu", buf, 0xCu);
      }
    }
  }

  if (v4) {
    CFRelease(v4);
  }
}

void sub_100111A48(const __CFDictionary *a1, const char *a2, UInt8 *a3, unsigned int a4)
{
  value = 0LL;
  CFStringRef v7 = CFStringCreateWithCString(0LL, a2, 0x8000100u);
  CFDictionaryGetValueIfPresent(a1, v7, (const void **)&value);
  if (value)
  {
    CFTypeID v8 = CFGetTypeID(value);
    if (v8 == CFDataGetTypeID())
    {
      uint64_t v9 = a4;
      v20.locatiouint64_t n = 0LL;
      v20.length = a4;
      CFDataGetBytes((CFDataRef)value, v20, a3);
      __chkstk_darwin(v10);
      __int16 v12 = (char *)&v16 - v11;
      sub_100159A78((unint64_t)a3, v9, (_BYTE *)&v16 - v11, v13, 0);
      CFDictionaryRef v14 = sub_1000160F4("com.apple.wpantund.tnm", "default");
      CFNumberRef v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 136315138;
        CFNumberRef v19 = v12;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Read Data value: %s", buf, 0xCu);
      }
    }
  }

  if (v7) {
    CFRelease(v7);
  }
}

void sub_100111BC0(uint64_t a1@<X8>)
{
  unint64_t v2 = CFStringCreateWithCString(0LL, "TC", 0x8000100u);
  CFPropertyListRef v3 = CFStringCreateWithCString(0LL, "com.apple.wpantundData", 0x8000100u);
  CFStringRef v4 = (const __CFDictionary *)CFPreferencesCopyAppValue(v2, v3);
  if (v2) {
    CFRelease(v2);
  }
  if (v3) {
    CFRelease(v3);
  }
  *(void *)(a1 + 304) = 0LL;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + sub_100071254(v1 - 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + sub_1000B7CEC(v41 - 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + sub_1000B7CEC(v41 - 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  CFTypeID v5 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  CFTypeID v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v8 = 138412290;
    uint64_t v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Read TC Dict: %@", (uint8_t *)&v8, 0xCu);
  }

  if (v4)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (TypeID == CFGetTypeID(v4))
    {
      sub_1001116F4(v4, "networkName", (char *)(a1 + 16), 256);
      sub_1001116F4(v4, "PSKc", (char *)(a1 + 288), 16);
      sub_10011181C(v4, "channel", *(_WORD *)(a1 + 304));
      sub_10011181C(v4, "panid", *(_WORD *)a1);
      sub_100111934(v4, "xpanid", *(void *)(a1 + 8));
      sub_100111A48(v4, "masterKey", (UInt8 *)(a1 + 272), 0x10u);
    }

    CFRelease(v4);
  }

BOOL sub_100111DB0(std::string *a1, uint64_t a2, std::string *a3)
{
  CFTypeID v6 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  CFStringRef v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    else {
      int v8 = *(void **)a2;
    }
    if ((a1->__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v9 = a1;
    }
    else {
      uint64_t v9 = (std::string *)a1->__r_.__value_.__r.__words[0];
    }
    p_p = &__p;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315906;
    CFDictionaryRef v22 = "getCommissionerPassPhrase";
    __int16 v23 = 2080;
    int v24 = v8;
    __int16 v25 = 2080;
    __int16 v26 = v9;
    __int16 v27 = 2080;
    int v28 = p_p;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s : parameters - XPANID: %s, NWName: %s and key : %s",  buf,  0x2Au);
  }

  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v11 = &__p;
  }
  else {
    uint64_t v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  __int16 v12 = sub_100110CE0((char *)v11);
  if (v12)
  {
    unint64_t v13 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    CFDictionaryRef v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      CFNumberRef v15 = &__p;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        CFNumberRef v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315650;
      CFDictionaryRef v22 = "getCommissionerPassPhrase";
      __int16 v23 = 2080;
      int v24 = v12;
      __int16 v25 = 2080;
      __int16 v26 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%s : Value found %s, key is %s ", buf, 0x20u);
    }

    std::string::append(a3, (const std::string::value_type *)v12);
  }

  else
  {
    uint64_t v16 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    double v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      __int16 v18 = &__p;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        __int16 v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315394;
      CFDictionaryRef v22 = "getCommissionerPassPhrase";
      __int16 v23 = 2080;
      int v24 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "%s : Value not found, key is %s ", buf, 0x16u);
    }
  }

  return v12 != 0LL;
}

void sub_100112048( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10011207C(const std::string::value_type *a1, const std::string::value_type *a2, char *a3)
{
  CFTypeID v5 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  CFTypeID v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    CFStringRef v7 = &v9;
    if ((v9.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      CFStringRef v7 = (std::string *)v9.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315650;
    uint64_t v11 = "saveCommissionPassPhrasesAsString";
    __int16 v12 = 2080;
    unint64_t v13 = v7;
    __int16 v14 = 2080;
    CFNumberRef v15 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s : Saving Credentials string as follows key: %s, PassPhrase : %s",  buf,  0x20u);
  }

  if ((v9.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v8 = &v9;
  }
  else {
    int v8 = (std::string *)v9.__r_.__value_.__r.__words[0];
  }
  sub_10010FFCC((char *)v8, a3);
}

void sub_1001121A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

BOOL sub_1001121D0()
{
  CFArrayRef v18 = CFPreferencesCopyKeyList(@"com.apple.wpantundData", kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
  uint64_t v0 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  unsigned int v1 = (os_log_s *)objc_claimAutoreleasedReturnValue(v0);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 136315138;
    int v24 = "removekeyEntryFromPlist";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "%s: Copied KeyList", buf, 0xCu);
  }

  if (v18)
  {
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    unint64_t v2 = v18;
    id v3 = -[__CFArray countByEnumeratingWithState:objects:count:]( v2,  "countByEnumeratingWithState:objects:count:",  &v19,  v27,  16LL);
    CFStringRef v4 = v2;
    if (v3)
    {
      unsigned __int8 v5 = 0;
      uint64_t v6 = *(void *)v20;
      do
      {
        for (uint64_t i = 0LL; i != v3; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v20 != v6) {
            objc_enumerationMutation(v2);
          }
          int v8 = *(__CFString **)(*((void *)&v19 + 1) + 8LL * (void)i);
          if (-[__CFString containsString:](v8, "containsString:", @"MyHome"))
          {
            CFPreferencesSetAppValue(v8, 0LL, @"com.apple.wpantundData");
            std::string v9 = sub_1000160F4("com.apple.wpantund.tnm", "default");
            uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
            if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
            {
              uint64_t v11 = (const char *)-[__CFString UTF8String](v8, "UTF8String");
              *(_DWORD *)std::string buf = 136315394;
              int v24 = "removekeyEntryFromPlist";
              __int16 v25 = 2080;
              __int16 v26 = v11;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s: Deleted key =>  %s", buf, 0x16u);
            }
          }

          else if ((v5 & 1) != 0)
          {
            unsigned __int8 v5 = 1;
          }

          else
          {
            unsigned __int8 v5 = -[__CFString isEqualToString:](v8, "isEqualToString:", @"TC");
          }
        }

        id v3 = -[__CFArray countByEnumeratingWithState:objects:count:]( v2,  "countByEnumeratingWithState:objects:count:",  &v19,  v27,  16LL);
      }

      while (v3);

      if ((v5 & 1) == 0)
      {
LABEL_22:
        unint64_t v13 = sub_1000160F4("com.apple.wpantund.tnm", "default");
        __int16 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 136315138;
          int v24 = "removekeyEntryFromPlist";
          CFNumberRef v15 = "%s: function end. ";
LABEL_26:
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, v15, buf, 0xCu);
          goto LABEL_27;
        }

        goto LABEL_27;
      }

      CFPreferencesSetAppValue(@"TC", 0LL, @"com.apple.wpantundData");
      __int16 v12 = sub_1000160F4("com.apple.wpantund.tnm", "default");
      CFStringRef v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 136315394;
        int v24 = "removekeyEntryFromPlist";
        __int16 v25 = 2080;
        __int16 v26 = "TC";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s: Deleted key =>  %s", buf, 0x16u);
      }
    }

    goto LABEL_22;
  }

  uint64_t v16 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  __int16 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 136315138;
    int v24 = "removekeyEntryFromPlist";
    CFNumberRef v15 = "%s: Couldn't copy plist in NSArray object";
    goto LABEL_26;
  }

void sub_1001125AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001125FC(_BYTE *a1, int a2, int a3)
{
  uint64_t v6 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v6)
  {
    CFStringRef v7 = v6;
    if (sub_10015A058(6) && os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = a2;
      __int16 v21 = 1024;
      int v22 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "Primary link state changed: UP=%d RUNNING=%d",  buf,  0xEu);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  if (a2)
  {
    sub_10000AC00(buf, "Daemon:AutoAssociateAfterReset");
    int v8 = operator new(0x10uLL);
    *(void *)int v8 = &off_1002AEA00;
    v8[8] = 1;
    __int128 v19 = v8;
    v18[0] = (char *)off_1002AED78 + 1;
    (*(void (**)(_BYTE *, uint8_t *, _BYTE **, void *))(*(void *)a1 + 336LL))(a1, buf, &v19, v18);
    sub_1000075F0(v18);
    if (v19) {
      (*(void (**)(_BYTE *))(*(void *)v19 + 8LL))(v19);
    }
    if (v23 < 0) {
      operator delete(*(void **)buf);
    }
    if (a1[1376])
    {
      sub_10000AC00(buf, "Interface:Up");
      std::string v9 = operator new(0x10uLL);
      *(void *)std::string v9 = &off_1002AEA00;
      _BYTE v9[8] = 1;
      __int128 v19 = v9;
      v16[0] = (char *)off_1002AED78 + 1;
      (*(void (**)(_BYTE *, uint8_t *, _BYTE **, void *))(*(void *)a1 + 336LL))(a1, buf, &v19, v16);
      uint64_t v10 = v16;
    }

    else
    {
      sub_10000AC00(buf, "Daemon:Enabled");
      unint64_t v13 = operator new(0x10uLL);
      *(void *)unint64_t v13 = &off_1002AEA00;
      v13[8] = 1;
      __int128 v19 = v13;
      v17[0] = (char *)off_1002AED78 + 1;
      (*(void (**)(_BYTE *, uint8_t *, _BYTE **, void *))(*(void *)a1 + 336LL))(a1, buf, &v19, v17);
      uint64_t v10 = v17;
    }
  }

  else
  {
    sub_10000AC00(buf, "Daemon:AutoAssociateAfterReset");
    uint64_t v11 = operator new(0x10uLL);
    *(void *)uint64_t v11 = &off_1002AEA00;
    uint8_t v11[8] = 0;
    __int128 v19 = v11;
    v15[0] = (char *)off_1002AED78 + 1;
    (*(void (**)(_BYTE *, uint8_t *, _BYTE **, void *))(*(void *)a1 + 336LL))(a1, buf, &v19, v15);
    sub_1000075F0(v15);
    if (v19) {
      (*(void (**)(_BYTE *))(*(void *)v19 + 8LL))(v19);
    }
    if (v23 < 0) {
      operator delete(*(void **)buf);
    }
    sub_10000AC00(buf, "Interface:Up");
    __int16 v12 = operator new(0x10uLL);
    *(void *)__int16 v12 = &off_1002AEA00;
    v12[8] = 0;
    __int128 v19 = v12;
    v14[0] = (char *)off_1002AED78 + 1;
    (*(void (**)(_BYTE *, uint8_t *, _BYTE **, void *))(*(void *)a1 + 336LL))(a1, buf, &v19, v14);
    uint64_t v10 = v14;
  }

  sub_1000075F0(v10);
  if (v19) {
    (*(void (**)(_BYTE *))(*(void *)v19 + 8LL))(v19);
  }
  if (v23 < 0) {
    operator delete(*(void **)buf);
  }
}

void sub_10011293C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v12 = *(void *)(v10 - 88);
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
  }
  _Unwind_Resume(a1);
}

void sub_1001129C4(uint64_t a1, int a2, int a3)
{
  unsigned __int8 v5 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10015A058(6))
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v7[0] = 67109376;
        v7[1] = a2;
        __int16 v8 = 1024;
        int v9 = a3;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Legacy link state changed: UP=%d RUNNING=%d",  (uint8_t *)v7,  0xEu);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

uint64_t sub_100112AB8(uint64_t a1, int a2)
{
  *(_BYTE *)(a1 + 1413) = a2;
  uint64_t v2 = sub_10011F624(*(void *)(a1 + 184));
  if (a2) {
    sub_1000EDD28(a1);
  }
  if ((_DWORD)v2) {
    return v2;
  }
  uint64_t v6 = *(void *)(a1 + 1552);
  if (!v6) {
    return 0LL;
  }
  if (a2 && *(_BYTE *)(a1 + 1601))
  {
    uint64_t v2 = sub_10011F624(v6);
    return v2;
  }

  return sub_10011F624(v6);
}

void sub_100112B7C(unsigned __int8 *a1, void *a2)
{
  CFStringRef v4 = a1 + 1415;
  if (*a2 != *(void *)(a1 + 1415))
  {
    *CFStringRef v4 = *a2;
    unsigned __int8 v5 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v5)
    {
      uint64_t v6 = v5;
      if (sub_10015A058(6) && os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        int v7 = a1[1415];
        int v8 = a1[1416];
        int v9 = a1[1417];
        int v10 = a1[1418];
        int v11 = a1[1419];
        int v12 = a1[1420];
        int v13 = a1[1421];
        int v14 = a1[1422];
        *(_DWORD *)std::string buf = 67110912;
        *(_DWORD *)&uint8_t buf[4] = v7;
        __int16 v24 = 1024;
        int v25 = v8;
        __int16 v26 = 1024;
        int v27 = v9;
        __int16 v28 = 1024;
        int v29 = v10;
        __int16 v30 = 1024;
        int v31 = v11;
        __int16 v32 = 1024;
        int v33 = v12;
        __int16 v34 = 1024;
        int v35 = v13;
        __int16 v36 = 1024;
        int v37 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "NCP Status: MACAddr:           %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X",  buf,  0x32u);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    if ((*(_BYTE *)a2 & 1) != 0)
    {
      CFNumberRef v15 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v15)
      {
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }
    }

    sub_10000AC00(buf, "NCP:MACAddress");
    __n128 v19 = 0uLL;
    uint64_t v20 = 0LL;
    sub_100018E8C(&v19, v4, (uint64_t)(a1 + 1423), 8uLL);
    uint64_t v16 = operator new(0x20uLL);
    __n128 v17 = sub_10001A3BC(v16, &v19);
    uint64_t v21 = v18;
    (*(void (**)(unsigned __int8 *, uint8_t *, uint64_t *, __n128))(*(void *)a1 + 360LL))( a1,  buf,  &v21,  v17);
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
    }
    int v22 = &v19;
    sub_100006F6C((void ***)&v22);
    if (SBYTE1(v29) < 0) {
      operator delete(*(void **)buf);
    }
  }

  if (!sub_100159E98(a1 + 1423, 8LL)) {
    sub_100112E3C(a1, a2);
  }
}

void sub_100112DE4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8LL))(a13);
  }
  a14 = &a10;
  sub_100006F6C((void ***)&a14);
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100112E3C(unsigned __int8 *a1, void *a2)
{
  uint64_t v2 = a1 + 1423;
  if (*a2 != *(void *)(a1 + 1423))
  {
    *uint64_t v2 = *a2;
    unsigned __int8 v5 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v5)
    {
      uint64_t v6 = v5;
      if (sub_10015A058(6) && os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        int v7 = a1[1423];
        int v8 = a1[1424];
        int v9 = a1[1425];
        int v10 = a1[1426];
        int v11 = a1[1427];
        int v12 = a1[1428];
        int v13 = a1[1429];
        int v14 = a1[1430];
        *(_DWORD *)std::string buf = 67438593;
        *(_DWORD *)&uint8_t buf[4] = v7;
        __int16 v24 = 1029;
        int v25 = v8;
        __int16 v26 = 1029;
        int v27 = v9;
        __int16 v28 = 1029;
        int v29 = v10;
        __int16 v30 = 1029;
        int v31 = v11;
        __int16 v32 = 1029;
        int v33 = v12;
        __int16 v34 = 1029;
        int v35 = v13;
        __int16 v36 = 1029;
        int v37 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "NCP Status: MACHardwareAddr:   %{sensitive}02X:%{sensitive}02X:%{sensitive}02X:%{sensitive}02X:%{sensitive}02X :%{sensitive}02X:%{sensitive}02X:%{sensitive}02X",  buf,  0x32u);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    if ((*(_BYTE *)a2 & 1) != 0)
    {
      CFNumberRef v15 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v15)
      {
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }
    }

    sub_10000AC00(buf, "NCP:HardwareAddress");
    __n128 v19 = 0uLL;
    uint64_t v20 = 0LL;
    sub_100018E8C(&v19, v2, (uint64_t)(a1 + 1431), 8uLL);
    uint64_t v16 = operator new(0x20uLL);
    __n128 v17 = sub_10001A3BC(v16, &v19);
    uint64_t v21 = v18;
    (*(void (**)(unsigned __int8 *, uint8_t *, uint64_t *, __n128))(*(void *)a1 + 360LL))( a1,  buf,  &v21,  v17);
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
    }
    int v22 = &v19;
    sub_100006F6C((void ***)&v22);
    if (SBYTE1(v29) < 0) {
      operator delete(*(void **)buf);
    }
  }

void sub_100113088( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8LL))(a13);
  }
  a14 = &a10;
  sub_100006F6C((void ***)&a14);
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1001130E0(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v2)
  {
    id v3 = v2;
    if (sub_10015A058(5) && os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)unsigned __int8 v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Resetting interface(s). . .", v5, 2u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  *(_BYTE *)(a1 + 1499) = 0;
  sub_1001131C8(a1, 0, 0, 0);
  (*(void (**)(void))(**(void **)(a1 + 184) + 104LL))(*(void *)(a1 + 184));
  sub_1000ECA90(a1);
  uint64_t result = *(void *)(a1 + 1552);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 104LL))(result);
  }
  return result;
}

time_t sub_1001131C8(uint64_t a1, int a2, char a3, int a4)
{
  if (a2 >= 1 && !a4) {
    return 2LL;
  }
  if (a2 >= 1 && a4)
  {
    time_t result = sub_1001431B8();
    time_t v9 = result + a2;
    if (__OFADD__(result, a2))
    {
      __break(0x5500u);
    }

    else
    {
      time_t result = 0LL;
      *(void *)(a1 + 1344) = v9;
      *(_BYTE *)(a1 + 1240) = a3;
      *(_WORD *)(a1 + 1242) = a4;
      *(_BYTE *)(a1 + 1244) = 1;
      *(_WORD *)(a1 + 1248) = -32514;
      *(_BYTE *)(a1 + 1264) = 10;
    }
  }

  else
  {
    *(void *)(a1 + 1344) = 0LL;
    sub_1000F1694(a1 + 1296);
    return 0LL;
  }

  return result;
}

void sub_10011326C(uint64_t a1)
{
  if (!*(void *)(a1 + 1552))
  {
    uint64_t v2 = operator new(0xF0uLL);
    uint64_t v3 = sub_10011EC48(*(void *)(a1 + 184));
    CFStringRef v4 = (char *)v3;
    else {
      size_t v5 = *(void *)(v3 + 8);
    }
    if (v5 >= 0xFFFFFFFFFFFFFFFELL)
    {
      __break(0x5500u);
    }

    else
    {
      uint64_t v6 = __p;
      sub_1000765F0((uint64_t)__p, v5 + 2);
      if (v12 < 0) {
        uint64_t v6 = (void **)__p[0];
      }
      if (v5)
      {
        if (v4[23] >= 0) {
          int v7 = v4;
        }
        else {
          int v7 = *(char **)v4;
        }
        memmove(v6, v7, v5);
      }

      strcpy((char *)v6 + v5, "-L");
      sub_10011E570(v2, __p, 0LL, 1280LL);
      sub_1000DC548((uint64_t *)&v9, (uint64_t)v2);
      sub_1000D4BE4((__int128 *)(a1 + 1552), &v9);
      sub_10000F9EC((uint64_t *)&v9 + 1);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v8 = *(void *)(a1 + 1552) + 120LL;
      __int128 v9 = xmmword_10022A000;
      uint64_t v10 = a1;
      sub_1000DFD20(__p, (uint64_t)&v9);
      sub_1000D4CB4(v8, (uint64_t)__p, 0, &v14);
      sub_10000EF74(&v15);
      sub_1000DC038(v13);
      uint64_t v16 = __p;
      sub_10000EFEC(&v16);
    }
  }

void sub_1001133DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

BOOL sub_100113424(uint64_t a1)
{
  return *(_BYTE *)(a1 + 1601) && *(void *)(a1 + 1552) != 0LL;
}

uint64_t sub_100113444(uint64_t a1, uint64_t a2)
{
  CFStringRef v4 = (char *)(a2 + 23);
  else {
    size_t v5 = *(const char **)a2;
  }
  uint64_t v6 = gethostbyname2(v5, 30);
  if (h_errno) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = v6 == 0LL;
  }
  if (v7)
  {
    uint64_t v8 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v8)
    {
      __int128 v9 = v8;
      goto LABEL_24;
    }

    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_24;
    }
LABEL_23:
    sub_1001FB53C();
    goto LABEL_24;
  }

  if (v6->h_length <= 1)
  {
    uint64_t v18 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v18)
    {
      __n128 v19 = v18;
      goto LABEL_24;
    }

    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }

  __int128 v29 = *(_OWORD *)*v6->h_addr_list;
LABEL_24:
  int v27 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v27)
  {
    __int16 v28 = v27;
    uint64_t result = sub_10015A058(4);
    if ((_DWORD)result)
    {
      uint64_t result = os_log_type_enabled(v28, OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        sub_100210510(v4, (void *)a2, v28);
        return 0LL;
      }
    }
  }

  else
  {
    uint64_t result = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      sub_1001FB53C();
      return 0LL;
    }
  }

  return result;
}

void sub_100113608(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2 && a3)
  {
    *(_OWORD *)__s = 0u;
    memset(v19, 0, sizeof(v19));
    uint64_t v6 = (ot *)(a2 + 3);
    inet_ntop(30, a2 + 3, __s, 0x2Eu);
    sub_10000AC00(__p, __s);
    unsigned int v8 = ot::IsMulticastLargerThanRealmLocal(v6, v7);
    uint64_t v9 = (*(uint64_t (**)(void, void *, uint64_t))(**(void **)(a1 + 184) + 16LL))( *(void *)(a1 + 184),  a2,  a3);
    if (v9 != a3)
    {
      uint64_t v10 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v10)
      {
        if (sub_10015A058(6) && os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 134217984;
          uint64_t v17 = v9;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "[NCP->] IPv6 packet refused by host stack! (ret = %ld)",  buf,  0xCu);
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }
    }

    if (v8)
    {
      if (*((_BYTE *)sub_1000AD5C0() + 42012))
      {
        uint64_t v11 = (unsigned __int8 *)sub_1000AD5C0();
        if (sub_10000E098(v11, a2, a3))
        {
          uint64_t v12 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v12)
          {
            if (sub_10015A058(6) && os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
            {
              uint64_t v13 = __p;
              if (v15 < 0) {
                uint64_t v13 = (void **)__p[0];
              }
              *(_DWORD *)std::string buf = 136315138;
              uint64_t v17 = (uint64_t)v13;
              _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "[NCP->] Ipv6 packet to dest %s sent on the backbone interface",  buf,  0xCu);
            }
          }

          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            sub_1001FB53C();
          }
        }
      }
    }

    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }

void sub_100113834( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100113864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 1552) + 16LL))(*(void *)(a1 + 1552));
  if (v4 != a3)
  {
    uint64_t v5 = v4;
    uint64_t v6 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v6)
    {
      BOOL v7 = v6;
      if (sub_10015A058(6))
      {
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          int v8 = 134217984;
          uint64_t v9 = v5;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "[NCP->] IPv6 packet refused by host stack! (ret = %ld)",  (uint8_t *)&v8,  0xCu);
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }
  }

uint64_t sub_10011395C(uint64_t a1, _BYTE *a2, uint64_t a3, unint64_t a4)
{
  int v8 = *a2;
  uint64_t v9 = "SECURE";
  if (v8 == 2 || v8 == 4)
  {
    if (*(void *)(a1 + 1312) && sub_100114358(a1 + 1296, v37))
    {
      uint64_t v11 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v11)
      {
        uint64_t v12 = v11;
        if (sub_10015A058(5) && os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)__int16 v36 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Secure packet matched rule on insecure firewall, removing rule.",  v36,  2u);
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }

      sub_1001143C0(a1 + 1296, v37);
      int v19 = *a2;
      if (v19 != 4)
      {
        int v18 = 0;
        goto LABEL_32;
      }

      sub_1000E0058((uint64_t **)(a1 + 1568), v37, (uint64_t)v37);
    }

    goto LABEL_26;
  }

  if (v8 != 3)
  {
    int v18 = 0;
    goto LABEL_34;
  }

  int v13 = sub_1000D8DE8(a1);
  if (sub_1000B50A8(v13)) {
    goto LABEL_26;
  }
  time_t v14 = *(void *)(a1 + 1344);
  if (!v14) {
    goto LABEL_74;
  }
  if (v14 <= sub_1001431B8())
  {
    __int16 v30 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v30)
    {
      int v31 = v30;
      if (sub_10015A058(5) && os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)__int16 v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "Commissioning period has ended", v36, 2u);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    *(void *)(a1 + 1344) = 0LL;
    sub_1000F1694(a1 + 1296);
    goto LABEL_74;
  }

  if (sub_100114358(a1 + 1296, v37))
  {
    char v15 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v15)
    {
      uint64_t v16 = v15;
      *(_WORD *)__int16 v36 = 0;
      uint64_t v17 = "[NCP->] Routing insecure commissioning traffic.";
      goto LABEL_82;
    }

    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
LABEL_90:
    }
      sub_1001FB53C();
LABEL_26:
    int v18 = 0;
    goto LABEL_27;
  }

  if (sub_100156E80((unsigned __int8 *)(a1 + 1240), a3))
  {
    v37[1] = -1;
    sub_1000E0058((uint64_t **)(a1 + 1296), v37, (uint64_t)v37);
    __int16 v32 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (!v32)
    {
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_26;
      }
      goto LABEL_90;
    }

    uint64_t v16 = v32;
    *(_WORD *)__int16 v36 = 0;
    uint64_t v17 = "[NCP->] Tracking *NEW* insecure commissioning connection.";
LABEL_82:
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, v17, v36, 2u);
    goto LABEL_26;
  }

  if (v37[0] == 58)
  {
    sub_1000E0058((uint64_t **)(a1 + 1296), v37, (uint64_t)v37);
    int v33 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (!v33)
    {
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_26;
      }
      goto LABEL_90;
    }

    uint64_t v16 = v33;
    *(_WORD *)__int16 v36 = 0;
    uint64_t v17 = "[NCP->] Tracking *NEW* ICMP ping during commissioning.";
    goto LABEL_82;
  }

  __int16 v34 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (!v34)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1001FB53C();
    }
    goto LABEL_74;
  }

  int v35 = v34;
  if (!sub_10015A058(6))
  {
LABEL_74:
    int v18 = 1;
    goto LABEL_27;
  }

  int v18 = 1;
  if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)__int16 v36 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_INFO,  "[NCP->] Non-matching insecure traffic while joinable, ignoring",  v36,  2u);
  }