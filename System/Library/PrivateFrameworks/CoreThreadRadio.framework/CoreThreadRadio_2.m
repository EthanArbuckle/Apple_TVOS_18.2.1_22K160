uint64_t sub_100113F90(void *a1, _BYTE *a2, unsigned __int8 *a3, int64_t a4)
{
  unsigned int v8;
  os_log_s *v9;
  os_log_s *v10;
  uint64_t result;
  os_log_s *v12;
  os_log_s *v13;
  os_log_s *v14;
  os_log_s *v15;
  os_log_s *v16;
  os_log_s *v17;
  int v18;
  time_t v19;
  os_log_s *v20;
  os_log_s *v21;
  uint64_t v22;
  int v23;
  const char *v24;
  const char *v25;
  uint8_t v26[12];
  unsigned __int8 v27[52];
  v8 = sub_1000D8DE8((uint64_t)a1);
  if ((sub_1000B50B8(v8) & 1) != 0)
  {
    if (a4 >= 17 && (*a3 & 0xF0) == 0x60)
    {
      sub_100156F84((uint64_t)v27, (uint64_t)a3);
      if (a1 + 166 == sub_10015732C(a1 + 165, (uint64_t)a3))
      {
        if (sub_100114358((uint64_t)(a1 + 196), v27))
        {
          if (*a2 == 4) {
            *a2 = 2;
          }
          else {
            sub_1001143C0((uint64_t)(a1 + 196), v27);
          }
        }

        v27[1] = -1;
        if (sub_100114358((uint64_t)(a1 + 162), v27))
        {
          v16 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v16)
          {
            v17 = v16;
            if (sub_10015A058(6) && os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)v26 = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "[->NCP] Routing insecure commissioning traffic.",  v26,  2u);
            }
          }

          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            sub_1001FB53C();
          }

          *a2 = 3;
        }

        v18 = sub_1000D8DE8((uint64_t)a1);
        if (sub_1000B50A8(v18))
        {
          *a2 = 3;
        }

        else
        {
          v19 = a1[168];
          if (v19 && v19 < sub_1001431B8())
          {
            v20 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
            if (v20)
            {
              v21 = v20;
              if (sub_10015A058(5) && os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)v26 = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_INFO,  "Commissioning period has ended",  v26,  2u);
              }
            }

            else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              sub_1001FB53C();
            }

            a1[168] = 0LL;
            sub_1000F1694((uint64_t)(a1 + 162));
          }
        }

        v22 = (*(uint64_t (**)(void *))(*a1 + 32LL))(a1);
        sub_10010B21C(v22, (uint64_t)a3);
        v23 = *a2;
        v24 = "SECURE";
        if (v23 == 4) {
          v24 = "LEGACY";
        }
        if (v23 == 3) {
          v25 = "INSECURE";
        }
        else {
          v25 = v24;
        }
        sub_1001573FC((uint64_t)a3, a4, (uint64_t)v25, 0);
        return 1LL;
      }

      else
      {
        v9 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v9)
        {
          v10 = v9;
          result = sub_10015A058(6);
          if ((_DWORD)result)
          {
            result = os_log_type_enabled(v10, OS_LOG_TYPE_INFO);
            if ((_DWORD)result)
            {
              *(_WORD *)v26 = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "[->NCP] Dropping matched packet.",  v26,  2u);
              return 0LL;
            }
          }
        }

        else
        {
          result = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
          if ((_DWORD)result)
          {
            sub_1001FB53C();
            return 0LL;
          }
        }
      }

      return result;
    }

    v14 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v14)
    {
      v15 = v14;
      result = sub_10015A058(7);
      if ((_DWORD)result)
      {
        result = os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG);
        if ((_DWORD)result)
        {
          sub_1002107E0(a3, v15);
          return 0LL;
        }
      }

      return result;
    }

    result = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result) {
      return result;
    }
LABEL_20:
    sub_1001FB53C();
    return 0LL;
  }

  v12 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (!v12)
  {
    result = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result) {
      return result;
    }
    goto LABEL_20;
  }

  v13 = v12;
  result = sub_10015A058(7);
  if ((_DWORD)result)
  {
    result = os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG);
    if ((_DWORD)result)
    {
      sub_100210854();
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100114358(uint64_t a1, unsigned __int8 *a2)
{
  v2 = *(unsigned __int8 **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = 1LL;
    do
    {
      if ((sub_1001571E4(a2, v2 + 28) & 1) == 0)
      {
        v2 += 8;
      }

      v2 = *(unsigned __int8 **)v2;
    }

    while (v2);
  }

  return 0LL;
}

uint64_t sub_1001143C0(uint64_t a1, unsigned __int8 *a2)
{
  v3 = (uint64_t *)sub_100114404(a1, a2);
  sub_100011568(a1, v3);
  return 1LL;
}

uint64_t sub_100114404(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = a1 + 8;
  uint64_t v4 = sub_10011445C(a1, a2, *(void *)(a1 + 8), a1 + 8);
  if (v3 != v4)
  {
    uint64_t v5 = v4;
  }

  return v3;
}

uint64_t sub_10011445C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v5 = a3;
    do
    {
      int v7 = sub_1001571E4((unsigned __int8 *)(v5 + 28), a2);
      v8 = (uint64_t *)(v5 + 8);
      if (!v7)
      {
        v8 = (uint64_t *)v5;
        a4 = v5;
      }

      uint64_t v5 = *v8;
    }

    while (*v8);
  }

  return a4;
}

void *sub_1001144B4(unsigned int a1, uint64_t a2, ...)
{
  return sub_1000B5130(a1, (uint64_t *)va);
}

uint64_t sub_1001144C0(uint64_t result)
{
  *(_DWORD *)result = 0;
  *(void *)(result + 8) = 0LL;
  return result;
}

void sub_1001144CC(int *a1)
{
  if (*a1 >= 5)
  {
    uint64_t v1 = (*a1 - 4) * (uint64_t)(*a1 - 4);
    if (v1 == (int)v1)
    {
      float v3 = (float)(int)v1 * 0.5;
      uint64_t v4 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v4)
      {
        uint64_t v5 = v4;
        if (sub_10015A058(3))
        {
          if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
            sub_100210880(a1, v5, v3);
          }
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_10020CC20();
      }
    }

    else
    {
      __break(0x550Cu);
    }
  }

_DWORD *sub_10011458C(_DWORD *result)
{
  if (__OFADD__(*result, 1) || (uint64_t v1 = result, ++*result, result = (_DWORD *)sub_1001431B8(), __OFADD__(result, 15LL))) {
    __break(0x5500u);
  }
  else {
    *((void *)v1 + 1) = (char *)result + 15;
  }
  return result;
}

time_t sub_1001145CC(time_t result)
{
  if (*(int *)result >= 1)
  {
    time_t v1 = result;
    time_t v2 = *(void *)(result + 8);
    result = sub_1001431B8();
    if (v2 < result)
    {
      if (__OFSUB__(*(_DWORD *)v1, 1))
      {
        __break(0x5515u);
      }

      else
      {
        --*(_DWORD *)v1;
        result = sub_1001431B8();
        if (!__OFADD__(result, 15LL))
        {
          *(void *)(v1 + 8) = result + 15;
          return result;
        }
      }

      __break(0x5500u);
    }
  }

  return result;
}

LABEL_71:
  v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_retryIntervalMin));
  [v3 setObject:v19 forKey:@"retry_interval_min"];

  v8 = self->_has;
  if ((*(_WORD *)&v8 & 0x1000) == 0)
  {
LABEL_14:
    if ((*(_WORD *)&v8 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_73;
  }

  PBDataWriterWriteUint32Field(v7, self->_retryIntervalMin, 10LL);
  v6 = self->_has;
  if ((*(_WORD *)&v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((*(_WORD *)&v6 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_73;
  }

  v4[15] = self->_retryIntervalMin;
  *((void *)v4 + 31) |= 0x2000uLL;
  v6 = self->_has;
  if ((*(_WORD *)&v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((*(_WORD *)&v6 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_73;
  }

  *((_DWORD *)v6 + 13) = self->_retryIntervalAvg;
  v6[31] |= 0x800uLL;
  v10 = self->_has;
  if ((*(_WORD *)&v10 & 0x400) == 0)
  {
LABEL_14:
    if ((*(void *)&v10 & 0x8000000000LL) == 0) {
      goto LABEL_15;
    }
    goto LABEL_73;
  }

  v51 = 0LL;
  if ((*(void *)&v4 & 0x8000000000LL) != 0)
  {
LABEL_19:
    v50 = 2654435761LL * self->_txDelayMin;
    if ((*(void *)&v4 & 0x4000000000LL) != 0) {
      goto LABEL_20;
    }
    goto LABEL_73;
  }

      objc_msgSend(v4, "setRttMinVal:", sub_1000BE984(4, uint64));
      goto LABEL_139;
    }

    if (v42 != 10) {
      goto LABEL_125;
    }
    goto LABEL_56;
  }

  uint64_t v5 = sub_1000160F4("com.apple.wpantund.awd", "default");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_ERROR)) {
    sub_100212EB0();
  }
  count = 1LL;
LABEL_143:

LABEL_144:
  return count;
}

LABEL_72:
  v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_retryIntervalMax));
  [v3 setObject:v20 forKey:@"retry_interval_max"];

  v8 = self->_has;
  if ((*(_WORD *)&v8 & 0x800) == 0)
  {
LABEL_15:
    if ((*(_WORD *)&v8 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_74;
  }

  PBDataWriterWriteUint32Field(v7, self->_retryIntervalMax, 11LL);
  v6 = self->_has;
  if ((*(_WORD *)&v6 & 0x800) == 0)
  {
LABEL_15:
    if ((*(_WORD *)&v6 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_74;
  }

  v4[14] = self->_retryIntervalMax;
  *((void *)v4 + 31) |= 0x1000uLL;
  v6 = self->_has;
  if ((*(_WORD *)&v6 & 0x800) == 0)
  {
LABEL_15:
    if ((*(_WORD *)&v6 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_74;
  }

  *((_DWORD *)v6 + 12) = self->_retryInterval90perc;
  v6[31] |= 0x400uLL;
  v10 = self->_has;
  if ((*(void *)&v10 & 0x8000000000LL) == 0)
  {
LABEL_15:
    if ((*(void *)&v10 & 0x4000000000LL) == 0) {
      goto LABEL_16;
    }
    goto LABEL_74;
  }

  v50 = 0LL;
  if ((*(void *)&v4 & 0x4000000000LL) != 0)
  {
LABEL_20:
    v49 = 2654435761LL * self->_txDelayMax;
    if ((*(void *)&v4 & 0x2000000000LL) != 0) {
      goto LABEL_21;
    }
    goto LABEL_74;
  }

        objc_msgSend(v4, "setRttMaxVal:", sub_1000BE984(4, uint64));
        goto LABEL_139;
      }

      --v12;
      if ((v20 & 1) == 0) {
        goto LABEL_77;
      }
      goto LABEL_75;
    }

    if ((qword_1002C9390 & 0xFFFFFFFFFFFFFFFELL) == 0xB2AB117A257EDFD0LL
      || ((BOOL (*)(uint64_t, int))boost::system::detail::generic_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::generic_cat_holder<void>::instance,  62))
    {
      v23 = 3LL;
    }

    else
    {
      v23 = 2LL;
    }

    v12 = 0;
    *(void *)&v39 = 62LL;
    *((void *)&v39 + 1) = &boost::system::detail::generic_cat_holder<void>::instance;
    v21 = 3;
    v40 = v23;
LABEL_77:
    if (v29 < 0) {
      operator delete(v28);
    }
    if (v21 == 15)
    {
      if ((char)a4->__r_.__value_.__s.__size_ < 0)
      {
        *a4->__r_.__value_.__l.__data_ = 0;
        a4->__r_.__value_.__l.__size_ = 0LL;
      }

      else
      {
        a4->__r_.__value_.__s.__data_[0] = 0;
        a4->__r_.__value_.__s.__size_ = 0;
      }

      continue;
    }

    break;
  }

  if (v21 == 6)
  {
    v21 = 1;
  }

  else if ((char)a4->__r_.__value_.__s.__size_ < 0)
  {
    operator delete(a4->__r_.__value_.__l.__data_);
  }

  if (v21 == 3)
  {
LABEL_105:
    if (!a3)
    {
      exception = __cxa_allocate_exception(0x30uLL);
      v36 = v39;
      v37 = v40;
      boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::canonical", &__dst, &v36);
    }

    *(_OWORD *)a3 = v39;
    a3[2] = v40;
    goto LABEL_107;
  }

  if (v21 == 2) {
    goto LABEL_107;
  }
LABEL_108:
}

LABEL_73:
  v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_retryIntervalAvg));
  [v3 setObject:v21 forKey:@"retry_interval_avg"];

  v8 = self->_has;
  if ((*(_WORD *)&v8 & 0x400) == 0)
  {
LABEL_16:
    if ((*(void *)&v8 & 0x8000000000LL) == 0) {
      goto LABEL_17;
    }
    goto LABEL_75;
  }

  PBDataWriterWriteUint32Field(v7, self->_retryIntervalAvg, 12LL);
  v6 = self->_has;
  if ((*(_WORD *)&v6 & 0x400) == 0)
  {
LABEL_16:
    if ((*(void *)&v6 & 0x8000000000LL) == 0) {
      goto LABEL_17;
    }
    goto LABEL_75;
  }

  v4[13] = self->_retryIntervalAvg;
  *((void *)v4 + 31) |= 0x800uLL;
  v6 = self->_has;
  if ((*(_WORD *)&v6 & 0x400) == 0)
  {
LABEL_16:
    if ((*(void *)&v6 & 0x8000000000LL) == 0) {
      goto LABEL_17;
    }
    goto LABEL_75;
  }

  *((_DWORD *)v6 + 44) = self->_txDelayMin;
  v6[31] |= 0x8000000000uLL;
  v10 = self->_has;
  if ((*(void *)&v10 & 0x4000000000LL) == 0)
  {
LABEL_16:
    if ((*(void *)&v10 & 0x2000000000LL) == 0) {
      goto LABEL_17;
    }
    goto LABEL_75;
  }

  v49 = 0LL;
  if ((*(void *)&v4 & 0x2000000000LL) != 0)
  {
LABEL_21:
    v48 = 2654435761LL * self->_txDelayAvg;
    if ((*(void *)&v4 & 0x1000000000LL) != 0) {
      goto LABEL_22;
    }
    goto LABEL_75;
  }

  self->_rttAvgVal = v5[17];
  *(void *)&self->_has |= 0x8000uLL;
  v9 = *((void *)v5 + 31);
  if ((v9 & 0x4000) == 0)
  {
LABEL_20:
    if ((v9 & 0x2000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_75;
  }

          v42 = (uint64_t)v13;
LABEL_74:

          v13 = (void *)v42;
LABEL_75:
          v15 = v19;
          if (v19 >= v6) {
            goto LABEL_78;
          }
          break;
      }
    }
  }

  LOBYTE(v14) = 0;
  v138 = 0LL;
  v139 = 0LL;
  v136 = 0LL;
  v137 = 0LL;
  v13 = 0LL;
LABEL_78:
  v60 = sub_1001768B4(1);
  v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
  v62 = os_log_type_enabled(v61, OS_LOG_TYPE_ERROR);
  v64 = v136;
  v63 = v137;
  if (v13 && v137 && v139 && v138 && v136 && (_BYTE)v14)
  {
    if (v62) {
      sub_100199DEC();
    }

    LOBYTE(v128) = 1;
    v61 = -[THThreadNetworkCredentials initWithMasterKey:passPhrase:PSKc:channel:PANID:userInfo:credentialDataSet:isActiveDevice:]( objc_alloc(&OBJC_CLASS___THThreadNetworkCredentials),  "initWithMasterKey:passPhrase:PSKc:channel:PANID:userInfo:credentialDataSet:isActiveDevice:",  v139,  0LL,  v138,  v14,  v136,  0LL,  0LL,  v128);
    v65 = sub_1001768B4(1);
    v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
    v67 = os_log_type_enabled(v66, OS_LOG_TYPE_ERROR);
    if (v61)
    {
      v68 = v135;
      if (v67) {
        sub_100199D7C();
      }

      v69 = [[THThreadNetwork alloc] initWithName:v13 extendedPANID:v137];
      if (v69)
      {
        v70 = v69;
        v71 = -[THThreadNetworkCredentialsDataSet initWithDataSetArray:userInfo:]( objc_alloc(&OBJC_CLASS___THThreadNetworkCredentialsDataSet),  "initWithDataSetArray:userInfo:",  v135,  0LL);
        if (v71)
        {
          v72 = v71;
          v73 = objc_alloc(&OBJC_CLASS___THThreadNetworkBorderAgent);
          v74 = sub_100192F24();
          v75 = (void *)objc_claimAutoreleasedReturnValue(v74);
          v76 = (void *)objc_claimAutoreleasedReturnValue( -[THThreadNetworkCredentialsKeychainBackingStore dataFromHexString:]( self,  "dataFromHexString:",  v75));
          v77 = [v73 initWithBaDiscrId:v76];

          if (v77)
          {
            v78 = (void *)objc_claimAutoreleasedReturnValue( +[THThreadNetworkCredentialsActiveDataSetRecord computedUniqueIdentifierForNetwork:keychainAccessGroup:]( &OBJC_CLASS___THThreadNetworkCredentialsActiveDataSetRecord,  "computedUniqueIdentifierForNetwork:keychainAccessGroup:",  v70,  @"com.apple.thread.dataset"));
            v79 =  -[THThreadNetworkCredentialsActiveDataSetRecord initWithBorderAgent:credentialsDataSet:network:credentials:uniqueIdentifier:keychainAccessGroup:creationDate:lastModificationDate:]( objc_alloc(&OBJC_CLASS___THThreadNetworkCredentialsActiveDataSetRecord),  "initWithBorderAgent:credentialsDataSet:network:credentials:uniqueIdentifier:keychainAccessGroup:cr eationDate:lastModificationDate:",  v77,  v72,  v70,  v61,  v78,  @"0000000000",  0LL,  0LL);
            *a4 = v79;
            if (v79)
            {
              v80 = (void *)objc_claimAutoreleasedReturnValue(-[THThreadNetworkCredentialsActiveDataSetRecord credentials](v79, "credentials"));
              v81 = 1;
              [v80 setIsActiveDevice:1];

              v82 = objc_alloc(&OBJC_CLASS___THThreadNetworkCredentialsDataSet);
              v134 = (void *)objc_claimAutoreleasedReturnValue([*a4 credentialsDataSet]);
              v83 = objc_claimAutoreleasedReturnValue([v134 dataSetArray]);
              v129 = (void *)objc_claimAutoreleasedReturnValue([*a4 credentials]);
              v130 = v78;
              v84 = (void *)objc_claimAutoreleasedReturnValue([v129 userInfo]);
              v85 = v82;
              v86 = (void *)v83;
              v131 = v72;
              v87 = -[THThreadNetworkCredentialsDataSet initWithDataSetArray:userInfo:]( v85,  "initWithDataSetArray:userInfo:",  v83,  v84);
              v88 = (void *)objc_claimAutoreleasedReturnValue([*a4 credentials]);
              [v88 setCredentialsDataSet:v87];

              v68 = v135;
            }

            else
            {
              v102 = sub_1001768B4(1);
              v103 = (os_log_s *)objc_claimAutoreleasedReturnValue(v102);
              if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR)) {
                sub_100199D50();
              }

              v81 = 0;
            }

            v63 = v137;
          }

          else
          {
            v100 = sub_1001768B4(1);
            v101 = (os_log_s *)objc_claimAutoreleasedReturnValue(v100);
            v63 = v137;
            if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR)) {
              sub_100199D24();
            }

            v81 = 0;
          }

          v64 = v136;
          goto LABEL_115;
        }

        v98 = sub_1001768B4(1);
        v99 = (os_log_s *)objc_claimAutoreleasedReturnValue(v98);
        if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR)) {
          sub_100199CF8();
        }
      }

      else
      {
        v92 = sub_1001768B4(1);
        v70 = (void *)objc_claimAutoreleasedReturnValue(v92);
        if (os_log_type_enabled((os_log_t)v70, OS_LOG_TYPE_ERROR)) {
          sub_100199CCC();
        }
      }

      goto LABEL_114;
    }

    v68 = v135;
    if (v67) {
      sub_100199CA0();
    }
    v81 = 0;
    v61 = v66;
  }

  else
  {
    if (v62) {
      sub_100199E60();
    }
    v81 = 0;
    v68 = v135;
  }

LABEL_74:
  v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_retryInterval90perc));
  [v3 setObject:v22 forKey:@"retry_interval_90perc"];

  v8 = self->_has;
  if ((*(void *)&v8 & 0x8000000000LL) == 0)
  {
LABEL_17:
    if ((*(void *)&v8 & 0x4000000000LL) == 0) {
      goto LABEL_18;
    }
    goto LABEL_76;
  }

  PBDataWriterWriteUint32Field(v7, self->_retryInterval90perc, 13LL);
  v6 = self->_has;
  if ((*(void *)&v6 & 0x8000000000LL) == 0)
  {
LABEL_17:
    if ((*(void *)&v6 & 0x4000000000LL) == 0) {
      goto LABEL_18;
    }
    goto LABEL_76;
  }

  v4[12] = self->_retryInterval90perc;
  *((void *)v4 + 31) |= 0x400uLL;
  v6 = self->_has;
  if ((*(void *)&v6 & 0x8000000000LL) == 0)
  {
LABEL_17:
    if ((*(void *)&v6 & 0x4000000000LL) == 0) {
      goto LABEL_18;
    }
    goto LABEL_76;
  }

  *((_DWORD *)v6 + 43) = self->_txDelayMax;
  v6[31] |= 0x4000000000uLL;
  v10 = self->_has;
  if ((*(void *)&v10 & 0x2000000000LL) == 0)
  {
LABEL_17:
    if ((*(void *)&v10 & 0x1000000000LL) == 0) {
      goto LABEL_18;
    }
    goto LABEL_76;
  }

  v48 = 0LL;
  if ((*(void *)&v4 & 0x1000000000LL) != 0)
  {
LABEL_22:
    v47 = 2654435761LL * self->_txDelay90perc;
    if ((*(_BYTE *)&v4 & 8) != 0) {
      goto LABEL_23;
    }
    goto LABEL_76;
  }

  self->_rtt90perc = v5[16];
  *(void *)&self->_has |= 0x4000uLL;
  v9 = *((void *)v5 + 31);
  if ((v9 & 0x2000) == 0)
  {
LABEL_21:
    if ((v9 & 0x1000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_76;
  }

LABEL_75:
  v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_txDelayMin));
  [v3 setObject:v23 forKey:@"tx_delay_min"];

  v8 = self->_has;
  if ((*(void *)&v8 & 0x4000000000LL) == 0)
  {
LABEL_18:
    if ((*(void *)&v8 & 0x2000000000LL) == 0) {
      goto LABEL_19;
    }
    goto LABEL_77;
  }

  PBDataWriterWriteUint32Field(v7, self->_txDelayMin, 14LL);
  v6 = self->_has;
  if ((*(void *)&v6 & 0x4000000000LL) == 0)
  {
LABEL_18:
    if ((*(void *)&v6 & 0x2000000000LL) == 0) {
      goto LABEL_19;
    }
    goto LABEL_77;
  }

  v4[44] = self->_txDelayMin;
  *((void *)v4 + 31) |= 0x8000000000uLL;
  v6 = self->_has;
  if ((*(void *)&v6 & 0x4000000000LL) == 0)
  {
LABEL_18:
    if ((*(void *)&v6 & 0x2000000000LL) == 0) {
      goto LABEL_19;
    }
    goto LABEL_77;
  }

  *((_DWORD *)v6 + 42) = self->_txDelayAvg;
  v6[31] |= 0x2000000000uLL;
  v10 = self->_has;
  if ((*(void *)&v10 & 0x1000000000LL) == 0)
  {
LABEL_18:
    if ((*(_BYTE *)&v10 & 8) == 0) {
      goto LABEL_19;
    }
    goto LABEL_77;
  }

  v47 = 0LL;
  if ((*(_BYTE *)&v4 & 8) != 0)
  {
LABEL_23:
    v46 = 2654435761LL * self->_listeningTime;
    if ((*(_WORD *)&v4 & 0x200) != 0) {
      goto LABEL_24;
    }
    goto LABEL_77;
  }

  self->_retryIntervalMin = v5[15];
  *(void *)&self->_has |= 0x2000uLL;
  v9 = *((void *)v5 + 31);
  if ((v9 & 0x1000) == 0)
  {
LABEL_22:
    if ((v9 & 0x800) == 0) {
      goto LABEL_23;
    }
    goto LABEL_77;
  }

      objc_msgSend(v4, "setReceivedPreambles:", sub_1000BE984(4, uint64));
LABEL_76:
      if (v36 < 0) {
        operator delete(*(void **)__p);
      }
LABEL_78:
      if (count == ++v10)
      {
        count = 0LL;
        goto LABEL_80;
      }
    }
  }

  uint64_t v5 = sub_1000160F4("com.apple.wpantund.awd", "default");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_ERROR)) {
    sub_100212E84();
  }
  count = 1LL;
LABEL_80:

LABEL_81:
  return count;
}

      sub_100170DB4(&v32);
    }

    if (v12)
    {
      sub_10016B54C((uint64_t)a4, (uint64_t)a3, &__str);
      if (a3)
      {
        v17 = a3[2];
        if ((v17 & 1) != 0 && (v17 != 1 || *(_DWORD *)a3))
        {
          v20 = 0;
          v21 = 2;
          goto LABEL_72;
        }
      }

      sub_10016F550(a4);
      sub_10016F8B8(&__str);
      if (v18)
      {
        while (1)
        {
          sub_100170DB4(&v32);
          if (v33 == v30 && v34 == v31) {
            break;
          }
        }

        std::string::operator=(&__dst, &__str);
        sub_10016B2D8((char *)&__dst, &v26);
        v20 = 0;
        __p = v26;
        goto LABEL_71;
      }

      sub_10016F688(&__str);
      if (sub_10016F344((unint64_t)&__str, (unint64_t)v10))
      {
        else {
          v26 = *a4;
        }
        sub_10016EC50(&v26, &__str);
        sub_100170DB4(&v32);
        while (v33 != v30 || v34 != v31)
        {
          sub_100170DB4(&v32);
        }

        std::string::operator=(&__dst, &v26);
        v20 = 0;
LABEL_71:
        v21 = 15;
      }

      else
      {
        v21 = 8;
        v20 = 1;
      }

          v49 = (uint64_t)v133;
          goto LABEL_76;
        }

        v25 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
        v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v135 = "-[ThreadNetworkManagerInstance validateDataSetTLVs:creds:]";
          v136 = 1024;
          *(_DWORD *)v137 = 2467;
          _os_log_error_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "%s: #MOS : ==> Decoded Channel Mask TLV Line : %d",  buf,  0x12u);
        }

        v27 = v12 + 8;
        while (1)
        {
          if (v14 >= v16) {
            goto LABEL_77;
          }
          if (v14 + 1 >= v16) {
            break;
          }
          if ((v4[v14] & 0xFD) != 0)
          {
            v87 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
            v89 = (os_log_s *)objc_claimAutoreleasedReturnValue(v87);
            if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR)) {
              sub_1001ED21C();
            }
            goto LABEL_147;
          }

          v28 = v4[v14 + 1];
          v27 += 6;
          v14 += 6LL;
          if (v28 != 4)
          {
            v88 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
            v89 = (os_log_s *)objc_claimAutoreleasedReturnValue(v88);
            if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR)) {
              sub_1001ED1A8();
            }
            goto LABEL_147;
          }
        }

        v83 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
        v89 = (os_log_s *)objc_claimAutoreleasedReturnValue(v83);
        if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR)) {
          sub_1001ED134();
        }
        goto LABEL_147;
    }
  }

LABEL_77:
  v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_txDelayAvg));
  [v3 setObject:v25 forKey:@"tx_delay_avg"];

  v8 = self->_has;
  if ((*(void *)&v8 & 0x1000000000LL) == 0)
  {
LABEL_20:
    if ((*(_BYTE *)&v8 & 8) == 0) {
      goto LABEL_21;
    }
    goto LABEL_79;
  }

  PBDataWriterWriteUint32Field(v7, self->_txDelayAvg, 16LL);
  v6 = self->_has;
  if ((*(void *)&v6 & 0x1000000000LL) == 0)
  {
LABEL_20:
    if ((*(_BYTE *)&v6 & 8) == 0) {
      goto LABEL_21;
    }
    goto LABEL_79;
  }

  v4[42] = self->_txDelayAvg;
  *((void *)v4 + 31) |= 0x2000000000uLL;
  v6 = self->_has;
  if ((*(void *)&v6 & 0x1000000000LL) == 0)
  {
LABEL_20:
    if ((*(_BYTE *)&v6 & 8) == 0) {
      goto LABEL_21;
    }
    goto LABEL_79;
  }

  *((_DWORD *)v6 + 5) = self->_listeningTime;
  v6[31] |= 8uLL;
  v10 = self->_has;
  if ((*(_WORD *)&v10 & 0x200) == 0)
  {
LABEL_20:
    if ((*(void *)&v10 & 0x800000000LL) == 0) {
      goto LABEL_21;
    }
    goto LABEL_79;
  }

  v45 = 0LL;
  if ((*(void *)&v4 & 0x800000000LL) != 0)
  {
LABEL_25:
    v44 = 2654435761LL * self->_transmittingTime;
    if ((*(void *)&v4 & 0x400000000LL) != 0) {
      goto LABEL_26;
    }
    goto LABEL_79;
  }

  self->_retryIntervalAvg = v5[13];
  *(void *)&self->_has |= 0x800uLL;
  v9 = *((void *)v5 + 31);
  if ((v9 & 0x400) == 0)
  {
LABEL_24:
    if ((v9 & 0x8000000000LL) == 0) {
      goto LABEL_25;
    }
    goto LABEL_79;
  }

    sub_10016E988(a2);
  }

              v69 = 0;
              [v12 getBytes:&v69 length:4];
              v51 = bswap32(v69);
              v69 = v51;
              v16 = (v51 >> 4) & 1;
              v52 = sub_1001768B4(1);
              v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
              v54 = v53;
              if ((v51 & 0x10) != 0)
              {
                if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 136315650;
                  v71 = "-[ThreadBRFinder matchTheRecord:]";
                  v72 = 1024;
                  v73 = 444;
                  v74 = 1024;
                  LODWORD(v75) = v69;
                  _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_INFO,  "%s : %d: state bit map indicates thread n/w is UP :0x%x",  buf,  0x18u);
                }
              }

              else if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
              {
                sub_1001A0F90();
              }

              goto LABEL_34;
            }

            v37 = -[NSString initWithData:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithData:encoding:",  v10,  4LL);
            if (v37)
            {
              v38 = v37;
              v39 = objc_claimAutoreleasedReturnValue(-[ThreadBRFinder dataFromHexString:](self, "dataFromHexString:", v37));
              if (!v39)
              {
                v35 = (os_log_s *)v38;
                v55 = sub_1001768B4(1);
                v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
                if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR)) {
                  sub_1001A11E0();
                }

                goto LABEL_92;
              }

              v68 = (void *)v39;
              if ((objc_msgSend(*p_extendedPANIDToFind, "isEqualToData:") & 1) == 0)
              {
                v35 = (os_log_s *)v38;
                v40 = sub_1001768B4(1);
                v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
                if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
                  sub_1001A1254();
                }
LABEL_88:

LABEL_92:
                goto LABEL_93;
              }

              goto LABEL_64;
            }

            v49 = sub_1001768B4(1);
            v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
            if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR)) {
              sub_1001A116C();
            }
          }

          else if (v36 && ([v36 isEqualToData:v10] & 1) == 0)
          {
            v47 = sub_1001768B4(1);
            v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
            if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR)) {
              sub_1001A133C();
            }
          }

          else
          {
            if (!*p_borderAgentIdToFind || -[NSData isEqualToData:](*p_borderAgentIdToFind, "isEqualToData:", v11))
            {
              v66 = v23;
              v68 = 0LL;
              v42 = 0LL;
              v62 = 0LL;
              v64 = 0LL;
              goto LABEL_77;
            }

            v50 = sub_1001768B4(1);
            v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
            if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR)) {
              sub_1001A12C8();
            }
          }

LABEL_93:
          goto LABEL_33;
        }

        v43 = sub_1001768B4(1);
        v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
          sub_1001A13B0();
        }
      }

      else
      {
        v26 = sub_1001768B4(1);
        v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
          sub_1001A1548();
        }
      }

LABEL_33:
      LOBYTE(v16) = 0;
      goto LABEL_34;
    }

    v17 = sub_1001768B4(1);
    v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      sub_1001A0EB0();
    }
  }

  else
  {
    NSLog(@"Error:Empty Server");
  }

  LOBYTE(v16) = 0;
LABEL_36:

  return v16;
}

LABEL_81:
  v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_transmittingTime));
  [v3 setObject:v29 forKey:@"transmitting_time"];

  v8 = self->_has;
  if ((*(void *)&v8 & 0x400000000LL) == 0)
  {
LABEL_24:
    if ((*(void *)&v8 & 0x1000000000000LL) == 0) {
      goto LABEL_25;
    }
    goto LABEL_83;
  }

  PBDataWriterWriteUint32Field(v7, self->_transmittingTime, 20LL);
  v6 = self->_has;
  if ((*(void *)&v6 & 0x400000000LL) == 0)
  {
LABEL_24:
    if ((*(void *)&v6 & 0x1000000000000LL) == 0) {
      goto LABEL_25;
    }
    goto LABEL_83;
  }

  v4[40] = self->_transmittingTime;
  *((void *)v4 + 31) |= 0x800000000uLL;
  v6 = self->_has;
  if ((*(void *)&v6 & 0x400000000LL) == 0)
  {
LABEL_24:
    if ((*(void *)&v6 & 0x1000000000000LL) == 0) {
      goto LABEL_25;
    }
    goto LABEL_83;
  }

  *((_DWORD *)v6 + 53) = self->_txErrorTimeslotEnded;
  v6[31] |= 0x1000000000000uLL;
  v10 = self->_has;
  if ((*(void *)&v10 & 0x800000000000LL) == 0)
  {
LABEL_24:
    if ((*(void *)&v10 & 0x20000000000LL) == 0) {
      goto LABEL_25;
    }
    goto LABEL_83;
  }

  v41 = 0LL;
  if ((*(void *)&v4 & 0x20000000000LL) != 0)
  {
LABEL_29:
    v40 = 2654435761LL * self->_txErrorBusyChannelCcaNotStarted;
    if ((*(void *)&v4 & 0x40000000000LL) != 0) {
      goto LABEL_30;
    }
    goto LABEL_83;
  }

  self->_txDelayAvg = v5[42];
  *(void *)&self->_has |= 0x2000000000uLL;
  v9 = *((void *)v5 + 31);
  if ((v9 & 0x1000000000LL) == 0)
  {
LABEL_28:
    if ((v9 & 8) == 0) {
      goto LABEL_29;
    }
    goto LABEL_83;
  }

LABEL_84:
  v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_txErrorTimeslotDenied));
  [v3 setObject:v32 forKey:@"tx_error_timeslot_denied"];

  v8 = self->_has;
  if ((*(void *)&v8 & 0x20000000000LL) == 0)
  {
LABEL_27:
    if ((*(void *)&v8 & 0x40000000000LL) == 0) {
      goto LABEL_28;
    }
    goto LABEL_86;
  }

  PBDataWriterWriteUint32Field(v7, self->_txErrorTimeslotDenied, 23LL);
  v6 = self->_has;
  if ((*(void *)&v6 & 0x20000000000LL) == 0)
  {
LABEL_27:
    if ((*(void *)&v6 & 0x40000000000LL) == 0) {
      goto LABEL_28;
    }
    goto LABEL_86;
  }

  v4[52] = self->_txErrorTimeslotDenied;
  *((void *)v4 + 31) |= 0x800000000000uLL;
  v6 = self->_has;
  if ((*(void *)&v6 & 0x20000000000LL) == 0)
  {
LABEL_27:
    if ((*(void *)&v6 & 0x40000000000LL) == 0) {
      goto LABEL_28;
    }
    goto LABEL_86;
  }

  *((_DWORD *)v6 + 47) = self->_txErrorChannelAccessCcaBusy;
  v6[31] |= 0x40000000000uLL;
  v10 = self->_has;
  if ((*(void *)&v10 & 0x80000000000LL) == 0)
  {
LABEL_27:
    if ((*(void *)&v10 & 0x2000000000000LL) == 0) {
      goto LABEL_28;
    }
    goto LABEL_86;
  }

  v38 = 0LL;
  if ((*(void *)&v4 & 0x2000000000000LL) != 0)
  {
LABEL_32:
    v37 = 2654435761LL * self->_txErrorTxAborted;
    if ((*(void *)&v4 & 0x10000000000000LL) != 0) {
      goto LABEL_33;
    }
    goto LABEL_86;
  }

  self->_receivingTime = v5[11];
  *(void *)&self->_has |= 0x200uLL;
  v9 = *((void *)v5 + 31);
  if ((v9 & 0x800000000LL) == 0)
  {
LABEL_31:
    if ((v9 & 0x400000000LL) == 0) {
      goto LABEL_32;
    }
    goto LABEL_86;
  }

LABEL_88:
  v36 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_txErrorTxAborted));
  [v3 setObject:v36 forKey:@"tx_error_tx_aborted"];

  v8 = self->_has;
  if ((*(void *)&v8 & 0x10000000000000LL) == 0)
  {
LABEL_31:
    if ((*(void *)&v8 & 0x8000000000000LL) == 0) {
      goto LABEL_32;
    }
    goto LABEL_90;
  }

  PBDataWriterWriteUint32Field(v7, self->_txErrorTxAborted, 27LL);
  v6 = self->_has;
  if ((*(void *)&v6 & 0x10000000000000LL) == 0)
  {
LABEL_31:
    if ((*(void *)&v6 & 0x8000000000000LL) == 0) {
      goto LABEL_32;
    }
    goto LABEL_90;
  }

  v4[54] = self->_txErrorTxAborted;
  *((void *)v4 + 31) |= 0x2000000000000uLL;
  v6 = self->_has;
  if ((*(void *)&v6 & 0x10000000000000LL) == 0)
  {
LABEL_31:
    if ((*(void *)&v6 & 0x8000000000000LL) == 0) {
      goto LABEL_32;
    }
    goto LABEL_90;
  }

  *((_DWORD *)v6 + 56) = self->_txErrorTxAbortedCsmaBackoff;
  v6[31] |= 0x8000000000000uLL;
  v10 = self->_has;
  if ((*(void *)&v10 & 0x20000000000000LL) == 0)
  {
LABEL_31:
    if ((*(void *)&v10 & 0x40000000000000LL) == 0) {
      goto LABEL_32;
    }
    goto LABEL_90;
  }

  v34 = 0LL;
  if ((*(void *)&v4 & 0x40000000000000LL) != 0)
  {
LABEL_36:
    v33 = 2654435761LL * self->_txErrorTxAbortedIfs;
    if ((*(void *)&v4 & 0x80000000000000LL) != 0) {
      goto LABEL_37;
    }
    goto LABEL_90;
  }

  self->_txErrorTimeslotDenied = v5[52];
  *(void *)&self->_has |= 0x800000000000uLL;
  v9 = *((void *)v5 + 31);
  if ((v9 & 0x20000000000LL) == 0)
  {
LABEL_35:
    if ((v9 & 0x40000000000LL) == 0) {
      goto LABEL_36;
    }
    goto LABEL_90;
  }

LABEL_92:
  v40 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_txErrorTxAbortedIfs));
  [v3 setObject:v40 forKey:@"tx_error_tx_aborted_ifs"];

  v8 = self->_has;
  if ((*(void *)&v8 & 0x80000000000000LL) == 0)
  {
LABEL_35:
    if ((*(void *)&v8 & 0x4000000000000LL) == 0) {
      goto LABEL_36;
    }
    goto LABEL_94;
  }

  PBDataWriterWriteUint32Field(v7, self->_txErrorTxAbortedIfs, 31LL);
  v6 = self->_has;
  if ((*(void *)&v6 & 0x80000000000000LL) == 0)
  {
LABEL_35:
    if ((*(void *)&v6 & 0x4000000000000LL) == 0) {
      goto LABEL_36;
    }
    goto LABEL_94;
  }

  v4[59] = self->_txErrorTxAbortedIfs;
  *((void *)v4 + 31) |= 0x40000000000000uLL;
  v6 = self->_has;
  if ((*(void *)&v6 & 0x80000000000000LL) == 0)
  {
LABEL_35:
    if ((*(void *)&v6 & 0x4000000000000LL) == 0) {
      goto LABEL_36;
    }
    goto LABEL_94;
  }

  *((_DWORD *)v6 + 55) = self->_txErrorTxAbortedCcaTx;
  v6[31] |= 0x4000000000000uLL;
  v10 = self->_has;
  if ((*(void *)&v10 & 0x100000000000000LL) == 0)
  {
LABEL_35:
    if ((*(void *)&v10 & 0x400000000000LL) == 0) {
      goto LABEL_36;
    }
    goto LABEL_94;
  }

  v6 = 0LL;
  if ((*(void *)&v4 & 0x400000000000LL) != 0)
  {
LABEL_40:
    int v7 = 2654435761LL * self->_txErrorNotGranted;
    if ((*(void *)&v4 & 0x100000000000LL) != 0) {
      goto LABEL_41;
    }
    goto LABEL_94;
  }

  self->_txErrorTxAborted = v5[54];
  *(void *)&self->_has |= 0x2000000000000uLL;
  v9 = *((void *)v5 + 31);
  if ((v9 & 0x10000000000000LL) == 0)
  {
LABEL_39:
    if ((v9 & 0x8000000000000LL) == 0) {
      goto LABEL_40;
    }
    goto LABEL_94;
  }

  _Block_object_dispose(v144, 8);
LABEL_8:
  _Block_object_dispose(&v134, 8);

  if (SHIBYTE(v153) < 0) {
    operator delete((void *)v152.var0.var1.var1);
  }
  return result;
}

LABEL_94:
  v42 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_txErrorTxAbortedCcaTx));
  [v3 setObject:v42 forKey:@"tx_error_tx_aborted_cca_tx"];

  v8 = self->_has;
  if ((*(void *)&v8 & 0x100000000000000LL) == 0)
  {
LABEL_37:
    if ((*(void *)&v8 & 0x400000000000LL) == 0) {
      goto LABEL_38;
    }
    goto LABEL_96;
  }

  PBDataWriterWriteUint32Field(v7, self->_txErrorTxAbortedCcaTx, 33LL);
  v6 = self->_has;
  if ((*(void *)&v6 & 0x100000000000000LL) == 0)
  {
LABEL_37:
    if ((*(void *)&v6 & 0x400000000000LL) == 0) {
      goto LABEL_38;
    }
    goto LABEL_96;
  }

  v4[55] = self->_txErrorTxAbortedCcaTx;
  *((void *)v4 + 31) |= 0x4000000000000uLL;
  v6 = self->_has;
  if ((*(void *)&v6 & 0x100000000000000LL) == 0)
  {
LABEL_37:
    if ((*(void *)&v6 & 0x400000000000LL) == 0) {
      goto LABEL_38;
    }
    goto LABEL_96;
  }

  *((_DWORD *)v6 + 51) = self->_txErrorNotGranted;
  v6[31] |= 0x400000000000uLL;
  v10 = self->_has;
  if ((*(void *)&v10 & 0x100000000000LL) == 0)
  {
LABEL_37:
    if ((*(void *)&v10 & 0x200000000000LL) == 0) {
      goto LABEL_38;
    }
    goto LABEL_96;
  }

  v8 = 0LL;
  if ((*(void *)&v4 & 0x200000000000LL) != 0)
  {
LABEL_42:
    v9 = 2654435761LL * self->_txErrorNoAck;
    if ((*(void *)&v4 & 0x10000000000LL) != 0) {
      goto LABEL_43;
    }
    goto LABEL_96;
  }

  self->_txErrorTxAbortedCsmaBackoff = v5[56];
  *(void *)&self->_has |= 0x8000000000000uLL;
  v9 = *((void *)v5 + 31);
  if ((v9 & 0x20000000000000LL) == 0)
  {
LABEL_41:
    if ((v9 & 0x40000000000000LL) == 0) {
      goto LABEL_42;
    }
    goto LABEL_96;
  }

                -[AWDCountersIpv6S setRxFailure:](v10, "setRxFailure:", sub_1000BE984(3, uint64));
                goto LABEL_101;
              }

LABEL_98:
  v46 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_txErrorNoAck));
  [v3 setObject:v46 forKey:@"tx_error_no_ack"];

  v8 = self->_has;
  if ((*(void *)&v8 & 0x10000000000LL) == 0)
  {
LABEL_41:
    if ((*(_BYTE *)&v8 & 0x80) == 0) {
      goto LABEL_42;
    }
    goto LABEL_100;
  }

  PBDataWriterWriteUint32Field(v7, self->_txErrorNoAck, 37LL);
  v6 = self->_has;
  if ((*(void *)&v6 & 0x10000000000LL) == 0)
  {
LABEL_41:
    if ((*(_BYTE *)&v6 & 0x80) == 0) {
      goto LABEL_42;
    }
    goto LABEL_100;
  }

  v4[50] = self->_txErrorNoAck;
  *((void *)v4 + 31) |= 0x200000000000uLL;
  v6 = self->_has;
  if ((*(void *)&v6 & 0x10000000000LL) == 0)
  {
LABEL_41:
    if ((*(_BYTE *)&v6 & 0x80) == 0) {
      goto LABEL_42;
    }
    goto LABEL_100;
  }

  *((_DWORD *)v6 + 9) = self->_receivedFrames;
  v6[31] |= 0x80uLL;
  v10 = self->_has;
  if ((*(_DWORD *)&v10 & 0x40000000) == 0)
  {
LABEL_41:
    if ((*(_DWORD *)&v10 & 0x10000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_100;
  }

  v12 = 0LL;
  if ((*(_DWORD *)&v4 & 0x10000000) != 0)
  {
LABEL_46:
    v13 = 2654435761LL * self->_rxErrorInvalidFrame;
    if ((*(_DWORD *)&v4 & 0x800000) != 0) {
      goto LABEL_47;
    }
    goto LABEL_100;
  }

  self->_txErrorTxAbortedCcaTx = v5[55];
  *(void *)&self->_has |= 0x4000000000000uLL;
  v9 = *((void *)v5 + 31);
  if ((v9 & 0x100000000000000LL) == 0)
  {
LABEL_45:
    if ((v9 & 0x400000000000LL) == 0) {
      goto LABEL_46;
    }
    goto LABEL_100;
  }

      -[AWDCountersCoexS setCoexTxGrantedRequests:](v10, "setCoexTxGrantedRequests:", sub_1000BE984(4, uint64));
      goto LABEL_173;
    }

    if (buf.__r_.__value_.__r.__words[0] == 0x736E755F78656F63LL
      && buf.__r_.__value_.__l.__size_ == 0x6465746963696C6FLL
      && *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 7) == 0x73746E6172675F64LL)
    {
      goto LABEL_99;
    }

    if (buf.__r_.__value_.__r.__words[0] == 0x5F78745F78656F63LL
      && buf.__r_.__value_.__l.__size_ == 0x725F6465696E6564LL
      && *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 7) == 0x7374736575716572LL)
    {
      goto LABEL_100;
    }

    p_buf = &buf;
    goto LABEL_109;
  }

  if (buf.__r_.__value_.__r.__words[0] == 0x5F78745F78656F63LL && buf.__r_.__value_.__l.__size_ == 0x7374736575716572LL)
  {
LABEL_76:
    -[AWDCountersCoexS setCoexTxRequests:](v10, "setCoexTxRequests:", sub_1000BE984(4, uint64));
    goto LABEL_173;
  }

  if (buf.__r_.__value_.__r.__words[0] == 0x5F78725F78656F63LL && buf.__r_.__value_.__l.__size_ == 0x7374736575716572LL)
  {
LABEL_97:
    -[AWDCountersCoexS setCoexRxRequests:](v10, "setCoexRxRequests:", sub_1000BE984(4, uint64));
    goto LABEL_173;
  }

            -[AWDCountersIpv6S setTxFailure:](v10, "setTxFailure:", sub_1000BE984(3, uint64));
            goto LABEL_101;
          }

LABEL_99:
  v47 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_txErrorAckNoMem));
  [v3 setObject:v47 forKey:@"tx_error_ack_no_mem"];

  v8 = self->_has;
  if ((*(_BYTE *)&v8 & 0x80) == 0)
  {
LABEL_42:
    if ((*(_DWORD *)&v8 & 0x40000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_101;
  }

  PBDataWriterWriteUint32Field(v7, self->_txErrorAckNoMem, 38LL);
  v6 = self->_has;
  if ((*(_BYTE *)&v6 & 0x80) == 0)
  {
LABEL_42:
    if ((*(_DWORD *)&v6 & 0x40000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_101;
  }

  v4[45] = self->_txErrorAckNoMem;
  *((void *)v4 + 31) |= 0x10000000000uLL;
  v6 = self->_has;
  if ((*(_BYTE *)&v6 & 0x80) == 0)
  {
LABEL_42:
    if ((*(_DWORD *)&v6 & 0x40000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_101;
  }

  *((_DWORD *)v6 + 32) = self->_rxErrorReceiveFailed;
  v6[31] |= 0x40000000uLL;
  v10 = self->_has;
  if ((*(_DWORD *)&v10 & 0x10000000) == 0)
  {
LABEL_42:
    if ((*(_DWORD *)&v10 & 0x800000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_101;
  }

  v13 = 0LL;
  if ((*(_DWORD *)&v4 & 0x800000) != 0)
  {
LABEL_47:
    v14 = 2654435761LL * self->_rxErrorDelayedTimeout;
    if ((*(_DWORD *)&v4 & 0x8000000) != 0) {
      goto LABEL_48;
    }
    goto LABEL_101;
  }

  self->_txErrorTxAbortedTx = v5[61];
  *(void *)&self->_has |= 0x100000000000000uLL;
  v9 = *((void *)v5 + 31);
  if ((v9 & 0x400000000000LL) == 0)
  {
LABEL_46:
    if ((v9 & 0x100000000000LL) == 0) {
      goto LABEL_47;
    }
    goto LABEL_101;
  }

      -[AWDCountersIpv6S setTxDelaymax:](v10, "setTxDelaymax:", sub_1000BE984(3, uint64));
      goto LABEL_101;
    }

LABEL_101:
  v49 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_rxErrorReceiveFailed));
  [v3 setObject:v49 forKey:@"rx_error_receive_failed"];

  v8 = self->_has;
  if ((*(_DWORD *)&v8 & 0x10000000) == 0)
  {
LABEL_44:
    if ((*(_DWORD *)&v8 & 0x800000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_103;
  }

  PBDataWriterWriteUint32Field(v7, self->_rxErrorReceiveFailed, 40LL);
  v6 = self->_has;
  if ((*(_DWORD *)&v6 & 0x10000000) == 0)
  {
LABEL_44:
    if ((*(_DWORD *)&v6 & 0x800000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_103;
  }

  v4[32] = self->_rxErrorReceiveFailed;
  *((void *)v4 + 31) |= 0x40000000uLL;
  v6 = self->_has;
  if ((*(_DWORD *)&v6 & 0x10000000) == 0)
  {
LABEL_44:
    if ((*(_DWORD *)&v6 & 0x800000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_103;
  }

  *((_DWORD *)v6 + 25) = self->_rxErrorDelayedTimeout;
  v6[31] |= 0x800000uLL;
  v10 = self->_has;
  if ((*(_DWORD *)&v10 & 0x8000000) == 0)
  {
LABEL_44:
    if ((*(_DWORD *)&v10 & 0x2000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_103;
  }

  v15 = 0LL;
  if ((*(_DWORD *)&v4 & 0x2000000) != 0)
  {
LABEL_49:
    v16 = 2654435761LL * self->_rxErrorDestAddrFiltered;
    if ((*(_DWORD *)&v4 & 0x80000000) != 0) {
      goto LABEL_50;
    }
    goto LABEL_103;
  }

  self->_txErrorInvalidAck = v5[49];
  *(void *)&self->_has |= 0x100000000000uLL;
  v9 = *((void *)v5 + 31);
  if ((v9 & 0x200000000000LL) == 0)
  {
LABEL_48:
    if ((v9 & 0x10000000000LL) == 0) {
      goto LABEL_49;
    }
    goto LABEL_103;
  }

LABEL_102:
  v50 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_rxErrorInvalidFrame));
  [v3 setObject:v50 forKey:@"rx_error_invalid_frame"];

  v8 = self->_has;
  if ((*(_DWORD *)&v8 & 0x800000) == 0)
  {
LABEL_45:
    if ((*(_DWORD *)&v8 & 0x8000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_104;
  }

  PBDataWriterWriteUint32Field(v7, self->_rxErrorInvalidFrame, 41LL);
  v6 = self->_has;
  if ((*(_DWORD *)&v6 & 0x800000) == 0)
  {
LABEL_45:
    if ((*(_DWORD *)&v6 & 0x8000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_104;
  }

  v4[30] = self->_rxErrorInvalidFrame;
  *((void *)v4 + 31) |= 0x10000000uLL;
  v6 = self->_has;
  if ((*(_DWORD *)&v6 & 0x800000) == 0)
  {
LABEL_45:
    if ((*(_DWORD *)&v6 & 0x8000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_104;
  }

  *((_DWORD *)v6 + 29) = self->_rxErrorInvalidFcs;
  v6[31] |= 0x8000000uLL;
  v10 = self->_has;
  if ((*(_DWORD *)&v10 & 0x2000000) == 0)
  {
LABEL_45:
    if ((*(_DWORD *)&v10 & 0x80000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_104;
  }

  v16 = 0LL;
  if ((*(_DWORD *)&v4 & 0x80000000) != 0)
  {
LABEL_50:
    v17 = 2654435761LL * self->_rxErrorRuntimeDelay;
    if ((*(void *)&v4 & 0x100000000LL) != 0) {
      goto LABEL_51;
    }
    goto LABEL_104;
  }

  self->_txErrorNoAck = v5[50];
  *(void *)&self->_has |= 0x200000000000uLL;
  v9 = *((void *)v5 + 31);
  if ((v9 & 0x10000000000LL) == 0)
  {
LABEL_49:
    if ((v9 & 0x80) == 0) {
      goto LABEL_50;
    }
    goto LABEL_104;
  }

LABEL_109:
  v57 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_rxErrorDelayedTimeslotEnded));
  [v3 setObject:v57 forKey:@"rx_error_delayed_timeslot_ended"];

  v8 = self->_has;
  if ((*(_DWORD *)&v8 & 0x20000000) == 0)
  {
LABEL_52:
    if ((*(_DWORD *)&v8 & 0x4000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_111;
  }

  PBDataWriterWriteUint32Field(v7, self->_rxErrorDelayedTimeslotEnded, 48LL);
  v6 = self->_has;
  if ((*(_DWORD *)&v6 & 0x20000000) == 0)
  {
LABEL_52:
    if ((*(_DWORD *)&v6 & 0x4000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_111;
  }

  v4[26] = self->_rxErrorDelayedTimeslotEnded;
  *((void *)v4 + 31) |= 0x1000000uLL;
  v6 = self->_has;
  if ((*(_DWORD *)&v6 & 0x20000000) == 0)
  {
LABEL_52:
    if ((*(_DWORD *)&v6 & 0x4000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_111;
  }

  *((_DWORD *)v6 + 28) = self->_rxErrorInvalidData;
  v6[31] |= 0x4000000uLL;
  v10 = self->_has;
  if ((*(_DWORD *)&v10 & 0x400000) == 0)
  {
LABEL_52:
    if ((*(_DWORD *)&v10 & 0x200000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_111;
  }

  v23 = 0LL;
  if ((*(_DWORD *)&v4 & 0x200000) != 0)
  {
LABEL_57:
    v24 = 2654435761LL * self->_rxErrorAckFailedRadioDelay;
    if ((*(_DWORD *)&v4 & 0x100000) != 0) {
      goto LABEL_58;
    }
    goto LABEL_111;
  }

  self->_rxErrorDestAddrFiltered = v5[27];
  *(void *)&self->_has |= 0x2000000uLL;
  v9 = *((void *)v5 + 31);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_56:
    if ((v9 & 0x100000000LL) == 0) {
      goto LABEL_57;
    }
    goto LABEL_111;
  }

      ++v11;
      v10 = v73;
      uint64_t v5 = v80;
      if (v11 == count) {
        goto LABEL_129;
      }
    }

    if (!v15) {
      goto LABEL_143;
    }
    std::string::basic_string(&__str, &buf, v79 + 1, v15 - 1, (std::allocator<char> *)&v84);
    v55 = std::stoi(&__str, 0LL, 10);
    if ((v55 & 0xFCu) > 0x13) {
      goto LABEL_107;
    }
    v48 = sub_1000BE984(4, uint64);
    v49 = v55;
    if (v55 > 0x13u) {
      goto LABEL_144;
    }
    v50 = v90;
    goto LABEL_106;
  }

  uint64_t v5 = 0LL;
LABEL_129:
  for (i = 0LL; i != 80; i += 4LL)
    -[AWDHistogramsCoexS addCoexRxTotalGrantDutyCycleHistogram:]( v10,  "addCoexRxTotalGrantDutyCycleHistogram:",  *(unsigned int *)&v88[i]);
  for (j = 0LL; j != 80; j += 4LL)
    -[AWDHistogramsCoexS addCoexTxTotalGrantDutyCycleHistogram:]( v10,  "addCoexTxTotalGrantDutyCycleHistogram:",  *(unsigned int *)&v89[j]);
  for (k = 0LL; k != 80; k += 4LL)
    -[AWDHistogramsCoexS addCoexRxUnsolicitedGrantDutyCycleHistogram:]( v10,  "addCoexRxUnsolicitedGrantDutyCycleHistogram:",  *(unsigned int *)&v91[k]);
  for (m = 0LL; m != 80; m += 4LL)
    -[AWDHistogramsCoexS addCoexTxUnsolicitedGrantDutyCycleHistogram:]( v10,  "addCoexTxUnsolicitedGrantDutyCycleHistogram:",  *(unsigned int *)&v90[m]);
  for (n = 0LL; n != 64; n += 4LL)
    -[AWDHistogramsCoexS addCoexTotalGrantTimeHistogram:]( v10,  "addCoexTotalGrantTimeHistogram:",  *(unsigned int *)&v87[n]);
  for (ii = 0LL; ii != 44; ii += 4LL)
    -[AWDHistogramsCoexS addCoexAbortsDueToGrantRevokesHistogram:]( v10,  "addCoexAbortsDueToGrantRevokesHistogram:",  *(unsigned int *)((char *)v86 + ii));
  [v71 setSHistCoex:v10];

  v6 = 0LL;
LABEL_142:

  sub_10000D448((uint64_t)&v82);
  return v6;
}

LABEL_112:
  v60 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_rxErrorAckFailedRadioState));
  [v3 setObject:v60 forKey:@"rx_error_ack_failed_radio_state"];

  v8 = self->_has;
  if ((*(_DWORD *)&v8 & 0x200000) == 0)
  {
LABEL_55:
    if ((*(_DWORD *)&v8 & 0x100000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_114;
  }

  PBDataWriterWriteUint32Field(v7, self->_rxErrorAckFailedRadioState, 51LL);
  v6 = self->_has;
  if ((*(_DWORD *)&v6 & 0x200000) == 0)
  {
LABEL_55:
    if ((*(_DWORD *)&v6 & 0x100000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_114;
  }

  v4[24] = self->_rxErrorAckFailedRadioState;
  *((void *)v4 + 31) |= 0x400000uLL;
  v6 = self->_has;
  if ((*(_DWORD *)&v6 & 0x200000) == 0)
  {
LABEL_55:
    if ((*(_DWORD *)&v6 & 0x100000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_114;
  }

  *((_DWORD *)v6 + 22) = self->_rxErrorAckDenied;
  v6[31] |= 0x100000uLL;
  v10 = self->_has;
  if ((*(_DWORD *)&v10 & 0x80000) == 0)
  {
LABEL_55:
    if ((*(void *)&v10 & 0x200000000LL) == 0) {
      goto LABEL_56;
    }
    goto LABEL_114;
  }

  v26 = 0LL;
  if ((*(void *)&v4 & 0x200000000LL) != 0)
  {
LABEL_60:
    v27 = 2654435761LL * self->_sleepState;
    if ((*(_BYTE *)&v4 & 4) != 0) {
      goto LABEL_61;
    }
    goto LABEL_114;
  }

  self->_rxErrorAborted = v5[20];
  *(void *)&self->_has |= 0x40000uLL;
  v9 = *((void *)v5 + 31);
  if ((v9 & 0x1000000) == 0)
  {
LABEL_59:
    if ((v9 & 0x20000000) == 0) {
      goto LABEL_60;
    }
    goto LABEL_114;
  }

LABEL_113:
  v61 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_rxErrorAckFailedRadioDelay));
  [v3 setObject:v61 forKey:@"rx_error_ack_failed_radio_delay"];

  v8 = self->_has;
  if ((*(_DWORD *)&v8 & 0x100000) == 0)
  {
LABEL_56:
    if ((*(_DWORD *)&v8 & 0x80000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_115;
  }

  PBDataWriterWriteUint32Field(v7, self->_rxErrorAckFailedRadioDelay, 52LL);
  v6 = self->_has;
  if ((*(_DWORD *)&v6 & 0x100000) == 0)
  {
LABEL_56:
    if ((*(_DWORD *)&v6 & 0x80000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_115;
  }

  v4[23] = self->_rxErrorAckFailedRadioDelay;
  *((void *)v4 + 31) |= 0x200000uLL;
  v6 = self->_has;
  if ((*(_DWORD *)&v6 & 0x100000) == 0)
  {
LABEL_56:
    if ((*(_DWORD *)&v6 & 0x80000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_115;
  }

  *((_DWORD *)v6 + 21) = self->_rxErrorAckAborted;
  v6[31] |= 0x80000uLL;
  v10 = self->_has;
  if ((*(void *)&v10 & 0x200000000LL) == 0)
  {
LABEL_56:
    if ((*(_BYTE *)&v10 & 4) == 0) {
      goto LABEL_57;
    }
    goto LABEL_115;
  }

  v27 = 0LL;
  if ((*(_BYTE *)&v4 & 4) != 0)
  {
LABEL_61:
    v28 = 2654435761LL * self->_energyDetectedRequests;
    if ((*(_BYTE *)&v4 & 2) != 0) {
      goto LABEL_62;
    }
LABEL_115:
    v29 = 0LL;
    if ((*(_BYTE *)&v4 & 0x20) != 0) {
      goto LABEL_63;
    }
LABEL_116:
    v30 = 0LL;
    return v62 ^ v63 ^ v61 ^ v60 ^ v58 ^ v57 ^ v56 ^ v55 ^ v54 ^ v53 ^ v52 ^ v51 ^ v50 ^ v59 ^ v49 ^ v48 ^ v47 ^ v46 ^ v45 ^ v44 ^ v43 ^ v42 ^ v41 ^ v40 ^ v39 ^ v38 ^ v37 ^ v36 ^ v35 ^ v34 ^ v33 ^ v32 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30;
  }

  self->_rxErrorDelayedTimeslotEnded = v5[26];
  *(void *)&self->_has |= 0x1000000uLL;
  v9 = *((void *)v5 + 31);
  if ((v9 & 0x20000000) == 0)
  {
LABEL_60:
    if ((v9 & 0x4000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_115;
  }

  __break(0x5500u);
  return result;
}

void sub_100116BC4(uint64_t a1, uint64_t a2)
{
LABEL_1:
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
    || *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
  {
    return;
  }

  char v4 = 0;
  unsigned int v5 = 0;
  unint64_t v6 = 0LL;
  while (1)
  {
    uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
    unint64_t v8 = v7 + 1;
    if (v7 == -1) {
      break;
    }
    if (v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
    {
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      uint64_t v12 = OBJC_IVAR___PBDataReader__error;
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v11 = 0LL;
      }
      else {
        unint64_t v11 = v6;
      }
LABEL_14:
      if (*(_BYTE *)(a2 + v12)) {
        BOOL v13 = 1;
      }
      else {
        BOOL v13 = (v11 & 7) == 4;
      }
      if (v13) {
        return;
      }
      switch((v11 >> 3))
      {
        case 1u:
          char v14 = 0;
          unsigned int v15 = 0;
          uint64_t v16 = 0LL;
          *(void *)(a1 + 248) |= 1uLL;
          while (1)
          {
            uint64_t v17 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v18 = v17 + 1;
            if (v17 == -1) {
              goto LABEL_653;
            }
            if (v18 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v19 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18;
            v16 |= (unint64_t)(v19 & 0x7F) << v14;
            if ((v19 & 0x80) == 0) {
              goto LABEL_424;
            }
            v14 += 7;
            BOOL v10 = v15++ >= 9;
            if (v10)
            {
              LODWORD(v16) = 0;
              goto LABEL_426;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_424:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v16) = 0;
          }
LABEL_426:
          *(_DWORD *)(a1 + 8) = v16;
          goto LABEL_1;
        case 2u:
          char v20 = 0;
          unsigned int v21 = 0;
          uint64_t v22 = 0LL;
          *(void *)(a1 + 248) |= 0x10uLL;
          while (1)
          {
            uint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v24 = v23 + 1;
            if (v23 == -1) {
              goto LABEL_653;
            }
            if (v24 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v25 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if ((v25 & 0x80) == 0) {
              goto LABEL_428;
            }
            v20 += 7;
            BOOL v10 = v21++ >= 9;
            if (v10)
            {
              LODWORD(v22) = 0;
              goto LABEL_430;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_428:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v22) = 0;
          }
LABEL_430:
          *(_DWORD *)(a1 + 24) = v22;
          goto LABEL_1;
        case 3u:
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v28 = 0LL;
          *(void *)(a1 + 248) |= 0x40uLL;
          while (1)
          {
            uint64_t v29 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v30 = v29 + 1;
            if (v29 == -1) {
              goto LABEL_653;
            }
            if (v30 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v31 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if ((v31 & 0x80) == 0) {
              goto LABEL_432;
            }
            v26 += 7;
            BOOL v10 = v27++ >= 9;
            if (v10)
            {
              LODWORD(v28) = 0;
              goto LABEL_434;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_432:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v28) = 0;
          }
LABEL_434:
          *(_DWORD *)(a1 + 32) = v28;
          goto LABEL_1;
        case 4u:
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v34 = 0LL;
          *(void *)(a1 + 248) |= 0x100uLL;
          while (1)
          {
            uint64_t v35 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v36 = v35 + 1;
            if (v35 == -1) {
              goto LABEL_653;
            }
            if (v36 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v37 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v35);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v36;
            v34 |= (unint64_t)(v37 & 0x7F) << v32;
            if ((v37 & 0x80) == 0) {
              goto LABEL_436;
            }
            v32 += 7;
            BOOL v10 = v33++ >= 9;
            if (v10)
            {
              LODWORD(v34) = 0;
              goto LABEL_438;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_436:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v34) = 0;
          }
LABEL_438:
          *(_DWORD *)(a1 + 40) = v34;
          goto LABEL_1;
        case 5u:
          v38 = objc_alloc_init(&OBJC_CLASS___AWDRadioStatsS);
          objc_storeStrong((id *)(a1 + 144), v38);
          if (!PBReaderPlaceMark(a2, v357) || (sub_1000B1E80((uint64_t)v38, a2) & 1) == 0)
          {

            return;
          }

          PBReaderRecallMark(a2, v357);

          break;
        case 6u:
          char v39 = 0;
          unsigned int v40 = 0;
          uint64_t v41 = 0LL;
          *(void *)(a1 + 248) |= 0x20000uLL;
          while (1)
          {
            uint64_t v42 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v43 = v42 + 1;
            if (v42 == -1) {
              goto LABEL_653;
            }
            if (v43 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v44 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v42);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v43;
            v41 |= (unint64_t)(v44 & 0x7F) << v39;
            if ((v44 & 0x80) == 0) {
              goto LABEL_440;
            }
            v39 += 7;
            BOOL v10 = v40++ >= 9;
            if (v10)
            {
              LODWORD(v41) = 0;
              goto LABEL_442;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_440:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v41) = 0;
          }
LABEL_442:
          *(_DWORD *)(a1 + 76) = v41;
          goto LABEL_1;
        case 7u:
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v47 = 0LL;
          *(void *)(a1 + 248) |= 0x10000uLL;
          while (1)
          {
            uint64_t v48 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v49 = v48 + 1;
            if (v48 == -1) {
              goto LABEL_653;
            }
            if (v49 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v50 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v48);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v49;
            v47 |= (unint64_t)(v50 & 0x7F) << v45;
            if ((v50 & 0x80) == 0) {
              goto LABEL_444;
            }
            v45 += 7;
            BOOL v10 = v46++ >= 9;
            if (v10)
            {
              LODWORD(v47) = 0;
              goto LABEL_446;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_444:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v47) = 0;
          }
LABEL_446:
          *(_DWORD *)(a1 + 72) = v47;
          goto LABEL_1;
        case 8u:
          char v51 = 0;
          unsigned int v52 = 0;
          uint64_t v53 = 0LL;
          *(void *)(a1 + 248) |= 0x8000uLL;
          while (1)
          {
            uint64_t v54 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v55 = v54 + 1;
            if (v54 == -1) {
              goto LABEL_653;
            }
            if (v55 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v56 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v54);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v55;
            v53 |= (unint64_t)(v56 & 0x7F) << v51;
            if ((v56 & 0x80) == 0) {
              goto LABEL_448;
            }
            v51 += 7;
            BOOL v10 = v52++ >= 9;
            if (v10)
            {
              LODWORD(v53) = 0;
              goto LABEL_450;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_448:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v53) = 0;
          }
LABEL_450:
          *(_DWORD *)(a1 + 68) = v53;
          goto LABEL_1;
        case 9u:
          char v57 = 0;
          unsigned int v58 = 0;
          uint64_t v59 = 0LL;
          *(void *)(a1 + 248) |= 0x4000uLL;
          while (1)
          {
            uint64_t v60 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v61 = v60 + 1;
            if (v60 == -1) {
              goto LABEL_653;
            }
            if (v61 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v62 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v60);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v61;
            v59 |= (unint64_t)(v62 & 0x7F) << v57;
            if ((v62 & 0x80) == 0) {
              goto LABEL_452;
            }
            v57 += 7;
            BOOL v10 = v58++ >= 9;
            if (v10)
            {
              LODWORD(v59) = 0;
              goto LABEL_454;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_452:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v59) = 0;
          }
LABEL_454:
          *(_DWORD *)(a1 + 64) = v59;
          goto LABEL_1;
        case 0xAu:
          char v63 = 0;
          unsigned int v64 = 0;
          uint64_t v65 = 0LL;
          *(void *)(a1 + 248) |= 0x2000uLL;
          while (1)
          {
            uint64_t v66 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v67 = v66 + 1;
            if (v66 == -1) {
              goto LABEL_653;
            }
            if (v67 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v68 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v66);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v67;
            v65 |= (unint64_t)(v68 & 0x7F) << v63;
            if ((v68 & 0x80) == 0) {
              goto LABEL_456;
            }
            v63 += 7;
            BOOL v10 = v64++ >= 9;
            if (v10)
            {
              LODWORD(v65) = 0;
              goto LABEL_458;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_456:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v65) = 0;
          }
LABEL_458:
          *(_DWORD *)(a1 + 60) = v65;
          goto LABEL_1;
        case 0xBu:
          char v69 = 0;
          unsigned int v70 = 0;
          uint64_t v71 = 0LL;
          *(void *)(a1 + 248) |= 0x1000uLL;
          while (1)
          {
            uint64_t v72 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v73 = v72 + 1;
            if (v72 == -1) {
              goto LABEL_653;
            }
            if (v73 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v74 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v72);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v73;
            v71 |= (unint64_t)(v74 & 0x7F) << v69;
            if ((v74 & 0x80) == 0) {
              goto LABEL_460;
            }
            v69 += 7;
            BOOL v10 = v70++ >= 9;
            if (v10)
            {
              LODWORD(v71) = 0;
              goto LABEL_462;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_460:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v71) = 0;
          }
LABEL_462:
          *(_DWORD *)(a1 + 56) = v71;
          goto LABEL_1;
        case 0xCu:
          char v75 = 0;
          unsigned int v76 = 0;
          uint64_t v77 = 0LL;
          *(void *)(a1 + 248) |= 0x800uLL;
          while (1)
          {
            uint64_t v78 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v79 = v78 + 1;
            if (v78 == -1) {
              goto LABEL_653;
            }
            if (v79 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v80 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v78);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v79;
            v77 |= (unint64_t)(v80 & 0x7F) << v75;
            if ((v80 & 0x80) == 0) {
              goto LABEL_464;
            }
            v75 += 7;
            BOOL v10 = v76++ >= 9;
            if (v10)
            {
              LODWORD(v77) = 0;
              goto LABEL_466;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_464:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v77) = 0;
          }
LABEL_466:
          *(_DWORD *)(a1 + 52) = v77;
          goto LABEL_1;
        case 0xDu:
          char v81 = 0;
          unsigned int v82 = 0;
          uint64_t v83 = 0LL;
          *(void *)(a1 + 248) |= 0x400uLL;
          while (1)
          {
            uint64_t v84 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v85 = v84 + 1;
            if (v84 == -1) {
              goto LABEL_653;
            }
            if (v85 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v86 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v84);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v85;
            v83 |= (unint64_t)(v86 & 0x7F) << v81;
            if ((v86 & 0x80) == 0) {
              goto LABEL_468;
            }
            v81 += 7;
            BOOL v10 = v82++ >= 9;
            if (v10)
            {
              LODWORD(v83) = 0;
              goto LABEL_470;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_468:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v83) = 0;
          }
LABEL_470:
          *(_DWORD *)(a1 + 48) = v83;
          goto LABEL_1;
        case 0xEu:
          char v87 = 0;
          unsigned int v88 = 0;
          uint64_t v89 = 0LL;
          *(void *)(a1 + 248) |= 0x8000000000uLL;
          while (1)
          {
            uint64_t v90 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v91 = v90 + 1;
            if (v90 == -1) {
              goto LABEL_653;
            }
            if (v91 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v92 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v90);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v91;
            v89 |= (unint64_t)(v92 & 0x7F) << v87;
            if ((v92 & 0x80) == 0) {
              goto LABEL_472;
            }
            v87 += 7;
            BOOL v10 = v88++ >= 9;
            if (v10)
            {
              LODWORD(v89) = 0;
              goto LABEL_474;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_472:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v89) = 0;
          }
LABEL_474:
          *(_DWORD *)(a1 + 176) = v89;
          goto LABEL_1;
        case 0xFu:
          char v93 = 0;
          unsigned int v94 = 0;
          uint64_t v95 = 0LL;
          *(void *)(a1 + 248) |= 0x4000000000uLL;
          while (1)
          {
            uint64_t v96 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v97 = v96 + 1;
            if (v96 == -1) {
              goto LABEL_653;
            }
            if (v97 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v98 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v96);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v97;
            v95 |= (unint64_t)(v98 & 0x7F) << v93;
            if ((v98 & 0x80) == 0) {
              goto LABEL_476;
            }
            v93 += 7;
            BOOL v10 = v94++ >= 9;
            if (v10)
            {
              LODWORD(v95) = 0;
              goto LABEL_478;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_476:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v95) = 0;
          }
LABEL_478:
          *(_DWORD *)(a1 + 172) = v95;
          goto LABEL_1;
        case 0x10u:
          char v99 = 0;
          unsigned int v100 = 0;
          uint64_t v101 = 0LL;
          *(void *)(a1 + 248) |= 0x2000000000uLL;
          while (1)
          {
            uint64_t v102 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v103 = v102 + 1;
            if (v102 == -1) {
              goto LABEL_653;
            }
            if (v103 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v104 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v102);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v103;
            v101 |= (unint64_t)(v104 & 0x7F) << v99;
            if ((v104 & 0x80) == 0) {
              goto LABEL_480;
            }
            v99 += 7;
            BOOL v10 = v100++ >= 9;
            if (v10)
            {
              LODWORD(v101) = 0;
              goto LABEL_482;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_480:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v101) = 0;
          }
LABEL_482:
          *(_DWORD *)(a1 + 168) = v101;
          goto LABEL_1;
        case 0x11u:
          char v105 = 0;
          unsigned int v106 = 0;
          uint64_t v107 = 0LL;
          *(void *)(a1 + 248) |= 0x1000000000uLL;
          while (1)
          {
            uint64_t v108 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v109 = v108 + 1;
            if (v108 == -1) {
              goto LABEL_653;
            }
            if (v109 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v110 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v108);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v109;
            v107 |= (unint64_t)(v110 & 0x7F) << v105;
            if ((v110 & 0x80) == 0) {
              goto LABEL_484;
            }
            v105 += 7;
            BOOL v10 = v106++ >= 9;
            if (v10)
            {
              LODWORD(v107) = 0;
              goto LABEL_486;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_484:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v107) = 0;
          }
LABEL_486:
          *(_DWORD *)(a1 + 164) = v107;
          goto LABEL_1;
        case 0x12u:
          char v111 = 0;
          unsigned int v112 = 0;
          uint64_t v113 = 0LL;
          *(void *)(a1 + 248) |= 8uLL;
          while (1)
          {
            uint64_t v114 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v115 = v114 + 1;
            if (v114 == -1) {
              goto LABEL_653;
            }
            if (v115 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v116 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v114);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v115;
            v113 |= (unint64_t)(v116 & 0x7F) << v111;
            if ((v116 & 0x80) == 0) {
              goto LABEL_488;
            }
            v111 += 7;
            BOOL v10 = v112++ >= 9;
            if (v10)
            {
              LODWORD(v113) = 0;
              goto LABEL_490;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_488:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v113) = 0;
          }
LABEL_490:
          *(_DWORD *)(a1 + 20) = v113;
          goto LABEL_1;
        case 0x13u:
          char v117 = 0;
          unsigned int v118 = 0;
          uint64_t v119 = 0LL;
          *(void *)(a1 + 248) |= 0x200uLL;
          while (1)
          {
            uint64_t v120 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v121 = v120 + 1;
            if (v120 == -1) {
              goto LABEL_653;
            }
            if (v121 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v122 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v120);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v121;
            v119 |= (unint64_t)(v122 & 0x7F) << v117;
            if ((v122 & 0x80) == 0) {
              goto LABEL_492;
            }
            v117 += 7;
            BOOL v10 = v118++ >= 9;
            if (v10)
            {
              LODWORD(v119) = 0;
              goto LABEL_494;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_492:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v119) = 0;
          }
LABEL_494:
          *(_DWORD *)(a1 + 44) = v119;
          goto LABEL_1;
        case 0x14u:
          char v123 = 0;
          unsigned int v124 = 0;
          uint64_t v125 = 0LL;
          *(void *)(a1 + 248) |= 0x800000000uLL;
          while (1)
          {
            uint64_t v126 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v127 = v126 + 1;
            if (v126 == -1) {
              goto LABEL_653;
            }
            if (v127 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v128 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v126);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v127;
            v125 |= (unint64_t)(v128 & 0x7F) << v123;
            if ((v128 & 0x80) == 0) {
              goto LABEL_496;
            }
            v123 += 7;
            BOOL v10 = v124++ >= 9;
            if (v10)
            {
              LODWORD(v125) = 0;
              goto LABEL_498;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_496:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v125) = 0;
          }
LABEL_498:
          *(_DWORD *)(a1 + 160) = v125;
          goto LABEL_1;
        case 0x15u:
          char v129 = 0;
          unsigned int v130 = 0;
          uint64_t v131 = 0LL;
          *(void *)(a1 + 248) |= 0x400000000uLL;
          while (1)
          {
            uint64_t v132 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v133 = v132 + 1;
            if (v132 == -1) {
              goto LABEL_653;
            }
            if (v133 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v134 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v132);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v133;
            v131 |= (unint64_t)(v134 & 0x7F) << v129;
            if ((v134 & 0x80) == 0) {
              goto LABEL_500;
            }
            v129 += 7;
            BOOL v10 = v130++ >= 9;
            if (v10)
            {
              LODWORD(v131) = 0;
              goto LABEL_502;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_500:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v131) = 0;
          }
LABEL_502:
          *(_DWORD *)(a1 + 156) = v131;
          goto LABEL_1;
        case 0x16u:
          char v135 = 0;
          unsigned int v136 = 0;
          uint64_t v137 = 0LL;
          *(void *)(a1 + 248) |= 0x1000000000000uLL;
          while (1)
          {
            uint64_t v138 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v139 = v138 + 1;
            if (v138 == -1) {
              goto LABEL_653;
            }
            if (v139 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v140 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v138);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v139;
            v137 |= (unint64_t)(v140 & 0x7F) << v135;
            if ((v140 & 0x80) == 0) {
              goto LABEL_504;
            }
            v135 += 7;
            BOOL v10 = v136++ >= 9;
            if (v10)
            {
              LODWORD(v137) = 0;
              goto LABEL_506;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_504:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v137) = 0;
          }
LABEL_506:
          *(_DWORD *)(a1 + 212) = v137;
          goto LABEL_1;
        case 0x17u:
          char v141 = 0;
          unsigned int v142 = 0;
          uint64_t v143 = 0LL;
          *(void *)(a1 + 248) |= 0x800000000000uLL;
          while (1)
          {
            uint64_t v144 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v145 = v144 + 1;
            if (v144 == -1) {
              goto LABEL_653;
            }
            if (v145 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v146 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v144);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v145;
            v143 |= (unint64_t)(v146 & 0x7F) << v141;
            if ((v146 & 0x80) == 0) {
              goto LABEL_508;
            }
            v141 += 7;
            BOOL v10 = v142++ >= 9;
            if (v10)
            {
              LODWORD(v143) = 0;
              goto LABEL_510;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_508:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v143) = 0;
          }
LABEL_510:
          *(_DWORD *)(a1 + 208) = v143;
          goto LABEL_1;
        case 0x18u:
          char v147 = 0;
          unsigned int v148 = 0;
          uint64_t v149 = 0LL;
          *(void *)(a1 + 248) |= 0x20000000000uLL;
          while (1)
          {
            uint64_t v150 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v151 = v150 + 1;
            if (v150 == -1) {
              goto LABEL_653;
            }
            if (v151 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v152 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v150);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v151;
            v149 |= (unint64_t)(v152 & 0x7F) << v147;
            if ((v152 & 0x80) == 0) {
              goto LABEL_512;
            }
            v147 += 7;
            BOOL v10 = v148++ >= 9;
            if (v10)
            {
              LODWORD(v149) = 0;
              goto LABEL_514;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_512:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v149) = 0;
          }
LABEL_514:
          *(_DWORD *)(a1 + 184) = v149;
          goto LABEL_1;
        case 0x19u:
          char v153 = 0;
          unsigned int v154 = 0;
          uint64_t v155 = 0LL;
          *(void *)(a1 + 248) |= 0x40000000000uLL;
          while (1)
          {
            uint64_t v156 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v157 = v156 + 1;
            if (v156 == -1) {
              goto LABEL_653;
            }
            if (v157 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v158 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v156);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v157;
            v155 |= (unint64_t)(v158 & 0x7F) << v153;
            if ((v158 & 0x80) == 0) {
              goto LABEL_516;
            }
            v153 += 7;
            BOOL v10 = v154++ >= 9;
            if (v10)
            {
              LODWORD(v155) = 0;
              goto LABEL_518;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_516:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v155) = 0;
          }
LABEL_518:
          *(_DWORD *)(a1 + 188) = v155;
          goto LABEL_1;
        case 0x1Au:
          char v159 = 0;
          unsigned int v160 = 0;
          uint64_t v161 = 0LL;
          *(void *)(a1 + 248) |= 0x80000000000uLL;
          while (1)
          {
            uint64_t v162 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v163 = v162 + 1;
            if (v162 == -1) {
              goto LABEL_653;
            }
            if (v163 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v164 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v162);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v163;
            v161 |= (unint64_t)(v164 & 0x7F) << v159;
            if ((v164 & 0x80) == 0) {
              goto LABEL_520;
            }
            v159 += 7;
            BOOL v10 = v160++ >= 9;
            if (v10)
            {
              LODWORD(v161) = 0;
              goto LABEL_522;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_520:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v161) = 0;
          }
LABEL_522:
          *(_DWORD *)(a1 + 192) = v161;
          goto LABEL_1;
        case 0x1Bu:
          char v165 = 0;
          unsigned int v166 = 0;
          uint64_t v167 = 0LL;
          *(void *)(a1 + 248) |= 0x2000000000000uLL;
          while (1)
          {
            uint64_t v168 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v169 = v168 + 1;
            if (v168 == -1) {
              goto LABEL_653;
            }
            if (v169 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v170 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v168);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v169;
            v167 |= (unint64_t)(v170 & 0x7F) << v165;
            if ((v170 & 0x80) == 0) {
              goto LABEL_524;
            }
            v165 += 7;
            BOOL v10 = v166++ >= 9;
            if (v10)
            {
              LODWORD(v167) = 0;
              goto LABEL_526;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_524:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v167) = 0;
          }
LABEL_526:
          *(_DWORD *)(a1 + 216) = v167;
          goto LABEL_1;
        case 0x1Cu:
          char v171 = 0;
          unsigned int v172 = 0;
          uint64_t v173 = 0LL;
          *(void *)(a1 + 248) |= 0x10000000000000uLL;
          while (1)
          {
            uint64_t v174 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v175 = v174 + 1;
            if (v174 == -1) {
              goto LABEL_653;
            }
            if (v175 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v176 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v174);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v175;
            v173 |= (unint64_t)(v176 & 0x7F) << v171;
            if ((v176 & 0x80) == 0) {
              goto LABEL_528;
            }
            v171 += 7;
            BOOL v10 = v172++ >= 9;
            if (v10)
            {
              LODWORD(v173) = 0;
              goto LABEL_530;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_528:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v173) = 0;
          }
LABEL_530:
          *(_DWORD *)(a1 + 228) = v173;
          goto LABEL_1;
        case 0x1Du:
          char v177 = 0;
          unsigned int v178 = 0;
          uint64_t v179 = 0LL;
          *(void *)(a1 + 248) |= 0x8000000000000uLL;
          while (1)
          {
            uint64_t v180 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v181 = v180 + 1;
            if (v180 == -1) {
              goto LABEL_653;
            }
            if (v181 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v182 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v180);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v181;
            v179 |= (unint64_t)(v182 & 0x7F) << v177;
            if ((v182 & 0x80) == 0) {
              goto LABEL_532;
            }
            v177 += 7;
            BOOL v10 = v178++ >= 9;
            if (v10)
            {
              LODWORD(v179) = 0;
              goto LABEL_534;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_532:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v179) = 0;
          }
LABEL_534:
          *(_DWORD *)(a1 + 224) = v179;
          goto LABEL_1;
        case 0x1Eu:
          char v183 = 0;
          unsigned int v184 = 0;
          uint64_t v185 = 0LL;
          *(void *)(a1 + 248) |= 0x20000000000000uLL;
          while (1)
          {
            uint64_t v186 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v187 = v186 + 1;
            if (v186 == -1) {
              goto LABEL_653;
            }
            if (v187 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v188 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v186);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v187;
            v185 |= (unint64_t)(v188 & 0x7F) << v183;
            if ((v188 & 0x80) == 0) {
              goto LABEL_536;
            }
            v183 += 7;
            BOOL v10 = v184++ >= 9;
            if (v10)
            {
              LODWORD(v185) = 0;
              goto LABEL_538;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_536:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v185) = 0;
          }
LABEL_538:
          *(_DWORD *)(a1 + 232) = v185;
          goto LABEL_1;
        case 0x1Fu:
          char v189 = 0;
          unsigned int v190 = 0;
          uint64_t v191 = 0LL;
          *(void *)(a1 + 248) |= 0x40000000000000uLL;
          while (1)
          {
            uint64_t v192 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v193 = v192 + 1;
            if (v192 == -1) {
              goto LABEL_653;
            }
            if (v193 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v194 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v192);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v193;
            v191 |= (unint64_t)(v194 & 0x7F) << v189;
            if ((v194 & 0x80) == 0) {
              goto LABEL_540;
            }
            v189 += 7;
            BOOL v10 = v190++ >= 9;
            if (v10)
            {
              LODWORD(v191) = 0;
              goto LABEL_542;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_540:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v191) = 0;
          }
LABEL_542:
          *(_DWORD *)(a1 + 236) = v191;
          goto LABEL_1;
        case 0x20u:
          char v195 = 0;
          unsigned int v196 = 0;
          uint64_t v197 = 0LL;
          *(void *)(a1 + 248) |= 0x80000000000000uLL;
          while (1)
          {
            uint64_t v198 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v199 = v198 + 1;
            if (v198 == -1) {
              goto LABEL_653;
            }
            if (v199 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v200 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v198);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v199;
            v197 |= (unint64_t)(v200 & 0x7F) << v195;
            if ((v200 & 0x80) == 0) {
              goto LABEL_544;
            }
            v195 += 7;
            BOOL v10 = v196++ >= 9;
            if (v10)
            {
              LODWORD(v197) = 0;
              goto LABEL_546;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_544:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v197) = 0;
          }
LABEL_546:
          *(_DWORD *)(a1 + 240) = v197;
          goto LABEL_1;
        case 0x21u:
          char v201 = 0;
          unsigned int v202 = 0;
          uint64_t v203 = 0LL;
          *(void *)(a1 + 248) |= 0x4000000000000uLL;
          while (1)
          {
            uint64_t v204 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v205 = v204 + 1;
            if (v204 == -1) {
              goto LABEL_653;
            }
            if (v205 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v206 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v204);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v205;
            v203 |= (unint64_t)(v206 & 0x7F) << v201;
            if ((v206 & 0x80) == 0) {
              goto LABEL_548;
            }
            v201 += 7;
            BOOL v10 = v202++ >= 9;
            if (v10)
            {
              LODWORD(v203) = 0;
              goto LABEL_550;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_548:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v203) = 0;
          }
LABEL_550:
          *(_DWORD *)(a1 + 220) = v203;
          goto LABEL_1;
        case 0x22u:
          char v207 = 0;
          unsigned int v208 = 0;
          uint64_t v209 = 0LL;
          *(void *)(a1 + 248) |= 0x100000000000000uLL;
          while (1)
          {
            uint64_t v210 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v211 = v210 + 1;
            if (v210 == -1) {
              goto LABEL_653;
            }
            if (v211 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v212 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v210);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v211;
            v209 |= (unint64_t)(v212 & 0x7F) << v207;
            if ((v212 & 0x80) == 0) {
              goto LABEL_552;
            }
            v207 += 7;
            BOOL v10 = v208++ >= 9;
            if (v10)
            {
              LODWORD(v209) = 0;
              goto LABEL_554;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_552:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v209) = 0;
          }
LABEL_554:
          *(_DWORD *)(a1 + 244) = v209;
          goto LABEL_1;
        case 0x23u:
          char v213 = 0;
          unsigned int v214 = 0;
          uint64_t v215 = 0LL;
          *(void *)(a1 + 248) |= 0x400000000000uLL;
          while (1)
          {
            uint64_t v216 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v217 = v216 + 1;
            if (v216 == -1) {
              goto LABEL_653;
            }
            if (v217 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v218 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v216);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v217;
            v215 |= (unint64_t)(v218 & 0x7F) << v213;
            if ((v218 & 0x80) == 0) {
              goto LABEL_556;
            }
            v213 += 7;
            BOOL v10 = v214++ >= 9;
            if (v10)
            {
              LODWORD(v215) = 0;
              goto LABEL_558;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_556:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v215) = 0;
          }
LABEL_558:
          *(_DWORD *)(a1 + 204) = v215;
          goto LABEL_1;
        case 0x24u:
          char v219 = 0;
          unsigned int v220 = 0;
          uint64_t v221 = 0LL;
          *(void *)(a1 + 248) |= 0x100000000000uLL;
          while (1)
          {
            uint64_t v222 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v223 = v222 + 1;
            if (v222 == -1) {
              goto LABEL_653;
            }
            if (v223 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v224 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v222);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v223;
            v221 |= (unint64_t)(v224 & 0x7F) << v219;
            if ((v224 & 0x80) == 0) {
              goto LABEL_560;
            }
            v219 += 7;
            BOOL v10 = v220++ >= 9;
            if (v10)
            {
              LODWORD(v221) = 0;
              goto LABEL_562;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_560:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v221) = 0;
          }
LABEL_562:
          *(_DWORD *)(a1 + 196) = v221;
          goto LABEL_1;
        case 0x25u:
          char v225 = 0;
          unsigned int v226 = 0;
          uint64_t v227 = 0LL;
          *(void *)(a1 + 248) |= 0x200000000000uLL;
          while (1)
          {
            uint64_t v228 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v229 = v228 + 1;
            if (v228 == -1) {
              goto LABEL_653;
            }
            if (v229 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v230 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v228);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v229;
            v227 |= (unint64_t)(v230 & 0x7F) << v225;
            if ((v230 & 0x80) == 0) {
              goto LABEL_564;
            }
            v225 += 7;
            BOOL v10 = v226++ >= 9;
            if (v10)
            {
              LODWORD(v227) = 0;
              goto LABEL_566;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_564:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v227) = 0;
          }
LABEL_566:
          *(_DWORD *)(a1 + 200) = v227;
          goto LABEL_1;
        case 0x26u:
          char v231 = 0;
          unsigned int v232 = 0;
          uint64_t v233 = 0LL;
          *(void *)(a1 + 248) |= 0x10000000000uLL;
          while (1)
          {
            uint64_t v234 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v235 = v234 + 1;
            if (v234 == -1) {
              goto LABEL_653;
            }
            if (v235 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v236 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v234);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v235;
            v233 |= (unint64_t)(v236 & 0x7F) << v231;
            if ((v236 & 0x80) == 0) {
              goto LABEL_568;
            }
            v231 += 7;
            BOOL v10 = v232++ >= 9;
            if (v10)
            {
              LODWORD(v233) = 0;
              goto LABEL_570;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_568:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v233) = 0;
          }
LABEL_570:
          *(_DWORD *)(a1 + 180) = v233;
          goto LABEL_1;
        case 0x27u:
          char v237 = 0;
          unsigned int v238 = 0;
          uint64_t v239 = 0LL;
          *(void *)(a1 + 248) |= 0x80uLL;
          while (1)
          {
            uint64_t v240 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v241 = v240 + 1;
            if (v240 == -1) {
              goto LABEL_653;
            }
            if (v241 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v242 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v240);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v241;
            v239 |= (unint64_t)(v242 & 0x7F) << v237;
            if ((v242 & 0x80) == 0) {
              goto LABEL_572;
            }
            v237 += 7;
            BOOL v10 = v238++ >= 9;
            if (v10)
            {
              LODWORD(v239) = 0;
              goto LABEL_574;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_572:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v239) = 0;
          }
LABEL_574:
          *(_DWORD *)(a1 + 36) = v239;
          goto LABEL_1;
        case 0x28u:
          char v243 = 0;
          unsigned int v244 = 0;
          uint64_t v245 = 0LL;
          *(void *)(a1 + 248) |= 0x40000000uLL;
          while (1)
          {
            uint64_t v246 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v247 = v246 + 1;
            if (v246 == -1) {
              goto LABEL_653;
            }
            if (v247 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v248 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v246);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v247;
            v245 |= (unint64_t)(v248 & 0x7F) << v243;
            if ((v248 & 0x80) == 0) {
              goto LABEL_576;
            }
            v243 += 7;
            BOOL v10 = v244++ >= 9;
            if (v10)
            {
              LODWORD(v245) = 0;
              goto LABEL_578;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_576:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v245) = 0;
          }
LABEL_578:
          *(_DWORD *)(a1 + 128) = v245;
          goto LABEL_1;
        case 0x29u:
          char v249 = 0;
          unsigned int v250 = 0;
          uint64_t v251 = 0LL;
          *(void *)(a1 + 248) |= 0x10000000uLL;
          while (1)
          {
            uint64_t v252 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v253 = v252 + 1;
            if (v252 == -1) {
              goto LABEL_653;
            }
            if (v253 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v254 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v252);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v253;
            v251 |= (unint64_t)(v254 & 0x7F) << v249;
            if ((v254 & 0x80) == 0) {
              goto LABEL_580;
            }
            v249 += 7;
            BOOL v10 = v250++ >= 9;
            if (v10)
            {
              LODWORD(v251) = 0;
              goto LABEL_582;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_580:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v251) = 0;
          }
LABEL_582:
          *(_DWORD *)(a1 + 120) = v251;
          goto LABEL_1;
        case 0x2Au:
          char v255 = 0;
          unsigned int v256 = 0;
          uint64_t v257 = 0LL;
          *(void *)(a1 + 248) |= 0x800000uLL;
          while (1)
          {
            uint64_t v258 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v259 = v258 + 1;
            if (v258 == -1) {
              goto LABEL_653;
            }
            if (v259 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v260 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v258);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v259;
            v257 |= (unint64_t)(v260 & 0x7F) << v255;
            if ((v260 & 0x80) == 0) {
              goto LABEL_584;
            }
            v255 += 7;
            BOOL v10 = v256++ >= 9;
            if (v10)
            {
              LODWORD(v257) = 0;
              goto LABEL_586;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_584:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v257) = 0;
          }
LABEL_586:
          *(_DWORD *)(a1 + 100) = v257;
          goto LABEL_1;
        case 0x2Bu:
          char v261 = 0;
          unsigned int v262 = 0;
          uint64_t v263 = 0LL;
          *(void *)(a1 + 248) |= 0x8000000uLL;
          while (1)
          {
            uint64_t v264 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v265 = v264 + 1;
            if (v264 == -1) {
              goto LABEL_653;
            }
            if (v265 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v266 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v264);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v265;
            v263 |= (unint64_t)(v266 & 0x7F) << v261;
            if ((v266 & 0x80) == 0) {
              goto LABEL_588;
            }
            v261 += 7;
            BOOL v10 = v262++ >= 9;
            if (v10)
            {
              LODWORD(v263) = 0;
              goto LABEL_590;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_588:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v263) = 0;
          }
LABEL_590:
          *(_DWORD *)(a1 + 116) = v263;
          goto LABEL_1;
        case 0x2Cu:
          char v267 = 0;
          unsigned int v268 = 0;
          uint64_t v269 = 0LL;
          *(void *)(a1 + 248) |= 0x2000000uLL;
          while (1)
          {
            uint64_t v270 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v271 = v270 + 1;
            if (v270 == -1) {
              goto LABEL_653;
            }
            if (v271 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v272 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v270);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v271;
            v269 |= (unint64_t)(v272 & 0x7F) << v267;
            if ((v272 & 0x80) == 0) {
              goto LABEL_592;
            }
            v267 += 7;
            BOOL v10 = v268++ >= 9;
            if (v10)
            {
              LODWORD(v269) = 0;
              goto LABEL_594;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_592:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v269) = 0;
          }
LABEL_594:
          *(_DWORD *)(a1 + 108) = v269;
          goto LABEL_1;
        case 0x2Du:
          char v273 = 0;
          unsigned int v274 = 0;
          uint64_t v275 = 0LL;
          *(void *)(a1 + 248) |= 0x80000000uLL;
          while (1)
          {
            uint64_t v276 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v277 = v276 + 1;
            if (v276 == -1) {
              goto LABEL_653;
            }
            if (v277 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v278 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v276);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v277;
            v275 |= (unint64_t)(v278 & 0x7F) << v273;
            if ((v278 & 0x80) == 0) {
              goto LABEL_596;
            }
            v273 += 7;
            BOOL v10 = v274++ >= 9;
            if (v10)
            {
              LODWORD(v275) = 0;
              goto LABEL_598;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_596:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v275) = 0;
          }
LABEL_598:
          *(_DWORD *)(a1 + 132) = v275;
          goto LABEL_1;
        case 0x2Eu:
          char v279 = 0;
          unsigned int v280 = 0;
          uint64_t v281 = 0LL;
          *(void *)(a1 + 248) |= (unint64_t)&_mh_execute_header;
          while (1)
          {
            uint64_t v282 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v283 = v282 + 1;
            if (v282 == -1) {
              goto LABEL_653;
            }
            if (v283 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v284 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v282);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v283;
            v281 |= (unint64_t)(v284 & 0x7F) << v279;
            if ((v284 & 0x80) == 0) {
              goto LABEL_600;
            }
            v279 += 7;
            BOOL v10 = v280++ >= 9;
            if (v10)
            {
              LODWORD(v281) = 0;
              goto LABEL_602;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_600:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v281) = 0;
          }
LABEL_602:
          *(_DWORD *)(a1 + 136) = v281;
          goto LABEL_1;
        case 0x2Fu:
          char v285 = 0;
          unsigned int v286 = 0;
          uint64_t v287 = 0LL;
          *(void *)(a1 + 248) |= 0x40000uLL;
          while (1)
          {
            uint64_t v288 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v289 = v288 + 1;
            if (v288 == -1) {
              goto LABEL_653;
            }
            if (v289 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v290 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v288);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v289;
            v287 |= (unint64_t)(v290 & 0x7F) << v285;
            if ((v290 & 0x80) == 0) {
              goto LABEL_604;
            }
            v285 += 7;
            BOOL v10 = v286++ >= 9;
            if (v10)
            {
              LODWORD(v287) = 0;
              goto LABEL_606;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_604:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v287) = 0;
          }
LABEL_606:
          *(_DWORD *)(a1 + 80) = v287;
          goto LABEL_1;
        case 0x30u:
          char v291 = 0;
          unsigned int v292 = 0;
          uint64_t v293 = 0LL;
          *(void *)(a1 + 248) |= 0x1000000uLL;
          while (1)
          {
            uint64_t v294 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v295 = v294 + 1;
            if (v294 == -1) {
              goto LABEL_653;
            }
            if (v295 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v296 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v294);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v295;
            v293 |= (unint64_t)(v296 & 0x7F) << v291;
            if ((v296 & 0x80) == 0) {
              goto LABEL_608;
            }
            v291 += 7;
            BOOL v10 = v292++ >= 9;
            if (v10)
            {
              LODWORD(v293) = 0;
              goto LABEL_610;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_608:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v293) = 0;
          }
LABEL_610:
          *(_DWORD *)(a1 + 104) = v293;
          goto LABEL_1;
        case 0x31u:
          char v297 = 0;
          unsigned int v298 = 0;
          uint64_t v299 = 0LL;
          *(void *)(a1 + 248) |= 0x20000000uLL;
          while (1)
          {
            uint64_t v300 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v301 = v300 + 1;
            if (v300 == -1) {
              goto LABEL_653;
            }
            if (v301 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v302 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v300);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v301;
            v299 |= (unint64_t)(v302 & 0x7F) << v297;
            if ((v302 & 0x80) == 0) {
              goto LABEL_612;
            }
            v297 += 7;
            BOOL v10 = v298++ >= 9;
            if (v10)
            {
              LODWORD(v299) = 0;
              goto LABEL_614;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_612:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v299) = 0;
          }
LABEL_614:
          *(_DWORD *)(a1 + 124) = v299;
          goto LABEL_1;
        case 0x32u:
          char v303 = 0;
          unsigned int v304 = 0;
          uint64_t v305 = 0LL;
          *(void *)(a1 + 248) |= 0x4000000uLL;
          while (1)
          {
            uint64_t v306 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v307 = v306 + 1;
            if (v306 == -1) {
              goto LABEL_653;
            }
            if (v307 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v308 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v306);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v307;
            v305 |= (unint64_t)(v308 & 0x7F) << v303;
            if ((v308 & 0x80) == 0) {
              goto LABEL_616;
            }
            v303 += 7;
            BOOL v10 = v304++ >= 9;
            if (v10)
            {
              LODWORD(v305) = 0;
              goto LABEL_618;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_616:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v305) = 0;
          }
LABEL_618:
          *(_DWORD *)(a1 + 112) = v305;
          goto LABEL_1;
        case 0x33u:
          char v309 = 0;
          unsigned int v310 = 0;
          uint64_t v311 = 0LL;
          *(void *)(a1 + 248) |= 0x400000uLL;
          while (1)
          {
            uint64_t v312 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v313 = v312 + 1;
            if (v312 == -1) {
              goto LABEL_653;
            }
            if (v313 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v314 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v312);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v313;
            v311 |= (unint64_t)(v314 & 0x7F) << v309;
            if ((v314 & 0x80) == 0) {
              goto LABEL_620;
            }
            v309 += 7;
            BOOL v10 = v310++ >= 9;
            if (v10)
            {
              LODWORD(v311) = 0;
              goto LABEL_622;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_620:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v311) = 0;
          }
LABEL_622:
          *(_DWORD *)(a1 + 96) = v311;
          goto LABEL_1;
        case 0x34u:
          char v315 = 0;
          unsigned int v316 = 0;
          uint64_t v317 = 0LL;
          *(void *)(a1 + 248) |= 0x200000uLL;
          while (1)
          {
            uint64_t v318 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v319 = v318 + 1;
            if (v318 == -1) {
              goto LABEL_653;
            }
            if (v319 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v320 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v318);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v319;
            v317 |= (unint64_t)(v320 & 0x7F) << v315;
            if ((v320 & 0x80) == 0) {
              goto LABEL_624;
            }
            v315 += 7;
            BOOL v10 = v316++ >= 9;
            if (v10)
            {
              LODWORD(v317) = 0;
              goto LABEL_626;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_624:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v317) = 0;
          }
LABEL_626:
          *(_DWORD *)(a1 + 92) = v317;
          goto LABEL_1;
        case 0x35u:
          char v321 = 0;
          unsigned int v322 = 0;
          uint64_t v323 = 0LL;
          *(void *)(a1 + 248) |= 0x100000uLL;
          while (1)
          {
            uint64_t v324 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v325 = v324 + 1;
            if (v324 == -1) {
              goto LABEL_653;
            }
            if (v325 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v326 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v324);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v325;
            v323 |= (unint64_t)(v326 & 0x7F) << v321;
            if ((v326 & 0x80) == 0) {
              goto LABEL_628;
            }
            v321 += 7;
            BOOL v10 = v322++ >= 9;
            if (v10)
            {
              LODWORD(v323) = 0;
              goto LABEL_630;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_628:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v323) = 0;
          }
LABEL_630:
          *(_DWORD *)(a1 + 88) = v323;
          goto LABEL_1;
        case 0x36u:
          char v327 = 0;
          unsigned int v328 = 0;
          uint64_t v329 = 0LL;
          *(void *)(a1 + 248) |= 0x80000uLL;
          while (1)
          {
            uint64_t v330 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v331 = v330 + 1;
            if (v330 == -1) {
              goto LABEL_653;
            }
            if (v331 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v332 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v330);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v331;
            v329 |= (unint64_t)(v332 & 0x7F) << v327;
            if ((v332 & 0x80) == 0) {
              goto LABEL_632;
            }
            v327 += 7;
            BOOL v10 = v328++ >= 9;
            if (v10)
            {
              LODWORD(v329) = 0;
              goto LABEL_634;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_632:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v329) = 0;
          }
LABEL_634:
          *(_DWORD *)(a1 + 84) = v329;
          goto LABEL_1;
        case 0x37u:
          char v333 = 0;
          unsigned int v334 = 0;
          uint64_t v335 = 0LL;
          *(void *)(a1 + 248) |= 0x200000000uLL;
          while (1)
          {
            uint64_t v336 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v337 = v336 + 1;
            if (v336 == -1) {
              goto LABEL_653;
            }
            if (v337 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v338 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v336);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v337;
            v335 |= (unint64_t)(v338 & 0x7F) << v333;
            if ((v338 & 0x80) == 0) {
              goto LABEL_636;
            }
            v333 += 7;
            BOOL v10 = v334++ >= 9;
            if (v10)
            {
              LODWORD(v335) = 0;
              goto LABEL_638;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_636:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v335) = 0;
          }
LABEL_638:
          *(_DWORD *)(a1 + 152) = v335;
          goto LABEL_1;
        case 0x38u:
          char v339 = 0;
          unsigned int v340 = 0;
          uint64_t v341 = 0LL;
          *(void *)(a1 + 248) |= 4uLL;
          while (1)
          {
            uint64_t v342 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v343 = v342 + 1;
            if (v342 == -1) {
              goto LABEL_653;
            }
            if (v343 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v344 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v342);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v343;
            v341 |= (unint64_t)(v344 & 0x7F) << v339;
            if ((v344 & 0x80) == 0) {
              goto LABEL_640;
            }
            v339 += 7;
            BOOL v10 = v340++ >= 9;
            if (v10)
            {
              LODWORD(v341) = 0;
              goto LABEL_642;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_640:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v341) = 0;
          }
LABEL_642:
          *(_DWORD *)(a1 + 16) = v341;
          goto LABEL_1;
        case 0x39u:
          char v345 = 0;
          unsigned int v346 = 0;
          uint64_t v347 = 0LL;
          *(void *)(a1 + 248) |= 2uLL;
          while (1)
          {
            uint64_t v348 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v349 = v348 + 1;
            if (v348 == -1) {
              goto LABEL_653;
            }
            if (v349 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v350 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v348);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v349;
            v347 |= (unint64_t)(v350 & 0x7F) << v345;
            if ((v350 & 0x80) == 0) {
              goto LABEL_644;
            }
            v345 += 7;
            BOOL v10 = v346++ >= 9;
            if (v10)
            {
              LODWORD(v347) = 0;
              goto LABEL_646;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_644:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v347) = 0;
          }
LABEL_646:
          *(_DWORD *)(a1 + 12) = v347;
          goto LABEL_1;
        case 0x3Au:
          char v351 = 0;
          unsigned int v352 = 0;
          uint64_t v353 = 0LL;
          *(void *)(a1 + 248) |= 0x20uLL;
          while (1)
          {
            uint64_t v354 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v355 = v354 + 1;
            if (v354 == -1) {
              goto LABEL_653;
            }
            if (v355 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v356 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v354);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v355;
            v353 |= (unint64_t)(v356 & 0x7F) << v351;
            if ((v356 & 0x80) == 0) {
              goto LABEL_648;
            }
            v351 += 7;
            BOOL v10 = v352++ >= 9;
            if (v10)
            {
              LODWORD(v353) = 0;
              goto LABEL_650;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_648:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v353) = 0;
          }
LABEL_650:
          *(_DWORD *)(a1 + 28) = v353;
          goto LABEL_1;
        default:
          if ((PBReaderSkipValueWithTag(a2) & 1) != 0) {
            goto LABEL_1;
          }
          return;
      }

      goto LABEL_1;
    }

    char v9 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
    *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
    v6 |= (unint64_t)(v9 & 0x7F) << v4;
    if ((v9 & 0x80) == 0) {
      goto LABEL_11;
    }
    v4 += 7;
    BOOL v10 = v5++ >= 9;
    if (v10)
    {
      unint64_t v11 = 0LL;
      uint64_t v12 = OBJC_IVAR___PBDataReader__error;
      goto LABEL_14;
    }
  }

LABEL_653:
  __break(0x5500u);
}

LABEL_292:
  return v11;
}

void sub_10011CD34(char *__s@<X0>, uint64_t a2@<X8>, uint64_t a3)
{
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 8) = 0LL;
  *(void *)a2 = a2 + 8;
  BOOL v13 = (char **)&a3;
  if (__s)
  {
    char v4 = __s;
    do
    {
      unsigned int v5 = v13++;
      unint64_t v6 = *v5;
      if (*v5)
      {
        sub_10000AC00(&__p, v4);
        uint64_t v7 = sub_10000ED88((uint64_t **)a2, &__p);
        sub_100018024(v7, v6);
      }

      else
      {
        sub_10000AC00(&__p, v4);
        unint64_t v8 = sub_10000ED88((uint64_t **)a2, &__p);
        uint64_t v9 = *v8;
        uint64_t *v8 = 0LL;
        if (v9) {
          (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
        }
      }

      if (v12 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      BOOL v10 = v13++;
      char v4 = *v10;
    }

    while (*v10);
  }

void sub_10011CDFC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_10000D448(v14);
  _Unwind_Resume(a1);
}

void sub_10011D030(uint64_t a1, uint64_t a2)
{
LABEL_1:
  do
  {
    if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
      || *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
    {
      break;
    }

    char v4 = 0;
    unsigned int v5 = 0;
    uint64_t v6 = 0LL;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1)
      {
LABEL_42:
        __break(0x5500u);
        return;
      }

      if (v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v11 = 0LL;
        uint64_t v12 = OBJC_IVAR___PBDataReader__error;
        goto LABEL_14;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    uint64_t v12 = OBJC_IVAR___PBDataReader__error;
    unint64_t v11 = *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) ? 0LL : v6;
LABEL_14:
    if (*(_BYTE *)(a2 + v12) || (v11 & 7) == 4) {
      break;
    }
    unint64_t v14 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      unsigned int v21 = objc_alloc_init(&OBJC_CLASS___AWDCtcsReadWriteStabilityS);
      objc_storeStrong((id *)(a1 + 24), v21);
      goto LABEL_41;
    }

    if ((_DWORD)v14 == 2)
    {
      unsigned int v21 = objc_alloc_init(&OBJC_CLASS___AWDHeaderInfoS);
      objc_storeStrong((id *)(a1 + 16), v21);
      if (PBReaderPlaceMark(a2, v23))
      {
        sub_10012DC90((uint64_t)v21, a2);
        if ((v22 & 1) != 0)
        {
LABEL_33:
          PBReaderRecallMark(a2, v23);

          goto LABEL_1;
        }
      }

int *sub_10011D784(int *result, _DWORD *a2, _DWORD *a3, _DWORD *a4, int *a5)
{
  uint64_t v7 = result;
  if (a5)
  {
    int v8 = result[101];
    if (*a5 < v8) {
      *a5 = v8;
    }
  }

  if (a2)
  {
    int v9 = result[101];
    if (__OFADD__(v9, 1)) {
      goto LABEL_14;
    }
    result = sub_10011D828(result + 5, a2, v9 + 1);
  }

  if (!a3) {
    goto LABEL_10;
  }
  int v10 = v7[101];
  if (__OFADD__(v10, 1))
  {
LABEL_14:
    __break(0x5500u);
    return result;
  }

  result = sub_10011D828(v7 + 37, a3, v10 + 1);
LABEL_10:
  if (a4)
  {
    int v11 = v7[101];
    if (!__OFADD__(v11, 1)) {
      return sub_10011D828(v7 + 69, a4, v11 + 1);
    }
    goto LABEL_14;
  }

  return result;
}

int *sub_10011D828(int *result, _DWORD *a2, int a3)
{
  if (a3 >= 1)
  {
    if (a3 >= 1024) {
      __int16 v3 = 1024;
    }
    else {
      __int16 v3 = a3;
    }
    int v4 = ((unsigned __int16)(v3 + 31) >> 5) + 1;
    do
    {
      int v5 = *result++;
      *a2++ |= v5;
      --v4;
    }

    while (v4 > 1);
  }

  return result;
}

BOOL sub_10011D868(int a1, __int16 a2)
{
  if (a1 < 0) {
    return 0LL;
  }
  v4.fd = a1;
  v4.events = a2;
  v4.revents = 0;
  poll(&v4, 1u, 0);
  return (unsigned __int16)(v4.revents & a2) != 0;
}

uint64_t sub_10011D8C0(uint64_t a1)
{
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t result = a1 + 20;
  *(_DWORD *)(result + 384) = -1;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_OWORD *)(result + 176) = 0u;
  *(_OWORD *)(result + 192) = 0u;
  *(_OWORD *)(result + 208) = 0u;
  *(_OWORD *)(result + 224) = 0u;
  *(_OWORD *)(result + 240) = 0u;
  *(_OWORD *)(result + 256) = 0u;
  *(_OWORD *)(result + 272) = 0u;
  *(_OWORD *)(result + 288) = 0u;
  *(_OWORD *)(result + 304) = 0u;
  *(_OWORD *)(result + 320) = 0u;
  *(_OWORD *)(result + 336) = 0u;
  *(_OWORD *)(result + 352) = 0u;
  *(_OWORD *)(result + 368) = 0u;
  return result;
}

uint64_t sub_10011D904(uint64_t result, unsigned int a2)
{
  if (a2 <= 0x3FF)
  {
    uint64_t v3 = result;
    uint64_t v4 = result + 20;
    unsigned int v5 = a2 >> 5;
    uint64_t v6 = (const void *)(v3 + 276);
    uint64_t result = __darwin_check_fd_set_overflow(a2, v6, 0);
    if ((_DWORD)result) {
      *((_DWORD *)v6 + v5) &= ~(1 << a2);
    }
  }

  return result;
}

uint64_t sub_10011D990(uint64_t result, unsigned int a2)
{
  if (a2 <= 0x3FF)
  {
    uint64_t v3 = result;
    uint64_t v4 = result + 148;
    unsigned int v5 = a2 >> 5;
    uint64_t v6 = (const void *)(v3 + 276);
    uint64_t result = __darwin_check_fd_set_overflow(a2, v6, 0);
    if ((_DWORD)result) {
      *((_DWORD *)v6 + v5) &= ~(1 << a2);
    }
  }

  return result;
}

uint64_t sub_10011DA1C(uint64_t result, unsigned int a2)
{
  if (a2 <= 0x3FF)
  {
    uint64_t v3 = result;
    uint64_t v4 = result + 20;
    unsigned int v5 = a2 >> 5;
    uint64_t v6 = (const void *)(v3 + 276);
    uint64_t result = __darwin_check_fd_set_overflow(a2, v6, 0);
    if ((_DWORD)result) {
      *((_DWORD *)v6 + v5) |= 1 << a2;
    }
  }

  return result;
}

uint64_t sub_10011DAB8(uint64_t result, unsigned int a2)
{
  if (a2 <= 0x3FF)
  {
    uint64_t v3 = result;
    uint64_t v4 = result + 148;
    unsigned int v5 = a2 >> 5;
    uint64_t v6 = (const void *)(v3 + 276);
    uint64_t result = __darwin_check_fd_set_overflow(a2, v6, 0);
    if ((_DWORD)result) {
      *((_DWORD *)v6 + v5) |= 1 << a2;
    }
  }

  return result;
}

uint64_t sub_10011DB54(uint64_t result, int a2, int a3, char a4)
{
  *(void *)uint64_t result = off_1002B38A8;
  *(_BYTE *)(result + 8) = a4;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(result + 16) = a3;
  *(_DWORD *)(result + 20) = -1;
  return result;
}

uint64_t sub_10011DB74(uint64_t result, int a2, char a3)
{
  *(void *)uint64_t result = off_1002B38A8;
  *(_BYTE *)(result + 8) = a3;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(result + 16) = a2;
  *(_DWORD *)(result + 20) = -1;
  return result;
}

uint64_t sub_10011DB94(uint64_t a1)
{
  *(void *)a1 = off_1002B38A8;
  if (*(_BYTE *)(a1 + 8))
  {
    close(*(_DWORD *)(a1 + 12));
    int v2 = *(_DWORD *)(a1 + 16);
    if (v2 != *(_DWORD *)(a1 + 12)) {
      close(v2);
    }
  }

  return nullsub_2(a1);
}

void sub_10011DBE8(uint64_t a1)
{
  time_t v1 = (void *)sub_10011DB94(a1);
  operator delete(v1);
}

uint64_t *sub_10011DBFC@<X0>(int a1@<W0>, int a2@<W1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  int v8 = operator new(0x18uLL);
  *(void *)int v8 = off_1002B38A8;
  v8[8] = a3;
  *((_DWORD *)v8 + 3) = a1;
  *((_DWORD *)v8 + 4) = a2;
  *((_DWORD *)v8 + 5) = -1;
  return sub_10011DE5C(a4, (uint64_t)v8);
}

uint64_t *sub_10011DC58@<X0>(int a1@<W0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = operator new(0x18uLL);
  *(void *)uint64_t v6 = off_1002B38A8;
  v6[8] = a2;
  *((_DWORD *)v6 + 3) = a1;
  *((_DWORD *)v6 + 4) = a1;
  *((_DWORD *)v6 + 5) = -1;
  return sub_10011DE5C(a3, (uint64_t)v6);
}

ssize_t sub_10011DCB0(uint64_t a1, const void *a2, size_t a3)
{
  ssize_t result = write(*(_DWORD *)(a1 + 16), a2, a3);
  if (result < 0)
  {
    ssize_t result = (ssize_t)__error();
    if (__OFSUB__(0, *(_DWORD *)result)) {
      __break(0x550Du);
    }
    else {
      return -*(_DWORD *)result;
    }
  }

  else if (!result)
  {
    return (int)sub_100124DC0(*(_DWORD *)(a1 + 16));
  }

  return result;
}

ssize_t sub_10011DD04(uint64_t a1, void *a2, size_t a3)
{
  ssize_t result = read(*(_DWORD *)(a1 + 12), a2, a3);
  if ((result & 0x8000000000000000LL) == 0)
  {
    if (result) {
      return result;
    }
    return (int)sub_100124DC0(*(_DWORD *)(a1 + 12));
  }

  if (*__error() == 35) {
    return (int)sub_100124DC0(*(_DWORD *)(a1 + 12));
  }
  ssize_t result = (ssize_t)__error();
  int v5 = -*(_DWORD *)result;
  if (__OFSUB__(0, *(_DWORD *)result))
  {
    __break(0x550Du);
    return result;
  }

  ssize_t result = v5;
  if (!v5) {
    return (int)sub_100124DC0(*(_DWORD *)(a1 + 12));
  }
  return result;
}

off_t sub_10011DD6C(uint64_t a1, off_t a2, int a3)
{
  return lseek(*(_DWORD *)(a1 + 12), a2, a3);
}

BOOL sub_10011DD74(uint64_t a1)
{
  v4.fd = *(_DWORD *)(a1 + 12);
  *(_DWORD *)&v4.events = 120;
  int v1 = poll(&v4, 1u, 0);
  return (v4.revents & 0x78) != 0 && v1 > 0;
}

BOOL sub_10011DDB8(uint64_t a1)
{
  v4.fd = *(_DWORD *)(a1 + 16);
  *(_DWORD *)&v4.events = 60;
  int v1 = poll(&v4, 1u, 0);
  return (v4.revents & 0x3C) != 0 && v1 > 0;
}

uint64_t sub_10011DDFC(uint64_t a1)
{
  uint64_t result = isatty(*(_DWORD *)(a1 + 16));
  if ((_DWORD)result) {
    return tcsendbreak(*(_DWORD *)(a1 + 16), 0);
  }
  return result;
}

uint64_t sub_10011DE38(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_10011DE40(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_10011DE48()
{
  return 0LL;
}

uint64_t sub_10011DE50(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 20) = a2;
  return 0LL;
}

uint64_t *sub_10011DE5C(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0LL;
  sub_10011DEC4(&v5, a2);
  uint64_t v3 = a1[1];
  a1[1] = v5;
  uint64_t v5 = v3;
  sub_10000F9EC(&v5);
  return a1;
}

void sub_10011DEB0(_Unwind_Exception *a1)
{
}

void *sub_10011DEC4(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  pollfd v4 = operator new(0x18uLL);
  v4[1] = 0x100000001LL;
  *pollfd v4 = &off_1002B3958;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_10011DF10(void *a1)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  __cxa_rethrow();
}

void sub_10011DF30(_Unwind_Exception *a1)
{
}

uint64_t sub_10011DF4C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t sub_10011DF64()
{
  return 0LL;
}

uint64_t sub_10011DF6C()
{
  return 0LL;
}

uint64_t sub_10011DF74()
{
  return 0LL;
}

uint64_t sub_10011DF7C(uint64_t a1, const std::string *a2, int a3, unsigned __int16 a4)
{
  int v8 = sub_100158048();
  int v9 = (void *)sub_10011DB74(a1, v8, 1);
  *int v9 = off_1002B39B8;
  sub_10012084C(v9 + 3);
  sub_10012084C((void *)(a1 + 48));
  sub_100120C04((void *)(a1 + 72));
  sub_100120C04((void *)(a1 + 96));
  sub_100120FBC((void *)(a1 + 120));
  int v10 = (const void **)(a1 + 144);
  std::string::basic_string((std::string *)(a1 + 144), a2);
  *(void *)(a1 + 168) = 0xFFFFFFFF00000000LL;
  int v11 = sub_100143228();
  *(void *)(a1 + 200) = 0LL;
  *(void *)(a1 + 192) = a1 + 200;
  *(_DWORD *)(a1 + 176) = v11;
  *(_DWORD *)(a1 + 180) = -1;
  *(_WORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 186) = 0;
  *(void *)(a1 + 224) = 0LL;
  *(void *)(a1 + 208) = 0LL;
  *(void *)(a1 + 216) = a1 + 224;
  *(void *)(a1 + 232) = 0LL;
  uint64_t v12 = *(unsigned int *)(a1 + 12);
  if ((v12 & 0x80000000) != 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unable to open tunnel interface");
  }

  if (a3)
  {
    *(_DWORD *)__s = a3;
    if (setsockopt(v12, 0xFFFF, 4098, __s, 4u) < 0)
    {
      unint64_t v14 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v14)
      {
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }
    }

    BOOL v13 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v13)
    {
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    *(_BYTE *)(a1 + 186) = 1;
    uint64_t v12 = *(unsigned int *)(a1 + 12);
  }

  __int128 v32 = 0u;
  memset(v33, 0, sizeof(v33));
  *(_OWORD *)__s = 0u;
  if (sub_100158050(v12, __s, 60))
  {
    char v15 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v15)
    {
      if (sub_10015A058(4) && os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        int v16 = *__error();
        uint64_t v17 = __error();
        uint64_t v18 = strerror(*v17);
        sub_100210908((uint64_t)v18, (uint8_t *)&v27, v16, v15);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    goto LABEL_39;
  }

  size_t v19 = strlen(__s);
  size_t v20 = v19;
  if (*(char *)(a1 + 167) < 0)
  {
    if (v19 == *(void *)(a1 + 152))
    {
      if (v19 == -1LL) {
        goto LABEL_45;
      }
      unsigned int v21 = *v10;
LABEL_29:
      if (!memcmp(v21, __s, v20)) {
        goto LABEL_39;
      }
    }
  }

  else if (v19 == *(unsigned __int8 *)(a1 + 167))
  {
    unsigned int v21 = (const void *)(a1 + 144);
    if (v20 == -1LL) {
LABEL_45:
    }
      sub_100077124();
    goto LABEL_29;
  }

  char v22 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v22)
  {
    if (sub_10015A058(4) && os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = (const void *)(a1 + 144);
      int v27 = 136315394;
      uint64_t v28 = v23;
      __int16 v29 = 2080;
      unint64_t v30 = __s;
      _os_log_error_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "TunnelIPv6Interface: Couldn't create tunnel named %s, got %s instead!",  (uint8_t *)&v27,  0x16u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  std::string::assign((std::string *)(a1 + 144), __s);
LABEL_39:
  uint64_t v24 = a1 + 144;
  sub_100143698(*(unsigned int *)(a1 + 176), v24, a4);
  return a1;
}

void sub_10011E3CC(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_100006EEC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10011E4E0(void *a1)
{
  *a1 = off_1002B3C08;
  sub_10000F9EC(a1 + 2);
  return a1;
}

void *sub_10011E510(void *a1)
{
  *a1 = off_1002B3B38;
  sub_10000F9EC(a1 + 2);
  return a1;
}

void *sub_10011E540(void *a1)
{
  *a1 = off_1002B3A68;
  sub_10000F9EC(a1 + 2);
  return a1;
}

uint64_t sub_10011E574(uint64_t a1)
{
  *(void *)a1 = off_1002B39B8;
  close(*(_DWORD *)(a1 + 172));
  int v2 = *(_DWORD *)(a1 + 180);
  if ((v2 & 0x80000000) == 0) {
    close(v2);
  }
  sub_100143238(*(_DWORD *)(a1 + 176));
  sub_10000D0D4(a1 + 216);
  sub_10000D0D4(a1 + 192);
  *(void *)(a1 + 120) = off_1002B3C08;
  sub_10000F9EC((uint64_t *)(a1 + 136));
  *(void *)(a1 + 96) = off_1002B3B38;
  sub_10000F9EC((uint64_t *)(a1 + 112));
  *(void *)(a1 + 72) = off_1002B3B38;
  sub_10000F9EC((uint64_t *)(a1 + 88));
  *(void *)(a1 + 48) = off_1002B3A68;
  sub_10000F9EC((uint64_t *)(a1 + 64));
  *(void *)(a1 + 24) = off_1002B3A68;
  sub_10000F9EC((uint64_t *)(a1 + 40));
  return sub_10011DB94(a1);
}

void sub_10011E638(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10011E574(a1);
  operator delete(v1);
}

void sub_10011E64C(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v6)
  {
    uint64_t v7 = v6;
    if (sub_10015A058(6) && os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = a2;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "TunnelIPv6Interface::on_link_state_changed() UP=%d RUNNING=%d",  buf,  0xEu);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  if (*(unsigned __int8 *)(a1 + 184) != a3 || *(unsigned __int8 *)(a1 + 185) != a2)
  {
    if (!*(_BYTE *)(a1 + 184) && a3)
    {
      int v8 = *(int **)(a1 + 192);
      j = v8;
      for (i = (uint64_t *)(a1 + 144); j != (int *)(a1 + 200); int v8 = j)
      {
        if (!v8[12])
        {
          int v10 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v10)
          {
            if (sub_10015A058(6) && os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
            {
              sub_100108154(j + 7, __p);
              int v11 = *(_BYTE **)__p;
              if (v24 >= 0) {
                int v11 = __p;
              }
              uint64_t v12 = a1 + 144;
              int v13 = j[11];
              *(_DWORD *)buf = 136315650;
              *(void *)&buf[4] = v11;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)char v26 = v13;
              *(_WORD *)&v26[4] = 2080;
              *(void *)&v26[6] = v12;
              _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "Adding address %s/%d to interface %s",  buf,  0x1Cu);
              if (v24 < 0) {
                operator delete(*(void **)__p);
              }
            }
          }

          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&buf[4] = "com.apple.wpantund.ncp";
            *(_WORD *)&buf[12] = 2080;
            *(void *)char v26 = "default";
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging Module is not defined for SubSystem: %s, Category: %s",  buf,  0x16u);
          }

          LODWORD(v14) = a1 + 144;
          sub_1001436B8(*(_DWORD *)(a1 + 176), v14, j + 7, j[11]);
          j[12] = 1;
        }

        sub_10000B338((uint64_t)&j);
      }

      char v15 = *(int **)(a1 + 216);
      for (j = v15; j != (int *)(a1 + 224); char v15 = j)
      {
        if (!v15[12])
        {
          int v16 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v16)
          {
            if (sub_10015A058(6) && os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
            {
              sub_100108154(j + 7, buf);
              uint64_t v17 = buf;
              if (v26[9] < 0) {
                uint64_t v17 = *(_BYTE **)buf;
              }
              uint64_t v18 = a1 + 144;
              *(_DWORD *)__n128 __p = 136315394;
              *(void *)&__p[4] = v17;
              __int16 v22 = 2080;
              uint64_t v23 = v18;
              _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "Joining multicast address %s on interface %s.",  __p,  0x16u);
              if ((v26[9] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
            }
          }

          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&buf[4] = "com.apple.wpantund.ncp";
            *(_WORD *)&buf[12] = 2080;
            *(void *)char v26 = "default";
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging Module is not defined for SubSystem: %s, Category: %s",  buf,  0x16u);
          }

          uint64_t v19 = a1 + 144;
          sub_1001436D0(*(_DWORD *)(a1 + 176), v19, (__int128 *)(j + 7));
        }

        sub_10000B338((uint64_t)&j);
      }

      sub_1000F1694(a1 + 216);
    }

    *(_BYTE *)(a1 + 185) = a2;
    *(_BYTE *)(a1 + 184) = a3;
    sub_100121374(*(void *)(a1 + 128), a2, a3);
  }

uint64_t *sub_10011EAD0(uint64_t a1, pthread_mutex_t *a2, int a3)
{
  uint64_t v6 = a1 + 192;
  uint64_t v7 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v7)
  {
    int v8 = v7;
    if (sub_10015A058(6) && os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      sub_100108154(a2, __p);
      int v9 = (void **)__p[0];
      if (v13 >= 0) {
        int v9 = __p;
      }
      int v10 = (void *)(a1 + 144);
      *(_DWORD *)buf = 136315650;
      char v15 = v9;
      __int16 v16 = 1024;
      int v17 = a3;
      __int16 v18 = 2080;
      uint64_t v19 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "TunnelIPv6Interface: %s/%d was added to %s",  buf,  0x1Cu);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  return sub_10011EC50(a1 + 24, a2, a3);
}

uint64_t sub_10011EC48(uint64_t a1)
{
  return a1 + 144;
}

uint64_t *sub_10011EC50(uint64_t a1, pthread_mutex_t *a2, char a3)
{
  return sub_100121BA8(*(void *)(a1 + 8), a2, a3);
}

uint64_t *sub_10011EC58(uint64_t a1, pthread_mutex_t *a2)
{
  uint64_t v4 = a1 + 216;
  uint64_t v5 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10015A058(6) && os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      sub_100108154(a2, __p);
      uint64_t v7 = (void **)__p[0];
      if (v11 >= 0) {
        uint64_t v7 = __p;
      }
      int v8 = (void *)(a1 + 144);
      *(_DWORD *)buf = 136315394;
      char v13 = v7;
      __int16 v14 = 2080;
      char v15 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "TunnelIPv6Interface: %s was added to %s",  buf,  0x16u);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  return sub_10011EDB4(a1 + 72, a2);
}

uint64_t *sub_10011EDB4(uint64_t a1, pthread_mutex_t *a2)
{
  return sub_1001223D4(*(void *)(a1 + 8), a2);
}

uint64_t *sub_10011EDBC(uint64_t a1, pthread_mutex_t *a2, int a3)
{
  uint64_t result = (uint64_t *)sub_1000F1974(a1 + 192, (unint64_t *)a2);
  if (!result)
  {
    uint64_t v7 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v7)
    {
      int v8 = v7;
      if (sub_10015A058(6) && os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        sub_100108154(a2, __p);
        int v9 = (void **)__p[0];
        if (v12 >= 0) {
          int v9 = __p;
        }
        int v10 = (void *)(a1 + 144);
        *(_DWORD *)buf = 136315650;
        __int16 v14 = v9;
        __int16 v15 = 1024;
        int v16 = a3;
        __int16 v17 = 2080;
        __int16 v18 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "TunnelIPv6Interface: %s/%d was removed from %s",  buf,  0x1Cu);
        if (v12 < 0) {
          operator delete(__p[0]);
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    return sub_10011EC50(a1 + 48, a2, a3);
  }

  return result;
}

uint64_t *sub_10011EF24(uint64_t a1, pthread_mutex_t *a2)
{
  uint64_t result = (uint64_t *)sub_1000F1974(a1 + 216, (unint64_t *)a2);
  if (!result)
  {
    uint64_t v5 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v5)
    {
      uint64_t v6 = v5;
      if (sub_10015A058(6) && os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        sub_100108154(a2, __p);
        uint64_t v7 = (void **)__p[0];
        if (v10 >= 0) {
          uint64_t v7 = __p;
        }
        int v8 = (void *)(a1 + 144);
        *(_DWORD *)buf = 136315394;
        char v12 = v7;
        __int16 v13 = 2080;
        __int16 v14 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "TunnelIPv6Interface: %s was removed from %s",  buf,  0x16u);
        if (v10 < 0) {
          operator delete(__p[0]);
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    return sub_10011EDB4(a1 + 96, a2);
  }

  return result;
}

uint64_t sub_10011F074(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, int *a5, uint64_t *a6)
{
  if (a2)
  {
    unint64_t v12 = *(unsigned int *)(a1 + 172);
    if ((v12 & 0x80000000) == 0 && __darwin_check_fd_set_overflow(*(_DWORD *)(a1 + 172), a2, 0)) {
      *(_DWORD *)&a2[(v12 >> 3) & 0x1FFFFFFC] |= 1 << v12;
    }
    unint64_t v13 = *(unsigned int *)(a1 + 180);
    if ((v13 & 0x80000000) == 0 && __darwin_check_fd_set_overflow(*(_DWORD *)(a1 + 180), a2, 0)) {
      *(_DWORD *)&a2[(v13 >> 3) & 0x1FFFFFFC] |= 1 << v13;
    }
    if (a5)
    {
      int v14 = *(_DWORD *)(a1 + 172);
      if (*a5 > v14) {
        int v14 = *a5;
      }
      *a5 = v14;
      if (v14 <= *(_DWORD *)(a1 + 180)) {
        int v14 = *(_DWORD *)(a1 + 180);
      }
      *a5 = v14;
    }
  }

  return sub_100124410(a1, (uint64_t)a2, a3, a4, (uint64_t)a5, a6);
}

uint64_t sub_10011F170(uint64_t a1)
{
  return *(unsigned int *)(a1 + 168);
}

uint64_t sub_10011F178(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 176);
  uint64_t v3 = (char *)(a1 + 144);
  return sub_100143640(v2, v3);
}

uint64_t sub_10011F198(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 176);
  uint64_t v3 = (char *)(a1 + 144);
  return sub_100143658(v2, v3);
}

BOOL sub_10011F1B8(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 176);
  uint64_t v3 = (char *)(a1 + 144);
  return (~sub_10014325C(v2, v3) & 0x41) == 0;
}

uint64_t sub_10011F1F0(uint64_t a1, int a2)
{
  uint64_t v4 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  uint64_t v5 = v4;
  if (a2)
  {
    if (v4)
    {
      uint64_t v6 = (void *)(a1 + 144);
      int v14 = 136315138;
      __int16 v15 = v6;
      uint64_t v7 = "Bringing interface %s up. . .";
      goto LABEL_16;
    }

    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
LABEL_20:
    sub_1001FB53C();
    goto LABEL_21;
  }

  if (!v4)
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }

  int v9 = (void *)(a1 + 144);
  int v14 = 136315138;
  __int16 v15 = v9;
  uint64_t v7 = "Taking interface %s down. . .";
LABEL_16:
  _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, v7, (uint8_t *)&v14, 0xCu);
LABEL_21:
  char v10 = (char *)(a1 + 144);
  uint64_t v8 = sub_100143670(*(_DWORD *)(a1 + 176), v10, a2);
  if ((_DWORD)v8)
  {
    char v11 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v11)
    {
      unint64_t v12 = v11;
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    *(_DWORD *)(a1 + 168) = *__error();
  }

  return v8;
}

uint64_t sub_10011F404(uint64_t a1, int a2)
{
  uint64_t v4 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  uint64_t v5 = v4;
  if (a2)
  {
    if (v4)
    {
      uint64_t v6 = (void *)(a1 + 144);
      int v14 = 136315138;
      __int16 v15 = v6;
      uint64_t v7 = "Bringing interface %s online. . .";
      goto LABEL_16;
    }

    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
LABEL_20:
    sub_1001FB53C();
    goto LABEL_21;
  }

  if (!v4)
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }

  int v9 = (void *)(a1 + 144);
  int v14 = 136315138;
  __int16 v15 = v9;
  uint64_t v7 = "Taking interface %s offline. . .";
LABEL_16:
  _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, v7, (uint8_t *)&v14, 0xCu);
LABEL_21:
  char v10 = (char *)(a1 + 144);
  uint64_t v8 = sub_100143684(*(_DWORD *)(a1 + 176), v10, a2);
  *(_DWORD *)(a1 + 168) = *__error();
  if ((_DWORD)v8)
  {
    char v11 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v11)
    {
      unint64_t v12 = v11;
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    *(_DWORD *)(a1 + 168) = *__error();
  }

  return v8;
}

uint64_t sub_10011F628(uint64_t a1)
{
  int v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v2)
  {
    uint64_t v3 = v2;
    if (sub_10015A058(6) && os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = (void *)(a1 + 144);
      int v6 = 136315138;
      uint64_t v7 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Resetting interface %s. . .",  (uint8_t *)&v6,  0xCu);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  return sub_10011F404(a1, 0);
}

BOOL sub_10011F720(uint64_t a1, _BYTE *a2)
{
  uint64_t v3 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v3)
  {
    uint64_t v4 = v3;
    if (sub_10015A058(6) && os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      sub_100108154(a2, __p);
      uint64_t v5 = v11 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      unint64_t v13 = "is_alloc_address";
      __int16 v14 = 2080;
      __int16 v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Check %s for address %s", buf, 0x16u);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  BOOL v6 = !a2[8]
    && !a2[9]
    && !a2[10]
    && a2[11] == 255
    && a2[12] == 254
    && !a2[13]
    && a2[14] == 252;
  uint64_t v7 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v7)
  {
    if (sub_10015A058(6) && os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      sub_100108154(a2, __p);
      if (v11 >= 0) {
        uint64_t v8 = __p;
      }
      else {
        uint64_t v8 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315394;
      unint64_t v13 = (const char *)v8;
      __int16 v14 = 1024;
      LODWORD(v15) = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "address %s is ALLOC %d", buf, 0x12u);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  return v6;
}

uint64_t sub_10011F95C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (!*(_DWORD *)a2 && !*(_DWORD *)(a2 + 4) && !*(_DWORD *)(a2 + 8) && !*(_DWORD *)(a2 + 12))
  {
    __int16 v22 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v22)
    {
      uint64_t v23 = v22;
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    uint64_t result = 0LL;
    int v21 = 22;
    goto LABEL_53;
  }

  if (!sub_10011F720(0LL, (_BYTE *)a2))
  {
    if (sub_10011F1B8(a1))
    {
      char v11 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v11)
      {
        unint64_t v12 = v11;
        if (sub_10015A058(6) && os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          sub_100108154((void *)a2, __p);
          unint64_t v13 = (void **)__p[0];
          if (v25 >= 0) {
            unint64_t v13 = __p;
          }
          __int16 v14 = (void *)(a1 + 144);
          *(_DWORD *)buf = 136315650;
          int v27 = v13;
          __int16 v28 = 1024;
          unsigned int v29 = a3;
          __int16 v30 = 2080;
          char v31 = v14;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Adding address %s/%d to interface %s",  buf,  0x1Cu);
          if (v25 < 0) {
            operator delete(__p[0]);
          }
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }

      __int16 v17 = (void *)(a1 + 144);
      sub_1001436B8(*(_DWORD *)(a1 + 176), (int)v17, (void *)a2, a3);
      if (v18)
      {
        uint64_t v19 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v19)
        {
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FB53C();
        }

        size_t v20 = __error();
        uint64_t result = 0LL;
        int v21 = *v20;
LABEL_53:
        *(_DWORD *)(a1 + 168) = v21;
        return result;
      }

      __int16 v15 = sub_10011FD10((uint64_t **)(a1 + 192), (_OWORD *)a2);
      unint64_t v16 = a3 | (unint64_t)&_mh_execute_header;
    }

    else
    {
      __int16 v15 = sub_10011FD10((uint64_t **)(a1 + 192), (_OWORD *)a2);
      unint64_t v16 = a3;
    }

    *(void *)__int16 v15 = v16;
    return 1LL;
  }

  uint64_t v7 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t result = sub_10015A058(6);
    if ((_DWORD)result)
    {
      uint64_t result = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
      if ((_DWORD)result)
      {
        sub_100108154((void *)a2, __p);
        int v9 = (void **)__p[0];
        if (v25 >= 0) {
          int v9 = __p;
        }
        char v10 = (void *)(a1 + 144);
        *(_DWORD *)buf = 136315650;
        int v27 = v9;
        __int16 v28 = 1024;
        unsigned int v29 = a3;
        __int16 v30 = 2080;
        char v31 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "Skip adding ALLOC address %s/%d to interface %s",  buf,  0x1Cu);
        if (v25 < 0) {
          operator delete(__p[0]);
        }
        return 0LL;
      }
    }
  }

  else
  {
    uint64_t result = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      sub_1001FB53C();
      return 0LL;
    }
  }

  return result;
}

char *sub_10011FD10(uint64_t **a1, _OWORD *a2)
{
  uint64_t v3 = a2;
  return (char *)sub_100122BF8(a1, (unint64_t *)a2, (uint64_t)&unk_10022A59C, &v3) + 44;
}

uint64_t sub_10011FD44(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a2 || *(_DWORD *)(a2 + 4) || *(_DWORD *)(a2 + 8) || *(_DWORD *)(a2 + 12))
  {
    uint64_t v4 = (void *)(a1 + 144);
    LODWORD(v5) = a1 + 144;
    if (!sub_1001436C8(*(_DWORD *)(a1 + 176), (int)v5, (void *)a2))
    {
      uint64_t v8 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v8)
      {
        int v9 = v8;
        if (sub_10015A058(6))
        {
          uint64_t v6 = 1LL;
          if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO)) {
            return v6;
          }
          sub_100108154((void *)a2, __p);
          if (v15 >= 0) {
            char v10 = __p;
          }
          else {
            char v10 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136315394;
          __int16 v17 = v10;
          __int16 v18 = 2080;
          uint64_t v19 = v4;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Removing address %s from interface %s",  buf,  0x16u);
          if (v15 < 0) {
            operator delete(__p[0]);
          }
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }

      return 1LL;
    }

    uint64_t v6 = 0LL;
    int v7 = *__error();
  }

  else
  {
    unint64_t v12 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v12)
    {
      unint64_t v13 = v12;
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    uint64_t v6 = 0LL;
    int v7 = 22;
  }

  *(_DWORD *)(a1 + 168) = v7;
  return v6;
}

uint64_t sub_10011FF68(uint64_t a1, uint64_t a2)
{
  if (!*(_DWORD *)a2 && !*(_DWORD *)(a2 + 4) && !*(_DWORD *)(a2 + 8) && !*(_DWORD *)(a2 + 12))
  {
    unint64_t v12 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v12)
    {
      unint64_t v13 = v12;
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    uint64_t v6 = 0LL;
    int v7 = 22;
    goto LABEL_10;
  }

  if (!sub_10011F1B8(a1))
  {
    *(void *)sub_10011FD10((uint64_t **)(a1 + 216), (_OWORD *)a2) = 64LL;
    return 1LL;
  }

  uint64_t v4 = (uint64_t *)(a1 + 144);
  uint64_t v5 = a1 + 144;
  if (!sub_1001436D0(*(_DWORD *)(a1 + 176), v5, (__int128 *)a2))
  {
    int v9 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v9)
    {
      char v10 = v9;
      if (sub_10015A058(6))
      {
        uint64_t v6 = 1LL;
        if (!os_log_type_enabled(v10, OS_LOG_TYPE_INFO)) {
          return v6;
        }
        sub_100108154((void *)a2, __p);
        if (v15 >= 0) {
          char v11 = __p;
        }
        else {
          char v11 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315394;
        __int16 v17 = v11;
        __int16 v18 = 2080;
        uint64_t v19 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "Joining multicast address %s on interface %s.",  buf,  0x16u);
        if (v15 < 0) {
          operator delete(__p[0]);
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    return 1LL;
  }

  uint64_t v6 = 0LL;
  int v7 = *__error();
LABEL_10:
  *(_DWORD *)(a1 + 168) = v7;
  return v6;
}

uint64_t sub_100120190(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a2 || *(_DWORD *)(a2 + 4) || *(_DWORD *)(a2 + 8) || *(_DWORD *)(a2 + 12))
  {
    uint64_t v4 = (uint64_t *)(a1 + 144);
    uint64_t v5 = a1 + 144;
    if (!sub_1001438DC(*(_DWORD *)(a1 + 176), v5, (__int128 *)a2))
    {
      uint64_t v8 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v8)
      {
        int v9 = v8;
        if (sub_10015A058(6))
        {
          uint64_t v6 = 1LL;
          if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO)) {
            return v6;
          }
          sub_100108154((void *)a2, __p);
          if (v15 >= 0) {
            char v10 = __p;
          }
          else {
            char v10 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136315394;
          __int16 v17 = v10;
          __int16 v18 = 2080;
          uint64_t v19 = v4;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Leaving multicast address %s on interface %s.",  buf,  0x16u);
          if (v15 < 0) {
            operator delete(__p[0]);
          }
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }

      return 1LL;
    }

    uint64_t v6 = 0LL;
    int v7 = *__error();
  }

  else
  {
    unint64_t v12 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v12)
    {
      unint64_t v13 = v12;
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    uint64_t v6 = 0LL;
    int v7 = 22;
  }

  *(_DWORD *)(a1 + 168) = v7;
  return v6;
}

BOOL sub_1001203B4(uint64_t a1, void *a2, int a3)
{
  uint64_t v6 = (void *)(a1 + 144);
  int v7 = sub_1000137C4();
  if (v7)
  {
    *(_DWORD *)(a1 + 168) = *__error();
  }

  else
  {
    int v9 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v9)
    {
      char v10 = v9;
      if (sub_10015A058(6) && os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        sub_100108154(a2, __p);
        if (v13 >= 0) {
          char v11 = __p;
        }
        else {
          char v11 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315650;
        char v15 = v11;
        __int16 v16 = 1024;
        int v17 = a3;
        __int16 v18 = 2080;
        uint64_t v19 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "Adding route prefix %s/%d on interface %s.",  buf,  0x1Cu);
        if (v13 < 0) {
          operator delete(__p[0]);
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }
  }

  return v7 == 0;
}

BOOL sub_10012054C(uint64_t a1, void *a2, int a3)
{
  uint64_t v6 = (void *)(a1 + 144);
  int v7 = sub_1000137C4();
  if (v7)
  {
    *(_DWORD *)(a1 + 168) = *__error();
  }

  else
  {
    int v9 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v9)
    {
      char v10 = v9;
      if (sub_10015A058(6) && os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        sub_100108154(a2, __p);
        if (v13 >= 0) {
          char v11 = __p;
        }
        else {
          char v11 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315650;
        char v15 = v11;
        __int16 v16 = 1024;
        int v17 = a3;
        __int16 v18 = 2080;
        uint64_t v19 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "Removing route prefix %s/%d on interface %s.",  buf,  0x1Cu);
        if (v13 < 0) {
          operator delete(__p[0]);
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }
  }

  return v7 == 0;
}

ssize_t sub_1001206E4(uint64_t a1, _BYTE *a2, size_t a3)
{
  ssize_t result = sub_10011DD04(a1, a2, a3);
  size_t v5 = result - 4;
  if (result >= 4 && !*a2 && !a2[1])
  {
    memmove(a2, a2 + 4, v5);
    return v5;
  }

  return result;
}

ssize_t sub_100120730(ssize_t result, _BYTE *a2, size_t a3)
{
  uint64_t v3 = result;
  if (!*a2) {
    return sub_10011DCB0(result, a2, a3);
  }
  size_t v4 = a3 + 4;
  if (a3 >= 0xFFFFFFFFFFFFFFFCLL)
  {
    __break(0x5500u);
  }

  else
  {
    __chkstk_darwin(result);
    int v7 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    if (!v4 || (*int v7 = 0, v4 == 1) || (v7[1] = 0, v4 < 3) || (v7[2] = 0, v4 == 3)) {
      __break(0x5512u);
    }
    v7[3] = 30;
    memcpy(v7 + 4, v5, v6);
    ssize_t v8 = sub_10011DCB0(v3, (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL), v4);
    if (v8 <= 3) {
      return -1LL;
    }
    else {
      return v8 - 4;
    }
  }

  return result;
}

void *sub_10012084C(void *a1)
{
  *a1 = off_1002B3A68;
  int v2 = (uint64_t *)operator new(0x28uLL);
  sub_100120914(v2);
  sub_100120AC8(a1 + 1, (uint64_t)v2);
  return a1;
}

void sub_1001208AC(_Unwind_Exception *a1)
{
}

void sub_1001208C0(uint64_t *a1)
{
  *a1 = (uint64_t)off_1002B3A68;
  sub_10000F9EC(a1 + 2);
  operator delete(a1);
}

uint64_t sub_1001208F0@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    uint64_t v3 = (unsigned int *)(v2 + 8);
    do
      unsigned int v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

uint64_t *sub_100120914(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)operator new(0x20uLL);
  v5[0] = (uint64_t)v5;
  v5[1] = (uint64_t)v5;
  v7[0] = 0LL;
  v7[1] = 0LL;
  v5[2] = 0LL;
  size_t v6 = v7;
  sub_100120A40(v2, (uint64_t)v5);
  sub_1000DCA9C(a1, (uint64_t)v2);
  sub_10000D0D4((uint64_t)&v6);
  sub_1000DCDC8(v5);
  a1[2] = *(void *)*a1;
  uint64_t v3 = (pthread_mutex_t *)operator new(0x40uLL);
  pthread_mutex_init(v3, 0LL);
  sub_100049FA8(a1 + 3, (uint64_t)v3);
  return a1;
}

void sub_1001209BC(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  operator delete(v3);
  sub_10000F9EC((uint64_t *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100120A10(uint64_t *a1)
{
  return a1;
}

uint64_t *sub_100120A40(uint64_t *a1, uint64_t a2)
{
  unsigned int v4 = operator new(0x40uLL);
  sub_1000DCC5C((uint64_t)v4, a2);
  sub_1000DCE70(a1, (uint64_t)v4);
  size_t v5 = operator new(1uLL);
  sub_100049E98(a1 + 2, (uint64_t)v5);
  return a1;
}

void sub_100120AA0(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_100120AC8(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0LL;
  sub_100120B30(&v5, a2);
  uint64_t v3 = a1[1];
  a1[1] = v5;
  uint64_t v5 = v3;
  sub_10000F9EC(&v5);
  return a1;
}

void sub_100120B1C(_Unwind_Exception *a1)
{
}

void *sub_100120B30(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  unsigned int v4 = operator new(0x18uLL);
  v4[1] = 0x100000001LL;
  *unsigned int v4 = &off_1002B3AD8;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_100120B7C(void *a1)
{
}

void sub_100120B90(_Unwind_Exception *a1)
{
}

void sub_100120BAC(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    sub_10000F9EC(v1 + 4);
    sub_10000F9EC(v1 + 1);
    operator delete(v1);
  }

uint64_t sub_100120BEC()
{
  return 0LL;
}

uint64_t sub_100120BF4()
{
  return 0LL;
}

uint64_t sub_100120BFC()
{
  return 0LL;
}

void *sub_100120C04(void *a1)
{
  *a1 = off_1002B3B38;
  uint64_t v2 = (uint64_t *)operator new(0x28uLL);
  sub_100120CCC(v2);
  sub_100120E80(a1 + 1, (uint64_t)v2);
  return a1;
}

void sub_100120C64(_Unwind_Exception *a1)
{
}

void sub_100120C78(uint64_t *a1)
{
  *a1 = (uint64_t)off_1002B3B38;
  sub_10000F9EC(a1 + 2);
  operator delete(a1);
}

uint64_t sub_100120CA8@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    uint64_t v3 = (unsigned int *)(v2 + 8);
    do
      unsigned int v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

uint64_t *sub_100120CCC(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)operator new(0x20uLL);
  v5[0] = (uint64_t)v5;
  v5[1] = (uint64_t)v5;
  v7[0] = 0LL;
  v7[1] = 0LL;
  v5[2] = 0LL;
  size_t v6 = v7;
  sub_100120DF8(v2, (uint64_t)v5);
  sub_1000DDFD8(a1, (uint64_t)v2);
  sub_10000D0D4((uint64_t)&v6);
  sub_1000DE304(v5);
  a1[2] = *(void *)*a1;
  uint64_t v3 = (pthread_mutex_t *)operator new(0x40uLL);
  pthread_mutex_init(v3, 0LL);
  sub_100049FA8(a1 + 3, (uint64_t)v3);
  return a1;
}

void sub_100120D74(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  operator delete(v3);
  sub_10000F9EC((uint64_t *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100120DC8(uint64_t *a1)
{
  return a1;
}

uint64_t *sub_100120DF8(uint64_t *a1, uint64_t a2)
{
  unsigned int v4 = operator new(0x40uLL);
  sub_1000DE198((uint64_t)v4, a2);
  sub_1000DE3AC(a1, (uint64_t)v4);
  uint64_t v5 = operator new(1uLL);
  sub_100049E98(a1 + 2, (uint64_t)v5);
  return a1;
}

void sub_100120E58(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_100120E80(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0LL;
  sub_100120EE8(&v5, a2);
  uint64_t v3 = a1[1];
  a1[1] = v5;
  uint64_t v5 = v3;
  sub_10000F9EC(&v5);
  return a1;
}

void sub_100120ED4(_Unwind_Exception *a1)
{
}

void *sub_100120EE8(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  unsigned int v4 = operator new(0x18uLL);
  v4[1] = 0x100000001LL;
  *unsigned int v4 = &off_1002B3BA8;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_100120F34(void *a1)
{
}

void sub_100120F48(_Unwind_Exception *a1)
{
}

void sub_100120F64(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    sub_10000F9EC(v1 + 4);
    sub_10000F9EC(v1 + 1);
    operator delete(v1);
  }

uint64_t sub_100120FA4()
{
  return 0LL;
}

uint64_t sub_100120FAC()
{
  return 0LL;
}

uint64_t sub_100120FB4()
{
  return 0LL;
}

void *sub_100120FBC(void *a1)
{
  *a1 = off_1002B3C08;
  uint64_t v2 = (uint64_t *)operator new(0x28uLL);
  sub_100121084(v2);
  sub_100121238(a1 + 1, (uint64_t)v2);
  return a1;
}

void sub_10012101C(_Unwind_Exception *a1)
{
}

void sub_100121030(uint64_t *a1)
{
  *a1 = (uint64_t)off_1002B3C08;
  sub_10000F9EC(a1 + 2);
  operator delete(a1);
}

uint64_t sub_100121060@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    uint64_t v3 = (unsigned int *)(v2 + 8);
    do
      unsigned int v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

uint64_t *sub_100121084(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)operator new(0x20uLL);
  v5[0] = (uint64_t)v5;
  v5[1] = (uint64_t)v5;
  v7[0] = 0LL;
  v7[1] = 0LL;
  v5[2] = 0LL;
  size_t v6 = v7;
  sub_1001211B0(v2, (uint64_t)v5);
  sub_1000DF224(a1, (uint64_t)v2);
  sub_10000D0D4((uint64_t)&v6);
  sub_1000DF550(v5);
  a1[2] = *(void *)*a1;
  uint64_t v3 = (pthread_mutex_t *)operator new(0x40uLL);
  pthread_mutex_init(v3, 0LL);
  sub_100049FA8(a1 + 3, (uint64_t)v3);
  return a1;
}

void sub_10012112C(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  operator delete(v3);
  sub_10000F9EC((uint64_t *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100121180(uint64_t *a1)
{
  return a1;
}

uint64_t *sub_1001211B0(uint64_t *a1, uint64_t a2)
{
  unsigned int v4 = operator new(0x40uLL);
  sub_1000DF3E4((uint64_t)v4, a2);
  sub_1000DF5F8(a1, (uint64_t)v4);
  uint64_t v5 = operator new(1uLL);
  sub_100049E98(a1 + 2, (uint64_t)v5);
  return a1;
}

void sub_100121210(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_100121238(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0LL;
  sub_1001212A0(&v5, a2);
  uint64_t v3 = a1[1];
  a1[1] = v5;
  uint64_t v5 = v3;
  sub_10000F9EC(&v5);
  return a1;
}

void sub_10012128C(_Unwind_Exception *a1)
{
}

void *sub_1001212A0(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  unsigned int v4 = operator new(0x18uLL);
  v4[1] = 0x100000001LL;
  *unsigned int v4 = &off_1002B3C78;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1001212EC(void *a1)
{
}

void sub_100121300(_Unwind_Exception *a1)
{
}

void sub_10012131C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    sub_10000F9EC(v1 + 4);
    sub_10000F9EC(v1 + 1);
    operator delete(v1);
  }

uint64_t sub_10012135C()
{
  return 0LL;
}

uint64_t sub_100121364()
{
  return 0LL;
}

uint64_t sub_10012136C()
{
  return 0LL;
}

uint64_t *sub_100121374(uint64_t a1, char a2, char a3)
{
  char v16 = a2;
  char v15 = a3;
  __int128 v14 = 0uLL;
  sub_100010030(&v19, *(pthread_mutex_t **)(a1 + 24));
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    unsigned int v5 = atomic_load((unsigned int *)(v4 + 8));
    if (v5 == 1) {
      sub_1000DCA5C(a1, &v19, 0, 1);
    }
  }

  sub_10008AE9C(&v14, (uint64_t *)a1);
  sub_10000F788(v21);
  sub_10000F8D8(&v19);
  LOBYTE(v19) = 0;
  v21[8] = (pthread_mutex_t *)10;
  v21[9] = (pthread_mutex_t *)&v20;
  v21[10] = 0LL;
  v21[11] = (pthread_mutex_t *)&v16;
  v21[13] = 0LL;
  v21[14] = 0LL;
  v21[12] = (pthread_mutex_t *)&v15;
  uint64_t v6 = *(void *)v14;
  v13[0] = (uint64_t)&v19;
  v13[1] = a1;
  v13[2] = v6;
  uint64_t v7 = *(void *)(v14 + 16);
  *(void *)&__int128 v11 = *(void *)(v6 + 8);
  *((void *)&v11 + 1) = v6;
  *(void *)&__int128 v12 = &v19;
  *((void *)&v12 + 1) = v6;
  sub_1001216F0((uint64_t *)&v11);
  *(void *)&__int128 v9 = *(void *)v14;
  *((void *)&v9 + 1) = v9;
  *(void *)&__int128 v10 = &v19;
  *((void *)&v10 + 1) = v9;
  sub_1001216F0((uint64_t *)&v9);
  v18[0] = v11;
  v18[1] = v12;
  v17[0] = v9;
  v17[1] = v10;
  sub_10012151C(v7, (uint64_t *)v18, v17);
  sub_1001219A0(v13);
  sub_100121B04((uint64_t)&v19);
  return sub_10000F9EC((uint64_t *)&v14 + 1);
}

void sub_1001214D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32)
{
}

uint64_t *sub_10012151C(uint64_t a1, uint64_t *a2, void *a3)
{
  while (*a2 != *a3)
  {
    sub_10012156C(a2);
    ssize_t result = sub_1001216B4(a2);
  }

  return result;
}

uint64_t sub_10012156C(void *a1)
{
  uint64_t v2 = (_BYTE *)a1[2];
  if (!*v2)
  {
    sub_1001215F8((uint64_t)(v2 + 272), *a1 + 16LL);
    if (!*v2) {
      _BYTE *v2 = 1;
    }
  }

  return a1[2] + 1LL;
}

uint64_t sub_1001215F8(uint64_t a1, uint64_t a2)
{
  return sub_10012162C((uint64_t)&v3, (void *)(*(void *)(*(void *)a2 + 32LL) + 24LL));
}

uint64_t sub_10012162C(uint64_t a1, void *a2)
{
  return sub_100121640(a2);
}

uint64_t sub_100121640(void *a1)
{
  if (!*a1)
  {
    std::runtime_error::runtime_error(&v2, "call to empty boost::function");
    v2.__vftable = (std::runtime_error_vtbl *)&off_1002AD8D8;
    sub_10000706C(&v2);
  }

  return (*(uint64_t (**)(void *))((*a1 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 1);
}

void sub_1001216A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
}

uint64_t *sub_1001216B4(uint64_t *a1)
{
  *a1 = *(void *)(*a1 + 8);
  ssize_t result = sub_1001216F0(a1);
  char v3 = (_BYTE *)a1[2];
  if (*v3) {
    _BYTE *v3 = 0;
  }
  return result;
}

uint64_t *sub_1001216F0(uint64_t *result)
{
  uint64_t v1 = *result;
  if (*result != result[3])
  {
    std::runtime_error v2 = result;
    if (v1 == result[1]) {
      goto LABEL_12;
    }
    while (1)
    {
      sub_10008B464((uint64_t *)(v2[2] + 8), *(void *)(v2[2] + 264));
      sub_10000F810(v12, *(void *)(*v2 + 16));
      sub_1001218B0(*(uint64_t **)(*v2 + 16), v12, v2[2] + 8);
      uint64_t v3 = *(void *)(*v2 + 16);
      uint64_t v4 = v2[2];
      if (*(_BYTE *)(v3 + 24))
      {
        int v5 = *(_DWORD *)(v4 + 288);
        BOOL v6 = __CFADD__(v5, 1);
        int v7 = v5 + 1;
        if (v6) {
          goto LABEL_15;
        }
        *(_DWORD *)(v4 + 288) = v7;
      }

      else
      {
        int v8 = *(_DWORD *)(v4 + 292);
        BOOL v6 = __CFADD__(v8, 1);
        int v9 = v8 + 1;
        if (v6) {
LABEL_15:
        }
          __break(0x5500u);
        *(_DWORD *)(v4 + 292) = v9;
      }

      if (!sub_10008B410(v3)) {
        break;
      }
      sub_10000FE20(&v13);
      ssize_t result = sub_10000F8D8(v12);
      uint64_t v10 = v2[1];
      uint64_t v1 = *(void *)(*v2 + 8);
      uint64_t *v2 = v1;
      if (v1 == v10) {
        goto LABEL_12;
      }
    }

    sub_1000E0F2C(v2, v12, *v2);
    sub_10000FE20(&v13);
    ssize_t result = sub_10000F8D8(v12);
    uint64_t v1 = v2[1];
    if (*v2 == v1)
    {
LABEL_12:
      uint64_t v11 = v2[3];
      if (v11 != v1)
      {
        sub_10000F810(v12, *(void *)(v11 + 16));
        sub_1000E0F2C(v2, v12, v2[1]);
        sub_10000FE20(&v13);
        return sub_10000F8D8(v12);
      }
    }
  }

  return result;
}

void sub_10012187C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_1001218B0(uint64_t *result, void *a2, uint64_t a3)
{
  uint64_t v3 = (_DWORD **)result[4];
  if (v3)
  {
    BOOL v6 = result;
    for (i = *v3; i != v3[1]; i += 6)
    {
      sub_100012108(i, (uint64_t)v9);
      if (sub_100011134((uint64_t)i, (uint64_t)&v8))
      {
        sub_10000F6C4(v6, a2);
        return sub_1000122FC((uint64_t)v9);
      }

      sub_10008B4F8(a3, v9);
      ssize_t result = sub_1000122FC((uint64_t)v9);
      uint64_t v3 = (_DWORD **)v6[4];
    }
  }

  return result;
}

void sub_10012197C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t *sub_1001219A0(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 292) > *(_DWORD *)(*a1 + 288)) {
    sub_1001219E0(a1[1], a1[2]);
  }
  return a1;
}

void *sub_1001219E0(uint64_t a1, uint64_t a2)
{
  if (**(void **)a1 == a2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4 || (unsigned int v5 = atomic_load((unsigned int *)(v4 + 8)), v5 != 1))
    {
      BOOL v6 = (uint64_t *)operator new(0x20uLL);
      sub_1000DF360(v6, *(void *)a1, **(void **)a1);
      sub_1000DF1DC((__int128 *)a1, (uint64_t)v6);
    }

    char v8 = *(uint64_t **)(**(void **)a1 + 8LL);
    sub_1000DC9A4(a1, v9, 0, &v8, 0);
  }

  sub_10000F788(&v10);
  return sub_10000F8D8(v9);
}

void sub_100121AC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, ...)
{
}

uint64_t sub_100121B04(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 296);
  if (v2)
  {
    sub_10000F810(v4, v2);
    sub_10000FB70(*(uint64_t **)(a1 + 296), v4);
    sub_10000FE20(&v5);
    sub_10000F8D8(v4);
  }

  sub_10008BB48(a1 + 8);
  if (*(_BYTE *)a1) {
    *(_BYTE *)a1 = 0;
  }
  return a1;
}

void sub_100121B9C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006EEC(a1);
}

uint64_t *sub_100121BA8(uint64_t a1, pthread_mutex_t *a2, char a3)
{
  char v16 = a3;
  __int128 v15 = 0uLL;
  sub_100010030(&v19, *(pthread_mutex_t **)(a1 + 24));
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    unsigned int v6 = atomic_load((unsigned int *)(v5 + 8));
    if (v6 == 1) {
      sub_1000DCA5C(a1, &v19, 0, 1);
    }
  }

  sub_10008AE9C(&v15, (uint64_t *)a1);
  sub_10000F788(v21);
  sub_10000F8D8(&v19);
  LOBYTE(v19) = 0;
  v21[8] = (pthread_mutex_t *)10;
  v21[9] = (pthread_mutex_t *)&v20;
  v21[10] = 0LL;
  v21[11] = a2;
  v21[13] = 0LL;
  v21[14] = 0LL;
  v21[12] = (pthread_mutex_t *)&v16;
  uint64_t v7 = *(void *)v15;
  v14[0] = (uint64_t)&v19;
  v14[1] = a1;
  v14[2] = v7;
  uint64_t v8 = *(void *)(v15 + 16);
  *(void *)&__int128 v12 = *(void *)(v7 + 8);
  *((void *)&v12 + 1) = v7;
  *(void *)&__int128 v13 = &v19;
  *((void *)&v13 + 1) = v7;
  sub_100121F1C((uint64_t *)&v12);
  *(void *)&__int128 v10 = *(void *)v15;
  *((void *)&v10 + 1) = v10;
  *(void *)&__int128 v11 = &v19;
  *((void *)&v11 + 1) = v10;
  sub_100121F1C((uint64_t *)&v10);
  v18[0] = v12;
  v18[1] = v13;
  v17[0] = v10;
  v17[1] = v11;
  sub_100121D4C(v8, (uint64_t *)v18, v17);
  sub_1001221CC(v14);
  sub_100122330((uint64_t)&v19);
  return sub_10000F9EC((uint64_t *)&v15 + 1);
}

void sub_100121D04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32)
{
}

uint64_t *sub_100121D4C(uint64_t a1, uint64_t *a2, void *a3)
{
  while (*a2 != *a3)
  {
    sub_100121D9C(a2);
    ssize_t result = sub_100121EE0(a2);
  }

  return result;
}

uint64_t sub_100121D9C(void *a1)
{
  uint64_t v2 = (_BYTE *)a1[2];
  if (!*v2)
  {
    sub_100121E28((uint64_t)(v2 + 272), *a1 + 16LL);
    if (!*v2) {
      _BYTE *v2 = 1;
    }
  }

  return a1[2] + 1LL;
}

uint64_t sub_100121E28(uint64_t a1, uint64_t a2)
{
  return sub_100121E5C((uint64_t)&v3, (void *)(*(void *)(*(void *)a2 + 32LL) + 24LL));
}

uint64_t sub_100121E5C(uint64_t a1, void *a2)
{
  return sub_100121E6C(a2);
}

uint64_t sub_100121E6C(void *a1)
{
  if (!*a1)
  {
    std::runtime_error::runtime_error(&v2, "call to empty boost::function");
    v2.__vftable = (std::runtime_error_vtbl *)&off_1002AD8D8;
    sub_10000706C(&v2);
  }

  return (*(uint64_t (**)(void *))((*a1 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 1);
}

void sub_100121ECC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
}

uint64_t *sub_100121EE0(uint64_t *a1)
{
  *a1 = *(void *)(*a1 + 8);
  ssize_t result = sub_100121F1C(a1);
  char v3 = (_BYTE *)a1[2];
  if (*v3) {
    _BYTE *v3 = 0;
  }
  return result;
}

uint64_t *sub_100121F1C(uint64_t *result)
{
  uint64_t v1 = *result;
  if (*result != result[3])
  {
    std::runtime_error v2 = result;
    if (v1 == result[1]) {
      goto LABEL_12;
    }
    while (1)
    {
      sub_10008B464((uint64_t *)(v2[2] + 8), *(void *)(v2[2] + 264));
      sub_10000F810(v12, *(void *)(*v2 + 16));
      sub_1001220DC(*(uint64_t **)(*v2 + 16), v12, v2[2] + 8);
      uint64_t v3 = *(void *)(*v2 + 16);
      uint64_t v4 = v2[2];
      if (*(_BYTE *)(v3 + 24))
      {
        int v5 = *(_DWORD *)(v4 + 288);
        BOOL v6 = __CFADD__(v5, 1);
        int v7 = v5 + 1;
        if (v6) {
          goto LABEL_15;
        }
        *(_DWORD *)(v4 + 288) = v7;
      }

      else
      {
        int v8 = *(_DWORD *)(v4 + 292);
        BOOL v6 = __CFADD__(v8, 1);
        int v9 = v8 + 1;
        if (v6) {
LABEL_15:
        }
          __break(0x5500u);
        *(_DWORD *)(v4 + 292) = v9;
      }

      if (!sub_10008B410(v3)) {
        break;
      }
      sub_10000FE20(&v13);
      ssize_t result = sub_10000F8D8(v12);
      uint64_t v10 = v2[1];
      uint64_t v1 = *(void *)(*v2 + 8);
      uint64_t *v2 = v1;
      if (v1 == v10) {
        goto LABEL_12;
      }
    }

    sub_1000E0F2C(v2, v12, *v2);
    sub_10000FE20(&v13);
    ssize_t result = sub_10000F8D8(v12);
    uint64_t v1 = v2[1];
    if (*v2 == v1)
    {
LABEL_12:
      uint64_t v11 = v2[3];
      if (v11 != v1)
      {
        sub_10000F810(v12, *(void *)(v11 + 16));
        sub_1000E0F2C(v2, v12, v2[1]);
        sub_10000FE20(&v13);
        return sub_10000F8D8(v12);
      }
    }
  }

  return result;
}

void sub_1001220A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_1001220DC(uint64_t *result, void *a2, uint64_t a3)
{
  uint64_t v3 = (_DWORD **)result[4];
  if (v3)
  {
    BOOL v6 = result;
    for (i = *v3; i != v3[1]; i += 6)
    {
      sub_100012108(i, (uint64_t)v9);
      if (sub_100011134((uint64_t)i, (uint64_t)&v8))
      {
        sub_10000F6C4(v6, a2);
        return sub_1000122FC((uint64_t)v9);
      }

      sub_10008B4F8(a3, v9);
      ssize_t result = sub_1000122FC((uint64_t)v9);
      uint64_t v3 = (_DWORD **)v6[4];
    }
  }

  return result;
}

void sub_1001221A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t *sub_1001221CC(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 292) > *(_DWORD *)(*a1 + 288)) {
    sub_10012220C(a1[1], a1[2]);
  }
  return a1;
}

void *sub_10012220C(uint64_t a1, uint64_t a2)
{
  if (**(void **)a1 == a2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4 || (unsigned int v5 = atomic_load((unsigned int *)(v4 + 8)), v5 != 1))
    {
      BOOL v6 = (uint64_t *)operator new(0x20uLL);
      sub_1000DCBD8(v6, *(void *)a1, **(void **)a1);
      sub_1000DC95C((__int128 *)a1, (uint64_t)v6);
    }

    char v8 = *(uint64_t **)(**(void **)a1 + 8LL);
    sub_1000DC9A4(a1, v9, 0, &v8, 0);
  }

  sub_10000F788(&v10);
  return sub_10000F8D8(v9);
}

void sub_1001222F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, ...)
{
}

uint64_t sub_100122330(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 296);
  if (v2)
  {
    sub_10000F810(v4, v2);
    sub_10000FB70(*(uint64_t **)(a1 + 296), v4);
    sub_10000FE20(&v5);
    sub_10000F8D8(v4);
  }

  sub_10008BB48(a1 + 8);
  if (*(_BYTE *)a1) {
    *(_BYTE *)a1 = 0;
  }
  return a1;
}

void sub_1001223C8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006EEC(a1);
}

uint64_t *sub_1001223D4(uint64_t a1, pthread_mutex_t *a2)
{
  __int128 v14 = 0uLL;
  sub_100010030(&v17, *(pthread_mutex_t **)(a1 + 24));
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    unsigned int v5 = atomic_load((unsigned int *)(v4 + 8));
    if (v5 == 1) {
      sub_1000DCA5C(a1, &v17, 0, 1);
    }
  }

  sub_10008AE9C(&v14, (uint64_t *)a1);
  sub_10000F788(v19);
  sub_10000F8D8(&v17);
  LOBYTE(v17) = 0;
  v19[8] = (pthread_mutex_t *)10;
  v19[9] = (pthread_mutex_t *)&v18;
  v19[10] = 0LL;
  v19[11] = a2;
  v19[12] = 0LL;
  v19[13] = 0LL;
  uint64_t v6 = *(void *)v14;
  v13[0] = (uint64_t)&v17;
  v13[1] = a1;
  v13[2] = v6;
  uint64_t v7 = *(void *)(v14 + 16);
  *(void *)&__int128 v11 = *(void *)(v6 + 8);
  *((void *)&v11 + 1) = v6;
  *(void *)&__int128 v12 = &v17;
  *((void *)&v12 + 1) = v6;
  sub_100122740((uint64_t *)&v11);
  *(void *)&__int128 v9 = *(void *)v14;
  *((void *)&v9 + 1) = v9;
  *(void *)&__int128 v10 = &v17;
  *((void *)&v10 + 1) = v9;
  sub_100122740((uint64_t *)&v9);
  v16[0] = v11;
  v16[1] = v12;
  v15[0] = v9;
  v15[1] = v10;
  sub_100122578(v7, (uint64_t *)v16, v15);
  sub_1001229F0(v13);
  sub_100122B54((uint64_t)&v17);
  return sub_10000F9EC((uint64_t *)&v14 + 1);
}

void sub_100122530( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31)
{
}

uint64_t *sub_100122578(uint64_t a1, uint64_t *a2, void *a3)
{
  while (*a2 != *a3)
  {
    sub_1001225C8(a2);
    ssize_t result = sub_100122704(a2);
  }

  return result;
}

uint64_t sub_1001225C8(void *a1)
{
  uint64_t v2 = (_BYTE *)a1[2];
  if (!*v2)
  {
    sub_100122654((uint64_t)(v2 + 272), *a1 + 16LL);
    if (!*v2) {
      _BYTE *v2 = 1;
    }
  }

  return a1[2] + 1LL;
}

uint64_t sub_100122654(uint64_t a1, uint64_t a2)
{
  return sub_100122684((uint64_t)&v3, (void *)(*(void *)(*(void *)a2 + 32LL) + 24LL));
}

uint64_t sub_100122684(uint64_t a1, void *a2)
{
  return sub_100122690(a2);
}

uint64_t sub_100122690(void *a1)
{
  if (!*a1)
  {
    std::runtime_error::runtime_error(&v2, "call to empty boost::function");
    v2.__vftable = (std::runtime_error_vtbl *)&off_1002AD8D8;
    sub_10000706C(&v2);
  }

  return (*(uint64_t (**)(void *))((*a1 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 1);
}

void sub_1001226F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
}

uint64_t *sub_100122704(uint64_t *a1)
{
  *a1 = *(void *)(*a1 + 8);
  ssize_t result = sub_100122740(a1);
  char v3 = (_BYTE *)a1[2];
  if (*v3) {
    _BYTE *v3 = 0;
  }
  return result;
}

uint64_t *sub_100122740(uint64_t *result)
{
  uint64_t v1 = *result;
  if (*result != result[3])
  {
    std::runtime_error v2 = result;
    if (v1 == result[1]) {
      goto LABEL_12;
    }
    while (1)
    {
      sub_10008B464((uint64_t *)(v2[2] + 8), *(void *)(v2[2] + 264));
      sub_10000F810(v12, *(void *)(*v2 + 16));
      sub_100122900(*(uint64_t **)(*v2 + 16), v12, v2[2] + 8);
      uint64_t v3 = *(void *)(*v2 + 16);
      uint64_t v4 = v2[2];
      if (*(_BYTE *)(v3 + 24))
      {
        int v5 = *(_DWORD *)(v4 + 280);
        BOOL v6 = __CFADD__(v5, 1);
        int v7 = v5 + 1;
        if (v6) {
          goto LABEL_15;
        }
        *(_DWORD *)(v4 + 280) = v7;
      }

      else
      {
        int v8 = *(_DWORD *)(v4 + 284);
        BOOL v6 = __CFADD__(v8, 1);
        int v9 = v8 + 1;
        if (v6) {
LABEL_15:
        }
          __break(0x5500u);
        *(_DWORD *)(v4 + 284) = v9;
      }

      if (!sub_10008B410(v3)) {
        break;
      }
      sub_10000FE20(&v13);
      ssize_t result = sub_10000F8D8(v12);
      uint64_t v10 = v2[1];
      uint64_t v1 = *(void *)(*v2 + 8);
      uint64_t *v2 = v1;
      if (v1 == v10) {
        goto LABEL_12;
      }
    }

    sub_10008B444(v2, v12, *v2);
    sub_10000FE20(&v13);
    ssize_t result = sub_10000F8D8(v12);
    uint64_t v1 = v2[1];
    if (*v2 == v1)
    {
LABEL_12:
      uint64_t v11 = v2[3];
      if (v11 != v1)
      {
        sub_10000F810(v12, *(void *)(v11 + 16));
        sub_10008B444(v2, v12, v2[1]);
        sub_10000FE20(&v13);
        return sub_10000F8D8(v12);
      }
    }
  }

  return result;
}

void sub_1001228CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_100122900(uint64_t *result, void *a2, uint64_t a3)
{
  uint64_t v3 = (_DWORD **)result[4];
  if (v3)
  {
    BOOL v6 = result;
    for (i = *v3; i != v3[1]; i += 6)
    {
      sub_100012108(i, (uint64_t)v9);
      if (sub_100011134((uint64_t)i, (uint64_t)&v8))
      {
        sub_10000F6C4(v6, a2);
        return sub_1000122FC((uint64_t)v9);
      }

      sub_10008B4F8(a3, v9);
      ssize_t result = sub_1000122FC((uint64_t)v9);
      uint64_t v3 = (_DWORD **)v6[4];
    }
  }

  return result;
}

void sub_1001229CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t *sub_1001229F0(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 284) > *(_DWORD *)(*a1 + 280)) {
    sub_100122A30(a1[1], a1[2]);
  }
  return a1;
}

void *sub_100122A30(uint64_t a1, uint64_t a2)
{
  if (**(void **)a1 == a2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4 || (unsigned int v5 = atomic_load((unsigned int *)(v4 + 8)), v5 != 1))
    {
      BOOL v6 = (uint64_t *)operator new(0x20uLL);
      sub_1000DE114(v6, *(void *)a1, **(void **)a1);
      sub_1000DDF90((__int128 *)a1, (uint64_t)v6);
    }

    char v8 = *(uint64_t **)(**(void **)a1 + 8LL);
    sub_1000DC9A4(a1, v9, 0, &v8, 0);
  }

  sub_10000F788(&v10);
  return sub_10000F8D8(v9);
}

void sub_100122B18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, ...)
{
}

uint64_t sub_100122B54(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 288);
  if (v2)
  {
    sub_10000F810(v4, v2);
    sub_10000FB70(*(uint64_t **)(a1 + 288), v4);
    sub_10000FE20(&v5);
    sub_10000F8D8(v4);
  }

  sub_10008BB48(a1 + 8);
  if (*(_BYTE *)a1) {
    *(_BYTE *)a1 = 0;
  }
  return a1;
}

void sub_100122BEC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006EEC(a1);
}

void *sub_100122BF8(uint64_t **a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  BOOL v6 = sub_1000774AC((uint64_t)a1, &v11, a2);
  int v7 = (void *)*v6;
  if (!*v6)
  {
    char v8 = (void **)v6;
    sub_100122CA0((uint64_t)a1, a4, (uint64_t)v10);
    sub_10000AF70(a1, v11, v8, (void *)v10[0]);
    int v7 = v10[0];
    v10[0] = 0LL;
    sub_10000D0A8(v10, 0LL);
  }

  return v7;
}

double sub_100122CA0@<D0>(uint64_t a1@<X0>, _OWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  BOOL v6 = (char *)operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(_OWORD *)(v6 + 28) = **a2;
  *(void *)&double result = 64LL;
  *(void *)(v6 + 44) = 64LL;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_10012307C(uint64_t a1, uint64_t a2)
{
  do
  {
LABEL_1:
    if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
      || *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
    {
      break;
    }

    char v4 = 0;
    unsigned int v5 = 0;
    uint64_t v6 = 0LL;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1)
      {
LABEL_47:
        __break(0x5500u);
        return;
      }

      if (v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v11 = 0LL;
        uint64_t v12 = OBJC_IVAR___PBDataReader__error;
        goto LABEL_14;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    uint64_t v12 = OBJC_IVAR___PBDataReader__error;
    unint64_t v11 = *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) ? 0LL : v6;
LABEL_14:
    if (*(_BYTE *)(a2 + v12) || (v11 & 7) == 4) {
      break;
    }
    unint64_t v14 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      char v21 = 0;
      unsigned int v22 = 0;
      uint64_t v23 = 0LL;
      *(_BYTE *)(a1 + 24) |= 2u;
      while (1)
      {
        uint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v25 = v24 + 1;
        if (v24 == -1) {
          goto LABEL_47;
        }
        if (v25 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v26 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25;
        v23 |= (unint64_t)(v26 & 0x7F) << v21;
        if ((v26 & 0x80) == 0) {
          goto LABEL_43;
        }
        v21 += 7;
        BOOL v10 = v22++ >= 9;
        if (v10)
        {
          uint64_t v23 = 0LL;
          goto LABEL_45;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_43:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v23 = 0LL;
      }
LABEL_45:
      *(_BYTE *)(a1 + 20) = v23 != 0;
      goto LABEL_1;
    }

    if ((_DWORD)v14 == 2)
    {
      uint64_t String = PBReaderReadString(a2);
      uint64_t v28 = objc_claimAutoreleasedReturnValue(String);
      unsigned int v29 = *(void **)(a1 + 8);
      *(void *)(a1 + 8) = v28;

      goto LABEL_1;
    }

    if ((_DWORD)v14 == 1)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      uint64_t v17 = 0LL;
      *(_BYTE *)(a1 + 24) |= 1u;
      while (1)
      {
        uint64_t v18 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v19 = v18 + 1;
        if (v18 == -1) {
          goto LABEL_47;
        }
        if (v19 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v20 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19;
        v17 |= (unint64_t)(v20 & 0x7F) << v15;
        if ((v20 & 0x80) == 0) {
          goto LABEL_39;
        }
        v15 += 7;
        BOOL v10 = v16++ >= 9;
        if (v10)
        {
          LODWORD(v17) = 0;
          goto LABEL_41;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_39:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v17) = 0;
      }
LABEL_41:
      *(_DWORD *)(a1 + 16) = v17;
      goto LABEL_1;
    }
  }

  while ((PBReaderSkipValueWithTag(a2) & 1) != 0);
}

void sub_100123A14(uint64_t a1, uint64_t a2)
{
LABEL_1:
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
    || *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
  {
    return;
  }

  char v4 = 0;
  unsigned int v5 = 0;
  unint64_t v6 = 0LL;
  while (1)
  {
    uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
    unint64_t v8 = v7 + 1;
    if (v7 == -1) {
      break;
    }
    if (v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
    {
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      uint64_t v12 = OBJC_IVAR___PBDataReader__error;
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v11 = 0LL;
      }
      else {
        unint64_t v11 = v6;
      }
LABEL_14:
      if (*(_BYTE *)(a2 + v12)) {
        BOOL v13 = 1;
      }
      else {
        BOOL v13 = (v11 & 7) == 4;
      }
      if (v13) {
        return;
      }
      switch((v11 >> 3))
      {
        case 1u:
          char v14 = 0;
          unsigned int v15 = 0;
          uint64_t v16 = 0LL;
          *(_BYTE *)(a1 + 40) |= 1u;
          while (1)
          {
            uint64_t v17 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v18 = v17 + 1;
            if (v17 == -1) {
              goto LABEL_43;
            }
            if (v18 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v19 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18;
            v16 |= (unint64_t)(v19 & 0x7F) << v14;
            if ((v19 & 0x80) == 0) {
              goto LABEL_38;
            }
            v14 += 7;
            BOOL v10 = v15++ >= 9;
            if (v10)
            {
              uint64_t v16 = 0LL;
              goto LABEL_40;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v16 = 0LL;
          }
LABEL_40:
          *(void *)(a1 + 8) = v16;
          goto LABEL_1;
        case 2u:
          char v20 = objc_alloc_init(&OBJC_CLASS___AWDHeaderInfoS);
          objc_storeStrong((id *)(a1 + 16), v20);
          sub_10012DC90((uint64_t)v20, a2);
          if ((v21 & 1) == 0) {
            goto LABEL_42;
          }
          goto LABEL_36;
        case 3u:
          char v20 = objc_alloc_init(&OBJC_CLASS___AWDCountersMacTxS);
          objc_storeStrong((id *)(a1 + 32), v20);
          goto LABEL_36;
        case 4u:
          char v20 = objc_alloc_init(&OBJC_CLASS___AWDCountersMacRxS);
          objc_storeStrong((id *)(a1 + 24), v20);
          if (!PBReaderPlaceMark(a2, v22) || (sub_100106838((uint64_t)v20, a2) & 1) == 0)
          {
LABEL_42:

            return;
          }

uint64_t sub_1001242C8()
{
  if (qword_1002D14A8) {
    return 0LL;
  }
  v0 = getenv("SEC_RANDOM_SOURCE_FILE");
  if (!v0) {
    v0 = "/dev/urandom";
  }
  qword_1002D14A8 = (uint64_t)fopen(v0, "r");
  if (qword_1002D14A8) {
    return 0LL;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

size_t sub_100124328(void *a1, int a2)
{
  if ((sub_1001242C8() & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  else {
    return fread(a1, a2, 1uLL, (FILE *)qword_1002D14A8);
  }
}

uint64_t sub_100124378()
{
  return 0LL;
}

uint64_t sub_100124380()
{
  return 0LL;
}

uint64_t sub_100124388()
{
  *__error() = 45;
  return 4294967251LL;
}

uint64_t sub_1001243A8()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_1001243B0()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_1001243B8()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_1001243C4()
{
  *__error() = 45;
  return -45LL;
}

uint64_t sub_1001243E8()
{
  *__error() = 45;
  return 4294967251LL;
}

uint64_t sub_100124408()
{
  return 0LL;
}

uint64_t sub_100124410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  if (a6)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88LL))(a1);
    uint64_t v8 = *a6;
    if (v7 < *a6) {
      uint64_t v8 = v7;
    }
    *a6 = v8;
  }

  return 0LL;
}

uint64_t sub_100124450(uint64_t a1, std::string *a2)
{
  uint64_t v2 = a2;
  p_size = (char *)&a2->__r_.__value_.__s.__size_;
  if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
    unsigned int v5 = (const char *)a2;
  }
  else {
    unsigned int v5 = (const char *)a2->__r_.__value_.__r.__words[0];
  }
  int v6 = sub_100125660(v5);
  sub_10011DB74(a1, v6, 0);
  *(void *)a1 = off_1002B3DA0;
  std::string::basic_string((std::string *)(a1 + 24), v2);
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) != 0)
  {
    char v9 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v9)
    {
      if (sub_10015A058(3) && os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        if ((v2->__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
        }
        int v10 = *__error();
        unint64_t v11 = __error();
        uint64_t v12 = strerror(*v11);
        int v15 = 136315650;
        uint64_t v16 = v2;
        __int16 v17 = 1024;
        int v18 = v10;
        __int16 v19 = 2080;
        char v20 = v12;
        _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "Unable to open socket with path <%s>, errno=%d (%s)",  (uint8_t *)&v15,  0x1Cu);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to open socket");
LABEL_19:
    exception->__vftable = (std::runtime_error_vtbl *)&off_1002B3E68;
  }

  if ((v2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v7 = (const char *)v2;
  }
  else {
    uint64_t v7 = (const char *)v2->__r_.__value_.__r.__words[0];
  }
  if (sub_100125494(v7) == 6 && flock(*(_DWORD *)(a1 + 12), 6) < 0 && *__error() == 35)
  {
    char v14 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v14)
    {
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    sub_100124B8C(*(_DWORD *)(a1 + 12));
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Socket is locked by another process");
    goto LABEL_19;
  }

  return a1;
}

void sub_1001246CC(_Unwind_Exception *a1)
{
}

std::runtime_error *sub_100124720(std::runtime_error *a1, const char *a2)
{
  double result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)&off_1002B3E68;
  return result;
}

uint64_t sub_100124748(uint64_t a1)
{
  *(void *)a1 = off_1002B3DA0;
  sub_10012478C(a1);
  return sub_10011DB94(a1);
}

uint64_t sub_10012478C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 12);
  if ((v2 & 0x80000000) == 0)
  {
    flock(v2, 8);
    sub_100124B8C(*(_DWORD *)(a1 + 12));
  }

  *(void *)(a1 + 12) = -1LL;
  return 0LL;
}

void sub_1001247D0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100124748(a1);
  operator delete(v1);
}

uint64_t *sub_1001247E4@<X0>(std::string *a1@<X0>, uint64_t *a2@<X8>)
{
  char v4 = operator new(0x30uLL);
  sub_100124450((uint64_t)v4, a1);
  return sub_100124A6C(a2, (uint64_t)v4);
}

void sub_100124828(_Unwind_Exception *a1)
{
}

uint64_t sub_10012483C(uint64_t a1)
{
  int v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v2)
  {
    uint64_t v3 = v2;
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  sub_10012478C(a1);
  usleep(0x30D40u);
  char v4 = (char *)(a1 + 47);
  unsigned int v5 = (char *)(a1 + 24);
  int v6 = (const char *)(a1 + 24);
  int v7 = sub_100125660(v6);
  *(_DWORD *)(a1 + 12) = v7;
  *(_DWORD *)(a1 + 16) = v7;
  if (v7 < 0)
  {
    char v9 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v9)
    {
      int v10 = v9;
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100124720(exception, "Unable to reopen socket");
LABEL_23:
  }

  if (*v4 < 0) {
    unsigned int v5 = *(char **)v5;
  }
  uint64_t result = sub_100125494(v5);
  if ((_DWORD)result == 6)
  {
    uint64_t result = flock(*(_DWORD *)(a1 + 12), 6);
    if ((result & 0x80000000) != 0)
    {
      uint64_t result = (uint64_t)__error();
      if (*(_DWORD *)result == 35)
      {
        uint64_t v12 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v12)
        {
          BOOL v13 = v12;
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FB53C();
        }

        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        sub_100124720(exception, "Socket is locked by another process");
        goto LABEL_23;
      }
    }
  }

  return result;
}

void sub_100124A40(_Unwind_Exception *a1)
{
}

void sub_100124A58(std::runtime_error *a1)
{
}

uint64_t *sub_100124A6C(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0LL;
  sub_100124AD4(&v5, a2);
  uint64_t v3 = a1[1];
  a1[1] = v5;
  uint64_t v5 = v3;
  sub_10000F9EC(&v5);
  return a1;
}

void sub_100124AC0(_Unwind_Exception *a1)
{
}

void *sub_100124AD4(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  char v4 = operator new(0x18uLL);
  v4[1] = 0x100000001LL;
  *char v4 = &off_1002B3E90;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_100124B20(void *a1)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  __cxa_rethrow();
}

void sub_100124B40(_Unwind_Exception *a1)
{
}

uint64_t sub_100124B5C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t sub_100124B74()
{
  return 0LL;
}

uint64_t sub_100124B7C()
{
  return 0LL;
}

uint64_t sub_100124B84()
{
  return 0LL;
}

uint64_t sub_100124B8C(int a1)
{
  uint64_t v1 = 0LL;
  while (1)
  {
    if (dword_1002D14B0[v1] == a1)
    {
      int v2 = &dword_1002D14B0[v1];
      if (dword_1002D14B0[v1 + 1]) {
        break;
      }
    }

    v1 += 2LL;
    if (v1 == 10) {
      return close(a1);
    }
  }

  uint64_t v4 = close(a1);
  int v6 = v2 + 1;
  pid_t v5 = v2[1];
  int v12 = 0;
  kill(v5, 1);
  int v7 = 100;
  while (waitpid(*v6, &v12, 1) <= 0)
  {
    usleep(0x186A0u);
    if (!--v7)
    {
      uint64_t v8 = signal(14, (void (__cdecl *)(int))sub_100124D58);
      unsigned int v9 = alarm(5u);
      int v10 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v10)
      {
        unint64_t v11 = v10;
        if (sub_10015A058(4))
        {
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
            sub_100210F80(v2 + 1, v11);
          }
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }

      kill(*v6, 15);
      while (1)
      {
        *__error() = 0;
        if (waitpid(*v6, &v12, 0) != -1) {
          break;
        }
        if (*__error() != 4)
        {
          alarm(v9);
          signal(14, v8);
          sub_100210F64();
          goto LABEL_20;
        }
      }

      alarm(v9);
      signal(14, v8);
      break;
    }
  }

void sub_100124D58()
{
}

uint64_t sub_100124D7C(int a1, __int16 a2)
{
  if (a1 < 0) {
    return 0xFFFFFFFFLL;
  }
  v3.fd = a1;
  v3.events = a2;
  v3.revents = 0;
  poll(&v3, 1u, 0);
  return v3.revents;
}

uint64_t sub_100124DC0(int a1)
{
  v4.fd = a1;
  *(_DWORD *)&v4.events = 186;
  int v1 = poll(&v4, 1u, 0);
  if (v1 < 0)
  {
    int v2 = *__error();
    uint64_t result = -v2;
    if (!__OFSUB__(0, v2)) {
      return result;
    }
    __break(0x550Du);
  }

  else
  {
    if (!v1) {
      return 0LL;
    }
    LOBYTE(v2) = v4.revents;
    if ((v4.revents & 0x92) != 0) {
      return 4294967264LL;
    }
  }

  if ((v2 & 0x20) != 0) {
    return 4294967274LL;
  }
  if ((v2 & 8) == 0) {
    return 0LL;
  }
  return 4294967291LL;
}

BOOL sub_100124E40(const char *a1)
{
  return !sub_100124E78(a1) && !sub_100124EE4(a1);
}

BOOL sub_100124E78(const char *a1)
{
  return !strncmp(a1, "system:", 7uLL)
      || !strncmp(a1, "system-forkpty:", 0xFuLL)
      || strncmp(a1, "system-socketpair:", 0x12uLL) == 0;
}

BOOL sub_100124EE4(const char *a1)
{
  int v1 = *(unsigned __int8 *)a1;
  if (*a1)
  {
    if (v1 == 91) {
      return 1LL;
    }
    while (v1 != 47)
    {
      int v3 = *(unsigned __int8 *)++a1;
      int v1 = v3;
      if (!v3)
      {
        pollfd v4 = a1;
        do
        {
          int v6 = *v4++;
          char v5 = v6;
        }

        while ((v6 - 58) > 0xFFFFFFF5);
        if (v5) {
          return !sub_100124E78(a1);
        }
        return 0LL;
      }
    }
  }

  return 0LL;
}

uint64_t sub_100124F4C(void *a1, const char *a2, const char *a3)
{
  *(void *)&v22.ai_flags = 0x1E00000D00LL;
  char v21 = 0LL;
  if (a3) {
    pollfd v4 = a3;
  }
  else {
    pollfd v4 = "4951";
  }
  if (a2) {
    char v5 = a2;
  }
  else {
    char v5 = "::1";
  }
  int v6 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v6)
  {
    int v7 = v6;
    if (sub_10015A058(6) && os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v24 = v5;
      __int16 v25 = 2080;
      char v26 = v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Looking up [%s]:%s", buf, 0x16u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  if ((*v4 - 48) <= 9)
  {
    if (!strcmp(v5, "::1"))
    {
      a1[1] = 0LL;
      a1[2] = 0LL;
      *a1 = 0LL;
      *((_DWORD *)a1 + 6) = 0;
      *((_BYTE *)a1 + 1) = 30;
      *((_BYTE *)a1 + 23) = 1;
      goto LABEL_30;
    }

    if (inet_addr(v5))
    {
      in_addr_t v8 = inet_addr(v5);
      a1[1] = 0LL;
      a1[2] = 0LL;
      *a1 = 0LL;
      *((_DWORD *)a1 + 6) = 0;
      *((_BYTE *)a1 + 1) = 30;
      *((_WORD *)a1 + 9) = -1;
      *((_WORD *)a1 + 1) = bswap32(atoi(v4)) >> 16;
      *((_DWORD *)a1 + 5) = v8;
LABEL_30:
      unsigned int v18 = atoi(v4);
      uint64_t v19 = 0LL;
      *((_WORD *)a1 + 1) = bswap32(v18) >> 16;
      goto LABEL_37;
    }
  }

  int v9 = getaddrinfo(v5, v4, &v22, &v21);
  if (v9)
  {
    int v10 = v9;
    unint64_t v11 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v11)
    {
      int v12 = v11;
      goto LABEL_36;
    }

    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_35;
    }
    goto LABEL_36;
  }

  BOOL v13 = v21;
  if (!v21)
  {
LABEL_25:
    char v14 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v14)
    {
      int v15 = v14;
      goto LABEL_36;
    }

    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
LABEL_35:
    }
      sub_1001FB53C();
LABEL_36:
    uint64_t v19 = 0xFFFFFFFFLL;
    goto LABEL_37;
  }

  while (v13->ai_family != 30)
  {
    BOOL v13 = v13->ai_next;
    if (!v13) {
      goto LABEL_25;
    }
  }

  memcpy(a1, v13->ai_addr, v13->ai_addrlen);
  uint64_t v19 = 0LL;
LABEL_37:
  if (v21) {
    freeaddrinfo(v21);
  }
  return v19;
}

uint64_t sub_100125250(int *a1)
{
  *(void *)uint64_t v17 = -1LL;
  if (socketpair(1, 1, 0, v17) < 0)
  {
    char v5 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v5)
    {
      int v6 = v5;
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    uint64_t v3 = 0xFFFFFFFFLL;
  }

  else
  {
    uint64_t v2 = fork();
    uint64_t v3 = v2;
    if ((v2 & 0x80000000) != 0)
    {
      int v7 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v7)
      {
        in_addr_t v8 = v7;
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }
    }

    else
    {
      if ((_DWORD)v2)
      {
        close(v17[1]);
        int v4 = v17[0];
      }

      else
      {
        int v9 = getdtablesize();
        close(v17[0]);
        dup2(v17[1], 0);
        dup2(v17[1], 1);
        int v10 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v10)
        {
          unint64_t v11 = v10;
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FB53C();
        }

        if (v9 >= 4)
        {
          for (int i = 3; i != v9; ++i)
            close(i);
        }

        int v4 = 0;
      }

      *a1 = v4;
      *(void *)uint64_t v17 = -1LL;
    }
  }

  int v15 = *__error();
  if ((v17[0] & 0x80000000) == 0) {
    close(v17[0]);
  }
  if ((v17[1] & 0x80000000) == 0) {
    close(v17[1]);
  }
  *__error() = v15;
  return v3;
}

uint64_t sub_100125494(const char *a1)
{
  if (!strncasecmp(a1, "system:", 7uLL)) {
    return 1LL;
  }
  if (!strncasecmp(a1, "system-forkpty:", 0xFuLL)) {
    return 2LL;
  }
  if (!strncasecmp(a1, "system-socketpair:", 0x12uLL)) {
    return 3LL;
  }
  if (!strncasecmp(a1, "fd:", 3uLL)) {
    return 4LL;
  }
  if (!strncasecmp(a1, "file:", 5uLL) || !strncasecmp(a1, "serial:", 7uLL)) {
    return 6LL;
  }
  if (sub_1001255BC(a1, "tcp:")) {
    return 5LL;
  }
  if (sub_100124EE4(a1)) {
    return 5LL;
  }
  uint64_t v2 = a1;
  do
  {
    int v4 = *v2++;
    char v3 = v4;
  }

  while ((v4 - 58) > 0xFFFFFFF5);
  if (!v3) {
    return 5LL;
  }
  if (sub_100124E40(a1)) {
    return 6LL;
  }
  return 0LL;
}

BOOL sub_1001255BC(const char *a1, char *__s)
{
  size_t v4 = strlen(__s);
  return strncasecmp(a1, __s, v4) == 0;
}

uint64_t sub_1001255FC(uint64_t result)
{
  if ((int)result > 57599)
  {
    if ((_DWORD)result != 57600 && (_DWORD)result != 115200)
    {
      int v1 = 230400;
LABEL_8:
      if ((_DWORD)result != v1) {
        return 0LL;
      }
    }
  }

  else if ((_DWORD)result != 9600 && (_DWORD)result != 19200)
  {
    int v1 = 38400;
    goto LABEL_8;
  }

  return result;
}

size_t sub_100125660(const char *a1)
{
  uint64_t v2 = strchr(a1, 44);
  char v3 = strchr(a1, 58);
  int v4 = sub_100125494(a1);
  int v5 = v4;
  int v6 = "";
  if (v3 && *a1 != 91) {
    int v6 = v3 + 1;
  }
  BOOL v7 = v4 != 6;
  if (v4 == 6)
  {
    if (strncasecmp(a1, "serial:", 7uLL))
    {
      int v11 = strncasecmp(a1, "file:", 5uLL);
      BOOL v10 = v11 == 0;
      int v9 = ",default";
      if (!v11)
      {
LABEL_7:
        if (!v10) {
          goto LABEL_15;
        }
        goto LABEL_14;
      }

      goto LABEL_11;
    }
  }

  else if (v4 == 5)
  {
    int v8 = strncasecmp(a1, "tcp:", 4uLL);
    int v9 = 0LL;
    BOOL v10 = v8 == 0;
    if (!v8) {
      goto LABEL_7;
    }
LABEL_11:
    int v6 = a1;
    if (!v10) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }

  BOOL v7 = 0;
  BOOL v10 = 1;
LABEL_14:
  int v9 = v2;
LABEL_15:
  uint64_t v12 = strdup(v6);
  if (!v12)
  {
    sub_1002111A0();
LABEL_301:
    c_iflag = (char *)v165.c_iflag;
    uint64_t v17 = *(unsigned int *)buf;
    goto LABEL_317;
  }

  if (v9) {
    BOOL v13 = v10;
  }
  else {
    BOOL v13 = 0;
  }
  if (v13)
  {
    char v14 = strchr(a1, 58);
    if (v14) {
      int v15 = v14 + 1;
    }
    else {
      int v15 = a1;
    }
    v12[v9 - v15] = 0;
  }

  switch(v5)
  {
    case 1:
      uint64_t v16 = sub_1001278B4((uint64_t)v12);
      if ((v16 & 0x80000000) != 0) {
        goto LABEL_27;
      }
      uint64_t v17 = v16;
      goto LABEL_53;
    case 2:
      uint64_t v18 = sub_1001278B4((uint64_t)v12);
      goto LABEL_52;
    case 3:
LABEL_27:
      uint64_t v18 = sub_10012802C((uint64_t)v12);
      goto LABEL_52;
    case 4:
      *__error() = 0;
      int v28 = strtol(v12, 0LL, 0);
      if (!v28 && *__error())
      {
        sub_1002115BC();
        goto LABEL_301;
      }

      uint64_t v18 = dup(v28);
LABEL_52:
      uint64_t v17 = v18;
      if ((v18 & 0x80000000) == 0)
      {
LABEL_53:
        char v152 = 0LL;
        char v153 = v12;
        goto LABEL_54;
      }

      goto LABEL_310;
    default:
      if (v5 == 6)
      {
        uint64_t v140 = open(v12, 131078);
        uint64_t v17 = v140;
        if ((v140 & 0x80000000) == 0)
        {
          char v153 = v12;
          fcntl(v140, 4, 4LL);
          tcflush(v17, 3);
          char v152 = 0LL;
LABEL_54:
          int v29 = fcntl(v17, 3);
          fcntl(v17, 4, v29 | 4u);
          int v162 = 0;
          setsockopt(v17, 0xFFFF, 4130, &v162, 4u);
          if (!v9)
          {
LABEL_297:
            c_iflag = v152;
            uint64_t v12 = v153;
            goto LABEL_317;
          }

          uint64x2_t v155 = (uint64x2_t)vdupq_n_s64(0x14uLL);
          int64x2_t v154 = vdupq_n_s64(4uLL);
          while (1)
          {
            if (!strncasecmp(v9, ",b", 2uLL) && (v9[2] - 48) <= 9)
            {
              uint64_t v30 = strtol(v9 + 2, 0LL, 10);
              int v31 = v30;
              unsigned int v32 = sub_1001255FC(v30);
              unsigned int v33 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
              uint64_t v34 = v33;
              if (v32)
              {
                if (v33)
                {
                  if (sub_10015A058(7) && os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 67109120;
                    *(_DWORD *)char v164 = v31;
                    _os_log_debug_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEBUG,  "Setting baud rate to %d",  buf,  8u);
                  }

                  goto LABEL_161;
                }

                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
LABEL_272:
                  *(_DWORD *)buf = 136315394;
                  *(void *)char v164 = "com.apple.wpantund.ncp";
                  *(_WORD *)&v164[8] = 2080;
                  *(void *)&v164[10] = "default";
                  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging Module is not defined for SubSystem: %s, Category: %s",  buf,  0x16u);
                }
              }

              else
              {
                if (v33)
                {
                  if (sub_10015A058(6) && os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)buf = 67109120;
                    *(_DWORD *)char v164 = v31;
                    _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_INFO,  "Unknown baud rate %d - using default",  buf,  8u);
                  }

                  goto LABEL_161;
                }

                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_272;
                }
              }

LABEL_310:
        uint64_t v143 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v143)
        {
          uint64_t v144 = v143;
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FB53C();
        }

        c_iflag = 0LL;
        goto LABEL_317;
      }

      if (!v7)
      {
        char v141 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v141)
        {
          unsigned int v142 = v141;
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FB53C();
        }

        uint64_t v17 = 0xFFFFFFFFLL;
        goto LABEL_310;
      }

      uint64_t v19 = a1;
      do
      {
        int v21 = *v19++;
        char v20 = v21;
      }

      while ((v21 - 58) > 0xFFFFFFF5);
      if (!v20)
      {
        c_iflag = 0LL;
        __int16 v25 = a1;
        goto LABEL_319;
      }

      if (*v12 == 91) {
        addrinfo v22 = v12 + 1;
      }
      else {
        addrinfo v22 = v12;
      }
      c_iflag = strdup(v22);
      size_t result = strlen(c_iflag);
      if (!result)
      {
        __break(0x5515u);
        return result;
      }

      __int16 v25 = 0LL;
      if (((result - 1) & 0x8000000000000000LL) != 0) {
        goto LABEL_319;
      }
      while (1)
      {
        int v26 = c_iflag[result - 1];
        if (v26 != 58 || v25 != 0LL) {
          break;
        }
        c_iflag[result - 1] = 0;
        __int16 v25 = &c_iflag[result];
LABEL_46:
      }

      if (v26 != 93)
      {
        goto LABEL_46;
      }

      c_iflag[result - 1] = 0;
LABEL_319:
      if (sub_100124F4C(&v165, c_iflag, v25))
      {
        unint64_t v145 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v145)
        {
          char v146 = v145;
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FB53C();
        }

        goto LABEL_341;
      }

      uint64_t v147 = socket(30, 1, 0);
      uint64_t v17 = v147;
      if ((v147 & 0x80000000) != 0)
      {
        uint64_t v150 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v150)
        {
          unint64_t v151 = v150;
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FB53C();
        }

        goto LABEL_317;
      }

      if (!connect(v147, (const sockaddr *)&v165, 0x1Cu))
      {
        char v152 = c_iflag;
        char v153 = v12;
        goto LABEL_54;
      }

      unsigned int v148 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v148)
      {
        uint64_t v149 = v148;
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }

      close(v17);
LABEL_341:
      uint64_t v17 = 0xFFFFFFFFLL;
LABEL_317:
      free(v12);
      free(c_iflag);
      return v17;
  }

uint64_t sub_1001278B4(uint64_t a1)
{
  int v46 = -1;
  *(_OWORD *)&v49.c_iflag = 0u;
  memset(&v49.c_lflag, 0, 48);
  v49.c_cflag = 51968LL;
  cfmakeraw(&v49);
  int v2 = dup(2);
  if (v2 < 0)
  {
    int v8 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v8)
    {
      int v9 = v8;
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    goto LABEL_80;
  }

  pid_t v3 = forkpty(&v46, 0LL, &v49, 0LL);
  if (v3 < 0)
  {
    BOOL v10 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v10)
    {
      int v11 = v10;
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    if (access("/dev/ptmx", 0) < 0)
    {
      uint64_t v18 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v18)
      {
        __int16 v25 = v18;
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }

      perror("access(/dev/ptmx,F_OK)");
    }

    if (access("/dev/ptmx", 6) < 0)
    {
      uint64_t v19 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v19)
      {
        int v26 = v19;
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }

      perror("access(/dev/ptmx,R_OK|W_OK)");
    }

    int v12 = posix_openpt(131074);
    int v13 = v12;
    if (v12 < 0)
    {
      char v20 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v20)
      {
        int v27 = v20;
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }

      int v15 = -1;
      int v28 = "posix_openpt(O_NOCTTY | O_RDWR)";
    }

    else
    {
      if (grantpt(v12) < 0)
      {
        int v21 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v21)
        {
          int v29 = v21;
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FB53C();
        }

        perror("grantpt");
      }

      if (unlockpt(v13) < 0)
      {
        addrinfo v22 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v22)
        {
          uint64_t v30 = v22;
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FB53C();
        }

        perror("unlockpt");
      }

      if (ptsname(v13))
      {
        char v14 = ptsname(v13);
        int v15 = open(v14, 131074);
        if ((v15 & 0x80000000) == 0)
        {
          close(v13);
          close(v15);
          uint64_t v16 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
          if (v16)
          {
            uint64_t v17 = v16;
          }

          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            sub_1001FB53C();
          }

          goto LABEL_80;
        }

        uint64_t v24 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v24)
        {
          unsigned int v32 = v24;
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FB53C();
        }

        int v28 = "open(ptsname(pty_master_fd),O_RDWR|O_NOCTTY)";
      }

      else
      {
        uint64_t v23 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v23)
        {
          int v31 = v23;
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FB53C();
        }

        int v15 = -1;
        int v28 = "ptsname";
      }
    }

    perror(v28);
    close(v13);
    close(v15);
LABEL_80:
    int v33 = *__error();
    close(v46);
    close(v2);
    *__error() = v33;
    return 0xFFFFFFFFLL;
  }

  int v4 = v3;
  if (!v3)
  {
    int v34 = getdtablesize();
    dup2(v2, 2);
    uint64_t v35 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v35)
    {
      unint64_t v36 = v35;
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    dup2(v2, 2);
    setenv("SHELL", "/bin/sh", 0);
    if (v34 >= 4)
    {
      for (int i = 3; i != v34; ++i)
        close(i);
    }

    unsigned int v40 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v40)
    {
      char v45 = v40;
      if (sub_10015A058(5) && os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315138;
        uint64_t v48 = a1;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, "About to exec %s", buf, 0xCu);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    uint64_t v41 = getenv("SHELL");
    execl(v41, v41, "-c", a1, 0LL);
    uint64_t v42 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v42)
    {
      unint64_t v43 = v42;
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    int v44 = __error();
    _exit(*v44);
  }

  close(v2);
  int v5 = ptsname(v46);
  int v6 = open(v5, 131074);
  close(v6);
  sub_100128258(v46, v4);
  return v46;
}

uint64_t sub_10012802C(uint64_t a1)
{
  int v12 = -1;
  int v2 = sub_100125250(&v12);
  if (v2 < 0)
  {
    int v4 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v4)
    {
      int v5 = v4;
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    if ((v12 & 0x80000000) == 0)
    {
      int v6 = *__error();
      close(v12);
      *__error() = v6;
    }

    return 0xFFFFFFFFLL;
  }

  else
  {
    if (!v2)
    {
      setenv("SHELL", "/bin/sh", 0);
      BOOL v7 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v7)
      {
        int v11 = v7;
        if (sub_10015A058(5) && os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315138;
          uint64_t v14 = a1;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "About to exec %s", buf, 0xCu);
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }

      int v8 = getenv("SHELL");
      execl(v8, v8, "-c", a1, 0LL);
      int v9 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v9)
      {
        BOOL v10 = v9;
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }

      _exit(1);
    }

    sub_100128258(v12, v2);
    return v12;
  }

uint64_t sub_100128258(uint64_t result, int a2)
{
  int v3 = result;
  if ((byte_1002D14D8 & 1) == 0)
  {
    size_t result = atexit((void (*)(void))sub_1001282CC);
    byte_1002D14D8 = 1;
  }

  uint64_t v4 = 0LL;
  while (1)
  {
    int v5 = &dword_1002D14B0[v4];
    if (!dword_1002D14B0[v4 + 1]) {
      break;
    }
    v4 += 2LL;
    if (v4 == 10) {
      return result;
    }
  }

  *int v5 = v3;
  v5[1] = a2;
  return result;
}

uint64_t sub_1001282CC()
{
  uint64_t v0 = &dword_100000004;
  do
  {
    uint64_t result = *(unsigned int *)((char *)&dword_1002D14B0 + v0);
    if ((_DWORD)result) {
      uint64_t result = kill(result, 15);
    }
    v0 += 8LL;
  }

  while (v0 != 44);
  return result;
}

  ;
}

  ;
}

  ;
}

void sub_100128350( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_100128364(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

_BYTE *sub_100128370(_BYTE *result, _BYTE *a2)
{
  *uint64_t result = 0;
  *a2 = 0;
  return result;
}

  ;
}

BOOL sub_100128390(os_log_s *a1)
{
  return os_log_type_enabled(a1, OS_LOG_TYPE_ERROR);
}

int *sub_100128398()
{
  return __error();
}

void sub_1001283A0()
{
  *int v1 = -1;
  void *v0 = 0LL;
}

int *sub_1001283B4()
{
  return __error();
}

  ;
}

uint64_t sub_1001283D0()
{
  return sub_10015A058(3);
}

int *sub_1001283DC()
{
  return __error();
}

  ;
}

void sub_1001285D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10012872C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100128754()
{
  uint64_t v0 = sub_1000160F4("com.apple.wpantund", "default");
  int v1 = (os_log_s *)objc_claimAutoreleasedReturnValue(v0);
  if (v1)
  {
    if (sub_10015A058(6) && os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "[PWR_EVT]setNcpForHostDeepSleep", buf, 2u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FF028();
  }

  int v2 = operator new(0x10uLL);
  *(void *)int v2 = &off_1002AE118;
  v2[8] = 1;
  int v8 = v2;
  uint64_t v3 = qword_1002C9850;
  sub_10000AC00(buf, "NCP:HostPowerState");
  v5[1] = sub_100129CDC;
  v5[2] = "NCP:HostPowerState";
  v5[0] = (char *)off_1002B3F00 + 1;
  (*(void (**)(uint64_t, uint8_t *, void **, void *))(*(void *)v3 + 64LL))(v3, buf, &v8, v5);
  sub_1000075F0(v5);
  if (v7 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t result = (uint64_t)v8;
  if (v8) {
    return (*(uint64_t (**)(void *))(*(void *)v8 + 8LL))(v8);
  }
  return result;
}

void sub_10012889C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_1001289F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100128A20()
{
  uint64_t v0 = sub_1000160F4("com.apple.wpantund", "default");
  int v1 = (os_log_s *)objc_claimAutoreleasedReturnValue(v0);
  if (v1)
  {
    if (sub_10015A058(6) && os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "[PWR_EVT]setNcpForHostPowerOn", buf, 2u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FF028();
  }

  uint64_t v2 = qword_1002C9850;
  sub_10000AC00(buf, "vendor:last:host:wake:reason");
  v3[0] = (char *)off_1002B3F20 + 1;
  v3[1] = sub_100129E04;
  (*(void (**)(uint64_t, uint8_t *, void *))(*(void *)v2 + 56LL))(v2, buf, v3);
  sub_100006E7C(v3);
  if (v5 < 0) {
    operator delete(*(void **)buf);
  }
}

void sub_100128B28( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_100128C50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100128C78()
{
  size_t v5 = 256LL;
  int v0 = sysctlbyname("kern.wakereason", __big, &v5, 0LL, 0LL);
  int v1 = sub_1000160F4("com.apple.wpantund", "default");
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (v2)
  {
    if (sub_10015A058(6) && os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      char v7 = __big;
      __int16 v8 = 1024;
      int v9 = v0;
      __int16 v10 = 2048;
      size_t v11 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "[PWR_EVT] WakeReason: %s, err = %d, size = %zu ",  buf,  0x1Cu);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FF028();
  }

  if (!v0 && (strstr(__big, "fillmore") || strstr(__big, "smc26")))
  {
    uint64_t v3 = sub_1000160F4("com.apple.wpantund", "default");
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (v4)
    {
      if (sub_10015A058(6))
      {
        if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Host woke up due to NCP Activity", buf, 2u);
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FF028();
    }
  }

void sub_100128E54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100128F8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100128FA4(uint64_t a1)
{
  uint64_t v2 = sub_1000160F4("com.apple.wpantund", "default");
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (v3)
  {
    if (sub_10015A058(6) && os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "PowerEventHandler: Setting NCP control Interface for PowerEventHandler",  v4,  2u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FF028();
  }

  qword_1002C9850 = a1;
}

void sub_100129058(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100129068(int a1)
{
  uint64_t v2 = sub_1000160F4("com.apple.wpantund", "default");
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (v3)
  {
    if (sub_10015A058(6) && os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4[0] = 67109120;
      v4[1] = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "PowerEventHandler: Restoring Deep Sleep log level [%u]",  (uint8_t *)v4,  8u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FF028();
  }

  byte_1002C9358 = a1;
}

void sub_100129150(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100129168(void *a1)
{
  id v1 = a1;
  uint64_t v2 = sub_1000160F4("com.apple.wpantund", "default");
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (v3)
  {
    if (sub_10015A058(6) && os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "startPowerEventHandler", buf, 2u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FF028();
  }

  sub_100129354();
  sub_100129630();
  if (!qword_1002C9850)
  {
    uint64_t v4 = sub_1000160F4("com.apple.wpantund", "default");
    size_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (v5)
    {
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FF028();
    }
  }

  id v6 = -[PowerEventHandler init:](objc_alloc(&OBJC_CLASS___PowerEventHandler), "init:", v1);
  char v7 = (void *)qword_1002C9858;
  qword_1002C9858 = (uint64_t)v6;

  uint64_t v8 = qword_1002C9850;
  v9[0] = sub_100129964;
  sub_10012A114(buf, (uint64_t *)v9);
  sub_10000EEB4(v8 + 104, (uint64_t)buf, 0, &v12);
  sub_10000EF74(&v13);
  sub_10000EFC4(v11);
  uint64_t v14 = buf;
  sub_10000EFEC((void ***)&v14);
}

void sub_100129318(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *sub_100129354()
{
  int v0 = sub_1000160F4("com.apple.wpantund", "default");
  id v1 = (os_log_s *)objc_claimAutoreleasedReturnValue(v0);
  if (v1)
  {
    if (sub_10015A058(6) && os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      LOWORD(v3[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "[PWR_EVT]initDeepSleepParams", (uint8_t *)v3, 2u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FF028();
  }

  v3[0] = 112;
  sub_100076CD4((uint64_t **)&qword_1002C9860, v3, v3);
  v3[0] = 71;
  sub_100076CD4((uint64_t **)&qword_1002C9860, v3, v3);
  v3[0] = 5389;
  sub_100076CD4((uint64_t **)&qword_1002C9860, v3, v3);
  v3[0] = 82;
  sub_100076CD4((uint64_t **)&qword_1002C9860, v3, v3);
  v3[0] = 73;
  sub_100076CD4((uint64_t **)&qword_1002C9860, v3, v3);
  v3[0] = 6413;
  sub_100076CD4((uint64_t **)&qword_1002C9860, v3, v3);
  LOBYTE(v3[0]) = 1;
  *sub_10012A0E0((uint64_t **)&qword_1002C9878, v3) = 7;
  LOBYTE(v3[0]) = 2;
  *sub_10012A0E0((uint64_t **)&qword_1002C9878, v3) = 7;
  LOBYTE(v3[0]) = 3;
  *sub_10012A0E0((uint64_t **)&qword_1002C9878, v3) = 7;
  LOBYTE(v3[0]) = 4;
  *sub_10012A0E0((uint64_t **)&qword_1002C9878, v3) = 7;
  LOBYTE(v3[0]) = 5;
  *sub_10012A0E0((uint64_t **)&qword_1002C9878, v3) = 7;
  LOBYTE(v3[0]) = 6;
  *sub_10012A0E0((uint64_t **)&qword_1002C9878, v3) = 7;
  LOBYTE(v3[0]) = 8;
  *sub_10012A0E0((uint64_t **)&qword_1002C9878, v3) = 7;
  LOBYTE(v3[0]) = 9;
  *sub_10012A0E0((uint64_t **)&qword_1002C9878, v3) = 7;
  LOBYTE(v3[0]) = 10;
  *sub_10012A0E0((uint64_t **)&qword_1002C9878, v3) = 7;
  LOBYTE(v3[0]) = 11;
  *sub_10012A0E0((uint64_t **)&qword_1002C9878, v3) = 7;
  LOBYTE(v3[0]) = 12;
  *sub_10012A0E0((uint64_t **)&qword_1002C9878, v3) = 7;
  LOBYTE(v3[0]) = 13;
  *sub_10012A0E0((uint64_t **)&qword_1002C9878, v3) = 7;
  LOBYTE(v3[0]) = 14;
  *sub_10012A0E0((uint64_t **)&qword_1002C9878, v3) = 7;
  LOBYTE(v3[0]) = 15;
  *sub_10012A0E0((uint64_t **)&qword_1002C9878, v3) = 7;
  LOBYTE(v3[0]) = 16;
  *sub_10012A0E0((uint64_t **)&qword_1002C9878, v3) = 7;
  LOBYTE(v3[0]) = 17;
  uint64_t result = sub_10012A0E0((uint64_t **)&qword_1002C9878, v3);
  *uint64_t result = 7;
  return result;
}

void sub_100129620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100129630()
{
  int v0 = sub_1000160F4("com.apple.wpantund", "default");
  id v1 = (os_log_s *)objc_claimAutoreleasedReturnValue(v0);
  if (v1)
  {
    if (sub_10015A058(6) && os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "[PWR_EVT]configNCPDeepSleepParams", buf, 2u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FF028();
  }

  sub_10012A640(&v14, &qword_1002C9860);
  uint64_t v2 = qword_1002C9850;
  sub_10000AC00(buf, "vendor:deepsleep:filter:list");
  v11[1] = sub_100129CDC;
  v11[2] = "vendor:deepsleep:filter:list";
  v11[0] = (char *)off_1002B3F00 + 1;
  (*(void (**)(uint64_t, uint8_t *, uint64_t *, void *))(*(void *)v2 + 64LL))(v2, buf, &v14, v11);
  sub_1000075F0(v11);
  if (v13 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v3 = operator new(0x10uLL);
  *(void *)uint64_t v3 = &off_1002AE118;
  v3[8] = byte_1002C9358;
  __int16 v10 = v3;
  uint64_t v4 = qword_1002C9850;
  sub_10000AC00(buf, "vendor:deepsleep:loglevel");
  v9[1] = sub_100129CDC;
  v9[2] = "vendor:deepsleep:loglevel";
  v9[0] = (char *)off_1002B3F00 + 1;
  (*(void (**)(uint64_t, uint8_t *, _BYTE **, void *))(*(void *)v4 + 64LL))(v4, buf, &v10, v9);
  sub_1000075F0(v9);
  if (v13 < 0) {
    operator delete(*(void **)buf);
  }
  sub_10012A754(&v8, &qword_1002C9878);
  uint64_t v5 = qword_1002C9850;
  sub_10000AC00(buf, "vendor:deepsleep:region:loglevels");
  v7[1] = sub_100129CDC;
  v7[2] = "vendor:deepsleep:region:loglevels";
  v7[0] = (char *)off_1002B3F00 + 1;
  (*(void (**)(uint64_t, uint8_t *, uint64_t *, void *))(*(void *)v5 + 64LL))(v5, buf, &v8, v7);
  sub_1000075F0(v7);
  if (v13 < 0) {
    operator delete(*(void **)buf);
  }
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  if (v10) {
    (*(void (**)(_BYTE *))(*(void *)v10 + 8LL))(v10);
  }
  uint64_t result = v14;
  if (v14) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
  }
  return result;
}

void sub_100129894(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;

  _Unwind_Resume(a1);
}

void sub_100129964(char *a1, uint64_t *a2)
{
  uint64_t v3 = a1;
  if (a1[23] < 0) {
    uint64_t v3 = *(const char **)a1;
  }
  if (!strcasecmp(v3, "Daemon:ReadyForHostSleep"))
  {
    BOOL v6 = sub_1001478B8(a2);
    char v7 = sub_1000160F4("com.apple.wpantund", "default");
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (v8)
    {
      if (sub_10015A058(6) && os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        int v15 = 67109120;
        int v16 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "[PWR_EVT]power_handler_property_changed: DaemonReadyForHostSleep Value %d",  (uint8_t *)&v15,  8u);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FF028();
    }

    [(id)qword_1002C9858 eventNcpReady:v6];
  }

  else if (!strcasecmp(v3, "NCP:HostPowerState"))
  {
    int v9 = sub_1001472F4(a2);
    __int16 v10 = sub_1000160F4("com.apple.wpantund", "default");
    size_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (v11)
    {
      if (sub_10015A058(6) && os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        int v15 = 67109120;
        int v16 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "[PWR_EVT]power_handler_property_changed: HostPowerState Value %d",  (uint8_t *)&v15,  8u);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FF028();
    }

    [(id)qword_1002C9858 eventHostPowerState];
  }

  else if (!strcasecmp(v3, "NCP:Reset"))
  {
    int v12 = sub_1001472F4(a2);
    char v13 = sub_1000160F4("com.apple.wpantund", "default");
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (v14)
    {
      if (sub_10015A058(6) && os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        int v15 = 67109120;
        int v16 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "[PWR_EVT]NCP Reset, Config NCP Deep Sleep Params again. result[%d]",  (uint8_t *)&v15,  8u);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FF028();
    }

    sub_100129630();
  }

  else if (!strcasecmp(v3, "vendor:deepsleep:loglevel"))
  {
    byte_1002C9358 = sub_1001472F4(a2);
    uint64_t v4 = sub_1000160F4("com.apple.wpantund", "default");
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (v5)
    {
      if (sub_10015A058(6))
      {
        if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        {
          int v15 = 67109120;
          int v16 = byte_1002C9358;
          _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "[PWR_EVT]Deep sleep log level [%d]",  (uint8_t *)&v15,  8u);
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FF028();
    }
  }

void sub_100129CB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100129CDC(uint64_t *a1, int a2)
{
  uint64_t v4 = sub_1000160F4("com.apple.wpantund", "default");
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (v5)
  {
    if (sub_10015A058(6))
    {
      BOOL v6 = v5;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        else {
          char v7 = (uint64_t *)*a1;
        }
        int v8 = 136315394;
        int v9 = v7;
        __int16 v10 = 1024;
        int v11 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "[PWR_EVT]::property_set_callback[%s] Retval = %d",  (uint8_t *)&v8,  0x12u);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FF028();
  }
}

void sub_100129DEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100129E04(int a1, uint64_t *a2)
{
  uint64_t v4 = sub_10000BD6C(a2);
  {
    uint64_t v5 = (int *)sub_10012A480((uint64_t)a2);
    uint64_t v6 = *v5;
    char v7 = spinel_prop_key_to_cstr(*v5);
    int v8 = sub_1000160F4("com.apple.wpantund", "default");
    int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (v9)
    {
      if (sub_10015A058(6) && os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 67109634;
        HIDWORD(buf.__r_.__value_.__r.__words[0]) = a1;
        LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v6;
        HIWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
        buf.__r_.__value_.__l.__cap_ = (std::string::size_type)v7;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "[PWR_EVT]::lastHostWakeReason_get_cb status[%d] NCP Wake Reason[0x%0X][%s]",  (uint8_t *)&buf,  0x18u);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FF028();
    }

    if ((_DWORD)v6 != -1)
    {
      sub_1000E73B0(v6);
      sub_100155D30(v6);
      char v13 = operator new(0x10uLL);
      *(void *)char v13 = &off_1002AE1C8;
      v13[2] = -1;
      *(void *)uint64_t v17 = v13;
      uint64_t v14 = qword_1002C9850;
      sub_10000AC00(&buf, "vendor:last:host:wake:reason");
      v15[1] = sub_100129CDC;
      _OWORD v15[2] = "vendor:last:host:wake:reason";
      v15[0] = (char *)off_1002B3F00 + 1;
      (*(void (**)(uint64_t, std::string *, uint8_t *, void *))(*(void *)v14 + 64LL))(v14, &buf, v17, v15);
      sub_1000075F0(v15);
      if (*(void *)v17) {
        (*(void (**)(void))(**(void **)v17 + 8LL))(*(void *)v17);
      }
    }
  }

  else
  {
    __int16 v10 = sub_1000160F4("com.apple.wpantund", "default");
    int v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    if (v11)
    {
      if (sub_10015A058(3))
      {
        int v12 = v11;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          sub_100147B4C(a2, &buf);
          sub_100211BF0((char *)&buf, v17, v12);
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FF028();
    }
  }

void sub_10012A074( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20)
{
  _Unwind_Resume(a1);
}

char *sub_10012A0E0(uint64_t **a1, _BYTE *a2)
{
  uint64_t v3 = a2;
  return (char *)sub_10012A548(a1, a2, (uint64_t)&unk_10022A6C3, &v3) + 26;
}

void *sub_10012A114(void *a1, uint64_t *a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  a1[3] = 0LL;
  sub_10012A168((uint64_t)a1, a2);
  return a1;
}

void sub_10012A148( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)v10;
  sub_10000EFEC(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_10012A168(uint64_t a1, uint64_t *a2)
{
  return sub_10012A178((uint64_t *)(a1 + 24), *a2, a2[1]);
}

uint64_t *sub_10012A178(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v5[1] = a2;
  v5[2] = a3;
  v5[0] = (uint64_t)off_1002B3EE0 + 1;
  sub_1000127C8(v5, a1);
  sub_10000EFC4(v5);
  return a1;
}

void sub_10012A1C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10012A1DC(uint64_t result, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        a2[4] = 0;
        return result;
      }

      uint64_t result = *(void *)(*(void *)a2 + 8LL) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"N5boost3_bi6bind_tIvPFvRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9alloca"
                                        "torIcEEEERKNS_3anyEENS0_5list2INS_3argILi1EEENSH_ILi2EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp( (const char *)result,  (const char *)((unint64_t)"N5boost3_bi6bind_tIvPFvRKNSt3__112basic_stringIcNS2_11char_trait sIcEENS2_9allocatorIcEEEERKNS_3anyEENS0_5list2INS_3argILi1EEENSH_ILi2EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)),  !(_DWORD)result))
      {
        *(void *)a2 = v4;
      }

      else
      {
        *(void *)a2 = 0LL;
      }
    }
  }

  else
  {
    *(_OWORD *)a2 = *(_OWORD *)result;
  }

  return result;
}

uint64_t sub_10012A270(uint64_t (**a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return (*a1)(a2, a3);
}

uint64_t sub_10012A280(uint64_t result, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        a2[4] = 0;
        return result;
      }

      uint64_t result = *(void *)(*(void *)a2 + 8LL) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"N5boost3_bi6bind_tIvPFvRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9alloca"
                                        "torIcEEEEiENS0_5list2INS0_5valueIPKcEENS_3argILi1EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp( (const char *)result,  (const char *)((unint64_t)"N5boost3_bi6bind_tIvPFvRKNSt3__112basic_stringIcNS2_11char_trait sIcEENS2_9allocatorIcEEEEiENS0_5list2INS0_5valueIPKcEENS_3argILi1EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)),  !(_DWORD)result))
      {
        *(void *)a2 = v4;
      }

      else
      {
        *(void *)a2 = 0LL;
      }
    }
  }

  else
  {
    *(_OWORD *)a2 = *(_OWORD *)result;
  }

  return result;
}

void sub_10012A314(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = a2;
  sub_10012A338(a1, &v2);
}

void sub_10012A338(uint64_t a1, unsigned int *a2)
{
  unsigned int v2 = a2;
  sub_10012A36C((char **)(a1 + 8), (void (**)(void **, void))a1, &v2);
}

void sub_10012A36C(char **a1, void (**a2)(void **, void), unsigned int **a3)
{
  uint64_t v4 = *a2;
  sub_10000AC00(__p, *a1);
  v4(__p, **a3);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10012A3C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10012A3DC(uint64_t result, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        a2[4] = 0;
        return result;
      }

      uint64_t result = *(void *)(*(void *)a2 + 8LL) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"N5boost3_bi6bind_tIvPFviRKNS_3anyEENS0_5list2INS_3argILi1EEENS8_ILi2EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp( (const char *)result,  (const char *)((unint64_t)"N5boost3_bi6bind_tIvPFviRKNS_3anyEENS0_5list2INS_3argILi1EEENS8_ILi2EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)),  !(_DWORD)result))
      {
        *(void *)a2 = v4;
      }

      else
      {
        *(void *)a2 = 0LL;
      }
    }
  }

  else
  {
    *(_OWORD *)a2 = *(_OWORD *)result;
  }

  return result;
}

uint64_t sub_10012A470(uint64_t (**a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return (*a1)(a2, a3);
}

uint64_t sub_10012A480(uint64_t a1)
{
  uint64_t result = sub_10012A4E4(a1);
  if (!result)
  {
    v2.__vftable = 0LL;
    std::bad_cast::bad_cast(&v2);
    v2.__vftable = (std::bad_cast_vtbl *)&off_1002ADCA8;
    sub_10000C268();
  }

  return result;
}

void sub_10012A4D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

uint64_t sub_10012A4E4(uint64_t result)
{
  if (result)
  {
    id v1 = (void *)result;
    uint64_t result = *((void *)sub_10000BD6C((uint64_t *)result) + 1) & 0x7FFFFFFFFFFFFFFFLL;
    if ((const char *)result == v2 || (uint64_t result = strcmp((const char *)result, v2), !(_DWORD)result))
    {
      if (*v1) {
        return *v1 + 8LL;
      }
      else {
        __break(0x5516u);
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

void *sub_10012A548(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, _BYTE **a4)
{
  char v6 = sub_1000A622C((uint64_t)a1, &v11, a2);
  char v7 = (void *)*v6;
  if (!*v6)
  {
    int v8 = (void **)v6;
    sub_10012A5F0((uint64_t)a1, a4, (uint64_t)v10);
    sub_10000AF70(a1, v11, v8, (void *)v10[0]);
    char v7 = v10[0];
    v10[0] = 0LL;
    sub_10000D0A8(v10, 0LL);
  }

  return v7;
}

_BYTE *sub_10012A5F0@<X0>(uint64_t a1@<X0>, _BYTE **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t result = operator new(0x20uLL);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v5;
  result[25] = **a2;
  result[26] = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void *sub_10012A640(void *a1, uint64_t *a2)
{
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = off_1002B3F50;
  sub_1000A5C58(v4 + 1, a2);
  *a1 = v4;
  return a1;
}

void sub_10012A690(_Unwind_Exception *a1)
{
}

uint64_t sub_10012A6A4(uint64_t a1)
{
  return a1;
}

void sub_10012A6CC(void *a1)
{
}

_UNKNOWN **sub_10012A6F4()
{
}

void *sub_10012A700(uint64_t a1)
{
  std::bad_cast v2 = operator new(0x20uLL);
  void *v2 = off_1002B3F50;
  sub_1000A5C58(v2 + 1, (uint64_t *)(a1 + 8));
  return v2;
}

void sub_10012A740(_Unwind_Exception *a1)
{
}

void *sub_10012A754(void *a1, uint64_t *a2)
{
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = off_1002B3FA8;
  sub_1000A5FA8(v4 + 1, a2);
  *a1 = v4;
  return a1;
}

void sub_10012A7A4(_Unwind_Exception *a1)
{
}

uint64_t sub_10012A7B8(uint64_t a1)
{
  return a1;
}

void sub_10012A7E0(void *a1)
{
}

_UNKNOWN **sub_10012A808()
{
}

void *sub_10012A814(uint64_t a1)
{
  std::bad_cast v2 = operator new(0x20uLL);
  void *v2 = off_1002B3FA8;
  sub_1000A5FA8(v2 + 1, (uint64_t *)(a1 + 8));
  return v2;
}

void sub_10012A854(_Unwind_Exception *a1)
{
}

void sub_10012A868()
{
  int v0 = objc_autoreleasePoolPush();
  qword_1002C9870 = 0LL;
  qword_1002C9868 = 0LL;
  qword_1002C9860 = (uint64_t)&qword_1002C9868;
  __cxa_atexit((void (*)(void *))sub_100128F9C, &qword_1002C9860, (void *)&_mh_execute_header);
  qword_1002C9888 = 0LL;
  qword_1002C9880 = 0LL;
  qword_1002C9878 = (uint64_t)&qword_1002C9880;
  __cxa_atexit((void (*)(void *))sub_100128FA0, &qword_1002C9878, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_10012AB80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10012AC34( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)&OBJC_CLASS___PowerEventListener;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_10012ADF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10012AE0C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6 = a1;
  char v7 = sub_1000160F4("com.apple.wpantund", "default");
  int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (v8)
  {
    if (sub_10015A058(6) && os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v9[0] = 67109120;
      v9[1] = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "PowerEventListener: Received Message %x",  (uint8_t *)v9,  8u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  [v6 _powerNotificationMessage:a3 argument:a4];
}

void sub_10012AF14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10012B520(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10012B780(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10012B800(void *a1, uint64_t *a2)
{
  uint64_t v4 = sub_10000BD6C(a2);
  {
    uint64_t v5 = sub_10012C958((uint64_t)a2);
    sub_10000C678((uint64_t)&v38, v5);
    xpc_dictionary_set_uint64(a1, "v_type", 0xDuLL);
    xpc_object_t v6 = xpc_array_create(0LL, 0LL);
    for (uint64_t i = v39[0]; (void ***)i != &v38; uint64_t i = *(void *)(i + 8))
    {
      int v8 = (const char *)(i + 16);
      xpc_array_set_string(v6, 0xFFFFFFFFFFFFFFFFLL, v8);
    }

    xpc_dictionary_set_value(a1, "value", v6);
    xpc_release(v6);
    sub_10000C0E8(&v38);
    return;
  }

  int v9 = sub_10000BD6C(a2);
  {
    uint64_t v10 = (uint64_t *)sub_10012C9BC((uint64_t)a2);
    sub_10000C848(&v38, v10);
    xpc_dictionary_set_uint64(a1, "v_type", 0xDuLL);
    xpc_object_t v11 = xpc_array_create(0LL, 0LL);
    int v12 = v38;
    unsigned int v40 = (void ***)v38;
    while (v12 != v39)
    {
      char v13 = (const char *)(v12 + 4);
      xpc_array_set_string(v11, 0xFFFFFFFFFFFFFFFFLL, v13);
      sub_10000B338((uint64_t)&v40);
      int v12 = (void **)v40;
    }

    xpc_dictionary_set_value(a1, "value", v11);
    xpc_release(v11);
    sub_10000AD30((uint64_t)&v38);
    return;
  }

  uint64_t v14 = sub_10000BD6C(a2);
  {
    uint64_t v15 = sub_1000A5B28((uint64_t)a2);
    sub_10000CBF8(&v38, v15);
    xpc_dictionary_set_uint64(a1, "v_type", 0xEuLL);
    xpc_object_t v16 = xpc_array_create(0LL, 0LL);
LABEL_28:
    xpc_dictionary_set_value(a1, "value", v16);
    xpc_release(v16);
    unsigned int v40 = &v38;
    sub_100006F6C((void ***)&v40);
    return;
  }

  uint64_t v18 = sub_10000BD6C(a2);
  {
    uint64_t v19 = sub_10012CA20((uint64_t)a2);
    sub_10000CBF8(&v38, v19);
    xpc_dictionary_set_uint64(a1, "v_type", 0xEuLL);
    xpc_object_t v16 = xpc_array_create(0LL, 0LL);
    goto LABEL_28;
  }

  int v21 = sub_10000BD6C(a2);
  {
    addrinfo v22 = (uint64_t *)sub_10012CA84((uint64_t)a2);
    sub_10000CDD4(&v38, v22);
    xpc_dictionary_set_uint64(a1, "v_type", 0xFuLL);
    xpc_object_t v23 = xpc_array_create(0LL, 0LL);
    uint64_t v24 = v38;
    unsigned int v40 = (void ***)v38;
    while (v24 != v39)
    {
      xpc_array_set_int64(v23, 0xFFFFFFFFFFFFFFFFLL, *((int *)v24 + 7));
      sub_10000B338((uint64_t)&v40);
      uint64_t v24 = (void **)v40;
    }

    xpc_dictionary_set_value(a1, "value", v23);
    xpc_release(v23);
    sub_10000D0D4((uint64_t)&v38);
  }

  else
  {
    __int16 v25 = sub_10000BD6C(a2);
    {
      sub_10012BF40((uint64_t)a2, &v38);
      unsigned int v40 = 0LL;
      if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_dictionary)
      {
        xpc_dictionary_set_uint64(a1, "v_type", 0xCuLL);
        xpc_object_t v32 = xpc_array_create(0LL, 0LL);
        int v33 = v38;
        unsigned int v40 = (void ***)v38;
        while (v33 != v39)
        {
          int v34 = (const char *)(v33 + 4);
          sub_10012BF68(v32, v34, (uint64_t)(v33 + 7));
          sub_10000B338((uint64_t)&v40);
          int v33 = (void **)v40;
        }

        xpc_dictionary_set_value(a1, "value", v32);
        xpc_release(v32);
      }

      else if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_array)
      {
        xpc_object_t v26 = xpc_array_create(0LL, 0LL);
        int v27 = v38;
        unsigned int v40 = (void ***)v38;
        while (v27 != v39)
        {
          int v28 = (const char *)(v27 + 4);
          sub_10012BF68(v26, v28, (uint64_t)(v27 + 7));
          sub_10000B338((uint64_t)&v40);
          int v27 = (void **)v40;
        }

        xpc_array_append_value(a1, v26);
        xpc_release(v26);
      }

      sub_10000D448((uint64_t)&v38);
    }

    else
    {
      int v29 = sub_10000BD6C(a2);
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_10012BFFC(exception, "Unsupported type");
      }

      sub_10012BFD4((uint64_t)a2, (uint64_t *)&v38);
      if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_dictionary)
      {
        xpc_dictionary_set_uint64(a1, "v_type", 0xCuLL);
        xpc_object_t v35 = xpc_array_create(0LL, 0LL);
        for (m = (uint64_t *)v39[0]; m != (uint64_t *)&v38; m = (uint64_t *)m[1])
        {
          sub_10000D66C(&v40, m + 2);
          sub_10012B800(v35, &v40);
          if (v40) {
            ((void (*)(void ***))(*v40)[1])(v40);
          }
        }

        xpc_dictionary_set_value(a1, "value", v35);
        xpc_release(v35);
      }

      else if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_array)
      {
        xpc_object_t v30 = xpc_array_create(0LL, 0LL);
        for (n = (uint64_t *)v39[0]; n != (uint64_t *)&v38; n = (uint64_t *)n[1])
        {
          sub_10000D66C(&v40, n + 2);
          sub_10012B800(v30, &v40);
          if (v40) {
            ((void (*)(void ***))(*v40)[1])(v40);
          }
        }

        xpc_array_append_value(a1, v30);
        xpc_release(v30);
      }

      sub_10000C178((uint64_t *)&v38);
    }
  }

void sub_10012BE58( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void *sub_10012BF40@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)sub_10000F220(a1);
  return sub_10000D19C(a2, v3);
}

void sub_10012BF68(void *a1, const char *a2, uint64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_string(v6, "key", a2);
  sub_10012C860(v6, a3);
  xpc_array_append_value(a1, v6);
  xpc_release(v6);
}

uint64_t *sub_10012BFD4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_10010F250(a1);
  return sub_10000D518(a2, v3);
}

std::logic_error *sub_10012BFFC(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  return result;
}

void sub_10012C020(void *a1, uint64_t *a2)
{
  uint64_t v4 = sub_10000BD6C(a2);
  {
    uint64_t v5 = (const std::string *)sub_10000F154((uint64_t)a2);
    std::string::basic_string(&v33, v5);
    int size = (char)v33.__r_.__value_.__s.__size_;
    std::string::size_type v7 = v33.__r_.__value_.__r.__words[0];
    xpc_dictionary_set_uint64(a1, "v_type", 0xAuLL);
    if (size >= 0) {
      int v8 = &v33;
    }
    else {
      int v8 = (std::string *)v7;
    }
LABEL_9:
    xpc_dictionary_set_string(a1, "value", (const char *)v8);
    return;
  }

  int v9 = sub_10000BD6C(a2);
  {
    uint64_t v10 = (char **)sub_10012CAE8((uint64_t)a2);
    sub_10000AC00(&v33, *v10);
    int v11 = (char)v33.__r_.__value_.__s.__size_;
    std::string::size_type v12 = v33.__r_.__value_.__r.__words[0];
    xpc_dictionary_set_uint64(a1, "v_type", 0xAuLL);
    if (v11 >= 0) {
      int v8 = &v33;
    }
    else {
      int v8 = (std::string *)v12;
    }
    goto LABEL_9;
  }

  char v13 = sub_10000BD6C(a2);
  {
    char v14 = *(_BYTE *)sub_10012CBB0((uint64_t)a2);
    xpc_dictionary_set_uint64(a1, "v_type", 2uLL);
    xpc_dictionary_set_BOOL(a1, "value", v14);
    return;
  }

  uint64_t v15 = sub_10000BD6C(a2);
  {
    uint64_t v16 = *(unsigned __int8 *)sub_10012CC78((uint64_t)a2);
    uint64_t v17 = a1;
    uint64_t v18 = 1LL;
LABEL_16:
    xpc_dictionary_set_uint64(v17, "v_type", v18);
    xpc_dictionary_set_uint64(a1, "value", v16);
    return;
  }

  uint64_t v19 = sub_10000BD6C(a2);
  {
    int64_t v20 = *(char *)sub_10012CD40((uint64_t)a2);
LABEL_19:
    int v21 = a1;
    uint64_t v22 = 3LL;
LABEL_20:
    xpc_dictionary_set_uint64(v21, "v_type", v22);
    xpc_dictionary_set_int64(a1, "value", v20);
    return;
  }

  xpc_object_t v23 = sub_10000BD6C(a2);
  {
    uint64_t v16 = *(unsigned __int16 *)sub_10012CE08((uint64_t)a2);
    uint64_t v17 = a1;
    uint64_t v18 = 4LL;
    goto LABEL_16;
  }

  uint64_t v24 = sub_10000BD6C(a2);
  {
    int64_t v20 = *(__int16 *)sub_10012CED0((uint64_t)a2);
    goto LABEL_19;
  }

  __int16 v25 = sub_10000BD6C(a2);
  {
    uint64_t v16 = *(unsigned int *)sub_10012A480((uint64_t)a2);
    uint64_t v17 = a1;
    uint64_t v18 = 6LL;
    goto LABEL_16;
  }

  xpc_object_t v26 = sub_10000BD6C(a2);
  {
    int64_t v20 = *(int *)sub_10012CF98((uint64_t)a2);
    int v21 = a1;
    uint64_t v22 = 5LL;
    goto LABEL_20;
  }

  int v27 = sub_10000BD6C(a2);
  {
    uint64_t v16 = *(void *)sub_10012D060((uint64_t)a2);
    uint64_t v17 = a1;
    uint64_t v18 = 8LL;
    goto LABEL_16;
  }

  int v28 = sub_10000BD6C(a2);
  {
    int64_t v20 = *(void *)sub_10012D128((uint64_t)a2);
    int v21 = a1;
    uint64_t v22 = 7LL;
    goto LABEL_20;
  }

  int v29 = sub_10000BD6C(a2);
  {
    double v30 = *(double *)sub_10012D1F0((uint64_t)a2);
  }

  else
  {
    int v31 = sub_10000BD6C(a2);
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_10012BFFC(exception, "Unsupported type");
    }

    double v30 = *(float *)sub_10012D2B8((uint64_t)a2);
  }

  xpc_dictionary_set_uint64(a1, "v_type", 9uLL);
  xpc_dictionary_set_double(a1, "value", v30);
}

void sub_10012C450( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_10012C480(xpc_object_t xdict, uint64_t a2, BOOL *a3)
{
  switch(a2)
  {
    case 1LL:
      xpc_dictionary_set_uint64(xdict, "v_type", 1uLL);
      uint64_t v5 = *a3;
      goto LABEL_11;
    case 2LL:
      xpc_dictionary_set_uint64(xdict, "v_type", 2uLL);
      xpc_dictionary_set_BOOL(xdict, "value", *a3);
      return;
    case 3LL:
      xpc_dictionary_set_uint64(xdict, "v_type", 3uLL);
      int64_t v6 = *a3;
      goto LABEL_9;
    case 4LL:
      xpc_dictionary_set_uint64(xdict, "v_type", 4uLL);
      uint64_t v5 = *(unsigned __int16 *)a3;
      goto LABEL_11;
    case 5LL:
      xpc_dictionary_set_uint64(xdict, "v_type", 5uLL);
      int64_t v6 = *(int *)a3;
      goto LABEL_9;
    case 6LL:
      xpc_dictionary_set_uint64(xdict, "v_type", 6uLL);
      uint64_t v5 = *(unsigned int *)a3;
      goto LABEL_11;
    case 7LL:
      xpc_dictionary_set_uint64(xdict, "v_type", 7uLL);
      int64_t v6 = *(void *)a3;
LABEL_9:
      xpc_dictionary_set_int64(xdict, "value", v6);
      break;
    case 8LL:
      xpc_dictionary_set_uint64(xdict, "v_type", 8uLL);
      uint64_t v5 = *(void *)a3;
LABEL_11:
      xpc_dictionary_set_uint64(xdict, "value", v5);
      break;
    case 9LL:
      xpc_dictionary_set_uint64(xdict, "v_type", 9uLL);
      xpc_dictionary_set_double(xdict, "value", *(double *)a3);
      break;
    case 10LL:
      xpc_dictionary_set_uint64(xdict, "v_type", 0xAuLL);
      xpc_dictionary_set_string(xdict, "value", (const char *)a3);
      break;
    default:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_10012BFFC(exception, "Unsupported type");
  }

void sub_10012C664(_Unwind_Exception *a1)
{
}

uint64_t sub_10012C678(uint64_t *a1)
{
  std::bad_cast v2 = sub_10000BD6C(a1);
  uint64_t v3 = sub_10000BD6C(a1);
  uint64_t v4 = sub_10000BD6C(a1);
  uint64_t v5 = sub_10000BD6C(a1);
  int64_t v6 = sub_10000BD6C(a1);
  std::string::size_type v7 = sub_10000BD6C(a1);
  int v8 = sub_10000BD6C(a1);
  int v9 = sub_10000BD6C(a1);
  uint64_t v10 = sub_10000BD6C(a1);
  int v11 = sub_10000BD6C(a1);
  std::string::size_type v12 = sub_10000BD6C(a1);
  char v13 = sub_10000BD6C(a1);
  uint64_t v15 = sub_10000BD6C(a1);
  {
    uint64_t v16 = sub_10000BD6C(a1);
    {
      uint64_t v17 = sub_10000BD6C(a1);
      {
        uint64_t v18 = sub_10000BD6C(a1);
        {
          uint64_t v19 = sub_10000BD6C(a1);
          {
            int64_t v20 = sub_10000BD6C(a1);
            {
              int v21 = sub_10000BD6C(a1);
            }
          }
        }
      }
    }
  }

  return 0LL;
}

void sub_10012C860(void *a1, uint64_t *a2)
{
  else {
    sub_10012B800(a1, a2);
  }
}

void sub_10012C8A8(void *a1, const char *a2, uint64_t a3, BOOL *a4)
{
  if (a3 != 10 || a4)
  {
    xpc_object_t v8 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_uint64(v8, "v_type", a3);
    xpc_dictionary_set_string(v8, "key", a2);
    sub_10012C480(v8, a3, a4);
    xpc_array_append_value(a1, v8);
    xpc_release(v8);
  }

uint64_t sub_10012C958(uint64_t a1)
{
  uint64_t result = sub_10000C200(a1);
  if (!result)
  {
    v2.__vftable = 0LL;
    std::bad_cast::bad_cast(&v2);
    v2.__vftable = (std::bad_cast_vtbl *)&off_1002ADCA8;
    sub_10000C268();
  }

  return result;
}

void sub_10012C9A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

uint64_t sub_10012C9BC(uint64_t a1)
{
  uint64_t result = sub_10000C7E0(a1);
  if (!result)
  {
    v2.__vftable = 0LL;
    std::bad_cast::bad_cast(&v2);
    v2.__vftable = (std::bad_cast_vtbl *)&off_1002ADCA8;
    sub_10000C268();
  }

  return result;
}

void sub_10012CA0C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

uint64_t sub_10012CA20(uint64_t a1)
{
  uint64_t result = sub_10000CD04(a1);
  if (!result)
  {
    v2.__vftable = 0LL;
    std::bad_cast::bad_cast(&v2);
    v2.__vftable = (std::bad_cast_vtbl *)&off_1002ADCA8;
    sub_10000C268();
  }

  return result;
}

void sub_10012CA70( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

uint64_t sub_10012CA84(uint64_t a1)
{
  uint64_t result = sub_10000CD6C(a1);
  if (!result)
  {
    v2.__vftable = 0LL;
    std::bad_cast::bad_cast(&v2);
    v2.__vftable = (std::bad_cast_vtbl *)&off_1002ADCA8;
    sub_10000C268();
  }

  return result;
}

void sub_10012CAD4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

uint64_t sub_10012CAE8(uint64_t a1)
{
  uint64_t result = sub_10012CB4C(a1);
  if (!result)
  {
    v2.__vftable = 0LL;
    std::bad_cast::bad_cast(&v2);
    v2.__vftable = (std::bad_cast_vtbl *)&off_1002ADCA8;
    sub_10000C268();
  }

  return result;
}

void sub_10012CB38( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

uint64_t sub_10012CB4C(uint64_t result)
{
  if (result)
  {
    id v1 = (void *)result;
    uint64_t result = *((void *)sub_10000BD6C((uint64_t *)result) + 1) & 0x7FFFFFFFFFFFFFFFLL;
    if ((const char *)result == v2 || (uint64_t result = strcmp((const char *)result, v2), !(_DWORD)result))
    {
      if (*v1) {
        return *v1 + 8LL;
      }
      else {
        __break(0x5516u);
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10012CBB0(uint64_t a1)
{
  uint64_t result = sub_10012CC14(a1);
  if (!result)
  {
    v2.__vftable = 0LL;
    std::bad_cast::bad_cast(&v2);
    v2.__vftable = (std::bad_cast_vtbl *)&off_1002ADCA8;
    sub_10000C268();
  }

  return result;
}

void sub_10012CC00( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

uint64_t sub_10012CC14(uint64_t result)
{
  if (result)
  {
    id v1 = (void *)result;
    uint64_t result = *((void *)sub_10000BD6C((uint64_t *)result) + 1) & 0x7FFFFFFFFFFFFFFFLL;
    if ((const char *)result == v2 || (uint64_t result = strcmp((const char *)result, v2), !(_DWORD)result))
    {
      if (*v1) {
        return *v1 + 8LL;
      }
      else {
        __break(0x5516u);
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10012CC78(uint64_t a1)
{
  uint64_t result = sub_10012CCDC(a1);
  if (!result)
  {
    v2.__vftable = 0LL;
    std::bad_cast::bad_cast(&v2);
    v2.__vftable = (std::bad_cast_vtbl *)&off_1002ADCA8;
    sub_10000C268();
  }

  return result;
}

void sub_10012CCC8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

uint64_t sub_10012CCDC(uint64_t result)
{
  if (result)
  {
    id v1 = (void *)result;
    uint64_t result = *((void *)sub_10000BD6C((uint64_t *)result) + 1) & 0x7FFFFFFFFFFFFFFFLL;
    if ((const char *)result == v2 || (uint64_t result = strcmp((const char *)result, v2), !(_DWORD)result))
    {
      if (*v1) {
        return *v1 + 8LL;
      }
      else {
        __break(0x5516u);
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10012CD40(uint64_t a1)
{
  uint64_t result = sub_10012CDA4(a1);
  if (!result)
  {
    v2.__vftable = 0LL;
    std::bad_cast::bad_cast(&v2);
    v2.__vftable = (std::bad_cast_vtbl *)&off_1002ADCA8;
    sub_10000C268();
  }

  return result;
}

void sub_10012CD90( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

uint64_t sub_10012CDA4(uint64_t result)
{
  if (result)
  {
    id v1 = (void *)result;
    uint64_t result = *((void *)sub_10000BD6C((uint64_t *)result) + 1) & 0x7FFFFFFFFFFFFFFFLL;
    if ((const char *)result == v2 || (uint64_t result = strcmp((const char *)result, v2), !(_DWORD)result))
    {
      if (*v1) {
        return *v1 + 8LL;
      }
      else {
        __break(0x5516u);
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10012CE08(uint64_t a1)
{
  uint64_t result = sub_10012CE6C(a1);
  if (!result)
  {
    v2.__vftable = 0LL;
    std::bad_cast::bad_cast(&v2);
    v2.__vftable = (std::bad_cast_vtbl *)&off_1002ADCA8;
    sub_10000C268();
  }

  return result;
}

void sub_10012CE58( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

uint64_t sub_10012CE6C(uint64_t result)
{
  if (result)
  {
    id v1 = (void *)result;
    uint64_t result = *((void *)sub_10000BD6C((uint64_t *)result) + 1) & 0x7FFFFFFFFFFFFFFFLL;
    if ((const char *)result == v2 || (uint64_t result = strcmp((const char *)result, v2), !(_DWORD)result))
    {
      if (*v1) {
        return *v1 + 8LL;
      }
      else {
        __break(0x5516u);
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10012CED0(uint64_t a1)
{
  uint64_t result = sub_10012CF34(a1);
  if (!result)
  {
    v2.__vftable = 0LL;
    std::bad_cast::bad_cast(&v2);
    v2.__vftable = (std::bad_cast_vtbl *)&off_1002ADCA8;
    sub_10000C268();
  }

  return result;
}

void sub_10012CF20( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

uint64_t sub_10012CF34(uint64_t result)
{
  if (result)
  {
    id v1 = (void *)result;
    uint64_t result = *((void *)sub_10000BD6C((uint64_t *)result) + 1) & 0x7FFFFFFFFFFFFFFFLL;
    if ((const char *)result == v2 || (uint64_t result = strcmp((const char *)result, v2), !(_DWORD)result))
    {
      if (*v1) {
        return *v1 + 8LL;
      }
      else {
        __break(0x5516u);
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10012CF98(uint64_t a1)
{
  uint64_t result = sub_10012CFFC(a1);
  if (!result)
  {
    v2.__vftable = 0LL;
    std::bad_cast::bad_cast(&v2);
    v2.__vftable = (std::bad_cast_vtbl *)&off_1002ADCA8;
    sub_10000C268();
  }

  return result;
}

void sub_10012CFE8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

uint64_t sub_10012CFFC(uint64_t result)
{
  if (result)
  {
    id v1 = (void *)result;
    uint64_t result = *((void *)sub_10000BD6C((uint64_t *)result) + 1) & 0x7FFFFFFFFFFFFFFFLL;
    if ((const char *)result == v2 || (uint64_t result = strcmp((const char *)result, v2), !(_DWORD)result))
    {
      if (*v1) {
        return *v1 + 8LL;
      }
      else {
        __break(0x5516u);
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10012D060(uint64_t a1)
{
  uint64_t result = sub_10012D0C4(a1);
  if (!result)
  {
    v2.__vftable = 0LL;
    std::bad_cast::bad_cast(&v2);
    v2.__vftable = (std::bad_cast_vtbl *)&off_1002ADCA8;
    sub_10000C268();
  }

  return result;
}

void sub_10012D0B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

uint64_t sub_10012D0C4(uint64_t result)
{
  if (result)
  {
    id v1 = (void *)result;
    uint64_t result = *((void *)sub_10000BD6C((uint64_t *)result) + 1) & 0x7FFFFFFFFFFFFFFFLL;
    if ((const char *)result == v2 || (uint64_t result = strcmp((const char *)result, v2), !(_DWORD)result))
    {
      if (*v1) {
        return *v1 + 8LL;
      }
      else {
        __break(0x5516u);
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10012D128(uint64_t a1)
{
  uint64_t result = sub_10012D18C(a1);
  if (!result)
  {
    v2.__vftable = 0LL;
    std::bad_cast::bad_cast(&v2);
    v2.__vftable = (std::bad_cast_vtbl *)&off_1002ADCA8;
    sub_10000C268();
  }

  return result;
}

void sub_10012D178( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

uint64_t sub_10012D18C(uint64_t result)
{
  if (result)
  {
    id v1 = (void *)result;
    uint64_t result = *((void *)sub_10000BD6C((uint64_t *)result) + 1) & 0x7FFFFFFFFFFFFFFFLL;
    if ((const char *)result == v2 || (uint64_t result = strcmp((const char *)result, v2), !(_DWORD)result))
    {
      if (*v1) {
        return *v1 + 8LL;
      }
      else {
        __break(0x5516u);
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10012D1F0(uint64_t a1)
{
  uint64_t result = sub_10012D254(a1);
  if (!result)
  {
    v2.__vftable = 0LL;
    std::bad_cast::bad_cast(&v2);
    v2.__vftable = (std::bad_cast_vtbl *)&off_1002ADCA8;
    sub_10000C268();
  }

  return result;
}

void sub_10012D240( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

uint64_t sub_10012D254(uint64_t result)
{
  if (result)
  {
    id v1 = (void *)result;
    uint64_t result = *((void *)sub_10000BD6C((uint64_t *)result) + 1) & 0x7FFFFFFFFFFFFFFFLL;
    if ((const char *)result == v2 || (uint64_t result = strcmp((const char *)result, v2), !(_DWORD)result))
    {
      if (*v1) {
        return *v1 + 8LL;
      }
      else {
        __break(0x5516u);
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10012D2B8(uint64_t a1)
{
  uint64_t result = sub_10012D31C(a1);
  if (!result)
  {
    v2.__vftable = 0LL;
    std::bad_cast::bad_cast(&v2);
    v2.__vftable = (std::bad_cast_vtbl *)&off_1002ADCA8;
    sub_10000C268();
  }

  return result;
}

void sub_10012D308( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

uint64_t sub_10012D31C(uint64_t result)
{
  if (result)
  {
    id v1 = (void *)result;
    uint64_t result = *((void *)sub_10000BD6C((uint64_t *)result) + 1) & 0x7FFFFFFFFFFFFFFFLL;
    if ((const char *)result == v2 || (uint64_t result = strcmp((const char *)result, v2), !(_DWORD)result))
    {
      if (*v1) {
        return *v1 + 8LL;
      }
      else {
        __break(0x5516u);
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10012D58C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
LABEL_2:
  while (2)
  {
    int v4 = OBJC_IVAR___PBDataReader__error;
    if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
      || *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
    {
      return *(unsigned __int8 *)(a2 + v4) == 0;
    }

    char v5 = 0;
    unsigned int v6 = 0;
    uint64_t v7 = 0LL;
    while (1)
    {
      uint64_t v8 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v9 = v8 + 1;
      if (v8 == -1) {
        goto LABEL_47;
      }
      if (v9 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v10 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v8);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v9;
      v7 |= (unint64_t)(v10 & 0x7F) << v5;
      if ((v10 & 0x80) == 0) {
        goto LABEL_12;
      }
      v5 += 7;
      if (v6++ >= 9)
      {
        unint64_t v12 = 0LL;
        int v4 = OBJC_IVAR___PBDataReader__error;
        uint64_t v13 = OBJC_IVAR___PBDataReader__error;
        goto LABEL_16;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
    uint64_t v13 = OBJC_IVAR___PBDataReader__error;
    unint64_t v12 = *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) ? 0LL : v7;
    int v4 = OBJC_IVAR___PBDataReader__error;
LABEL_16:
    if (*(_BYTE *)(a2 + v13) || (v12 & 7) == 4) {
      return *(unsigned __int8 *)(a2 + v4) == 0;
    }
    if ((v12 >> 3) == 2)
    {
      char v23 = 0;
      unsigned int v24 = 0;
      uint64_t v17 = 0LL;
      *(_BYTE *)(v3 + 16) |= 1u;
      while (1)
      {
        uint64_t v25 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v26 = v25 + 1;
        if (v25 == -1) {
          goto LABEL_47;
        }
        if (v26 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v27 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26;
        v17 |= (unint64_t)(v27 & 0x7F) << v23;
        if ((v27 & 0x80) == 0)
        {
          uint64_t v22 = &OBJC_IVAR___AWDCountersEngagementS__childNodesCount;
LABEL_43:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v17) = 0;
          }
          goto LABEL_45;
        }

        v23 += 7;
        BOOL v21 = v24++ > 8;
        if (v21)
        {
          LODWORD(v17) = 0;
          uint64_t v22 = &OBJC_IVAR___AWDCountersEngagementS__childNodesCount;
LABEL_45:
          *(_DWORD *)(v3 + *v22) = v17;
          goto LABEL_2;
        }
      }

      uint64_t v22 = &OBJC_IVAR___AWDCountersEngagementS__childNodesCount;
LABEL_40:
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
      goto LABEL_43;
    }

    if ((v12 >> 3) == 1)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      uint64_t v17 = 0LL;
      *(_BYTE *)(v3 + 16) |= 2u;
      while (1)
      {
        uint64_t v18 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v19 = v18 + 1;
        if (v18 == -1) {
          break;
        }
        if (v19 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v22 = &OBJC_IVAR___AWDCountersEngagementS__routerNodesCount;
          goto LABEL_40;
        }

        char v20 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19;
        v17 |= (unint64_t)(v20 & 0x7F) << v15;
        if ((v20 & 0x80) == 0)
        {
          uint64_t v22 = &OBJC_IVAR___AWDCountersEngagementS__routerNodesCount;
          goto LABEL_43;
        }

        v15 += 7;
        BOOL v21 = v16++ > 8;
        if (v21)
        {
          LODWORD(v17) = 0;
          uint64_t v22 = &OBJC_IVAR___AWDCountersEngagementS__routerNodesCount;
          goto LABEL_45;
        }
      }

void sub_10012DC90(uint64_t a1, uint64_t a2)
{
  do
  {
LABEL_1:
    if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
      || *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
    {
      break;
    }

    char v4 = 0;
    unsigned int v5 = 0;
    uint64_t v6 = 0LL;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1)
      {
        __break(0x5500u);
        return;
      }

      if (v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v11 = 0LL;
        uint64_t v12 = OBJC_IVAR___PBDataReader__error;
        goto LABEL_14;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    uint64_t v12 = OBJC_IVAR___PBDataReader__error;
    unint64_t v11 = *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) ? 0LL : v6;
LABEL_14:
    if (*(_BYTE *)(a2 + v12) || (v11 & 7) == 4) {
      break;
    }
    if ((v11 >> 3) == 2)
    {
      uint64_t String = PBReaderReadString(a2);
      uint64_t v15 = objc_claimAutoreleasedReturnValue(String);
      uint64_t v16 = 16LL;
      goto LABEL_22;
    }

    if ((v11 >> 3) == 1)
    {
      uint64_t v14 = PBReaderReadString(a2);
      uint64_t v15 = objc_claimAutoreleasedReturnValue(v14);
      uint64_t v16 = 8LL;
LABEL_22:
      uint64_t v18 = *(void **)(a1 + v16);
      *(void *)(a1 + v16) = v15;

      goto LABEL_1;
    }
  }

  while ((PBReaderSkipValueWithTag(a2) & 1) != 0);
}

__int128 *sub_10012E158(uint64_t a1, uint64_t *a2)
{
  return sub_10008AE9C((__int128 *)(a1 + 8), a2);
}

uint64_t sub_10012E160(uint64_t a1)
{
  return a1 + 8;
}

void *sub_10012E168(void *result, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  *uint64_t result = off_1002B4000;
  result[1] = v3;
  result[2] = v2;
  if (v2)
  {
    char v4 = (unsigned int *)(v2 + 8);
    do
      unsigned int v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  return result;
}

uint64_t sub_10012E19C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  id v1 = (uint64_t *)(a1 + 8);
  if (!v2) {
    return 4294967274LL;
  }
  uint64_t v3 = sub_1000ACC28(v1);
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 128LL))(v3);
}

uint64_t sub_10012E1CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = (uint64_t *)(a1 + 8);
  if (!v4) {
    return -22LL;
  }
  uint64_t v7 = sub_1000ACC28(v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 16LL))(v7, a2, a3);
}

uint64_t sub_10012E218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = (uint64_t *)(a1 + 8);
  if (!v4) {
    return -22LL;
  }
  uint64_t v7 = sub_1000ACC28(v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 32LL))(v7, a2, a3);
}

uint64_t sub_10012E264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = (uint64_t *)(a1 + 8);
  if (!v4) {
    return -22LL;
  }
  uint64_t v7 = sub_1000ACC28(v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 24LL))(v7, a2, a3);
}

uint64_t sub_10012E2B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  id v1 = (uint64_t *)(a1 + 8);
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = sub_1000ACC28(v1);
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40LL))(v3);
}

uint64_t sub_10012E2E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  id v1 = (uint64_t *)(a1 + 8);
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = sub_1000ACC28(v1);
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 48LL))(v3);
}

uint64_t sub_10012E310(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  id v1 = (uint64_t *)(a1 + 8);
  if (!v2) {
    return 4294967274LL;
  }
  uint64_t v3 = sub_1000ACC28(v1);
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 72LL))(v3);
}

uint64_t sub_10012E340(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  id v1 = (uint64_t *)(a1 + 8);
  if (!v2) {
    return 4294967274LL;
  }
  uint64_t v3 = sub_1000ACC28(v1);
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 80LL))(v3);
}

uint64_t sub_10012E370(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  id v1 = (uint64_t *)(a1 + 8);
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = sub_1000ACC28(v1);
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 56LL))(v3);
}

uint64_t *sub_10012E3A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t result = (uint64_t *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = sub_1000ACC28(result);
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 104LL))(v3);
  }

  return result;
}

uint64_t *sub_10012E3CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t result = (uint64_t *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = sub_1000ACC28(result);
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 96LL))(v3);
  }

  return result;
}

uint64_t sub_10012E3F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  id v1 = (uint64_t *)(a1 + 8);
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = sub_1000ACC28(v1);
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 112LL))(v3);
}

uint64_t sub_10012E428(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  id v1 = (uint64_t *)(a1 + 8);
  if (!v2) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v3 = sub_1000ACC28(v1);
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 88LL))(v3);
}

uint64_t sub_10012E458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = (uint64_t *)(a1 + 8);
  if (!v7) {
    return 0LL;
  }
  uint64_t v13 = sub_1000ACC28(v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v13 + 120LL))( v13,  a2,  a3,  a4,  a5,  a6);
}

uint64_t sub_10012E4D4(void *a1)
{
  *a1 = off_1002B4000;
  sub_10000F9EC(a1 + 2);
  return nullsub_2(a1);
}

void sub_10012E504(void *a1)
{
  *a1 = off_1002B4000;
  sub_10000F9EC(a1 + 2);
  uint64_t v2 = (void *)nullsub_2(a1);
  operator delete(v2);
}

uint64_t sub_10012E538(uint64_t a1)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)(a1 + 24) = 0LL;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 56) = a1 + 64;
  uint64_t v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v2)
  {
    if (sub_10015A058(5) && os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "WPANTUND-InternalXPCIPC: Call back table initialized",  v4,  2u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  return a1;
}

void sub_10012E608(_Unwind_Exception *a1)
{
}

uint64_t sub_10012E630(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v2)
  {
    if (sub_10015A058(5) && os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "WPANTUND-InternalIPCAPI: Destructor", v4, 2u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  sub_10013A170(a1 + 56);
  return a1;
}

void *sub_10012E6F8()
{
  int v0 = (void *)qword_1002C9890;
  if (!qword_1002C9890)
  {
    int v0 = operator new(0x50uLL);
    sub_10012E538((uint64_t)v0);
    qword_1002C9890 = (uint64_t)v0;
  }

  return v0;
}

void sub_10012E734(_Unwind_Exception *a1)
{
}

void sub_10012E748(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 360LL))(__p, a2);
  uint64_t v3 = a1 + 1;
  sub_100014D08((uint64_t)(a1 + 1), (__int128 *)__p);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v4 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v4)
  {
    if (sub_10015A058(5) && os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      LODWORD(__p[0]) = 136315138;
      *(void **)((char *)__p + 4) = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "WPANTUND-InternalIPCAPI - Interface added %s",  (uint8_t *)__p,  0xCu);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  unsigned int v5 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_USER_INITIATED, 0);
  a1[5] = (uint64_t)dispatch_queue_create("internalIpcApiQueue.xpc.queue", v5);
  uint64_t v6 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_USER_INITIATED, 0);
  a1[6] = (uint64_t)dispatch_queue_create("internalIpcApiDebugQueue.xpc.queue", v6);
  uint64_t v7 = *a1;
  uint64_t v14 = sub_10012E9F8;
  uint64_t v15 = 0LL;
  uint64_t v16 = a1;
  sub_10013A21C(__p, (uint64_t)&v14);
  sub_10000EEB4(v7 + 104, (uint64_t)__p, 0, &v17);
  sub_10000EF74(&v18);
  sub_10000EFC4(v22);
  unint64_t v19 = __p;
  sub_10000EFEC(&v19);
  uint64_t v8 = *a1;
  uint64_t v14 = sub_10012EF20;
  uint64_t v15 = 0LL;
  uint64_t v16 = a1;
  sub_10013A584(__p, (uint64_t)&v14);
  sub_10001BF28(v8 + 8, (uint64_t)__p, 0, &v12);
  sub_10000EF74(&v13);
  sub_10002B7E4(v22);
  unint64_t v19 = __p;
  sub_10000EFEC(&v19);
  uint64_t v9 = *a1;
  uint64_t v14 = sub_10012F3E4;
  uint64_t v15 = 0LL;
  uint64_t v16 = a1;
  sub_10013B1B4(__p, (uint64_t)&v14);
  sub_10012F3A4(v9 + 80, (uint64_t)__p, 0, &v10);
  sub_10000EF74(&v11);
  sub_100139DE8(v22);
  unint64_t v19 = __p;
  sub_10000EFEC(&v19);
}

void sub_10012E9BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_10012E9F8(uint64_t a1, const std::string *a2, uint64_t *a3)
{
  uint64_t v6 = sub_10000BD6C(a3);
  {
    uint64_t v7 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v7)
    {
      uint64_t v8 = sub_10015A058(6);
      if ((_DWORD)v8)
      {
        uint64_t v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
        if ((_DWORD)v8)
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "InternalIPCAPI:PropChanged: valMap Received",  buf,  2u);
        }
      }

      goto LABEL_19;
    }

    uint64_t v8 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)v8) {
      goto LABEL_19;
    }
LABEL_18:
    sub_1001FB53C();
    goto LABEL_19;
  }

  uint64_t v9 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (!v9)
  {
    uint64_t v8 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)v8) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }

  uint64_t v8 = sub_10015A058(5);
  if ((_DWORD)v8)
  {
    uint64_t v8 = os_log_type_enabled(v9, OS_LOG_TYPE_INFO);
    if ((_DWORD)v8)
    {
      uint64_t v10 = a2;
      sub_100147B4C(a3, &__p);
      int size = (char)__p.__r_.__value_.__s.__size_;
      std::string::size_type v12 = __p.__r_.__value_.__r.__words[0];
      uint64_t SystemTime = TelephonyUtilGetSystemTime(v13);
      p_p = &__p;
      *(_DWORD *)std::string buf = 136315650;
      if (size < 0) {
        p_p = (std::string *)v12;
      }
      uint64_t v38 = v10;
      __int16 v39 = 2080;
      uint64_t v40 = (uint64_t)p_p;
      __int16 v41 = 2048;
      uint64_t v42 = SystemTime;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "InternalIPCAPI:PropChanged: Key %s, Value: %s, at: %llu",  buf,  0x20u);
    }
  }

void sub_10012EE68( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, char a34, uint64_t a35, void *__p, uint64_t a37, int a38, __int16 a39, char a40, char a41, uint64_t a42, void *a43, uint64_t a44, int a45, __int16 a46, char a47, char a48)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10012EF20(void *a1, uint64_t a2)
{
  v26[0] = 0LL;
  v26[1] = 0LL;
  else {
    uint64_t v4 = *(_BYTE **)a2;
  }
  unsigned int v24 = v4;
  uint64_t v25 = v26;
  if (*v4)
  {
    sub_10000AC00(&__p, "kWPANTUNDProperty_NetworkName");
    unsigned int v5 = sub_10000ED88(&v25, &__p);
    sub_100133E88(v5, (uint64_t *)&v24);
    if (SHIBYTE(v23) < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
  }

  sub_1001598C0((uint64_t)&__p, a2 + 24, 8LL);
  if (__p.n128_u64[0])
  {
    sub_1001598C0((uint64_t)&__p, a2 + 24, 8LL);
    v19.n128_u64[0] = __p.n128_u64[0];
    sub_10000AC00(&__p, "kWPANTUNDProperty_NetworkXPANID");
    uint64_t v6 = sub_10000ED88(&v25, &__p);
    sub_100017620(v6, (uint64_t *)&v19);
    if (SHIBYTE(v23) < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
  }

  v19.n128_u64[0] = *(unsigned __int16 *)(a2 + 32);
  sub_10000AC00(&__p, "kWPANTUNDProperty_NetworkPANID");
  uint64_t v7 = sub_10000ED88(&v25, &__p);
  sub_100017620(v7, (uint64_t *)&v19);
  if (SHIBYTE(v23) < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  if (*(_BYTE *)(a2 + 38))
  {
    v19.n128_u32[0] = *(unsigned __int8 *)(a2 + 38);
    sub_10000AC00(&__p, "kWPANTUNDProperty_NetworkNodeType");
    uint64_t v8 = sub_10000ED88(&v25, &__p);
    sub_100017730(v8, &v19);
    if (SHIBYTE(v23) < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
  }

  if (*(_BYTE *)(a2 + 34))
  {
    v19.n128_u16[0] = *(unsigned __int8 *)(a2 + 34);
    sub_10000AC00(&__p, "kWPANTUNDProperty_NCPChannel");
    uint64_t v9 = sub_10000ED88(&v25, &__p);
    sub_100017678(v9, &v19);
    if (SHIBYTE(v23) < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    if (*(unsigned __int8 *)(a2 + 36) != 128)
    {
      char v21 = *(_BYTE *)(a2 + 36);
      sub_10000AC00(&__p, "RSSI");
      uint64_t v10 = sub_10000ED88(&v25, &__p);
      sub_100070E8C(v10, &v21);
      if (SHIBYTE(v23) < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
    }

    char v21 = *(_BYTE *)(a2 + 35);
    sub_10000AC00(&__p, "kWPANTUNDProperty_NestLabs_NetworkAllowingJoin");
    unint64_t v11 = sub_10000ED88(&v25, &__p);
    sub_100020B4C(v11, &v21);
    if (SHIBYTE(v23) < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
  }

  sub_1001598C0((uint64_t)&__p, a2 + 39, 8LL);
  if (__p.n128_u64[0])
  {
    __n128 __p = 0uLL;
    uint64_t v23 = 0LL;
    sub_100018E8C(&__p, (const void *)(a2 + 39), a2 + 47, 8uLL);
    sub_10000AC00(&v19, "kWPANTUNDProperty_NCPHardwareAddress");
    std::string::size_type v12 = sub_10000ED88(&v25, &v19);
    sub_1000200F8(v12, (uint64_t)&__p);
    if (v20 < 0) {
      operator delete((void *)v19.n128_u64[0]);
    }
    v19.n128_u64[0] = (unint64_t)&__p;
    sub_100006F6C((void ***)&v19);
  }

  uint64_t v13 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v13)
  {
    if (sub_10015A058(5) && os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      __p.n128_u16[0] = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "Sending Beacon to internal-clients",  (uint8_t *)&__p,  2u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  sub_10000AC00(&v18, "Beacon");
  sub_1000738CC(&v17, (uint64_t *)&v25);
  aBlock = 0LL;
  dispatch_object_t object = 0LL;
  sub_100133EE0(a1, &v18, &v17, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
  }
  return sub_10000D448((uint64_t)&v25);
}

void sub_10012F2CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
}

void *sub_10012F3A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = (uint64_t *)sub_10013A71C((uint64_t *)(a1 + 8));
  return sub_10013A75C(v7, a2, a3, a4);
}

void sub_10012F3E4(void *a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t *)sub_10000CB98((uint64_t)a2);
  if (v4)
  {
    unsigned int v5 = v4;
    uint64_t v6 = v4 + 1;
    uint64_t v7 = v4[1];
    uint64_t v8 = *v4;
    uint64_t v9 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    uint64_t v10 = v9;
    if (v8 != v7 && v8 != 0)
    {
      if (v9)
      {
        if (sub_10015A058(5) && os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "Sending nw_diag_response to internal-clients",  buf,  2u);
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }

      sub_10000AC00(&__p, "vendor:networkdiagnosticsrsp");
      uint64_t v21 = *a2;
      if (*a2) {
        uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 24LL))(v21);
      }
      dispatch_object_t object = 0LL;
      uint64_t v24 = v21;
      aBlock = 0LL;
      sub_100133EE0(a1, &__p, &v24, (uint64_t)&aBlock);
      if (object) {
        dispatch_release(object);
      }
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (v24) {
        (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
      }
      return;
    }

    if (v9)
    {
      return;
    }

    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      return;
    }
LABEL_20:
    sub_1001FB53C();
    return;
  }

  std::string::size_type v12 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (!v12)
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      return;
    }
    goto LABEL_20;
  }

  uint64_t v13 = v12;
}

void sub_10012F5FC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10012F63C(uint64_t a1)
{
  uint64_t v3 = (void **)a1;
  sub_10000EFEC(&v3);
  return a1;
}

uint64_t sub_10012F678(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = a2;
  return result;
}

void sub_10012F680(uint64_t a1, std::string *a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = sub_10012F798((uint64_t **)(a1 + 56), a2);
  sub_10012F7CC(v6, a3);
  uint64_t v7 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v7)
  {
    uint64_t v8 = v7;
    if (sub_10015A058(5) && os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *(void *)(a1 + 72);
      int v10 = 136315394;
      unint64_t v11 = v4;
      __int16 v12 = 2048;
      uint64_t v13 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "Add client:%s Number of Internal clients remaining: %lu",  (uint8_t *)&v10,  0x16u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

void *sub_10012F798(uint64_t **a1, std::string *a2)
{
  uint64_t v3 = a2;
  return sub_10013B458(a1, (const void **)&a2->__r_.__value_.__l.__data_, (uint64_t)&unk_10022A959, &v3) + 7;
}

void *sub_10012F7CC(void *a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  __int128 v4 = v6;
  *(void *)&__int128 v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    sub_10000ABAC(v3);
  }
  return a1;
}

void sub_10012F814(uint64_t a1, const void **a2)
{
  uint64_t v2 = a2;
  sub_10013B5E0(a1 + 56, a2);
  __int128 v4 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v4)
  {
    unsigned int v5 = v4;
    if (sub_10015A058(5) && os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 72);
      int v7 = 136315394;
      uint64_t v8 = v2;
      __int16 v9 = 2048;
      uint64_t v10 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Remove client:%s Number of Internal clients remaining: %lu",  (uint8_t *)&v7,  0x16u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

void sub_10012F920( uint64_t a1, int a2, void *a3, uint64_t **a4, const std::string *a5, const std::string *a6, uint64_t a7)
{
  int v26 = a2;
  __int16 v12 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v12)
  {
    uint64_t v13 = v12;
    if (sub_10015A058(5) && os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = a5;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v14;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&_BYTE buf[14] = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "WPANTUND-InternalIPCAPI Sending response for method %s to %s",  buf,  0x16u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  if (*(void *)a7 && *(void *)(a7 + 8))
  {
    v25[0] = 0LL;
    v25[1] = 0LL;
    uint64_t v24 = v25;
    sub_10000AC00(buf, "method");
    uint64_t v15 = sub_10000ED88(&v24, (__n128 *)buf);
    sub_1000200A0(v15, a5);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    sub_10000AC00(buf, "property_name");
    uint64_t v16 = sub_10000ED88(&v24, (__n128 *)buf);
    sub_1000200A0(v16, a6);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    sub_10000AC00(buf, "ret");
    uint64_t v17 = sub_10000ED88(&v24, (__n128 *)buf);
    sub_100017730(v17, &v26);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    int v18 = v26;
    if (*a3) {
      uint64_t v19 = (*(uint64_t (**)(void))(*(void *)*a3 + 24LL))(*a3);
    }
    else {
      uint64_t v19 = 0LL;
    }
    if (*(void *)a7) {
      uint64_t v20 = _Block_copy(*(const void **)a7);
    }
    else {
      uint64_t v20 = 0LL;
    }
    uint64_t v21 = *(dispatch_queue_s **)(a7 + 8);
    *(void *)std::string buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 1174405120LL;
    *(void *)&uint8_t buf[16] = sub_10013B65C;
    int v28 = &unk_1002B4318;
    if (v20) {
      uint64_t v22 = _Block_copy(v20);
    }
    else {
      uint64_t v22 = 0LL;
    }
    aBlock = v22;
    int v31 = v18;
    if (v19) {
      uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 24LL))(v19);
    }
    else {
      uint64_t v23 = 0LL;
    }
    uint64_t v30 = v23;
    dispatch_async(v21, buf);
    if (v30) {
      (*(void (**)(uint64_t))(*(void *)v30 + 8LL))(v30);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v20) {
      _Block_release(v20);
    }
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
    }
    sub_10000D448((uint64_t)&v24);
  }

void sub_10012FC00( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

void sub_10012FC9C(uint64_t a1, int a2, void *a3, uint64_t **a4, const std::string *a5, uint64_t a6)
{
  int v24 = a2;
  unint64_t v11 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v11)
  {
    __int16 v12 = v11;
    if (sub_10015A058(5) && os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = a5;
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = v13;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&_BYTE buf[14] = a4;
      *(_WORD *)&buf[22] = 1024;
      LODWORD(v26) = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "WPANTUND-InternalIPCAPI Sending Internal response for method %s to %s, ret : %d",  buf,  0x1Cu);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  if (*(void *)a6 && *(void *)(a6 + 8))
  {
    v23[0] = 0LL;
    v23[1] = 0LL;
    uint64_t v22 = v23;
    sub_10000AC00(buf, "method");
    uint64_t v14 = sub_10000ED88(&v22, (__n128 *)buf);
    sub_1000200A0(v14, a5);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    sub_10000AC00(buf, "ret");
    uint64_t v15 = sub_10000ED88(&v22, (__n128 *)buf);
    sub_100017730(v15, &v24);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    int v16 = v24;
    if (*a3) {
      uint64_t v17 = (*(uint64_t (**)(void))(*(void *)*a3 + 24LL))(*a3);
    }
    else {
      uint64_t v17 = 0LL;
    }
    if (*(void *)a6) {
      int v18 = _Block_copy(*(const void **)a6);
    }
    else {
      int v18 = 0LL;
    }
    uint64_t v19 = *(dispatch_queue_s **)(a6 + 8);
    *(void *)std::string buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 1174405120LL;
    *(void *)&uint8_t buf[16] = sub_10013B65C;
    int v26 = &unk_1002B4318;
    if (v18) {
      uint64_t v20 = _Block_copy(v18);
    }
    else {
      uint64_t v20 = 0LL;
    }
    aBlock = v20;
    int v29 = v16;
    if (v17) {
      uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 24LL))(v17);
    }
    else {
      uint64_t v21 = 0LL;
    }
    uint64_t v28 = v21;
    dispatch_async(v19, buf);
    if (v28) {
      (*(void (**)(uint64_t))(*(void *)v28 + 8LL))(v28);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v18) {
      _Block_release(v18);
    }
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
    }
    sub_10000D448((uint64_t)&v22);
  }

void sub_10012FF54( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

void sub_10012FFE8( uint64_t a1, int a2, void *a3, void **a4, const std::string *a5, const std::string *a6, uint64_t a7)
{
  int v33 = a2;
  __int16 v12 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v12)
  {
    uint64_t v13 = v12;
    if (sub_10015A058(5) && os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = a5;
      uint64_t v15 = a6;
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = v14;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&_BYTE buf[14] = v15;
      *(_WORD *)&buf[22] = 2080;
      uint64_t v35 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "WPANTUND-InternalIPCAPI Sending internal response for method %s for property %s to %s",  buf,  0x20u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  if (*(void *)a7 && *(void *)(a7 + 8))
  {
    int v16 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v16)
    {
      if (sub_10015A058(5) && os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "Callbackwithstatusarg1_helper method",  buf,  2u);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    v32[0] = 0LL;
    v32[1] = 0LL;
    int v31 = v32;
    sub_10000AC00(buf, "method");
    uint64_t v17 = sub_10000ED88(&v31, (__n128 *)buf);
    sub_1000200A0(v17, a5);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    sub_10000AC00(buf, "property_name");
    int v18 = sub_10000ED88(&v31, (__n128 *)buf);
    sub_1000200A0(v18, a6);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (!*a3) {
      int v33 = 17;
    }
    sub_10000AC00(buf, "ret");
    uint64_t v19 = sub_10000ED88(&v31, (__n128 *)buf);
    sub_100017730(v19, &v33);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (*a3)
    {
      sub_10000AC00(buf, "PropVal");
      uint64_t v20 = sub_10000ED88(&v31, (__n128 *)buf);
      sub_100018024(v20, a3);
    }

    else
    {
      uint64_t v21 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v21)
      {
        if (sub_10015A058(5) && os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "original_message is empty", buf, 2u);
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }

      sub_10000AC00(buf, "<empty>");
      sub_10000AC00(&__p, "PropVal");
      uint64_t v22 = sub_10000ED88(&v31, &__p);
      sub_1000175B4(v22, (uint64_t)buf);
      if (v30 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
    }

    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    int v23 = v33;
    if (*a3) {
      uint64_t v24 = (*(uint64_t (**)(void))(*(void *)*a3 + 24LL))(*a3);
    }
    else {
      uint64_t v24 = 0LL;
    }
    if (*(void *)a7) {
      uint64_t v25 = _Block_copy(*(const void **)a7);
    }
    else {
      uint64_t v25 = 0LL;
    }
    int v26 = *(dispatch_queue_s **)(a7 + 8);
    *(void *)std::string buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 1174405120LL;
    *(void *)&uint8_t buf[16] = sub_10013B65C;
    uint64_t v35 = (void **)&unk_1002B4318;
    if (v25) {
      uint64_t v27 = _Block_copy(v25);
    }
    else {
      uint64_t v27 = 0LL;
    }
    aBlock = v27;
    int v38 = v23;
    if (v24) {
      uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 24LL))(v24);
    }
    else {
      uint64_t v28 = 0LL;
    }
    uint64_t v37 = v28;
    dispatch_async(v26, buf);
    if (v37) {
      (*(void (**)(uint64_t))(*(void *)v37 + 8LL))(v37);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v25) {
      _Block_release(v25);
    }
    if (v24) {
      (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
    }
    sub_10000D448((uint64_t)&v31);
  }

void sub_10013046C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  sub_10000D448((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_10013052C()
{
}

void sub_100130534(void *a1, const std::string *a2, const std::string *a3, uint64_t a4)
{
  uint64_t v8 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v8)
  {
    __int16 v9 = v8;
    if (sub_10015A058(5) && os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = a3;
      unint64_t v11 = a2;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v10;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&_BYTE buf[14] = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "WPANTUND-InternalIPCAPI Handling method handler for property %s for client %s",  buf,  0x16u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  std::string::basic_string(&__str, a3);
  sub_10000AC00(&v31, "PropGet");
  __int16 v12 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v12)
  {
    if (sub_10015A058(5) && os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      p_str = &__str;
      if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      uint64_t v14 = a2;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = p_str;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&_BYTE buf[14] = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "InternalClientInterface: Handling get method handler for property %s for %s",  buf,  0x16u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  if (sub_1000FE128(&__str))
  {
    uint64_t v15 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v15)
    {
      if (sub_10015A058(5) && os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        int v16 = &__str;
        if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          int v16 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = a3;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&_BYTE buf[14] = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "PropGet: Property %s is deprecated. Please use %s instead.",  buf,  0x16u);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }
  }

  if (*a1)
  {
    uint64_t v17 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v17)
    {
      if (sub_10015A058(5) && os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "Posted Internal CMD to WPANTUND Process Queue",  buf,  2u);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    uint64_t v19 = (dispatch_queue_s *)a1[4];
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 1174405120LL;
    void v25[2] = sub_100130B20;
    v25[3] = &unk_1002B40A8;
    v25[4] = a1;
    std::string::basic_string(&v26, &__str);
    std::string::basic_string(&v27, a2);
    std::string::basic_string(&__p, &v31);
    uint64_t v20 = *(void **)a4;
    if (*(void *)a4) {
      uint64_t v20 = _Block_copy(v20);
    }
    uint64_t v21 = *(dispatch_object_s **)(a4 + 8);
    aBlock = v20;
    dispatch_object_t object = v21;
    if (v21) {
      dispatch_retain(v21);
    }
    dispatch_async(v19, v25);
    if (object) {
      dispatch_release(object);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
  }

  else
  {
    int v18 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v18)
    {
      if (sub_10015A058(5) && os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "Invalid NCP-Interface. Return back get method",  buf,  2u);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    if (*(void *)a4) {
      uint64_t v22 = _Block_copy(*(const void **)a4);
    }
    else {
      uint64_t v22 = 0LL;
    }
    int v23 = *(dispatch_queue_s **)(a4 + 8);
    *(void *)std::string buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 1174405120LL;
    *(void *)&uint8_t buf[16] = sub_10013C4C8;
    int v34 = &unk_1002B4368;
    if (v22) {
      uint64_t v24 = _Block_copy(v22);
    }
    else {
      uint64_t v24 = 0LL;
    }
    int v37 = 1;
    uint64_t v35 = v24;
    std::string v36 = "";
    dispatch_async(v23, buf);
    if (v35) {
      _Block_release(v35);
    }
    if (v22) {
      _Block_release(v22);
    }
  }

void sub_100130A80( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, void *__p, uint64_t a32, int a33, __int16 a34, char a35, char a36, void *a37, uint64_t a38, int a39, __int16 a40, char a41, char a42)
{
  if (a2) {
    sub_100006EEC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100130B20(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  uint64_t v3 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v3)
  {
    __int128 v4 = v3;
    if (sub_10015A058(5) && os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Posted Internal CMD to WPANTUND Process Queue",  buf,  2u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  uint64_t v5 = *v2;
  std::string::basic_string(&__str, (const std::string *)(a1 + 64));
  std::string::basic_string(&v11, (const std::string *)(a1 + 88));
  std::string::basic_string(&v10, (const std::string *)(a1 + 40));
  uint64_t v6 = *(void **)(a1 + 112);
  if (v6) {
    uint64_t v6 = _Block_copy(v6);
  }
  int v7 = *(dispatch_object_s **)(a1 + 120);
  uint64_t v8 = v6;
  dispatch_object_t v9 = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  sub_100130D90(&__str, (uint64_t)sub_10012FFE8, 0LL, (uint64_t)v2, &v11, &v10, (uint64_t)&v8, &v13);
  sub_10013BC8C(v22, &v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t (***)()))(*(void *)v5 + 56LL))(v5, a1 + 40, v22);
  sub_100006E7C(v22);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v19 < 0) {
    operator delete(__p);
  }
  if (v17 < 0) {
    operator delete(v16);
  }
  if (v15 < 0) {
    operator delete(v14);
  }
  if (v9) {
    dispatch_release(v9);
  }
  if (v8) {
    _Block_release(v8);
  }
}

void sub_100130D18( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, char a30, uint64_t a31, uint64_t a32)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

void sub_100130D90( std::string *__str@<X3>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, const std::string *a5@<X4>, const std::string *a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  *a8 = a2;
  a8[1] = a3;
  sub_10013BBD0((uint64_t)(a8 + 2), (uint64_t)v20);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v26 < 0) {
    operator delete(__p);
  }
  if (v24 < 0) {
    operator delete(v23);
  }
  if (v22 < 0) {
    operator delete(v21);
  }
  if (v16) {
    dispatch_release(v16);
  }
  if (v15) {
    _Block_release(v15);
  }
}

void sub_100130ED8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, char a30)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

void sub_100130F3C(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(void **)(a2 + 112);
  if (v4) {
    __int128 v4 = _Block_copy(v4);
  }
  uint64_t v5 = *(dispatch_object_s **)(a2 + 120);
  *(void *)(a1 + 112) = v4;
  *(void *)(a1 + 120) = v5;
  if (v5) {
    dispatch_retain(v5);
  }
}

void sub_100130FC0(_Unwind_Exception *exception_object)
{
}

void sub_100130FF4(uint64_t a1)
{
  uint64_t v2 = *(dispatch_object_s **)(a1 + 120);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 112);
  if (v3) {
    _Block_release(v3);
  }
}

uint64_t sub_100131064(uint64_t *a1, uint64_t *a2, const std::string *a3, uint64_t a4)
{
  uint64_t v50 = 0LL;
  sub_10000C008((uint64_t)a2, v49);
  memset(&v48, 0, sizeof(v48));
  uint64_t v8 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v8)
  {
    if (sub_10015A058(5) && os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      std::string::size_type v9 = (std::string::size_type)a3;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "WPANTUND-InternalIPCAPI Handling set method handler for client %s",  (uint8_t *)&buf,  0xCu);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  sub_10000AC00(&buf, "property_type");
  std::string v10 = sub_10000ED88(v49, (__n128 *)&buf);
  std::string v11 = sub_1001476B4(v10, 0);
  sub_10000AC00(&__str, "property_name");
  __int16 v12 = sub_10000ED88(v49, (__n128 *)&__str);
  sub_100147B4C(v12, &buf);
  sub_100014D08((uint64_t)&v48, (__int128 *)&buf);
  sub_10000AC00(&__str, "PropSet");
  __int128 v13 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v13)
  {
    if (sub_10015A058(5) && os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      p_str = &__str;
      if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      char v15 = &v48;
      if ((v48.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        char v15 = (std::string *)v48.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_str;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v15;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
      unint64_t v55 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "InternalClientInterface: Handling method handler %s for property %s type %llu",  (uint8_t *)&buf,  0x20u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  if (v11)
  {
    sub_10000AC00(&buf, "property_value_length");
    dispatch_object_t v16 = sub_10000ED88(v49, (__n128 *)&buf);
    signed int v17 = sub_1001476B4(v16, 0);
    sub_10000AC00(&v45, "property_value");
    std::string v18 = sub_10000ED88(v49, &v45);
    sub_100147058(v18, (uint64_t)&v52);
    if (v52.n128_u64[0] == v52.n128_u64[1]) {
      char v19 = 0LL;
    }
    else {
      char v19 = (const void *)v52.n128_u64[0];
    }
    sub_100018E5C(&buf, v19, (uint64_t)v19 + v17);
    sub_100017FCC(&v50, (__n128 *)&buf);
    p_std::string buf = &buf;
    sub_100006F6C((void ***)&p_buf);
    p_std::string buf = (std::string *)&v52;
    sub_100006F6C((void ***)&p_buf);
    if (v46 < 0)
    {
      uint64_t v20 = (void *)v45.n128_u64[0];
LABEL_45:
      operator delete(v20);
    }
  }

  else
  {
    sub_10000AC00(&v52, "property_value");
    uint64_t v21 = sub_10000ED88(v49, &v52);
    sub_100147B4C(v21, &buf);
    if (v53 < 0) {
      operator delete((void *)v52.n128_u64[0]);
    }
    char v22 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v22)
    {
      if (sub_10015A058(5) && os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        int v23 = &buf;
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          int v23 = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        v52.n128_u32[0] = 136315138;
        *(unint64_t *)((char *)v52.n128_u64 + 4) = (unint64_t)v23;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_INFO,  "WPANTUND-InternalIPCAPI Property Value received is %s ",  (uint8_t *)&v52,  0xCu);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    sub_1000200A0(&v50, &buf);
    if ((char)buf.__r_.__value_.__s.__size_ < 0)
    {
      uint64_t v20 = (void *)buf.__r_.__value_.__r.__words[0];
      goto LABEL_45;
    }
  }

  sub_1000FDFA8(&v48);
  if (sub_1000FCAF8(&v48))
  {
    char v24 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v24)
    {
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }
  }

  uint64_t v31 = *a1;
  uint64_t v32 = *a2;
  if (*a2) {
    uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 24LL))(v32);
  }
  uint64_t v41 = v32;
  std::string::basic_string(&v40, a3);
  std::string::basic_string(&v39, &__str);
  std::string::basic_string(&v38, &v48);
  int v33 = *(void **)a4;
  if (*(void *)a4) {
    int v33 = _Block_copy(v33);
  }
  int v34 = *(dispatch_object_s **)(a4 + 8);
  aBlock = v33;
  dispatch_object_t object = v34;
  if (v34) {
    dispatch_retain(v34);
  }
  sub_100131818(&v40, (uint64_t)sub_10012F920, 0LL, (uint64_t)a1, &v41, &v39, &v38, (uint64_t)&aBlock, &v42);
  sub_10013CCA4(v44, &v42);
  (*(void (**)(uint64_t, std::string *, uint64_t *, uint64_t (***)()))(*(void *)v31 + 64LL))( v31,  &v48,  &v50,  v44);
  sub_1000075F0(v44);
  sub_100139EB8((uint64_t)&v43);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 8LL))(v41);
  }
  sub_10000D448((uint64_t)v49);
  uint64_t result = v50;
  if (v50) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v50 + 8LL))(v50);
  }
  return result;
}

void sub_100131668( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, char a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  uint64_t v57 = *(void *)(v55 - 160);
  if (v57) {
    (*(void (**)(uint64_t))(*(void *)v57 + 8LL))(v57);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100131818@<X0>( std::string *__str@<X4>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, uint64_t *a5@<X3>, const std::string *a6@<X5>, const std::string *a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v17 = *a5;
  if (*a5) {
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 24LL))(v17);
  }
  uint64_t v24 = v17;
  std::string::basic_string(&__stra, __str);
  std::string::basic_string(&v22, a6);
  std::string::basic_string(&v21, a7);
  sub_10013B79C(&aBlock, a8);
  sub_10013C5C0((uint64_t)v25, a4, &v24, &__stra, &v22, &v21, (uint64_t)&aBlock);
  sub_10013CBA8(a9, a2, a3, (uint64_t)v25);
  sub_100139EB8((uint64_t)v25);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  uint64_t result = v24;
  if (v24) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
  }
  return result;
}

void sub_10013195C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, uint64_t a30, char a31)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a30) {
    (*(void (**)(uint64_t))(*(void *)a30 + 8LL))(a30);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1001319DC(uint64_t *a1, uint64_t *a2, const std::string *a3, uint64_t a4)
{
  uint64_t v8 = sub_1000738CC(buf, a2);
  sub_10000C008((uint64_t)v8, v51);
  if (*(void *)buf) {
    (*(void (**)(void))(**(void **)buf + 8LL))(*(void *)buf);
  }
  v50[0] = 0LL;
  v50[1] = 0LL;
  termios v49 = v50;
  unsigned int v48 = 0;
  unsigned __int16 v47 = -1;
  sub_10000AC00(buf, "method");
  std::string::size_type v9 = sub_10000ED88((uint64_t **)a2, (__n128 *)buf);
  sub_100147B4C(v9, &__str);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  std::string v10 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v10)
  {
    if (sub_10015A058(5) && os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      p_str = &__str;
      if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      __int16 v12 = a3;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = p_str;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&_BYTE buf[14] = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "WPANTUND-InternalIPCAPI Handling %s method handler for %s",  buf,  0x16u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  sub_10000AC00(buf, "channel_mask");
  __int128 v13 = sub_10000ED88((uint64_t **)a2, (__n128 *)buf);
  unsigned int v48 = sub_1001476B4(v13, 0);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10000AC00(buf, "joiner_flag");
  uint64_t v14 = sub_10000ED88((uint64_t **)a2, (__n128 *)buf);
  BOOL v15 = sub_1001478B8(v14);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10000AC00(buf, "enable_filtering");
  dispatch_object_t v16 = sub_10000ED88((uint64_t **)a2, (__n128 *)buf);
  BOOL v17 = sub_1001478B8(v16);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10000AC00(buf, "pan_id_filter");
  std::string v18 = sub_10000ED88((uint64_t **)a2, (__n128 *)buf);
  unsigned __int16 v47 = (unsigned __int16)sub_1001476B4(v18, 0);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  char v45 = 1;
  sub_10000AC00(buf, "Scan:Discover");
  char v19 = sub_10000ED88(&v49, (__n128 *)buf);
  sub_100020B4C(v19, &v45);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (v48)
  {
    sub_10000AC00(buf, "Scan:ChannelMask");
    uint64_t v20 = sub_10000ED88(&v49, (__n128 *)buf);
    sub_100017F70(v20, &v48);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }

  char v45 = v15;
  sub_10000AC00(buf, "Scan:JoinerFlag");
  std::string v21 = sub_10000ED88(&v49, (__n128 *)buf);
  sub_100020B4C(v21, &v45);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  char v45 = v17;
  sub_10000AC00(buf, "Scan:EnableFiltering");
  std::string v22 = sub_10000ED88(&v49, (__n128 *)buf);
  sub_100020B4C(v22, &v45);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10000AC00(buf, "Scan:PANID");
  int v23 = sub_10000ED88(&v49, (__n128 *)buf);
  sub_100017678(v23, &v47);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v24 = *a1;
  if (*a1)
  {
    sub_10000D19C(v35, (uint64_t *)&v49);
    std::string::basic_string(&v34, a3);
    std::string::basic_string(&v33, &__str);
    uint64_t v25 = *(void **)a4;
    if (*(void *)a4) {
      uint64_t v25 = _Block_copy(v25);
    }
    uint64_t v26 = *(dispatch_object_s **)(a4 + 8);
    uint64_t v31 = v25;
    dispatch_object_t v32 = v26;
    if (v26) {
      dispatch_retain(v26);
    }
    sub_1001320B8((uint64_t)sub_10012FC9C, 0LL, (uint64_t)a1, v35, &v34, &v33, (uint64_t)&v31, &v36);
    sub_10013D984(v44, &v36);
    (*(void (**)(uint64_t, uint64_t **, uint64_t (***)()))(*(void *)v24 + 264LL))(v24, &v49, v44);
    sub_1000075F0(v44);
    if (object) {
      dispatch_release(object);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v41 < 0) {
      operator delete(__p);
    }
    if (v39 < 0) {
      operator delete(v38);
    }
    sub_10000D448((uint64_t)&v37);
    if (v32) {
      dispatch_release(v32);
    }
    if (v31) {
      _Block_release(v31);
    }
    sub_10000D448((uint64_t)v35);
  }

  else
  {
    if (*(void *)a4) {
      uint64_t v27 = _Block_copy(*(const void **)a4);
    }
    else {
      uint64_t v27 = 0LL;
    }
    uint64_t v28 = *(dispatch_queue_s **)(a4 + 8);
    *(void *)std::string buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 1174405120LL;
    *(void *)&uint8_t buf[16] = sub_10013C4C8;
    char v53 = &unk_1002B4368;
    if (v27) {
      uint64_t v29 = _Block_copy(v27);
    }
    else {
      uint64_t v29 = 0LL;
    }
    int v56 = 1;
    int v54 = v29;
    uint64_t v55 = "";
    dispatch_async(v28, buf);
    if (v54) {
      _Block_release(v54);
    }
    if (v27) {
      _Block_release(v27);
    }
  }

  sub_10000D448((uint64_t)&v49);
  return sub_10000D448((uint64_t)v51);
}

void sub_100131F5C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, char a23, uint64_t a24, uint64_t a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, char a40)
{
  if (a2) {
    sub_100006EEC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001320A4()
{
}

uint64_t sub_1001320B8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, const std::string *a5@<X4>, const std::string *a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  *a8 = a1;
  a8[1] = a2;
  sub_10013D8D0((uint64_t)(a8 + 2), (uint64_t)v21);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v26 < 0) {
    operator delete(__p);
  }
  if (v24 < 0) {
    operator delete(v23);
  }
  sub_10000D448((uint64_t)&v22);
  if (v17) {
    dispatch_release(v17);
  }
  if (v16) {
    _Block_release(v16);
  }
  return sub_10000D448((uint64_t)v20);
}

void sub_1001321F4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, char a24, uint64_t a25, uint64_t a26, char a27)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  sub_10000D448((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t sub_100132250(uint64_t a1)
{
  uint64_t v2 = *(dispatch_object_s **)(a1 + 104);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 96);
  if (v3) {
    _Block_release(v3);
  }
  sub_10000D448(a1 + 24);
  return a1;
}

uint64_t sub_1001322B4(uint64_t *a1, uint64_t *a2, const std::string *a3, uint64_t a4)
{
  v41[0] = 0LL;
  v41[1] = 0LL;
  std::string v40 = v41;
  sub_10000C008((uint64_t)a2, v39);
  unsigned int v38 = 0;
  sub_10000AC00(buf, "method");
  uint64_t v8 = sub_10000ED88(v39, (__n128 *)buf);
  sub_100147B4C(v8, &__str);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  std::string::size_type v9 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v9)
  {
    if (sub_10015A058(5) && os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      p_str = &__str;
      if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      std::string v11 = a3;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = p_str;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&_BYTE buf[14] = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "WPANTUND-InternalIPCAPI Handling %s method handler for %s",  buf,  0x16u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  sub_10000AC00(buf, "channel_mask");
  __int16 v12 = sub_10000ED88(v39, (__n128 *)buf);
  unsigned int v13 = sub_1001476B4(v12, 0);
  unsigned int v38 = v13;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v38) {
      goto LABEL_19;
    }
  }

  else if (!v13)
  {
    goto LABEL_19;
  }

  sub_10000AC00(buf, "Scan:ChannelMask");
  uint64_t v14 = sub_10000ED88(&v40, (__n128 *)buf);
  sub_100017F70(v14, &v38);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
LABEL_19:
  uint64_t v15 = *a1;
  if (*a1)
  {
    uint64_t v16 = *a2;
    if (*a2) {
      uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 24LL))(v16);
    }
    uint64_t v27 = v16;
    std::string::basic_string(&v26, a3);
    std::string::basic_string(&v25, &__str);
    dispatch_object_t v17 = *(void **)a4;
    if (*(void *)a4) {
      dispatch_object_t v17 = _Block_copy(v17);
    }
    std::string v18 = *(dispatch_object_s **)(a4 + 8);
    int v23 = v17;
    dispatch_object_t v24 = v18;
    if (v18) {
      dispatch_retain(v18);
    }
    sub_1001327CC(&v26, (uint64_t)sub_10012FC9C, 0LL, (uint64_t)a1, &v27, &v25, (uint64_t)&v23, &v28);
    sub_10013E51C(v36, &v28);
    (*(void (**)(uint64_t, uint64_t **, uint64_t (***)()))(*(void *)v15 + 264LL))(v15, &v40, v36);
    sub_1000075F0(v36);
    if (object) {
      dispatch_release(object);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v33 < 0) {
      operator delete(__p);
    }
    if (v31 < 0) {
      operator delete(v30);
    }
    if (v29) {
      (*(void (**)(uint64_t))(*(void *)v29 + 8LL))(v29);
    }
    if (v24) {
      dispatch_release(v24);
    }
    if (v23) {
      _Block_release(v23);
    }
    if (v27) {
      (*(void (**)(uint64_t))(*(void *)v27 + 8LL))(v27);
    }
  }

  else
  {
    if (*(void *)a4) {
      std::string v19 = _Block_copy(*(const void **)a4);
    }
    else {
      std::string v19 = 0LL;
    }
    uint64_t v20 = *(dispatch_queue_s **)(a4 + 8);
    *(void *)std::string buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 1174405120LL;
    *(void *)&uint8_t buf[16] = sub_10013C4C8;
    uint64_t v43 = &unk_1002B4368;
    if (v19) {
      std::string v21 = _Block_copy(v19);
    }
    else {
      std::string v21 = 0LL;
    }
    int v46 = 1;
    uint64_t v44 = v21;
    char v45 = "";
    dispatch_async(v20, buf);
    if (v44) {
      _Block_release(v44);
    }
    if (v19) {
      _Block_release(v19);
    }
  }

  sub_10000D448((uint64_t)v39);
  return sub_10000D448((uint64_t)&v40);
}

void sub_1001326AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37)
{
}

void sub_1001327B8()
{
}

uint64_t sub_1001327CC@<X0>( std::string *__str@<X4>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, uint64_t *a5@<X3>, const std::string *a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v15 = *a5;
  if (*a5) {
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 24LL))(v15);
  }
  uint64_t v21 = v15;
  std::string::basic_string(&__stra, __str);
  std::string::basic_string(&v19, a6);
  sub_10013B79C(&v17, a7);
  sub_10013E1D4((uint64_t)v22, a4, &v21, &__stra, &v19, (uint64_t)&v17);
  *a8 = a2;
  a8[1] = a3;
  sub_10013E46C((uint64_t)(a8 + 2), (uint64_t)v22);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v27 < 0) {
    operator delete(__p);
  }
  if (v25 < 0) {
    operator delete(v24);
  }
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
  }
  if (v18) {
    dispatch_release(v18);
  }
  if (v17) {
    _Block_release(v17);
  }
  uint64_t result = v21;
  if (v21) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
  }
  return result;
}

void sub_100132928( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, char a25)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a24) {
    (*(void (**)(uint64_t))(*(void *)a24 + 8LL))(a24);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100132990(uint64_t *a1, uint64_t *a2, const std::string *a3, uint64_t a4)
{
  v41[0] = 0LL;
  v41[1] = 0LL;
  std::string v40 = v41;
  sub_10000C008((uint64_t)a2, v39);
  unsigned int v38 = 0;
  sub_10000AC00(buf, "method");
  uint64_t v8 = sub_10000ED88(v39, (__n128 *)buf);
  sub_100147B4C(v8, &__str);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  std::string::size_type v9 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v9)
  {
    if (sub_10015A058(5) && os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      p_str = &__str;
      if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      std::string v11 = a3;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = p_str;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&_BYTE buf[14] = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "WPANTUND-InternalIPCAPI Handling %s method handler for %s",  buf,  0x16u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  sub_10000AC00(buf, "channel_mask");
  __int16 v12 = sub_10000ED88(v39, (__n128 *)buf);
  unsigned int v13 = sub_1001476B4(v12, 0);
  unsigned int v38 = v13;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v38) {
      goto LABEL_19;
    }
  }

  else if (!v13)
  {
    goto LABEL_19;
  }

  sub_10000AC00(buf, "NCP:ChannelMask");
  uint64_t v14 = sub_10000ED88(&v40, (__n128 *)buf);
  sub_100017F70(v14, &v38);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
LABEL_19:
  uint64_t v15 = *a1;
  if (*a1)
  {
    uint64_t v16 = *a2;
    if (*a2) {
      uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 24LL))(v16);
    }
    uint64_t v27 = v16;
    std::string::basic_string(&v26, a3);
    std::string::basic_string(&v25, &__str);
    dispatch_object_t v17 = *(void **)a4;
    if (*(void *)a4) {
      dispatch_object_t v17 = _Block_copy(v17);
    }
    dispatch_object_t v18 = *(dispatch_object_s **)(a4 + 8);
    uint64_t v23 = v17;
    dispatch_object_t v24 = v18;
    if (v18) {
      dispatch_retain(v18);
    }
    sub_1001327CC(&v26, (uint64_t)sub_10012FC9C, 0LL, (uint64_t)a1, &v27, &v25, (uint64_t)&v23, &v28);
    sub_10013E51C(v36, &v28);
    (*(void (**)(uint64_t, uint64_t **, uint64_t (***)()))(*(void *)v15 + 280LL))(v15, &v40, v36);
    sub_1000075F0(v36);
    if (object) {
      dispatch_release(object);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v33 < 0) {
      operator delete(__p);
    }
    if (v31 < 0) {
      operator delete(v30);
    }
    if (v29) {
      (*(void (**)(uint64_t))(*(void *)v29 + 8LL))(v29);
    }
    if (v24) {
      dispatch_release(v24);
    }
    if (v23) {
      _Block_release(v23);
    }
    if (v27) {
      (*(void (**)(uint64_t))(*(void *)v27 + 8LL))(v27);
    }
  }

  else
  {
    if (*(void *)a4) {
      std::string v19 = _Block_copy(*(const void **)a4);
    }
    else {
      std::string v19 = 0LL;
    }
    uint64_t v20 = *(dispatch_queue_s **)(a4 + 8);
    *(void *)std::string buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 1174405120LL;
    *(void *)&uint8_t buf[16] = sub_10013C4C8;
    uint64_t v43 = &unk_1002B4368;
    if (v19) {
      uint64_t v21 = _Block_copy(v19);
    }
    else {
      uint64_t v21 = 0LL;
    }
    int v46 = 1;
    uint64_t v44 = v21;
    char v45 = "";
    dispatch_async(v20, buf);
    if (v44) {
      _Block_release(v44);
    }
    if (v19) {
      _Block_release(v19);
    }
  }

  sub_10000D448((uint64_t)v39);
  return sub_10000D448((uint64_t)&v40);
}

void sub_100132D88( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37)
{
}

void sub_100132E94()
{
}

uint64_t sub_100132EA8(uint64_t *a1, const std::string *a2, uint64_t a3)
{
  v33[0] = 0LL;
  v33[1] = 0LL;
  dispatch_object_t v32 = v33;
  sub_10000AC00(buf, "method");
  uint64_t v6 = sub_10000ED88(&v32, (__n128 *)buf);
  sub_1000B906C(v6, (uint64_t)"Attach");
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10000AC00(&__str, "Attach");
  int v7 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v7)
  {
    if (sub_10015A058(5) && os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      p_str = &__str;
      if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      std::string::size_type v9 = a2;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = p_str;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&_BYTE buf[14] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "WPANTUND-InternalIPCAPI Handling %s method handler for %s",  buf,  0x16u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  uint64_t v10 = *a1;
  if (*a1)
  {
    sub_10000D19C(v21, (uint64_t *)&v32);
    std::string::basic_string(&v20, a2);
    std::string::basic_string(&v19, &__str);
    std::string v11 = *(void **)a3;
    if (*(void *)a3) {
      std::string v11 = _Block_copy(v11);
    }
    __int16 v12 = *(dispatch_object_s **)(a3 + 8);
    dispatch_object_t v17 = v11;
    dispatch_object_t v18 = v12;
    if (v12) {
      dispatch_retain(v12);
    }
    sub_1001320B8((uint64_t)sub_10012FC9C, 0LL, (uint64_t)a1, v21, &v20, &v19, (uint64_t)&v17, &v22);
    sub_10013D984(v30, &v22);
    (*(void (**)(uint64_t, uint64_t (***)()))(*(void *)v10 + 32LL))(v10, v30);
    sub_1000075F0(v30);
    if (object) {
      dispatch_release(object);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v27 < 0) {
      operator delete(__p);
    }
    if (v25 < 0) {
      operator delete(v24);
    }
    sub_10000D448((uint64_t)&v23);
    if (v18) {
      dispatch_release(v18);
    }
    if (v17) {
      _Block_release(v17);
    }
    sub_10000D448((uint64_t)v21);
  }

  else
  {
    if (*(void *)a3) {
      unsigned int v13 = _Block_copy(*(const void **)a3);
    }
    else {
      unsigned int v13 = 0LL;
    }
    uint64_t v14 = *(dispatch_queue_s **)(a3 + 8);
    *(void *)std::string buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 1174405120LL;
    *(void *)&uint8_t buf[16] = sub_10013C4C8;
    uint64_t v35 = &unk_1002B4368;
    if (v13) {
      uint64_t v15 = _Block_copy(v13);
    }
    else {
      uint64_t v15 = 0LL;
    }
    int v38 = 1;
    __int128 v36 = v15;
    uint64_t v37 = "";
    dispatch_async(v14, buf);
    if (v36) {
      _Block_release(v36);
    }
    if (v13) {
      _Block_release(v13);
    }
  }

  return sub_10000D448((uint64_t)&v32);
}

void sub_1001331F8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, char a24, uint64_t a25, uint64_t a26, char a27)
{
}

uint64_t sub_1001332D8(uint64_t *a1, const std::string *a2, uint64_t a3)
{
  v33[0] = 0LL;
  v33[1] = 0LL;
  dispatch_object_t v32 = v33;
  sub_10000AC00(&__str, "Leave");
  sub_10000AC00(buf, "method");
  uint64_t v6 = sub_10000ED88(&v32, (__n128 *)buf);
  sub_1000200A0(v6, &__str);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  int v7 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v7)
  {
    if (sub_10015A058(5) && os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      p_str = &__str;
      if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      std::string::size_type v9 = a2;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = p_str;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&_BYTE buf[14] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "WPANTUND-InternalIPCAPI Handling %s method handler for %s",  buf,  0x16u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  uint64_t v10 = *a1;
  if (*a1)
  {
    sub_10000D19C(v21, (uint64_t *)&v32);
    std::string::basic_string(&v20, a2);
    std::string::basic_string(&v19, &__str);
    std::string v11 = *(void **)a3;
    if (*(void *)a3) {
      std::string v11 = _Block_copy(v11);
    }
    __int16 v12 = *(dispatch_object_s **)(a3 + 8);
    dispatch_object_t v17 = v11;
    dispatch_object_t v18 = v12;
    if (v12) {
      dispatch_retain(v12);
    }
    sub_1001320B8((uint64_t)sub_10012FC9C, 0LL, (uint64_t)a1, v21, &v20, &v19, (uint64_t)&v17, &v22);
    sub_10013D984(v30, &v22);
    (*(void (**)(uint64_t, uint64_t (***)()))(*(void *)v10 + 24LL))(v10, v30);
    sub_1000075F0(v30);
    if (object) {
      dispatch_release(object);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v27 < 0) {
      operator delete(__p);
    }
    if (v25 < 0) {
      operator delete(v24);
    }
    sub_10000D448((uint64_t)&v23);
    if (v18) {
      dispatch_release(v18);
    }
    if (v17) {
      _Block_release(v17);
    }
    sub_10000D448((uint64_t)v21);
  }

  else
  {
    if (*(void *)a3) {
      unsigned int v13 = _Block_copy(*(const void **)a3);
    }
    else {
      unsigned int v13 = 0LL;
    }
    uint64_t v14 = *(dispatch_queue_s **)(a3 + 8);
    *(void *)std::string buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 1174405120LL;
    *(void *)&uint8_t buf[16] = sub_10013C4C8;
    uint64_t v35 = &unk_1002B4368;
    if (v13) {
      uint64_t v15 = _Block_copy(v13);
    }
    else {
      uint64_t v15 = 0LL;
    }
    int v38 = 1;
    __int128 v36 = v15;
    uint64_t v37 = "";
    dispatch_async(v14, buf);
    if (v36) {
      _Block_release(v36);
    }
    if (v13) {
      _Block_release(v13);
    }
  }

  return sub_10000D448((uint64_t)&v32);
}

void sub_100133624( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, char a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_100133708(uint64_t *a1, const std::string *a2, uint64_t a3)
{
  uint64_t v6 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v6)
  {
    if (sub_10015A058(5) && os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      p_str = &__str;
      if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      uint64_t v8 = a2;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = p_str;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&_BYTE buf[14] = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "WPANTUND-InternalIPCAPI Handling %s method handler for %s",  buf,  0x16u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  *(void *)&uint8_t buf[8] = 0LL;
  *(void *)&uint8_t buf[16] = 0LL;
  *(void *)std::string buf = &buf[8];
  sub_10000AC00(&v27, "method");
  std::string::size_type v9 = sub_10000ED88((uint64_t **)buf, &v27);
  sub_1000200A0(v9, &__str);
  if (v28 < 0) {
    operator delete((void *)v27.n128_u64[0]);
  }
  uint64_t v10 = *a1;
  sub_10000D19C(v17, (uint64_t *)buf);
  std::string::basic_string(&v16, a2);
  std::string::basic_string(&v15, &__str);
  std::string v11 = *(void **)a3;
  if (*(void *)a3) {
    std::string v11 = _Block_copy(v11);
  }
  __int16 v12 = *(dispatch_object_s **)(a3 + 8);
  unsigned int v13 = v11;
  dispatch_object_t v14 = v12;
  if (v12) {
    dispatch_retain(v12);
  }
  sub_1001320B8((uint64_t)sub_10012FC9C, 0LL, (uint64_t)a1, v17, &v16, &v15, (uint64_t)&v13, &v18);
  sub_10013D984(v26, &v18);
  (*(void (**)(uint64_t, uint64_t (***)()))(*(void *)v10 + 40LL))(v10, v26);
  sub_1000075F0(v26);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v23 < 0) {
    operator delete(__p);
  }
  if (v21 < 0) {
    operator delete(v20);
  }
  sub_10000D448((uint64_t)&v19);
  if (v14) {
    dispatch_release(v14);
  }
  if (v13) {
    _Block_release(v13);
  }
  sub_10000D448((uint64_t)v17);
  sub_10000D448((uint64_t)buf);
}

void sub_1001339B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, char a24, uint64_t a25, uint64_t a26, char a27)
{
  if (a2) {
    sub_100006EEC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100133A88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Controller = FillmoreCreateController(kCFAllocatorDefault);
  uint64_t v5 = (const void *)Controller;
  if (Controller)
  {
    if ((FillmoreReset(Controller) & 1) != 0)
    {
      uint64_t v6 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v6)
      {
        if (sub_10015A058(6) && os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          buf.n128_u16[0] = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "fillmoreController hard reset cmd successful",  (uint8_t *)&buf,  2u);
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }

      unsigned int v8 = 0;
    }

    else
    {
      std::string::size_type v9 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v9)
      {
        if (sub_10015A058(5))
        {
          unsigned int v8 = 1;
          if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
          {
            buf.n128_u16[0] = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "fillmoreController reset failure",  (uint8_t *)&buf,  2u);
          }

          goto LABEL_24;
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }

      unsigned int v8 = 1;
    }

void sub_100133DFC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, uint64_t a28, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v29) {
    _Block_release(v29);
  }
  sub_10000D448((uint64_t)&a9);
  sub_10000D448((uint64_t)&a13);
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_100133E88(uint64_t *a1, uint64_t *a2)
{
  __int128 v4 = operator new(0x10uLL);
  uint64_t v5 = *a2;
  *__int128 v4 = &off_1002B2118;
  v4[1] = v5;
  uint64_t v6 = *a1;
  *a1 = (uint64_t)v4;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  return a1;
}

void sub_100133EE0(void *a1, std::string *a2, void *a3, uint64_t a4)
{
  int v7 = dispatch_group_create();
  unsigned int v8 = (void *)a1[7];
  int64x2_t v61 = v8;
  std::string::size_type v9 = a1 + 8;
  if (v8 != a1 + 8)
  {
    char v41 = a1;
    do
    {
      sub_10013A0DC(&__str, (const std::string *)(v8 + 4));
      std::string::basic_string(&v57, &__str);
      uint64_t v10 = v59;
      std::string v11 = v60;
      uint64_t v55 = v59;
      int v56 = v60;
      if (v60)
      {
        p_shared_owners = &v60->__shared_owners_;
        do
          unint64_t v13 = __ldxr((unint64_t *)p_shared_owners);
        while (__stxr(v13 + 1, (unint64_t *)p_shared_owners));
      }

      if (!v10)
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          uint64_t v19 = a2;
          std::string v20 = &v57;
          if ((v57.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            std::string v20 = (std::string *)v57.__r_.__value_.__r.__words[0];
          }
          char v21 = (void *)a1[9];
          *(_DWORD *)__n128 buf = 136315650;
          *(void *)&uint8_t buf[4] = v19;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&_BYTE buf[14] = v20;
          *(_WORD *)&buf[22] = 2048;
          int32x4_t v63 = v21;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "ClientPtr is null.Event name:%s clientName:%s numClients:%lu ",  buf,  0x20u);
        }

        goto LABEL_66;
      }

      if ((sub_1000B750C(v10) & 1) == 0)
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
        {
          __int128 v22 = a2;
          char v23 = &v57;
          if ((v57.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            char v23 = (std::string *)v57.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)__n128 buf = 136315394;
          *(void *)&uint8_t buf[4] = v22;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&_BYTE buf[14] = v23;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "Events are turned off, event:%s not sent to client: %s , continue to next client",  buf,  0x16u);
        }

        goto LABEL_66;
      }

      sub_1000B7500(v10, &v53);
      uint64_t v14 = sub_1000AA160(v53, (const void **)&a2->__r_.__value_.__l.__data_);
      if (v53 + 8 != v14)
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
        {
          std::string v15 = a2;
          uint64_t v16 = &v57;
          if ((v57.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            uint64_t v16 = (std::string *)v57.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)__n128 buf = 136315394;
          *(void *)&uint8_t buf[4] = v15;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&_BYTE buf[14] = v16;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "Sending internal event: %s, to: %s",  buf,  0x16u);
        }

        dispatch_object_t v17 = *(const void **)(v14 + 56);
        if (v17) {
          __int128 v18 = _Block_copy(v17);
        }
        else {
          __int128 v18 = 0LL;
        }
        dispatch_object_t v24 = *(dispatch_queue_s **)(v14 + 64);
        char v51 = v18;
        __n128 v52 = v24;
        if (v24)
        {
          dispatch_retain(v24);
          if (!v18)
          {
            dispatch_release(v24);
            goto LABEL_64;
          }

          BOOL v25 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO);
          if (v25)
          {
            uint64_t v26 = a4;
            __n128 v27 = v7;
            char v28 = a2;
            int size = (char)v57.__r_.__value_.__s.__size_;
            std::string::size_type v30 = v57.__r_.__value_.__r.__words[0];
            uint64_t SystemTime = TelephonyUtilGetSystemTime(v25);
            *(_DWORD *)__n128 buf = 136315650;
            dispatch_object_t v32 = &v57;
            if (size < 0) {
              dispatch_object_t v32 = (std::string *)v30;
            }
            *(void *)&uint8_t buf[4] = v28;
            *(_WORD *)&buf[12] = 2080;
            *(void *)&_BYTE buf[14] = v32;
            *(_WORD *)&buf[22] = 2048;
            int32x4_t v63 = (void *)SystemTime;
            _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "Sending internal event: %s, to: %s, at: %llu",  buf,  0x20u);
            int v7 = v27;
            a4 = v26;
            a1 = v41;
          }

          dispatch_retain(v24);
          dispatch_release(v24);
          if (*a3) {
            uint64_t v33 = (*(uint64_t (**)(void))(*(void *)*a3 + 24LL))(*a3);
          }
          else {
            uint64_t v33 = 0LL;
          }
          std::string v34 = _Block_copy(v18);
          uint64_t v35 = v34;
          *(void *)__n128 buf = _NSConcreteStackBlock;
          *(void *)&uint8_t buf[8] = 1174405120LL;
          *(void *)&uint8_t buf[16] = sub_10013ED20;
          int32x4_t v63 = &unk_1002B4428;
          if (v34) {
            __int128 v36 = _Block_copy(v34);
          }
          else {
            __int128 v36 = 0LL;
          }
          int32x4_t v64 = v36;
          if (v33) {
            uint64_t v37 = (*(uint64_t (**)(uint64_t))(*(void *)v33 + 24LL))(v33);
          }
          else {
            uint64_t v37 = 0LL;
          }
          uint64_t v65 = v37;
          dispatch_async(v24, buf);
          if (v65) {
            (*(void (**)(uint64_t))(*(void *)v65 + 8LL))(v65);
          }
          if (v64) {
            _Block_release(v64);
          }
          if (v35) {
            _Block_release(v35);
          }
          if (v33) {
            (*(void (**)(uint64_t))(*(void *)v33 + 8LL))(v33);
          }
          dispatch_group_enter(v7);
          block[0] = _NSConcreteStackBlock;
          block[1] = 1174405120LL;
          block[2] = sub_100134A70;
          block[3] = &unk_1002B4140;
          std::string::basic_string(&v48, &v57);
          std::string::basic_string(&__p, a2);
          uint64_t v50 = v7;
          dispatch_async(v24, block);
          dispatch_release(v24);
LABEL_63:
          _Block_release(v18);
          goto LABEL_64;
        }

        if (v18) {
          goto LABEL_63;
        }
      }

void sub_100134500( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, void *__p, uint64_t a34, int a35, __int16 a36, char a37, char a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43, uint64_t a44, char a45, uint64_t a46, char a47)
{
  if (a2) {
    sub_100006EEC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001345E0(uint64_t a1)
{
  unint64_t SystemTime = TelephonyUtilGetSystemTime(a1);
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  uint64_t v4 = SystemTime - v3;
  if (SystemTime < v3 || __OFSUB__(qword_1002C98A0, 1LL)) {
    __break(0x5515u);
  }
  unint64_t v5 = SystemTime;
  --qword_1002C98A0;
  uint64_t v6 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v6)
  {
    int v7 = v6;
    if (sub_10015A058(5) && os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      unsigned int v8 = (void *)(a1 + 40);
      int v9 = 136316162;
      uint64_t v10 = v8;
      __int16 v11 = 2048;
      unint64_t v12 = v5;
      __int16 v13 = 2048;
      uint64_t v14 = v4;
      __int16 v15 = 2048;
      uint64_t v16 = qword_1002C9898;
      __int16 v17 = 2048;
      uint64_t v18 = qword_1002C98A0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "All Internal Clients Rcvd the Property Changed Event: %s, at: %llu, conf_time: %lld numPendingEventsToBeSent:%ll u numPendingEventsToRcvResponse: %lld",  (uint8_t *)&v9,  0x34u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

void sub_100134740(uint64_t a1)
{
  if (__OFSUB__(qword_1002C9898, 1LL)) {
    __break(0x5515u);
  }
  uint64_t v2 = *(void **)(a1 + 32);
  --qword_1002C9898;
  unint64_t v3 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v3)
  {
    uint64_t v4 = v3;
    if (sub_10015A058(5))
    {
      BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
      if (v5)
      {
        uint64_t v6 = (void *)(a1 + 40);
        *(_DWORD *)__n128 buf = 136315906;
        __int16 v15 = v6;
        __int16 v16 = 2048;
        uint64_t SystemTime = TelephonyUtilGetSystemTime(v5);
        __int16 v18 = 2048;
        uint64_t v19 = qword_1002C9898;
        __int16 v20 = 2048;
        uint64_t v21 = qword_1002C98A0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Posted event (%s) to Internal Broadcast Event Handler, at: %llu, numPendingEventsToBeSent: %lld numPendingEven tsToRcvResponse:%lld ",  buf,  0x2Au);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  std::string::basic_string(&v13, (const std::string *)(a1 + 40));
  uint64_t v7 = *(void *)(a1 + 64);
  if (v7) {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 24LL))(v7);
  }
  uint64_t v12 = v7;
  unsigned int v8 = *(void **)(a1 + 72);
  if (v8) {
    unsigned int v8 = _Block_copy(v8);
  }
  int v9 = *(dispatch_object_s **)(a1 + 80);
  aBlock = v8;
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  sub_100133EE0(v2, &v13, &v12, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
  }
}

void sub_100134914( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a2) {
    sub_100006EEC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100134970(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 64);
  if (v4) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  }
  *(void *)(a1 + 64) = v4;
  BOOL v5 = *(void **)(a2 + 72);
  if (v5) {
    BOOL v5 = _Block_copy(v5);
  }
  uint64_t v6 = *(dispatch_object_s **)(a2 + 80);
  *(void *)(a1 + 72) = v5;
  *(void *)(a1 + 80) = v6;
  if (v6) {
    dispatch_retain(v6);
  }
}

void sub_1001349F0(_Unwind_Exception *exception_object)
{
}

void sub_100134A0C(uint64_t a1)
{
  uint64_t v2 = *(dispatch_object_s **)(a1 + 80);
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = *(const void **)(a1 + 72);
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
}

void sub_100134A70(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    uint64_t v2 = (void *)(a1 + 32);
    unint64_t v3 = (void *)(a1 + 56);
    int v4 = 136315650;
    BOOL v5 = v2;
    __int16 v6 = 2080;
    uint64_t v7 = v3;
    __int16 v8 = 2048;
    uint64_t SystemTime = TelephonyUtilGetSystemTime();
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "Received callback from internal client: %s for event: %s, at: %llu",  (uint8_t *)&v4,  0x20u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 80));
}

std::string *sub_100134B58(uint64_t a1, uint64_t a2)
{
  return std::string::basic_string((std::string *)(a1 + 56), (const std::string *)(a2 + 56));
}

void sub_100134B9C(_Unwind_Exception *exception_object)
{
}

void sub_100134BB8(uint64_t a1)
{
}

uint64_t sub_100134BFC(uint64_t a1)
{
  return a1;
}

void sub_100134C34(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund.xpcserver", "default");
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_INFO);
  if (v3)
  {
    int v4 = (void *)(a1 + 32);
    *(_DWORD *)int v9 = 136315394;
    *(void *)&void v9[4] = v4;
    *(_WORD *)&v9[12] = 2048;
    *(void *)&v9[14] = TelephonyUtilGetSystemTime(v3);
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "All clients were informed for: %s at: %llu",  v9,  0x16u);
  }

  BOOL v5 = *(const void **)(a1 + 56);
  if (v5) {
    __int16 v6 = _Block_copy(v5);
  }
  else {
    __int16 v6 = 0LL;
  }
  uint64_t v7 = *(dispatch_queue_s **)(a1 + 64);
  *(void *)int v9 = _NSConcreteStackBlock;
  *(void *)&v9[8] = 1174405120LL;
  *(void *)&v9[16] = sub_10013EE54;
  uint64_t v10 = &unk_1002B4458;
  if (v6) {
    __int16 v8 = _Block_copy(v6);
  }
  else {
    __int16 v8 = 0LL;
  }
  aBlock = v8;
  dispatch_async(v7, v9);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v6) {
    _Block_release(v6);
  }
}

void sub_100134D88(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100006EEC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100134DA8(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a2 + 56);
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  BOOL v5 = *(dispatch_object_s **)(a2 + 64);
  *(void *)(a1 + sub_10000D448(v30 - 56) = v4;
  *(void *)(a1 + 64) = v5;
  if (v5) {
    dispatch_retain(v5);
  }
}

void sub_100134E00(uint64_t a1)
{
  uint64_t v2 = *(dispatch_object_s **)(a1 + 64);
  if (v2) {
    dispatch_release(v2);
  }
  BOOL v3 = *(const void **)(a1 + 56);
  if (v3) {
    _Block_release(v3);
  }
}

uint64_t sub_100134E50(uint64_t *a1, uint64_t *a2, const std::string *a3, uint64_t a4)
{
  v50[0] = 0LL;
  v50[1] = 0LL;
  termios v49 = v50;
  sub_10000C008((uint64_t)a2, &v47);
  char v45 = 0LL;
  v46[0] = 0LL;
  v46[1] = 0LL;
  __int128 v42 = 0LL;
  uint64_t v43 = 0LL;
  uint64_t v44 = 0LL;
  sub_10000AC00(buf, "method");
  __int16 v8 = sub_10000ED88(&v47, (__n128 *)buf);
  sub_100147B4C(v8, &__str);
  if (v56 < 0) {
    operator delete(*(void **)buf);
  }
  int v9 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v9)
  {
    if (sub_10015A058(5) && os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      p_str = &__str;
      if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      __int16 v11 = a3;
      *(_DWORD *)__n128 buf = 136315394;
      *(void *)&uint8_t buf[4] = p_str;
      __int16 v54 = 2080;
      uint64_t v55 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "WPANTUND-InternalIPCAPI:interface_send_network_diagnostics_req: Handling %s method handler for %s",  buf,  0x16u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  sub_10000AC00(buf, "destination");
  uint64_t v12 = (_BYTE *)sub_1000AA160((uint64_t)&v47, (const void **)buf);
  if (v56 < 0) {
    operator delete(*(void **)buf);
  }
  if (v48 != v12)
  {
    sub_10000AC00(&__p, "destination");
    std::string v13 = sub_10000ED88(&v47, &__p);
    sub_100147058(v13, (uint64_t)buf);
    sub_100006EFC((uint64_t)&v45, (__n128 *)buf);
    __dst[0] = (void **)buf;
    sub_100006F6C(__dst);
    if (v39 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
  }

  if (v46[0] - (void)v45 == 16LL)
  {
    __int128 v40 = *v45;
    sub_10000AC00(buf, "tlv");
    uint64_t v14 = (_BYTE *)sub_1000AA160((uint64_t)&v47, (const void **)buf);
    if (v56 < 0) {
      operator delete(*(void **)buf);
    }
    if (v48 != v14)
    {
      sub_10000AC00(&__p, "tlv");
      __int16 v15 = sub_10000ED88(&v47, &__p);
      sub_100147058(v15, (uint64_t)buf);
      sub_100006EFC((uint64_t)&v42, (__n128 *)buf);
      char v51 = (void **)buf;
      sub_100006F6C(&v51);
      if (v39 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
    }

    unsigned __int8 v16 = (_BYTE)v43 - (_BYTE)v42;
    if (v43 == v42) {
      __int16 v17 = 0LL;
    }
    else {
      __int16 v17 = v42;
    }
    memcpy(__dst, v17, (char *)v43 - (char *)v42);
    uint64_t v18 = *a1;
    uint64_t v19 = *a2;
    if (*a2) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 24LL))(v19);
    }
    uint64_t v28 = v19;
    std::string::basic_string(&v27, a3);
    std::string::basic_string(&v26, &__str);
    __int16 v20 = *(void **)a4;
    if (*(void *)a4) {
      __int16 v20 = _Block_copy(v20);
    }
    uint64_t v21 = *(dispatch_object_s **)(a4 + 8);
    dispatch_object_t v24 = v20;
    dispatch_object_t v25 = v21;
    if (v21) {
      dispatch_retain(v21);
    }
    sub_1001327CC(&v27, (uint64_t)sub_10012FC9C, 0LL, (uint64_t)a1, &v28, &v26, (uint64_t)&v24, &v29);
    sub_10013EEB0(v37, &v29);
    (*(void (**)(uint64_t, __int128 *, void ***, void, uint64_t (***)()))(*(void *)v18 + 192LL))( v18,  &v40,  __dst,  v16,  v37);
    sub_100006E7C(v37);
    if (object) {
      dispatch_release(object);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v34 < 0) {
      operator delete(v33);
    }
    if (v32 < 0) {
      operator delete(v31);
    }
    if (v30) {
      (*(void (**)(uint64_t))(*(void *)v30 + 8LL))(v30);
    }
    if (v25) {
      dispatch_release(v25);
    }
    if (v24) {
      _Block_release(v24);
    }
    if (v28) {
      (*(void (**)(uint64_t))(*(void *)v28 + 8LL))(v28);
    }
  }

  else
  {
    __int128 v22 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v22)
    {
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }
  }

  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v42;
  sub_100006F6C((void ***)&__str);
  __int128 v42 = (void **)&v45;
  sub_100006F6C(&v42);
  sub_10000D448((uint64_t)&v47);
  return sub_10000D448((uint64_t)&v49);
}

void sub_100135320( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, int a42, __int16 a43, char a44, char a45, uint64_t a46, uint64_t a47, void *__p, uint64_t a49, int a50,__int16 a51,char a52,char a53)
{
  if (a2) {
    sub_100006EEC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100135460()
{
}

uint64_t sub_100135474(uint64_t *a1, uint64_t *a2, const std::string *a3, uint64_t a4)
{
  v84[0] = 0LL;
  v84[1] = 0LL;
  uint64_t v83 = v84;
  sub_10000C008((uint64_t)a2, &v81);
  memset(&v80, 0, sizeof(v80));
  unsigned __int16 v79 = 0;
  unsigned int v78 = 0;
  unsigned __int16 v77 = 0;
  uint64_t v75 = 0LL;
  unsigned int v76 = 0LL;
  uint64_t v73 = 0LL;
  uint64_t v74 = 0LL;
  unsigned int v72 = 0;
  memset(&v71, 0, sizeof(v71));
  uint64_t v68 = 0LL;
  uint64_t v69 = 0LL;
  uint64_t v70 = 0LL;
  memset(v67, 0, sizeof(v67));
  int32x4_t v64 = 0LL;
  uint64_t v65 = 0LL;
  uint64_t v66 = 0LL;
  sub_10000AC00(&buf, "method");
  __int16 v8 = sub_10000ED88(&v81, (__n128 *)&buf);
  sub_100147B4C(v8, &__str);
  int v9 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v9)
  {
    if (sub_10015A058(5) && os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      p_str = &__str;
      if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      std::string::size_type v11 = (std::string::size_type)a3;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_str;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "WPANTUND-InternalIPCAPI Handling %s method handler for %s",  (uint8_t *)&buf,  0x16u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  sub_10000AC00(&__p, "network_name");
  uint64_t v12 = sub_10000ED88(&v81, &__p);
  sub_100147B4C(v12, &buf);
  sub_100014D08((uint64_t)&v80, (__int128 *)&buf);
  if (v62 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  sub_10000AC00(&buf, "channel");
  std::string v13 = (_BYTE *)sub_1000AA160((uint64_t)&v81, (const void **)&buf.__r_.__value_.__l.__data_);
  if (v82 != v13)
  {
    sub_10000AC00(&buf, "channel");
    uint64_t v14 = sub_10000ED88(&v81, (__n128 *)&buf);
    unsigned __int16 v79 = (unsigned __int16)sub_1001476B4(v14, 0);
  }

  sub_10000AC00(&buf, "channel_mask");
  __int16 v15 = (_BYTE *)sub_1000AA160((uint64_t)&v81, (const void **)&buf.__r_.__value_.__l.__data_);
  if (v82 != v15)
  {
    sub_10000AC00(&buf, "channel_mask");
    unsigned __int8 v16 = sub_10000ED88(&v81, (__n128 *)&buf);
    unsigned int v78 = sub_1001476B4(v16, 0);
  }

  sub_10000AC00(&buf, "panid");
  __int16 v17 = (_BYTE *)sub_1000AA160((uint64_t)&v81, (const void **)&buf.__r_.__value_.__l.__data_);
  if (v82 != v17)
  {
    sub_10000AC00(&buf, "panid");
    uint64_t v18 = sub_10000ED88(&v81, (__n128 *)&buf);
    unsigned __int16 v77 = (unsigned __int16)sub_1001476B4(v18, 0);
  }

  sub_10000AC00(&buf, "xpanid");
  uint64_t v19 = (_BYTE *)sub_1000AA160((uint64_t)&v81, (const void **)&buf.__r_.__value_.__l.__data_);
  if (v82 != v19)
  {
    sub_10000AC00(&buf, "xpanid");
    __int16 v20 = sub_10000ED88(&v81, (__n128 *)&buf);
    unsigned int v76 = sub_1001476B4(v20, 0);
  }

  sub_10000AC00(&buf, "network_key");
  uint64_t v21 = (_BYTE *)sub_1000AA160((uint64_t)&v81, (const void **)&buf.__r_.__value_.__l.__data_);
  if (v82 != v21)
  {
    sub_10000AC00(&__p, "network_key");
    __int128 v22 = sub_10000ED88(&v81, &__p);
    sub_100147058(v22, (uint64_t)&buf);
    sub_100006EFC((uint64_t)&v73, (__n128 *)&buf);
    p_std::string buf = &buf;
    sub_100006F6C((void ***)&p_buf);
    if (v62 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
  }

  sub_10000AC00(&buf, "key_index");
  char v23 = (_BYTE *)sub_1000AA160((uint64_t)&v81, (const void **)&buf.__r_.__value_.__l.__data_);
  if (v82 != v23)
  {
    sub_10000AC00(&buf, "key_index");
    dispatch_object_t v24 = sub_10000ED88(&v81, (__n128 *)&buf);
    unsigned int v72 = sub_1001476B4(v24, 0);
  }

  sub_10000AC00(&buf, "node_type");
  dispatch_object_t v25 = (_BYTE *)sub_1000AA160((uint64_t)&v81, (const void **)&buf.__r_.__value_.__l.__data_);
  if (v82 != v25)
  {
    sub_10000AC00(&__p, "node_type");
    std::string v26 = sub_10000ED88(&v81, &__p);
    sub_100147B4C(v26, &buf);
    sub_100014D08((uint64_t)&v71, (__int128 *)&buf);
    if (v62 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
  }

  sub_10000AC00(&buf, "mesh_local_prefix");
  std::string v27 = (_BYTE *)sub_1000AA160((uint64_t)&v81, (const void **)&buf.__r_.__value_.__l.__data_);
  if (v82 != v27)
  {
    sub_10000AC00(&__p, "mesh_local_prefix");
    uint64_t v28 = sub_10000ED88(&v81, &__p);
    sub_100147058(v28, (uint64_t)&buf);
    sub_100006EFC((uint64_t)&v68, (__n128 *)&buf);
    p_std::string buf = &buf;
    sub_100006F6C((void ***)&p_buf);
    if (v62 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
  }

  sub_10000AC00(&buf, "legacy_prefix");
  __int128 v29 = (_BYTE *)sub_1000AA160((uint64_t)&v81, (const void **)&buf.__r_.__value_.__l.__data_);
  if (v82 != v29)
  {
    sub_10000AC00(&__p, "legacy_prefix");
    uint64_t v30 = sub_10000ED88(&v81, &__p);
    sub_100147058(v30, (uint64_t)&buf);
    sub_100006EFC((uint64_t)&v64, (__n128 *)&buf);
    p_std::string buf = &buf;
    sub_100006F6C((void ***)&p_buf);
    if (v62 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
  }

  sub_10000AC00(&buf, "Network:Name");
  char v31 = sub_10000ED88(&v83, (__n128 *)&buf);
  sub_1000200A0(v31, &v80);
  std::string::size_type size = v71.__r_.__value_.__s.__size_;
  if ((v71.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type size = v71.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    sub_10000AC00(&buf, "Network:NodeType");
    uint64_t v33 = sub_10000ED88(&v83, (__n128 *)&buf);
    sub_1000200A0(v33, &v71);
  }

  if (v79)
  {
    sub_10000AC00(&buf, "NCP:Channel");
    char v34 = sub_10000ED88(&v83, (__n128 *)&buf);
    sub_100017678(v34, &v79);
  }

  if (v78)
  {
    sub_10000AC00(&buf, "NCP:ChannelMask");
    uint64_t v35 = sub_10000ED88(&v83, (__n128 *)&buf);
    sub_100017F70(v35, &v78);
  }

  if (v77)
  {
    sub_10000AC00(&buf, "Network:PANID");
    __int128 v36 = sub_10000ED88(&v83, (__n128 *)&buf);
    sub_100017678(v36, &v77);
  }

  if (v76)
  {
    sub_10000AC00(&buf, "Network:XPANID");
    uint64_t v37 = sub_10000ED88(&v83, (__n128 *)&buf);
    sub_100017620(v37, (uint64_t *)&v76);
  }

  if (v74 != v73)
  {
    sub_10000AC00(&buf, "Network:Key");
    int v38 = sub_10000ED88(&v83, (__n128 *)&buf);
    sub_1000200F8(v38, (uint64_t)&v73);
  }

  if (v72)
  {
    sub_10000AC00(&buf, "Network:KeyIndex");
    char v39 = sub_10000ED88(&v83, (__n128 *)&buf);
    sub_100017F70(v39, &v72);
  }

  if (v69 != v68)
  {
    sub_10000AC00(&buf, "IPv6:MeshLocalPrefix");
    __int128 v40 = sub_10000ED88(&v83, (__n128 *)&buf);
    sub_1000200F8(v40, (uint64_t)&v68);
  }

  if (v65 != v64)
  {
    sub_10000AC00(&buf, "com.nestlabs.internal:Legacy:MeshLocalPrefix");
    char v41 = sub_10000ED88(&v83, (__n128 *)&buf);
    sub_1000200F8(v41, (uint64_t)&v64);
  }

  uint64_t v42 = *a1;
  uint64_t v43 = *a2;
  if (*a2) {
    uint64_t v43 = (*(uint64_t (**)(uint64_t))(*(void *)v43 + 24LL))(v43);
  }
  uint64_t v51 = v43;
  std::string::basic_string(&v50, a3);
  std::string::basic_string(&v49, &__str);
  uint64_t v44 = *(void **)a4;
  if (*(void *)a4) {
    uint64_t v44 = _Block_copy(v44);
  }
  char v45 = *(dispatch_object_s **)(a4 + 8);
  unsigned __int16 v47 = v44;
  dispatch_object_t v48 = v45;
  if (v45) {
    dispatch_retain(v45);
  }
  sub_1001327CC(&v50, (uint64_t)sub_10012FC9C, 0LL, (uint64_t)a1, &v51, &v49, (uint64_t)&v47, &v52);
  sub_10013E51C(v60, &v52);
  (*(void (**)(uint64_t, uint64_t **, uint64_t (***)()))(*(void *)v42 + 16LL))(v42, &v83, v60);
  sub_1000075F0(v60);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v57 < 0) {
    operator delete(v56);
  }
  if (v55 < 0) {
    operator delete(v54);
  }
  if (v53) {
    (*(void (**)(uint64_t))(*(void *)v53 + 8LL))(v53);
  }
  if (v48) {
    dispatch_release(v48);
  }
  if (v47) {
    _Block_release(v47);
  }
  if (v51) {
    (*(void (**)(uint64_t))(*(void *)v51 + 8LL))(v51);
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v64;
  sub_100006F6C((void ***)&__str);
  int32x4_t v64 = (void **)v67;
  sub_100006F6C(&v64);
  v67[0] = (void **)&v68;
  sub_100006F6C(v67);
  v71.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
  sub_100006F6C((void ***)&v71);
  sub_10000D448((uint64_t)&v81);
  return sub_10000D448((uint64_t)&v83);
}

void sub_100135F0C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, int a42, __int16 a43, char a44, char a45, void *__p, uint64_t a47, int a48, __int16 a49, char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
}

void sub_100136150()
{
}

uint64_t sub_100136164(uint64_t *a1, uint64_t *a2, const std::string *a3, uint64_t a4)
{
  v62[0] = 0LL;
  v62[1] = 0LL;
  int64x2_t v61 = v62;
  sub_10000C008((uint64_t)a2, v60);
  memset(&v59, 0, sizeof(v59));
  memset(&v58, 0, sizeof(v58));
  int v57 = 0;
  char v56 = 0LL;
  uint64_t v53 = 0LL;
  __int16 v54 = 0LL;
  uint64_t v55 = 0LL;
  sub_10000AC00(&buf, "method");
  __int16 v8 = sub_10000ED88(v60, (__n128 *)&buf);
  sub_100147B4C(v8, &__str);
  int v9 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v9)
  {
    if (sub_10015A058(5) && os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      p_str = &__str;
      if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      std::string::size_type v11 = (std::string::size_type)a3;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_str;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "WPANTUND-InternalIPCAPI Handling %s method handler for %s",  (uint8_t *)&buf,  0x16u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  sub_10000AC00(&__p, "network_name");
  uint64_t v12 = sub_10000ED88(v60, &__p);
  sub_100147B4C(v12, &buf);
  sub_100014D08((uint64_t)&v59, (__int128 *)&buf);
  if (v51 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  sub_10000AC00(&__p, "node_type");
  std::string v13 = sub_10000ED88(v60, &__p);
  sub_100147B4C(v13, &buf);
  sub_100014D08((uint64_t)&v58, (__int128 *)&buf);
  if (v51 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  sub_10000AC00(&buf, "channel");
  uint64_t v14 = sub_10000ED88(v60, (__n128 *)&buf);
  HIWORD(v57) = (unsigned __int16)sub_1001476B4(v14, 0);
  sub_10000AC00(&buf, "panid");
  __int16 v15 = sub_10000ED88(v60, (__n128 *)&buf);
  LOWORD(v57) = (unsigned __int16)sub_1001476B4(v15, 0);
  sub_10000AC00(&buf, "xpanid");
  unsigned __int8 v16 = sub_10000ED88(v60, (__n128 *)&buf);
  char v56 = sub_1001476B4(v16, 0);
  sub_10000AC00(&__p, "network_key");
  __int16 v17 = sub_10000ED88(v60, &__p);
  sub_100147058(v17, (uint64_t)&buf);
  sub_100006EFC((uint64_t)&v53, (__n128 *)&buf);
  p_std::string buf = &buf;
  sub_100006F6C((void ***)&p_buf);
  if (v51 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  uint64_t v18 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v18)
  {
    if (sub_10015A058(6) && os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      uint64_t v19 = &v58;
      if ((v58.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v19 = (std::string *)v58.__r_.__value_.__r.__words[0];
      }
      __int16 v20 = &v59;
      if ((v59.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        __int16 v20 = (std::string *)v59.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136316418;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v20;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v19;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
      *(_DWORD *)uint64_t v65 = HIWORD(v57);
      *(_WORD *)&v65[4] = 1024;
      *(_DWORD *)&v65[6] = (unsigned __int16)v57;
      *(_WORD *)&v65[10] = 2048;
      *(void *)&v65[12] = v56;
      *(_WORD *)&v65[20] = 2048;
      *(void *)&v65[22] = v54 - v53;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "Join Params: NWName: %s, NodeType: %s, channel: %d, panid: 0x%x, xpanid: 0x%llx, NWKey Size: %ld",  (uint8_t *)&buf,  0x36u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  sub_10000AC00(&buf, "Network:Name");
  uint64_t v21 = sub_10000ED88(&v61, (__n128 *)&buf);
  sub_1000200A0(v21, &v59);
  sub_10000AC00(&buf, "Network:NodeType");
  __int128 v22 = sub_10000ED88(&v61, (__n128 *)&buf);
  sub_1000200A0(v22, &v58);
  if (HIWORD(v57))
  {
    sub_10000AC00(&buf, "NCP:Channel");
    char v23 = sub_10000ED88(&v61, (__n128 *)&buf);
    sub_100017678(v23, (_WORD *)&v57 + 1);
  }

  if ((_WORD)v57)
  {
    sub_10000AC00(&buf, "Network:PANID");
    dispatch_object_t v24 = sub_10000ED88(&v61, (__n128 *)&buf);
    sub_100017678(v24, &v57);
  }

  if (v56)
  {
    sub_10000AC00(&buf, "Network:XPANID");
    dispatch_object_t v25 = sub_10000ED88(&v61, (__n128 *)&buf);
    sub_100017620(v25, (uint64_t *)&v56);
  }

  if (v54 != v53)
  {
    sub_100018E5C(&buf, v53, (uint64_t)v54);
    sub_10000AC00(&__p, "Network:Key");
    std::string v26 = sub_10000ED88(&v61, &__p);
    sub_100017FCC(v26, (__n128 *)&buf);
    if (v51 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    __p.n128_u64[0] = (unint64_t)&buf;
    sub_100006F6C((void ***)&__p);
  }

  uint64_t v27 = *a1;
  if (*a1)
  {
    uint64_t v28 = *a2;
    if (*a2) {
      uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 24LL))(v28);
    }
    uint64_t v40 = v28;
    std::string::basic_string(&v39, a3);
    std::string::basic_string(&v38, &__str);
    __int128 v29 = *(void **)a4;
    if (*(void *)a4) {
      __int128 v29 = _Block_copy(v29);
    }
    uint64_t v30 = *(dispatch_object_s **)(a4 + 8);
    __int128 v36 = v29;
    dispatch_object_t v37 = v30;
    if (v30) {
      dispatch_retain(v30);
    }
    sub_1001327CC(&v39, (uint64_t)sub_10012FC9C, 0LL, (uint64_t)a1, &v40, &v38, (uint64_t)&v36, &v41);
    sub_10013E51C(v49, &v41);
    (*(void (**)(uint64_t, uint64_t **, uint64_t (***)()))(*(void *)v27 + 8LL))(v27, &v61, v49);
    sub_1000075F0(v49);
    if (object) {
      dispatch_release(object);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v46 < 0) {
      operator delete(v45);
    }
    if (v44 < 0) {
      operator delete(v43);
    }
    if (v42) {
      (*(void (**)(uint64_t))(*(void *)v42 + 8LL))(v42);
    }
    if (v37) {
      dispatch_release(v37);
    }
    if (v36) {
      _Block_release(v36);
    }
    if (v40) {
      (*(void (**)(uint64_t))(*(void *)v40 + 8LL))(v40);
    }
  }

  else
  {
    char v31 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v31)
    {
      if (sub_10015A058(6) && os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "Invalid NCP_interface", (uint8_t *)&buf, 2u);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    if (*(void *)a4) {
      char v32 = _Block_copy(*(const void **)a4);
    }
    else {
      char v32 = 0LL;
    }
    uint64_t v33 = *(dispatch_queue_s **)(a4 + 8);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)_NSConcreteStackBlock;
    buf.__r_.__value_.__l.__size_ = 1174405120LL;
    buf.__r_.__value_.__l.__cap_ = (std::string::size_type)sub_10013C4C8;
    *(void *)uint64_t v65 = &unk_1002B4368;
    if (v32) {
      char v34 = _Block_copy(v32);
    }
    else {
      char v34 = 0LL;
    }
    *(_DWORD *)&v65[24] = 1;
    *(void *)&v65[8] = v34;
    *(void *)&v65[16] = "";
    dispatch_async(v33, &buf);
    if (*(void *)&v65[8]) {
      _Block_release(*(const void **)&v65[8]);
    }
    if (v32) {
      _Block_release(v32);
    }
  }

  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v53;
  sub_100006F6C((void ***)&buf);
  sub_10000D448((uint64_t)v60);
  return sub_10000D448((uint64_t)&v61);
}

void sub_1001369B4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, void *a41, uint64_t a42, int a43, __int16 a44, char a45, char a46, void *__p, uint64_t a48, int a49, __int16 a50,char a51,char a52,char a53)
{
  if (a2) {
    sub_100006EEC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100136B84()
{
}

uint64_t sub_100136B98(uint64_t *a1, uint64_t *a2, const std::string *a3, uint64_t a4)
{
  v39[0] = 0LL;
  v39[1] = 0LL;
  std::string v38 = v39;
  sub_10000C008((uint64_t)a2, v37);
  sub_10000AC00(buf, "method");
  __int16 v8 = sub_10000ED88(v37, (__n128 *)buf);
  sub_100147B4C(v8, &__str);
  if (v43 < 0) {
    operator delete(*(void **)buf);
  }
  int v9 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v9)
  {
    if (sub_10015A058(5) && os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      p_str = &__str;
      if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      std::string::size_type v11 = a3;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = p_str;
      __int16 v41 = 2080;
      uint64_t v42 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "WPANTUND-InternalIPCAPI Handling %s method handler for %s",  buf,  0x16u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  sub_10000AC00(buf, "Joiner:ReturnImmediatelyOnStart");
  uint64_t v12 = sub_10000ED88(v37, (__n128 *)buf);
  BOOL v35 = sub_1001478B8(v12);
  sub_10000AC00(&v33, "Joiner:ReturnImmediatelyOnStart");
  std::string v13 = sub_10000ED88(&v38, &v33);
  sub_100020B4C(v13, &v35);
  if (v34 < 0) {
    operator delete((void *)v33.n128_u64[0]);
  }
  if (v43 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v14 = *a1;
  uint64_t v15 = *a2;
  if (*a2) {
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 24LL))(v15);
  }
  uint64_t v23 = v15;
  std::string::basic_string(&v22, a3);
  std::string::basic_string(&v21, &__str);
  unsigned __int8 v16 = *(void **)a4;
  if (*(void *)a4) {
    unsigned __int8 v16 = _Block_copy(v16);
  }
  __int16 v17 = *(dispatch_object_s **)(a4 + 8);
  uint64_t v19 = v16;
  dispatch_object_t v20 = v17;
  if (v17) {
    dispatch_retain(v17);
  }
  sub_1001327CC(&v22, (uint64_t)sub_10012FC9C, 0LL, (uint64_t)a1, &v23, &v21, (uint64_t)&v19, &v24);
  sub_10013E51C(v32, &v24);
  (*(void (**)(uint64_t, uint64_t **, uint64_t (***)()))(*(void *)v14 + 136LL))(v14, &v38, v32);
  sub_1000075F0(v32);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v29 < 0) {
    operator delete(__p);
  }
  if (v27 < 0) {
    operator delete(v26);
  }
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
  }
  if (v20) {
    dispatch_release(v20);
  }
  if (v19) {
    _Block_release(v19);
  }
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
  }
  sub_10000D448((uint64_t)v37);
  return sub_10000D448((uint64_t)&v38);
}

void sub_100136EDC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36)
{
}

void sub_100136FEC()
{
}

void sub_100137000(uint64_t *a1, uint64_t *a2, const std::string *a3, uint64_t a4)
{
  __int16 v8 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v8)
  {
    if (sub_10015A058(5) && os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      int v9 = a3;
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "InternalClientInterface: Handling joiner-start method handler for %s",  (uint8_t *)&buf,  0xCu);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  *((void *)&buf + 1) = 0LL;
  uint64_t v55 = 0LL;
  *(void *)&__int128 buf = (char *)&buf + 8;
  sub_10000C008((uint64_t)a2, v52);
  sub_10000AC00(&v50, "Joiner:PSKd");
  uint64_t v10 = sub_10000ED88(v52, (__n128 *)&v50);
  sub_100147B4C(v10, &v51);
  sub_10000AC00(&v50, "Joiner:PSKd");
  std::string::size_type v11 = sub_10000ED88((uint64_t **)&buf, (__n128 *)&v50);
  sub_1000200A0(v11, &v51);
  sub_10000AC00(&v50, "Joiner:ReturnImmediatelyOnStart");
  uint64_t v12 = sub_10000ED88(v52, (__n128 *)&v50);
  __p.n128_u8[0] = sub_1001478B8(v12);
  sub_10000AC00(&v49, "Joiner:ReturnImmediatelyOnStart");
  std::string v13 = sub_10000ED88((uint64_t **)&buf, (__n128 *)&v49);
  sub_100020B4C(v13, &__p);
  sub_10000AC00(&v49, "Joiner:ProvisioningUrl");
  uint64_t v14 = sub_10000ED88(v52, (__n128 *)&v49);
  sub_100147B4C(v14, &v50);
  std::string::size_type size = v50.__r_.__value_.__s.__size_;
  if ((v50.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type size = v50.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    sub_10000AC00(&v49, "Joiner:ProvisioningUrl");
    unsigned __int8 v16 = sub_10000ED88((uint64_t **)&buf, (__n128 *)&v49);
    sub_1000200A0(v16, &v50);
  }

  sub_10000AC00(&__p, "Joiner:Vendor:Name");
  __int16 v17 = sub_10000ED88(v52, &__p);
  sub_100147B4C(v17, &v49);
  sub_100014D08((uint64_t)&v50, (__int128 *)&v49);
  if (v48 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  std::string::size_type v18 = v50.__r_.__value_.__s.__size_;
  if ((v50.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type v18 = v50.__r_.__value_.__l.__size_;
  }
  if (v18)
  {
    sub_10000AC00(&v49, "Joiner:Vendor:Name");
    uint64_t v19 = sub_10000ED88((uint64_t **)&buf, (__n128 *)&v49);
    sub_1000200A0(v19, &v50);
  }

  sub_10000AC00(&__p, "Joiner:Vendor:Model");
  dispatch_object_t v20 = sub_10000ED88(v52, &__p);
  sub_100147B4C(v20, &v49);
  sub_100014D08((uint64_t)&v50, (__int128 *)&v49);
  if (v48 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  std::string::size_type v21 = v50.__r_.__value_.__s.__size_;
  if ((v50.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type v21 = v50.__r_.__value_.__l.__size_;
  }
  if (v21)
  {
    sub_10000AC00(&v49, "Joiner:Vendor:Model");
    std::string v22 = sub_10000ED88((uint64_t **)&buf, (__n128 *)&v49);
    sub_1000200A0(v22, &v50);
  }

  sub_10000AC00(&__p, "Joiner:Vendor:SwVersion");
  uint64_t v23 = sub_10000ED88(v52, &__p);
  sub_100147B4C(v23, &v49);
  sub_100014D08((uint64_t)&v50, (__int128 *)&v49);
  if (v48 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  std::string::size_type v24 = v50.__r_.__value_.__s.__size_;
  if ((v50.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type v24 = v50.__r_.__value_.__l.__size_;
  }
  if (v24)
  {
    sub_10000AC00(&v49, "Joiner:Vendor:SwVersion");
    uint64_t v25 = sub_10000ED88((uint64_t **)&buf, (__n128 *)&v49);
    sub_1000200A0(v25, &v50);
  }

  sub_10000AC00(&__p, "Joiner:Vendor:Data");
  std::string v26 = sub_10000ED88(v52, &__p);
  sub_100147B4C(v26, &v49);
  sub_100014D08((uint64_t)&v50, (__int128 *)&v49);
  if (v48 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  std::string::size_type v27 = v50.__r_.__value_.__s.__size_;
  if ((v50.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type v27 = v50.__r_.__value_.__l.__size_;
  }
  if (v27)
  {
    sub_10000AC00(&v49, "Joiner:Vendor:Data");
    uint64_t v28 = sub_10000ED88((uint64_t **)&buf, (__n128 *)&v49);
    sub_1000200A0(v28, &v50);
  }

  uint64_t v29 = *a1;
  uint64_t v30 = *a2;
  if (*a2) {
    uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 24LL))(v30);
  }
  uint64_t v37 = v30;
  std::string::basic_string(&v36, a3);
  std::string::basic_string(&v35, &__str);
  char v31 = *(void **)a4;
  if (*(void *)a4) {
    char v31 = _Block_copy(v31);
  }
  char v32 = *(dispatch_object_s **)(a4 + 8);
  __n128 v33 = v31;
  dispatch_object_t v34 = v32;
  if (v32) {
    dispatch_retain(v32);
  }
  sub_1001327CC(&v36, (uint64_t)sub_10012FC9C, 0LL, (uint64_t)a1, &v37, &v35, (uint64_t)&v33, &v38);
  sub_10013E51C(v46, &v38);
  (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t (***)()))(*(void *)v29 + 144LL))( v29,  1LL,  &buf,  v46);
  sub_1000075F0(v46);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v43 < 0) {
    operator delete(v42);
  }
  if (v41 < 0) {
    operator delete(v40);
  }
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 8LL))(v39);
  }
  if (v34) {
    dispatch_release(v34);
  }
  if (v33) {
    _Block_release(v33);
  }
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8LL))(v37);
  }
  sub_10000D448((uint64_t)v52);
  sub_10000D448((uint64_t)&buf);
}

void sub_100137678( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, int a43, __int16 a44, char a45, char a46)
{
  if (a2) {
    sub_100006EEC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100137814()
{
}

uint64_t sub_100137828(uint64_t *a1, uint64_t *a2, const std::string *a3, uint64_t a4)
{
  v34[0] = 0LL;
  v34[1] = 0LL;
  __n128 v33 = v34;
  sub_10000C008((uint64_t)a2, v32);
  sub_10000AC00(buf, "method");
  __int16 v8 = sub_10000ED88(v32, (__n128 *)buf);
  sub_100147B4C(v8, &__str);
  if (v38 < 0) {
    operator delete(*(void **)buf);
  }
  int v9 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v9)
  {
    if (sub_10015A058(5) && os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      p_str = &__str;
      if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      std::string::size_type v11 = a3;
      *(_DWORD *)__int128 buf = 136315394;
      *(void *)&uint8_t buf[4] = p_str;
      __int16 v36 = 2080;
      uint64_t v37 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "WPANTUND-InternalIPCAPI Handling %s method handler for %s",  buf,  0x16u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  uint64_t v12 = *a1;
  uint64_t v13 = *a2;
  if (*a2) {
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 24LL))(v13);
  }
  uint64_t v21 = v13;
  std::string::basic_string(&v20, a3);
  std::string::basic_string(&v19, &__str);
  uint64_t v14 = *(void **)a4;
  if (*(void *)a4) {
    uint64_t v14 = _Block_copy(v14);
  }
  uint64_t v15 = *(dispatch_object_s **)(a4 + 8);
  __int16 v17 = v14;
  dispatch_object_t v18 = v15;
  if (v15) {
    dispatch_retain(v15);
  }
  sub_1001327CC(&v20, (uint64_t)sub_10012FC9C, 0LL, (uint64_t)a1, &v21, &v19, (uint64_t)&v17, &v22);
  sub_10013E51C(v30, &v22);
  (*(void (**)(uint64_t, void, void **, uint64_t (***)()))(*(void *)v12 + 144LL))( v12,  0LL,  &v33,  v30);
  sub_1000075F0(v30);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v27 < 0) {
    operator delete(__p);
  }
  if (v25 < 0) {
    operator delete(v24);
  }
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
  }
  if (v18) {
    dispatch_release(v18);
  }
  if (v17) {
    _Block_release(v17);
  }
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
  }
  sub_10000D448((uint64_t)v32);
  return sub_10000D448((uint64_t)&v33);
}

void sub_100137B08( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36)
{
}

void sub_100137BF4(uint64_t *a1, uint64_t a2, const std::string *a3, uint64_t a4)
{
  char v46 = 0LL;
  uint64_t v47 = 0LL;
  uint64_t v48 = 0LL;
  memset(&v45, 0, sizeof(v45));
  sub_10000C008(a2, v44);
  sub_10000AC00(&buf, "method");
  __int16 v8 = sub_10000ED88(v44, (__n128 *)&buf);
  sub_100147B4C(v8, &__str);
  sub_10000AC00(&__p, "property_name");
  int v9 = sub_10000ED88(v44, (__n128 *)&__p);
  sub_100147B4C(v9, &buf);
  sub_100014D08((uint64_t)&v45, (__int128 *)&buf);
  uint64_t v10 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v10)
  {
    if (sub_10015A058(5) && os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      p_str = &__str;
      if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      std::string::size_type v12 = (std::string::size_type)a3;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_str;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "WPANTUND-InternalIPCAPI Handling %s method handler for %s",  (uint8_t *)&buf,  0x16u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  sub_10000AC00(&__p, "pass_phrase");
  uint64_t v13 = sub_10000ED88(v44, (__n128 *)&__p);
  sub_100147B4C(v13, &buf);
  sub_100014D08((uint64_t)v51, (__int128 *)&buf);
  sub_10000AC00(&__p, "network_name");
  uint64_t v14 = sub_10000ED88(v44, (__n128 *)&__p);
  sub_100147B4C(v14, &buf);
  sub_100014D08((uint64_t)v49, (__int128 *)&buf);
  sub_10000AC00(&__p, "xpanid");
  uint64_t v15 = sub_10000ED88(v44, (__n128 *)&__p);
  sub_100147058(v15, (uint64_t)&buf);
  sub_100006EFC((uint64_t)&v46, (__n128 *)&buf);
  p_std::string buf = &buf;
  sub_100006F6C((void ***)&p_buf);
  unsigned __int8 v16 = sub_100033680(&buf, (uint64_t)&v46);
  sub_100147B4C(v16, &__p);
  if (buf.__r_.__value_.__r.__words[0]) {
    (*(void (**)(std::string::size_type))(*(void *)buf.__r_.__value_.__l.__data_ + 8LL))(buf.__r_.__value_.__r.__words[0]);
  }
  __int16 v17 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v17)
  {
    if (sub_10015A058(6) && os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      dispatch_object_t v18 = v51;
      if (v52 < 0) {
        dispatch_object_t v18 = (void **)v51[0];
      }
      std::string v19 = v49;
      if (v50 < 0) {
        std::string v19 = (void **)v49[0];
      }
      p_p = &__p;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v19;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      uint64_t v55 = p_p;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "pp = %s, nn = %s, xpanid = 0x%s",  (uint8_t *)&buf,  0x20u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  if (v47 - (void)v46 == 8)
  {
    uint64_t v56 = *v46;
    uint64_t v21 = *a1;
    if (v52 >= 0) {
      __int128 v22 = v51;
    }
    else {
      __int128 v22 = (void **)v51[0];
    }
    if (v50 >= 0) {
      uint64_t v23 = v49;
    }
    else {
      uint64_t v23 = (void **)v49[0];
    }
    std::string::basic_string(&v31, a3);
    std::string::basic_string(&v30, &__str);
    std::string::basic_string(&v29, &v45);
    std::string::size_type v24 = *(void **)a4;
    if (*(void *)a4) {
      std::string::size_type v24 = _Block_copy(v24);
    }
    char v25 = *(dispatch_object_s **)(a4 + 8);
    char v27 = v24;
    dispatch_object_t v28 = v25;
    if (v25) {
      dispatch_retain(v25);
    }
    sub_100130D90(&v31, (uint64_t)sub_10012FFE8, 0LL, (uint64_t)a1, &v30, &v29, (uint64_t)&v27, &v32);
    sub_10013BC8C(v41, &v32);
    (*(void (**)(uint64_t, void **, void **, uint64_t *, uint64_t (***)()))(*(void *)v21 + 200LL))( v21,  v22,  v23,  &v56,  v41);
    sub_100006E7C(v41);
    if (object) {
      dispatch_release(object);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v38 < 0) {
      operator delete(v37);
    }
    if (v36 < 0) {
      operator delete(v35);
    }
    if (v34 < 0) {
      operator delete(v33);
    }
    if (v28) {
      dispatch_release(v28);
    }
    if (v27) {
      _Block_release(v27);
    }
  }

  else
  {
    std::string v26 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v26)
    {
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }
  }

  sub_10000D448((uint64_t)v44);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
  sub_100006F6C((void ***)&buf);
  if (v50 < 0) {
    operator delete(v49[0]);
  }
  if (v52 < 0) {
    operator delete(v51[0]);
  }
}

void sub_10013821C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, char a44, uint64_t a45, uint64_t a46, uint64_t a47, void *a48, uint64_t a49, int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a2) {
    sub_100006EEC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10013838C()
{
}

uint64_t *sub_1001383A0(void *a1, pthread_mutex_t *a2, pthread_mutex_t *a3)
{
  return sub_1000DA678(*a1 + 104LL, a2, a3);
}

uint64_t sub_1001383AC(uint64_t *a1, uint64_t *a2, std::string::size_type a3, uint64_t a4)
{
  __int16 v8 = sub_10000ED88(v43, (__n128 *)&v41);
  sub_100147B4C(v8, &__str);
  sub_10000AC00(&buf, "property_name");
  int v9 = sub_10000ED88(v43, (__n128 *)&buf);
  sub_100147B4C(v9, &v41);
  uint64_t v10 = *a1;
  sub_10000AC00(&buf, "NCP:State");
  sub_1000FC7CC(v10, (uint64_t)&buf, &v40);
  std::string::size_type v11 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v11)
  {
    if (sub_10015A058(5) && os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      p_str = &__str;
      if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_str;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "WPANTUND-InternalIPCAPI Handling %s method handler for %s",  (uint8_t *)&buf,  0x16u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FB53C();
  }

  if (v40)
  {
    sub_100147B4C(&v40, &buf);
    int v13 = sub_1000B5828(&buf);
  }

  else
  {
    int v13 = 0;
  }

  if (sub_1000B5088(v13)) {
    goto LABEL_25;
  }
  BOOL v14 = !sub_1000B5104(v13);
  if (!v13) {
    LOBYTE(v14) = 0;
  }
  if (v14)
  {
    std::string::size_type v22 = *a1;
    uint64_t v23 = *a2;
    if (*a2) {
      uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 24LL))(v23);
    }
    uint64_t v29 = v23;
    std::string::basic_string(&v28, &__str);
    std::string::size_type v24 = *(void **)a4;
    if (*(void *)a4) {
      std::string::size_type v24 = _Block_copy(v24);
    }
    char v25 = *(dispatch_object_s **)(a4 + 8);
    std::string v26 = v24;
    dispatch_object_t v27 = v25;
    if (v25) {
      dispatch_retain(v25);
    }
    sub_100139C08(&v28, (uint64_t)sub_100138934, 0LL, (std::string::size_type)a1, v22, &v29, (uint64_t)&v26, v30);
    sub_10013F988(v36, v30);
    (*(void (**)(std::string::size_type, uint64_t (***)()))(*(void *)v22 + 48LL))(v22, v36);
    sub_1000075F0(v36);
    if (v35) {
      dispatch_release(v35);
    }
    if (v34) {
      _Block_release(v34);
    }
    if (v33 < 0) {
      operator delete(__p);
    }
    if (v31) {
      (*(void (**)(uint64_t))(*(void *)v31 + 8LL))(v31);
    }
    if (v27) {
      dispatch_release(v27);
    }
    if (v26) {
      _Block_release(v26);
    }
    uint64_t v16 = v29;
    if (v29) {
      goto LABEL_39;
    }
  }

  else
  {
LABEL_25:
    uint64_t v15 = *a1;
    if (*a2) {
      uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)*a2 + 24LL))(*a2);
    }
    else {
      uint64_t v16 = 0LL;
    }
    std::string::basic_string(&v39, &__str);
    std::string v19 = *(void **)a4;
    if (*(void *)a4) {
      std::string v19 = _Block_copy(v19);
    }
    std::string v20 = *(dispatch_object_s **)(a4 + 8);
    aBlock = v19;
    dispatch_object_t object = v20;
    if (v20) {
      dispatch_retain(v20);
    }
    sub_100138934((uint64_t)v19, 0, v15, v17, v18, (uint64_t)&aBlock);
    if (object) {
      dispatch_release(object);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v16) {
LABEL_39:
    }
      (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
  }

  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8LL))(v40);
  }
  return sub_10000D448((uint64_t)v43);
}

void sub_1001387B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  if (a2) {
    sub_100006EEC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100138934(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (*(void *)a6 && *(void *)(a6 + 8))
  {
    v77[0] = 0LL;
    v77[1] = 0LL;
    uint64_t v75 = 0LL;
    unsigned int v76 = v77;
    sub_10000AC00(&block, "NCP:State");
    sub_1000FC7CC(a3, (uint64_t)&block, __p);
    int v9 = v75;
    uint64_t v75 = __p[0];
    __p[0] = 0LL;
    if (v9)
    {
      (*(void (**)(void *))(*(void *)v9 + 8LL))(v9);
      if (__p[0]) {
        (*(void (**)(void *))(*(void *)__p[0] + 8LL))(__p[0]);
      }
    }

    if (v75)
    {
      sub_10000AC00(&block, "NCP:State");
      uint64_t v10 = sub_10000ED88(&v76, (__n128 *)&block);
      sub_100018024(v10, &v75);
    }

    sub_10000AC00(&block, "Daemon:Enabled");
    sub_1000FC7CC(a3, (uint64_t)&block, __p);
    std::string::size_type v11 = v75;
    uint64_t v75 = __p[0];
    __p[0] = 0LL;
    if (v11)
    {
      (*(void (**)(void *))(*(void *)v11 + 8LL))(v11);
      if (__p[0]) {
        (*(void (**)(void *))(*(void *)__p[0] + 8LL))(__p[0]);
      }
    }

    if (v75)
    {
      sub_10000AC00(&block, "Daemon:Enabled");
      std::string::size_type v12 = sub_10000ED88(&v76, (__n128 *)&block);
      sub_100018024(v12, &v75);
    }

    uint64_t v13 = sub_10000B370();
    BOOL v14 = operator new(0x10uLL);
    *BOOL v14 = &off_1002AE088;
    v14[1] = v13;
    v71.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
    sub_100147B4C((uint64_t *)&v71, &v72);
    uint64_t v15 = std::string::insert(&v72, 0LL, "0x");
    __int128 v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    block.__r_.__value_.__l.__cap_ = v15->__r_.__value_.__l.__cap_;
    *(_OWORD *)&block.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0LL;
    v15->__r_.__value_.__l.__cap_ = 0LL;
    v15->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v17 = std::string::append(&block, " Sec");
    __int128 v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    std::string::size_type cap = v17->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v18;
    v17->__r_.__value_.__l.__size_ = 0LL;
    v17->__r_.__value_.__l.__cap_ = 0LL;
    v17->__r_.__value_.__r.__words[0] = 0LL;
    if (v71.__r_.__value_.__r.__words[0]) {
      (*(void (**)(std::string::size_type))(*(void *)v71.__r_.__value_.__l.__data_ + 8LL))(v71.__r_.__value_.__r.__words[0]);
    }
    sub_10000AC00(&block, "System:Up_Time");
    std::string v19 = sub_10000ED88(&v76, (__n128 *)&block);
    sub_100018024(v19, &v75);
    __darwin_time_t v20 = sub_10000B428();
    uint64_t v21 = operator new(0x10uLL);
    *uint64_t v21 = &off_1002AE088;
    v21[1] = v20;
    uint64_t v70 = v21;
    sub_100147B4C((uint64_t *)&v70, &v71);
    std::string::size_type v22 = std::string::insert(&v71, 0LL, "0x");
    __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v72.__r_.__value_.__l.__cap_ = v22->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0LL;
    v22->__r_.__value_.__l.__cap_ = 0LL;
    v22->__r_.__value_.__r.__words[0] = 0LL;
    std::string::size_type v24 = std::string::append(&v72, " Sec");
    __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    block.__r_.__value_.__l.__cap_ = v24->__r_.__value_.__l.__cap_;
    *(_OWORD *)&block.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0LL;
    v24->__r_.__value_.__l.__cap_ = 0LL;
    v24->__r_.__value_.__r.__words[0] = 0LL;
    sub_100014D08((uint64_t)__p, (__int128 *)&block);
    if (v70) {
      (*(void (**)(void *))(*v70 + 8LL))(v70);
    }
    sub_10000AC00(&block, "Daemon:Up Time");
    std::string v26 = sub_10000ED88(&v76, (__n128 *)&block);
    sub_100018024(v26, &v75);
    sub_10000AC00(&block, "NCP:Version");
    sub_1000FC7CC(a3, (uint64_t)&block, &v72);
    dispatch_object_t v27 = v75;
    uint64_t v75 = (void *)v72.__r_.__value_.__r.__words[0];
    v72.__r_.__value_.__r.__words[0] = 0LL;
    if (v27)
    {
      (*(void (**)(void *))(*(void *)v27 + 8LL))(v27);
      if (v72.__r_.__value_.__r.__words[0]) {
        (*(void (**)(std::string::size_type))(*(void *)v72.__r_.__value_.__l.__data_ + 8LL))(v72.__r_.__value_.__r.__words[0]);
      }
    }

    if (v75)
    {
      sub_10000AC00(&block, "NCP:Version");
      std::string v28 = sub_10000ED88(&v76, (__n128 *)&block);
      sub_100018024(v28, &v75);
    }

    sub_10000AC00(&block, "POSIXApp:RCPVersion:Cached");
    sub_1000FC7CC(a3, (uint64_t)&block, &v72);
    uint64_t v29 = v75;
    uint64_t v75 = (void *)v72.__r_.__value_.__r.__words[0];
    v72.__r_.__value_.__r.__words[0] = 0LL;
    if (v29)
    {
      (*(void (**)(void *))(*(void *)v29 + 8LL))(v29);
      if (v72.__r_.__value_.__r.__words[0]) {
        (*(void (**)(std::string::size_type))(*(void *)v72.__r_.__value_.__l.__data_ + 8LL))(v72.__r_.__value_.__r.__words[0]);
      }
    }

    if (v75)
    {
      sub_10000AC00(&block, "POSIXApp:RCPVersion");
      std::string v30 = sub_10000ED88(&v76, (__n128 *)&block);
      sub_100018024(v30, &v75);
    }

    sub_10000AC00(&block, "Daemon:Version");
    sub_1000FC7CC(a3, (uint64_t)&block, &v72);
    uint64_t v31 = v75;
    uint64_t v75 = (void *)v72.__r_.__value_.__r.__words[0];
    v72.__r_.__value_.__r.__words[0] = 0LL;
    if (v31)
    {
      (*(void (**)(void *))(*(void *)v31 + 8LL))(v31);
      if (v72.__r_.__value_.__r.__words[0]) {
        (*(void (**)(std::string::size_type))(*(void *)v72.__r_.__value_.__l.__data_ + 8LL))(v72.__r_.__value_.__r.__words[0]);
      }
    }

    if (v75)
    {
      sub_10000AC00(&block, "Daemon:Version");
      __int128 v32 = sub_10000ED88(&v76, (__n128 *)&block);
      sub_100018024(v32, &v75);
    }

    sub_10000AC00(&block, "Config:NCP:DriverName");
    sub_1000FC7CC(a3, (uint64_t)&block, &v72);
    char v33 = v75;
    uint64_t v75 = (void *)v72.__r_.__value_.__r.__words[0];
    v72.__r_.__value_.__r.__words[0] = 0LL;
    if (v33)
    {
      (*(void (**)(void *))(*(void *)v33 + 8LL))(v33);
      if (v72.__r_.__value_.__r.__words[0]) {
        (*(void (**)(std::string::size_type))(*(void *)v72.__r_.__value_.__l.__data_ + 8LL))(v72.__r_.__value_.__r.__words[0]);
      }
    }

    if (v75)
    {
      sub_10000AC00(&block, "Config:NCP:DriverName");
      char v34 = sub_10000ED88(&v76, (__n128 *)&block);
      sub_100018024(v34, &v75);
    }

    sub_10000AC00(&block, "NCP:HardwareAddress");
    sub_1000FC7CC(a3, (uint64_t)&block, &v72);
    dispatch_object_t v35 = v75;
    uint64_t v75 = (void *)v72.__r_.__value_.__r.__words[0];
    v72.__r_.__value_.__r.__words[0] = 0LL;
    if (v35)
    {
      (*(void (**)(void *))(*(void *)v35 + 8LL))(v35);
      if (v72.__r_.__value_.__r.__words[0]) {
        (*(void (**)(std::string::size_type))(*(void *)v72.__r_.__value_.__l.__data_ + 8LL))(v72.__r_.__value_.__r.__words[0]);
      }
    }

    if (v75)
    {
      sub_10000AC00(&block, "NCP:HardwareAddress");
      char v36 = sub_10000ED88(&v76, (__n128 *)&block);
      sub_100018024(v36, &v75);
    }

    sub_10000AC00(&block, "vendor:version");
    sub_1000FC7CC(a3, (uint64_t)&block, &v72);
    uint64_t v37 = v75;
    uint64_t v75 = (void *)v72.__r_.__value_.__r.__words[0];
    v72.__r_.__value_.__r.__words[0] = 0LL;
    if (v37)
    {
      (*(void (**)(void *))(*(void *)v37 + 8LL))(v37);
      if (v72.__r_.__value_.__r.__words[0]) {
        (*(void (**)(std::string::size_type))(*(void *)v72.__r_.__value_.__l.__data_ + 8LL))(v72.__r_.__value_.__r.__words[0]);
      }
    }

    if (v75)
    {
      sub_10000AC00(&block, "vendor:version");
      char v38 = sub_10000ED88(&v76, (__n128 *)&block);
      sub_100018024(v38, &v75);
    }

    if (sub_1000B50D0(0))
    {
      sub_10000AC00(&block, "NCP:Channel");
      sub_1000FC7CC(a3, (uint64_t)&block, &v72);
      std::string v39 = v75;
      uint64_t v75 = (void *)v72.__r_.__value_.__r.__words[0];
      v72.__r_.__value_.__r.__words[0] = 0LL;
      if (v39)
      {
        (*(void (**)(void *))(*(void *)v39 + 8LL))(v39);
        if (v72.__r_.__value_.__r.__words[0]) {
          (*(void (**)(std::string::size_type))(*(void *)v72.__r_.__value_.__l.__data_ + 8LL))(v72.__r_.__value_.__r.__words[0]);
        }
      }

      if (v75)
      {
        sub_10000AC00(&block, "NCP:Channel");
        uint64_t v40 = sub_10000ED88(&v76, (__n128 *)&block);
        sub_100018024(v40, &v75);
      }

      sub_10000AC00(&block, "Network:NodeType");
      sub_1000FC7CC(a3, (uint64_t)&block, &v72);
      std::string v41 = v75;
      uint64_t v75 = (void *)v72.__r_.__value_.__r.__words[0];
      v72.__r_.__value_.__r.__words[0] = 0LL;
      if (v41)
      {
        (*(void (**)(void *))(*(void *)v41 + 8LL))(v41);
        if (v72.__r_.__value_.__r.__words[0]) {
          (*(void (**)(std::string::size_type))(*(void *)v72.__r_.__value_.__l.__data_ + 8LL))(v72.__r_.__value_.__r.__words[0]);
        }
      }

      if (v75)
      {
        sub_10000AC00(&block, "Network:NodeType");
        uint64_t v42 = sub_10000ED88(&v76, (__n128 *)&block);
        sub_100018024(v42, &v75);
      }

      sub_10000AC00(&block, "Network:Name");
      sub_1000FC7CC(a3, (uint64_t)&block, &v72);
      char v43 = v75;
      uint64_t v75 = (void *)v72.__r_.__value_.__r.__words[0];
      v72.__r_.__value_.__r.__words[0] = 0LL;
      if (v43)
      {
        (*(void (**)(void *))(*(void *)v43 + 8LL))(v43);
        if (v72.__r_.__value_.__r.__words[0]) {
          (*(void (**)(std::string::size_type))(*(void *)v72.__r_.__value_.__l.__data_ + 8LL))(v72.__r_.__value_.__r.__words[0]);
        }
      }

      if (v75)
      {
        sub_10000AC00(&block, "Network:Name");
        char v44 = sub_10000ED88(&v76, (__n128 *)&block);
        sub_100018024(v44, &v75);
      }

      sub_10000AC00(&block, "Network:PartitionId");
      sub_1000FC7CC(a3, (uint64_t)&block, &v72);
      std::string v45 = v75;
      uint64_t v75 = (void *)v72.__r_.__value_.__r.__words[0];
      v72.__r_.__value_.__r.__words[0] = 0LL;
      if (v45)
      {
        (*(void (**)(void *))(*(void *)v45 + 8LL))(v45);
        if (v72.__r_.__value_.__r.__words[0]) {
          (*(void (**)(std::string::size_type))(*(void *)v72.__r_.__value_.__l.__data_ + 8LL))(v72.__r_.__value_.__r.__words[0]);
        }
      }

      if (v75)
      {
        sub_10000AC00(&block, "Network:PartitionId");
        char v46 = sub_10000ED88(&v76, (__n128 *)&block);
        sub_100018024(v46, &v75);
      }

      sub_10000AC00(&block, "Network:XPANID");
      sub_1000FC7CC(a3, (uint64_t)&block, &v72);
      uint64_t v47 = v75;
      uint64_t v75 = (void *)v72.__r_.__value_.__r.__words[0];
      v72.__r_.__value_.__r.__words[0] = 0LL;
      if (v47)
      {
        (*(void (**)(void *))(*(void *)v47 + 8LL))(v47);
        if (v72.__r_.__value_.__r.__words[0]) {
          (*(void (**)(std::string::size_type))(*(void *)v72.__r_.__value_.__l.__data_ + 8LL))(v72.__r_.__value_.__r.__words[0]);
        }
      }

      if (v75)
      {
        sub_10000AC00(&block, "Network:XPANID");
        uint64_t v48 = sub_10000ED88(&v76, (__n128 *)&block);
        sub_100018024(v48, &v75);
      }

      sub_10000AC00(&block, "Network:PANID");
      sub_1000FC7CC(a3, (uint64_t)&block, &v72);
      std::string v49 = v75;
      uint64_t v75 = (void *)v72.__r_.__value_.__r.__words[0];
      v72.__r_.__value_.__r.__words[0] = 0LL;
      if (v49)
      {
        (*(void (**)(void *))(*(void *)v49 + 8LL))(v49);
        if (v72.__r_.__value_.__r.__words[0]) {
          (*(void (**)(std::string::size_type))(*(void *)v72.__r_.__value_.__l.__data_ + 8LL))(v72.__r_.__value_.__r.__words[0]);
        }
      }

      if (v75)
      {
        sub_10000AC00(&block, "Network:PANID");
        char v50 = sub_10000ED88(&v76, (__n128 *)&block);
        sub_100018024(v50, &v75);
      }

      sub_10000AC00(&block, "IPv6:LinkLocalAddress");
      sub_1000FC7CC(a3, (uint64_t)&block, &v72);
      std::string v51 = v75;
      uint64_t v75 = (void *)v72.__r_.__value_.__r.__words[0];
      v72.__r_.__value_.__r.__words[0] = 0LL;
      if (v51)
      {
        (*(void (**)(void *))(*(void *)v51 + 8LL))(v51);
        if (v72.__r_.__value_.__r.__words[0]) {
          (*(void (**)(std::string::size_type))(*(void *)v72.__r_.__value_.__l.__data_ + 8LL))(v72.__r_.__value_.__r.__words[0]);
        }
      }

      if (v75)
      {
        sub_10000AC00(&block, "IPv6:LinkLocalAddress");
        char v52 = sub_10000ED88(&v76, (__n128 *)&block);
        sub_100018024(v52, &v75);
      }

      sub_10000AC00(&block, "IPv6:MeshLocalAddress");
      sub_1000FC7CC(a3, (uint64_t)&block, &v72);
      uint64_t v53 = v75;
      uint64_t v75 = (void *)v72.__r_.__value_.__r.__words[0];
      v72.__r_.__value_.__r.__words[0] = 0LL;
      if (v53)
      {
        (*(void (**)(void *))(*(void *)v53 + 8LL))(v53);
        if (v72.__r_.__value_.__r.__words[0]) {
          (*(void (**)(std::string::size_type))(*(void *)v72.__r_.__value_.__l.__data_ + 8LL))(v72.__r_.__value_.__r.__words[0]);
        }
      }

      if (v75)
      {
        sub_10000AC00(&block, "IPv6:MeshLocalAddress");
        __int16 v54 = sub_10000ED88(&v76, (__n128 *)&block);
        sub_100018024(v54, &v75);
      }

      sub_10000AC00(&block, "IPv6:MeshLocalPrefix");
      sub_1000FC7CC(a3, (uint64_t)&block, &v72);
      uint64_t v55 = v75;
      uint64_t v75 = (void *)v72.__r_.__value_.__r.__words[0];
      v72.__r_.__value_.__r.__words[0] = 0LL;
      if (v55)
      {
        (*(void (**)(void *))(*(void *)v55 + 8LL))(v55);
        if (v72.__r_.__value_.__r.__words[0]) {
          (*(void (**)(std::string::size_type))(*(void *)v72.__r_.__value_.__l.__data_ + 8LL))(v72.__r_.__value_.__r.__words[0]);
        }
      }

      if (v75)
      {
        sub_10000AC00(&block, "IPv6:MeshLocalPrefix");
        uint64_t v56 = sub_10000ED88(&v76, (__n128 *)&block);
        sub_100018024(v56, &v75);
      }

      sub_10000AC00(&block, "com.nestlabs.internal:Legacy:MeshLocalAddress");
      sub_1000FC7CC(a3, (uint64_t)&block, &v72);
      int v57 = v75;
      uint64_t v75 = (void *)v72.__r_.__value_.__r.__words[0];
      v72.__r_.__value_.__r.__words[0] = 0LL;
      if (v57)
      {
        (*(void (**)(void *))(*(void *)v57 + 8LL))(v57);
        if (v72.__r_.__value_.__r.__words[0]) {
          (*(void (**)(std::string::size_type))(*(void *)v72.__r_.__value_.__l.__data_ + 8LL))(v72.__r_.__value_.__r.__words[0]);
        }
      }

      if (v75)
      {
        sub_10000AC00(&block, "com.nestlabs.internal:Legacy:MeshLocalAddress");
        std::string v58 = sub_10000ED88(&v76, (__n128 *)&block);
        sub_100018024(v58, &v75);
      }

      sub_10000AC00(&block, "com.nestlabs.internal:Legacy:MeshLocalPrefix");
      sub_1000FC7CC(a3, (uint64_t)&block, &v72);
      std::string v59 = v75;
      uint64_t v75 = (void *)v72.__r_.__value_.__r.__words[0];
      v72.__r_.__value_.__r.__words[0] = 0LL;
      if (v59)
      {
        (*(void (**)(void *))(*(void *)v59 + 8LL))(v59);
        if (v72.__r_.__value_.__r.__words[0]) {
          (*(void (**)(std::string::size_type))(*(void *)v72.__r_.__value_.__l.__data_ + 8LL))(v72.__r_.__value_.__r.__words[0]);
        }
      }

      if (v75)
      {
        sub_10000AC00(&block, "com.nestlabs.internal:Network:AllowingJoin");
        uint64_t v60 = sub_10000ED88(&v76, (__n128 *)&block);
        sub_100018024(v60, &v75);
      }

      sub_10000AC00(&block, "com.nestlabs.internal:Network:AllowingJoin");
      sub_1000FC7CC(a3, (uint64_t)&block, &v72);
      int64x2_t v61 = v75;
      uint64_t v75 = (void *)v72.__r_.__value_.__r.__words[0];
      v72.__r_.__value_.__r.__words[0] = 0LL;
      if (v61)
      {
        (*(void (**)(void *))(*(void *)v61 + 8LL))(v61);
        if (v72.__r_.__value_.__r.__words[0]) {
          (*(void (**)(std::string::size_type))(*(void *)v72.__r_.__value_.__l.__data_ + 8LL))(v72.__r_.__value_.__r.__words[0]);
        }
      }

      if (v75)
      {
        sub_10000AC00(&block, "com.nestlabs.internal:Network:AllowingJoin");
        char v62 = sub_10000ED88(&v76, (__n128 *)&block);
        sub_100018024(v62, &v75);
      }

      sub_1000E72E0(&block);
      std::string::size_type v63 = block.__r_.__value_.__r.__words[0];
      int32x4_t v64 = v75;
      uint64_t v75 = (void *)block.__r_.__value_.__r.__words[0];
      block.__r_.__value_.__r.__words[0] = 0LL;
      if (v64)
      {
        (*(void (**)(void *))(*(void *)v64 + 8LL))(v64);
        if (block.__r_.__value_.__r.__words[0]) {
          (*(void (**)(std::string::size_type))(*(void *)block.__r_.__value_.__l.__data_ + 8LL))(block.__r_.__value_.__r.__words[0]);
        }
        std::string::size_type v63 = (std::string::size_type)v75;
      }

      if (v63)
      {
        sub_10000AC00(&block, "NCP:HealthInfo");
        uint64_t v65 = sub_10000ED88(&v76, (__n128 *)&block);
        sub_100018024(v65, &v75);
      }
    }

    sub_10000D19C(v69, (uint64_t *)&v76);
    if (*(void *)a6) {
      uint64_t v66 = _Block_copy(*(const void **)a6);
    }
    else {
      uint64_t v66 = 0LL;
    }
    unint64_t v67 = *(dispatch_queue_s **)(a6 + 8);
    block.__r_.__value_.__r.__words[0] = (std::string::size_type)_NSConcreteStackBlock;
    block.__r_.__value_.__l.__size_ = 1174405120LL;
    block.__r_.__value_.__l.__cap_ = (std::string::size_type)sub_100140144;
    unsigned __int16 v79 = &unk_1002B44B8;
    if (v66) {
      uint64_t v68 = _Block_copy(v66);
    }
    else {
      uint64_t v68 = 0LL;
    }
    std::string v80 = v68;
    int v82 = a2;
    sub_10000D19C(v81, v69);
    dispatch_async(v67, &block);
    sub_10000D448((uint64_t)v81);
    if (v80) {
      _Block_release(v80);
    }
    if (v66) {
      _Block_release(v66);
    }
    sub_10000D448((uint64_t)v69);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    if (v75) {
      (*(void (**)(void *))(*(void *)v75 + 8LL))(v75);
    }
    sub_10000D448((uint64_t)&v76);
  }

void sub_100139968( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, void *__p, uint64_t a28, int a29, __int16 a30, char a31, char a32, uint64_t a33, uint64_t a34, char a35)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a34) {
    (*(void (**)(uint64_t))(*(void *)a34 + 8LL))(a34);
  }
  sub_10000D448((uint64_t)&a35);
  _Unwind_Resume(a1);
}

uint64_t sub_100139C08@<X0>( std::string *__str@<X5>, uint64_t a2@<X0>, uint64_t a3@<X1>, std::string::size_type a4@<X2>, std::string::size_type a5@<X3>, uint64_t *a6@<X4>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v15 = *a6;
  if (*a6) {
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 24LL))(v15);
  }
  uint64_t v20 = v15;
  std::string::basic_string(&__stra, __str);
  sub_10013B79C(&v17, a7);
  sub_10013F5FC(&v21, a4, a5, &v20, &__stra, (uint64_t)&v17);
  *a8 = a2;
  a8[1] = a3;
  sub_10013F8F4((uint64_t)(a8 + 2), (uint64_t)&v21);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v23 < 0) {
    operator delete(__p);
  }
  if (v21.__r_.__value_.__l.__cap_) {
    (*(void (**)(std::string::size_type))(*(void *)v21.__r_.__value_.__l.__cap_ + 8LL))(v21.__r_.__value_.__l.__cap_);
  }
  if (v18) {
    dispatch_release(v18);
  }
  if (v17) {
    _Block_release(v17);
  }
  uint64_t result = v20;
  if (v20) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
  }
  return result;
}

void sub_100139D38( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8LL))(a17);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100139D88(uint64_t a1)
{
  uint64_t v2 = *(dispatch_object_s **)(a1 + 72);
  if (v2) {
    dispatch_release(v2);
  }
  BOOL v3 = *(const void **)(a1 + 64);
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  return a1;
}

void *sub_100139DE8(void *a1)
{
  return a1;
}

uint64_t sub_100139E10(uint64_t a1)
{
  uint64_t v2 = *(dispatch_object_s **)(a1 + 88);
  if (v2) {
    dispatch_release(v2);
  }
  BOOL v3 = *(const void **)(a1 + 80);
  if (v3) {
    _Block_release(v3);
  }
  return a1;
}

uint64_t sub_100139E7C(uint64_t a1)
{
  uint64_t v2 = *(dispatch_object_s **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

uint64_t sub_100139EB8(uint64_t a1)
{
  uint64_t v2 = *(dispatch_object_s **)(a1 + 96);
  if (v2) {
    dispatch_release(v2);
  }
  BOOL v3 = *(const void **)(a1 + 88);
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  return a1;
}

uint64_t sub_100139F38(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return a1;
}

uint64_t sub_100139F8C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return a1;
}

uint64_t sub_100139FD0(uint64_t a1)
{
  uint64_t v2 = *(dispatch_object_s **)(a1 + 88);
  if (v2) {
    dispatch_release(v2);
  }
  BOOL v3 = *(const void **)(a1 + 80);
  if (v3) {
    _Block_release(v3);
  }
  sub_10000D448(a1 + 8);
  return a1;
}

uint64_t sub_10013A034(uint64_t a1)
{
  return a1;
}

uint64_t sub_10013A06C(uint64_t a1)
{
  uint64_t v2 = *(dispatch_object_s **)(a1 + 72);
  if (v2) {
    dispatch_release(v2);
  }
  BOOL v3 = *(const void **)(a1 + 64);
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  return a1;
}

std::string *sub_10013A0DC(std::string *a1, const std::string *a2)
{
  uint64_t v4 = std::string::basic_string(a1, a2);
  sub_10000AB5C(v4[1].__r_.__value_.__r.__words, a2[1].__r_.__value_.__r.__words);
  return a1;
}

uint64_t sub_10013A110(uint64_t a1)
{
  uint64_t v2 = *(dispatch_object_s **)(a1 + 56);
  if (v2) {
    dispatch_release(v2);
  }
  BOOL v3 = *(const void **)(a1 + 48);
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  return a1;
}

uint64_t sub_10013A170(uint64_t a1)
{
  return a1;
}

void sub_10013A198(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10013A198(a1, *a2);
    sub_10013A198(a1, a2[1]);
    sub_10013A1E0((uint64_t)(a2 + 4));
    operator delete(a2);
  }

void sub_10013A1E0(uint64_t a1)
{
}

void *sub_10013A21C(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  a1[3] = 0LL;
  sub_10013A270((uint64_t)a1, a2);
  return a1;
}

void sub_10013A250( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)v10;
  sub_10000EFEC(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_10013A270(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  return sub_10013A2A4((uint64_t *)(a1 + 24), &v3);
}

uint64_t *sub_10013A2A4(uint64_t *a1, __int128 *a2)
{
  __int128 v5 = *a2;
  uint64_t v6 = *((void *)a2 + 2);
  uint64_t v4 = (uint64_t)off_1002B41A0 + 1;
  sub_1000127C8(&v4, a1);
  sub_10000EFC4(&v4);
  return a1;
}

void sub_10013A300( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10013A314(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }

      uint64_t result = *(void *)(*(void *)a2 + 8LL) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf2IvN2nl8wpantund14InternalIPCAPIENSt3__112basic_s"
                                        "tringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS_3anyEEENS0_5list3INS0_5valueI"
                                        "PS6_EENS_3argILi1EEENSK_ILi2EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp( (const char *)result,  (const char *)((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf2IvN2nl8wpantund14InternalIPCAPIE NSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE NS_3anyEEENS0_5list3INS0_5valueIPS6_EENS_3argILi1EEENSK_ILi2EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)),  !(_DWORD)result))
      {
        *(void *)a2 = v4;
      }

      else
      {
        *(void *)a2 = 0LL;
      }
    }
  }

  else
  {
    __int128 v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }

  return result;
}

void sub_10013A3B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[0] = a2;
  v3[1] = a3;
  sub_10013A3E8((uint64_t *)(a1 + 16), a1, (uint64_t)v3);
}

void sub_10013A3E8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  std::string::basic_string(&__str, *(const std::string **)a3);
  uint64_t v6 = **(void **)(a3 + 8);
  if (v6) {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24LL))(v6);
  }
  uint64_t v7 = v6;
  sub_10013A4B4(a2, v5, &__str, &v7);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
}

void sub_10013A47C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10013A4B4(uint64_t a1, uint64_t a2, std::string *__str, uint64_t *a4)
{
  uint64_t v6 = *(void (**)(void *, std::string *, uint64_t *))a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)(a2 + (v5 >> 1));
  if ((v5 & 1) != 0) {
    uint64_t v6 = *(void (**)(void *, std::string *, uint64_t *))(*v7 + v6);
  }
  std::string::basic_string(&v10, __str);
  uint64_t v8 = *a4;
  if (*a4) {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 24LL))(v8);
  }
  uint64_t v9 = v8;
  v6(v7, &v10, &v9);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
}

void sub_10013A54C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10013A584(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  a1[3] = 0LL;
  sub_10013A5D8((uint64_t)a1, a2);
  return a1;
}

void sub_10013A5B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)v10;
  sub_10000EFEC(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_10013A5D8(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  return sub_10013A60C((uint64_t *)(a1 + 24), &v3);
}

uint64_t *sub_10013A60C(uint64_t *a1, __int128 *a2)
{
  __int128 v5 = *a2;
  uint64_t v6 = *((void *)a2 + 2);
  uint64_t v4 = (uint64_t)off_1002B41C0 + 1;
  sub_10002D3A8(&v4, a1);
  sub_10002B7E4(&v4);
  return a1;
}

void sub_10013A668( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10013A67C(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }

      uint64_t result = *(void *)(*(void *)a2 + 8LL) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf1IvN2nl8wpantund14InternalIPCAPIERKNS5_4WPAN15Net"
                                        "workInstanceEEENS0_5list2INS0_5valueIPS6_EENS_3argILi1EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp( (const char *)result,  (const char *)((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf1IvN2nl8wpantund14InternalIPCAPIE RKNS5_4WPAN15NetworkInstanceEEENS0_5list2INS0_5valueIPS6_EENS_3argILi1EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)),  !(_DWORD)result))
      {
        *(void *)a2 = v4;
      }

      else
      {
        *(void *)a2 = 0LL;
      }
    }
  }

  else
  {
    __int128 v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }

  return result;
}

uint64_t sub_10013A71C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator*", "shared_ptr.hpp", 780, "px != 0");
  }
  return result;
}

void *sub_10013A75C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = (pthread_mutex_t *)sub_10000F72C(a1 + 3);
  sub_100010030(v10, v8);
  sub_10013A82C(a1, v10, a2, a3, a4);
  sub_10000F788(&v11);
  return sub_10000F8D8(v10);
}

void sub_10013A808(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_10013A82C@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  LOBYTE(v21) = 0;
  if (a4)
  {
    int v20 = 0;
    uint64_t v8 = (uint64_t *)sub_10013A99C(a1);
    uint64_t v9 = sub_10013B174(v8);
    sub_100010148(v9, &v20, &v22);
  }

  else
  {
    int v20 = 2;
    uint64_t v10 = (uint64_t *)sub_10013A99C(a1);
    uint64_t v11 = sub_10013B174(v10);
    sub_1000100DC(v11, &v20, &v22);
  }

  uint64_t v12 = sub_10013A9DC(&v22);
  *(_DWORD *)(v12 + 64) = v20;
  uint64_t v13 = v22;
  *(void *)(v12 + 68) = v21;
  BOOL v14 = v23;
  std::string v19 = v23;
  if (v23)
  {
    uint64_t v15 = v23 + 3;
    do
      unsigned int v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    *a5 = v13;
    a5[1] = (uint64_t)v14;
    do
      unsigned int v17 = __ldxr(v15);
    while (__stxr(v17 + 1, v15));
  }

  else
  {
    *a5 = v13;
    a5[1] = 0LL;
  }

  sub_10000EF74(&v19);
  return sub_10000F9EC((uint64_t *)&v23);
}

void sub_10013A920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

uint64_t *sub_10013A938@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = operator new(0x50uLL);
  sub_10013AB88((uint64_t)v7, a3, a1 + 3);
  return sub_10013B054(a4, (uint64_t)v7);
}

void sub_10013A988(_Unwind_Exception *a1)
{
}

uint64_t sub_10013A99C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "shared_ptr.hpp", 786, "px != 0");
  }
  return result;
}

uint64_t sub_10013A9DC(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "shared_ptr.hpp", 786, "px != 0");
  }
  return result;
}

uint64_t *sub_10013AA1C(uint64_t *a1, void *a2)
{
  uint64_t v4 = a1[1];
  if (v4)
  {
    unsigned int v5 = atomic_load((unsigned int *)(v4 + 8));
    if (v5 == 1) {
      return sub_1000DCA5C((uint64_t)a1, a2, 1, 2);
    }
  }

  uint64_t v7 = (uint64_t *)operator new(0x20uLL);
  uint64_t v8 = sub_10013AB08(a1);
  uint64_t v9 = (uint64_t *)sub_10013A99C(a1);
  uint64_t v10 = sub_10013B174(v9);
  sub_1000E2188(v7, v8, v10);
  sub_1000E2140((__int128 *)a1, (uint64_t)v7);
  uint64_t v11 = (uint64_t *)sub_10013A99C(a1);
  uint64_t v12 = *(uint64_t **)(sub_10013B174(v11) + 8);
  return sub_1000DC9A4((uint64_t)a1, a2, 1, &v12, 0);
}

void sub_10013AAF4(_Unwind_Exception *a1)
{
}

uint64_t sub_10013AB08(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator*", "shared_ptr.hpp", 780, "px != 0");
  }
  return result;
}

uint64_t sub_10013AB48(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator*", "shared_ptr.hpp", 780, "px != 0");
  }
  return result;
}

uint64_t sub_10013AB88(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)a1 = off_1002B41F0;
  uint64_t v6 = operator new(0x38uLL);
  sub_100011AD4(v6, (_DWORD **)a2);
  v6[3] = 0LL;
  sub_100007640((uint64_t)(v6 + 3), (uint64_t *)(a2 + 24));
  sub_10013AD98((uint64_t *)(a1 + 32), (uint64_t)v6);
  uint64_t v7 = a3[1];
  *(void *)(a1 + 48) = *a3;
  *(void *)(a1 + sub_10000D448(v30 - 56) = v7;
  if (v7)
  {
    uint64_t v8 = (unsigned int *)(v7 + 8);
    do
      unsigned int v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }

  *(_DWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 68) = 0;
  return a1;
}

void sub_10013AC34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  *(void *)uint64_t v2 = off_1002ADE80;
  sub_10000EF74((unsigned int **)(v2 + 16));
  _Unwind_Resume(a1);
}

void sub_10013AC7C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10013AF1C(a1);
  operator delete(v1);
}

uint64_t sub_10013AC90(uint64_t a1)
{
  uint64_t v2 = (pthread_mutex_t *)sub_10000F72C((uint64_t *)(a1 + 48));
  sub_100010030(v5, v2);
  sub_10013AF68((uint64_t *)a1, v5);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 24);
  sub_10000F788(&v6);
  sub_10000F8D8(v5);
  return v3;
}

void sub_10013AD20(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10013AD44(uint64_t a1)
{
  uint64_t v1 = (pthread_mutex_t *)sub_100012350((uint64_t *)(a1 + 48));
  return sub_10000F76C(v1);
}

uint64_t sub_10013AD5C(uint64_t a1)
{
  uint64_t v1 = (pthread_mutex_t *)sub_100012350((uint64_t *)(a1 + 48));
  return sub_10000F7B4(v1);
}

uint64_t *sub_10013AD74@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v2 = (__int128 *)(a1 + 32);
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    unsigned int v5 = (unsigned int *)(v3 + 8);
    do
      unsigned int v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  return sub_100012390(v2);
}

uint64_t *sub_10013AD98(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0LL;
  sub_10013AE00(&v5, a2);
  uint64_t v3 = a1[1];
  a1[1] = v5;
  uint64_t v5 = v3;
  sub_10000F9EC(&v5);
  return a1;
}

void sub_10013ADEC(_Unwind_Exception *a1)
{
}

void *sub_10013AE00(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  uint64_t v4 = operator new(0x18uLL);
  v4[1] = 0x100000001LL;
  *uint64_t v4 = &off_1002B4248;
  _DWORD v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_10013AE4C(void *a1)
{
}

void sub_10013AE60(_Unwind_Exception *a1)
{
}

void sub_10013AE74(uint64_t a1)
{
  if (a1)
  {
    sub_100139DE8((void *)(a1 + 24));
    uint64_t v2 = (void **)a1;
    sub_10000EFEC(&v2);
    operator delete((void *)a1);
  }

void sub_10013AEC0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100139DE8((void *)(v1 + 24));
    uint64_t v2 = (void **)v1;
    sub_10000EFEC(&v2);
    operator delete((void *)v1);
  }

uint64_t sub_10013AF04()
{
  return 0LL;
}

uint64_t sub_10013AF0C()
{
  return 0LL;
}

uint64_t sub_10013AF14()
{
  return 0LL;
}

uint64_t sub_10013AF1C(uint64_t a1)
{
  *(void *)a1 = off_1002B41F0;
  sub_10000F9EC((uint64_t *)(a1 + 56));
  sub_10000F9EC((uint64_t *)(a1 + 40));
  *(void *)a1 = off_1002ADE80;
  sub_10000EF74((unsigned int **)(a1 + 16));
  return a1;
}

uint64_t *sub_10013AF68(uint64_t *result, void *a2)
{
  uint64_t v2 = result + 4;
  if (result[4])
  {
    uint64_t v4 = result;
    for (uint64_t i = *(_DWORD **)sub_10013AB48(result + 4); ; i += 6)
    {
      uint64_t result = (uint64_t *)sub_10013AB48(v2);
      if (i == (_DWORD *)result[1]) {
        break;
      }
      sub_100012108(i, (uint64_t)v7);
      if (sub_100011134((uint64_t)i, (uint64_t)&v6))
      {
        sub_100011120(v4, a2);
        return sub_1000122FC((uint64_t)v7);
      }

      sub_1000122FC((uint64_t)v7);
    }
  }

  return result;
}

void sub_10013B034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t *sub_10013B054(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0LL;
  sub_10013B0BC(&v5, a2);
  uint64_t v3 = a1[1];
  a1[1] = v5;
  uint64_t v5 = v3;
  sub_10000F9EC(&v5);
  return a1;
}

void sub_10013B0A8(_Unwind_Exception *a1)
{
}

void *sub_10013B0BC(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  uint64_t v4 = operator new(0x18uLL);
  v4[1] = 0x100000001LL;
  *uint64_t v4 = &off_1002B42A8;
  _DWORD v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_10013B108(void *a1)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  __cxa_rethrow();
}

void sub_10013B128(_Unwind_Exception *a1)
{
}

uint64_t sub_10013B144(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t sub_10013B15C()
{
  return 0LL;
}

uint64_t sub_10013B164()
{
  return 0LL;
}

uint64_t sub_10013B16C()
{
  return 0LL;
}

uint64_t sub_10013B174(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator*", "shared_ptr.hpp", 780, "px != 0");
  }
  return result;
}

void *sub_10013B1B4(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  a1[3] = 0LL;
  sub_10013B208((uint64_t)a1, a2);
  return a1;
}

void sub_10013B1E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)v10;
  sub_10000EFEC(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_10013B208(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  return sub_10013B23C((uint64_t *)(a1 + 24), &v3);
}

uint64_t *sub_10013B23C(uint64_t *a1, __int128 *a2)
{
  __int128 v5 = *a2;
  uint64_t v6 = *((void *)a2 + 2);
  uint64_t v4 = (uint64_t)off_1002B42F8 + 1;
  sub_10013B2AC(&v4, a1);
  sub_100139DE8(&v4);
  return a1;
}

void sub_10013B298( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_10013B2AC(uint64_t *result, uint64_t *a2)
{
  if (a2 != result)
  {
    __int128 v3 = result;
    v4[0] = 0LL;
    sub_10013B3C0(v4, result);
    sub_10013B3C0(v3, a2);
    sub_10013B3C0(a2, v4);
    return sub_100139DE8(v4);
  }

  return result;
}

void sub_10013B30C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10013B320(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }

      uint64_t result = *(void *)(*(void *)a2 + 8LL) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf1IvN2nl8wpantund14InternalIPCAPIERKNS_3anyEEENS0_"
                                        "5list2INS0_5valueIPS6_EENS_3argILi1EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp( (const char *)result,  (const char *)((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf1IvN2nl8wpantund14InternalIPCAPIE RKNS_3anyEEENS0_5list2INS0_5valueIPS6_EENS_3argILi1EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)),  !(_DWORD)result))
      {
        *(void *)a2 = v4;
      }

      else
      {
        *(void *)a2 = 0LL;
      }
    }
  }

  else
  {
    __int128 v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }

  return result;
}

uint64_t *sub_10013B3C0(uint64_t *result, uint64_t *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = *a2;
    if (*a2)
    {
      *uint64_t result = v3;
      if ((v3 & 1) != 0)
      {
        __int128 v4 = *(_OWORD *)(a2 + 1);
        result[3] = a2[3];
        *(_OWORD *)(result + 1) = v4;
      }

      else
      {
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL))( a2 + 1,  result + 1,  1LL);
      }

      *a2 = 0LL;
    }

    else
    {
      return sub_100006EA4(result);
    }
  }

  return result;
}

void sub_10013B434(void *a1)
{
  *uint64_t v1 = 0LL;
  __cxa_rethrow();
}

void sub_10013B444(_Unwind_Exception *a1)
{
}

void *sub_10013B458(uint64_t **a1, const void **a2, uint64_t a3, const std::string **a4)
{
  uint64_t v7 = sub_10000AE50((uint64_t)a1, &v12, a2);
  uint64_t v8 = (void *)*v7;
  if (!*v7)
  {
    unsigned int v9 = (void **)v7;
    sub_10013B500((uint64_t)a1, a3, a4, (uint64_t)v11);
    sub_10000AF70(a1, v12, v9, (void *)v11[0]);
    uint64_t v8 = v11[0];
    v11[0] = 0LL;
    sub_10013B584(v11, 0LL);
  }

  return v8;
}

std::string *sub_10013B500@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, const std::string **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t v8 = (char *)operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  uint64_t result = sub_1000BE8C0(v7, (std::string *)(v8 + 32), a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_10013B56C(_Unwind_Exception *a1)
{
}

void sub_10013B584(void **a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3) {
    sub_10013B5A0((uint64_t)(a1 + 1), v3);
  }
}

void sub_10013B5A0(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8)) {
    sub_10013A1E0((uint64_t)__p + 32);
  }
  if (__p) {
    operator delete(__p);
  }
}

uint64_t sub_10013B5E0(uint64_t a1, const void **a2)
{
  uint64_t v3 = (uint64_t *)sub_1000AA160(a1, a2);
  sub_10013B624(a1, v3);
  return 1LL;
}

uint64_t sub_10013B624(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100011598(a1, a2);
  sub_10013A1E0((uint64_t)(a2 + 4));
  operator delete(a2);
  return v3;
}

uint64_t sub_10013B65C(uint64_t a1)
{
  return sub_10013B66C((uint64_t *)(a1 + 32), (int *)(a1 + 48), (uint64_t *)(a1 + 40));
}

uint64_t sub_10013B66C(uint64_t *a1, int *a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  int v4 = *a2;
  uint64_t v5 = *a3;
  if (*a3) {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24LL))(v5);
  }
  uint64_t v7 = v5;
  (*(void (**)(uint64_t, void, uint64_t *))(v3 + 16))(v3, v4, &v7);
  uint64_t result = v7;
  if (v7) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  return result;
}

void sub_10013B6D4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10013B6F4(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a2 + 32);
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  *(void *)(a1 + 32) = v4;
  uint64_t result = *(void *)(a2 + 40);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 24LL))(result);
  }
  *(void *)(a1 + memset(&v22.ai_socktype, 0, 40) = result;
  return result;
}

void sub_10013B73C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 32);
  if (v3) {
    _Block_release(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10013B75C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 32);
  if (v3) {
    _Block_release(v3);
  }
}

void *sub_10013B79C(void *a1, uint64_t a2)
{
  int v4 = *(void **)a2;
  if (*(void *)a2) {
    int v4 = _Block_copy(v4);
  }
  uint64_t v5 = *(dispatch_object_s **)(a2 + 8);
  *a1 = v4;
  a1[1] = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  return a1;
}

uint64_t sub_10013B7E4( uint64_t a1, uint64_t a2, std::string *__str, const std::string *a4, const std::string *a5, uint64_t a6)
{
  uint64_t v11 = *(void **)a6;
  if (*(void *)a6) {
    uint64_t v11 = _Block_copy(v11);
  }
  uint64_t v12 = *(dispatch_object_s **)(a6 + 8);
  aBlock = v11;
  dispatch_object_t object = v12;
  if (v12) {
    dispatch_retain(v12);
  }
  sub_10013B930(a1, a2, &__stra, &v17, &v16, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  return a1;
}

void sub_10013B8DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10013B930( uint64_t a1, uint64_t a2, std::string *__str, const std::string *a4, const std::string *a5, uint64_t a6)
{
  uint64_t v11 = *(void **)a6;
  if (*(void *)a6) {
    uint64_t v11 = _Block_copy(v11);
  }
  uint64_t v12 = *(dispatch_object_s **)(a6 + 8);
  *(void *)(a1 + 80) = v11;
  *(void *)(a1 + 88) = v12;
  if (v12) {
    dispatch_retain(v12);
  }
  return a1;
}

void sub_10013BA08( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10013BA54( uint64_t a1, uint64_t a2, std::string *__str, const std::string *a4, const std::string *a5)
{
  return a1;
}

void sub_10013BAE8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

uint64_t sub_10013BB2C(uint64_t a1, uint64_t a2, std::string *__str, const std::string *a4)
{
  *(void *)a1 = a2;
  std::string::basic_string((std::string *)(a1 + 8), &__stra);
  std::string::basic_string((std::string *)(a1 + 32), a4);
  return a1;
}

void sub_10013BBA0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t sub_10013BBD0(uint64_t a1, uint64_t a2)
{
  int v4 = (const std::string *)(a2 + 32);
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = (std::string *)(a1 + 32);
  std::string::basic_string((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  std::string::basic_string(v5, v4);
  std::string::basic_string((std::string *)(a1 + 56), (const std::string *)(a2 + 56));
  uint64_t v6 = *(void **)(a2 + 80);
  if (v6) {
    uint64_t v6 = _Block_copy(v6);
  }
  uint64_t v7 = *(dispatch_object_s **)(a2 + 88);
  *(void *)(a1 + 80) = v6;
  *(void *)(a1 + 88) = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  return a1;
}

void sub_10013BC60(_Unwind_Exception *a1)
{
}

uint64_t (***sub_10013BC8C(uint64_t (***a1)(), __int128 *a2))()
{
  __int128 v4 = *a2;
  sub_10013BBD0((uint64_t)&v5, (uint64_t)(a2 + 1));
  sub_10013BD3C(a1, &v4);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9 < 0) {
    operator delete(v8);
  }
  if (v7 < 0) {
    operator delete(v6);
  }
  return a1;
}

void sub_10013BD28(_Unwind_Exception *a1)
{
}

uint64_t (***sub_10013BD3C(uint64_t (***a1)(), __int128 *a2))()
{
  *a1 = 0LL;
  __int128 v4 = *a2;
  sub_10013BBD0((uint64_t)&v5, (uint64_t)(a2 + 1));
  sub_10013BDEC(a1, &v4);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9 < 0) {
    operator delete(v8);
  }
  if (v7 < 0) {
    operator delete(v6);
  }
  return a1;
}

void sub_10013BDD8(_Unwind_Exception *a1)
{
}

void sub_10013BDEC(uint64_t (***a1)(), __int128 *a2)
{
  __int128 v5 = *a2;
  sub_10013BBD0((uint64_t)&v6, (uint64_t)(a2 + 1));
  int v3 = sub_10013BF00((uint64_t)off_1002B4348, &v5, a1 + 1);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v12 < 0) {
    operator delete(__p);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
  if (v8 < 0) {
    operator delete(v7);
  }
  if (v3) {
    __int128 v4 = off_1002B4348;
  }
  else {
    __int128 v4 = 0LL;
  }
  *a1 = v4;
}

void sub_10013BEA4(_Unwind_Exception *a1)
{
}

void sub_10013BEB8(_OWORD **a1, _WORD *a2, int a3)
{
  if (a3 == 4)
  {
    a2[4] = 0;
  }

  else
  {
    sub_10013BFC0(a1, a2, a3);
  }

void sub_10013BED8(uint64_t *a1, unsigned int a2, unsigned int *a3)
{
  unsigned int v3 = a2;
  sub_10013C0C0(*a1, &v3, a3);
}

uint64_t sub_10013BF00(uint64_t a1, __int128 *a2, void *a3)
{
  __int128 v7 = *a2;
  sub_10013BBD0((uint64_t)&v8, (uint64_t)(a2 + 1));
  uint64_t v5 = sub_10013C3B0(a1, &v7, a3);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
  return v5;
}

void sub_10013BFAC(_Unwind_Exception *a1)
{
}

void sub_10013BFC0(_OWORD **a1, _WORD *a2, int a3)
{
  switch(a3)
  {
    case 0:
      uint64_t v5 = *a1;
      uint64_t v6 = operator new(0x70uLL);
      *uint64_t v6 = *v5;
      sub_10013BBD0((uint64_t)(v6 + 1), (uint64_t)(v5 + 1));
      *(void *)a2 = v6;
      break;
    case 1:
      *(void *)a2 = *a1;
      *a1 = 0LL;
      break;
    case 2:
      __int128 v7 = *(void **)a2;
      if (*(void *)a2)
      {
        sub_100139E10((uint64_t)v7 + 16);
        operator delete(v7);
      }

      goto LABEL_7;
    case 3:
      uint64_t v8 = (const char *)(*(void *)(*(void *)a2 + 8LL) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf6IvN2nl8wpantund14InternalIPCAPIEiRKNS_"
                                                  "3anyENSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEES"
                                                  "G_SG_N8dispatch8callbackIU13block_pointerFvhS7_EEEEENS0_5list7INS0_5va"
                                                  "lueIPS6_EENS_3argILi1EEENSR_ILi2EEENSO_ISG_EESU_SU_NSO_ISL_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp( v8,  (const char *)((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf6IvN2nl8wpantund14InternalIPCAPIEiRKNS_3an yENSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEESG_SG_N 8dispatch8callbackIU13block_pointerFvhS7_EEEEENS0_5list7INS0_5valueIPS6_E ENS_3argILi1EEENSR_ILi2EEENSO_ISG_EESU_SU_NSO_ISL_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = *a1;
      }

      else
      {
LABEL_7:
        *(void *)a2 = 0LL;
      }

      break;
    default:
      a2[4] = 0;
      break;
  }

void sub_10013C0AC(_Unwind_Exception *a1)
{
}

void sub_10013C0C0(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  v3[0] = a2;
  v3[1] = a3;
  sub_10013C0F4(a1 + 16, a1, v3);
}

void sub_10013C0F4(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  uint64_t v6 = (const std::string *)(a1 + 32);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = (uint64_t)a3[1];
  uint64_t v8 = **a3;
  std::string::basic_string(&__str, (const std::string *)(a1 + 8));
  std::string::basic_string(&v14, v6);
  std::string::basic_string(&v13, (const std::string *)(a1 + 56));
  char v9 = *(void **)(a1 + 80);
  if (v9) {
    char v9 = _Block_copy(v9);
  }
  char v10 = *(dispatch_object_s **)(a1 + 88);
  aBlock = v9;
  dispatch_object_t object = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  sub_10013C248(a2, v5, v8, v7, &__str, &v14, &v13, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_10013C1F4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

void sub_10013C248( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, std::string *__str, const std::string *a6, const std::string *a7, uint64_t a8)
{
  std::string v14 = *(void (**)(void *, uint64_t, uint64_t, std::string *, std::string *, std::string *, void **))a1;
  uint64_t v13 = *(void *)(a1 + 8);
  std::string v15 = (void *)(a2 + (v13 >> 1));
  if ((v13 & 1) != 0) {
    std::string v14 = *(void (**)(void *, uint64_t, uint64_t, std::string *, std::string *, std::string *, void **))(*v15 + v14);
  }
  std::string::basic_string(&v22, __str);
  std::string::basic_string(&v21, a6);
  std::string::basic_string(&v20, a7);
  uint64_t v16 = *(void **)a8;
  if (*(void *)a8) {
    uint64_t v16 = _Block_copy(v16);
  }
  std::string v17 = *(dispatch_object_s **)(a8 + 8);
  aBlock = v16;
  dispatch_object_t object = v17;
  if (v17) {
    dispatch_retain(v17);
  }
  v14(v15, a3, a4, &v22, &v21, &v20, &aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_10013C35C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10013C3B0(uint64_t a1, __int128 *a2, void *a3)
{
  __int128 v6 = *a2;
  sub_10013BBD0((uint64_t)&v7, (uint64_t)(a2 + 1));
  sub_10013C46C(a1, &v6, a3);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v13 < 0) {
    operator delete(__p);
  }
  if (v11 < 0) {
    operator delete(v10);
  }
  if (v9 < 0) {
    operator delete(v8);
  }
  return 1LL;
}

void sub_10013C458(_Unwind_Exception *a1)
{
}

uint64_t sub_10013C46C(uint64_t a1, _OWORD *a2, void *a3)
{
  uint64_t v5 = operator new(0x70uLL);
  *uint64_t v5 = *a2;
  uint64_t result = sub_10013BBD0((uint64_t)(v5 + 1), (uint64_t)(a2 + 1));
  *a3 = v5;
  return result;
}

void sub_10013C4B4(_Unwind_Exception *a1)
{
}

uint64_t sub_10013C4C8(uint64_t a1)
{
  return sub_10013C4D8((uint64_t *)(a1 + 32), (unsigned __int8 *)(a1 + 48), (uint64_t *)(a1 + 40));
}

uint64_t sub_10013C4D8(uint64_t *a1, unsigned __int8 *a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  __int128 v6 = operator new(0x10uLL);
  uint64_t v7 = *a3;
  *__int128 v6 = &off_1002B2118;
  v6[1] = v7;
  char v9 = v6;
  (*(void (**)(uint64_t, uint64_t, void **))(v4 + 16))(v4, v5, &v9);
  uint64_t result = (uint64_t)v9;
  if (v9) {
    return (*(uint64_t (**)(void *))(*v9 + 8LL))(v9);
  }
  return result;
}

void sub_10013C550( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10013C570(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 32);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void sub_10013C5A0(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

uint64_t sub_10013C5C0( uint64_t a1, uint64_t a2, uint64_t *a3, std::string *__str, const std::string *a5, const std::string *a6, uint64_t a7)
{
  uint64_t v13 = *a3;
  if (*a3) {
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 24LL))(v13);
  }
  uint64_t v22 = v13;
  std::string::basic_string(&__stra, __str);
  std::string::basic_string(&v20, a5);
  std::string::basic_string(&v19, a6);
  std::string v14 = *(void **)a7;
  if (*(void *)a7) {
    std::string v14 = _Block_copy(v14);
  }
  std::string v15 = *(dispatch_object_s **)(a7 + 8);
  aBlock = v14;
  dispatch_object_t object = v15;
  if (v15) {
    dispatch_retain(v15);
  }
  sub_10013C75C(a1, a2, &v22, &__stra, &v20, &v19, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8LL))(v22);
  }
  return a1;
}

void sub_10013C6EC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  uint64_t v30 = *(void *)(v28 - 56);
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8LL))(v30);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10013C75C( uint64_t a1, uint64_t a2, uint64_t *a3, std::string *__str, const std::string *a5, const std::string *a6, uint64_t a7)
{
  uint64_t v13 = *a3;
  if (*a3) {
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 24LL))(v13);
  }
  uint64_t v20 = v13;
  std::string::basic_string(&__stra, __str);
  std::string::basic_string(&v18, a5);
  std::string::basic_string(&__p, a6);
  sub_10013C8D0(a1, a2, &v20, &__stra, &v18, &__p);
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
  }
  std::string v14 = *(void **)a7;
  if (*(void *)a7) {
    std::string v14 = _Block_copy(v14);
  }
  std::string v15 = *(dispatch_object_s **)(a7 + 8);
  *(void *)(a1 + 88) = v14;
  *(void *)(a1 + 96) = v15;
  if (v15) {
    dispatch_retain(v15);
  }
  return a1;
}

void sub_10013C868( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  uint64_t v28 = *(void *)(v26 - 56);
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8LL))(v28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10013C8D0( uint64_t a1, uint64_t a2, uint64_t *a3, std::string *__str, const std::string *a5, const std::string *a6)
{
  uint64_t v11 = *a3;
  if (*a3) {
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 24LL))(v11);
  }
  uint64_t v15 = v11;
  std::string::basic_string(&__stra, __str);
  std::string::basic_string(&v13, a5);
  sub_10013CA00(a1, a2, &v15, &__stra, &v13);
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
  }
  std::string::basic_string((std::string *)(a1 + 64), a6);
  return a1;
}

void sub_10013C9A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22)
{
}

uint64_t sub_10013CA00(uint64_t a1, uint64_t a2, uint64_t *a3, std::string *__str, const std::string *a5)
{
  uint64_t v9 = *a3;
  if (*a3) {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24LL))(v9);
  }
  uint64_t v12 = v9;
  std::string::basic_string(&__p, __str);
  sub_10013CAEC(a1, a2, &v12, &__p);
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
  }
  std::string::basic_string((std::string *)(a1 + 40), a5);
  return a1;
}

void sub_10013CAA4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
}

uint64_t sub_10013CAEC(uint64_t a1, uint64_t a2, void *a3, const std::string *a4)
{
  if (!*a3)
  {
    *(void *)a1 = a2;
    goto LABEL_5;
  }

  uint64_t v7 = (*(uint64_t (**)(void))(*(void *)*a3 + 24LL))(*a3);
  *(void *)a1 = a2;
  if (!v7)
  {
LABEL_5:
    *(void *)(a1 + 8) = 0LL;
    goto LABEL_6;
  }

  uint64_t v8 = v7;
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 24LL))(v7);
  (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
LABEL_6:
  std::string::basic_string((std::string *)(a1 + 16), a4);
  return a1;
}

void sub_10013CB7C(_Unwind_Exception *a1)
{
}

void *sub_10013CBA8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = a2;
  a1[1] = a3;
  sub_10013CBFC((uint64_t)(a1 + 2), a4);
  __int128 v6 = *(void **)(a4 + 88);
  if (v6) {
    __int128 v6 = _Block_copy(v6);
  }
  uint64_t v7 = *(dispatch_object_s **)(a4 + 96);
  a1[13] = v6;
  a1[14] = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  return a1;
}

uint64_t sub_10013CBFC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  }
  *(void *)(a1 + 8) = v4;
  std::string::basic_string((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  std::string::basic_string((std::string *)(a1 + 40), (const std::string *)(a2 + 40));
  std::string::basic_string((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
  return a1;
}

void sub_10013CC64(_Unwind_Exception *a1)
{
}

uint64_t (***sub_10013CCA4(uint64_t (***a1)(), __int128 *a2))()
{
  __int128 v7 = *a2;
  sub_10013CBFC((uint64_t)v8, (uint64_t)(a2 + 1));
  uint64_t v4 = (void *)*((void *)a2 + 13);
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = (dispatch_object_s *)*((void *)a2 + 14);
  v8[11] = v4;
  v8[12] = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  sub_10013CD40(a1, (uint64_t)&v7);
  sub_100139EB8((uint64_t)v8);
  return a1;
}

void sub_10013CD2C(_Unwind_Exception *a1)
{
}

uint64_t (***sub_10013CD40(uint64_t (***a1)(), uint64_t a2))()
{
  *a1 = 0LL;
  __int128 v7 = *(_OWORD *)a2;
  sub_10013CBFC((uint64_t)v8, a2 + 16);
  uint64_t v4 = *(void **)(a2 + 104);
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = *(dispatch_object_s **)(a2 + 112);
  v8[11] = v4;
  v8[12] = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  sub_10013CDDC(a1, &v7);
  sub_100139EB8((uint64_t)v8);
  return a1;
}

void sub_10013CDC8(_Unwind_Exception *a1)
{
}

uint64_t sub_10013CDDC(uint64_t (***a1)(), __int128 *a2)
{
  __int128 v9 = *a2;
  sub_10013CBFC((uint64_t)v10, (uint64_t)(a2 + 1));
  uint64_t v4 = (void *)*((void *)a2 + 13);
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = (dispatch_object_s *)*((void *)a2 + 14);
  v10[11] = v4;
  v10[12] = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  int v6 = sub_10013CED4((uint64_t)off_1002B4398, (uint64_t)&v9, a1 + 1);
  uint64_t result = sub_100139EB8((uint64_t)v10);
  if (v6) {
    uint64_t v8 = off_1002B4398;
  }
  else {
    uint64_t v8 = 0LL;
  }
  *a1 = v8;
  return result;
}

void sub_10013CE78(_Unwind_Exception *a1)
{
}

void sub_10013CE8C(uint64_t *a1, _WORD *a2, int a3)
{
  if (a3 == 4)
  {
    a2[4] = 0;
  }

  else
  {
    sub_10013CF78(a1, a2, a3);
  }

uint64_t sub_10013CEAC(uint64_t *a1, unsigned int a2)
{
  unsigned int v3 = a2;
  return sub_10013D09C(*a1, &v3);
}

uint64_t sub_10013CED4(uint64_t a1, uint64_t a2, void *a3)
{
  __int128 v10 = *(_OWORD *)a2;
  sub_10013CBFC((uint64_t)v11, a2 + 16);
  int v6 = *(void **)(a2 + 104);
  if (v6) {
    int v6 = _Block_copy(v6);
  }
  __int128 v7 = *(dispatch_object_s **)(a2 + 112);
  v11[11] = v6;
  v11[12] = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  uint64_t v8 = sub_10013D40C(a1, &v10, a3);
  sub_100139EB8((uint64_t)v11);
  return v8;
}

void sub_10013CF64(_Unwind_Exception *a1)
{
}

void sub_10013CF78(uint64_t *a1, _WORD *a2, int a3)
{
  switch(a3)
  {
    case 0:
      uint64_t v5 = *a1;
      int v6 = operator new(0x78uLL);
      *(_OWORD *)int v6 = *(_OWORD *)v5;
      sub_10013CBFC((uint64_t)(v6 + 2), v5 + 16);
      __int128 v7 = *(void **)(v5 + 104);
      if (v7) {
        __int128 v7 = _Block_copy(v7);
      }
      uint64_t v8 = *(dispatch_object_s **)(v5 + 112);
      v6[13] = v7;
      v6[14] = v8;
      if (v8) {
        dispatch_retain(v8);
      }
      *(void *)a2 = v6;
      break;
    case 1:
      *(void *)a2 = *a1;
      *a1 = 0LL;
      break;
    case 2:
      __int128 v9 = *(void **)a2;
      if (*(void *)a2)
      {
        sub_100139EB8((uint64_t)v9 + 16);
        operator delete(v9);
      }

      goto LABEL_13;
    case 3:
      __int128 v10 = (const char *)(*(void *)(*(void *)a2 + 8LL) & 0x7FFFFFFFFFFFFFFFLL);
      if (v10 == (const char *)((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf6IvN2nl8wpantund14InternalIPCAPIEiNS_3"
                                                   "anyENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEES"
                                                   "E_SE_N8dispatch8callbackIU13block_pointerFvhS7_EEEEENS0_5list7INS0_5v"
                                                   "alueIPS6_EENS_3argILi1EEENSM_IS7_EENSM_ISE_EESS_SS_NSM_ISJ_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp( v10,  (const char *)((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf6IvN2nl8wpantund14InternalIPCAPIEiNS_3anyE NSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEESE_SE_N8d ispatch8callbackIU13block_pointerFvhS7_EEEEENS0_5list7INS0_5valueIPS6_EEN S_3argILi1EEENSM_IS7_EENSM_ISE_EESS_SS_NSM_ISJ_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = *a1;
      }

      else
      {
LABEL_13:
        *(void *)a2 = 0LL;
      }

      break;
    default:
      a2[4] = 0;
      break;
  }

void sub_10013D088(_Unwind_Exception *a1)
{
}

uint64_t sub_10013D09C(uint64_t a1, unsigned int *a2)
{
  unsigned int v3 = a2;
  return sub_10013D0D0(a1 + 16, a1, &v3);
}

uint64_t sub_10013D0D0(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  uint64_t v5 = **a3;
  uint64_t v7 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6) {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24LL))(v6);
  }
  uint64_t v16 = v6;
  std::string::basic_string(&__str, (const std::string *)(a1 + 16));
  std::string::basic_string(&v14, (const std::string *)(a1 + 40));
  std::string::basic_string(&v13, (const std::string *)(a1 + 64));
  uint64_t v8 = *(void **)(a1 + 88);
  if (v8) {
    uint64_t v8 = _Block_copy(v8);
  }
  __int128 v9 = *(dispatch_object_s **)(a1 + 96);
  aBlock = v8;
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  sub_10013D25C(a2, v7, v5, &v16, &__str, &v14, &v13, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  uint64_t result = v16;
  if (v16) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
  }
  return result;
}

void sub_10013D1EC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  uint64_t v30 = *(void *)(v28 - 40);
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8LL))(v30);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10013D25C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, std::string *__str, const std::string *a6, const std::string *a7, uint64_t a8)
{
  std::string v14 = *(void (**)(void *, uint64_t, uint64_t *, std::string *, std::string *, std::string *, void **))a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v15 = (void *)(a2 + (v13 >> 1));
  if ((v13 & 1) != 0) {
    std::string v14 = *(void (**)(void *, uint64_t, uint64_t *, std::string *, std::string *, std::string *, void **))(*v15 + v14);
  }
  uint64_t v16 = *a4;
  if (*a4) {
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 24LL))(v16);
  }
  uint64_t v25 = v16;
  std::string::basic_string(&v24, __str);
  std::string::basic_string(&v23, a6);
  std::string::basic_string(&v22, a7);
  std::string v17 = *(void **)a8;
  if (*(void *)a8) {
    std::string v17 = _Block_copy(v17);
  }
  std::string v18 = *(dispatch_object_s **)(a8 + 8);
  aBlock = v17;
  dispatch_object_t object = v18;
  if (v18) {
    dispatch_retain(v18);
  }
  v14(v15, a3, &v25, &v24, &v23, &v22, &aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  uint64_t result = v25;
  if (v25) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
  }
  return result;
}

void sub_10013D39C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  uint64_t v30 = *(void *)(v28 - 72);
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8LL))(v30);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10013D40C(uint64_t a1, __int128 *a2, void *a3)
{
  __int128 v9 = *a2;
  sub_10013CBFC((uint64_t)v10, (uint64_t)(a2 + 1));
  uint64_t v6 = (void *)*((void *)a2 + 13);
  if (v6) {
    uint64_t v6 = _Block_copy(v6);
  }
  uint64_t v7 = (dispatch_object_s *)*((void *)a2 + 14);
  v10[11] = v6;
  v10[12] = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  sub_10013D4AC(a1, (uint64_t)&v9, a3);
  sub_100139EB8((uint64_t)v10);
  return 1LL;
}

void sub_10013D498(_Unwind_Exception *a1)
{
}

void sub_10013D4AC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = operator new(0x78uLL);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  sub_10013CBFC((uint64_t)(v5 + 2), a2 + 16);
  uint64_t v6 = *(void **)(a2 + 104);
  if (v6) {
    uint64_t v6 = _Block_copy(v6);
  }
  uint64_t v7 = *(dispatch_object_s **)(a2 + 112);
  v5[13] = v6;
  v5[14] = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  *a3 = v5;
}

void sub_10013D518(_Unwind_Exception *a1)
{
}

uint64_t sub_10013D52C( uint64_t a1, uint64_t a2, uint64_t *a3, const std::string *a4, const std::string *a5, uint64_t a6)
{
  uint64_t v11 = *(void **)a6;
  if (*(void *)a6) {
    uint64_t v11 = _Block_copy(v11);
  }
  uint64_t v12 = *(dispatch_object_s **)(a6 + 8);
  aBlock = v11;
  dispatch_object_t object = v12;
  if (v12) {
    dispatch_retain(v12);
  }
  sub_10013D668(a1, a2, v18, &v17, &v16, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  sub_10000D448((uint64_t)v18);
  return a1;
}

void sub_10013D61C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, char a24)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  sub_10000D448((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t sub_10013D668( uint64_t a1, uint64_t a2, uint64_t *a3, const std::string *a4, const std::string *a5, uint64_t a6)
{
  uint64_t v11 = *(void **)a6;
  if (*(void *)a6) {
    uint64_t v11 = _Block_copy(v11);
  }
  uint64_t v12 = *(dispatch_object_s **)(a6 + 8);
  *(void *)(a1 + 80) = v11;
  *(void *)(a1 + 88) = v12;
  if (v12) {
    dispatch_retain(v12);
  }
  return a1;
}

void sub_10013D738( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  sub_10000D448((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_10013D77C(uint64_t a1, uint64_t a2, uint64_t *a3, const std::string *a4, const std::string *a5)
{
  return a1;
}

void sub_10013D808( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t sub_10013D844(uint64_t a1, uint64_t a2, uint64_t *a3, const std::string *a4)
{
  *(void *)a1 = a2;
  sub_10000D19C((void *)(a1 + 8), v8);
  sub_10000D448((uint64_t)v8);
  std::string::basic_string((std::string *)(a1 + 32), a4);
  return a1;
}

void sub_10013D8B0(_Unwind_Exception *a1)
{
}

uint64_t sub_10013D8D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (const std::string *)(a2 + 32);
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = (std::string *)(a1 + 32);
  sub_10000D19C((void *)(a1 + 8), (uint64_t *)(a2 + 8));
  std::string::basic_string(v5, v4);
  std::string::basic_string((std::string *)(a1 + 56), (const std::string *)(a2 + 56));
  uint64_t v6 = *(void **)(a2 + 80);
  if (v6) {
    uint64_t v6 = _Block_copy(v6);
  }
  uint64_t v7 = *(dispatch_object_s **)(a2 + 88);
  *(void *)(a1 + 80) = v6;
  *(void *)(a1 + 88) = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  return a1;
}

void sub_10013D960(_Unwind_Exception *a1)
{
}

uint64_t (***sub_10013D984(uint64_t (***a1)(), __int128 *a2))()
{
  __int128 v4 = *a2;
  sub_10013D8D0((uint64_t)&v5, (uint64_t)(a2 + 1));
  sub_10013DA2C(a1, &v4);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8 < 0) {
    operator delete(v7);
  }
  sub_10000D448((uint64_t)&v6);
  return a1;
}

void sub_10013DA18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t (***sub_10013DA2C(uint64_t (***a1)(), __int128 *a2))()
{
  *a1 = 0LL;
  __int128 v4 = *a2;
  sub_10013D8D0((uint64_t)&v5, (uint64_t)(a2 + 1));
  sub_10013DAD4(a1, &v4);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8 < 0) {
    operator delete(v7);
  }
  sub_10000D448((uint64_t)&v6);
  return a1;
}

void sub_10013DAC0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10013DAD4(uint64_t (***a1)(), __int128 *a2)
{
  __int128 v6 = *a2;
  sub_10013D8D0((uint64_t)&v7, (uint64_t)(a2 + 1));
  int v3 = sub_10013DBE0((uint64_t)off_1002B43B8, &v6, a1 + 1);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v12 < 0) {
    operator delete(__p);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
  uint64_t result = sub_10000D448((uint64_t)&v8);
  if (v3) {
    uint64_t v5 = off_1002B43B8;
  }
  else {
    uint64_t v5 = 0LL;
  }
  *a1 = v5;
  return result;
}

void sub_10013DB84( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10013DB98(_OWORD **a1, _WORD *a2, int a3)
{
  if (a3 == 4)
  {
    a2[4] = 0;
  }

  else
  {
    sub_10013DC90(a1, a2, a3);
  }

uint64_t sub_10013DBB8(uint64_t *a1, unsigned int a2)
{
  unsigned int v3 = a2;
  return sub_10013DDCC(*a1, &v3);
}

uint64_t sub_10013DBE0(uint64_t a1, __int128 *a2, void *a3)
{
  __int128 v7 = *a2;
  sub_10013D8D0((uint64_t)&v8, (uint64_t)(a2 + 1));
  uint64_t v5 = sub_10013E0CC(a1, &v7, a3);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v13 < 0) {
    operator delete(__p);
  }
  if (v11 < 0) {
    operator delete(v10);
  }
  sub_10000D448((uint64_t)&v9);
  return v5;
}

void sub_10013DC7C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10013DC90(_OWORD **a1, _WORD *a2, int a3)
{
  switch(a3)
  {
    case 0:
      uint64_t v5 = *a1;
      __int128 v6 = operator new(0x70uLL);
      *__int128 v6 = *v5;
      sub_10013D8D0((uint64_t)(v6 + 1), (uint64_t)(v5 + 1));
      *(void *)a2 = v6;
      break;
    case 1:
      *(void *)a2 = *a1;
      *a1 = 0LL;
      break;
    case 2:
      uint64_t v7 = *(void *)a2;
      if (*(void *)a2)
      {
        uint64_t v8 = *(dispatch_object_s **)(v7 + 104);
        if (v8) {
          dispatch_release(v8);
        }
        uint64_t v9 = *(const void **)(v7 + 96);
        if (v9) {
          _Block_release(v9);
        }
        sub_10000D448(v7 + 24);
        operator delete((void *)v7);
      }

      goto LABEL_17;
    case 3:
      char v10 = (const char *)(*(void *)(*(void *)a2 + 8LL) & 0x7FFFFFFFFFFFFFFFLL);
      if (v10 == (const char *)((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf5IvN2nl8wpantund14InternalIPCAPIEiNS_3"
                                                   "anyENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEES"
                                                   "E_N8dispatch8callbackIU13block_pointerFvhS7_EEEEENS0_5list6INS0_5valu"
                                                   "eIPS6_EENS_3argILi1EEENSM_INS8_3mapISE_S7_NS8_4lessISE_EENSC_INS8_4pa"
                                                   "irIKSE_S7_EEEEEEEENSM_ISE_EES10_NSM_ISJ_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp( v10,  (const char *)((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf5IvN2nl8wpantund14InternalIPCAPIEiNS_3anyE NSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEESE_N8disp atch8callbackIU13block_pointerFvhS7_EEEEENS0_5list6INS0_5valueIPS6_EENS_3 argILi1EEENSM_INS8_3mapISE_S7_NS8_4lessISE_EENSC_INS8_4pairIKSE_S7_EEEEEE EENSM_ISE_EES10_NSM_ISJ_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = *a1;
      }

      else
      {
LABEL_17:
        *(void *)a2 = 0LL;
      }

      break;
    default:
      a2[4] = 0;
      break;
  }

void sub_10013DDB8(_Unwind_Exception *a1)
{
}

uint64_t sub_10013DDCC(uint64_t a1, unsigned int *a2)
{
  unsigned int v3 = a2;
  return sub_10013DE00(a1 + 16, a1, &v3);
}

uint64_t sub_10013DE00(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  __int128 v6 = (const std::string *)(a1 + 32);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = **a3;
  sub_1000738CC(&v15, (uint64_t *)(a1 + 8));
  std::string::basic_string(&__str, v6);
  std::string::basic_string(&v13, (const std::string *)(a1 + 56));
  uint64_t v8 = *(void **)(a1 + 80);
  if (v8) {
    uint64_t v8 = _Block_copy(v8);
  }
  uint64_t v9 = *(dispatch_object_s **)(a1 + 88);
  aBlock = v8;
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  sub_10013DF60(a2, v5, v7, &v15, &__str, &v13, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  uint64_t result = v15;
  if (v15) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
  }
  return result;
}

void sub_10013DF08( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  uint64_t v25 = *(void *)(v23 - 56);
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10013DF60( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, std::string *__str, const std::string *a6, uint64_t a7)
{
  char v12 = *(void (**)(void *, uint64_t, uint64_t *, std::string *, std::string *, void **))a1;
  uint64_t v11 = *(void *)(a1 + 8);
  std::string v13 = (void *)(a2 + (v11 >> 1));
  if ((v11 & 1) != 0) {
    char v12 = *(void (**)(void *, uint64_t, uint64_t *, std::string *, std::string *, void **))(*v13 + v12);
  }
  uint64_t v14 = *a4;
  if (*a4) {
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 24LL))(v14);
  }
  uint64_t v22 = v14;
  std::string::basic_string(&v21, __str);
  std::string::basic_string(&v20, a6);
  uint64_t v15 = *(void **)a7;
  if (*(void *)a7) {
    uint64_t v15 = _Block_copy(v15);
  }
  std::string v16 = *(dispatch_object_s **)(a7 + 8);
  aBlock = v15;
  dispatch_object_t object = v16;
  if (v16) {
    dispatch_retain(v16);
  }
  v12(v13, a3, &v22, &v21, &v20, &aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  uint64_t result = v22;
  if (v22) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v22 + 8LL))(v22);
  }
  return result;
}

void sub_10013E074( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  uint64_t v25 = *(void *)(v23 - 56);
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10013E0CC(uint64_t a1, __int128 *a2, void *a3)
{
  __int128 v6 = *a2;
  sub_10013D8D0((uint64_t)&v7, (uint64_t)(a2 + 1));
  sub_10013E178(a1, &v6, a3);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v12 < 0) {
    operator delete(__p);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
  sub_10000D448((uint64_t)&v8);
  return 1LL;
}

void sub_10013E164( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10013E178(uint64_t a1, _OWORD *a2, void *a3)
{
  uint64_t v5 = operator new(0x70uLL);
  *uint64_t v5 = *a2;
  uint64_t result = sub_10013D8D0((uint64_t)(v5 + 1), (uint64_t)(a2 + 1));
  *a3 = v5;
  return result;
}

void sub_10013E1C0(_Unwind_Exception *a1)
{
}

uint64_t sub_10013E1D4( uint64_t a1, uint64_t a2, uint64_t *a3, std::string *__str, const std::string *a5, uint64_t a6)
{
  uint64_t v11 = *a3;
  if (*a3) {
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 24LL))(v11);
  }
  uint64_t v19 = v11;
  std::string::basic_string(&__stra, __str);
  std::string::basic_string(&v17, a5);
  char v12 = *(void **)a6;
  if (*(void *)a6) {
    char v12 = _Block_copy(v12);
  }
  std::string v13 = *(dispatch_object_s **)(a6 + 8);
  aBlock = v12;
  dispatch_object_t object = v13;
  if (v13) {
    dispatch_retain(v13);
  }
  sub_10013E334(a1, a2, &v19, &__stra, &v17, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
  }
  return a1;
}

void sub_10013E2DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  uint64_t v25 = *(void *)(v23 - 56);
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10013E334( uint64_t a1, uint64_t a2, uint64_t *a3, std::string *__str, const std::string *a5, uint64_t a6)
{
  uint64_t v11 = *a3;
  if (*a3) {
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 24LL))(v11);
  }
  uint64_t v17 = v11;
  std::string::basic_string(&__stra, __str);
  std::string::basic_string(&v15, a5);
  sub_10013CA00(a1, a2, &v17, &__stra, &v15);
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
  }
  char v12 = *(void **)a6;
  if (*(void *)a6) {
    char v12 = _Block_copy(v12);
  }
  std::string v13 = *(dispatch_object_s **)(a6 + 8);
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v13;
  if (v13) {
    dispatch_retain(v13);
  }
  return a1;
}

void sub_10013E41C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a22) {
    (*(void (**)(uint64_t))(*(void *)a22 + 8LL))(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10013E46C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  }
  *(void *)(a1 + 8) = v4;
  std::string::basic_string((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  std::string::basic_string((std::string *)(a1 + 40), (const std::string *)(a2 + 40));
  uint64_t v5 = *(void **)(a2 + 64);
  if (v5) {
    uint64_t v5 = _Block_copy(v5);
  }
  __int128 v6 = *(dispatch_object_s **)(a2 + 72);
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  return a1;
}

void sub_10013E4EC(_Unwind_Exception *a1)
{
}

uint64_t (***sub_10013E51C(uint64_t (***a1)(), __int128 *a2))()
{
  __int128 v4 = *a2;
  sub_10013E46C((uint64_t)&v5, (uint64_t)(a2 + 1));
  sub_10013E5D0(a1, &v4);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8 < 0) {
    operator delete(v7);
  }
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  return a1;
}

void sub_10013E5BC(_Unwind_Exception *a1)
{
}

uint64_t (***sub_10013E5D0(uint64_t (***a1)(), __int128 *a2))()
{
  *a1 = 0LL;
  __int128 v4 = *a2;
  sub_10013E46C((uint64_t)&v5, (uint64_t)(a2 + 1));
  sub_10013E684(a1, &v4);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8 < 0) {
    operator delete(v7);
  }
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  return a1;
}

void sub_10013E670(_Unwind_Exception *a1)
{
}

uint64_t sub_10013E684(uint64_t (***a1)(), __int128 *a2)
{
  __int128 v6 = *a2;
  sub_10013E46C((uint64_t)&v7, (uint64_t)(a2 + 1));
  int v3 = sub_10013E79C((uint64_t)off_1002B43D8, &v6, a1 + 1);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v12 < 0) {
    operator delete(__p);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
  uint64_t result = v8;
  if (v8) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  if (v3) {
    uint64_t v5 = off_1002B43D8;
  }
  else {
    uint64_t v5 = 0LL;
  }
  *a1 = v5;
  return result;
}

void sub_10013E740(_Unwind_Exception *a1)
{
}

void sub_10013E754(_OWORD **a1, _WORD *a2, int a3)
{
  if (a3 == 4)
  {
    a2[4] = 0;
  }

  else
  {
    sub_10013E860(a1, a2, a3);
  }

uint64_t sub_10013E774(uint64_t *a1, unsigned int a2)
{
  unsigned int v3 = a2;
  return sub_10013E960(*a1, &v3);
}

uint64_t sub_10013E79C(uint64_t a1, __int128 *a2, void *a3)
{
  __int128 v7 = *a2;
  sub_10013E46C((uint64_t)&v8, (uint64_t)(a2 + 1));
  uint64_t v5 = sub_10013EAE8(a1, &v7, a3);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v13 < 0) {
    operator delete(__p);
  }
  if (v11 < 0) {
    operator delete(v10);
  }
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  return v5;
}

void sub_10013E84C(_Unwind_Exception *a1)
{
}

void sub_10013E860(_OWORD **a1, _WORD *a2, int a3)
{
  switch(a3)
  {
    case 0:
      uint64_t v5 = *a1;
      __int128 v6 = operator new(0x60uLL);
      *__int128 v6 = *v5;
      sub_10013E46C((uint64_t)(v6 + 1), (uint64_t)(v5 + 1));
      *(void *)a2 = v6;
      break;
    case 1:
      *(void *)a2 = *a1;
      *a1 = 0LL;
      break;
    case 2:
      __int128 v7 = *(void **)a2;
      if (*(void *)a2)
      {
        sub_10013A06C((uint64_t)v7 + 16);
        operator delete(v7);
      }

      goto LABEL_7;
    case 3:
      uint64_t v8 = (const char *)(*(void *)(*(void *)a2 + 8LL) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf5IvN2nl8wpantund14InternalIPCAPIEiNS_3a"
                                                  "nyENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEESE_"
                                                  "N8dispatch8callbackIU13block_pointerFvhS7_EEEEENS0_5list6INS0_5valueIP"
                                                  "S6_EENS_3argILi1EEENSM_IS7_EENSM_ISE_EESS_NSM_ISJ_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp( v8,  (const char *)((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf5IvN2nl8wpantund14InternalIPCAPIEiNS_3anyE NSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEESE_N8disp atch8callbackIU13block_pointerFvhS7_EEEEENS0_5list6INS0_5valueIPS6_EENS_3 argILi1EEENSM_IS7_EENSM_ISE_EESS_NSM_ISJ_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = *a1;
      }

      else
      {
LABEL_7:
        *(void *)a2 = 0LL;
      }

      break;
    default:
      a2[4] = 0;
      break;
  }

void sub_10013E94C(_Unwind_Exception *a1)
{
}

uint64_t sub_10013E960(uint64_t a1, unsigned int *a2)
{
  unsigned int v3 = a2;
  return sub_10013E994(a1 + 16, a1, &v3);
}

uint64_t sub_10013E994(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  uint64_t v5 = **a3;
  uint64_t v7 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6) {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24LL))(v6);
  }
  uint64_t v15 = v6;
  std::string::basic_string(&__str, (const std::string *)(a1 + 16));
  std::string::basic_string(&v13, (const std::string *)(a1 + 40));
  uint64_t v8 = *(void **)(a1 + 64);
  if (v8) {
    uint64_t v8 = _Block_copy(v8);
  }
  uint64_t v9 = *(dispatch_object_s **)(a1 + 72);
  aBlock = v8;
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  sub_10013DF60(a2, v7, v5, &v15, &__str, &v13, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  uint64_t result = v15;
  if (v15) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
  }
  return result;
}

void sub_10013EA90( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  uint64_t v25 = *(void *)(v23 - 40);
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10013EAE8(uint64_t a1, __int128 *a2, void *a3)
{
  __int128 v6 = *a2;
  sub_10013E46C((uint64_t)&v7, (uint64_t)(a2 + 1));
  sub_10013EBA8(a1, &v6, a3);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v12 < 0) {
    operator delete(__p);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  return 1LL;
}

void sub_10013EB94(_Unwind_Exception *a1)
{
}

uint64_t sub_10013EBA8(uint64_t a1, _OWORD *a2, void *a3)
{
  uint64_t v5 = operator new(0x60uLL);
  *uint64_t v5 = *a2;
  uint64_t result = sub_10013E46C((uint64_t)(v5 + 1), (uint64_t)(a2 + 1));
  *a3 = v5;
  return result;
}

void sub_10013EBF0(_Unwind_Exception *a1)
{
}

uint64_t sub_10013EC04(uint64_t a1)
{
  return sub_10013EC14((uint64_t *)(a1 + 32), (unsigned __int8 *)(a1 + 64), (uint64_t *)(a1 + 40));
}

uint64_t sub_10013EC14(uint64_t *a1, unsigned __int8 *a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  sub_10000D66C(&v6, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(v3 + 16))(v3, v4, &v6);
  uint64_t result = v6;
  if (v6) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  return result;
}

void sub_10013EC70( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10013EC90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 32);
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  *(void *)(a1 + 32) = v4;
  return sub_10000D19C((void *)(a1 + 40), (uint64_t *)(a2 + 40));
}

void sub_10013ECD0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 32);
  if (v3) {
    _Block_release(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10013ECEC(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    _Block_release(v2);
  }
}

uint64_t sub_10013ED20(uint64_t a1)
{
  return sub_10013ED2C((uint64_t *)(a1 + 32), (uint64_t *)(a1 + 40));
}

uint64_t sub_10013ED2C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  uint64_t v5 = v3;
  (*(void (**)(uint64_t, uint64_t *))(v2 + 16))(v2, &v5);
  uint64_t result = v5;
  if (v5) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  return result;
}

void sub_10013ED8C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10013EDAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 32);
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  *(void *)(a1 + 32) = v4;
  uint64_t result = *(void *)(a2 + 40);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 24LL))(result);
  }
  *(void *)(a1 + memset(&v22.ai_socktype, 0, 40) = result;
  return result;
}

void sub_10013EDF4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 32);
  if (v3) {
    _Block_release(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10013EE14(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 32);
  if (v3) {
    _Block_release(v3);
  }
}

uint64_t sub_10013EE54(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void *sub_10013EE60(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 32);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void sub_10013EE90(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

uint64_t (***sub_10013EEB0(uint64_t (***a1)(), __int128 *a2))()
{
  __int128 v4 = *a2;
  sub_10013E46C((uint64_t)&v5, (uint64_t)(a2 + 1));
  sub_10013EF64(a1, &v4);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8 < 0) {
    operator delete(v7);
  }
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  return a1;
}

void sub_10013EF50(_Unwind_Exception *a1)
{
}

uint64_t (***sub_10013EF64(uint64_t (***a1)(), __int128 *a2))()
{
  *a1 = 0LL;
  __int128 v4 = *a2;
  sub_10013E46C((uint64_t)&v5, (uint64_t)(a2 + 1));
  sub_10013F018(a1, &v4);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8 < 0) {
    operator delete(v7);
  }
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  return a1;
}

void sub_10013F004(_Unwind_Exception *a1)
{
}

uint64_t sub_10013F018(uint64_t (***a1)(), __int128 *a2)
{
  __int128 v6 = *a2;
  sub_10013E46C((uint64_t)&v7, (uint64_t)(a2 + 1));
  int v3 = sub_10013F110((uint64_t)off_1002B4488, &v6, a1 + 1);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v12 < 0) {
    operator delete(__p);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
  uint64_t result = v8;
  if (v8) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  if (v3) {
    uint64_t v5 = off_1002B4488;
  }
  else {
    uint64_t v5 = 0LL;
  }
  *a1 = v5;
  return result;
}

void sub_10013F0D4(_Unwind_Exception *a1)
{
}

uint64_t sub_10013F0E8(uint64_t *a1, unsigned int a2, unsigned int *a3)
{
  unsigned int v4 = a2;
  return sub_10013F1D4(*a1, &v4, a3);
}

uint64_t sub_10013F110(uint64_t a1, __int128 *a2, void *a3)
{
  __int128 v7 = *a2;
  sub_10013E46C((uint64_t)&v8, (uint64_t)(a2 + 1));
  uint64_t v5 = sub_10013F35C(a1, &v7, a3);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v13 < 0) {
    operator delete(__p);
  }
  if (v11 < 0) {
    operator delete(v10);
  }
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  return v5;
}

void sub_10013F1C0(_Unwind_Exception *a1)
{
}

uint64_t sub_10013F1D4(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  v4[0] = a2;
  v4[1] = a3;
  return sub_10013F208(a1 + 16, a1, v4);
}

uint64_t sub_10013F208(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  uint64_t v5 = **a3;
  uint64_t v7 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6) {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24LL))(v6);
  }
  uint64_t v15 = v6;
  std::string::basic_string(&__str, (const std::string *)(a1 + 16));
  std::string::basic_string(&v13, (const std::string *)(a1 + 40));
  uint64_t v8 = *(void **)(a1 + 64);
  if (v8) {
    uint64_t v8 = _Block_copy(v8);
  }
  uint64_t v9 = *(dispatch_object_s **)(a1 + 72);
  aBlock = v8;
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  sub_10013DF60(a2, v7, v5, &v15, &__str, &v13, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  uint64_t result = v15;
  if (v15) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
  }
  return result;
}

void sub_10013F304( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  uint64_t v25 = *(void *)(v23 - 40);
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10013F35C(uint64_t a1, __int128 *a2, void *a3)
{
  __int128 v6 = *a2;
  sub_10013E46C((uint64_t)&v7, (uint64_t)(a2 + 1));
  sub_10013F41C(a1, &v6, a3);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v12 < 0) {
    operator delete(__p);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  return 1LL;
}

void sub_10013F408(_Unwind_Exception *a1)
{
}

uint64_t sub_10013F41C(uint64_t a1, _OWORD *a2, void *a3)
{
  uint64_t v5 = operator new(0x60uLL);
  *uint64_t v5 = *a2;
  uint64_t result = sub_10013E46C((uint64_t)(v5 + 1), (uint64_t)(a2 + 1));
  *a3 = v5;
  return result;
}

void sub_10013F464(_Unwind_Exception *a1)
{
}

uint64_t sub_10013F478(uint64_t a1, _OWORD *a2)
{
  *(_BYTE *)a1 = 0;
  sub_10013F4C0((void *)(a1 + 8));
  *(_OWORD *)(a1 + 272) = *a2;
  *(void *)(a1 + 288) = 0LL;
  *(void *)(a1 + 296) = 0LL;
  return a1;
}

void sub_10013F4B0(_Unwind_Exception *a1)
{
  if (*v1) {
    *uint64_t v1 = 0;
  }
  _Unwind_Resume(a1);
}

void *sub_10013F4C0(void *a1)
{
  a1[30] = 10LL;
  a1[31] = a1;
  a1[32] = 0LL;
  if (!sub_10013F4F8(a1)) {
    sub_1001FC0A0();
  }
  return a1;
}

BOOL sub_10013F4F8(void *a1)
{
  uint64_t v1 = (void *)a1[31];
  if (!v1) {
    return 1LL;
  }
  unint64_t v2 = a1[30];
  if (v2 >= 0xA && (v1 == a1 ? (BOOL v3 = v2 == 10) : (BOOL v3 = 1), v3)) {
    return a1[32] <= v2;
  }
  else {
    return 0LL;
  }
}

_BYTE *sub_10013F538(_BYTE *a1)
{
  if (!*a1) {
    sub_100212084();
  }
  return a1 + 1;
}

unint64_t sub_10013F558(unint64_t result, unint64_t a2)
{
  unint64_t v2 = *(void *)(result + 240);
  if (v2 >= a2) {
    sub_1001FC1E0();
  }
  if (v2 >> 62)
  {
    __break(0x550Cu);
  }

  else
  {
    unint64_t v3 = 4 * v2;
    if (v3 <= a2) {
      return a2;
    }
    else {
      return v3;
    }
  }

  return result;
}

uint64_t sub_10013F590(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 28);
  if (!v1) {
    sub_1002120D4();
  }
  BOOL v2 = __CFADD__(v1, 1);
  int v3 = v1 + 1;
  if (v2) {
    __break(0x5500u);
  }
  else {
    *(_DWORD *)(result + 28) = v3;
  }
  return result;
}

uint64_t sub_10013F5BC(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator*", "shared_ptr.hpp", 780, "px != 0");
  }
  return result;
}

std::string *sub_10013F5FC( std::string *a1, std::string::size_type a2, std::string::size_type a3, uint64_t *a4, std::string *__str, uint64_t a6)
{
  uint64_t v11 = *a4;
  if (*a4) {
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 24LL))(v11);
  }
  uint64_t v18 = v11;
  std::string::basic_string(&__stra, __str);
  char v12 = *(void **)a6;
  if (*(void *)a6) {
    char v12 = _Block_copy(v12);
  }
  std::string v13 = *(dispatch_object_s **)(a6 + 8);
  aBlock = v12;
  dispatch_object_t object = v13;
  if (v13) {
    dispatch_retain(v13);
  }
  sub_10013F728(a1, a2, a3, &v18, &__stra, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
  }
  return a1;
}

void sub_10013F6E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8LL))(a17);
  }
  _Unwind_Resume(a1);
}

std::string *sub_10013F728( std::string *a1, std::string::size_type a2, std::string::size_type a3, uint64_t *a4, std::string *__str, uint64_t a6)
{
  uint64_t v11 = *a4;
  if (*a4) {
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 24LL))(v11);
  }
  uint64_t v16 = v11;
  std::string::basic_string(&__p, __str);
  sub_10013F82C(a1, a2, a3, &v16, &__p);
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
  }
  char v12 = *(void **)a6;
  if (*(void *)a6) {
    char v12 = _Block_copy(v12);
  }
  std::string v13 = *(dispatch_object_s **)(a6 + 8);
  a1[2].__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
  a1[2].__r_.__value_.__l.__size_ = (std::string::size_type)v13;
  if (v13) {
    dispatch_retain(v13);
  }
  return a1;
}

void sub_10013F7F4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8LL))(a15);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_10013F82C( std::string *a1, std::string::size_type a2, std::string::size_type a3, void *a4, const std::string *a5)
{
  if (!*a4)
  {
    a1->__r_.__value_.__r.__words[0] = a2;
    a1->__r_.__value_.__l.__size_ = a3;
    goto LABEL_5;
  }

  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)*a4 + 24LL))(*a4);
  a1->__r_.__value_.__r.__words[0] = a2;
  a1->__r_.__value_.__l.__size_ = a3;
  if (!v9)
  {
LABEL_5:
    a1->__r_.__value_.__l.__cap_ = 0LL;
    goto LABEL_6;
  }

  uint64_t v10 = v9;
  a1->__r_.__value_.__l.__cap_ = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24LL))(v9);
  (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
LABEL_6:
  std::string::basic_string(a1 + 1, a5);
  return a1;
}

void sub_10013F8C8(_Unwind_Exception *a1)
{
}

uint64_t sub_10013F8F4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  }
  *(void *)(a1 + 16) = v4;
  std::string::basic_string((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  uint64_t v5 = *(void **)(a2 + 48);
  if (v5) {
    uint64_t v5 = _Block_copy(v5);
  }
  __int128 v6 = *(dispatch_object_s **)(a2 + 56);
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + sub_10000D448(v30 - 56) = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  return a1;
}

void sub_10013F968(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t (***sub_10013F988(uint64_t (***a1)(), __int128 *a2))()
{
  __int128 v4 = *a2;
  sub_10013F8F4((uint64_t)&v5, (uint64_t)(a2 + 1));
  sub_10013FA28(a1, &v4);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v8 < 0) {
    operator delete(__p);
  }
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  return a1;
}

void sub_10013FA14( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t (***sub_10013FA28(uint64_t (***a1)(), __int128 *a2))()
{
  *a1 = 0LL;
  __int128 v4 = *a2;
  sub_10013F8F4((uint64_t)&v5, (uint64_t)(a2 + 1));
  sub_10013FAC8(a1, &v4);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v8 < 0) {
    operator delete(__p);
  }
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  return a1;
}

void sub_10013FAB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10013FAC8(uint64_t (***a1)(), __int128 *a2)
{
  __int128 v6 = *a2;
  sub_10013F8F4((uint64_t)&v7, (uint64_t)(a2 + 1));
  int v3 = sub_10013FBCC((uint64_t)off_1002B4498, &v6, a1 + 1);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v10 < 0) {
    operator delete(__p);
  }
  uint64_t result = v8;
  if (v8) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  if (v3) {
    uint64_t v5 = off_1002B4498;
  }
  else {
    uint64_t v5 = 0LL;
  }
  *a1 = v5;
  return result;
}

void sub_10013FB70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10013FB84(_OWORD **a1, _WORD *a2, int a3)
{
  if (a3 == 4)
  {
    a2[4] = 0;
  }

  else
  {
    sub_10013FC74(a1, a2, a3);
  }

uint64_t sub_10013FBA4(uint64_t *a1, unsigned int a2)
{
  unsigned int v3 = a2;
  return sub_10013FDAC(*a1, &v3);
}

uint64_t sub_10013FBCC(uint64_t a1, __int128 *a2, void *a3)
{
  __int128 v7 = *a2;
  sub_10013F8F4((uint64_t)&v8, (uint64_t)(a2 + 1));
  uint64_t v5 = sub_100140044(a1, &v7, a3);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  return v5;
}

void sub_10013FC60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10013FC74(_OWORD **a1, _WORD *a2, int a3)
{
  switch(a3)
  {
    case 0:
      uint64_t v5 = *a1;
      __int128 v6 = operator new(0x50uLL);
      *__int128 v6 = *v5;
      sub_10013F8F4((uint64_t)(v6 + 1), (uint64_t)(v5 + 1));
      *(void *)a2 = v6;
      break;
    case 1:
      *(void *)a2 = *a1;
      *a1 = 0LL;
      break;
    case 2:
      uint64_t v7 = *(void *)a2;
      if (*(void *)a2)
      {
        uint64_t v8 = *(dispatch_object_s **)(v7 + 72);
        if (v8) {
          dispatch_release(v8);
        }
        uint64_t v9 = *(const void **)(v7 + 64);
        if (v9) {
          _Block_release(v9);
        }
        uint64_t v10 = *(void *)(v7 + 32);
        if (v10) {
          (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
        }
        operator delete((void *)v7);
      }

      goto LABEL_17;
    case 3:
      char v11 = (const char *)(*(void *)(*(void *)a2 + 8LL) & 0x7FFFFFFFFFFFFFFFLL);
      if (v11 == (const char *)((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf5IvN2nl8wpantund14InternalIPCAPIEiPNS5"
                                                   "_19NCPControlInterfaceENS_3anyENSt3__112basic_stringIcNSA_11char_trai"
                                                   "tsIcEENSA_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvhS9_E"
                                                   "EEEENS0_5list6INS0_5valueIPS6_EENS_3argILi1EEENSO_IS8_EENSO_IS9_EENSO"
                                                   "_ISG_EENSO_ISL_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp( v11,  (const char *)((unint64_t)"N5boost3_bi6bind_tIvNS_4_mfi3mf5IvN2nl8wpantund14InternalIPCAPIEiPNS5_19N CPControlInterfaceENS_3anyENSt3__112basic_stringIcNSA_11char_traitsIcEENS A_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvhS9_EEEEENS0_5lis t6INS0_5valueIPS6_EENS_3argILi1EEENSO_IS8_EENSO_IS9_EENSO_ISG_EENSO_ISL_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = *a1;
      }

      else
      {
LABEL_17:
        *(void *)a2 = 0LL;
      }

      break;
    default:
      a2[4] = 0;
      break;
  }

void sub_10013FD98(_Unwind_Exception *a1)
{
}

uint64_t sub_10013FDAC(uint64_t a1, unsigned int *a2)
{
  unsigned int v3 = a2;
  return sub_10013FDE0((const std::string *)(a1 + 16), a1, &v3);
}

uint64_t sub_10013FDE0(const std::string *a1, uint64_t a2, unsigned int **a3)
{
  uint64_t v5 = **a3;
  uint64_t v7 = a1->__r_.__value_.__r.__words[0];
  uint64_t size = a1->__r_.__value_.__l.__size_;
  uint64_t cap = a1->__r_.__value_.__l.__cap_;
  if (cap) {
    uint64_t cap = (*(uint64_t (**)(uint64_t))(*(void *)cap + 24LL))(cap);
  }
  uint64_t v15 = cap;
  std::string::basic_string(&__str, a1 + 1);
  data = a1[2].__r_.__value_.__l.__data_;
  if (data) {
    data = _Block_copy(data);
  }
  uint64_t v10 = (dispatch_object_s *)a1[2].__r_.__value_.__l.__size_;
  aBlock = data;
  dispatch_object_t object = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  sub_10013FF0C(a2, v7, v5, size, &v15, &__str, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  uint64_t result = v15;
  if (v15) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
  }
  return result;
}

void sub_10013FECC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8LL))(a17);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10013FF0C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, std::string *__str, uint64_t a7)
{
  char v12 = *(void (**)(void *, uint64_t, uint64_t, uint64_t *, std::string *, void **))a1;
  uint64_t v11 = *(void *)(a1 + 8);
  std::string v13 = (void *)(a2 + (v11 >> 1));
  if ((v11 & 1) != 0) {
    char v12 = *(void (**)(void *, uint64_t, uint64_t, uint64_t *, std::string *, void **))(*v13 + v12);
  }
  uint64_t v14 = *a5;
  if (*a5) {
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 24LL))(v14);
  }
  uint64_t v21 = v14;
  std::string::basic_string(&v20, __str);
  uint64_t v15 = *(void **)a7;
  if (*(void *)a7) {
    uint64_t v15 = _Block_copy(v15);
  }
  uint64_t v16 = *(dispatch_object_s **)(a7 + 8);
  aBlock = v15;
  dispatch_object_t object = v16;
  if (v16) {
    dispatch_retain(v16);
  }
  v12(v13, a3, a4, &v21, &v20, &aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  uint64_t result = v21;
  if (v21) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
  }
  return result;
}

void sub_100140004( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8LL))(a17);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100140044(uint64_t a1, __int128 *a2, void *a3)
{
  __int128 v6 = *a2;
  sub_10013F8F4((uint64_t)&v7, (uint64_t)(a2 + 1));
  sub_1001400E8(a1, &v6, a3);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  return 1LL;
}

void sub_1001400D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1001400E8(uint64_t a1, _OWORD *a2, void *a3)
{
  uint64_t v5 = operator new(0x50uLL);
  *uint64_t v5 = *a2;
  uint64_t result = sub_10013F8F4((uint64_t)(v5 + 1), (uint64_t)(a2 + 1));
  *a3 = v5;
  return result;
}

void sub_100140130(_Unwind_Exception *a1)
{
}

uint64_t sub_100140144(uint64_t a1)
{
  return sub_100140154((uint64_t *)(a1 + 32), (unsigned __int8 *)(a1 + 64), (uint64_t *)(a1 + 40));
}

uint64_t sub_100140154(uint64_t *a1, unsigned __int8 *a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  sub_10000D66C(&v6, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(v3 + 16))(v3, v4, &v6);
  uint64_t result = v6;
  if (v6) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  return result;
}

void sub_1001401B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100140C0C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  while (2)
  {
    int v4 = OBJC_IVAR___PBDataReader__error;
    if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
      || *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
    {
      return *(unsigned __int8 *)(a2 + v4) == 0;
    }

    char v5 = 0;
    unsigned int v6 = 0;
    uint64_t v7 = 0LL;
    while (1)
    {
      uint64_t v8 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v9 = v8 + 1;
      if (v8 == -1) {
        goto LABEL_192;
      }
      if (v9 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v10 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v8);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v9;
      v7 |= (unint64_t)(v10 & 0x7F) << v5;
      if ((v10 & 0x80) == 0) {
        goto LABEL_12;
      }
      v5 += 7;
      BOOL v11 = v6++ >= 9;
      if (v11)
      {
        unint64_t v12 = 0LL;
        int v4 = OBJC_IVAR___PBDataReader__error;
        uint64_t v13 = OBJC_IVAR___PBDataReader__error;
        goto LABEL_16;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
    uint64_t v13 = OBJC_IVAR___PBDataReader__error;
    unint64_t v12 = *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) ? 0LL : v7;
    int v4 = OBJC_IVAR___PBDataReader__error;
LABEL_16:
    int v14 = v12 & 7;
    if (*(_BYTE *)(a2 + v13) || v14 == 4) {
      return *(unsigned __int8 *)(a2 + v4) == 0;
    }
    switch((v12 >> 3))
    {
      case 1u:
        if (v14 == 2)
        {
          uint64_t result = PBReaderPlaceMark(a2, v102);
          if ((_DWORD)result)
          {
            while (1)
            {
              if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
                || *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
              {
                goto LABEL_135;
              }

              char v16 = 0;
              unsigned int v17 = 0;
              uint64_t v18 = 0LL;
              while (1)
              {
                uint64_t v19 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                unint64_t v20 = v19 + 1;
                if (v19 == -1) {
                  goto LABEL_192;
                }
                if (v20 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                  break;
                }
                char v21 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
                *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20;
                v18 |= (unint64_t)(v21 & 0x7F) << v16;
                if ((v21 & 0x80) == 0) {
                  goto LABEL_33;
                }
                v16 += 7;
                BOOL v11 = v17++ >= 9;
                if (v11)
                {
                  uint64_t v22 = 0LL;
                  goto LABEL_36;
                }
              }

              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_33:
              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                uint64_t v22 = 0LL;
              }
              else {
                uint64_t v22 = v18;
              }
LABEL_36:
              uint64_t result = PBRepeatedUInt32Add(v3 + 152, v22);
            }
          }

          return result;
        }

        char v65 = 0;
        unsigned int v66 = 0;
        uint64_t v67 = 0LL;
        uint64_t result = v3 + 152;
        while (1)
        {
          uint64_t v68 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v69 = v68 + 1;
          if (v68 == -1) {
            goto LABEL_192;
          }
          if (v69 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v70 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v68);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v69;
          v67 |= (unint64_t)(v70 & 0x7F) << v65;
          if ((v70 & 0x80) == 0) {
            goto LABEL_186;
          }
          v65 += 7;
          BOOL v11 = v66++ >= 9;
          if (v11) {
            goto LABEL_184;
          }
        }

void sub_100142144(uint64_t a1, uint64_t a2)
{
LABEL_1:
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
    || *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
  {
    return;
  }

  char v4 = 0;
  unsigned int v5 = 0;
  unint64_t v6 = 0LL;
  while (1)
  {
    uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
    unint64_t v8 = v7 + 1;
    if (v7 == -1) {
      break;
    }
    if (v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
    {
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      uint64_t v12 = OBJC_IVAR___PBDataReader__error;
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v11 = 0LL;
      }
      else {
        unint64_t v11 = v6;
      }
LABEL_14:
      if (*(_BYTE *)(a2 + v12)) {
        BOOL v13 = 1;
      }
      else {
        BOOL v13 = (v11 & 7) == 4;
      }
      if (v13) {
        return;
      }
      switch((v11 >> 3))
      {
        case 1u:
          char v14 = 0;
          unsigned int v15 = 0;
          uint64_t v16 = 0LL;
          *(_BYTE *)(a1 + 40) |= 1u;
          while (1)
          {
            uint64_t v17 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v18 = v17 + 1;
            if (v17 == -1) {
              goto LABEL_43;
            }
            if (v18 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v19 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18;
            v16 |= (unint64_t)(v19 & 0x7F) << v14;
            if ((v19 & 0x80) == 0) {
              goto LABEL_38;
            }
            v14 += 7;
            BOOL v10 = v15++ >= 9;
            if (v10)
            {
              uint64_t v16 = 0LL;
              goto LABEL_40;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v16 = 0LL;
          }
LABEL_40:
          *(void *)(a1 + 8) = v16;
          goto LABEL_1;
        case 2u:
          unint64_t v20 = objc_alloc_init(&OBJC_CLASS___AWDHeaderInfoS);
          objc_storeStrong((id *)(a1 + 16), v20);
          sub_10012DC90((uint64_t)v20, a2);
          if ((v21 & 1) == 0) {
            goto LABEL_42;
          }
          goto LABEL_36;
        case 3u:
          unint64_t v20 = objc_alloc_init(&OBJC_CLASS___AWDCountersCoexS);
          objc_storeStrong((id *)(a1 + 24), v20);
          goto LABEL_36;
        case 4u:
          unint64_t v20 = objc_alloc_init(&OBJC_CLASS___AWDHistogramsCoexS);
          objc_storeStrong((id *)(a1 + 32), v20);
          if (!PBReaderPlaceMark(a2, v22) || (sub_1000AE93C((uint64_t)v20, a2) & 1) == 0)
          {
LABEL_42:

            return;
          }

uint64_t sub_1001429F8(uint64_t a1)
{
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + sub_10000D448(v30 - 56) = 0;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_1002B4500;
  *(void *)(a1 + 64) = 0LL;
  sub_100142A60((uint64_t *)(a1 + 24), (uint64_t)nullsub_93);
  return a1;
}

void sub_100142A48(_Unwind_Exception *a1)
{
}

uint64_t *sub_100142A60(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (char *)off_1002B4520 + 1;
  if (!a2) {
    uint64_t v3 = 0LL;
  }
  v5[0] = (uint64_t)v3;
  v5[1] = a2;
  sub_100142F8C(v5, a1);
  sub_10004BFBC(v5);
  return a1;
}

void sub_100142AB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_100142ACC(void *a1)
{
  *a1 = off_1002B4500;
  sub_100142B08(a1);
  sub_10004BFBC(a1 + 3);
  return a1;
}

void sub_100142B08(void *a1)
{
  uint64_t v1 = a1[8];
  if (v1)
  {
    BOOL v2 = off_1002C9360;
    if (off_1002C9360 == (_UNKNOWN *)a1)
    {
      off_1002C9360 = (_UNKNOWN *)a1[8];
LABEL_7:
      a1[8] = 0LL;
    }

    else
    {
      while (v2 != &off_1002C9360)
      {
        uint64_t v3 = v2;
        BOOL v2 = (void *)v2[8];
        if (v2 == a1)
        {
          v3[8] = v1;
          goto LABEL_7;
        }
      }

      char v4 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v4)
      {
        unsigned int v5 = v4;
        if (sub_10015A058(4))
        {
          if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
            sub_100212184(v5, v6, v7, v8, v9, v10, v11, v12);
          }
        }
      }

      else
      {
        BOOL v13 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
        if (v13) {
          sub_1002120FC(v13, v14, v15, v16, v17, v18, v19, v20);
        }
      }
    }
  }

void sub_100142BCC(void *a1)
{
  uint64_t v1 = sub_100142ACC(a1);
  operator delete(v1);
}

void sub_100142BE0(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  if (a2 <= 0)
  {
    uint64_t v9 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v9)
    {
      uint64_t v10 = v9;
    }

    else
    {
      BOOL v18 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
      if (v18) {
        sub_1002120FC(v18, v19, v20, v21, v22, v23, v24, v25);
      }
    }
  }

  else
  {
    *(void *)(a1 + 16) = a2;
    sub_100142CB8((uint64_t *)(a1 + 24), a3);
    *(_DWORD *)(a1 + sub_10000D448(v30 - 56) = a4;
    __darwin_time_t v8 = sub_10014314C();
    if (__OFADD__(a2, v8))
    {
      __break(0x5500u);
    }

    else
    {
      *(void *)(a1 + 8) = a2 + v8;
      sub_100142D14(a1);
    }
  }

uint64_t *sub_100142CB8(uint64_t *a1, uint64_t *a2)
{
  v4[0] = 0LL;
  sub_100007640((uint64_t)v4, a2);
  sub_100142F8C(v4, a1);
  sub_10004BFBC(v4);
  return a1;
}

void sub_100142D00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100142D14(uint64_t result)
{
  uint64_t v1 = &off_1002C9360;
  BOOL v2 = (_UNKNOWN **)off_1002C9360;
  if (off_1002C9360 == (_UNKNOWN *)&off_1002C9360)
  {
    BOOL v2 = &off_1002C9360;
LABEL_11:
    *(void *)(result + 64) = v2;
    *uint64_t v1 = result;
    return result;
  }

  uint64_t v3 = *(void *)(result + 8);
  uint64_t v4 = *((void *)off_1002C9360 + 1);
  uint64_t v5 = v3 - v4;
  if (!__OFSUB__(v3, v4))
  {
    uint64_t v1 = &off_1002C9360;
    if ((v5 & 0x8000000000000000LL) == 0)
    {
      while (1)
      {
        uint64_t v6 = v2;
        BOOL v2 = (_UNKNOWN **)v2[8];
        if (v2 == &off_1002C9360) {
          break;
        }
        uint64_t v7 = v2[1];
        BOOL v8 = __OFSUB__(v3, v7);
        uint64_t v9 = v3 - (void)v7;
        if (v8) {
          goto LABEL_12;
        }
        if (v9 < 0) {
          goto LABEL_10;
        }
      }

      BOOL v2 = &off_1002C9360;
LABEL_10:
      uint64_t v1 = v6 + 8;
    }

    goto LABEL_11;
  }

__darwin_time_t sub_100142D8C(uint64_t a1)
{
  __darwin_time_t result = sub_10014314C();
  uint64_t v3 = *(void *)(a1 + 8);
  BOOL v4 = __OFSUB__(v3, result);
  uint64_t v5 = v3 - result;
  if (!v4) {
    return v5 < 1;
  }
  __break(0x5515u);
  return result;
}

uint64_t sub_100142DC4(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_100142DCC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

__darwin_time_t sub_100142DD4()
{
  uint64_t v0 = off_1002C9360;
  if (off_1002C9360 == (_UNKNOWN *)&off_1002C9360) {
    return 0LL;
  }
  while (1)
  {
    __darwin_time_t result = sub_10014314C();
    uint64_t v2 = v0[1];
    if (__OFSUB__(v2, result)) {
      break;
    }
    if (v2 - result > 0) {
      return 0LL;
    }
    off_1002C9360 = (_UNKNOWN *)v0[8];
    v0[8] = 0LL;
    int v3 = *((_DWORD *)v0 + 14);
    if (v3 == 2)
    {
      uint64_t v7 = v0[2];
      __darwin_time_t result = sub_10014314C();
      __darwin_time_t v6 = v7 + result;
      if (__OFADD__(v7, result)) {
        goto LABEL_14;
      }
      goto LABEL_10;
    }

    if (v3 == 1)
    {
      uint64_t v4 = v0[2];
      BOOL v5 = __OFADD__(v4, v2);
      __darwin_time_t v6 = v4 + v2;
      if (v5) {
        goto LABEL_14;
      }
LABEL_10:
      v0[1] = v6;
      sub_100142D14((uint64_t)v0);
    }

    sub_100142E94(v0 + 3);
    uint64_t v0 = off_1002C9360;
    if (off_1002C9360 == (_UNKNOWN *)&off_1002C9360) {
      return 0LL;
    }
  }

  __break(0x5515u);
LABEL_14:
  __break(0x5500u);
  return result;
}

uint64_t sub_100142E94(void *a1)
{
  if (!*a1)
  {
    std::runtime_error::runtime_error(&v2, "call to empty boost::function");
    v2.__vftable = (std::runtime_error_vtbl *)&off_1002AD8D8;
    sub_10000706C(&v2);
  }

  return (*(uint64_t (**)(void *))((*a1 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 1);
}

void sub_100142EF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
}

uint64_t sub_100142F08(__darwin_time_t *a1)
{
  if (a1)
  {
    __darwin_time_t v2 = sub_100142F40();
    if (v2 < *a1) {
      *a1 = v2;
    }
  }

  return 0LL;
}

__darwin_time_t sub_100142F40()
{
  if (off_1002C9360 == (_UNKNOWN *)&off_1002C9360) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v0 = *((void *)off_1002C9360 + 1);
  __darwin_time_t result = sub_10014314C();
  if (!__OFSUB__(v0, result)) {
    return (v0 - result) & ~((v0 - result) >> 63);
  }
  __break(0x5515u);
  return result;
}

uint64_t *sub_100142F8C(uint64_t *result, uint64_t *a2)
{
  if (a2 != result)
  {
    int v3 = result;
    v4[0] = 0LL;
    sub_1001430B4(v4, result);
    sub_1001430B4(v3, a2);
    sub_1001430B4(a2, v4);
    return sub_10004BFBC(v4);
  }

  return result;
}

void sub_100142FEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100143000(uint64_t result, _WORD *a2, int a3)
{
  uint64_t v4 = result;
  switch(a3)
  {
    case 0:
      *(void *)a2 = *(void *)result;
      break;
    case 1:
      *(void *)a2 = *(void *)result;
      *(void *)__darwin_time_t result = 0LL;
      break;
    case 2:
      goto LABEL_7;
    case 3:
      __darwin_time_t result = *(void *)(*(void *)a2 + 8LL) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"PFvPN2nl5TimerEE" & 0x7FFFFFFFFFFFFFFFLL)
        || (__darwin_time_t result = strcmp( (const char *)result,  (const char *)((unint64_t)"PFvPN2nl5TimerEE" & 0x7FFFFFFFFFFFFFFFLL)),  !(_DWORD)result))
      {
        *(void *)a2 = v4;
      }

      else
      {
LABEL_7:
        *(void *)a2 = 0LL;
      }

      break;
    default:
      *(void *)a2 = &off_1002B4540;
      a2[4] = 0;
      break;
  }

  return result;
}

uint64_t sub_1001430A8(uint64_t (**a1)(uint64_t), uint64_t a2)
{
  return (*a1)(a2);
}

uint64_t *sub_1001430B4(uint64_t *result, uint64_t *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = *a2;
    if (*a2)
    {
      *__darwin_time_t result = v3;
      if ((v3 & 1) != 0)
      {
        __int128 v4 = *(_OWORD *)(a2 + 1);
        result[3] = a2[3];
        *(_OWORD *)(result + 1) = v4;
      }

      else
      {
        __darwin_time_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL))( a2 + 1,  result + 1,  1LL);
      }

      *a2 = 0LL;
    }

    else
    {
      return sub_100006EA4(result);
    }
  }

  return result;
}

void sub_100143128(void *a1)
{
  *uint64_t v1 = 0LL;
  __cxa_rethrow();
}

void sub_100143138(_Unwind_Exception *a1)
{
}

__darwin_time_t sub_10014314C()
{
  v2.tv_sec = 0LL;
  *(void *)&v2.tv_usec = 0LL;
  __darwin_time_t result = gettimeofday(&v2, 0LL);
  __darwin_time_t v1 = 1000 * v2.tv_sec;
  if ((unsigned __int128)(v2.tv_sec * (__int128)1000LL) >> 64 != (1000 * v2.tv_sec) >> 63)
  {
    __break(0x550Cu);
    goto LABEL_5;
  }

  __darwin_time_t result = v1 + v2.tv_usec / 1000;
  if (__OFADD__(v1, v2.tv_usec / 1000)) {
LABEL_5:
  }
    __break(0x5500u);
  return result;
}

time_t sub_1001431B8()
{
  return time(0LL);
}

time_t sub_1001431C0(uint64_t a1)
{
  time_t result = time(0LL);
  uint64_t v3 = a1 - result;
  if (__OFSUB__(a1, result))
  {
    __break(0x5515u);
LABEL_7:
    __break(0x550Cu);
    return result;
  }

  if (v3 > 0x20C49BA5E353F7LL) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  time_t result = 1000 * v3;
  return result;
}

uint64_t sub_100143228()
{
  return socket(30, 2, 0);
}

uint64_t sub_100143238(int a1)
{
  return close(a1);
}

uint64_t sub_10014325C(int a1, char *a2)
{
  __int128 v6 = 0u;
  __int128 v7 = 0u;
  sub_1000081C8(&v6, a2, 16LL);
  if (!ioctl(a1, 0xC0206911uLL, &v6)) {
    return (__int16)v7;
  }
  uint64_t v3 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v3)
  {
    __int128 v4 = v3;
    uint64_t result = sub_10015A058(4);
    if ((_DWORD)result)
    {
      uint64_t result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        sub_100212284(v4);
        return 0LL;
      }
    }
  }

  else
  {
    uint64_t result = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      sub_1001FB53C();
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100143348(int a1, char *a2, __int16 a3)
{
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  sub_1000081C8(&v12, a2, 16LL);
  uint64_t v5 = ioctl(a1, 0xC0206911uLL, &v12);
  if ((_DWORD)v5)
  {
    uint64_t v6 = v5;
    __int128 v7 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v7)
    {
      BOOL v8 = v7;
      return v6;
    }

    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      return v6;
    }
LABEL_14:
    sub_1001FB53C();
    return v6;
  }

  LOWORD(v13) = v13 | a3;
  uint64_t v6 = ioctl(a1, 0x80206910uLL, &v12);
  if (!(_DWORD)v6) {
    return v6;
  }
  uint64_t v9 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (!v9)
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      return v6;
    }
    goto LABEL_14;
  }

  uint64_t v10 = v9;
  return v6;
}

uint64_t sub_1001434C4(int a1, char *a2, __int16 a3)
{
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  sub_1000081C8(&v12, a2, 16LL);
  uint64_t v5 = ioctl(a1, 0xC0206911uLL, &v12);
  if ((_DWORD)v5)
  {
    uint64_t v6 = v5;
    __int128 v7 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v7)
    {
      BOOL v8 = v7;
      return v6;
    }

    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      return v6;
    }
LABEL_14:
    sub_1001FB53C();
    return v6;
  }

  LOWORD(v13) = v13 & ~a3;
  uint64_t v6 = ioctl(a1, 0x80206910uLL, &v12);
  if (!(_DWORD)v6) {
    return v6;
  }
  uint64_t v9 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (!v9)
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      return v6;
    }
    goto LABEL_14;
  }

  uint64_t v10 = v9;
  return v6;
}

uint64_t sub_100143640(int a1, char *a2)
{
  return sub_10014325C(a1, a2) & 1;
}

uint64_t sub_100143658(int a1, char *a2)
{
  return (sub_10014325C(a1, a2) >> 6) & 1;
}

uint64_t sub_100143670(int a1, char *a2, int a3)
{
  if (a3) {
    return sub_100143348(a1, a2, 1);
  }
  else {
    return sub_1001434C4(a1, a2, 65);
  }
}

uint64_t sub_100143684(int a1, char *a2, int a3)
{
  if (a3) {
    return sub_100143348(a1, a2, 65);
  }
  else {
    return sub_1001434C4(a1, a2, 64);
  }
}

uint64_t sub_100143698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (sub_100015A0C(a3) - 1);
}

void sub_1001436B8(int a1, int a2, void *a3, int a4)
{
}

uint64_t sub_1001436C8(int a1, int a2, void *a3)
{
  return sub_100015E04(a3);
}

uint64_t sub_1001436D0(int a1, uint64_t a2, __int128 *a3)
{
  if (a1 < 0)
  {
    BOOL v8 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v8)
    {
      uint64_t v9 = v8;
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    return 0xFFFFFFFFLL;
  }

  else
  {
    __int128 v17 = *a3;
    int v16 = 1;
    uint64_t v4 = setsockopt(a1, 41, 11, &v16, 4u);
    if ((_DWORD)v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v6)
      {
        __int128 v7 = v6;
        return v5;
      }

      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        return v5;
      }
LABEL_30:
      sub_1001FB53C();
      return v5;
    }

    uint64_t v10 = sub_100015A34();
    uint64_t v5 = v10;
    if ((v10 & 0x80000000) != 0)
    {
      uint64_t v14 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (!v14)
      {
        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          return v5;
        }
        goto LABEL_30;
      }

      uint64_t v15 = v14;
    }

    else
    {
      int v18 = v10;
      uint64_t v5 = setsockopt(a1, 41, 12, &v17, 0x14u);
      if (!(_DWORD)v5) {
        return v5;
      }
      uint64_t v11 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (!v11)
      {
        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          return v5;
        }
        goto LABEL_30;
      }

      __int128 v12 = v11;
    }
  }

  return v5;
}

uint64_t sub_1001438DC(int a1, uint64_t a2, __int128 *a3)
{
  if (a1 < 0)
  {
    BOOL v8 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v8)
    {
      uint64_t v9 = v8;
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    return 0xFFFFFFFFLL;
  }

  else
  {
    __int128 v17 = *a3;
    int v16 = 1;
    uint64_t v4 = setsockopt(a1, 41, 11, &v16, 4u);
    if ((_DWORD)v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v6)
      {
        __int128 v7 = v6;
        return v5;
      }

      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        return v5;
      }
LABEL_30:
      sub_1001FB53C();
      return v5;
    }

    uint64_t v10 = sub_100015A34();
    uint64_t v5 = v10;
    if ((v10 & 0x80000000) != 0)
    {
      uint64_t v14 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (!v14)
      {
        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          return v5;
        }
        goto LABEL_30;
      }

      uint64_t v15 = v14;
    }

    else
    {
      int v18 = v10;
      uint64_t v5 = setsockopt(a1, 41, 13, &v17, 0x14u);
      if (!(_DWORD)v5) {
        return v5;
      }
      uint64_t v11 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (!v11)
      {
        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          return v5;
        }
        goto LABEL_30;
      }

      __int128 v12 = v11;
    }
  }

  return v5;
}

void sub_100143AE8(uint64_t a1)
{
  timeval v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v2)
  {
    uint64_t v3 = v2;
    if (sub_10015A058(6) && os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "FaultInfo: Setting NCP control Interface for PowerEventHandler",  v4,  2u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_10020CC20();
  }

  qword_1002C98C8 = a1;
}

uint64_t sub_100143B94()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)qword_1002C98C8 + 384LL))(qword_1002C98C8);
}

double sub_100143BA8()
{
  return sub_1000D2030((uint64_t)&xmmword_1002C98A8);
}

uint64_t *sub_100143BB4(uint64_t *a1)
{
  return a1;
}

void sub_100143BD8()
{
  uint64_t v0 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  __darwin_time_t v1 = (os_log_s *)objc_claimAutoreleasedReturnValue(v0);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    int v2 = 136315138;
    uint64_t v3 = "ThreadNetworkManagerTopologyHandler_Init_Database";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "Inside %s", (uint8_t *)&v2, 0xCu);
  }

  sub_10000C178(&qword_1002D14E8);
}

void sub_100143C98(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = "ThreadNetworkManagerTopologyHandler_Update_ChildTableAddresses";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Inside %s", buf, 0xCu);
  }

  uint64_t v15 = a2;
  uint64_t v18 = (uint64_t)&v18;
  uint64_t v19 = &v18;
  uint64_t v20 = 0LL;
  sub_10000C078(a1, (uint64_t *)buf);
  sub_10010F2B4(&v18, buf);
  sub_10000C178((uint64_t *)buf);
  for (uint64_t i = v19; i != &v18; uint64_t i = (uint64_t *)i[1])
  {
    for (uint64_t j = qword_1002D14F0; (uint64_t *)j != &qword_1002D14E8; uint64_t j = *(void *)(j + 8))
    {
      sub_10000AC00(buf, "ExtAddress");
      BOOL v8 = (uint64_t *)sub_1000482CC(j + 16, (const void **)buf);
      uint64_t v9 = sub_1001476B4(v8, 0);
      if (v24 < 0) {
        operator delete(*(void **)buf);
      }
      sub_10000AC00(buf, "ExtAddress");
      uint64_t v10 = (uint64_t *)sub_1000482CC((uint64_t)(i + 2), (const void **)buf);
      uint64_t v11 = sub_1001476B4(v10, 0);
      if (v24 < 0) {
        operator delete(*(void **)buf);
      }
      if (v9 == v11)
      {
        sub_10000AC00(__p, "IPv6Addresses");
        __int128 v12 = (uint64_t *)sub_1000482CC((uint64_t)(i + 2), (const void **)__p);
        sub_10014482C(buf, "IPv6Addresses", v12);
        sub_100080E28((uint64_t **)(j + 16), (const void **)buf, (__n128 *)buf);
        if (v25) {
          (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
        }
        if (v24 < 0) {
          operator delete(*(void **)buf);
        }
        if (v17 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  __int128 v13 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = "ThreadNetworkManagerTopologyHandler_Update_ChildTableAddresses";
    __int16 v22 = 2048;
    uint64_t v23 = qword_1002D14F8;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%s return database with size:%ld", buf, 0x16u);
  }

  sub_10000D518(v15, (uint64_t)&qword_1002D14E8);
  sub_10000C178(&v18);
}

void sub_100143F6C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
}

void sub_100143FDC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v7 = (uint64_t)&v7;
  BOOL v8 = &v7;
  uint64_t v9 = 0LL;
  sub_10000C078(a1, (uint64_t *)buf);
  sub_10010F2B4(&v7, buf);
  sub_10000C178((uint64_t *)buf);
  uint64_t v3 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v11 = "ThreadNetworkManagerTopologyHandler_Update_ChildTable";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Inside %s", buf, 0xCu);
  }

  sub_100143BD8();
  sub_100144888(&qword_1002D14E8, (uint64_t)v8, (uint64_t)&v7);
  uint64_t v5 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 136315394;
    uint64_t v11 = "ThreadNetworkManagerTopologyHandler_Update_ChildTable";
    __int16 v12 = 2048;
    uint64_t v13 = qword_1002D14F8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s return database with size:%ld", buf, 0x16u);
  }

  sub_10000D518(a2, (uint64_t)&qword_1002D14E8);
  sub_10000C178(&v7);
}

void sub_100144168(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100144190@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  v18[0] = 0LL;
  v18[1] = 0LL;
  char v17 = v18;
  sub_10000C008(a1, buf);
  sub_100144CF0((uint64_t)&v17, buf);
  sub_10000D448((uint64_t)buf);
  uint64_t v3 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = "ThreadNetworkManagerTopologyHandler_Add_Child";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Inside %s", buf, 0xCu);
  }

  uint64_t v5 = (uint64_t *)qword_1002D14F0;
  if ((uint64_t *)qword_1002D14F0 == &qword_1002D14E8)
  {
LABEL_10:
    uint64_t v10 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = "ThreadNetworkManagerTopologyHandler_Add_Child";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s added new child to database", buf, 0xCu);
    }

    sub_10000D584(&qword_1002D14E8, (uint64_t *)&v17);
  }

  else
  {
    while (1)
    {
      sub_10000AC00(buf, "ExtAddress");
      uint64_t v6 = (uint64_t *)sub_1000482CC((uint64_t)&v17, (const void **)buf);
      uint64_t v7 = sub_1001476B4(v6, 0);
      if (v22 < 0) {
        operator delete(*(void **)buf);
      }
      sub_10000AC00(buf, "ExtAddress");
      BOOL v8 = (uint64_t *)sub_1000482CC((uint64_t)(v5 + 2), (const void **)buf);
      uint64_t v9 = sub_1001476B4(v8, 0);
      if (v22 < 0) {
        operator delete(*(void **)buf);
      }
      if (v7 == v9) {
        break;
      }
      uint64_t v5 = (uint64_t *)v5[1];
      if (v5 == &qword_1002D14E8) {
        goto LABEL_10;
      }
    }

    __int16 v12 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = "ThreadNetworkManagerTopologyHandler_Add_Child";
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "%s found existing child with same ExtAddr",  buf,  0xCu);
    }
  }

  uint64_t v14 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = "ThreadNetworkManagerTopologyHandler_Add_Child";
    __int16 v20 = 2048;
    uint64_t v21 = qword_1002D14F8;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "%s return database with size:%ld", buf, 0x16u);
  }

  sub_10000D518(a2, (uint64_t)&qword_1002D14E8);
  return sub_10000D448((uint64_t)&v17);
}

void sub_100144494( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

uint64_t sub_1001444E8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  v16[0] = 0LL;
  v16[1] = 0LL;
  uint64_t v15 = v16;
  sub_10000C008(a1, buf);
  sub_100144CF0((uint64_t)&v15, buf);
  sub_10000D448((uint64_t)buf);
  int v2 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = "ThreadNetworkManagerTopologyHandler_Delete_Child";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Inside %s", buf, 0xCu);
  }

  for (uint64_t i = (uint64_t *)qword_1002D14F0; i != &qword_1002D14E8; uint64_t i = (uint64_t *)i[1])
  {
    sub_10000AC00(buf, "ExtAddress");
    uint64_t v5 = (uint64_t *)sub_1000482CC((uint64_t)&v15, (const void **)buf);
    uint64_t v6 = sub_1001476B4(v5, 0);
    if (v20 < 0) {
      operator delete(*(void **)buf);
    }
    sub_10000AC00(buf, "ExtAddress");
    uint64_t v7 = (uint64_t *)sub_1000482CC((uint64_t)(i + 2), (const void **)buf);
    BOOL v8 = sub_1001476B4(v7, 0);
    if (v20 < 0) {
      operator delete(*(void **)buf);
    }
    if (v6 == v8)
    {
      uint64_t i = (uint64_t *)sub_1001447E8((uint64_t)&qword_1002D14E8, i);
      uint64_t v9 = sub_1000160F4("com.apple.wpantund.tnm", "default");
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = "ThreadNetworkManagerTopologyHandler_Delete_Child";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s removed child from database", buf, 0xCu);
      }
    }
  }

  uint64_t v11 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  __int16 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = "ThreadNetworkManagerTopologyHandler_Delete_Child";
    __int16 v18 = 2048;
    uint64_t v19 = qword_1002D14F8;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%s return database with size:%ld", buf, 0x16u);
  }

  sub_10000D518(a2, (uint64_t)&qword_1002D14E8);
  return sub_10000D448((uint64_t)&v15);
}

void sub_100144794( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
}

uint64_t sub_1001447E8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  *(void *)(v2 + 8) = v3;
  *(void *)a2[1] = v2;
  uint64_t v4 = *(void *)(result + 16);
  BOOL v5 = v4 != 0;
  uint64_t v6 = v4 - 1;
  if (v5)
  {
    *(void *)(result + 16) = v6;
    sub_10000C1D8(result, a2);
    return v3;
  }

  else
  {
    __break(0x5515u);
  }

  return result;
}

void *sub_10014482C(void *a1, char *a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  if (*a3) {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24LL))(v5);
  }
  a1[3] = v5;
  return a1;
}

void sub_10014486C(_Unwind_Exception *exception_object)
{
}

void sub_100144888(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = (uint64_t *)a1[1];
  if (a2 == a3)
  {
LABEL_5:
    if (v6 != a1)
    {
      sub_100144A34((uint64_t)a1, v6, a1);
      return;
    }
  }

  else
  {
    while (v6 != a1)
    {
      sub_100144AAC(v6 + 2, (uint64_t *)(v4 + 16));
      uint64_t v4 = *(void *)(v4 + 8);
      uint64_t v6 = (uint64_t *)v6[1];
      if (v4 == a3)
      {
        uint64_t v4 = a3;
        goto LABEL_5;
      }
    }
  }

  sub_10014491C((uint64_t)a1, a1, v4, a3);
}

uint64_t *sub_10014491C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 == a4) {
    return a2;
  }
  uint64_t result = sub_10000D5D4(a1, 0LL, 0LL, (uint64_t *)(a3 + 16));
  uint64_t v9 = result;
  uint64_t v10 = *(void *)(a3 + 8);
  if (v10 == a4)
  {
    uint64_t v13 = 1LL;
LABEL_8:
    uint64_t v14 = *a2;
    *(void *)(v14 + 8) = v9;
    *uint64_t v9 = v14;
    *a2 = (uint64_t)result;
    result[1] = (uint64_t)a2;
    uint64_t v15 = *(void *)(a1 + 16);
    BOOL v16 = __CFADD__(v15, v13);
    uint64_t v17 = v15 + v13;
    if (v16) {
      goto LABEL_11;
    }
    *(void *)(a1 + 16) = v17;
    return v9;
  }

  uint64_t v11 = 1LL;
  uint64_t v12 = (uint64_t)result;
  while (1)
  {
    uint64_t result = sub_10000D5D4(a1, v12, 0LL, (uint64_t *)(v10 + 16));
    *(void *)(v12 + 8) = result;
    uint64_t v13 = v11 + 1;
    if (v11 == -1) {
      break;
    }
    uint64_t v10 = *(void *)(v10 + 8);
    ++v11;
    uint64_t v12 = (uint64_t)result;
    if (v10 == a4) {
      goto LABEL_8;
    }
  }

void sub_1001449FC(void *a1)
{
  do
  {
    uint64_t v3 = v2;
    uint64_t v2 = (void *)*v2;
    sub_10000C1D8(v1, v3);
  }

  while (v2);
  __cxa_rethrow();
}

void sub_100144A1C(_Unwind_Exception *a1)
{
}

void sub_100144A34(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (a2 != a3)
  {
    uint64_t v5 = *a3;
    uint64_t v6 = *a2;
    *(void *)(v6 + 8) = *(void *)(*a3 + 8);
    **(void **)(v5 + 8) = v6;
    while (1)
    {
      uint64_t v7 = *(void *)(a1 + 16);
      BOOL v8 = v7 != 0;
      uint64_t v9 = v7 - 1;
      if (!v8) {
        break;
      }
      uint64_t v10 = (uint64_t *)a2[1];
      *(void *)(a1 + 16) = v9;
      sub_10000C1D8(a1, a2);
      a2 = v10;
      if (v10 == a3) {
        return;
      }
    }

    __break(0x5515u);
  }

uint64_t *sub_100144AAC(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2) {
    sub_100144AE4(a1, *a2, (uint64_t)(a2 + 1));
  }
  return a1;
}

uint64_t *sub_100144AE4(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t **)result;
  uint64_t v8 = a2;
  if (!result[2]) {
    goto LABEL_11;
  }
  sub_100076F44(&v5, result);
  while (v7 && v8 != a3)
  {
    sub_100144BB0((uint64_t)(v7 + 4), (const std::string *)(v8 + 32));
    sub_1000FA1D4(v4, (uint64_t)v7);
    uint64_t v7 = v6;
    if (v6) {
      uint64_t v6 = sub_100076FF4((uint64_t)v6);
    }
    sub_10000B338((uint64_t)&v8);
  }

  for (uint64_t result = (uint64_t *)sub_100144C20((uint64_t)&v5); ; uint64_t result = (uint64_t *)sub_10000B338((uint64_t)&v8))
  {
    a2 = v8;
LABEL_11:
    if (a2 == a3) {
      break;
    }
    sub_100144C70(v4, (const std::string *)(a2 + 32));
  }

  return result;
}

uint64_t sub_100144BB0(uint64_t a1, const std::string *a2)
{
  v4[0] = a1;
  v4[1] = a1 + 24;
  sub_100144BE8((uint64_t)v4, a2);
  return a1;
}

uint64_t sub_100144BE8(uint64_t a1, const std::string *a2)
{
  std::string::operator=(*(std::string **)a1, a2);
  sub_100018024(*(uint64_t **)(a1 + 8), a2[1].__r_.__value_.__r.__words);
  return a1;
}

uint64_t sub_100144C20(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    while (1)
    {
      uint64_t v3 = (void *)v2[2];
      if (!v3) {
        break;
      }
      *(void *)(a1 + 8) = v3;
      uint64_t v2 = v3;
    }

    sub_10000D470(*(void *)a1, v2);
  }

  return a1;
}

void *sub_100144C70(uint64_t **a1, const std::string *a2)
{
  uint64_t v3 = sub_1000FA258((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  sub_10000AF70(a1, v6, (void **)v3, (void *)v7[0]);
  uint64_t v4 = v7[0];
  v7[0] = 0LL;
  sub_10000D3A4(v7, 0LL);
  return v4;
}

void sub_100144CD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100144CF0(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  sub_10000D470(a1, *(void **)(a1 + 8));
  *(void *)a1 = *a2;
  uint64_t v5 = a2[1];
  *uint64_t v4 = v5;
  uint64_t v6 = a2[2];
  *(void *)(a1 + 16) = v6;
  if (v6)
  {
    *(void *)(v5 + 16) = v4;
    a2[1] = 0LL;
    a2[2] = 0LL;
    *a2 = a2 + 1;
  }

  else
  {
    *(void *)a1 = v4;
  }

void sub_100144D58()
{
  uint64_t v0 = objc_autoreleasePoolPush();
  qword_1002D14E8 = (uint64_t)&qword_1002D14E8;
  qword_1002D14F0 = (uint64_t)&qword_1002D14E8;
  qword_1002D14F8 = 0LL;
  __cxa_atexit((void (*)(void *))sub_100143BB4, &qword_1002D14E8, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_100144DA0(CFDataRef *a1)
{
  uint64_t v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v2)
  {
    uint64_t v3 = v2;
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FF028();
  }

  CFIndex Length = CFDataGetLength(*a1);
  BytePtr = CFDataGetBytePtr(*a1);
  uint64_t v6 = Length / 20;
  if (Length >= 20)
  {
    uint64_t v7 = 0LL;
    do
    {
      uint64_t v8 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v8)
      {
        uint64_t v9 = v8;
        if (sub_10015A058(7) && os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v10 = (unsigned __int8 *)&BytePtr[20 * v7];
          int v11 = *v10;
          int v12 = v10[1];
          int v13 = v10[2];
          int v14 = v10[3];
          int v15 = v10[4];
          int v16 = v10[5];
          int v17 = v10[6];
          int v18 = v10[7];
          int v19 = v10[8];
          int v20 = v10[9];
          int v21 = v10[10];
          int v22 = v10[11];
          int v23 = v10[12];
          int v24 = v10[13];
          int v25 = v10[14];
          int v26 = v10[15];
          int v27 = v10[16];
          int v35 = v10[17];
          int v36 = v10[18];
          LODWORD(v10) = v10[19];
          *(_DWORD *)std::string buf = 67441665;
          *(_DWORD *)unsigned int v38 = v11;
          *(_WORD *)&v38[4] = 1029;
          *(_DWORD *)&v38[6] = v12;
          LOWORD(v39) = 1029;
          *(_DWORD *)((char *)&v39 + 2) = v13;
          HIWORD(v39) = 1029;
          int v40 = v14;
          __int16 v41 = 1029;
          int v42 = v15;
          __int16 v43 = 1029;
          int v44 = v16;
          __int16 v45 = 1029;
          int v46 = v17;
          __int16 v47 = 1029;
          int v48 = v18;
          __int16 v49 = 1029;
          int v50 = v19;
          __int16 v51 = 1029;
          int v52 = v20;
          __int16 v53 = 1029;
          int v54 = v21;
          __int16 v55 = 1029;
          int v56 = v22;
          __int16 v57 = 1029;
          int v58 = v23;
          __int16 v59 = 1029;
          int v60 = v24;
          __int16 v61 = 1029;
          int v62 = v25;
          __int16 v63 = 1029;
          int v64 = v26;
          __int16 v65 = 1029;
          int v66 = v27;
          __int16 v67 = 1029;
          int v68 = v35;
          __int16 v69 = 1029;
          int v70 = v36;
          __int16 v71 = 1029;
          int v72 = (int)v10;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  " %{sensitive}u %{sensitive}u %{sensitive}u %{sensitive}u %{sensitive}u %{sensitive}u %{sensitive}u %{sensiti ve}u %{sensitive}u %{sensitive}u %{sensitive}u %{sensitive}u %{sensitive}u %{sensitive}u %{sensitive}u %{sen sitive}u %{sensitive}u %{sensitive}u %{sensitive}u %{sensitive}u",  buf,  0x7Au);
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)unsigned int v38 = "com.apple.wpantund.ncp";
        *(_WORD *)&v38[8] = 2080;
        uint64_t v39 = "default";
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging Module is not defined for SubSystem: %s, Category: %s",  buf,  0x16u);
      }

      ++v7;
    }

    while (v6 != v7);
  }

  uint64_t v28 = Length % 20;
  if (v28 < 1) {
    goto LABEL_30;
  }
  uint64_t v29 = 0LL;
  char v30 = (char *)buf;
  do
  {
    if (v29 == 26) {
      goto LABEL_37;
    }
    sprintf(v30, "%{sensitive}u ", BytePtr[20 * v6 + v29++]);
    v30 += 2;
  }

  while (v28 != v29);
  if (v29 + 0x4000000000000000LL < 0) {
LABEL_38:
  }
    __break(0x550Cu);
  if ((unint64_t)(v29 - 1) > 0x17)
  {
LABEL_37:
    __break(0x5512u);
    goto LABEL_38;
  }

  if ((unint64_t)v28 > 0x19)
  {
    __break(1u);
    return;
  }

  buf[2 * v28] = 0;
  unsigned int v31 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v31)
  {
    uint64_t v32 = v31;
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FF028();
  }

void sub_100145208(uint64_t a1)
{
  v5[0] = (uint64_t)v5;
  v5[1] = (uint64_t)v5;
  uint64_t v6 = 0LL;
  sub_10008C93C(a1, v5);
  uint64_t v1 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v1)
  {
    if (sub_10015A058(6) && os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 134217984;
      v11[0] = v6;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "Received Dataset with %lu props as: ", buf, 0xCu);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FF028();
  }

  sub_1000731A0(v7, (uint64_t)v5);
  sub_10000BDD8((uint64_t)v7, (uint64_t)buf);
  if (*(void *)v7) {
    (*(void (**)(void))(**(void **)v7 + 8LL))(*(void *)v7);
  }
  for (uint64_t i = *(void *)((char *)v11 + 4); (uint8_t *)i != buf; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v3 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v3)
    {
      if (sub_10015A058(6) && os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        uint64_t v4 = (void *)(i + 16);
        *(_DWORD *)uint64_t v7 = 136642819;
        *(void *)&void v7[4] = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%{sensitive}s", v7, 0xCu);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v7 = 136315394;
      *(void *)&void v7[4] = "com.apple.wpantund.ncp";
      __int16 v8 = 2080;
      uint64_t v9 = "default";
      _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging Module is not defined for SubSystem: %s, Category: %s",  v7,  0x16u);
    }
  }

  sub_10000C0E8(buf);
  sub_10000C0E8(v5);
}

void sub_100145478( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21)
{
}

void sub_1001454C8(uint64_t a1, std::string *a2)
{
  v8[0] = (uint64_t)v8;
  v8[1] = (uint64_t)v8;
  v8[2] = 0LL;
  sub_10008C93C(a1, v8);
  sub_1000731A0(&v5, (uint64_t)v8);
  sub_10000BDD8((uint64_t)&v5, (uint64_t)&v6);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  for (uint64_t i = v7; (uint64_t *)i != &v6; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v4 = (const std::string::value_type *)(i + 16);
    std::string::append(a2, v4);
    std::string::append(a2, "\n");
  }

  sub_10000C0E8(&v6);
  sub_10000C0E8(v8);
}

void sub_100145594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  if (a3) {
    (*(void (**)(uint64_t))(*(void *)a3 + 8LL))(a3);
  }
  sub_10000C0E8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1001455D8(CFMutableDictionaryRef *a1)
{
}

void sub_10014566C(CFMutableDictionaryRef *a1)
{
}

void sub_100145720(CFMutableDictionaryRef *a1)
{
}

uint64_t sub_1001457D0(CFDictionaryRef *a1, uint64_t a2)
{
  OSStatus v3 = SecItemAdd(*a1, 0LL);
  if (!v3)
  {
    uint64_t v6 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v6)
    {
      uint64_t v7 = v6;
      if (sub_10015A058(6))
      {
        a2 = 1LL;
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          uint64_t buf = 67109120LL;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "dskeychain::AddKeychainItem: SecItemAdd SUCCESS: err=%d",  (uint8_t *)&buf,  8u);
        }

        return a2;
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FF028();
    }

    return 1LL;
  }

  if (v3 == -25299)
  {
    uint64_t v4 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v4)
    {
      uint64_t v5 = v4;
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FF028();
    }

    return 0LL;
  }

  CFStringRef v8 = SecCopyErrorMessageString(v3, 0LL);
  uint64_t v9 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v9)
  {
    uint64_t v10 = v9;
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FF028();
  }

  CFRelease(v8);
  if (a2)
  {
    sub_10000AC00(v16, "Error");
    sub_10000AC00(v14, "Keychain Operation Failure");
    sub_10000AC00(__p, "Dataset Keychain Addition Failure");
    (*(void (**)(uint64_t, void **, void **, void **, void, uint64_t))(*(void *)a2 + 72LL))( a2,  v16,  v14,  __p,  0LL,  1LL);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    return 0LL;
  }

  return a2;
}

void sub_100145A3C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100145A90(CFDictionaryRef *a1, CFTypeRef *a2)
{
  OSStatus v3 = SecItemCopyMatching(*a1, a2);
  if (v3)
  {
    CFStringRef v4 = SecCopyErrorMessageString(v3, 0LL);
    uint64_t v5 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v5)
    {
      uint64_t v6 = v5;
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FF028();
    }

    CFRelease(v4);
    return 0LL;
  }

  uint64_t v7 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  CFStringRef v8 = v7;
  if (!a2)
  {
    if (v7)
    {
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FF028();
    }

    return 0LL;
  }

  if (!v7)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1001FF028();
    }
    return 1LL;
  }

  uint64_t v9 = 1LL;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    v11[0] = 67109120;
    v11[1] = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "dskeychain::FindKeychainItem: SecItemCopyMatching  SUCCESS:err = %d,",  (uint8_t *)v11,  8u);
  }

  return v9;
}

BOOL sub_100145C50(CFDictionaryRef *a1)
{
  OSStatus v1 = SecItemDelete(*a1);
  OSStatus v2 = v1;
  if (v1)
  {
    CFStringRef v3 = SecCopyErrorMessageString(v1, 0LL);
    CFStringRef v4 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v4)
    {
      uint64_t v5 = v4;
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FF028();
    }

    CFRelease(v3);
  }

  else
  {
    uint64_t v6 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v6)
    {
      uint64_t v7 = v6;
      if (sub_10015A058(6) && os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "dskeychain::DeleteKeychainItem: Keychain item deleted",  v9,  2u);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FF028();
    }
  }

  return v2 == 0;
}

uint64_t sub_100145D8C(uint64_t a1, const UInt8 *a2, unsigned int a3, uint64_t a4)
{
  if (a1 >> 1 != 2700)
  {
    int v12 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v12)
    {
      char v13 = v12;
      return 0LL;
    }

    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
LABEL_29:
    }
      sub_1001FF028();
    return 0LL;
  }

  if (!a3)
  {
    int v20 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v20)
    {
      int v21 = v20;
      return 0LL;
    }

    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_29;
    }
    return 0LL;
  }

  sub_1001462A0(a1);
  CFStringRef v8 = CFDataCreate(0LL, a2, a3);
  CFDataRef v43 = v8;
  CFIndex Length = CFDataGetLength(v8);
  uint64_t v10 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v10)
  {
    int v11 = v10;
    if (sub_10015A058(6) && os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      *(void *)&uint8_t buf[4] = Length;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Input Data: CF Data len= %ld", buf, 0xCu);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FF028();
  }

  sub_100144DA0(&v43);
  Mutable = CFDictionaryCreateMutable(0LL, 0LL, 0LL, 0LL);
  *(void *)uint64_t buf = Mutable;
  sub_1001455D8((CFMutableDictionaryRef *)buf);
  CFDictionaryAddValue(Mutable, kSecValueData, v8);
  char v30 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  unsigned int v31 = v30;
  if ((_DWORD)a1 == 5400)
  {
    if (v30)
    {
      if (sub_10015A058(6) && os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)int v42 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_INFO,  "dskeychain::AddDataSet: Adding Active DataSet",  v42,  2u);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FF028();
    }

    CFDictionaryAddValue(Mutable, kSecAttrService, @"ThreadActiveDataSet");
    uint64_t v32 = sub_1001457D0((CFDictionaryRef *)buf, a4);
  }

  else
  {
    if (v30)
    {
      if (sub_10015A058(6) && os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)int v42 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_INFO,  "dskeychain::AddDataSet: Adding Pending DataSet",  v42,  2u);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FF028();
    }

    CFDictionaryAddValue(Mutable, kSecAttrService, @"ThreadPendingDataSet");
    uint64_t v33 = sub_1001457D0((CFDictionaryRef *)buf, a4);
    uint64_t v32 = v33;
    if ((_DWORD)a1 == 5401 && (_DWORD)v33)
    {
      unint64_t v34 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v34)
      {
        int v35 = v34;
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FF028();
      }

      *(void *)int v42 = 0LL;
      if (SecItemPersistKeychainWritesAtHighPerformanceCost(v42))
      {
        int v36 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v36)
        {
          char v37 = v36;
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FF028();
        }
      }

      if (*(void *)v42)
      {
        CFRelease(*(CFTypeRef *)v42);
      }

      else
      {
        uint64_t v39 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v39)
        {
          int v40 = v39;
          if (sub_10015A058(6) && os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)__int16 v41 = 0;
            _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "Pending dataset: cferror NULL", v41, 2u);
          }
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FF028();
        }
      }

      uint64_t v32 = 1LL;
    }
  }

  CFRelease(v8);
  CFRelease(Mutable);
  return v32;
}

BOOL sub_1001462A0(unsigned int a1)
{
  if (a1 >> 1 == 2700)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, 0LL, 0LL);
    *(void *)uint64_t buf = Mutable;
    sub_100145720((CFMutableDictionaryRef *)buf);
    if (a1 == 5401)
    {
      CFStringRef v8 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v8)
      {
        uint64_t v9 = v8;
        if (sub_10015A058(6) && os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int v12 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "dskeychain::DeleteDataSet: Remove Pending DataSet",  v12,  2u);
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FF028();
      }

      uint64_t v10 = @"ThreadPendingDataSet";
    }

    else
    {
      if (a1 != 5400)
      {
LABEL_26:
        BOOL v7 = sub_100145C50((CFDictionaryRef *)buf);
        CFRelease(Mutable);
        return v7;
      }

      CFStringRef v3 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v3)
      {
        CFStringRef v4 = v3;
        if (sub_10015A058(6) && os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int v12 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "dskeychain::DeleteDataSet: Remove Active DataSet",  v12,  2u);
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FF028();
      }

      uint64_t v10 = @"ThreadActiveDataSet";
    }

    CFDictionaryAddValue(Mutable, kSecAttrService, v10);
    goto LABEL_26;
  }

  uint64_t v5 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v5)
  {
    uint64_t v6 = v5;
    if (sub_10015A058(6) && os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "dskeychain::DeleteDataSet: Invalid dataset delete request: %d",  buf,  8u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FF028();
  }

  return 0LL;
}

uint64_t sub_10014650C(uint64_t a1)
{
  if (a1 >> 1 == 2700)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, 0LL, 0LL);
    CFDictionaryRef v22 = Mutable;
    sub_10014566C(&v22);
    if ((_DWORD)a1 == 5401)
    {
      uint64_t v14 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v14)
      {
        uint64_t v15 = v14;
        if (sub_10015A058(6) && os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "dskeychain::FindDataSet: Reading Pending DataSet",  buf,  2u);
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FF028();
      }

      uint64_t v16 = @"ThreadPendingDataSet";
    }

    else
    {
      if ((_DWORD)a1 != 5400) {
        goto LABEL_26;
      }
      CFStringRef v3 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v3)
      {
        CFStringRef v4 = v3;
        if (sub_10015A058(6) && os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "dskeychain::FindDataSet: Reading Active DataSet",  buf,  2u);
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FF028();
      }

      uint64_t v16 = @"ThreadActiveDataSet";
    }

    CFDictionaryAddValue(Mutable, kSecAttrService, v16);
LABEL_26:
    *(void *)uint64_t buf = 0LL;
    uint64_t v13 = sub_100145A90(&v22, (CFTypeRef *)buf);
    uint64_t v17 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    uint64_t v18 = v17;
    if ((v13 & 1) != 0)
    {
      if (v17)
      {
        if (sub_10015A058(6) && os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int v20 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "dskeychain::FindDataSet: keychain item found",  v20,  2u);
        }

        goto LABEL_39;
      }

      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_38;
      }
    }

    else
    {
      if (v17)
      {
        goto LABEL_39;
      }

      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
LABEL_38:
      }
        sub_1001FF028();
    }

uint64_t sub_100146808(uint64_t a1, _BYTE *a2)
{
  if (a1 >> 1 == 2700)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, 0LL, 0LL);
    CFDictionaryRef v27 = Mutable;
    sub_10014566C(&v27);
    uint64_t v5 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    uint64_t v6 = v5;
    if ((_DWORD)a1 == 5400)
    {
      if (v5)
      {
        if (sub_10015A058(6) && os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "dskeychain::FindAndGetDataSet: Reading Active DataSet",  buf,  2u);
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FF028();
      }

      uint64_t v16 = @"ThreadActiveDataSet";
    }

    else
    {
      if (v5)
      {
        if (sub_10015A058(6) && os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "dskeychain::FindAndGetDataSet: Reading Pending DataSet",  buf,  2u);
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FF028();
      }

      uint64_t v16 = @"ThreadPendingDataSet";
    }

    CFDictionaryAddValue(Mutable, kSecAttrService, v16);
    CFDataRef theData = 0LL;
    uint64_t v15 = sub_100145A90(&v27, (CFTypeRef *)&theData);
    if ((v15 & 1) != 0)
    {
      CFIndex Length = CFDataGetLength(theData);
      BytePtr = (UInt8 *)CFDataGetBytePtr(theData);
      uint64_t v19 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v19)
      {
        int v20 = v19;
        if (sub_10015A058(6) && os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t buf = 134217984;
          uint64_t v29 = Length;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "dskeychain::FindAndGetDataSet: keychainItem Data: CF Data len= %ld",  buf,  0xCu);
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FF028();
      }

      sub_100144DA0(&theData);
      sub_10008C394(a2);
      sub_10008D124(a2, BytePtr, Length);
      if ((_DWORD)a1 == 5401 && a2[152]) {
        a2[152] = 0;
      }
      uint64_t v23 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v23)
      {
        uint64_t v24 = v23;
        if (sub_10015A058(6) && os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t buf = 134217984;
          uint64_t v29 = 272LL;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "dskeychain::FindAndGetDataSet: size of DataSet after loading %lu",  buf,  0xCu);
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FF028();
      }

      CFRelease(Mutable);
      CFMutableDictionaryRef Mutable = theData;
    }

    else
    {
      int v21 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v21)
      {
        CFDictionaryRef v22 = v21;
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FF028();
      }
    }

    CFRelease(Mutable);
  }

  else
  {
    uint64_t v7 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v7)
    {
      uint64_t v8 = v7;
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FF028();
    }

    return 0LL;
  }

  return v15;
}

uint64_t sub_100146C28()
{
  return __cxa_atexit((void (*)(void *))sub_100042890, byte_1002C9AF8, (void *)&_mh_execute_header);
}

char *sub_100146CB4(uint64_t a1, char **a2)
{
  CFStringRef v3 = (char *)(a1 - 1);
  do
  {
    int v4 = v3[1];
    if (v4 < 0) {
      __uint32_t v5 = __maskrune(v3[1], 0x4000uLL);
    }
    else {
      __uint32_t v5 = _DefaultRuneLocale.__runetype[v4] & 0x4000;
    }
    ++v3;
  }

  while (v5);
  if (!v4 || v4 == 35)
  {
    uint64_t v6 = v3;
    CFStringRef v3 = 0LL;
    if (!a2) {
      return v3;
    }
LABEL_9:
    *a2 = v6;
    return v3;
  }

  char v8 = *v3;
  uint64_t v9 = v3;
  uint64_t v6 = v3;
  if (!*v3) {
    goto LABEL_32;
  }
  char v10 = 0;
  BOOL v11 = 1;
  uint64_t v6 = v3;
  uint64_t v9 = v3;
  while (2)
  {
    char v12 = v8;
    while (v11)
    {
      if (v12 == 34 || v12 == 39) {
        goto LABEL_29;
      }
      if (v12 < 0)
      {
        if (__maskrune(v12, 0x4000uLL))
        {
LABEL_31:
          ++v6;
          goto LABEL_32;
        }
      }

      else if ((_DefaultRuneLocale.__runetype[v12] & 0x4000) != 0)
      {
        goto LABEL_31;
      }

      char v12 = *v6;
LABEL_24:
      if (v12 == 92 && v6[1]) {
        ++v6;
      }
      *v9++ = *v6;
      int v13 = *++v6;
      char v12 = v13;
      if (!v13) {
        goto LABEL_32;
      }
    }

    if (v12 != v10) {
      goto LABEL_24;
    }
    char v12 = 0;
LABEL_29:
    int v14 = *++v6;
    char v8 = v14;
    BOOL v11 = v12 == 0;
    char v10 = v12;
    if (v14) {
      continue;
    }
    break;
  }

uint64_t sub_100146E14(FILE *a1, uint64_t (*a2)(uint64_t, const char *, uint64_t), uint64_t a3)
{
  size_t __n = 0LL;
  int v14 = 0LL;
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (feof(a1)) {
    return 0LL;
  }
  int v7 = 0;
  uint64_t v6 = 0LL;
  do
  {
    uint64_t result = (uint64_t)fgetln(a1, &__n);
    int v14 = (char *)result;
    if (!result || (_DWORD)v6) {
      break;
    }
    if (__OFADD__(v7, 1))
    {
      __break(0x5500u);
      return result;
    }

    uint64_t v9 = sub_100146CB4(result, &v14);
    if (v9)
    {
      char v10 = v9;
      v9[strnlen(v9, __n)] = 0;
      size_t v11 = strlen(v10);
      uint64_t v6 = 0LL;
      if (__n > v11)
      {
        __n -= v11;
        char v12 = sub_100146CB4((uint64_t)v14, &v14);
        uint64_t v6 = (uint64_t)v12;
        if (v12)
        {
          v12[strnlen(v12, __n)] = 0;
          uint64_t v6 = a2(a3, v10, v6);
        }
      }
    }

    else
    {
      uint64_t v6 = 0LL;
    }

    ++v7;
  }

  while (!feof(a1));
  return v6;
}

uint64_t sub_100146F28(const char *a1, uint64_t (*a2)(uint64_t, const char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = fopen(a1, "r");
  if (!v6) {
    return 0xFFFFFFFFLL;
  }
  int v7 = v6;
  char v8 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
  if (v8)
  {
    uint64_t v9 = v8;
    if (sub_10015A058(6) && os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      int v12 = 136315138;
      int v13 = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Reading configuration from %s . . .",  (uint8_t *)&v12,  0xCu);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_10020CC20();
  }

  uint64_t v10 = sub_100146E14(v7, a2, a3);
  fclose(v7);
  return v10;
}

void sub_100147058(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  int v4 = sub_10000BD6C(a1);
  {
    __uint32_t v5 = (const std::string *)sub_10000F154((uint64_t)a1);
    uint64_t v6 = std::string::basic_string(&v18, v5);
    __chkstk_darwin(v6);
    char v8 = (char *)&v17 - v7;
    if ((v18.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      unint64_t v9 = (unint64_t)v18.__r_.__value_.__s.__size_ >> 1;
    }
    else {
      unint64_t v9 = v18.__r_.__value_.__l.__size_ >> 1;
    }
    if ((v18.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v10 = &v18;
    }
    else {
      uint64_t v10 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    int v11 = sub_100159978(v8, v9, v10);
    sub_100018E5C(&v17, v8, (uint64_t)&v8[v11]);
    sub_100006EFC(a2, &v17);
    uint64_t v19 = (std::string *)&v17;
    sub_100006F6C((void ***)&v19);
  }

  else
  {
    int v12 = sub_10000BD6C(a1);
    {
      uint64_t v13 = sub_1000A5B28((uint64_t)a1);
      sub_10000CBF8(&v18, v13);
      sub_100006EFC(a2, (__n128 *)&v18);
      v17.n128_u64[0] = (unint64_t)&v18;
      int v14 = (void ***)&v17;
    }

    else
    {
      uint64_t v15 = sub_10000BD6C(a1);
      {
        v18.__r_.__value_.__r.__words[0] = *(void *)sub_10012D060((uint64_t)a1);
        sub_100159934((uint64_t)&v18, 8uLL);
        sub_1000712BC((char *)a2, *(char **)(a2 + 8), (char *)&v18, &v18.__r_.__value_.__s.__data_[8], 8LL);
        return;
      }

      uint64_t v16 = sub_10012CA20((uint64_t)a1);
      sub_10000CBF8(&v17, v16);
      sub_10000CBF8(&v18, (uint64_t)&v17);
      sub_100006EFC(a2, (__n128 *)&v18);
      uint64_t v19 = &v18;
      sub_100006F6C((void ***)&v19);
      uint64_t v19 = (std::string *)&v17;
      int v14 = (void ***)&v19;
    }

    sub_100006F6C(v14);
  }

void sub_100147278(_Unwind_Exception *a1)
{
  *(void *)(v3 - 48) = v2;
  sub_100006F6C((void ***)(v3 - 48));
  *(void *)(v3 - 72) = v1;
  sub_100006F6C((void ***)(v3 - 72));
  _Unwind_Resume(a1);
}

void *sub_1001472CC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = sub_1000A5B28(a1);
  return sub_10000CBF8(a2, v3);
}

uint64_t sub_1001472F4(uint64_t *a1)
{
  uint64_t v2 = sub_10000BD6C(a1);
  {
    uint64_t v6 = sub_10000BD6C(a1);
    {
      uint64_t v7 = (unsigned __int8 *)sub_10012CC78((uint64_t)a1);
      return *v7;
    }

    char v8 = sub_10000BD6C(a1);
    unint64_t v9 = sub_10000BD6C(a1);
    uint64_t v10 = sub_10000BD6C(a1);
    int v11 = sub_10000BD6C(a1);
    uint64_t v13 = sub_10000BD6C(a1);
    int v14 = sub_10000BD6C(a1);
    {
      uint64_t v7 = (unsigned __int8 *)sub_10012CBB0((uint64_t)a1);
      return *v7;
    }

    uint64_t v15 = sub_10000BD6C(a1);
LABEL_17:
      int v12 = (unsigned int *)sub_10012A480((uint64_t)a1);
    else {
LABEL_22:
    }
      int v12 = (unsigned int *)sub_10012CF98((uint64_t)a1);
    return *v12;
  }

  uint64_t v3 = (const std::string *)sub_10000F154((uint64_t)a1);
  std::string::basic_string(&v17, v3);
  if ((v17.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v4 = &v17;
  }
  else {
    int v4 = (std::string *)v17.__r_.__value_.__r.__words[0];
  }
  uint64_t v5 = strtol((const char *)v4, 0LL, 0);
  return v5;
}

uint64_t sub_1001474A0(uint64_t *a1)
{
  __int128 __dst = 0uLL;
  uint64_t v2 = sub_10000BD6C(a1);
  {
    uint64_t v3 = (const std::string *)sub_10000F154((uint64_t)a1);
    std::string::basic_string(&v18, v3);
    uint64_t size = v18.__r_.__value_.__s.__size_;
    int v5 = (char)v18.__r_.__value_.__s.__size_;
    std::string::size_type v7 = v18.__r_.__value_.__l.__size_;
    std::string::size_type v6 = v18.__r_.__value_.__r.__words[0];
    if ((v18.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      char v8 = &v18;
    }
    else {
      char v8 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    if ((v18.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v9 = v18.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v9 = v18.__r_.__value_.__l.__size_;
    }
    if (v9)
    {
      std::string::size_type v10 = 0LL;
      while (memchr("0123456789abcdefABCDEF:.", v8->__r_.__value_.__s.__data_[v10], 0x18uLL))
      {
        if (v9 == ++v10) {
          goto LABEL_25;
        }
      }

      if (v10 != -1LL)
      {
        int v14 = (char *)&v18 + size;
        if (v5 < 0) {
          int v14 = (char *)(v6 + v7);
        }
        std::string::erase(&v18, v10, v14 - (char *)v8 - v10);
        LOBYTE(v5) = v18.__r_.__value_.__s.__size_;
        std::string::size_type v6 = v18.__r_.__value_.__r.__words[0];
      }
    }

void sub_100147684( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **sub_1001476B4(uint64_t *a1, int a2)
{
  int v4 = sub_10000BD6C(a1);
  {
    int v5 = (const std::string *)sub_10000F154((uint64_t)a1);
    std::string::basic_string(&__p, v5);
    if (a2)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type size = __p.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      if (size != 16)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "String not 16 characters long");
      }

      int v7 = 16;
    }

    else
    {
      int v7 = 0;
    }

    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    p_data = (void **)strtoull((const char *)p_p, 0LL, v7);
  }

  else
  {
    char v8 = sub_10000BD6C(a1);
    {
      uint64_t v9 = sub_1000A5B28((uint64_t)a1);
      sub_10000CBF8(&__p, v9);
      if (__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0] != 8)
      {
        uint64_t v15 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v15, "Data not 8 bytes long");
      }

      if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_) {
        uint64_t v10 = 0LL;
      }
      else {
        uint64_t v10 = __p.__r_.__value_.__r.__words[0];
      }
      sub_1001598C0((uint64_t)&v17, v10, 8LL);
      p_data = (void **)&v17->__r_.__value_.__l.__data_;
      std::string v17 = &__p;
      sub_100006F6C((void ***)&v17);
    }

    else
    {
      return *(void ***)sub_10012D060((uint64_t)a1);
    }
  }

  return p_data;
}

void sub_100147864( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1001478B8(uint64_t *a1)
{
  uint64_t v2 = sub_10000BD6C(a1);
  {
    uint64_t v3 = (const std::string *)sub_10000F154((uint64_t)a1);
    std::string::basic_string(&v16, v3);
    if (((char)v16.__r_.__value_.__s.__size_ & 0x80000000) == 0)
    {
      if (v16.__r_.__value_.__s.__size_ == 1)
      {
        if (v16.__r_.__value_.__s.__data_[0] != 49) {
          goto LABEL_43;
        }
        goto LABEL_38;
      }

      if (v16.__r_.__value_.__s.__size_ != 3)
      {
        if (v16.__r_.__value_.__s.__size_ != 4
          || (BOOL v4 = 1LL, LODWORD(v16.__r_.__value_.__l.__data_) != 1163219540)
          && LODWORD(v16.__r_.__value_.__l.__data_) != 1702195828)
        {
LABEL_43:
          if (sub_1000B55AC(&v16, "false")
            || sub_1000B55AC(&v16, "no")
            || sub_1000B55AC(&v16, "0")
            || sub_1000B55AC(&v16, "FALSE")
            || sub_1000B55AC(&v16, "NO"))
          {
            BOOL v4 = 0LL;
          }

          else
          {
            if ((v16.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              uint64_t v15 = &v16;
            }
            else {
              uint64_t v15 = (std::string *)v16.__r_.__value_.__r.__words[0];
            }
            BOOL v4 = strtol((const char *)v15, 0LL, 0) != 0;
          }
        }

void sub_100147B4C(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  BOOL v4 = sub_10000BD6C(a1);
  {
    int v5 = (const std::string *)sub_10000F154((uint64_t)a1);
    std::string::basic_string(&v38, v5);
LABEL_3:
    sub_100014D08((uint64_t)a2, (__int128 *)&v38);
    return;
  }

  BOOL v6 = sub_10000BD6C(a1);
  {
    int v7 = (unsigned __int8 *)sub_10012CC78((uint64_t)a1);
    snprintf((char *)&v38, 0xAuLL, "%u", *v7);
    std::string::assign(a2, (const std::string::value_type *)&v38);
    return;
  }

  char v8 = sub_10000BD6C(a1);
  {
    uint64_t v9 = (char *)sub_10012CD40((uint64_t)a1);
    snprintf((char *)&v38, 0xAuLL, "%d", *v9);
    std::string::assign(a2, (const std::string::value_type *)&v38);
    return;
  }

  uint64_t v10 = sub_10000BD6C(a1);
  {
    int v11 = (unsigned __int16 *)sub_10012CE08((uint64_t)a1);
    snprintf((char *)&v38, 0xAuLL, "%u", *v11);
    std::string::assign(a2, (const std::string::value_type *)&v38);
    return;
  }

  int v12 = sub_10000BD6C(a1);
  {
    uint64_t v13 = (__int16 *)sub_10012CED0((uint64_t)a1);
    snprintf((char *)&v38, 0xAuLL, "%d", *v13);
    std::string::assign(a2, (const std::string::value_type *)&v38);
    return;
  }

  int v14 = sub_10000BD6C(a1);
  {
LABEL_14:
    uint64_t v15 = (_DWORD *)sub_10012A480((uint64_t)a1);
    snprintf((char *)&v38, 0xAuLL, "%u", *v15);
    std::string::assign(a2, (const std::string::value_type *)&v38);
    return;
  }

  std::string v16 = sub_10000BD6C(a1);
  std::string v18 = sub_10000BD6C(a1);
  {
    uint64_t v19 = (void *)sub_10012D060((uint64_t)a1);
    snprintf((char *)&v38, 0x14uLL, "%08x%08x", HIDWORD(*v19), *v19);
    std::string::assign(a2, (const std::string::value_type *)&v38);
    return;
  }

  int v20 = sub_10000BD6C(a1);
  int v21 = sub_10000BD6C(a1);
  {
LABEL_16:
    std::string v17 = (_DWORD *)sub_10012CF98((uint64_t)a1);
    snprintf((char *)&v38, 0xAuLL, "%d", *v17);
    std::string::assign(a2, (const std::string::value_type *)&v38);
    return;
  }

  CFDictionaryRef v22 = sub_10000BD6C(a1);
  {
    else {
      uint64_t v23 = "false";
    }
    std::string::assign(a2, v23);
    return;
  }

  uint64_t v24 = sub_10000BD6C(a1);
  {
    sub_1001472CC((uint64_t)a1, &v38);
    sub_1001488F0(__p, 2 * (v38.__r_.__value_.__l.__size_ - v38.__r_.__value_.__r.__words[0]), 0);
    sub_100014D08((uint64_t)a2, (__int128 *)__p);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    if ((uint64_t)(v38.__r_.__value_.__l.__size_ - v38.__r_.__value_.__r.__words[0]) < 0)
    {
LABEL_56:
      __break(0x550Cu);
    }

    else
    {
      std::string::reserve(a2, (2 * (v38.__r_.__value_.__l.__size_ - v38.__r_.__value_.__r.__words[0])) | 1);
      int size = (char)a2->__r_.__value_.__s.__size_;
      uint64_t v26 = a2->__r_.__value_.__l.__cap_ & 0x7FFFFFFFFFFFFFFFLL;
      if (size >= 0) {
        uint64_t v26 = 23LL;
      }
      if (v26)
      {
        if (size >= 0) {
          CFDictionaryRef v27 = a2;
        }
        else {
          CFDictionaryRef v27 = (std::string *)a2->__r_.__value_.__r.__words[0];
        }
        if (v38.__r_.__value_.__l.__size_ == v38.__r_.__value_.__r.__words[0]) {
          unint64_t v28 = 0LL;
        }
        else {
          unint64_t v28 = v38.__r_.__value_.__r.__words[0];
        }
        sub_100159A78(v28, v38.__r_.__value_.__l.__size_ - v38.__r_.__value_.__r.__words[0], v27, v26 - 1, 0);
        __p[0] = &v38;
        sub_100006F6C((void ***)__p);
        return;
      }
    }

    __break(0x5515u);
    return;
  }

  uint64_t v29 = sub_10000BD6C(a1);
  {
    uint64_t v33 = sub_10000BD6C(a1);
    {
      std::string::append(a2, "<");
      unint64_t v34 = sub_10000BD6C(a1);
      std::string::append(a2, (const std::string::value_type *)(v34[1] & 0x7FFFFFFFFFFFFFFFLL));
      std::string::append(a2, ">");
      return;
    }

    *(_OWORD *)std::string __p = *(_OWORD *)sub_10014882C((uint64_t)a1);
    sub_100108154(__p, &v38);
    goto LABEL_3;
  }

  sub_1001481EC((uint64_t)a1, (uint64_t)&v38);
  if (v38.__r_.__value_.__l.__cap_)
  {
    std::string::assign(a2, "{\n");
    for (uint64_t i = (std::string *)v38.__r_.__value_.__l.__size_; i != &v38; uint64_t i = (std::string *)i->__r_.__value_.__l.__size_)
    {
      std::operator+<char>(&v35, "\t", &i->__r_.__value_.__r.__words[2]);
      unsigned int v31 = std::string::append(&v35, "\n");
      __int128 v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      std::string::size_type cap = v31->__r_.__value_.__l.__cap_;
      *(_OWORD *)std::string __p = v32;
      v31->__r_.__value_.__l.__size_ = 0LL;
      v31->__r_.__value_.__l.__cap_ = 0LL;
      v31->__r_.__value_.__r.__words[0] = 0LL;
      sub_10000D650(a2, (const std::string::value_type *)__p);
      if (SHIBYTE(cap) < 0) {
        operator delete(__p[0]);
      }
    }

    std::string::append(a2, "}");
  }

  else
  {
    std::string::assign(a2, "{ }");
  }

  sub_10000C0E8(&v38);
}

void sub_100148134( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, uint64_t a25)
{
}

uint64_t sub_1001481EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_10012C958(a1);
  return sub_10000C678(a2, v3);
}

void sub_100148214(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 8) = 0LL;
  *(void *)a2 = a2 + 8;
  BOOL v4 = sub_10000BD6C(a1);
  {
    int v5 = (const std::string *)sub_10000F154((uint64_t)a1);
    std::string::basic_string(&v21, v5);
    std::string::size_type size = v21.__r_.__value_.__s.__size_;
    unsigned __int8 v7 = v21.__r_.__value_.__s.__size_;
    if ((v21.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type size = v21.__r_.__value_.__l.__size_;
    }
    if (!size) {
      goto LABEL_12;
    }
    if (std::string::find(&v21, 44, 0LL) == -1LL)
    {
      if ((v21.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        char v8 = &v21;
      }
      else {
        char v8 = (std::string *)v21.__r_.__value_.__r.__words[0];
      }
      if ((v8->__r_.__value_.__s.__data_[0] & 0x80000000) == 0
        && (_DefaultRuneLocale.__runetype[v8->__r_.__value_.__s.__data_[0]] & 0x400) != 0)
      {
        int v20 = strtol((const char *)v8, 0LL, 0);
        sub_10003308C((uint64_t **)a2, &v20, &v20);
        unsigned __int8 v7 = v21.__r_.__value_.__s.__size_;
LABEL_12:
        if ((v7 & 0x80) != 0) {
          operator delete(v21.__r_.__value_.__l.__data_);
        }
        return;
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, &v21);
    }

    else
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "integer mask string format not yet implemented");
    }
  }

  uint64_t v9 = sub_10000BD6C(a1);
  {
    LODWORD(v21.__r_.__value_.__l.__data_) = *(unsigned __int8 *)sub_10012CC78((uint64_t)a1);
    sub_10003308C((uint64_t **)a2, (int *)&v21, &v21);
  }

  else
  {
    uint64_t v10 = sub_10000BD6C(a1);
    {
      LODWORD(v21.__r_.__value_.__l.__data_) = *(char *)sub_10012CD40((uint64_t)a1);
      sub_10003308C((uint64_t **)a2, (int *)&v21, &v21);
    }

    else
    {
      int v11 = sub_10000BD6C(a1);
      {
        LODWORD(v21.__r_.__value_.__l.__data_) = *(unsigned __int16 *)sub_10012CE08((uint64_t)a1);
        sub_10003308C((uint64_t **)a2, (int *)&v21, &v21);
      }

      else
      {
        int v12 = sub_10000BD6C(a1);
        {
          LODWORD(v21.__r_.__value_.__l.__data_) = *(__int16 *)sub_10012CED0((uint64_t)a1);
          sub_10003308C((uint64_t **)a2, (int *)&v21, &v21);
        }

        else
        {
          uint64_t v13 = sub_10000BD6C(a1);
          {
            LODWORD(v21.__r_.__value_.__l.__data_) = *(_DWORD *)sub_10012A480((uint64_t)a1);
            sub_10003308C((uint64_t **)a2, (int *)&v21, &v21);
          }

          else
          {
            int v14 = sub_10000BD6C(a1);
            {
              LODWORD(v21.__r_.__value_.__l.__data_) = *(_DWORD *)sub_10012CF98((uint64_t)a1);
              sub_10003308C((uint64_t **)a2, (int *)&v21, &v21);
            }

            else
            {
              uint64_t v15 = sub_10000BD6C(a1);
              {
                LODWORD(v21.__r_.__value_.__l.__data_) = *(unsigned __int8 *)sub_10012CBB0((uint64_t)a1);
                sub_10003308C((uint64_t **)a2, (int *)&v21, &v21);
              }

              else
              {
                std::string v16 = sub_10000BD6C(a1);
                {
                  sub_100148668((uint64_t)a1, (uint64_t *)&v21);
                  sub_100148690((uint64_t **)a2, v21.__r_.__value_.__l.__size_, (uint64_t)&v21);
                  sub_100148738((uint64_t *)&v21);
                }

                else
                {
                  std::string v17 = sub_10000BD6C(a1);
                  {
                    sub_1001486E8((uint64_t)a1, (uint64_t *)&v21);
                    for (uint64_t i = (std::string *)v21.__r_.__value_.__l.__size_;
                          i != &v21;
                          uint64_t i = (std::string *)i->__r_.__value_.__l.__size_)
                    {
                      int v20 = sub_1001472F4((uint64_t *)&i->__r_.__value_.__l.__cap_);
                      sub_10003308C((uint64_t **)a2, &v20, &v20);
                    }

                    sub_100148798((uint64_t *)&v21);
                  }

                  else
                  {
                    sub_100148710((uint64_t)a1, &v21);
                    sub_100148DB0(a2, &v21);
                    sub_10000D0D4((uint64_t)&v21);
                  }
                }
              }
            }
          }
        }
      }
    }
  }

void sub_1001485DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t *sub_100148668@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_100148988(a1);
  return sub_100148A54(a2, v3);
}

uint64_t **sub_100148690(uint64_t **result, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    int v5 = result;
    uint64_t v6 = (uint64_t)(result + 1);
    do
    {
      uint64_t result = (uint64_t **)sub_10000CE84(v5, v6, (int *)(v4 + 16), (_DWORD *)(v4 + 16));
      uint64_t v4 = *(void *)(v4 + 8);
    }

    while (v4 != a3);
  }

  return result;
}

uint64_t *sub_1001486E8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_100148B74(a1);
  return sub_100148C38(a2, v3);
}

void *sub_100148710@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)sub_10012CA84(a1);
  return sub_10000CDD4(a2, v3);
}

void sub_100148738(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    uint64_t v2 = (uint64_t *)a1[1];
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v3 + 8) = v4;
    a1[2] = 0LL;
    while (v2 != a1)
    {
      int v5 = (uint64_t *)v2[1];
      sub_100071518((int)a1, v2);
      uint64_t v2 = v5;
    }
  }

void sub_100148798(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    uint64_t v2 = (uint64_t *)a1[1];
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v3 + 8) = v4;
    a1[2] = 0LL;
    while (v2 != a1)
    {
      int v5 = (uint64_t *)v2[1];
      sub_1001487F8((int)a1, v2);
      uint64_t v2 = v5;
    }
  }

void sub_1001487F8(int a1, void *__p)
{
  uint64_t v3 = __p[2];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  operator delete(__p);
}

uint64_t sub_10014882C(uint64_t a1)
{
  uint64_t result = sub_100148890(a1);
  if (!result)
  {
    v2.__vftable = 0LL;
    std::bad_cast::bad_cast(&v2);
    v2.__vftable = (std::bad_cast_vtbl *)&off_1002ADCA8;
    sub_10000C268();
  }

  return result;
}

void sub_10014887C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

uint64_t sub_100148890(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    uint64_t result = *((void *)sub_10000BD6C((uint64_t *)result) + 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"8in6_addr" & 0x7FFFFFFFFFFFFFFFLL)
      || (uint64_t result = strcmp((const char *)result, (const char *)((unint64_t)"8in6_addr" & 0x7FFFFFFFFFFFFFFFLL)),
          !(_DWORD)result))
    {
      if (*v1) {
        return *v1 + 8LL;
      }
      else {
        __break(0x5516u);
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

void *sub_1001488F0(void *a1, unint64_t a2, char a3)
{
  uint64_t v3 = a1;
  if (a2 >= 0x7FFFFFFFFFFFFFF8LL) {
    sub_10000ACA8();
  }
  if (a2 >= 0x17)
  {
    if ((a2 | 7) == 0x17) {
      size_t v6 = 25LL;
    }
    else {
      size_t v6 = (a2 | 7) + 1;
    }
    a1 = operator new(v6);
    v3[1] = a2;
    void v3[2] = v6 | 0x8000000000000000LL;
    void *v3 = a1;
  }

  else
  {
    *((_BYTE *)a1 + 23) = a2;
    if (!a2) {
      goto LABEL_11;
    }
  }

  uint64_t v7 = 0LL;
  do
    *((_BYTE *)a1 + v7++) = a3;
  while (a2 != v7);
LABEL_11:
  *((_BYTE *)a1 + a2) = 0;
  return v3;
}

uint64_t sub_100148988(uint64_t a1)
{
  uint64_t result = sub_1001489EC(a1);
  if (!result)
  {
    v2.__vftable = 0LL;
    std::bad_cast::bad_cast(&v2);
    v2.__vftable = (std::bad_cast_vtbl *)&off_1002ADCA8;
    sub_10000C268();
  }

  return result;
}

void sub_1001489D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

uint64_t sub_1001489EC(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    uint64_t result = *((void *)sub_10000BD6C((uint64_t *)result) + 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == (0x800000010022B2E8LL & 0x7FFFFFFFFFFFFFFFLL)
      || (uint64_t result = strcmp((const char *)result, (const char *)(0x800000010022B2E8LL & 0x7FFFFFFFFFFFFFFFLL)),
          !(_DWORD)result))
    {
      if (*v1) {
        return *v1 + 8LL;
      }
      else {
        __break(0x5516u);
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t *sub_100148A54(uint64_t *a1, uint64_t a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
    sub_100148AC0(a1, (_DWORD *)(i + 16));
  return a1;
}

void sub_100148AAC(_Unwind_Exception *a1)
{
}

void *sub_100148AC0(uint64_t *a1, _DWORD *a2)
{
  uint64_t result = sub_100148B10((uint64_t)a1, 0LL, 0LL, a2);
  uint64_t v4 = *a1;
  *uint64_t result = *a1;
  result[1] = a1;
  *(void *)(v4 + 8) = result;
  *a1 = (uint64_t)result;
  uint64_t v5 = a1[2];
  BOOL v6 = __CFADD__(v5, 1LL);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(0x5500u);
  }
  else {
    a1[2] = v7;
  }
  return result;
}

void *sub_100148B10(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v10 = 1LL;
  uint64_t v7 = operator new(0x18uLL);
  *uint64_t v7 = a2;
  v7[1] = a3;
  *((_DWORD *)v7 + 4) = *a4;
  uint64_t v11 = 0LL;
  sub_10010E1E8((uint64_t)v9);
  return v7;
}

uint64_t sub_100148B74(uint64_t a1)
{
  uint64_t result = sub_100148BD8(a1);
  if (!result)
  {
    v2.__vftable = 0LL;
    std::bad_cast::bad_cast(&v2);
    v2.__vftable = (std::bad_cast_vtbl *)&off_1002ADCA8;
    sub_10000C268();
  }

  return result;
}

void sub_100148BC4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

uint64_t sub_100148BD8(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    uint64_t result = *((void *)sub_10000BD6C((uint64_t *)result) + 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"NSt3__14listIN5boost3anyENS_9allocatorIS2_EEEE" & 0x7FFFFFFFFFFFFFFFLL)
      || (uint64_t result = strcmp( (const char *)result,  (const char *)((unint64_t)"NSt3__14listIN5boost3anyENS_9allocatorIS2_EEEE" & 0x7FFFFFFFFFFFFFFFLL)),  !(_DWORD)result))
    {
      if (*v1) {
        return *v1 + 8LL;
      }
      else {
        __break(0x5516u);
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t *sub_100148C38(uint64_t *a1, uint64_t a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
    sub_100148CA4(a1, (uint64_t *)(i + 16));
  return a1;
}

void sub_100148C90(_Unwind_Exception *a1)
{
}

void *sub_100148CA4(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_100148CF4((uint64_t)a1, 0LL, 0LL, a2);
  uint64_t v4 = *a1;
  *uint64_t result = *a1;
  result[1] = a1;
  *(void *)(v4 + 8) = result;
  *a1 = (uint64_t)result;
  uint64_t v5 = a1[2];
  BOOL v6 = __CFADD__(v5, 1LL);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(0x5500u);
  }
  else {
    a1[2] = v7;
  }
  return result;
}

void *sub_100148CF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = a1 + 16;
  uint64_t v12 = 1LL;
  char v8 = operator new(0x18uLL);
  uint64_t v13 = v8;
  void *v8 = a2;
  v8[1] = a3;
  sub_100148D7C(v7, v8 + 2, a4);
  uint64_t v9 = v13;
  uint64_t v13 = 0LL;
  sub_10010E1E8((uint64_t)v11);
  return v9;
}

void sub_100148D68(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100148D7C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t result = *a3;
  if (*a3) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 24LL))(result);
  }
  *a2 = result;
  return result;
}

void sub_100148DB0(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  sub_10000D0FC(a1, *(void **)(a1 + 8));
  *(void *)a1 = *a2;
  uint64_t v5 = a2[1];
  *uint64_t v4 = v5;
  uint64_t v6 = a2[2];
  *(void *)(a1 + 16) = v6;
  if (v6)
  {
    *(void *)(v5 + 16) = v4;
    a2[1] = 0LL;
    a2[2] = 0LL;
    *a2 = a2 + 1;
  }

  else
  {
    *(void *)a1 = v4;
  }

BOOL sub_100148E18(uint64_t a1, void *a2)
{
  else {
    uint64_t v3 = *(const char **)a1;
  }
  return inet_pton(30, v3, a2) == 1;
}

uint64_t sub_100148E4C(uint64_t a1)
{
  return *(void *)a1;
}

void sub_100148E5C(uint64_t a1, unsigned int a2)
{
  if (a2 >= 0x80) {
    unint64_t v3 = 128LL;
  }
  else {
    unint64_t v3 = a2;
  }
  bzero((void *)(a1 + ((v3 + 7) >> 3)), 16 - ((v3 + 7) >> 3));
  if ((v3 & 7) != 0)
  {
    if ((v3 & 0x80) != 0) {
      __break(0x5512u);
    }
    else {
      *(_BYTE *)(a1 + (v3 >> 3)) &= -256 >> (v3 & 7);
    }
  }

double sub_100148EC4()
{
  unk_1002D153C = 0u;
  xmmword_1002D1520 = 0u;
  unk_1002D1530 = 0u;
  xmmword_1002D1510 = 0u;
  bzero(&dword_1002D1558, 0x268uLL);
  qword_1002D1550 = 0x7FFFFFFFFFFFFFFFLL;
  double result = 0.0;
  xmmword_1002D17C4 = 0u;
  dword_1002D17D4 = 0;
  qword_1002D17D8 = 0x7FFFFFFFFFFFFFFFLL;
  xmmword_1002D17E0 = 0u;
  *(_OWORD *)&dword_1002D17F0 = 0u;
  xmmword_1002D1800 = 0u;
  unk_1002D1810 = 0u;
  xmmword_1002D1820 = 0u;
  unk_1002D1830 = 0u;
  xmmword_1002D1840 = 0u;
  unk_1002D1850 = 0u;
  return result;
}

double sub_100148F2C()
{
  double result = 0.0;
  unk_1002D153C = 0u;
  xmmword_1002D1520 = 0u;
  unk_1002D1530 = 0u;
  xmmword_1002D1510 = 0u;
  return result;
}

void sub_100148F48()
{
  qword_1002D1550 = 0x7FFFFFFFFFFFFFFFLL;
}

double sub_100148F7C()
{
  xmmword_1002D17C4 = 0uLL;
  dword_1002D17D4 = 0;
  qword_1002D17D8 = 0x7FFFFFFFFFFFFFFFLL;
  double result = 0.0;
  xmmword_1002D17E0 = 0u;
  *(_OWORD *)&dword_1002D17F0 = 0u;
  return result;
}

double sub_100148FA4()
{
  double result = 0.0;
  xmmword_1002D1840 = 0u;
  unk_1002D1850 = 0u;
  xmmword_1002D1820 = 0u;
  unk_1002D1830 = 0u;
  xmmword_1002D1800 = 0u;
  unk_1002D1810 = 0u;
  return result;
}

uint64_t sub_100148FC0(void *a1)
{
  id v1 = a1;
  std::bad_cast v2 = objc_alloc(&OBJC_CLASS___NSString);
  if (byte_1002C9C1F >= 0) {
    unint64_t v3 = &qword_1002C9C08;
  }
  else {
    unint64_t v3 = (uint64_t *)qword_1002C9C08;
  }
  uint64_t v4 = -[NSString initWithUTF8String:](v2, "initWithUTF8String:", v3);
  [v1 setDaemonVersion:v4];

  uint64_t v5 = objc_alloc(&OBJC_CLASS___NSString);
  if (byte_1002C9C37 >= 0) {
    uint64_t v6 = &qword_1002C9C20;
  }
  else {
    uint64_t v6 = (uint64_t *)qword_1002C9C20;
  }
  uint64_t v7 = -[NSString initWithUTF8String:](v5, "initWithUTF8String:", v6);
  [v1 setVendorVersion:v7];

  return 0LL;
}

void sub_100149064(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

uint64_t sub_100149088(uint64_t *a1)
{
  return 0LL;
}

uint64_t sub_1001490CC(uint64_t *a1)
{
  return 0LL;
}

uint64_t sub_100149110(uint64_t *a1)
{
  uint64_t result = sub_1001472F4(a1);
  unsigned int v2 = result - 11;
  if (result < 0xB)
  {
    __break(0x5515u);
    goto LABEL_6;
  }

  if (v2 >= 0xF)
  {
LABEL_6:
    __break(0x5512u);
    goto LABEL_7;
  }

  int v3 = *((_DWORD *)&xmmword_1002D1510 + v2);
  BOOL v4 = __CFADD__(v3, 1);
  int v5 = v3 + 1;
  if (!v4)
  {
    *((_DWORD *)&xmmword_1002D1510 + v2) = v5;
    return result;
  }

uint64_t sub_10014915C(void *a1)
{
  id v1 = a1;
  [v1 setJoinAttempts:dword_1002D1558];
  *(float *)&double v2 = (float)((float)dword_1002D155C / (float)dword_1002D1558) * 100.0;
  [v1 setJoinSuccessRate:v2];
  for (uint64_t i = 0LL; i != 100; i += 4LL)
  {
    [v1 addJoinerLatencyHistogram:*(unsigned int *)((char *)&xmmword_1002D1510 + i + 80)];
    [v1 addJoinerFailLatencyHistogram:*(unsigned int *)((char *)&xmmword_1002D1510 + i + 180)];
  }

  for (uint64_t j = 0LL; j != 204; j += 4LL)
  {
    [v1 addAttachLatencyHistogram:*(unsigned int *)((char *)&xmmword_1002D1510 + j + 280)];
    [v1 addAttachFailLatencyHistogram:*(unsigned int *)((char *)&xmmword_1002D1510 + j + 484)];
  }

  return 0LL;
}

void sub_100149224(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__darwin_time_t sub_10014923C()
{
  __darwin_time_t result = sub_10014314C();
  qword_1002D1550 = result;
  return result;
}

void sub_100149258(int a1, int a2)
{
  __darwin_time_t v4 = sub_10014314C();
  if (__OFSUB__(v4, qword_1002D1550)) {
    goto LABEL_37;
  }
  if (dword_1002D1558 == -1) {
    goto LABEL_36;
  }
  unint64_t v5 = (v4 - qword_1002D1550) & ~((v4 - qword_1002D1550) >> 63);
  ++dword_1002D1558;
  uint64_t v6 = sub_1000160F4("com.apple.wpantund.awd", "default");
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    char v8 = "FALSE";
    int v26 = 136316162;
    CFDictionaryRef v27 = "AWDMetricsHandlers_joinattempt_status";
    __int16 v28 = 1024;
    if (a1) {
      uint64_t v9 = "TRUE";
    }
    else {
      uint64_t v9 = "FALSE";
    }
    int v29 = dword_1002D1558;
    if (a2) {
      char v8 = "TRUE";
    }
    __int16 v30 = 2080;
    unsigned int v31 = v9;
    __int16 v32 = 2080;
    uint64_t v33 = v8;
    __int16 v34 = 2048;
    unint64_t v35 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "AWDMetrics : Inside %s. Attempts=%d, is_joiner=%s, is_success=%s, ElapsedTime = %lldms. ",  (uint8_t *)&v26,  0x30u);
  }

  if (a2)
  {
    if (dword_1002D155C != -1)
    {
      ++dword_1002D155C;
      if ((a1 & 1) != 0)
      {
        unint64_t v10 = v5 / 0x1388;
        if (v10 < 0x19)
        {
          uint64_t v11 = (char *)&xmmword_1002D1510 + 4 * v10;
          int v14 = *((_DWORD *)v11 + 20);
          uint64_t v13 = v11 + 80;
          int v12 = v14;
          goto LABEL_22;
        }

        goto LABEL_38;
      }

      unint64_t v23 = v5 / 0x64;
      uint64_t v24 = (char *)&xmmword_1002D1510 + 4 * v23;
      int v25 = *((_DWORD *)v24 + 70);
      BOOL v18 = __CFADD__(v25, 1);
      int v19 = v25 + 1;
      if (!v18)
      {
        uint64_t v13 = v24 + 280;
        goto LABEL_35;
      }
    }

uint64_t sub_1001494F4(void *a1, void *a2)
{
  uint64_t v33 = 0LL;
  memset(v32, 0, sizeof(v32));
  xpc_object_t xarray = a1;
  id v28 = a2;
  if (xpc_get_type(xarray) == (xpc_type_t)&_xpc_type_array)
  {
    size_t count = xpc_array_get_count(xarray);
    uint64_t v6 = sub_1000160F4("com.apple.wpantund.awd", "default");
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = count;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "AWDMetrics : JoinerRSSIHistogram array with size %ld.",  (uint8_t *)&buf,  0xCu);
    }

    if (count)
    {
      size_t v8 = 0LL;
      __darwin_time_t v4 = 0LL;
      do
      {
        xpc_object_t dictionary = xpc_array_get_dictionary(xarray, v8);
        unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(dictionary);

        __darwin_time_t v4 = v10;
        string = (char *)xpc_dictionary_get_string(v10, "key");
        sub_10000AC00(&buf, string);
        int uint64 = xpc_dictionary_get_uint64(v10, "value");
        std::string::size_type v13 = std::string::find(&buf, 91, 0LL);
        std::string::size_type v14 = std::string::find(&buf, 93, 0LL);
        uint64_t size = buf.__r_.__value_.__s.__size_;
        unsigned __int8 v16 = buf.__r_.__value_.__s.__size_;
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t size = buf.__r_.__value_.__l.__size_;
        }
        BOOL v18 = (std::string *)((char *)p_buf + size);
        if (size >= 18)
        {
          int v19 = p_buf;
          do
          {
            unint64_t v20 = (std::string *)memchr(v19, 69, size - 17);
            if (!v20) {
              break;
            }
            if (v20->__r_.__value_.__r.__words[0] == 0x6369766544646E45LL
              && v20->__r_.__value_.__l.__size_ == 0x756F436E696F4A65LL
              && LOWORD(v20->__r_.__value_.__r.__words[2]) == 29806)
            {
              goto LABEL_26;
            }

            int v19 = (std::string *)((char *)&v20->__r_.__value_.__l.__data_ + 1);
            uint64_t size = (char *)v18 - (char *)v19;
          }

          while ((char *)v18 - (char *)v19 > 17);
        }

        unint64_t v20 = v18;
LABEL_26:
        if (v20 != v18 && v20 == p_buf && v13 != -1LL && v14 != -1LL)
        {
          if (!v14)
          {
            __break(0x5515u);
LABEL_47:
            __break(0x5512u);
          }

          std::string::basic_string(&__str, &buf, v13 + 1, v14 - 1, (std::allocator<char> *)&v30);
          unsigned __int8 v23 = std::stoi(&__str, 0LL, 10);
          if ((v23 & 0xFEu) <= 0xD)
          {
            if (v23 >= 0xEu) {
              goto LABEL_47;
            }
            *((_DWORD *)v32 + v23) = uint64;
          }

          unsigned __int8 v16 = buf.__r_.__value_.__s.__size_;
        }

        if ((v16 & 0x80) != 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        ++v8;
      }

      while (v8 != count);
    }

    else
    {
      __darwin_time_t v4 = 0LL;
    }

    for (uint64_t i = 0LL; i != 56; i += 4LL)
      [v28 addAccessoryNodesCountHistogram:*(unsigned int *)((char *)v32 + i)];
    uint64_t v5 = 0LL;
  }

  else
  {
    int v3 = sub_1000160F4("com.apple.wpantund.awd", "default");
    __darwin_time_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR)) {
      sub_100212D24();
    }
    uint64_t v5 = 1LL;
  }

  return v5;
}

void sub_10014983C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
}

size_t sub_1001498C4(void *a1, void *a2)
{
  id v3 = a1;
  v32[0] = 0LL;
  v32[1] = 0LL;
  unsigned int v31 = v32;
  id v4 = a2;
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
  {
    size_t count = xpc_array_get_count(v3);
    if (!count) {
      goto LABEL_55;
    }
    uint64_t v6 = 0LL;
    size_t v8 = 0LL;
    while (1)
    {
      uint64_t v9 = v6;
      xpc_object_t dictionary = xpc_array_get_dictionary(v3, v8);
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(dictionary);

      string = (char *)xpc_dictionary_get_string(v6, "key");
      sub_10000AC00(&__p, string);
      unsigned __int16 uint64 = xpc_dictionary_get_uint64(v6, "value");
      if (SHIBYTE(v30) < 0) {
        break;
      }
      if (HIBYTE(v30) == 25)
      {
        p_p = (uint64_t *)&__p;
        goto LABEL_37;
      }

      if (HIBYTE(v30) == 26)
      {
        if (__p != (void *)0x736F6C5F6B6E696CLL
          || v29 != 0x6F725F72626E5F73LL
          || v30 != 0x756F635F72657475LL
          || (unsigned __int16)v31 != 29806)
        {
          goto LABEL_50;
        }

        goto LABEL_49;
      }

void sub_100149B60( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_10000D448((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100149BB4(void *a1, void *a2)
{
  id v3 = a1;
  unint64_t v138 = 0LL;
  __int128 v136 = 0u;
  __int128 v137 = 0u;
  __int128 v135 = 0u;
  unint64_t v134 = 0LL;
  __int128 v132 = 0u;
  __int128 v133 = 0u;
  __int128 v131 = 0u;
  id v4 = a2;
  if (xpc_get_type(v3) != (xpc_type_t)&_xpc_type_array)
  {
    uint64_t v5 = sub_1000160F4("com.apple.wpantund.awd", "default");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_100212D7C();
    }
    uint64_t v7 = 1LL;
    goto LABEL_351;
  }

  size_t count = xpc_array_get_count(v3);
  uint64_t v9 = sub_1000160F4("com.apple.wpantund.awd", "default");
  unint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 134217984;
    *(void *)&uint8_t buf[4] = count;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "AWDMetrics : NeighborRSSIHistogram array with size %ld.",  buf,  0xCu);
  }

  if (!count)
  {
    uint64_t v6 = 0LL;
    goto LABEL_348;
  }

  size_t v11 = 0LL;
  uint64_t v6 = 0LL;
  unsigned int v114 = HIDWORD(v138);
  unsigned int v118 = v138;
  int v123 = HIDWORD(v137);
  unsigned int v127 = DWORD2(v137);
  int v103 = v137;
  int v105 = HIDWORD(v136);
  unsigned int v107 = DWORD2(v136);
  unsigned int v109 = DWORD1(v136);
  int v111 = v136;
  int v115 = HIDWORD(v135);
  unsigned int v119 = DWORD2(v135);
  unsigned int v121 = DWORD1(v135);
  int v126 = v135;
  int v124 = HIDWORD(v133);
  unsigned int v128 = DWORD2(v133);
  unint64_t v102 = __PAIR64__(DWORD1(v137), DWORD1(v133));
  int v104 = v133;
  int v106 = HIDWORD(v132);
  unsigned int v108 = DWORD2(v132);
  unsigned int v110 = DWORD1(v132);
  int v112 = v132;
  unsigned int v113 = HIDWORD(v134);
  int v116 = HIDWORD(v131);
  unsigned int v117 = v134;
  unsigned int v120 = DWORD2(v131);
  unsigned int v122 = DWORD1(v131);
  int v125 = v131;
  do
  {
    xpc_object_t dictionary = xpc_array_get_dictionary(v3, v11);
    std::string::size_type v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(dictionary);

    uint64_t v6 = v13;
    string = (char *)xpc_dictionary_get_string(v13, "key");
    sub_10000AC00(buf, string);
    unsigned int uint64 = xpc_dictionary_get_uint64(v13, "value");
    if ((v130 & 0x80000000) == 0)
    {
      if (v130 != 20) {
        goto LABEL_165;
      }
      if (*(void *)buf == 0x6150726574756F52LL
        && *(void *)&buf[8] == 0x6E756F4374656B63LL
        && *(unsigned int *)&buf[16] == 1563450228LL)
      {
        goto LABEL_102;
      }

      if (*(void *)buf == 0x6150726574756F52LL
        && *(void *)&buf[8] == 0x6E756F4374656B63LL
        && *(unsigned int *)&buf[16] == 1563515764LL)
      {
        goto LABEL_103;
      }

      if (*(void *)buf == 0x6150726574756F52LL
        && *(void *)&buf[8] == 0x6E756F4374656B63LL
        && *(unsigned int *)&buf[16] == 1563581300LL)
      {
        goto LABEL_104;
      }

      if (*(void *)buf == 0x6150726574756F52LL
        && *(void *)&buf[8] == 0x6E756F4374656B63LL
        && *(unsigned int *)&buf[16] == 1563646836LL)
      {
        goto LABEL_105;
      }

      if (*(void *)buf == 0x6150726574756F52LL
        && *(void *)&buf[8] == 0x6E756F4374656B63LL
        && *(unsigned int *)&buf[16] == 1563712372LL)
      {
        goto LABEL_106;
      }

void sub_10014A8E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int a18, int a19, int a20, int a21, int a22, int a23, int a24, int a25, int a26, int a27, int a28, int a29, int a30, int a31, int a32, int a33, int a34, int a35, int a36, void *__p, uint64_t a38, int a39, __int16 a40, char a41, char a42, uint64_t a43, int a44, int a45, int a46, int a47, int a48, int a49, int a50,int a51,int a52,int a53,int a54,int a55,int a56,int a57)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10014AB44(void *a1, void *a2)
{
  xpc_object_t xarray = a1;
  id v28 = a2;
  if (xpc_get_type(xarray) == (xpc_type_t)&_xpc_type_array)
  {
    size_t count = xpc_array_get_count(xarray);
    uint64_t v6 = sub_1000160F4("com.apple.wpantund.awd", "default");
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = count;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "AWDMetrics : LQIHistogram array with size %ld.",  (uint8_t *)&buf,  0xCu);
    }

    if (count)
    {
      size_t v8 = 0LL;
      id v4 = 0LL;
      do
      {
        xpc_object_t dictionary = xpc_array_get_dictionary(xarray, v8);
        unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(dictionary);

        id v4 = v10;
        string = (char *)xpc_dictionary_get_string(v10, "key");
        sub_10000AC00(&buf, string);
        unsigned int uint64 = xpc_dictionary_get_uint64(v10, "value");
        std::string::size_type v13 = std::string::find(&buf, 91, 0LL);
        std::string::size_type v14 = std::string::find(&buf, 93, 0LL);
        uint64_t size = buf.__r_.__value_.__s.__size_;
        unsigned __int8 v16 = buf.__r_.__value_.__s.__size_;
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t size = buf.__r_.__value_.__l.__size_;
        }
        BOOL v18 = (std::string *)((char *)p_buf + size);
        if (size >= 13)
        {
          int v19 = p_buf;
          do
          {
            uint64_t v20 = (std::string *)memchr(v19, 82, size - 12);
            if (!v20) {
              break;
            }
            if (v20->__r_.__value_.__r.__words[0] == 0x74656B6361507852LL
              && *(std::string::size_type *)((char *)v20->__r_.__value_.__r.__words + 5) == 0x746E756F4374656BLL)
            {
              goto LABEL_23;
            }

            int v19 = (std::string *)((char *)&v20->__r_.__value_.__l.__data_ + 1);
            uint64_t size = (char *)v18 - (char *)v19;
          }

          while ((char *)v18 - (char *)v19 > 12);
        }

        uint64_t v20 = v18;
LABEL_23:
        if (v20 != v18 && v20 == p_buf && v13 != -1LL && v14 != -1LL)
        {
          if (!v14)
          {
            __break(0x5515u);
LABEL_44:
            __break(0x5512u);
          }

          std::string::basic_string(&__str, &buf, v13 + 1, v14 - 1, (std::allocator<char> *)&v30);
          unsigned __int8 v22 = std::stoi(&__str, 0LL, 10);
          if ((v22 & 0xC0) == 0)
          {
            int v23 = sub_1000BE984(4, uint64);
            if (v22 >= 0x40u) {
              goto LABEL_44;
            }
            *((_DWORD *)v32 + v22) = v23;
          }

          unsigned __int8 v16 = buf.__r_.__value_.__s.__size_;
        }

        if ((v16 & 0x80) != 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        ++v8;
      }

      while (v8 != count);
    }

    else
    {
      id v4 = 0LL;
    }

    for (uint64_t i = 0LL; i != 256; i += 4LL)
      [v28 addPacketLqiHistogram:*(unsigned int *)((char *)v32 + i)];
    uint64_t v5 = 0LL;
  }

  else
  {
    id v3 = sub_1000160F4("com.apple.wpantund.awd", "default");
    id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR)) {
      sub_100212DA8();
    }
    uint64_t v5 = 1LL;
  }

  return v5;
}

void sub_10014AEA4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
}

uint64_t sub_10014AF2C(void *a1, void *a2)
{
  id v3 = a1;
  unint64_t v101 = 0LL;
  __int128 v99 = 0u;
  __int128 v100 = 0u;
  __int128 v97 = 0u;
  __int128 v98 = 0u;
  __int128 v95 = 0u;
  __int128 v96 = 0u;
  unint64_t v94 = 0LL;
  __int128 v92 = 0u;
  __int128 v93 = 0u;
  __int128 v90 = 0u;
  __int128 v91 = 0u;
  __int128 v88 = 0u;
  __int128 v89 = 0u;
  id v4 = a2;
  if (xpc_get_type(v3) != (xpc_type_t)&_xpc_type_array)
  {
    uint64_t v5 = sub_1000160F4("com.apple.wpantund.awd", "default");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_100212DD4();
    }
    uint64_t v7 = 1LL;
    goto LABEL_285;
  }

  size_t count = xpc_array_get_count(v3);
  uint64_t v9 = sub_1000160F4("com.apple.wpantund.awd", "default");
  unint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = count;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "AWDMetrics : MAC-Packet-Size-Histogram array with size %ld.",  (uint8_t *)&buf,  0xCu);
  }

  if (!count)
  {
    uint64_t v6 = 0LL;
    goto LABEL_282;
  }

  size_t v11 = 0LL;
  uint64_t v6 = 0LL;
  unsigned int v65 = HIDWORD(v101);
  unsigned int v67 = v101;
  int v69 = HIDWORD(v100);
  unsigned int v71 = DWORD2(v100);
  unsigned int v73 = DWORD1(v100);
  int v74 = v100;
  int v82 = v99;
  int v84 = HIDWORD(v98);
  unsigned int v64 = HIDWORD(v94);
  unsigned int v66 = v94;
  int v68 = HIDWORD(v93);
  unsigned int v70 = DWORD2(v93);
  unsigned int v72 = DWORD1(v93);
  int v75 = v93;
  int v76 = HIDWORD(v99);
  int v77 = HIDWORD(v92);
  unsigned int v78 = DWORD2(v99);
  unsigned int v79 = DWORD2(v92);
  unsigned int v80 = DWORD1(v99);
  unsigned int v81 = DWORD1(v92);
  int v83 = v92;
  int v85 = HIDWORD(v91);
  do
  {
    xpc_object_t dictionary = xpc_array_get_dictionary(v3, v11);
    std::string::size_type v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(dictionary);

    uint64_t v6 = v13;
    string = (char *)xpc_dictionary_get_string(v13, "key");
    sub_10000AC00(&buf, string);
    unsigned int uint64 = xpc_dictionary_get_uint64(v13, "value");
    if ((v87 & 0x80000000) == 0)
    {
      if (v87 != 16) {
        goto LABEL_108;
      }
      if ((void)buf == 0x74656B6361507854LL && *((void *)&buf + 1) == 0x5D305B746E756F43LL) {
        goto LABEL_66;
      }
      if ((void)buf == 0x74656B6361507854LL && *((void *)&buf + 1) == 0x5D315B746E756F43LL) {
        goto LABEL_67;
      }
      if ((void)buf == 0x74656B6361507854LL && *((void *)&buf + 1) == 0x5D325B746E756F43LL) {
        goto LABEL_68;
      }
      if ((void)buf == 0x74656B6361507854LL && *((void *)&buf + 1) == 0x5D335B746E756F43LL) {
        goto LABEL_69;
      }
      if ((void)buf == 0x74656B6361507854LL && *((void *)&buf + 1) == 0x5D345B746E756F43LL) {
        goto LABEL_70;
      }
LABEL_56:
      if ((void)buf == 0x74656B6361507854LL && *((void *)&buf + 1) == 0x5D355B746E756F43LL) {
        goto LABEL_91;
      }
      if ((void)buf == 0x74656B6361507854LL && *((void *)&buf + 1) == 0x5D365B746E756F43LL) {
        goto LABEL_92;
      }
LABEL_81:
      if ((void)buf == 0x74656B6361507854LL && *((void *)&buf + 1) == 0x5D375B746E756F43LL) {
        goto LABEL_126;
      }
      if ((void)buf == 0x74656B6361507854LL && *((void *)&buf + 1) == 0x5D385B746E756F43LL) {
        goto LABEL_131;
      }
LABEL_103:
      p___int128 buf = (uint64_t *)&buf;
      goto LABEL_104;
    }

    if (*((void *)&buf + 1) != 16LL) {
      goto LABEL_108;
    }
    if (*(void *)buf == 0x74656B6361507854LL && *(void *)(buf + 8) == 0x5D305B746E756F43LL)
    {
LABEL_66:
      LODWORD(v95) = sub_1000BE984(4, uint64);
      goto LABEL_143;
    }

    if (*(void *)buf == 0x74656B6361507854LL && *(void *)(buf + 8) == 0x5D315B746E756F43LL)
    {
LABEL_67:
      DWORD1(v95) = sub_1000BE984(4, uint64);
      goto LABEL_143;
    }

    if (*(void *)buf == 0x74656B6361507854LL && *(void *)(buf + 8) == 0x5D325B746E756F43LL)
    {
LABEL_68:
      DWORD2(v95) = sub_1000BE984(4, uint64);
      goto LABEL_143;
    }

    if (*(void *)buf == 0x74656B6361507854LL && *(void *)(buf + 8) == 0x5D335B746E756F43LL)
    {
LABEL_69:
      HIDWORD(v95) = sub_1000BE984(4, uint64);
      goto LABEL_143;
    }

    if (*(void *)buf == 0x74656B6361507854LL && *(void *)(buf + 8) == 0x5D345B746E756F43LL)
    {
LABEL_70:
      LODWORD(v96) = sub_1000BE984(4, uint64);
      goto LABEL_143;
    }

    if ((v87 & 0x80) == 0)
    {
      if (v87 != 16) {
        goto LABEL_108;
      }
      goto LABEL_56;
    }

    if (*(void *)buf == 0x74656B6361507854LL && *(void *)(buf + 8) == 0x5D355B746E756F43LL)
    {
LABEL_91:
      DWORD1(v96) = sub_1000BE984(4, uint64);
      goto LABEL_143;
    }

    if (*(void *)buf == 0x74656B6361507854LL && *(void *)(buf + 8) == 0x5D365B746E756F43LL)
    {
LABEL_92:
      DWORD2(v96) = sub_1000BE984(4, uint64);
      goto LABEL_143;
    }

    if ((v87 & 0x80) == 0)
    {
      if (v87 != 16) {
        goto LABEL_108;
      }
      goto LABEL_81;
    }

    if (*(void *)buf == 0x74656B6361507854LL && *(void *)(buf + 8) == 0x5D375B746E756F43LL)
    {
LABEL_126:
      HIDWORD(v96) = sub_1000BE984(4, uint64);
      goto LABEL_143;
    }

    p___int128 buf = (uint64_t *)buf;
    if (*(void *)buf == 0x74656B6361507854LL && *(void *)(buf + 8) == 0x5D385B746E756F43LL)
    {
LABEL_131:
      LODWORD(v97) = sub_1000BE984(4, uint64);
      goto LABEL_143;
    }

    if ((v87 & 0x80) == 0)
    {
      if (v87 != 16) {
        goto LABEL_108;
      }
      goto LABEL_103;
    }

LABEL_277:
    if (v87 < 0) {
      operator delete((void *)buf);
    }
    ++v11;
  }

  while (count != v11);
  unint64_t v101 = __PAIR64__(v65, v67);
  HIDWORD(v100) = v69;
  LODWORD(v100) = v74;
  *(void *)((char *)&v100 + 4) = __PAIR64__(v71, v73);
  HIDWORD(v99) = v76;
  LODWORD(v99) = v82;
  *(void *)((char *)&v99 + 4) = __PAIR64__(v78, v80);
  HIDWORD(v98) = v84;
  unint64_t v94 = __PAIR64__(v64, v66);
  HIDWORD(v93) = v68;
  LODWORD(v93) = v75;
  *(void *)((char *)&v93 + 4) = __PAIR64__(v70, v72);
  HIDWORD(v92) = v77;
  LODWORD(v92) = v83;
  *(void *)((char *)&v92 + 4) = __PAIR64__(v79, v81);
  HIDWORD(v91) = v85;
LABEL_282:
  for (uint64_t i = 0LL; i != 104; i += 4LL)
  {
    __int16 v61 = (void *)objc_claimAutoreleasedReturnValue([v4 sCntrsMacTx]);
    [v61 addTxPacketCountHistogram:*(unsigned int *)((char *)&v95 + i)];

    int v62 = (void *)objc_claimAutoreleasedReturnValue([v4 sCntrsMacRx]);
    [v62 addRxPacketCountHistogram:*(unsigned int *)((char *)&v88 + i)];
  }

  uint64_t v7 = 0LL;
LABEL_285:

  return v7;
}

void sub_10014BF58( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int a18, int a19, int a20, int a21, int a22, int a23, int a24, int a25, int a26, int a27, int a28, int a29, int a30, int a31, void *__p, uint64_t a33, int a34, __int16 a35, char a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, int a46, int a47, int a48, int a49, int a50,int a51,int a52,int a53,int a54,int a55,int a56,int a57)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10014C174(void *a1)
{
  id v1 = a1;
  for (uint64_t i = 0LL; i != 60; i += 4LL)
    objc_msgSend(v1, "addChannelSelectionsHistogram:", sub_1000BE984(4, *(_DWORD *)((char *)&xmmword_1002D1510 + i)));

  return 0LL;
}

void sub_10014C1D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10014C1E4(void *a1, void *a2)
{
  int v34 = 0;
  memset(v33, 0, sizeof(v33));
  xpc_object_t xarray = a1;
  id v29 = a2;
  if (xpc_get_type(xarray) == (xpc_type_t)&_xpc_type_array)
  {
    size_t count = xpc_array_get_count(xarray);
    uint64_t v6 = sub_1000160F4("com.apple.wpantund.awd", "default");
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = count;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "AWDMetrics : TpcFrameTxPowerHist array with size %ld.",  (uint8_t *)&buf,  0xCu);
    }

    if (count)
    {
      size_t v8 = 0LL;
      id v4 = 0LL;
      do
      {
        xpc_object_t dictionary = xpc_array_get_dictionary(xarray, v8);
        unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(dictionary);

        id v4 = v10;
        string = (char *)xpc_dictionary_get_string(v10, "key");
        sub_10000AC00(&buf, string);
        unsigned int uint64 = xpc_dictionary_get_uint64(v10, "value");
        std::string::size_type v13 = std::string::find(&buf, 91, 0LL);
        std::string::size_type v14 = std::string::find(&buf, 93, 0LL);
        uint64_t size = buf.__r_.__value_.__s.__size_;
        unsigned __int8 v16 = buf.__r_.__value_.__s.__size_;
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t size = buf.__r_.__value_.__l.__size_;
        }
        BOOL v18 = (std::string *)((char *)p_buf + size);
        if (size >= 25)
        {
          int v19 = p_buf;
          do
          {
            uint64_t v20 = (std::string *)memchr(v19, 84, size - 24);
            if (!v20) {
              break;
            }
            if (v20->__r_.__value_.__r.__words[0] == 0x6D6172463A435054LL
              && v20->__r_.__value_.__l.__size_ == 0x7265776F50785465LL
              && v20->__r_.__value_.__l.__cap_ == 0x6172676F74736948LL
              && v20[1].__r_.__value_.__s.__data_[0] == 109)
            {
              goto LABEL_29;
            }

            int v19 = (std::string *)((char *)&v20->__r_.__value_.__l.__data_ + 1);
            uint64_t size = (char *)v18 - (char *)v19;
          }

          while ((char *)v18 - (char *)v19 > 24);
        }

        uint64_t v20 = v18;
LABEL_29:
        if (v20 != v18 && v20 == p_buf && v13 != -1LL && v14 != -1LL)
        {
          if (!v14) {
            __break(0x5515u);
          }
          std::string::basic_string(&__str, &buf, v13 + 1, v14 - 1, (std::allocator<char> *)&v31);
          unsigned int v24 = std::stoi(&__str, 0LL, 10);
          if (v24 <= 0x10) {
            *((_DWORD *)v33 + v24) = sub_1000BE984(4, uint64);
          }
          unsigned __int8 v16 = buf.__r_.__value_.__s.__size_;
        }

        if ((v16 & 0x80) != 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        ++v8;
      }

      while (v8 != count);
    }

    else
    {
      id v4 = 0LL;
    }

    for (uint64_t i = 0LL; i != 68; i += 4LL)
      [v29 addFrameTxpowerHistogram:*(unsigned int *)((char *)v33 + i)];
    uint64_t v5 = 0LL;
  }

  else
  {
    id v3 = sub_1000160F4("com.apple.wpantund.awd", "default");
    id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR)) {
      sub_100212E00();
    }
    uint64_t v5 = 1LL;
  }

  return v5;
}

void sub_10014C540( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
}

uint64_t sub_10014C5C8(void *a1, void *a2)
{
  int v34 = 0;
  memset(v33, 0, sizeof(v33));
  xpc_object_t xarray = a1;
  id v29 = a2;
  if (xpc_get_type(xarray) == (xpc_type_t)&_xpc_type_array)
  {
    size_t count = xpc_array_get_count(xarray);
    uint64_t v6 = sub_1000160F4("com.apple.wpantund.awd", "default");
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = count;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "AWDMetrics : TpcNeighborTxPowerHist array with size %ld.",  (uint8_t *)&buf,  0xCu);
    }

    if (count)
    {
      size_t v8 = 0LL;
      id v4 = 0LL;
      do
      {
        xpc_object_t dictionary = xpc_array_get_dictionary(xarray, v8);
        unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(dictionary);

        id v4 = v10;
        string = (char *)xpc_dictionary_get_string(v10, "key");
        sub_10000AC00(&buf, string);
        unsigned int uint64 = xpc_dictionary_get_uint64(v10, "value");
        std::string::size_type v13 = std::string::find(&buf, 91, 0LL);
        std::string::size_type v14 = std::string::find(&buf, 93, 0LL);
        uint64_t size = buf.__r_.__value_.__s.__size_;
        unsigned __int8 v16 = buf.__r_.__value_.__s.__size_;
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t size = buf.__r_.__value_.__l.__size_;
        }
        BOOL v18 = (std::string *)((char *)p_buf + size);
        if (size >= 28)
        {
          int v19 = p_buf;
          do
          {
            uint64_t v20 = (std::string *)memchr(v19, 84, size - 27);
            if (!v20) {
              break;
            }
            if (v20->__r_.__value_.__r.__words[0] == 0x6769654E3A435054LL
              && v20->__r_.__value_.__l.__size_ == 0x6F507854726F6268LL
              && v20->__r_.__value_.__l.__cap_ == 0x6F74736948726577LL
              && LODWORD(v20[1].__r_.__value_.__l.__data_) == 1835102823)
            {
              goto LABEL_29;
            }

            int v19 = (std::string *)((char *)&v20->__r_.__value_.__l.__data_ + 1);
            uint64_t size = (char *)v18 - (char *)v19;
          }

          while ((char *)v18 - (char *)v19 > 27);
        }

        uint64_t v20 = v18;
LABEL_29:
        if (v20 != v18 && v20 == p_buf && v13 != -1LL && v14 != -1LL)
        {
          if (!v14) {
            __break(0x5515u);
          }
          std::string::basic_string(&__str, &buf, v13 + 1, v14 - 1, (std::allocator<char> *)&v31);
          unsigned int v24 = std::stoi(&__str, 0LL, 10);
          if (v24 <= 0x10) {
            *((_DWORD *)v33 + v24) = sub_1000BE984(4, uint64);
          }
          unsigned __int8 v16 = buf.__r_.__value_.__s.__size_;
        }

        if ((v16 & 0x80) != 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        ++v8;
      }

      while (v8 != count);
    }

    else
    {
      id v4 = 0LL;
    }

    for (uint64_t i = 0LL; i != 68; i += 4LL)
      [v29 addNbrTxpowerHistogram:*(unsigned int *)((char *)v33 + i)];
    uint64_t v5 = 0LL;
  }

  else
  {
    id v3 = sub_1000160F4("com.apple.wpantund.awd", "default");
    id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR)) {
      sub_100212E2C();
    }
    uint64_t v5 = 1LL;
  }

  return v5;
}

void sub_10014C928( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
}

uint64_t sub_10014C9B0(void *a1, void *a2)
{
  xpc_object_t xarray = a1;
  id v27 = a2;
  if (xpc_get_type(xarray) == (xpc_type_t)&_xpc_type_array)
  {
    size_t count = xpc_array_get_count(xarray);
    uint64_t v6 = sub_1000160F4("com.apple.wpantund.awd", "default");
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = count;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "AWDMetrics : TpcNeighborEnergySavingsFactorHist array with size %ld.",  (uint8_t *)&buf,  0xCu);
    }

    if (count)
    {
      size_t v8 = 0LL;
      id v4 = 0LL;
      do
      {
        xpc_object_t dictionary = xpc_array_get_dictionary(xarray, v8);
        unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(dictionary);

        id v4 = v10;
        string = (char *)xpc_dictionary_get_string(v10, "key");
        sub_10000AC00(&buf, string);
        unsigned int uint64 = xpc_dictionary_get_uint64(v10, "value");
        std::string::size_type v13 = std::string::find(&buf, 91, 0LL);
        std::string::size_type v14 = std::string::find(&buf, 93, 0LL);
        uint64_t size = buf.__r_.__value_.__s.__size_;
        unsigned __int8 v16 = buf.__r_.__value_.__s.__size_;
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t size = buf.__r_.__value_.__l.__size_;
        }
        BOOL v18 = (std::string *)((char *)p_buf + size);
        if (size >= 40)
        {
          int v19 = p_buf;
          do
          {
            uint64_t v20 = (std::string *)memchr(v19, 84, size - 39);
            if (!v20) {
              break;
            }
            uint64_t v21 = v20;
            if (!memcmp(v20, "TPC:NeighborEnergySavingsFactorHistogram", 0x28uLL)) {
              goto LABEL_20;
            }
            int v19 = (std::string *)((char *)&v21->__r_.__value_.__l.__data_ + 1);
            uint64_t size = (char *)v18 - ((char *)&v21->__r_.__value_.__l.__data_ + 1);
          }

          while (size > 39);
        }

        uint64_t v21 = v18;
LABEL_20:
        if (v21 != v18 && v21 == p_buf && v13 != -1LL && v14 != -1LL)
        {
          if (!v14) {
            __break(0x5515u);
          }
          std::string::basic_string(&__str, &buf, v13 + 1, v14 - 1, (std::allocator<char> *)&v29);
          unsigned int v22 = std::stoi(&__str, 0LL, 10);
          if (v22 <= 0x12) {
            *((_DWORD *)v31 + v22) = sub_1000BE984(4, uint64);
          }
          unsigned __int8 v16 = buf.__r_.__value_.__s.__size_;
        }

        if ((v16 & 0x80) != 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        ++v8;
      }

      while (v8 != count);
    }

    else
    {
      id v4 = 0LL;
    }

    for (uint64_t i = 0LL; i != 76; i += 4LL)
      [v27 addNbrBatteryExtensionFactorHistogram:*(unsigned int *)((char *)v31 + i)];
    uint64_t v5 = 0LL;
  }

  else
  {
    id v3 = sub_1000160F4("com.apple.wpantund.awd", "default");
    id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR)) {
      sub_100212E58();
    }
    uint64_t v5 = 1LL;
  }

  return v5;
}

void sub_10014CCD4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
}

size_t sub_10014CD5C(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
  {
    size_t count = xpc_array_get_count(v3);
    size_t v8 = sub_1000160F4("com.apple.wpantund.awd", "default");
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string __p = 134217984;
      *(void *)&__p[4] = count;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "AWDMetrics : Radio Counters array with size %ld.",  __p,  0xCu);
    }

    if (!count) {
      goto LABEL_81;
    }
    size_t v10 = 0LL;
    uint64_t v6 = 0LL;
    while (1)
    {
      xpc_object_t dictionary = xpc_array_get_dictionary(v3, v10);
      int v12 = (void *)objc_claimAutoreleasedReturnValue(dictionary);

      uint64_t v6 = v12;
      string = (char *)xpc_dictionary_get_string(v12, "key");
      sub_10000AC00(__p, string);
      unsigned int uint64 = xpc_dictionary_get_uint64(v12, "value");
      if ((v36 & 0x80000000) == 0)
      {
        unint64_t v15 = (uint64_t *)__p;
        switch(v36)
        {
          case 18:
            if (*(void *)__p != 0x6465766965636572LL
              || *(void *)&__p[8] != 0x6C626D616572705FLL
              || *(unsigned __int16 *)&__p[16] != 29541)
            {
              goto LABEL_76;
            }

            goto LABEL_75;
          case 19:
            if (*(void *)__p != 0x6C6961665F616363LL
              || *(void *)&__p[8] != 0x6D657474615F6465LL
              || *(void *)&__p[11] != 0x7374706D65747461LL)
            {
              goto LABEL_76;
            }

            goto LABEL_65;
          case 21:
            if (*(void *)__p != 0x65725F6F69646172LL
              || *(void *)&__p[8] != 0x665F646576696563LL
              || *(void *)&__p[13] != 0x73656D6172665F64LL)
            {
              goto LABEL_76;
            }

            goto LABEL_74;
          case 22:
            goto LABEL_48;
          default:
            goto LABEL_78;
        }

        goto LABEL_78;
      }

      uint64_t v18 = *(void *)&__p[8];
      if (*(void *)&__p[8] == 19LL)
      {
        BOOL v19 = **(void **)__p == 0x6C6961665F616363LL && *(void *)(*(void *)__p + 8LL) == 0x6D657474615F6465LL;
        if (v19 && *(void *)(*(void *)__p + 11LL) == 0x7374706D65747461LL)
        {
LABEL_65:
          objc_msgSend(v4, "setCcaFailedAttempts:", sub_1000BE984(4, uint64));
          goto LABEL_76;
        }
      }

      if (*(void *)&__p[8] == 21LL)
      {
        if (**(void **)__p == 0x65725F6F69646172LL
          && *(void *)(*(void *)__p + 8LL) == 0x665F646576696563LL
          && *(void *)(*(void *)__p + 13LL) == 0x73656D6172665F64LL)
        {
LABEL_74:
          objc_msgSend(v4, "setRadioReceivedFrames:", sub_1000BE984(4, uint64));
          goto LABEL_76;
        }

        uint64_t v18 = *(void *)&__p[8];
      }

      if (v18 != 18) {
        goto LABEL_46;
      }
      if (**(void **)__p != 0x6465766965636572LL
        || *(void *)(*(void *)__p + 8LL) != 0x6C626D616572705FLL
        || *(_WORD *)(*(void *)__p + 16LL) != 29541)
      {
        uint64_t v18 = *(void *)&__p[8];
LABEL_46:
        if (v18 == 22)
        {
          unint64_t v15 = *(uint64_t **)__p;
LABEL_48:
          uint64_t v25 = *v15;
          uint64_t v26 = v15[1];
          uint64_t v27 = *(uint64_t *)((char *)v15 + 14);
          if (v25 == 0x6465766965636572LL && v26 == 0x5F796772656E655FLL && v27 == 0x73746E6576655F79LL) {
            objc_msgSend(v4, "setReceivedEnergyEvents:", sub_1000BE984(4, uint64));
          }
        }

        goto LABEL_76;
      }

void sub_10014D1B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

size_t sub_10014D210(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
  {
    size_t count = xpc_array_get_count(v3);
    size_t v8 = sub_1000160F4("com.apple.wpantund.awd", "default");
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string __p = 134217984;
      *(void *)&__p[4] = count;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "AWDMetrics : Radio Stats array with size %ld.",  __p,  0xCu);
    }

    if (!count) {
      goto LABEL_144;
    }
    size_t v10 = 0LL;
    uint64_t v6 = 0LL;
    while (1)
    {
      xpc_object_t dictionary = xpc_array_get_dictionary(v3, v10);
      int v12 = (void *)objc_claimAutoreleasedReturnValue(dictionary);

      uint64_t v6 = v12;
      string = (char *)xpc_dictionary_get_string(v12, "key");
      sub_10000AC00(__p, string);
      unsigned int uint64 = xpc_dictionary_get_uint64(v12, "value");
      uint64_t v18 = *(void *)&__p[8];
      if (*(void *)&__p[8] == 9LL)
      {
        if (**(void **)__p == 0x61566E694D747452LL && *(_BYTE *)(*(void *)__p + 8LL) == 108) {
          goto LABEL_71;
        }
        if (**(void **)__p == 0x615678614D747452LL && *(_BYTE *)(*(void *)__p + 8LL) == 108) {
          goto LABEL_72;
        }
        if (**(void **)__p == 0x6156677641747452LL && *(_BYTE *)(*(void *)__p + 8LL) == 108) {
          goto LABEL_73;
        }
        if ((v42 & 0x80) == 0)
        {
          if (v42 != 9) {
            goto LABEL_125;
          }
LABEL_41:
          if (*(void *)__p != 0x7265703039747452LL || __p[8] != 99) {
            goto LABEL_125;
          }
LABEL_99:
          objc_msgSend(v4, "setRtt90perc:", sub_1000BE984(4, uint64));
          goto LABEL_139;
        }

        if (**(void **)__p == 0x7265703039747452LL && *(_BYTE *)(*(void *)__p + 8LL) == 99) {
          goto LABEL_99;
        }
        uint64_t v18 = *(void *)&__p[8];
      }

      if (v18 != 16) {
        goto LABEL_105;
      }
      if (**(void **)__p == 0x746E497972746552LL && *(void *)(*(void *)__p + 8LL) == 0x6E694D6C61767265LL)
      {
LABEL_97:
        objc_msgSend(v4, "setRetryIntervalMin:", sub_1000BE984(4, uint64));
        goto LABEL_139;
      }

      uint64_t v18 = *(void *)&__p[8];
      if (*(void *)&__p[8] != 16LL) {
        goto LABEL_105;
      }
      if (**(void **)__p == 0x746E497972746552LL && *(void *)(*(void *)__p + 8LL) == 0x78614D6C61767265LL)
      {
LABEL_98:
        objc_msgSend(v4, "setRetryIntervalMax:", sub_1000BE984(4, uint64));
        goto LABEL_139;
      }

      if ((v42 & 0x80) != 0)
      {
        if (**(void **)__p == 0x746E497972746552LL && *(void *)(*(void *)__p + 8LL) == 0x6776416C61767265LL)
        {
LABEL_138:
          objc_msgSend(v4, "setRetryIntervalAvg:", sub_1000BE984(4, uint64));
          goto LABEL_139;
        }

        uint64_t v18 = *(void *)&__p[8];
LABEL_105:
        if (v18 == 19)
        {
          if (**(void **)__p == 0x746E497972746552LL
            && *(void *)(*(void *)__p + 8LL) == 0x5030396C61767265LL
            && *(void *)(*(void *)__p + 11LL) == 0x6372655030396C61LL)
          {
            goto LABEL_132;
          }

          uint64_t v18 = *(void *)&__p[8];
        }

        if (v18 != 10) {
          goto LABEL_125;
        }
        if (**(void **)__p == 0x4D79616C65447854LL && *(_WORD *)(*(void *)__p + 8LL) == 28265)
        {
LABEL_131:
          objc_msgSend(v4, "setTxDelayMin:", sub_1000BE984(4, uint64));
          goto LABEL_139;
        }

        if (*(void *)&__p[8] != 10LL) {
          goto LABEL_125;
        }
        uint64_t v26 = *(_BYTE **)__p;
        goto LABEL_121;
      }

      if (v42 != 10)
      {
        if (v42 != 16) {
          goto LABEL_125;
        }
        goto LABEL_92;
      }

void sub_10014D9CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

size_t sub_10014DA24(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
  {
    size_t count = xpc_array_get_count(v3);
    size_t v8 = sub_1000160F4("com.apple.wpantund.awd", "default");
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__s1 = 134217984;
      *(void *)&__s1[4] = count;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "AWDMetrics : OT Radio Counters array with size %ld.",  __s1,  0xCu);
    }

    if (!count) {
      goto LABEL_246;
    }
    size_t v10 = 0LL;
    uint64_t v6 = 0LL;
    while (1)
    {
      xpc_object_t dictionary = xpc_array_get_dictionary(v3, v10);
      int v12 = (void *)objc_claimAutoreleasedReturnValue(dictionary);

      uint64_t v6 = v12;
      string = (char *)xpc_dictionary_get_string(v12, "key");
      sub_10000AC00(__s1, string);
      unsigned int uint64 = xpc_dictionary_get_uint64(v12, "value");
      if ((__s1[23] & 0x80000000) == 0)
      {
        int v15 = __s1[23];
        switch(__s1[23])
        {
          case 0x12:
            if (*(void *)__s1 != 0x74696D736E617274LL
              || *(void *)&__s1[8] != 0x6D6172665F646574LL
              || *(unsigned __int16 *)&__s1[16] != 29541)
            {
              break;
            }

            goto LABEL_98;
          case 0x13:
            goto LABEL_148;
          case 0x17:
            if (*(void *)__s1 == 0x726F7272655F7874LL
              && *(void *)&__s1[8] == 0x6F6C73656D69745FLL
              && *(void *)&__s1[15] == 0x6465646E655F746FLL)
            {
              goto LABEL_107;
            }

            goto LABEL_147;
          case 0x18:
            if (*(void *)__s1 == 0x726F7272655F7874LL
              && *(void *)&__s1[8] == 0x6F6C73656D69745FLL
              && *(void *)&__s1[16] == 0x6465696E65645F74LL)
            {
              goto LABEL_116;
            }

            goto LABEL_147;
          case 0x1F:
            goto LABEL_137;
          case 0x20:
            goto LABEL_124;
          case 0x24:
            goto LABEL_162;
          case 0x25:
            if (!memcmp(__s1, "tx_error_busy_channel_cca_not_started", 0x25uLL)) {
              goto LABEL_121;
            }
            if (v15 <= 31)
            {
              if (v15 == 19) {
                goto LABEL_148;
              }
              goto LABEL_136;
            }

            if (v15 == 36)
            {
LABEL_162:
              if (!memcmp(__s1, "tx_error_tx_aborted_csma_cfg_backoff", 0x24uLL)) {
                goto LABEL_191;
              }
              if (v15 != 32) {
                break;
              }
LABEL_164:
              if (*(void *)__s1 != 0x726F7272655F7874LL
                || *(void *)&__s1[8] != 0x726F62615F78745FLL
                || *(void *)&__s1[16] != 0x616D73635F646574LL
                || *(void *)&__s1[24] != 0x66666F6B6361625FLL)
              {
                char v36 = (uint64_t *)__s1;
                goto LABEL_175;
              }

              goto LABEL_192;
            }

            if (v15 != 32) {
              break;
            }
LABEL_124:
            if (*(void *)__s1 == 0x726F7272655F7874LL
              && *(void *)&__s1[8] == 0x6C656E6E6168635FLL
              && *(void *)&__s1[16] == 0x5F7373656363615FLL
              && *(void *)&__s1[24] == 0x797375625F616363LL)
            {
              goto LABEL_187;
            }

            if (v15 != 19)
            {
              if (v15 == 32) {
                goto LABEL_164;
              }
LABEL_136:
              if (v15 != 31) {
                break;
              }
LABEL_137:
              if (*(void *)__s1 == 0x726F7272655F7874LL
                && *(void *)&__s1[8] == 0x6C656E6E6168635FLL
                && *(void *)&__s1[16] == 0x5F7373656363615FLL
                && *(void *)&__s1[23] == 0x6572756C6961665FLL)
              {
                goto LABEL_188;
              }

LABEL_148:
            if (*(void *)__s1 == 0x726F7272655F7874LL
              && *(void *)&__s1[8] == 0x726F62615F78745FLL
              && *(void *)&__s1[11] == 0x646574726F62615FLL)
            {
              goto LABEL_161;
            }

            break;
          default:
            break;
        }

void sub_10014E7BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10014E814(void *a1, void *a2)
{
  id v3 = a1;
  int v147 = 0;
  __int128 v145 = 0u;
  __int128 v146 = 0u;
  __int128 v143 = 0u;
  __int128 v144 = 0u;
  int v142 = 0;
  __int128 v140 = 0u;
  __int128 v141 = 0u;
  __int128 v138 = 0u;
  __int128 v139 = 0u;
  id v4 = a2;
  if (xpc_get_type(v3) != (xpc_type_t)&_xpc_type_array)
  {
    uint64_t v5 = sub_1000160F4("com.apple.wpantund.awd", "default");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_100212F08();
    }
    uint64_t v7 = 1LL;
    goto LABEL_365;
  }

  size_t count = xpc_array_get_count(v3);
  uint64_t v9 = sub_1000160F4("com.apple.wpantund.awd", "default");
  size_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 134217984;
    *(void *)&uint8_t buf[4] = count;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "AWDMetrics : MACErrorHistogram array with size %ld.",  buf,  0xCu);
  }

  if (!count)
  {
    uint64_t v6 = 0LL;
    goto LABEL_360;
  }

  size_t v11 = 0LL;
  uint64_t v6 = 0LL;
  int v113 = v147;
  unsigned int v117 = HIDWORD(v146);
  unsigned int v121 = DWORD2(v146);
  unsigned int v123 = DWORD1(v146);
  unsigned int v127 = v146;
  unsigned int v133 = HIDWORD(v145);
  unsigned int v135 = DWORD2(v145);
  unsigned int v107 = v145;
  unsigned int v109 = HIDWORD(v144);
  unsigned int v110 = DWORD2(v144);
  unsigned int v114 = DWORD1(v144);
  unsigned int v118 = v144;
  unsigned int v124 = HIDWORD(v143);
  unsigned int v128 = DWORD2(v143);
  int v130 = DWORD1(v143);
  unsigned int v122 = DWORD1(v141);
  unsigned int v126 = v141;
  unsigned int v132 = HIDWORD(v140);
  unsigned int v134 = DWORD2(v140);
  unint64_t v105 = __PAIR64__(DWORD1(v145), DWORD1(v140));
  unsigned int v106 = v140;
  unsigned int v108 = HIDWORD(v139);
  unsigned int v111 = DWORD2(v139);
  int v112 = v142;
  unsigned int v115 = DWORD1(v139);
  unsigned int v116 = HIDWORD(v141);
  unsigned int v119 = v139;
  unsigned int v120 = DWORD2(v141);
  unsigned int v125 = HIDWORD(v138);
  unsigned int v129 = DWORD2(v138);
  int v131 = DWORD1(v138);
  do
  {
    xpc_object_t dictionary = xpc_array_get_dictionary(v3, v11);
    std::string::size_type v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(dictionary);

    uint64_t v6 = v13;
    string = (char *)xpc_dictionary_get_string(v13, "key");
    sub_10000AC00(buf, string);
    unsigned int uint64 = xpc_dictionary_get_uint64(v13, "value");
    if ((v137 & 0x80000000) == 0)
    {
      if (v137 != 19) {
        goto LABEL_165;
      }
      if (*(void *)buf == 0x6F4E746365726944LL
        && *(void *)&buf[8] == 0x726F7272456B6341LL
        && *(void *)&buf[11] == 0x5D305B726F727245LL)
      {
        goto LABEL_102;
      }

      if (*(void *)buf == 0x6F4E746365726944LL
        && *(void *)&buf[8] == 0x726F7272456B6341LL
        && *(void *)&buf[11] == 0x5D315B726F727245LL)
      {
        goto LABEL_103;
      }

      if (*(void *)buf == 0x6F4E746365726944LL
        && *(void *)&buf[8] == 0x726F7272456B6341LL
        && *(void *)&buf[11] == 0x5D325B726F727245LL)
      {
        goto LABEL_104;
      }

      if (*(void *)buf == 0x6F4E746365726944LL
        && *(void *)&buf[8] == 0x726F7272456B6341LL
        && *(void *)&buf[11] == 0x5D335B726F727245LL)
      {
        goto LABEL_105;
      }

      if (*(void *)buf == 0x6F4E746365726944LL
        && *(void *)&buf[8] == 0x726F7272456B6341LL
        && *(void *)&buf[11] == 0x5D345B726F727245LL)
      {
        goto LABEL_106;
      }

LABEL_331:
    uint64_t v95 = *(void *)v92;
    uint64_t v96 = *((void *)v92 + 1);
    int v97 = v92[16];
    if (v95 == 0x6343746365726944LL && v96 == 0x395B726F72724561LL && v97 == 93)
    {
      LODWORD(v105) = sub_1000BE984(4, uint64);
      goto LABEL_355;
    }

LABEL_355:
    if (v137 < 0) {
      operator delete(*(void **)buf);
    }
    ++v11;
  }

  while (count != v11);
  int v147 = v113;
  *((void *)&v146 + 1) = __PAIR64__(v117, v121);
  *(void *)&__int128 v146 = __PAIR64__(v123, v127);
  *((void *)&v145 + 1) = __PAIR64__(v133, v135);
  *(void *)&__int128 v145 = __PAIR64__(HIDWORD(v105), v107);
  *((void *)&v144 + 1) = __PAIR64__(v109, v110);
  *(void *)&__int128 v144 = __PAIR64__(v114, v118);
  DWORD1(v143) = v130;
  *((void *)&v143 + 1) = __PAIR64__(v124, v128);
  int v142 = v112;
  *((void *)&v141 + 1) = __PAIR64__(v116, v120);
  *(void *)&__int128 v141 = __PAIR64__(v122, v126);
  *((void *)&v140 + 1) = __PAIR64__(v132, v134);
  *(void *)&__int128 v140 = __PAIR64__(v105, v106);
  *((void *)&v139 + 1) = __PAIR64__(v108, v111);
  *(void *)&__int128 v139 = __PAIR64__(v115, v119);
  DWORD1(v138) = v131;
  *((void *)&v138 + 1) = __PAIR64__(v125, v129);
LABEL_360:
  for (uint64_t i = 0LL; i != 68; i += 4LL)
  {
    unint64_t v101 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "sCntrsMacTx", v105));
    [v101 addTxDirectNoackHistogram:*(unsigned int *)((char *)&v143 + i)];
  }

  for (uint64_t j = 0LL; j != 68; j += 4LL)
  {
    int v103 = (void *)objc_claimAutoreleasedReturnValue([v4 sCntrsMacTx]);
    [v103 addTxDirectChannelaccessfailureHistogram:*(unsigned int *)((char *)&v138 + j)];
  }

  uint64_t v7 = 0LL;
LABEL_365:

  return v7;
}

void sub_10014F740(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10014FA10(void *a1, void *a2)
{
  id v3 = a1;
  __int128 v90 = 0u;
  __int128 v91 = 0u;
  __int128 v88 = 0u;
  __int128 v89 = 0u;
  __int128 v86 = 0u;
  __int128 v87 = 0u;
  id v4 = a2;
  if (xpc_get_type(v3) != (xpc_type_t)&_xpc_type_array)
  {
    uint64_t v5 = sub_1000160F4("com.apple.wpantund.awd", "default");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_100212F34();
    }
    uint64_t v7 = 1LL;
    goto LABEL_206;
  }

  size_t count = xpc_array_get_count(v3);
  uint64_t v9 = sub_1000160F4("com.apple.wpantund.awd", "default");
  size_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = count;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "AWDMetrics : MACRetryHistogram array with size %ld.",  (uint8_t *)&buf,  0xCu);
  }

  if (!count)
  {
    uint64_t v6 = 0LL;
    goto LABEL_201;
  }

  size_t v11 = 0LL;
  uint64_t v6 = 0LL;
  int v66 = HIDWORD(v91);
  unsigned int v69 = DWORD2(v91);
  unsigned int v72 = DWORD1(v91);
  int v80 = HIDWORD(v90);
  unsigned int v83 = DWORD2(v90);
  unint64_t v61 = __PAIR64__(v90, DWORD1(v90));
  int v62 = HIDWORD(v89);
  unsigned int v63 = DWORD2(v89);
  int v74 = HIDWORD(v88);
  int v75 = v91;
  unsigned int v77 = DWORD2(v88);
  unsigned int v78 = DWORD1(v88);
  int v64 = HIDWORD(v87);
  unsigned int v65 = DWORD1(v89);
  unsigned int v67 = DWORD2(v87);
  int v68 = v89;
  unsigned int v70 = DWORD1(v87);
  int v71 = v87;
  int v73 = HIDWORD(v86);
  unsigned int v76 = DWORD2(v86);
  unsigned int v79 = DWORD1(v86);
  int v81 = v86;
  int v82 = v88;
  do
  {
    xpc_object_t dictionary = xpc_array_get_dictionary(v3, v11);
    std::string::size_type v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(dictionary);

    uint64_t v6 = v13;
    string = (char *)xpc_dictionary_get_string(v13, "key");
    sub_10000AC00(&buf, string);
    unsigned int uint64 = xpc_dictionary_get_uint64(v13, "value");
    if ((v85 & 0x80000000) == 0)
    {
      if (v85 != 14) {
        goto LABEL_108;
      }
LABEL_56:
LABEL_81:
LABEL_103:
      p___int128 buf = (uint64_t *)&buf;
      goto LABEL_104;
    }

    if (*((void *)&buf + 1) != 14LL) {
      goto LABEL_108;
    }
    if (*(void *)buf == 0x6552746365726944LL && *(void *)(buf + 6) == 0x5D305B7972746552LL)
    {
LABEL_66:
      int v82 = sub_1000BE984(4, uint64);
      goto LABEL_120;
    }

    if (*(void *)buf == 0x6552746365726944LL && *(void *)(buf + 6) == 0x5D315B7972746552LL)
    {
LABEL_67:
      unsigned int v78 = sub_1000BE984(4, uint64);
      goto LABEL_120;
    }

    if (*(void *)buf == 0x6552746365726944LL && *(void *)(buf + 6) == 0x5D325B7972746552LL)
    {
LABEL_68:
      unsigned int v77 = sub_1000BE984(4, uint64);
      goto LABEL_120;
    }

    if (*(void *)buf == 0x6552746365726944LL && *(void *)(buf + 6) == 0x5D335B7972746552LL)
    {
LABEL_69:
      int v74 = sub_1000BE984(4, uint64);
      goto LABEL_120;
    }

    if (*(void *)buf == 0x6552746365726944LL && *(void *)(buf + 6) == 0x5D345B7972746552LL)
    {
LABEL_70:
      int v68 = sub_1000BE984(4, uint64);
      goto LABEL_120;
    }

    if ((v85 & 0x80) == 0)
    {
      if (v85 != 14) {
        goto LABEL_108;
      }
      goto LABEL_56;
    }

    if (*(void *)buf == 0x6552746365726944LL && *(void *)(buf + 6) == 0x5D355B7972746552LL)
    {
LABEL_91:
      unsigned int v65 = sub_1000BE984(4, uint64);
      goto LABEL_120;
    }

    if (*(void *)buf == 0x6552746365726944LL && *(void *)(buf + 6) == 0x5D365B7972746552LL)
    {
LABEL_92:
      unsigned int v63 = sub_1000BE984(4, uint64);
      goto LABEL_120;
    }

    if ((v85 & 0x80) == 0)
    {
      if (v85 != 14) {
        goto LABEL_108;
      }
      goto LABEL_81;
    }

    if (*(void *)buf == 0x6552746365726944LL && *(void *)(buf + 6) == 0x5D375B7972746552LL)
    {
LABEL_197:
      int v62 = sub_1000BE984(4, uint64);
      goto LABEL_120;
    }

    p___int128 buf = (uint64_t *)buf;
    if (*(void *)buf == 0x6552746365726944LL && *(void *)(buf + 6) == 0x5D385B7972746552LL)
    {
LABEL_198:
      HIDWORD(v61) = sub_1000BE984(4, uint64);
      goto LABEL_120;
    }

    if ((v85 & 0x80) == 0)
    {
      if (v85 != 14) {
        goto LABEL_108;
      }
      goto LABEL_103;
    }

LABEL_190:
              int v71 = sub_1000BE984(4, uint64);
              goto LABEL_193;
            }

LABEL_189:
            int v73 = sub_1000BE984(4, uint64);
            goto LABEL_193;
          }

LABEL_188:
          unsigned int v76 = sub_1000BE984(4, uint64);
          goto LABEL_193;
        }

LABEL_187:
        unsigned int v79 = sub_1000BE984(4, uint64);
        goto LABEL_193;
      }

void sub_100150558( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int a18, int a19, int a20, int a21, int a22, int a23, int a24, int a25, int a26, int a27, int a28, int a29, int a30, int a31, int a32, void *__p, uint64_t a34, int a35, __int16 a36, char a37, char a38, uint64_t a39, int a40, int a41, int a42, int a43, int a44, int a45, int a46, int a47, int a48, int a49, int a50,int a51,int a52,int a53,int a54,int a55,int a56,int a57,int a58,int a59,int a60,int a61,int a62,int a63)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100150798(void *a1, void *a2)
{
  id v3 = a1;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v38 = 0u;
  id v4 = a2;
  if (xpc_get_type(v3) != (xpc_type_t)&_xpc_type_array)
  {
    uint64_t v5 = sub_1000160F4("com.apple.wpantund.awd", "default");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_100212F60();
    }
    uint64_t v7 = 1LL;
    goto LABEL_71;
  }

  size_t count = xpc_array_get_count(v3);
  uint64_t v9 = sub_1000160F4("com.apple.wpantund.awd", "default");
  size_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = count;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "AWDMetrics : CCA Energy Detect Histogram array with size %ld.",  (uint8_t *)&buf,  0xCu);
  }

  if (!count)
  {
    uint64_t v6 = 0LL;
    goto LABEL_68;
  }

  size_t v11 = 0LL;
  uint64_t v6 = 0LL;
  unint64_t v26 = __PAIR64__(v40, DWORD1(v40));
  int v27 = HIDWORD(v39);
  unsigned int v28 = DWORD2(v39);
  unsigned int v29 = DWORD1(v39);
  int v30 = v39;
  unsigned int v31 = HIDWORD(v38);
  unsigned int v32 = DWORD2(v38);
  uint64_t v33 = v38;
  unsigned int v34 = HIDWORD(v40);
  unsigned int v35 = DWORD2(v40);
  do
  {
    xpc_object_t dictionary = xpc_array_get_dictionary(v3, v11);
    std::string::size_type v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(dictionary);

    uint64_t v6 = v13;
    string = (char *)xpc_dictionary_get_string(v13, "key");
    sub_10000AC00(&buf, string);
    unsigned int uint64 = xpc_dictionary_get_uint64(v13, "value");
    int v16 = v37;
    if ((char)v37 < 0)
    {
      uint64_t v17 = *((void *)&buf + 1);
      if (*((void *)&buf + 1) == 34LL && !memcmp((const void *)buf, "CCAEnergyDetect[0x0](<   -90dBm)", 0x22uLL))
      {
LABEL_35:
        LODWORD(v33) = sub_1000BE984(4, uint64);
        goto LABEL_63;
      }

      if (v17 == 35)
      {
        uint64_t v18 = (const void *)buf;
        if (!memcmp((const void *)buf, "CCAEnergyDetect[0x1] [-90dBm-85dBm)", 0x23uLL))
        {
LABEL_34:
          HIDWORD(v33) = sub_1000BE984(4, uint64);
          goto LABEL_63;
        }

        if (*((void *)&buf + 1) == 35LL)
        {
          if (!memcmp(v18, "CCAEnergyDetect[0x2] [-85dBm-80dBm)", 0x23uLL)) {
            goto LABEL_36;
          }
          if (*((void *)&buf + 1) == 35LL)
          {
            BOOL v19 = (const void *)buf;
            if ((v16 & 0x80) != 0)
            {
              if (!memcmp(v19, "CCAEnergyDetect[0x4] [-75dBm-70dBm)", 0x23uLL))
              {
LABEL_46:
                int v30 = sub_1000BE984(4, uint64);
                goto LABEL_63;
              }

              if (*((void *)&buf + 1) == 35LL)
              {
                BOOL v20 = (const void *)buf;
                if ((v16 & 0x80) != 0)
                {
                  if (!memcmp(v20, "CCAEnergyDetect[0x6] [-65dBm-60dBm)", 0x23uLL))
                  {
LABEL_55:
                    unsigned int v28 = sub_1000BE984(4, uint64);
                    goto LABEL_63;
                  }

                  if (*((void *)&buf + 1) == 35LL)
                  {
                    uint64_t v21 = (const void *)buf;
                    if ((v16 & 0x80) != 0)
                    {
                      if (!memcmp(v21, "CCAEnergyDetect[0x8] [-55dBm-50dBm)", 0x23uLL))
                      {
LABEL_62:
                        HIDWORD(v26) = sub_1000BE984(4, uint64);
                        goto LABEL_63;
                      }

                      if (*((void *)&buf + 1) == 35LL)
                      {
                        p___int128 buf = (__int128 *)buf;
                        goto LABEL_60;
                      }
                    }

                    else if (v16 == 35)
                    {
                      goto LABEL_53;
                    }
                  }
                }

                else if (v16 == 35)
                {
                  goto LABEL_43;
                }
              }
            }

            else if (v16 == 35)
            {
              goto LABEL_26;
            }
          }
        }
      }
    }

    else if (v37 == 34)
    {
      if (!memcmp(&buf, "CCAEnergyDetect[0x0](<   -90dBm)", 0x22uLL)) {
        goto LABEL_35;
      }
    }

    else if (v37 == 35)
    {
      if (!memcmp(&buf, "CCAEnergyDetect[0x1] [-90dBm-85dBm)", 0x23uLL)) {
        goto LABEL_34;
      }
      if (!memcmp(&buf, "CCAEnergyDetect[0x2] [-85dBm-80dBm)", 0x23uLL))
      {
LABEL_36:
        unsigned int v32 = sub_1000BE984(4, uint64);
        goto LABEL_63;
      }

      if (!memcmp(&buf, "CCAEnergyDetect[0x3] [-80dBm-75dBm)", 0x23uLL))
      {
LABEL_37:
        unsigned int v31 = sub_1000BE984(4, uint64);
        goto LABEL_63;
      }

void sub_100150DF8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int a18, int a19, int a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, int a28, int a29, int a30, int a31, int a32, int a33, int a34, int a35, int a36, int a37, int a38, int a39)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100150F44(void *a1, void *a2)
{
  uint64_t v34 = 0LL;
  memset(v33, 0, sizeof(v33));
  xpc_object_t xarray = a1;
  id v29 = a2;
  if (xpc_get_type(xarray) == (xpc_type_t)&_xpc_type_array)
  {
    size_t count = xpc_array_get_count(xarray);
    uint64_t v7 = sub_1000160F4("com.apple.wpantund.awd", "default");
    size_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = count;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "AWDMetrics : CSMA Backoff Histogram array with size %ld.",  (uint8_t *)&buf,  0xCu);
    }

    if (count)
    {
      size_t v9 = 0LL;
      id v4 = 0LL;
      do
      {
        xpc_object_t dictionary = xpc_array_get_dictionary(xarray, v9);
        size_t v11 = (void *)objc_claimAutoreleasedReturnValue(dictionary);

        id v4 = v11;
        string = (char *)xpc_dictionary_get_string(v11, "key");
        sub_10000AC00(&buf, string);
        unsigned int uint64 = xpc_dictionary_get_uint64(v11, "value");
        uint64_t size = buf.__r_.__value_.__s.__size_;
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t size = buf.__r_.__value_.__l.__size_;
        }
        int v16 = (std::string *)((char *)p_buf + size);
        if (size >= 11)
        {
          uint64_t v17 = p_buf;
          do
          {
            uint64_t v18 = memchr(v17, 67, size - 10);
            if (!v18) {
              break;
            }
            BOOL v19 = (std::string *)v18;
            uint64_t v17 = (std::string *)((char *)v18 + 1);
            uint64_t size = (char *)v16 - ((char *)&v19->__r_.__value_.__l.__data_ + 1);
          }

          while (size > 10);
        }

        BOOL v19 = v16;
LABEL_23:
        std::string::size_type v21 = std::string::find(&buf, 91, 0LL);
        std::string::size_type v22 = std::string::find(&buf, 93, 0LL);
        if (v19 != v16 && v19 == p_buf && v21 != -1LL && v22 != -1LL)
        {
          if (!v22)
          {
            __break(0x5515u);
LABEL_43:
            __break(0x5512u);
          }

          std::string::basic_string(&__str, &buf, v21 + 1, v22 - 1, (std::allocator<char> *)&v31);
          unsigned __int8 v23 = std::stoi(&__str, 0LL, 10);
          if ((v23 & 0xFEu) <= 9)
          {
            int v24 = sub_1000BE984(4, uint64);
            if (v23 >= 0xAu) {
              goto LABEL_43;
            }
            *((_DWORD *)v33 + v23) = v24;
          }
        }

        ++v9;
      }

      while (v9 != count);
    }

    else
    {
      id v4 = 0LL;
    }

    for (uint64_t i = 0LL; i != 40; i += 4LL)
    {
      unint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "sCntrsMacTx", xarray));
      [v26 addTxCsmaBackoffHistogram:*(unsigned int *)((char *)v33 + i)];
    }

    uint64_t v5 = 0LL;
  }

  else
  {
    id v3 = sub_1000160F4("com.apple.wpantund.awd", "default");
    id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR)) {
      sub_100212F8C();
    }
    uint64_t v5 = 1LL;
  }

  return v5;
}

void sub_100151294( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
}

uint64_t sub_10015132C(void *a1, void *a2)
{
  id v3 = a1;
  id v99 = a2;
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
  {
    size_t count = xpc_array_get_count(v3);
    size_t v8 = sub_1000160F4("com.apple.wpantund.awd", "default");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 134217984;
      *(void *)&uint8_t buf[4] = count;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "AWDMetrics : AllMAC array with size %ld.",  buf,  0xCu);
    }

    size_t v10 = objc_opt_new(&OBJC_CLASS___AWDCountersMacRxS);
    size_t v11 = objc_opt_new(&OBJC_CLASS___AWDCountersMacTxS);
    if (count)
    {
      size_t v12 = 0LL;
      uint64_t v5 = 0LL;
      while (1)
      {
        xpc_object_t dictionary = xpc_array_get_dictionary(v3, v12);
        std::string::size_type v14 = (void *)objc_claimAutoreleasedReturnValue(dictionary);

        uint64_t v5 = v14;
        string = (char *)xpc_dictionary_get_string(v14, "key");
        sub_10000AC00(buf, string);
        unsigned int uint64 = xpc_dictionary_get_uint64(v14, "value");
        if ((buf[23] & 0x80000000) != 0) {
          break;
        }
        if (buf[23] > 0x12u)
        {
          if (buf[23] != 19)
          {
            if (buf[23] == 26)
            {
              if (*(void *)buf == 0x63657269645F7874LL
                && *(void *)&buf[8] == 0x65725F78616D5F74LL
                && *(void *)&buf[16] == 0x697078655F797274LL
                && (unsigned __int16)v101 == 31090)
              {
                goto LABEL_139;
              }
            }

            else if (buf[23] == 28)
            {
              if (*(void *)buf == 0x7269646E695F7874LL
                && *(void *)&buf[8] == 0x5F78616D5F746365LL
                && *(void *)&buf[16] == 0x78655F7972746572LL
                && v101 == 2037541232LL)
              {
                goto LABEL_140;
              }

LABEL_335:
                    __break(0x550Cu);
                  }
                }
              }
            }
          }
        }
      }
    }

    __break(0x5500u);
    goto LABEL_335;
  }

  id v4 = sub_1000160F4("com.apple.wpantund.awd", "default");
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_ERROR)) {
    sub_100212FB8();
  }
  uint64_t v6 = 1LL;
LABEL_333:

  return v6;
}

void sub_1001524B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100152534(void *a1, void *a2)
{
  id v3 = a1;
  v83[0] = 0LL;
  v83[1] = 0LL;
  uint64_t v82 = v83;
  memset(v91, 0, 80);
  memset(v90, 0, sizeof(v90));
  memset(v89, 0, sizeof(v89));
  memset(v88, 0, sizeof(v88));
  memset(v87, 0, sizeof(v87));
  memset(v86, 0, 44);
  id v71 = a2;
  xpc_object_t xarray = v3;
  if (xpc_get_type(v3) != (xpc_type_t)&_xpc_type_array)
  {
    id v4 = sub_1000160F4("com.apple.wpantund.awd", "default");
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_100212FE4();
    }
    uint64_t v6 = 1LL;
    goto LABEL_142;
  }

  size_t count = xpc_array_get_count(v3);
  uint64_t v7 = sub_1000160F4("com.apple.wpantund.awd", "default");
  size_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = count;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "AWDMetrics : now onto Coex hist array with size %ld.",  (uint8_t *)&buf,  0xCu);
  }

  size_t v9 = objc_opt_new(&OBJC_CLASS___AWDHistogramsCoexS);
  size_t v10 = v9;
  if (count)
  {
    size_t v11 = 0LL;
    uint64_t v5 = 0LL;
    int v73 = v9;
    while (1)
    {
      xpc_object_t dictionary = xpc_array_get_dictionary(xarray, v11);
      std::string::size_type v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(dictionary);

      unsigned int v80 = v13;
      string = (char *)xpc_dictionary_get_string(v13, "key");
      sub_10000AC00(&buf, string);
      unsigned int uint64 = xpc_dictionary_get_uint64(v13, "value");
      std::string::size_type v79 = std::string::find(&buf, 91, 0LL);
      std::string::size_type v15 = std::string::find(&buf, 93, 0LL);
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_std::string buf = &buf;
      }
      else {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t size = buf.__r_.__value_.__s.__size_;
      }
      else {
        uint64_t size = buf.__r_.__value_.__l.__size_;
      }
      uint64_t v18 = (std::string *)((char *)p_buf + size);
      if (size >= 40)
      {
        std::string::size_type v24 = v15;
        uint64_t v25 = size;
        unint64_t v26 = p_buf;
        do
        {
          int v27 = (std::string *)memchr(v26, 99, v25 - 39);
          if (!v27) {
            break;
          }
          std::string::size_type v21 = v27;
          if (!memcmp(v27, "coex_rx_total_grant_duty_cycle_histogram", 0x28uLL)) {
            goto LABEL_22;
          }
          unint64_t v26 = (std::string *)((char *)&v21->__r_.__value_.__l.__data_ + 1);
          uint64_t v25 = (char *)v18 - ((char *)&v21->__r_.__value_.__l.__data_ + 1);
        }

        while (v25 > 39);
        std::string::size_type v21 = (std::string *)((char *)p_buf + size);
LABEL_22:
        BOOL v19 = v21 != v18;
        uint64_t v28 = size;
        id v29 = p_buf;
        do
        {
          int v30 = (std::string *)memchr(v29, 99, v28 - 39);
          if (!v30) {
            break;
          }
          std::string::size_type v22 = v30;
          if (!memcmp(v30, "coex_tx_total_grant_duty_cycle_histogram", 0x28uLL)) {
            goto LABEL_27;
          }
          id v29 = (std::string *)((char *)&v22->__r_.__value_.__l.__data_ + 1);
          uint64_t v28 = (char *)v18 - ((char *)&v22->__r_.__value_.__l.__data_ + 1);
        }

        while (v28 > 39);
        std::string::size_type v22 = (std::string *)((char *)p_buf + size);
LABEL_27:
        BOOL v78 = v22 != v18;
        if (size >= 46)
        {
          uint64_t v31 = size;
          unsigned int v32 = p_buf;
          do
          {
            uint64_t v33 = (std::string *)memchr(v32, 99, v31 - 45);
            if (!v33) {
              break;
            }
            BOOL v20 = v33;
            if (!memcmp(v33, "coex_rx_unsolicited_grant_duty_cycle_histogram", 0x2EuLL))
            {
              BOOL v75 = v20 != v18;
              goto LABEL_114;
            }

            unsigned int v32 = (std::string *)((char *)&v20->__r_.__value_.__l.__data_ + 1);
            uint64_t v31 = (char *)v18 - ((char *)&v20->__r_.__value_.__l.__data_ + 1);
          }

          while (v31 > 45);
          BOOL v75 = 0;
          BOOL v20 = (std::string *)((char *)p_buf + size);
LABEL_114:
          uint64_t v58 = size;
          __int16 v59 = p_buf;
          while (1)
          {
            BOOL v60 = __OFSUB__(v58, 46LL);
            uint64_t v61 = v58 - 46;
            if (v60) {
              break;
            }
            if (v61 != -1)
            {
              int v62 = (std::string *)memchr(v59, 99, v61 + 1);
              if (v62)
              {
                unsigned __int8 v23 = v62;
                if (!memcmp(v62, "coex_tx_unsolicited_grant_duty_cycle_histogram", 0x2EuLL)) {
                  goto LABEL_35;
                }
                __int16 v59 = (std::string *)((char *)&v23->__r_.__value_.__l.__data_ + 1);
                uint64_t v58 = (char *)v18 - ((char *)&v23->__r_.__value_.__l.__data_ + 1);
                if (v58 > 45) {
                  continue;
                }
              }
            }

            goto LABEL_34;
          }

void sub_100152EA8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }

  sub_10000D448((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_100152F7C(void *a1, void *a2)
{
  id v3 = a1;
  v83[0] = 0LL;
  v83[1] = 0LL;
  uint64_t v82 = v83;
  uint64_t v88 = 0LL;
  memset(v87, 0, sizeof(v87));
  memset(v86, 0, 60);
  id v79 = a2;
  id v80 = v3;
  if (xpc_get_type(v3) != (xpc_type_t)&_xpc_type_array)
  {
    id v4 = sub_1000160F4("com.apple.wpantund.awd", "default");
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_100213010();
    }
    uint64_t v6 = 1LL;
    goto LABEL_191;
  }

  size_t count = xpc_array_get_count(v3);
  size_t v8 = sub_1000160F4("com.apple.wpantund.awd", "default");
  size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = count;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "AWDMetrics : now onto Coex array with size %ld.",  (uint8_t *)&buf,  0xCu);
  }

  size_t v10 = objc_opt_new(&OBJC_CLASS___AWDCountersCoexS);
  if (!count)
  {
    uint64_t v5 = 0LL;
LABEL_178:
    for (uint64_t i = 0LL; i != 14; ++i)
      -[AWDCountersCoexS addCoexRxGrantTimeHistogram:](v10, "addCoexRxGrantTimeHistogram:", v87[i], v78);
    for (uint64_t j = 0LL; j != 60; j += 4LL)
      -[AWDCountersCoexS addCoexTxGrantTimeHistogram:]( v10,  "addCoexTxGrantTimeHistogram:",  *(unsigned int *)((char *)v86 + j));
    uint64_t v66 = 100LL * -[AWDCountersCoexS coexTxGrantedRequests](v10, "coexTxGrantedRequests");
    if ((v66 & 0xFFFFFFFF00000000LL) == 0)
    {
      unsigned int v67 = -[AWDCountersCoexS coexTxGrantedRequests](v10, "coexTxGrantedRequests");
      unsigned int v68 = -[AWDCountersCoexS coexTxDeniedRequests](v10, "coexTxDeniedRequests");
      if (__CFADD__(v67, v68)) {
        goto LABEL_193;
      }
      -[AWDCountersCoexS setTxGrantedReqPercentage:](v10, "setTxGrantedReqPercentage:", v66 / (v67 + v68));
      -[AWDCountersCoexS setTxGrantedReqPercentage:]( v10,  "setTxGrantedReqPercentage:",  sub_1000BE984(4, -[AWDCountersCoexS txGrantedReqPercentage](v10, "txGrantedReqPercentage")));
      uint64_t v69 = 100LL * -[AWDCountersCoexS coexTxDeniedRequests](v10, "coexTxDeniedRequests");
      if ((v69 & 0xFFFFFFFF00000000LL) == 0)
      {
        unsigned int v70 = -[AWDCountersCoexS coexTxGrantedRequests](v10, "coexTxGrantedRequests");
        unsigned int v71 = -[AWDCountersCoexS coexTxDeniedRequests](v10, "coexTxDeniedRequests");
        if (__CFADD__(v70, v71)) {
          goto LABEL_193;
        }
        -[AWDCountersCoexS setTxDeniedReqPercentage:](v10, "setTxDeniedReqPercentage:", v69 / (v70 + v71));
        -[AWDCountersCoexS setTxDeniedReqPercentage:]( v10,  "setTxDeniedReqPercentage:",  sub_1000BE984(4, -[AWDCountersCoexS txDeniedReqPercentage](v10, "txDeniedReqPercentage")));
        uint64_t v72 = 100LL * -[AWDCountersCoexS coexRxGrantedRequests](v10, "coexRxGrantedRequests");
        if ((v72 & 0xFFFFFFFF00000000LL) == 0)
        {
          unsigned int v73 = -[AWDCountersCoexS coexRxGrantedRequests](v10, "coexRxGrantedRequests");
          unsigned int v74 = -[AWDCountersCoexS coexRxDeniedRequests](v10, "coexRxDeniedRequests");
          if (__CFADD__(v73, v74)) {
            goto LABEL_193;
          }
          -[AWDCountersCoexS setRxGrantedReqPercentage:]( v10,  "setRxGrantedReqPercentage:",  v72 / (v73 + v74));
          -[AWDCountersCoexS setRxGrantedReqPercentage:]( v10,  "setRxGrantedReqPercentage:",  sub_1000BE984(4, -[AWDCountersCoexS rxGrantedReqPercentage](v10, "rxGrantedReqPercentage")));
          uint64_t v75 = 100LL * -[AWDCountersCoexS coexRxDeniedRequests](v10, "coexRxDeniedRequests");
          if ((v75 & 0xFFFFFFFF00000000LL) == 0)
          {
            unsigned int v76 = -[AWDCountersCoexS coexRxGrantedRequests](v10, "coexRxGrantedRequests");
            unsigned int v77 = -[AWDCountersCoexS coexRxDeniedRequests](v10, "coexRxDeniedRequests");
            if (!__CFADD__(v76, v77))
            {
              -[AWDCountersCoexS setRxDeniedReqPercentage:]( v10,  "setRxDeniedReqPercentage:",  v75 / (v76 + v77));
              -[AWDCountersCoexS setRxDeniedReqPercentage:]( v10,  "setRxDeniedReqPercentage:",  sub_1000BE984(4, -[AWDCountersCoexS rxDeniedReqPercentage](v10, "rxDeniedReqPercentage")));
              [v79 setSCntrsCoex:v10];

              uint64_t v6 = 0LL;
LABEL_191:

              sub_10000D448((uint64_t)&v82);
              return v6;
            }

LABEL_193:
            __break(0x5500u);
LABEL_194:
            __break(0x5515u);
          }
        }
      }
    }

    __break(0x550Cu);
    goto LABEL_193;
  }

  size_t v11 = 0LL;
  uint64_t v5 = 0LL;
  size_t v78 = count;
  while (1)
  {
    xpc_object_t dictionary = xpc_array_get_dictionary(v3, v11);
    std::string::size_type v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(dictionary);

    uint64_t v5 = v13;
    string = (char *)xpc_dictionary_get_string(v13, "key");
    sub_10000AC00(&buf, string);
    unsigned int uint64 = xpc_dictionary_get_uint64(v13, "value");
    std::string::size_type size = buf.__r_.__value_.__l.__size_;
    if (buf.__r_.__value_.__l.__size_ == 16)
    {
      if (*(void *)buf.__r_.__value_.__l.__data_ == 0x5F78745F78656F63LL
        && *(void *)(buf.__r_.__value_.__r.__words[0] + 8) == 0x7374736575716572LL)
      {
        goto LABEL_76;
      }

      std::string::size_type size = buf.__r_.__value_.__l.__size_;
    }

    else if (buf.__r_.__value_.__l.__size_ == 23)
    {
      BOOL v19 = *(void *)buf.__r_.__value_.__l.__data_ == 0x736E755F78656F63LL
         && *(void *)(buf.__r_.__value_.__r.__words[0] + 8) == 0x6465746963696C6FLL;
      if (v19 && *(void *)(buf.__r_.__value_.__r.__words[0] + 15) == 0x73746E6172675F64LL)
      {
LABEL_99:
        -[AWDCountersCoexS setCoexUnsolicitedGrants:](v10, "setCoexUnsolicitedGrants:", sub_1000BE984(4, uint64));
        goto LABEL_173;
      }
    }

    if (size == 24)
    {
      if (*(void *)buf.__r_.__value_.__l.__data_ == 0x5F78745F78656F63LL
        && *(void *)(buf.__r_.__value_.__r.__words[0] + 8) == 0x5F6465746E617267LL
        && *(void *)(buf.__r_.__value_.__r.__words[0] + 16) == 0x7374736575716572LL)
      {
        goto LABEL_98;
      }

      std::string::size_type size = buf.__r_.__value_.__l.__size_;
    }

    if (size == 23)
    {
      if (*(void *)buf.__r_.__value_.__l.__data_ == 0x5F78745F78656F63LL
        && *(void *)(buf.__r_.__value_.__r.__words[0] + 8) == 0x725F6465696E6564LL
        && *(void *)(buf.__r_.__value_.__r.__words[0] + 15) == 0x7374736575716572LL)
      {
LABEL_100:
        -[AWDCountersCoexS setCoexTxDeniedRequests:](v10, "setCoexTxDeniedRequests:", sub_1000BE984(4, uint64));
        goto LABEL_173;
      }

      std::string::size_type size = buf.__r_.__value_.__l.__size_;
    }

    if (size == 16)
    {
      if (*(void *)buf.__r_.__value_.__l.__data_ == 0x5F78725F78656F63LL
        && *(void *)(buf.__r_.__value_.__r.__words[0] + 8) == 0x7374736575716572LL)
      {
        goto LABEL_97;
      }

      std::string::size_type size = buf.__r_.__value_.__l.__size_;
    }

    if (size == 24)
    {
      if (*(void *)buf.__r_.__value_.__l.__data_ == 0x5F78725F78656F63LL
        && *(void *)(buf.__r_.__value_.__r.__words[0] + 8) == 0x5F6465746E617267LL
        && *(void *)(buf.__r_.__value_.__r.__words[0] + 16) == 0x7374736575716572LL)
      {
        goto LABEL_171;
      }

      std::string::size_type size = buf.__r_.__value_.__l.__size_;
    }

    if (size != 23) {
      goto LABEL_116;
    }
    p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
LABEL_109:
    std::string::size_type v38 = p_buf->__r_.__value_.__r.__words[0];
    std::string::size_type v39 = p_buf->__r_.__value_.__l.__size_;
    uint64_t v40 = *(std::string::size_type *)((char *)&p_buf->__r_.__value_.__r.__words[1] + 7);
    if (v38 != 0x5F78725F78656F63LL || v39 != 0x725F6465696E6564LL || v40 != 0x7374736575716572LL) {
      goto LABEL_116;
    }
    -[AWDCountersCoexS setCoexRxDeniedRequests:](v10, "setCoexRxDeniedRequests:", sub_1000BE984(4, uint64));
LABEL_173:
    if (++v11 == count) {
      goto LABEL_178;
    }
  }

  if (buf.__r_.__value_.__s.__size_ != 16)
  {
    if (buf.__r_.__value_.__s.__size_ != 23)
    {
      if (buf.__r_.__value_.__s.__size_ != 24) {
        goto LABEL_116;
      }
      BOOL v16 = buf.__r_.__value_.__r.__words[0] == 0x5F78745F78656F63LL
         && buf.__r_.__value_.__l.__size_ == 0x5F6465746E617267LL;
      if (!v16 || buf.__r_.__value_.__l.__cap_ != 0x7374736575716572LL)
      {
        if (buf.__r_.__value_.__r.__words[0] != 0x5F78725F78656F63LL
          || buf.__r_.__value_.__l.__size_ != 0x5F6465746E617267LL
          || buf.__r_.__value_.__l.__cap_ != 0x7374736575716572LL)
        {
          goto LABEL_116;
        }

void sub_100153AD8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }

  sub_10000D448((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_100153B70(void *a1, void *a2)
{
  id v3 = a1;
  id v56 = a2;
  if (xpc_get_type(v3) != (xpc_type_t)&_xpc_type_array)
  {
    id v4 = sub_1000160F4("com.apple.wpantund.awd", "default");
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_10021303C();
    }
    uint64_t v6 = 1LL;
    goto LABEL_168;
  }

  size_t count = xpc_array_get_count(v3);
  size_t v8 = sub_1000160F4("com.apple.wpantund.awd", "default");
  size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 134217984;
    *(void *)&uint8_t buf[4] = count;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "AWDMetrics : AWDMetricsHandlers_handle_getprop_threadmle - reading array with size %ld.",  buf,  0xCu);
  }

  size_t v10 = objc_opt_new(&OBJC_CLASS___AWDCountersThreadMleS);
  if (count)
  {
    size_t v11 = 0LL;
    uint64_t v5 = 0LL;
    while (1)
    {
      xpc_object_t dictionary = xpc_array_get_dictionary(v3, v11);
      std::string::size_type v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(dictionary);

      uint64_t v5 = v13;
      string = (char *)xpc_dictionary_get_string(v13, "key");
      sub_10000AC00(buf, string);
      unsigned int uint64 = xpc_dictionary_get_uint64(v13, "value");
      if ((buf[23] & 0x80000000) == 0)
      {
        BOOL v16 = buf;
        switch(buf[23])
        {
          case 0xF:
            if (*(void *)buf != 0x615F686361747461LL || *(void *)&buf[7] != 0x7374706D65747461LL) {
              goto LABEL_162;
            }
            goto LABEL_161;
          case 0x10:
            if (*(void *)buf != 0x6F725F646C696863LL || *(void *)&buf[8] != 0x746E756F635F656CLL) {
              goto LABEL_162;
            }
            goto LABEL_114;
          case 0x11:
            if (*(void *)buf == 0x725F726574756F72LL && *(void *)&buf[8] == 0x6E756F635F656C6FLL && buf[16] == 116) {
              goto LABEL_160;
            }
            if (*(void *)buf != 0x725F72656461656CLL || *(void *)&buf[8] != 0x6E756F635F656C6FLL || buf[16] != 116) {
              goto LABEL_162;
            }
            goto LABEL_130;
          case 0x12:
          case 0x15:
          case 0x16:
          case 0x17:
          case 0x18:
          case 0x19:
            goto LABEL_164;
          case 0x13:
            if (*(void *)buf == 0x64656C6261736964LL
              && *(void *)&buf[8] == 0x6F635F656C6F725FLL
              && *(void *)&buf[11] == 0x746E756F635F656CLL)
            {
              goto LABEL_159;
            }

            if (*(void *)buf != 0x6465686361746564LL
              || *(void *)&buf[8] != 0x6F635F656C6F725FLL
              || *(void *)&buf[11] != 0x746E756F635F656CLL)
            {
              goto LABEL_162;
            }

            goto LABEL_146;
          case 0x14:
            goto LABEL_87;
          case 0x1A:
            if (*(void *)buf != 0x6F69746974726170LL
              || *(void *)&buf[8] != 0x6168635F64695F6ELL
              || *(void *)&buf[16] != 0x756F635F7365676ELL
              || (unsigned __int16)v58 != 29806)
            {
              goto LABEL_162;
            }

            goto LABEL_158;
          default:
            if (*(void *)buf != 0x705F726574746562LL
              || *(void *)&buf[8] != 0x6E6F697469747261LL
              || *(void *)&buf[16] != 0x5F6863617474615FLL
              || v58 != 0x7374706D65747461LL)
            {
              goto LABEL_162;
            }

            goto LABEL_108;
        }
      }

      uint64_t v18 = *(void *)&buf[8];
      if (*(void *)&buf[8] == 16LL)
      {
        if (**(void **)buf == 0x6F725F646C696863LL && *(void *)(*(void *)buf + 8LL) == 0x746E756F635F656CLL)
        {
LABEL_114:
          -[AWDCountersThreadMleS setChildRoleCount:](v10, "setChildRoleCount:", sub_1000BE984(3, uint64));
          goto LABEL_162;
        }

        uint64_t v18 = *(void *)&buf[8];
      }

      else if (*(void *)&buf[8] == 19LL)
      {
        if (**(void **)buf == 0x64656C6261736964LL
          && *(void *)(*(void *)buf + 8LL) == 0x6F635F656C6F725FLL
          && *(void *)(*(void *)buf + 11LL) == 0x746E756F635F656CLL)
        {
LABEL_159:
          -[AWDCountersThreadMleS setDisabledRoleCount:](v10, "setDisabledRoleCount:", sub_1000BE984(3, uint64));
          goto LABEL_162;
        }

        BOOL v21 = **(void **)buf == 0x6465686361746564LL && *(void *)(*(void *)buf + 8LL) == 0x6F635F656C6F725FLL;
        if (v21 && *(void *)(*(void *)buf + 11LL) == 0x746E756F635F656CLL)
        {
LABEL_146:
          -[AWDCountersThreadMleS setDetachedRoleCount:](v10, "setDetachedRoleCount:", sub_1000BE984(3, uint64));
          goto LABEL_162;
        }
      }

      if (v18 != 17) {
        goto LABEL_55;
      }
      if (**(void **)buf == 0x725F726574756F72LL
        && *(void *)(*(void *)buf + 8LL) == 0x6E756F635F656C6FLL
        && *(_BYTE *)(*(void *)buf + 16LL) == 116)
      {
LABEL_160:
        -[AWDCountersThreadMleS setRouterRoleCount:](v10, "setRouterRoleCount:", sub_1000BE984(3, uint64));
        goto LABEL_162;
      }

      uint64_t v18 = *(void *)&buf[8];
      if (*(void *)&buf[8] == 17LL
        && (**(void **)buf == 0x725F72656461656CLL
          ? (BOOL v26 = *(void *)(*(void *)buf + 8LL) == 0x6E756F635F656C6FLL)
          : (BOOL v26 = 0),
            v26 ? (BOOL v27 = *(_BYTE *)(*(void *)buf + 16LL) == 116) : (BOOL v27 = 0),
            v27))
      {
LABEL_130:
        -[AWDCountersThreadMleS setLeaderRoleCount:](v10, "setLeaderRoleCount:", sub_1000BE984(3, uint64));
      }

      else
      {
LABEL_55:
        if (v18 == 15)
        {
          if (**(void **)buf == 0x615F686361747461LL && *(void *)(*(void *)buf + 7LL) == 0x7374706D65747461LL)
          {
LABEL_161:
            -[AWDCountersThreadMleS setAttachAttempts:](v10, "setAttachAttempts:", sub_1000BE984(3, uint64));
            goto LABEL_162;
          }

          uint64_t v18 = *(void *)&buf[8];
        }

        if (v18 == 26)
        {
          if (**(void **)buf == 0x6F69746974726170LL
            && *(void *)(*(void *)buf + 8LL) == 0x6168635F64695F6ELL
            && *(void *)(*(void *)buf + 16LL) == 0x756F635F7365676ELL
            && *(_WORD *)(*(void *)buf + 24LL) == 29806)
          {
LABEL_158:
            -[AWDCountersThreadMleS setPartitionIdChangesCount:]( v10,  "setPartitionIdChangesCount:",  sub_1000BE984(3, uint64));
            goto LABEL_162;
          }

          uint64_t v18 = *(void *)&buf[8];
        }

        if (v18 != 32) {
          goto LABEL_85;
        }
        if (**(void **)buf != 0x705F726574746562LL
          || *(void *)(*(void *)buf + 8LL) != 0x6E6F697469747261LL
          || *(void *)(*(void *)buf + 16LL) != 0x5F6863617474615FLL
          || *(void *)(*(void *)buf + 24LL) != 0x7374706D65747461LL)
        {
          uint64_t v18 = *(void *)&buf[8];
LABEL_85:
          if (v18 == 20)
          {
            BOOL v16 = *(_BYTE **)buf;
LABEL_87:
            uint64_t v35 = *(void *)v16;
            uint64_t v36 = *((void *)v16 + 1);
            int v37 = *((_DWORD *)v16 + 4);
            if (v35 == 0x635F746E65726170LL && v36 == 0x635F7365676E6168LL && v37 == 1953396079) {
              -[AWDCountersThreadMleS setParentChangesCount:](v10, "setParentChangesCount:", sub_1000BE984(3, uint64));
            }
          }

          goto LABEL_162;
        }

void sub_100154300( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100154360(void *a1, void *a2)
{
  id v3 = a1;
  id v42 = a2;
  if (xpc_get_type(v3) != (xpc_type_t)&_xpc_type_array)
  {
    id v4 = sub_1000160F4("com.apple.wpantund.awd", "default");
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_100213068();
    }
    uint64_t v6 = 1LL;
    goto LABEL_111;
  }

  size_t count = xpc_array_get_count(v3);
  size_t v8 = sub_1000160F4("com.apple.wpantund.awd", "default");
  size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = count;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "AWDMetrics : AWDMetricsHandlers_handle_getprop_allipv6 - reading array with size %ld.",  (uint8_t *)&buf,  0xCu);
  }

  size_t v10 = objc_opt_new(&OBJC_CLASS___AWDCountersIpv6S);
  if (count)
  {
    size_t v11 = 0LL;
    uint64_t v5 = 0LL;
    while (1)
    {
      xpc_object_t dictionary = xpc_array_get_dictionary(v3, v11);
      std::string::size_type v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(dictionary);

      uint64_t v5 = v13;
      string = (char *)xpc_dictionary_get_string(v13, "key");
      sub_10000AC00(&buf, string);
      unsigned int uint64 = xpc_dictionary_get_uint64(v13, "value");
      if (v45 < 0) {
        break;
      }
      switch(v45)
      {
        case 10:
          if ((void)buf != 0x65636375735F7874LL || WORD4(buf) != 29555)
          {
            if ((void)buf != 0x756C6961665F7874LL || WORD4(buf) != 25970)
            {
              if ((void)buf != 0x65636375735F7872LL || WORD4(buf) != 29555)
              {
                if ((void)buf != 0x756C6961665F7872LL || WORD4(buf) != 25970)
                {
LABEL_101:
                  if (v45 < 0) {
                    operator delete((void *)buf);
                  }
                  break;
                }

void sub_100154998( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1001549F8(_DWORD *a1)
{
  if (a1) {
    *a1 = dword_1002D1918;
  }
  return 0LL;
}

uint64_t sub_100154A10(_DWORD *a1, _DWORD *a2)
{
  if (a1 && a2)
  {
    *a1 = dword_1002D1920;
    *a2 = dword_1002D1924;
  }

  return 0LL;
}

uint64_t sub_100154A38(void *a1)
{
  id v1 = a1;
  double v2 = v1;
  else {
    uint64_t v3 = DWORD1(xmmword_1002D17E0);
  }
  [v1 setNcpResetType:v3];
  std::string::append(&v9, "{");
  std::string::append(&v9, "FAULT_BLOCK_RANDOM_ID=");
  std::to_string(&__p, xmmword_1002D17E0);
  sub_10000D650(&v9, (const std::string::value_type *)&__p);
  std::string::append(&v9, ";");
  std::string::append(&v9, "ADDRESS=");
  std::to_string(&__p, dword_1002D17F0);
  sub_10000D650(&v9, (const std::string::value_type *)&__p);
  std::string::append(&v9, ";");
  std::string::append(&v9, "LINE=");
  std::to_string(&__p, dword_1002D17F4);
  sub_10000D650(&v9, (const std::string::value_type *)&__p);
  std::string::append(&v9, ";");
  std::string::append(&v9, "}");
  id v4 = objc_alloc(&OBJC_CLASS___NSString);
  if ((v9.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v5 = &v9;
  }
  else {
    uint64_t v5 = (std::string *)v9.__r_.__value_.__r.__words[0];
  }
  uint64_t v6 = -[NSString initWithUTF8String:](v4, "initWithUTF8String:", v5);
  [v2 setNcpCrashReason:v6];

  [v2 setIsMtbfQualified:0];
  if ((_DWORD)xmmword_1002D17E0 == -559038737) {
    [v2 setIsMtbfQualified:1];
  }

  return 0LL;
}

void sub_100154C0C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::string::size_type v22 = v21;

  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100154C68(uint64_t result)
{
  qword_1002D17D8 = *(void *)(result + 8);
  if ((_DWORD)xmmword_1002D17C4 == -1)
  {
LABEL_9:
    __break(0x5500u);
    goto LABEL_10;
  }

  LODWORD(xmmword_1002D17C4) = xmmword_1002D17C4 + 1;
  int v1 = *(_DWORD *)(result + 4);
  if (v1 > 3)
  {
    size_t v8 = &dword_1002D17D4;
    int v7 = dword_1002D17D4 + 1;
    if (dword_1002D17D4 != -1) {
      goto LABEL_8;
    }
    goto LABEL_9;
  }

  BOOL v2 = __OFSUB__(v1, 1);
  unsigned int v3 = v1 - 1;
  if (v2)
  {
LABEL_10:
    __break(0x5515u);
    goto LABEL_11;
  }

  if (v3 < 4)
  {
    id v4 = (char *)&xmmword_1002D1510 + 4 * v3;
    int v5 = *((_DWORD *)v4 + 174);
    BOOL v6 = __CFADD__(v5, 1);
    int v7 = v5 + 1;
    if (!v6)
    {
      size_t v8 = (int *)(v4 + 696);
LABEL_8:
      int *v8 = v7;
      __int128 v9 = *(_OWORD *)result;
      *(__int128 *)((char *)&xmmword_1002D17E0 + 10) = *(_OWORD *)(result + 10);
      xmmword_1002D17E0 = v9;
      return result;
    }

    goto LABEL_9;
  }

double sub_100154D08@<D0>(void *a1@<X8>)
{
  std::string::append(&v25, "NCP Resets= ");
  std::to_string(&v24, xmmword_1002D17C4);
  sub_10000D650(&v25, (const std::string::value_type *)&v24);
  std::string::append(&v25, ". ");
  std::string::append(&v25, "Time since last reset= ");
  if ((_DWORD)xmmword_1002D17C4)
  {
    unint64_t v2 = qword_1002D17D8;
    double v3 = CFAbsoluteTimeGetCurrent() - (double)v2;
    if (v3 > 0.0)
    {
      std::to_string(&v24, v3);
      sub_10000D650(&v25, (const std::string::value_type *)&v24);
      std::string::append(&v25, "sec. ");
    }

    std::to_string(&v22, DWORD1(xmmword_1002D17C4));
    id v4 = std::string::insert(&v22, 0LL, "#Asserts= ");
    __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0LL;
    v4->__r_.__value_.__l.__cap_ = 0LL;
    v4->__r_.__value_.__r.__words[0] = 0LL;
    BOOL v6 = std::string::append(&v23, ". ");
    __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0LL;
    v6->__r_.__value_.__l.__cap_ = 0LL;
    v6->__r_.__value_.__r.__words[0] = 0LL;
    sub_10000D650(&v25, (const std::string::value_type *)&v24);
    std::to_string(&v22, DWORD2(xmmword_1002D17C4));
    size_t v8 = std::string::insert(&v22, 0LL, "#HardFaults= ");
    __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0LL;
    v8->__r_.__value_.__l.__cap_ = 0LL;
    v8->__r_.__value_.__r.__words[0] = 0LL;
    size_t v10 = std::string::append(&v23, ". ");
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    sub_10000D650(&v25, (const std::string::value_type *)&v24);
    std::to_string(&v22, HIDWORD(xmmword_1002D17C4));
    size_t v12 = std::string::insert(&v22, 0LL, "#StackOverflows= ");
    __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    std::string::size_type v14 = std::string::append(&v23, ". ");
    __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    sub_10000D650(&v25, (const std::string::value_type *)&v24);
    std::to_string(&v22, dword_1002D17D4);
    BOOL v16 = std::string::insert(&v22, 0LL, "#UnknownFaults= ");
    __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0LL;
    v16->__r_.__value_.__l.__cap_ = 0LL;
    v16->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v18 = std::string::append(&v23, ". ");
    __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    sub_10000D650(&v25, (const std::string::value_type *)&v24);
  }

  else
  {
    std::string::append(&v25, "N.A");
  }

  BOOL v20 = (char *)operator new(0x20uLL);
  *(void *)BOOL v20 = &off_1002AE030;
  double result = *(double *)&v25.__r_.__value_.__l.__data_;
  *(std::string *)(v20 + 8) = v25;
  *a1 = v20;
  return result;
}

void sub_1001550E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1001551A0(int a1)
{
  unint64_t v2 = sub_1000160F4("com.apple.wpantund.awd", "default");
  double v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v9[0] = 67109120;
    v9[1] = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "AWDMetrics : AWDMetricsHandlers_handle_update_PowerCounter_HostWakeup HostWakeup Reason %d \n",  (uint8_t *)v9,  8u);
  }

  if ((_DWORD)xmmword_1002D1800 == -1) {
    goto LABEL_8;
  }
  LODWORD(xmmword_1002D1800) = xmmword_1002D1800 + 1;
  unsigned int v4 = a1 - 1;
  if (__OFSUB__(a1, 1))
  {
LABEL_9:
    __break(0x5515u);
LABEL_10:
    __break(0x5512u);
    __break(1u);
  }

  if (v4 >= 0x18) {
    goto LABEL_10;
  }
  __int128 v5 = (char *)&xmmword_1002D1510 + 4 * v4;
  int v6 = *((_DWORD *)v5 + 189);
  BOOL v7 = __CFADD__(v6, 1);
  int v8 = v6 + 1;
  if (v7)
  {
LABEL_8:
    __break(0x5500u);
    goto LABEL_9;
  }

  *((_DWORD *)v5 + 189) = v8;
}

uint64_t sub_1001552AC(void *a1)
{
  id v1 = a1;
  [v1 setHostWakeupsCount:xmmword_1002D1800];
  for (uint64_t i = 0LL; i != 92; i += 4LL)
    [v1 addHostWakeupsCountHistogram:*(unsigned int *)((char *)&xmmword_1002D1510 + i + 756)];

  return 0LL;
}

void sub_100155310(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100155324(void *a1, void *a2)
{
  id v3 = a1;
  memset(v44, 0, sizeof(v44));
  memset(v43, 0, sizeof(v43));
  id v4 = a2;
  id v38 = v4;
  xpc_object_t xarray = v3;
  if (xpc_get_type(v3) != (xpc_type_t)&_xpc_type_array)
  {
    __int128 v5 = sub_1000160F4("com.apple.wpantund.awd", "default");
    int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_100213094();
    }

    BOOL v7 = 0LL;
    uint64_t v8 = 1LL;
    goto LABEL_68;
  }

  size_t count = xpc_array_get_count(v3);
  __int128 v9 = sub_1000160F4("com.apple.wpantund.awd", "default");
  size_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = count;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "AWDMetrics : ConnectedNodesHistogram array with size %ld.",  (uint8_t *)&buf,  0xCu);
  }

  if (count)
  {
    size_t v11 = 0LL;
    BOOL v7 = 0LL;
    while (1)
    {
      xpc_object_t dictionary = xpc_array_get_dictionary(xarray, v11);
      __int128 v13 = (void *)objc_claimAutoreleasedReturnValue(dictionary);

      BOOL v7 = v13;
      string = (char *)xpc_dictionary_get_string(v13, "key");
      sub_10000AC00(&buf, string);
      int uint64 = xpc_dictionary_get_uint64(v13, "value");
      std::string::size_type v16 = std::string::find(&buf, 91, 0LL);
      std::string::size_type v17 = std::string::find(&buf, 93, 0LL);
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_std::string buf = &buf;
      }
      else {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t size = buf.__r_.__value_.__s.__size_;
      }
      else {
        uint64_t size = buf.__r_.__value_.__l.__size_;
      }
      BOOL v20 = (std::string *)((char *)p_buf + size);
      BOOL v21 = (std::string *)((char *)p_buf + size);
      if (size > 19)
      {
        uint64_t v22 = size;
        std::string v23 = p_buf;
        do
        {
          std::string v24 = memchr(v23, 67, v22 - 19);
          if (!v24) {
            break;
          }
          BOOL v21 = (std::string *)v24;
          if (*v24 == 0x657463656E6E6F43LL && v24[1] == 0x43726574756F5264LL && *((_DWORD *)v24 + 4) == 1953396079) {
            goto LABEL_27;
          }
          std::string v23 = (std::string *)((char *)v24 + 1);
          uint64_t v22 = (char *)v20 - ((char *)&v21->__r_.__value_.__l.__data_ + 1);
        }

        while (v22 > 19);
        BOOL v21 = (std::string *)((char *)p_buf + size);
      }

void sub_100155784( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
}

uint64_t sub_100155814(int a1, int a2, int a3)
{
  BOOL v4 = dword_1002D1918 == a1 && dword_1002D1920 == a2 && dword_1002D1924 == a3;
  int v5 = v4;
  if (!v4)
  {
    dword_1002D1918 = a1;
    dword_1002D1920 = a2;
    dword_1002D1924 = a3;
  }

  return v5 ^ 1u;
}

void sub_100155848(int a1, int a2, int a3, double a4, double a5)
{
  int v5 = a1 + a2;
  if (__CFADD__(a1, a2)) {
    goto LABEL_19;
  }
  int v7 = v5 + a3;
  if (__CFADD__(v5, a3) || HIDWORD(qword_1002D1900) == -1) {
    goto LABEL_19;
  }
  ++HIDWORD(qword_1002D1900);
  unsigned int v10 = qword_1002D1900;
  if ((_DWORD)qword_1002D1900 == 10)
  {
    unsigned int v10 = 0;
    LODWORD(qword_1002D1900) = 0;
  }

  else if (qword_1002D1900 >= 0xA)
  {
    __break(0x5512u);
    return;
  }

  size_t v11 = (_DWORD *)&xmmword_1002D1510 + v10;
  v11[212] = v7;
  v11[222] = a2;
  v11[232] = a3;
  v11[242] = a1;
  if ((_DWORD)qword_1002D1900 == -1) {
    goto LABEL_19;
  }
  LODWORD(qword_1002D1900) = qword_1002D1900 + 1;
  int v12 = v7 - dword_1002D190C;
  if (__OFSUB__(v7, dword_1002D190C)) {
    goto LABEL_20;
  }
  if (v12 < 0) {
    int v12 = dword_1002D190C - v7;
  }
  if (HIDWORD(qword_1002D1910) > v12) {
    int v12 = HIDWORD(qword_1002D1910);
  }
  HIDWORD(qword_1002D1910) = v12;
  unsigned int v13 = dword_1002D1908;
  if (dword_1002D190C == v7) {
    goto LABEL_16;
  }
  unsigned int v13 = dword_1002D1908 + 1;
  if (dword_1002D1908 == -1)
  {
LABEL_19:
    __break(0x5500u);
LABEL_20:
    __break(0x5515u);
  }

  ++dword_1002D1908;
LABEL_16:
  LODWORD(a5) = HIDWORD(qword_1002D1900);
  LODWORD(qword_1002D1910) = vcvtpd_u64_f64((double)v13 / (double)*(unint64_t *)&a5 * 100.0);
  std::string::size_type v14 = sub_1000160F4("com.apple.wpantund.tdm", "default");
  __int128 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    v16[0] = 67111424;
    v16[1] = v7;
    __int16 v17 = 1024;
    int v18 = a1;
    __int16 v19 = 1024;
    int v20 = a2;
    __int16 v21 = 1024;
    int v22 = a3;
    __int16 v23 = 1024;
    int v24 = qword_1002D1900;
    __int16 v25 = 1024;
    int v26 = dword_1002D190C;
    __int16 v27 = 1024;
    int v28 = HIDWORD(qword_1002D1910);
    __int16 v29 = 1024;
    int v30 = HIDWORD(qword_1002D1900);
    __int16 v31 = 1024;
    int v32 = dword_1002D1908;
    __int16 v33 = 1024;
    int v34 = qword_1002D1910;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "AWDMetricsHandlers_topologymetrics_update::updateTopologyStats - totalNodes=%d totalRouters=%d totalFed=%d totalSe d=%d  totalArrayEntries=%d mPrevTotalNodes=%d  mMaxTopologyChange=%d mTotalTimePoint=%d mTotalUpdateTimePoint=%d m PercentageChange=%d",  (uint8_t *)v16,  0x3Eu);
  }

  dword_1002D190C = v7;
}

double sub_100155A68()
{
  unint64_t v0 = 0xFFFFFFFFFFFFFFD8LL;
  do
  {
    id v1 = (_DWORD *)((char *)&xmmword_1002D1510 + v0);
    v1[222] = 0;
    v1[232] = 0;
    v1[242] = 0;
    v1[252] = 0;
    v0 += 4LL;
  }

  while (v0);
  dword_1002D1908 = 0;
  double result = 0.0;
  qword_1002D1910 = 0LL;
  qword_1002D1900 = 0LL;
  return result;
}

BOOL sub_100155AAC()
{
  int v0 = dword_1002D1908;
  if (!dword_1002D1908)
  {
    id v1 = sub_1000160F4("com.apple.wpantund.awd", "default");
    unint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)BOOL v4 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "AWDMetrics : AWDMetricsHandlers_topologymetrics_IsModified : No change in topology from previous. Return here",  v4,  2u);
    }
  }

  return v0 != 0;
}

id sub_100155B34(void *a1)
{
  id result = a1;
  unint64_t v2 = result;
  if ((_DWORD)qword_1002D1900)
  {
    unint64_t v3 = 0LL;
    while (v3 != 10)
    {
      id result = objc_msgSend(v2, "addNodeCount:", sub_1000BE984(1, *((_DWORD *)&xmmword_1002D1510 + v3++ + 212)));
      if (v3 >= qword_1002D1900)
      {
        if (!(_DWORD)qword_1002D1900) {
          goto LABEL_17;
        }
        unint64_t v4 = 0LL;
        while (v4 != 10)
        {
          id result = objc_msgSend(v2, "addRouterCount:", sub_1000BE984(1, *((_DWORD *)&xmmword_1002D1510 + v4++ + 242)));
          if (v4 >= qword_1002D1900)
          {
            if (!(_DWORD)qword_1002D1900) {
              goto LABEL_17;
            }
            unint64_t v5 = 0LL;
            while (v5 != 10)
            {
              id result = objc_msgSend(v2, "addFEDCount:", sub_1000BE984(1, *((_DWORD *)&xmmword_1002D1510 + v5++ + 222)));
              if (v5 >= qword_1002D1900)
              {
                if (!(_DWORD)qword_1002D1900) {
                  goto LABEL_17;
                }
                unint64_t v6 = 0LL;
                while (v6 != 10)
                {
                  id result = objc_msgSend( v2,  "addSEDCount:",  sub_1000BE984(1, *((_DWORD *)&xmmword_1002D1510 + v6++ + 232)));
                }

                goto LABEL_18;
              }
            }

            goto LABEL_18;
          }
        }

        break;
      }
    }

void sub_100155C8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100155CAC()
{
  int v0 = objc_autoreleasePoolPush();
  sub_1000D2030((uint64_t)&xmmword_1002D17E0);
  qword_1002C9C08 = 0LL;
  unk_1002C9C10 = 0LL;
  unk_1002C9C18 = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1002C9C08, (void *)&_mh_execute_header);
  qword_1002C9C28 = 0LL;
  unk_1002C9C30 = 0LL;
  qword_1002C9C20 = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1002C9C20, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_100155D34(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (v1) {
    uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  uint64_t v3 = v1;
  sub_1000BEA00(&v3);
  uint64_t result = v3;
  if (v3) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  return result;
}

void sub_100155D88( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100155DA8(uint64_t a1, int a2)
{
}

void sub_100155E1C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100155E50(uint64_t a1, int a2)
{
}

void sub_100155EC4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100155EF8(uint64_t a1, int a2)
{
}

void sub_100155F6C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100155FA0(uint64_t a1, int a2)
{
}

void sub_100156014( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100156048(uint64_t a1, int a2)
{
}

void sub_1001560BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001560F0(uint64_t a1, int a2)
{
}

void sub_100156164( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_100156198(_OWORD *a1)
{
  __int128 v1 = a1[5];
  uint64_t v5[4] = a1[4];
  v5[5] = v1;
  v5[6] = a1[6];
  __int128 v2 = a1[1];
  v5[0] = *a1;
  v5[1] = v2;
  __int128 v3 = a1[3];
  uint64_t v5[2] = a1[2];
  uint64_t v5[3] = v3;
  sub_1000D06D8((unsigned int *)v5);
  return result;
}

__n128 sub_1001561D8(_OWORD *a1)
{
  __int128 v1 = a1[3];
  void v4[2] = a1[2];
  v5[0] = v1;
  *(_OWORD *)((char *)v5 + 12) = *(_OWORD *)((char *)a1 + 60);
  __int128 v2 = a1[1];
  v4[0] = *a1;
  v4[1] = v2;
  sub_1000D1378((unsigned __int16 *)v4);
  return result;
}

void sub_100156210()
{
}

void sub_100156470(uint64_t a1, uint64_t a2)
{
LABEL_1:
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
    || *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
  {
    return;
  }

  char v4 = 0;
  unsigned int v5 = 0;
  unint64_t v6 = 0LL;
  while (1)
  {
    uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
    unint64_t v8 = v7 + 1;
    if (v7 == -1) {
      break;
    }
    if (v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
    {
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      uint64_t v12 = OBJC_IVAR___PBDataReader__error;
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v11 = 0LL;
      }
      else {
        unint64_t v11 = v6;
      }
LABEL_14:
      if (*(_BYTE *)(a2 + v12)) {
        BOOL v13 = 1;
      }
      else {
        BOOL v13 = (v11 & 7) == 4;
      }
      if (v13) {
        return;
      }
      switch((v11 >> 3))
      {
        case 1u:
          char v14 = 0;
          unsigned int v15 = 0;
          uint64_t v16 = 0LL;
          *(_BYTE *)(a1 + 40) |= 1u;
          while (1)
          {
            uint64_t v17 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v18 = v17 + 1;
            if (v17 == -1) {
              goto LABEL_43;
            }
            if (v18 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v19 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18;
            v16 |= (unint64_t)(v19 & 0x7F) << v14;
            if ((v19 & 0x80) == 0) {
              goto LABEL_38;
            }
            v14 += 7;
            BOOL v10 = v15++ >= 9;
            if (v10)
            {
              uint64_t v16 = 0LL;
              goto LABEL_40;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v16 = 0LL;
          }
LABEL_40:
          *(void *)(a1 + 8) = v16;
          goto LABEL_1;
        case 2u:
          int v20 = objc_alloc_init(&OBJC_CLASS___AWDHeaderInfoS);
          objc_storeStrong((id *)(a1 + 16), v20);
          sub_10012DC90((uint64_t)v20, a2);
          if ((v21 & 1) == 0) {
            goto LABEL_42;
          }
          goto LABEL_36;
        case 3u:
          int v20 = objc_alloc_init(&OBJC_CLASS___AWDCountersIpv6S);
          objc_storeStrong((id *)(a1 + 24), v20);
          goto LABEL_36;
        case 4u:
          int v20 = objc_alloc_init(&OBJC_CLASS___AWDCountersThreadMleS);
          objc_storeStrong((id *)(a1 + 32), v20);
          if (!PBReaderPlaceMark(a2, v25) || (sub_1000B3F64((uint64_t)v20, a2, v22, v23, v24) & 1) == 0)
          {
LABEL_42:

            return;
          }

double sub_100156D24(uint64_t a1)
{
  *(_DWORD *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_WORD *)a1 = -1;
  return result;
}

uint64_t sub_100156D40(uint64_t result, uint64_t a2)
{
  *(_OWORD *)(result + 1) = 0u;
  *(_DWORD *)(result + 48) = 0;
  *(_OWORD *)(result + 33) = 0u;
  *(_OWORD *)(result + 17) = 0u;
  *(_BYTE *)double result = -1;
  *(_BYTE *)(result + 1) = -1;
  if ((*(_BYTE *)a2 & 0xF0) == 0x60)
  {
    int v2 = *(unsigned __int8 *)(a2 + 6);
    *(_BYTE *)double result = v2;
    *(_BYTE *)(result + 1) = -1;
    if (v2 == 17 || v2 == 6)
    {
      *(_WORD *)(result + 26) = *(_WORD *)(a2 + 40);
      *(_BYTE *)(result + 28) = 1;
      *(_WORD *)(result + 2) = *(_WORD *)(a2 + 42);
      *(_BYTE *)(result + 4) = 1;
    }

    else
    {
      *(_WORD *)(result + 26) = 0;
      *(_BYTE *)(result + 28) = 0;
      *(_WORD *)(result + 2) = 0;
      *(_BYTE *)(result + 4) = 0;
      if (v2 == 58) {
        *(_BYTE *)(result + 1) = *(_BYTE *)(a2 + 40);
      }
    }

    int v3 = *(unsigned __int8 *)(a2 + 24);
    *(void *)unsigned int v5 = *(void *)(a2 + 25);
    *(void *)&_OWORD v5[7] = *(void *)(a2 + 32);
    if (v3 == 255)
    {
      char v4 = 0;
    }

    else
    {
      *(_BYTE *)(result + 8) = v3;
      *(void *)(result + 9) = *(void *)v5;
      *(void *)(result + 16) = *(void *)&v5[7];
      char v4 = 0x80;
    }

    *(_BYTE *)(result + 24) = v4;
    *(void *)&__int128 v6 = *(void *)(a2 + 9);
    *(void *)((char *)&v6 + 7) = *(void *)(a2 + 16);
    *(_BYTE *)(result + 32) = *(_BYTE *)(a2 + 8);
    *(void *)(result + 33) = v6;
    *(void *)(result + memset(&v22.ai_socktype, 0, 40) = *(void *)((char *)&v6 + 7);
    *(_BYTE *)(result + 48) = 0x80;
  }

  return result;
}

BOOL sub_100156E80(unsigned __int8 *a1, uint64_t a2)
{
  if ((*(_BYTE *)a2 & 0xF0) != 0x60) {
    return 0LL;
  }
  int v3 = *a1;
  if (v3 == 254) {
    return 0LL;
  }
  if (v3 != 255)
  {
    int v5 = a1[1];
  }

  unsigned int v6 = a1[24];
  if (a1[24])
  {
    __int128 v11 = *(_OWORD *)(a2 + 24);
    sub_100148E5C((uint64_t)&v11, v6);
    if ((void)v11 != *((void *)a1 + 1) || *((void *)&v11 + 1) != *((void *)a1 + 2)) {
      return 0LL;
    }
  }

  unsigned int v8 = a1[48];
  if (!a1[48]) {
    return 1LL;
  }
  __int128 v11 = *(_OWORD *)(a2 + 8);
  sub_100148E5C((uint64_t)&v11, v8);
  return (void)v11 == *((void *)a1 + 4) && *((void *)&v11 + 1) == *((void *)a1 + 5);
}

__n128 sub_100156F84(uint64_t a1, uint64_t a2)
{
  result.n128_u64[0] = 0LL;
  *(_OWORD *)(a1 + 1) = 0u;
  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 33) = 0u;
  *(_OWORD *)(a1 + 17) = 0u;
  *(_BYTE *)a1 = -1;
  *(_BYTE *)(a1 + 1) = -1;
  if ((*(_BYTE *)a2 & 0xF0) == 0x60)
  {
    int v3 = *(unsigned __int8 *)(a2 + 6);
    *(_BYTE *)a1 = v3;
    *(_BYTE *)(a1 + 1) = -1;
    if (v3 == 17 || v3 == 6)
    {
      *(_WORD *)(a1 + 26) = *(_WORD *)(a2 + 42);
      *(_BYTE *)(a1 + 28) = 1;
      *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 40);
      *(_BYTE *)(a1 + 4) = 1;
    }

    else
    {
      *(_WORD *)(a1 + 26) = 0;
      *(_BYTE *)(a1 + 28) = 0;
      *(_WORD *)(a1 + 2) = 0;
      *(_BYTE *)(a1 + 4) = 0;
      if (v3 == 58) {
        *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 40);
      }
    }

    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 24) = 0x80;
    __n128 result = *(__n128 *)(a2 + 24);
    *(__n128 *)(a1 + 32) = result;
    *(_BYTE *)(a1 + 48) = 0x80;
  }

  return result;
}

BOOL sub_10015702C(unsigned __int8 *a1, uint64_t a2)
{
  if ((*(_BYTE *)a2 & 0xF0) != 0x60) {
    return 0LL;
  }
  int v3 = *a1;
  if (v3 == 254) {
    return 0LL;
  }
  if (v3 != 255)
  {
    int v5 = a1[1];
  }

  unsigned int v6 = a1[24];
  if (a1[24])
  {
    __int128 v11 = *(_OWORD *)(a2 + 8);
    sub_100148E5C((uint64_t)&v11, v6);
    if ((void)v11 != *((void *)a1 + 1) || *((void *)&v11 + 1) != *((void *)a1 + 2)) {
      return 0LL;
    }
  }

  unsigned int v8 = a1[48];
  if (!a1[48]) {
    return 1LL;
  }
  __int128 v11 = *(_OWORD *)(a2 + 24);
  sub_100148E5C((uint64_t)&v11, v8);
  return (void)v11 == *((void *)a1 + 4) && *((void *)&v11 + 1) == *((void *)a1 + 5);
}

BOOL sub_100157130(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2
    || a1[1] != a2[1]
    || *((unsigned __int16 *)a1 + 1) != *((unsigned __int16 *)a2 + 1)
    || a1[4] != a2[4]
    || a1[24] != a2[24])
  {
    return 0LL;
  }

  BOOL v2 = *((void *)a1 + 1) == *((void *)a2 + 1) && *((void *)a1 + 2) == *((void *)a2 + 2);
  return *((void *)a1 + 4) == *((void *)a2 + 4) && *((void *)a1 + 5) == *((void *)a2 + 5);
}

uint64_t sub_1001571E4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  if (v2 < v3) {
    return 1LL;
  }
  if (v2 > v3) {
    return 0LL;
  }
  unsigned int v5 = a1[1];
  unsigned int v6 = a2[1];
  if (v5 < v6) {
    return 1LL;
  }
  if (v5 > v6) {
    return 0LL;
  }
  unsigned int v7 = *((unsigned __int16 *)a1 + 1);
  unsigned int v8 = *((unsigned __int16 *)a2 + 1);
  if (v7 < v8) {
    return 1LL;
  }
  if (v7 > v8) {
    return 0LL;
  }
  unsigned int v9 = a1[4];
  unsigned int v10 = a2[4];
  if (v9 < v10) {
    return 1LL;
  }
  if (v9 > v10) {
    return 0LL;
  }
  unsigned int v11 = a1[24];
  unsigned int v12 = a2[24];
  if (v11 < v12) {
    return 1LL;
  }
  if (v11 > v12) {
    return 0LL;
  }
  unint64_t v13 = bswap64(*((void *)a1 + 1));
  unint64_t v14 = bswap64(*((void *)a2 + 1));
  if (v13 == v14 && (unint64_t v13 = bswap64(*((void *)a1 + 2)), v14 = bswap64(*((void *)a2 + 2)), v13 == v14)) {
    int v15 = 0;
  }
  else {
    int v15 = v13 < v14 ? -1 : 1;
  }
  if (v15 < 0) {
    return 1LL;
  }
  if (v15) {
    return 0LL;
  }
  unsigned int v16 = *((unsigned __int16 *)a1 + 13);
  unsigned int v17 = *((unsigned __int16 *)a2 + 13);
  if (v16 < v17) {
    return 1LL;
  }
  if (v16 > v17) {
    return 0LL;
  }
  unsigned int v18 = a1[28];
  unsigned int v19 = a2[28];
  if (v18 < v19) {
    return 1LL;
  }
  if (v18 > v19) {
    return 0LL;
  }
  unsigned int v20 = a1[48];
  unsigned int v21 = a2[48];
  if (v20 < v21) {
    return 1LL;
  }
  if (v20 > v21) {
    return 0LL;
  }
  unint64_t v22 = bswap64(*((void *)a1 + 4));
  unint64_t v23 = bswap64(*((void *)a2 + 4));
  if (v22 == v23 && (unint64_t v22 = bswap64(*((void *)a1 + 5)), v23 = bswap64(*((void *)a2 + 5)), v22 == v23))
  {
    unsigned int v24 = 0;
  }

  else if (v22 < v23)
  {
    unsigned int v24 = -1;
  }

  else
  {
    unsigned int v24 = 1;
  }

  return v24 >> 31;
}

void *sub_10015732C(void *a1, uint64_t a2)
{
  unsigned int v3 = a1 + 1;
  unsigned int v2 = (void *)*a1;
  unsigned int v6 = v2;
  if (v2 != a1 + 1)
  {
    while (!sub_10015702C((unsigned __int8 *)v2 + 28, a2))
    {
      sub_10000B338((uint64_t)&v6);
      unsigned int v2 = v6;
      if (v6 == v3) {
        return v3;
      }
    }

    return v6;
  }

  return v3;
}

void *sub_100157394(void *a1, uint64_t a2)
{
  unsigned int v3 = a1 + 1;
  unsigned int v2 = (void *)*a1;
  unsigned int v6 = v2;
  if (v2 != a1 + 1)
  {
    while (!sub_100156E80((unsigned __int8 *)v2 + 28, a2))
    {
      sub_10000B338((uint64_t)&v6);
      unsigned int v2 = v6;
      if (v6 == v3) {
        return v3;
      }
    }

    return v6;
  }

  return v3;
}

void sub_1001573FC(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  int v8 = sub_10015A044(0);
  char v9 = v8;
  sub_10015A044(v8);
  if ((v9 & 0x40) != 0)
  {
    memset(v41, 0, sizeof(v41));
    __int128 v40 = 0u;
    *(_WORD *)unsigned int v39 = 14906;
    memset(v38, 0, sizeof(v38));
    __int128 v37 = 0u;
    *(_WORD *)uint64_t v36 = 14906;
    int v10 = *(unsigned __int8 *)(a1 + 6);
    sub_1001578EC(v35, a1, a2);
    unsigned int v11 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v11)
    {
      unsigned int v12 = v11;
      if (sub_10015A058(6) && os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        unint64_t v13 = "";
        *(_DWORD *)std::string buf = 67110146;
        *(_DWORD *)__int16 v29 = a2;
        *(_WORD *)&v29[4] = 1024;
        if (a4) {
          unint64_t v13 = " [DROPPED]";
        }
        *(_DWORD *)&v29[6] = v10;
        *(_WORD *)int v30 = 2080;
        *(void *)&__int128 v30[2] = v35;
        __int16 v31 = 2080;
        uint64_t v32 = a3;
        __int16 v33 = 2080;
        int v34 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "[->NCP] IPv6 len:%d type:%d%s [%s]%s",  buf,  0x2Cu);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    __int128 v27 = *(_OWORD *)(a1 + 8);
    inet_ntop(30, &v27, v36, 0x2Eu);
    __int128 v27 = *(_OWORD *)(a1 + 24);
    inet_ntop(30, &v27, v39, 0x2Eu);
    if (v10 == 17 || v10 == 6)
    {
      unsigned int v14 = *(unsigned __int16 *)(a1 + 42);
      unsigned int v15 = *(unsigned __int16 *)(a1 + 40);
      unsigned int v16 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v16)
      {
        unsigned int v17 = v16;
        if (sub_10015A058(6) && os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)__int16 v29 = v39;
          *(_WORD *)&v29[8] = 1024;
          *(_DWORD *)int v30 = __rev16(v14);
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "\tto(remote):[%s]:%d", buf, 0x12u);
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }

      unsigned int v20 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v20)
      {
        unsigned int v21 = v20;
        if (sub_10015A058(6))
        {
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)std::string buf = 136315394;
            *(void *)__int16 v29 = v36;
            *(_WORD *)&v29[8] = 1024;
            *(_DWORD *)int v30 = __rev16(v15);
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "\tfrom(local):[%s]:%d", buf, 0x12u);
          }
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }
    }

    else
    {
      unsigned int v18 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v18)
      {
        unsigned int v19 = v18;
        if (sub_10015A058(6) && os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 136315138;
          *(void *)__int16 v29 = v39;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "\tto(remote):[%s]", buf, 0xCu);
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }

      unint64_t v22 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v22)
      {
        unint64_t v23 = v22;
        if (sub_10015A058(6) && os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 136315138;
          *(void *)__int16 v29 = v36;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "\tfrom(local):[%s]", buf, 0xCu);
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }

      if (v10 == 58)
      {
        int v24 = *(unsigned __int8 *)(a1 + 40);
        __int16 v25 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v25)
        {
          int v26 = v25;
          if (sub_10015A058(6) && os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)std::string buf = 67109120;
            *(_DWORD *)__int16 v29 = v24;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "\ticmp type:[%d]", buf, 8u);
          }
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FB53C();
        }

        sub_10015795C((unsigned __int8 *)a1, a2);
      }
    }
  }

char *sub_1001578EC(char *result, uint64_t a2, unint64_t a3)
{
  int v3 = *(unsigned __int8 *)(a2 + 6);
  if (v3 == 17)
  {
    if (a3 >= 0x30)
    {
      unsigned int v4 = *(unsigned __int16 *)(a2 + 46);
      goto LABEL_9;
    }
  }

  else
  {
    if (v3 != 6)
    {
      *__n128 result = 0;
      return result;
    }

    if (a3 >= 0x3A)
    {
      unsigned int v4 = *(unsigned __int16 *)(a2 + 56);
LABEL_9:
      unsigned int v5 = __rev16(v4);
      return (char *)snprintf(result, 0x20uLL, "(cksum 0x%04x)", v5);
    }
  }

  unsigned int v5 = 0;
  return (char *)snprintf(result, 0x20uLL, "(cksum 0x%04x)", v5);
}

void sub_10015795C(unsigned __int8 *a1, int a2)
{
  if (a1 && a2)
  {
    int v3 = a1;
    bzero(v14, 0x5E6uLL);
    for (uint64_t i = 0LL; i != 1500; i += 3LL)
    {
      int v5 = *v3++;
      snprintf(&v14[i], 0x5E6uLL, " %02X", v5);
    }

    unsigned int v6 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v6)
    {
      unsigned int v7 = v6;
      if (sub_10015A058(6) && os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, " \n ", buf, 2u);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    int v8 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v8)
    {
      char v9 = v8;
      if (sub_10015A058(6))
      {
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 67109378;
          int v11 = a2;
          __int16 v12 = 2080;
          unint64_t v13 = v14;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  " *****ICMP packet dump****** len[%d] 0x[%s]",  buf,  0x12u);
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }
  }

void sub_100157B24(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  int v8 = sub_10015A044(0);
  char v9 = v8;
  sub_10015A044(v8);
  if ((v9 & 0x40) != 0)
  {
    memset(v41, 0, sizeof(v41));
    __int128 v40 = 0u;
    *(_WORD *)unsigned int v39 = 14906;
    memset(v38, 0, sizeof(v38));
    __int128 v37 = 0u;
    *(_WORD *)uint64_t v36 = 14906;
    int v10 = *(unsigned __int8 *)(a1 + 6);
    sub_1001578EC(v35, a1, a2);
    int v11 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
    if (v11)
    {
      __int16 v12 = v11;
      if (sub_10015A058(6) && os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        unint64_t v13 = "";
        *(_DWORD *)std::string buf = 67110146;
        *(_DWORD *)__int16 v29 = a2;
        *(_WORD *)&v29[4] = 1024;
        if (a4) {
          unint64_t v13 = " [DROPPED]";
        }
        *(_DWORD *)&v29[6] = v10;
        *(_WORD *)int v30 = 2080;
        *(void *)&__int128 v30[2] = v35;
        __int16 v31 = 2080;
        uint64_t v32 = a3;
        __int16 v33 = 2080;
        int v34 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "[NCP->] IPv6 len:%d type:%d%s [%s]%s",  buf,  0x2Cu);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FB53C();
    }

    __int128 v27 = *(_OWORD *)(a1 + 8);
    inet_ntop(30, &v27, v36, 0x2Eu);
    __int128 v27 = *(_OWORD *)(a1 + 24);
    inet_ntop(30, &v27, v39, 0x2Eu);
    if (v10 == 17 || v10 == 6)
    {
      unsigned int v14 = *(unsigned __int16 *)(a1 + 42);
      unsigned int v15 = *(unsigned __int16 *)(a1 + 40);
      unsigned int v16 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v16)
      {
        unsigned int v17 = v16;
        if (sub_10015A058(6) && os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)__int16 v29 = v39;
          *(_WORD *)&v29[8] = 1024;
          *(_DWORD *)int v30 = __rev16(v14);
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "\tto(local):[%s]:%d", buf, 0x12u);
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }

      unsigned int v20 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v20)
      {
        unsigned int v21 = v20;
        if (sub_10015A058(6))
        {
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)std::string buf = 136315394;
            *(void *)__int16 v29 = v36;
            *(_WORD *)&v29[8] = 1024;
            *(_DWORD *)int v30 = __rev16(v15);
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "\tfrom(remote):[%s]:%d", buf, 0x12u);
          }
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }
    }

    else
    {
      unsigned int v18 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v18)
      {
        unsigned int v19 = v18;
        if (sub_10015A058(6) && os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 136315138;
          *(void *)__int16 v29 = v39;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "\tto(local):[%s]", buf, 0xCu);
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }

      unint64_t v22 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
      if (v22)
      {
        unint64_t v23 = v22;
        if (sub_10015A058(6) && os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 136315138;
          *(void *)__int16 v29 = v36;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "\tfrom(remote):[%s]", buf, 0xCu);
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1001FB53C();
      }

      if (v10 == 58)
      {
        int v24 = *(unsigned __int8 *)(a1 + 40);
        __int16 v25 = (os_log_s *)sub_1000160F4("com.apple.wpantund", "default");
        if (v25)
        {
          int v26 = v25;
          if (sub_10015A058(6) && os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)std::string buf = 67109120;
            *(_DWORD *)__int16 v29 = v24;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "\ticmp type:[%d]", buf, 8u);
          }
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1001FB53C();
        }

        sub_10015795C((unsigned __int8 *)a1, a2);
      }
    }
  }

uint64_t sub_100158014(char *a1, char a2)
{
  unsigned int v4 = sub_1000AD5C0();
  return sub_100014C3C((uint64_t)v4 + 42016, a1, a2);
}

uint64_t sub_100158050(uint64_t a1, char *a2, int a3)
{
  return sub_100015968(a2, a3);
}

uint64_t sub_10015805C()
{
  return 0xFFFFFFFFLL;
}

void sub_1001582FC(uint64_t a1, uint64_t a2)
{
LABEL_1:
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
    || *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
  {
    return;
  }

  char v4 = 0;
  unsigned int v5 = 0;
  unint64_t v6 = 0LL;
  while (1)
  {
    uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
    unint64_t v8 = v7 + 1;
    if (v7 == -1) {
      break;
    }
    if (v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
    {
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      uint64_t v12 = OBJC_IVAR___PBDataReader__error;
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v11 = 0LL;
      }
      else {
        unint64_t v11 = v6;
      }
LABEL_14:
      if (*(_BYTE *)(a2 + v12)) {
        BOOL v13 = 1;
      }
      else {
        BOOL v13 = (v11 & 7) == 4;
      }
      if (v13) {
        return;
      }
      switch((v11 >> 3))
      {
        case 1u:
          char v14 = 0;
          unsigned int v15 = 0;
          uint64_t v16 = 0LL;
          *(_BYTE *)(a1 + 48) |= 1u;
          while (1)
          {
            uint64_t v17 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v18 = v17 + 1;
            if (v17 == -1) {
              goto LABEL_46;
            }
            if (v18 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v19 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18;
            v16 |= (unint64_t)(v19 & 0x7F) << v14;
            if ((v19 & 0x80) == 0) {
              goto LABEL_41;
            }
            v14 += 7;
            BOOL v10 = v15++ >= 9;
            if (v10)
            {
              uint64_t v16 = 0LL;
              goto LABEL_43;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_41:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v16 = 0LL;
          }
LABEL_43:
          *(void *)(a1 + 8) = v16;
          goto LABEL_1;
        case 2u:
          unsigned int v20 = objc_alloc_init(&OBJC_CLASS___AWDHeaderInfoS);
          objc_storeStrong((id *)(a1 + 16), v20);
          sub_10012DC90((uint64_t)v20, a2);
          if ((v21 & 1) == 0) {
            goto LABEL_45;
          }
          goto LABEL_39;
        case 3u:
          unsigned int v20 = objc_alloc_init(&OBJC_CLASS___AWDCountersEngagementS);
          objc_storeStrong((id *)(a1 + 32), v20);
          goto LABEL_39;
        case 4u:
          unsigned int v20 = objc_alloc_init(&OBJC_CLASS___AWDCountersDiscoveryJoinS);
          objc_storeStrong((id *)(a1 + 24), v20);
          sub_1000FA908((uint64_t)v20, a2);
          if ((v22 & 1) == 0) {
            goto LABEL_45;
          }
          goto LABEL_39;
        case 5u:
          unsigned int v20 = objc_alloc_init(&OBJC_CLASS___AWDCountersReachabilityS);
          objc_storeStrong((id *)(a1 + 40), v20);
          if (!PBReaderPlaceMark(a2, v23) || (sub_100105888((uint64_t)v20, a2) & 1) == 0)
          {
LABEL_45:

            return;
          }

void sub_10015920C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10015921C(uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  *(void *)a2 = 0LL;
  *((void *)a2 + 1) = 0LL;
  char v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4) {
    sub_10000ABAC(v4);
  }
  return a1;
}

void sub_1001592F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100159384( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100159404( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001594B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001596C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10015977C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100159820(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100159894( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001598C0(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    unint64_t v3 = 0LL;
    unint64_t v4 = a3 - 1;
    while (v4 >= v3)
    {
      *(_BYTE *)(result + v3) = *(_BYTE *)(a2 + v4 - v3);
      if (a3 == ++v3) {
        return result;
      }
    }

    __break(0x5515u);
  }

  return result;
}

uint64_t sub_1001598F0(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (a3)
  {
    unint64_t v3 = 0LL;
    unint64_t v4 = a3 - 1;
    while (1)
    {
      unint64_t v5 = v4 - v3;
      if (v4 < v3) {
        break;
      }
      int v6 = *(unsigned __int8 *)(result + v3++);
      uint64_t v7 = v6 - *(unsigned __int8 *)(a2 + v5);
      if (v3 >= a3 || (_DWORD)v7) {
        return v7;
      }
    }

    __break(0x5515u);
  }

  else
  {
    return 0LL;
  }

  return result;
}

uint64_t sub_100159934(uint64_t result, unint64_t a2)
{
  if (a2 >= 2)
  {
    unint64_t v2 = 0LL;
    while (a2 > v2)
    {
      char v3 = *(_BYTE *)(result + v2);
      uint64_t v4 = a2 - v2 + result;
      *(_BYTE *)(result + v2) = *(_BYTE *)(v4 - 1);
      *(_BYTE *)(v4 - 1) = v3;
      if (a2 >> 1 == ++v2) {
        return result;
      }
    }

    __break(0x5515u);
  }

  return result;
}

uint64_t sub_100159978(_BYTE *a1, uint64_t a2, _BYTE *a3)
{
  if (a1) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = 0LL;
  }
  char v4 = *a3;
  if (*a3) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    int v6 = a3;
    uint64_t v7 = a1;
    uint64_t v8 = 0LL;
    while (1)
    {
      char v9 = v6 + 1;
      uint64_t result = __tolower(v4);
      if ((result - 48) < 0xA || (result - 97) < 6)
      {
        else {
          char v12 = 0;
        }
        *uint64_t v7 = 16 * (result + v12);
        BOOL v13 = __OFADD__((_DWORD)v8, 1);
        uint64_t v8 = (v8 + 1);
        if (v13)
        {
          __break(0x5500u);
          return result;
        }

        __darwin_ct_rune_t v14 = (char)*v9;
        if (!*v9) {
          return v8;
        }
        --v3;
        char v9 = v6 + 2;
        __darwin_ct_rune_t v15 = __tolower(v14);
        if ((v15 - 48) < 0xA || (v15 - 97) <= 5)
        {
          else {
            char v17 = -48;
          }
          *v7++ |= (_BYTE)v15 + v17;
        }
      }

      char v4 = *v9;
      if (*v9) {
        BOOL v18 = v3 == 0;
      }
      else {
        BOOL v18 = 1;
      }
      int v6 = v9;
      if (v18) {
        return v8;
      }
    }
  }

  return 0LL;
}

unint64_t sub_100159A78(unint64_t result, uint64_t a2, _BYTE *a3, unint64_t a4, int a5)
{
  unint64_t v5 = 0LL;
  if (a2 && a4 >= 3)
  {
    int v6 = 0;
    uint64_t v7 = a2 - 1;
    while (!__OFSUB__(a5--, 1))
    {
      unint64_t v9 = *(unsigned __int8 *)result;
      *a3 = a0123456789abcd_0[v9 >> 4];
      a3[1] = a0123456789abcd_0[v9 & 0xF];
      unint64_t v5 = (v6 + 2);
      if (__OFADD__(v6, 2)) {
        goto LABEL_18;
      }
      a3 += 2;
      a4 -= 2LL;
      if (v7-- != 0)
      {
        ++result;
        v6 += 2;
        if (a4 > 2) {
          continue;
        }
      }

      goto LABEL_9;
    }
  }

  else
  {
LABEL_9:
    if (a5 < 1 || a4 < 3)
    {
      uint64_t result = v5;
LABEL_16:
      if (a4)
      {
        *a3 = 0;
        return result;
      }
    }

    else
    {
      while (1)
      {
        *(_WORD *)a3 = 12336;
        uint64_t result = (v5 + 2);
        if (__OFADD__((_DWORD)v5, 2)) {
          break;
        }
        a3 += 2;
        a4 -= 2LL;
        if (a5 >= 2)
        {
          --a5;
          LODWORD(v5) = v5 + 2;
          if (a4 > 2) {
            continue;
          }
        }

        goto LABEL_16;
      }

unint64_t sub_100159B40(const char *a1)
{
  unsigned int v1 = *a1 - 70;
  if (v1 < 0x34 && ((0x8410100084101uLL >> v1) & 1) != 0) {
    return (0xFFEFEFFFFFEFEuLL >> v1) & 1;
  }
  else {
    return strtol(a1, 0LL, 0) != 0;
  }
}

uint64_t sub_100159BA0(const char *a1)
{
  unsigned int v1 = strdup(a1);
  unint64_t v2 = strtok(v1, ",");
  if (v2)
  {
    uint64_t v3 = v2;
    LODWORD(v4) = 0;
    while (1)
    {
      unint64_t v5 = strchr(v3, 45);
      if (v5) {
        break;
      }
      uint64_t v4 = (1 << strtol(v3, 0LL, 0)) | v4;
LABEL_14:
      uint64_t v3 = strtok(0LL, ",");
      if (!v3) {
        goto LABEL_17;
      }
    }

    *unint64_t v5 = 0;
    int v6 = v5 + 1;
    int v7 = atoi(v3);
    uint64_t result = atoi(v6);
    else {
      int v9 = v7;
    }
    else {
      int v10 = v7;
    }
    while (1)
    {
      int v11 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        break;
      }
      uint64_t v4 = v4 | (1 << v9++);
      if (v11 > v10) {
        goto LABEL_14;
      }
    }

    __break(0x5500u);
  }

  else
  {
    uint64_t v4 = 0LL;
LABEL_17:
    free(v1);
    return v4;
  }

  return result;
}

uint64_t sub_100159C90(const char *a1, uint64_t a2)
{
  uint64_t result = strtol(a1, 0LL, 0);
  if (!(_DWORD)result)
  {
    if (strcasestr(a1, "all"))
    {
      if (strcasestr(a1, "-all")) {
        a2 = 0LL;
      }
      else {
        a2 = 0xFFFFFFFFLL;
      }
    }

    if (strcasestr(a1, "emerg"))
    {
      if (strcasestr(a1, "-emerg")) {
        a2 = a2 & 0xFFFFFFFE;
      }
      else {
        a2 = a2 | 1;
      }
    }

    if (strcasestr(a1, "alert"))
    {
      if (strcasestr(a1, "-alert")) {
        a2 = a2 & 0xFFFFFFFD;
      }
      else {
        a2 = a2 | 2;
      }
    }

    if (strcasestr(a1, "crit"))
    {
      if (strcasestr(a1, "-crit")) {
        a2 = a2 & 0xFFFFFFFB;
      }
      else {
        a2 = a2 | 4;
      }
    }

    if (strcasestr(a1, "err"))
    {
      if (strcasestr(a1, "-err")) {
        a2 = a2 & 0xFFFFFFF7;
      }
      else {
        a2 = a2 | 8;
      }
    }

    if (strcasestr(a1, "warn"))
    {
      if (strcasestr(a1, "-warn")) {
        a2 = a2 & 0xFFFFFFEF;
      }
      else {
        a2 = a2 | 0x10;
      }
    }

    if (strcasestr(a1, "notice"))
    {
      if (strcasestr(a1, "-notice")) {
        a2 = a2 & 0xFFFFFFDF;
      }
      else {
        a2 = a2 | 0x20;
      }
    }

    if (strcasestr(a1, "info"))
    {
      if (strcasestr(a1, "-info")) {
        a2 = a2 & 0xFFFFFFBF;
      }
      else {
        a2 = a2 | 0x40;
      }
    }

    if (strcasestr(a1, "debug"))
    {
      if (strcasestr(a1, "-debug")) {
        return a2 & 0xFFFFFF7F;
      }
      else {
        return a2 | 0x80;
      }
    }

    else
    {
      return a2;
    }
  }

  return result;
}

BOOL sub_100159E98(unsigned __int8 *a1, uint64_t a2)
{
  do
  {
    uint64_t v2 = a2;
    if (a2-- == 0) {
      break;
    }
  }

  while (!*a1++);
  return v2 != 0;
}

unsigned __int8 *sub_100159EB8(unsigned __int8 *result, uint64_t a2)
{
  do
  {
    if (a2-- == 0)
    {
      __break(0x5515u);
      return result;
    }

    int v3 = *result++;
  }

  while ((_DefaultRuneLocale.__runetype[v3] & 0x10000) != 0);
  return 0LL;
}

uint64_t sub_100159EE4(char *a1, uint64_t a2)
{
  uint64_t v2 = a2 - 1;
  if (a2)
  {
    while (1)
    {
      int v4 = *a1;
      __uint32_t v5 = *a1 < 0
      BOOL v6 = !v5 && (v4 - 48) >= 0xA;
      if (v6) {
        break;
      }
      ++a1;
      BOOL v6 = v2-- != 0;
      if (!v6) {
        goto LABEL_10;
      }
    }
  }

  else
  {
LABEL_10:
    __break(0x5515u);
  }

  return 0LL;
}

uint64_t sub_100159F64(uint64_t result)
{
  *(void *)uint64_t result = off_1002B4610;
  *(_WORD *)(result + 8) = 0;
  *(void *)(result + 16) = 0LL;
  return result;
}

__darwin_time_t sub_100159F84(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  __darwin_time_t result = sub_10014314C();
  if (!__OFSUB__(v1, result)) {
    return (v1 - result) & ~((v1 - result) >> 63);
  }
  __break(0x5515u);
  return result;
}

__darwin_time_t sub_100159FC0(uint64_t a1, float a2)
{
  __darwin_time_t result = sub_10014314C();
  uint64_t v5 = (uint64_t)(float)(a2 * 1000.0);
  BOOL v6 = __OFADD__(result, v5);
  __darwin_time_t v7 = result + v5;
  if (v6) {
    __break(0x5500u);
  }
  else {
    *(void *)(a1 + 16) = v7;
  }
  return result;
}

uint64_t sub_10015A00C(uint64_t result)
{
  *(void *)(result + 16) = 0LL;
  return result;
}

uint64_t sub_10015A014( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 24LL))(a1, a2, &a9);
}

uint64_t sub_10015A044(int a1)
{
  uint64_t v1 = qword_1002C9368;
  LODWORD(qword_1002C9368) = a1;
  return v1;
}

uint64_t sub_10015A058(char a1)
{
  return (qword_1002C9368 >> a1) & 1;
}

void *sub_10015A06C(void *result)
{
  *__darwin_time_t result = 0LL;
  result[1] = 0LL;
  return result;
}

void *sub_10015A074(void *a1, const std::string *a2)
{
  int v4 = (std::string *)operator new(0x38uLL);
  sub_10015A2C8(v4, a2);
  return sub_10015A594(a1, (uint64_t)v4);
}

void sub_10015A0B8(_Unwind_Exception *a1)
{
}

std::string *sub_10015A0D0(std::string **a1, const std::string *a2)
{
  uint64_t v2 = *a1;
  __darwin_time_t result = std::string::operator=(*a1, a2);
  v2[1].__r_.__value_.__s.__data_[0] = 1;
  return result;
}

uint64_t sub_10015A0FC(uint64_t *a1, const std::string *a2)
{
  uint64_t v2 = *a1;
  std::string::basic_string(&v5, a2);
  uint64_t v3 = sub_10015A168(v2, (const void **)&v5.__r_.__value_.__l.__data_);
  return v3;
}

void sub_10015A14C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10015A168(uint64_t a1, const void **a2)
{
  uint64_t v2 = a1 + 32;
  uint64_t v3 = a1 + 40;
  if (a1 + 40 != sub_1000AA160(a1 + 32, a2)) {
    return 1LL;
  }
  sub_10000AC00(__p, "All");
  BOOL v4 = v3 != sub_1000AA160(v2, (const void **)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return v4;
}

void sub_10015A1E4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const void **sub_10015A200(void **a1, int a2, const void **a3)
{
  BOOL v4 = *a1;
  sub_10015A530(&v6, a3);
  sub_10015A260(v4, a2, (CFArrayRef *)&v6);
  return sub_10015A564(&v6);
}

void sub_10015A24C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10015A260(void *a1, int a2, CFArrayRef *a3)
{
  std::string v5 = *a3;
  v6.length = CFArrayGetCount(*a3);
  if (a2) {
    char v7 = (void (__cdecl *)(const void *, void *))sub_10015A2F0;
  }
  else {
    char v7 = (void (__cdecl *)(const void *, void *))sub_10015A388;
  }
  v6.locatiouint64_t n = 0LL;
  CFArrayApplyFunction(v5, v6, v7, a1);
}

std::string *sub_10015A2BC@<X0>(const std::string **a1@<X0>, std::string *a2@<X8>)
{
  return std::string::basic_string(a2, *a1);
}

std::string *sub_10015A2C8(std::string *a1, const std::string *a2)
{
  __darwin_time_t result = std::string::basic_string(a1, a2);
  result[1].__r_.__value_.__s.__data_[0] = 0;
  result[2].__r_.__value_.__r.__words[0] = 0LL;
  result[1].__r_.__value_.__l.__cap_ = 0LL;
  result[1].__r_.__value_.__l.__size_ = (std::string::size_type)&result[1].__r_.__value_.__l.__cap_;
  return result;
}

void sub_10015A2F0(uint64_t a1, uint64_t a2)
{
  std::string __p = v4;
  sub_10015A41C((uint64_t **)(a2 + 32), (const void **)&__p.__r_.__value_.__l.__data_, &__p);
}

void sub_10015A358( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10015A388(uint64_t a1, uint64_t a2)
{
  __int128 v5 = 0uLL;
  uint64_t v6 = 0LL;
  ctu::cf::assign(&v5, a1);
  *(_OWORD *)std::string __p = v5;
  uint64_t v4 = v6;
  sub_10015A4AC(a2 + 32, (const void **)__p);
  if (SHIBYTE(v4) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10015A3EC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **sub_10015A41C(uint64_t **a1, const void **a2, const std::string *a3)
{
  __int128 v5 = (void ***)sub_10000AE50((uint64_t)a1, &v10, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    char v7 = v5;
    sub_10000CAF8((uint64_t)a1, a3, (uint64_t)v9);
    sub_10000AF70(a1, v10, v7, v9[0]);
    uint64_t v6 = v9[0];
    v9[0] = 0LL;
    sub_10000B1C0(v9, 0LL);
  }

  return v6;
}

uint64_t sub_10015A4AC(uint64_t a1, const void **a2)
{
  uint64_t v3 = sub_1000AA160(a1, a2);
  if (a1 + 8 == v3) {
    return 0LL;
  }
  sub_10015A4F0(a1, v3);
  return 1LL;
}

uint64_t sub_10015A4F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100011598(a1, (uint64_t *)a2);
  operator delete((void *)a2);
  return v3;
}

const void **sub_10015A530(const void **a1, const void **a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  if (v3) {
    CFRetain(v3);
  }
  return a1;
}

const void **sub_10015A564(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *sub_10015A594(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &off_1002B4650;
  v4[1] = 0LL;
  void v4[2] = 0LL;
  _OWORD v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_10015A5E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0LL;
  if (v10) {
    sub_10015A660((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10015A604(std::__shared_weak_count *a1)
{
}

void sub_10015A618(uint64_t a1)
{
}

uint64_t sub_10015A620(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void sub_10015A660(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_10000AD30(a2 + 32);
    operator delete((void *)a2);
  }

void sub_10015A880(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10015AACC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  BOOL v18 = v17;

  objc_sync_exit(v16);
  _Unwind_Resume(a1);
}

void sub_10015AB38(const void **a1)
{
  uint64_t v2 = sub_1000160F4("com.apple.wpantund", "default");
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  if (v3)
  {
    if (sub_10015A058(6))
    {
      uint64_t v4 = v3;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        __int128 v5 = a1;
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "[PowerTable] updateRegionNcp:: New Country [%s]",  buf,  0xCu);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FF028();
  }

  uint64_t v6 = sub_1000AA160((uint64_t)&unk_1002C9C38, a1);
  if ((_UNKNOWN *)v6 == &unk_1002C9C40)
  {
    uint64_t v10 = sub_1000160F4("com.apple.wpantund", "default");
    int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (v11)
    {
      if (sub_10015A058(6) && os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = a1;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "[PowerTable] updateRegionNcp:: Unknown country [%s]",  buf,  0xCu);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FF028();
    }
  }

  else
  {
    int v7 = *(unsigned __int8 *)(v6 + 56);
    uint64_t v8 = sub_1000160F4("com.apple.wpantund", "default");
    int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (v9)
    {
      if (sub_10015A058(6) && os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v7;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "[PowerTable] Country Code[%d]", buf, 8u);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FF028();
    }

    char v12 = operator new(0x10uLL);
    *(void *)char v12 = &off_1002AE118;
    v12[8] = v7;
    __darwin_ct_rune_t v15 = v12;
    uint64_t v13 = qword_1002C9C68;
    sub_10000AC00(buf, "vendor:power:limit:table:active:id");
    v14[1] = sub_10015B388;
    v14[2] = "vendor:power:limit:table:active:id";
    v14[0] = (char *)off_1002B3F00 + 1;
    (*(void (**)(uint64_t, _BYTE *, _BYTE **, void *))(*(void *)v13 + 64LL))(v13, buf, &v15, v14);
    sub_1000075F0(v14);
    if (v17 < 0) {
      operator delete(*(void **)buf);
    }
    if (v15) {
      (*(void (**)(_BYTE *))(*(void *)v15 + 8LL))(v15);
    }
  }

void sub_10015AE28( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_10015AF70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10015AFA4(uint64_t a1)
{
  uint64_t v2 = sub_1000160F4("com.apple.wpantund", "default");
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (v3)
  {
    if (sub_10015A058(6) && os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "[PowerTable] Setting NCP control Interface for Geo services power update",  v4,  2u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FF028();
  }

  qword_1002C9C68 = a1;
}

void sub_10015B058(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10015B068(void *a1)
{
  id v1 = a1;
  if (!qword_1002C9C68)
  {
    uint64_t v2 = sub_1000160F4("com.apple.wpantund", "default");
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (v3)
    {
      if (sub_10015A058(6) && os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "[PowerTable] startGeoServicesHandler: NCP control Interface not set",  buf,  2u);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FF028();
    }
  }

  uint64_t v4 = sub_1000160F4("com.apple.wpantund", "default");
  __int128 v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (v5)
  {
    if (sub_10015A058(6) && os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "[PowerTable]startGeoServicesHandler: Starting GEO Services",  buf,  2u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FF028();
  }

  uint64_t v6 = objc_alloc_init(&OBJC_CLASS___GeoServicesHandler);
  int v7 = (void *)qword_1002C9C70;
  qword_1002C9C70 = (uint64_t)v6;

  [(id)qword_1002C9C70 startMonitoring:v1];
  uint64_t v8 = qword_1002C9C68;
  v9[0] = sub_10015B270;
  sub_10012A114(buf, (uint64_t *)v9);
  sub_10000EEB4(v8 + 104, (uint64_t)buf, 0, &v12);
  sub_10000EF74(&v13);
  sub_10000EFC4(v11);
  __darwin_ct_rune_t v14 = buf;
  sub_10000EFEC((void ***)&v14);
}

void sub_10015B234(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10015B270(const char *a1)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (!strcasecmp(a1, "NCP:Reset"))
  {
    id v1 = sub_1000160F4("com.apple.wpantund", "default");
    uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
    if (v2)
    {
      if (sub_10015A058(6) && os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "country_update_property_changed_handler: NCP reset, configure country zone on NCP",  buf,  2u);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1001FF028();
    }

    std::string::basic_string(&v3, (const std::string *)&qword_1002C9C50);
    sub_10015AB38((const void **)&v3.__r_.__value_.__l.__data_);
  }

void sub_10015B360( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_10015B388(uint64_t *a1, int a2)
{
  uint64_t v4 = sub_1000160F4("com.apple.wpantund", "default");
  __int128 v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (v5)
  {
    if (sub_10015A058(6))
    {
      uint64_t v6 = v5;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        else {
          int v7 = (uint64_t *)*a1;
        }
        int v8 = 136315394;
        int v9 = v7;
        __int16 v10 = 1024;
        int v11 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "[PowerTable]power_limit_set_callback[%s] Retval = %d",  (uint8_t *)&v8,  0x12u);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1001FF028();
  }
}

void sub_10015B498(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10015B4B0(uint64_t a1, std::string *a2, uint64_t a3)
{
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)a1 = a1 + 8;
  sub_10015B4FC((void **)a1, a2, (std::string *)((char *)a2 + 32 * a3));
  return a1;
}

void sub_10015B4E8(_Unwind_Exception *a1)
{
}

void **sub_10015B4FC(void **result, std::string *a2, std::string *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    __int128 v5 = (const void **)result;
    uint64_t v6 = (uint64_t)(result + 1);
    do
    {
      __darwin_time_t result = sub_10015B554(v5, v6, (const void **)&v4->__r_.__value_.__l.__data_, v4);
      uint64_t v4 = (std::string *)((char *)v4 + 32);
    }

    while (v4 != a3);
  }

  return result;
}

void **sub_10015B554(const void **a1, uint64_t a2, const void **a3, std::string *a4)
{
  uint64_t v6 = sub_10000C9A0(a1, a2, &v12, &v11, a3);
  int v7 = (void **)*v6;
  if (!*v6)
  {
    int v8 = v6;
    sub_10015B5E8((uint64_t)a1, a4, (uint64_t)v10);
    sub_10000AF70((uint64_t **)a1, (uint64_t)v12, (void **)v8, v10[0]);
    int v7 = v10[0];
    v10[0] = 0LL;
    sub_10000B1C0(v10, 0LL);
  }

  return v7;
}

std::string *sub_10015B5E8@<X0>(uint64_t a1@<X0>, std::string *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  __darwin_time_t result = sub_10015B654(v5, (std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_10015B63C(_Unwind_Exception *a1)
{
}

std::string *sub_10015B654(int a1, std::string *this, std::string *__str)
{
  __darwin_time_t result = std::string::basic_string(this, __str);
  result[1].__r_.__value_.__s.__data_[0] = __str[1].__r_.__value_.__s.__data_[0];
  return result;
}

void sub_10015B684()
{
  int v0 = objc_autoreleasePoolPush();
  sub_10000AC00(&v2, "XZ");
  char v3 = 0;
  sub_10000AC00(v4, "US");
  char v5 = 1;
  sub_10000AC00(v6, "CA");
  char v7 = 1;
  sub_10000AC00(v8, "MX");
  char v9 = 1;
  sub_10000AC00(v10, "SV");
  char v11 = 1;
  sub_10000AC00(v12, "CO");
  char v13 = 1;
  sub_10000AC00(v14, "PR");
  char v15 = 1;
  sub_10000AC00(v16, "CR");
  char v17 = 1;
  sub_10000AC00(v18, "EC");
  char v19 = 1;
  sub_10000AC00(v20, "AR");
  char v21 = 1;
  sub_10000AC00(v22, "VI");
  char v23 = 1;
  sub_10000AC00(v24, "GT");
  char v25 = 1;
  sub_10000AC00(v26, "BR");
  char v27 = 1;
  sub_10000AC00(v28, "UM");
  char v29 = 1;
  sub_10000AC00(v30, "JP");
  char v31 = 4;
  sub_10000AC00(v32, "AT");
  char v33 = 2;
  sub_10000AC00(v34, "BE");
  char v35 = 2;
  sub_10000AC00(v36, "BG");
  char v37 = 2;
  sub_10000AC00(v38, "CY");
  char v39 = 2;
  sub_10000AC00(v40, "CZ");
  char v41 = 2;
  sub_10000AC00(v42, "DK");
  char v43 = 2;
  sub_10000AC00(v44, "EE");
  char v45 = 2;
  sub_10000AC00(v46, "FR");
  char v47 = 2;
  sub_10000AC00(v48, "FI");
  char v49 = 2;
  sub_10000AC00(v50, "DE");
  char v51 = 2;
  sub_10000AC00(v52, "GR");
  char v53 = 2;
  sub_10000AC00(v54, "HU");
  char v55 = 2;
  sub_10000AC00(v56, "IS");
  char v57 = 2;
  sub_10000AC00(v58, "IT");
  char v59 = 2;
  sub_10000AC00(v60, "IE");
  char v61 = 2;
  sub_10000AC00(v62, "LV");
  char v63 = 2;
  sub_10000AC00(v64, "LI");
  char v65 = 2;
  sub_10000AC00(v66, "LT");
  char v67 = 2;
  sub_10000AC00(v68, "LU");
  char v69 = 2;
  sub_10000AC00(v70, "MT");
  char v71 = 2;
  sub_10000AC00(v72, "NL");
  char v73 = 2;
  sub_10000AC00(v74, "NO");
  char v75 = 2;
  sub_10000AC00(v76, "PL");
  char v77 = 2;
  sub_10000AC00(v78, "PT");
  char v79 = 2;
  sub_10000AC00(v80, "RO");
  char v81 = 2;
  sub_10000AC00(v82, "SK");
  char v83 = 2;
  sub_10000AC00(v84, "SI");
  char v85 = 2;
  sub_10000AC00(v86, "ES");
  char v87 = 2;
  sub_10000AC00(v88, "SE");
  char v89 = 2;
  sub_10000AC00(v90, "CH");
  char v91 = 2;
  sub_10000AC00(v92, "GB");
  char v93 = 2;
  sub_10000AC00(v94, "ZA");
  char v95 = 2;
  sub_10000AC00(v96, "TR");
  char v97 = 2;
  sub_10000AC00(v98, "AE");
  char v99 = 2;
  sub_10000AC00(v100, "SA");
  char v101 = 2;
  sub_10000AC00(v102, "HR");
  char v103 = 2;
  sub_10000AC00(v104, "RS");
  char v105 = 2;
  sub_10000AC00(v106, "AU");
  char v107 = 2;
  sub_10000AC00(v108, "HK");
  char v109 = 2;
  sub_10000AC00(v110, "NZ");
  char v111 = 2;
  sub_10000AC00(v112, "SG");
  char v113 = 2;
  sub_10000AC00(v114, "MY");
  char v115 = 2;
  sub_10000AC00(v116, "VN");
  char v117 = 2;
  sub_10000AC00(v118, "BN");
  char v119 = 2;
  sub_10000AC00(v120, "TH");
  char v121 = 2;
  sub_10000AC00(v122, "KH");
  char v123 = 2;
  sub_10000AC00(v124, "LA");
  char v125 = 2;
  sub_10000AC00(v126, "MM");
  char v127 = 2;
  sub_10000AC00(v128, "CN");
  char v129 = 3;
  sub_10000AC00(v130, "TW");
  char v131 = 1;
  sub_10000AC00(v132, "PK");
  char v133 = 2;
  sub_10000AC00(v134, "NP");
  char v135 = 2;
  sub_10000AC00(v136, "BD");
  char v137 = 2;
  sub_10000AC00(v138, "KR");
  char v139 = 5;
  sub_10000AC00(v140, "CL");
  char v141 = 1;
  sub_10000AC00(v142, "PA");
  char v143 = 1;
  sub_10000AC00(v144, "VE");
  char v145 = 1;
  sub_10000AC00(v146, "UY");
  char v147 = 1;
  sub_10000AC00(v148, "LK");
  char v149 = 2;
  sub_10000AC00(v150, "MV");
  char v151 = 2;
  sub_10000AC00(v152, "AF");
  char v153 = 2;
  sub_10000AC00(v154, "MN");
  char v155 = 2;
  sub_10000AC00(v156, "BT");
  char v157 = 2;
  sub_10000AC00(v158, "MO");
  char v159 = 2;
  sub_10000AC00(v160, "IN");
  char v161 = 1;
  sub_10000AC00(v162, "PH");
  char v163 = 2;
  sub_10000AC00(v164, "PE");
  char v165 = 1;
  sub_10000AC00(v166, "DO");
  char v167 = 1;
  sub_10000AC00(v168, "GU");
  char v169 = 1;
  sub_10000AC00(v170, "FJ");
  char v171 = 2;
  sub_10000AC00(v172, "NC");
  char v173 = 2;
  sub_10000AC00(v174, "PG");
  char v175 = 2;
  sub_10000AC00(v176, "WS");
  char v177 = 2;
  sub_10000AC00(v178, "VU");
  char v179 = 2;
  sub_10000AC00(v180, "RU");
  char v181 = 2;
  sub_10000AC00(v182, "IL");
  char v183 = 2;
  sub_10000AC00(v184, "EG");
  char v185 = 2;
  sub_10000AC00(v186, "KW");
  char v187 = 2;
  sub_10000AC00(v188, "MA");
  char v189 = 2;
  sub_10000AC00(v190, "UA");
  char v191 = 2;
  sub_10000AC00(v192, "BY");
  char v193 = 2;
  sub_10000AC00(v194, "AZ");
  char v195 = 2;
  sub_10000AC00(v196, "KZ");
  char v197 = 2;
  sub_10000AC00(v198, "ID");
  char v199 = 2;
  sub_10000AC00(v200, "HN");
  char v201 = 1;
  sub_10000AC00(v202, "AI");
  char v203 = 1;
  sub_10000AC00(v204, "AG");
  char v205 = 1;
  sub_10000AC00(v206, "AW");
  char v207 = 1;
  sub_10000AC00(v208, "BS");
  char v209 = 1;
  sub_10000AC00(v210, "BB");
  char v211 = 1;
  sub_10000AC00(v212, "BM");
  char v213 = 1;
  sub_10000AC00(v214, "VG");
  char v215 = 1;
  sub_10000AC00(v216, "KY");
  char v217 = 1;
  sub_10000AC00(v218, "DM");
  char v219 = 1;
  sub_10000AC00(v220, "GD");
  char v221 = 1;
  sub_10000AC00(v222, "MS");
  char v223 = 1;
  sub_10000AC00(v224, "NI");
  char v225 = 1;
  sub_10000AC00(v226, "KN");
  char v227 = 1;
  sub_10000AC00(v228, "LC");
  char v229 = 1;
  sub_10000AC00(v230, "VC");
  char v231 = 1;
  sub_10000AC00(v232, "TC");
  char v233 = 1;
  sub_10000AC00(v234, "BO");
  char v235 = 1;
  sub_10000AC00(v236, "JM");
  char v237 = 1;
  sub_10000AC00(v238, "PY");
  char v239 = 1;
  sub_10000AC00(v240, "TT");
  char v241 = 1;
  sub_10000AC00(v242, "AL");
  char v243 = 2;
  sub_10000AC00(v244, "DZ");
  char v245 = 2;
  sub_10000AC00(v246, "AO");
  char v247 = 2;
  sub_10000AC00(v248, "AM");
  char v249 = 2;
  sub_10000AC00(v250, "BJ");
  char v251 = 2;
  sub_10000AC00(v252, "BA");
  char v253 = 2;
  sub_10000AC00(v254, "BI");
  char v255 = 2;
  sub_10000AC00(v256, "BF");
  char v257 = 2;
  sub_10000AC00(v258, "CF");
  char v259 = 2;
  sub_10000AC00(v260, "TD");
  char v261 = 2;
  sub_10000AC00(v262, "CD");
  char v263 = 2;
  sub_10000AC00(v264, "CG");
  char v265 = 2;
  sub_10000AC00(v266, "GQ");
  char v267 = 2;
  sub_10000AC00(v268, "ET");
  char v269 = 2;
  sub_10000AC00(v270, "PF");
  char v271 = 2;
  sub_10000AC00(v272, "GA");
  char v273 = 2;
  sub_10000AC00(v274, "GM");
  char v275 = 2;
  sub_10000AC00(v276, "GH");
  char v277 = 2;
  sub_10000AC00(v278, "GI");
  char v279 = 2;
  sub_10000AC00(v280, "GL");
  char v281 = 2;
  sub_10000AC00(v282, "GP");
  char v283 = 2;
  sub_10000AC00(v284, "GW");
  char v285 = 2;
  sub_10000AC00(v286, "GN");
  char v287 = 2;
  sub_10000AC00(v288, "IQ");
  char v289 = 2;
  sub_10000AC00(v290, "CI");
  char v291 = 2;
  sub_10000AC00(v292, "KE");
  char v293 = 2;
  sub_10000AC00(v294, "KG");
  char v295 = 2;
  sub_10000AC00(v296, "LB");
  char v297 = 2;
  sub_10000AC00(v298, "LS");
  char v299 = 2;
  sub_10000AC00(v300, "LR");
  char v301 = 2;
  sub_10000AC00(v302, "LY");
  char v303 = 2;
  sub_10000AC00(v304, "MK");
  char v305 = 2;
  sub_10000AC00(v306, "MG");
  char v307 = 2;
  sub_10000AC00(v308, "ML");
  char v309 = 2;
  sub_10000AC00(v310, "MQ");
  char v311 = 2;
  sub_10000AC00(v312, "MU");
  char v313 = 2;
  sub_10000AC00(v314, "MD");
  char v315 = 2;
  sub_10000AC00(v316, "MC");
  char v317 = 2;
  sub_10000AC00(v318, "ME");
  char v319 = 2;
  sub_10000AC00(v320, "MZ");
  char v321 = 2;
  sub_10000AC00(v322, "NA");
  char v323 = 2;
  sub_10000AC00(v324, "NE");
  char v325 = 2;
  sub_10000AC00(v326, "OM");
  char v327 = 2;
  sub_10000AC00(v328, "RE");
  char v329 = 2;
  sub_10000AC00(v330, "SN");
  char v331 = 2;
  sub_10000AC00(v332, "TZ");
  char v333 = 2;
  sub_10000AC00(v334, "TG");
  char v335 = 2;
  sub_10000AC00(v336, "TN");
  char v337 = 2;
  sub_10000AC00(v338, "UG");
  char v339 = 2;
  sub_10000AC00(v340, "UZ");
  char v341 = 2;
  sub_10000AC00(v342, "ZM");
  char v343 = 2;
  sub_10000AC00(v344, "ZW");
  char v345 = 2;
  sub_10000AC00(v346, "GE");
  char v347 = 2;
  sub_10000AC00(v348, "MW");
  char v349 = 2;
  sub_10000AC00(v350, "RW");
  char v351 = 2;
  sub_10000AC00(v352, "SC");
  char v353 = 2;
  sub_10000AC00(v354, "SZ");
  char v355 = 2;
  sub_10000AC00(v356, "QA");
  char v357 = 2;
  sub_10000AC00(v358, "JO");
  char v359 = 2;
  sub_10000AC00(v360, "BH");
  char v361 = 2;
  sub_10000AC00(v362, "AD");
  char v363 = 2;
  sub_10000AC00(v364, "CW");
  char v365 = 1;
  sub_10000AC00(v366, "BZ");
  char v367 = 1;
  sub_10000AC00(v368, "CC");
  char v369 = 2;
  sub_10000AC00(v370, "CK");
  char v371 = 2;
  sub_10000AC00(v372, "CM");
  char v373 = 2;
  sub_10000AC00(v374, "CV");
  char v375 = 2;
  sub_10000AC00(v376, "CX");
  char v377 = 2;
  sub_10000AC00(v378, "FM");
  char v379 = 1;
  sub_10000AC00(v380, "GF");
  char v381 = 2;
  sub_10000AC00(v382, "GG");
  char v383 = 2;
  sub_10000AC00(v384, "HM");
  char v385 = 2;
  sub_10000AC00(v386, "HT");
  char v387 = 1;
  sub_10000AC00(v388, "IO");
  char v389 = 2;
  sub_10000AC00(v390, "MF");
  char v391 = 1;
  sub_10000AC00(v392, "MH");
  char v393 = 1;
  sub_10000AC00(v394, "MR");
  char v395 = 2;
  sub_10000AC00(v396, "NG");
  char v397 = 2;
  sub_10000AC00(v398, "NR");
  char v399 = 2;
  sub_10000AC00(v400, "NU");
  char v401 = 2;
  sub_10000AC00(v402, "PN");
  char v403 = 2;
  sub_10000AC00(v404, "PW");
  char v405 = 1;
  sub_10000AC00(v406, "SB");
  char v407 = 2;
  sub_10000AC00(v408, "SL");
  char v409 = 2;
  sub_10000AC00(v410, "SR");
  char v411 = 1;
  sub_10000AC00(v412, "ST");
  char v413 = 2;
  sub_10000AC00(v414, "TF");
  char v415 = 2;
  sub_10000AC00(v416, "TK");
  char v417 = 2;
  sub_10000AC00(v418, "TM");
  char v419 = 2;
  sub_10000AC00(v420, "TO");
  char v421 = 2;
  sub_10000AC00(v422, "TV");
  char v423 = 2;
  sub_10000AC00(v424, "VA");
  char v425 = 2;
  sub_10000AC00(v426, "VU");
  char v427 = 2;
  sub_10000AC00(v428, "WF");
  char v429 = 2;
  sub_10000AC00(v430, "YE");
  char v431 = 2;
  sub_10000AC00(v432, "YT");
  char v433 = 2;
  sub_10000AC00(v434, "ER");
  char v435 = 2;
  sub_10000AC00(v436, "FO");
  char v437 = 2;
  sub_10000AC00(v438, "SO");
  char v439 = 2;
  sub_10000AC00(v440, "BQ");
  char v441 = 1;
  sub_10000AC00(v442, "GY");
  char v443 = 1;
  sub_10015B4B0((uint64_t)&unk_1002C9C38, &v2, 221LL);
  for (uint64_t i = 0LL; i != -884; i -= 4LL)
  {
    if (SHIBYTE(v442[i + 2]) < 0) {
      operator delete((void *)v442[i]);
    }
  }

  __cxa_atexit((void (*)(void *))sub_10015A6A0, &unk_1002C9C38, (void *)&_mh_execute_header);
  qword_1002C9C58 = 0LL;
  unk_1002C9C60 = 0LL;
  qword_1002C9C50 = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1002C9C50, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_10015D018( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = (char *)(v10 + 2943);
  uint64_t v13 = -7072LL;
  __darwin_ct_rune_t v14 = (char *)(v10 + 2943);
  while (1)
  {
    int v15 = *v14;
    v14 -= 32;
    if (v15 < 0) {
      operator delete(*(void **)(v12 - 23));
    }
    uint64_t v12 = v14;
    v13 += 32LL;
    if (!v13) {
      _Unwind_Resume(exception_object);
    }
  }

void sub_10015DAF0()
{
}

void sub_10015DAF8(uint64_t a1)
{
  *(void *)a1 = off_1002B46C8;
  std::string v2 = *(dispatch_source_s **)(a1 + 200);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 200));
    *(void *)(a1 + 200) = 0LL;
  }

  sub_100163F78(a1 + 232);
  sub_100163F08(a1 + 208);
  char v3 = *(dispatch_object_s **)(a1 + 192);
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 184);
  if (v4) {
    _Block_release(v4);
  }
  ctu::XpcServer::~XpcServer((ctu::XpcServer *)a1);
}

uint64_t sub_10015DBA8(uint64_t a1)
{
  return a1;
}

void sub_10015DC0C(uint64_t a1)
{
}

void sub_10015DC28(void **a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  char v5 = *a1;
  xpc_object_t v16 = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t v16 = xpc_null_create();
  }
  uint64_t v6 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v6 = _Block_copy(v6);
  }
  char v7 = *(dispatch_object_s **)(a2 + 8);
  aBlocuint64_t k = v6;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  sub_10015DD68(&v16, (uint64_t)&aBlock, &v17);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v16);
  xpc_object_t v16 = 0LL;
  int v8 = operator new(0x10uLL);
  uint64_t v9 = (uint64_t)v8;
  uint64_t v12 = v17;
  uint64_t v13 = v18;
  if (v18)
  {
    p_shared_owners = &v18->__shared_owners_;
    do
      unint64_t v11 = __ldxr((unint64_t *)p_shared_owners);
    while (__stxr(v11 + 1, (unint64_t *)p_shared_owners));
  }

  sub_10000AB5C(v8, &v12);
  sub_100163FE8(a3, v9);
  if (v13) {
    sub_10000ABAC(v13);
  }
  if (v18) {
    sub_10000ABAC(v18);
  }
}

void sub_10015DD24(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10015DD68(xpc_object_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0LL;
  a3[1] = 0LL;
  if (xpc_get_type(*a1) == (xpc_type_t)&_xpc_type_dictionary)
  {
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    xpc_object_t v28 = a1;
    char v29 = "ServiceXPCName";
    sub_1000A99D0((uint64_t)&v28, &object);
    xpc::dyn_cast_or_default(__p, (xpc *)&object, (const object *)"", v6);
    sub_100014D08((uint64_t)&v33, (__int128 *)__p);
    if (v32 < 0) {
      operator delete(__p[0]);
    }
    xpc_release(object);
    xpc_object_t v28 = a1;
    char v29 = "ServiceNotificationName";
    sub_1000A99D0((uint64_t)&v28, &object);
    xpc::dyn_cast_or_default(__p, (xpc *)&object, (const object *)"", v7);
    sub_100014D08((uint64_t)&v34 + 8, (__int128 *)__p);
    if (v32 < 0) {
      operator delete(__p[0]);
    }
    xpc_release(object);
    xpc_object_t v28 = a1;
    char v29 = "ServerHostName";
    sub_1000A99D0((uint64_t)&v28, &object);
    xpc::dyn_cast_or_default(__p, (xpc *)&object, (const object *)"UnknownServerHost", v8);
    sub_100014D08((uint64_t)&v36, (__int128 *)__p);
    if (v32 < 0) {
      operator delete(__p[0]);
    }
    xpc_release(object);
    __p[0] = a1;
    __p[1] = "ServerEnableSignalHandler";
    sub_1000A99D0((uint64_t)__p, &v28);
    char v39 = xpc::dyn_cast_or_default((xpc *)&v28, 0LL, v9);
    xpc_release(v28);
    if ((SBYTE7(v34) & 0x80u) == 0) {
      size_t v10 = BYTE7(v34);
    }
    else {
      size_t v10 = *((void *)&v33 + 1);
    }
    if (v10 >= 0xFFFFFFFFFFFFFFFALL)
    {
      __break(0x5500u);
      return;
    }

    unint64_t v11 = __p;
    sub_1000765F0((uint64_t)__p, v10 + 6);
    if (v32 < 0) {
      unint64_t v11 = (void **)__p[0];
    }
    if (v10)
    {
      if ((SBYTE7(v34) & 0x80u) == 0) {
        uint64_t v12 = &v33;
      }
      else {
        uint64_t v12 = (__int128 *)v33;
      }
      memmove(v11, v12, v10);
    }

    strcpy((char *)v11 + v10, ".allow");
    sub_100014D08((uint64_t)&v37 + 8, (__int128 *)__p);
    if (v32 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v13 = BYTE7(v34);
    if (SBYTE7(v34) < 0) {
      uint64_t v13 = *((void *)&v33 + 1);
    }
    if (v13)
    {
      uint64_t v14 = HIBYTE(v35);
      if (v35 < 0) {
        uint64_t v14 = v35;
      }
      if (v14)
      {
        int v15 = operator new(0x100uLL);
        sub_10015F08C(&v21, (const std::string *)&v33);
        xpc_object_t v16 = *(void **)a2;
        if (*(void *)a2) {
          xpc_object_t v16 = _Block_copy(v16);
        }
        uint64_t v17 = *(dispatch_object_s **)(a2 + 8);
        aBlocuint64_t k = v16;
        dispatch_object_t v20 = v17;
        if (v17) {
          dispatch_retain(v17);
        }
        sub_10015F13C((uint64_t)v15, &v21, (uint64_t)&aBlock);
        sub_10015F29C((uint64_t *)__p, (uint64_t)v15);
        sub_10015921C((uint64_t)a3, (__int128 *)__p);
        if (__p[1]) {
          sub_10000ABAC((std::__shared_weak_count *)__p[1]);
        }
        if (v20) {
          dispatch_release(v20);
        }
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v27 < 0) {
          operator delete(v26);
        }
        if (v25 < 0) {
          operator delete(v24);
        }
        if (v23 < 0) {
          operator delete(v22);
        }
        sub_10015F000(*a3);
      }
    }

    if (SHIBYTE(v38) < 0) {
      operator delete(*((void **)&v37 + 1));
    }
    if (SBYTE7(v37) < 0) {
      operator delete((void *)v36);
    }
    if (SHIBYTE(v35) < 0) {
      operator delete(*((void **)&v34 + 1));
    }
    if (SBYTE7(v34) < 0) {
      operator delete((void *)v33);
    }
  }

  if (!*a3)
  {
    BOOL v18 = (os_log_s *)sub_1000160F4("com.apple.wpantund.xpcserver", "default");
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      sub_1002130C0(v18);
    }
    __assert_rtn("create", "CtrXPCServer.cpp", 72, "false");
  }

void sub_10015E14C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, xpc_object_t object, uint64_t a26, xpc_object_t a27)
{
}

uint64_t sub_10015E214(uint64_t *a1)
{
  return sub_10015E21C(*a1);
}

uint64_t sub_10015E21C(uint64_t a1)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000LL;
  _OWORD v5[2] = sub_10015F8A8;
  uint64_t v5[3] = &unk_1002B4850;
  uint64_t v5[4] = a1;
  uint64_t v6 = v5;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_10015F754;
  block[3] = &unk_1002B47D0;
  void block[4] = a1 + 8;
  block[5] = &v6;
  uint64_t v3 = a1 + 24;
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 24);
  if (*(void *)(v3 + 8)) {
    dispatch_async_and_wait(v2, block);
  }
  else {
    dispatch_sync(v2, block);
  }
  return *(unsigned int *)(a1 + 176);
}

void sub_10015E2B8(uint64_t *a1, const std::string *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  std::string::basic_string(&v9, a2);
  char v5 = *(void **)a3;
  if (*(void *)a3) {
    char v5 = _Block_copy(v5);
  }
  uint64_t v6 = *(dispatch_object_s **)(a3 + 8);
  aBlocuint64_t k = v5;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  sub_10015E36C(v4, &v9, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_10015E348( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10015E36C(uint64_t a1, const std::string *a2, uint64_t a3)
{
  xpc_object_t v9 = xpc_null_create();
  char v5 = *(void **)a3;
  if (*(void *)a3) {
    char v5 = _Block_copy(v5);
  }
  uint64_t v6 = *(dispatch_object_s **)(a3 + 8);
  aBlocuint64_t k = v5;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  sub_10015E544(a1, &v10, &v9, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v9);
  xpc_object_t v9 = 0LL;
}

void sub_10015E418( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10015E448(uint64_t *a1, const std::string *a2, void **a3, uint64_t a4)
{
  uint64_t v6 = *a1;
  std::string::basic_string(&v13, a2);
  char v7 = *a3;
  xpc_object_t v12 = v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    xpc_object_t v12 = xpc_null_create();
  }
  int v8 = *(void **)a4;
  if (*(void *)a4) {
    int v8 = _Block_copy(v8);
  }
  xpc_object_t v9 = *(dispatch_object_s **)(a4 + 8);
  aBlocuint64_t k = v8;
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  sub_10015E544(v6, &v13, &v12, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v12);
  xpc_object_t v12 = 0LL;
}

void sub_10015E514( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10015E544(uint64_t a1, const std::string *a2, void **a3, uint64_t a4)
{
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1174405120LL;
  _DWORD v11[2] = sub_10015FD64;
  uint64_t v11[3] = &unk_1002B48D0;
  char v7 = *a3;
  void v11[4] = a1;
  xpc_object_t v12 = v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    xpc_object_t v12 = xpc_null_create();
  }
  std::string::basic_string(&__p, a2);
  int v8 = *(void **)a4;
  if (*(void *)a4) {
    int v8 = _Block_copy(v8);
  }
  xpc_object_t v9 = (void *)(a1 + 8);
  std::string v10 = *(dispatch_object_s **)(a4 + 8);
  aBlocuint64_t k = v8;
  dispatch_object_t object = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  sub_100160A84(v9, (uint64_t)v11);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v12);
}

void sub_10015E644(_Unwind_Exception *a1)
{
}

uint64_t sub_10015E65C(uint64_t *a1, const std::string *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  std::string::basic_string(&v11, a2);
  char v5 = *(void **)a3;
  if (*(void *)a3) {
    char v5 = _Block_copy(v5);
  }
  uint64_t v6 = *(dispatch_object_s **)(a3 + 8);
  aBlocuint64_t k = v5;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  uint64_t v7 = sub_10015E718(v4, &v11, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  return v7;
}

void sub_10015E6F4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10015E718(uint64_t a1, const std::string *a2, uint64_t a3)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1174405120LL;
  _DWORD v9[2] = sub_100160BAC;
  v9[3] = &unk_1002B4968;
  void v9[4] = a1;
  std::string::basic_string(&__p, a2);
  char v5 = *(void **)a3;
  if (*(void *)a3) {
    char v5 = _Block_copy(v5);
  }
  uint64_t v6 = *(dispatch_object_s **)(a3 + 8);
  aBlocuint64_t k = v5;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  std::string v13 = v9;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_10015F754;
  block[3] = &unk_1002B47D0;
  void block[4] = a1 + 8;
  block[5] = &v13;
  uint64_t v7 = *(dispatch_queue_s **)(a1 + 24);
  if (*(void *)(a1 + 32)) {
    dispatch_async_and_wait(v7, block);
  }
  else {
    dispatch_sync(v7, block);
  }
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  return 0LL;
}

void *sub_10015E828@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 3) {
    uint64_t v2 = "";
  }
  else {
    uint64_t v2 = off_1002B4B50[a1];
  }
  return sub_10000AC00(a2, v2);
}

void sub_10015E854(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v4 = (os_log_s *)sub_1000160F4("com.apple.wpantund.xpcserver", "default");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_100213100(a2, v4);
  }
  *(_DWORD *)(a1 + 1memset(v31, 0, 76) = 3;
  char v5 = *(const void **)(a1 + 184);
  if (v5) {
    uint64_t v6 = _Block_copy(v5);
  }
  else {
    uint64_t v6 = 0LL;
  }
  uint64_t v7 = *(dispatch_queue_s **)(a1 + 192);
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120LL;
  block[2] = sub_10015F844;
  block[3] = &unk_1002B4820;
  if (v6) {
    int v8 = _Block_copy(v6);
  }
  else {
    int v8 = 0LL;
  }
  aBlocuint64_t k = v8;
  int v13 = 3;
  dispatch_async(v7, block);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v6) {
    _Block_release(v6);
  }
  sub_10000AC00(__p, "ServerStateError");
  sub_10015FB74(a1, (const char *)__p);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10015E98C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10015E9A8(uint64_t a1@<X0>, xpc_object_t *a2@<X1>, void **a3@<X8>)
{
  xpc_object_t v6 = *a2;
  xpc_object_t object = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  char v7 = sub_100160F8C(a1, &object);
  xpc_release(object);
  xpc_object_t object = 0LL;
  if ((v7 & 1) != 0)
  {
    sub_1000A9F28(a2, &__p);
    sub_10015A0CC(&v13, &__p);
    int v8 = (os_log_s *)sub_1000160F4("com.apple.wpantund.xpcserver", "default");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      xpc::object::to_string((xpc::object *)a2);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v17 = p_p;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "New client: %s", buf, 0xCu);
    }

    char v10 = sub_100161074((uint64_t **)(a1 + 208), a2);
    sub_10012F7CC(v10, &v13);
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 0x40000000LL;
    aBlock[2] = sub_1001610A8;
    aBlock[3] = &unk_1002B4998;
    aBlock[4] = a1;
    *a3 = _Block_copy(aBlock);
    if (v14) {
      sub_10000ABAC(v14);
    }
  }

  else
  {
    *a3 = 0LL;
  }

void sub_10015EB60( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, char a21, uint64_t a22, char a23)
{
}

void sub_10015EBC8(uint64_t a1, unint64_t *a2, xpc::object *a3)
{
  xpc_object_t v6 = (void *)*a2;
  xpc_object_t object = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  sub_100161748(a1, (unint64_t *)&object, &v23);
  xpc_release(object);
  xpc_object_t object = 0LL;
  if (!v23) {
    goto LABEL_36;
  }
  sub_10015A2BC(&v23, &v25);
  char v7 = std::string::insert(&v25, 0LL, "Client '");
  __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__l.__cap_ = v7->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0LL;
  v7->__r_.__value_.__l.__cap_ = 0LL;
  v7->__r_.__value_.__r.__words[0] = 0LL;
  xpc_object_t v9 = std::string::append(&v26, "' ");
  __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t cap = v9->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v10;
  v9->__r_.__value_.__l.__size_ = 0LL;
  v9->__r_.__value_.__l.__cap_ = 0LL;
  v9->__r_.__value_.__r.__words[0] = 0LL;
  std::string v11 = *(void **)a3;
  if (*(_UNKNOWN **)a3 == &_xpc_error_connection_invalid)
  {
    int v15 = (os_log_s *)sub_1000160F4("com.apple.wpantund.xpcserver", "default");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      xpc_object_t v16 = __p;
      if (cap < 0) {
        xpc_object_t v16 = (void **)__p[0];
      }
      LODWORD(v26.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v26.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
      WORD2(v26.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v26.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"disappeared";
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "prefix: %s: %s", (uint8_t *)&v26, 0x16u);
    }

    sub_100163E8C(a1 + 208, a2);
    goto LABEL_34;
  }

  if (v11 == &_xpc_error_connection_interrupted)
  {
    uint64_t v17 = (os_log_s *)sub_1000160F4("com.apple.wpantund.xpcserver", "default");
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_INFO)) {
      goto LABEL_34;
    }
    BOOL v18 = __p;
    if (cap < 0) {
      BOOL v18 = (void **)__p[0];
    }
    LODWORD(v26.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v26.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
    WORD2(v26.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v26.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"connection interrupted";
    goto LABEL_33;
  }

  if (v11 != &_xpc_error_termination_imminent)
  {
    xpc_object_t v12 = (os_log_s *)sub_1000160F4("com.apple.wpantund.xpcserver", "default");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      xpc::object::to_string(a3);
      uint64_t v13 = __p;
      if (cap < 0) {
        uint64_t v13 = (void **)__p[0];
      }
      if ((v26.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v14 = &v26;
      }
      else {
        uint64_t v14 = (std::string *)v26.__r_.__value_.__r.__words[0];
      }
      LODWORD(v25.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v25.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
      WORD2(v25.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v25.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "prefix: %s: %s", (uint8_t *)&v25, 0x16u);
    }

    goto LABEL_34;
  }

  uint64_t v17 = (os_log_s *)sub_1000160F4("com.apple.wpantund.xpcserver", "default");
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    char v19 = __p;
    if (cap < 0) {
      char v19 = (void **)__p[0];
    }
    LODWORD(v26.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v26.__r_.__value_.__r.__words + 4) = (std::string::size_type)v19;
    WORD2(v26.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v26.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"will be terminated";
LABEL_33:
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "prefix: %s: %s", (uint8_t *)&v26, 0x16u);
  }

void sub_10015EF6C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_10000AB80((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_10015F000(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000LL;
  void v3[2] = sub_10015F388;
  v3[3] = &unk_1002B47B0;
  unsigned int v3[4] = a1;
  uint64_t v4 = v3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_10015F754;
  block[3] = &unk_1002B47D0;
  void block[4] = a1 + 8;
  block[5] = &v4;
  uint64_t v2 = a1 + 24;
  uint64_t v1 = *(dispatch_queue_s **)(a1 + 24);
  if (*(void *)(v2 + 8)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

std::string *sub_10015F08C(std::string *a1, const std::string *a2)
{
  uint64_t v4 = std::string::basic_string(a1, a2);
  std::string::basic_string(v4 + 1, a2 + 1);
  std::string::basic_string(a1 + 2, a2 + 2);
  std::string::basic_string(a1 + 3, a2 + 3);
  a1[4].__r_.__value_.__s.__data_[0] = a2[4].__r_.__value_.__s.__data_[0];
  return a1;
}

void sub_10015F0F0(_Unwind_Exception *exception_object)
{
}

uint64_t sub_10015F13C(uint64_t a1, const std::string *a2, uint64_t a3)
{
  xpc_object_t v6 = (const char *)a2;
  xpc_object_t mach_service = xpc_connection_create_mach_service(v6, 0LL, 1uLL);
  if (!mach_service) {
    xpc_object_t mach_service = xpc_null_create();
  }
  dispatch_object_t object = 0LL;
  ctu::XpcServer::XpcServer(a1, __p, &mach_service, &object);
  if (object) {
    dispatch_release(object);
  }
  xpc_release(mach_service);
  xpc_object_t mach_service = 0LL;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = off_1002B46C8;
  sub_10015F08C((std::string *)(a1 + 72), a2);
  *(_DWORD *)(a1 + 1memset(v31, 0, 76) = 0;
  char v7 = *(void **)a3;
  if (*(void *)a3) {
    char v7 = _Block_copy(v7);
  }
  *(void *)(a1 + sub_10000D448(v55 - 184) = v7;
  __int128 v8 = *(dispatch_object_s **)(a3 + 8);
  *(void *)(a1 + 192) = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  *(void *)(a1 + 216) = 0LL;
  *(void *)(a1 + 200) = 0LL;
  *(void *)(a1 + 208) = a1 + 216;
  *(void *)(a1 + 248) = 0LL;
  *(void *)(a1 + 2memset(&v22.ai_socktype, 0, 40) = 0LL;
  *(void *)(a1 + 224) = 0LL;
  *(void *)(a1 + 2sub_10000AB80(v2 - 32) = a1 + 240;
  return a1;
}

void sub_10015F250( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

uint64_t *sub_10015F29C(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &off_1002B4718;
  v4[1] = 0LL;
  void v4[2] = 0LL;
  void v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2) {
    char v5 = (void *)(a2 + 8);
  }
  else {
    char v5 = 0LL;
  }
  sub_1000BE2F0((uint64_t)a1, v5, a2);
  return a1;
}

void sub_10015F2F8(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 32LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10015F31C(std::__shared_weak_count *a1)
{
}

uint64_t sub_10015F330(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 32LL))(result);
  }
  return result;
}

uint64_t sub_10015F348(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void sub_10015F388(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v1 + 168))
  {
    *(void *)(v1 + 200) = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_signal,  0xFuLL,  0LL,  *(dispatch_queue_t *)(v1 + 24));
    sub_1000BE6D8(&v11, (void *)(v1 + 8));
    uint64_t v3 = v11;
    uint64_t v2 = v12;
    uint64_t v13 = v11;
    uint64_t v14 = v12;
    if (v12)
    {
      p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
      do
        unint64_t v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      sub_10000ABAC(v2);
    }

    xpc_object_t v6 = *(dispatch_source_s **)(v1 + 200);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 1174405120LL;
    handler[2] = sub_10015F4B8;
    handler[3] = &unk_1002B4780;
    handler[4] = v1;
    handler[5] = v3;
    __int128 v10 = v2;
    if (v2)
    {
      char v7 = (unint64_t *)&v2->__shared_weak_owners_;
      do
        unint64_t v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }

    dispatch_source_set_event_handler(v6, handler);
    dispatch_activate(*(dispatch_object_t *)(v1 + 200));
    signal(15, (void (__cdecl *)(int))1);
    if (v10) {
      std::__shared_weak_count::__release_weak(v10);
    }
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
  }

void sub_10015F49C(_Unwind_Exception *a1)
{
}

void sub_10015F4B8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_10015F518((void *)(a1 + 40), &v2);
  if (v2) {
    sub_10015F558(v1);
  }
  if (v3) {
    sub_10000ABAC(v3);
  }
}

void sub_10015F504( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::__shared_weak_count *sub_10015F518@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0LL;
  uint64_t result = (std::__shared_weak_count *)a1[1];
  if (result)
  {
    uint64_t result = std::__shared_weak_count::lock(result);
    a2[1] = result;
    if (result) {
      *a2 = *a1;
    }
  }

  return result;
}

void sub_10015F558(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund.xpcserver", "default");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "SIGTERM received", buf, 2u);
  }

  sub_1000BE6D8(&v16, (void *)(a1 + 8));
  uint64_t v4 = v16;
  uint64_t v3 = v17;
  *(void *)std::string buf = v16;
  char v19 = v17;
  if (v17)
  {
    p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    sub_10000ABAC(v3);
  }

  sub_10000AC00(&__p, "EventServerSIGTERM");
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1174405120LL;
  _DWORD v11[2] = sub_10015F764;
  uint64_t v11[3] = &unk_1002B47F0;
  void v11[4] = a1;
  void v11[5] = v4;
  xpc_object_t v12 = v3;
  if (v3)
  {
    char v7 = (unint64_t *)&v3->__shared_weak_owners_;
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  xpc_object_t v9 = _Block_copy(v11);
  __int128 v10 = *(dispatch_object_s **)(a1 + 24);
  if (v10) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 24));
  }
  aBlocuint64_t k = v9;
  dispatch_object_t object = v10;
  sub_10015E36C(a1, &__p, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_10015F6E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  sub_1000BE23C(v24 - 64);
  _Unwind_Resume(a1);
}

uint64_t sub_10015F728(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + memset(&v22.ai_socktype, 0, 40) = *(void *)(a2 + 40);
  *(void *)(result + sub_1000BE23C(v2 - 48) = v2;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)(v2 + 16);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

uint64_t sub_10015F74C(uint64_t a1)
{
  return sub_1000BE23C(a1 + 40);
}

void *sub_10015F754(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16LL))(*(void **)(a1 + 40));
}

void sub_10015F764(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_10015F518((void *)(a1 + 40), &v6);
  if (v6)
  {
    uint64_t v2 = *(const void **)(v1 + 184);
    if (v2) {
      uint64_t v3 = _Block_copy(v2);
    }
    else {
      uint64_t v3 = 0LL;
    }
    unint64_t v4 = *(dispatch_queue_s **)(v1 + 192);
    block[0] = _NSConcreteStackBlock;
    block[1] = 1174405120LL;
    block[2] = sub_10015F844;
    block[3] = &unk_1002B4820;
    if (v3) {
      unint64_t v5 = _Block_copy(v3);
    }
    else {
      unint64_t v5 = 0LL;
    }
    aBlocuint64_t k = v5;
    int v10 = 2;
    dispatch_async(v4, block);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v3) {
      _Block_release(v3);
    }
  }

  if (v7) {
    sub_10000ABAC(v7);
  }
}

uint64_t sub_10015F844(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(unsigned int *)(a1 + 40));
}

void *sub_10015F858(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 32);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + sub_10000AB80(v2 - 32) = result;
  return result;
}

void sub_10015F888(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

void sub_10015F8A8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(_DWORD *)(v1 + 176)) {
    sub_10015F8BC(v1);
  }
}

void sub_10015F8BC(uint64_t a1)
{
  uint64_t v2 = (const char *)(a1 + 96);
  uint64_t v3 = CFStringCreateWithCString(kCFAllocatorDefault, v2, 0x600u);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, v3, 0LL, 0LL, 1u);
  unint64_t v5 = (os_log_s *)sub_1000160F4("com.apple.wpantund.xpcserver", "default");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = CFStringGetCStringPtr(v3, 0x8000100u);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Server posted notification: %s",  (uint8_t *)&buf,  0xCu);
  }

  CFRelease(v3);
  *(_DWORD *)(a1 + 1memset(v31, 0, 76) = 1;
  uint64_t v6 = *(const void **)(a1 + 184);
  if (v6) {
    char v7 = _Block_copy(v6);
  }
  else {
    char v7 = 0LL;
  }
  unint64_t v8 = *(dispatch_queue_s **)(a1 + 192);
  *(void *)&__int128 buf = _NSConcreteStackBlock;
  *((void *)&buf + 1) = 1174405120LL;
  char v19 = sub_10015F844;
  dispatch_object_t v20 = &unk_1002B4820;
  if (v7) {
    xpc_object_t v9 = _Block_copy(v7);
  }
  else {
    xpc_object_t v9 = 0LL;
  }
  aBlocuint64_t k = v9;
  int v22 = 1;
  dispatch_async(v8, &buf);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v7) {
    _Block_release(v7);
  }
  sub_10000AC00(__p, "ServerStateStarted");
  sub_10015FB74(a1, (const char *)__p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  int v10 = (os_log_s *)sub_1000160F4("com.apple.wpantund.xpcserver", "default");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = *(int *)(a1 + 176);
    else {
      xpc_object_t v12 = off_1002B4B50[v11];
    }
    sub_10000AC00(&buf, v12);
    if (SHIBYTE(v19) >= 0) {
      p___int128 buf = &buf;
    }
    else {
      p___int128 buf = (__int128 *)buf;
    }
    *(_DWORD *)uint64_t v16 = 136315138;
    uint64_t v17 = p_buf;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, " Status = %s", v16, 0xCu);
    if (SHIBYTE(v19) < 0) {
      operator delete((void *)buf);
    }
  }

void sub_10015FB34( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2) {
    sub_100006EEC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10015FB74(uint64_t a1, const char *a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_object_t v5 = v4;
  if (v4)
  {
    xpc_object_t v14 = v4;
  }

  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v14 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0LL;
      goto LABEL_8;
    }
  }

  if (xpc_get_type(v5) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v5);
    goto LABEL_9;
  }

  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  xpc_object_t v14 = v6;
LABEL_9:
  xpc_release(v5);
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  xpc_object_t v12 = xpc_string_create(a2);
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  v11[0] = &v14;
  v11[1] = "KeyServerState";
  sub_1000089EC((uint64_t)v11, &v12, &v13);
  xpc_release(v13);
  xpc_object_t v13 = 0LL;
  xpc_release(v12);
  xpc_object_t v12 = 0LL;
  sub_10000AC00(&__p, "EventServerStateChange");
  xpc_object_t v9 = v14;
  if (v14) {
    xpc_retain(v14);
  }
  else {
    xpc_object_t v9 = xpc_null_create();
  }
  aBlocuint64_t k = 0LL;
  dispatch_object_t object = 0LL;
  sub_10015E544(a1, &__p, &v9, (uint64_t)&aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v9);
  xpc_object_t v9 = 0LL;
  xpc_release(v14);
}

void sub_10015FD0C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_1000089BC((xpc_object_t *)(v18 - 40));
  _Unwind_Resume(a1);
}

void sub_10015FD64(uint64_t a1)
{
  __int128 v35 = *(void **)(a1 + 32);
  xpc_object_t v2 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_object_t v3 = v2;
  if (v2)
  {
    xpc_object_t v64 = v2;
  }

  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v64 = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0LL;
      goto LABEL_8;
    }
  }

  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v3);
    goto LABEL_9;
  }

  xpc_object_t v4 = xpc_null_create();
LABEL_8:
  xpc_object_t v64 = v4;
LABEL_9:
  xpc_release(v3);
  if (xpc_get_type(*(xpc_object_t *)(a1 + 40)) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v5 = *(void **)(a1 + 40);
    xpc_object_t v62 = v5;
    if (v5) {
      xpc_retain(v5);
    }
    else {
      xpc_object_t v62 = xpc_null_create();
    }
    *(void *)__int128 buf = &v64;
    *(void *)&uint8_t buf[8] = "eventData";
    sub_100160478((uint64_t)buf, &v62, &v63);
    xpc_release(v63);
    xpc_object_t v63 = 0LL;
    xpc_release(v62);
    xpc_object_t v62 = 0LL;
  }

  xpc_object_t v60 = xpc_string_create("eventNotification");
  if (!v60) {
    xpc_object_t v60 = xpc_null_create();
  }
  *(void *)__int128 buf = &v64;
  *(void *)&uint8_t buf[8] = "command";
  sub_1000089EC((uint64_t)buf, &v60, &v61);
  xpc_release(v61);
  xpc_object_t v61 = 0LL;
  xpc_release(v60);
  xpc_object_t v60 = 0LL;
  xpc_object_t v6 = (const char **)(a1 + 48);
  char v7 = (const char *)(a1 + 48);
  xpc_object_t v58 = xpc_string_create(v7);
  if (!v58) {
    xpc_object_t v58 = xpc_null_create();
  }
  *(void *)__int128 buf = &v64;
  *(void *)&uint8_t buf[8] = "event";
  sub_1000089EC((uint64_t)buf, &v58, &v59);
  xpc_release(v59);
  xpc_object_t v59 = 0LL;
  xpc_release(v58);
  xpc_object_t v58 = 0LL;
  group = dispatch_group_create();
  sub_1000BE6D8(buf, v35 + 1);
  unint64_t v8 = *(std::__shared_weak_count **)&buf[8];
  uint64_t v56 = *(void *)buf;
  char v57 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    xpc_object_t v9 = (unint64_t *)(*(void *)&buf[8] + 16LL);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    sub_10000ABAC(v8);
  }

  uint64_t v11 = (void *)v35[26];
  for (i = v11; i != v35 + 27; uint64_t v11 = i)
  {
    sub_100160B50(object, (uint64_t)(v11 + 4));
    xpc_object_t v12 = (_xpc_connection_s *)object[0];
    unsigned __int8 v52 = (_xpc_connection_s *)object[0];
    if (object[0])
    {
      xpc_retain(object[0]);
    }

    else
    {
      xpc_object_t v12 = (_xpc_connection_s *)xpc_null_create();
      unsigned __int8 v52 = v12;
    }

    int v50 = (const std::string *)object[1];
    char v51 = v54;
    if (v54)
    {
      p_shared_owners = &v54->__shared_owners_;
      do
        unint64_t v14 = __ldxr((unint64_t *)p_shared_owners);
      while (__stxr(v14 + 1, (unint64_t *)p_shared_owners));
    }

    std::string::basic_string(&v49, (const std::string *)(a1 + 48));
    int v15 = sub_10015A0FC((uint64_t *)&v50, &v49);
    int v16 = v15;
    if ((char)v49.__r_.__value_.__s.__size_ < 0)
    {
      operator delete(v49.__r_.__value_.__l.__data_);
      if (v16)
      {
LABEL_35:
        uint64_t v17 = (os_log_s *)sub_1000160F4("com.apple.wpantund.xpcserver", "default");
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          uint64_t v18 = (const char *)(a1 + 48);
          char v19 = sub_10015A2BC(&v50, &__p);
          int size = (char)__p.__r_.__value_.__s.__size_;
          std::string::size_type v21 = __p.__r_.__value_.__r.__words[0];
          uint64_t SystemTime = TelephonyUtilGetSystemTime(v19);
          *(_DWORD *)__int128 buf = 136315650;
          p_p = &__p;
          if (size < 0) {
            p_p = (std::string *)v21;
          }
          *(void *)&uint8_t buf[4] = v18;
          *(_WORD *)&_BYTE buf[12] = 2080;
          *(void *)&_BYTE buf[14] = p_p;
          __int16 v66 = 2048;
          uint64_t v67 = SystemTime;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Sending: %s, to: %s, at: %llu", buf, 0x20u);
        }

        if (*(void *)(a1 + 72) && *(void *)(a1 + 80))
        {
          dispatch_group_enter(group);
          xpc_object_t v24 = v64;
          std::string v25 = (dispatch_queue_s *)v35[3];
          handler[0] = _NSConcreteStackBlock;
          handler[1] = 1174405120LL;
          handler[2] = sub_1001604C0;
          handler[3] = &unk_1002B4870;
          handler[4] = v56;
          char v43 = v57;
          if (v57)
          {
            p_shared_weak_owners = &v57->__shared_weak_owners_;
            do
              unint64_t v27 = __ldxr((unint64_t *)p_shared_weak_owners);
            while (__stxr(v27 + 1, (unint64_t *)p_shared_weak_owners));
          }

          __int16 v44 = v50;
          char v45 = v51;
          if (v51)
          {
            xpc_object_t v28 = &v51->__shared_owners_;
            do
              unint64_t v29 = __ldxr((unint64_t *)v28);
            while (__stxr(v29 + 1, (unint64_t *)v28));
          }

          std::string::basic_string(&v46, (const std::string *)(a1 + 48));
          char v47 = group;
          xpc_connection_send_message_with_reply(v12, v24, v25, handler);
          if (v45) {
            sub_10000ABAC(v45);
          }
          if (v43) {
            std::__shared_weak_count::__release_weak(v43);
          }
        }

        else
        {
          xpc_connection_send_message(v12, v64);
        }
      }
    }

    else if (v15)
    {
      goto LABEL_35;
    }

    if (v51) {
      sub_10000ABAC(v51);
    }
    xpc_release(v12);
    if (v54) {
      sub_10000ABAC(v54);
    }
    xpc_release(object[0]);
    sub_10000B338((uint64_t)&i);
  }

  if (*(void *)(a1 + 72) && *(void *)(a1 + 80))
  {
    int v30 = (dispatch_queue_s *)v35[3];
    block[0] = _NSConcreteStackBlock;
    block[1] = 1174405120LL;
    block[2] = sub_10016071C;
    block[3] = &unk_1002B48A0;
    void block[4] = v56;
    __int128 v38 = v57;
    if (v57)
    {
      char v31 = &v57->__shared_weak_owners_;
      do
        unint64_t v32 = __ldxr((unint64_t *)v31);
      while (__stxr(v32 + 1, (unint64_t *)v31));
    }

    std::string::basic_string(&v39, (const std::string *)(a1 + 48));
    __int128 v33 = *(void **)(a1 + 72);
    if (v33) {
      __int128 v33 = _Block_copy(v33);
    }
    __int128 v34 = *(dispatch_object_s **)(a1 + 80);
    aBlocuint64_t k = v33;
    dispatch_object_t v41 = v34;
    if (v34) {
      dispatch_retain(v34);
    }
    dispatch_group_notify(group, v30, block);
    if (v41) {
      dispatch_release(v41);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v38) {
      std::__shared_weak_count::__release_weak(v38);
    }
  }

  dispatch_release(group);
  if (v57) {
    std::__shared_weak_count::__release_weak(v57);
  }
  xpc_release(v64);
}

void sub_10016035C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, void *__p, uint64_t a38, int a39, __int16 a40, char a41, char a42, uint64_t a43, void *a44, uint64_t a45, int a46, __int16 a47, char a48, char a49, uint64_t a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,char a56,uint64_t a57,char a58,int a59,__int16 a60,char a61,char a62)
{
  if (a2) {
    sub_100006EEC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

xpc_object_t sub_100160478@<X0>(uint64_t a1@<X0>, xpc_object_t *a2@<X1>, xpc_object_t *a3@<X8>)
{
  *a3 = *a2;
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

void sub_1001604C0(uint64_t a1)
{
  if (v8)
  {
    xpc_object_t v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund.xpcserver", "default");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      xpc_object_t v3 = sub_10015A2BC((const std::string **)(a1 + 48), &__p);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      xpc_object_t v5 = (void *)(a1 + 64);
      uint64_t SystemTime = TelephonyUtilGetSystemTime(v3);
      *(_DWORD *)__int128 buf = 136315650;
      uint64_t v11 = p_p;
      __int16 v12 = 2080;
      xpc_object_t v13 = v5;
      __int16 v14 = 2048;
      uint64_t v15 = SystemTime;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s responded to: %s, at: %llu", buf, 0x20u);
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 88));
  if (v9) {
    sub_10000ABAC(v9);
  }
}

void sub_1001605F4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_10000AB80((uint64_t)&a16);
  _Unwind_Resume(a1);
}

std::string *sub_100160624(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + sub_10000AB80(v2 - 32) = *(void *)(a2 + 32);
  *(void *)(a1 + memset(&v22.ai_socktype, 0, 40) = v4;
  if (v4)
  {
    xpc_object_t v5 = (unint64_t *)(v4 + 16);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  sub_10000AB5C((void *)(a1 + 48), (void *)(a2 + 48));
  return std::string::basic_string((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
}

void sub_10016068C(_Unwind_Exception *a1)
{
}

uint64_t sub_1001606A8(uint64_t a1)
{
  return sub_1000BE23C(a1 + 32);
}

xpc_object_t *sub_1001606E4(xpc_object_t *a1)
{
  *a1 = 0LL;
  return a1;
}

void sub_10016071C(uint64_t a1)
{
  if (v8)
  {
    uint64_t v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund.xpcserver", "default");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      xpc_object_t v3 = (void *)(a1 + 48);
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "All clients responded to: %s",  (uint8_t *)&buf,  0xCu);
    }
  }

  uint64_t v4 = *(const void **)(a1 + 72);
  if (v4) {
    xpc_object_t v5 = _Block_copy(v4);
  }
  else {
    xpc_object_t v5 = 0LL;
  }
  unint64_t v6 = *(dispatch_queue_s **)(a1 + 80);
  *(void *)&__int128 buf = _NSConcreteStackBlock;
  *((void *)&buf + 1) = 1174405120LL;
  uint64_t v11 = sub_100160BA0;
  __int16 v12 = &unk_1002B4938;
  if (v5) {
    char v7 = _Block_copy(v5);
  }
  else {
    char v7 = 0LL;
  }
  aBlocuint64_t k = v7;
  dispatch_async(v6, &buf);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  if (v9) {
    sub_10000ABAC(v9);
  }
}

void sub_100160878(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_100006EEC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001608A8(std::string *a1, const std::string *a2)
{
  std::string::size_type cap = a2[1].__r_.__value_.__l.__cap_;
  a1[1].__r_.__value_.__l.__size_ = a2[1].__r_.__value_.__l.__size_;
  a1[1].__r_.__value_.__l.__cap_ = cap;
  if (cap)
  {
    xpc_object_t v5 = (unint64_t *)(cap + 16);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  std::string::basic_string(a1 + 2, a2 + 2);
  data = a2[3].__r_.__value_.__l.__data_;
  if (data) {
    data = _Block_copy(data);
  }
  int size = (dispatch_object_s *)a2[3].__r_.__value_.__l.__size_;
  a1[3].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
  a1[3].__r_.__value_.__l.__size_ = (std::string::size_type)size;
  if (size) {
    dispatch_retain(size);
  }
}

void sub_100160930(_Unwind_Exception *a1)
{
}

uint64_t sub_100160944(uint64_t a1)
{
  uint64_t v2 = *(dispatch_object_s **)(a1 + 80);
  if (v2) {
    dispatch_release(v2);
  }
  xpc_object_t v3 = *(const void **)(a1 + 72);
  if (v3) {
    _Block_release(v3);
  }
  return sub_1000BE23C(a1 + 32);
}

void sub_100160990(std::string *a1, const std::string *a2)
{
  std::string::size_type cap = (void *)a2[1].__r_.__value_.__l.__cap_;
  a1[1].__r_.__value_.__l.__cap_ = (std::string::size_type)cap;
  if (cap) {
    xpc_retain(cap);
  }
  else {
    a1[1].__r_.__value_.__l.__cap_ = (std::string::size_type)xpc_null_create();
  }
  std::string::basic_string(a1 + 2, a2 + 2);
  data = a2[3].__r_.__value_.__l.__data_;
  if (data) {
    data = _Block_copy(data);
  }
  int size = (dispatch_object_s *)a2[3].__r_.__value_.__l.__size_;
  a1[3].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
  a1[3].__r_.__value_.__l.__size_ = (std::string::size_type)size;
  if (size) {
    dispatch_retain(size);
  }
}

void sub_100160A14(_Unwind_Exception *a1)
{
}

void sub_100160A2C(uint64_t a1)
{
  uint64_t v2 = *(dispatch_object_s **)(a1 + 80);
  if (v2) {
    dispatch_release(v2);
  }
  xpc_object_t v3 = *(const void **)(a1 + 72);
  if (v3) {
    _Block_release(v3);
  }
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + memset(&v22.ai_socktype, 0, 40) = 0LL;
}

void sub_100160A84(void *a1, uint64_t a2)
{
  uint64_t v4 = (dispatch_queue_s *)a1[2];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120LL;
  block[2] = sub_100160B30;
  block[3] = &unk_1002B4908;
  void block[5] = v9;
  uint64_t v8 = v10;
  if (v10)
  {
    p_shared_owners = &v10->__shared_owners_;
    do
      unint64_t v6 = __ldxr((unint64_t *)p_shared_owners);
    while (__stxr(v6 + 1, (unint64_t *)p_shared_owners));
  }

  void block[4] = a2;
  dispatch_async(v4, block);
  if (v8) {
    sub_10000ABAC(v8);
  }
  if (v10) {
    sub_10000ABAC(v10);
  }
}

uint64_t sub_100160B30(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void *sub_100160B3C(uint64_t a1, uint64_t a2)
{
  return sub_10000AB5C((void *)(a1 + 40), (void *)(a2 + 40));
}

uint64_t sub_100160B48(uint64_t a1)
{
  return sub_10000AB80(a1 + 40);
}

xpc_object_t *sub_100160B50(xpc_object_t *a1, uint64_t a2)
{
  xpc_object_t v4 = *(xpc_object_t *)a2;
  *a1 = *(xpc_object_t *)a2;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    *a1 = xpc_null_create();
  }
  sub_10000AB5C(a1 + 1, (void *)(a2 + 8));
  return a1;
}

uint64_t sub_100160BA0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100160BAC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_object_t v3 = (os_log_s *)sub_1000160F4("com.apple.wpantund.xpcserver", "default");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    xpc_object_t v4 = (void *)(a1 + 40);
    int v10 = 136315138;
    uint64_t v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Registered command: %s", (uint8_t *)&v10, 0xCu);
  }

  xpc_object_t v5 = (const void **)sub_100160CD8((uint64_t **)(v2 + 232), (std::string *)(a1 + 40));
  unint64_t v6 = *(void **)(a1 + 64);
  if (v6) {
    unint64_t v6 = _Block_copy(v6);
  }
  char v7 = *v5;
  *xpc_object_t v5 = v6;
  if (v7) {
    _Block_release(v7);
  }
  uint64_t v8 = *(dispatch_object_s **)(a1 + 72);
  if (v8) {
    dispatch_retain(v8);
  }
  uint64_t v9 = (dispatch_object_s *)v5[1];
  v5[1] = v8;
  if (v9) {
    dispatch_release(v9);
  }
}

void sub_100160CC4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100006EEC(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_100160CD8(uint64_t **a1, std::string *a2)
{
  xpc_object_t v3 = a2;
  return sub_100160DB4(a1, (const void **)&a2->__r_.__value_.__l.__data_, (uint64_t)&unk_10022B6D0, &v3) + 7;
}

void sub_100160D0C(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4 = *(void **)(a2 + 64);
  if (v4) {
    xpc_object_t v4 = _Block_copy(v4);
  }
  xpc_object_t v5 = *(dispatch_object_s **)(a2 + 72);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 72) = v5;
  if (v5) {
    dispatch_retain(v5);
  }
}

void sub_100160D64(uint64_t a1)
{
  uint64_t v2 = *(dispatch_object_s **)(a1 + 72);
  if (v2) {
    dispatch_release(v2);
  }
  xpc_object_t v3 = *(const void **)(a1 + 64);
  if (v3) {
    _Block_release(v3);
  }
}

void *sub_100160DB4(uint64_t **a1, const void **a2, uint64_t a3, const std::string **a4)
{
  char v7 = sub_10000AE50((uint64_t)a1, &v12, a2);
  uint64_t v8 = (void *)*v7;
  if (!*v7)
  {
    uint64_t v9 = (void **)v7;
    sub_100160E5C((uint64_t)a1, a3, a4, (uint64_t)v11);
    sub_10000AF70(a1, v12, v9, (void *)v11[0]);
    uint64_t v8 = v11[0];
    v11[0] = 0LL;
    sub_100160EE0(v11, 0LL);
  }

  return v8;
}

std::string *sub_100160E5C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, const std::string **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t v8 = (char *)operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  xpc_object_t result = sub_1000BE8C0(v7, (std::string *)(v8 + 32), a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100160EC8(_Unwind_Exception *a1)
{
}

void sub_100160EE0(void **a1, void *a2)
{
  xpc_object_t v3 = *a1;
  *a1 = a2;
  if (v3) {
    sub_100160EFC((uint64_t)(a1 + 1), v3);
  }
}

void sub_100160EFC(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8)) {
    sub_100160F3C((uint64_t)__p + 32);
  }
  if (__p) {
    operator delete(__p);
  }
}

void sub_100160F3C(uint64_t a1)
{
  uint64_t v2 = *(dispatch_object_s **)(a1 + 32);
  if (v2) {
    dispatch_release(v2);
  }
  xpc_object_t v3 = *(const void **)(a1 + 24);
  if (v3) {
    _Block_release(v3);
  }
}

uint64_t sub_100160F8C(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3 = (os_log_s *)sub_1000160F4("com.apple.wpantund.xpcserver", "default");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    sub_1000A9F28(a2, __p);
    if (v7 >= 0) {
      xpc_object_t v4 = __p;
    }
    else {
      xpc_object_t v4 = (void **)__p[0];
    }
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v9 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Entitlement checks are disabled for client connections, allowing: %s \n",  buf,  0xCu);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }

  return 1LL;
}

xpc_object_t *sub_100161074(uint64_t **a1, void **a2)
{
  xpc_object_t v3 = a2;
  return sub_1001614CC(a1, (unint64_t *)a2, (uint64_t)&unk_10022B6D0, &v3) + 5;
}

void sub_1001610A8(uint64_t a1, void **a2, void **a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  xpc_object_t v5 = *a2;
  xpc_object_t v8 = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t v8 = xpc_null_create();
  }
  unint64_t v6 = *a3;
  xpc_object_t object = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  sub_100161158(v4, (xpc::object *)&v8, (xpc::object *)&object);
  xpc_release(object);
  xpc_object_t object = 0LL;
  xpc_release(v8);
}

void sub_100161134( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, xpc_object_t a9, xpc_object_t a10)
{
}

void sub_100161158(uint64_t a1, xpc::object *a2, xpc::object *a3)
{
  unint64_t v6 = *(void **)a2;
  xpc_object_t object = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  sub_100161748(a1, (unint64_t *)&object, &v22);
  xpc_release(object);
  xpc_object_t object = 0LL;
  if (v22)
  {
    char v7 = (os_log_s *)sub_1000160F4("com.apple.wpantund.xpcserver", "default");
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_INFO)) {
      goto LABEL_21;
    }
    sub_10015A2BC(&v22, &v20);
    int size = (char)v20.__r_.__value_.__s.__size_;
    std::string::size_type v9 = v20.__r_.__value_.__r.__words[0];
    xpc::object::to_string(a3);
    int v10 = &v20;
    if (size < 0) {
      int v10 = (std::string *)v9;
    }
    if (v19 >= 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
  }

  else
  {
    char v7 = (os_log_s *)sub_1000160F4("com.apple.wpantund.xpcserver", "default");
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_INFO)) {
      goto LABEL_21;
    }
    xpc::object::to_string(a2);
    xpc::object::to_string(a3);
    int v10 = &v20;
    if ((v20.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      int v10 = (std::string *)v20.__r_.__value_.__r.__words[0];
    }
    if (v19 >= 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
  }

  *(_DWORD *)__int128 buf = 136315394;
  std::string v25 = v10;
  __int16 v26 = 2080;
  unint64_t v27 = v11;
  _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Got message from: %s, of: %s ", buf, 0x16u);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
LABEL_21:
  uint64_t v12 = *(void **)a3;
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
  if (v12)
  {
    xpc_retain(v12);
    xpc_object_t v13 = (xpc_object_t)v20.__r_.__value_.__r.__words[0];
  }

  else
  {
    xpc_object_t v13 = xpc_null_create();
    v20.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
  }

  if (xpc_get_type(v13) == (xpc_type_t)&_xpc_type_dictionary)
  {
    __int16 v14 = *(void **)a2;
    xpc_object_t v17 = v14;
    if (v14) {
      xpc_retain(v14);
    }
    else {
      xpc_object_t v17 = xpc_null_create();
    }
    sub_1001617C0(a1, &v17, (xpc_object_t *)&v20.__r_.__value_.__l.__data_);
    xpc_release(v17);
    xpc_object_t v17 = 0LL;
  }

  if (xpc_get_type(v20.__r_.__value_.__l.__data_) == (xpc_type_t)&_xpc_type_dictionary)
  {
    uint64_t v15 = *(void **)a2;
    xpc_object_t v16 = v15;
    if (v15) {
      xpc_retain(v15);
    }
    else {
      xpc_object_t v16 = xpc_null_create();
    }
    sub_100161D90(a1, (xpc_connection_t *)&v16, (xpc::object *)&v20);
    xpc_release(v16);
    xpc_object_t v16 = 0LL;
  }

  xpc_release(v20.__r_.__value_.__l.__data_);
  if (v23) {
    sub_10000ABAC(v23);
  }
}

void sub_100161428( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, char a24, int a25, __int16 a26, char a27, char a28)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  sub_10000AB80((uint64_t)&a26);
  _Unwind_Resume(a1);
}

xpc_object_t *sub_1001614CC(uint64_t **a1, unint64_t *a2, uint64_t a3, void ***a4)
{
  char v7 = (xpc_object_t **)sub_100161574((uint64_t)a1, &v12, a2);
  xpc_object_t v8 = *v7;
  if (!*v7)
  {
    std::string::size_type v9 = v7;
    sub_1001615C4((uint64_t)a1, a3, a4, (uint64_t)v11);
    sub_10000AF70(a1, v12, v9, v11[0]);
    xpc_object_t v8 = v11[0];
    v11[0] = 0LL;
    sub_1001616B8(v11, 0LL);
  }

  return v8;
}

void *sub_100161574(uint64_t a1, void *a2, unint64_t *a3)
{
  xpc_object_t v5 = *(void **)(a1 + 8);
  xpc_object_t result = (void *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    unint64_t v6 = *a3;
    do
    {
      while (1)
      {
        char v7 = v4;
        unint64_t v8 = v4[4];
        if (v6 >= v8) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        xpc_object_t result = v7;
        if (!*v7) {
          goto LABEL_10;
        }
      }

      if (v8 >= v6) {
        break;
      }
      xpc_object_t result = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }

    while (v4);
  }

  else
  {
    char v7 = result;
  }

void **sub_1001615C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void ***a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  unint64_t v8 = (void **)operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  xpc_object_t result = sub_100161648(v7, v8 + 4, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100161630(_Unwind_Exception *a1)
{
}

void **sub_100161648(uint64_t a1, void **a2, uint64_t a3, void ***a4)
{
  return sub_100161654(a2, *a4);
}

void **sub_100161654(void **a1, void **a2)
{
  xpc_object_t v3 = *a2;
  *a1 = *a2;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    *a1 = xpc_null_create();
  }
  sub_10015A06C(a1 + 1);
  return a1;
}

void sub_100161698(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  _Unwind_Resume(a1);
}

void sub_1001616B8(xpc_object_t **a1, xpc_object_t *a2)
{
  xpc_object_t v3 = *a1;
  *a1 = a2;
  if (v3) {
    sub_1001616D4((uint64_t)(a1 + 1), v3);
  }
}

void sub_1001616D4(uint64_t a1, xpc_object_t *__p)
{
  if (*(_BYTE *)(a1 + 8)) {
    sub_100161714(__p + 4);
  }
  if (__p) {
    operator delete(__p);
  }
}

void sub_100161714(xpc_object_t *a1)
{
  *a1 = 0LL;
}

void *sub_100161748@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, void *a3@<X8>)
{
  xpc_object_t result = sub_100162848(a1 + 208, a2);
  if ((void *)(a1 + 216) != result) {
    return sub_10012F7CC(a3, result + 5);
  }
  return result;
}

void sub_1001617AC(_Unwind_Exception *a1)
{
}

void sub_1001617C0(uint64_t a1, void **a2, xpc_object_t *a3)
{
  __int16 v44 = a3;
  char v45 = (std::__shared_weak_count *)"command";
  sub_1000A99D0((uint64_t)&v44, object);
  std::string __p = 0LL;
  uint64_t v49 = 0LL;
  int v50 = 0LL;
  xpc::dyn_cast_or_default(v46, object, &__p);
  if (SHIBYTE(v50) < 0) {
    operator delete(__p);
  }
  xpc_release(object[0]);
  uint64_t v6 = sub_1000AA160(a1 + 232, (const void **)v46);
  if (a1 + 240 != v6)
  {
    uint64_t v7 = *a2;
    xpc_object_t v43 = v7;
    if (v7) {
      xpc_retain(v7);
    }
    else {
      xpc_object_t v43 = xpc_null_create();
    }
    sub_100161748(a1, (unint64_t *)&v43, &v44);
    xpc_release(v43);
    xpc_object_t v43 = 0LL;
    xpc_object_t reply = xpc_dictionary_create_reply(*a3);
    xpc_object_t v9 = reply;
    if (reply)
    {
      xpc_object_t v42 = reply;
    }

    else
    {
      xpc_object_t v9 = xpc_null_create();
      xpc_object_t v42 = v9;
      if (!v9)
      {
        xpc_object_t v10 = xpc_null_create();
        xpc_object_t v9 = 0LL;
        goto LABEL_14;
      }
    }

    if (xpc_get_type(v9) == (xpc_type_t)&_xpc_type_dictionary)
    {
      xpc_retain(v9);
      xpc_object_t v10 = v9;
      goto LABEL_15;
    }

    xpc_object_t v10 = xpc_null_create();
LABEL_14:
    xpc_object_t v42 = v10;
LABEL_15:
    xpc_release(v9);
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1174405120LL;
    aBlock[2] = sub_1001628BC;
    aBlock[3] = &unk_1002B49B8;
    xpc_object_t v39 = v10;
    if (v10) {
      xpc_retain(v10);
    }
    else {
      xpc_object_t v39 = xpc_null_create();
    }
    uint64_t v11 = *a2;
    xpc_object_t v40 = v11;
    if (v11) {
      xpc_retain(v11);
    }
    else {
      xpc_object_t v40 = xpc_null_create();
    }
    uint64_t v12 = _Block_copy(aBlock);
    xpc_object_t v13 = *(dispatch_object_s **)(a1 + 24);
    if (v13) {
      dispatch_retain(v13);
    }
    object[0] = v12;
    object[1] = v13;
    __int16 v14 = *a2;
    xpc_object_t v37 = v14;
    if (v14) {
      xpc_retain(v14);
    }
    else {
      xpc_object_t v37 = xpc_null_create();
    }
    xpc_object_t v15 = *a3;
    xpc_object_t v36 = v15;
    if (v15)
    {
      xpc_retain(v15);
      if (v12)
      {
LABEL_28:
        xpc_object_t v16 = _Block_copy(v12);
        goto LABEL_31;
      }
    }

    else
    {
      xpc_object_t v36 = xpc_null_create();
      if (v12) {
        goto LABEL_28;
      }
    }

    xpc_object_t v16 = 0LL;
LABEL_31:
    __int128 v34 = v16;
    dispatch_object_t v35 = v13;
    if (v13) {
      dispatch_retain(v13);
    }
    int v17 = sub_1000A9A0C(&v37, &v36, (uint64_t)&v34);
    if (v35) {
      dispatch_release(v35);
    }
    if (v34) {
      _Block_release(v34);
    }
    xpc_release(v36);
    xpc_object_t v36 = 0LL;
    xpc_release(v37);
    xpc_object_t v37 = 0LL;
    if (!v17) {
      goto LABEL_80;
    }
    char v19 = v44;
    uint64_t v18 = v45;
    if (v45)
    {
      p_shared_owners = &v45->__shared_owners_;
      do
        unint64_t v21 = __ldxr((unint64_t *)p_shared_owners);
      while (__stxr(v21 + 1, (unint64_t *)p_shared_owners));
    }

    xpc_object_t v22 = *a3;
    if (*a3)
    {
      xpc_retain(*a3);
      if (v12) {
        goto LABEL_43;
      }
    }

    else
    {
      xpc_object_t v22 = xpc_null_create();
      if (v12)
      {
LABEL_43:
        uint64_t v23 = _Block_copy(v12);
        if (!v13) {
          goto LABEL_45;
        }
        goto LABEL_44;
      }
    }

    uint64_t v23 = 0LL;
    if (!v13)
    {
LABEL_45:
      xpc_object_t v24 = *(const void **)(v6 + 56);
      if (v24) {
        std::string v25 = _Block_copy(v24);
      }
      else {
        std::string v25 = 0LL;
      }
      __int16 v26 = *(dispatch_queue_s **)(v6 + 64);
      std::string __p = _NSConcreteStackBlock;
      uint64_t v49 = 1174405120LL;
      int v50 = sub_100162B5C;
      char v51 = &unk_1002B49E8;
      if (v25) {
        unint64_t v27 = _Block_copy(v25);
      }
      else {
        unint64_t v27 = 0LL;
      }
      unsigned __int8 v52 = v27;
      char v53 = v19;
      unsigned __int8 v54 = v18;
      if (v18)
      {
        xpc_object_t v28 = (unint64_t *)&v18->__shared_owners_;
        do
          unint64_t v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }

      xpc_object_t v55 = v22;
      if (v22)
      {
        xpc_retain(v22);
        if (v23)
        {
LABEL_59:
          int v30 = _Block_copy(v23);
LABEL_62:
          uint64_t v56 = v30;
          dispatch_object_t v57 = v13;
          if (v13) {
            dispatch_retain(v13);
          }
          dispatch_async(v26, &__p);
          if (v57) {
            dispatch_release(v57);
          }
          if (v56) {
            _Block_release(v56);
          }
          xpc_release(v55);
          xpc_object_t v55 = 0LL;
          if (v54) {
            sub_10000ABAC(v54);
          }
          if (v52) {
            _Block_release(v52);
          }
          if (v25) {
            _Block_release(v25);
          }
          if (v13) {
            dispatch_release(v13);
          }
          if (v23) {
            _Block_release(v23);
          }
          xpc_release(v22);
          if (v18) {
            sub_10000ABAC(v18);
          }
LABEL_80:
          xpc_object_t v31 = xpc_null_create();
          xpc_object_t v32 = xpc_null_create();
          xpc_object_t v33 = *a3;
          *a3 = v31;
          xpc_release(v33);
          xpc_release(v32);
          if (v13) {
            dispatch_release(v13);
          }
          if (v12) {
            _Block_release(v12);
          }
          xpc_release(v40);
          xpc_object_t v40 = 0LL;
          xpc_release(v39);
          xpc_object_t v39 = 0LL;
          xpc_release(v42);
          if (v45) {
            sub_10000ABAC(v45);
          }
          goto LABEL_86;
        }
      }

      else
      {
        xpc_object_t v55 = xpc_null_create();
        if (v23) {
          goto LABEL_59;
        }
      }

      int v30 = 0LL;
      goto LABEL_62;
    }

void sub_100161CC8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t a11, xpc_object_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, xpc_object_t object, uint64_t a20, xpc_object_t a21, __int16 a22, char a23, char a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, void *__p, uint64_t a31, int a32, __int16 a33, char a34, char a35, void *a36, uint64_t a37, int a38, __int16 a39, char a40, char a41)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100161D90(uint64_t a1, xpc_connection_t *a2, xpc::object *a3)
{
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  buf.__r_.__value_.__l.__size_ = (std::string::size_type)"command";
  sub_1000A99D0((uint64_t)&buf, object);
  memset(v63, 0, sizeof(v63));
  xpc::dyn_cast_or_default(&__s1, object, v63);
  xpc_release(object[0]);
  size_t v6 = v61;
  unsigned __int8 v7 = v61;
  if ((v61 & 0x80u) != 0) {
    size_t v6 = v60;
  }
  if (v6)
  {
    unint64_t v8 = (os_log_s *)sub_1000160F4("com.apple.wpantund.xpcserver", "default");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      xpc::object::to_string(a3);
      xpc_object_t v9 = (v63[23] & 0x80u) == 0 ? v63 : *(uint8_t **)v63;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "internal message sync dict: %s",  (uint8_t *)&buf,  0xCu);
    }

    xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)a3);
    xpc_object_t v11 = reply;
    if (reply)
    {
      xpc_object_t message = reply;
    }

    else
    {
      xpc_object_t v11 = xpc_null_create();
      xpc_object_t message = v11;
      if (!v11)
      {
        xpc_object_t v12 = xpc_null_create();
        xpc_object_t v11 = 0LL;
        goto LABEL_19;
      }
    }

    if (xpc_get_type(v11) == (xpc_type_t)&_xpc_type_dictionary)
    {
      xpc_retain(v11);
      goto LABEL_20;
    }

    xpc_object_t v12 = xpc_null_create();
LABEL_19:
    xpc_object_t message = v12;
LABEL_20:
    xpc_release(v11);
    if (xpc_get_type(message) != (xpc_type_t)&_xpc_type_dictionary) {
      __assert_rtn("handleInternalMessage_sync", "CtrXPCServer.cpp", 306, "reply");
    }
    size_t v13 = strlen("checkIn");
    size_t v14 = v13;
    size_t v15 = v61;
    if ((char)v61 < 0)
    {
      size_t v17 = v60;
      if (v13 != v60)
      {
        size_t v18 = strlen("eventsOn");
        goto LABEL_36;
      }

      if (v13 != -1LL)
      {
        xpc_object_t v16 = __s1;
LABEL_28:
        if (!memcmp(v16, "checkIn", v14))
        {
          object[0] = a3;
          object[1] = "clientName";
          sub_1000A99D0((uint64_t)object, &v57);
          memset(v63, 0, sizeof(v63));
          xpc::dyn_cast_or_default(&buf, &v57, v63);
          xpc_release(v57);
          xpc_connection_t v22 = *a2;
          xpc_object_t v55 = v22;
          if (v22) {
            xpc_retain(v22);
          }
          else {
            xpc_object_t v55 = xpc_null_create();
          }
          sub_100161748(a1, (unint64_t *)&v55, v63);
          xpc_release(v55);
          xpc_object_t v55 = 0LL;
          if (*(void *)v63) {
            sub_10015A0D0((std::string **)v63, &buf);
          }
          if (*(void *)&v63[8]) {
            sub_10000ABAC(*(std::__shared_weak_count **)&v63[8]);
          }
          int64_t v29 = 0LL;
LABEL_79:
          xpc_object_t v49 = xpc_int64_create(v29);
          if (!v49) {
            xpc_object_t v49 = xpc_null_create();
          }
          *(void *)xpc_object_t v63 = &message;
          *(void *)&v63[8] = "commandResult";
          sub_1000089EC((uint64_t)v63, &v49, &v50);
          xpc_release(v50);
          xpc_object_t v50 = 0LL;
          xpc_release(v49);
          xpc_object_t v49 = 0LL;
          int v30 = (os_log_s *)sub_1000160F4("com.apple.wpantund.xpcserver", "default");
          if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
          {
            p_s1 = &__s1;
            if ((v61 & 0x80u) != 0) {
              p_s1 = __s1;
            }
            *(_DWORD *)xpc_object_t v63 = 136315394;
            *(void *)&v63[4] = p_s1;
            *(_WORD *)&v63[12] = 2080;
            *(void *)&v63[14] = "success";
            _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_INFO,  "Replying to client's command:: %s, with return code: %s ",  v63,  0x16u);
          }

          xpc_connection_send_message(*a2, message);
          xpc_object_t v32 = xpc_null_create();
          xpc_object_t v33 = xpc_null_create();
          xpc_object_t v34 = *(xpc_object_t *)a3;
          *(void *)a3 = v32;
          xpc_release(v34);
          xpc_release(v33);
          size_t v35 = strlen("eventsOn");
          size_t v36 = v35;
          if ((char)v61 < 0)
          {
            if (v35 != v60) {
              goto LABEL_117;
            }
            if (v35 != -1LL)
            {
              xpc_object_t v37 = __s1;
              goto LABEL_92;
            }
          }

          else
          {
            if (v35 != v61) {
              goto LABEL_117;
            }
            if (v35 != -1LL)
            {
              xpc_object_t v37 = &__s1;
LABEL_92:
              if (!memcmp(v37, "eventsOn", v36) && *(_DWORD *)(a1 + 176) == 1)
              {
                xpc_object_t v38 = xpc_dictionary_create(0LL, 0LL, 0LL);
                xpc_object_t v39 = v38;
                if (v38)
                {
                  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
                }

                else
                {
                  xpc_object_t v39 = xpc_null_create();
                  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
                  if (!v39)
                  {
                    xpc_object_t v40 = xpc_null_create();
                    xpc_object_t v39 = 0LL;
                    goto LABEL_101;
                  }
                }

                if (xpc_get_type(v39) == (xpc_type_t)&_xpc_type_dictionary)
                {
                  xpc_retain(v39);
LABEL_102:
                  xpc_release(v39);
                  xpc_object_t v47 = xpc_string_create("ServerStateStarted");
                  if (!v47) {
                    xpc_object_t v47 = xpc_null_create();
                  }
                  *(void *)xpc_object_t v63 = &buf;
                  *(void *)&v63[8] = "KeyServerState";
                  sub_1000089EC((uint64_t)v63, &v47, &v48);
                  xpc_release(v48);
                  xpc_object_t v48 = 0LL;
                  xpc_release(v47);
                  xpc_connection_t v41 = *a2;
                  xpc_object_t v46 = v41;
                  xpc_object_t v47 = 0LL;
                  if (v41) {
                    xpc_retain(v41);
                  }
                  else {
                    xpc_object_t v46 = xpc_null_create();
                  }
                  sub_10000AC00(&__p, "EventServerStateChange");
                  xpc_object_t v44 = (xpc_object_t)buf.__r_.__value_.__r.__words[0];
                  if (buf.__r_.__value_.__r.__words[0]) {
                    xpc_retain(buf.__r_.__value_.__l.__data_);
                  }
                  else {
                    xpc_object_t v44 = xpc_null_create();
                  }
                  aBlocuint64_t k = 0LL;
                  dispatch_object_t v43 = 0LL;
                  sub_100162E0C(a1, &v46, &__p, &v44, (uint64_t)&aBlock);
                  if (v43) {
                    dispatch_release(v43);
                  }
                  if (aBlock) {
                    _Block_release(aBlock);
                  }
                  xpc_release(v44);
                  xpc_object_t v44 = 0LL;
                  xpc_release(v46);
                  xpc_object_t v46 = 0LL;
                  xpc_release(buf.__r_.__value_.__l.__data_);
                  goto LABEL_117;
                }

                xpc_object_t v40 = xpc_null_create();
LABEL_101:
                buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
                goto LABEL_102;
              }

void sub_100162650( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28, xpc_object_t a29, uint64_t a30, xpc_object_t object, char a32, void *a33, uint64_t a34, int a35, __int16 a36, char a37, char a38)
{
  if (a2) {
    sub_100006EEC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100162848(uint64_t a1, unint64_t *a2)
{
  xpc_object_t v3 = (void *)(a1 + 8);
  xpc_object_t result = sub_100162890(a1, a2, *(void **)(a1 + 8), (void *)(a1 + 8));
  if (v3 == result || *a2 < result[4]) {
    return v3;
  }
  return result;
}

void *sub_100162890(uint64_t a1, unint64_t *a2, void *a3, void *a4)
{
  xpc_object_t result = a4;
  if (a3)
  {
    unint64_t v5 = *a2;
    do
    {
      unint64_t v6 = a3[4];
      BOOL v7 = v6 >= v5;
      if (v6 >= v5) {
        unint64_t v8 = a3;
      }
      else {
        unint64_t v8 = a3 + 1;
      }
      if (v7) {
        xpc_object_t result = a3;
      }
      a3 = (void *)*v8;
    }

    while (*v8);
  }

  return result;
}

void sub_1001628BC(uint64_t a1, unsigned int a2, xpc_object_t *a3)
{
  unint64_t v6 = (void *)(a1 + 32);
  if (xpc_get_type(*(xpc_object_t *)(a1 + 32)) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v15 = xpc_int64_create(a2);
    if (!v15) {
      xpc_object_t v15 = xpc_null_create();
    }
    std::string __p = v6;
    xpc_object_t v11 = "commandResult";
    sub_1000089EC((uint64_t)&__p, &v15, &object);
    xpc_release(object);
    xpc_object_t object = 0LL;
    xpc_release(v15);
    xpc_object_t v15 = 0LL;
    if (xpc_get_type(*a3) == (xpc_type_t)&_xpc_type_dictionary)
    {
      xpc_object_t v7 = *a3;
      xpc_object_t v13 = v7;
      if (v7) {
        xpc_retain(v7);
      }
      else {
        xpc_object_t v13 = xpc_null_create();
      }
      std::string __p = v6;
      xpc_object_t v11 = "commandData";
      sub_100160478((uint64_t)&__p, &v13, &v14);
      xpc_release(v14);
      xpc_object_t v14 = 0LL;
      xpc_release(v13);
      xpc_object_t v13 = 0LL;
    }

    unint64_t v8 = (os_log_s *)sub_1000160F4("com.apple.wpantund.xpcserver", "default");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      xpc::object::to_string((xpc::object *)v6);
      if (v12 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      *(_DWORD *)std::string buf = 136315138;
      size_t v18 = p_p;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Sending Reply as: %s", buf, 0xCu);
      if (v12 < 0) {
        operator delete(__p);
      }
    }

    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 40), *(xpc_object_t *)(a1 + 32));
  }

void sub_100162A84(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100006EEC(a1);
  }
  _Unwind_Resume(a1);
}

xpc_object_t sub_100162AC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 32);
  *(void *)(a1 + sub_10000AB80(v2 - 32) = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    *(void *)(a1 + sub_10000AB80(v2 - 32) = xpc_null_create();
  }
  unint64_t v5 = *(void **)(a2 + 40);
  *(void *)(a1 + memset(&v22.ai_socktype, 0, 40) = v5;
  if (v5) {
    return xpc_retain(v5);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + memset(&v22.ai_socktype, 0, 40) = result;
  return result;
}

void sub_100162B20(uint64_t a1)
{
  *(void *)(a1 + memset(&v22.ai_socktype, 0, 40) = 0LL;
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(void *)(a1 + sub_10000AB80(v2 - 32) = 0LL;
}

void sub_100162B5C(uint64_t a1)
{
}

void sub_100162B70(uint64_t *a1, void *a2, void **a3, uint64_t a4)
{
  uint64_t v6 = *a1;
  sub_10000AB5C(&v13, a2);
  xpc_object_t v7 = *a3;
  xpc_object_t v12 = v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    xpc_object_t v12 = xpc_null_create();
  }
  unint64_t v8 = *(void **)a4;
  if (*(void *)a4) {
    unint64_t v8 = _Block_copy(v8);
  }
  xpc_object_t v9 = *(dispatch_object_s **)(a4 + 8);
  aBlocuint64_t k = v8;
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  (*(void (**)(uint64_t, uint64_t *, xpc_object_t *, void **))(v6 + 16))(v6, &v13, &v12, &aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v12);
  xpc_object_t v12 = 0LL;
  if (v14) {
    sub_10000ABAC(v14);
  }
}

void sub_100162C3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  xpc_object_t v6 = va_arg(va2, xpc_object_t);
  sub_100009894((uint64_t)va);
  sub_1000089BC((xpc_object_t *)va1);
  sub_10000AB80((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_100162C64(void *a1, void *a2)
{
  uint64_t v4 = (void *)a2[4];
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  a1[4] = v4;
  sub_10000AB5C(a1 + 5, a2 + 5);
  uint64_t v5 = (void *)a2[7];
  a1[7] = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    a1[7] = xpc_null_create();
  }
  xpc_object_t v6 = (void *)a2[8];
  if (v6) {
    xpc_object_t v6 = _Block_copy(v6);
  }
  xpc_object_t v7 = (dispatch_object_s *)a2[9];
  a1[8] = v6;
  a1[9] = v7;
  if (v7) {
    dispatch_retain(v7);
  }
}

void sub_100162CF0(uint64_t a1)
{
  uint64_t v2 = *(dispatch_object_s **)(a1 + 72);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 64);
  if (v3) {
    _Block_release(v3);
  }
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(void *)(a1 + sub_10000D448(v30 - 56) = 0LL;
  sub_10000AB80(a1 + 40);
  uint64_t v4 = *(const void **)(a1 + 32);
  if (v4) {
    _Block_release(v4);
  }
}

void sub_100162D50(uint64_t a1, void **a2, char a3, const void **a4)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1174405120LL;
  v8[2] = sub_10016301C;
  void v8[3] = &unk_1002B4A18;
  xpc_object_t v7 = *a2;
  v8[4] = a1;
  xpc_object_t object = v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  char v11 = a3;
  sub_10015A530(&v10, a4);
  sub_100160A84((void *)(a1 + 8), (uint64_t)v8);
  sub_10015A564(&v10);
  xpc_release(object);
}

void sub_100162E0C(uint64_t a1, void **a2, const std::string *a3, void **a4, uint64_t a5)
{
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1174405120LL;
  v14[2] = sub_10016325C;
  void v14[3] = &unk_1002B4AA8;
  xpc_object_t v9 = *a4;
  void v14[4] = a1;
  xpc_object_t v15 = v9;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    xpc_object_t v15 = xpc_null_create();
  }
  std::string::basic_string(&__p, a3);
  xpc_object_t v10 = *a2;
  xpc_object_t v17 = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    xpc_object_t v17 = xpc_null_create();
  }
  char v11 = *(void **)a5;
  if (*(void *)a5) {
    char v11 = _Block_copy(v11);
  }
  xpc_object_t v12 = (void *)(a1 + 8);
  uint64_t v13 = *(dispatch_object_s **)(a5 + 8);
  aBlocuint64_t k = v11;
  dispatch_object_t object = v13;
  if (v13) {
    dispatch_retain(v13);
  }
  sub_100160A84(v12, (uint64_t)v14);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v17);
  xpc_object_t v17 = 0LL;
  xpc_release(v15);
}

void sub_100162F48(_Unwind_Exception *a1)
{
}

void *sub_100162F60(void *a1, CFTypeRef *a2)
{
  CFTypeRef v3 = *a2;
  if (*a2)
  {
    CFTypeID v4 = CFGetTypeID(*a2);
    if (v4 == CFArrayGetTypeID()) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = 0LL;
    }
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  return sub_100162FB0(a1, v5);
}

void *sub_100162FB0(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf) {
    CFRetain(cf);
  }
  return a1;
}

const void **sub_100162FE4(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_100163014(uint64_t a1)
{
  return *(void *)a1;
}

void sub_10016301C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  CFTypeID v4 = (xpc::object *)(a1 + 40);
  CFTypeRef v3 = *(void **)(a1 + 40);
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  sub_100161748(v2, (unint64_t *)&object, &v12);
  xpc_release(object);
  xpc_object_t object = 0LL;
  if (v12)
  {
    int v5 = *(unsigned __int8 *)(a1 + 56);
    sub_10015A530(&v10, (const void **)(a1 + 48));
    sub_10015A200(&v12, v5, &v10);
    sub_10015A564(&v10);
  }

  else
  {
    xpc_object_t v6 = (os_log_s *)sub_1000160F4("com.apple.wpantund.xpcserver", "default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      xpc::object::to_string(v4);
      xpc_object_t v7 = v9 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)std::string buf = 136315394;
      xpc_object_t v15 = "is not in client list";
      __int16 v16 = 2080;
      xpc_object_t v17 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s %s ", buf, 0x16u);
      if (v9 < 0) {
        operator delete(__p);
      }
    }
  }

  if (v13) {
    sub_10000ABAC(v13);
  }
}

void sub_100163190( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

const void **sub_1001631E0(uint64_t a1, uint64_t a2)
{
  CFTypeID v4 = *(void **)(a2 + 40);
  *(void *)(a1 + memset(&v22.ai_socktype, 0, 40) = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    *(void *)(a1 + memset(&v22.ai_socktype, 0, 40) = xpc_null_create();
  }
  return sub_10015A530((const void **)(a1 + 48), (const void **)(a2 + 48));
}

void sub_100163228(uint64_t a1)
{
  *(void *)(a1 + memset(&v22.ai_socktype, 0, 40) = 0LL;
}

void sub_10016325C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_object_t v3 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_object_t v4 = v3;
  if (v3)
  {
    xpc_object_t v62 = v3;
  }

  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v62 = v4;
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0LL;
      goto LABEL_8;
    }
  }

  if (xpc_get_type(v4) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v4);
    goto LABEL_9;
  }

  xpc_object_t v5 = xpc_null_create();
LABEL_8:
  xpc_object_t v62 = v5;
LABEL_9:
  xpc_release(v4);
  if (xpc_get_type(*(xpc_object_t *)(a1 + 40)) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v6 = *(void **)(a1 + 40);
    xpc_object_t v60 = v6;
    if (v6) {
      xpc_retain(v6);
    }
    else {
      xpc_object_t v60 = xpc_null_create();
    }
    *(void *)std::string buf = &v62;
    *(void *)&uint8_t buf[8] = "eventData";
    sub_100160478((uint64_t)buf, &v60, &v61);
    xpc_release(v61);
    xpc_object_t v61 = 0LL;
    xpc_release(v60);
    xpc_object_t v60 = 0LL;
  }

  xpc_object_t v58 = xpc_string_create("eventNotification");
  if (!v58) {
    xpc_object_t v58 = xpc_null_create();
  }
  *(void *)std::string buf = &v62;
  *(void *)&uint8_t buf[8] = "command";
  sub_1000089EC((uint64_t)buf, &v58, &v59);
  xpc_release(v59);
  xpc_object_t v59 = 0LL;
  xpc_release(v58);
  xpc_object_t v58 = 0LL;
  xpc_object_t v7 = (const char **)(a1 + 48);
  unint64_t v8 = (const char *)(a1 + 48);
  xpc_object_t v56 = xpc_string_create(v8);
  if (!v56) {
    xpc_object_t v56 = xpc_null_create();
  }
  *(void *)std::string buf = &v62;
  *(void *)&uint8_t buf[8] = "event";
  sub_1000089EC((uint64_t)buf, &v56, &v57);
  xpc_release(v57);
  xpc_object_t v57 = 0LL;
  xpc_release(v56);
  xpc_object_t v56 = 0LL;
  char v9 = dispatch_group_create();
  sub_1000BE6D8(buf, (void *)(v2 + 8));
  uint64_t v11 = *(void *)buf;
  xpc_object_t v10 = *(std::__shared_weak_count **)&buf[8];
  uint64_t v54 = *(void *)buf;
  uint64_t v55 = *(void *)&buf[8];
  if (*(void *)&buf[8])
  {
    xpc_object_t v12 = (unint64_t *)(*(void *)&buf[8] + 16LL);
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    sub_10000ABAC(v10);
  }

  xpc_object_t v14 = *(void **)(a1 + 72);
  xpc_object_t object = v14;
  if (v14) {
    xpc_retain(v14);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  sub_100161748(v2, (unint64_t *)&object, &v52);
  xpc_release(object);
  xpc_object_t object = 0LL;
  std::string::basic_string(&v50, (const std::string *)(a1 + 48));
  int v15 = sub_10015A0FC((uint64_t *)&v52, &v50);
  int v16 = v15;
  if ((char)v50.__r_.__value_.__s.__size_ < 0)
  {
    operator delete(v50.__r_.__value_.__l.__data_);
    if (!v16) {
      goto LABEL_53;
    }
  }

  else if (!v15)
  {
    goto LABEL_53;
  }

  xpc_object_t v17 = (os_log_s *)sub_1000160F4("com.apple.wpantund.xpcserver", "default");
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    size_t v18 = (const char *)(a1 + 48);
    char v19 = sub_10015A2BC(&v52, &__p);
    int size = (char)__p.__r_.__value_.__s.__size_;
    std::string::size_type v21 = __p.__r_.__value_.__r.__words[0];
    uint64_t SystemTime = TelephonyUtilGetSystemTime(v19);
    *(_DWORD *)std::string buf = 136315650;
    p_p = &__p;
    if (size < 0) {
      p_p = (std::string *)v21;
    }
    *(void *)&uint8_t buf[4] = v18;
    *(_WORD *)&_BYTE buf[12] = 2080;
    *(void *)&_BYTE buf[14] = p_p;
    __int16 v64 = 2048;
    uint64_t v65 = SystemTime;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Sending: %s, to: %s, at: %llu", buf, 0x20u);
  }

  if (*(void *)(a1 + 80) && *(void *)(a1 + 88))
  {
    dispatch_group_enter(v9);
    xpc_object_t v24 = *(_xpc_connection_s **)(a1 + 72);
    xpc_object_t v25 = v62;
    __int16 v26 = *(dispatch_queue_s **)(v2 + 24);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 1174405120LL;
    handler[2] = sub_10016390C;
    handler[3] = &unk_1002B4A48;
    handler[4] = v11;
    xpc_object_t v44 = v10;
    if (v10)
    {
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        unint64_t v28 = __ldxr(p_shared_weak_owners);
      while (__stxr(v28 + 1, p_shared_weak_owners));
    }

    char v45 = v52;
    xpc_object_t v46 = v53;
    if (v53)
    {
      p_shared_owners = &v53->__shared_owners_;
      do
        unint64_t v30 = __ldxr((unint64_t *)p_shared_owners);
      while (__stxr(v30 + 1, (unint64_t *)p_shared_owners));
    }

    std::string::basic_string(&v47, (const std::string *)(a1 + 48));
    xpc_object_t v48 = v9;
    xpc_connection_send_message_with_reply(v24, v25, v26, handler);
    if (v46) {
      sub_10000ABAC(v46);
    }
    if (v44) {
      std::__shared_weak_count::__release_weak(v44);
    }
  }

  else
  {
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 72), v62);
  }

void sub_1001637E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *__p, uint64_t a30, int a31, __int16 a32, char a33, char a34, uint64_t a35, void *a36, uint64_t a37, int a38, __int16 a39, char a40, char a41, uint64_t a42, uint64_t a43, int a44, __int16 a45, char a46, char a47, char a48)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  sub_10000AB80((uint64_t)&a27);
  sub_1000BE23C((uint64_t)&a25);
  sub_10000AB80(v48 - 232);
  sub_1000BE23C(v48 - 216);
  sub_1000089BC((xpc_object_t *)(v48 - 152));
  _Unwind_Resume(a1);
}

void sub_10016390C(uint64_t a1)
{
  if (v8)
  {
    uint64_t v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund.xpcserver", "default");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      xpc_object_t v3 = sub_10015A2BC((const std::string **)(a1 + 48), &__p);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      xpc_object_t v5 = (void *)(a1 + 64);
      uint64_t SystemTime = TelephonyUtilGetSystemTime(v3);
      *(_DWORD *)std::string buf = 136315650;
      uint64_t v11 = p_p;
      __int16 v12 = 2080;
      unint64_t v13 = v5;
      __int16 v14 = 2048;
      uint64_t v15 = SystemTime;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s responded to: %s, at: %llu", buf, 0x20u);
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 88));
  if (v9) {
    sub_10000ABAC(v9);
  }
}

void sub_100163A40( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_10000AB80((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_100163A70(uint64_t a1)
{
  if (v9)
  {
    uint64_t v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund.xpcserver", "default");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      xpc::object::to_string((xpc::object *)(a1 + 48));
      xpc_object_t v3 = (void *)(a1 + 56);
      if (SHIBYTE(v12) >= 0) {
        xpc_object_t v4 = __p;
      }
      else {
        xpc_object_t v4 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315394;
      int v16 = v4;
      __int16 v17 = 2080;
      size_t v18 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Client: %s, responded to: %s", buf, 0x16u);
      if (SHIBYTE(v12) < 0) {
        operator delete(__p[0]);
      }
    }
  }

  xpc_object_t v5 = *(const void **)(a1 + 80);
  if (v5) {
    xpc_object_t v6 = _Block_copy(v5);
  }
  else {
    xpc_object_t v6 = 0LL;
  }
  xpc_object_t v7 = *(dispatch_queue_s **)(a1 + 88);
  __p[0] = _NSConcreteStackBlock;
  __p[1] = (void *)1174405120;
  __int16 v12 = sub_100160BA0;
  unint64_t v13 = &unk_1002B4938;
  if (v6) {
    uint64_t v8 = _Block_copy(v6);
  }
  else {
    uint64_t v8 = 0LL;
  }
  aBlocuint64_t k = v8;
  dispatch_async(v7, __p);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v6) {
    _Block_release(v6);
  }
  if (v10) {
    sub_10000ABAC(v10);
  }
}

void sub_100163C10(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100163C44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + sub_10000AB80(v2 - 32) = *(void *)(a2 + 32);
  *(void *)(a1 + memset(&v22.ai_socktype, 0, 40) = v4;
  if (v4)
  {
    xpc_object_t v5 = (unint64_t *)(v4 + 16);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  xpc_object_t v7 = *(void **)(a2 + 48);
  *(void *)(a1 + sub_1000BE23C(v2 - 48) = v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    *(void *)(a1 + sub_1000BE23C(v2 - 48) = xpc_null_create();
  }
  std::string::basic_string((std::string *)(a1 + 56), (const std::string *)(a2 + 56));
  uint64_t v8 = *(void **)(a2 + 80);
  if (v8) {
    uint64_t v8 = _Block_copy(v8);
  }
  uint64_t v9 = *(dispatch_object_s **)(a2 + 88);
  *(void *)(a1 + 80) = v8;
  *(void *)(a1 + 88) = v9;
  if (v9) {
    dispatch_retain(v9);
  }
}

void sub_100163CEC(_Unwind_Exception *a1)
{
}

uint64_t sub_100163D0C(uint64_t a1)
{
  uint64_t v2 = *(dispatch_object_s **)(a1 + 88);
  if (v2) {
    dispatch_release(v2);
  }
  xpc_object_t v3 = *(const void **)(a1 + 80);
  if (v3) {
    _Block_release(v3);
  }
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(void *)(a1 + sub_1000BE23C(v2 - 48) = 0LL;
  return sub_1000BE23C(a1 + 32);
}

void sub_100163D68(std::string *a1, const std::string *a2)
{
  std::string::size_type cap = (void *)a2[1].__r_.__value_.__l.__cap_;
  a1[1].__r_.__value_.__l.__cap_ = (std::string::size_type)cap;
  if (cap) {
    xpc_retain(cap);
  }
  else {
    a1[1].__r_.__value_.__l.__cap_ = (std::string::size_type)xpc_null_create();
  }
  std::string::basic_string(a1 + 2, a2 + 2);
  std::string::pointer data = a2[3].__r_.__value_.__l.__data_;
  a1[3].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
  if (data) {
    xpc_retain(data);
  }
  else {
    a1[3].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  int size = (void *)a2[3].__r_.__value_.__l.__size_;
  if (size) {
    int size = _Block_copy(size);
  }
  xpc_object_t v7 = (dispatch_object_s *)a2[3].__r_.__value_.__l.__cap_;
  a1[3].__r_.__value_.__l.__size_ = (std::string::size_type)size;
  a1[3].__r_.__value_.__l.__cap_ = (std::string::size_type)v7;
  if (v7) {
    dispatch_retain(v7);
  }
}

void sub_100163E0C(_Unwind_Exception *a1)
{
}

void sub_100163E24(uint64_t a1)
{
  uint64_t v2 = *(dispatch_object_s **)(a1 + 88);
  if (v2) {
    dispatch_release(v2);
  }
  xpc_object_t v3 = *(const void **)(a1 + 80);
  if (v3) {
    _Block_release(v3);
  }
  xpc_release(*(xpc_object_t *)(a1 + 72));
  *(void *)(a1 + 72) = 0LL;
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + memset(&v22.ai_socktype, 0, 40) = 0LL;
}

uint64_t sub_100163E8C(uint64_t a1, unint64_t *a2)
{
  xpc_object_t v3 = sub_100162848(a1, a2);
  if ((void *)(a1 + 8) == v3) {
    return 0LL;
  }
  sub_100163ED0(a1, (uint64_t)v3);
  return 1LL;
}

uint64_t sub_100163ED0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100011598(a1, (uint64_t *)a2);
  sub_100161714((xpc_object_t *)(a2 + 32));
  operator delete((void *)a2);
  return v3;
}

uint64_t sub_100163F08(uint64_t a1)
{
  return a1;
}

void sub_100163F30(uint64_t a1, xpc_object_t *a2)
{
  if (a2)
  {
    sub_100163F30(a1, *a2);
    sub_100163F30(a1, a2[1]);
    sub_100161714(a2 + 4);
    operator delete(a2);
  }

uint64_t sub_100163F78(uint64_t a1)
{
  return a1;
}

void sub_100163FA0(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100163FA0(a1, *a2);
    sub_100163FA0(a1, a2[1]);
    sub_100160F3C((uint64_t)(a2 + 4));
    operator delete(a2);
  }

void *sub_100163FE8(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &off_1002B4AE8;
  v4[1] = 0LL;
  void v4[2] = 0LL;
  void v4[3] = a2;
  a1[1] = v4;
  uint64_t v6 = 0LL;
  sub_1001640E0(&v6, 0LL);
  return a1;
}

void sub_100164048(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100164064(std::__shared_weak_count *a1)
{
}

void sub_100164078(uint64_t a1)
{
}

uint64_t sub_100164080(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void sub_1001640C0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (void *)sub_10000AB80(a2);
    operator delete(v2);
  }

void sub_1001640E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_10000AB80(v3);
    operator delete(v4);
  }

char *spinel_packed_uint_decode(char *result, int a2, _DWORD *a3)
{
  LODWORD(v3) = 0;
  int v4 = 0;
  unsigned int v5 = 0;
  while (1)
  {
    uint64_t v6 = 0xFFFFFFFFLL;
    if (!a2 || v5 > 0x1F) {
      return (char *)v6;
    }
    BOOL v7 = __CFADD__((int)v3, 1LL);
    uint64_t v3 = (int)v3 + 1LL;
    if (v7) {
      break;
    }
    char v8 = *result++;
    int v9 = (v8 & 0x7F) << v5;
    v5 += 7;
    v4 |= v9;
    --a2;
    if ((v8 & 0x80) == 0)
    {
      if (a3)
      {
      }

      return (char *)v3;
    }
  }

  __break(0x5500u);
  return result;
}

uint64_t spinel_packed_uint_size(unsigned int a1)
{
  if (a1 >> 28) {
    int v1 = 5;
  }
  else {
    int v1 = 4;
  }
  if (a1 >= 0x200000) {
    int v2 = v1;
  }
  else {
    int v2 = 3;
  }
  if (a1 >= 0x4000) {
    unsigned int v3 = v2;
  }
  else {
    unsigned int v3 = 2;
  }
  if (a1 >= 0x80) {
    return v3;
  }
  else {
    return 1LL;
  }
}

uint64_t spinel_packed_uint_encode(_BYTE *a1, int a2, unsigned int a3)
{
  if (a3 >> 28) {
    int v3 = 5;
  }
  else {
    int v3 = 4;
  }
  if (a3 >= 0x200000) {
    int v4 = v3;
  }
  else {
    int v4 = 3;
  }
  if (a3 >= 0x4000) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 2;
  }
  if (a3 >= 0x80) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 1LL;
  }
  if ((int)v6 <= a2)
  {
    int v7 = v6 - 1;
    if ((_DWORD)v6 != 1)
    {
      do
      {
        *a1++ = a3 | 0x80;
        a3 >>= 7;
        --v7;
      }

      while (v7);
    }

    *a1 = a3 & 0x7F;
  }

  return v6;
}

_BYTE *spinel_next_packed_datatype(_BYTE *result)
{
  int v1 = result;
  int v2 = 0;
  while (1)
  {
    int v4 = (char)*++result;
    int v3 = v4;
    if (v4 == 41)
    {
      --v2;
      uint64_t v6 = v1 + 2;
      if (!v2) {
        xpc_object_t result = v6;
      }
LABEL_9:
      if (v2 < 1) {
        return result;
      }
      goto LABEL_10;
    }

    if (v3 != 40) {
      goto LABEL_9;
    }
    if (__OFADD__(v2++, 1)) {
      break;
    }
LABEL_10:
    int v1 = result;
    if (!*result) {
      return result;
    }
  }

  __break(0x5500u);
  return result;
}

uint64_t spinel_datatype_unpack_in_place( _WORD *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  xpc_object_t v10 = &a9;
  return sub_100164298(1LL, a1, a2, a3, (void ***)&v10);
}

uint64_t sub_100164298(uint64_t result, _WORD *a2, uint64_t a3, unsigned __int8 *a4, void ***a5)
{
  if (a3 >> 15)
  {
LABEL_131:
    char v51 = __error();
    int v52 = 22;
    goto LABEL_132;
  }

  uint64_t v7 = a3;
  int v9 = result;
  uint64_t v10 = 0LL;
  while (2)
  {
    int v11 = *a4;
    if (!*a4 || v11 == 41) {
      return v10;
    }
    int v11 = (char)v11;
    if ((char)v11 <= 82)
    {
      switch(v11)
      {
        case 'C':
          goto LABEL_29;
        case 'D':
          goto LABEL_34;
        case 'E':
          __int16 v12 = (*a5)++;
          unint64_t v13 = *v12;
          if (v9) {
            goto LABEL_78;
          }
          if (v13) {
            *unint64_t v13 = a2;
          }
          goto LABEL_80;
        case 'F':
        case 'G':
        case 'H':
        case 'I':
        case 'J':
        case 'K':
          goto LABEL_131;
        case 'L':
          goto LABEL_38;
        default:
          if (v11 == 46) {
            goto LABEL_82;
          }
          if (v11 != 54) {
            goto LABEL_131;
          }
          char v19 = (_OWORD **)(*a5)++;
          size_t v20 = *v19;
          if (v9)
          {
            if (v20) {
              *size_t v20 = *(_OWORD *)a2;
            }
          }

          else if (v20)
          {
            *(void *)size_t v20 = a2;
          }

          BOOL v16 = __CFADD__((int)v10, 16LL);
          uint64_t v10 = (int)v10 + 16LL;
          if (v16) {
            goto LABEL_141;
          }
          uint64_t v7 = (v7 - 16);
          a2 += 8;
          break;
      }

      goto LABEL_82;
    }

    switch(v11)
    {
      case 'b':
        __int16 v14 = (BOOL **)(*a5)++;
        if (!(_DWORD)v7) {
          goto LABEL_135;
        }
        uint64_t v15 = *v14;
        if (v15) {
          *uint64_t v15 = *(_BYTE *)a2 != 0;
        }
        BOOL v16 = __CFADD__((int)v10, 1LL);
        uint64_t v10 = (int)v10 + 1LL;
        if (v16) {
          goto LABEL_141;
        }
        uint64_t v7 = (v7 - 1);
        a2 = (_WORD *)((char *)a2 + 1);
        goto LABEL_82;
      case 'c':
LABEL_29:
        std::string::size_type v21 = (_BYTE **)(*a5)++;
        if (!(_DWORD)v7) {
          goto LABEL_135;
        }
        xpc_connection_t v22 = *v21;
        if (v22) {
          *xpc_connection_t v22 = *(_BYTE *)a2;
        }
        BOOL v16 = __CFADD__((int)v10, 1LL);
        uint64_t v10 = (int)v10 + 1LL;
        if (v16) {
          goto LABEL_141;
        }
        uint64_t v7 = (v7 - 1);
        a2 = (_WORD *)((char *)a2 + 1);
        goto LABEL_82;
      case 'd':
LABEL_34:
        unsigned __int16 v55 = 0;
        uint64_t v23 = (*a5)++;
        xpc_object_t v24 = *v23;
        *a5 = v23 + 2;
        xpc_object_t v25 = v23[1];
        xpc_object_t result = (uint64_t)spinel_next_packed_datatype(a4);
        if (*a4 == 100 || *(_BYTE *)result && *(_BYTE *)result != 41)
        {
          xpc_object_t result = spinel_datatype_unpack(a2, v7, "S");
          unsigned __int16 v27 = 0;
          int v26 = result;
          unint64_t v28 = (char *)a2 + result;
        }

        else
        {
          int v26 = 0;
          unsigned __int16 v55 = v7;
          unsigned __int16 v27 = v7;
          unint64_t v28 = (char *)a2;
        }

        if (__OFADD__(v26, v27)) {
          goto LABEL_141;
        }
        if ((int)v7 < v26 + v27)
        {
          int v53 = 84;
          goto LABEL_138;
        }

        if (v9)
        {
          if (!v25 || *v25 < v27)
          {
            int v53 = 22;
LABEL_138:
            *__error() = v53;
            return 0xFFFFFFFFLL;
          }

          xpc_object_t result = (uint64_t)memcpy(v24, v28, v27);
LABEL_58:
          unsigned __int16 v27 = v55;
          *xpc_object_t v25 = v55;
          goto LABEL_59;
        }

        if (v24) {
          *xpc_object_t v24 = v28;
        }
        if (v25) {
          goto LABEL_58;
        }
LABEL_59:
        unsigned __int16 v34 = v27 + v26;
LABEL_67:
        BOOL v35 = __OFADD__((_DWORD)v10, v34);
        uint64_t v10 = v10 + v34;
        if (v35) {
          goto LABEL_141;
        }
        BOOL v16 = v7 >= v34;
        uint64_t v7 = v7 - v34;
        if (!v16) {
          goto LABEL_142;
        }
        a2 = (_WORD *)((char *)a2 + v34);
        goto LABEL_82;
      case 'e':
        xpc_object_t v37 = (uint64_t *)(*a5)++;
        uint64_t v38 = *v37;
        if (v9)
        {
          if (v38)
          {
            int v39 = *(_DWORD *)a2;
            *(_WORD *)(v38 + 4) = a2[2];
            *(_DWORD *)uint64_t v38 = v39;
          }
        }

        else if (v38)
        {
          *(void *)uint64_t v38 = a2;
        }

        BOOL v16 = __CFADD__((int)v10, 6LL);
        uint64_t v10 = (int)v10 + 6LL;
        if (v16) {
          goto LABEL_141;
        }
        uint64_t v7 = (v7 - 6);
        a2 += 3;
        goto LABEL_82;
      case 'f':
      case 'g':
      case 'h':
      case 'j':
      case 'k':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'q':
      case 'r':
        goto LABEL_131;
      case 'i':
        std::string v40 = (_DWORD **)(*a5)++;
        xpc_connection_t v41 = *v40;
        xpc_object_t result = (uint64_t)spinel_packed_uint_decode((char *)a2, v7, *v40);
        if (v41 && *v41 >= 0x1FFFFFu)
        {
          char v51 = __error();
          int v52 = 34;
          goto LABEL_132;
        }

        BOOL v35 = __OFADD__((_DWORD)v10, (_DWORD)result);
        uint64_t v10 = (v10 + result);
        if (v35) {
          goto LABEL_141;
        }
        BOOL v16 = v7 >= result;
        uint64_t v7 = (v7 - result);
        if (!v16) {
          goto LABEL_142;
        }
        a2 = (_WORD *)((char *)a2 + result);
        goto LABEL_82;
      case 'l':
LABEL_38:
        int64_t v29 = (_DWORD **)(*a5)++;
        unint64_t v30 = *v29;
        if (v30) {
          *unint64_t v30 = *(_DWORD *)a2;
        }
        BOOL v16 = __CFADD__((int)v10, 4LL);
        uint64_t v10 = (int)v10 + 4LL;
        if (v16) {
          goto LABEL_141;
        }
        uint64_t v7 = (v7 - 4);
        a2 += 2;
        goto LABEL_82;
      case 's':
LABEL_18:
        __int16 v17 = (_WORD **)(*a5)++;
        size_t v18 = *v17;
        if (v18) {
          *size_t v18 = *a2;
        }
        BOOL v16 = __CFADD__((int)v10, 2LL);
        uint64_t v10 = (int)v10 + 2LL;
        if (v16) {
          goto LABEL_141;
        }
        uint64_t v7 = (v7 - 2);
        ++a2;
        goto LABEL_82;
      case 't':
LABEL_51:
        __int16 v54 = 0;
        xpc_object_t result = (uint64_t)spinel_next_packed_datatype(a4);
        if (*a4 == 116 || *(_BYTE *)result && *(_BYTE *)result != 41)
        {
          xpc_object_t result = spinel_datatype_unpack(a2, v7, "S");
          unsigned __int16 v32 = 0;
          int v31 = result;
          unint64_t v33 = (char *)a2 + result;
        }

        else
        {
          int v31 = 0;
          __int16 v54 = v7;
          unsigned __int16 v32 = v7;
          unint64_t v33 = (char *)a2;
        }

        if (__OFADD__(v31, v32)) {
          goto LABEL_141;
        }
        if ((int)v7 < v31 + v32 || (xpc_object_t result = sub_100164298(0LL, v33, v32, a4 + 2, a5), (result & 0x80000000) != 0))
        {
LABEL_135:
          char v51 = __error();
          int v52 = 84;
          goto LABEL_132;
        }

        unsigned __int16 v34 = v54 + v31;
        if (!v31) {
          unsigned __int16 v34 = result;
        }
        goto LABEL_67;
      default:
        switch(v11)
        {
          case 'S':
            goto LABEL_18;
          case 'T':
            goto LABEL_51;
          case 'U':
            if (!(_DWORD)v7) {
              goto LABEL_135;
            }
            xpc_object_t result = strnlen((const char *)a2, v7);
            size_t v43 = result + 1;
            if (result == -1) {
              goto LABEL_141;
            }
            char v44 = *(_BYTE *)a2;
            if (!*(_BYTE *)a2) {
              goto LABEL_117;
            }
            char v45 = (char *)a2;
            break;
          case 'V':
          case 'W':
            goto LABEL_131;
          case 'X':
            goto LABEL_76;
          default:
            if (v11 != 120) {
              goto LABEL_131;
            }
LABEL_76:
            size_t v36 = (*a5)++;
            unint64_t v13 = *v36;
LABEL_78:
            if (v13) {
              *unint64_t v13 = *(void *)a2;
            }
LABEL_80:
            BOOL v16 = __CFADD__((int)v10, 8LL);
            uint64_t v10 = (int)v10 + 8LL;
            if (v16) {
              goto LABEL_141;
            }
            uint64_t v7 = (v7 - 8);
            a2 += 4;
            goto LABEL_82;
        }

        do
        {
          ++v45;
          if (v44 < 0)
          {
            if ((v44 & 0x40) == 0) {
              goto LABEL_131;
            }
            if ((v44 & 0x20) != 0)
            {
              if ((v44 & 0x10) != 0)
              {
                if ((v44 & 8) != 0) {
                  goto LABEL_131;
                }
                unsigned int v46 = 3;
              }

              else
              {
                unsigned int v46 = 2;
              }
            }

            else
            {
              unsigned int v46 = 1;
            }

            std::string v47 = &v45[v46];
            while ((_BYTE)v46)
            {
              LOBYTE(v46) = v46 - 1;
              char v48 = *v45++;
              if ((v48 & 0xC0) != 0x80) {
                goto LABEL_131;
              }
            }

            char v45 = v47;
          }

          char v44 = *v45;
        }

        while (*v45);
LABEL_117:
        xpc_object_t v49 = (uint64_t *)(*a5)++;
        xpc_object_t result = *v49;
        if (!v9)
        {
          if (result) {
            *(void *)xpc_object_t result = a2;
          }
          goto LABEL_127;
        }

        std::string v50 = (size_t *)(*a5)++;
        if (!result) {
          goto LABEL_127;
        }
        if (*v50 >= v43)
        {
          xpc_object_t result = (uint64_t)memcpy((void *)result, a2, v43);
LABEL_127:
          BOOL v16 = __CFADD__((_DWORD)v10, (_DWORD)v43);
          uint64_t v10 = (v10 + v43);
          if (v16)
          {
LABEL_141:
            __break(0x5500u);
LABEL_142:
            __break(0x5515u);
            return result;
          }

          BOOL v16 = v7 >= v43;
          uint64_t v7 = (v7 - v43);
          if (!v16) {
            goto LABEL_142;
          }
          a2 = (_WORD *)((char *)a2 + v43);
LABEL_82:
          xpc_object_t result = (uint64_t)spinel_next_packed_datatype(a4);
          a4 = (unsigned __int8 *)result;
          continue;
        }

        char v51 = __error();
        int v52 = 12;
LABEL_132:
        *char v51 = v52;
        return 0xFFFFFFFFLL;
    }
  }

uint64_t spinel_datatype_unpack( _WORD *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = &a9;
  return sub_100164298(0LL, a1, a2, a3, (void ***)&v10);
}

uint64_t spinel_datatype_vunpack_in_place(_WORD *a1, uint64_t a2, unsigned __int8 *a3, void **a4)
{
  v5[0] = a4;
  v5[1] = a4;
  return sub_100164298(1LL, a1, a2, a3, v5);
}

uint64_t spinel_datatype_vunpack(_WORD *a1, uint64_t a2, unsigned __int8 *a3, void **a4)
{
  v5[0] = a4;
  v5[1] = a4;
  return sub_100164298(0LL, a1, a2, a3, v5);
}

uint64_t spinel_datatype_pack( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = &a9;
  return sub_1001649B8(a1, a2, a3, &v10);
}

uint64_t sub_1001649B8(uint64_t result, unsigned int a2, unsigned __int8 *a3, unsigned int **a4)
{
  if (a2 < 0x8000)
  {
    uint64_t v6 = (_BYTE *)result;
    uint64_t v7 = 0LL;
    if (result) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = 0LL;
    }
    while (1)
    {
      int v9 = *a3;
      if (!*a3 || v9 == 41) {
        return v7;
      }
      if ((char)v9 > 82)
      {
        switch((char)v9)
        {
          case 'b':
            __int16 v12 = *a4;
            *a4 += 2;
            BOOL v46 = __CFADD__((int)v7, 1LL);
            uint64_t v7 = (int)v7 + 1LL;
            if (v46) {
              goto LABEL_92;
            }
            if (!(_DWORD)v8) {
              break;
            }
            LOBYTE(v12) = *v12 != 0;
            goto LABEL_31;
          case 'c':
LABEL_28:
            __int16 v12 = *a4;
            *a4 += 2;
            BOOL v46 = __CFADD__((int)v7, 1LL);
            uint64_t v7 = (int)v7 + 1LL;
            if (v46) {
              goto LABEL_92;
            }
            if (!(_DWORD)v8) {
              break;
            }
            LODWORD(v12) = *v12;
LABEL_31:
            *v6++ = (_BYTE)v12;
            uint64_t v8 = (v8 - 1);
            break;
          case 'd':
LABEL_32:
            uint64_t v15 = *a4;
            *a4 += 2;
            BOOL v16 = *(const void **)v15;
            *a4 = v15 + 4;
            size_t v17 = v15[2];
            packed_datatype = spinel_next_packed_datatype(a3);
            if (*a3 == 100 || (xpc_object_t v24 = packed_datatype, result = 0LL, (v25 = *v24) != 0) && v25 != 41)
            {
              xpc_object_t result = spinel_datatype_pack((uint64_t)v6, v8, (uint64_t)"S", v19, v20, v21, v22, v23, v17);
            }

            unsigned int v26 = result + v17;
            if (__CFADD__((_DWORD)result, (_DWORD)v17)) {
              goto LABEL_92;
            }
            BOOL v46 = __CFADD__((_DWORD)v7, v26);
            uint64_t v7 = v7 + v26;
            if (v46) {
              goto LABEL_92;
            }
            BOOL v46 = v8 >= result;
            unsigned int v27 = v8 - result;
            if (!v46) {
              goto LABEL_93;
            }
            unint64_t v28 = &v6[result];
            if (v6)
            {
              if (v16) {
                xpc_object_t result = (uint64_t)memcpy(&v6[result], v16, v17);
              }
            }

            BOOL v46 = v27 >= v17;
            uint64_t v8 = v27 - v17;
            if (!v46) {
              goto LABEL_93;
            }
            uint64_t v6 = &v28[v17];
            break;
          case 'e':
            dispatch_object_t v42 = *a4;
            *a4 += 2;
            BOOL v46 = __CFADD__((int)v7, 6LL);
            uint64_t v7 = (int)v7 + 6LL;
            if (v46) {
              goto LABEL_92;
            }
            BOOL v46 = v8 >= 6;
            uint64_t v8 = (v8 - 6);
            if (!v46) {
              goto LABEL_85;
            }
            size_t v43 = *(int **)v42;
            int v44 = *v43;
            *((_WORD *)v6 + 2) = *((_WORD *)v43 + 2);
            *(_DWORD *)uint64_t v6 = v44;
            v6 += 6;
            break;
          case 'f':
          case 'g':
          case 'h':
          case 'j':
          case 'k':
          case 'm':
          case 'n':
          case 'o':
          case 'p':
          case 'q':
          case 'r':
            goto LABEL_90;
          case 'i':
            char v45 = *a4;
            *a4 += 2;
            if (*v45 >= 0x1FFFFF) {
              goto LABEL_90;
            }
            xpc_object_t result = spinel_packed_uint_encode(v6, v8, *v45);
            BOOL v39 = __OFADD__((_DWORD)v7, (_DWORD)result);
            uint64_t v7 = (v7 + result);
            if (v39) {
              goto LABEL_92;
            }
            BOOL v39 = __OFSUB__((_DWORD)v8, (_DWORD)result);
            BOOL v46 = v8 >= result;
            uint64_t v8 = (v8 - result);
            if (!v46) {
              goto LABEL_93;
            }
            v6 += result;
            break;
          case 'l':
LABEL_47:
            int64_t v29 = *a4;
            *a4 += 2;
            BOOL v46 = __CFADD__((int)v7, 4LL);
            uint64_t v7 = (int)v7 + 4LL;
            if (v46) {
              goto LABEL_92;
            }
            BOOL v46 = v8 >= 4;
            uint64_t v8 = (v8 - 4);
            if (!v46) {
              goto LABEL_85;
            }
            *(_DWORD *)uint64_t v6 = *v29;
            v6 += 4;
            break;
          case 's':
LABEL_18:
            unint64_t v13 = *a4;
            *a4 += 2;
            BOOL v46 = __CFADD__((int)v7, 2LL);
            uint64_t v7 = (int)v7 + 2LL;
            if (v46) {
              goto LABEL_92;
            }
            BOOL v46 = v8 >= 2;
            uint64_t v8 = (v8 - 2);
            if (!v46) {
              goto LABEL_85;
            }
            *(_WORD *)uint64_t v6 = *v13;
            v6 += 2;
            break;
          case 't':
LABEL_51:
            unint64_t v30 = spinel_next_packed_datatype(a3);
            if (a3[1] != 40) {
              goto LABEL_90;
            }
            int v31 = *v30;
            std::string v50 = *a4;
            uint64_t v37 = sub_1001649B8(0LL, 0LL, a3 + 2, &v50);
            if (*a3 == 116 || (xpc_object_t result = 0LL, v31) && v31 != 41)
            {
              xpc_object_t result = spinel_datatype_pack((uint64_t)v6, v8, (uint64_t)"S", v32, v33, v34, v35, v36, v37);
            }

            int v38 = result + v37;
            if (__OFADD__((_DWORD)result, (_DWORD)v37)) {
              goto LABEL_92;
            }
            BOOL v39 = __OFADD__((_DWORD)v7, v38);
            uint64_t v7 = (v7 + v38);
            if (v39) {
              goto LABEL_92;
            }
            BOOL v46 = v8 >= result;
            uint64_t v40 = (v8 - result);
            if (!v46) {
              goto LABEL_93;
            }
            xpc_connection_t v41 = &v6[result];
            xpc_object_t result = sub_1001649B8(v41, v40, a3 + 2, a4);
            BOOL v46 = v40 >= result;
            uint64_t v8 = (v40 - result);
            if (!v46) {
              goto LABEL_93;
            }
            uint64_t v6 = &v41[(int)result];
            break;
          default:
            switch((char)v9)
            {
              case 'S':
                goto LABEL_18;
              case 'T':
                goto LABEL_51;
              case 'U':
                std::string v47 = (const char **)*a4;
                *a4 += 2;
                char v48 = *v47;
                if (*v47)
                {
                  xpc_object_t result = strlen(*v47);
                  size_t v49 = result + 1;
                  if (result == -1) {
                    goto LABEL_92;
                  }
                }

                else
                {
                  char v48 = "";
                  size_t v49 = 1LL;
                }

                BOOL v46 = __CFADD__((_DWORD)v7, (_DWORD)v49);
                uint64_t v7 = (v7 + v49);
                if (v46)
                {
LABEL_92:
                  __break(0x5500u);
LABEL_93:
                  __break(0x5515u);
                  return result;
                }

                if (v49 <= v8)
                {
                  xpc_object_t result = (uint64_t)memcpy(v6, v48, v49);
                  BOOL v46 = v8 >= v49;
                  uint64_t v8 = (v8 - v49);
                  if (!v46) {
                    goto LABEL_93;
                  }
                  v6 += v49;
                }

                else
                {
LABEL_85:
                  uint64_t v8 = 0LL;
                }

                break;
              case 'V':
              case 'W':
                goto LABEL_90;
              case 'X':
                goto LABEL_65;
              default:
LABEL_65:
                int v11 = *a4;
                *a4 += 2;
                BOOL v46 = __CFADD__((int)v7, 8LL);
                uint64_t v7 = (int)v7 + 8LL;
                if (v46) {
                  goto LABEL_92;
                }
                BOOL v46 = v8 >= 8;
                uint64_t v8 = (v8 - 8);
                if (!v46) {
                  goto LABEL_85;
                }
LABEL_68:
                *(void *)uint64_t v6 = *(void *)v11;
                v6 += 8;
                goto LABEL_86;
            }

            break;
        }
      }

      else
      {
        switch((char)v9)
        {
          case 'C':
            goto LABEL_28;
          case 'D':
            goto LABEL_32;
          case 'E':
            uint64_t v10 = *a4;
            *a4 += 2;
            BOOL v46 = __CFADD__((int)v7, 8LL);
            uint64_t v7 = (int)v7 + 8LL;
            if (v46) {
              goto LABEL_92;
            }
            BOOL v46 = v8 >= 8;
            uint64_t v8 = (v8 - 8);
            if (!v46) {
              goto LABEL_85;
            }
            int v11 = *(unsigned int **)v10;
            goto LABEL_68;
          case 'F':
          case 'G':
          case 'H':
          case 'I':
          case 'J':
          case 'K':
            goto LABEL_90;
          case 'L':
            goto LABEL_47;
          default:
            __int16 v14 = *a4;
            *a4 += 2;
            BOOL v46 = __CFADD__((int)v7, 16LL);
            uint64_t v7 = (int)v7 + 16LL;
            if (v46) {
              goto LABEL_92;
            }
            BOOL v46 = v8 >= 0x10;
            uint64_t v8 = (v8 - 16);
            if (!v46) {
              goto LABEL_85;
            }
            *(_OWORD *)uint64_t v6 = *(_OWORD *)*(void *)v14;
            v6 += 16;
            break;
        }
      }

uint64_t spinel_datatype_vpack(uint64_t a1, unsigned int a2, unsigned __int8 *a3, unsigned int *a4)
{
  v5[0] = a4;
  v5[1] = a4;
  return sub_1001649B8(a1, a2, a3, v5);
}

const char *spinel_command_to_cstr(unsigned int a1)
{
  if (a1 > 0x17) {
    return "UNKNOWN";
  }
  else {
    return off_1002B4B70[a1];
  }
}

const char *spinel_prop_key_to_cstr(int a1)
{
  xpc_object_t result = "UNKNOWN";
  if (a1 <= 4863)
  {
    if (a1 <= 1279)
    {
      if (a1 > 255)
      {
        int v3 = "15_4_PIB_PHY_CHANNELS_SUPPORTED";
        int v4 = "15_4_PIB_MAC_PROMISCUOUS_MODE";
        unsigned int v5 = "15_4_PIB_MAC_SECURITY_ENABLED";
        if (a1 != 1117) {
          unsigned int v5 = "UNKNOWN";
        }
        if (a1 != 1105) {
          int v4 = v5;
        }
        if (a1 != 1025) {
          int v3 = v4;
        }
        uint64_t v6 = "UART_BITRATE";
        uint64_t v7 = "UART_XON_XOFF";
        if (a1 != 257) {
          uint64_t v7 = "UNKNOWN";
        }
        if (a1 != 256) {
          uint64_t v6 = v7;
        }
        if (a1 <= 1024) {
          return v6;
        }
        else {
          return v3;
        }
      }

      else
      {
        switch(a1)
        {
          case 0:
            xpc_object_t result = "LAST_STATUS";
            break;
          case 1:
            xpc_object_t result = "PROTOCOL_VERSION";
            break;
          case 2:
            xpc_object_t result = "NCP_VERSION";
            break;
          case 3:
            xpc_object_t result = "INTERFACE_TYPE";
            break;
          case 4:
            xpc_object_t result = "VENDOR_ID";
            break;
          case 5:
            xpc_object_t result = "CAPS";
            break;
          case 6:
            xpc_object_t result = "INTERFACE_COUNT";
            break;
          case 7:
            xpc_object_t result = "POWER_STATE";
            break;
          case 8:
            xpc_object_t result = "HWADDR";
            break;
          case 9:
            xpc_object_t result = "LOCK";
            break;
          case 10:
            xpc_object_t result = "HBO_MEM_MAX";
            break;
          case 11:
            xpc_object_t result = "HBO_BLOCK_MAX";
            break;
          case 12:
            xpc_object_t result = "HOST_POWER_STATE";
            break;
          case 13:
            xpc_object_t result = "MCU_POWER_STATE";
            break;
          case 32:
            xpc_object_t result = "PHY_ENABLED";
            break;
          case 33:
            xpc_object_t result = "PHY_CHAN";
            break;
          case 34:
            xpc_object_t result = "PHY_CHAN_SUPPORTED";
            break;
          case 35:
            xpc_object_t result = "PHY_FREQ";
            break;
          case 36:
            xpc_object_t result = "PHY_CCA_THRESHOLD";
            break;
          case 37:
            xpc_object_t result = "PHY_TX_POWER";
            break;
          case 38:
            xpc_object_t result = "PHY_RSSI";
            break;
          case 39:
            xpc_object_t result = "PHY_RX_SENSITIVITY";
            break;
          case 40:
            xpc_object_t result = "PHY_PCAP_ENABLED";
            break;
          case 41:
            xpc_object_t result = "PHY_CHAN_PREFERRED";
            break;
          case 48:
            xpc_object_t result = "MAC_SCAN_STATE";
            break;
          case 49:
            xpc_object_t result = "MAC_SCAN_MASK";
            break;
          case 50:
            xpc_object_t result = "MAC_SCAN_PERIOD";
            break;
          case 51:
            xpc_object_t result = "MAC_SCAN_BEACON";
            break;
          case 52:
            xpc_object_t result = "MAC_15_4_LADDR";
            break;
          case 53:
            xpc_object_t result = "MAC_15_4_SADDR";
            break;
          case 54:
            xpc_object_t result = "MAC_15_4_PANID";
            break;
          case 55:
            xpc_object_t result = "MAC_RAW_STREAM_ENABLED";
            break;
          case 56:
            xpc_object_t result = "MAC_PROMISCUOUS_MODE";
            break;
          case 57:
            xpc_object_t result = "MAC_ENERGY_SCAN_RESULT";
            break;
          case 58:
            xpc_object_t result = "MAC_DATA_POLL_PERIOD";
            break;
          case 64:
            xpc_object_t result = "NET_SAVED";
            break;
          case 65:
            xpc_object_t result = "NET_IF_UP";
            break;
          case 66:
            xpc_object_t result = "NET_STACK_UP";
            break;
          case 67:
            xpc_object_t result = "NET_ROLE";
            break;
          case 68:
            xpc_object_t result = "NET_NETWORK_NAME";
            break;
          case 69:
            xpc_object_t result = "NET_XPANID";
            break;
          case 70:
            xpc_object_t result = "NET_NETWORK_KEY";
            break;
          case 71:
            xpc_object_t result = "NET_KEY_SEQUENCE_COUNTER";
            break;
          case 72:
            xpc_object_t result = "NET_PARTITION_ID";
            break;
          case 73:
            xpc_object_t result = "NET_REQUIRE_JOIN_EXISTING";
            break;
          case 74:
            xpc_object_t result = "NET_KEY_SWITCH_GUARDTIME";
            break;
          case 75:
            xpc_object_t result = "NET_PSKC";
            break;
          case 80:
            xpc_object_t result = "THREAD_LEADER_ADDR";
            break;
          case 81:
            xpc_object_t result = "THREAD_PARENT";
            break;
          case 82:
            xpc_object_t result = "THREAD_CHILD_TABLE";
            break;
          case 83:
            xpc_object_t result = "THREAD_LEADER_RID";
            break;
          case 84:
            xpc_object_t result = "THREAD_LEADER_WEIGHT";
            break;
          case 85:
            xpc_object_t result = "THREAD_LOCAL_LEADER_WEIGHT";
            break;
          case 86:
            xpc_object_t result = "THREAD_NETWORK_DATA";
            break;
          case 87:
            xpc_object_t result = "THREAD_NETWORK_DATA_VERSION";
            break;
          case 88:
            xpc_object_t result = "THREAD_STABLE_NETWORK_DATA";
            break;
          case 89:
            xpc_object_t result = "THREAD_STABLE_NETWORK_DATA_VERSION";
            break;
          case 90:
            xpc_object_t result = "THREAD_ON_MESH_NETS";
            break;
          case 91:
            xpc_object_t result = "THREAD_OFF_MESH_ROUTES";
            break;
          case 92:
            xpc_object_t result = "THREAD_ASSISTING_PORTS";
            break;
          case 93:
            xpc_object_t result = "THREAD_ALLOW_LOCAL_NET_DATA_CHANGE";
            break;
          case 94:
            xpc_object_t result = "THREAD_MODE";
            break;
          case 96:
            xpc_object_t result = "IPV6_LL_ADDR";
            break;
          case 97:
            xpc_object_t result = "IPV6_ML_ADDR";
            break;
          case 98:
            xpc_object_t result = "IPV6_ML_PREFIX";
            break;
          case 99:
            xpc_object_t result = "IPV6_ADDRESS_TABLE";
            break;
          case 100:
            xpc_object_t result = "IPV6_ROUTE_TABLE";
            break;
          case 101:
            xpc_object_t result = "IPV6_ICMP_PING_OFFLOAD";
            break;
          case 102:
            xpc_object_t result = "IPV6_MULTICAST_ADDRESS_TABLE";
            break;
          case 103:
            xpc_object_t result = "IPV6_ICMP_PING_OFFLOAD_MODE";
            break;
          case 112:
            xpc_object_t result = "STREAM_DEBUG";
            break;
          case 113:
            xpc_object_t result = "STREAM_RAW";
            break;
          case 114:
            xpc_object_t result = "STREAM_NET";
            break;
          case 115:
            xpc_object_t result = "STREAM_NET_INSECURE";
            break;
          case 116:
            xpc_object_t result = "STREAM_LOG";
            break;
          case 117:
            xpc_object_t result = "STREAM_PCAP";
            break;
          case 128:
            xpc_object_t result = "MESHCOP_JOINER_STATE";
            break;
          case 129:
            xpc_object_t result = "MESHCOP_JOINER_COMMISSIONING";
            break;
          case 130:
            xpc_object_t result = "MESHCOP_COMMISSIONER_STATE";
            break;
          case 131:
            xpc_object_t result = "MESHCOP_COMMISSIONER_JOINERS";
            break;
          case 132:
            xpc_object_t result = "MESHCOP_COMMISSIONER_PROVISIONING_URL";
            break;
          case 133:
            xpc_object_t result = "MESHCOP_COMMISSIONER_SESSION_ID";
            break;
          case 143:
            xpc_object_t result = "MESHCOP_JOINER_SCAN_RETRIES";
            break;
          case 160:
            xpc_object_t result = "SERVER_ALLOW_LOCAL_DATA_CHANGE";
            break;
          case 161:
            xpc_object_t result = "SERVER_SERVICES";
            break;
          case 162:
            xpc_object_t result = "SERVER_LEADER_SERVICES";
            break;
          default:
            return result;
        }
      }
    }

    else if (a1 <= 1679)
    {
      if (a1 <= 1379)
      {
        switch(a1)
        {
          case 1280:
            xpc_object_t result = "CNTR_RESET";
            break;
          case 1281:
            xpc_object_t result = "CNTR_TX_PKT_TOTAL";
            break;
          case 1282:
            xpc_object_t result = "CNTR_TX_PKT_ACK_REQ";
            break;
          case 1283:
            xpc_object_t result = "CNTR_TX_PKT_ACKED";
            break;
          case 1284:
            xpc_object_t result = "CNTR_TX_PKT_NO_ACK_REQ";
            break;
          case 1285:
            xpc_object_t result = "CNTR_TX_PKT_DATA";
            break;
          case 1286:
            xpc_object_t result = "CNTR_TX_PKT_DATA_POLL";
            break;
          case 1287:
            xpc_object_t result = "CNTR_TX_PKT_BEACON";
            break;
          case 1288:
            xpc_object_t result = "CNTR_TX_PKT_BEACON_REQ";
            break;
          case 1289:
            xpc_object_t result = "CNTR_TX_PKT_OTHER";
            break;
          case 1290:
            xpc_object_t result = "CNTR_TX_PKT_RETRY";
            break;
          case 1291:
            xpc_object_t result = "CNTR_TX_ERR_CCA";
            break;
          case 1292:
            xpc_object_t result = "CNTR_TX_PKT_UNICAST";
            break;
          case 1293:
            xpc_object_t result = "CNTR_TX_PKT_BROADCAST";
            break;
          case 1294:
            xpc_object_t result = "CNTR_TX_ERR_ABORT";
            break;
          default:
            return result;
        }
      }

      else
      {
        switch(a1)
        {
          case 1380:
            xpc_object_t result = "CNTR_RX_PKT_TOTAL";
            break;
          case 1381:
            xpc_object_t result = "CNTR_RX_PKT_DATA";
            break;
          case 1382:
            xpc_object_t result = "CNTR_RX_PKT_DATA_POLL";
            break;
          case 1383:
            xpc_object_t result = "CNTR_RX_PKT_BEACON";
            break;
          case 1384:
            xpc_object_t result = "CNTR_RX_PKT_BEACON_REQ";
            break;
          case 1385:
            xpc_object_t result = "CNTR_RX_PKT_OTHER";
            break;
          case 1386:
            xpc_object_t result = "CNTR_RX_PKT_FILT_WL";
            break;
          case 1387:
            xpc_object_t result = "CNTR_RX_PKT_FILT_DA";
            break;
          case 1388:
            xpc_object_t result = "CNTR_RX_ERR_EMPTY";
            break;
          case 1389:
            xpc_object_t result = "CNTR_RX_ERR_UKWN_NBR";
            break;
          case 1390:
            xpc_object_t result = "CNTR_RX_ERR_NVLD_SADDR";
            break;
          case 1391:
            xpc_object_t result = "CNTR_RX_ERR_SECURITY";
            break;
          case 1392:
            xpc_object_t result = "CNTR_RX_ERR_BAD_FCS";
            break;
          case 1393:
            xpc_object_t result = "CNTR_RX_ERR_OTHER";
            break;
          case 1394:
            xpc_object_t result = "CNTR_RX_PKT_DUP";
            break;
          case 1395:
            xpc_object_t result = "CNTR_RX_PKT_UNICAST";
            break;
          case 1396:
            xpc_object_t result = "CNTR_RX_PKT_BROADCAST";
            break;
          default:
            switch(a1)
            {
              case 1580:
                xpc_object_t result = "CNTR_TX_SPINEL_TOTAL";
                break;
              case 1581:
                xpc_object_t result = "CNTR_RX_SPINEL_TOTAL";
                break;
              case 1582:
                xpc_object_t result = "CNTR_RX_SPINEL_ERR";
                break;
              case 1583:
                xpc_object_t result = "CNTR_RX_SPINEL_OUT_OF_ORDER_TID";
                break;
              case 1584:
                xpc_object_t result = "CNTR_IP_TX_SUCCESS";
                break;
              case 1585:
                xpc_object_t result = "CNTR_IP_RX_SUCCESS";
                break;
              case 1586:
                xpc_object_t result = "CNTR_IP_TX_FAILURE";
                break;
              case 1587:
                xpc_object_t result = "CNTR_IP_RX_FAILURE";
                break;
              default:
                switch(a1)
                {
                  case 1480:
                    xpc_object_t result = "CNTR_TX_IP_SEC_TOTAL";
                    break;
                  case 1481:
                    xpc_object_t result = "CNTR_TX_IP_INSEC_TOTAL";
                    break;
                  case 1482:
                    xpc_object_t result = "CNTR_TX_IP_DROPPED";
                    break;
                  case 1483:
                    xpc_object_t result = "CNTR_RX_IP_SEC_TOTAL";
                    break;
                  case 1484:
                    xpc_object_t result = "CNTR_RX_IP_INSEC_TOTAL";
                    break;
                  case 1485:
                    xpc_object_t result = "CNTR_RX_IP_DROPPED";
                    break;
                  default:
                    return result;
                }

                break;
            }

            break;
        }
      }
    }

    else
    {
      switch(a1)
      {
        case 4608:
          xpc_object_t result = "JAM_DETECT_ENABLE";
          break;
        case 4609:
          xpc_object_t result = "JAM_DETECTED";
          break;
        case 4610:
          xpc_object_t result = "JAM_DETECT_RSSI_THRESHOLD";
          break;
        case 4611:
          xpc_object_t result = "JAM_DETECT_WINDOW";
          break;
        case 4612:
          xpc_object_t result = "JAM_DETECT_BUSY";
          break;
        case 4613:
          xpc_object_t result = "JAM_DETECT_HISTORY_BITMAP";
          break;
        case 4614:
          xpc_object_t result = "CHANNEL_MONITOR_SAMPLE_INTERVAL";
          break;
        case 4615:
          xpc_object_t result = "CHANNEL_MONITOR_RSSI_THRESHOLD";
          break;
        case 4616:
          xpc_object_t result = "CHANNEL_MONITOR_SAMPLE_WINDOW";
          break;
        case 4617:
          xpc_object_t result = "CHANNEL_MONITOR_SAMPLE_COUNT";
          break;
        case 4618:
          xpc_object_t result = "CHANNEL_MONITOR_CHANNEL_OCCUPANCY";
          break;
        case 4619:
          xpc_object_t result = "RADIO_CAPS";
          break;
        case 4620:
          xpc_object_t result = "RADIO_COEX_METRICS";
          break;
        case 4621:
          xpc_object_t result = "RADIO_COEX_ENABLE";
          break;
        case 4622:
          xpc_object_t result = "CHUTIL_MONITOR_SAMPLE_INTERVAL";
          break;
        case 4623:
          xpc_object_t result = "CHUTIL_MONITOR_CCA_FAILURE_THRESHOLD";
          break;
        case 4624:
          xpc_object_t result = "CHUTIL_MONITOR_NOACK_FAILURE_THRESHOLD";
          break;
        case 4625:
          xpc_object_t result = "CHUTIL_MONITOR_RX_GRANT_THRESHOLD";
          break;
        case 4626:
          xpc_object_t result = "CHUTIL_MONITOR_ENABLED";
          break;
        case 4627:
          xpc_object_t result = "CHANUTIL_MONITOR_STATE";
          break;
        case 4628:
          xpc_object_t result = "TPC_MODE";
          break;
        case 4629:
          xpc_object_t result = "TPC_LINK_METRICS_PROBE_INTERVAL";
          break;
        case 4630:
          xpc_object_t result = "TPC_WEIGHT_FACTOR";
          break;
        case 4631:
          xpc_object_t result = "TPC_SET_POINT_ROUTER";
          break;
        case 4632:
          xpc_object_t result = "TPC_SET_POINT_END_DEVICE";
          break;
        case 4633:
          xpc_object_t result = "TPC_PROPOTIONAL_GAIN";
          break;
        case 4634:
          xpc_object_t result = "TPC_INTEGRAL_GAIN";
          break;
        case 4635:
          xpc_object_t result = "TPC_ERROR_GAIN_CODEWORD0";
          break;
        case 4636:
          xpc_object_t result = "TPC_ERROR_GAIN_CODEWORD1";
          break;
        case 4637:
          xpc_object_t result = "TPC_ERROR_GAIN_CODEWORD2";
          break;
        case 4638:
          xpc_object_t result = "TPC_ERROR_GAIN_CODEWORD3";
          break;
        case 4639:
          xpc_object_t result = "TPC_STEP_UP_ACK_LOST";
          break;
        case 4640:
        case 4641:
        case 4642:
        case 4643:
        case 4644:
          return result;
        case 4645:
          xpc_object_t result = "TPC_FRAME_TX_POWER_HISTOGRAM";
          break;
        case 4646:
          xpc_object_t result = "TPC_NEIGHBOR_TX_POWER_HISTOGRAM";
          break;
        case 4647:
          xpc_object_t result = "TPC_NEIGHBOR_ENERGY_SAVINGS_FACTOR_HISTOGRAM";
          break;
        default:
          switch(a1)
          {
            case 4096:
              xpc_object_t result = "GPIO_CONFIG";
              break;
            case 4097:
              return result;
            case 4098:
              xpc_object_t result = "GPIO_STATE";
              break;
            case 4099:
              xpc_object_t result = "GPIO_STATE_SET";
              break;
            case 4100:
              xpc_object_t result = "GPIO_STATE_CLEAR";
              break;
            case 4101:
              xpc_object_t result = "TRNG_32";
              break;
            case 4102:
              xpc_object_t result = "TRNG_128";
              break;
            case 4103:
              xpc_object_t result = "TRNG_RAW_32";
              break;
            case 4104:
              xpc_object_t result = "UNSOL_UPDATE_FILTER";
              break;
            case 4105:
              xpc_object_t result = "UNSOL_UPDATE_LIST";
              break;
            default:
              switch(a1)
              {
                case 1680:
                  xpc_object_t result = "MSG_BUFFER_COUNTERS";
                  break;
                case 1681:
                  xpc_object_t result = "CNTR_ALL_MAC_COUNTERS";
                  break;
                case 1682:
                  xpc_object_t result = "CNTR_MLE_COUNTERS";
                  break;
                case 1683:
                  xpc_object_t result = "CNTR_ALL_IP_COUNTERS";
                  break;
                case 1684:
                  xpc_object_t result = "CNTR_MAC_RETRY_HISTOGRAM";
                  break;
                default:
                  return result;
              }

              break;
          }

          break;
      }
    }
  }

  else if (a1 > 15295)
  {
    if (a1 > 15583)
    {
      if (a1 <= 2000000)
      {
        switch(a1)
        {
          case 15616:
            xpc_object_t result = "VENDOR_NCP_BUFFER_THRESH_LVLS";
            break;
          case 15617:
            xpc_object_t result = "VENDOR_NCP_BUFFER_STATUS";
            break;
          case 15618:
            xpc_object_t result = "VENDOR_NCP_LOGS_DROPPED_COUNTER";
            break;
          case 15619:
            xpc_object_t result = "VENDOR_NCP_LOGS_DROPPED_FILTER_COUNTER_THRESHOLD";
            break;
          case 15620:
            xpc_object_t result = "VENDOR_NCP_LOGS_DROPPED_FILTER_TIMER_PERIOD";
            break;
          default:
            switch(a1)
            {
              case 16384:
                xpc_object_t result = "DEBUG_TEST_ASSERT";
                break;
              case 16385:
                xpc_object_t result = "DEBUG_NCP_LOG_LEVEL";
                break;
              case 16386:
                xpc_object_t result = "DEBUG_TEST_WATCHDOG";
                break;
              case 16387:
                xpc_object_t result = "DEBUG_LOG_TIMESTAMP_BASE";
                break;
              default:
                if (a1 == 15584) {
                  xpc_object_t result = "VENDOR_OPENTHREAD_RADIO_COUNTERS";
                }
                break;
            }

            break;
        }
      }

      else
      {
        switch(a1)
        {
          case 2000001:
            xpc_object_t result = "VENDOR_RSSI_OFFSET";
            break;
          case 2000002:
            xpc_object_t result = "VENDOR_MAC_PKT_SIZE_HISTOGRAM";
            break;
          case 2000003:
            xpc_object_t result = "VENDOR_LQI_HISTOGRAM";
            break;
          case 2000004:
            xpc_object_t result = "VENDOR_LINK_LOSS_COUNTER";
            break;
          case 2000005:
            xpc_object_t result = "VENDOR_NEIGHBOR_RSSI_HISTOGRAM";
            break;
          case 2000006:
            xpc_object_t result = "VENDOR_JOINER_RSSI_HISTOGRAM";
            break;
          case 2000007:
            xpc_object_t result = "VENDOR_MLE_ADV_TX_NUM";
            break;
          case 2000008:
            xpc_object_t result = "VENDOR_CONNECTED_NEIGHBORS_HISTOGRAM";
            break;
          case 2000009:
            xpc_object_t result = "VENDOR_MAC_ERROR_HISTOGRAM";
            break;
          case 2000014:
            xpc_object_t result = "NETWORKDIAGNOSTICS_GET";
            break;
          case 2000015:
            xpc_object_t result = "NETWORKDIAGNOSTICS_GET_RESPONSE";
            break;
          case 2000016:
            xpc_object_t result = "VENDOR_MIN_MAC_INTERFRAME_DELAY";
            break;
          case 2000017:
            xpc_object_t result = "VENDOR_TX_APPLICATION_PKT_COUNTER";
            break;
          default:
            return result;
        }
      }
    }

    else if (a1 <= 15423)
    {
      if (a1 <= 15359)
      {
        if (a1 == 15296)
        {
          return "NEST_STREAM_MFG";
        }

        else
        {
          uint64_t v8 = "NEST_LEGACY_LAST_NODE_JOINED";
          if (a1 != 15298) {
            uint64_t v8 = "UNKNOWN";
          }
          if (a1 == 15297) {
            return "NEST_LEGACY_ULA_PREFIX";
          }
          else {
            return v8;
          }
        }
      }

      else
      {
        switch(a1)
        {
          case 15360:
            xpc_object_t result = "VENDOR_COEX_RX_REQUEST_MODE";
            break;
          case 15361:
            xpc_object_t result = "VENDOR_COEX_TX_REQUEST_MODE";
            break;
          case 15362:
            xpc_object_t result = "VENDOR_COEX_ENABLED";
            break;
          case 15363:
            xpc_object_t result = "VENDOR_COEX_COUNTERS";
            break;
          case 15364:
            xpc_object_t result = "COEX_GRANT_TIMEOUT";
            break;
          case 15365:
            xpc_object_t result = "COEX_RX_THROTTLE_MAX_ATTEMPTS_NONE";
            break;
          case 15366:
            xpc_object_t result = "COEX_RX_THROTTLE_MAX_ATTEMPTS_TX_ONLY";
            break;
          case 15367:
            xpc_object_t result = "COEX_RX_THROTTLE_MAX_ATTEMPTS_RX_ONLY";
            break;
          case 15368:
            xpc_object_t result = "COEX_RX_THROTTLE_TIMEOUT";
            break;
          case 15369:
            xpc_object_t result = "COEX_VENDOR_HISTOGRAMS";
            break;
          case 15370:
            xpc_object_t result = "COEX_REQUEST_AHEAD_CSL_TX";
            break;
          case 15371:
            xpc_object_t result = "COEX_REQUEST_AHEAD_CSL_TX_MIN";
            break;
          default:
            return result;
        }
      }
    }

    else
    {
      switch(a1)
      {
        case 15424:
          xpc_object_t result = "VENDOR_PMU_WAKE_FACTORY_TEST_START";
          break;
        case 15425:
          xpc_object_t result = "VENDOR_PMU_WAKE_FACTORY_TEST_RESULT";
          break;
        case 15426:
          xpc_object_t result = "VENDOR_UART_DISABLE_START";
          break;
        case 15440:
          xpc_object_t result = "VENDOR_FEM_ENABLED";
          break;
        case 15456:
          xpc_object_t result = "VENDOR_CSMA_MIN_BE";
          break;
        case 15457:
          xpc_object_t result = "VENDOR_CSMA_MAX_BE";
          break;
        case 15458:
          xpc_object_t result = "VENDOR_CSMA_MAX_BACKOFFS";
          break;
        case 15459:
          xpc_object_t result = "VENDOR_CSMA_SLIDING_WINDOW_ENABLED";
          break;
        case 15460:
          xpc_object_t result = "CSMA_CCA_ENERGY_DETECTED_HISTOGRAM";
          break;
        case 15461:
          xpc_object_t result = "CSMA_BACKOFF_HISTOGRAM";
          break;
        case 15462:
          xpc_object_t result = "VENDOR_CSMA_CCA_IDLE_ATTEMPTS";
          break;
        case 15472:
          xpc_object_t result = "VENDOR_IFS_MODE";
          break;
        case 15473:
          xpc_object_t result = "IFS_MIN_SIFS";
          break;
        case 15474:
          xpc_object_t result = "IFS_MIN_LIFS";
          break;
        case 15475:
          xpc_object_t result = "IFS_MIN_RETX_SIFS";
          break;
        case 15476:
          xpc_object_t result = "IFS_MIN_RETX_LIFS";
          break;
        case 15477:
          xpc_object_t result = "IFS_ACKTURNAROUND_TIME";
          break;
        case 15478:
          xpc_object_t result = "IFS_ACK_TX_MODE";
          break;
        case 15479:
          xpc_object_t result = "IFS_ACK_TURNAROUND_TIME_PER_NEIGHBOR_ENABLE";
          break;
        case 15480:
          xpc_object_t result = "IFS_ACK_DATA_PER_NEIGHBOR";
          break;
        case 15488:
          xpc_object_t result = "VENDOR_VERSION";
          break;
        case 15489:
          xpc_object_t result = "VENDOR_RADIO_COUNTERS";
          break;
        case 15490:
          xpc_object_t result = "VENDOR_RADIO_STATS";
          break;
        case 15491:
          xpc_object_t result = "VENDOR_ASSERT";
          break;
        case 15492:
          xpc_object_t result = "VENDOR_HARD_FAULT";
          break;
        case 15493:
          xpc_object_t result = "VENDOR_STACK_OVERFLOW";
          break;
        case 15494:
          xpc_object_t result = "VENDOR_ASSIGNED_HW_MAC";
          break;
        case 15496:
          xpc_object_t result = "VENDOR_LOGGING_TEST";
          break;
        case 15497:
          xpc_object_t result = "FILTER_UNSOL_NOTIF";
          break;
        case 15498:
          xpc_object_t result = "FAULT_INFO";
          break;
        case 15499:
          xpc_object_t result = "DEEP_SLEEP_FILTER_LIST";
          break;
        case 15500:
          xpc_object_t result = "DEEP_SLEEP_LOG_LEVEL";
          break;
        case 15501:
          xpc_object_t result = "DEEP_SLEEP_REGION_LOG_LEVELS";
          break;
        case 15502:
          xpc_object_t result = "LAST_HOST_WAKE_REASON";
          break;
        case 15505:
          xpc_object_t result = "CNTR_STAT_ALL_RESET";
          break;
        case 15506:
          xpc_object_t result = "NCP_STATE_DUMP";
          break;
        case 15507:
          xpc_object_t result = "DEVICE_ID";
          break;
        case 15509:
          xpc_object_t result = "CSL_TX_SCHED_FRAME_REQUEST_AHEAD";
          break;
        case 15510:
          xpc_object_t result = "SETTINGS_VALIDATE";
          break;
        case 15520:
          xpc_object_t result = "VENDOR_POWER_LIMI_TABLE";
          break;
        case 15522:
          xpc_object_t result = "VENDOR_POWER_LIMIT_ACTIVE_ID";
          break;
        case 15523:
          xpc_object_t result = "VENDOR_POWER_LIMIT_TABLE_VERSION";
          break;
        case 15524:
          xpc_object_t result = "SPINEL_PROP_VENDOR_POWER_LIMIT_TABLE_POWER_TEST";
          break;
        case 15525:
          xpc_object_t result = "VENDOR_POWER_LIMIT_ACTIVE_TABLE";
          break;
        case 15526:
          xpc_object_t result = "VENDOR_POWER_MAPPING_TABLE";
          break;
        case 15527:
          xpc_object_t result = "VENDOR_POWER_MAPPING_TABLE_VERSION";
          break;
        case 15528:
          xpc_object_t result = "VENDOR_POWER_MAPPING_DEFAULT";
          break;
        case 15529:
          xpc_object_t result = "VENDOR_POWER_MAPPING_TABLE_POWER_TEST";
          break;
        case 15530:
          xpc_object_t result = "VENDOR_RADIO_CURRENT_POWER_INFO";
          break;
        case 15531:
          xpc_object_t result = "VENDOR_POWER_MAPPING_TABLE_FLASH_CLEAR";
          break;
        case 15532:
          xpc_object_t result = "VENDOR_POWER_MAPPING_TABLE_FLASH_DATA";
          break;
        case 15533:
          xpc_object_t result = "VENDOR_POWER_MAPPING_TABLE_FLASH_DATA_VALID";
          break;
        default:
          return result;
      }
    }
  }

  else if (a1 > 6143)
  {
    switch(a1)
    {
      case 6400:
        xpc_object_t result = "CHANNEL_MANAGER_NEW_CHANNEL";
        break;
      case 6401:
        xpc_object_t result = "CHANNEL_MANAGER_DELAY";
        break;
      case 6402:
        xpc_object_t result = "CHANNEL_MANAGER_SUPPORTED_CHANNELS";
        break;
      case 6403:
        xpc_object_t result = "CHANNEL_MANAGER_FAVORED_CHANNELS";
        break;
      case 6404:
        xpc_object_t result = "CHANNEL_MANAGER_CHANNEL_SELECT";
        break;
      case 6405:
        xpc_object_t result = "CHANNEL_MANAGER_AUTO_SELECT_ENABLED";
        break;
      case 6406:
        xpc_object_t result = "CHANNEL_MANAGER_AUTO_SELECT_INTERVAL";
        break;
      case 6407:
        xpc_object_t result = "THREAD_NETWORK_TIME";
        break;
      case 6408:
        xpc_object_t result = "TIME_SYNC_PERIOD";
        break;
      case 6409:
        xpc_object_t result = "TIME_SYNC_XTAL_THRESHOLD";
        break;
      case 6410:
        xpc_object_t result = "CHILD_SUPERVISION_INTERVAL";
        break;
      case 6411:
        xpc_object_t result = "CHILD_SUPERVISION_CHECK_TIMEOUT";
        break;
      case 6412:
        xpc_object_t result = "RCP_VERSION";
        break;
      case 6413:
        xpc_object_t result = "PARENT_RESPONSE_INFO";
        break;
      case 6414:
        xpc_object_t result = "SLAAC_ENABLED";
        break;
      case 6415:
      case 6416:
      case 6417:
      case 6418:
      case 6419:
      case 6420:
      case 6421:
      case 6422:
      case 6423:
      case 6424:
      case 6425:
      case 6426:
      case 6427:
        return result;
      case 6428:
        xpc_object_t result = "MAC_CSL_DEBUGGING";
        break;
      default:
        switch(a1)
        {
          case 6144:
            xpc_object_t result = "MESHCOP_COMMISSIONER_ANNOUNCE_BEGIN";
            break;
          case 6145:
            xpc_object_t result = "MESHCOP_COMMISSIONER_ENERGY_SCAN";
            break;
          case 6146:
            xpc_object_t result = "MESHCOP_COMMISSIONER_ENERGY_SCAN_RESULT";
            break;
          case 6147:
            xpc_object_t result = "MESHCOP_COMMISSIONER_PAN_ID_QUERY";
            break;
          case 6148:
            xpc_object_t result = "MESHCOP_COMMISSIONER_PAN_ID_CONFLICT_RESULT";
            break;
          case 6149:
            xpc_object_t result = "MESHCOP_COMMISSIONER_MGMT_GET";
            break;
          case 6150:
            xpc_object_t result = "MESHCOP_COMMISSIONER_MGMT_SET";
            break;
          case 6151:
            xpc_object_t result = "MESHCOP_COMMISSIONER_GENERATE_PSKC";
            break;
          default:
            return result;
        }

        break;
    }
  }

  else
  {
    switch(a1)
    {
      case 5376:
        xpc_object_t result = "THREAD_CHILD_TIMEOUT";
        break;
      case 5377:
        xpc_object_t result = "THREAD_RLOC16";
        break;
      case 5378:
        xpc_object_t result = "THREAD_ROUTER_UPGRADE_THRESHOLD";
        break;
      case 5379:
        xpc_object_t result = "THREAD_CONTEXT_REUSE_DELAY";
        break;
      case 5380:
        xpc_object_t result = "THREAD_NETWORK_ID_TIMEOUT";
        break;
      case 5381:
        xpc_object_t result = "THREAD_ACTIVE_ROUTER_IDS";
        break;
      case 5382:
        xpc_object_t result = "THREAD_RLOC16_DEBUG_PASSTHRU";
        break;
      case 5383:
        xpc_object_t result = "THREAD_ROUTER_ROLE_ENABLED";
        break;
      case 5384:
        xpc_object_t result = "THREAD_ROUTER_DOWNGRADE_THRESHOLD";
        break;
      case 5385:
        xpc_object_t result = "THREAD_ROUTER_SELECTION_JITTER";
        break;
      case 5386:
        xpc_object_t result = "THREAD_PREFERRED_ROUTER_ID";
        break;
      case 5387:
        xpc_object_t result = "THREAD_NEIGHBOR_TABLE";
        break;
      case 5388:
        xpc_object_t result = "THREAD_CHILD_COUNT_MAX";
        break;
      case 5389:
        xpc_object_t result = "THREAD_LEADER_NETWORK_DATA";
        break;
      case 5390:
        xpc_object_t result = "THREAD_STABLE_LEADER_NETWORK_DATA";
        break;
      case 5391:
        xpc_object_t result = "THREAD_JOINERS";
        break;
      case 5392:
        xpc_object_t result = "THREAD_COMMISSIONER_ENABLED";
        break;
      case 5393:
        xpc_object_t result = "THREAD_TMF_PROXY_ENABLED";
        break;
      case 5394:
        xpc_object_t result = "THREAD_TMF_PROXY_STREAM";
        break;
      case 5395:
        xpc_object_t result = "THREAD_DISCOVERY_SCAN_JOINER_FLAG";
        break;
      case 5396:
        xpc_object_t result = "THREAD_DISCOVERY_SCAN_ENABLE_FILTERING";
        break;
      case 5397:
        xpc_object_t result = "THREAD_DISCOVERY_SCAN_PANID";
        break;
      case 5398:
        xpc_object_t result = "THREAD_STEERING_DATA";
        break;
      case 5399:
        xpc_object_t result = "THREAD_ROUTER_TABLE";
        break;
      case 5400:
        xpc_object_t result = "THREAD_ACTIVE_DATASET";
        break;
      case 5401:
        xpc_object_t result = "THREAD_PENDING_DATASET";
        break;
      case 5402:
        xpc_object_t result = "THREAD_MGMT_SET_ACTIVE_DATASET";
        break;
      case 5403:
        xpc_object_t result = "THREAD_MGMT_SET_PENDING_DATASET";
        break;
      case 5404:
        xpc_object_t result = "DATASET_ACTIVE_TIMESTAMP";
        break;
      case 5405:
        xpc_object_t result = "DATASET_PENDING_TIMESTAMP";
        break;
      case 5406:
        xpc_object_t result = "DATASET_DELAY_TIMER";
        break;
      case 5407:
        xpc_object_t result = "DATASET_SECURITY_POLICY";
        break;
      case 5408:
        xpc_object_t result = "DATASET_RAW_TLVS";
        break;
      case 5409:
        xpc_object_t result = "THREAD_CHILD_TABLE_ADDRESSES";
        break;
      case 5410:
        xpc_object_t result = "THREAD_NEIGHBOR_TABLE_ERROR_RATES";
        break;
      case 5411:
        xpc_object_t result = "THREAD_ADDRESS_CACHE_TABLE";
        break;
      case 5412:
        xpc_object_t result = "THREAD_UDP_FORWARD_STREAM";
        break;
      case 5413:
        xpc_object_t result = "THREAD_MGMT_GET_ACTIVE_DATASET";
        break;
      case 5414:
        xpc_object_t result = "THREAD_MGMT_GET_PENDING_DATASET";
        break;
      case 5415:
        xpc_object_t result = "DATASET_DEST_ADDRESS";
        break;
      case 5416:
        xpc_object_t result = "THREAD_NEW_DATASET";
        break;
      case 5417:
        xpc_object_t result = "SPINEL_PROP_THREAD_CSL_PERIOD";
        break;
      case 5418:
        xpc_object_t result = "SPINEL_PROP_THREAD_CSL_TIMEOUT";
        break;
      case 5419:
        xpc_object_t result = "SPINEL_PROP_THREAD_CSL_CHANNEL";
        break;
      case 5420:
        xpc_object_t result = "SPINEL_PROP_THREAD_DOMAIN_NAME";
        break;
      case 5421:
        xpc_object_t result = "THREAD_LINK_METRICS_QUERY";
        break;
      case 5422:
        xpc_object_t result = "THREAD_LINK_METRICS_QUERY_RESULT";
        break;
      case 5423:
        xpc_object_t result = "LINK_METRICS_PROBE";
        break;
      case 5424:
        xpc_object_t result = "THREAD_LINK_METRICS_MGMT_ENH_ACK";
        break;
      case 5425:
        xpc_object_t result = "THREAD_LINK_METRICS_MGMT_ENH_ACK_IE";
        break;
      case 5426:
        xpc_object_t result = "SPINEL_PROP_THREAD_LINK_METRICS_MGMT_FORWARD";
        break;
      case 5427:
        xpc_object_t result = "SPINEL_PROP_THREAD_LINK_METRICS_MGMT_RESPONSE";
        break;
      case 5428:
        xpc_object_t result = "THREAD_MLR_REQUEST";
        break;
      case 5429:
        xpc_object_t result = "THREAD_MLR_RESPONSE";
        break;
      case 5430:
        xpc_object_t result = "THREAD_DUA_ID";
        break;
      case 5431:
        xpc_object_t result = "THREAD_BACKBONE_ROUTER_PRIMARY";
        break;
      case 5432:
        xpc_object_t result = "THREAD_BACKBONE_ROUTER_LOCAL_STATE";
        break;
      case 5433:
        xpc_object_t result = "THREAD_BACKBONE_ROUTER_LOCAL_CONFIG";
        break;
      case 5434:
        xpc_object_t result = "THREAD_BACKBONE_ROUTER_REGISTER";
        break;
      case 5435:
        xpc_object_t result = "THREAD_BACKBONE_ROUTER_REGISTRATION_JITTER";
        break;
      case 5436:
        xpc_object_t result = "THREAD_BACKBONE_ROUTER_MULTICAST_LISTENER_EVENT";
        break;
      case 5437:
        xpc_object_t result = "THREAD_ACTIVE_DATASET_TLVS";
        break;
      default:
        switch(a1)
        {
          case 4864:
            xpc_object_t result = "MAC_ALLOWLIST";
            break;
          case 4865:
            xpc_object_t result = "MAC_ALLOWLIST_ENABLED";
            break;
          case 4866:
            xpc_object_t result = "MAC_EXTENDED_ADDR";
            break;
          case 4867:
            xpc_object_t result = "MAC_SRC_MATCH_ENABLED";
            break;
          case 4868:
            xpc_object_t result = "MAC_SRC_MATCH_SHORT_ADDRESSES";
            break;
          case 4869:
            xpc_object_t result = "MAC_SRC_MATCH_EXTENDED_ADDRESSES";
            break;
          case 4870:
            xpc_object_t result = "MAC_DENYLIST";
            break;
          case 4871:
            xpc_object_t result = "MAC_DENYLIST_ENABLED";
            break;
          case 4872:
            xpc_object_t result = "MAC_FIXED_RSS";
            break;
          case 4873:
            xpc_object_t result = "MAC_CCA_FAILURE_RATE";
            break;
          case 4874:
            xpc_object_t result = "MAC_MAX_RETRY_NUMBER_DIRECT";
            break;
          case 4875:
            xpc_object_t result = "MAC_MAX_RETRY_NUMBER_INDIRECT";
            break;
          default:
            return result;
        }

        break;
    }
  }

  return result;
}

const char *spinel_net_role_to_cstr(unsigned int a1)
{
  if (a1 > 3) {
    return "NET_ROLE_UNKNONW";
  }
  else {
    return off_1002B4C30[(char)a1];
  }
}

const char *spinel_mcu_power_state_to_cstr(unsigned int a1)
{
  if (a1 > 2) {
    return "MCU_POWER_STATE_UNKNOWN";
  }
  else {
    return off_1002B4C50[(char)a1];
  }
}

const char *spinel_status_to_cstr(int a1)
{
  xpc_object_t result = "UNKNOWN";
  if (a1 > 103)
  {
    if (a1 > 15359)
    {
      int v3 = "SPINEL_STATUS_TRANSMIT_NOT_GRANTED";
      int v4 = "SPINEL_STATUS_LOG_DROPPED";
      if (a1 != 2000002) {
        int v4 = "UNKNOWN";
      }
      if (a1 == 2000001) {
        unsigned int v5 = "SPINEL_STATUS_IPV6_MSG_ALLOC_FAILURE";
      }
      else {
        unsigned int v5 = v4;
      }
      if (a1 != 2000000) {
        int v3 = v5;
      }
      uint64_t v6 = "NCP_BUFFER_THRESH_HIGH";
      uint64_t v7 = "NCP_BUFFER_THRESH_LOW";
      if (a1 != 15393) {
        uint64_t v7 = "UNKNOWN";
      }
      if (a1 != 15392) {
        uint64_t v6 = v7;
      }
      if (a1 == 15360) {
        uint64_t v8 = "VENDOR_POWER_MAP_INVALID";
      }
      else {
        uint64_t v8 = v6;
      }
      if (a1 <= 1999999) {
        return v8;
      }
      else {
        return v3;
      }
    }

    else
    {
      switch(a1)
      {
        case 'h':
          xpc_object_t result = "JOIN_FAILURE";
          break;
        case 'i':
          xpc_object_t result = "JOIN_SECURITY";
          break;
        case 'j':
          xpc_object_t result = "JOIN_NO_PEERS";
          break;
        case 'k':
          xpc_object_t result = "JOIN_INCOMPATIBLE";
          break;
        case 'l':
          xpc_object_t result = "JOIN_RSP_TIMEOUT";
          break;
        case 'm':
          xpc_object_t result = "JOIN_SUCCESS";
          break;
        case 'p':
          xpc_object_t result = "RESET_POWER_ON";
          break;
        case 'q':
          xpc_object_t result = "RESET_EXTERNAL";
          break;
        case 'r':
          xpc_object_t result = "RESET_SOFTWARE";
          break;
        case 's':
          xpc_object_t result = "RESET_FAULT";
          break;
        case 't':
          xpc_object_t result = "RESET_CRASH";
          break;
        case 'u':
          xpc_object_t result = "RESET_ASSERT";
          break;
        case 'v':
          xpc_object_t result = "RESET_OTHER";
          break;
        case 'w':
          xpc_object_t result = "RESET_UNKNOWN";
          break;
        case 'x':
          xpc_object_t result = "RESET_WATCHDOG";
          break;
        default:
          return result;
      }
    }
  }

  else
  {
    switch(a1)
    {
      case 0:
        xpc_object_t result = "OK";
        break;
      case 1:
        xpc_object_t result = "FAILURE";
        break;
      case 2:
        xpc_object_t result = "UNIMPLEMENTED";
        break;
      case 3:
        xpc_object_t result = "INVALID_ARGUMENT";
        break;
      case 4:
        xpc_object_t result = "INVALID_STATE";
        break;
      case 5:
        xpc_object_t result = "INVALID_COMMAND";
        break;
      case 6:
        xpc_object_t result = "INVALID_INTERFACE";
        break;
      case 7:
        xpc_object_t result = "INTERNAL_ERROR";
        break;
      case 8:
        xpc_object_t result = "SECURITY_ERROR";
        break;
      case 9:
        xpc_object_t result = "PARSE_ERROR";
        break;
      case 10:
        xpc_object_t result = "IN_PROGRESS";
        break;
      case 11:
        xpc_object_t result = "NOMEM";
        break;
      case 12:
        xpc_object_t result = "BUSY";
        break;
      case 13:
        xpc_object_t result = "PROP_NOT_FOUND";
        break;
      case 14:
        xpc_object_t result = "DROPPED";
        break;
      case 15:
        xpc_object_t result = "EMPTY";
        break;
      case 16:
        xpc_object_t result = "CMD_TOO_BIG";
        break;
      case 17:
        xpc_object_t result = "NO_ACK";
        break;
      case 18:
        xpc_object_t result = "CCA_FAILURE";
        break;
      case 19:
        xpc_object_t result = "ALREADY";
        break;
      case 20:
        xpc_object_t result = "ITEM_NOT_FOUND";
        break;
      case 21:
        xpc_object_t result = "INVALID_COMMAND_FOR_PROP";
        break;
      case 22:
        xpc_object_t result = "UNKNOWN_NEIGHBOR";
        break;
      case 23:
        xpc_object_t result = "NOT_CAPABLE";
        break;
      case 24:
        xpc_object_t result = "RESPONSE_TIMEOUT";
        break;
      default:
        return result;
    }
  }

  return result;
}

const char *spinel_capability_to_cstr(int a1)
{
  xpc_object_t result = "UNKNOWN";
  if (a1 > 511)
  {
    if (a1 > 1023)
    {
      if (a1 > 15295)
      {
        if (a1 == 15298) {
          int v3 = "NEST_TRANSMIT_HOOK";
        }
        else {
          int v3 = "UNKNOWN";
        }
        if (a1 == 15297) {
          int v4 = "NEST_LEGACY_NET_WAKE";
        }
        else {
          int v4 = v3;
        }
        if (a1 == 15296) {
          return "NEST_LEGACY_INTERFACE";
        }
        else {
          return v4;
        }
      }

      else
      {
        switch(a1)
        {
          case 1024:
            xpc_object_t result = "THREAD_COMMISSIONER";
            break;
          case 1025:
            xpc_object_t result = "THREAD_TMF_PROXY";
            break;
          case 1026:
            xpc_object_t result = "THREAD_UDP_FORWARD";
            break;
          case 1027:
            xpc_object_t result = "THREAD_JOINER";
            break;
          case 1028:
            xpc_object_t result = "THREAD_BORDER_ROUTER";
            break;
          case 1029:
            xpc_object_t result = "THREAD_SERVICE";
            break;
          case 1030:
            xpc_object_t result = "THREAD_CSL_RECEIVER";
            break;
          case 1031:
            xpc_object_t result = "THREAD_LINK_METRICS";
            break;
          default:
            return result;
        }
      }
    }

    else
    {
      switch(a1)
      {
        case 512:
          xpc_object_t result = "MAC_WHITELIST";
          break;
        case 513:
          xpc_object_t result = "MAC_RAW";
          break;
        case 514:
          xpc_object_t result = "OOB_STEERING_DATA";
          break;
        case 515:
          xpc_object_t result = "CHANNEL_MONITOR";
          break;
        case 516:
          xpc_object_t result = "ERROR_RATE_TRACKING";
          break;
        case 517:
          xpc_object_t result = "CHANNEL_MANAGER";
          break;
        case 518:
          xpc_object_t result = "OPENTHREAD_LOG_METADATA";
          break;
        case 519:
          xpc_object_t result = "TIME_SYNC";
          break;
        case 520:
          xpc_object_t result = "CHILD_SUPERVISION";
          break;
        case 521:
          xpc_object_t result = "POSIX_APP";
          break;
        case 522:
          xpc_object_t result = "SLAAC";
          break;
        case 523:
          xpc_object_t result = "RADIO_COEX";
          break;
        case 524:
          xpc_object_t result = "MAC_RETRY_HISTOGRAM";
          break;
        case 525:
        case 526:
        case 528:
          return result;
        case 527:
          xpc_object_t result = "DUA";
          break;
        case 529:
          xpc_object_t result = "TRANSMIT_POWER_CONTROL";
          break;
        default:
          if (a1 == 638) {
            xpc_object_t result = "CHANNEL_UTILIZATION_MONITOR";
          }
          break;
      }
    }
  }

  else
  {
    switch(a1)
    {
      case 1:
        xpc_object_t result = "LOCK";
        break;
      case 2:
        xpc_object_t result = "NET_SAVE";
        break;
      case 3:
        xpc_object_t result = "HBO";
        break;
      case 4:
        xpc_object_t result = "POWER_SAVE";
        break;
      case 5:
        xpc_object_t result = "COUNTERS";
        break;
      case 6:
        xpc_object_t result = "JAM_DETECT";
        break;
      case 7:
        xpc_object_t result = "PEEK_POKE";
        break;
      case 8:
        xpc_object_t result = "WRITABLE_RAW_STREAM";
        break;
      case 9:
        xpc_object_t result = "GPIO";
        break;
      case 10:
        xpc_object_t result = "TRNG";
        break;
      case 11:
        xpc_object_t result = "CMD_MULTI";
        break;
      case 12:
        xpc_object_t result = "UNSOL_UPDATE_FILTER";
        break;
      case 13:
        xpc_object_t result = "MCU_POWER_STATE";
        break;
      case 14:
        xpc_object_t result = "PCAP";
        break;
      case 16:
        xpc_object_t result = "802_15_4_2003";
        break;
      case 17:
        xpc_object_t result = "802_15_4_2006";
        break;
      case 18:
        xpc_object_t result = "802_15_4_2011";
        break;
      case 21:
        xpc_object_t result = "802_15_4_PIB";
        break;
      case 24:
        xpc_object_t result = "802_15_4_2450MHZ_OQPSK";
        break;
      case 25:
        xpc_object_t result = "802_15_4_915MHZ_OQPSK";
        break;
      case 26:
        xpc_object_t result = "802_15_4_868MHZ_OQPSK";
        break;
      case 27:
        xpc_object_t result = "802_15_4_915MHZ_BPSK";
        break;
      case 28:
        xpc_object_t result = "802_15_4_868MHZ_BPSK";
        break;
      case 29:
        xpc_object_t result = "802_15_4_915MHZ_ASK";
        break;
      case 30:
        xpc_object_t result = "802_15_4_868MHZ_ASK";
        break;
      case 32:
        xpc_object_t result = "CONFIG_FTD";
        break;
      case 33:
        xpc_object_t result = "CONFIG_MTD";
        break;
      case 34:
        xpc_object_t result = "CONFIG_RADIO";
        break;
      case 48:
        xpc_object_t result = "ROLE_ROUTER";
        break;
      case 49:
        xpc_object_t result = "ROLE_SLEEPY";
        break;
      case 52:
        xpc_object_t result = "NET_THREAD_1_0";
        break;
      case 53:
        xpc_object_t result = "NET_THREAD_1_1";
        break;
      case 54:
        xpc_object_t result = "NET_THREAD_1_2";
        break;
      default:
        return result;
    }
  }

  return result;
}

const char *spinel_link_metrics_status_to_cstr(char a1)
{
  else {
    return off_1002B4C68[(char)(a1 + 2)];
  }
}

uint64_t boost::filesystem::filesystem_error::filesystem_error(uint64_t a1, const char *a2, uint64_t a3)
{
  int v4 = (void *)sub_100166B54(a1, a3, a2);
  *int v4 = off_1002B4CB0;
  v4[5] = 0LL;
  unsigned int v5 = v4 + 5;
  uint64_t v6 = (unsigned int *)operator new(0x50uLL);
  *((_OWORD *)v6 + 3) = 0u;
  *((_OWORD *)v6 + 4) = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  *((_OWORD *)v6 + 2) = 0u;
  *(_OWORD *)uint64_t v6 = 0u;
  uint64_t v10 = (uint64_t)v6;
  do
    unsigned int v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  uint64_t v8 = v10;
  uint64_t v10 = *v5;
  *unsigned int v5 = v8;
  sub_100168330(&v10);
  return a1;
}

void sub_100166B18( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a10 = *v10;
  *uint64_t v10 = 0LL;
  sub_100168330(&a10);
  __cxa_end_catch();
  JUMPOUT(0x100166B00LL);
}

void sub_100166B38(_Unwind_Exception *a1)
{
}

uint64_t sub_100166B54(uint64_t a1, uint64_t a2, const char *a3)
{
  *(void *)a1 = &off_1002B4D08;
  __int128 v5 = *(_OWORD *)a2;
  *(void *)(a1 + sub_10000AB80(v2 - 32) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 16) = v5;
  return a1;
}

void sub_100166BC8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::filesystem::filesystem_error::filesystem_error(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = (void *)sub_100166CBC(a1, a3, a2);
  *int v4 = off_1002B4CB0;
  v4[5] = 0LL;
  __int128 v5 = v4 + 5;
  uint64_t v6 = (unsigned int *)operator new(0x50uLL);
  *((_OWORD *)v6 + 3) = 0u;
  *((_OWORD *)v6 + 4) = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  *((_OWORD *)v6 + 2) = 0u;
  *(_OWORD *)uint64_t v6 = 0u;
  uint64_t v10 = (uint64_t)v6;
  do
    unsigned int v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  uint64_t v8 = v10;
  uint64_t v10 = *v5;
  *__int128 v5 = v8;
  sub_100168330(&v10);
  return a1;
}

void sub_100166C80( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a10 = *v10;
  *uint64_t v10 = 0LL;
  sub_100168330(&a10);
  __cxa_end_catch();
  JUMPOUT(0x100166C68LL);
}

void sub_100166CA0(_Unwind_Exception *a1)
{
}

uint64_t sub_100166CBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  else {
    __int128 v5 = *(const char **)a3;
  }
  sub_100167930(v5, a2, &v8);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v8);
  *(void *)a1 = &off_1002B4D08;
  __int128 v6 = *(_OWORD *)a2;
  *(void *)(a1 + sub_10000AB80(v2 - 32) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 16) = v6;
  return a1;
}

void sub_100166D3C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::filesystem::filesystem_error::filesystem_error( uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  __int128 v6 = (void *)sub_100166B54(a1, a4, a2);
  *__int128 v6 = off_1002B4CB0;
  v6[5] = 0LL;
  unsigned int v7 = v6 + 5;
  std::string v8 = (char *)operator new(0x50uLL);
  *(_DWORD *)std::string v8 = 0;
  int v9 = v8 + 8;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_100168054(v9, *(void **)a3, *(void *)(a3 + 8));
  }

  else
  {
    *(_OWORD *)int v9 = *(_OWORD *)a3;
    *((void *)v8 + 3) = *(void *)(a3 + 16);
  }

  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  uint64_t v13 = (uint64_t)v8;
  do
    unsigned int v10 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v10 + 1, (unsigned int *)v8));
  uint64_t v11 = v13;
  uint64_t v13 = *v7;
  *unsigned int v7 = v11;
  sub_100168330(&v13);
  return a1;
}

void sub_100166E1C( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = *v10;
  *unsigned int v10 = 0LL;
  sub_100168330(&a10);
  __cxa_end_catch();
  JUMPOUT(0x100166E04LL);
}

void sub_100166E54(_Unwind_Exception *a1)
{
}

uint64_t boost::filesystem::filesystem_error::filesystem_error( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v6 = (void *)sub_100166CBC(a1, a4, a2);
  *__int128 v6 = off_1002B4CB0;
  v6[5] = 0LL;
  unsigned int v7 = v6 + 5;
  std::string v8 = (char *)operator new(0x50uLL);
  *(_DWORD *)std::string v8 = 0;
  int v9 = v8 + 8;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_100168054(v9, *(void **)a3, *(void *)(a3 + 8));
  }

  else
  {
    *(_OWORD *)int v9 = *(_OWORD *)a3;
    *((void *)v8 + 3) = *(void *)(a3 + 16);
  }

  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  uint64_t v13 = (uint64_t)v8;
  do
    unsigned int v10 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v10 + 1, (unsigned int *)v8));
  uint64_t v11 = v13;
  uint64_t v13 = *v7;
  *unsigned int v7 = v11;
  sub_100168330(&v13);
  return a1;
}

void sub_100166F34( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = *v10;
  *unsigned int v10 = 0LL;
  sub_100168330(&a10);
  __cxa_end_catch();
  JUMPOUT(0x100166F1CLL);
}

void sub_100166F6C(_Unwind_Exception *a1)
{
}

uint64_t boost::filesystem::filesystem_error::filesystem_error( uint64_t a1, const char *a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  std::string v8 = (void *)sub_100166B54(a1, a5, a2);
  void *v8 = off_1002B4CB0;
  void v8[5] = 0LL;
  int v9 = v8 + 5;
  unsigned int v10 = (unsigned int *)operator new(0x50uLL);
  sub_1001680E0((uint64_t)v10, a3, a4);
  uint64_t v14 = (uint64_t)v10;
  do
    unsigned int v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  uint64_t v12 = v14;
  uint64_t v14 = *v9;
  *int v9 = v12;
  sub_100168330(&v14);
  return a1;
}

void sub_100167030( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = *v10;
  *unsigned int v10 = 0LL;
  sub_100168330(&a10);
  __cxa_end_catch();
  JUMPOUT(0x100167014LL);
}

void sub_100167068(_Unwind_Exception *a1)
{
}

uint64_t boost::filesystem::filesystem_error::filesystem_error( uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  std::string v8 = (void *)sub_100166CBC(a1, a5, a2);
  void *v8 = off_1002B4CB0;
  void v8[5] = 0LL;
  int v9 = v8 + 5;
  unsigned int v10 = (unsigned int *)operator new(0x50uLL);
  sub_1001680E0((uint64_t)v10, a3, a4);
  uint64_t v14 = (uint64_t)v10;
  do
    unsigned int v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  uint64_t v12 = v14;
  uint64_t v14 = *v9;
  *int v9 = v12;
  sub_100168330(&v14);
  return a1;
}

void sub_10016712C( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = *v10;
  *unsigned int v10 = 0LL;
  sub_100168330(&a10);
  __cxa_end_catch();
  JUMPOUT(0x100167110LL);
}

void sub_100167164(_Unwind_Exception *a1)
{
}

std::runtime_error *boost::filesystem::filesystem_error::filesystem_error( std::runtime_error *a1, uint64_t a2)
{
  xpc_object_t result = std::runtime_error::runtime_error(a1, (const std::runtime_error *)a2);
  result->__vftable = (std::runtime_error_vtbl *)&off_1002B4D08;
  std::runtime_error v4 = *(std::runtime_error *)(a2 + 16);
  result[2].__vftable = *(std::runtime_error_vtbl **)(a2 + 32);
  result[1] = v4;
  result->__vftable = (std::runtime_error_vtbl *)off_1002B4CB0;
  __int128 v5 = *(unsigned int **)(a2 + 40);
  result[2].__imp_.__imp_ = (const char *)v5;
  if (v5)
  {
    do
      unsigned int v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }

  return result;
}

{
  std::runtime_error *result;
  std::runtime_error v4;
  unsigned int *v5;
  unsigned int v6;
  xpc_object_t result = std::runtime_error::runtime_error(a1, (const std::runtime_error *)a2);
  result->__vftable = (std::runtime_error_vtbl *)&off_1002B4D08;
  std::runtime_error v4 = *(std::runtime_error *)(a2 + 16);
  result[2].__vftable = *(std::runtime_error_vtbl **)(a2 + 32);
  result[1] = v4;
  result->__vftable = (std::runtime_error_vtbl *)off_1002B4CB0;
  __int128 v5 = *(unsigned int **)(a2 + 40);
  result[2].__imp_.__imp_ = (const char *)v5;
  if (v5)
  {
    do
      unsigned int v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }

  return result;
}

uint64_t boost::filesystem::filesystem_error::operator=(uint64_t a1, uint64_t a2)
{
  std::runtime_error::operator=((std::runtime_error *)a1, (const std::runtime_error *)a2);
  uint64_t v4 = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + sub_10000AB80(v2 - 32) = v4;
  __int128 v5 = *(unsigned int **)(a2 + 40);
  std::string v8 = v5;
  if (v5)
  {
    do
      unsigned int v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    __int128 v5 = v8;
  }

  std::string v8 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + memset(&v22.ai_socktype, 0, 40) = v5;
  sub_100168330((uint64_t *)&v8);
  return a1;
}

void boost::filesystem::filesystem_error::~filesystem_error(boost::filesystem::filesystem_error *this)
{
  *(void *)this = off_1002B4CB0;
  sub_100168330((uint64_t *)this + 5);
  std::runtime_error::~runtime_error((std::runtime_error *)this);
}

{
  *(void *)this = off_1002B4CB0;
  sub_100168330((uint64_t *)this + 5);
  std::runtime_error::~runtime_error((std::runtime_error *)this);
}

{
  void *v2;
  *(void *)this = off_1002B4CB0;
  sub_100168330((uint64_t *)this + 5);
  std::runtime_error::~runtime_error((std::runtime_error *)this);
  operator delete(v2);
}

const char *boost::filesystem::filesystem_error::what(std::runtime_error *this)
{
  imp = this[2].__imp_.__imp_;
  if (!imp) {
    return std::runtime_error::what(this);
  }
  if (imp[79] < 0)
  {
    if (*((void *)imp + 8)) {
      goto LABEL_28;
    }
  }

  else if (imp[79])
  {
    goto LABEL_28;
  }

  int v3 = (char *)std::runtime_error::what(this);
  sub_100168248((std::string *)(this[2].__imp_.__imp_ + 56), v3);
  imp = this[2].__imp_.__imp_;
  if (imp[31] < 0)
  {
    if (!*((void *)imp + 2)) {
      goto LABEL_17;
    }
  }

  else if (!imp[31])
  {
    goto LABEL_17;
  }

  std::string::append((std::string *)(imp + 56), ": ", 3uLL);
  uint64_t v4 = this[2].__imp_.__imp_;
  unsigned int v7 = (const std::string::value_type *)*((void *)v4 + 1);
  __int128 v5 = (std::string *)(v4 + 8);
  unsigned int v6 = v7;
  int size = (char)v5->__r_.__value_.__s.__size_;
  if (size >= 0) {
    int v9 = (const std::string::value_type *)v5;
  }
  else {
    int v9 = v6;
  }
  if (size >= 0) {
    std::string::size_type v10 = v5->__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v10 = v5->__r_.__value_.__l.__size_;
  }
  std::string::append(v5 + 2, v9, v10);
  std::string::append((std::string *)(this[2].__imp_.__imp_ + 56), "", 1uLL);
  imp = this[2].__imp_.__imp_;
LABEL_17:
  if (imp[55] < 0)
  {
    if (!*((void *)imp + 5)) {
      goto LABEL_28;
    }
LABEL_21:
    std::string::append((std::string *)(imp + 56), ", ", 3uLL);
    unsigned int v11 = this[2].__imp_.__imp_;
    uint64_t v14 = (const std::string::value_type *)*((void *)v11 + 4);
    uint64_t v12 = (std::string *)(v11 + 32);
    uint64_t v13 = v14;
    int v15 = (char)v12->__r_.__value_.__s.__size_;
    if (v15 >= 0) {
      BOOL v16 = (const std::string::value_type *)v12;
    }
    else {
      BOOL v16 = v13;
    }
    if (v15 >= 0) {
      std::string::size_type v17 = v12->__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v17 = v12->__r_.__value_.__l.__size_;
    }
    std::string::append(v12 + 1, v16, v17);
    std::string::append((std::string *)(this[2].__imp_.__imp_ + 56), "", 1uLL);
    imp = this[2].__imp_.__imp_;
    goto LABEL_28;
  }

  if (imp[55]) {
    goto LABEL_21;
  }
LABEL_28:
  xpc_object_t result = imp + 56;
  if (imp[79] < 0) {
    return *(const char **)result;
  }
  return result;
}

uint64_t *boost::filesystem::filesystem_error::get_empty_path(boost::filesystem::filesystem_error *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)&qword_1002D1978);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1002D1978))
  {
    qword_1002D1960 = 0LL;
    *(void *)algn_1002D1968 = 0LL;
    qword_1002D1970 = 0LL;
    __cxa_atexit((void (*)(void *))sub_10016755C, &qword_1002D1960, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1002D1978);
  }

  return &qword_1002D1960;
}

uint64_t sub_10016755C(uint64_t a1)
{
  return a1;
}

BOOL sub_10016758C(int a1, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
    v11[0] = 0LL;
    else {
      BOOL v8 = ((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::system_cat_holder<void>::instance,  a1);
    }
    uint64_t v9 = 2LL;
    LODWORD(v11[0]) = a1;
    if (v8) {
      uint64_t v9 = 3LL;
    }
    v11[1] = &boost::system::detail::system_cat_holder<void>::instance;
    void v11[2] = v9;
    boost::filesystem::filesystem_error::filesystem_error(exception, a3, v11);
  }

  else {
    BOOL result = ((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::system_cat_holder<void>::instance,  a1);
  }
  uint64_t v6 = 2LL;
  if (result) {
    uint64_t v6 = 3LL;
  }
  *(_DWORD *)a2 = a1;
  *(_DWORD *)(a2 + 4) = 0;
  *(void *)(a2 + 8) = &boost::system::detail::system_cat_holder<void>::instance;
  *(void *)(a2 + 16) = v6;
  return result;
}

void sub_1001676AC(_Unwind_Exception *a1)
{
}

BOOL sub_1001676C0(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
    v13[0] = 0LL;
    else {
      BOOL v9 = ((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::system_cat_holder<void>::instance,  a1);
    }
    uint64_t v10 = 2LL;
    LODWORD(v13[0]) = a1;
    if (v9) {
      uint64_t v10 = 3LL;
    }
    v13[1] = &boost::system::detail::system_cat_holder<void>::instance;
    v13[2] = v10;
    boost::filesystem::filesystem_error::filesystem_error(exception, a4, a2, v13);
  }

  else {
    BOOL result = ((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::system_cat_holder<void>::instance,  a1);
  }
  uint64_t v7 = 2LL;
  if (result) {
    uint64_t v7 = 3LL;
  }
  *(_DWORD *)a3 = a1;
  *(_DWORD *)(a3 + 4) = 0;
  *(void *)(a3 + 8) = &boost::system::detail::system_cat_holder<void>::instance;
  *(void *)(a3 + 16) = v7;
  return result;
}

void sub_1001677E0(_Unwind_Exception *a1)
{
}

BOOL sub_1001677F4(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a4)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
    v15[0] = 0LL;
    else {
      BOOL v10 = ((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::system_cat_holder<void>::instance,  a1);
    }
    uint64_t v11 = 2LL;
    LODWORD(v15[0]) = a1;
    if (v10) {
      uint64_t v11 = 3LL;
    }
    v15[1] = &boost::system::detail::system_cat_holder<void>::instance;
    _OWORD v15[2] = v11;
    boost::filesystem::filesystem_error::filesystem_error(exception, a5, a2, a3, v15);
  }

  else {
    BOOL result = ((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::system_cat_holder<void>::instance,  a1);
  }
  uint64_t v8 = 2LL;
  if (result) {
    uint64_t v8 = 3LL;
  }
  *(_DWORD *)a4 = a1;
  *(_DWORD *)(a4 + 4) = 0;
  *(void *)(a4 + 8) = &boost::system::detail::system_cat_holder<void>::instance;
  *(void *)(a4 + 16) = v8;
  return result;
}

void sub_10016791C(_Unwind_Exception *a1)
{
}

void sub_100167930(const char *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0LL;
  a3->__r_.__value_.__l.__size_ = 0LL;
  a3->__r_.__value_.__l.__cap_ = 0LL;
  if (a1)
  {
    size_t v6 = strlen(a1);
    std::string::append(a3, a1, v6);
    std::string::append(a3, ": ", 2uLL);
  }

  sub_100167A28(a2, &__p);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a3, (const std::string::value_type *)p_p, size);
}

void sub_1001679D8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100167A14(std::runtime_error *a1)
{
}

std::string *sub_100167A28@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)p_p, size);
  if (*(void *)(a1 + 16) >= 4uLL)
  {
    std::string::append(a2, " at ", 4uLL);
    unint64_t v6 = *(void *)(a1 + 16);
    if (v6 <= 3) {
      uint64_t v7 = off_1002B4D30;
    }
    else {
      uint64_t v7 = (char **)(v6 & 0xFFFFFFFFFFFFFFFELL);
    }
    sub_100167D48((uint64_t)v7, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v8 = &__p;
    }
    else {
      uint64_t v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v9 = __p.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a2, (const std::string::value_type *)v8, v9);
  }

  return std::string::append(a2, "]", 1uLL);
}

void sub_100167B38( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_100167B78@<X0>(unsigned int *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *((void *)a1 + 2);
  if (v2)
  {
    if (v2 == 1) {
      return std::error_code::message(a2, (const std::error_code *)a1);
    }
    uint64_t v4 = (uint64_t (***)())*((void *)a1 + 1);
  }

  else
  {
    uint64_t v4 = &boost::system::detail::system_cat_holder<void>::instance;
  }

  return (std::string *)((uint64_t (*)(uint64_t (***)(), void))(*v4)[4])(v4, *a1);
}

std::string *sub_100167BB0@<X0>(int *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = *((void *)a1 + 2);
  if (v4)
  {
    if (v4 == 1)
    {
      sub_10000AC00(a2, "std:");
      __int128 v5 = (const char *)(*(uint64_t (**)(void))(**((void **)a1 + 1) + 16LL))(*((void *)a1 + 1));
      size_t v6 = strlen(v5);
      std::string::append(a2, v5, v6);
      sub_10016802C(__s, 0x20uLL, ":%d", v7, v8, v9, v10, v11, *a1);
      size_t v12 = strlen(__s);
      return std::string::append(a2, __s, v12);
    }

    uint64_t v14 = (uint64_t (***)())*((void *)a1 + 1);
  }

  else
  {
    uint64_t v14 = &boost::system::detail::system_cat_holder<void>::instance;
  }

  uint64_t v15 = (char *)((uint64_t (*)(uint64_t (***)()))**v14)(v14);
  sub_10000AC00(a2, v15);
  int v21 = *a1;
  if (*((void *)a1 + 2) == 1LL) {
    v21 += 1000 * (*((void *)a1 + 1) % 0x1FFFF7uLL);
  }
  sub_10016802C(__s, 0x20uLL, ":%d", v16, v17, v18, v19, v20, v21);
  size_t v22 = strlen(__s);
  return std::string::append(a2, __s, v22);
}

void sub_100167D28(_Unwind_Exception *exception_object)
{
}

void sub_100167D48(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 16))
  {
    sub_10000AC00(a2, *(char **)a1);
    sprintf(__s, ":%ld", *(unsigned int *)(a1 + 16));
    size_t v4 = strlen(__s);
    std::string::append(a2, __s, v4);
    if (*(_DWORD *)(a1 + 20))
    {
      sprintf(__s, ":%ld", *(unsigned int *)(a1 + 20));
      size_t v5 = strlen(__s);
      std::string::append(a2, __s, v5);
    }

    std::string::append(a2, " in function '", 0xEuLL);
    size_t v6 = *(const char **)(a1 + 8);
    size_t v7 = strlen(v6);
    std::string::append(a2, v6, v7);
    std::string::push_back(a2, 39);
  }

  else
  {
    sub_10000AC00(a2, "(unknown source location)");
  }

void sub_100167E84(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100167EA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 8);
  if (!v4)
  {
    if (!v5) {
      return 1LL;
    }
    uint64_t v9 = *(void *)(v5 + 8);
    return v9 == 0xB2AB117A257EDFD0LL;
  }

  if (!v5)
  {
    uint64_t v9 = *(void *)(v4 + 8);
    return v9 == 0xB2AB117A257EDFD0LL;
  }

  uint64_t v6 = *(void *)(v5 + 8);
  BOOL v7 = v5 == v4;
  if (v6) {
    return *(void *)(v4 + 8) == v6;
  }
  else {
    return v7;
  }
}

BOOL sub_100167F3C(uint64_t a1, uint64_t a2, int a3)
{
  return sub_100167F5C(a2, a3, a1);
}

BOOL sub_100167F50(uint64_t a1, int a2)
{
  return a2 != 0;
}

BOOL sub_100167F5C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 == 1)
  {
    if (*(void *)(a3 + 8) == 0xB2AB117A257EDFD2LL) {
      return *(_DWORD *)a1 + 1000 * (*(void *)(a1 + 8) % 0x1FFFF7uLL) == a2;
    }
    return 0LL;
  }

  if (!v3) {
    return !a2 && *(void *)(a3 + 8) == 0xB2AB117A257EDFD1LL;
  }
  if (*(_DWORD *)a1 != a2) {
    return 0LL;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(v6 + 8);
  BOOL v8 = v6 == a3;
  if (v7) {
    return *(void *)(a3 + 8) == v7;
  }
  else {
    return v8;
  }
}

uint64_t sub_10016802C( char *a1, size_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return vsnprintf(a1, a2, a3, &a9);
}

void *sub_100168054(_BYTE *__dst, void *__src, unint64_t a3)
{
  uint64_t v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8LL) {
      sub_10000ACA8();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    BOOL v8 = operator new(v6 + 1);
    v5[1] = a3;
    _OWORD v5[2] = v7 | 0x8000000000000000LL;
    *uint64_t v5 = v8;
    uint64_t v5 = v8;
  }

  else
  {
    __dst[23] = a3;
  }

  return memmove(v5, __src, a3 + 1);
}

uint64_t sub_1001680E0(uint64_t a1, __int128 *a2, __int128 *a3)
{
  *(_DWORD *)a1 = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_100168054((_BYTE *)(a1 + 8), *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v5 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v5;
  }

  uint64_t v6 = (_BYTE *)(a1 + 32);
  if (*((char *)a3 + 23) < 0)
  {
    sub_100168054(v6, *(void **)a3, *((void *)a3 + 1));
  }

  else
  {
    __int128 v7 = *a3;
    *(void *)(a1 + sub_1000BE23C(v2 - 48) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v6 = v7;
  }

  *(void *)(a1 + sub_10000D448(v30 - 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  return a1;
}

void sub_100168170(_Unwind_Exception *exception_object)
{
}

std::string *sub_10016818C(std::string *__dst, const std::string::value_type *__src, size_t __len)
{
  LODWORD(v6) = (char)__dst->__r_.__value_.__s.__size_;
  if ((v6 & 0x80000000) != 0)
  {
    std::string::size_type cap = __dst->__r_.__value_.__l.__cap_;
    std::string::size_type v9 = (cap & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __len)
    {
      std::string::size_type size = __dst->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }

    std::string::size_type v6 = HIBYTE(cap);
    __int128 v7 = (std::string *)__dst->__r_.__value_.__r.__words[0];
  }

  else
  {
    __int128 v7 = __dst;
    if (__len > 0x16)
    {
      std::string::size_type size = __dst->__r_.__value_.__s.__size_;
      std::string::size_type v9 = 22LL;
LABEL_6:
      std::string::__grow_by_and_replace(__dst, v9, __len - v9, size, 0LL, size, __len, __src);
      return __dst;
    }
  }

  if (__len)
  {
    memmove(v7, __src, __len);
    LOBYTE(v6) = __dst->__r_.__value_.__s.__size_;
  }

  if ((v6 & 0x80) != 0) {
    __dst->__r_.__value_.__l.__size_ = __len;
  }
  else {
    __dst->__r_.__value_.__s.__size_ = __len & 0x7F;
  }
  v7->__r_.__value_.__s.__data_[__len] = 0;
  return __dst;
}

std::string *sub_100168248(std::string *a1, char *__s)
{
  size_t v4 = strlen(__s);
  return sub_10016818C(a1, __s, v4);
}

const char *sub_10016827C()
{
  return "system";
}

uint64_t sub_100168288(uint64_t a1, unsigned int a2)
{
  return a2;
}

void *sub_100168294@<X0>(int __errnum@<W1>, void *a2@<X8>)
{
  uint64_t v3 = strerror(__errnum);
  if (v3) {
    size_t v4 = v3;
  }
  else {
    size_t v4 = "Unknown error";
  }
  return sub_10000AC00(a2, v4);
}

const char *sub_1001682CC(int a1, int __errnum, char *a3, uint64_t a4)
{
  size_t v4 = a3;
  if (a4)
  {
    __int128 v5 = a3;
    size_t v6 = a4 - 1;
    if (a4 != 1)
    {
      __int128 v7 = strerror(__errnum);
      if (!v7) {
        return "Unknown error";
      }
      strncpy(v4, v7, v6);
      __int128 v5 = &v4[v6];
    }

    *__int128 v5 = 0;
  }

  return v4;
}

uint64_t *sub_100168330(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    do
    {
      unsigned int v3 = __ldaxr((unsigned int *)v2);
      unsigned int v4 = v3 - 1;
    }

    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      operator delete((void *)v2);
    }
  }

  return a1;
}

double sub_1001683A4@<D0>(uint64_t a1@<X0>, void *a2@<X1>, double *a3@<X8>)
{
  if (*(_DWORD *)(a1 + 24)) {
    BOOL v5 = *(_DWORD *)(a1 + 28) == 0xFFFF;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    int v6 = *(_DWORD *)(a1 + 32);
    int v7 = *(_DWORD *)(a1 + 36);
    if ((v6 & 0xFFFFFFFB) == 0 || v7 == 0xFFFF)
    {
      sub_10016B0B0((const char *)a1, (uint64_t)a2, (int *)&v10);
      *(void *)(a1 + 24) = v10;
      goto LABEL_14;
    }

    *(_DWORD *)(a1 + 24) = v6;
    *(_DWORD *)(a1 + 28) = v7;
  }

  if (a2)
  {
    *a2 = 0LL;
    a2[1] = 0LL;
    a2[2] = 0LL;
  }

int *sub_100168424@<X0>(int *result@<X0>, void *a2@<X1>, int *a3@<X8>)
{
  unsigned int v3 = result;
  int v5 = result[8];
  int v6 = result[9];
  if (v5) {
    BOOL v7 = v6 == 0xFFFF;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    double result = sub_10016B318((const char *)result, (uint64_t)a2, v8);
    int v5 = v8[0];
    int v6 = v8[1];
    v3[8] = v8[0];
    v3[9] = v6;
  }

  else if (a2)
  {
    *a2 = 0LL;
    a2[1] = 0LL;
    a2[2] = 0LL;
    int v5 = result[8];
    int v6 = result[9];
  }

  *a3 = v5;
  a3[1] = v6;
  return result;
}

std::string *sub_10016848C(std::string *__str, std::string *this)
{
  return std::string::operator=(this, __str);
}

DIR *sub_10016849C@<X0>(DIR **a1@<X0>, void **a2@<X1>, void *a3@<X8>)
{
  if (*a2)
  {
    free(*a2);
    *a2 = 0LL;
  }

  double result = *a1;
  if (*a1 && (*a1 = 0LL, double result = (DIR *)closedir(result), (_DWORD)result))
  {
    int v7 = *__error();
    *a3 = 0LL;
    else {
      double result = (DIR *)((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::system_cat_holder<void>::instance,  v7);
    }
    uint64_t v8 = 2LL;
    *(_DWORD *)a3 = v7;
    if ((_DWORD)result) {
      uint64_t v8 = 3LL;
    }
    a3[1] = &boost::system::detail::system_cat_holder<void>::instance;
    a3[2] = v8;
  }

  else
  {
    *a3 = 0LL;
    a3[1] = 0LL;
    a3[2] = 0LL;
  }

  return result;
}

unsigned int **sub_100168560(dirent **a1, std::string *a2, char a3, void *a4)
{
  std::string::size_type size = a2->__r_.__value_.__s.__size_;
  if ((size & 0x80u) != 0LL) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    if (a4)
    {
      *a4 = 0LL;
      a4[1] = 0LL;
      a4[2] = 0LL;
      uint64_t v37 = 0LL;
      std::string::size_type v9 = operator new(0x40uLL, &std::nothrow);
      if (v9)
      {
        *(_DWORD *)std::string::size_type v9 = 0;
        _DWORD v9[2] = 0LL;
        v9[3] = 0LL;
        v9[1] = 0LL;
        *((_DWORD *)v9 + 8) = 0;
        *(void *)((char *)v9 + 36) = 0xFFFFLL;
        *((_DWORD *)v9 + 11) = 0xFFFF;
        _DWORD v9[6] = 0LL;
        v9[7] = 0LL;
        uint64_t v34 = (unsigned int *)v9;
        do
          unsigned int v10 = __ldaxr((unsigned int *)v9);
        while (__stlxr(v10 + 1, (unsigned int *)v9));
        uint64_t v11 = v34;
        size_t v12 = v37;
      }

      else
      {
        size_t v12 = 0LL;
        uint64_t v11 = 0LL;
      }

      uint64_t v34 = v12;
      uint64_t v37 = v11;
      sub_10016A418(&v34);
      uint64_t v16 = v37;
      if (!v37)
      {
        if ((unint64_t)qword_1002C9390 >> 1 == 0x595588BD12BF6FE8LL
          || ((BOOL (*)(uint64_t, int))boost::system::detail::generic_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::generic_cat_holder<void>::instance,  12))
        {
          uint64_t v31 = 3LL;
        }

        else
        {
          uint64_t v31 = 2LL;
        }

        *a4 = 12LL;
        a4[1] = &boost::system::detail::generic_cat_holder<void>::instance;
        a4[2] = v31;
        return sub_10016A418(&v37);
      }
    }

    else
    {
      uint64_t v37 = 0LL;
      uint64_t v13 = operator new(0x40uLL);
      *(_DWORD *)uint64_t v13 = 0;
      v13[2] = 0LL;
      void v13[3] = 0LL;
      v13[1] = 0LL;
      *((_DWORD *)v13 + 8) = 0;
      *(void *)((char *)v13 + 36) = 0xFFFFLL;
      *((_DWORD *)v13 + 11) = 0xFFFF;
      v13[6] = 0LL;
      v13[7] = 0LL;
      uint64_t v34 = (unsigned int *)v13;
      do
        unsigned int v14 = __ldaxr((unsigned int *)v13);
      while (__stlxr(v14 + 1, (unsigned int *)v13));
      uint64_t v15 = v34;
      uint64_t v34 = v37;
      uint64_t v37 = v15;
      sub_10016A418(&v34);
      uint64_t v16 = v37;
    }

    if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v17 = (const char *)a2;
    }
    else {
      uint64_t v17 = (const char *)a2->__r_.__value_.__r.__words[0];
    }
    uint64_t v18 = opendir(v17);
    *((void *)v16 + 6) = v18;
    if (v18)
    {
      uint64_t v34 = 0LL;
      unint64_t v35 = 0LL;
      unsigned __int8 v19 = 1;
      uint64_t v20 = 46LL;
      uint64_t v36 = 0LL;
      goto LABEL_26;
    }

    uint64_t v21 = *__error();
    uint64_t v34 = 0LL;
    else {
      BOOL v22 = ((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::system_cat_holder<void>::instance,  v21);
    }
    uint64_t v23 = 2LL;
    LODWORD(v34) = v21;
    if (v22) {
      uint64_t v23 = 3LL;
    }
    unint64_t v35 = (unint64_t)&boost::system::detail::system_cat_holder<void>::instance;
    uint64_t v36 = v23;
    if ((v23 & 1) == 0)
    {
      uint64_t v20 = 0LL;
      unsigned __int8 v19 = 0;
LABEL_26:
      xpc_object_t v24 = v37;
      if (*((void *)v37 + 6))
      {
        int v25 = *a1;
        *a1 = (dirent *)v37;
        uint64_t v37 = (unsigned int *)v25;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = (unint64_t)v20;
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = 0LL;
        __p.__r_.__value_.__s.__size_ = v19;
        else {
          std::string __str = *a2;
        }
        sub_10016EC50(&__str, &__p);
        std::string::operator=((std::string *)(v24 + 2), &__str);
        *(void *)&__int128 v26 = 0xFFFF00000000LL;
        *((void *)&v26 + 1) = 0xFFFF00000000LL;
        *((_OWORD *)v24 + 2) = v26;
        if (((char)__p.__r_.__value_.__s.__size_ & 0x80000000) == 0)
        {
          if (!v18) {
            return sub_10016A418(&v37);
          }
          goto LABEL_36;
        }

        operator delete(__p.__r_.__value_.__l.__data_);
        if (v18) {
LABEL_36:
        }
          sub_100168A50(a1, (uint64_t)a4);
      }

      return sub_10016A418(&v37);
    }

    __str.__r_.__value_.__r.__words[0] = 13LL;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)&boost::system::detail::generic_cat_holder<void>::instance;
    if ((((uint64_t (*)(uint64_t, uint64_t, uint64_t))boost::system::detail::system_cat_holder<void>::instance[2])( (uint64_t)&boost::system::detail::system_cat_holder<void>::instance,  v21,  (uint64_t)&__str) & 1) != 0)
    {
      char v27 = 1;
      if ((a3 & 1) == 0) {
        goto LABEL_45;
      }
    }

    else
    {
      if (__str.__r_.__value_.__l.__size_) {
        unint64_t v28 = (uint64_t (***)())__str.__r_.__value_.__l.__size_;
      }
      else {
        unint64_t v28 = &boost::system::detail::generic_cat_holder<void>::instance;
      }
      char v27 = ((uint64_t (*)(uint64_t (***)(), unsigned int **, void))(*v28)[3])( v28,  &v34,  LODWORD(__str.__r_.__value_.__l.__data_));
      if ((a3 & 1) == 0) {
        goto LABEL_45;
      }
    }

    if ((v27 & 1) != 0) {
      return sub_10016A418(&v37);
    }
LABEL_45:
    int v29 = (int)v34;
    if (v36 == 1) {
      int v29 = (_DWORD)v34 + 1000 * (v35 % 0x1FFFF7);
    }
    if (v29)
    {
      sub_1001676C0(v29, (uint64_t)a2, (uint64_t)a4, (uint64_t)"boost::filesystem::directory_iterator::construct");
    }

    else if (a4)
    {
      *a4 = 0LL;
      a4[1] = 0LL;
      a4[2] = 0LL;
    }

    return sub_10016A418(&v37);
  }

  return (unsigned int **)sub_1001676C0( 2,  (uint64_t)a2,  (uint64_t)a4,  (uint64_t)"boost::filesystem::directory_iterator::construct");
}

void sub_100168954( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    if (v23)
    {
      if ((unint64_t)qword_1002C9390 >> 1 == 0x595588BD12BF6FE8LL
        || ((BOOL (*)(uint64_t, int))boost::system::detail::generic_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::generic_cat_holder<void>::instance,  12))
      {
        uint64_t v28 = 3LL;
      }

      else
      {
        uint64_t v28 = 2LL;
      }

      *uint64_t v23 = 12LL;
      v23[1] = &boost::system::detail::generic_cat_holder<void>::instance;
      void v23[2] = v28;
      a23 = *v24;
      *xpc_object_t v24 = 0LL;
      sub_10016A418((unsigned int **)&a23);
      __cxa_end_catch();
      JUMPOUT(0x100168890LL);
    }

    __cxa_rethrow();
  }

  sub_10016A418((unsigned int **)(v25 - 72));
  _Unwind_Resume(a1);
}

void sub_100168A40()
{
}

void sub_100168A50(dirent **a1, uint64_t a2)
{
  if (a2)
  {
    *(void *)a2 = 0LL;
    *(void *)(a2 + 8) = 0LL;
    *(void *)(a2 + 16) = 0LL;
  }

  memset(&__src, 0, sizeof(__src));
  int v29 = 0;
  uint64_t v28 = 0LL;
  unsigned int v4 = *a1;
  int v5 = *(DIR **)&(*a1)->d_name[27];
  while (1)
  {
    char v27 = 0LL;
    *__error() = 0;
    int v6 = (dirent **)&v4->d_name[35];
    if (sysconf(91) < 0)
    {
      *__error() = 0;
      std::string::size_type v9 = readdir(v5);
      char v27 = v9;
      if (v9)
      {
LABEL_14:
        sub_100168248(&__src, v9->d_name);
        memset(&__p, 0, sizeof(__p));
        uint64_t v28 = 0LL;
        int v29 = 0;
        goto LABEL_15;
      }

      int data = *__error();
      if (data) {
        goto LABEL_31;
      }
    }

    else
    {
      int v7 = *v6;
      if (!*v6)
      {
        uint64_t v20 = sub_10016A248() + 25;
        uint64_t v15 = (dirent *)malloc(v20);
        *int v6 = v15;
        if (!v15)
        {
          int data = 12;
LABEL_31:
          __p.__r_.__value_.__r.__words[0] = 0LL;
          if ((unint64_t)qword_1002C9378 >> 1 == 0x595588BD12BF6FE8LL
            || ((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::system_cat_holder<void>::instance,  data))
          {
            std::string::size_type cap = 3LL;
          }

          else
          {
            std::string::size_type cap = 2LL;
          }

          LODWORD(__p.__r_.__value_.__l.__data_) = data;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)&boost::system::detail::system_cat_holder<void>::instance;
          __p.__r_.__value_.__l.__cap_ = cap;
          goto LABEL_9;
        }

        int v7 = v15;
        bzero(v15, v20);
      }

      int data = readdir_r(v5, v7, &v27);
      if (data) {
        goto LABEL_31;
      }
    }

    std::string::size_type v9 = v27;
    if (v27) {
      goto LABEL_14;
    }
    sub_10016849C((DIR **)&v4->d_name[27], (void **)&v4->d_name[35], &__p);
    int data = (int)__p.__r_.__value_.__l.__data_;
    std::string::size_type cap = __p.__r_.__value_.__l.__cap_;
LABEL_9:
    uint64_t v28 = *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4);
    int v29 = HIDWORD(__p.__r_.__value_.__r.__words[1]);
    if ((cap & 1) != 0 && (cap != 1 || data))
    {
      char v27 = *a1;
      uint64_t v18 = v27;
      *a1 = 0LL;
      sub_100168EE4((char *)&v18->d_seekoff, &__p);
      if (!a2)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
        int v21 = data;
        uint64_t v22 = v28;
        int v23 = v29;
        std::string::size_type v24 = cap;
        boost::filesystem::filesystem_error::filesystem_error( exception,  "boost::filesystem::directory_iterator::operator++",  &__p,  &v21);
      }

      *(_DWORD *)a2 = data;
      *(void *)(a2 + 4) = v28;
      *(_DWORD *)(a2 + 12) = v29;
      *(void *)(a2 + 16) = cap;
      p_p = (unsigned int **)&v27;
      goto LABEL_42;
    }

void sub_100168DAC( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, char a25)
{
}

void sub_100168EB8(_Unwind_Exception *a1)
{
}

void sub_100168EC0(_Unwind_Exception *a1)
{
}

void sub_100168ECC(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x100168ED4LL);
  }
  sub_100006EEC(a1);
}

void *sub_100168EE4@<X0>(char *a1@<X0>, void *a2@<X8>)
{
  unsigned int v3 = a1;
  if (a1[23] < 0) {
    unsigned int v3 = *(char **)a1;
  }
  unint64_t v4 = sub_10016F5A8(a1);
  return sub_10016A2F4(a2, v3, &v3[v4], v4);
}

unsigned int **sub_100168F24(unsigned int **a1, std::string *a2, int a3, void *a4)
{
  if (a4)
  {
    *a4 = 0LL;
    a4[1] = 0LL;
    a4[2] = 0LL;
  }

  unint64_t v35 = 0LL;
  sub_100168560((dirent **)&v35, a2, a3, a4);
  if (!a4 || (uint64_t v7 = a4[2], (v7 & 1) == 0) || v7 == 1 && !*(_DWORD *)a4)
  {
    uint64_t v36 = 0LL;
    if (v35 && *((void *)v35 + 6))
    {
      sub_10016A418(&v36);
      uint64_t v34 = 0LL;
      if (a4)
      {
        uint64_t v8 = operator new(0x28uLL, &std::nothrow);
        if (v8)
        {
          *(_DWORD *)uint64_t v8 = 0;
          int v8[2] = 0LL;
          void v8[3] = 0LL;
          v8[1] = 0LL;
          *((_DWORD *)v8 + 8) = a3;
          uint64_t v36 = (unsigned int *)v8;
          do
            unsigned int v9 = __ldaxr((unsigned int *)v8);
          while (__stlxr(v9 + 1, (unsigned int *)v8));
          unsigned int v10 = v36;
          uint64_t v11 = v34;
        }

        else
        {
          uint64_t v11 = 0LL;
          unsigned int v10 = 0LL;
        }

        uint64_t v36 = v11;
        uint64_t v34 = v10;
        sub_10016A4A4((uint64_t *)&v36);
        uint64_t v15 = v34;
        if (!v34)
        {
          if ((unint64_t)qword_1002C9390 >> 1 == 0x595588BD12BF6FE8LL
            || ((BOOL (*)(uint64_t, int))boost::system::detail::generic_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::generic_cat_holder<void>::instance,  12))
          {
            uint64_t v33 = 3LL;
          }

          else
          {
            uint64_t v33 = 2LL;
          }

          *a4 = 12LL;
          a4[1] = &boost::system::detail::generic_cat_holder<void>::instance;
          a4[2] = v33;
LABEL_38:
          sub_10016A4A4((uint64_t *)&v34);
          return sub_10016A418(&v35);
        }
      }

      else
      {
        size_t v12 = operator new(0x28uLL);
        *(_DWORD *)size_t v12 = 0;
        v12[2] = 0LL;
        void v12[3] = 0LL;
        v12[1] = 0LL;
        *((_DWORD *)v12 + 8) = a3;
        uint64_t v36 = (unsigned int *)v12;
        do
          unsigned int v13 = __ldaxr((unsigned int *)v12);
        while (__stlxr(v13 + 1, (unsigned int *)v12));
        unsigned int v14 = v36;
        uint64_t v36 = v34;
        uint64_t v34 = v14;
        sub_10016A4A4((uint64_t *)&v36);
        uint64_t v15 = v34;
      }

      unint64_t v16 = *((void *)v15 + 3);
      __int128 v17 = (void *)*((void *)v15 + 2);
      if ((unint64_t)v17 >= v16)
      {
        uint64_t v20 = (void *)*((void *)v15 + 1);
        uint64_t v21 = v17 - v20;
        unint64_t v22 = v16 - (void)v20;
        unint64_t v23 = (uint64_t)(v16 - (void)v20) >> 2;
        if (v23 <= v21 + 1) {
          unint64_t v23 = v21 + 1;
        }
        if (v22 >= 0x7FFFFFFFFFFFFFF8LL) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        BOOL v39 = v15 + 6;
        if (v24)
        {
          uint64_t v25 = (char *)sub_10016A398((uint64_t)(v15 + 6), v24);
          uint64_t v20 = (void *)*((void *)v15 + 1);
          __int128 v17 = (void *)*((void *)v15 + 2);
        }

        else
        {
          uint64_t v25 = 0LL;
        }

        __int128 v26 = &v25[8 * v21];
        char v27 = &v25[8 * v24];
        int v38 = v27;
        *(void *)__int128 v26 = v35;
        unint64_t v35 = 0LL;
        *((void *)&v37 + 1) = v26 + 8;
        if (v17 == v20)
        {
          uint64_t v18 = v26 + 8;
        }

        else
        {
          do
          {
            uint64_t v28 = *--v17;
            *((void *)v26 - 1) = v28;
            v26 -= 8;
            *__int128 v17 = 0LL;
          }

          while (v17 != v20);
          uint64_t v18 = (void *)*((void *)&v37 + 1);
          char v27 = v38;
        }

        __int128 v29 = *(_OWORD *)(v15 + 2);
        *((void *)v15 + 1) = v26;
        *((void *)v15 + 2) = v18;
        __int128 v37 = v29;
        unint64_t v30 = (char *)*((void *)v15 + 3);
        *((void *)v15 + 3) = v27;
        int v38 = v30;
        uint64_t v36 = (unsigned int *)v29;
        sub_10016A3CC((uint64_t)&v36);
        unsigned __int8 v19 = v34;
      }

      else
      {
        *__int128 v17 = v35;
        uint64_t v18 = v17 + 1;
        unint64_t v35 = 0LL;
        unsigned __int8 v19 = v15;
      }

      *((void *)v15 + 2) = v18;
      uint64_t v31 = *a1;
      *a1 = v19;
      uint64_t v34 = v31;
      goto LABEL_38;
    }

    sub_10016A418(&v36);
  }

  return sub_10016A418(&v35);
}

void sub_1001691EC()
{
}

void sub_10016927C()
{
}

double sub_1001692A4(unsigned int **a1, void *a2)
{
  unint64_t v4 = *a1;
  if (a2)
  {
    *a2 = 0LL;
    a2[1] = 0LL;
    a2[2] = 0LL;
  }

  while (1)
  {
    uint64_t v7 = *((void *)v4 + 2);
    uint64_t v8 = sub_10016A418((unsigned int **)(v7 - 8));
    *((void *)v4 + 2) = v8;
    if (*((unsigned int ***)v4 + 1) == v8)
    {
      *(void *)&__int128 v13 = *a1;
      *a1 = 0LL;
      sub_10016A4A4((uint64_t *)&v13);
      return result;
    }

    int v5 = (dirent **)(v7 - 16);
    __int128 v13 = 0uLL;
    uint64_t v14 = 0LL;
    sub_100168A50(v5, (uint64_t)&v13);
    if ((v14 & 1) != 0 && (v14 != 1 || (_DWORD)v13 != 0)) {
      break;
    }
    uint64_t v15 = 0LL;
    if (*v5 && *(void *)&(*v5)->d_name[27])
    {
      sub_10016A418(&v15);
      return result;
    }

    sub_10016A418(&v15);
  }

  if ((v4[8] & 8) == 0 || (sub_100169410((uint64_t)v4), *((void *)v4 + 1) == *((void *)v4 + 2)))
  {
    uint64_t v15 = *a1;
    *a1 = 0LL;
    sub_10016A4A4((uint64_t *)&v15);
  }

  if (!a2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
    __int128 v11 = v13;
    uint64_t v12 = v14;
    boost::filesystem::filesystem_error::filesystem_error( exception,  "boost::filesystem::recursive_directory_iterator::pop",  &v11);
  }

  double result = *(double *)&v13;
  *(_OWORD *)a2 = v13;
  a2[2] = v14;
  return result;
}

void sub_1001693FC(_Unwind_Exception *a1)
{
}

unsigned int **sub_100169410(uint64_t a1)
{
  for (uint64_t i = *(void *)(a1 + 16); ; uint64_t i = *(void *)(a1 + 16))
  {
    double result = sub_10016A418((unsigned int **)(i - 8));
    *(void *)(a1 + 16) = result;
    unint64_t v4 = (dirent **)(i - 16);
    v7[0] = 0LL;
    v7[1] = 0LL;
    uint64_t v8 = 0LL;
    sub_100168A50(v4, (uint64_t)v7);
    if ((v8 & 1) != 0 && (v8 != 1 || LODWORD(v7[0]) != 0)) {
      continue;
    }
    int v6 = 0LL;
    if (*v4 && *(void *)&(*v4)->d_name[27]) {
      return sub_10016A418(&v6);
    }
    sub_10016A418(&v6);
  }

  return result;
}

double sub_1001694AC(unsigned int **a1, void *a2)
{
  unint64_t v4 = *a1;
  if (a2)
  {
    *a2 = 0LL;
    a2[1] = 0LL;
    a2[2] = 0LL;
  }

  __int128 v38 = 0uLL;
  uint64_t v39 = 0LL;
  unsigned int v5 = v4[8];
  if ((v5 & 0x10) != 0)
  {
    char v13 = 0;
    v4[8] = v5 & 0xFFFFFFEF;
    goto LABEL_28;
  }

  if ((v4[8] & 6) == 2)
  {
    int v6 = 0;
  }

  else
  {
    sub_100168424((int *)(*(void *)(*((void *)v4 + 2) - 8LL) + 8LL), &v38, (int *)&v41);
    int v6 = v41;
    if ((v39 & 1) != 0)
    {
      char v13 = 0;
      if (v39 != 1 || (_DWORD)v38) {
        goto LABEL_28;
      }
    }

    if ((v4[8] & 2) == 0 && (_DWORD)v41 == 4)
    {
LABEL_27:
      char v13 = 0;
      goto LABEL_28;
    }
  }

  sub_1001683A4(*(void *)(*((void *)v4 + 2) - 8LL) + 8LL, &v38, (double *)v36);
  if ((v39 & 1) != 0 && (v39 != 1 || (_DWORD)v38))
  {
    uint64_t v41 = 2LL;
    *(void *)&__int128 v42 = &boost::system::detail::generic_cat_holder<void>::instance;
    if (sub_100169A80((uint64_t *)&v38, (unsigned int *)&v41) && v6 == 4 && (~v4[8] & 6) == 0)
    {
      char v13 = 0;
      __int128 v38 = 0uLL;
      uint64_t v39 = 0LL;
      goto LABEL_28;
    }

    goto LABEL_27;
  }

  if (LODWORD(v36[0]) != 3) {
    goto LABEL_27;
  }
  uint64_t v7 = *((void *)v4 + 2);
  if ((unint64_t)(((v7 - *((void *)v4 + 1)) >> 3) - 1) < 0x7FFFFFFF)
  {
    uint64_t v8 = (std::string *)(*(void *)(v7 - 8) + 8LL);
    unsigned int v9 = v4[8];
    uint64_t v40 = 0LL;
    sub_100168560((dirent **)&v40, v8, v9, &v38);
    if ((v39 & 1) == 0 || v39 == 1 && !(_DWORD)v38)
    {
      uint64_t v41 = 0LL;
      if (v40 && *((void *)v40 + 6))
      {
        sub_10016A418((unsigned int **)&v41);
        unint64_t v10 = *((void *)v4 + 3);
        __int128 v11 = (void *)*((void *)v4 + 2);
        if ((unint64_t)v11 >= v10)
        {
          uint64_t v20 = (void *)*((void *)v4 + 1);
          uint64_t v21 = v11 - v20;
          unint64_t v22 = v10 - (void)v20;
          unint64_t v23 = (uint64_t)(v10 - (void)v20) >> 2;
          if (v23 <= v21 + 1) {
            unint64_t v23 = v21 + 1;
          }
          if (v22 >= 0x7FFFFFFFFFFFFFF8LL) {
            unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v23;
          }
          int v44 = v4 + 6;
          if (v24)
          {
            uint64_t v25 = (char *)sub_10016A398((uint64_t)(v4 + 6), v24);
            uint64_t v20 = (void *)*((void *)v4 + 1);
            __int128 v11 = (void *)*((void *)v4 + 2);
          }

          else
          {
            uint64_t v25 = 0LL;
          }

          __int128 v26 = &v25[8 * v21];
          char v27 = &v25[8 * v24];
          size_t v43 = v27;
          *(void *)__int128 v26 = v40;
          uint64_t v40 = 0LL;
          *((void *)&v42 + 1) = v26 + 8;
          if (v11 == v20)
          {
            uint64_t v12 = v26 + 8;
          }

          else
          {
            do
            {
              uint64_t v28 = *--v11;
              *((void *)v26 - 1) = v28;
              v26 -= 8;
              *__int128 v11 = 0LL;
            }

            while (v11 != v20);
            uint64_t v12 = (void *)*((void *)&v42 + 1);
            char v27 = v43;
          }

          __int128 v29 = *(_OWORD *)(v4 + 2);
          *((void *)v4 + 1) = v26;
          *((void *)v4 + 2) = v12;
          __int128 v42 = v29;
          unint64_t v30 = (char *)*((void *)v4 + 3);
          *((void *)v4 + 3) = v27;
          size_t v43 = v30;
          uint64_t v41 = v29;
          sub_10016A3CC((uint64_t)&v41);
        }

        else
        {
          *__int128 v11 = v40;
          uint64_t v12 = v11 + 1;
          uint64_t v40 = 0LL;
        }

        *((void *)v4 + 2) = v12;
        unsigned __int8 v19 = &v40;
LABEL_44:
        sub_10016A418(v19);
        return result;
      }

      sub_10016A418((unsigned int **)&v41);
    }

    sub_10016A418(&v40);
    goto LABEL_27;
  }

  if ((unint64_t)qword_1002C9390 >> 1 == 0x595588BD12BF6FE8LL
    || ((BOOL (*)(uint64_t, int))boost::system::detail::generic_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::generic_cat_holder<void>::instance,  84))
  {
    uint64_t v32 = 3LL;
  }

  else
  {
    uint64_t v32 = 2LL;
  }

  *(void *)&__int128 v38 = 84LL;
  *((void *)&v38 + 1) = &boost::system::detail::generic_cat_holder<void>::instance;
  uint64_t v39 = v32;
  char v13 = 2;
LABEL_28:
  if ((v39 & 1) == 0 || v39 == 1 && !(_DWORD)v38)
  {
    uint64_t v15 = (unsigned int **)*((void *)v4 + 1);
    uint64_t v14 = (unsigned int **)*((void *)v4 + 2);
    while (1)
    {
      if (v15 == v14)
      {
        v36[0] = *a1;
        *a1 = 0LL;
        sub_10016A4A4((uint64_t *)v36);
        return result;
      }

      unint64_t v16 = v14 - 1;
      sub_100168A50((dirent **)v14 - 1, (uint64_t)&v38);
      if ((v39 & 1) != 0 && (v39 != 1 || (_DWORD)v38 != 0)) {
        goto LABEL_61;
      }
      v36[0] = 0LL;
      if (*v16)
      {
        if (*((void *)*v16 + 6)) {
          break;
        }
      }

      sub_10016A418(v36);
      uint64_t v14 = sub_10016A418((unsigned int **)(*((void *)v4 + 2) - 8LL));
      *((void *)v4 + 2) = v14;
      uint64_t v15 = (unsigned int **)*((void *)v4 + 1);
    }

    unsigned __int8 v19 = v36;
    goto LABEL_44;
  }

void sub_100169958(_Unwind_Exception *a1)
{
}

void sub_10016996C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  char v13 = va_arg(va1, uint64_t (***)());
  uint64_t v14 = va_arg(va1, void);
  sub_10016A418((unsigned int **)va1);
  if (a2 == 2)
  {
    sub_1002131B4(a1, (uint64_t *)va);
    uint64_t v12 = 12LL;
    char v13 = &boost::system::detail::generic_cat_holder<void>::instance;
    uint64_t v14 = v8;
    __cxa_end_catch();
    JUMPOUT(0x100169634LL);
  }

  sub_100006EEC(a1);
}

const char *sub_1001699C8()
{
  return "generic";
}

uint64_t sub_1001699D4(uint64_t a1, unsigned int a2)
{
  return a2;
}

void *sub_1001699E4@<X0>(int __errnum@<W1>, void *a2@<X8>)
{
  unsigned int v3 = strerror(__errnum);
  if (v3) {
    unint64_t v4 = v3;
  }
  else {
    unint64_t v4 = "Unknown error";
  }
  return sub_10000AC00(a2, v4);
}

const char *sub_100169A1C(int a1, int __errnum, char *a3, uint64_t a4)
{
  unint64_t v4 = a3;
  if (a4)
  {
    unsigned int v5 = a3;
    size_t v6 = a4 - 1;
    if (a4 != 1)
    {
      uint64_t v7 = strerror(__errnum);
      if (!v7) {
        return "Unknown error";
      }
      strncpy(v4, v7, v6);
      unsigned int v5 = &v4[v6];
    }

    *unsigned int v5 = 0;
  }

  return v4;
}

uint64_t sub_100169A80(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4 = a1[2];
  if (v4)
  {
    if (v4 == 1)
    {
      unint64_t v5 = sub_100169B80(a1);
      uint64_t v7 = v6;
      v14[0] = v5;
      v14[1] = v6;
      uint64_t v12 = sub_100169C94(a2);
      uint64_t v13 = v8;
      if (((*(uint64_t (**)(uint64_t, unint64_t, uint64_t *))(*(void *)v7 + 32LL))(v7, v5, &v12) & 1) == 0) {
        return (*(uint64_t (**)(uint64_t, void *, void))(*(void *)v13 + 40LL))( v13,  v14,  v12);
      }
      return 1LL;
    }

    uint64_t v10 = (uint64_t (***)())a1[1];
  }

  else
  {
    uint64_t v10 = &boost::system::detail::system_cat_holder<void>::instance;
  }

  if ((((uint64_t (*)(uint64_t (***)(), void, unsigned int *))(*v10)[2])( v10,  *(unsigned int *)a1,  a2) & 1) != 0) {
    return 1LL;
  }
  if (*((void *)a2 + 1)) {
    uint64_t v11 = (uint64_t (***)())*((void *)a2 + 1);
  }
  else {
    uint64_t v11 = &boost::system::detail::generic_cat_holder<void>::instance;
  }
  return ((uint64_t (*)(uint64_t (***)(), uint64_t *, void))(*v11)[3])(v11, a1, *a2);
}

unint64_t sub_100169B80(uint64_t *a1)
{
  uint64_t v1 = a1[2];
  if (!v1)
  {
    std::system_category();
    unint64_t v3 = 0LL;
    LODWORD(v2) = 0;
    return v3 | v2;
  }

  if (v1 == 1)
  {
    uint64_t v2 = *a1;
    unint64_t v3 = *a1 & 0xFFFFFFFF00000000LL;
    return v3 | v2;
  }

  LODWORD(v2) = *(_DWORD *)a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = *(void *)(v4 + 8);
  if (v5 == 0xB2AB117A257EDFD1LL)
  {
    std::system_category();
    goto LABEL_16;
  }

  if (v5 == 0xB2AB117A257EDFD0LL)
  {
    std::generic_category();
LABEL_16:
    unint64_t v3 = 0LL;
    return v3 | v2;
  }

  uint64_t v6 = (unint64_t *)(v4 + 16);
  uint64_t v8 = operator new(0x10uLL);
  void *v8 = &off_1002B4E18;
  v8[1] = v4;
  while (!__ldaxr(v6))
  {
  }

  __clrex();
  (*(void (**)(void *))(*v8 + 8LL))(v8);
  unint64_t v3 = 0LL;
  return v3 | v2;
}

uint64_t sub_100169C94(unsigned int *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  uint64_t v2 = *a1;
  if (!v1) {
    goto LABEL_4;
  }
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3 == 0xB2AB117A257EDFD1LL)
  {
    std::system_category();
    return v2;
  }

  if (v3 != 0xB2AB117A257EDFD0LL)
  {
    uint64_t v5 = (unint64_t *)(v1 + 16);
    if (!atomic_load((unint64_t *)(v1 + 16)))
    {
      uint64_t v7 = operator new(0x10uLL);
      *uint64_t v7 = &off_1002B4E18;
      v7[1] = v1;
      while (!__ldaxr(v5))
      {
        if (!__stlxr((unint64_t)v7, v5))
        {
          char v9 = 1;
          goto LABEL_13;
        }
      }

      char v9 = 0;
      __clrex();
LABEL_13:
      if ((v9 & 1) == 0) {
        (*(void (**)(void *))(*v7 + 8LL))(v7);
      }
    }
  }

  else
  {
LABEL_4:
    std::generic_category();
  }

  return v2;
}

void sub_100169D70(std::error_category *a1)
{
}

uint64_t sub_100169D84(uint64_t a1)
{
  return (***(uint64_t (****)(void))(a1 + 8))(*(void *)(a1 + 8));
}

uint64_t sub_100169D94(uint64_t a1)
{
  v3[0] = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 8LL))(*(void *)(a1 + 8));
  v3[1] = v1;
  return sub_100169C94((unsigned int *)v3);
}

uint64_t sub_100169DCC(std::error_category *a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (const std::error_category *)*((void *)a3 + 1);
  if (v6 == a1)
  {
    char v9 = (uint64_t (***)())a1[1].__vftable;
    int v18 = *a3;
    unsigned __int8 v19 = v9;
    return ((uint64_t (*)(uint64_t (***)(), uint64_t, int *))(*v9)[2])(v9, a2, &v18);
  }

  if (v6 == std::generic_category()) {
    goto LABEL_19;
  }
  uint64_t v7 = (void *)*((void *)a3 + 1);
  if (qword_1002C9390 == 0xB2AB117A257EDFD1LL)
  {
    uint64_t v8 = std::system_category();
  }

  else if (qword_1002C9390 == 0xB2AB117A257EDFD0LL)
  {
    uint64_t v8 = std::generic_category();
  }

  else
  {
    uint64_t v8 = (void *)atomic_load((unint64_t *)&dword_1002C9398);
    if (!v8)
    {
      uint64_t v8 = operator new(0x10uLL);
      void *v8 = &off_1002B4E18;
      v8[1] = &boost::system::detail::generic_cat_holder<void>::instance;
      while (1)
      {
        unint64_t v10 = __ldaxr((unint64_t *)&dword_1002C9398);
        if (v10) {
          break;
        }
        if (!__stlxr((unint64_t)v8, (unint64_t *)&dword_1002C9398))
        {
          char v11 = 1;
          goto LABEL_14;
        }
      }

      char v11 = 0;
      __clrex();
LABEL_14:
      if ((v11 & 1) == 0)
      {
        (*(void (**)(void *))(*v8 + 8LL))(v8);
        uint64_t v8 = (void *)v10;
      }
    }
  }

  if (v7 == v8)
  {
LABEL_19:
    int v18 = *a3;
    unsigned __int8 v19 = &boost::system::detail::generic_cat_holder<void>::instance;
    goto LABEL_20;
  }

  if (v12)
  {
    uint64_t v13 = (uint64_t (***)())v12[1];
    int v18 = *a3;
    unsigned __int8 v19 = v13;
LABEL_20:
    char v9 = (uint64_t (***)())a1[1].__vftable;
    return ((uint64_t (*)(uint64_t (***)(), uint64_t, int *))(*v9)[2])(v9, a2, &v18);
  }

  int v15 = ((uint64_t (*)(std::error_category *, uint64_t))a1->default_error_condition)(a1, a2);
  return *((void *)a3 + 1) == v16 && *a3 == v15;
}

uint64_t sub_100169F70(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = (const std::error_category *)*((void *)a2 + 1);
  if (v6 == (const std::error_category *)a1)
  {
    uint64_t v9 = *a2;
    unint64_t v10 = *(uint64_t (****)())(a1 + 8);
    uint64_t v30 = 0LL;
    if ((unint64_t)v10[1] >> 1 == 0x595588BD12BF6FE8LL)
    {
      int v11 = v9 != 0;
      uint64_t v12 = v10;
    }

    else
    {
      int v11 = ((uint64_t (*)(uint64_t (***)(), uint64_t))(*v10)[6])(v10, v9);
      uint64_t v12 = *(uint64_t (****)())(a1 + 8);
    }

    BOOL v13 = v11 == 0;
    uint64_t v14 = 2LL;
    if (!v13) {
      uint64_t v14 = 3LL;
    }
    LODWORD(v30) = v9;
    uint64_t v31 = v10;
    uint64_t v32 = v14;
    return ((uint64_t (*)(uint64_t (***)(), uint64_t *, uint64_t))(*v12)[3])(v12, &v30, a3);
  }

  if (v6 == std::generic_category()) {
    goto LABEL_25;
  }
  uint64_t v7 = (void *)*((void *)a2 + 1);
  if (qword_1002C9390 == 0xB2AB117A257EDFD1LL)
  {
    uint64_t v8 = std::system_category();
  }

  else if (qword_1002C9390 == 0xB2AB117A257EDFD0LL)
  {
    uint64_t v8 = std::generic_category();
  }

  else
  {
    uint64_t v8 = (void *)atomic_load((unint64_t *)&dword_1002C9398);
    if (!v8)
    {
      uint64_t v8 = operator new(0x10uLL);
      void *v8 = &off_1002B4E18;
      v8[1] = &boost::system::detail::generic_cat_holder<void>::instance;
      while (1)
      {
        unint64_t v15 = __ldaxr((unint64_t *)&dword_1002C9398);
        if (v15) {
          break;
        }
        if (!__stlxr((unint64_t)v8, (unint64_t *)&dword_1002C9398))
        {
          char v16 = 1;
          goto LABEL_19;
        }
      }

      char v16 = 0;
      __clrex();
LABEL_19:
      if ((v16 & 1) == 0)
      {
        (*(void (**)(void *))(*v8 + 8LL))(v8);
        uint64_t v8 = (void *)v15;
      }
    }
  }

  if (v7 == v8)
  {
LABEL_25:
    int v21 = *a2;
    uint64_t v30 = 0LL;
    else {
      BOOL v22 = ((BOOL (*)(uint64_t, int))boost::system::detail::generic_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::generic_cat_holder<void>::instance,  v21);
    }
    uint64_t v23 = 2LL;
    if (v22) {
      uint64_t v23 = 3LL;
    }
    LODWORD(v30) = v21;
    uint64_t v31 = &boost::system::detail::generic_cat_holder<void>::instance;
    uint64_t v32 = v23;
    goto LABEL_39;
  }

  if (v17)
  {
    uint64_t v18 = *a2;
    unsigned __int8 v19 = (uint64_t (***)())v17[1];
    uint64_t v30 = 0LL;
    else {
      int v20 = ((uint64_t (*)(uint64_t (***)(), uint64_t))(*v19)[6])(v19, v18);
    }
    uint64_t v29 = 2LL;
    if (v20) {
      uint64_t v29 = 3LL;
    }
    LODWORD(v30) = v18;
    uint64_t v31 = v19;
    uint64_t v32 = v29;
LABEL_39:
    uint64_t v12 = *(uint64_t (****)())(a1 + 8);
    return ((uint64_t (*)(uint64_t (***)(), uint64_t *, uint64_t))(*v12)[3])(v12, &v30, a3);
  }

  unint64_t v24 = *(uint64_t (****)())(a1 + 8);
  BOOL v25 = v24 == &boost::system::detail::generic_cat_holder<void>::instance;
  BOOL v26 = v24[1] == (uint64_t (**)())qword_1002C9390;
  if (!qword_1002C9390) {
    BOOL v26 = v25;
  }
  if (!v26) {
    return 0LL;
  }
  char v27 = std::generic_category();
  return ((uint64_t (*)(const std::error_category *, unsigned int *, uint64_t))v27->equivalent_0)(v27, a2, a3);
}

uint64_t sub_10016A238(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32LL))(*(void *)(a1 + 8));
}

uint64_t sub_10016A248()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1002D1988);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1002D1988))
  {
    qword_1002D1980 = sub_10016A2B8();
    __cxa_guard_release(&qword_1002D1988);
  }

  return qword_1002D1980;
}

void sub_10016A2A0(_Unwind_Exception *a1)
{
}

uint64_t sub_10016A2B8()
{
  *__error() = 0;
  uint64_t v0 = pathconf("/", 5);
  else {
    uint64_t v1 = v0;
  }
  if (v0 >= 0) {
    return v1;
  }
  else {
    return 1024LL;
  }
}

void *sub_10016A2F4(void *result, char *a2, char *a3, unint64_t a4)
{
  uint64_t v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8LL) {
    sub_10000ACA8();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    double result = operator new(v8 + 1);
    v4[1] = a4;
    void v4[2] = v9 | 0x8000000000000000LL;
    *uint64_t v4 = result;
    uint64_t v4 = result;
  }

  else
  {
    *((_BYTE *)result + 23) = a4;
  }

  while (a2 != a3)
  {
    char v10 = *a2++;
    *(_BYTE *)uint64_t v4 = v10;
    uint64_t v4 = (void *)((char *)v4 + 1);
  }

  *(_BYTE *)uint64_t v4 = 0;
  return result;
}

void *sub_10016A398(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_10000F12C();
  }
  return operator new(8 * a2);
}

uint64_t sub_10016A3CC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    sub_10016A418((unsigned int **)(i - 8));
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

unsigned int **sub_10016A418(unsigned int **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    do
    {
      unsigned int v3 = __ldaxr(v2);
      unsigned int v4 = v3 - 1;
    }

    while (__stlxr(v4, v2));
    if (!v4)
    {
      uint64_t v5 = (void *)sub_10016A45C((uint64_t)v2);
      operator delete(v5);
    }
  }

  return a1;
}

uint64_t sub_10016A45C(uint64_t a1)
{
  return a1;
}

uint64_t *sub_10016A4A4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    do
    {
      unsigned int v3 = __ldaxr((unsigned int *)v2);
      unsigned int v4 = v3 - 1;
    }

    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      uint64_t v6 = (void **)(v2 + 8);
      sub_10016A500(&v6);
      operator delete((void *)v2);
    }
  }

  return a1;
}

void sub_10016A500(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (unsigned int **)**a1;
  if (v2)
  {
    unsigned int v4 = (unsigned int **)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        unsigned int v4 = sub_10016A418(v4 - 1);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_10016A570(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, std::string *a4@<X8>)
{
  if (a3)
  {
    *a3 = 0LL;
    a3[1] = 0LL;
    a3[2] = 0LL;
  }

  sub_10016F8B8((_BYTE *)a1);
  if (v8)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      sub_100168054(a4, *(void **)a1, *(void *)(a1 + 8));
    }

    else
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a4->__r_.__value_.__l.__cap_ = *(void *)(a1 + 16);
    }

    return;
  }

  else {
    std::string __dst = *(std::string *)a2;
  }
  sub_10016F8B8((_BYTE *)a2);
  if (v9) {
    goto LABEL_11;
  }
  if (!a3)
  {
    sub_10016C1E0(0LL, &v20);
    sub_10016A570(&__p, a2, &v20, 0LL);
    std::string __dst = __p;
    __p.__r_.__value_.__s.__size_ = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    goto LABEL_11;
  }

  sub_10016C1E0(a3, &__p);
  uint64_t v11 = a3[2];
  if ((v11 & 1) != 0 && (v11 != 1 || *(_DWORD *)a3)) {
    memset(&v20, 0, sizeof(v20));
  }
  else {
    sub_10016A570(&v20, a2, &__p, a3);
  }
  std::string __dst = v20;
  uint64_t v19 = a3[2];
  if ((v19 & 1) == 0 || v19 == 1 && !*(_DWORD *)a3)
  {
LABEL_11:
    uint64_t v10 = *(unsigned __int8 *)(a1 + 23);
    if ((v10 & 0x80u) != 0LL) {
      uint64_t v10 = *(void *)(a1 + 8);
    }
    if (v10)
    {
      a4->__r_.__value_.__r.__words[0] = 0LL;
      a4->__r_.__value_.__l.__size_ = 0LL;
      a4->__r_.__value_.__l.__cap_ = 0LL;
      if (sub_10016F814((_BYTE *)a1)) {
        sub_10016A940((char *)a1, &__p);
      }
      else {
        sub_10016A940((char *)&__dst, &__p);
      }
      *a4 = __p;
      sub_10016F8B8((_BYTE *)a1);
      if (v12)
      {
        sub_10016A980((_BYTE *)a1, &__p);
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type size = __p.__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        std::string::append(a4, (const std::string::value_type *)p_p, size);
      }

      else
      {
        sub_10016A980(&__dst, &__p);
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          unint64_t v15 = &__p;
        }
        else {
          unint64_t v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type v16 = __p.__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type v16 = __p.__r_.__value_.__l.__size_;
        }
        std::string::append(a4, (const std::string::value_type *)v15, v16);
        sub_10016A9C0(&__dst, &__p);
        sub_10016EC50(a4, &__p);
      }

      sub_10016A9C0((_BYTE *)a1, &__p);
      std::string::size_type v17 = __p.__r_.__value_.__s.__size_;
      unsigned __int8 v18 = __p.__r_.__value_.__s.__size_;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        std::string::size_type v17 = __p.__r_.__value_.__l.__size_;
      }
      if (v17)
      {
        sub_10016EC50(a4, &__p);
        unsigned __int8 v18 = __p.__r_.__value_.__s.__size_;
      }

      if ((v18 & 0x80) != 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }

    else
    {
      *a4 = __dst;
      memset(&__dst, 0, sizeof(__dst));
    }

    goto LABEL_63;
  }

  a4->__r_.__value_.__r.__words[0] = 0LL;
  a4->__r_.__value_.__l.__size_ = 0LL;
  a4->__r_.__value_.__l.__cap_ = 0LL;
LABEL_63:
}

void sub_10016A8A0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10016A940@<X0>(char *a1@<X0>, void *a2@<X8>)
{
  unsigned int v3 = a1;
  if (a1[23] < 0) {
    unsigned int v3 = *(char **)a1;
  }
  unint64_t v4 = sub_10016F814(a1);
  return sub_10016A2F4(a2, v3, &v3[v4], v4);
}

void *sub_10016A980@<X0>(_BYTE *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1;
  unint64_t v4 = sub_10016F8B8(a1);
  return sub_10016A2F4(a2, &v2[v4], &v2[v4 + v5], v5);
}

void *sub_10016A9C0@<X0>(_BYTE *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1;
  unint64_t v4 = sub_10016F918(a1);
  return sub_10016A2F4(a2, &v2[v4], &v2[v4 + v5], v5);
}

void sub_10016AA00(std::string *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, std::string *a4@<X8>)
{
  if (a3)
  {
    *a3 = 0LL;
    a3[1] = 0LL;
    a3[2] = 0LL;
  }

  else {
    std::string __dst = *a1;
  }
  sub_10016F8B8(a1);
  if (!v8)
  {
    sub_10016A570((uint64_t)a1, a2, a3, &v32);
    std::string __dst = v32;
    if (a3)
    {
      uint64_t v24 = a3[2];
      if ((v24 & 1) != 0 && (v24 != 1 || *(_DWORD *)a3))
      {
LABEL_107:
        a4->__r_.__value_.__r.__words[0] = 0LL;
        a4->__r_.__value_.__l.__size_ = 0LL;
        a4->__r_.__value_.__l.__cap_ = 0LL;
        goto LABEL_108;
      }
    }
  }

  __int128 v39 = 0uLL;
  uint64_t v40 = 0LL;
  sub_10016B0B0((const char *)&__dst, (uint64_t)&v39, &v38);
  if (v38 == 1)
  {
    if ((unint64_t)qword_1002C9390 >> 1 == 0x595588BD12BF6FE8LL
      || (uint64_t v9 = 2LL,
          ((BOOL (*)(uint64_t, int))boost::system::detail::generic_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::generic_cat_holder<void>::instance,  2)))
    {
      uint64_t v9 = 3LL;
    }

    *(void *)&__int128 v39 = 2LL;
    *((void *)&v39 + 1) = &boost::system::detail::generic_cat_holder<void>::instance;
    uint64_t v40 = v9;
    goto LABEL_105;
  }

  if ((v40 & 1) != 0 && (v40 != 1 || (_DWORD)v39)) {
    goto LABEL_105;
  }
  sub_10016B2D8((char *)&__dst, &__p);
  uint64_t v10 = sub_10016FBD8();
  uint64_t v11 = sub_10016FD3C();
  a4->__r_.__value_.__r.__words[0] = 0LL;
  a4->__r_.__value_.__l.__size_ = 0LL;
  a4->__r_.__value_.__l.__cap_ = 0LL;
  int v12 = 40;
  while (2)
  {
    sub_10016F208((unint64_t)&__dst, &v32);
    sub_10016F320((uint64_t)&__dst, &v28);
    while (1)
    {
      if (v33 == v30 && v34 == v31)
      {
        int v21 = 6;
        goto LABEL_77;
      }

      if (!sub_10016F344((unint64_t)&v32, (unint64_t)v11))
      {
        goto LABEL_75;
      }

      if ((char)v32.__r_.__value_.__s.__size_ < 0)
      {
        if (v32.__r_.__value_.__l.__size_ != 1) {
          goto LABEL_32;
        }
        uint64_t v14 = (std::string *)v32.__r_.__value_.__r.__words[0];
      }

      else
      {
        if (v32.__r_.__value_.__s.__size_ != 1) {
          goto LABEL_32;
        }
        uint64_t v14 = &v32;
      }

      if (v14->__r_.__value_.__s.__data_[0] == 47)
      {
        std::string::push_back(a4, 47);
        goto LABEL_75;
      }

void sub_10016AFCC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, int a31, __int16 a32, char a33, char a34, uint64_t a35, uint64_t a36, void *__p, uint64_t a38, int a39, __int16 a40, char a41, char a42)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10016B0B0@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, int *a3@<X8>)
{
  unint64_t v4 = a1;
  if (a2)
  {
    *(void *)a2 = 0LL;
    *(void *)(a2 + 8) = 0LL;
    *(void *)(a2 + 16) = 0LL;
  }

  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  double result = (int *)stat(a1, &v17);
  if ((_DWORD)result)
  {
    double result = __error();
    int v7 = *result;
    if (a2)
    {
      else {
        double result = (int *)((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::system_cat_holder<void>::instance,  v7);
      }
      uint64_t v11 = 2LL;
      if ((_DWORD)result) {
        uint64_t v11 = 3LL;
      }
      *(_DWORD *)a2 = v7;
      *(_DWORD *)(a2 + 4) = 0;
      *(void *)(a2 + 8) = &boost::system::detail::system_cat_holder<void>::instance;
      *(void *)(a2 + 16) = v11;
      if (v7 == 20) {
        int v12 = 0;
      }
      else {
        int v12 = 0xFFFF;
      }
      int v9 = v7 == 2 || v7 == 20;
      if (v7 == 2) {
        int v8 = 0;
      }
      else {
        int v8 = v12;
      }
    }

    else
    {
      if (v7 != 2 && v7 != 20)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
        v16[0] = 0LL;
        else {
          BOOL v14 = ((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::system_cat_holder<void>::instance,  v7);
        }
        uint64_t v15 = 2LL;
        LODWORD(v16[0]) = v7;
        if (v14) {
          uint64_t v15 = 3LL;
        }
        v16[1] = &boost::system::detail::system_cat_holder<void>::instance;
        _DWORD v16[2] = v15;
        boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::status", v4, v16);
      }

      int v8 = 0;
      int v9 = 1;
    }
  }

  else
  {
    int v8 = 0xFFFF;
    int v9 = 10;
    switch(((v17.st_mode & 0xF000u) - 4096) >> 12)
    {
      case 0u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 7;
        break;
      case 1u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 6;
        break;
      case 3u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 3;
        break;
      case 5u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 5;
        break;
      case 7u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 2;
        break;
      case 0xBu:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 8;
        break;
      default:
        break;
    }
  }

  *a3 = v9;
  a3[1] = v8;
  return result;
}

void sub_10016B2C4(_Unwind_Exception *a1)
{
}

void *sub_10016B2D8@<X0>(char *a1@<X0>, void *a2@<X8>)
{
  unsigned int v3 = a1;
  if (a1[23] < 0) {
    unsigned int v3 = *(char **)a1;
  }
  unint64_t v4 = sub_10016F850(a1);
  return sub_10016A2F4(a2, v3, &v3[v4], v4);
}

int *sub_10016B318@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, int *a3@<X8>)
{
  unint64_t v4 = a1;
  if (a2)
  {
    *(void *)a2 = 0LL;
    *(void *)(a2 + 8) = 0LL;
    *(void *)(a2 + 16) = 0LL;
  }

  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  double result = (int *)lstat(a1, &v17);
  if ((_DWORD)result)
  {
    double result = __error();
    int v7 = *result;
    if (a2)
    {
      else {
        double result = (int *)((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::system_cat_holder<void>::instance,  v7);
      }
      uint64_t v11 = 2LL;
      if ((_DWORD)result) {
        uint64_t v11 = 3LL;
      }
      *(_DWORD *)a2 = v7;
      *(_DWORD *)(a2 + 4) = 0;
      *(void *)(a2 + 8) = &boost::system::detail::system_cat_holder<void>::instance;
      *(void *)(a2 + 16) = v11;
      if (v7 == 20) {
        int v12 = 0;
      }
      else {
        int v12 = 0xFFFF;
      }
      int v9 = v7 == 2 || v7 == 20;
      if (v7 == 2) {
        int v8 = 0;
      }
      else {
        int v8 = v12;
      }
    }

    else
    {
      if (v7 != 2 && v7 != 20)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
        v16[0] = 0LL;
        else {
          BOOL v14 = ((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::system_cat_holder<void>::instance,  v7);
        }
        uint64_t v15 = 2LL;
        LODWORD(v16[0]) = v7;
        if (v14) {
          uint64_t v15 = 3LL;
        }
        v16[1] = &boost::system::detail::system_cat_holder<void>::instance;
        _DWORD v16[2] = v15;
        boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::symlink_status", v4, v16);
      }

      int v8 = 0;
      int v9 = 1;
    }
  }

  else
  {
    int v8 = 0xFFFF;
    int v9 = 10;
    switch(((v17.st_mode & 0xF000u) - 4096) >> 12)
    {
      case 0u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 7;
        break;
      case 1u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 6;
        break;
      case 3u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 3;
        break;
      case 5u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 5;
        break;
      case 7u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 2;
        break;
      case 9u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 4;
        break;
      case 0xBu:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 8;
        break;
      default:
        break;
    }
  }

  *a3 = v9;
  a3[1] = v8;
  return result;
}

void sub_10016B538(_Unwind_Exception *a1)
{
}

void sub_10016B54C(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0LL;
  a3->__r_.__value_.__l.__size_ = 0LL;
  a3->__r_.__value_.__l.__cap_ = 0LL;
  else {
    uint64_t v6 = *(const char **)a1;
  }
  std::string::size_type v7 = readlink(v6, v22, 0x400uLL);
  if ((v7 & 0x8000000000000000LL) != 0)
  {
LABEL_22:
    int v13 = *__error();
    if (!a2)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
      v21[0] = 0LL;
      if ((qword_1002C9378 & 0xFFFFFFFFFFFFFFFELL) == 0xB2AB117A257EDFD0LL) {
        BOOL v16 = v13 != 0;
      }
      else {
        BOOL v16 = ((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::system_cat_holder<void>::instance,  v13);
      }
      uint64_t v17 = 2LL;
      LODWORD(v21[0]) = v13;
      if (v16) {
        uint64_t v17 = 3LL;
      }
      v21[1] = &boost::system::detail::system_cat_holder<void>::instance;
      v21[2] = v17;
      boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::read_symlink", a1, v21);
    }

    if ((qword_1002C9378 & 0xFFFFFFFFFFFFFFFELL) == 0xB2AB117A257EDFD0LL) {
      BOOL v14 = v13 != 0;
    }
    else {
      BOOL v14 = ((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::system_cat_holder<void>::instance,  v13);
    }
    uint64_t v12 = 2LL;
    if (v14) {
      uint64_t v12 = 3LL;
    }
    *(_DWORD *)a2 = v13;
    *(_DWORD *)(a2 + 4) = 0;
LABEL_29:
    *(void *)(a2 + 8) = &boost::system::detail::system_cat_holder<void>::instance;
    *(void *)(a2 + 16) = v12;
  }

  else if (v7 >= 0x400)
  {
    size_t v8 = 2048LL;
    while (1)
    {
      int v9 = (char *)operator new[](v8);
      std::string::size_type v10 = readlink(v6, v9, v8);
      if ((v10 & 0x8000000000000000LL) != 0)
      {
        operator delete[](v9);
        goto LABEL_22;
      }

      if (v10 < v8) {
        break;
      }
      operator delete[](v9);
      BOOL v11 = v8 > 0x4000;
      v8 *= 2LL;
      if (v11)
      {
        if (!a2)
        {
          uint64_t v18 = __cxa_allocate_exception(0x30uLL);
          v20[0] = 0LL;
          if ((qword_1002C9378 & 0xFFFFFFFFFFFFFFFELL) == 0xB2AB117A257EDFD0LL
            || ((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::system_cat_holder<void>::instance,  63))
          {
            uint64_t v19 = 3LL;
          }

          else
          {
            uint64_t v19 = 2LL;
          }

          LODWORD(v20[0]) = 63;
          v20[1] = &boost::system::detail::system_cat_holder<void>::instance;
          v20[2] = v19;
          boost::filesystem::filesystem_error::filesystem_error(v18, "boost::filesystem::read_symlink", a1, v20);
        }

        if ((qword_1002C9378 & 0xFFFFFFFFFFFFFFFELL) == 0xB2AB117A257EDFD0LL
          || ((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::system_cat_holder<void>::instance,  63))
        {
          uint64_t v12 = 3LL;
        }

        else
        {
          uint64_t v12 = 2LL;
        }

        *(void *)a2 = 63LL;
        goto LABEL_29;
      }
    }

    sub_10016E7C8(a3, v9, &v9[v10], v10);
    if (a2)
    {
      *(void *)a2 = 0LL;
      *(void *)(a2 + 8) = 0LL;
      *(void *)(a2 + 16) = 0LL;
    }

    operator delete[](v9);
  }

  else
  {
    sub_10016E7C8(a3, v22, &v22[v7], v7);
    if (a2)
    {
      *(void *)a2 = 0LL;
      *(void *)(a2 + 8) = 0LL;
      *(void *)(a2 + 16) = 0LL;
    }
  }

void sub_10016B8A0(_Unwind_Exception *exception_object)
{
}

void sub_10016B8EC(const char *a1, uint64_t a2, int a3, void *a4)
{
  std::string::size_type v7 = (std::string *)a1;
  if ((a3 & 0x1600) != 0) {
    sub_10016B318(a1, (uint64_t)a4, (int *)&v35);
  }
  else {
    sub_10016B0B0(a1, (uint64_t)a4, (int *)&v35);
  }
  if (a4)
  {
    uint64_t v8 = a4[2];
    if ((v8 & 1) != 0 && (v8 != 1 || *(_DWORD *)a4)) {
      return;
    }
  }

  if (LODWORD(v35.__r_.__value_.__l.__data_) <= 1)
  {
    int v9 = 2;
    goto LABEL_14;
  }

  if (LODWORD(v35.__r_.__value_.__l.__data_) == 2)
  {
    if ((a3 & 0x800) != 0) {
      return;
    }
    if ((a3 & 0x1000) != 0)
    {
      memset(&v35, 0, sizeof(v35));
      sub_10016F8B8(v7);
      if (v11) {
        goto LABEL_31;
      }
      sub_10016C1E0(a4, &__dst);
      if (a4 && (uint64_t v20 = a4[2], (v20 & 1) != 0) && (v20 != 1 || *(_DWORD *)a4))
      {
        int v25 = 1;
      }

      else
      {
        sub_100168EE4((char *)v7, &v32);
        sub_10016A570((uint64_t)&v32, (uint64_t)&__dst, a4, &__p);
        if (a4 && (uint64_t v21 = a4[2], (v21 & 1) != 0) && (v21 != 1 || *(_DWORD *)a4))
        {
          int v25 = 1;
        }

        else
        {
          sub_100168EE4((char *)a2, &v32);
          sub_10016F8B8(&v32);
          if (!v22)
          {
            sub_10016A570((uint64_t)&v32, (uint64_t)&__dst, a4, &v31);
            std::string v32 = v31;
            if (a4)
            {
              uint64_t v27 = a4[2];
              if ((v27 & 1) != 0 && (v27 != 1 || *(_DWORD *)a4)) {
                goto LABEL_117;
              }
            }
          }

          sub_10016C338(&__p, &v32, a4, &v31);
          std::string v35 = v31;
          if (a4 && (uint64_t v23 = a4[2], (v23 & 1) != 0) && (v23 != 1 || *(_DWORD *)a4))
          {
LABEL_117:
            int v25 = 1;
          }

          else
          {
            uint64_t v24 = sub_10016FBD8();
            if (sub_10016F344((unint64_t)&v35, (unint64_t)v24))
            {
              sub_10016E594(v7, &v31);
              sub_10016EC50(&v35, &v31);
              int v25 = 0;
            }

            else
            {
              sub_10016E594(v7, &v31);
              int v25 = 0;
              std::string v35 = v31;
            }

            std::string::size_type v7 = &v35;
          }
        }
      }

      if (!v25) {
LABEL_31:
      }
        sub_10016C56C((uint64_t)v7, a2, a4);
      std::string v26 = (void *)v35.__r_.__value_.__r.__words[0];
    }

    else
    {
      if ((a3 & 0x2000) != 0)
      {
        sub_10016C5F8((uint64_t)v7, a2, a4);
        return;
      }

      memset(&v35, 0, sizeof(v35));
      if ((a3 & 0x1400) != 0) {
        sub_10016B318((const char *)a2, (uint64_t)&v35, (int *)&__dst);
      }
      else {
        sub_10016B0B0((const char *)a2, (uint64_t)&v35, (int *)&__dst);
      }
      if (LODWORD(__dst.__r_.__value_.__l.__data_) != 3)
      {
        if (LODWORD(__dst.__r_.__value_.__l.__data_))
        {
          sub_10016C688((uint64_t)v7, a2, a3, a4);
          return;
        }

        if (a4) {
          goto LABEL_69;
        }
        exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
        std::string v30 = v35;
        boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::copy", v7, a2, &v30);
        goto LABEL_133;
      }

      sub_10016E594(v7, &__p);
      sub_10016C998(a2, &__p, &__dst);
      sub_10016C688((uint64_t)v7, (uint64_t)&__dst, a3, a4);
      std::string v26 = (void *)__p.__r_.__value_.__r.__words[0];
    }

    operator delete(v26);
    return;
  }

  if (LODWORD(v35.__r_.__value_.__l.__data_) == 3)
  {
    memset(&v35, 0, sizeof(v35));
    if ((a3 & 0x1000) == 0)
    {
      if ((a3 & 0x1400) != 0) {
        sub_10016B318((const char *)a2, (uint64_t)&v35, (int *)&__dst);
      }
      else {
        sub_10016B0B0((const char *)a2, (uint64_t)&v35, (int *)&__dst);
      }
      if (LODWORD(__dst.__r_.__value_.__l.__data_) == 1)
      {
        sub_10016CA08(a2, (uint64_t)v7, a4);
        if (a4)
        {
          uint64_t v13 = a4[2];
          if ((v13 & 1) != 0 && (v13 != 1 || *(_DWORD *)a4)) {
            return;
          }
        }
      }

      else if (!LODWORD(__dst.__r_.__value_.__l.__data_))
      {
        if (!a4)
        {
          exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
          std::string v28 = v35;
          boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::copy", v7, a2, &v28);
          goto LABEL_133;
        }

void sub_10016C010( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, void *__p, uint64_t a27, int a28, __int16 a29, char a30, char a31, void *a32, uint64_t a33, int a34, __int16 a35, char a36, char a37)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  _Unwind_Resume(exception_object);
}

void sub_10016C150(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a3 || (uint64_t v5 = a3[2], (v5 & 1) == 0) || v5 == 1 && !*(_DWORD *)a3) {
    sub_10016C56C((uint64_t)&__p, a2, a3);
  }
}

void sub_10016C1C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10016C1E0(void *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  unint64_t v4 = getcwd(v9, 0x400uLL);
  if (v4)
  {
    sub_100168248(a2, v4);
    if (a1)
    {
      *a1 = 0LL;
      a1[1] = 0LL;
      a1[2] = 0LL;
    }
  }

  else if (!sub_10016D158(a1))
  {
    for (size_t i = 2048LL; ; i *= 2LL)
    {
      uint64_t v6 = (char *)operator new[](i);
      if (getcwd(v6, i)) {
        break;
      }
      BOOL v7 = sub_10016D158(a1);
      operator delete[](v6);
      if (v7) {
        return;
      }
      if (i > 0x4000)
      {
        sub_10016758C(63, (uint64_t)a1, (uint64_t)"boost::filesystem::current_path");
        return;
      }
    }

    sub_100168248(a2, v6);
    if (a1)
    {
      *a1 = 0LL;
      a1[1] = 0LL;
      a1[2] = 0LL;
    }

    operator delete[](v6);
  }

void sub_10016C300(_Unwind_Exception *exception_object)
{
}

void sub_10016C338(_BYTE *a1@<X0>, _BYTE *a2@<X1>, void *a3@<X2>, std::string *a4@<X8>)
{
  if (a3)
  {
    *a3 = 0LL;
    a3[1] = 0LL;
    a3[2] = 0LL;
  }

  __int128 v17 = 0uLL;
  uint64_t v18 = 0LL;
  memset(&__p, 0, sizeof(__p));
  sub_10016F8B8(a1);
  if (!v8 || (sub_10016F8B8(a2), !v9))
  {
    sub_10016C1E0(&v17, &v15);
    std::string __p = v15;
    if ((v18 & 1) != 0 && (v18 != 1 || (_DWORD)v17)) {
      goto LABEL_22;
    }
  }

  sub_10016D9B8((uint64_t)a2, (uint64_t)&__p, (uint64_t)&v17, &v15);
  if ((v18 & 1) == 0 || (int v10 = 2, v18 == 1) && !(_DWORD)v17)
  {
    sub_10016D9B8((uint64_t)a1, (uint64_t)&__p, (uint64_t)&v17, &v12);
    if ((v18 & 1) == 0 || (int v10 = 2, v18 == 1) && !(_DWORD)v17)
    {
      sub_100170030((unint64_t)&v12, (unint64_t)&v15, a4);
      int v10 = 1;
    }
  }

  if (v10 == 2)
  {
LABEL_22:
    if (!a3)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
      __int128 v13 = v17;
      uint64_t v14 = v18;
      boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::relative", a1, a2, &v13);
    }

    *(_OWORD *)a3 = v17;
    a3[2] = v18;
    a4->__r_.__value_.__l.__size_ = 0LL;
    a4->__r_.__value_.__l.__cap_ = 0LL;
    a4->__r_.__value_.__r.__words[0] = 0LL;
  }

void sub_10016C508( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10016C56C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  if (a3)
  {
    *a3 = 0LL;
    a3[1] = 0LL;
    a3[2] = 0LL;
  }

  uint64_t result = symlink((const char *)a1, (const char *)a2);
  if ((result & 0x80000000) != 0)
  {
    BOOL v7 = __error();
    return sub_1001677F4(*v7, v5, v4, (uint64_t)a3, (uint64_t)"boost::filesystem::create_symlink");
  }

  return result;
}

uint64_t sub_10016C5F8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t result = link((const char *)a1, (const char *)a2);
  if ((_DWORD)result)
  {
    uint64_t result = *__error();
    if ((_DWORD)result) {
      return sub_1001677F4(result, v5, v4, (uint64_t)a3, (uint64_t)"boost::filesystem::create_hard_link");
    }
  }

  if (a3)
  {
    *a3 = 0LL;
    a3[1] = 0LL;
    a3[2] = 0LL;
  }

  return result;
}

uint64_t sub_10016C688(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  if (a4)
  {
    *a4 = 0LL;
    a4[1] = 0LL;
    a4[2] = 0LL;
  }

  int v25 = -1;
  int v26 = -1;
  while (1)
  {
    uint64_t v8 = *(char *)(a1 + 23) >= 0 ? (const char *)a1 : *(const char **)a1;
    int v9 = open(v8, 0x1000000);
    int v26 = v9;
    if ((v9 & 0x80000000) == 0) {
      break;
    }
    int v10 = *__error();
    if (v10 != 4) {
      goto LABEL_33;
    }
  }

  if (fstat(v9, &v24))
  {
LABEL_60:
    int v10 = *__error();
    goto LABEL_33;
  }

  int st_mode = v24.st_mode;
  if ((v24.st_mode & 0xF000) != 0x8000)
  {
LABEL_61:
    int v10 = 78;
    goto LABEL_33;
  }

  if ((a3 & 4) != 0)
  {
    while (1)
    {
      std::string v12 = *(char *)(a2 + 23) >= 0 ? (const char *)a2 : *(const char **)a2;
      int v13 = open(v12, 16777217, st_mode | 0x80u);
      int v25 = v13;
      if ((v13 & 0x80000000) == 0) {
        break;
      }
      int v10 = *__error();
      if (v10 != 4)
      {
        if (v10 != 2) {
          goto LABEL_33;
        }
        goto LABEL_19;
      }
    }

    int v18 = 1;
LABEL_37:
    if (fstat(v13, &v23)) {
      goto LABEL_60;
    }
    int v19 = v23.st_mode;
    if ((v23.st_mode & 0xF000) != 0x8000) {
      goto LABEL_61;
    }
    if (v24.st_dev != v23.st_dev || v24.st_ino != v23.st_ino)
    {
      if (v18)
      {
        if (v24.st_mtimespec.tv_sec < v23.st_mtimespec.tv_sec
          || v24.st_mtimespec.tv_sec == v23.st_mtimespec.tv_sec && v24.st_mtimespec.tv_nsec <= v23.st_mtimespec.tv_nsec)
        {
          goto LABEL_34;
        }

        if (ftruncate(v25, 0LL)) {
          goto LABEL_60;
        }
      }

      int v10 = off_1002C93A0(v26, v25, v24.st_size, 0x1000uLL);
      if (v10) {
        goto LABEL_33;
      }
      if (v19 == st_mode || !fchmod(v25, st_mode))
      {
        if ((a3 & 0x18) != 0)
        {
          int v20 = v25;
          if ((a3 & 0x10) != 0)
          {
            while (fcntl(v20, 51) < 0)
            {
              int v10 = *__error();
              if (v10 != 4)
              {
LABEL_56:
                if (v10) {
                  goto LABEL_33;
                }
                break;
              }
            }
          }

          else
          {
            while (fcntl(v20, 51) < 0)
            {
              int v10 = *__error();
              if (v10 != 4) {
                goto LABEL_56;
              }
            }
          }
        }

        int v21 = close(v25);
        int v25 = -1;
        if ((v21 & 0x80000000) == 0 || (int v10 = *__error(), (v10 & 0xFFFFFFDF) == 4))
        {
          uint64_t v17 = 1LL;
          goto LABEL_59;
        }

        goto LABEL_33;
      }

      goto LABEL_60;
    }

void sub_10016C960(_Unwind_Exception *a1)
{
}

void sub_10016C998(uint64_t a1@<X0>, const std::string *a2@<X1>, std::string *a3@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    sub_100168054(a3, *(void **)a1, *(void *)(a1 + 8));
  }

  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a3->__r_.__value_.__l.__cap_ = *(void *)(a1 + 16);
  }

  sub_10016EC50(a3, a2);
}

void sub_10016C9EC(_Unwind_Exception *exception_object)
{
}

uint64_t sub_10016CA08(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    *a3 = 0LL;
    a3[1] = 0LL;
    a3[2] = 0LL;
  }

  if (a2)
  {
    uint64_t v6 = (const char *)a2;
    if (stat(v6, &v12) < 0)
    {
      int v8 = *__error();
      goto LABEL_17;
    }

    mode_t st_mode = v12.st_mode;
    if ((v12.st_mode & 0xF000) != 0x4000)
    {
      int v8 = 20;
LABEL_17:
      sub_1001677F4(v8, a1, a2, (uint64_t)a3, (uint64_t)"boost::filesystem::create_directory");
      return 0LL;
    }
  }

  else
  {
    mode_t st_mode = 511;
  }

  else {
    int v9 = *(const char **)a1;
  }
  if (mkdir(v9, st_mode))
  {
    int v10 = *__error();
    memset(&v12, 0, 24);
    sub_10016B0B0((const char *)a1, (uint64_t)&v12, &v13);
    if (v13 != 3) {
      sub_1001676C0(v10, a1, (uint64_t)a3, (uint64_t)"boost::filesystem::create_directory");
    }
    return 0LL;
  }

  return 1LL;
}

int *sub_10016CB10(int *a1)
{
  int v2 = *a1;
  if ((v2 & 0x80000000) == 0) {
    close(v2);
  }
  return a1;
}

uint64_t sub_10016CB40(uint64_t a1, void *a2)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) != 0LL) {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  if (v4)
  {
    if (a2)
    {
      *a2 = 0LL;
      a2[1] = 0LL;
      a2[2] = 0LL;
    }

    sub_10016F320(a1, &v32);
    else {
      std::string __dst = v32;
    }
    __int128 v31 = v33;
    else {
      std::string v29 = *(std::string *)a1;
    }
    uint64_t v6 = sub_10016FBD8();
    BOOL v7 = sub_10016FD3C();
    __int128 v27 = 0uLL;
    uint64_t v28 = 0LL;
    sub_10016E594(&v29, __p);
    while (1)
    {
      sub_10016F918(&v29);
      if (!v8)
      {
LABEL_28:
        int v10 = 2;
        goto LABEL_29;
      }

      int v9 = (void *)HIBYTE(v26);
      if (v26 < 0) {
        int v9 = __p[1];
      }
      if (v9
        && sub_10016F344((unint64_t)__p, (unint64_t)v6)
        && sub_10016F344((unint64_t)__p, (unint64_t)v7))
      {
        sub_10016B0B0((const char *)&v29, (uint64_t)&v27, (int *)&v21);
        if ((_DWORD)v21 == 3) {
          goto LABEL_28;
        }
        if (!(_DWORD)v21) {
          break;
        }
      }

      sub_100171254(&__dst);
      sub_10016F550(&v29);
      sub_10016E594(&v29, &v21);
      if (SHIBYTE(v26) < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)std::string __p = v21;
      uint64_t v26 = v22;
    }

    if (!a2)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
      __int128 v23 = v27;
      uint64_t v24 = v28;
      boost::filesystem::filesystem_error::filesystem_error( exception,  "boost::filesystem::create_directories",  a1,  &v29,  &v23);
    }

    *(_OWORD *)a2 = v27;
    a2[2] = v28;
    int v10 = 1;
LABEL_29:
    if (SHIBYTE(v26) < 0) {
      operator delete(__p[0]);
    }
    if (v10 == 2)
    {
      char v11 = 0;
      while ((void)v31 != (void)v33 || *((void *)&v31 + 1) != *((void *)&v33 + 1))
      {
        sub_10016EC50(&v29, &__dst);
        std::string::size_type size = __dst.__r_.__value_.__s.__size_;
        if ((__dst.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          std::string::size_type size = __dst.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          if (sub_10016F344((unint64_t)&__dst, (unint64_t)v6))
          {
            if (sub_10016F344((unint64_t)&__dst, (unint64_t)v7))
            {
              char v11 = sub_10016CA08((uint64_t)&v29, 0LL, &v27);
              if ((v28 & 1) != 0 && (v28 != 1 || (_DWORD)v27))
              {
                if (!a2)
                {
                  uint64_t v17 = __cxa_allocate_exception(0x30uLL);
                  __int128 v19 = v27;
                  uint64_t v20 = v28;
                  boost::filesystem::filesystem_error::filesystem_error( v17,  "boost::filesystem::create_directories",  a1,  &v29,  &v19);
                }

                char v11 = 0;
                *(_OWORD *)a2 = v27;
                a2[2] = v28;
                break;
              }
            }
          }
        }

        sub_100170DB4(&__dst);
      }
    }

    else
    {
      char v11 = 0;
    }
  }

  else
  {
    if (!a2)
    {
      int v15 = __cxa_allocate_exception(0x30uLL);
      v34[0] = 0LL;
      if ((qword_1002C9390 & 0xFFFFFFFFFFFFFFFELL) == 0xB2AB117A257EDFD0LL
        || ((BOOL (*)(uint64_t, int))boost::system::detail::generic_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::generic_cat_holder<void>::instance,  22))
      {
        uint64_t v16 = 3LL;
      }

      else
      {
        uint64_t v16 = 2LL;
      }

      LODWORD(v34[0]) = 22;
      v34[1] = &boost::system::detail::generic_cat_holder<void>::instance;
      void v34[2] = v16;
      boost::filesystem::filesystem_error::filesystem_error(v15, "boost::filesystem::create_directories", a1, v34);
    }

    if ((qword_1002C9390 & 0xFFFFFFFFFFFFFFFELL) == 0xB2AB117A257EDFD0LL
      || ((BOOL (*)(uint64_t, int))boost::system::detail::generic_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::generic_cat_holder<void>::instance,  22))
    {
      uint64_t v5 = 3LL;
    }

    else
    {
      uint64_t v5 = 2LL;
    }

    char v11 = 0;
    *a2 = 22LL;
    a2[1] = &boost::system::detail::generic_cat_holder<void>::instance;
    a2[2] = v5;
  }

  return v11 & 1;
}

void sub_10016CF7C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10016D030(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a1;
  if (a3)
  {
    *a3 = 0LL;
    a3[1] = 0LL;
    a3[2] = 0LL;
  }

  if (stat((const char *)a1, &v9) < 0
    || (*(char *)(a2 + 23) >= 0 ? (uint64_t v6 = (const char *)a2) : (uint64_t v6 = *(const char **)a2),
        uint64_t result = mkdir(v6, v9.st_mode),
        (result & 0x80000000) != 0))
  {
    uint64_t v8 = __error();
    return sub_1001677F4(*v8, v5, a2, (uint64_t)a3, (uint64_t)"boost::filesystem::copy_directory");
  }

  return result;
}

uint64_t sub_10016D0CC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  if (a3)
  {
    *a3 = 0LL;
    a3[1] = 0LL;
    a3[2] = 0LL;
  }

  uint64_t result = symlink((const char *)a1, (const char *)a2);
  if ((result & 0x80000000) != 0)
  {
    BOOL v7 = __error();
    return sub_1001677F4(*v7, v5, v4, (uint64_t)a3, (uint64_t)"boost::filesystem::create_directory_symlink");
  }

  return result;
}

BOOL sub_10016D158(void *a1)
{
  int v2 = *__error();
  if (v2 == 34) {
    int v3 = 0;
  }
  else {
    int v3 = v2;
  }
  if (v3)
  {
    sub_10016758C(v3, (uint64_t)a1, (uint64_t)"boost::filesystem::current_path");
  }

  else if (a1)
  {
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
  }

  return v3 != 0;
}

uint64_t sub_10016D1B4(uint64_t a1, void *a2)
{
  uint64_t v3 = a1;
  uint64_t result = chdir((const char *)a1);
  if ((_DWORD)result)
  {
    uint64_t result = *__error();
    if ((_DWORD)result) {
      return sub_1001676C0(result, v3, (uint64_t)a2, (uint64_t)"boost::filesystem::current_path");
    }
  }

  if (a2)
  {
    *a2 = 0LL;
    a2[1] = 0LL;
    a2[2] = 0LL;
  }

  return result;
}

BOOL sub_10016D220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  else {
    uint64_t v6 = *(const char **)a2;
  }
  int v7 = stat(v6, &v15);
  else {
    uint64_t v8 = *(const char **)a1;
  }
  int v9 = stat(v8, &v14);
  if (!(v9 | v7)) {
    return v14.st_dev == v15.st_dev && v14.st_ino == v15.st_ino;
  }
  if (v9) {
    BOOL v12 = v7 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    int v13 = __error();
    sub_1001677F4(*v13, a1, a2, a3, (uint64_t)"boost::filesystem::equivalent");
  }

  return 0LL;
}

off_t sub_10016D2E8(uint64_t a1, void *a2)
{
  uint64_t v3 = a1;
  if (a2)
  {
    *a2 = 0LL;
    a2[1] = 0LL;
    a2[2] = 0LL;
  }

  if (stat((const char *)a1, &v6) < 0)
  {
    int v5 = *__error();
LABEL_11:
    sub_1001676C0(v5, v3, (uint64_t)a2, (uint64_t)"boost::filesystem::file_size");
    return -1LL;
  }

  if ((v6.st_mode & 0xF000) != 0x8000)
  {
    int v5 = 78;
    goto LABEL_11;
  }

  return v6.st_size;
}

uint64_t sub_10016D380(uint64_t a1, void *a2)
{
  uint64_t v3 = a1;
  if (a2)
  {
    *a2 = 0LL;
    a2[1] = 0LL;
    a2[2] = 0LL;
  }

  int v5 = __error();
  sub_1001676C0(*v5, v3, (uint64_t)a2, (uint64_t)"boost::filesystem::hard_link_count");
  return -1LL;
}

void sub_10016D3F8(void *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)&qword_1002D19A8);
  if ((v3 & 1) == 0)
  {
    int v5 = a1;
    int v6 = __cxa_guard_acquire(&qword_1002D19A8);
    a1 = v5;
    if (v6)
    {
      *(_OWORD *)byte_1002D1990 = 0uLL;
      *(void *)&byte_1002D1990[16] = 0LL;
      __cxa_atexit((void (*)(void *))sub_10016755C, byte_1002D1990, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1002D19A8);
      a1 = v5;
    }
  }

  uint64_t v4 = *(void *)&byte_1002D1990[8];
  if (byte_1002D1990[23] >= 0) {
    uint64_t v4 = byte_1002D1990[23];
  }
  if (v4)
  {
    if (a1)
    {
      *a1 = 0LL;
      a1[1] = 0LL;
      a1[2] = 0LL;
    }
  }

  else
  {
    sub_10016C1E0(a1, &v7);
    if (byte_1002D1990[23] < 0) {
      operator delete(*(void **)byte_1002D1990);
    }
    *(std::string *)byte_1002D1990 = v7;
  }

  if (byte_1002D1990[23] < 0)
  {
    sub_100168054((_BYTE *)a2, *(void **)byte_1002D1990, *(unint64_t *)&byte_1002D1990[8]);
  }

  else
  {
    *(_OWORD *)a2 = *(_OWORD *)byte_1002D1990;
    *(void *)(a2 + 16) = *(void *)&byte_1002D1990[16];
  }

BOOL sub_10016D518(std::string *a1, void *a2)
{
  unsigned __int8 v3 = a1;
  if (a2)
  {
    *a2 = 0LL;
    a2[1] = 0LL;
    a2[2] = 0LL;
  }

  if ((a1->__r_.__value_.__s.__size_ & 0x80u) != 0) {
    a1 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  if (stat((const char *)a1, &v7) < 0)
  {
    int v6 = __error();
    sub_1001676C0(*v6, (uint64_t)v3, (uint64_t)a2, (uint64_t)"boost::filesystem::is_empty");
    return 0LL;
  }

  else if ((v7.st_mode & 0xF000) == 0x4000)
  {
    int v9 = 0LL;
    sub_100168560((dirent **)&v9, v3, 0, a2);
    uint64_t v8 = 0LL;
    if (v9) {
      BOOL v4 = *((void *)v9 + 6) == 0LL;
    }
    else {
      BOOL v4 = 1LL;
    }
    sub_10016A418(&v8);
    sub_10016A418(&v9);
  }

  else
  {
    return v7.st_size == 0;
  }

  return v4;
}

void sub_10016D5F8(_Unwind_Exception *a1)
{
}

__darwin_time_t sub_10016D60C(uint64_t a1, void *a2)
{
  uint64_t v3 = a1;
  if (a2)
  {
    *a2 = 0LL;
    a2[1] = 0LL;
    a2[2] = 0LL;
  }

  int v5 = __error();
  sub_1001676C0(*v5, v3, (uint64_t)a2, (uint64_t)"boost::filesystem::creation_time");
  return 0x8000000000000000LL;
}

__darwin_time_t sub_10016D684(uint64_t a1, void *a2)
{
  uint64_t v3 = a1;
  if (a2)
  {
    *a2 = 0LL;
    a2[1] = 0LL;
    a2[2] = 0LL;
  }

  int v5 = __error();
  sub_1001676C0(*v5, v3, (uint64_t)a2, (uint64_t)"boost::filesystem::last_write_time");
  return 0x8000000000000000LL;
}

uint64_t sub_10016D6FC(uint64_t a1, time_t a2, void *a3)
{
  uint64_t v5 = a1;
  if (a3)
  {
    *a3 = 0LL;
    a3[1] = 0LL;
    a3[2] = 0LL;
  }

  if (stat((const char *)a1, &v10) < 0
    || ((v9.actime = v10.st_atimespec.tv_sec, v9.modtime = a2, *(char *)(v5 + 23) >= 0)
      ? (stat v6 = (const char *)v5)
      : (stat v6 = *(const char **)v5),
        uint64_t result = utime(v6, &v9),
        (result & 0x80000000) != 0))
  {
    uint64_t v8 = __error();
    return sub_1001676C0(*v8, v5, (uint64_t)a3, (uint64_t)"boost::filesystem::last_write_time");
  }

  return result;
}

int *sub_10016D79C(int *result, unsigned int a2, uint64_t a3)
{
  if ((~a2 & 0x3000) != 0)
  {
    unsigned int v4 = a2;
    uint64_t v5 = result;
    __int128 v17 = 0uLL;
    uint64_t v18 = 0LL;
    if ((a2 & 0x4000) != 0) {
      uint64_t result = sub_10016B318((const char *)result, (uint64_t)&v17, &v15);
    }
    else {
      uint64_t result = sub_10016B0B0((const char *)result, (uint64_t)&v17, &v15);
    }
    if ((v18 & 1) != 0 && (v18 != 1 || (_DWORD)v17))
    {
      if (a3)
      {
        *(_OWORD *)a3 = v17;
        uint64_t v8 = v18;
LABEL_25:
        *(void *)(a3 + 16) = v8;
        return result;
      }

      exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
      __int128 v13 = v17;
      uint64_t v14 = v18;
      boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::permissions", v5, &v13);
LABEL_34:
    }

    if ((v4 & 0x1000) != 0)
    {
      v4 |= v16;
    }

    else if ((v4 & 0x2000) != 0)
    {
      unsigned int v4 = v16 & ~v4;
    }

    else {
      stat v6 = *(const char **)v5;
    }
    uint64_t result = (int *)fchmodat(-2, v6, v4 & 0xFFF, (v4 >> 9) & 0x20);
    if ((_DWORD)result)
    {
      int v7 = *__error();
      if (a3)
      {
        else {
          uint64_t result = (int *)((BOOL (*)(uint64_t, int))boost::system::detail::generic_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::generic_cat_holder<void>::instance,  v7);
        }
        uint64_t v8 = 2LL;
        if ((_DWORD)result) {
          uint64_t v8 = 3LL;
        }
        *(_DWORD *)a3 = v7;
        *(_DWORD *)(a3 + 4) = 0;
        *(void *)(a3 + 8) = &boost::system::detail::generic_cat_holder<void>::instance;
        goto LABEL_25;
      }

      exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
      v12[0] = 0LL;
      else {
        BOOL v10 = ((BOOL (*)(uint64_t, int))boost::system::detail::generic_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::generic_cat_holder<void>::instance,  v7);
      }
      uint64_t v11 = 2LL;
      LODWORD(v12[0]) = v7;
      if (v10) {
        uint64_t v11 = 3LL;
      }
      v12[1] = &boost::system::detail::generic_cat_holder<void>::instance;
      v12[2] = v11;
      boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::permissions", v5, v12);
      goto LABEL_34;
    }
  }

  return result;
}

void sub_10016D9A0(_Unwind_Exception *a1)
{
}

void sub_10016D9B8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  p_p = (std::string *)a1;
  __int128 v28 = 0uLL;
  uint64_t v29 = 0LL;
  sub_10016F320(a1, &v26);
  else {
    std::string __dst = v26;
  }
  __int128 v25 = v27;
  else {
    std::string __p = *p_p;
  }
  while (1)
  {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (!size) {
      goto LABEL_13;
    }
    sub_10016B0B0((const char *)&__p, (uint64_t)&v28, (int *)&v20);
    if (LODWORD(v20.__r_.__value_.__l.__data_) != 1) {
      break;
    }
    sub_10016F550(&__p);
    sub_100171254(&__dst);
  }

  if (LODWORD(v20.__r_.__value_.__l.__data_))
  {
LABEL_13:
    utimbuf v9 = sub_10016FBD8();
    BOOL v10 = sub_10016FD3C();
    BOOL v11 = 0;
    memset(&v20, 0, sizeof(v20));
    while ((void)v25 != (void)v27 || *((void *)&v25 + 1) != *((void *)&v27 + 1))
    {
      sub_10016EC50(&v20, &__dst);
      BOOL v11 = v11
      sub_100170DB4(&__dst);
    }

    std::string::size_type v13 = __p.__r_.__value_.__s.__size_;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type v13 = __p.__r_.__value_.__l.__size_;
    }
    if (!v13) {
      goto LABEL_37;
    }
    sub_10016AA00(&__p, a2, &v28, &v19);
    std::string __p = v19;
    if ((v29 & 1) != 0 && (v29 != 1 || (_DWORD)v28))
    {
      if (!a3)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
        __int128 v17 = v28;
        uint64_t v18 = v29;
        boost::filesystem::filesystem_error::filesystem_error( exception,  "boost::filesystem::weakly_canonical",  &__p,  &v17);
      }

      *(_OWORD *)a3 = v28;
      *(void *)(a3 + 16) = v29;
    }

    else
    {
      std::string::size_type v14 = v20.__r_.__value_.__s.__size_;
      if ((v20.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        std::string::size_type v14 = v20.__r_.__value_.__l.__size_;
      }
      if (v14)
      {
        sub_10016EC50(&__p, &v20);
        if (v11)
        {
          p_p = &__p;
LABEL_37:
          sub_1001707A0((char *)p_p, a4);
          goto LABEL_40;
        }
      }

      *a4 = __p;
      a4 = &__p;
    }

    a4->__r_.__value_.__r.__words[0] = 0LL;
    a4->__r_.__value_.__l.__size_ = 0LL;
    a4->__r_.__value_.__l.__cap_ = 0LL;
LABEL_40:
    goto LABEL_42;
  }

  if (!a3)
  {
    int v15 = __cxa_allocate_exception(0x30uLL);
    __int128 v21 = v28;
    uint64_t v22 = v29;
    boost::filesystem::filesystem_error::filesystem_error(v15, "boost::filesystem::weakly_canonical", &__p, &v21);
  }

  *(_OWORD *)a3 = v28;
  *(void *)(a3 + 16) = v29;
  a4->__r_.__value_.__l.__size_ = 0LL;
  a4->__r_.__value_.__l.__cap_ = 0LL;
  a4->__r_.__value_.__r.__words[0] = 0LL;
LABEL_42:
}

void sub_10016DD04( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31, uint64_t a32, void *a33, uint64_t a34, int a35, __int16 a36, char a37, char a38)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  _Unwind_Resume(a1);
}

double sub_10016DDA4(uint64_t a1, void *a2)
{
  if (a2)
  {
    *a2 = 0LL;
    a2[1] = 0LL;
    a2[2] = 0LL;
  }

  __int128 v11 = 0uLL;
  uint64_t v12 = 0LL;
  sub_10016B318((const char *)a1, (uint64_t)&v11, (int *)&v9);
  if ((_DWORD)v9 != 1)
  {
    if ((_DWORD)v9 == 3)
    {
      else {
        stat v6 = *(const char **)a1;
      }
      if (rmdir(v6)) {
        goto LABEL_15;
      }
    }

    else
    {
      if ((_DWORD)v9)
      {
        else {
          uint64_t v5 = *(const char **)a1;
        }
        if (!unlink(v5)) {
          return result;
        }
LABEL_15:
        int v7 = *__error();
        if (v7 != 2 && v7 != 20) {
          sub_1001676C0(v7, a1, (uint64_t)a2, (uint64_t)"boost::filesystem::remove");
        }
        return result;
      }

      if (!a2)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
        __int128 v9 = v11;
        uint64_t v10 = v12;
        boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::remove", a1, &v9);
      }

      double result = *(double *)&v11;
      *(_OWORD *)a2 = v11;
      a2[2] = v12;
    }
  }

  return result;
}

void sub_10016DEE0(_Unwind_Exception *a1)
{
}

uint64_t sub_10016DEF4(std::string *a1, void *a2)
{
  if (a2)
  {
    *a2 = 0LL;
    a2[1] = 0LL;
    a2[2] = 0LL;
  }

  return sub_10016DF04(a1, a2);
}

uint64_t sub_10016DF04(std::string *a1, void *a2)
{
  __int128 v23 = 0uLL;
  uint64_t v24 = 0LL;
  sub_10016B318((const char *)a1, (uint64_t)&v23, (int *)&v22);
  uint64_t result = 0LL;
  int v5 = (int)v22;
  if ((_DWORD)v22 != 1)
  {
    if (!(_DWORD)v22)
    {
      if (!a2)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
        __int128 v20 = v23;
        uint64_t v21 = v24;
        boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::remove_all", a1, &v20);
      }

      *(_OWORD *)a2 = v23;
      a2[2] = v24;
      return -1LL;
    }

    if ((_DWORD)v22 == 3)
    {
      *(void *)&__int128 v23 = 0LL;
      sub_100168560((dirent **)&v23, a1, 0, a2);
      if (a2)
      {
        uint64_t v6 = a2[2];
        if ((v6 & 1) != 0 && (v6 != 1 || *(_DWORD *)a2))
        {
          sub_10016A418((unsigned int **)&v23);
          return -1LL;
        }
      }

      uint64_t v22 = 0LL;
      uint64_t v7 = v23;
      if ((void)v23)
      {
        uint64_t v8 = 0LL;
        __int128 v9 = 0LL;
        while (v7 && *(void *)(v7 + 48) || v9 && *((void *)v9 + 6))
        {
          v8 += sub_10016DF04(v7 + 8, a2);
          if (a2 && (uint64_t v10 = a2[2], (v10 & 1) != 0) && (v10 != 1 || *(_DWORD *)a2)
            || (sub_100168A50((dirent **)&v23, (uint64_t)a2), a2)
            && (uint64_t v11 = a2[2], (v11 & 1) != 0)
            && (v11 != 1 || *(_DWORD *)a2))
          {
            char v12 = 0;
            goto LABEL_29;
          }

          __int128 v9 = v22;
          uint64_t v7 = v23;
        }
      }

      else
      {
        uint64_t v8 = 0LL;
      }

      char v12 = 1;
LABEL_29:
      sub_10016A418(&v22);
      sub_10016A418((unsigned int **)&v23);
      if ((v12 & 1) == 0) {
        return -1LL;
      }
    }

    else
    {
      uint64_t v8 = 0LL;
    }

    if (v5 == 1) {
      goto LABEL_39;
    }
    if (v5 == 3)
    {
      if ((a1->__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v13 = (const char *)a1;
      }
      else {
        std::string::size_type v13 = (const char *)a1->__r_.__value_.__r.__words[0];
      }
      if (rmdir(v13))
      {
LABEL_36:
        std::string::size_type v14 = __error();
        uint64_t v15 = 0LL;
        int v16 = *v14;
        if (v16 == 2 || v16 == 20)
        {
LABEL_40:
          if (a2)
          {
LABEL_41:
            uint64_t v17 = a2[2];
            if ((v17 & 1) != 0 && (v17 != 1 || *(_DWORD *)a2)) {
              return -1LL;
            }
          }

          return v15 + v8;
        }

        sub_1001676C0(v16, (uint64_t)a1, (uint64_t)a2, (uint64_t)"boost::filesystem::remove");
LABEL_39:
        uint64_t v15 = 0LL;
        goto LABEL_40;
      }
    }

    else
    {
      if ((a1->__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v18 = (const char *)a1;
      }
      else {
        uint64_t v18 = (const char *)a1->__r_.__value_.__r.__words[0];
      }
      if (unlink(v18)) {
        goto LABEL_36;
      }
    }

    uint64_t v15 = 1LL;
    if (a2) {
      goto LABEL_41;
    }
    return v15 + v8;
  }

  return result;
}

void sub_10016E16C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17)
{
}

uint64_t sub_10016E1A0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t result = rename((const char *)a1, (const char *)a2);
  if ((_DWORD)result)
  {
    uint64_t result = *__error();
    if ((_DWORD)result) {
      return sub_1001677F4(result, v5, v4, (uint64_t)a3, (uint64_t)"boost::filesystem::rename");
    }
  }

  if (a3)
  {
    *a3 = 0LL;
    a3[1] = 0LL;
    a3[2] = 0LL;
  }

  return result;
}

uint64_t sub_10016E230(uint64_t a1, off_t a2, void *a3)
{
  uint64_t v4 = a1;
  if (a2 < 0)
  {
    LODWORD(result) = 27;
    return sub_1001676C0(result, v4, (uint64_t)a3, (uint64_t)"boost::filesystem::resize_file");
  }

  uint64_t result = truncate((const char *)a1, a2);
  if ((_DWORD)result)
  {
    uint64_t result = *__error();
    if ((_DWORD)result) {
      return sub_1001676C0(result, v4, (uint64_t)a3, (uint64_t)"boost::filesystem::resize_file");
    }
  }

  if (a3)
  {
    *a3 = 0LL;
    a3[1] = 0LL;
    a3[2] = 0LL;
  }

  return result;
}

uint64_t sub_10016E2B0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = a1;
  a3[1] = -1LL;
  a3[2] = -1LL;
  *a3 = -1LL;
  if (a2)
  {
    *a2 = 0LL;
    a2[1] = 0LL;
    a2[2] = 0LL;
  }

  uint64_t result = statfs((const char *)a1, &v9);
  if ((_DWORD)result)
  {
    uint64_t result = *__error();
    if ((_DWORD)result) {
      return sub_1001676C0(result, v4, (uint64_t)a2, (uint64_t)"boost::filesystem::space");
    }
  }

  if (a2)
  {
    *a2 = 0LL;
    a2[1] = 0LL;
    a2[2] = 0LL;
  }

  f_bstd::string::size_type size = v9.f_bsize;
  uint64_t v8 = v9.f_bfree * v9.f_bsize;
  *a3 = v9.f_blocks * v9.f_bsize;
  a3[1] = v8;
  a3[2] = v9.f_bavail * f_bsize;
  return result;
}

void sub_10016E394(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1)
  {
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
  }

  uint64_t v4 = getenv("TMPDIR");
  if (!v4)
  {
    uint64_t v4 = getenv("TMP");
    if (!v4)
    {
      uint64_t v4 = getenv("TEMP");
      if (!v4) {
        uint64_t v4 = getenv("TEMPDIR");
      }
    }
  }

  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = "/tmp";
  }
  sub_10000AC00(__p, v5);
  uint64_t v6 = (void *)HIBYTE(v10);
  if (v10 < 0) {
    uint64_t v6 = __p[1];
  }
  if (!v6) {
    goto LABEL_20;
  }
  sub_10016B0B0((const char *)__p, (uint64_t)a1, &v8);
  if (!a1 || (uint64_t v7 = a1[2], (v7 & 1) == 0) || v7 == 1 && !*(_DWORD *)a1)
  {
    if (v8 == 3)
    {
LABEL_18:
      *(_OWORD *)a2 = *(_OWORD *)__p;
      *(void *)(a2 + 16) = v10;
      return;
    }

void sub_10016E4B4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10016E4D4(std::string *a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type size = a1->__r_.__value_.__s.__size_;
  unsigned __int8 v5 = size;
  if ((size & 0x80u) != 0LL) {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    sub_10016F8B8(a1);
    if (!v6)
    {
      sub_10016C1E0(0LL, &v8);
      sub_10016EC50(&v8, a1);
      *(_OWORD *)a2 = *(_OWORD *)&v8.__r_.__value_.__l.__data_;
      std::string::size_type cap = v8.__r_.__value_.__l.__cap_;
      goto LABEL_10;
    }

    unsigned __int8 v5 = a1->__r_.__value_.__s.__size_;
  }

  if ((v5 & 0x80) != 0)
  {
    sub_100168054((_BYTE *)a2, a1->__r_.__value_.__l.__data_, a1->__r_.__value_.__l.__size_);
    return;
  }

  *(_OWORD *)a2 = *(_OWORD *)&a1->__r_.__value_.__l.__data_;
  std::string::size_type cap = a1->__r_.__value_.__l.__cap_;
LABEL_10:
  *(void *)(a2 + 16) = cap;
}

void sub_10016E578( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10016E594@<X0>(_BYTE *a1@<X0>, void *a2@<X8>)
{
  int v2 = a1;
  unint64_t v4 = sub_10016FBE4(a1);
  if ((char)v2[23] < 0)
  {
    uint64_t v6 = v2;
    int v2 = *(_BYTE **)v2;
    uint64_t v5 = *((void *)v6 + 1);
  }

  else
  {
    uint64_t v5 = v2[23];
  }

  return sub_10016A2F4(a2, &v2[v5 - v4], &v2[v5], v4);
}

ssize_t sub_10016E5E0(int a1, int a2, uint64_t a3, unint64_t a4)
{
  if (a3 == -1) {
    unint64_t v6 = -1LL;
  }
  else {
    unint64_t v6 = a3 + 1;
  }
  if (v6 <= a4) {
    unint64_t v6 = a4;
  }
  if (v6 <= 0x2000) {
    unint64_t v6 = 0x2000LL;
  }
  if (v6 >= 0x40000) {
    LODWORD(v6) = 0x40000;
  }
  unsigned int v7 = (v6 - 1) | ((v6 - 1) >> 1) | ((((_DWORD)v6 - 1) | ((v6 - 1) >> 1)) >> 2);
  unsigned int v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
  size_t v9 = (v8 | HIWORD(v8)) + 1;
  uint64_t v10 = (char *)operator new[](v9, &std::nothrow);
  if (!v10) {
    return sub_10016E714(a1, a2, v14, 0x2000uLL);
  }
  uint64_t v11 = v10;
  ssize_t v12 = sub_10016E714(a1, a2, v10, v9);
  operator delete[](v11);
  return v12;
}

void sub_10016E6F8(_Unwind_Exception *exception_object)
{
}

ssize_t sub_10016E714(int a1, int a2, char *a3, size_t a4)
{
  ssize_t result = read(a1, a3, a4);
  if (result)
  {
    ssize_t v9 = result;
    do
    {
      if ((v9 & 0x8000000000000000LL) == 0)
      {
        ssize_t v10 = 0LL;
        while (1)
        {
          ssize_t v11 = write(a2, &a3[v10], v9 - v10);
          if (v11 < 0)
          {
            ssize_t result = *__error();
            if ((_DWORD)result != 4) {
              return result;
            }
          }

          else
          {
            v10 += v11;
          }

          if (v10 >= v9) {
            goto LABEL_12;
          }
        }
      }

      ssize_t result = *__error();
      if ((_DWORD)result != 4) {
        break;
      }
LABEL_12:
      ssize_t result = read(a1, a3, a4);
      ssize_t v9 = result;
    }

    while (result);
  }

  return result;
}

void sub_10016E7C8( std::string *this, std::string::value_type *a2, std::string::value_type *a3, std::string::size_type a4)
{
  if (((char)this->__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    unsigned int v8 = this;
    if (a4 <= 0x16) {
      goto LABEL_11;
    }
    std::string::size_type size = this->__r_.__value_.__s.__size_;
    std::string::size_type v10 = 22LL;
    goto LABEL_6;
  }

  std::string::size_type cap = this->__r_.__value_.__l.__cap_;
  std::string::size_type v10 = (cap & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 < a4)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
LABEL_6:
    std::string::__grow_by(this, v10, a4 - v10, size, 0LL, size, 0LL);
    this->__r_.__value_.__l.__size_ = 0LL;
    LOBYTE(v12) = this->__r_.__value_.__s.__size_;
    goto LABEL_8;
  }

  std::string::size_type v12 = HIBYTE(cap);
LABEL_8:
  unsigned int v8 = this;
  if ((v12 & 0x80) != 0) {
    unsigned int v8 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
LABEL_11:
  while (a2 != a3)
  {
    std::string::value_type v13 = *a2++;
    v8->__r_.__value_.__s.__data_[0] = v13;
    unsigned int v8 = (std::string *)((char *)v8 + 1);
  }

  v8->__r_.__value_.__s.__data_[0] = 0;
  else {
    this->__r_.__value_.__s.__size_ = a4 & 0x7F;
  }
}

void sub_10016E894(std::string *a1, std::string *a2)
{
  unint64_t size = a2->__r_.__value_.__s.__size_;
  char v3 = size;
  unint64_t v4 = a2->__r_.__value_.__l.__size_;
  if ((size & 0x80u) == 0LL) {
    std::string::size_type v5 = a2->__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v5 = a2->__r_.__value_.__l.__size_;
  }
  if (v5)
  {
    if (a1 == a2)
    {
      if ((char)size < 0)
      {
        sub_100168054(__p, a2->__r_.__value_.__l.__data_, v4);
      }

      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
        std::string::size_type cap = a2->__r_.__value_.__l.__cap_;
      }

      sub_10016E894(a2, __p);
      if (SHIBYTE(cap) < 0) {
        operator delete(__p[0]);
      }
    }

    else
    {
      unsigned int v8 = (const std::string::value_type *)a2->__r_.__value_.__r.__words[0];
      if ((size & 0x80u) == 0LL) {
        ssize_t v9 = a2;
      }
      else {
        ssize_t v9 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      if (v9->__r_.__value_.__s.__data_[0] != 47)
      {
        sub_10016E988(a1);
        unint64_t size = a2->__r_.__value_.__s.__size_;
        unsigned int v8 = (const std::string::value_type *)a2->__r_.__value_.__r.__words[0];
        unint64_t v4 = a2->__r_.__value_.__l.__size_;
        char v3 = a2->__r_.__value_.__s.__size_;
      }

      if (v3 >= 0) {
        std::string::size_type v10 = (const std::string::value_type *)a2;
      }
      else {
        std::string::size_type v10 = v8;
      }
      if (v3 >= 0) {
        unint64_t v4 = size;
      }
      std::string::append(a1, v10, v4);
    }
  }

void sub_10016E96C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string::size_type sub_10016E988(std::string *a1)
{
  if (((char)a1->__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    std::string::size_type size = a1->__r_.__value_.__s.__size_;
    if (!a1->__r_.__value_.__s.__size_) {
      return 0LL;
    }
    int v2 = (char *)a1 + size;
LABEL_6:
    if (*(v2 - 1) != 47)
    {
      std::string::push_back(a1, 47);
      return size;
    }

    return 0LL;
  }

  std::string::size_type size = a1->__r_.__value_.__l.__size_;
  if (size)
  {
    int v2 = (char *)(a1->__r_.__value_.__r.__words[0] + size);
    goto LABEL_6;
  }

  return size;
}

void sub_10016E9E8(std::string *this, char *a2, char *a3)
{
  if (a2 == a3) {
    return;
  }
  if (((char)this->__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    if (this <= (std::string *)a2)
    {
      std::string::size_type size = this->__r_.__value_.__s.__size_;
      unsigned int v7 = this;
      goto LABEL_7;
    }

void sub_10016EAC0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_10016EADC(std::string *this, char *a2, char *a3)
{
  unint64_t v4 = a2;
  LODWORD(v6) = (char)this->__r_.__value_.__s.__size_;
  unint64_t v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    std::string::size_type cap = this->__r_.__value_.__l.__cap_;
    std::string::size_type v9 = (cap & 0x7FFFFFFFFFFFFFFFLL) - 1;
    std::string::size_type v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::size_type v6 = HIBYTE(cap);
  }

  else
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__s.__size_;
    std::string::size_type v9 = 22LL;
    std::string::size_type v10 = this;
  }

  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0LL, 0LL);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = this->__r_.__value_.__s.__size_;
    }

    std::string::size_type v14 = this;
    if ((v6 & 0x80) != 0) {
      std::string::size_type v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    for (size_t i = (char *)v14 + size; v4 != a3; ++i)
    {
      char v16 = *v4++;
      _BYTE *i = v16;
    }

    _BYTE *i = 0;
    std::string::size_type v17 = v7 + size;
    else {
      this->__r_.__value_.__s.__size_ = v17 & 0x7F;
    }
  }

  else
  {
    sub_10016A2F4(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v12 = __p;
    }
    else {
      std::string::size_type v12 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v13 = v20;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(this, (const std::string::value_type *)v12, v13);
  }

  return this;
}

void sub_10016EC34( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10016EC50(std::string *a1, const std::string *a2)
{
  int size = (char)a2->__r_.__value_.__s.__size_;
  if (size >= 0) {
    unint64_t v4 = a2->__r_.__value_.__s.__size_;
  }
  else {
    unint64_t v4 = a2->__r_.__value_.__l.__size_;
  }
  if (v4)
  {
    if (a1 == a2)
    {
      if (size < 0)
      {
        sub_100168054(__n, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
      }

      else
      {
        *(_OWORD *)size_t __n = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
        std::string::size_type cap = a2->__r_.__value_.__l.__cap_;
      }

      sub_10016EC50(a2, __n);
      if (SHIBYTE(cap) < 0) {
        operator delete((void *)__n[0]);
      }
    }

    else
    {
      if (size >= 0) {
        std::string::size_type v6 = (std::string *)a2;
      }
      else {
        std::string::size_type v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      __n[0] = 0LL;
      if (sub_10016EE08(v6, v4, __n) < v4)
      {
LABEL_23:
        std::string::operator=(a1, a2);
        return;
      }

      unint64_t v18 = 0LL;
      if ((char)a1->__r_.__value_.__s.__size_ < 0)
      {
        unsigned int v8 = (std::string *)a1->__r_.__value_.__r.__words[0];
        unint64_t v7 = a1->__r_.__value_.__l.__size_;
      }

      else
      {
        unint64_t v7 = a1->__r_.__value_.__s.__size_;
        unsigned int v8 = a1;
      }

      sub_10016EE08(v8, v7, &v18);
      size_t v9 = __n[0];
      if (__n[0])
      {
        if (__n[0] != v18) {
          goto LABEL_23;
        }
        std::string::size_type v10 = a1;
        int v11 = (char)a2->__r_.__value_.__s.__size_;
        std::string::size_type v12 = a2->__r_.__value_.__r.__words[0];
        std::string::size_type v13 = v11 >= 0 ? a2 : (const std::string *)a2->__r_.__value_.__r.__words[0];
        if (memcmp(v10, v13, __n[0])) {
          goto LABEL_23;
        }
      }

      else
      {
        LOBYTE(v11) = a2->__r_.__value_.__s.__size_;
        std::string::size_type v12 = a2->__r_.__value_.__r.__words[0];
      }

      if ((v11 & 0x80u) == 0) {
        std::string::size_type v14 = a2;
      }
      else {
        std::string::size_type v14 = (const std::string *)v12;
      }
      uint64_t v15 = (char *)v14 + v9;
      if (v14->__r_.__value_.__s.__data_[v9] != 47) {
        sub_10016E988(a1);
      }
      std::string::append(a1, v15, v4 - v9);
    }
  }

  else if (sub_10016FBE4(a1))
  {
    std::string::push_back(a1, 47);
  }

void sub_10016EDEC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_10016EE08(_BYTE *__s, unint64_t a2, unint64_t *a3)
{
  *a3 = 0LL;
  if (a2 && *__s == 47)
  {
    if (a2 < 2 || __s[1] != 47) {
      return 0LL;
    }
    size_t v4 = a2 - 2;
    if (a2 != 2)
    {
      std::string::size_type v5 = __s + 2;
      if (__s[2] == 47) {
        return 0LL;
      }
      unint64_t v7 = memchr(v5, 47, v4);
      size_t v8 = v7 - v5;
      if (!v7) {
        size_t v8 = v4;
      }
      a2 = v8 + 2;
    }

    *a3 = a2;
  }

  return a2;
}

void sub_10016EE9C(std::string *a1, std::string::value_type *__s, std::string::value_type *a3)
{
  if (__s == a3)
  {
    if (sub_10016FBE4(a1)) {
      std::string::push_back(a1, 47);
    }
    return;
  }

  if ((char)a1->__r_.__value_.__s.__size_ < 0)
  {
    unint64_t v7 = (std::string *)a1->__r_.__value_.__r.__words[0];
    if (a1->__r_.__value_.__r.__words[0] <= (unint64_t)__s)
    {
      std::string::size_type size = a1->__r_.__value_.__l.__size_;
      goto LABEL_9;
    }

void sub_10016F030( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10016F04C(unint64_t a1, unint64_t a2)
{
  void v10[3] = a1;
  else {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  }
  v10[4] = v4;
  sub_10016F208(a2, &__p);
  memset(v8, 0, 24);
  void v8[3] = a2;
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0LL) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  v8[4] = v5;
  uint64_t v6 = sub_10016F108(&v11, (uint64_t)v10, &__p, (uint64_t)v8);
  return v6;
}

uint64_t sub_10016F108(std::string *a1, uint64_t a2, std::string *a3, uint64_t a4)
{
  std::string::pointer data = a1[1].__r_.__value_.__l.__data_;
  std::string::size_type size = a1[1].__r_.__value_.__l.__size_;
  unint64_t v8 = *(char **)(a2 + 24);
  std::string::size_type v9 = *(void *)(a2 + 32);
  if (data == v8 && size == v9)
  {
LABEL_16:
    unint64_t v8 = data;
    std::string::size_type v9 = size;
  }

  else if (a3[1].__r_.__value_.__r.__words[0] != *(void *)(a4 + 24) {
         || a3[1].__r_.__value_.__l.__size_ != *(void *)(a4 + 32))
  }
  {
    while ((sub_100170B24(a1, (void **)&a3->__r_.__value_.__l.__data_) & 0x80) == 0)
    {
      sub_100170B5C(a1);
      sub_100170B5C(a3);
      std::string::pointer data = a1[1].__r_.__value_.__l.__data_;
      std::string::size_type size = a1[1].__r_.__value_.__l.__size_;
      unint64_t v8 = *(char **)(a2 + 24);
      std::string::size_type v9 = *(void *)(a2 + 32);
      if (data == v8 && size == v9) {
        goto LABEL_16;
      }
      if (a3[1].__r_.__value_.__r.__words[0] == *(void *)(a4 + 24)
        && a3[1].__r_.__value_.__l.__size_ == *(void *)(a4 + 32))
      {
        goto LABEL_17;
      }
    }

    return 0xFFFFFFFFLL;
  }

unint64_t sub_10016F208@<X0>(unint64_t result@<X0>, std::string *a2@<X8>)
{
  int v2 = (const std::string *)result;
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  a2[1].__r_.__value_.__r.__words[0] = result;
  int v4 = *(char *)(result + 23);
  uint64_t v5 = *(void *)(result + 8);
  if (v4 >= 0) {
    unint64_t v6 = *(unsigned __int8 *)(result + 23);
  }
  else {
    unint64_t v6 = *(void *)(result + 8);
  }
  a2[1].__r_.__value_.__l.__size_ = 0LL;
  if (v4 < 0)
  {
    if (!v5) {
      return result;
    }
    v14.__r_.__value_.__r.__words[0] = 0LL;
    ssize_t result = *(void *)result;
  }

  else
  {
    if (!v4) {
      return result;
    }
    v14.__r_.__value_.__r.__words[0] = 0LL;
  }

  ssize_t result = sub_10016EE08((_BYTE *)result, v6, (unint64_t *)&v14);
  std::string::size_type v7 = v14.__r_.__value_.__r.__words[0];
  if (v14.__r_.__value_.__r.__words[0]) {
    goto LABEL_10;
  }
  std::string::size_type v8 = result;
  if (result < v6)
  {
    a2[1].__r_.__value_.__l.__size_ = result;
    std::string::size_type v7 = 1LL;
    goto LABEL_13;
  }

  int size = (char)v2->__r_.__value_.__s.__size_;
  BOOL v10 = size < 0;
  if (size >= 0) {
    std::string v11 = v2;
  }
  else {
    std::string v11 = (const std::string *)v2->__r_.__value_.__r.__words[0];
  }
  if (v10) {
    std::string::size_type v7 = v2->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type v7 = v2->__r_.__value_.__s.__size_;
  }
  if (!v7)
  {
LABEL_25:
    if (!v7) {
      return result;
    }
LABEL_10:
    std::string::size_type v8 = 0LL;
LABEL_13:
    ssize_t result = (unint64_t)std::string::basic_string(&v14, v2, v8, v7, (std::allocator<char> *)&v15);
    *a2 = v14;
    return result;
  }

  std::string::size_type v12 = 0LL;
  while (v11->__r_.__value_.__s.__data_[v12] != 47)
  {
    if (v7 == ++v12) {
      goto LABEL_25;
    }
  }

  if (v12 == -1LL) {
    std::string::size_type v13 = v7;
  }
  else {
    std::string::size_type v13 = v12;
  }
  if (v7 != v12) {
    std::string::size_type v7 = v13;
  }
  if (v7) {
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_10016F320@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  a2[3] = result;
  else {
    uint64_t v2 = *(unsigned __int8 *)(result + 23);
  }
  a2[4] = v2;
  return result;
}

uint64_t sub_10016F344(unint64_t a1, unint64_t a2)
{
  void v10[3] = a1;
  else {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  }
  v10[4] = v4;
  sub_10016F208(a2, &__p);
  memset(v8, 0, 24);
  void v8[3] = a2;
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0LL) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  v8[4] = v5;
  uint64_t v6 = sub_10016F400(&v11, (uint64_t)v10, &__p, (uint64_t)v8);
  return v6;
}

uint64_t sub_10016F400(std::string *a1, uint64_t a2, std::string *a3, uint64_t a4)
{
  std::string::pointer data = a1[1].__r_.__value_.__l.__data_;
  std::string::size_type size = a1[1].__r_.__value_.__l.__size_;
  std::string::size_type v8 = *(char **)(a2 + 24);
  std::string::size_type v9 = *(void *)(a2 + 32);
  if (data == v8 && size == v9)
  {
LABEL_16:
    std::string::size_type v8 = data;
    std::string::size_type v9 = size;
  }

  else if (a3[1].__r_.__value_.__r.__words[0] != *(void *)(a4 + 24) {
         || a3[1].__r_.__value_.__l.__size_ != *(void *)(a4 + 32))
  }
  {
    while ((sub_100170B24(a1, (void **)&a3->__r_.__value_.__l.__data_) & 0x80) == 0)
    {
      sub_100170DB4(a1);
      sub_100170DB4(a3);
      std::string::pointer data = a1[1].__r_.__value_.__l.__data_;
      std::string::size_type size = a1[1].__r_.__value_.__l.__size_;
      std::string::size_type v8 = *(char **)(a2 + 24);
      std::string::size_type v9 = *(void *)(a2 + 32);
      if (data == v8 && size == v9) {
        goto LABEL_16;
      }
      if (a3[1].__r_.__value_.__r.__words[0] == *(void *)(a4 + 24)
        && a3[1].__r_.__value_.__l.__size_ == *(void *)(a4 + 32))
      {
        goto LABEL_17;
      }
    }

    return 0xFFFFFFFFLL;
  }

std::string *sub_10016F500(std::string *result, std::string::size_type a2)
{
  if (a2)
  {
    std::string::size_type v2 = (char)result->__r_.__value_.__s.__size_ < 0
       ? result->__r_.__value_.__l.__size_
       : result->__r_.__value_.__s.__size_;
    if (v2 > a2)
    {
      std::string::size_type v3 = a2 + 1;
      if ((result->__r_.__value_.__s.__size_ & 0x80) != 0) {
        int v4 = *(unsigned __int8 *)(result->__r_.__value_.__r.__words[0] + v3);
      }
      else {
        int v4 = result->__r_.__value_.__s.__data_[v3];
      }
      if (v4 == 47) {
        return std::string::erase(result, a2, 1uLL);
      }
    }
  }

  return result;
}

std::string *sub_10016F550(std::string *a1)
{
  std::string::size_type v2 = sub_10016F5A8(a1);
  if ((char)a1->__r_.__value_.__s.__size_ < 0)
  {
    int v4 = (std::string *)a1->__r_.__value_.__r.__words[0];
    std::string::size_type v3 = (char *)(a1->__r_.__value_.__r.__words[0] + a1->__r_.__value_.__l.__size_);
  }

  else
  {
    std::string::size_type v3 = (char *)a1 + a1->__r_.__value_.__s.__size_;
    int v4 = a1;
  }

  std::string::erase(a1, v2, v3 - (char *)v4 - v2);
  return a1;
}

unint64_t sub_10016F5A8(_BYTE *a1)
{
  uint64_t v1 = a1;
  if ((char)a1[23] < 0)
  {
    a1 = *(_BYTE **)a1;
    unint64_t v2 = *((void *)v1 + 1);
  }

  else
  {
    unint64_t v2 = a1[23];
  }

  unint64_t v16 = 0LL;
  unint64_t v3 = sub_10016EE08(a1, v2, &v16);
  int v4 = (char)v1[23];
  if (v2 >= v16) {
    unint64_t v5 = v16;
  }
  else {
    unint64_t v5 = v2;
  }
  if (v4 >= 0) {
    uint64_t v6 = v1;
  }
  else {
    uint64_t v6 = *(_BYTE **)v1;
  }
  std::string::size_type v7 = v6 - 1;
  unint64_t v8 = v2;
  while (v8 > v16)
  {
    unint64_t v9 = v8 - 1;
    int v10 = v7[v8--];
    if (v10 == 47)
    {
      unint64_t v5 = v9 + 1;
      break;
    }
  }

  if (v5 >= v16) {
    unint64_t v11 = v16;
  }
  else {
    unint64_t v11 = v5;
  }
  if (v4 >= 0) {
    std::string::size_type v12 = v1;
  }
  else {
    std::string::size_type v12 = *(_BYTE **)v1;
  }
  std::string::size_type v13 = v12 - 1;
  unint64_t v14 = v5;
  while (v14 > v16)
  {
    if (v13[v14] != 47) {
      return v14;
    }
    if (v3 == --v14)
    {
      if (v2 == v5) {
        return v3;
      }
      else {
        return v3 + 1;
      }
    }
  }

  if (v2 == v5) {
    return 0LL;
  }
  else {
    return v11;
  }
}

std::string *sub_10016F688(std::string *this)
{
  uint64_t size = this->__r_.__value_.__s.__size_;
  if ((char)this->__r_.__value_.__s.__size_ < 0)
  {
    std::string::size_type v3 = this->__r_.__value_.__l.__size_;
    if (!v3) {
      return this;
    }
  }

  else
  {
    if (!this->__r_.__value_.__s.__size_) {
      return this;
    }
    std::string::size_type v3 = this->__r_.__value_.__s.__size_;
  }

  std::string::size_type v4 = v3 - 1;
  if ((size & 0x80) != 0)
  {
    std::string::size_type v6 = this->__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(this->__r_.__value_.__r.__words[0] + v4) == 47)
    {
      unint64_t v5 = (char *)(v6 + this->__r_.__value_.__l.__size_);
      goto LABEL_10;
    }
  }

  else if (this->__r_.__value_.__s.__data_[v4] == 47)
  {
    unint64_t v5 = (char *)this + size;
    std::string::size_type v6 = (std::string::size_type)this;
LABEL_10:
    std::string::erase(this, (std::string::size_type)&v5[~v6], 1uLL);
  }

  return this;
}

std::string *sub_10016F714(std::string *a1, uint64_t a2)
{
  else {
    std::string::size_type size = a1->__r_.__value_.__s.__size_;
  }
  sub_10016FEE8(a1, &__p);
  std::string::size_type v5 = __p.__r_.__value_.__s.__size_;
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type v5 = __p.__r_.__value_.__l.__size_;
  }
  std::string::erase(a1, size - v5, 0xFFFFFFFFFFFFFFFFLL);
  int v6 = *(char *)(a2 + 23);
  if (v6 < 0)
  {
    if (!*(void *)(a2 + 8)) {
      return a1;
    }
    std::string::size_type v7 = *(_BYTE **)a2;
  }

  else
  {
    std::string::size_type v7 = (_BYTE *)a2;
    if (!*(_BYTE *)(a2 + 23)) {
      return a1;
    }
  }

  if (*v7 != 46)
  {
    std::string::push_back(a1, 46);
    LOBYTE(v6) = *(_BYTE *)(a2 + 23);
  }

  if ((v6 & 0x80u) == 0) {
    unint64_t v8 = (const std::string::value_type *)a2;
  }
  else {
    unint64_t v8 = *(const std::string::value_type **)a2;
  }
  if ((v6 & 0x80u) == 0) {
    std::string::size_type v9 = v6;
  }
  else {
    std::string::size_type v9 = *(void *)(a2 + 8);
  }
  std::string::append(a1, v8, v9);
  return a1;
}

void sub_10016F7F8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_10016F814(_BYTE *a1)
{
  unint64_t v4 = 0LL;
  if ((char)a1[23] < 0)
  {
    unint64_t v2 = a1;
    a1 = *(_BYTE **)a1;
    unint64_t v1 = *((void *)v2 + 1);
  }

  else
  {
    unint64_t v1 = a1[23];
  }

  sub_10016EE08(a1, v1, &v4);
  return v4;
}

unint64_t sub_10016F850(_BYTE *a1)
{
  unint64_t v1 = a1;
  unint64_t v6 = 0LL;
  if ((char)a1[23] < 0)
  {
    a1 = *(_BYTE **)a1;
    unint64_t v2 = *((void *)v1 + 1);
  }

  else
  {
    unint64_t v2 = a1[23];
  }

  unint64_t v3 = sub_10016EE08(a1, v2, &v6);
  else {
    unint64_t v4 = v1[23];
  }
  if (v3 < v4) {
    return v3 + 1;
  }
  else {
    return v6;
  }
}

unint64_t sub_10016F8B8(_BYTE *a1)
{
  unint64_t v1 = a1;
  if ((char)a1[23] < 0)
  {
    a1 = *(_BYTE **)a1;
    unint64_t v2 = *((void *)v1 + 1);
  }

  else
  {
    unint64_t v2 = a1[23];
  }

  return sub_10016EE08(a1, v2, &v4);
}

unint64_t sub_10016F918(_BYTE *a1)
{
  unint64_t v1 = a1;
  unint64_t v10 = 0LL;
  if ((char)a1[23] < 0)
  {
    a1 = *(_BYTE **)a1;
    unint64_t v2 = *((void *)v1 + 1);
  }

  else
  {
    unint64_t v2 = a1[23];
  }

  unint64_t v3 = sub_10016EE08(a1, v2, &v10);
  unint64_t result = v10;
  unint64_t v5 = v1[23];
  if ((char)v1[23] < 0)
  {
    unint64_t v6 = *((void *)v1 + 1);
    if (v3 >= v6) {
      return result;
    }
  }

  else
  {
    unint64_t v6 = v1[23];
    if (v3 >= v5) {
      return result;
    }
  }

  unint64_t v7 = v3 + 1;
  if (v6 <= v3 + 1) {
    unint64_t result = v3 + 1;
  }
  else {
    unint64_t result = v6;
  }
  while (v7 < v6)
  {
    unint64_t v8 = v1;
    if ((v5 & 0x80) != 0) {
      unint64_t v8 = *(_BYTE **)v1;
    }
    int v9 = v8[v7++];
    if (v9 != 47) {
      return v7 - 1;
    }
  }

  return result;
}

char *sub_10016F9D0@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = a1;
  if ((char)a1[23] < 0)
  {
    a1 = *(_BYTE **)a1;
    unint64_t v4 = *((void *)v2 + 1);
  }

  else
  {
    unint64_t v4 = a1[23];
  }

  unint64_t v26 = 0LL;
  unint64_t result = (char *)sub_10016EE08(a1, v4, &v26);
  if ((unint64_t)result >= v4)
  {
    LOBYTE(v7) = v2[23];
  }

  else
  {
    unint64_t v6 = (char *)(v4 - 1);
    int v7 = (char)v2[23];
    unint64_t v8 = v2;
    if (v7 < 0) {
      unint64_t v8 = *(_BYTE **)v2;
    }
    if (v6[(void)v8] == 47)
    {
      int v9 = *(_BYTE **)v2;
      if (v6 >= result) {
        unint64_t v6 = result;
      }
      if (v7 >= 0) {
        int v9 = v2;
      }
      unint64_t v10 = v9 - 2;
      unint64_t v11 = v4;
      while (1)
      {
        std::string::size_type v12 = (char *)(v11 - 1);
        int v13 = v10[v11--];
        if (v13 != 47) {
          goto LABEL_42;
        }
      }

      std::string::size_type v12 = v6;
LABEL_42:
      if (v12 == result)
      {
        unint64_t v4 = 1LL;
        goto LABEL_48;
      }
    }
  }

  if (v26 == v4)
  {
    unint64_t result = 0LL;
  }

  else
  {
    if (v4 >= v26) {
      unint64_t v14 = v26;
    }
    else {
      unint64_t v14 = v4;
    }
    if ((v7 & 0x80u) == 0) {
      char v15 = v2;
    }
    else {
      char v15 = *(_BYTE **)v2;
    }
    unint64_t v16 = v15 - 1;
    unint64_t v17 = v4;
    while (v17 > v26)
    {
      unint64_t v18 = v17 - 1;
      int v19 = v16[v17--];
      if (v19 == 47)
      {
        unint64_t v14 = v18 + 1;
        break;
      }
    }

    v4 -= v14;
    if (!v4)
    {
      if (v14 > v26)
      {
        unsigned __int8 v20 = (char *)(v14 - 1);
        uint64_t v21 = (v7 & 0x80u) == 0 ? v2 : *(_BYTE **)v2;
        if (v20[(void)v21] == 47)
        {
          if (v20 >= result) {
            unsigned __int8 v20 = result;
          }
          uint64_t v22 = v21 - 2;
          unint64_t v23 = v14;
          while (1)
          {
            uint64_t v24 = (char *)(v23 - 1);
            int v25 = v22[v23--];
            if (v25 != 47) {
              goto LABEL_45;
            }
          }

          uint64_t v24 = v20;
LABEL_45:
          if (v24 != result)
          {
            if (byte_1002D19CF < 0) {
              return (char *)sub_100168054( (_BYTE *)a2,  (void *)xmmword_1002D19B8,  *((unint64_t *)&xmmword_1002D19B8 + 1));
            }
            *(_OWORD *)a2 = xmmword_1002D19B8;
            *(void *)(a2 + 16) = unk_1002D19C8;
            return result;
          }
        }
      }

      unint64_t v4 = 0LL;
    }

    unint64_t result = (char *)v14;
  }

__int128 *sub_10016FBD8()
{
  return &xmmword_1002D19B8;
}

unint64_t sub_10016FBE4(_BYTE *a1)
{
  unint64_t v1 = a1;
  if ((char)a1[23] < 0)
  {
    a1 = *(_BYTE **)a1;
    unint64_t v2 = *((void *)v1 + 1);
  }

  else
  {
    unint64_t v2 = a1[23];
  }

  unint64_t v10 = 0LL;
  sub_10016EE08(a1, v2, &v10);
  if (v2 >= v10) {
    unint64_t v3 = v10;
  }
  else {
    unint64_t v3 = v2;
  }
  else {
    unint64_t v4 = *(_BYTE **)v1;
  }
  unint64_t v5 = v4 - 1;
  unint64_t v6 = v2;
  while (v6 > v10)
  {
    unint64_t v7 = v6 - 1;
    int v8 = v5[v6--];
    if (v8 == 47)
    {
      unint64_t v3 = v7 + 1;
      return v2 - v3;
    }
  }

  return v2 - v3;
}

std::string *sub_10016FC78@<X0>(_BYTE *a1@<X0>, std::string *a2@<X8>)
{
  unint64_t result = (std::string *)sub_10016F344((unint64_t)a2, (unint64_t)&xmmword_1002D19B8);
  if ((_DWORD)result)
  {
    unint64_t result = (std::string *)sub_10016F344((unint64_t)a2, (unint64_t)&stru_1002D19D0);
    if ((_DWORD)result)
    {
      uint64_t size = a2->__r_.__value_.__s.__size_;
      unint64_t v5 = (size & 0x80u) == 0LL ? a2 : (std::string *)a2->__r_.__value_.__r.__words[0];
      std::string::size_type v6 = (size & 0x80u) == 0LL ? a2->__r_.__value_.__s.__size_ : a2->__r_.__value_.__l.__size_;
      if (v6)
      {
        while (v6)
        {
          int v7 = *((unsigned __int8 *)&v5[-1].__r_.__value_.__r.__words[2] + v6-- + 7);
          if (v7 == 46)
          {
            if (v6 != -1LL)
            {
              int v8 = (char)size;
              int v9 = (char *)a2 + size;
              if (v8 < 0) {
                int v9 = (char *)(a2->__r_.__value_.__r.__words[0] + a2->__r_.__value_.__l.__size_);
              }
              return std::string::erase(a2, v6, v9 - (char *)v5 - v6);
            }

            return result;
          }
        }
      }
    }
  }

  return result;
}

void sub_10016FD20(_Unwind_Exception *exception_object)
{
}

void *sub_10016FD3C()
{
  return &unk_1002D19D0;
}

std::string *sub_10016FD48@<X0>(_BYTE *a1@<X0>, std::string *a2@<X8>)
{
  unint64_t result = (std::string *)sub_10016F344((unint64_t)a2, (unint64_t)&xmmword_1002D19B8);
  if ((_DWORD)result)
  {
    unint64_t result = (std::string *)sub_10016F344((unint64_t)a2, (unint64_t)&stru_1002D19D0);
    if ((_DWORD)result)
    {
      uint64_t size = a2->__r_.__value_.__s.__size_;
      unint64_t v5 = (size & 0x80u) == 0LL ? a2 : (std::string *)a2->__r_.__value_.__r.__words[0];
      std::string::size_type v6 = (size & 0x80u) == 0LL ? a2->__r_.__value_.__s.__size_ : a2->__r_.__value_.__l.__size_;
      if (v6)
      {
        while (v6)
        {
          int v7 = *((unsigned __int8 *)&v5[-1].__r_.__value_.__r.__words[2] + v6-- + 7);
          if (v7 == 46)
          {
            if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              int v8 = (char)size;
              int v9 = (char *)a2 + size;
              if (v8 < 0) {
                int v9 = (char *)(a2->__r_.__value_.__r.__words[0] + a2->__r_.__value_.__l.__size_);
              }
              return std::string::erase(a2, v6, v9 - (char *)v5 - v6);
            }

            return result;
          }
        }
      }
    }
  }

  return result;
}

void sub_10016FDF4(_Unwind_Exception *exception_object)
{
}

void sub_10016FE10(_BYTE *a1@<X0>, void *a2@<X8>)
{
  if (sub_10016F344((unint64_t)__p, (unint64_t)&xmmword_1002D19B8)
    && sub_10016F344((unint64_t)__p, (unint64_t)&stru_1002D19D0))
  {
    unint64_t v3 = v7;
    if ((v7 & 0x80u) == 0) {
      unint64_t v4 = __p;
    }
    else {
      unint64_t v4 = (void **)__p[0];
    }
    if ((v7 & 0x80u) != 0) {
      unint64_t v3 = (unint64_t)__p[1];
    }
    if (v3)
    {
      while (v3)
      {
        int v5 = *((unsigned __int8 *)v4 + --v3);
        if (v5 == 46)
        {
          if (v3 == -1LL) {
            break;
          }
          sub_10000AC00(a2, (char *)v4 + v3);
          goto LABEL_14;
        }
      }
    }
  }

  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
LABEL_14:
}

void sub_10016FECC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10016FEE8(_BYTE *a1@<X0>, std::string *a2@<X8>)
{
  unint64_t v2 = a1;
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  if ((char)a1[23] < 0)
  {
    a1 = *(_BYTE **)a1;
    unint64_t v4 = *((void *)v2 + 1);
  }

  else
  {
    unint64_t v4 = a1[23];
  }

  unint64_t v16 = 0LL;
  sub_10016EE08(a1, v4, &v16);
  int v5 = (char)v2[23];
  if (v4 >= v16) {
    unint64_t v6 = v16;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v5 >= 0) {
    unsigned __int8 v7 = v2;
  }
  else {
    unsigned __int8 v7 = *(_BYTE **)v2;
  }
  int v8 = v7 - 1;
  unint64_t v9 = v4;
  while (v9 > v16)
  {
    unint64_t v10 = v9 - 1;
    int v11 = v8[v9--];
    if (v11 == 47)
    {
      unint64_t v6 = v10 + 1;
      break;
    }
  }

  unint64_t v12 = v4 - v6;
  if (v4 != v6)
  {
    int v13 = v5 >= 0 ? v2 : *(_BYTE **)v2;
    if (v13[v6] != 46 || v12 != 1 && (v12 != 2 || v13[v6 + 1] != 46))
    {
      uint64_t v14 = 0LL;
      while (v4 + v14 > v6)
      {
        int v15 = v13[v4 - 1 + v14--];
        if (v15 == 46)
        {
          if (v4 + v14 > v6) {
            sub_10016E7C8(a2, &v13[v4 + v14], &v13[v4], -v14);
          }
          return;
        }
      }
    }
  }

void sub_100170014(_Unwind_Exception *exception_object)
{
}

void sub_100170030(unint64_t a1@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  else {
    unint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  }
  sub_10016F208(a2, &v27);
  else {
    unint64_t v7 = *(void *)(a2 + 8);
  }
  int size = (char)v29.__r_.__value_.__s.__size_;
  else {
    std::string __dst = v29;
  }
  __int128 v22 = v30;
  int v9 = (char)v27.__r_.__value_.__s.__size_;
  else {
    std::string __p = v27;
  }
  __int128 v20 = v28;
  while (v22 != __PAIR128__(v6, a1))
  {
    BOOL v10 = (void)v20 == a2 && *((void *)&v20 + 1) == v7;
    sub_100170DB4(&__dst);
    sub_100170DB4(&__p);
  }

  sub_100171634((char *)&v23, (__int128 *)&__dst, (__int128 *)&__p);
  if (v24 == v30 && v26 == v28)
  {
    a3->__r_.__value_.__r.__words[0] = 0LL;
    a3->__r_.__value_.__l.__size_ = 0LL;
    a3->__r_.__value_.__l.__cap_ = 0LL;
    goto LABEL_68;
  }

  if (v24 == __PAIR128__(v6, a1) && v26 == __PAIR128__(v7, a2))
  {
    if ((byte_1002D19CF & 0x80000000) == 0)
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = xmmword_1002D19B8;
      std::string::size_type v11 = unk_1002D19C8;
LABEL_66:
      a3->__r_.__value_.__l.__cap_ = v11;
      goto LABEL_68;
    }

void sub_1001703E0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30)
{
  if (v30 < 0) {
    operator delete(*(void **)(v31 - 176));
  }
  if (a11 < 0) {
    operator delete(*(void **)(v31 - 136));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100170494(uint64_t a1)
{
  return a1;
}

void sub_1001704D4(char *__s@<X0>, std::string *a2@<X8>)
{
  unint64_t v2 = __s;
  if (__s[23] < 0)
  {
    unint64_t v2 = *(char **)__s;
    unint64_t v4 = *((void *)__s + 1);
  }

  else
  {
    unint64_t v4 = __s[23];
  }

  unint64_t v26 = 0LL;
  unint64_t v5 = sub_10016EE08(v2, v4, &v26);
  unint64_t v6 = v26;
  sub_10016A2F4(a2, v2, &v2[v26], v26);
  if (v5 < v4)
  {
    std::string::push_back(a2, 47);
    unint64_t v6 = v5 + 1;
  }

  if (v6 >= v4) {
    return;
  }
  unint64_t v7 = v6;
  while (v2[v7] == 47)
  {
    if (v4 == ++v7) {
      return;
    }
  }

  while (1)
  {
    int v13 = &v2[v7];
    std::string::size_type v14 = v4 - v7;
    uint64_t v15 = memchr(&v2[v7], 47, v4 - v7);
    if (v15) {
      std::string::size_type v14 = v15 - v13;
    }
    if (v14 != 2)
    {
      if (v14 == 1 && *v13 == 46)
      {
        int v16 = 1;
        goto LABEL_57;
      }

      goto LABEL_55;
    }

    if (*v13 == 46 && v2[v7 + 1] == 46)
    {
      unint64_t size = a2->__r_.__value_.__s.__size_;
      if ((char)a2->__r_.__value_.__s.__size_ < 0)
      {
        unint64_t v18 = a2->__r_.__value_.__l.__size_;
        if (v18 <= v6) {
          goto LABEL_55;
        }
      }

      else
      {
        unint64_t v18 = a2->__r_.__value_.__s.__size_;
        if (v6 >= size) {
          goto LABEL_55;
        }
      }

      uint64_t v12 = (std::string *)a2->__r_.__value_.__r.__words[0];
      if (v18 >= v6) {
        std::string::size_type v9 = v6;
      }
      else {
        std::string::size_type v9 = v18;
      }
      if ((size & 0x80u) == 0LL) {
        int v19 = a2;
      }
      else {
        int v19 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      p_unint64_t size = (std::string::__short::$654DBF3D633A6121C0B197AC38B89F76 *)&v19[-1].__r_.__value_.__s.__size_;
      unint64_t v21 = v18;
      while (v21 > v6)
      {
        unint64_t v22 = v21 - 1;
        int v23 = p_size[v21--].__size_;
        if (v23 == 47)
        {
          std::string::size_type v9 = v22 + 1;
          break;
        }
      }

      if (v18 - v9 != 2
        || ((size & 0x80u) == 0LL ? (__int128 v24 = a2) : (__int128 v24 = (std::string *)a2->__r_.__value_.__r.__words[0]),
            v24->__r_.__value_.__s.__data_[v9] != 46 || v24->__r_.__value_.__s.__data_[v9 + 1] != 46))
      {
        if (v9 > v6)
        {
          int v8 = (size & 0x80u) == 0LL ? a2 : (std::string *)a2->__r_.__value_.__r.__words[0];
          if (v8->__r_.__value_.__s.__data_[v9 - 1] == 47) {
            --v9;
          }
        }

        int v10 = (char)size;
        std::string::size_type v11 = (char *)a2 + size;
        if (v10 >= 0) {
          uint64_t v12 = a2;
        }
        else {
          std::string::size_type v11 = (char *)v12 + a2->__r_.__value_.__l.__size_;
        }
        std::string::erase(a2, v9, v11 - ((char *)v12 + v9));
        goto LABEL_56;
      }
    }

void sub_100170778(_Unwind_Exception *exception_object)
{
}

void sub_1001707A0(char *__s@<X0>, std::string *a2@<X8>)
{
  unint64_t v2 = __s;
  if (__s[23] < 0)
  {
    unint64_t v2 = *(char **)__s;
    unint64_t v4 = *((void *)__s + 1);
  }

  else
  {
    unint64_t v4 = __s[23];
  }

  unint64_t v33 = 0LL;
  unint64_t v5 = sub_10016EE08(v2, v4, &v33);
  unint64_t v6 = v33;
  sub_10016A2F4(a2, v2, &v2[v33], v33);
  if (v5 < v4)
  {
    std::string::push_back(a2, 47);
    unint64_t v6 = v5 + 1;
  }

  if (v6 >= v4) {
    return;
  }
  unint64_t v7 = v6;
  while (v2[v7] == 47)
  {
    if (v4 == ++v7) {
      return;
    }
  }

  do
  {
    std::string::size_type v14 = &v2[v7];
    std::string::size_type v15 = v4 - v7;
    int v16 = memchr(&v2[v7], 47, v4 - v7);
    if (v16) {
      std::string::size_type v15 = v16 - v14;
    }
    unint64_t v8 = v15 + v7;
    if (v15 == 2)
    {
      if (*v14 != 46 || v2[v7 + 1] != 46) {
        goto LABEL_56;
      }
      unint64_t size = a2->__r_.__value_.__s.__size_;
      if ((char)a2->__r_.__value_.__s.__size_ < 0)
      {
        unint64_t v18 = a2->__r_.__value_.__l.__size_;
        if (v18 <= v6) {
          goto LABEL_56;
        }
      }

      else
      {
        unint64_t v18 = a2->__r_.__value_.__s.__size_;
        if (v6 >= size) {
          goto LABEL_56;
        }
      }

      int v13 = (std::string *)a2->__r_.__value_.__r.__words[0];
      if (v18 >= v6) {
        std::string::size_type v10 = v6;
      }
      else {
        std::string::size_type v10 = v18;
      }
      if ((size & 0x80u) == 0LL) {
        int v19 = a2;
      }
      else {
        int v19 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      p_unint64_t size = (std::string::__short::$654DBF3D633A6121C0B197AC38B89F76 *)&v19[-1].__r_.__value_.__s.__size_;
      unint64_t v21 = v18;
      while (v21 > v6)
      {
        unint64_t v22 = v21 - 1;
        int v23 = p_size[v21--].__size_;
        if (v23 == 47)
        {
          std::string::size_type v10 = v22 + 1;
          break;
        }
      }

      if (v18 - v10 != 2
        || ((size & 0x80u) == 0LL ? (__int128 v24 = a2) : (__int128 v24 = (std::string *)a2->__r_.__value_.__r.__words[0]),
            v24->__r_.__value_.__s.__data_[v10] != 46 || v24->__r_.__value_.__s.__data_[v10 + 1] != 46))
      {
        if (v10 > v6)
        {
          std::string::size_type v9 = (size & 0x80u) == 0LL ? a2 : (std::string *)a2->__r_.__value_.__r.__words[0];
          if (v9->__r_.__value_.__s.__data_[v10 - 1] == 47) {
            --v10;
          }
        }

        int v11 = (char)size;
        uint64_t v12 = (char *)a2 + size;
        if (v11 >= 0) {
          int v13 = a2;
        }
        else {
          uint64_t v12 = (char *)v13 + a2->__r_.__value_.__l.__size_;
        }
        std::string::erase(a2, v10, v12 - ((char *)v13 + v10));
LABEL_57:
        if (v8 == v4) {
          goto LABEL_78;
        }
        goto LABEL_11;
      }

void sub_100170AF8(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100170B24(void *a1, void **a2)
{
  size_t v2 = *((unsigned __int8 *)a1 + 23);
  size_t v3 = a1[1];
  if ((v2 & 0x80u) != 0LL)
  {
    a1 = (void *)*a1;
    size_t v2 = v3;
  }

  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  return sub_1001716E0(a1, v2, v5, v6);
}

void sub_100170B5C(std::string *this)
{
  uint64_t v1 = this;
  std::string::pointer data = this[1].__r_.__value_.__l.__data_;
  if (data[23] < 0) {
    unint64_t v3 = *((void *)data + 1);
  }
  else {
    unint64_t v3 = data[23];
  }
  if ((char)v1->__r_.__value_.__s.__size_ < 0)
  {
    p_unint64_t size = &v1[1].__r_.__value_.__l.__size_;
    std::string::size_type v5 = v1[1].__r_.__value_.__l.__size_ + v1->__r_.__value_.__l.__size_;
    v1[1].__r_.__value_.__l.__size_ = v5;
    if (v5 >= v3)
    {
      *v1->__r_.__value_.__l.__data_ = 0;
      v1->__r_.__value_.__l.__size_ = 0LL;
      return;
    }
  }

  else
  {
    p_unint64_t size = &v1[1].__r_.__value_.__l.__size_;
    std::string::size_type v5 = v1[1].__r_.__value_.__l.__size_ + v1->__r_.__value_.__s.__size_;
    v1[1].__r_.__value_.__l.__size_ = v5;
    if (v5 >= v3)
    {
      v1->__r_.__value_.__s.__data_[0] = 0;
      v1->__r_.__value_.__s.__size_ = 0;
      return;
    }
  }

  std::string::pointer v6 = data;
  if (data[23] < 0) {
    std::string::pointer v6 = *(std::string::pointer *)data;
  }
  if (v6[v5] == 47)
  {
    unint64_t v18 = 0LL;
    if (data[23] < 0) {
      std::string::pointer data = *(std::string::pointer *)data;
    }
    unint64_t v7 = sub_10016EE08(data, v3, &v18);
    std::string::size_type v5 = *p_size;
    if (*p_size == v7)
    {
      if ((char)v1->__r_.__value_.__s.__size_ < 0)
      {
        if (v1->__r_.__value_.__l.__size_ == v18)
        {
          v1->__r_.__value_.__l.__size_ = 1LL;
          uint64_t v1 = (std::string *)v1->__r_.__value_.__r.__words[0];
          goto LABEL_20;
        }
      }

      else if (v18 == v1->__r_.__value_.__s.__size_)
      {
        v1->__r_.__value_.__s.__size_ = 1;
LABEL_20:
        LOWORD(v1->__r_.__value_.__l.__data_) = 47;
        return;
      }
    }

    std::string::pointer data = v1[1].__r_.__value_.__l.__data_;
    if (v5 == v3)
    {
LABEL_26:
      if (v3 - 1 >= v7) {
        unint64_t v9 = v7;
      }
      else {
        unint64_t v9 = v3 - 1;
      }
      if (data[23] >= 0) {
        std::string::pointer v10 = data;
      }
      else {
        std::string::pointer v10 = *(std::string::pointer *)data;
      }
      std::string::pointer v11 = v10 - 2;
      unint64_t v12 = v3;
      while (1)
      {
        unint64_t v13 = v12 - 1;
        if (v12 - 1 <= v7) {
          break;
        }
        int v14 = v11[v12--];
        if (v14 != 47) {
          goto LABEL_37;
        }
      }

      unint64_t v13 = v9;
LABEL_37:
      std::string::size_type v5 = v3;
      if (v13 != v7)
      {
        v1[1].__r_.__value_.__l.__size_ = v3 - 1;
        std::string::operator=(v1, (const std::string *)&xmmword_1002D19B8);
        return;
      }
    }

    else
    {
      while (1)
      {
        std::string::pointer v8 = data;
        if (data[23] < 0) {
          std::string::pointer v8 = *(std::string::pointer *)data;
        }
        if (v8[v5] != 47) {
          break;
        }
        std::string::size_type *p_size = ++v5;
        if (v3 == v5) {
          goto LABEL_26;
        }
      }
    }
  }

  if (data[23] < 0)
  {
    std::string::pointer v15 = *(std::string::pointer *)data;
    std::string::size_type v16 = *((void *)data + 1);
  }

  else
  {
    std::string::pointer v15 = data;
    std::string::size_type v16 = data[23];
  }

  if (v16 <= v5) {
    goto LABEL_45;
  }
  unint64_t v17 = v5;
  while (v15[v17] != 47)
  {
    if (v16 == ++v17) {
      goto LABEL_45;
    }
  }

  if (v16 == v17 || v17 == -1LL) {
LABEL_45:
  }
    unint64_t v17 = v3;
  if (data[23] < 0) {
    std::string::pointer data = *(std::string::pointer *)data;
  }
  sub_10016E7C8(v1, &data[v5], &data[v17], v17 - v5);
}

void sub_100170DB4(std::string *this)
{
  uint64_t v1 = this;
  std::string::pointer data = this[1].__r_.__value_.__l.__data_;
  if (data[23] < 0) {
    unint64_t v3 = *((void *)data + 1);
  }
  else {
    unint64_t v3 = data[23];
  }
  uint64_t size = v1->__r_.__value_.__s.__size_;
  if ((char)v1->__r_.__value_.__s.__size_ < 0)
  {
    if (v1->__r_.__value_.__l.__size_) {
      goto LABEL_13;
    }
  }

  else if (v1->__r_.__value_.__s.__size_)
  {
    goto LABEL_13;
  }

  std::string::size_type v5 = v1[1].__r_.__value_.__l.__size_;
  if (v5 + 1 == v3)
  {
    std::string::pointer v6 = data;
    if (data[23] < 0) {
      std::string::pointer v6 = *(std::string::pointer *)data;
    }
    if (v6[v5] == 47)
    {
      v1[1].__r_.__value_.__l.__size_ = v3;
      return;
    }
  }

void sub_100171048(std::string *a1)
{
  uint64_t v1 = a1;
  std::string::pointer data = a1[1].__r_.__value_.__l.__data_;
  if (data[23] < 0)
  {
    std::string::pointer v4 = data;
    std::string::pointer data = *(std::string::pointer *)data;
    unint64_t v3 = *((void *)v4 + 1);
  }

  else
  {
    unint64_t v3 = data[23];
  }

  unint64_t v31 = 0LL;
  unint64_t v5 = sub_10016EE08(data, v3, &v31);
  std::string::size_type size = v1[1].__r_.__value_.__l.__size_;
  if (v5 >= v3 || size != v5)
  {
    if (v3 >= 2 && size == v3)
    {
      std::string::pointer v9 = v1[1].__r_.__value_.__l.__data_;
      std::string::size_type v10 = v3 - 1;
      std::string::pointer v11 = v9;
      if (v9[23] < 0) {
        std::string::pointer v11 = *(std::string::pointer *)v9;
      }
      if (v11[v10] == 47)
      {
        if (v10 >= v5) {
          unint64_t v12 = v5;
        }
        else {
          unint64_t v12 = v3 - 1;
        }
        if (v9[23] < 0) {
          std::string::pointer v9 = *(std::string::pointer *)v9;
        }
        std::string::pointer v13 = v9 - 2;
        while (1)
        {
          unint64_t v14 = v3 - 1;
          if (v3 - 1 <= v5) {
            break;
          }
          int v15 = v13[v3--];
          if (v15 != 47) {
            goto LABEL_26;
          }
        }

        unint64_t v14 = v12;
LABEL_26:
        if (v14 != v5)
        {
          v1[1].__r_.__value_.__l.__size_ = v10;
          std::string::operator=(v1, (const std::string *)&xmmword_1002D19B8);
          return;
        }
      }
    }

    unint64_t v16 = v31;
    std::string::size_type v17 = size + 1;
    while (1)
    {
      unint64_t v18 = v17 - 1;
      if (v17 - 1 <= v31) {
        break;
      }
      if (v17 - v5 == 2)
      {
        v1[1].__r_.__value_.__l.__size_ = v5;
        if ((char)v1->__r_.__value_.__s.__size_ < 0)
        {
          v1->__r_.__value_.__l.__size_ = 1LL;
          uint64_t v1 = (std::string *)v1->__r_.__value_.__r.__words[0];
        }

        else
        {
          v1->__r_.__value_.__s.__size_ = 1;
        }

        LOWORD(v1->__r_.__value_.__l.__data_) = 47;
        return;
      }

      std::string::pointer v19 = v1[1].__r_.__value_.__l.__data_;
      std::string::pointer v20 = v19;
      if (v19[23] < 0) {
        std::string::pointer v20 = *(std::string::pointer *)v19;
      }
      int v21 = v20[v17-- - 2];
      if (v21 != 47)
      {
        std::string::pointer v22 = *(std::string::pointer *)v19;
        if (v19[23] >= 0) {
          std::string::pointer v22 = v1[1].__r_.__value_.__l.__data_;
        }
        unint64_t v23 = v18 - 1;
        unint64_t v24 = v18;
        while (1)
        {
          unint64_t v25 = v24;
          if (v23 + 1 <= v31) {
            break;
          }
          int v26 = v22[v23--];
          --v24;
          if (v26 == 47)
          {
            unint64_t v27 = v23 + 2;
            goto LABEL_46;
          }
        }

        unint64_t v27 = v31;
LABEL_46:
        v1[1].__r_.__value_.__l.__size_ = v27;
        if (v19[23] < 0) {
          std::string::pointer v19 = *(std::string::pointer *)v19;
        }
        std::string::size_type v28 = &v19[v27];
        std::string::size_type v30 = &v19[v18];
        if (v16 <= v25) {
          unint64_t v16 = v25;
        }
        std::string::size_type v29 = v18 - v16;
        goto LABEL_42;
      }
    }
  }

  v1[1].__r_.__value_.__l.__size_ = 0LL;
  std::string::size_type v28 = v1[1].__r_.__value_.__l.__data_;
  if (v28[23] < 0) {
    std::string::size_type v28 = *(std::string::value_type **)v28;
  }
  std::string::size_type v29 = v31;
  std::string::size_type v30 = &v28[v31];
LABEL_42:
  sub_10016E7C8(v1, v28, v30, v29);
}

void sub_100171254(std::string *a1)
{
  uint64_t v1 = a1;
  std::string::pointer data = a1[1].__r_.__value_.__l.__data_;
  if (data[23] < 0)
  {
    std::string::pointer v4 = data;
    std::string::pointer data = *(std::string::pointer *)data;
    unint64_t v3 = *((void *)v4 + 1);
  }

  else
  {
    unint64_t v3 = data[23];
  }

  unint64_t v31 = 0LL;
  unint64_t v5 = sub_10016EE08(data, v3, &v31);
  std::string::size_type size = v1[1].__r_.__value_.__l.__size_;
  if (v5 >= v3 || size != v5)
  {
    if (v3 >= 2 && size == v3)
    {
      std::string::pointer v9 = v1[1].__r_.__value_.__l.__data_;
      std::string::size_type v10 = v3 - 1;
      std::string::pointer v11 = v9;
      if (v9[23] < 0) {
        std::string::pointer v11 = *(std::string::pointer *)v9;
      }
      if (v11[v10] == 47)
      {
        if (v10 >= v5) {
          unint64_t v12 = v5;
        }
        else {
          unint64_t v12 = v3 - 1;
        }
        if (v9[23] < 0) {
          std::string::pointer v9 = *(std::string::pointer *)v9;
        }
        std::string::pointer v13 = v9 - 2;
        while (1)
        {
          unint64_t v14 = v3 - 1;
          if (v3 - 1 <= v5) {
            break;
          }
          int v15 = v13[v3--];
          if (v15 != 47) {
            goto LABEL_26;
          }
        }

        unint64_t v14 = v12;
LABEL_26:
        if (v14 != v5)
        {
          v1[1].__r_.__value_.__l.__size_ = v10;
          if ((char)v1->__r_.__value_.__s.__size_ < 0)
          {
            *v1->__r_.__value_.__l.__data_ = 0;
            v1->__r_.__value_.__l.__size_ = 0LL;
          }

          else
          {
            v1->__r_.__value_.__s.__data_[0] = 0;
            v1->__r_.__value_.__s.__size_ = 0;
          }

          return;
        }
      }
    }

    unint64_t v16 = v31;
    std::string::size_type v17 = size + 1;
    while (1)
    {
      unint64_t v18 = v17 - 1;
      if (v17 - 1 <= v31) {
        break;
      }
      if (v17 - v5 == 2)
      {
        v1[1].__r_.__value_.__l.__size_ = v5;
        if ((char)v1->__r_.__value_.__s.__size_ < 0)
        {
          v1->__r_.__value_.__l.__size_ = 1LL;
          uint64_t v1 = (std::string *)v1->__r_.__value_.__r.__words[0];
        }

        else
        {
          v1->__r_.__value_.__s.__size_ = 1;
        }

        LOWORD(v1->__r_.__value_.__l.__data_) = 47;
        return;
      }

      std::string::pointer v19 = v1[1].__r_.__value_.__l.__data_;
      std::string::pointer v20 = v19;
      if (v19[23] < 0) {
        std::string::pointer v20 = *(std::string::pointer *)v19;
      }
      int v21 = v20[v17-- - 2];
      if (v21 != 47)
      {
        std::string::pointer v22 = *(std::string::pointer *)v19;
        if (v19[23] >= 0) {
          std::string::pointer v22 = v1[1].__r_.__value_.__l.__data_;
        }
        unint64_t v23 = v18 - 1;
        unint64_t v24 = v18;
        while (1)
        {
          unint64_t v25 = v24;
          if (v23 + 1 <= v31) {
            break;
          }
          int v26 = v22[v23--];
          --v24;
          if (v26 == 47)
          {
            unint64_t v27 = v23 + 2;
            goto LABEL_46;
          }
        }

        unint64_t v27 = v31;
LABEL_46:
        v1[1].__r_.__value_.__l.__size_ = v27;
        if (v19[23] < 0) {
          std::string::pointer v19 = *(std::string::pointer *)v19;
        }
        std::string::size_type v28 = &v19[v27];
        std::string::size_type v30 = &v19[v18];
        if (v16 <= v25) {
          unint64_t v16 = v25;
        }
        std::string::size_type v29 = v18 - v16;
        goto LABEL_42;
      }
    }
  }

  v1[1].__r_.__value_.__l.__size_ = 0LL;
  std::string::size_type v28 = v1[1].__r_.__value_.__l.__data_;
  if (v28[23] < 0) {
    std::string::size_type v28 = *(std::string::value_type **)v28;
  }
  std::string::size_type v29 = v31;
  std::string::size_type v30 = &v28[v31];
LABEL_42:
  sub_10016E7C8(v1, v28, v30, v29);
}

uint64_t sub_100171468(uint64_t a1)
{
  if (qword_1002D19E8)
  {
    std::locale::~locale((std::locale *)qword_1002D19E8);
    operator delete(v2);
  }

  qword_1002D19E8 = 0LL;
  return a1;
}

const std::locale::facet *sub_1001714A0()
{
  uint64_t v0 = (std::locale *)atomic_load((unint64_t *)&qword_1002D19E8);
  if (!v0)
  {
    uint64_t v0 = (std::locale *)operator new(8uLL);
    sub_1001715A8(v0);
    while (1)
    {
      unint64_t v2 = __ldaxr((unint64_t *)&qword_1002D19E8);
      if (v2) {
        break;
      }
      if (!__stlxr((unint64_t)v0, (unint64_t *)&qword_1002D19E8))
      {
        char v3 = 1;
        goto LABEL_8;
      }
    }

    char v3 = 0;
    __clrex();
LABEL_8:
    if ((v3 & 1) == 0)
    {
      std::locale::~locale(v0);
      operator delete(v4);
      uint64_t v0 = (std::locale *)v2;
    }
  }

  return std::locale::use_facet(v0, &std::codecvt<wchar_t,char,__mbstate_t>::id);
}

void sub_100171528(_Unwind_Exception *a1)
{
}

void sub_10017153C(const std::locale *a1@<X0>, std::locale *a2@<X8>)
{
  std::string::pointer v4 = (std::locale *)operator new(8uLL);
  unint64_t v5 = std::locale::locale(v4, a1);
  do
    std::string::pointer v6 = (std::locale *)__ldaxr((unint64_t *)&qword_1002D19E8);
  while (__stlxr((unint64_t)v5, (unint64_t *)&qword_1002D19E8));
  if (v6)
  {
    std::locale::locale(a2, v6);
    std::locale::~locale(v6);
    operator delete(v7);
  }

  else
  {
    sub_1001715A8(a2);
  }

void sub_1001715A8(std::locale *a1@<X8>)
{
  unint64_t v2 = (std::codecvt<wchar_t, char, mbstate_t> *)operator new(0x18uLL);
  boost::filesystem::detail::utf8_codecvt_facet::utf8_codecvt_facet(v2, 0LL);
  uint64_t v3 = std::locale::id::__get(&std::codecvt<wchar_t,char,__mbstate_t>::id);
  std::locale::__install_ctor(a1, &v4, v2, v3);
  std::locale::~locale(&v4);
}

void sub_100171610( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

char *sub_100171634(char *__dst, __int128 *a2, __int128 *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_100168054(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v6 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v6;
  }

  *(_OWORD *)(__dst + memset(v10, 0, 24) = *(__int128 *)((char *)a2 + 24);
  unint64_t v7 = __dst + 40;
  if (*((char *)a3 + 23) < 0)
  {
    sub_100168054(v7, *(void **)a3, *((void *)a3 + 1));
  }

  else
  {
    __int128 v8 = *a3;
    *((void *)__dst + 7) = *((void *)a3 + 2);
    *(_OWORD *)unint64_t v7 = v8;
  }

  *((_OWORD *)__dst + 4) = *(__int128 *)((char *)a3 + 24);
  return __dst;
}

void sub_1001716C4(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1001716E0(const void *a1, size_t a2, void *__s2, size_t a4)
{
  if (a4 >= a2) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = a4;
  }
  int v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0) {
      return 1LL;
    }
  }

  else
  {
    if (a2 == a4) {
      return 0LL;
    }
    if (a2 >= a4) {
      return 1LL;
    }
  }

  return 255LL;
}

uint64_t sub_10017173C()
{
  return __cxa_atexit((void (*)(void *))sub_10016755C, &stru_1002D19D0, (void *)&_mh_execute_header);
}

std::codecvt<wchar_t, char, mbstate_t> *boost::filesystem::detail::utf8_codecvt_facet::utf8_codecvt_facet( std::codecvt<wchar_t, char, mbstate_t> *this, size_t a2)
{
  unint64_t result = std::codecvt<wchar_t,char,__mbstate_t>::codecvt(this, a2);
  result->__vftable = (std::codecvt<wchar_t, char, mbstate_t>_vtbl *)off_1002B4E78;
  return result;
}

{
  std::codecvt<wchar_t, char, mbstate_t> *result;
  unint64_t result = std::codecvt<wchar_t,char,__mbstate_t>::codecvt(this, a2);
  result->__vftable = (std::codecvt<wchar_t, char, mbstate_t>_vtbl *)off_1002B4E78;
  return result;
}

void boost::filesystem::detail::utf8_codecvt_facet::~utf8_codecvt_facet( std::codecvt<wchar_t, char, mbstate_t> *this)
{
}

uint64_t boost::filesystem::detail::utf8_codecvt_facet::do_in( uint64_t a1, uint64_t a2, unsigned __int8 *a3, char *a4, unsigned __int8 **a5, unsigned int *a6, unsigned int *a7, unsigned int **a8)
{
  if (a3 == (unsigned __int8 *)a4 || a6 == a7)
  {
LABEL_29:
    *a5 = a3;
    *a8 = a6;
    return a3 != (unsigned __int8 *)a4;
  }

  while (1)
  {
    if ((char)*a3 < -64 || (unsigned int v8 = *a3, v8 >= 0xFE))
    {
      *a5 = a3;
      goto LABEL_32;
    }

    if ((v8 & 0x80) == 0)
    {
      ++a3;
      goto LABEL_7;
    }

    if ((v8 & 0xE0) == 0xC0)
    {
      unsigned int v9 = 1;
    }

    else if ((v8 & 0xF0) == 0xE0)
    {
      unsigned int v9 = 2;
    }

    else
    {
      unsigned int v9 = (v8 & 0xFC) == 0xF8 ? 4 : 5;
      if ((v8 & 0xF8) == 0xF0) {
        unsigned int v9 = 3;
      }
    }

    v8 -= dword_10022BE10[v9];
    LODWORD(v10) = 0;
    BOOL v14 = 1;
    ++a3;
LABEL_26:
    if (a3 == (unsigned __int8 *)a4 && v14)
    {
      *a5 = (unsigned __int8 *)&a4[-(v10 + 1)];
      *a8 = a6;
      return 1LL;
    }

BOOL boost::filesystem::detail::utf8_codecvt_facet::do_out( uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4, unsigned int **a5, _BYTE *a6, _BYTE *a7, uint64_t *a8)
{
  if (a3 == a4 || a6 == a7)
  {
    uint64_t v12 = (uint64_t)a6;
LABEL_33:
    *a5 = a3;
    *a8 = v12;
    return a3 != a4;
  }

  else
  {
    while (1)
    {
      unsigned int v8 = *a3;
      if ((int)*a3 >= 128)
      {
        if (v8 >= 0x800)
        {
          if (v8 >= 0x10000)
          {
            if (v8 >> 26) {
              int v10 = 5;
            }
            else {
              int v10 = 4;
            }
            if (v8 >= 0x200000) {
              int v9 = v10;
            }
            else {
              int v9 = 3;
            }
          }

          else
          {
            int v9 = 2;
          }
        }

        else
        {
          int v9 = 1;
        }
      }

      else
      {
        int v9 = 0;
      }

      LODWORD(v11) = 0;
      *a6 = (int)v8 / (1 << (6 * v9)) + LOBYTE(dword_10022BE10[v9]);
      uint64_t v12 = (uint64_t)(a6 + 1);
      BOOL v13 = v9 != 0;
      if (v9 && (_BYTE *)v12 != a7)
      {
        uint64_t v11 = 0LL;
        int v14 = v9 - 1;
        char v15 = 6 * v9 - 6;
        do
        {
          unint64_t v16 = &a6[v11];
          int v17 = (int)*a3 / (1 << v15);
          char v18 = v17 & 0x3F;
          int v20 = -v17;
          BOOL v19 = v20 < 0;
          int v21 = v20 & 0x3F;
          if (v19) {
            LOBYTE(v22) = v18;
          }
          else {
            int v22 = -v21;
          }
          v16[1] = v22 ^ 0x80;
          BOOL v23 = v14 == (_DWORD)v11;
          BOOL v13 = v14 != v11++;
          if (v23) {
            break;
          }
          v15 -= 6;
        }

        while (v16 + 2 != a7);
        uint64_t v12 = (uint64_t)&a6[v11 + 1];
      }

      BOOL v23 = (_BYTE *)v12 != a7 || !v13;
      if (!v23) {
        break;
      }
      if (++a3 != a4)
      {
        a6 = (_BYTE *)v12;
        if ((_BYTE *)v12 != a7) {
          continue;
        }
      }

      goto LABEL_33;
    }

    *a5 = a3;
    *a8 = (uint64_t)&a7[-(v11 + 1)];
    return 1LL;
  }

uint64_t boost::filesystem::detail::utf8_codecvt_facet::get_cont_octet_out_count(unsigned int a1)
{
  if (a1 >> 26) {
    int v1 = 5;
  }
  else {
    int v1 = 4;
  }
  if (a1 >= 0x200000) {
    int v2 = v1;
  }
  else {
    int v2 = 3;
  }
  if (a1 >= 0x10000) {
    int v3 = v2;
  }
  else {
    int v3 = 2;
  }
  if (a1 >= 0x800) {
    unsigned int v4 = v3;
  }
  else {
    unsigned int v4 = 1;
  }
  else {
    return 0LL;
  }
}

uint64_t boost::filesystem::detail::utf8_codecvt_facet::do_length( boost::filesystem::detail::utf8_codecvt_facet *this, __mbstate_t *a2, const char *a3, const char *a4, unint64_t a5)
{
  LODWORD(v5) = (_DWORD)a3;
  if (a5)
  {
    LODWORD(v5) = (_DWORD)a3;
    if (a3 < a4)
    {
      unint64_t v6 = 1LL;
      unint64_t v5 = (unint64_t)a3;
      do
      {
        int v7 = *(char *)v5;
        if (v7 < 0)
        {
          if ((v7 & 0xE0) == 0xC0)
          {
            unint64_t v8 = 2LL;
          }

          else if ((v7 & 0xF0) == 0xE0)
          {
            unint64_t v8 = 3LL;
          }

          else
          {
            int v9 = v7 & 0xF8;
            if ((v7 & 0xFC) == 0xF8) {
              unint64_t v8 = 5LL;
            }
            else {
              unint64_t v8 = 6LL;
            }
            if (v9 == 240) {
              unint64_t v8 = 4LL;
            }
          }
        }

        else
        {
          unint64_t v8 = 1LL;
        }

        v5 += v8;
        if (v6 >= a5) {
          break;
        }
        ++v6;
      }

      while (v5 < (unint64_t)a4);
    }
  }

  return (v5 - (_DWORD)a3);
}

uint64_t boost::filesystem::detail::utf8_codecvt_facet::get_octet_count( boost::filesystem::detail::utf8_codecvt_facet *this)
{
  else {
    int v1 = 6;
  }
  else {
    int v2 = v1;
  }
  else {
    int v3 = v2;
  }
  else {
    unsigned int v4 = v3;
  }
  else {
    return 1LL;
  }
}

uint64_t sub_100171C18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a5 = a3;
  return 0LL;
}

uint64_t sub_100171C24()
{
  return 0LL;
}

uint64_t sub_100171C2C()
{
  return 0LL;
}

uint64_t sub_100171C34()
{
  return 6LL;
}

uint64_t sub_100171C3C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64LL))(a1);
}

id sub_1001721AC(void *a1)
{
  if (a1)
  {
    int v1 = (void *)objc_claimAutoreleasedReturnValue([a1 base64EncodedStringWithOptions:0]);
  }

  else
  {
    id v2 = sub_1001768B4(1);
    int v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_100172878();
    }

    int v1 = 0LL;
  }

  return v1;
}

void sub_1001726A0()
{
}

void sub_100172714()
{
}

void sub_100172788(os_log_t log)
{
  int v1 = 136315138;
  uint64_t v2 = "-[THFrozenThreadNetwork(Keychain) keyChainItemRepresentationForFrozenThreadNetworkAddOperation]";
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "%s : Error: unable to form add operation due to missing data",  (uint8_t *)&v1,  0xCu);
  sub_100008188();
}

void sub_100172804()
{
}

void sub_100172878()
{
}

NSData *sub_10017401C(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = -[NSData initWithBase64EncodedString:options:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBase64EncodedString:options:",  v1,  0LL);
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  return v2;
}

id sub_1001744E8(void *a1)
{
  if (a1) {
    a1 = (void *)objc_claimAutoreleasedReturnValue([a1 base64EncodedStringWithOptions:0]);
  }
  return a1;
}

void sub_1001761C0( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void sub_1001761E0(void *a1, os_log_s *a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1 network]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 networkName]);
  uint8_t v6 = (void *)objc_claimAutoreleasedReturnValue([a1 network]);
  int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 extendedPANID]);
  int v10 = 138412546;
  uint64_t v11 = v5;
  sub_1001761D4();
  uint64_t v12 = v8;
  sub_1000155C8((void *)&_mh_execute_header, a2, v9, "Failed to calculate UUID (name=%@; xpanid=%@)!", (uint8_t *)&v10);
}

void sub_1001762BC(void *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a1 network]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 networkName]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1 network]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 extendedPANID]);
  uint8_t v6 = (void *)objc_claimAutoreleasedReturnValue([a1 borderAgent]);
  int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 discriminatorId]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([a1 keychainAccessGroup]);
  sub_1001761D4();
  sub_1001761C0( (void *)&_mh_execute_header,  v9,  v10,  "Failed to calculate UUID (name=%@; xpanid=%@; discriminatorId=%@; keychainAccessGroup=%@)!",
    v11,
    v12,
    v13,
    v14,
    2u);

  sub_1001761A8();
}

void sub_1001763CC()
{
}

void sub_100176440()
{
}

void sub_1001764B4( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001764E8(void *a1, uint64_t a2, os_log_s *a3)
{
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a1 uniqueIdentifier]);
  int v7 = 138412546;
  uint64_t v8 = v5;
  sub_1001761D4();
  uint64_t v9 = a2;
  sub_1000155C8( (void *)&_mh_execute_header,  a3,  v6,  "Warning: decoded record with identifier %@ but does not match expected %@!",  (uint8_t *)&v7);
}

void sub_100176588()
{
}

void sub_1001765FC()
{
}

void sub_100176670(os_log_t log)
{
  int v1 = 136315650;
  uint64_t v2 = "+[THThreadNetworkCredentialsActiveDataSetRecord(Keychain) activeDataSetRecordFromKeychainDictionary:]";
  __int16 v3 = 1024;
  int v4 = 187;
  __int16 v5 = 2112;
  uint64_t v6 = 0LL;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "%s:%d, Failed to decode Keychain item - Ba Discriminator Id  (baDiscriminatorId=%@)!",  (uint8_t *)&v1,  0x1Cu);
}

void sub_10017670C()
{
}

void sub_100176780( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001767B4(void *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a1 network]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 networkName]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1 network]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 extendedPANID]);
  uint8_t v6 = (void *)objc_claimAutoreleasedReturnValue([a1 borderAgent]);
  int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 discriminatorId]);
  sub_1001761D4();
  sub_1001761C0( (void *)&_mh_execute_header,  v8,  v9,  "Illegal attempt to form keychain item with insufficient information (name=%@; xpanid=%@; discriminatorId=%@; uuid=%@)!",
    v10,
    v11,
    v12,
    v13,
    2u);

  sub_1001761A8();
}

id sub_1001768B4(int a1)
{
  if (qword_1002D1A00 != -1) {
    dispatch_once(&qword_1002D1A00, &stru_1002B4F10);
  }
  return (id)qword_1002D19F0[a1];
}

void sub_100176904(id a1)
{
  os_log_t v1 = os_log_create("com.apple.thread", "unspecified");
  uint64_t v2 = (void *)qword_1002D19F0[0];
  qword_1002D19F0[0] = (uint64_t)v1;

  os_log_t v3 = os_log_create("com.apple.thread", "store");
  uint64_t v4 = (void *)qword_1002D19F8;
  qword_1002D19F8 = (uint64_t)v3;
}

void sub_1001769A0(id a1)
{
  os_log_t v1 = objc_alloc_init(&OBJC_CLASS___THThreadNetworkCredentialsKeychainBackingStore);
  uint64_t v2 = (void *)qword_1002D1A08;
  qword_1002D1A08 = (uint64_t)v1;
}

void sub_100176DE0(uint64_t a1)
{
  uint64_t v2 = objc_autoreleasePoolPush();
  id v3 = sub_1001768B4(1);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) networkName]);
    uint8_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) extendedPANID]);
    *(_DWORD *)std::string buf = 138412546;
    uint64_t v13 = v5;
    __int16 v14 = 2112;
    char v15 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Request to fetch credentials for network (name=%@, xpanid=%@)",  buf,  0x16u);
  }

  int v7 = (void *)objc_claimAutoreleasedReturnValue( +[THThreadNetworkCredentialsStoreRecord keyChainQueryForFetchOperationForNetwork:]( &OBJC_CLASS___THThreadNetworkCredentialsStoreRecord,  "keyChainQueryForFetchOperationForNetwork:",  *(void *)(a1 + 32)));
  uint64_t v8 = *(void **)(a1 + 40);
  id v11 = 0LL;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 _doFetchRecords:v7 error:&v11]);
  id v10 = v11;
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();

  objc_autoreleasePoolPop(v2);
}

void sub_100176FD4(uint64_t a1)
{
  uint64_t v2 = objc_autoreleasePoolPush();
  id v3 = sub_1001768B4(1);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Request to fetch all credentials", buf, 2u);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[THThreadNetworkCredentialsStoreRecord keyChainQueryForFetchAllOperation]( &OBJC_CLASS___THThreadNetworkCredentialsStoreRecord,  "keyChainQueryForFetchAllOperation"));
  uint8_t v6 = *(void **)(a1 + 32);
  id v15 = 0LL;
  int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 _doFetchRecords:v5 error:&v15]);
  id v8 = v15;
  id v9 = sub_1001768B4(1);
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int16 v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "fetched all credentials", v14, 2u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  id v11 = sub_1001768B4(1);
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "fetched all credentials, and completion block is done",  v13,  2u);
  }

  objc_autoreleasePoolPop(v2);
}

void sub_10017720C(void *a1)
{
  uint64_t v2 = objc_autoreleasePoolPush();
  id v3 = sub_1001768B4(1);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[4];
    *(_DWORD *)std::string buf = 138412290;
    uint64_t v14 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Request to fetch credential with UUID %@",  buf,  0xCu);
  }

  uint8_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[THThreadNetworkCredentialsStoreRecord keyChainQueryForFetchOneOperationForUniqueIdentifier:]( &OBJC_CLASS___THThreadNetworkCredentialsStoreRecord,  "keyChainQueryForFetchOneOperationForUniqueIdentifier:",  a1[4]));
  int v7 = (void *)a1[5];
  id v12 = 0LL;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 _doFetchRecords:v6 error:&v12]);
  id v9 = v12;
  uint64_t v10 = a1[6];
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v8 anyObject]);
  (*(void (**)(uint64_t, void *, id))(v10 + 16))(v10, v11, v9);

  objc_autoreleasePoolPop(v2);
}

void sub_100177614( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_100177634(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a2 == 0;
  id v4 = sub_1001768B4(1);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v6)
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "CKKS response for known state is Likely good",  buf,  2u);
    }

    dispatch_group_t v8 = dispatch_group_create();
    *(void *)std::string buf = 0LL;
    char v48 = buf;
    uint64_t v49 = 0x2020000000LL;
    char v50 = 0;
    v43[0] = _NSConcreteStackBlock;
    v43[1] = 3221225472LL;
    v43[2] = sub_100177CD8;
    v43[3] = &unk_1002B4FA8;
    uint64_t v9 = *(void *)(a1 + 72);
    char v45 = buf;
    uint64_t v46 = v9;
    int v7 = v8;
    int v44 = v7;
    uint64_t v10 = objc_retainBlock(v43);
    dispatch_group_enter(v7);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100177EF0;
    block[3] = &unk_1002B4FD0;
    uint64_t v42 = *(void *)(a1 + 72);
    id v11 = *(dispatch_queue_s **)(a1 + 32);
    id v40 = *(id *)(a1 + 40);
    id v41 = *(id *)(a1 + 64);
    dispatch_group_notify(v7, v11, block);
    uint64_t v12 = *(void *)(a1 + 48);
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3221225472LL;
    v37[2] = sub_100178148;
    v37[3] = &unk_1002B4FF8;
    uint64_t v13 = v10;
    id v38 = v13;
    uint64_t v14 = _SecItemAddAndNotifyOnSync(v12, 0LL, v37);
    id v15 = sub_1001768B4(1);
    unint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = "error";
      int v52 = "-[THThreadNetworkCredentialsKeychainBackingStore storeRecordAndSync:completion:]_block_invoke";
      *(_DWORD *)char v51 = 136315650;
      if (!(_DWORD)v14) {
        int v17 = "success";
      }
      __int16 v53 = 1024;
      int v54 = 286;
      __int16 v55 = 2080;
      xpc_object_t v56 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "%s:%d _SecItemAddAndNotifyOnSync return value : %s...",  v51,  0x1Cu);
    }

    if ((_DWORD)v14)
    {
      id v18 = sub_1001768B4(1);
      BOOL v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)char v51 = 136315394;
        int v52 = "-[THThreadNetworkCredentialsKeychainBackingStore storeRecordAndSync:completion:]_block_invoke";
        __int16 v53 = 1024;
        int v54 = 292;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "%s:%d _SecItemAddAndNotifyOnSync returned error",  v51,  0x12u);
      }

      if ((_DWORD)v14 != -25299) {
        goto LABEL_21;
      }
      id v20 = sub_1001768B4(1);
      int v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)char v51 = 136315138;
        int v52 = "-[THThreadNetworkCredentialsKeychainBackingStore storeRecordAndSync:completion:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "%s: Credential exists. Will update instead.",  v51,  0xCu);
      }

      int v22 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) keyChainQueryForUpdateOperation]);
      BOOL v23 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) keyChainItemRepresentationForUpdateOperation]);
      uint64_t v14 = SecItemUpdate(v22, v23);
      if ((_DWORD)v14)
      {
        id v24 = sub_1001768B4(1);
        unint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)char v51 = 136315394;
          int v52 = "-[THThreadNetworkCredentialsKeychainBackingStore storeRecordAndSync:completion:]_block_invoke";
          __int16 v53 = 1024;
          int v54 = 300;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "%s:%d SecItemUpdate returned error",  v51,  0x12u);
        }

LABEL_21:
        id v26 = sub_1001768B4(1);
        unint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)char v51 = 136315394;
          int v52 = "-[THThreadNetworkCredentialsKeychainBackingStore storeRecordAndSync:completion:]_block_invoke";
          __int16 v53 = 1024;
          int v54 = 305;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "%s:%d Returning error", v51, 0x12u);
        }

        [*(id *)(a1 + 56) errorout:v14 completion:*(void *)(a1 + 64)];
        goto LABEL_31;
      }

      id v33 = sub_1001768B4(1);
      uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)char v51 = 136315394;
        int v52 = "-[THThreadNetworkCredentialsKeychainBackingStore storeRecordAndSync:completion:]_block_invoke";
        __int16 v53 = 1024;
        int v54 = 310;
        _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "%s:%d Credential exists, updated successfully..",  v51,  0x12u);
      }

      std::string::size_type v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) computedUniqueIdentifier]);
      (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
    }

    else
    {
      dispatch_time_t v28 = dispatch_time(0LL, 1000000000LL * *(unsigned __int16 *)(a1 + 80));
      std::string::size_type v29 = *(dispatch_queue_s **)(a1 + 32);
      v35[0] = _NSConcreteStackBlock;
      v35[1] = 3221225472LL;
      v35[2] = sub_10017822C;
      uint64_t v35[3] = &unk_1002B5020;
      __int128 v36 = v13;
      dispatch_after(v28, v29, v35);
      id v30 = sub_1001768B4(1);
      unint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)char v51 = 136315394;
        int v52 = "-[THThreadNetworkCredentialsKeychainBackingStore storeRecordAndSync:completion:]_block_invoke";
        __int16 v53 = 1024;
        int v54 = 330;
        _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "%s:%d Timer Scheduled !....... ",  v51,  0x12u);
      }

      std::string::size_type v32 = v36;
    }

LABEL_31:
    _Block_object_dispose(buf, 8);
    goto LABEL_32;
  }

  if (v6)
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CKKS response for known is Not good", buf, 2u);
  }

  int v7 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  7LL,  @"CKKS response for known state is Not good"));
  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
LABEL_32:
}

void sub_100177C90(_Unwind_Exception *a1)
{
}

void sub_100177CD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  while (!__ldaxr(v4))
  {
    int v6 = 1;
    if (!__stlxr(1u, v4)) {
      goto LABEL_6;
    }
  }

  int v6 = 0;
  __clrex();
LABEL_6:
  id v7 = sub_1001768B4(1);
  dispatch_group_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = 136315650;
    int v17 = "-[THThreadNetworkCredentialsKeychainBackingStore storeRecordAndSync:completion:]_block_invoke";
    __int16 v18 = 1024;
    int v19 = 227;
    __int16 v20 = 1024;
    LODWORD(v21) = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%s:%d nowFinished : %d", (uint8_t *)&v16, 0x18u);
  }

  if (v6)
  {
    if (v3)
    {
      id v9 = sub_1001768B4(1);
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = 136315650;
        int v17 = "-[THThreadNetworkCredentialsKeychainBackingStore storeRecordAndSync:completion:]_block_invoke";
        __int16 v18 = 1024;
        int v19 = 235;
        __int16 v20 = 2112;
        id v21 = v3;
        id v11 = "%s:%d Credential sync error, ErrorInfo : %@ ";
        uint64_t v12 = v10;
        uint32_t v13 = 28;
LABEL_14:
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v16, v13);
      }
    }

    else
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
      id v14 = sub_1001768B4(1);
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
        int v16 = 136315650;
        int v17 = "-[THThreadNetworkCredentialsKeychainBackingStore storeRecordAndSync:completion:]_block_invoke";
        __int16 v18 = 1024;
        int v19 = 233;
        __int16 v20 = 1024;
        LODWORD(v21) = v15;
        id v11 = "%s:%d Credential sync Complete, syncDone : %d";
        uint64_t v12 = v10;
        uint32_t v13 = 24;
        goto LABEL_14;
      }
    }

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }
}

void sub_100177EF0(uint64_t a1)
{
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL))
  {
    id v2 = sub_1001768B4(1);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      OSStatus v4 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
      int v13 = 136315650;
      id v14 = "-[THThreadNetworkCredentialsKeychainBackingStore storeRecordAndSync:completion:]_block_invoke";
      __int16 v15 = 1024;
      int v16 = 255;
      __int16 v17 = 1024;
      OSStatus v18 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s:%d Inside group notify block, sync is done, syncDone : %d",  (uint8_t *)&v13,  0x18u);
    }

    uint64_t v5 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) computedUniqueIdentifier]);
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) computedUniqueIdentifier]);
    uint64_t v5 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue( +[THThreadNetworkCredentialsStoreRecord keyChainQueryForDeleteOperationForUniqueIdentifier:]( &OBJC_CLASS___THThreadNetworkCredentialsStoreRecord,  "keyChainQueryForDeleteOperationForUniqueIdentifier:",  v6));

    OSStatus v7 = SecItemDelete(v5);
    id v8 = sub_1001768B4(1);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 136315650;
      id v14 = "-[THThreadNetworkCredentialsKeychainBackingStore storeRecordAndSync:completion:]_block_invoke";
      __int16 v15 = 1024;
      int v16 = 264;
      __int16 v17 = 1024;
      OSStatus v18 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s:%d sync not done, let's delete the local record, Got on deletion : (err=%d)",  (uint8_t *)&v13,  0x18u);
    }

    id v10 = sub_1001768B4(1);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 136315138;
      id v14 = "-[THThreadNetworkCredentialsKeychainBackingStore storeRecordAndSync:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "%s: Error, Sync failure ",  (uint8_t *)&v13,  0xCu);
    }

    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  6LL,  @"Error, iCloud Sync failure"));
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

uint64_t sub_100178148(uint64_t a1, int a2, uint64_t a3)
{
  id v6 = sub_1001768B4(1);
  OSStatus v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 136315650;
    id v10 = "-[THThreadNetworkCredentialsKeychainBackingStore storeRecordAndSync:completion:]_block_invoke";
    __int16 v11 = 1024;
    int v12 = a2;
    __int16 v13 = 2112;
    uint64_t v14 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s: Inside Sync completion, didSync : %d, ErrorInfo : %@ ",  (uint8_t *)&v9,  0x1Cu);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10017822C(uint64_t a1)
{
  id v2 = sub_1001768B4(1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315394;
    id v6 = "-[THThreadNetworkCredentialsKeychainBackingStore storeRecordAndSync:completion:]_block_invoke";
    __int16 v7 = 1024;
    int v8 = 325;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%s:%d Timer Fired !!! ", (uint8_t *)&v5, 0x12u);
  }

  OSStatus v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  8LL,  @"Error, Credentials sync timed out"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001783F8(uint64_t a1)
{
  id v2 = sub_1001768B4(1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    OSStatus v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) network]);
    int v5 = (char *)objc_claimAutoreleasedReturnValue([v4 networkName]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) network]);
    __int16 v7 = (void *)objc_claimAutoreleasedReturnValue([v6 extendedPANID]);
    int v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueIdentifier]);
    int v18 = 138412802;
    int v19 = v5;
    __int16 v20 = 2112;
    id v21 = v7;
    __int16 v22 = 2112;
    BOOL v23 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Request to store credential (networkName=%@, xpanid=%@, uuid=%@",  (uint8_t *)&v18,  0x20u);
  }

  int v9 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) keyChainItemRepresentationForAddOperation]);
  id v10 = v9;
  if (!v9)
  {
    __int16 v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  4LL,  @"Bad network parameter"));
    int v12 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
LABEL_7:
    v12();

    goto LABEL_14;
  }

  if (!*(_BYTE *)(a1 + 56))
  {
    uint64_t v13 = SecItemAdd(v9, 0LL);
    if ((_DWORD)v13 == -25299)
    {
      id v14 = sub_1001768B4(1);
      __int16 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        int v18 = 136315138;
        int v19 = "-[THThreadNetworkCredentialsKeychainBackingStore storeRecord:waitForSync:completion:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "%s: Credential exists. Will update instead.",  (uint8_t *)&v18,  0xCu);
      }

      int v16 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) keyChainQueryForUpdateOperation]);
      __int16 v17 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) keyChainItemRepresentationForUpdateOperation]);
      uint64_t v13 = SecItemUpdate(v16, v17);
    }

    if ((_DWORD)v13)
    {
      [*(id *)(a1 + 40) errorout:v13 completion:*(void *)(a1 + 48)];
      goto LABEL_14;
    }

    __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) computedUniqueIdentifier]);
    int v12 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
    goto LABEL_7;
  }

  [*(id *)(a1 + 40) storeRecordAndSync:*(void *)(a1 + 32) completion:*(void *)(a1 + 48)];
LABEL_14:
}

void sub_10017872C(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = sub_1001768B4(1);
  OSStatus v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(const char **)(a1 + 32);
    int v15 = 138412290;
    int v16 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Request to DELETE credential with identifier %@",  (uint8_t *)&v15,  0xCu);
  }

  id v6 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue( +[THThreadNetworkCredentialsStoreRecord keyChainQueryForDeleteOperationForUniqueIdentifier:]( &OBJC_CLASS___THThreadNetworkCredentialsStoreRecord,  "keyChainQueryForDeleteOperationForUniqueIdentifier:",  *(void *)(a1 + 32)));
  OSStatus v7 = SecItemDelete(v6);
  id v8 = sub_1001768B4(1);
  int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = 136315394;
    int v16 = "-[THThreadNetworkCredentialsKeychainBackingStore deleteRecordWithUniqueIdentifier:completion:]_block_invoke";
    __int16 v17 = 1024;
    OSStatus v18 = v7;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%s: GOT: (err=%d)", (uint8_t *)&v15, 0x12u);
  }

  if (v7)
  {
    id v10 = (__CFString *)SecCopyErrorMessageString(v7, 0LL);
    id v11 = sub_1001768B4(1);
    int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_100194368();
    }

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v7,  0LL));
    id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSError storeError:underlyingError:description:]( &OBJC_CLASS___NSError,  "storeError:underlyingError:description:",  2LL,  v13,  v10));
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  objc_autoreleasePoolPop(v2);
}

void sub_100179440( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100179464(uint64_t result, uint64_t a2)
{
  *(void *)(result + memset(&v22.ai_socktype, 0, 40) = *(void *)(a2 + 40);
  *(void *)(a2 + memset(&v22.ai_socktype, 0, 40) = 0LL;
  return result;
}

void sub_100179474(uint64_t a1)
{
}

void sub_10017947C(void *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = a1 + 6;
  objc_storeStrong((id *)(*(void *)(a1[6] + 8LL) + 40LL), a2);
  objc_storeStrong((id *)(*(void *)(a1[7] + 8LL) + 40LL), a3);
  if (!*(void *)(*(void *)(a1[7] + 8LL) + 40LL))
  {
    id v11 = [*(id *)(*(void *)(*v8 + 8) + 40) count];
    id v12 = sub_1001768B4(1);
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
    if (!v11)
    {
      if (v14) {
        sub_100194748();
      }

      goto LABEL_5;
    }

    uint64_t v49 = a1;
    if (v14) {
      sub_10019485C((uint64_t)(a1 + 6));
    }
    id v50 = v7;
    id v51 = v6;

    __int128 v60 = 0u;
    __int128 v61 = 0u;
    __int128 v58 = 0u;
    __int128 v59 = 0u;
    id v15 = *(id *)(*(void *)(*v8 + 8LL) + 40LL);
    id v16 = [v15 countByEnumeratingWithState:&v58 objects:v69 count:16];
    if (v16)
    {
      id v17 = v16;
      uint64_t v18 = 0LL;
      uint64_t v19 = *(void *)v59;
      do
      {
        for (size_t i = 0LL; i != v17; size_t i = (char *)i + 1)
        {
          if (*(void *)v59 != v19) {
            objc_enumerationMutation(v15);
          }
          id v21 = *(void **)(*((void *)&v58 + 1) + 8LL * (void)i);
          __int16 v22 = (void *)objc_claimAutoreleasedReturnValue([v21 keychainAccessGroup]);
          if ([v22 isEqualToString:@"0000000000"])
          {
          }

          else
          {
            BOOL v23 = (void *)objc_claimAutoreleasedReturnValue([v21 keychainAccessGroup]);
            uint64_t v24 = [v23 isEqualToString:@"com.apple.thread.network"] ^ 1;

            v18 += v24;
          }
        }

        id v17 = [v15 countByEnumeratingWithState:&v58 objects:v69 count:16];
      }

      while (v17);
    }

    unint64_t v25 = (void *)objc_claimAutoreleasedReturnValue( +[THPreferredThreadNetwork keyChainQueryForFetchPreferredNetworkRecordsOperation]( &OBJC_CLASS___THPreferredThreadNetwork,  "keyChainQueryForFetchPreferredNetworkRecordsOperation"));
    id v6 = v51;
    if (v25)
    {
      id v26 = (void *)v49[4];
      id v57 = 0LL;
      unint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 _doFetchPreferredNetworks:v25 error:&v57]);
      id v28 = v57;
      id v29 = sub_1001768B4(1);
      id v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        id v31 = [v27 count];
        *(_DWORD *)std::string buf = 136315650;
        __int16 v64 = "-[THThreadNetworkCredentialsKeychainBackingStore retrieveThirdPartyInfo:]_block_invoke";
        __int16 v65 = 1024;
        int v66 = 640;
        __int16 v67 = 2048;
        id v68 = v31;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_INFO,  "%s : %d - Preferred Networks in Database = %lu",  buf,  0x1Cu);
      }

      if ([v27 count])
      {
        id v48 = v28;
        __int128 v55 = 0u;
        __int128 v56 = 0u;
        __int128 v53 = 0u;
        __int128 v54 = 0u;
        std::string v47 = v27;
        id v32 = v27;
        id v33 = [v32 countByEnumeratingWithState:&v53 objects:v62 count:16];
        if (!v33) {
          goto LABEL_47;
        }
        id v34 = v33;
        uint64_t v52 = 0LL;
        uint64_t v35 = 0LL;
        uint64_t v36 = *(void *)v54;
        while (1)
        {
          for (uint64_t j = 0LL; j != v34; uint64_t j = (char *)j + 1)
          {
            if (*(void *)v54 != v36) {
              objc_enumerationMutation(v32);
            }
            id v38 = *(void **)(*((void *)&v53 + 1) + 8LL * (void)j);
            if (v38)
            {
              if ([v39 isEqualToString:@"0000000000"])
              {

LABEL_36:
                ++v35;
                continue;
              }

              id v40 = (void *)objc_claimAutoreleasedReturnValue([v38 userInfo]);
              unsigned __int8 v41 = [v40 isEqualToString:@"com.apple.thread.network"];

              if ((v41 & 1) != 0) {
                goto LABEL_36;
              }
              ++v52;
            }
          }

          id v34 = [v32 countByEnumeratingWithState:&v53 objects:v62 count:16];
          if (!v34)
          {
LABEL_47:

            uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  0LL,  @"Success: Found the thirdParty information"));
            (*(void (**)(void))(v49[5] + 16LL))();
            id v7 = v50;
            id v6 = v51;
            id v28 = v48;
            unint64_t v27 = v47;
            goto LABEL_48;
          }
        }
      }

      id v44 = sub_1001768B4(1);
      char v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
        sub_1001947E8();
      }

      uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  9LL,  @"Failed to find any  preferred network"));
      (*(void (**)(void))(v49[5] + 16LL))();
LABEL_48:
    }

    else
    {
      id v42 = sub_1001768B4(1);
      size_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
      if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
        sub_100194774();
      }

      id v28 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  3LL,  @"Failed to create query to retrieve preferred network"));
      (*(void (**)(void))(v49[5] + 16LL))();
    }

    goto LABEL_50;
  }

  id v9 = sub_1001768B4(1);
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
    sub_1001948DC((uint64_t)(a1 + 7), v10);
  }

LABEL_5:
  (*(void (**)(void))(a1[5] + 16LL))();
LABEL_50:
}

void sub_100179AE4(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = sub_1001768B4(1);
  OSStatus v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) networkName]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) extendedPANID]);
    *(_DWORD *)std::string buf = 136315906;
    uint64_t v13 = "-[THThreadNetworkCredentialsKeychainBackingStore retrieveAllActiveDataSetRecordsForNetwork:completion:]_block_invoke";
    __int16 v14 = 1024;
    int v15 = 680;
    __int16 v16 = 2112;
    id v17 = v5;
    __int16 v18 = 2112;
    uint64_t v19 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s : %d - Request to fetch active dataset records for network (name=%@, xpanid=%@)",  buf,  0x26u);
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[THThreadNetworkCredentialsActiveDataSetRecord keyChainQueryForFetchActiveDataSetRecordsOperationForNetwork:]( &OBJC_CLASS___THThreadNetworkCredentialsActiveDataSetRecord,  "keyChainQueryForFetchActiveDataSetRecordsOperationForNetwork:",  *(void *)(a1 + 32)));
  id v8 = *(void **)(a1 + 40);
  id v11 = 0LL;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 _doFetchActiveDataSetRecords:v7 error:&v11]);
  id v10 = v11;
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();

  objc_autoreleasePoolPop(v2);
}

void sub_100179CF8(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = sub_1001768B4(1);
  OSStatus v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Request to fetch all active dataset records",  buf,  2u);
  }

  int v5 = (void *)objc_claimAutoreleasedReturnValue( +[THThreadNetworkCredentialsActiveDataSetRecord keyChainQueryForFetchAllActiveDataSetRecordsOperation]( &OBJC_CLASS___THThreadNetworkCredentialsActiveDataSetRecord,  "keyChainQueryForFetchAllActiveDataSetRecordsOperation"));
  id v6 = *(void **)(a1 + 32);
  id v9 = 0LL;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 _doFetchActiveDataSetRecords:v5 error:&v9]);
  id v8 = v9;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();

  objc_autoreleasePoolPop(v2);
}

void sub_100179EA0(void *a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = sub_1001768B4(1);
  OSStatus v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[4];
    *(_DWORD *)std::string buf = 138412290;
    uint64_t v14 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Request to fetch active dataset record with UUID %@",  buf,  0xCu);
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[THThreadNetworkCredentialsActiveDataSetRecord keyChainQueryForFetchOneActiveDataSetRecordOperationForUniqueIdentifier:]( &OBJC_CLASS___THThreadNetworkCredentialsActiveDataSetRecord,  "keyChainQueryForFetchOneActiveDataSetRecordOperationForUniqueIdentifier:",  a1[4]));
  id v7 = (void *)a1[5];
  id v12 = 0LL;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 _doFetchActiveDataSetRecords:v6 error:&v12]);
  id v9 = v12;
  uint64_t v10 = a1[6];
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v8 anyObject]);
  (*(void (**)(uint64_t, void *, id))(v10 + 16))(v10, v11, v9);

  objc_autoreleasePoolPop(v2);
}

void sub_10017A0A0(void *a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = sub_1001768B4(1);
  OSStatus v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[4];
    *(_DWORD *)std::string buf = 138412290;
    uint64_t v14 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Request to fetch active dataset record with xpanid %@",  buf,  0xCu);
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[THThreadNetworkCredentialsActiveDataSetRecord keyChainQueryForFetchOneActiveDataSetRecordOperationForXPANId:]( &OBJC_CLASS___THThreadNetworkCredentialsActiveDataSetRecord,  "keyChainQueryForFetchOneActiveDataSetRecordOperationForXPANId:",  a1[4]));
  id v7 = (void *)a1[5];
  id v12 = 0LL;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 _doFetchActiveDataSetRecords:v6 error:&v12]);
  id v9 = v12;
  uint64_t v10 = a1[6];
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v8 anyObject]);
  (*(void (**)(uint64_t, void *, id))(v10 + 16))(v10, v11, v9);

  objc_autoreleasePoolPop(v2);
}

void sub_10017A2A0(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = sub_1001768B4(1);
  OSStatus v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)std::string buf = 138412290;
    uint64_t v19 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Request to fetch active dataset record with xpanid %@",  buf,  0xCu);
  }

  if ([*(id *)(a1 + 40) checkWiFiStatus])
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[THThreadNetworkCredentialsActiveDataSetRecord keyChainQueryForFetchOneActiveDataSetRecordOperationForXPANId:]( &OBJC_CLASS___THThreadNetworkCredentialsActiveDataSetRecord,  "keyChainQueryForFetchOneActiveDataSetRecordOperationForXPANId:",  *(void *)(a1 + 32)));
    id v7 = *(void **)(a1 + 40);
    id v17 = 0LL;
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 _doFetchActiveDataSetRecords:v6 error:&v17]);
    id v9 = v17;
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 anyObject]);
    id v11 = v10;
    if (v9 || !v10)
    {
      int v15 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
    }

    else
    {
      id v12 = *(void **)(a1 + 40);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v10 network]);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 extendedPANID]);
      LODWORD(v12) = [v12 checkIfXpanIDMatchToMDNSScan:v14];

      if (!(_DWORD)v12)
      {
        __int16 v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  20LL,  @"Thread network credentials does not match with any of the active thread networks around"));
        (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();

        goto LABEL_12;
      }

      int v15 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
    }

    v15();
LABEL_12:

    goto LABEL_13;
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  19LL,  @"Error : Device is not connected to the network"));
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
LABEL_13:

  objc_autoreleasePoolPop(v2);
}

void sub_10017A584(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = sub_1001768B4(1);
  OSStatus v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) discriminatorId]);
    *(_DWORD *)std::string buf = 138412290;
    uint64_t v14 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Request to fetch active dataset record with borderAgent %@",  buf,  0xCu);
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[THThreadNetworkCredentialsActiveDataSetRecord keyChainQueryForFetchActiveDataSetRecordOperationForBorderAgent:]( &OBJC_CLASS___THThreadNetworkCredentialsActiveDataSetRecord,  "keyChainQueryForFetchActiveDataSetRecordOperationForBorderAgent:",  *(void *)(a1 + 32)));
  id v7 = *(void **)(a1 + 40);
  id v12 = 0LL;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 _doFetchActiveDataSetRecords:v6 error:&v12]);
  id v9 = v12;
  uint64_t v10 = *(void *)(a1 + 48);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v8 anyObject]);
  (*(void (**)(uint64_t, void *, id))(v10 + 16))(v10, v11, v9);

  objc_autoreleasePoolPop(v2);
}

void sub_10017A794(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = sub_1001768B4(1);
  OSStatus v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) discriminatorId]);
    *(_DWORD *)std::string buf = 138412290;
    id v30 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Request to fetch active dataset record with borderAgent %@",  buf,  0xCu);
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[THThreadNetworkCredentialsActiveDataSetRecord keyChainQueryForFetchActiveDataSetRecordOperationForBorderAgent:]( &OBJC_CLASS___THThreadNetworkCredentialsActiveDataSetRecord,  "keyChainQueryForFetchActiveDataSetRecordOperationForBorderAgent:",  *(void *)(a1 + 32)));
  id v7 = *(void **)(a1 + 40);
  id v27 = 0LL;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 _doFetchActiveDataSetRecords:v6 error:&v27]);
  id v9 = v27;
  if (!v9)
  {
    id v21 = v8;
    __int16 v22 = v2;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    id v10 = v8;
    id v11 = [v10 countByEnumeratingWithState:&v23 objects:v28 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v24;
      while (2)
      {
        uint64_t v14 = 0LL;
        do
        {
          if (*(void *)v24 != v13) {
            objc_enumerationMutation(v10);
          }
          int v15 = *(void **)(a1 + 40);
          __int16 v16 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*((void *)&v23 + 1) + 8 * (void)v14),  "credentialsDataSet",  v21,  v22,  (void)v23));
          id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 dataSetArray]);
          LODWORD(v15) = [v15 areValidDataSetTLVs:v17];

          if ((_DWORD)v15)
          {
            id v18 = sub_1001768B4(1);
            uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
            {
              __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) discriminatorId]);
              *(_DWORD *)std::string buf = 138412290;
              id v30 = v20;
              _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Return the record for borderAgent ID %@",  buf,  0xCu);
            }

            (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
            id v9 = 0LL;
            goto LABEL_16;
          }

          uint64_t v14 = (char *)v14 + 1;
        }

        while (v12 != v14);
        id v12 = [v10 countByEnumeratingWithState:&v23 objects:v28 count:16];
        if (v12) {
          continue;
        }
        break;
      }
    }

    id v9 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  28LL,  @"Error: Does Not Have DataSet TLVs"));
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
LABEL_16:
    id v8 = v21;
    id v2 = v22;
  }

  objc_autoreleasePoolPop(v2);
}

void sub_10017B514(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = sub_1001768B4(1);
  OSStatus v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(unsigned __int8 *)(a1 + 56);
    *(_DWORD *)std::string buf = 136315906;
    __int16 v20 = "-[THThreadNetworkCredentialsKeychainBackingStore retrieveAllActiveDataSetRecordsWithFlagForClientKeychainAcces"
          "sGroup:activeFlag:completion:]_block_invoke";
    __int16 v21 = 1024;
    int v22 = 910;
    __int16 v23 = 2112;
    uint64_t v24 = v5;
    __int16 v25 = 1024;
    int v26 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s:%d: Request to fetch active dataset record with Client Keychain Access Group %@, active flag :%d",  buf,  0x22u);
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[THThreadNetworkCredentialsActiveDataSetRecord keyChainQueryForFetchActiveDataSetRecordsOperationForClientKeychainAccessGroup:]( &OBJC_CLASS___THThreadNetworkCredentialsActiveDataSetRecord,  "keyChainQueryForFetchActiveDataSetRecordsOperationForClientKeychainAccessGroup:",  *(void *)(a1 + 32)));
  id v8 = *(void **)(a1 + 40);
  id v18 = 0LL;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 _doFetchActiveDataSetRecords:v7 error:&v18]);
  id v10 = v18;
  if (v9
    && (![v9 count]
     || !*(_BYTE *)(a1 + 56)
     || (uint64_t v11 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) getActiveRecords:v9]),
         v9,
         (id v9 = (void *)v11) != 0LL))
    && [v9 count])
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    id v12 = sub_1001768B4(1);
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_100194A70(v13, v14, v15);
    }

    __int16 v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  0LL,  0LL));
    uint64_t v17 = objc_claimAutoreleasedReturnValue( +[NSError storeError:underlyingError:description:]( &OBJC_CLASS___NSError,  "storeError:underlyingError:description:",  3LL,  v16,  @"Failed to retrieve all active border router records"));

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    id v10 = (id)v17;
  }

  objc_autoreleasePoolPop(v2);
}

void sub_10017B82C(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = sub_1001768B4(1);
  OSStatus v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(unsigned __int8 *)(a1 + 56);
    *(_DWORD *)std::string buf = 136315906;
    __int16 v20 = "-[THThreadNetworkCredentialsKeychainBackingStore retrieveAllActiveDataSetRecordsWithFlagForClientKeychainAcces"
          "sGroup:activeFlag:compleiton:]_block_invoke";
    __int16 v21 = 1024;
    int v22 = 947;
    __int16 v23 = 2112;
    uint64_t v24 = v5;
    __int16 v25 = 1024;
    int v26 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s:%d: Request to fetch active dataset record with Client Keychain Access Group %@, active flag :%d",  buf,  0x22u);
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[THThreadNetworkCredentialsActiveDataSetRecord keyChainQueryForFetchActiveDataSetRecordsOperationForClientKeychainAccessGroup:]( &OBJC_CLASS___THThreadNetworkCredentialsActiveDataSetRecord,  "keyChainQueryForFetchActiveDataSetRecordsOperationForClientKeychainAccessGroup:",  *(void *)(a1 + 32)));
  id v8 = *(void **)(a1 + 40);
  id v18 = 0LL;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 _doFetchActiveDataSetRecords:v7 error:&v18]);
  id v10 = v18;
  if (v9
    && (![v9 count]
     || !*(_BYTE *)(a1 + 56)
     || (uint64_t v11 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) getActiveRecords:v9]),
         v9,
         (id v9 = (void *)v11) != 0LL))
    && [v9 count])
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    id v12 = sub_1001768B4(1);
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_100194A70(v13, v14, v15);
    }

    __int16 v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  0LL,  0LL));
    uint64_t v17 = objc_claimAutoreleasedReturnValue( +[NSError storeError:underlyingError:description:]( &OBJC_CLASS___NSError,  "storeError:underlyingError:description:",  3LL,  v16,  @"Failed to retrieve all active border router records"));

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    id v10 = (id)v17;
  }

  objc_autoreleasePoolPop(v2);
}

void sub_10017BB2C(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = sub_1001768B4(1);
  OSStatus v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(const char **)(a1 + 32);
    int v15 = 138412290;
    __int16 v16 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Request to DELETE credential with identifier %@",  (uint8_t *)&v15,  0xCu);
  }

  int v6 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue( +[THThreadNetworkCredentialsActiveDataSetRecord keyChainQueryForDeleteActiveDataSetRecordOperationForUniqueIdentifier:]( &OBJC_CLASS___THThreadNetworkCredentialsActiveDataSetRecord,  "keyChainQueryForDeleteActiveDataSetRecordOperationForUniqueIdentifier:",  *(void *)(a1 + 32)));
  OSStatus v7 = SecItemDelete(v6);
  id v8 = sub_1001768B4(1);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = 136315394;
    __int16 v16 = "-[THThreadNetworkCredentialsKeychainBackingStore deleteActiveDataSetRecordWithUniqueIdentifier:completion:]_block_invoke";
    __int16 v17 = 1024;
    OSStatus v18 = v7;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%s: GOT: (err=%d)", (uint8_t *)&v15, 0x12u);
  }

  if (v7)
  {
    id v10 = (__CFString *)SecCopyErrorMessageString(v7, 0LL);
    id v11 = sub_1001768B4(1);
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_100194AE4();
    }

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v7,  0LL));
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSError storeError:underlyingError:description:]( &OBJC_CLASS___NSError,  "storeError:underlyingError:description:",  2LL,  v13,  v10));
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  objc_autoreleasePoolPop(v2);
}

void sub_10017BDF0(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = sub_1001768B4(1);
  OSStatus v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) discriminatorId]);
    int v15 = 136315394;
    __int16 v16 = "-[THThreadNetworkCredentialsKeychainBackingStore deleteActiveDataSetRecordForThreadBorderAgent:completion:]_block_invoke";
    __int16 v17 = 2112;
    OSStatus v18 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s: Request to DELETE credential with Ba %@",  (uint8_t *)&v15,  0x16u);
  }

  int v6 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue( +[THThreadNetworkCredentialsActiveDataSetRecord keyChainQueryForDeleteActiveDataSetOperationForThreadNetworkBorderAgent:]( &OBJC_CLASS___THThreadNetworkCredentialsActiveDataSetRecord,  "keyChainQueryForDeleteActiveDataSetOperationForThreadNetworkBorderAgent:",  *(void *)(a1 + 32)));
  OSStatus v7 = SecItemDelete(v6);
  id v8 = sub_1001768B4(1);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = 136315394;
    __int16 v16 = "-[THThreadNetworkCredentialsKeychainBackingStore deleteActiveDataSetRecordForThreadBorderAgent:completion:]_block_invoke";
    __int16 v17 = 1024;
    LODWORD(v1_Block_object_dispose((const void *)(v9 - 64), 8) = v7;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%s: GOT: (err=%d)", (uint8_t *)&v15, 0x12u);
  }

  if (v7)
  {
    id v10 = (__CFString *)SecCopyErrorMessageString(v7, 0LL);
    id v11 = sub_1001768B4(1);
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_100194B48();
    }

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v7,  0LL));
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSError storeError:underlyingError:description:]( &OBJC_CLASS___NSError,  "storeError:underlyingError:description:",  2LL,  v13,  v10));
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  objc_autoreleasePoolPop(v2);
}

void sub_10017C218( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_10017C238(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a2 == 0;
  id v4 = sub_1001768B4(1);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v6)
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "CKKS response for known state is Likely good",  buf,  2u);
    }

    dispatch_group_t v8 = dispatch_group_create();
    *(void *)std::string buf = 0LL;
    id v50 = buf;
    uint64_t v51 = 0x2020000000LL;
    char v52 = 0;
    v44[0] = _NSConcreteStackBlock;
    v44[1] = 3221225472LL;
    v44[2] = sub_10017C908;
    void v44[3] = &unk_1002B50E8;
    id v9 = *(void **)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 72);
    std::string v47 = buf;
    uint64_t v48 = v10;
    v44[4] = *(void *)(a1 + 32);
    id v45 = v9;
    OSStatus v7 = v8;
    uint64_t v46 = v7;
    id v11 = objc_retainBlock(v44);
    dispatch_group_enter(v7);
    id v12 = *(dispatch_queue_s **)(a1 + 48);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10017CB50;
    block[3] = &unk_1002B4FD0;
    uint64_t v43 = *(void *)(a1 + 72);
    id v41 = *(id *)(a1 + 40);
    id v42 = *(id *)(a1 + 64);
    dispatch_group_notify(v7, v12, block);
    uint64_t v13 = *(void *)(a1 + 56);
    v38[0] = _NSConcreteStackBlock;
    v38[1] = 3221225472LL;
    v38[2] = sub_10017CDA8;
    void v38[3] = &unk_1002B4FF8;
    uint64_t v14 = v11;
    id v39 = v14;
    uint64_t v15 = _SecItemAddAndNotifyOnSync(v13, 0LL, v38);
    id v16 = sub_1001768B4(1);
    __int16 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      OSStatus v18 = "error";
      __int128 v54 = "-[THThreadNetworkCredentialsKeychainBackingStore storeActiveDataSetRecordAndSync:completion:]_block_invoke";
      *(_DWORD *)__int128 v53 = 136315650;
      if (!(_DWORD)v15) {
        OSStatus v18 = "success";
      }
      __int16 v55 = 1024;
      int v56 = 1154;
      __int16 v57 = 2080;
      __int128 v58 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "%s:%d _SecItemAddAndNotifyOnSync return value : %s...",  v53,  0x1Cu);
    }

    if ((_DWORD)v15)
    {
      id v19 = sub_1001768B4(1);
      __int16 v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 v53 = 136315394;
        __int128 v54 = "-[THThreadNetworkCredentialsKeychainBackingStore storeActiveDataSetRecordAndSync:completion:]_block_invoke";
        __int16 v55 = 1024;
        int v56 = 1160;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "%s:%d _SecItemAddAndNotifyOnSync returned error",  v53,  0x12u);
      }

      if ((_DWORD)v15 != -25299) {
        goto LABEL_21;
      }
      id v21 = sub_1001768B4(1);
      int v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 v53 = 136315138;
        __int128 v54 = "-[THThreadNetworkCredentialsKeychainBackingStore storeActiveDataSetRecordAndSync:completion:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "%s: Credential exists. Will update instead.",  v53,  0xCu);
      }

      __int16 v23 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) keyChainQueryForActiveDataSetRecordUpdateOperation]);
      uint64_t v24 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) keyChainItemRepresentationForActiveDataSetRecordUpdateOperation]);
      uint64_t v15 = SecItemUpdate(v23, v24);
      if ((_DWORD)v15)
      {
        id v25 = sub_1001768B4(1);
        int v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 v53 = 136315394;
          __int128 v54 = "-[THThreadNetworkCredentialsKeychainBackingStore storeActiveDataSetRecordAndSync:completion:]_block_invoke";
          __int16 v55 = 1024;
          int v56 = 1168;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "%s:%d SecItemUpdate returned error",  v53,  0x12u);
        }

LABEL_21:
        id v27 = sub_1001768B4(1);
        id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 v53 = 136315394;
          __int128 v54 = "-[THThreadNetworkCredentialsKeychainBackingStore storeActiveDataSetRecordAndSync:completion:]_block_invoke";
          __int16 v55 = 1024;
          int v56 = 1173;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "%s:%d Returning error", v53, 0x12u);
        }

        [*(id *)(a1 + 32) errorout:v15 completion:*(void *)(a1 + 64)];
        goto LABEL_31;
      }

      id v34 = sub_1001768B4(1);
      uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 v53 = 136315394;
        __int128 v54 = "-[THThreadNetworkCredentialsKeychainBackingStore storeActiveDataSetRecordAndSync:completion:]_block_invoke";
        __int16 v55 = 1024;
        int v56 = 1178;
        _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "%s:%d Credential exists, updated successfully..",  v53,  0x12u);
      }

      id v33 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) computedUniqueIdentifier]);
      (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
    }

    else
    {
      dispatch_time_t v29 = dispatch_time(0LL, 1000000000LL * *(unsigned __int16 *)(a1 + 80));
      id v30 = *(dispatch_queue_s **)(a1 + 48);
      v36[0] = _NSConcreteStackBlock;
      v36[1] = 3221225472LL;
      char v36[2] = sub_10017CE8C;
      void v36[3] = &unk_1002B5020;
      uint64_t v37 = v14;
      dispatch_after(v29, v30, v36);
      id v31 = sub_1001768B4(1);
      id v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 v53 = 136315394;
        __int128 v54 = "-[THThreadNetworkCredentialsKeychainBackingStore storeActiveDataSetRecordAndSync:completion:]_block_invoke";
        __int16 v55 = 1024;
        int v56 = 1198;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "%s:%d Timer Scheduled !....... ",  v53,  0x12u);
      }

      id v33 = v37;
    }

LABEL_31:
    _Block_object_dispose(buf, 8);
    goto LABEL_32;
  }

  if (v6)
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CKKS response for known is Not good", buf, 2u);
  }

  OSStatus v7 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  7LL,  @"CKKS response for known state is Not good"));
  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
LABEL_32:
}

void sub_10017C8C0(_Unwind_Exception *a1)
{
}

void sub_10017C908(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
  while (!__ldaxr(v4))
  {
    int v6 = 1;
    if (!__stlxr(1u, v4)) {
      goto LABEL_6;
    }
  }

  int v6 = 0;
  __clrex();
LABEL_6:
  id v7 = sub_1001768B4(1);
  dispatch_group_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = 136315650;
    __int16 v17 = "-[THThreadNetworkCredentialsKeychainBackingStore storeActiveDataSetRecordAndSync:completion:]_block_invoke";
    __int16 v18 = 1024;
    int v19 = 1091;
    __int16 v20 = 1024;
    LODWORD(v21) = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%s:%d nowFinished : %d", (uint8_t *)&v16, 0x18u);
  }

  if (v6)
  {
    if (v3)
    {
      id v9 = sub_1001768B4(1);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      if (!os_log_type_enabled((os_log_t)v10, OS_LOG_TYPE_DEFAULT))
      {
LABEL_18:

        dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
        goto LABEL_19;
      }

      int v16 = 136315650;
      __int16 v17 = "-[THThreadNetworkCredentialsKeychainBackingStore storeActiveDataSetRecordAndSync:completion:]_block_invoke";
      __int16 v18 = 1024;
      int v19 = 1103;
      __int16 v20 = 2112;
      id v21 = v3;
      id v11 = "%s:%d Credential sync error, ErrorInfo : %@ ";
      id v12 = (os_log_s *)v10;
      uint32_t v13 = 28;
    }

    else
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = 1;
      if (_os_feature_enabled_impl("Home", "ThreadCommissioningService")
        && ([*(id *)(a1 + 32) markAsPreferred:*(void *)(a1 + 40)] & 1) == 0)
      {
        *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = 0;
      }

      id v14 = sub_1001768B4(1);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v14);
      if (!os_log_type_enabled((os_log_t)v10, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_18;
      }
      int v15 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
      int v16 = 136315650;
      __int16 v17 = "-[THThreadNetworkCredentialsKeychainBackingStore storeActiveDataSetRecordAndSync:completion:]_block_invoke";
      __int16 v18 = 1024;
      int v19 = 1101;
      __int16 v20 = 1024;
      LODWORD(v21) = v15;
      id v11 = "%s:%d Credential sync Complete, syncDone : %d";
      id v12 = (os_log_s *)v10;
      uint32_t v13 = 24;
    }

    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v16, v13);
    goto LABEL_18;
  }

void sub_10017CB50(uint64_t a1)
{
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL))
  {
    id v2 = sub_1001768B4(1);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      OSStatus v4 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
      int v13 = 136315650;
      id v14 = "-[THThreadNetworkCredentialsKeychainBackingStore storeActiveDataSetRecordAndSync:completion:]_block_invoke";
      __int16 v15 = 1024;
      int v16 = 1123;
      __int16 v17 = 1024;
      OSStatus v18 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s:%d Inside group notify block, sync is done, syncDone : %d",  (uint8_t *)&v13,  0x18u);
    }

    uint64_t v5 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) computedUniqueIdentifier]);
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) borderAgent]);
    uint64_t v5 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue( +[THThreadNetworkCredentialsActiveDataSetRecord keyChainQueryForDeleteActiveDataSetOperationForThreadNetworkBorderAgent:]( &OBJC_CLASS___THThreadNetworkCredentialsActiveDataSetRecord,  "keyChainQueryForDeleteActiveDataSetOperationForThreadNetworkBorderAgent:",  v6));

    OSStatus v7 = SecItemDelete(v5);
    id v8 = sub_1001768B4(1);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 136315650;
      id v14 = "-[THThreadNetworkCredentialsKeychainBackingStore storeActiveDataSetRecordAndSync:completion:]_block_invoke";
      __int16 v15 = 1024;
      int v16 = 1132;
      __int16 v17 = 1024;
      OSStatus v18 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s:%d sync not done, let's delete the local record, Got on deletion : (err=%d)",  (uint8_t *)&v13,  0x18u);
    }

    id v10 = sub_1001768B4(1);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 136315138;
      id v14 = "-[THThreadNetworkCredentialsKeychainBackingStore storeActiveDataSetRecordAndSync:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "%s: Error, Sync failure ",  (uint8_t *)&v13,  0xCu);
    }

    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  6LL,  @"Error, iCloud Sync failure"));
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

uint64_t sub_10017CDA8(uint64_t a1, int a2, uint64_t a3)
{
  id v6 = sub_1001768B4(1);
  OSStatus v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 136315650;
    id v10 = "-[THThreadNetworkCredentialsKeychainBackingStore storeActiveDataSetRecordAndSync:completion:]_block_invoke";
    __int16 v11 = 1024;
    int v12 = a2;
    __int16 v13 = 2112;
    uint64_t v14 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s: Inside Sync completion, didSync : %d, ErrorInfo : %@ ",  (uint8_t *)&v9,  0x1Cu);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10017CE8C(uint64_t a1)
{
  id v2 = sub_1001768B4(1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315394;
    id v6 = "-[THThreadNetworkCredentialsKeychainBackingStore storeActiveDataSetRecordAndSync:completion:]_block_invoke";
    __int16 v7 = 1024;
    int v8 = 1193;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%s:%d Timer Fired !!! ", (uint8_t *)&v5, 0x12u);
  }

  OSStatus v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  8LL,  @"Error, Credentials sync timed out"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10017D354(uint64_t a1)
{
  id v2 = sub_1001768B4(1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    OSStatus v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) network]);
    int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 networkName]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) network]);
    __int16 v7 = (void *)objc_claimAutoreleasedReturnValue([v6 extendedPANID]);
    int v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueIdentifier]);
    int v53 = 136316162;
    __int128 v54 = "-[THThreadNetworkCredentialsKeychainBackingStore updatePreferredNetworkWithNewDatasetRecord:completion:]_block_invoke";
    __int16 v55 = 1024;
    int v56 = 1255;
    __int16 v57 = 2112;
    __int128 v58 = v5;
    __int16 v59 = 2112;
    __int128 v60 = v7;
    __int16 v61 = 2112;
    xpc_object_t v62 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s:%d: :Request to update preferred credentials with (networkName=%@, xpanid=%@, uuid = %@",  (uint8_t *)&v53,  0x30u);
  }

  int v9 = *(void **)(a1 + 32);
  if (!v9) {
    goto LABEL_10;
  }
  uint64_t v10 = objc_claimAutoreleasedReturnValue([v9 credentialsDataSet]);
  if (!v10) {
    goto LABEL_10;
  }
  __int16 v11 = (void *)v10;
  int v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) credentialsDataSet]);
  uint64_t v13 = objc_claimAutoreleasedReturnValue([v12 dataSetArray]);
  if (!v13)
  {

    goto LABEL_10;
  }

  uint64_t v14 = (void *)v13;
  __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) credentialsDataSet]);
  int v16 = (void *)objc_claimAutoreleasedReturnValue([v15 dataSetArray]);
  id v17 = [v16 length];

  if (!v17)
  {
LABEL_10:
    id v28 = sub_1001768B4(1);
    dispatch_time_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
      sub_100194CA0();
    }

    int v26 = @"record parameter is invalid";
    uint64_t v27 = 4LL;
    goto LABEL_13;
  }

  OSStatus v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) credentials]);
  [v18 setIsActiveDevice:1];

  int v19 = objc_alloc(&OBJC_CLASS___THThreadNetworkCredentialsDataSet);
  __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) credentialsDataSet]);
  id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 dataSetArray]);
  int v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) credentials]);
  __int16 v23 = (void *)objc_claimAutoreleasedReturnValue([v22 userInfo]);
  uint64_t v24 = -[THThreadNetworkCredentialsDataSet initWithDataSetArray:userInfo:]( v19,  "initWithDataSetArray:userInfo:",  v21,  v23);
  id v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) credentials]);
  [v25 setCredentialsDataSet:v24];

  if (![*(id *)(a1 + 40) isFrozenRecord:*(void *)(a1 + 32)])
  {
    id v31 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) keyChainItemRepresentationForActiveDataSetRecordAddOperation]);
    id v30 = v31;
    if (v31)
    {
      OSStatus v32 = SecItemAdd(v31, 0LL);
      OSStatus v33 = v32;
      if (v32 == -25299)
      {
        id v34 = sub_1001768B4(1);
        uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
          sub_100194DFC();
        }

        uint64_t v36 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) keyChainQueryForActiveDataSetRecordUpdateOperation]);
        uint64_t v37 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) keyChainItemRepresentationForActiveDataSetRecordUpdateOperation]);
        OSStatus v33 = SecItemUpdate(v36, v37);
      }

      if (v33)
      {
        id v38 = sub_1001768B4(1);
        id v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          int v53 = 136315650;
          __int128 v54 = "-[THThreadNetworkCredentialsKeychainBackingStore updatePreferredNetworkWithNewDatasetRecord:completion:]_block_invoke";
          __int16 v55 = 1024;
          int v56 = 1301;
          __int16 v57 = 1024;
          LODWORD(v5_Block_object_dispose((const void *)(v1 - 176), 8) = v33;
          _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "%s:%d Error while adding/updating the record : (err=%d)",  (uint8_t *)&v53,  0x18u);
        }

        id v40 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v33,  0LL));
        id v41 = (void *)objc_claimAutoreleasedReturnValue( +[NSError storeError:underlyingError:description:]( &OBJC_CLASS___NSError,  "storeError:underlyingError:description:",  2LL,  v40,  @"Error while adding/updating the record"));
        (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
        goto LABEL_24;
      }

      if ([*(id *)(a1 + 40) updatePreferredNetworkEntry:*(void *)(a1 + 32)])
      {
        uint64_t v44 = *(void *)(a1 + 48);
        id v40 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) computedUniqueIdentifier]);
        (*(void (**)(uint64_t, const __CFDictionary *, void, void))(v44 + 16))( v44,  v40,  *(void *)(a1 + 32),  0LL);
        goto LABEL_29;
      }

      id v45 = sub_1001768B4(1);
      uint64_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
        sub_100194D88();
      }

      if (v32 != -25299)
      {
        std::string v47 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) network]);
        uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) borderAgent]);
        id v40 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue( +[THThreadNetworkCredentialsActiveDataSetRecord keyChainQueryForDeleteActiveDataSetOperationForNetworkAndBorderAgent:borderAgent:]( &OBJC_CLASS___THThreadNetworkCredentialsActiveDataSetRecord,  "keyChainQueryForDeleteActiveDataSetOperationForNetworkAndBorderAgent:borderAgent:",  v47,  v48));

        OSStatus v49 = SecItemDelete(v40);
        id v50 = sub_1001768B4(1);
        uint64_t v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
        if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR)) {
          sub_100194D14();
        }

        if (v49)
        {
          id v41 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v49,  0LL));
          char v52 = (void *)objc_claimAutoreleasedReturnValue( +[NSError storeError:underlyingError:description:]( &OBJC_CLASS___NSError,  "storeError:underlyingError:description:",  2LL,  v41,  @"Error while adding/updating the record"));
          (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();

LABEL_24:
LABEL_29:

          goto LABEL_14;
        }
      }

      id v42 = @"No preferred network found";
      uint64_t v43 = 10LL;
    }

    else
    {
      id v42 = @"Bad network parameter";
      uint64_t v43 = 4LL;
    }

    id v40 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  v43,  v42));
    (*(void (**)(void, void, void, const __CFDictionary *))(*(void *)(a1 + 48) + 16LL))( *(void *)(a1 + 48),  0LL,  0LL,  v40);
    goto LABEL_29;
  }

  int v26 = @"Can not store frozen credentials";
  uint64_t v27 = 31LL;
LABEL_13:
  id v30 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  v27,  v26));
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
LABEL_14:
}

void sub_10017DA44(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (!v2) {
    goto LABEL_7;
  }
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 dataSetArray]);
  if (!v3) {
    goto LABEL_7;
  }
  OSStatus v4 = (void *)v3;
  int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSetArray]);
  if (![v5 length])
  {

LABEL_7:
    id v9 = 0LL;
    goto LABEL_8;
  }

  id v6 = *(void **)(a1 + 40);
  __int16 v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSetArray]);
  id v13 = 0LL;
  unsigned __int8 v8 = [v6 areValidDataSetTLVs:v7 creds:&v13];
  id v9 = v13;

  if ((v8 & 1) != 0)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    goto LABEL_11;
  }

void sub_10017DC94(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (!v2) {
    goto LABEL_7;
  }
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 dataSetArray]);
  if (!v3) {
    goto LABEL_7;
  }
  OSStatus v4 = (void *)v3;
  int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSetArray]);
  if (![v5 length])
  {

LABEL_7:
    id v9 = 0LL;
    goto LABEL_8;
  }

  id v6 = *(void **)(a1 + 40);
  __int16 v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSetArray]);
  id v16 = 0LL;
  unsigned __int8 v8 = [v6 areValidDataSetTLVs:v7 creds:&v16];
  id v9 = v16;

  if ((v8 & 1) != 0)
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    void v14[2] = sub_10017DE60;
    void v14[3] = &unk_1002B5160;
    id v10 = *(void **)(a1 + 40);
    id v15 = *(id *)(a1 + 48);
    [v10 storeThreadCredentialActiveDataSetRecord:v9 waitForSync:0 completion:v14];
    __int16 v11 = v15;
    goto LABEL_11;
  }

uint64_t sub_10017DE60(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10017DF3C(uint64_t a1)
{
  id v2 = sub_1001768B4(1);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    OSStatus v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) network]);
    int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 networkName]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) network]);
    __int16 v7 = (void *)objc_claimAutoreleasedReturnValue([v6 extendedPANID]);
    unsigned __int8 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) computedUniqueIdentifier]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) keychainAccessGroup]);
    *(_DWORD *)std::string buf = 136316418;
    unsigned int v106 = "-[THThreadNetworkCredentialsKeychainBackingStore storeThreadCredentialActiveDataSetRecord:waitForSync:complet"
           "ion:]_block_invoke";
    __int16 v107 = 1024;
    int v108 = 1387;
    __int16 v109 = 2112;
    unsigned int v110 = v5;
    __int16 v111 = 2112;
    int v112 = v7;
    __int16 v113 = 2112;
    unsigned int v114 = v8;
    __int16 v115 = 2112;
    unsigned int v116 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s:%d:Request to store credential (networkName=%@, xpanid=%@, uuid = %@, keychainaccessgroup : %@",  buf,  0x3Au);
  }

  id v10 = *(void **)(a1 + 32);
  if (!v10) {
    goto LABEL_10;
  }
  uint64_t v11 = objc_claimAutoreleasedReturnValue([v10 credentialsDataSet]);
  if (!v11) {
    goto LABEL_10;
  }
  id v12 = (void *)v11;
  id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) credentialsDataSet]);
  uint64_t v14 = objc_claimAutoreleasedReturnValue([v13 dataSetArray]);
  if (!v14)
  {

    goto LABEL_10;
  }

  id v15 = (void *)v14;
  id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) credentialsDataSet]);
  id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 dataSetArray]);
  id v18 = [v17 length];

  if (!v18)
  {
LABEL_10:
    id v29 = sub_1001768B4(1);
    id v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      sub_100194E70();
    }

    uint64_t v27 = @"record parameter is invalid";
    uint64_t v28 = 4LL;
    goto LABEL_13;
  }

  int v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) credentials]);
  [v19 setIsActiveDevice:1];

  __int16 v20 = objc_alloc(&OBJC_CLASS___THThreadNetworkCredentialsDataSet);
  id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) credentialsDataSet]);
  int v22 = (void *)objc_claimAutoreleasedReturnValue([v21 dataSetArray]);
  __int16 v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) credentials]);
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v23 userInfo]);
  id v25 = -[THThreadNetworkCredentialsDataSet initWithDataSetArray:userInfo:]( v20,  "initWithDataSetArray:userInfo:",  v22,  v24);
  int v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) credentials]);
  [v26 setCredentialsDataSet:v25];

  if ([*(id *)(a1 + 40) isFrozenRecord:*(void *)(a1 + 32)])
  {
    uint64_t v27 = @"Can not store frozen credentials";
    uint64_t v28 = 31LL;
LABEL_13:
    id v31 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  v28,  v27));
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    goto LABEL_14;
  }

  OSStatus v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) keychainAccessGroup]);
  unsigned int v33 = [v32 isEqualToString:@"0000000000"];

  if (v33)
  {
    id v34 = sub_1001768B4(1);
    uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
    {
      uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) network]);
      uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v36 networkName]);
      id v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) network]);
      id v39 = (void *)objc_claimAutoreleasedReturnValue([v38 extendedPANID]);
      id v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) computedUniqueIdentifier]);
      id v41 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) keychainAccessGroup]);
      *(_DWORD *)std::string buf = 136316418;
      unsigned int v106 = "-[THThreadNetworkCredentialsKeychainBackingStore storeThreadCredentialActiveDataSetRecord:waitForSync:compl"
             "etion:]_block_invoke";
      __int16 v107 = 1024;
      int v108 = 1410;
      __int16 v109 = 2112;
      unsigned int v110 = v37;
      __int16 v111 = 2112;
      int v112 = v39;
      __int16 v113 = 2112;
      unsigned int v114 = v40;
      __int16 v115 = 2112;
      unsigned int v116 = v41;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_INFO,  "%s:%d:Request to store INTERNAL credential (networkName=%@, xpanid=%@, uuid = %@, keychainaccessgroup : %@",  buf,  0x3Au);
    }

    id v42 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) getRecordForPreferredNetwork:0 anyDsFormat:0]);
    id v31 = v42;
    if (!v42) {
      goto LABEL_49;
    }
    uint64_t v43 = objc_claimAutoreleasedReturnValue(-[__CFDictionary credentialsDataSet](v42, "credentialsDataSet"));
    if (v43)
    {
      uint64_t v44 = (void *)v43;
      uint64_t v45 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) credentialsDataSet]);
      if (v45)
      {
        uint64_t v46 = (void *)v45;
        std::string v47 = (void *)objc_claimAutoreleasedReturnValue(-[__CFDictionary credentialsDataSet](v31, "credentialsDataSet"));
        uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue([v47 dataSetArray]);
        if ([v48 length])
        {
          OSStatus v49 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) credentialsDataSet]);
          id v50 = (void *)objc_claimAutoreleasedReturnValue([v49 dataSetArray]);
          if ([v50 length])
          {
            char v101 = (void *)objc_claimAutoreleasedReturnValue(-[__CFDictionary credentialsDataSet](v31, "credentialsDataSet"));
            uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue([v101 dataSetArray]);
            char v52 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) credentialsDataSet]);
            char v99 = v49;
            int v53 = (void *)objc_claimAutoreleasedReturnValue([v52 dataSetArray]);
            unsigned int v103 = [v51 isEqualToData:v53];

            if (v103)
            {
              id v54 = sub_1001768B4(1);
              __int16 v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
              if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)std::string buf = 136315394;
                unsigned int v106 = "-[THThreadNetworkCredentialsKeychainBackingStore storeThreadCredentialActiveDataSetRecord:waitFor"
                       "Sync:completion:]_block_invoke";
                __int16 v107 = 1024;
                int v108 = 1422;
                _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_INFO,  "%s:%d: Record matches with preferred network",  buf,  0x12u);
              }

              id v56 = sub_1001768B4(1);
              __int16 v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
              if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)std::string buf = 136315394;
                unsigned int v106 = "-[THThreadNetworkCredentialsKeychainBackingStore storeThreadCredentialActiveDataSetRecord:waitFor"
                       "Sync:completion:]_block_invoke";
                __int16 v107 = 1024;
                int v108 = 1424;
                _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_INFO,  "%s:%d: prefRecord =======>",  buf,  0x12u);
              }

              [*(id *)(a1 + 40) thDumpActiveDatasetRecord:v31];
              id v58 = sub_1001768B4(1);
              __int16 v59 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);
              if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)std::string buf = 136315394;
                unsigned int v106 = "-[THThreadNetworkCredentialsKeychainBackingStore storeThreadCredentialActiveDataSetRecord:waitFor"
                       "Sync:completion:]_block_invoke";
                __int16 v107 = 1024;
                int v108 = 1427;
                _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_INFO,  "%s:%d: Incoming record =====>",  buf,  0x12u);
              }

              [*(id *)(a1 + 40) thDumpActiveDatasetRecord:*(void *)(a1 + 32)];
              uint64_t v60 = *(void *)(a1 + 48);
              __int16 v61 = (void *)objc_claimAutoreleasedReturnValue(-[__CFDictionary uniqueIdentifier](v31, "uniqueIdentifier"));
              xpc_object_t v62 = *(void (**)(void))(v60 + 16);
              goto LABEL_55;
            }

            goto LABEL_34;
          }
        }
      }
    }

void sub_10017EC58(void *a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = sub_1001768B4(1);
  OSStatus v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[4];
    *(_DWORD *)std::string buf = 138412290;
    uint64_t v14 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Request to fetch active dataset record with UUID %@",  buf,  0xCu);
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[THThreadNetworkCredentialsActiveDataSetRecord keyChainQueryForFetchOneActiveDataSetRecordOperationForUniqueIdentifierWithKeychainAccessGroup:clientKeychainAccessGroup:]( &OBJC_CLASS___THThreadNetworkCredentialsActiveDataSetRecord,  "keyChainQueryForFetchOneActiveDataSetRecordOperationForUniqueIdentifierWithKeychainAccessGroup:client KeychainAccessGroup:",  a1[4],  a1[5]));
  __int16 v7 = (void *)a1[6];
  id v12 = 0LL;
  unsigned __int8 v8 = (void *)objc_claimAutoreleasedReturnValue([v7 _doFetchActiveDataSetRecords:v6 error:&v12]);
  id v9 = v12;
  uint64_t v10 = a1[7];
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v8 anyObject]);
  (*(void (**)(uint64_t, void *, id))(v10 + 16))(v10, v11, v9);

  objc_autoreleasePoolPop(v2);
}

void sub_10017EE80(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = sub_1001768B4(1);
  OSStatus v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) discriminatorId]);
    *(_DWORD *)std::string buf = 138412290;
    uint64_t v14 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Request to fetch active dataset record with borderAgent %@",  buf,  0xCu);
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[THThreadNetworkCredentialsActiveDataSetRecord keyChainQueryForFetchActiveDataSetRecordOperationForBorderAgentWithKeychainAccessGroup:clientKeychainAccessGroup:]( &OBJC_CLASS___THThreadNetworkCredentialsActiveDataSetRecord,  "keyChainQueryForFetchActiveDataSetRecordOperationForBorderAgentWithKeychainAccessGroup:clientKeychainAccessGroup:",  *(void *)(a1 + 32),  *(void *)(a1 + 40)));
  __int16 v7 = *(void **)(a1 + 48);
  id v12 = 0LL;
  unsigned __int8 v8 = (void *)objc_claimAutoreleasedReturnValue([v7 _doFetchActiveDataSetRecords:v6 error:&v12]);
  id v9 = v12;
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v8 anyObject]);
  (*(void (**)(uint64_t, void *, id))(v10 + 16))(v10, v11, v9);

  objc_autoreleasePoolPop(v2);
}

void sub_10017F0AC(void *a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = sub_1001768B4(1);
  OSStatus v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (const char *)a1[4];
    int v15 = 138412290;
    id v16 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Request to DELETE credential with identifier %@",  (uint8_t *)&v15,  0xCu);
  }

  id v6 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue( +[THThreadNetworkCredentialsActiveDataSetRecord keyChainQueryForDeleteActiveDataSetRecordOperationForUniqueIdentifierWithKeychainAccessGroup:clientKeychainAccessGroup:]( &OBJC_CLASS___THThreadNetworkCredentialsActiveDataSetRecord,  "keyChainQueryForDeleteActiveDataSetRecordOperationForUniqueIdentifierWithKeychainAcce ssGroup:clientKeychainAccessGroup:",  a1[4],  a1[5]));
  OSStatus v7 = SecItemDelete(v6);
  id v8 = sub_1001768B4(1);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = 136315394;
    id v16 = "-[THThreadNetworkCredentialsKeychainBackingStore deleteActiveDataSetRecordWithUniqueIdentifierWithKeychainAcce"
          "ssGroup:keychainAccessGroup:completion:]_block_invoke";
    __int16 v17 = 1024;
    OSStatus v18 = v7;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%s: GOT: (err=%d)", (uint8_t *)&v15, 0x12u);
  }

  if (v7)
  {
    uint64_t v10 = (__CFString *)SecCopyErrorMessageString(v7, 0LL);
    id v11 = sub_1001768B4(1);
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_100194AE4();
    }

    id v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v7,  0LL));
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSError storeError:underlyingError:description:]( &OBJC_CLASS___NSError,  "storeError:underlyingError:description:",  13LL,  v13,  v10));
    (*(void (**)(void))(a1[6] + 16LL))();
  }

  else
  {
    (*(void (**)(void))(a1[6] + 16LL))();
  }

  objc_autoreleasePoolPop(v2);
}

void sub_10017F394(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = sub_1001768B4(1);
  OSStatus v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) discriminatorId]);
    int v15 = 136315394;
    id v16 = "-[THThreadNetworkCredentialsKeychainBackingStore deleteActiveDataSetRecordForThreadBorderAgentWithKeychainAcce"
          "ssGroup:keychainAccessGroup:completion:]_block_invoke";
    __int16 v17 = 2112;
    OSStatus v18 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s: Request to DELETE credential with Ba %@",  (uint8_t *)&v15,  0x16u);
  }

  id v6 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue( +[THThreadNetworkCredentialsActiveDataSetRecord keyChainQueryForDeleteActiveDataSetOperationForThreadNetworkBorderAgentWithKeychainAccessGroup:clientKeychainAccessGroup:]( &OBJC_CLASS___THThreadNetworkCredentialsActiveDataSetRecord,  "keyChainQueryForDeleteActiveDataSetOperationForThreadNetworkBorderAgentWithKeychainAc cessGroup:clientKeychainAccessGroup:",  *(void *)(a1 + 32),  *(void *)(a1 + 40)));
  OSStatus v7 = SecItemDelete(v6);
  id v8 = sub_1001768B4(1);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = 136315394;
    id v16 = "-[THThreadNetworkCredentialsKeychainBackingStore deleteActiveDataSetRecordForThreadBorderAgentWithKeychainAcce"
          "ssGroup:keychainAccessGroup:completion:]_block_invoke";
    __int16 v17 = 1024;
    LODWORD(v1_Block_object_dispose((const void *)(v1 - 176), 8) = v7;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%s: GOT: (err=%d)", (uint8_t *)&v15, 0x12u);
  }

  if (v7)
  {
    uint64_t v10 = (__CFString *)SecCopyErrorMessageString(v7, 0LL);
    id v11 = sub_1001768B4(1);
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_100194F58();
    }

    id v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v7,  0LL));
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSError storeError:underlyingError:description:]( &OBJC_CLASS___NSError,  "storeError:underlyingError:description:",  12LL,  v13,  v10));
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  objc_autoreleasePoolPop(v2);
}

void sub_10017F9A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

id sub_10017F9E0(uint64_t a1)
{
  return [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) stopScan];
}

void sub_10017FDBC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

id sub_10017FDF4(uint64_t a1)
{
  return [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) stopScan];
}

void sub_10017FEEC(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = sub_1001768B4(1);
  OSStatus v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) networkName]);
    int v12 = 136315394;
    id v13 = "-[THThreadNetworkCredentialsKeychainBackingStore validateRecordWithMdnsScan:borderAgentID:completion:]_block_invoke";
    __int16 v14 = 2112;
    int v15 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s: Request to validate network with MDNS %@",  (uint8_t *)&v12,  0x16u);
  }

  if (([*(id *)(a1 + 40) checkWiFiStatus] & 1) == 0)
  {
    id v9 = @"Error : Device is not connected to the network";
    uint64_t v10 = 19LL;
LABEL_10:
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSError storeError:description:](&OBJC_CLASS___NSError, "storeError:description:", v10, v9));
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();

    goto LABEL_11;
  }

  if (([*(id *)(a1 + 40) checkIfNetworkMatchToMDNSScan:*(void *)(a1 + 32) borderAgentID:*(void *)(a1 + 48)] & 1) == 0)
  {
    id v9 = @"Thread network credentials does not match with any of the active thread networks around";
    uint64_t v10 = 20LL;
    goto LABEL_10;
  }

  id v6 = sub_1001768B4(1);
  OSStatus v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) networkName]);
    int v12 = 136315394;
    id v13 = "-[THThreadNetworkCredentialsKeychainBackingStore validateRecordWithMdnsScan:borderAgentID:completion:]_block_invoke";
    __int16 v14 = 2112;
    int v15 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s: Valid Thread network credentials, network name :  %@",  (uint8_t *)&v12,  0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
LABEL_11:
  objc_autoreleasePoolPop(v2);
}

void sub_10018016C(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = sub_1001768B4(1);
  OSStatus v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 136315394;
    uint64_t v46 = "-[THThreadNetworkCredentialsKeychainBackingStore checkIfRecordForPreferredNetworkIsPresentWithCompletion:]_block_invoke";
    __int16 v47 = 1024;
    int v48 = 1724;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s:%d: Request to check if there are any records for the preferred network exists",  buf,  0x12u);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) getPreferredNetwork:0]);
  id v6 = v5;
  if (!v5)
  {
    id v26 = sub_1001768B4(1);
    int v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v46 = "-[THThreadNetworkCredentialsKeychainBackingStore checkIfRecordForPreferredNetworkIsPresentWithCompletion:]_block_invoke";
      __int16 v47 = 1024;
      int v48 = 1729;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "%s:%d: No Preferred Network..", buf, 0x12u);
    }

    goto LABEL_11;
  }

  uint64_t v7 = objc_claimAutoreleasedReturnValue([v5 credentialsDataSetRecord]);
  if (v7)
  {
    id v8 = (void *)v7;
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v6 credentialsDataSetRecord]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 credentialsDataSet]);
    uint64_t v11 = objc_claimAutoreleasedReturnValue([v10 dataSetArray]);
    if (v11)
    {
      int v12 = (void *)v11;
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v6 credentialsDataSetRecord]);
      __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v13 credentialsDataSet]);
      uint64_t v15 = a1;
      id v16 = v2;
      __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([v14 dataSetArray]);
      id v43 = [v17 length];

      id v2 = v16;
      a1 = v15;

      if (v43)
      {
        id v18 = sub_1001768B4(1);
        int v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([v6 credentialsDataSetRecord]);
          id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 network]);
          int v22 = (void *)objc_claimAutoreleasedReturnValue([v21 networkName]);
          __int16 v23 = (void *)objc_claimAutoreleasedReturnValue([v6 credentialsDataSetRecord]);
          uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v23 credentialsDataSet]);
          id v25 = (void *)objc_claimAutoreleasedReturnValue([v24 dataSetArray]);
          *(_DWORD *)std::string buf = 136315906;
          uint64_t v46 = "-[THThreadNetworkCredentialsKeychainBackingStore checkIfRecordForPreferredNetworkIsPresentWithCompletion:]_block_invoke";
          __int16 v47 = 1024;
          int v48 = 1739;
          __int16 v49 = 2112;
          id v50 = v22;
          __int16 v51 = 2112;
          char v52 = v25;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "%s:%d: This preferred network entry has record associated with it, returning the same preferred network : %@, dataset : %@",  buf,  0x26u);
        }

void sub_100180F04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43)
{
}

int64_t sub_100180F78(id a1, id a2, id a3)
{
  id v4 = a3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a2 lastModificationDate]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 lastModificationDate]);

  id v7 = [v5 compare:v6];
  if (v7 == (id)1) {
    int64_t v8 = -1LL;
  }
  else {
    int64_t v8 = (int64_t)v7;
  }
  if (v7 == (id)-1LL) {
    return 1LL;
  }
  else {
    return v8;
  }
}

void sub_100180FF0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = sub_1001768B4(1);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) network]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 networkName]);
    int v7 = 136315650;
    int64_t v8 = "-[THThreadNetworkCredentialsKeychainBackingStore getRecordForPreferredNetwork:anyDsFormat:skipScan:]_block_invoke";
    __int16 v9 = 1024;
    int v10 = 1841;
    __int16 v11 = 2112;
    int v12 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s : %d : Updating preferred network with record : name : %@",  (uint8_t *)&v7,  0x1Cu);
  }

  [WeakRetained updateRecordToPreferredNetworkEntry:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) credentialsDataSetRecord:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)];
}

void sub_1001811BC(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = sub_1001768B4(1);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    LOWORD(v16) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Request to fetch Preferred Network Active Dataset Record with Any format",  (uint8_t *)&v16,  2u);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) getRecordForPreferredNetwork:0 anyDsFormat:1]);
  id v6 = sub_1001768B4(1);
  int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  int64_t v8 = v7;
  if (v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      __int16 v9 = (void *)objc_claimAutoreleasedReturnValue([v5 network]);
      int v10 = (void *)objc_claimAutoreleasedReturnValue([v9 networkName]);
      __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([v5 network]);
      int v12 = (void *)objc_claimAutoreleasedReturnValue([v11 extendedPANID]);
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v5 borderAgent]);
      __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v13 discriminatorId]);
      int v16 = 136316162;
      __int16 v17 = "-[THThreadNetworkCredentialsKeychainBackingStore retrievePreferredNetworkOfAnyDSFormatWithCompletion:]_block_invoke";
      __int16 v18 = 1024;
      int v19 = 1863;
      __int16 v20 = 2112;
      id v21 = v10;
      __int16 v22 = 2112;
      __int16 v23 = v12;
      __int16 v24 = 2112;
      id v25 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s : %d - Returning record (name=%@, xpanid=%@, baid=%@)",  (uint8_t *)&v16,  0x30u);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_100195280();
    }

    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  9LL,  @"No preferred network found"));
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  objc_autoreleasePoolPop(v2);
}

void sub_1001814A0(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = sub_1001768B4(1);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v16 = 136315394;
    __int16 v17 = "-[THThreadNetworkCredentialsKeychainBackingStore retrievePreferredNetworkWithCompletion:]_block_invoke";
    __int16 v18 = 1024;
    int v19 = 1873;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s:%d:Request to fetch Preferred Network Active Dataset Record",  (uint8_t *)&v16,  0x12u);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) getRecordForPreferredNetwork:0 anyDsFormat:0]);
  id v6 = sub_1001768B4(1);
  int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  int64_t v8 = v7;
  if (v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      __int16 v9 = (void *)objc_claimAutoreleasedReturnValue([v5 network]);
      int v10 = (void *)objc_claimAutoreleasedReturnValue([v9 networkName]);
      __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([v5 network]);
      int v12 = (void *)objc_claimAutoreleasedReturnValue([v11 extendedPANID]);
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v5 borderAgent]);
      __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v13 discriminatorId]);
      int v16 = 136316162;
      __int16 v17 = "-[THThreadNetworkCredentialsKeychainBackingStore retrievePreferredNetworkWithCompletion:]_block_invoke";
      __int16 v18 = 1024;
      int v19 = 1884;
      __int16 v20 = 2112;
      id v21 = v10;
      __int16 v22 = 2112;
      __int16 v23 = v12;
      __int16 v24 = 2112;
      id v25 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s : %d - Returning record (name=%@, xpanid=%@, baid=%@)",  (uint8_t *)&v16,  0x30u);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1001952F4();
    }

    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  9LL,  @"No preferred network found"));
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  objc_autoreleasePoolPop(v2);
}

void sub_1001817A8(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = sub_1001768B4(1);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v16 = 136315394;
    __int16 v17 = "-[THThreadNetworkCredentialsKeychainBackingStore retrievePreferredNetworkInternallyWithCompletion:]_block_invoke";
    __int16 v18 = 1024;
    int v19 = 1894;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s:%d:Request to fetch Preferred Network Active Dataset Record",  (uint8_t *)&v16,  0x12u);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) getRecordForPreferredNetwork:1 anyDsFormat:0]);
  id v6 = sub_1001768B4(1);
  int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  int64_t v8 = v7;
  if (v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      __int16 v9 = (void *)objc_claimAutoreleasedReturnValue([v5 network]);
      int v10 = (void *)objc_claimAutoreleasedReturnValue([v9 networkName]);
      __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([v5 network]);
      int v12 = (void *)objc_claimAutoreleasedReturnValue([v11 extendedPANID]);
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v5 borderAgent]);
      __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v13 discriminatorId]);
      int v16 = 136316162;
      __int16 v17 = "-[THThreadNetworkCredentialsKeychainBackingStore retrievePreferredNetworkInternallyWithCompletion:]_block_invoke";
      __int16 v18 = 1024;
      int v19 = 1905;
      __int16 v20 = 2112;
      id v21 = v10;
      __int16 v22 = 2112;
      __int16 v23 = v12;
      __int16 v24 = 2112;
      id v25 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s : %d - Returning record (name=%@, xpanid=%@, baid=%@)",  (uint8_t *)&v16,  0x30u);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_100195368();
    }

    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  9LL,  @"No preferred network found"));
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  objc_autoreleasePoolPop(v2);
}

void sub_100181AB0(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = sub_1001768B4(1);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v16 = 136315394;
    __int16 v17 = "-[THThreadNetworkCredentialsKeychainBackingStore retrievePreferredNetworkWithNoScanWithCompletion:]_block_invoke";
    __int16 v18 = 1024;
    int v19 = 1915;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s:%d:Request to fetch Preferred Network Active Dataset Record",  (uint8_t *)&v16,  0x12u);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) getRecordForPreferredNetwork:0 anyDsFormat:0 skipScan:1]);
  id v6 = sub_1001768B4(1);
  int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  int64_t v8 = v7;
  if (v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      __int16 v9 = (void *)objc_claimAutoreleasedReturnValue([v5 network]);
      int v10 = (void *)objc_claimAutoreleasedReturnValue([v9 networkName]);
      __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([v5 network]);
      int v12 = (void *)objc_claimAutoreleasedReturnValue([v11 extendedPANID]);
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v5 borderAgent]);
      __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v13 discriminatorId]);
      int v16 = 136316162;
      __int16 v17 = "-[THThreadNetworkCredentialsKeychainBackingStore retrievePreferredNetworkWithNoScanWithCompletion:]_block_invoke";
      __int16 v18 = 1024;
      int v19 = 1926;
      __int16 v20 = 2112;
      id v21 = v10;
      __int16 v22 = 2112;
      __int16 v23 = v12;
      __int16 v24 = 2112;
      id v25 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s : %d - Returning record (name=%@, xpanid=%@, baid=%@)",  (uint8_t *)&v16,  0x30u);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1001953DC();
    }

    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  9LL,  @"No preferred network found"));
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  objc_autoreleasePoolPop(v2);
}

void sub_100181FDC(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = sub_1001768B4(1);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v32 = 136315394;
    unsigned int v33 = "-[THThreadNetworkCredentialsKeychainBackingStore retrieveOrGeneratePreferredNetworkInternallyWithCompletion:]_block_invoke";
    __int16 v34 = 1024;
    int v35 = 1973;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s:%d:Request to fetch Preferred Network Active Dataset Record",  (uint8_t *)&v32,  0x12u);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) getRecordForPreferredNetwork:0 anyDsFormat:0]);
  id v6 = sub_1001768B4(1);
  int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  int64_t v8 = v7;
  if (!v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_100195694();
    }

    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  9LL,  @"No preferred network found"));
    int v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) generateCredentials]);
    uint64_t v5 = v16;
    if (!v16)
    {
      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
LABEL_27:

      goto LABEL_28;
    }

    __int16 v17 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue([v16 keyChainItemRepresentationForActiveDataSetRecordAddOperation]);
    __int16 v18 = v17;
    if (v17)
    {
      OSStatus v19 = SecItemAdd(v17, 0LL);
      if (v19 == -25299)
      {
        id v20 = sub_1001768B4(1);
        id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
          sub_100195620();
        }

        __int16 v22 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue([v5 keyChainQueryForActiveDataSetRecordUpdateOperation]);
        __int16 v23 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue( [v5 keyChainItemRepresentationForActiveDataSetRecordUpdateOperation]);
        OSStatus v19 = SecItemUpdate(v22, v23);
      }

      if (v19)
      {
        id v24 = sub_1001768B4(1);
        id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          int v32 = 136315650;
          unsigned int v33 = "-[THThreadNetworkCredentialsKeychainBackingStore retrieveOrGeneratePreferredNetworkInternallyWithComplet"
                "ion:]_block_invoke";
          __int16 v34 = 1024;
          int v35 = 2010;
          __int16 v36 = 1024;
          LODWORD(v37) = v19;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "%s:%d Error while adding/updating the record : (err=%d)",  (uint8_t *)&v32,  0x18u);
        }

        id v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v19,  0LL));
        id v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSError storeError:underlyingError:description:]( &OBJC_CLASS___NSError,  "storeError:underlyingError:description:",  2LL,  v26,  @"Error while adding/updating the record"));
        (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
        goto LABEL_25;
      }

      id v29 = *(void **)(a1 + 32);
      id v30 = (void *)objc_claimAutoreleasedReturnValue([v5 borderAgent]);
      id v26 = (void *)objc_claimAutoreleasedReturnValue([v29 getActiveDataSetRecord:v30]);

      if (([*(id *)(a1 + 32) storePreferredNetworkWithRecord:v26] & 1) == 0)
      {
        id v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  0LL,  0LL));
        id v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSError storeError:underlyingError:description:]( &OBJC_CLASS___NSError,  "storeError:underlyingError:description:",  2LL,  v27,  @"Error while adding preferred network entry"));
        (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();

LABEL_25:
        goto LABEL_26;
      }

      uint64_t v28 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
    }

    else
    {
      id v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  4LL,  @"Bad network parameter"));
      uint64_t v28 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
    }

    v28();
LABEL_26:

    goto LABEL_27;
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    __int16 v9 = (void *)objc_claimAutoreleasedReturnValue([v5 network]);
    int v10 = (void *)objc_claimAutoreleasedReturnValue([v9 networkName]);
    __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([v5 network]);
    int v12 = (void *)objc_claimAutoreleasedReturnValue([v11 extendedPANID]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v5 borderAgent]);
    __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v13 discriminatorId]);
    int v32 = 136316162;
    unsigned int v33 = "-[THThreadNetworkCredentialsKeychainBackingStore retrieveOrGeneratePreferredNetworkInternallyWithCompletion:]_block_invoke";
    __int16 v34 = 1024;
    int v35 = 2029;
    __int16 v36 = 2112;
    id v37 = v10;
    __int16 v38 = 2112;
    id v39 = v12;
    __int16 v40 = 2112;
    uint64_t v41 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s : %d - Returning record (name=%@, xpanid=%@, baid=%@)",  (uint8_t *)&v32,  0x30u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
LABEL_28:

  objc_autoreleasePoolPop(v2);
}

void sub_100182634(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = sub_1001768B4(1);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v38 = 136315394;
    id v39 = "-[THThreadNetworkCredentialsKeychainBackingStore addPreferredNetworkWithCompletionInternally:borderAgentID:ipV"
          "4NwSignature:ipv6NwSignature:wifiSSID:wifiPassword:completion:]_block_invoke";
    __int16 v40 = 1024;
    int v41 = 2040;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s:%d:Request to add Preferred Network",  (uint8_t *)&v38,  0x12u);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  [v5 getUUIDBytes:v51];

  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  [v6 getUUIDBytes:v50];

  uint64_t v7 = (uint64_t)*(id *)(a1 + 32);
  uint64_t v8 = (uint64_t)*(id *)(a1 + 40);
  id v9 = sub_100182BFC();
  int v10 = (__CFString *)objc_claimAutoreleasedReturnValue(v9);
  id v11 = sub_100182CCC();
  int v12 = (__CFString *)objc_claimAutoreleasedReturnValue(v11);
  id v13 = sub_1001768B4(1);
  __int16 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v16 = *(void *)(a1 + 40);
    int v38 = 136316418;
    id v39 = "-[THThreadNetworkCredentialsKeychainBackingStore addPreferredNetworkWithCompletionInternally:borderAgentID:ipV"
          "4NwSignature:ipv6NwSignature:wifiSSID:wifiPassword:completion:]_block_invoke";
    __int16 v40 = 1024;
    int v41 = 2054;
    __int16 v42 = 2112;
    uint64_t v43 = v15;
    __int16 v44 = 2112;
    uint64_t v45 = v16;
    __int16 v46 = 2112;
    __int16 v47 = v10;
    __int16 v48 = 2112;
    __int16 v49 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "%s:%d:Entered with signatures ipv4 : %@, ipv6 : %@, ssid : %@, pwd : %@",  (uint8_t *)&v38,  0x3Au);
  }

  __int16 v17 = *(__CFString **)(a1 + 48);
  if (!v17) {
    __int16 v17 = &stru_1002B93F8;
  }
  __int16 v18 = v17;

  OSStatus v19 = *(__CFString **)(a1 + 56);
  if (!v19) {
    OSStatus v19 = &stru_1002B93F8;
  }
  id v20 = v19;

  if (!(v7 | v8))
  {
    uint64_t v7 = objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v51, 16LL));
    uint64_t v21 = 16LL;
LABEL_15:
    uint64_t v8 = objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v50, v21));
    goto LABEL_16;
  }

  if (!v8)
  {
    uint64_t v21 = 0LL;
    goto LABEL_15;
  }

  if (!v7) {
    uint64_t v7 = objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v51, 0LL));
  }
LABEL_16:
  id v22 = sub_1001768B4(1);
  __int16 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
  {
    int v38 = 136316418;
    id v39 = "-[THThreadNetworkCredentialsKeychainBackingStore addPreferredNetworkWithCompletionInternally:borderAgentID:ipV"
          "4NwSignature:ipv6NwSignature:wifiSSID:wifiPassword:completion:]_block_invoke";
    __int16 v40 = 1024;
    int v41 = 2071;
    __int16 v42 = 2112;
    uint64_t v43 = v7;
    __int16 v44 = 2112;
    uint64_t v45 = v8;
    __int16 v46 = 2112;
    __int16 v47 = v18;
    __int16 v48 = 2112;
    __int16 v49 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "%s:%d:Random signatures ipv4 : %@, ipv6 : %@, ssid : %@, pwd : %@",  (uint8_t *)&v38,  0x3Au);
  }

  id v24 = [[THNetworkSignature alloc] initWithSignatures:v7 ipv6NwSignature:v8 wifSSID:v18 wifiPassword:v20];
  id v25 = sub_1001768B4(1);
  id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
  id v27 = v26;
  if (v24)
  {
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v24 ipv4NwSignature]);
      id v29 = (void *)objc_claimAutoreleasedReturnValue([v24 ipv6NwSignature]);
      int v38 = 136315906;
      id v39 = "-[THThreadNetworkCredentialsKeychainBackingStore addPreferredNetworkWithCompletionInternally:borderAgentID:i"
            "pV4NwSignature:ipv6NwSignature:wifiSSID:wifiPassword:completion:]_block_invoke";
      __int16 v40 = 1024;
      int v41 = 2083;
      __int16 v42 = 2112;
      uint64_t v43 = (uint64_t)v28;
      __int16 v44 = 2112;
      uint64_t v45 = (uint64_t)v29;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_INFO,  "%s:%d:Calculated signatures ipv4 : %@, ipv6 : %@",  (uint8_t *)&v38,  0x26u);
    }

    id v30 = *(void **)(a1 + 64);
    if (v30)
    {
      id v31 = (void *)objc_claimAutoreleasedReturnValue([v30 discriminatorId]);

      if (v31) {
        id v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) getActiveDataSetRecord:*(void *)(a1 + 64)]);
      }
    }

    else
    {
      id v31 = 0LL;
    }

    int v32 = -[THPreferredThreadNetwork initWithThreadNetwork:networkSignature:credentialsDataSetRecord:creationDate:lastModificationDate:userInfo:]( objc_alloc(&OBJC_CLASS___THPreferredThreadNetwork),  "initWithThreadNetwork:networkSignature:credentialsDataSetRecord:creationDate:lastModificationDate:userInfo:",  *(void *)(a1 + 80),  v24,  v31,  0LL,  0LL,  @"0000000000");
    if (v32)
    {
      if (*(void *)(a1 + 48) || *(void *)(a1 + 56))
      {
        if ([*(id *)(a1 + 72) storePreferred:v32])
        {
LABEL_32:
          (*(void (**)(void))(*(void *)(a1 + 88) + 16LL))();
LABEL_38:

          goto LABEL_39;
        }

        id v35 = sub_1001768B4(1);
        __int16 v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
          sub_100195874();
        }
      }

      else
      {
        id v37 = sub_1001768B4(1);
        __int16 v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
          sub_100195800();
        }
      }
    }

    else
    {
      id v33 = sub_1001768B4(1);
      __int16 v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
        sub_10019578C();
      }
    }

    __int16 v36 = (void *)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  35LL,  @"Unable to add preferred network"));
    (*(void (**)(void))(*(void *)(a1 + 88) + 16LL))();

    goto LABEL_38;
  }

  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
    sub_100195708();
  }

  id v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  35LL,  @"Unable to add preferred network"));
  (*(void (**)(void))(*(void *)(a1 + 88) + 16LL))();
LABEL_39:

  objc_autoreleasePoolPop(v2);
}

id sub_100182BFC()
{
  uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithCapacity:](&OBJC_CLASS___NSMutableString, "stringWithCapacity:", 0LL));
  uint32_t v1 = arc4random();
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s%d",  "ThSSID",  v1 + ((v1 / 0x7FFFFFFF) | ((v1 / 0x7FFFFFFF) << 31)) + 1));
  [v0 appendString:v2];

  id v3 = sub_1001768B4(1);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_1001958E8();
  }

  return v0;
}

id sub_100182CCC()
{
  uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithCapacity:](&OBJC_CLASS___NSMutableString, "stringWithCapacity:", 0LL));
  uint32_t v1 = arc4random();
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s%d",  "ThPWD",  v1 + ((v1 / 0x7FFFFFFF) | ((v1 / 0x7FFFFFFF) << 31)) + 1));
  [v0 appendString:v2];

  id v3 = sub_1001768B4(1);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10019594C();
  }

  return v0;
}

void sub_100182EA0(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = sub_1001768B4(1);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v37 = 136315394;
    int v38 = "-[THThreadNetworkCredentialsKeychainBackingStore deletePreferredNetworkForNetworkSignatureInternallyWithComple"
          "tion:ipv6NwSignature:wifiSSID:completion:]_block_invoke";
    __int16 v39 = 1024;
    *(_DWORD *)__int16 v40 = 2130;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s:%d:Request to delete Preferred Network for network signature",  (uint8_t *)&v37,  0x12u);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  [v5 getUUIDBytes:v46];

  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  [v6 getUUIDBytes:v45];

  id v7 = *(id *)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v9 = sub_1001768B4(1);
  int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    int v12 = *(void **)(a1 + 40);
    id v13 = *(__CFString **)(a1 + 48);
    int v37 = 136316162;
    int v38 = "-[THThreadNetworkCredentialsKeychainBackingStore deletePreferredNetworkForNetworkSignatureInternallyWithComple"
          "tion:ipv6NwSignature:wifiSSID:completion:]_block_invoke";
    __int16 v39 = 1024;
    *(_DWORD *)__int16 v40 = 2141;
    *(_WORD *)&v40[4] = 2112;
    *(void *)&v40[6] = v11;
    __int16 v41 = 2112;
    id v42 = v12;
    __int16 v43 = 2112;
    __int16 v44 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s:%d:Entered with signatures ipv4 : %@, ipv6 : %@, ssid : %@",  (uint8_t *)&v37,  0x30u);
  }

  __int16 v14 = *(__CFString **)(a1 + 48);
  if (!v14) {
    __int16 v14 = &stru_1002B93F8;
  }
  uint64_t v15 = v14;
  if (v8)
  {
    if (v7) {
      goto LABEL_9;
    }
  }

  else
  {
    id v8 = (id)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v45, 0LL));
    if (v7) {
      goto LABEL_9;
    }
  }

  id v7 = (id)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v46, 0LL));
LABEL_9:
  id v16 = [[THNetworkSignature alloc] initWithSignatures:v7 ipv6NwSignature:v8 wifSSID:v15 wifiPassword:&stru_1002B93F8];
  id v17 = sub_1001768B4(1);
  __int16 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
  OSStatus v19 = v18;
  if (!v16)
  {
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      int v37 = 136316162;
      int v38 = "-[THThreadNetworkCredentialsKeychainBackingStore deletePreferredNetworkForNetworkSignatureInternallyWithComp"
            "letion:ipv6NwSignature:wifiSSID:completion:]_block_invoke";
      __int16 v39 = 1024;
      *(_DWORD *)__int16 v40 = 2159;
      *(_WORD *)&v40[4] = 2112;
      *(void *)&v40[6] = v7;
      __int16 v41 = 2112;
      id v42 = v8;
      __int16 v43 = 2112;
      __int16 v44 = v15;
      _os_log_error_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "%s:%d:Error : Random signatures ipv4 : %@, ipv6 : %@, ssid : %@",  (uint8_t *)&v37,  0x30u);
    }

    __int16 v23 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  35LL,  @"Unable to add preferred network"));
    id v33 = *(void (**)(void))(*(void *)(a1 + 56) + 16LL);
    goto LABEL_28;
  }

  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    id v20 = (void *)objc_claimAutoreleasedReturnValue([v16 ipv4NwSignature]);
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v16 ipv6NwSignature]);
    int v37 = 136315906;
    int v38 = "-[THThreadNetworkCredentialsKeychainBackingStore deletePreferredNetworkForNetworkSignatureInternallyWithComple"
          "tion:ipv6NwSignature:wifiSSID:completion:]_block_invoke";
    __int16 v39 = 1024;
    *(_DWORD *)__int16 v40 = 2166;
    *(_WORD *)&v40[4] = 2112;
    *(void *)&v40[6] = v20;
    __int16 v41 = 2112;
    id v42 = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "%s:%d:Calculated signatures ipv4 : %@, ipv6 : %@",  (uint8_t *)&v37,  0x26u);
  }

  id v22 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue( +[THPreferredThreadNetwork keyChainQueryForDeletePreferredNetworkRecordForNetworkSignature:]( &OBJC_CLASS___THPreferredThreadNetwork,  "keyChainQueryForDeletePreferredNetworkRecordForNetworkSignature:",  v16));
  __int16 v23 = v22;
  if (v22)
  {
    OSStatus v24 = SecItemDelete(v22);
    id v25 = sub_1001768B4(1);
    id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      id v27 = (void *)objc_claimAutoreleasedReturnValue([v16 wifiSSID]);
      int v37 = 136315650;
      int v38 = "-[THThreadNetworkCredentialsKeychainBackingStore deletePreferredNetworkForNetworkSignatureInternallyWithComp"
            "letion:ipv6NwSignature:wifiSSID:completion:]_block_invoke";
      __int16 v39 = 2112;
      *(void *)__int16 v40 = v27;
      *(_WORD *)&v40[8] = 1024;
      *(_DWORD *)&v40[10] = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "%s: Preferred Network for network signature : %@, Deletion result :(err=%d)",  (uint8_t *)&v37,  0x1Cu);
    }

    if (v24)
    {
      uint64_t v28 = (__CFString *)SecCopyErrorMessageString(v24, 0LL);
      id v29 = sub_1001768B4(1);
      id v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
        sub_100195A24();
      }

      id v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v24,  0LL));
      int v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSError storeError:underlyingError:description:]( &OBJC_CLASS___NSError,  "storeError:underlyingError:description:",  11LL,  v31,  v28));
      (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();

      goto LABEL_29;
    }

    id v33 = *(void (**)(void))(*(void *)(a1 + 56) + 16LL);
LABEL_28:
    v33();
    goto LABEL_29;
  }

  id v34 = sub_1001768B4(1);
  id v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
    sub_1001959B0();
  }

  __int16 v36 = (void *)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  16LL,  @"Failed to create query to delete preferred network for networksignature"));
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();

LABEL_29:
  objc_autoreleasePoolPop(v2);
}

void sub_1001834D0(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = sub_1001768B4(1);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Request to DELETE Preferred Network", buf, 2u);
  }

  uint64_t v5 = &AWDPostMetric_ptr;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[THPreferredThreadNetwork keyChainQueryForFetchPreferredNetworkRecordsOperation]( &OBJC_CLASS___THPreferredThreadNetwork,  "keyChainQueryForFetchPreferredNetworkRecordsOperation"));
  if (!v6)
  {
    id v38 = sub_1001768B4(1);
    __int16 v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
      sub_100195A88();
    }

    id v9 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  16LL,  @"Failed to create query to fetch preferred networks"));
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    goto LABEL_43;
  }

  id v7 = *(void **)(a1 + 32);
  id v60 = 0LL;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 _doFetchPreferredNetworks:v6 error:&v60]);
  id v9 = v60;
  id v10 = sub_1001768B4(1);
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
    sub_100195C84(v8);
  }

  if (![v8 count])
  {
    id v40 = sub_1001768B4(1);
    __int16 v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
      sub_100195AFC();
    }

    goto LABEL_30;
  }

  __int128 v58 = 0u;
  __int128 v59 = 0u;
  __int128 v56 = 0u;
  __int128 v57 = 0u;
  obuint64_t j = v8;
  id v12 = [obj countByEnumeratingWithState:&v56 objects:v67 count:16];
  if (!v12) {
    goto LABEL_23;
  }
  id v13 = v12;
  uint64_t v14 = *(void *)v57;
  __int16 v51 = v6;
  char v52 = v2;
  id v50 = v9;
  int v53 = v8;
  while (2)
  {
    for (size_t i = 0LL; i != v13; size_t i = (char *)i + 1)
    {
      if (*(void *)v57 != v14) {
        objc_enumerationMutation(obj);
      }
      id v16 = *(void **)(*((void *)&v56 + 1) + 8LL * (void)i);
      id v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "credentialsDataSetRecord", v50, v51, v52));

      if (v17)
      {
        __int16 v18 = objc_alloc(&OBJC_CLASS___THFrozenThreadNetwork);
        OSStatus v19 = (void *)objc_claimAutoreleasedReturnValue([v16 credentialsDataSetRecord]);
        id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 credentialsDataSet]);
        uint64_t v21 = -[THFrozenThreadNetwork initWithCredentialsDataSet:creationDate:lastModificationDate:]( v18,  "initWithCredentialsDataSet:creationDate:lastModificationDate:",  v20,  0LL,  0LL);

        [*(id *)(a1 + 32) storeFrozenThreadNetwork:v21];
      }

      id v22 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue([v5[144] keyChainQueryForDeletePreferredNetworkRecord:v16]);
      __int16 v23 = v22;
      if (!v22)
      {
        id v42 = sub_1001768B4(1);
        __int16 v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
        if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
          sub_100195B70();
        }

        id v34 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  16LL,  @"Failed to create query to delete preferred networks"));
        (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
        goto LABEL_41;
      }

      OSStatus v24 = SecItemDelete(v22);
      id v25 = sub_1001768B4(1);
      id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        id v27 = (void *)objc_claimAutoreleasedReturnValue([v16 network]);
        __int16 v55 = v23;
        id v28 = v13;
        uint64_t v29 = v14;
        uint64_t v30 = a1;
        id v31 = v5;
        int v32 = (void *)objc_claimAutoreleasedReturnValue([v27 networkName]);
        *(_DWORD *)std::string buf = 136315650;
        xpc_object_t v62 = "-[THThreadNetworkCredentialsKeychainBackingStore deletePreferredNetworkWithCompletion:]_block_invoke";
        __int16 v63 = 2112;
        __int16 v64 = v32;
        __int16 v65 = 1024;
        OSStatus v66 = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "%s: Preferred Network : %@, Deletion result :(err=%d)",  buf,  0x1Cu);

        uint64_t v5 = v31;
        a1 = v30;
        uint64_t v14 = v29;
        id v13 = v28;
        __int16 v23 = v55;
      }

      if (v24)
      {
        id v34 = (__CFString *)SecCopyErrorMessageString(v24, 0LL);
        id v44 = sub_1001768B4(1);
        uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
        if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
          sub_100195A24();
        }

        __int16 v46 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v24,  0LL));
        __int16 v47 = (void *)objc_claimAutoreleasedReturnValue( +[NSError storeError:underlyingError:description:]( &OBJC_CLASS___NSError,  "storeError:underlyingError:description:",  11LL,  v46,  v34));
        (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();

LABEL_40:
LABEL_41:
        id v6 = v51;
        id v2 = v52;
        id v9 = v50;

        id v8 = v53;
        goto LABEL_42;
      }

      id v33 = (void *)objc_claimAutoreleasedReturnValue([v16 network]);
      id v34 = (__CFString *)objc_claimAutoreleasedReturnValue( +[THThreadNetworkCredentialsActiveDataSetRecord keyChainQueryForDeleteAllActiveDataSetOperationForThreadNetwork:]( &OBJC_CLASS___THThreadNetworkCredentialsActiveDataSetRecord,  "keyChainQueryForDeleteAllActiveDataSetOperationForThreadNetwork:",  v33));

      OSStatus v35 = SecItemDelete((CFDictionaryRef)v34);
      id v36 = sub_1001768B4(1);
      int v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 136315394;
        xpc_object_t v62 = "-[THThreadNetworkCredentialsKeychainBackingStore deletePreferredNetworkWithCompletion:]_block_invoke";
        __int16 v63 = 1024;
        LODWORD(v64) = v35;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "%s: GOT: (err=%d)", buf, 0x12u);
      }

      if (v35)
      {
        id v48 = sub_1001768B4(1);
        __int16 v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
        if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR)) {
          sub_100195BE4(v16);
        }

        __int16 v46 = (void *)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  32LL,  @"Failed to delete credentials records for frozen preferred network"));
        (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
        goto LABEL_40;
      }
    }

    id v13 = [obj countByEnumeratingWithState:&v56 objects:v67 count:16];
    id v6 = v51;
    id v2 = v52;
    id v9 = v50;
    id v8 = v53;
    if (v13) {
      continue;
    }
    break;
  }

void sub_100183BB4(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = sub_1001768B4(1);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v20) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Request to DELETE Preferred Network Entry",  (uint8_t *)&v20,  2u);
  }

  uint64_t v5 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue( +[THPreferredThreadNetwork keyChainQueryForDeletePreferredNetworkRecord:]( &OBJC_CLASS___THPreferredThreadNetwork,  "keyChainQueryForDeletePreferredNetworkRecord:",  *(void *)(a1 + 32)));
  id v6 = v5;
  if (v5)
  {
    OSStatus v7 = SecItemDelete(v5);
    id v8 = sub_1001768B4(1);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) network]);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 networkName]);
      int v20 = 136315650;
      uint64_t v21 = "-[THThreadNetworkCredentialsKeychainBackingStore deletePreferredNetworkEntryWithCompletion:completion:]_block_invoke";
      __int16 v22 = 2112;
      __int16 v23 = v11;
      __int16 v24 = 1024;
      OSStatus v25 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s: Preferred Network : %@, Deletion result :(err=%d)",  (uint8_t *)&v20,  0x1Cu);
    }

    if (v7)
    {
      id v12 = (__CFString *)SecCopyErrorMessageString(v7, 0LL);
      id v13 = sub_1001768B4(1);
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        sub_100195A24();
      }

      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v7,  0LL));
      id v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSError storeError:underlyingError:description:]( &OBJC_CLASS___NSError,  "storeError:underlyingError:description:",  11LL,  v15,  v12));
      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    }

    else
    {
      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    }
  }

  else
  {
    id v17 = sub_1001768B4(1);
    __int16 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      sub_100195D04();
    }

    OSStatus v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  16LL,  @"Failed to create query to delete preferred network entry"));
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  objc_autoreleasePoolPop(v2);
}

void sub_100183EF0(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = sub_1001768B4(1);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v33 = 136315394;
    id v34 = "-[THThreadNetworkCredentialsKeychainBackingStore deletePreferredAndFrozenThreadNetworksWithCompletion:]_block_invoke";
    __int16 v35 = 1024;
    int v36 = 2311;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s:%d: Request to DELETE all preferred and frozen networks",  (uint8_t *)&v33,  0x12u);
  }

  uint64_t v5 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue( +[THPreferredThreadNetwork keyChainQueryForDeleteAllPreferredNetworks]( &OBJC_CLASS___THPreferredThreadNetwork,  "keyChainQueryForDeleteAllPreferredNetworks"));
  id v6 = v5;
  if (!v5)
  {
    id v22 = sub_1001768B4(1);
    __int16 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
      sub_100195D78();
    }

    id v12 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  16LL,  @"Failed to create query to fetch preferred networks"));
    uint64_t v21 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
    goto LABEL_25;
  }

  OSStatus v7 = SecItemDelete(v5);
  if (v7)
  {
    OSStatus v8 = v7;
    if (v7 != -25300)
    {
      id v12 = (__CFString *)SecCopyErrorMessageString(v7, 0LL);
      id v24 = sub_1001768B4(1);
      OSStatus v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
        sub_100195DEC();
      }

      id v26 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v8,  0LL));
      id v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSError storeError:underlyingError:description:]( &OBJC_CLASS___NSError,  "storeError:underlyingError:description:",  32LL,  v26,  v12));
      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
LABEL_35:

LABEL_36:
      goto LABEL_37;
    }

    id v9 = sub_1001768B4(1);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_100196030();
    }
  }

  uint64_t v11 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue( +[THFrozenThreadNetwork keyChainQueryForDeleteFrozenThreadNetworkRecordsOperation]( &OBJC_CLASS___THFrozenThreadNetwork,  "keyChainQueryForDeleteFrozenThreadNetworkRecordsOperation"));
  id v12 = (__CFString *)v11;
  if (!v11)
  {
    id v28 = sub_1001768B4(1);
    uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
      sub_100195E60();
    }

    id v26 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  34LL,  @"Failed to create query to fetch frozen thread networks"));
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    goto LABEL_36;
  }

  OSStatus v13 = SecItemDelete(v11);
  if (v13)
  {
    OSStatus v14 = v13;
    if (v13 == -25300)
    {
      id v15 = sub_1001768B4(1);
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        sub_100195FBC();
      }

      goto LABEL_15;
    }

    id v26 = (__CFString *)SecCopyErrorMessageString(v13, 0LL);
    id v30 = sub_1001768B4(1);
    id v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      sub_100195ED4();
    }

    id v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v14,  0LL));
    int v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSError storeError:underlyingError:description:]( &OBJC_CLASS___NSError,  "storeError:underlyingError:description:",  33LL,  v27,  v26));
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();

    goto LABEL_35;
  }

void sub_1001843E4(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = sub_1001768B4(1);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v5 = 136315394;
    id v6 = "-[THThreadNetworkCredentialsKeychainBackingStore updatePreferredNetworkInternallyWithCompletion:]_block_invoke";
    __int16 v7 = 1024;
    int v8 = 2387;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s:%d:Request to update Preferred Network",  (uint8_t *)&v5,  0x12u);
  }

  (*(void (**)(void, id))(*(void *)(a1 + 40) + 16))( *(void *)(a1 + 40),  [*(id *)(a1 + 32) updatePreferredNetwork]);
  objc_autoreleasePoolPop(v2);
}

id sub_1001856EC(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_100185790(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  uint64_t v429 = 0LL;
  __int128 v427 = 0u;
  __int128 v428 = 0u;
  __int128 v426 = 0u;
  id v3 = sub_1001768B4(1);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_100197284();
  }

  int v5 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue( +[THThreadNetworkCredentialsStoreRecord keyChainQueryForDeleteAllCredentialsRecord]( &OBJC_CLASS___THThreadNetworkCredentialsStoreRecord,  "keyChainQueryForDeleteAllCredentialsRecord"));
  unsigned int v310 = v5;
  if (!v5)
  {
    id v270 = sub_1001768B4(1);
    char v271 = (os_log_s *)objc_claimAutoreleasedReturnValue(v270);
    if (os_log_type_enabled(v271, OS_LOG_TYPE_ERROR)) {
      sub_100196D10();
    }

    char v272 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  36LL,  @"Failed to create query to delete all com.apple.thread.network records"));
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    goto LABEL_270;
  }

  char v309 = v2;
  OSStatus v6 = SecItemDelete(v5);
  id v7 = sub_1001768B4(1);
  int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
    sub_100197210();
  }

  if (v6)
  {
    id v9 = sub_1001768B4(1);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_10019719C();
    }
  }

  v384 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v11 = &AWDPostMetric_ptr;
  uint64_t v342 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  char v387 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  unsigned int v334 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  v386 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  char v385 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) getNumberOfPrefEntriesForTheCount:200]);
  id v13 = sub_1001768B4(1);
  OSStatus v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 136315650;
    v436 = "-[THThreadNetworkCredentialsKeychainBackingStore cleanThreadKeychainDatabase:]_block_invoke";
    __int16 v437 = 1024;
    int v438 = 2712;
    __int16 v439 = 2048;
    id v440 = [v12 count];
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "%s:%d: Before 1st Pass, size of preferred networks (prefNwRecords) : %lu",  buf,  0x1Cu);
  }

  id v15 = [v12 count];
  *((void *)&v427 + 1) = v15;
  uint64_t v429 = 0LL;
  uint64_t v388 = a1;
  if (v12 && [v12 count])
  {
    __int128 v424 = 0u;
    __int128 v425 = 0u;
    __int128 v422 = 0u;
    __int128 v423 = 0u;
    obuint64_t j = v12;
    id v16 = [obj countByEnumeratingWithState:&v422 objects:v454 count:16];
    if (v16)
    {
      id v17 = v16;
      uint64_t v18 = *(void *)v423;
      do
      {
        for (size_t i = 0LL; i != v17; size_t i = (char *)i + 1)
        {
          if (*(void *)v423 != v18) {
            objc_enumerationMutation(obj);
          }
          int v20 = *(void **)(*((void *)&v422 + 1) + 8LL * (void)i);
          uint64_t v21 = (__CFString *)objc_claimAutoreleasedReturnValue([*(id *)(v388 + 32) getTheKeyFromPreferredNetworkEntry:v20]);
          id v22 = sub_1001768B4(1);
          __int16 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
          {
            id v24 = (void *)objc_claimAutoreleasedReturnValue([v20 network]);
            OSStatus v25 = (void *)objc_claimAutoreleasedReturnValue([v24 networkName]);
            id v26 = (void *)objc_claimAutoreleasedReturnValue([v20 network]);
            id v27 = (void *)objc_claimAutoreleasedReturnValue([v26 extendedPANID]);
            *(_DWORD *)std::string buf = 136316162;
            v436 = "-[THThreadNetworkCredentialsKeychainBackingStore cleanThreadKeychainDatabase:]_block_invoke";
            __int16 v437 = 1024;
            int v438 = 2732;
            __int16 v439 = 2112;
            id v440 = v25;
            __int16 v441 = 2112;
            id v442 = v27;
            __int16 v443 = 2112;
            v444 = v21;
            _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "%s:%d: item : (name : %@ | xpanid : %@), key : %@",  buf,  0x30u);
          }

          id v28 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v384, "objectForKeyedSubscript:", v21));
          if (v28)
          {
            uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v20 lastModificationDate]);
            id v30 = (void *)objc_claimAutoreleasedReturnValue([v28 lastModificationDate]);
            id v31 = [v29 compare:v30];

            if (v31 == (id)1)
            {
              -[NSMutableDictionary setObject:forKey:](v384, "setObject:forKey:", v20, v21);
              int v32 = v387;
              int v33 = v28;
            }

            else
            {
              int v32 = v387;
              int v33 = v20;
            }

            -[NSMutableArray addObject:](v32, "addObject:", v33);
          }

          else
          {
            -[NSMutableDictionary setObject:forKey:](v384, "setObject:forKey:", v20, v21);
          }
        }

        id v17 = [obj countByEnumeratingWithState:&v422 objects:v454 count:16];
      }

      while (v17);
    }

    id v34 = sub_1001768B4(1);
    __int16 v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
    {
      id v36 = -[NSMutableArray count](v387, "count");
      *(_DWORD *)std::string buf = 136315650;
      v436 = "-[THThreadNetworkCredentialsKeychainBackingStore cleanThreadKeychainDatabase:]_block_invoke";
      __int16 v437 = 1024;
      int v438 = 2756;
      __int16 v439 = 2048;
      id v440 = v36;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_INFO,  "%s:%d: End of 1st pass, size of cleanUpPreferredList : %lu ",  buf,  0x1Cu);
    }

    int v37 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allValues](v384, "allValues"));
    id v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](&OBJC_CLASS___NSMutableArray, "arrayWithArray:", v37));

    id v39 = sub_1001768B4(1);
    id v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
    {
      id v41 = [v38 count];
      *(_DWORD *)std::string buf = 136315650;
      v436 = "-[THThreadNetworkCredentialsKeychainBackingStore cleanThreadKeychainDatabase:]_block_invoke";
      __int16 v437 = 1024;
      int v438 = 2759;
      __int16 v439 = 2048;
      id v440 = v41;
      _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_INFO,  "%s:%d: Before 2nd pass, size of keepPreferredList : %lu ",  buf,  0x1Cu);
    }

    -[NSMutableDictionary removeAllObjects](v384, "removeAllObjects");
    __int128 v420 = 0u;
    __int128 v421 = 0u;
    __int128 v418 = 0u;
    __int128 v419 = 0u;
    id v42 = v38;
    id v335 = v42;
    id obja = [v42 countByEnumeratingWithState:&v418 objects:v453 count:16];
    if (obja)
    {
      uint64_t v359 = *(void *)v419;
      uint64_t v315 = 136316418LL;
      do
      {
        for (uint64_t j = 0LL; j != obja; uint64_t j = (char *)j + 1)
        {
          if (*(void *)v419 != v359) {
            objc_enumerationMutation(v335);
          }
          id v44 = *(void **)(*((void *)&v418 + 1) + 8LL * (void)j);
          uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v44 networkSignature]);
          __int16 v46 = (void *)objc_claimAutoreleasedReturnValue([v45 wifiPassword]);
          if ([v46 isEqualToString:@"ApplePreferredNetworkRecordLabel"])
          {
          }

          else
          {
            __int16 v47 = (void *)objc_claimAutoreleasedReturnValue([v44 networkSignature]);
            id v48 = (void *)objc_claimAutoreleasedReturnValue([v47 wifiPassword]);
            id v49 = [v48 length];

            if (v49)
            {
              -[NSMutableArray addObject:](v387, "addObject:", v44);
              -[NSMutableArray addObject:](v342, "addObject:", v44);
              [*(id *)(v388 + 32) dumpPreferredNetwork:v44];
              id v50 = sub_1001768B4(1);
              __int16 v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
              if (!os_log_type_enabled(v51, OS_LOG_TYPE_ERROR)) {
                goto LABEL_74;
              }
              char v367 = (void *)objc_claimAutoreleasedReturnValue([v44 networkSignature]);
              char v52 = (void *)objc_claimAutoreleasedReturnValue([v367 ipv4NwSignature]);
              int v53 = (void *)objc_claimAutoreleasedReturnValue([v44 networkSignature]);
              id v54 = (void *)objc_claimAutoreleasedReturnValue([v53 ipv6NwSignature]);
              __int16 v55 = (void *)objc_claimAutoreleasedReturnValue([v44 networkSignature]);
              __int128 v56 = (void *)objc_claimAutoreleasedReturnValue([v55 wifiSSID]);
              __int128 v57 = &stru_1002B93F8;
              if (v56)
              {
                char v314 = (__CFString *)objc_claimAutoreleasedReturnValue([v44 networkSignature]);
                __int128 v57 = (const __CFString *)objc_claimAutoreleasedReturnValue(-[__CFString wifiSSID](v314, "wifiSSID"));
                char v313 = (__CFString *)v57;
              }

              __int128 v58 = (void *)objc_claimAutoreleasedReturnValue([v44 networkSignature]);
              __int128 v59 = (void *)objc_claimAutoreleasedReturnValue([v58 wifiPassword]);
              *(_DWORD *)std::string buf = 136316418;
              v436 = "-[THThreadNetworkCredentialsKeychainBackingStore cleanThreadKeychainDatabase:]_block_invoke";
              __int16 v437 = 1024;
              int v438 = 2811;
              __int16 v439 = 2112;
              id v440 = v52;
              __int16 v441 = 2112;
              id v442 = v54;
              __int16 v443 = 2112;
              v444 = v57;
              __int16 v445 = 2112;
              id v446 = v59;
              _os_log_error_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_ERROR,  "%s:%d Label is not equal to constant - ApplePreferredNetworkRecordLabel : ipv4 signature : %@, ipv6 sign ature : %@ , ssid : %@, pwd : %@",  buf,  0x3Au);

              if (!v56) {
                goto LABEL_68;
              }

              id v60 = v314;
              goto LABEL_67;
            }
          }

          id v61 = sub_1001768B4(1);
          xpc_object_t v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
          if (os_log_type_enabled(v62, OS_LOG_TYPE_INFO))
          {
            __int16 v63 = (void *)objc_claimAutoreleasedReturnValue([v44 network]);
            v368 = (void *)objc_claimAutoreleasedReturnValue([v63 networkName]);
            __int16 v64 = (void *)objc_claimAutoreleasedReturnValue([v44 network]);
            __int16 v65 = (void *)objc_claimAutoreleasedReturnValue([v64 extendedPANID]);
            OSStatus v66 = (void *)objc_claimAutoreleasedReturnValue([v44 networkSignature]);
            __int16 v67 = (void *)objc_claimAutoreleasedReturnValue([v66 wifiSSID]);
            id v350 = v63;
            char v343 = v64;
            if (v67)
            {
              char v323 = (void *)objc_claimAutoreleasedReturnValue([v44 networkSignature]);
              id v68 = (const __CFString *)objc_claimAutoreleasedReturnValue([v323 wifiSSID]);
              uint64_t v318 = (__CFString *)v68;
            }

            else
            {
              id v68 = &stru_1002B93F8;
            }

            char v69 = (void *)objc_claimAutoreleasedReturnValue([v44 credentialsDataSetRecord]);
            unsigned int v70 = (void *)objc_claimAutoreleasedReturnValue([v44 networkSignature]);
            char v71 = (void *)objc_claimAutoreleasedReturnValue([v70 wifiPassword]);
            if (v71)
            {
              unsigned int v328 = (void *)objc_claimAutoreleasedReturnValue([v44 networkSignature]);
              char v320 = (__CFString *)objc_claimAutoreleasedReturnValue([v328 wifiPassword]);
              uint64_t v72 = v320;
            }

            else
            {
              uint64_t v72 = @"EMPTY LABEL";
            }

            *(_DWORD *)std::string buf = 136316674;
            v436 = "-[THThreadNetworkCredentialsKeychainBackingStore cleanThreadKeychainDatabase:]_block_invoke";
            __int16 v437 = 1024;
            int v438 = 2790;
            __int16 v439 = 2112;
            id v440 = v368;
            __int16 v441 = 2112;
            id v442 = v65;
            __int16 v443 = 2112;
            v444 = v68;
            __int16 v445 = 2048;
            id v446 = v69;
            __int16 v447 = 2112;
            v448 = v72;
            _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_INFO,  "%s:%d: No network signature modification is needed for this item : (name : %@ | xpanid : %@), ssid : %@, D S Record = %p, pwd = %@",  buf,  0x44u);
            if (v71)
            {
            }

            if (v67)
            {
            }
          }

          char v73 = (void *)objc_claimAutoreleasedReturnValue([v44 credentialsDataSetRecord]);
          if (v73)
          {
            id v74 = (void *)objc_claimAutoreleasedReturnValue([v44 credentialsDataSetRecord]);
            -[NSMutableArray addObject:](v385, "addObject:", v74);

            id v75 = sub_1001768B4(1);
            __int16 v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v75);
            if (!os_log_type_enabled(v51, OS_LOG_TYPE_INFO)) {
              goto LABEL_74;
            }
            id v76 = (void *)objc_claimAutoreleasedReturnValue([v44 network]);
            char v369 = (void *)objc_claimAutoreleasedReturnValue([v76 networkName]);
            char v77 = (void *)objc_claimAutoreleasedReturnValue([v44 network]);
            id v78 = (void *)objc_claimAutoreleasedReturnValue([v77 extendedPANID]);
            char v79 = (void *)objc_claimAutoreleasedReturnValue([v44 networkSignature]);
            id v80 = (void *)objc_claimAutoreleasedReturnValue([v79 wifiSSID]);
            id v351 = v76;
            if (v80)
            {
              char v317 = (void *)objc_claimAutoreleasedReturnValue([v44 networkSignature]);
              char v81 = (const __CFString *)objc_claimAutoreleasedReturnValue([v317 wifiSSID]);
              unsigned int v316 = (__CFString *)v81;
            }

            else
            {
              char v81 = &stru_1002B93F8;
            }

            char v87 = (void *)objc_claimAutoreleasedReturnValue([v44 credentialsDataSetRecord]);
            id v88 = (void *)objc_claimAutoreleasedReturnValue([v44 networkSignature]);
            char v89 = (__CFString *)objc_claimAutoreleasedReturnValue([v88 wifiPassword]);
            *(_DWORD *)std::string buf = 136316674;
            v436 = "-[THThreadNetworkCredentialsKeychainBackingStore cleanThreadKeychainDatabase:]_block_invoke";
            __int16 v437 = 1024;
            int v438 = 2801;
            __int16 v439 = 2112;
            id v440 = v369;
            __int16 v441 = 2112;
            id v442 = v78;
            __int16 v443 = 2112;
            v444 = v81;
            __int16 v445 = 2048;
            id v446 = v87;
            __int16 v447 = 2112;
            v448 = v89;
            _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_INFO,  "%s:%d: adding item to finalPreferredBARecordList - item : (name : %@ | xpanid : %@), ssid : %@, DS Record = %p, pwd = %@",  buf,  0x44u);

            if (v80)
            {
            }

            unsigned int v86 = v351;
            goto LABEL_73;
          }

          -[NSMutableArray addObject:](v342, "addObject:", v44);
          id v82 = sub_1001768B4(1);
          __int16 v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v82);
          if (!os_log_type_enabled(v51, OS_LOG_TYPE_ERROR)) {
            goto LABEL_74;
          }
          char v367 = (void *)objc_claimAutoreleasedReturnValue([v44 networkSignature]);
          char v52 = (void *)objc_claimAutoreleasedReturnValue([v367 ipv4NwSignature]);
          int v53 = (void *)objc_claimAutoreleasedReturnValue([v44 networkSignature]);
          id v54 = (void *)objc_claimAutoreleasedReturnValue([v53 ipv6NwSignature]);
          __int16 v55 = (void *)objc_claimAutoreleasedReturnValue([v44 networkSignature]);
          __int128 v56 = (void *)objc_claimAutoreleasedReturnValue([v55 wifiSSID]);
          uint64_t v83 = &stru_1002B93F8;
          if (v56)
          {
            uint64_t v312 = (__CFString *)objc_claimAutoreleasedReturnValue([v44 networkSignature]);
            uint64_t v83 = (const __CFString *)objc_claimAutoreleasedReturnValue(-[__CFString wifiSSID](v312, "wifiSSID"));
            char v311 = (__CFString *)v83;
          }

          id v84 = (void *)objc_claimAutoreleasedReturnValue([v44 networkSignature]);
          char v85 = (void *)objc_claimAutoreleasedReturnValue([v84 wifiPassword]);
          *(_DWORD *)std::string buf = 136316418;
          v436 = "-[THThreadNetworkCredentialsKeychainBackingStore cleanThreadKeychainDatabase:]_block_invoke";
          __int16 v437 = 1024;
          int v438 = 2796;
          __int16 v439 = 2112;
          id v440 = v52;
          __int16 v441 = 2112;
          id v442 = v54;
          __int16 v443 = 2112;
          v444 = v83;
          __int16 v445 = 2112;
          id v446 = v85;
          _os_log_error_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_ERROR,  "%s:%d DS Record is nil but Label is equal to constant - ApplePreferredNetworkRecordLabel or it is empty : ip v4 signature : %@, ipv6 signature : %@ , ssid : %@, pwd : %@",  buf,  0x3Au);

          if (v56)
          {

            id v60 = v312;
LABEL_67:
          }

void sub_100189020( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100189040(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

LABEL_33:
          if (v78 == (id)++v26)
          {
            uint64_t v18 = 1;
            id v78 = -[os_log_s countByEnumeratingWithState:objects:count:]( v17,  "countByEnumeratingWithState:objects:count:",  &v80,  v84,  16LL);
            if (v78) {
              goto LABEL_21;
            }
            id v15 = v17;
            id v12 = v70;
            uint64_t v11 = v71;
            goto LABEL_54;
          }
        }
      }

      uint64_t v18 = 1;
LABEL_53:
      id v15 = v17;
LABEL_54:
    }

    else
    {
      uint64_t v18 = 1;
    }
  }

  else
  {
    uint64_t v18 = 0;
  }

  return v18;
}

  p_rstd::string::pointer data = &rdata;
  sub_100006F6C(&p_rdata);
  return v9;
}

int64_t sub_100189C3C(id a1, id a2, id a3)
{
  id v4 = a3;
  int v5 = (void *)objc_claimAutoreleasedReturnValue([a2 creationDate]);
  OSStatus v6 = (void *)objc_claimAutoreleasedReturnValue([v4 creationDate]);

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

void sub_10018A084( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

id sub_10018A0BC(uint64_t a1)
{
  return [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) stopScan];
}

void sub_10018A608( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_10018A644(uint64_t a1)
{
  return [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) stopScan];
}

int64_t sub_10018C6B4(id a1, id a2, id a3)
{
  id v4 = a3;
  int v5 = (void *)objc_claimAutoreleasedReturnValue([a2 creationDate]);
  OSStatus v6 = (void *)objc_claimAutoreleasedReturnValue([v4 creationDate]);

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

int64_t sub_10019002C(id a1, id a2, id a3)
{
  id v4 = a3;
  int v5 = (void *)objc_claimAutoreleasedReturnValue([a2 lastModificationDate]);
  OSStatus v6 = (void *)objc_claimAutoreleasedReturnValue([v4 lastModificationDate]);

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

int64_t sub_1001903E8(id a1, id a2, id a3)
{
  id v4 = a3;
  int v5 = (void *)objc_claimAutoreleasedReturnValue([a2 lastModificationDate]);
  OSStatus v6 = (void *)objc_claimAutoreleasedReturnValue([v4 lastModificationDate]);

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

id sub_100192F24()
{
  id v0 = sub_100193B98();
  uint32_t v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  id v2 = sub_1001768B4(1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v1 substringToIndex:16]);
    int v7 = 138412546;
    int v8 = v4;
    __int16 v9 = 2112;
    id v10 = v1;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Generated new BAID: %@, full string: %@",  (uint8_t *)&v7,  0x16u);
  }

  int v5 = (void *)objc_claimAutoreleasedReturnValue([v1 substringToIndex:16]);
  return v5;
}

uint64_t sub_100193018(int a1, int a2)
{
  return arc4random() % (a2 - a1 + 1) + a1;
}

id sub_1001937E4()
{
  id v0 = sub_100193B98();
  uint32_t v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  id v2 = sub_1001768B4(1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v1 substringToIndex:16]);
    int v7 = 138412546;
    int v8 = v4;
    __int16 v9 = 2112;
    id v10 = v1;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Generated new XPANID: %@, full string: %@",  (uint8_t *)&v7,  0x16u);
  }

  int v5 = (void *)objc_claimAutoreleasedReturnValue([v1 substringToIndex:16]);
  return v5;
}

NSData *sub_1001938D8()
{
  id v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](&OBJC_CLASS___NSMutableData, "dataWithLength:", 16LL));
  id v1 = [v0 length];
  id v2 = v0;
  if (SecRandomCopyBytes(kSecRandomDefault, (size_t)v1, [v2 mutableBytes]))
  {
    id v9 = sub_1001768B4(1);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_10019A7F0();
    }

    __assert_rtn("generateNewNetworkKeyAsByteArray", "THThreadNetworkCredentialsKeychainBackingStore.m", 5723, "false");
  }

  id v3 = objc_alloc(&OBJC_CLASS___NSData);
  id v4 = v2;
  int v5 = -[NSData initWithBytes:length:]( v3,  "initWithBytes:length:",  [v4 bytes],  objc_msgSend(v4, "length"));
  id v6 = sub_1001768B4(1);
  int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    int v11 = 138412290;
    id v12 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "Generated the new Network Key :: %@ ",  (uint8_t *)&v11,  0xCu);
  }

  return v5;
}

id sub_100193A60()
{
  id v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithCapacity:](&OBJC_CLASS___NSMutableString, "stringWithCapacity:", 0LL));
  uint32_t v1 = arc4random();
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s%d",  "MyHome",  v1 + ((v1 / 0x7FFFFFFF) | ((v1 / 0x7FFFFFFF) << 31)) + 1));
  [v0 appendString:v2];

  id v3 = sub_1001768B4(1);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 138412290;
    int v7 = v0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Generated new Network Name: %@", buf, 0xCu);
  }

  return v0;
}

uint64_t sub_100193B80(void *a1, size_t a2)
{
  return 1LL;
}

id sub_100193B98()
{
  id v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  [v0 getUUIDBytes:v7];

  uint32_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v7, 16LL));
  sub_100159A78((unint64_t)v7, 16LL, v6, 0x24uLL, 0);
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v6));
  id v3 = sub_1001768B4(1);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10019A81C();
  }

  return v2;
}

id sub_100193C94()
{
  id v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  [v0 getUUIDBytes:v7];

  uint32_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v7, 16LL));
  id v2 = sub_1001768B4(1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    int v5 = 138412290;
    id v6 = v1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Generated new uuid_temp: %@", (uint8_t *)&v5, 0xCu);
  }

  return v1;
}

unint64_t sub_100193D74()
{
  id v0 = sub_100193C94();
  uint32_t v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  unint64_t v4 = 0LL;
  [v1 getBytes:&v4 length:8];
  unint64_t v4 = bswap64(v4);
  NSLog(@"Generated new XPANID Temp: %@, XPANID: 0x%016llx", v1, v4);
  unint64_t v2 = v4;

  return v2;
}

id sub_100193DD8()
{
  id v0 = sub_100193B98();
  uint32_t v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  id v2 = sub_1001768B4(1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    int v5 = 138412290;
    id v6 = v1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Generated new CC %@ ", (uint8_t *)&v5, 0xCu);
  }

  return v1;
}

id sub_100193E88()
{
  id v0 = sub_100193B98();
  uint32_t v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  id v2 = sub_1001768B4(1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    int v5 = 138412290;
    id v6 = v1;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Generated new Master Key %@ ",  (uint8_t *)&v5,  0xCu);
  }

  return v1;
}

id sub_100193F38(unsigned __int8 *a1, unsigned int a2)
{
  if (a1)
  {
    id v3 = a1;
    unint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableString stringWithCapacity:]( &OBJC_CLASS___NSMutableString,  "stringWithCapacity:",  2LL * a2));
    if (a2)
    {
      uint64_t v5 = a2;
      do
      {
        unsigned int v6 = *v3++;
        int v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%02lx", v6));
        [v4 appendString:v7];

        --v5;
      }

      while (v5);
    }

    int v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithString:](&OBJC_CLASS___NSString, "stringWithString:", v4));
  }

  else
  {
    int v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString string](&OBJC_CLASS___NSString, "string"));
  }

  return v8;
}

id sub_10019400C(uint64_t a1)
{
  uint64_t v1 = a1;
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithCapacity:](&OBJC_CLASS___NSMutableString, "stringWithCapacity:", a1));
  if (v1 >= 1)
  {
    do
    {
      objc_msgSend( v2,  "appendFormat:",  @"%C",  objc_msgSend( @"ABCDEFGHJKLMNPRSTUVWXY0123456789",  "characterAtIndex:",  arc4random()
                      % (unint64_t)[@"ABCDEFGHJKLMNPRSTUVWXY0123456789" length]));
      --v1;
    }

    while (v1);
  }

  return v2;
}

  ;
}

void sub_1001940C0(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

void sub_1001940E0( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

void sub_100194178( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

id sub_10019418C@<X0>(void *a1@<X0>, uint64_t x8_0@<X8>)
{
  *(void *)(v3 - memset(v10, 0, 24) = x8_0;
  return [a1 count];
}

void sub_100194194(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

  ;
}

  ;
}

void sub_1001941CC( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void sub_1001941F4( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

uint64_t sub_100194224()
{
  return v0;
}

void sub_100194230(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_10019423C()
{
}

void sub_1001942A0()
{
}

void sub_100194304()
{
}

void sub_100194368()
{
  v2[0] = 136315394;
  sub_1001941E0();
  sub_1000155C8((void *)&_mh_execute_header, v0, v1, "%s: Failed deleting thread credentials: %@", (uint8_t *)v2);
  sub_100008188();
}

void sub_1001943D8()
{
}

void sub_10019443C(os_log_s *a1, uint64_t a2, uint64_t a3)
{
  int v3 = 138412290;
  uint64_t v4 = 0LL;
  sub_100012A20( (void *)&_mh_execute_header,  a1,  a3,  "Retrieved credentials but did not get the dictionary !? %@",  (uint8_t *)&v3);
  sub_100008188();
}

void sub_1001944A8()
{
}

void sub_10019450C()
{
}

void sub_100194580()
{
  v2[0] = 136315650;
  sub_1001940B0();
  sub_1001940CC();
  sub_1001940C0( (void *)&_mh_execute_header,  v0,  v1,  "%s:%d:Retrieved Preferred Network but did not get an array!? %@",  (uint8_t *)v2);
  sub_1001941B0();
}

void sub_1001945F8()
{
}

void sub_10019465C()
{
}

void sub_1001946D0()
{
  v2[0] = 136315650;
  sub_1001940B0();
  sub_1001940CC();
  sub_1001940C0( (void *)&_mh_execute_header,  v0,  v1,  "%s:%d:Retrieved Frozen thread network but did not get an array!? %@",  (uint8_t *)v2);
  sub_1001941B0();
}

void sub_100194748()
{
}

void sub_100194774()
{
}

void sub_1001947E8()
{
}

void sub_10019485C(uint64_t a1)
{
}

void sub_1001948DC(uint64_t a1, os_log_s *a2)
{
  id v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(*(void *)a1 + 8)
                                                                                       + 40LL), "description")));
  uint64_t v4 = (const char *)[v3 UTF8String];
  uint64_t v6 = "(unknown error)";
  if (v4) {
    uint64_t v6 = v4;
  }
  int v7 = 136315138;
  int v8 = v6;
  sub_100012A20((void *)&_mh_execute_header, a2, v5, "Error: failed to retrieve (%s)\n", (uint8_t *)&v7);

  sub_1001941B0();
}

void sub_100194988()
{
}

void sub_1001949FC()
{
}

void sub_100194A70(os_log_s *a1, uint64_t a2, uint64_t a3)
{
  int v3 = 138412290;
  uint64_t v4 = @"Failed to retrieve all active border router records";
  sub_100012A20((void *)&_mh_execute_header, a1, a3, "Error : %@", (uint8_t *)&v3);
  sub_100008188();
}

void sub_100194AE4()
{
}

void sub_100194B48()
{
  v2[0] = 136315394;
  sub_1001941E0();
  sub_1000155C8((void *)&_mh_execute_header, v0, v1, "%s: Failed deleting thread credentials: %@", (uint8_t *)v2);
  sub_100008188();
}

void sub_100194BB8()
{
}

void sub_100194C2C()
{
}

void sub_100194CA0()
{
}

void sub_100194D14()
{
  sub_1001940E0( (void *)&_mh_execute_header,  v0,  v1,  "%s:%d Delete the local record result (error=%d)",  v2,  v3,  v4,  v5,  2u);
  sub_100008188();
}

void sub_100194D88()
{
}

void sub_100194DFC()
{
}

void sub_100194E70()
{
}

void sub_100194EE4()
{
  sub_100008178( (void *)&_mh_execute_header,  v0,  v1,  "%s:%d: Returning error : Incoming record doesn't match with the Preferred network =====>",  v2,  v3,  v4,  v5,  v6);
  sub_100008188();
}

void sub_100194F58()
{
  v2[0] = 136315394;
  sub_1001941E0();
  sub_1000155C8((void *)&_mh_execute_header, v0, v1, "%s: Failed deleting thread credentials: %@", (uint8_t *)v2);
  sub_100008188();
}

void sub_100194FC8()
{
}

void sub_10019503C()
{
}

void sub_1001950B0()
{
}

void sub_100195124()
{
}

void sub_100195198()
{
}

void sub_10019520C()
{
}

void sub_100195280()
{
}

void sub_1001952F4()
{
}

void sub_100195368()
{
}

void sub_1001953DC()
{
}

void sub_100195450(os_log_s *a1, uint64_t a2, uint64_t a3)
{
  int v3 = 136315138;
  uint64_t v4 = "-[THThreadNetworkCredentialsKeychainBackingStore storePreferredNetworkWithRecord:]";
  sub_100012A20((void *)&_mh_execute_header, a1, a3, "%s : Failed to create Network Signature", (uint8_t *)&v3);
  sub_100008188();
}

void sub_1001954C4(os_log_s *a1, uint64_t a2, uint64_t a3)
{
  int v3 = 136315138;
  uint64_t v4 = "-[THThreadNetworkCredentialsKeychainBackingStore storePreferredNetworkWithRecord:]";
  sub_100012A20((void *)&_mh_execute_header, a1, a3, "%s : Failed to create Network", (uint8_t *)&v3);
  sub_100008188();
}

void sub_100195538(os_log_s *a1, uint64_t a2, uint64_t a3)
{
  int v3 = 136315138;
  uint64_t v4 = "-[THThreadNetworkCredentialsKeychainBackingStore storePreferredNetworkWithRecord:]";
  sub_100012A20((void *)&_mh_execute_header, a1, a3, "%s : Stored Preferred Network", (uint8_t *)&v3);
  sub_100008188();
}

void sub_1001955AC(os_log_s *a1, uint64_t a2, uint64_t a3)
{
  int v3 = 136315138;
  uint64_t v4 = "-[THThreadNetworkCredentialsKeychainBackingStore storePreferredNetworkWithRecord:]";
  sub_100012A20((void *)&_mh_execute_header, a1, a3, "%s : Failed to create Preferred Network", (uint8_t *)&v3);
  sub_100008188();
}

void sub_100195620()
{
}

void sub_100195694()
{
}

void sub_100195708()
{
  v3[0] = 136315906;
  sub_1001940B0();
  sub_1001940CC();
  __int16 v4 = v0;
  uint64_t v5 = v1;
  sub_100194194( (void *)&_mh_execute_header,  v2,  (uint64_t)v2,  "%s:%d:Error : Random signatures ipv4 : %@, ipv6 : %@",  (uint8_t *)v3);
  sub_1001941B0();
}

void sub_10019578C()
{
}

void sub_100195800()
{
}

void sub_100195874()
{
}

void sub_1001958E8()
{
}

void sub_10019594C()
{
}

void sub_1001959B0()
{
}

void sub_100195A24()
{
}

void sub_100195A88()
{
}

void sub_100195AFC()
{
}

void sub_100195B70()
{
}

void sub_100195BE4(void *a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([a1 network]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 networkName]);
  sub_1001940B0();
  sub_1001940CC();
  sub_100128350( (void *)&_mh_execute_header,  v3,  v4,  "%s:%d: Failed deleting thread credentials for delete preferred network : %@",  v5,  v6,  v7,  v8,  2u);

  sub_100128340();
}

void sub_100195C84(void *a1)
{
  sub_100128350( (void *)&_mh_execute_header,  v1,  v2,  "%s : %d - Preferred Networks in Database for deletiouint64_t n = %lu",  v3,  v4,  v5,  v6,  2u);
  sub_100194104();
}

void sub_100195D04()
{
}

void sub_100195D78()
{
}

void sub_100195DEC()
{
}

void sub_100195E60()
{
}

void sub_100195ED4()
{
}

void sub_100195F48()
{
}

void sub_100195FBC()
{
}

void sub_100196030()
{
}

void sub_1001960A4()
{
}

void sub_100196118()
{
}

void sub_10019618C()
{
  *(_DWORD *)uint64_t v4 = 136315906;
  sub_1001940B0();
  *(_DWORD *)&v4[7] = 2420;
  v4[9] = v0;
  int v5 = v1;
  __int16 v6 = 2112;
  uint64_t v7 = v2;
  sub_100194230( (void *)&_mh_execute_header,  v3,  (uint64_t)v3,  "%s:%d: Failed to create query to fetch number of %d records for keychainAccessGroup : %@",  (uint8_t *)v4);
  sub_1001941B0();
}

void sub_10019621C()
{
}

void sub_100196290()
{
  sub_1001940E0( (void *)&_mh_execute_header,  v0,  v1,  "%s:%d: Deleting all records for com.apple.thread.dataset, Deletion result :(err=%d)",  v2,  v3,  v4,  v5,  2u);
  sub_100008188();
}

void sub_100196304(void *a1, void *a2, os_log_s *a3)
{
  id v17 = (void *)objc_claimAutoreleasedReturnValue([a1 network]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v17 networkName]);
  id v16 = (void *)objc_claimAutoreleasedReturnValue([a1 network]);
  uint8_t v6 = (void *)objc_claimAutoreleasedReturnValue([v16 extendedPANID]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([a1 borderAgent]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 discriminatorId]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([a2 network]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 networkName]);
  int v11 = (void *)objc_claimAutoreleasedReturnValue([a2 network]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 extendedPANID]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([a2 borderAgent]);
  OSStatus v14 = (void *)objc_claimAutoreleasedReturnValue([v13 discriminatorId]);
  *(_DWORD *)std::string buf = 136316930;
  id v19 = "-[THThreadNetworkCredentialsKeychainBackingStore checkIfActiveDatasetRecordIsPresentInTheGivenList:Missinglist:record:]";
  __int16 v20 = 1024;
  int v21 = 2463;
  __int16 v22 = 2112;
  __int16 v23 = v5;
  __int16 v24 = 2112;
  OSStatus v25 = v6;
  __int16 v26 = 2112;
  id v27 = v8;
  __int16 v28 = 2112;
  uint64_t v29 = v10;
  __int16 v30 = 2112;
  id v31 = v12;
  __int16 v32 = 2112;
  int v33 = v14;
  _os_log_error_impl( (void *)&_mh_execute_header,  a3,  OS_LOG_TYPE_ERROR,  "%s:%d: record (name : %@ | xpanid : %@ | baID : %@) is matching with listItem record (name : %@ | xpanid : %@ | baID : %@)",  buf,  0x4Eu);
}

void sub_1001964D8()
{
}

void sub_100196504(void *a1, os_log_s *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1 lastModificationDate]);
  sub_1000156E0();
  sub_100012A20((void *)&_mh_execute_header, a2, v4, "\t\t  - Last modified on: \t%@\n", v5);

  sub_1001941B0();
}

void sub_100196588(void *a1, os_log_s *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1 creationDate]);
  sub_1000156E0();
  sub_100012A20((void *)&_mh_execute_header, a2, v4, "\t\t  - Created on: \t%@\n", v5);

  sub_1001941B0();
}

void sub_10019660C(void *a1, os_log_s *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1 keychainAccessGroup]);
  sub_1000156E0();
  sub_100012A20((void *)&_mh_execute_header, a2, v4, "\t\t  - Access Group: \t%@\n", v5);

  sub_1001941B0();
}

void sub_100196690(void *a1, os_log_s *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1 credentials]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 userInfo]);
  sub_1000156E0();
  sub_100012A20((void *)&_mh_execute_header, a2, v5, "\t\t  - User Info: \t%@\n", v6);

  sub_100128380();
}

void sub_100196724(void *a1, os_log_s *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1 credentialsDataSet]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 dataSetArray]);
  sub_1000156E0();
  sub_100012A20((void *)&_mh_execute_header, a2, v5, "\t\t  - DataSet Credentials: %@\n", v6);

  sub_100128380();
}

void sub_1001967B8(void *a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([a1 credentials]);
  [v1 channel];
  sub_1001941F4((void *)&_mh_execute_header, v2, v3, "\t\t  - Network Channel: \t%u\n", v4, v5, v6, v7, 0);

  sub_100008188();
}

void sub_10019683C(void *a1, os_log_s *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1 credentials]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 passPhrase]);
  sub_1000156E0();
  sub_100012A20((void *)&_mh_execute_header, a2, v5, "\t\t  - Passphrase: \t%@\n", v6);

  sub_100128380();
}

void sub_1001968D0(void *a1, os_log_s *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1 credentials]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 PSKc]);
  sub_1000156E0();
  sub_100012A20((void *)&_mh_execute_header, a2, v5, "\t\t  - PSKc: \t\t%@\n", v6);

  sub_100128380();
}

void sub_100196964(void *a1, os_log_s *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1 credentials]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 masterKey]);
  sub_1000156E0();
  sub_100012A20((void *)&_mh_execute_header, a2, v5, "\t\t  - Master Key: \t%@\n", v6);

  sub_100128380();
}

void sub_1001969F8(void *a1, os_log_s *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1 credentials]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 PANID]);
  sub_1000156E0();
  sub_100012A20((void *)&_mh_execute_header, a2, v5, "\t\t  - Network PANID: \t%@\n", v6);

  sub_100128380();
}

void sub_100196A8C(void *a1, os_log_s *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1 network]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 extendedPANID]);
  sub_1000156E0();
  sub_100012A20((void *)&_mh_execute_header, a2, v5, "\t\t  - Network XPANID: \t%@\n", v6);

  sub_100128380();
}

void sub_100196B20(void *a1, os_log_s *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1 network]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 networkName]);
  sub_1000156E0();
  sub_100012A20((void *)&_mh_execute_header, a2, v5, "\t\t  - Network Name: \t%@\n", v6);

  sub_100128380();
}

void sub_100196BB4(void *a1, os_log_s *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1 borderAgent]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 discriminatorId]);
  sub_1000156E0();
  sub_100012A20((void *)&_mh_execute_header, a2, v5, "\t\t  - Border Agent Discriminator ID : %@\n", v6);

  sub_100128380();
}

void sub_100196C48(void *a1, os_log_s *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1 uniqueIdentifier]);
  id v4 = objc_claimAutoreleasedReturnValue([v3 UUIDString]);
  [v4 UTF8String];
  sub_1000156E0();
  sub_100012A20((void *)&_mh_execute_header, a2, v5, "\t\t  - UUID: \t\t%s\n", v6);

  sub_100128380();
}

void sub_100196CE4()
{
  sub_1000155D4((void *)&_mh_execute_header, v0, v1, "\t==== Credentials ====\n", v2, v3, v4, v5, v6);
  sub_100012A58();
}

void sub_100196D10()
{
}

void sub_100196D84(void *a1)
{
}

void sub_100196E04(void *a1)
{
}

void sub_100196E84()
{
}

void sub_100196EF8(void *a1)
{
}

void sub_100196F78()
{
}

void sub_100196FEC(void *a1)
{
}

void sub_10019706C(void *a1)
{
}

void sub_1001970EC(void *a1, void *a2, os_log_s *a3)
{
  id v5 = [a1 count];
  [a2 count];
  *(_DWORD *)uint64_t v8 = 136315906;
  sub_1001940B0();
  *(_DWORD *)&v8[7] = 2872;
  v8[9] = 2048;
  id v9 = v5;
  __int16 v10 = 2048;
  uint64_t v11 = v6;
  sub_100194194( (void *)&_mh_execute_header,  a3,  v7,  "%s:%d: End of 3rd pass, size of toBeUpdatedPreferredList : %lu, size of cleanUpPreferredList : %lu ",  (uint8_t *)v8);
  sub_100128340();
}

void sub_10019719C()
{
  sub_1001940E0( (void *)&_mh_execute_header,  v0,  v1,  "%s:%d: Failed to delete all records for com.apple.thread.network, Deletion result :(err=%d)",  v2,  v3,  v4,  v5,  2u);
  sub_100008188();
}

void sub_100197210()
{
  sub_1001940E0( (void *)&_mh_execute_header,  v0,  v1,  "%s:%d: Deleting all records for com.apple.thread.network, Deletion result :(err=%d)",  v2,  v3,  v4,  v5,  2u);
  sub_100008188();
}

void sub_100197284()
{
}

void sub_1001972F8()
{
}

void sub_10019736C(void *a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([a1 network]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 networkName]);
  sub_1001940B0();
  sub_1001940CC();
  sub_100128350( (void *)&_mh_execute_header,  v3,  v4,  "%s:%d: No Preferred Networks for Network Name : %@ ",  v5,  v6,  v7,  v8,  2u);

  sub_100128340();
}

void sub_10019740C()
{
  v2[0] = 136315650;
  sub_1001940B0();
  sub_1001940F0();
  sub_1001940C0((void *)&_mh_execute_header, v0, v1, "%s : %d :  Found networks : %lu", (uint8_t *)v2);
  sub_1001941B0();
}

void sub_100197484()
{
}

void sub_1001974F8(void *a1, void *a2, os_log_s *a3)
{
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a1 networkName]);
  uint8_t v6 = (void *)objc_claimAutoreleasedReturnValue([a2 networkName]);
  int v7 = 136315650;
  uint64_t v8 = "-[THThreadNetworkCredentialsKeychainBackingStore isMatchingMdnsRecords:preferredNw:]";
  __int16 v9 = 2112;
  __int16 v10 = v5;
  __int16 v11 = 2112;
  id v12 = v6;
  _os_log_error_impl( (void *)&_mh_execute_header,  a3,  OS_LOG_TYPE_ERROR,  "%s : Preferred Network :%@ matches with mdns record :%@",  (uint8_t *)&v7,  0x20u);

  sub_100128340();
}

void sub_1001975BC()
{
}

void sub_100197630()
{
}

void sub_1001976A4()
{
}

void sub_100197718()
{
}

void sub_10019778C()
{
}

void sub_100197800()
{
}

void sub_100197874()
{
}

void sub_1001978E8()
{
}

void sub_10019795C(void *a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([a1 network]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 networkName]);
  sub_1001940B0();
  sub_1001940CC();
  sub_100128350( (void *)&_mh_execute_header,  v3,  v4,  "%s:%d: Failed deleting thread credentials for preferred network : %@",  v5,  v6,  v7,  v8,  2u);

  sub_100128340();
}

void sub_1001979FC(void *a1, os_log_s *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1 network]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 networkName]);
  sub_1000156E0();
  sub_100012A20((void *)&_mh_execute_header, a2, v5, "Failed deleting Preferred Network %@", v6);

  sub_100128380();
}

void sub_100197A90()
{
}

void sub_100197B04(void *a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([a1 network]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 networkName]);
  sub_1001940B0();
  sub_1001940CC();
  sub_100128350( (void *)&_mh_execute_header,  v3,  v4,  "%s : %d: Failed deleting Preferred Network %@",  v5,  v6,  v7,  v8,  2u);

  sub_100128340();
}

void sub_100197BA4()
{
}

void sub_100197C18()
{
}

void sub_100197C8C()
{
}

void sub_100197D00()
{
}

void sub_100197D74()
{
}

void sub_100197DE8()
{
}

void sub_100197E5C()
{
}

void sub_100197ED0()
{
}

void sub_100197F44()
{
}

void sub_100197FB8()
{
}

void sub_10019802C(void *a1)
{
}

void sub_1001980AC()
{
}

void sub_100198120()
{
}

void sub_100198194(void *a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([a1 wifiSSID]);
  sub_1001940B0();
  sub_1001940CC();
  sub_100128350( (void *)&_mh_execute_header,  v2,  v3,  "%s:%d: Failed to create query to fetch preferred networks for a given ssid : %@",  v4,  v5,  v6,  v7,  2u);

  sub_100194104();
}

void sub_100198224()
{
}

void sub_100198298()
{
}

void sub_10019830C()
{
}

void sub_100198380(void *a1)
{
  sub_100128350( (void *)&_mh_execute_header,  v1,  v2,  "%s : %d - Total Preferred Networks in the Database = %lu",  v3,  v4,  v5,  v6,  2u);
  sub_100194104();
}

void sub_100198400()
{
}

void sub_100198474()
{
}

void sub_1001984E8(void *a1, int a2, os_log_s *a3)
{
  *(_DWORD *)uint64_t v8 = 136315906;
  sub_1001940B0();
  *(_DWORD *)&v8[7] = 3945;
  v8[9] = 2048;
  uint64_t v9 = v5;
  __int16 v10 = v6;
  int v11 = a2;
  sub_100194230( (void *)&_mh_execute_header,  a3,  v7,  "%s : %d - Total Preferred Networks fetched from the Database = %lu, for count : %d",  (uint8_t *)v8);
  sub_100194104();
}

void sub_100198588()
{
}

void sub_1001985FC(void *a1)
{
  sub_100128350( (void *)&_mh_execute_header,  v1,  v2,  "%s : %d - Matching Networks in Database for Networuint64_t k = %lu",  v3,  v4,  v5,  v6,  2u);
  sub_100194104();
}

void sub_10019867C()
{
}

void sub_1001986F0()
{
}

void sub_100198764()
{
}

void sub_1001987D8(void *a1)
{
  sub_100128350( (void *)&_mh_execute_header,  v1,  v2,  "%s : %d - Total Preferred Networks in the Database = %lu",  v3,  v4,  v5,  v6,  2u);
  sub_100194104();
}

void sub_100198858()
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 network]);
  objc_claimAutoreleasedReturnValue([v2 networkName]);
  id v3 = [(id)sub_100194224() network];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 extendedPANID]);
  sub_1001940B0();
  sub_100194124();
  sub_100194178( (void *)&_mh_execute_header,  v6,  v7,  "%s:%d:#mOS:Failed to store Preferred Network (networkName=%@, xpanid=%@) keychainAddDict is NULL",  v8,  v9,  v10,  v11,  2u);

  sub_100194164();
}

void sub_10019891C()
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 network]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 networkName]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v0 network]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 extendedPANID]);
  sub_1001940B0();
  sub_100194140();
  sub_1001941CC( (void *)&_mh_execute_header,  v6,  v7,  "%s:%d:#mOS:Failed to store Preferred Network (networkName=%@, xpanid=%@) with error = %d",  v8,  v9,  v10,  v11,  2u);

  sub_1001941B8();
}

void sub_1001989E4()
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 network]);
  objc_claimAutoreleasedReturnValue([v2 networkName]);
  id v3 = [(id)sub_100194224() network];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 extendedPANID]);
  sub_1001940B0();
  sub_100194124();
  sub_100194178( (void *)&_mh_execute_header,  v6,  v7,  "%s:%d:Failed to store Preferred Network (networkName=%@, xpanid=%@) keychainAddDict is NULL",  v8,  v9,  v10,  v11,  2u);

  sub_100194164();
}

void sub_100198AA8()
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 network]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 networkName]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v0 network]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 extendedPANID]);
  sub_1001940B0();
  sub_100194140();
  sub_1001941CC( (void *)&_mh_execute_header,  v6,  v7,  "%s:%d:#mOS:Failed to store Preferred Network (networkName=%@, xpanid=%@) with error = %d",  v8,  v9,  v10,  v11,  2u);

  sub_1001941B8();
}

void sub_100198B70(void *a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue([a1 network]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 networkName]);
  sub_1001940B0();
  sub_1001940CC();
  sub_100128350( (void *)&_mh_execute_header,  v3,  v4,  "%s:%d: Preferred network (name : %@) already exists. Updating the existing entry",  v5,  v6,  v7,  v8,  2u);

  sub_100128340();
}

void sub_100198C10()
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 network]);
  objc_claimAutoreleasedReturnValue([v2 networkName]);
  id v3 = [(id)sub_100194224() network];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 extendedPANID]);
  sub_1001940B0();
  sub_100194124();
  sub_100194178( (void *)&_mh_execute_header,  v6,  v7,  "%s:%d:Failed to store Preferred Network (networkName=%@, xpanid=%@) keychainAddDict is NULL",  v8,  v9,  v10,  v11,  2u);

  sub_100194164();
}

void sub_100198CD4()
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 network]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 networkName]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v0 network]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 extendedPANID]);
  sub_1001940B0();
  sub_100194140();
  sub_1001941CC( (void *)&_mh_execute_header,  v6,  v7,  "%s:%d:#mOS:Failed to store Preferred Network (networkName=%@, xpanid=%@) with error = %d",  v8,  v9,  v10,  v11,  2u);

  sub_1001941B8();
}

void sub_100198D9C()
{
  sub_1001940E0( (void *)&_mh_execute_header,  v0,  v1,  "%s:%d SecItemUpdate returned error while updating preferred network entry err=%d",  v2,  v3,  v4,  v5,  2u);
  sub_100008188();
}

void sub_100198E10(void *a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([a1 network]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 networkName]);
  sub_1001940B0();
  sub_1001940CC();
  sub_100128350( (void *)&_mh_execute_header,  v3,  v4,  "%s:%d: Preferred network (name : %@) already exists. Updating the existing entry",  v5,  v6,  v7,  v8,  2u);

  sub_100128340();
}

void sub_100198EB0(void *a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([a1 credentialsDataSet]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 dataSetArray]);
  sub_1001940B0();
  sub_1001940CC();
  sub_100128350( (void *)&_mh_execute_header,  v3,  v4,  "%s:%d:Failed to store frozen thread network %@",  v5,  v6,  v7,  v8,  2u);

  sub_100128340();
}

void sub_100198F50(void *a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([a1 credentialsDataSet]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 dataSetArray]);
  sub_1001940B0();
  sub_1001940CC();
  sub_100128350( (void *)&_mh_execute_header,  v3,  v4,  "%s:%d:Failed to store frozen thread network to keychain : %@",  v5,  v6,  v7,  v8,  2u);

  sub_100128340();
}

void sub_100198FF0()
{
}

void sub_100199064()
{
}

void sub_1001990D8()
{
  sub_100008178( (void *)&_mh_execute_header,  v0,  v1,  "%s:%d Error : Device is **not** on ethernet, **not** on WiFi, returning nil",  v2,  v3,  v4,  v5,  v6);
  sub_100008188();
}

void sub_10019914C()
{
}

void sub_1001991C0()
{
}

void sub_100199234(void *a1)
{
  sub_100128350( (void *)&_mh_execute_header,  v1,  v2,  "%s : %d - Preferred Networks in Database = %lu",  v3,  v4,  v5,  v6,  2u);
  sub_100194104();
}

void sub_1001992B4()
{
}

void sub_100199328()
{
}

void sub_10019939C(void *a1, os_log_s *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1 network]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 networkName]);
  sub_1000156E0();
  sub_100012A20((void *)&_mh_execute_header, a2, v5, "Failed deleting Preferred Network entry : %@", v6);

  sub_100128380();
}

void sub_100199430()
{
}

void sub_1001994A4()
{
}

void sub_100199518()
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 network]);
  objc_claimAutoreleasedReturnValue([v2 networkName]);
  id v3 = [(id)sub_100194224() network];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 extendedPANID]);
  sub_1001940B0();
  sub_100194124();
  sub_100194178( (void *)&_mh_execute_header,  v6,  v7,  "%s:%d: Failed to delete the previous preferred network entry : (name : %@ | xpanid : %@)",  v8,  v9,  v10,  v11,  2u);

  sub_100194164();
}

void sub_1001995DC()
{
}

void sub_100199650()
{
}

void sub_1001996C4()
{
}

void sub_100199738()
{
}

void sub_1001997AC(void *a1, void *a2, os_log_s *a3)
{
  uint8_t v6 = (void *)objc_claimAutoreleasedReturnValue([a1 network]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 networkName]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([a1 network]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 extendedPANID]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([a2 network]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 networkName]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([a2 network]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 extendedPANID]);
  *(_DWORD *)id v15 = 136316418;
  sub_1001940B0();
  *(_DWORD *)&v15[7] = 4706;
  v15[9] = 2112;
  id v16 = v7;
  __int16 v17 = 2112;
  uint64_t v18 = v9;
  __int16 v19 = 2112;
  __int16 v20 = v11;
  __int16 v21 = 2112;
  uint64_t v22 = v14;
  _os_log_error_impl( (void *)&_mh_execute_header,  a3,  OS_LOG_TYPE_ERROR,  "%s:%d:Preferred network entry (name : %@, xpanid : %@), record netowrk (name : %@, xpanid : %@) and datasets are mat ching. No need to update",  (uint8_t *)v15,  0x3Au);
}

void sub_100199918()
{
}

void sub_10019998C(void *a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([a1 network]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 networkName]);
  sub_1001940B0();
  sub_1001940CC();
  sub_100128350( (void *)&_mh_execute_header,  v3,  v4,  "%s:%d: Failed to delete the previous record : (name : %@)",  v5,  v6,  v7,  v8,  2u);

  sub_100128340();
}

void sub_100199A2C(void *a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([a1 network]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 networkName]);
  sub_1001940B0();
  sub_1001940CC();
  sub_100128350( (void *)&_mh_execute_header,  v3,  v4,  "%s:%d: Failed to delete the previous preferred network entry : (name : %@)",  v5,  v6,  v7,  v8,  2u);

  sub_100128340();
}

void sub_100199ACC()
{
}

void sub_100199B40()
{
  v2[0] = 136315650;
  sub_1001940B0();
  sub_1001940CC();
  sub_1001940C0((void *)&_mh_execute_header, v0, v1, "%s:%d Failed deleting thread credentials: %@", (uint8_t *)v2);
  sub_1001941B0();
}

void sub_100199BB8()
{
}

void sub_100199C2C()
{
  sub_100008178( (void *)&_mh_execute_header,  v0,  v1,  "%s:%d:record parameter is passed nil, returning",  v2,  v3,  v4,  v5,  v6);
  sub_100008188();
}

void sub_100199CA0()
{
}

void sub_100199CCC()
{
}

void sub_100199CF8()
{
}

void sub_100199D24()
{
}

void sub_100199D50()
{
}

void sub_100199D7C()
{
}

void sub_100199DEC()
{
}

void sub_100199E60()
{
}

void sub_100199ED4()
{
}

void sub_100199F48()
{
  sub_100008178( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Decoded TLV, format is invalid, current position goes out of bound, Line : %d",  v2,  v3,  v4,  v5,  v6);
  sub_100008188();
}

void sub_100199FBC()
{
  sub_100008178( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Decoded Channel mask, mask entry format is invalid, Line : %d",  v2,  v3,  v4,  v5,  v6);
  sub_100008188();
}

void sub_10019A030()
{
  sub_100008178( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> error : Decoded entry length is not matching,  Line : %d",  v2,  v3,  v4,  v5,  v6);
  sub_100008188();
}

void sub_10019A0A4()
{
  sub_100008178( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> error : Decoded Channel page is neither zero nor 2,  Line : %d",  v2,  v3,  v4,  v5,  v6);
  sub_100008188();
}

void sub_10019A118(os_log_s *a1, uint64_t a2, uint64_t a3)
{
  int v3 = 136315138;
  uint64_t v4 = "-[THThreadNetworkCredentialsKeychainBackingStore areValidDataSetTLVs:creds:]";
  sub_100012A20((void *)&_mh_execute_header, a1, a3, "%s :#MOS : Error decoding Network Name", (uint8_t *)&v3);
  sub_100008188();
}

void sub_10019A18C( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10019A204( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10019A280()
{
  sub_100008178((void *)&_mh_execute_header, v0, v1, "%s: #MOS : ==> Decoded channel Len : %d", v2, v3, v4, v5, v6);
  sub_100008188();
}

void sub_10019A2F4()
{
  sub_1001940E0( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Invalid pan id length %d, Line : %d",  v2,  v3,  v4,  v5,  2u);
  sub_100008188();
}

void sub_10019A368()
{
  sub_1001940E0( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Invalid extended pan id length %d, Line : %d",  v2,  v3,  v4,  v5,  2u);
  sub_100008188();
}

void sub_10019A3DC()
{
  sub_1001940E0( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Invalid pskc length %d, Line : %d",  v2,  v3,  v4,  v5,  2u);
  sub_100008188();
}

void sub_10019A450()
{
  sub_1001940E0( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Invalid network key length %d, Line : %d",  v2,  v3,  v4,  v5,  2u);
  sub_100008188();
}

void sub_10019A4C4()
{
  sub_100008178( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Invalid rotation time, Line : %d",  v2,  v3,  v4,  v5,  v6);
  sub_100008188();
}

void sub_10019A538()
{
  sub_1001940E0( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Invalid Security Policy length %d, Line : %d",  v2,  v3,  v4,  v5,  2u);
  sub_100008188();
}

void sub_10019A5AC()
{
  sub_1001940E0( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Invalid Mesh local prefix length %d, Line : %d",  v2,  v3,  v4,  v5,  2u);
  sub_100008188();
}

void sub_10019A620()
{
  sub_100008178( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Decoded TLV, format is invalid, current position goes out of bound, Line : %d",  v2,  v3,  v4,  v5,  v6);
  sub_100008188();
}

void sub_10019A694()
{
}

void sub_10019A708()
{
}

void sub_10019A77C()
{
}

void sub_10019A7F0()
{
}

void sub_10019A81C()
{
  __int16 v3 = 2112;
  uint64_t v4 = v0;
  sub_1000155C8((void *)&_mh_execute_header, v1, (uint64_t)v1, "Generated new uuid_temp: %@, full string: %@", v2);
  sub_100008188();
}

void sub_10019BB4C(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_10019BB58(void *a1, os_log_s *a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1 network]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 networkName]);
  uint8_t v6 = (void *)objc_claimAutoreleasedReturnValue([a1 network]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 extendedPANID]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([a1 keychainAccessGroup]);
  int v10 = 138412802;
  uint64_t v11 = v5;
  __int16 v12 = 2112;
  id v13 = v7;
  __int16 v14 = 2112;
  id v15 = v8;
  sub_10019BB4C( (void *)&_mh_execute_header,  a2,  v9,  "Failed to calculate UUID (name=%@; xpanid=%@; keychainAccessGroup=%@)!",
    (uint8_t *)&v10);

  sub_100194164();
}

void sub_10019BC44()
{
}

void sub_10019BCBC(void *a1, uint64_t a2, os_log_s *a3)
{
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a1 uniqueIdentifier]);
  int v6 = 138412546;
  uint64_t v7 = v5;
  __int16 v8 = 2112;
  uint64_t v9 = a2;
  _os_log_error_impl( (void *)&_mh_execute_header,  a3,  OS_LOG_TYPE_ERROR,  "Warning: decoded record with identifier %@ but does not match expected %@!",  (uint8_t *)&v6,  0x16u);
}

void sub_10019BD68()
{
}

void sub_10019BDE0(void *a1, uint64_t a2, os_log_s *a3)
{
  uint8_t v6 = (void *)objc_claimAutoreleasedReturnValue([a1 network]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 networkName]);
  __int16 v8 = (void *)objc_claimAutoreleasedReturnValue([a1 network]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 extendedPANID]);
  int v11 = 138412802;
  __int16 v12 = v7;
  __int16 v13 = 2112;
  __int16 v14 = v9;
  __int16 v15 = 2112;
  uint64_t v16 = a2;
  sub_10019BB4C( (void *)&_mh_execute_header,  a3,  v10,  "Illegal attempt to form keychain item with insufficient information (name=%@; xpanid=%@; uuid=%@)!",
    (uint8_t *)&v11);

  sub_100194164();
}

void sub_10019EBE0( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_10019EBF0( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10019EC24( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10019EC58()
{
}

void sub_10019ECD0()
{
}

void sub_10019ED48()
{
}

void sub_10019EDC0()
{
}

void sub_10019EE38( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10019EEA8()
{
}

void sub_10019EF20( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10019EF90()
{
}

void sub_10019F0E4(uint64_t a1)
{
  uint64_t v5 = (id *)*(id *)(a1 + 32);
  uint64_t v2 = objc_opt_new(&OBJC_CLASS___THBorderAgentFinder);
  id v3 = v5[1];
  v5[1] = v2;

  id v4 = v5[1];
  if (v4)
  {
    [v4 setDelegate:*(void *)(a1 + 32)];
    [v5[1] start];
  }
}

void sub_10019F284(uint64_t a1)
{
  uint64_t v5 = (id *)*(id *)(a1 + 32);
  uint64_t v2 = objc_opt_new(&OBJC_CLASS___THBorderAgentFinder);
  id v3 = v5[1];
  v5[1] = v2;

  id v4 = v5[1];
  if (v4)
  {
    [v4 setDelegate:*(void *)(a1 + 32)];
    [v5[1] start];
  }
}

void sub_10019F3A8(uint64_t a1)
{
  uint64_t v5 = (id *)*(id *)(a1 + 32);
  uint64_t v2 = objc_opt_new(&OBJC_CLASS___THBorderAgentFinder);
  id v3 = v5[1];
  v5[1] = v2;

  id v4 = v5[1];
  if (v4)
  {
    [v4 setDelegate:*(void *)(a1 + 32)];
    [v5[1] start];
  }
}

void sub_10019F480(uint64_t a1)
{
  uint64_t v1 = *(id *)(a1 + 32);
  uint64_t v2 = (void *)v1[1];
  uint8_t v6 = v1;
  if (v2)
  {
    v1[1] = 0LL;

    uint64_t v1 = v6;
  }

  id v3 = (void *)v1[8];
  if (v3)
  {
    v1[8] = 0LL;

    uint64_t v1 = v6;
  }

  id v4 = (void *)v1[5];
  if (v4)
  {
    v1[5] = 0LL;

    uint64_t v1 = v6;
  }

  uint64_t v5 = (void *)v1[6];
  if (v5)
  {
    v1[6] = 0LL;

    uint64_t v1 = v6;
  }
}

void sub_1001A0A60(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = a1;
}

void sub_1001A0A6C()
{
}

void sub_1001A0AD8()
{
}

void sub_1001A0B4C()
{
}

void sub_1001A0BCC()
{
}

void sub_1001A0C40(void *a1, uint64_t a2, os_log_s *a3)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1 network]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 extendedPANID]);
  v7[0] = 136315906;
  sub_1001940B0();
  sub_1001A0A44();
  sub_100194194( (void *)&_mh_execute_header,  a3,  v6,  "%s : %d: Old format Xpanid to find :%@ does match with mdns record xpanid :%@",  (uint8_t *)v7);

  sub_100128340();
}

void sub_1001A0CEC(void *a1, uint64_t a2, os_log_s *a3)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1 network]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 extendedPANID]);
  v7[0] = 136315906;
  sub_1001940B0();
  sub_1001A0A44();
  sub_100194194( (void *)&_mh_execute_header,  a3,  v6,  "%s : %d: New format Xpanid to find :%@ does match with mdns record xpanid :%@",  (uint8_t *)v7);

  sub_100128340();
}

void sub_1001A0D98(void *a1, os_log_s *a2)
{
  *(_DWORD *)uint64_t v4 = 136315650;
  sub_1001940B0();
  *(_DWORD *)&v4[7] = 255;
  v4[9] = 2048;
  uint64_t v5 = v3;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "%s:%d Continuing... XpanID length mismatch !!! xpan id length : %lu",  (uint8_t *)v4,  0x1Cu);
}

void sub_1001A0E3C()
{
}

void sub_1001A0EB0()
{
}

void sub_1001A0F1C()
{
}

void sub_1001A0F90()
{
}

void sub_1001A1010()
{
}

void sub_1001A1084()
{
}

void sub_1001A10F8()
{
  int v2 = 136315906;
  sub_1001A0A34();
  sub_1001A0A18();
  sub_1000FA624( (void *)&_mh_execute_header,  v0,  v1,  "%s : %d: BaID to find :%@ does not match with mdns record BaID :%@",  v2);
  sub_1001941B0();
}

void sub_1001A116C()
{
}

void sub_1001A11E0()
{
}

void sub_1001A1254()
{
  int v2 = 136315906;
  sub_1001A0A34();
  sub_1001A0A18();
  sub_1000FA624( (void *)&_mh_execute_header,  v0,  v1,  "%s : %d: Xpanid to find :%@ does not match with mdns record xpanid :%@",  v2);
  sub_1001941B0();
}

void sub_1001A12C8()
{
  int v2 = 136315906;
  sub_1001A0A34();
  sub_1001A0A18();
  sub_1000FA624( (void *)&_mh_execute_header,  v0,  v1,  "%s : %d: BaID to find :%@ does not match with mdns record BaID :%@",  v2);
  sub_1001941B0();
}

void sub_1001A133C()
{
  int v2 = 136315906;
  sub_1001A0A34();
  sub_1001A0A18();
  sub_1000FA624( (void *)&_mh_execute_header,  v0,  v1,  "%s : %d: Xpanid to find :%@ does not match with mdns record xpanid :%@",  v2);
  sub_1001941B0();
}

void sub_1001A13B0()
{
}

void sub_1001A1424()
{
  int v2 = 136315906;
  sub_1001A0A34();
  sub_1001A0A18();
  sub_1000FA624( (void *)&_mh_execute_header,  v0,  v1,  "%s : %d: Network to find :%@ does not match with mdns record :%@",  v2);
  sub_1001941B0();
}

void sub_1001A1498(void *a1, void *a2, os_log_s *a3)
{
  id v5 = [a1 length];
  [a2 length];
  *(_DWORD *)__int16 v8 = 136315906;
  sub_1001940B0();
  *(_DWORD *)&v8[7] = 363;
  v8[9] = 2048;
  id v9 = v5;
  __int16 v10 = 2048;
  uint64_t v11 = v6;
  sub_100194194( (void *)&_mh_execute_header,  a3,  v7,  "%s:%d Continuing... BorderAgent ID and XpanID length mismatch !!! xpan id length : %lu, border agent id length : %lu",  (uint8_t *)v8);
  sub_100128340();
}

void sub_1001A1548()
{
}

void sub_1001A1774(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  1LL,  @"Failed to delete record; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001A17CC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A18F4(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  1LL,  @"Failed to retrieve records; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A1950(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = sub_1001A19B4(a2);
  id v7 = (id)objc_claimAutoreleasedReturnValue(v6);
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_1001A19B4(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableSet setWithCapacity:]( NSMutableSet,  "setWithCapacity:",  [v1 count]));
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    id v4 = v2;
    id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v12;
      do
      {
        for (size_t i = 0LL; i != v6; size_t i = (char *)i + 1)
        {
          if (*(void *)v12 != v7) {
            objc_enumerationMutation(v4);
          }
          objc_msgSend(v3, "addObject:", *(void *)(*((void *)&v11 + 1) + 8 * (void)i), (void)v11);
        }

        id v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }

      while (v6);
    }

    id v9 = [v3 copy];
  }

  else
  {
    id v9 = 0LL;
  }

  return v9;
}

void sub_1001A1BF4(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  1LL,  @"Failed to retrieve all records; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A1C50(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = sub_1001A19B4(a2);
  id v7 = (id)objc_claimAutoreleasedReturnValue(v6);
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A1DD0(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  1LL,  @"Failed to retrieve record; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A1E2C(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A1F80(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  4LL,  @"Failed to delete record; unable to calculate UUID"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A216C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  1LL,  @"Failed to store record; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001A21C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A22F0(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  1LL,  @"Failed to delete active dataset record; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001A2348(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A2470(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  1LL,  @"Failed to delete active dataset record; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001A24C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A25F0(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  1LL,  @"Failed to retrieve records; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A264C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = sub_1001A19B4(a2);
  id v7 = (id)objc_claimAutoreleasedReturnValue(v6);
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A27B0(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  1LL,  @"Failed to retrieve all records; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A280C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = sub_1001A19B4(a2);
  id v7 = (id)objc_claimAutoreleasedReturnValue(v6);
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A298C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  1LL,  @"Failed to retrieve record; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A29E8(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A2AF8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  1LL,  @"Failed to retrieve record; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A2C78(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  1LL,  @"Failed to retrieve record; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A2CD4(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A2E44(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  1LL,  @"Failed to retrieve record; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A2EA0(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A3010(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  1LL,  @"Failed to retrieve record; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A306C(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A31DC(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  1LL,  @"Failed to retrieve record; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A3238(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A33BC(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  1LL,  @"Failed to retrieve records; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A3418(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = sub_1001A19B4(a2);
  id v7 = (id)objc_claimAutoreleasedReturnValue(v6);
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A35AC(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  1LL,  @"Failed to retrieve records; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A3608(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = sub_1001A19B4(a2);
  id v7 = (id)objc_claimAutoreleasedReturnValue(v6);
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001A37BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001A37D0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A394C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  1LL,  @"Failed to retrieve records; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A39A8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7)
  {
    (*(void (**)(uint64_t, id, id))(v7 + 16))(v7, v5, v6);
  }

  else
  {
    id v8 = sub_1001768B4(1);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1001A9754();
    }
  }
}

void sub_1001A3BA0(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  1LL,  @"Failed to retrieve records; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A3BFC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7)
  {
    (*(void (**)(uint64_t, id, id))(v7 + 16))(v7, v5, v6);
  }

  else
  {
    id v8 = sub_1001768B4(1);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1001A983C();
    }
  }
}

void sub_1001A3DF4(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  1LL,  @"Failed to retrieve records; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A3E50(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7)
  {
    (*(void (**)(uint64_t, id, id))(v7 + 16))(v7, v5, v6);
  }

  else
  {
    id v8 = sub_1001768B4(1);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1001A9924();
    }
  }
}

void sub_1001A4048(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  1LL,  @"Failed to retrieve records; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A40A4(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A4268(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  1LL,  @"Failed to retrieve records; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A42C4(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A44A8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  1LL,  @"Failed to retrieve records; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001A4500(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A4658(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  1LL,  @"Failed to retrieve records; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001A46B0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A47D8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  1LL,  @"Failed to retrieve records; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001A4830(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A493C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  1LL,  @"Failed to retrieve records; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001A4994(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A4AA0(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  1LL,  @"Failed to delete all records locally; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001A4AF8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A4C20(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  1LL,  @"Failed to store record; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001A4C7C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A4EDC(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  1LL,  @"Failed to store record; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A4F38(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  29LL,  @"Failed to store record; Invalid Dataset"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001A4F94(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A51EC(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  1LL,  @"Failed to store record; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A524C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  29LL,  @"Failed to store record; Invalid Dataset"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001A52AC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A5468(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  1LL,  @"Failed to store record; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001A54C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A5600(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  1LL,  @"Failed to retrieve record; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A565C(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A57E0(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  1LL,  @"Failed to retrieve record; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A583C(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A59C0(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  1LL,  @"Failed to delete active dataset record; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001A5A18(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A5B54(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  1LL,  @"Failed to delete active dataset record; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001A5BAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A5D88(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  18LL,  @"Failed to run mdns check; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A5DE8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  18LL,  @"Failed to run mdns check; Unable to parse the Active Operational Data Set"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A5E48(uint64_t a1, int a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (a2)
  {
    id v4 = *(void **)(a1 + 32);
    id v5 = a3;
    id v7 = (id)objc_claimAutoreleasedReturnValue([v4 network]);
    (*(void (**)(uint64_t, uint64_t))(v3 + 16))(v3, 1LL);
  }

  else
  {
    id v6 = *(void (**)(uint64_t, void, void))(v3 + 16);
    id v7 = a3;
    v6(v3, 0LL, 0LL);
  }
}

uint64_t sub_1001A60A8(uint64_t a1)
{
  id v2 = sub_1001768B4(1);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_1001A9B20();
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001A6100(uint64_t a1)
{
  id v2 = sub_1001768B4(1);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_1001A9B94();
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A6158(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = v5;
  if (!v5) {
    goto LABEL_9;
  }
  if (a3) {
    goto LABEL_9;
  }
  uint64_t v7 = objc_claimAutoreleasedReturnValue([v5 credentialsDataSet]);
  if (!v7) {
    goto LABEL_9;
  }
  id v8 = (void *)v7;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v6 credentialsDataSet]);
  __int16 v10 = (void *)objc_claimAutoreleasedReturnValue([v9 dataSetArray]);

  if (!v10) {
    goto LABEL_9;
  }
  __int128 v11 = *(void **)(a1 + 32);
  __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([v6 credentialsDataSet]);
  __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([v12 dataSetArray]);
  LODWORD(v11) = [v11 isEqualToData:v13];

  if ((_DWORD)v11)
  {
    id v14 = sub_1001768B4(1);
    __int16 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      int v19 = 136315394;
      __int16 v20 = "-[THThreadNetworkCredentialsStoreLocalClient checkIsPreferredNetworkForActiveOperationalDataset:completion:]_block_invoke";
      __int16 v21 = 1024;
      int v22 = 879;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "%s : %d: Given dataset matches with Preferred Network",  (uint8_t *)&v19,  0x12u);
    }

    uint64_t v16 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
  }

  else
  {
LABEL_9:
    id v17 = sub_1001768B4(1);
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      sub_1001A9C08();
    }

    uint64_t v16 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
  }

  v16();
}

uint64_t sub_1001A63A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A64B4(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  1LL,  @"Failed to store record; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001A650C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A6634(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  18LL,  @"Failed to run mdns check; Backing store is nil"));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001A6690(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A9618(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
}

  ;
}

  ;
}

  ;
}

void sub_1001A966C()
{
}

void sub_1001A96E0()
{
}

void sub_1001A9754()
{
}

void sub_1001A97C8()
{
}

void sub_1001A983C()
{
}

void sub_1001A98B0()
{
}

void sub_1001A9924()
{
}

void sub_1001A9998()
{
}

void sub_1001A9A0C()
{
}

void sub_1001A9A80()
{
}

void sub_1001A9AAC()
{
}

void sub_1001A9B20()
{
}

void sub_1001A9B94()
{
}

void sub_1001A9C08()
{
}

void sub_1001A9C7C()
{
}

void sub_1001A9CF0()
{
}

void sub_1001A9D60(uint8_t *a1, _DWORD *a2, os_log_s *a3)
{
  *(_DWORD *)a1 = 67109120;
  *a2 = 1055;
  sub_1001A9618((void *)&_mh_execute_header, (int)a2, a3, "#MOS : break !! : %d", a1);
}

void sub_1001A9D9C(uint8_t *a1, _DWORD *a2, os_log_s *a3)
{
  *(_DWORD *)a1 = 67109120;
  *a2 = 999;
  sub_1001A9618((void *)&_mh_execute_header, (int)a2, a3, "#MOS : ==> Decoded master key Line : %d", a1);
}

void sub_1001A9DD8(uint8_t *a1, _DWORD *a2, os_log_s *a3)
{
  *(_DWORD *)a1 = 67109120;
  *a2 = 1018;
  sub_1001A9618((void *)&_mh_execute_header, (int)a2, a3, "#MOS : ==> Decoded pan id Line : %d", a1);
}

void sub_1001A9E14(uint8_t *a1, _DWORD *a2, os_log_s *a3)
{
  *(_DWORD *)a1 = 67109120;
  *a2 = 1038;
  sub_1001A9618((void *)&_mh_execute_header, (int)a2, a3, "#MOS : ==> Decoded channel Line : %d", a1);
}

void sub_1001A9E50(uint8_t *a1, _DWORD *a2, os_log_s *a3)
{
  *(_DWORD *)a1 = 67109120;
  *a2 = 1048;
  sub_1001A9618((void *)&_mh_execute_header, (int)a2, a3, "#MOS : ==> Decoded pskc Line : %d", a1);
}

void sub_1001A9E8C()
{
}

void sub_1001A9EFC(int a1, os_log_s *a2)
{
  v2[0] = 67109376;
  v2[1] = a1;
  __int16 v3 = 1024;
  int v4 = 950;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "#MOS : data_len : %d, Line : %d",  (uint8_t *)v2,  0xEu);
  sub_100008188();
}

void sub_1001A9F7C()
{
}

void sub_1001A9FA8()
{
}

void sub_1001A9FD4()
{
}

void sub_1001AA044(uint8_t *a1, _DWORD *a2, os_log_s *a3)
{
  *(_DWORD *)a1 = 67109120;
  *a2 = 1232;
  sub_1001A9618((void *)&_mh_execute_header, (int)a2, a3, "#MOS : break !! : %d", a1);
}

void sub_1001AA080( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001AA0F0()
{
}

void sub_1001AA164()
{
}

void sub_1001AA1D8()
{
}

void sub_1001AA248()
{
}

void sub_1001AA2BC()
{
  sub_100008178( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Decoded TLV, format is invalid, current position goes out of bound, Line : %d",  v2,  v3,  v4,  v5,  v6);
  sub_100008188();
}

void sub_1001AA330()
{
  sub_100008178( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Decoded Channel mask, mask entry format is invalid, Line : %d",  v2,  v3,  v4,  v5,  v6);
  sub_100008188();
}

void sub_1001AA3A4()
{
  sub_100008178( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> error : Decoded entry length is not matching,  Line : %d",  v2,  v3,  v4,  v5,  v6);
  sub_100008188();
}

void sub_1001AA418()
{
  sub_100008178( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> error : Decoded Channel page is neither zero nor 2,  Line : %d",  v2,  v3,  v4,  v5,  v6);
  sub_100008188();
}

void sub_1001AA48C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001AA4FC()
{
}

void sub_1001AA568()
{
}

void sub_1001AA5D8()
{
  sub_100008178((void *)&_mh_execute_header, v0, v1, "%s: #MOS : ==> Decoded channel Len : %d", v2, v3, v4, v5, v6);
  sub_100008188();
}

void sub_1001AA64C()
{
  sub_1001940E0( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Invalid pan id length %d, Line : %d",  v2,  v3,  v4,  v5,  2u);
  sub_100008188();
}

void sub_1001AA6C0()
{
  sub_1001940E0( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Invalid extended pan id length %d, Line : %d",  v2,  v3,  v4,  v5,  2u);
  sub_100008188();
}

void sub_1001AA734()
{
  sub_1001940E0( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Invalid pskc length %d, Line : %d",  v2,  v3,  v4,  v5,  2u);
  sub_100008188();
}

void sub_1001AA7A8()
{
  sub_1001940E0( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Invalid network key length %d, Line : %d",  v2,  v3,  v4,  v5,  2u);
  sub_100008188();
}

void sub_1001AA81C()
{
  sub_100008178( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Invalid rotation time, Line : %d",  v2,  v3,  v4,  v5,  v6);
  sub_100008188();
}

void sub_1001AA890()
{
  sub_1001940E0( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Invalid Security Policy length %d, Line : %d",  v2,  v3,  v4,  v5,  2u);
  sub_100008188();
}

void sub_1001AA904()
{
  sub_1001940E0( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Invalid Mesh local prefix length %d, Line : %d",  v2,  v3,  v4,  v5,  2u);
  sub_100008188();
}

void sub_1001AA978()
{
  sub_100008178( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Decoded TLV, format is invalid, current position goes out of bound, Line : %d",  v2,  v3,  v4,  v5,  v6);
  sub_100008188();
}

void sub_1001AA9EC()
{
}

void sub_1001AAA60()
{
}

void sub_1001AAAD4()
{
}

void sub_1001AAB48()
{
}

void sub_1001AABB8()
{
}

void sub_1001AAC2C()
{
  sub_100008178( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Decoded TLV, format is invalid, current position goes out of bound, Line : %d",  v2,  v3,  v4,  v5,  v6);
  sub_100008188();
}

void sub_1001AACA0()
{
  sub_100008178( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Decoded Channel mask, mask entry format is invalid, Line : %d",  v2,  v3,  v4,  v5,  v6);
  sub_100008188();
}

void sub_1001AAD14()
{
  sub_100008178( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> error : Decoded entry length is not matching,  Line : %d",  v2,  v3,  v4,  v5,  v6);
  sub_100008188();
}

void sub_1001AAD88()
{
  sub_100008178( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> error : Decoded Channel page is neither zero nor 2,  Line : %d",  v2,  v3,  v4,  v5,  v6);
  sub_100008188();
}

void sub_1001AADFC( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001AAE6C()
{
}

void sub_1001AAED8()
{
}

void sub_1001AAF48()
{
  sub_100008178((void *)&_mh_execute_header, v0, v1, "%s: #MOS : ==> Decoded channel Len : %d", v2, v3, v4, v5, v6);
  sub_100008188();
}

void sub_1001AAFBC()
{
  sub_1001940E0( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Invalid pan id length %d, Line : %d",  v2,  v3,  v4,  v5,  2u);
  sub_100008188();
}

void sub_1001AB030()
{
  sub_1001940E0( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Invalid extended pan id length %d, Line : %d",  v2,  v3,  v4,  v5,  2u);
  sub_100008188();
}

void sub_1001AB0A4()
{
  sub_1001940E0( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Invalid pskc length %d, Line : %d",  v2,  v3,  v4,  v5,  2u);
  sub_100008188();
}

void sub_1001AB118()
{
  sub_1001940E0( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Invalid network key length %d, Line : %d",  v2,  v3,  v4,  v5,  2u);
  sub_100008188();
}

void sub_1001AB18C()
{
  sub_100008178( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Invalid rotation time, Line : %d",  v2,  v3,  v4,  v5,  v6);
  sub_100008188();
}

void sub_1001AB200()
{
  sub_1001940E0( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Invalid Security Policy length %d, Line : %d",  v2,  v3,  v4,  v5,  2u);
  sub_100008188();
}

void sub_1001AB274()
{
  sub_1001940E0( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Invalid Mesh local prefix length %d, Line : %d",  v2,  v3,  v4,  v5,  2u);
  sub_100008188();
}

void sub_1001AB2E8()
{
  sub_100008178( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Decoded TLV, format is invalid, current position goes out of bound, Line : %d",  v2,  v3,  v4,  v5,  v6);
  sub_100008188();
}

void sub_1001AB35C()
{
}

void sub_1001AB3D0()
{
}

double NetworkDiagnosticsReqTransmitReceive::NetworkDiagnosticsReqTransmitReceive( uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  double result = 0.0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + memset(v10, 0, 24) = 0u;
  *(_DWORD *)(a1 + memset(&v22.ai_socktype, 0, 40) = 1065353216;
  *(_OWORD *)(a1 + sub_1000BE23C(v2 - 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 8sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = 1065353216;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 12sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = 1065353216;
  *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + sub_10015DBA8(v29 - 160) = 1065353216;
  *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + sub_10000D448(v55 - 184) = 0u;
  *(_DWORD *)(a1 + 20sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = 1065353216;
  *(void *)(a1 + 20_Block_object_dispose(va, 8) = a3;
  *(_DWORD *)(a1 + 216) = 0;
  *(void *)(a1 + 2memset(v10, 0, 24) = 0LL;
  *(void *)(a1 + 2sub_10000AB80(v2 - 32) = 0LL;
  *(_WORD *)(a1 + 2sub_1000BE23C(v2 - 48) = 0;
  *(void *)(a1 + 2memset(&v22.ai_socktype, 0, 40) = 0LL;
  *(void *)(a1 + 264) = 0LL;
  *(void *)(a1 + 272) = 0LL;
  *(void *)(a1 + 2sub_10000D448(v30 - 56) = 0LL;
  *(_BYTE *)(a1 + 28sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = 0;
  return result;
}

{
  double result;
  *(void *)a1 = a2;
  double result = 0.0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + memset(v10, 0, 24) = 0u;
  *(_DWORD *)(a1 + memset(&v22.ai_socktype, 0, 40) = 1065353216;
  *(_OWORD *)(a1 + sub_1000BE23C(v2 - 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 8sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = 1065353216;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 12sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = 1065353216;
  *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + sub_10015DBA8(v29 - 160) = 1065353216;
  *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + sub_10000D448(v55 - 184) = 0u;
  *(_DWORD *)(a1 + 20sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = 1065353216;
  *(void *)(a1 + 20_Block_object_dispose(va, 8) = a3;
  *(_DWORD *)(a1 + 216) = 0;
  *(void *)(a1 + 2memset(v10, 0, 24) = 0LL;
  *(void *)(a1 + 2sub_10000AB80(v2 - 32) = 0LL;
  *(_WORD *)(a1 + 2sub_1000BE23C(v2 - 48) = 0;
  *(void *)(a1 + 2memset(&v22.ai_socktype, 0, 40) = 0LL;
  *(void *)(a1 + 264) = 0LL;
  *(void *)(a1 + 272) = 0LL;
  *(void *)(a1 + 2sub_10000D448(v30 - 56) = 0LL;
  *(_BYTE *)(a1 + 28sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = 0;
  return result;
}

void NetworkDiagnosticsReqTransmitReceive::cleanup(NetworkDiagnosticsLogger **this, int a2, int a3)
{
  if (a3)
  {
    *((_DWORD *)this + 54) = 0;
    sub_1001ACB6C(this + 1);
    sub_1001ACB6C(this + 6);
    sub_1001ACB6C(this + 11);
    sub_1001ACB6C(this + 16);
    sub_1001ACB6C(this + 21);
    this[29] = this[28];
    *((_WORD *)this + 1memset(v10, 0, 24) = 0;
    *((_BYTE *)this + 28sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = 0;
  }

BOOL NetworkDiagnosticsReqTransmitReceive::send_networkdiagnostics_get( uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint8_t v6 = a2;
  id v8 = (char *)a2 + 23;
  int v9 = inet_pton(30, (const char *)a2, (void *)a3);
  if (v9 <= 0)
  {
    __int128 v11 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_1001AD2EC(v8, v6, v11);
    }
  }

  else
  {
    *(_WORD *)(a3 + sub_10000AB80(v2 - 32) = 16;
    *(_BYTE *)(a3 + 16) = 1;
    if ((a4 & 1) != 0)
    {
      *(_BYTE *)(a3 + 17) = 8;
      *(_WORD *)(a3 + 34) = 2;
      if (*(_BYTE *)(*(void *)a1 + 50LL))
      {
        *(_BYTE *)(a3 + 1_Block_object_dispose(va, 8) = 9;
        __int16 v10 = 3;
LABEL_11:
        *(_WORD *)(a3 + 34) = v10;
      }
    }

    else
    {
      *(_WORD *)(a3 + 17) = 4101;
      *(_BYTE *)(a3 + 19) = 8;
      *(_WORD *)(a3 + 34) = 4;
      if (*(_BYTE *)(*(void *)a1 + 50LL))
      {
        *(_WORD *)(a3 + 2sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = 1033;
        __int16 v10 = 6;
        goto LABEL_11;
      }
    }
  }

  return v9 > 0;
}

BOOL NetworkDiagnosticsReqTransmitReceive::send_networkdiagnostics_get_to_self_ncp(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 264) = *(void *)(a1 + 256);
  BOOL v4 = NetworkDiagnosticsReqTransmitReceive::send_networkdiagnostics_get(a1, a2, (uint64_t)&v26, 0);
  if (v4)
  {
    unint64_t v5 = *(void *)(a1 + 264);
    unint64_t v6 = *(void *)(a1 + 272);
    if (v5 >= v6)
    {
      uint64_t v11 = *(void *)(a1 + 256);
      unint64_t v12 = 0x8E38E38E38E38E39LL * ((uint64_t)(v5 - v11) >> 2);
      unint64_t v13 = v12 + 1;
      if (v12 + 1 > 0x71C71C71C71C71CLL) {
        sub_10000CCF0();
      }
      unint64_t v14 = 0x8E38E38E38E38E39LL * ((uint64_t)(v6 - v11) >> 2);
      if (2 * v14 > v13) {
        unint64_t v13 = 2 * v14;
      }
      if (v14 >= 0x38E38E38E38E38ELL) {
        unint64_t v15 = 0x71C71C71C71C71CLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15) {
        uint64_t v16 = (char *)sub_1001ACBD0(a1 + 272, v15);
      }
      else {
        uint64_t v16 = 0LL;
      }
      id v17 = &v16[36 * v12];
      uint64_t v18 = &v16[36 * v15];
      __int128 v19 = v26;
      __int128 v20 = v27;
      *((_DWORD *)v17 + _Block_object_dispose(va, 8) = v28;
      *(_OWORD *)id v17 = v19;
      *((_OWORD *)v17 + 1) = v20;
      int v9 = v17 + 36;
      int v22 = *(char **)(a1 + 256);
      __int16 v21 = *(char **)(a1 + 264);
      if (v21 != v22)
      {
        do
        {
          __int128 v23 = *(_OWORD *)(v21 - 36);
          __int128 v24 = *(_OWORD *)(v21 - 20);
          *((_DWORD *)v17 - 1) = *((_DWORD *)v21 - 1);
          *(_OWORD *)(v17 - 2sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = v24;
          *(_OWORD *)(v17 - 36) = v23;
          v17 -= 36;
          v21 -= 36;
        }

        while (v21 != v22);
        __int16 v21 = *(char **)(a1 + 256);
      }

      *(void *)(a1 + 2sub_10000D448(v30 - 56) = v17;
      *(void *)(a1 + 264) = v9;
      *(void *)(a1 + 272) = v18;
      if (v21) {
        operator delete(v21);
      }
    }

    else
    {
      __int128 v7 = v26;
      __int128 v8 = v27;
      *(_DWORD *)(v5 + sub_10000AB80(v2 - 32) = v28;
      *(_OWORD *)unint64_t v5 = v7;
      *(_OWORD *)(v5 + 16) = v8;
      int v9 = (char *)(v5 + 36);
    }

    *(void *)(a1 + 264) = v9;
    *(_BYTE *)(a1 + 28sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = 1;
  }

  else
  {
    __int16 v10 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_1001AD370(a2, a1, v10);
    }
  }

  return v4;
}

uint64_t NetworkDiagnosticsReqTransmitReceive::send_networkdiagnostics_get_to_routers( NetworkDiagnosticsReqTransmitReceive *this)
{
  *((void *)this + 33) = *((void *)this + 32);
  uint64_t v2 = *((void *)this + 28);
  if (*((void *)this + 29) == v2)
  {
LABEL_31:
    uint64_t result = 1LL;
    *((_BYTE *)this + 28sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = 1;
  }

  else
  {
    uint64_t v3 = 0LL;
    int v4 = 0;
    unint64_t v5 = (char **)((char *)this + 256);
    uint64_t v29 = (char *)this + 272;
    while (1)
    {
      memset(&__p, 0, sizeof(__p));
      getDestinationIPv6FromPrefixAndRloc16( *(unsigned __int16 *)(v2 + 2 * v3),  (const void **)(*(void *)this + 6688LL),  &__p);
      *(void *)&__int128 v37 = *((void *)this + 28) + 2 * v3;
      sub_1001ACC18((uint64_t)this + 8, (unsigned __int16 *)v37, (uint64_t)&unk_10022BF15, (unsigned __int16 **)&v37)[12] = 1;
      BOOL v6 = NetworkDiagnosticsReqTransmitReceive::send_networkdiagnostics_get( (uint64_t)this,  (uint64_t *)&__p,  (uint64_t)&v37,  0);
      if (v6)
      {
        unint64_t v7 = *((void *)this + 33);
        unint64_t v8 = *((void *)this + 34);
        if (v7 >= v8)
        {
          unint64_t v15 = 0x8E38E38E38E38E39LL * ((uint64_t)(v7 - (void)*v5) >> 2);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x71C71C71C71C71CLL) {
            sub_10000CCF0();
          }
          unint64_t v17 = 0x8E38E38E38E38E39LL * ((uint64_t)(v8 - (void)*v5) >> 2);
          if (2 * v17 > v16) {
            unint64_t v16 = 2 * v17;
          }
          if (v17 >= 0x38E38E38E38E38ELL) {
            unint64_t v18 = 0x71C71C71C71C71CLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18) {
            __int128 v19 = (char *)sub_1001ACBD0((uint64_t)v29, v18);
          }
          else {
            __int128 v19 = 0LL;
          }
          __int128 v20 = &v19[36 * v15];
          __int128 v21 = v37;
          __int128 v22 = v38;
          *((_DWORD *)v20 + _Block_object_dispose(va, 8) = v39;
          *(_OWORD *)__int128 v20 = v21;
          *((_OWORD *)v20 + 1) = v22;
          __int128 v24 = (char *)*((void *)this + 32);
          __int128 v23 = (char *)*((void *)this + 33);
          OSStatus v25 = v20;
          if (v23 != v24)
          {
            do
            {
              __int128 v26 = *(_OWORD *)(v23 - 36);
              __int128 v27 = *(_OWORD *)(v23 - 20);
              *((_DWORD *)v25 - 1) = *((_DWORD *)v23 - 1);
              *(_OWORD *)(v25 - 2sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = v27;
              *(_OWORD *)(v25 - 36) = v26;
              v25 -= 36;
              v23 -= 36;
            }

            while (v23 != v24);
            __int128 v23 = *v5;
          }

          uint64_t v11 = v20 + 36;
          *((void *)this + sub_10000AB80(v2 - 32) = v25;
          *((void *)this + 33) = v20 + 36;
          *((void *)this + 34) = &v19[36 * v18];
          if (v23) {
            operator delete(v23);
          }
        }

        else
        {
          __int128 v9 = v37;
          __int128 v10 = v38;
          *(_DWORD *)(v7 + sub_10000AB80(v2 - 32) = v39;
          *(_OWORD *)unint64_t v7 = v9;
          *(_OWORD *)(v7 + 16) = v10;
          uint64_t v11 = (char *)(v7 + 36);
        }

        *((void *)this + 33) = v11;
      }

      else
      {
        unint64_t v12 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          p_p = &__p;
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          unint64_t v14 = (void *)(*(void *)this + 6688LL);
          *(_DWORD *)std::string buf = 136315650;
          __int16 v32 = "send_networkdiagnostics_get_to_routers";
          __int16 v33 = 2080;
          id v34 = p_p;
          __int16 v35 = 2080;
          id v36 = v14;
          _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "TDM: %s ERROR Cannot send network diagnostics get to neighbor router=%s MLPrefix=%s ",  buf,  0x20u);
        }
      }

      if (!v6) {
        return 0LL;
      }
      uint64_t v3 = (unsigned __int16)++v4;
      uint64_t v2 = *((void *)this + 28);
    }
  }

  return result;
}

void sub_1001ABBC0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t NetworkDiagnosticsReqTransmitReceive::send_networkdiagnostics_get_to_children( NetworkDiagnosticsReqTransmitReceive *this)
{
  if (!*((void *)this + 19) && !*((void *)this + 24)) {
    *((_BYTE *)this + 249) = 1;
  }
  uint64_t v2 = 1LL;
  if (*(_DWORD *)(*(void *)this + 44LL))
  {
    *((_DWORD *)this + 54) = 3;
    *((void *)this + 33) = *((void *)this + 32);
    uint64_t v3 = (unsigned __int16 *)((char *)this + 144);
    __int16 v51 = (char *)this + 272;
    char v52 = (char **)((char *)this + 256);
    while (1)
    {
      uint64_t v3 = *(unsigned __int16 **)v3;
      if (!v3) {
        break;
      }
      memset(&__p, 0, sizeof(__p));
      getDestinationIPv6FromPrefixAndRloc16(v3[8], (const void **)(*(void *)this + 6688LL), &__p);
      *(void *)__int128 v58 = v3 + 8;
      sub_1001ACC18((uint64_t)this + 48, v3 + 8, (uint64_t)&unk_10022BF15, (unsigned __int16 **)v58)[12] = 1;
      BOOL v4 = NetworkDiagnosticsReqTransmitReceive::send_networkdiagnostics_get( (uint64_t)this,  (uint64_t *)&__p,  (uint64_t)v58,  0);
      if (v4)
      {
        unint64_t v5 = *((void *)this + 33);
        unint64_t v6 = *((void *)this + 34);
        if (v5 >= v6)
        {
          unint64_t v12 = 0x8E38E38E38E38E39LL * ((uint64_t)(v5 - (void)*v52) >> 2);
          unint64_t v13 = v12 + 1;
          if (v12 + 1 > 0x71C71C71C71C71CLL) {
            sub_10000CCF0();
          }
          unint64_t v14 = 0x8E38E38E38E38E39LL * ((uint64_t)(v6 - (void)*v52) >> 2);
          if (2 * v14 > v13) {
            unint64_t v13 = 2 * v14;
          }
          if (v14 >= 0x38E38E38E38E38ELL) {
            unint64_t v15 = 0x71C71C71C71C71CLL;
          }
          else {
            unint64_t v15 = v13;
          }
          if (v15) {
            unint64_t v16 = (char *)sub_1001ACBD0((uint64_t)v51, v15);
          }
          else {
            unint64_t v16 = 0LL;
          }
          unint64_t v17 = &v16[36 * v12];
          __int128 v18 = *(_OWORD *)v58;
          __int128 v19 = *(_OWORD *)&v58[16];
          *((_DWORD *)v17 + _Block_object_dispose(va, 8) = v59;
          *(_OWORD *)unint64_t v17 = v18;
          *((_OWORD *)v17 + 1) = v19;
          __int128 v21 = (char *)*((void *)this + 32);
          __int128 v20 = (char *)*((void *)this + 33);
          __int128 v22 = v17;
          if (v20 != v21)
          {
            do
            {
              __int128 v23 = *(_OWORD *)(v20 - 36);
              __int128 v24 = *(_OWORD *)(v20 - 20);
              *((_DWORD *)v22 - 1) = *((_DWORD *)v20 - 1);
              *(_OWORD *)(v22 - 2sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = v24;
              *(_OWORD *)(v22 - 36) = v23;
              v22 -= 36;
              v20 -= 36;
            }

            while (v20 != v21);
            __int128 v20 = *v52;
          }

          __int128 v9 = v17 + 36;
          *((void *)this + sub_10000AB80(v2 - 32) = v22;
          *((void *)this + 33) = v17 + 36;
          *((void *)this + 34) = &v16[36 * v15];
          if (v20) {
            operator delete(v20);
          }
        }

        else
        {
          __int128 v7 = *(_OWORD *)v58;
          __int128 v8 = *(_OWORD *)&v58[16];
          *(_DWORD *)(v5 + sub_10000AB80(v2 - 32) = v59;
          *(_OWORD *)unint64_t v5 = v7;
          *(_OWORD *)(v5 + 16) = v8;
          __int128 v9 = (char *)(v5 + 36);
        }

        *((void *)this + 33) = v9;
      }

      else
      {
        __int128 v10 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          p_p = &__p;
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)std::string buf = 136315394;
          __int16 v55 = "send_networkdiagnostics_get_to_children";
          __int16 v56 = 2080;
          __int128 v57 = p_p;
          _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "TDM: %s Cannot send network diagnostics get to FED child node %s",  buf,  0x16u);
        }
      }

      if ((char)__p.__r_.__value_.__s.__size_ < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!v4) {
          return 0LL;
        }
      }

      else if (!v4)
      {
        return 0LL;
      }
    }

    if (*(_DWORD *)(*(void *)this + 44LL) == 2)
    {
      OSStatus v25 = (unsigned __int16 *)((char *)this + 184);
      while (1)
      {
        OSStatus v25 = *(unsigned __int16 **)v25;
        if (!v25) {
          break;
        }
        memset(&__p, 0, sizeof(__p));
        getDestinationIPv6FromPrefixAndRloc16(v25[8], (const void **)(*(void *)this + 6688LL), &__p);
        *(void *)__int128 v58 = v25 + 8;
        sub_1001ACC18((uint64_t)this + 48, v25 + 8, (uint64_t)&unk_10022BF15, (unsigned __int16 **)v58)[12] = 1;
        BOOL v26 = NetworkDiagnosticsReqTransmitReceive::send_networkdiagnostics_get( (uint64_t)this,  (uint64_t *)&__p,  (uint64_t)v58,  1);
        if (v26)
        {
          unint64_t v27 = *((void *)this + 33);
          unint64_t v28 = *((void *)this + 34);
          if (v27 >= v28)
          {
            unint64_t v34 = 0x8E38E38E38E38E39LL * ((uint64_t)(v27 - (void)*v52) >> 2);
            unint64_t v35 = v34 + 1;
            if (v34 + 1 > 0x71C71C71C71C71CLL) {
              sub_10000CCF0();
            }
            unint64_t v36 = 0x8E38E38E38E38E39LL * ((uint64_t)(v28 - (void)*v52) >> 2);
            if (2 * v36 > v35) {
              unint64_t v35 = 2 * v36;
            }
            if (v36 >= 0x38E38E38E38E38ELL) {
              unint64_t v37 = 0x71C71C71C71C71CLL;
            }
            else {
              unint64_t v37 = v35;
            }
            if (v37) {
              __int128 v38 = (char *)sub_1001ACBD0((uint64_t)v51, v37);
            }
            else {
              __int128 v38 = 0LL;
            }
            int v39 = &v38[36 * v34];
            __int128 v40 = *(_OWORD *)v58;
            __int128 v41 = *(_OWORD *)&v58[16];
            *((_DWORD *)v39 + _Block_object_dispose(va, 8) = v59;
            *(_OWORD *)int v39 = v40;
            *((_OWORD *)v39 + 1) = v41;
            __int16 v43 = (char *)*((void *)this + 32);
            id v42 = (char *)*((void *)this + 33);
            id v44 = v39;
            if (v42 != v43)
            {
              do
              {
                __int128 v45 = *(_OWORD *)(v42 - 36);
                __int128 v46 = *(_OWORD *)(v42 - 20);
                *((_DWORD *)v44 - 1) = *((_DWORD *)v42 - 1);
                *(_OWORD *)(v44 - 2sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = v46;
                *(_OWORD *)(v44 - 36) = v45;
                v44 -= 36;
                v42 -= 36;
              }

              while (v42 != v43);
              id v42 = *v52;
            }

            id v31 = v39 + 36;
            *((void *)this + sub_10000AB80(v2 - 32) = v44;
            *((void *)this + 33) = v39 + 36;
            *((void *)this + 34) = &v38[36 * v37];
            if (v42) {
              operator delete(v42);
            }
          }

          else
          {
            __int128 v29 = *(_OWORD *)v58;
            __int128 v30 = *(_OWORD *)&v58[16];
            *(_DWORD *)(v27 + sub_10000AB80(v2 - 32) = v59;
            *(_OWORD *)unint64_t v27 = v29;
            *(_OWORD *)(v27 + 16) = v30;
            id v31 = (char *)(v27 + 36);
          }

          *((void *)this + 33) = v31;
        }

        else
        {
          __int16 v32 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          {
            __int16 v33 = &__p;
            if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              __int16 v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)std::string buf = 136315394;
            __int16 v55 = "send_networkdiagnostics_get_to_children";
            __int16 v56 = 2080;
            __int128 v57 = v33;
            _os_log_error_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_ERROR,  "TDM: %s Cannot send network diagnostics get to SED child node %s",  buf,  0x16u);
          }
        }

        if (!v26) {
          return 0LL;
        }
      }
    }

    else
    {
      __int16 v47 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
      if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
      {
        uint64_t v48 = *((void *)this + 19);
        uint64_t v49 = *((void *)this + 24);
        *(_DWORD *)__int128 v58 = 136315650;
        *(void *)&v58[4] = "send_networkdiagnostics_get_to_children";
        *(_WORD *)&v58[12] = 2048;
        *(void *)&v58[14] = v48;
        *(_WORD *)&v58[22] = 2048;
        *(void *)&v58[24] = v49;
        _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_INFO,  "TDM: %s Send to all children not enabled. Exit here fedsetsize=%lu sedsetsize=%lu",  v58,  0x20u);
      }
    }

    uint64_t v2 = 1LL;
    *((_BYTE *)this + 28sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = 1;
  }

  return v2;
}

void sub_1001AC1E8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
}

void NetworkDiagnosticsReqTransmitReceive::populate_pending_diag_req_destinations( void *a1, int a2, uint64_t a3)
{
  if (a3)
  {
    unsigned int v6 = 0;
    __int128 v7 = (void **)(a1 + 28);
    uint64_t v8 = (uint64_t)(a1 + 30);
    do
    {
      if (((*(unsigned __int8 *)(a3 + (v6 >> 3) + 3) << (v6 & 7)) & 0x80) != 0
        && getRloc16FromRouterId(v6) != a2)
      {
        __int16 Rloc16FromRouterId = getRloc16FromRouterId(v6);
        __int16 v10 = Rloc16FromRouterId;
        unint64_t v12 = (char *)a1[29];
        unint64_t v11 = a1[30];
        if ((unint64_t)v12 >= v11)
        {
          unint64_t v14 = (char *)*v7;
          uint64_t v15 = v12 - (_BYTE *)*v7;
          if (v15 <= -3) {
            sub_10000CCF0();
          }
          uint64_t v16 = v15 >> 1;
          unint64_t v17 = v11 - (void)v14;
          if (v17 <= (v15 >> 1) + 1) {
            unint64_t v18 = v16 + 1;
          }
          else {
            unint64_t v18 = v17;
          }
          if (v17 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v19 = v18;
          }
          if (v19)
          {
            __int128 v20 = (char *)sub_1001AD07C(v8, v19);
            unint64_t v14 = (char *)a1[28];
            unint64_t v12 = (char *)a1[29];
          }

          else
          {
            __int128 v20 = 0LL;
          }

          __int128 v21 = &v20[2 * v16];
          *(_WORD *)__int128 v21 = v10;
          unint64_t v13 = v21 + 2;
          while (v12 != v14)
          {
            __int16 v22 = *((_WORD *)v12 - 1);
            v12 -= 2;
            *((_WORD *)v21 - 1) = v22;
            v21 -= 2;
          }

          a1[28] = v21;
          a1[29] = v13;
          a1[30] = &v20[2 * v19];
          if (v14) {
            operator delete(v14);
          }
        }

        else
        {
          *(_WORD *)unint64_t v12 = Rloc16FromRouterId;
          unint64_t v13 = v12 + 2;
        }

        a1[29] = v13;
      }

      ++v6;
    }

    while (v6 != 63);
  }

BOOL NetworkDiagnosticsReqTransmitReceive::parse_rsp_tlvs( uint64_t a1, uint64_t a2, unsigned int a3, void *a4, _WORD *a5, _BYTE *a6)
{
  if (a2)
  {
    if (a3)
    {
      int v12 = 0;
      uint64_t v13 = a2;
      do
      {
        switch(*(_BYTE *)v13)
        {
          case 1:
            *a5 = bswap32(*(unsigned __int16 *)(v13 + 2)) >> 16;
            *a6 = 1;
            break;
          case 2:
          case 3:
          case 6:
          case 7:
            break;
          case 4:
            a4[5] = v13;
            break;
          case 5:
            a4[1] = v13;
            if (*(_DWORD *)(a1 + 216) == 1) {
              NetworkDiagnosticsReqTransmitReceive::populate_pending_diag_req_destinations( (void *)a1,  (unsigned __int16)*a5,  v13);
            }
            break;
          case 8:
            a4[3] = v13;
            break;
          case 9:
            a4[4] = v13;
            break;
          default:
            if (*(_BYTE *)v13 == 16) {
              a4[2] = v13;
            }
            break;
        }

        int v14 = *(unsigned __int8 *)(v13 + 1);
        if (v14 == 255) {
          int v15 = 3;
        }
        else {
          int v15 = 1;
        }
        if (v14 == 255)
        {
          uint64_t v18 = *(unsigned __int8 *)(v13 + 2);
          uint64_t v19 = *(unsigned __int8 *)(v13 + 3);
          int v14 = v19 | ((_DWORD)v18 << 8);
          uint64_t v17 = v19 | (v18 << 8);
          uint64_t v16 = 3LL;
        }

        else
        {
          uint64_t v16 = 1LL;
          uint64_t v17 = *(unsigned __int8 *)(v13 + 1);
        }

        v13 += 1 + v16 + v17;
        int v20 = v12 + v15 + v14;
        int v12 = v20 + 1;
      }

      while (a3 > (unsigned __int16)(v20 + 1));
    }
  }

  else
  {
    __int128 v21 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      sub_1001AD430(v21, v22, v23, v24, v25, v26, v27, v28);
    }
  }

  return a2 != 0;
}

BOOL NetworkDiagnosticsReqTransmitReceive::process_diag_rsp_from_self(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int16 v16 = a3;
  uint64_t v3 = (_DWORD *)(a1 + 216);
  int v4 = *(_DWORD *)(a1 + 216);
  if (v4 == 1)
  {
    *(_BYTE *)(a2 + 1) = 0;
    uint64_t v8 = a1 + 8;
    LOWORD(v12) = a3;
    __int128 v9 = *(_OWORD *)(a2 + 16);
    __int128 v13 = *(_OWORD *)a2;
    __int128 v14 = v9;
    __int128 v15 = *(_OWORD *)(a2 + 32);
    sub_1001AD0AC(a1 + 8, (unsigned __int16 *)&v12, (uint64_t)&v12);
    NetworkDiagnosticsLogger::output_data_to_file( *(void **)(a1 + 208),  a3,  a2,  v3,  (void *)(a1 + 88),  (void *)(a1 + 128),  (void *)(a1 + 168));
    int v12 = &v16;
    *((_BYTE *)sub_1001ACC18(v8, &v16, (uint64_t)&unk_10022BF15, &v12) + 25) = 1;
    if (*(void *)(a1 + 224) == *(void *)(a1 + 232))
    {
      if (*(void *)(a1 + 152) || *(void *)(a1 + 192)) {
        NetworkDiagnosticsReqTransmitReceive::send_networkdiagnostics_get_to_children((NetworkDiagnosticsReqTransmitReceive *)a1);
      }
      else {
        *(_WORD *)(a1 + 2sub_1000BE23C(v2 - 48) = 257;
      }
    }

    else
    {
      *(_DWORD *)(a1 + 216) = 2;
      NetworkDiagnosticsReqTransmitReceive::send_networkdiagnostics_get_to_routers((NetworkDiagnosticsReqTransmitReceive *)a1);
      *(void *)(a1 + 2sub_10000AB80(v2 - 32) = *(void *)(a1 + 224);
    }
  }

  else
  {
    __int16 v10 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_1001AD4A0();
    }
  }

  return v4 == 1;
}

BOOL NetworkDiagnosticsReqTransmitReceive::process_diag_rsp_from_routers( uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  unsigned __int16 v15 = a3;
  uint64_t v3 = (_DWORD *)(a1 + 216);
  int v4 = *(_DWORD *)(a1 + 216);
  if (v4 == 2)
  {
    *(_BYTE *)(a2 + 1) = 0;
    uint64_t v7 = a1 + 8;
    unsigned __int16 v16 = &v15;
    uint64_t v8 = sub_1001ACC18(a1 + 8, &v15, (uint64_t)&unk_10022BF15, &v16);
    __int128 v9 = *(_OWORD *)a2;
    __int128 v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v8 + 2_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(v8 + 2sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = v10;
    *(_OWORD *)(v8 + 12) = v9;
    NetworkDiagnosticsLogger::output_data_to_file( *(void **)(a1 + 208),  v15,  a2,  v3,  (void *)(a1 + 88),  (void *)(a1 + 128),  (void *)(a1 + 168));
    unsigned __int16 v16 = &v15;
    *((_BYTE *)sub_1001ACC18(v7, &v15, (uint64_t)&unk_10022BF15, &v16) + 25) = 1;
    unint64_t v11 = *(uint64_t **)(a1 + 24);
    if (!v11) {
      goto LABEL_6;
    }
    char v12 = 1;
    do
    {
      v12 &= *((_BYTE *)v11 + 25) != 0;
      unint64_t v11 = (uint64_t *)*v11;
    }

    while (v11);
    if ((v12 & 1) != 0)
    {
LABEL_6:
      *(_BYTE *)(a1 + 2sub_1000BE23C(v2 - 48) = 1;
      NetworkDiagnosticsReqTransmitReceive::send_networkdiagnostics_get_to_children((NetworkDiagnosticsReqTransmitReceive *)a1);
    }
  }

  else
  {
    __int128 v13 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_1001AD50C();
    }
  }

  return v4 == 2;
}

BOOL NetworkDiagnosticsReqTransmitReceive::process_diag_rsp_from_children( uint64_t a1, uint64_t a2, unsigned __int16 a3, _BYTE *a4)
{
  unsigned __int16 v19 = a3;
  int v4 = (_DWORD *)(a1 + 216);
  int v5 = *(_DWORD *)(a1 + 216);
  if (v5 == 3)
  {
    *(_BYTE *)(a2 + 1) = 0;
    uint64_t v9 = a1 + 48;
    *(void *)std::string buf = &v19;
    __int128 v10 = sub_1001ACC18(a1 + 48, &v19, (uint64_t)&unk_10022BF15, (unsigned __int16 **)buf);
    __int128 v11 = *(_OWORD *)a2;
    __int128 v12 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v10 + 2_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(v10 + 2sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = v12;
    *(_OWORD *)(v10 + 12) = v11;
    NetworkDiagnosticsLogger::output_data_to_file( *(void **)(a1 + 208),  v19,  a2,  v4,  (void *)(a1 + 88),  (void *)(a1 + 128),  (void *)(a1 + 168));
    *(void *)std::string buf = &v19;
    *((_BYTE *)sub_1001ACC18(v9, &v19, (uint64_t)&unk_10022BF15, (unsigned __int16 **)buf) + 25) = 1;
    *a4 = 1;
    __int128 v13 = *(uint64_t **)(a1 + 64);
    if (!v13) {
      goto LABEL_10;
    }
    int v14 = 1;
    do
    {
      if (!*((_BYTE *)v13 + 25))
      {
        unsigned __int16 v15 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          int v16 = *((unsigned __int16 *)v13 + 8);
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "process_diag_rsp_from_children";
          __int16 v21 = 1024;
          int v22 = v16;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "TDM: %s Still waiting for diag rsp from Child node Rloc16=0x%x ",  buf,  0x12u);
        }

        int v14 = 0;
        *a4 = 0;
      }

      __int128 v13 = (uint64_t *)*v13;
    }

    while (v13);
    if (v14) {
LABEL_10:
    }
      *(_BYTE *)(a1 + 249) = 1;
  }

  else
  {
    uint64_t v17 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      sub_1001AD578();
    }
  }

  return v5 == 3;
}

BOOL NetworkDiagnosticsReqTransmitReceive::handle_network_diagnostics_response( NetworkDiagnosticsReqTransmitReceive *this, unsigned __int8 *a2, unsigned int a3)
{
  unsigned __int16 v28 = 0;
  char v27 = 0;
  BOOL v4 = NetworkDiagnosticsReqTransmitReceive::parse_rsp_tlvs((uint64_t)this, (uint64_t)a2, a3, v29, &v28, &v27);
  BOOL result = 0LL;
  if (v4)
  {
    if (v27)
    {
      int v6 = *((_DWORD *)this + 54);
      switch(v6)
      {
        case 3:
          if (!NetworkDiagnosticsReqTransmitReceive::process_diag_rsp_from_children( (uint64_t)this,  (uint64_t)v29,  v28,  &v26))
          {
            uint64_t v23 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
            BOOL result = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
            if (!result) {
              return result;
            }
            sub_1001AD7A0();
            return 0LL;
          }

          break;
        case 2:
          if (!NetworkDiagnosticsReqTransmitReceive::process_diag_rsp_from_routers((uint64_t)this, (uint64_t)v29, v28))
          {
            uint64_t v25 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
            BOOL result = os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
            if (!result) {
              return result;
            }
            sub_1001AD730();
            return 0LL;
          }

          break;
        case 1:
          if (!NetworkDiagnosticsReqTransmitReceive::process_diag_rsp_from_self((uint64_t)this, (uint64_t)v29, v28))
          {
            uint64_t v7 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
            BOOL result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
            if (!result) {
              return result;
            }
            sub_1001AD6C0(v7, v8, v9, v10, v11, v12, v13, v14);
            return 0LL;
          }

          break;
        default:
          uint64_t v24 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
          BOOL result = os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
          if (!result) {
            return result;
          }
          sub_1001AD654();
          return 0LL;
      }

      return 1LL;
    }

    unsigned __int16 v15 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
    BOOL result = os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    sub_1001AD5E4(v15, v16, v17, v18, v19, v20, v21, v22);
    return 0LL;
  }

  return result;
}

void *sub_1001ACB6C(void *result)
{
  if (result[3])
  {
    uint64_t v1 = result;
    BOOL result = (void *)result[2];
    if (result)
    {
      do
      {
        uint64_t v2 = (void *)*result;
        operator delete(result);
        BOOL result = v2;
      }

      while (v2);
    }

    v1[2] = 0LL;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0LL; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0LL;
    }

    v1[3] = 0LL;
  }

  return result;
}

void *sub_1001ACBD0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x71C71C71C71C71DLL) {
    sub_10000F12C();
  }
  return operator new(36 * a2);
}

unsigned __int16 *sub_1001ACC18(uint64_t a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v8 - 1) & v7;
    }

    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = (unsigned __int16 *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = *((void *)v11 + 1);
          if (v12 == v7)
          {
            if (v11[8] == (_DWORD)v7) {
              return v11;
            }
          }

          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }

            else
            {
              v12 &= v8 - 1;
            }

            if (v12 != v4) {
              break;
            }
          }

          uint64_t v11 = *(unsigned __int16 **)v11;
        }

        while (v11);
      }
    }
  }

  uint64_t v11 = (unsigned __int16 *)operator new(0x48uLL);
  *(void *)uint64_t v11 = 0LL;
  *((void *)v11 + 1) = v7;
  char v11[8] = **a4;
  *(_OWORD *)(v11 + 2_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(v11 + 2sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = 0u;
  *(_OWORD *)(v11 + 12) = 0u;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1LL;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_1001ACE48(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v8 - 1) & v7;
    }
  }

  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *(void *)uint64_t v11 = *v20;
LABEL_38:
    *uint64_t v20 = v11;
    goto LABEL_39;
  }

  *(void *)uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*(void *)v11)
  {
    unint64_t v21 = *(void *)(*(void *)v11 + 8LL);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }

    else
    {
      v21 &= v8 - 1;
    }

    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }

void sub_1001ACE34(_Unwind_Exception *a1)
{
}

void sub_1001ACE48(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2LL;
  }

  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }

  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }

    else
    {
      uint64_t v7 = 1LL << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }

    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4) {
LABEL_16:
    }
      sub_1001ACF24(a1, prime);
  }

void sub_1001ACF24(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_10000F12C();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0LL;
    *(void *)(a1 + _Block_object_dispose(va, 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0LL;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }

      else
      {
        v8 &= a2 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v_Block_object_dispose(va, 8) = a1 + 16;
      uint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }

          else
          {
            v12 &= a2 - 1;
          }

          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }

            *uint64_t v7 = *v11;
            *uint64_t v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            uint64_t v11 = v7;
          }

          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          uint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }

        while (v11);
      }
    }
  }

  else
  {
    uint64_t v10 = *(void **)a1;
    *(void *)a1 = 0LL;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  }

void *sub_1001AD07C(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_10000F12C();
  }
  return operator new(2 * a2);
}

unsigned __int16 *sub_1001AD0AC(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v7 - 1) & v6;
    }

    uint8x8_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (unsigned __int16 *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = *((void *)v10 + 1);
          if (v11 == v6)
          {
            if (v10[8] == (_DWORD)v6) {
              return v10;
            }
          }

          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }

            else
            {
              v11 &= v7 - 1;
            }

            if (v11 != v3) {
              break;
            }
          }

          uint64_t v10 = *(unsigned __int16 **)v10;
        }

        while (v10);
      }
    }
  }

  uint64_t v10 = (unsigned __int16 *)operator new(0x48uLL);
  *(void *)uint64_t v10 = 0LL;
  *((void *)v10 + 1) = v6;
  v10[8] = *(_WORD *)a3;
  *(_OWORD *)(v10 + 12) = *(_OWORD *)(a3 + 8);
  *(_OWORD *)(v10 + 2sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(v10 + 2_Block_object_dispose(va, 8) = *(_OWORD *)(a3 + 40);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1LL;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_1001ACE48(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v7 - 1) & v6;
    }
  }

  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *(void *)uint64_t v10 = *v19;
LABEL_38:
    *uint64_t v19 = v10;
    goto LABEL_39;
  }

  *(void *)uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*(void *)v10)
  {
    unint64_t v20 = *(void *)(*(void *)v10 + 8LL);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }

    else
    {
      v20 &= v7 - 1;
    }

    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }

void sub_1001AD2CC(_Unwind_Exception *a1)
{
}

void sub_1001AD2E0(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = a1;
}

void sub_1001AD2EC(char *a1, void *a2, os_log_t log)
{
  if (*a1 >= 0) {
    unint64_t v3 = a2;
  }
  else {
    unint64_t v3 = (void *)*a2;
  }
  int v4 = 136315138;
  unint64_t v5 = v3;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "TDM: Bad destination IP address passed  %s",  (uint8_t *)&v4,  0xCu);
  sub_100008188();
}

void sub_1001AD370(uint64_t *a1, uint64_t a2, os_log_t log)
{
  else {
    unint64_t v3 = (uint64_t *)*a1;
  }
  int v4 = (void *)(*(void *)a2 + 6688LL);
  int v5 = 136315650;
  unint64_t v6 = "send_networkdiagnostics_get_to_self_ncp";
  __int16 v7 = 2080;
  uint8x8_t v8 = v3;
  __int16 v9 = 2080;
  uint64_t v10 = v4;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "TDM: %s ERROR Cannot send network self dest =%s MLPrefix=%s ",  (uint8_t *)&v5,  0x20u);
}

void sub_1001AD430( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001AD4A0()
{
}

void sub_1001AD50C()
{
}

void sub_1001AD578()
{
}

void sub_1001AD5E4( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001AD654()
{
  sub_100008178( (void *)&_mh_execute_header,  v0,  v1,  "TDM: %s Error Cannot process diag rsp tlv invalid state=%d  ",  v2,  v3,  v4,  v5,  2u);
  sub_100008188();
}

void sub_1001AD6C0( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001AD730()
{
  sub_100008178( (void *)&_mh_execute_header,  v0,  v1,  "TDM: %s Error Processing diag data rsp from routers rloc16=0x%x  ",  v2,  v3,  v4,  v5,  2u);
  sub_100008188();
}

void sub_1001AD7A0()
{
  sub_100008178( (void *)&_mh_execute_header,  v0,  v1,  "TDM: %s Error Processing diag data rsp from child rloc16=0x%x  ",  v2,  v3,  v4,  v5,  2u);
  sub_100008188();
}

uint64_t remove_old_files(void)
{
  unint64_t v6 = 0LL;
  else {
    std::string __p = v7;
  }
  sub_1001ADBA8((dirent **)&v5, &__p, 0);
  while (!sub_1001ADC68((uint64_t *)&v5, (uint64_t *)&v6))
  {
    uint64_t v0 = sub_1001ADBE8((uint64_t *)&v5);
    else {
      std::string __p = *(std::string *)v0;
    }
    time_t v1 = sub_10016D684((uint64_t)&__p, 0LL);
    if (v1 != -1)
    {
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::from_time_t(v1).__d_.__rep_;
      if (std::chrono::system_clock::now().__d_.__rep_ - rep >= 18001000000LL) {
        sub_10016DEF4(&__p, 0LL);
      }
    }

    sub_100168A50((dirent **)&v5, 0LL);
  }

  sub_10016A418(&v5);
  sub_10016A418(&v6);
  return 1LL;
}

void sub_1001AD954( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, unsigned int *a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t create_new_tdm_log_folder(uint64_t a1, std::string *a2)
{
  uint64_t v3 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@",  @"/var/mobile/Library/Logs/CrashReporter/CoreThread/topology");
  uint64_t v4 = objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  uint64_t v5 = (void *)qword_1002D1A18;
  qword_1002D1A18 = v4;

  unsigned __int8 v13 = 0;
  unsigned __int8 v6 = [(id)qword_1002D1A18 fileExistsAtPath:v3 isDirectory:&v13];
  if (v13)
  {
    char v7 = v6;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG)) {
      sub_1001ADCD0(v7, &v13);
    }
    goto LABEL_8;
  }

  id v12 = 0LL;
  [(id)qword_1002D1A18 createDirectoryAtPath:v3 withIntermediateDirectories:1 attributes:0 error:&v12];
  id v8 = v12;
  if (!v8)
  {
LABEL_8:
    if ((char)a2->__r_.__value_.__s.__size_ < 0)
    {
      *a2->__r_.__value_.__l.__data_ = 0;
      a2->__r_.__value_.__l.__size_ = 0LL;
    }

    else
    {
      a2->__r_.__value_.__s.__data_[0] = 0;
      a2->__r_.__value_.__s.__size_ = 0;
    }

    std::string::assign(a2, -[NSString cStringUsingEncoding:](v3, "cStringUsingEncoding:", 4LL));
    uint64_t v10 = 1LL;
    goto LABEL_12;
  }

  __int16 v9 = v8;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 138412546;
    unint64_t v15 = @"/var/mobile/Library/Logs/CrashReporter/CoreThread/topology";
    __int16 v16 = 2112;
    size_t v17 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "error creating directory %@: %@",  buf,  0x16u);
  }

  uint64_t v10 = 0LL;
LABEL_12:

  return v10;
}

void sub_1001ADB84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

dirent **sub_1001ADBA8(dirent **a1, std::string *a2, char a3)
{
  *a1 = 0LL;
  sub_100168560(a1, a2, a3, 0LL);
  return a1;
}

void sub_1001ADBD4(_Unwind_Exception *a1)
{
}

uint64_t sub_1001ADBE8(uint64_t *a1)
{
  if (!*a1 || !*(void *)(sub_1001ADC28(a1) + 48)) {
    sub_1001ADD60();
  }
  return sub_1001ADC28(a1) + 8;
}

uint64_t sub_1001ADC28(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  }
  return result;
}

BOOL sub_1001ADC68(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a1 == *a2) {
    return 1LL;
  }
  if (*a1)
  {
    if (*(void *)(sub_1001ADC28(a1) + 48)) {
      return 0LL;
    }
    uint64_t v2 = *a2;
  }

  return !v2 || *(void *)(sub_1001ADC28(a2) + 48) == 0LL;
}

void sub_1001ADCD0(char a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  v3[0] = 67109376;
  v3[1] = a1 & 1;
  __int16 v4 = 1024;
  int v5 = v2;
  _os_log_debug_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEBUG,  "Directory Already exists.Cannot create, isFile: %d, isDir: %d",  (uint8_t *)v3,  0xEu);
}

void sub_1001ADD60()
{
}

void NetworkDiagnosticsPendingConfig::NetworkDiagnosticsPendingConfig(NetworkDiagnosticsPendingConfig *this)
{
  *(void *)((char *)this + 2sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = 0xE1A0000000FLL;
  *(_WORD *)((char *)this + 1) = 257;
  *((_BYTE *)this + 3) = 1;
  *(_OWORD *)((char *)this + 4) = xmmword_10022BF30;
  atomic_store(0, (unsigned __int8 *)this);
}

{
  *(void *)((char *)this + 2sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = 0xE1A0000000FLL;
  *(_WORD *)((char *)this + 1) = 257;
  *((_BYTE *)this + 3) = 1;
  *(_OWORD *)((char *)this + 4) = xmmword_10022BF30;
  atomic_store(0, (unsigned __int8 *)this);
}

void NetworkDiagnosticsPendingConfig::NetworkDiagnosticsPendingConfig( NetworkDiagnosticsPendingConfig *this, const NetworkDiagnosticsPendingConfig *a2)
{
  *(void *)((char *)this + 2sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = *(void *)((char *)a2 + 20);
  *(_WORD *)((char *)this + 1) = *(_WORD *)((char *)a2 + 1);
  *((_BYTE *)this + 3) = *((_BYTE *)a2 + 3);
  *(_OWORD *)((char *)this + 4) = *(_OWORD *)((char *)a2 + 4);
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)a2);
  atomic_store(v2 & 1, (unsigned __int8 *)this);
}

{
  unsigned __int8 v2;
  *(void *)((char *)this + 2sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = *(void *)((char *)a2 + 20);
  *(_WORD *)((char *)this + 1) = *(_WORD *)((char *)a2 + 1);
  *((_BYTE *)this + 3) = *((_BYTE *)a2 + 3);
  *(_OWORD *)((char *)this + 4) = *(_OWORD *)((char *)a2 + 4);
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)a2);
  atomic_store(v2 & 1, (unsigned __int8 *)this);
}

__n128 NetworkDiagnosticsPendingConfig::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 2sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = *(void *)(a2 + 20);
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  __n128 result = *(__n128 *)(a2 + 4);
  *(__n128 *)(a1 + 4) = result;
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)a2);
  atomic_store(v3 & 1, (unsigned __int8 *)a1);
  return result;
}

void NetworkDiagnosticsConfigDb::NetworkDiagnosticsConfigDb(NetworkDiagnosticsConfigDb *this)
{
  *(void *)this = 0LL;
  *((void *)this + 1) = 0LL;
  *((void *)this + 2) = 0LL;
  *(_OWORD *)((char *)this + sub_10000D448(v30 - 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 8_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 12sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 16_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)((char *)this + sub_10000D448(v55 - 184) = 0u;
  *(_OWORD *)((char *)this + 20sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 2sub_10000AB80(v2 - 32) = 0u;
  *(_OWORD *)((char *)this + 2sub_1000BE23C(v2 - 48) = 0u;
  *((void *)this + 45) = 0LL;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 28sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 32_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  sub_1001AFB14((void (__cdecl ***)(std::ofstream *__hidden))this + 46);
  *(_OWORD *)((char *)this + 6616) = 0u;
  *((void *)this + 829) = 0LL;
  *(_OWORD *)((char *)this + 6664) = 0u;
  *(_OWORD *)((char *)this + 668sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = 0u;
  *(_OWORD *)((char *)this + 6696) = 0u;
  *(_OWORD *)((char *)this + 6712) = 0u;
  *(_OWORD *)((char *)this + 6721) = 0u;
  *((_DWORD *)this + 1685) = 2;
  *((_BYTE *)this + 6744) = 1;
  *((void *)this + 5) = 0x200000E1ALL;
  *((_WORD *)this + memset(v10, 0, 24) = 257;
  *((_BYTE *)this + 5sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = 1;
  *(_OWORD *)((char *)this + memset(v10, 0, 24) = xmmword_10022BF40;
}

void sub_1001ADF58(_Unwind_Exception *a1)
{
}

uint64_t NetworkDiagnosticsConfigDb::update(uint64_t a1, uint64_t a2)
{
  *(int8x16_t *)(a1 + memset(v10, 0, 24) = vextq_s8(*(int8x16_t *)(a2 + 8), *(int8x16_t *)(a2 + 8), 8uLL);
  *(_DWORD *)(a1 + memset(&v22.ai_socktype, 0, 40) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + sub_1000BE23C(v2 - 48) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 5sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = *(_BYTE *)(a2 + 3);
  if (!*(_BYTE *)(a1 + 6736))
  {
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 4);
    *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 2);
  }

  return 1LL;
}

void NetworkDiagnosticsConfigDb::updateNCPProperties( uint64_t a1, const std::string *a2, const std::string *a3, const std::string *a4, __int16 a5, uint64_t a6, __int16 a7, __int16 a8, int a9)
{
  __int16 v16 = (void *)(a1 + 6688);
  std::string::operator=((std::string *)(a1 + 6688), a2);
  size_t v17 = (void *)(a1 + 6712);
  std::string::operator=((std::string *)(a1 + 6712), a3);
  uint64_t v18 = (void *)(a1 + 6664);
  std::string::operator=((std::string *)(a1 + 6664), a4);
  *(_WORD *)(a1 + 66sub_10000D448(v30 - 56) = a5;
  *(void *)(a1 + 66sub_1000BE23C(v2 - 48) = a6;
  *(_WORD *)(a1 + 665_Block_object_dispose(va, 8) = a7;
  *(_WORD *)(a1 + 66memset(&v22.ai_socktype, 0, 40) = a8;
  *(_DWORD *)(a1 + 666sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = a9;
  uint64_t v19 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    int v20 = *(unsigned __int16 *)(a1 + 6640);
    int v21 = *(unsigned __int16 *)(a1 + 6656);
    int v22 = *(unsigned __int16 *)(a1 + 6658);
    uint64_t v23 = *(void *)(a1 + 6648);
    int v24 = 136316930;
    uint64_t v25 = v16;
    __int16 v26 = 2080;
    char v27 = v18;
    __int16 v28 = 2080;
    __int128 v29 = v17;
    __int16 v30 = 1024;
    int v31 = v20;
    __int16 v32 = 1024;
    int v33 = v21;
    __int16 v34 = 1024;
    int v35 = v22;
    __int16 v36 = 2048;
    uint64_t v37 = v23;
    __int16 v38 = 1024;
    int v39 = a9;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "TDM: NetworkDiagnosticsConfigDb::updateNCPProperties mLPrefix=%s nwName=%s mLAddr=%s leaderRouterId=%d panId=%d ch annel=%d xPanId=%llu partitionId=%d",  (uint8_t *)&v24,  0x42u);
  }

BOOL NetworkDiagnosticsConfigDb::initialize(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)a1, a2);
  sub_10000AC00(&v153, "/");
  int size = (char)a2->__r_.__value_.__s.__size_;
  if (size >= 0) {
    int v5 = (const std::string::value_type *)a2;
  }
  else {
    int v5 = (const std::string::value_type *)a2->__r_.__value_.__r.__words[0];
  }
  if (size >= 0) {
    std::string::size_type v6 = a2->__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v6 = a2->__r_.__value_.__l.__size_;
  }
  char v7 = std::string::append(&v153, v5, v6);
  __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__l.__cap_ = v7->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0LL;
  v7->__r_.__value_.__l.__cap_ = 0LL;
  v7->__r_.__value_.__r.__words[0] = 0LL;
  sub_10000AC00(&__p, "_network_diagnostics.txt");
  if ((v152 & 0x80u) == 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if ((v152 & 0x80u) == 0) {
    std::string::size_type v10 = v152;
  }
  else {
    std::string::size_type v10 = v151;
  }
  unint64_t v11 = std::string::append(&v154, p_p, v10);
  std::string::size_type v12 = v11->__r_.__value_.__r.__words[0];
  v155[0] = v11->__r_.__value_.__l.__size_;
  *(void *)((char *)v155 + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 v13 = v11->__r_.__value_.__s.__size_;
  v11->__r_.__value_.__l.__size_ = 0LL;
  v11->__r_.__value_.__l.__cap_ = 0LL;
  v11->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v14 = v155[0];
  *(void *)(a1 + sub_10000D448(v30 - 56) = v12;
  *(void *)(a1 + 64) = v14;
  *(void *)(a1 + 71) = *(void *)((char *)v155 + 7);
  *(_BYTE *)(a1 + 79) = v13;
  sub_10000AC00(&v153, "/");
  int v15 = (char)a2->__r_.__value_.__s.__size_;
  if (v15 >= 0) {
    __int16 v16 = (const std::string::value_type *)a2;
  }
  else {
    __int16 v16 = (const std::string::value_type *)a2->__r_.__value_.__r.__words[0];
  }
  if (v15 >= 0) {
    std::string::size_type v17 = a2->__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v17 = a2->__r_.__value_.__l.__size_;
  }
  uint64_t v18 = std::string::append(&v153, v16, v17);
  __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0LL;
  v18->__r_.__value_.__l.__cap_ = 0LL;
  v18->__r_.__value_.__r.__words[0] = 0LL;
  sub_10000AC00(&__p, "_nwdiag_shell_output.txt");
  if ((v152 & 0x80u) == 0) {
    int v20 = (const std::string::value_type *)&__p;
  }
  else {
    int v20 = (const std::string::value_type *)__p;
  }
  if ((v152 & 0x80u) == 0) {
    std::string::size_type v21 = v152;
  }
  else {
    std::string::size_type v21 = v151;
  }
  int v22 = std::string::append(&v154, v20, v21);
  std::string::size_type v23 = v22->__r_.__value_.__r.__words[0];
  v155[0] = v22->__r_.__value_.__l.__size_;
  *(void *)((char *)v155 + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 v24 = v22->__r_.__value_.__s.__size_;
  v22->__r_.__value_.__l.__size_ = 0LL;
  v22->__r_.__value_.__l.__cap_ = 0LL;
  v22->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v25 = v155[0];
  *(void *)(a1 + 8sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = v23;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = v25;
  *(void *)(a1 + 95) = *(void *)((char *)v155 + 7);
  *(_BYTE *)(a1 + 103) = v24;
  sub_10000AC00(&v153, "/");
  int v26 = (char)a2->__r_.__value_.__s.__size_;
  if (v26 >= 0) {
    char v27 = (const std::string::value_type *)a2;
  }
  else {
    char v27 = (const std::string::value_type *)a2->__r_.__value_.__r.__words[0];
  }
  if (v26 >= 0) {
    std::string::size_type v28 = a2->__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v28 = a2->__r_.__value_.__l.__size_;
  }
  __int128 v29 = std::string::append(&v153, v27, v28);
  __int128 v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__l.__cap_ = v29->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0LL;
  v29->__r_.__value_.__l.__cap_ = 0LL;
  v29->__r_.__value_.__r.__words[0] = 0LL;
  sub_10000AC00(&__p, "_nwdiag_legend.svg");
  if ((v152 & 0x80u) == 0) {
    int v31 = (const std::string::value_type *)&__p;
  }
  else {
    int v31 = (const std::string::value_type *)__p;
  }
  if ((v152 & 0x80u) == 0) {
    std::string::size_type v32 = v152;
  }
  else {
    std::string::size_type v32 = v151;
  }
  int v33 = std::string::append(&v154, v31, v32);
  std::string::size_type v34 = v33->__r_.__value_.__r.__words[0];
  v155[0] = v33->__r_.__value_.__l.__size_;
  *(void *)((char *)v155 + 7) = *(std::string::size_type *)((char *)&v33->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 v35 = v33->__r_.__value_.__s.__size_;
  v33->__r_.__value_.__l.__size_ = 0LL;
  v33->__r_.__value_.__l.__cap_ = 0LL;
  v33->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v36 = v155[0];
  *(void *)(a1 + 104) = v34;
  *(void *)(a1 + 112) = v36;
  *(void *)(a1 + 119) = *(void *)((char *)v155 + 7);
  *(_BYTE *)(a1 + 127) = v35;
  sub_10000AC00(&v153, "/");
  int v37 = (char)a2->__r_.__value_.__s.__size_;
  if (v37 >= 0) {
    __int16 v38 = (const std::string::value_type *)a2;
  }
  else {
    __int16 v38 = (const std::string::value_type *)a2->__r_.__value_.__r.__words[0];
  }
  if (v37 >= 0) {
    std::string::size_type v39 = a2->__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v39 = a2->__r_.__value_.__l.__size_;
  }
  __int128 v40 = std::string::append(&v153, v38, v39);
  __int128 v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__l.__cap_ = v40->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0LL;
  v40->__r_.__value_.__l.__cap_ = 0LL;
  v40->__r_.__value_.__r.__words[0] = 0LL;
  sub_10000AC00(&__p, "_nwdiag_counters.txt");
  if ((v152 & 0x80u) == 0) {
    id v42 = (const std::string::value_type *)&__p;
  }
  else {
    id v42 = (const std::string::value_type *)__p;
  }
  if ((v152 & 0x80u) == 0) {
    std::string::size_type v43 = v152;
  }
  else {
    std::string::size_type v43 = v151;
  }
  id v44 = std::string::append(&v154, v42, v43);
  std::string::size_type v45 = v44->__r_.__value_.__r.__words[0];
  v155[0] = v44->__r_.__value_.__l.__size_;
  *(void *)((char *)v155 + 7) = *(std::string::size_type *)((char *)&v44->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 v46 = v44->__r_.__value_.__s.__size_;
  v44->__r_.__value_.__l.__size_ = 0LL;
  v44->__r_.__value_.__l.__cap_ = 0LL;
  v44->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v47 = v155[0];
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = v45;
  *(void *)(a1 + 136) = v47;
  *(void *)(a1 + 143) = *(void *)((char *)v155 + 7);
  *(_BYTE *)(a1 + 151) = v46;
  sub_10000AC00(&v153, "/");
  int v48 = (char)a2->__r_.__value_.__s.__size_;
  if (v48 >= 0) {
    uint64_t v49 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v49 = (const std::string::value_type *)a2->__r_.__value_.__r.__words[0];
  }
  if (v48 >= 0) {
    std::string::size_type v50 = a2->__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v50 = a2->__r_.__value_.__l.__size_;
  }
  __int16 v51 = std::string::append(&v153, v49, v50);
  __int128 v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__l.__cap_ = v51->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v52;
  v51->__r_.__value_.__l.__size_ = 0LL;
  v51->__r_.__value_.__l.__cap_ = 0LL;
  v51->__r_.__value_.__r.__words[0] = 0LL;
  sub_10000AC00(&__p, "_nwdiag_about.txt");
  if ((v152 & 0x80u) == 0) {
    int v53 = (const std::string::value_type *)&__p;
  }
  else {
    int v53 = (const std::string::value_type *)__p;
  }
  if ((v152 & 0x80u) == 0) {
    std::string::size_type v54 = v152;
  }
  else {
    std::string::size_type v54 = v151;
  }
  __int16 v55 = std::string::append(&v154, v53, v54);
  std::string::size_type v56 = v55->__r_.__value_.__r.__words[0];
  v155[0] = v55->__r_.__value_.__l.__size_;
  *(void *)((char *)v155 + 7) = *(std::string::size_type *)((char *)&v55->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 v57 = v55->__r_.__value_.__s.__size_;
  v55->__r_.__value_.__l.__size_ = 0LL;
  v55->__r_.__value_.__l.__cap_ = 0LL;
  v55->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v58 = v155[0];
  *(void *)(a1 + 152) = v56;
  *(void *)(a1 + sub_10015DBA8(v29 - 160) = v58;
  *(void *)(a1 + 167) = *(void *)((char *)v155 + 7);
  *(_BYTE *)(a1 + 175) = v57;
  sub_10000AC00(&v153, "/");
  int v59 = (char)a2->__r_.__value_.__s.__size_;
  if (v59 >= 0) {
    id v60 = (const std::string::value_type *)a2;
  }
  else {
    id v60 = (const std::string::value_type *)a2->__r_.__value_.__r.__words[0];
  }
  if (v59 >= 0) {
    std::string::size_type v61 = a2->__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v61 = a2->__r_.__value_.__l.__size_;
  }
  xpc_object_t v62 = std::string::append(&v153, v60, v61);
  __int128 v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__l.__cap_ = v62->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0LL;
  v62->__r_.__value_.__l.__cap_ = 0LL;
  v62->__r_.__value_.__r.__words[0] = 0LL;
  sub_10000AC00(&__p, "_nwdiag_services_discovered.txt");
  if ((v152 & 0x80u) == 0) {
    __int16 v64 = (const std::string::value_type *)&__p;
  }
  else {
    __int16 v64 = (const std::string::value_type *)__p;
  }
  if ((v152 & 0x80u) == 0) {
    std::string::size_type v65 = v152;
  }
  else {
    std::string::size_type v65 = v151;
  }
  OSStatus v66 = std::string::append(&v154, v64, v65);
  std::string::size_type v67 = v66->__r_.__value_.__r.__words[0];
  v155[0] = v66->__r_.__value_.__l.__size_;
  *(void *)((char *)v155 + 7) = *(std::string::size_type *)((char *)&v66->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 v68 = v66->__r_.__value_.__s.__size_;
  v66->__r_.__value_.__l.__size_ = 0LL;
  v66->__r_.__value_.__l.__cap_ = 0LL;
  v66->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v69 = v155[0];
  *(void *)(a1 + 1memset(v31, 0, 76) = v67;
  *(void *)(a1 + sub_10000D448(v55 - 184) = v69;
  *(void *)(a1 + 191) = *(void *)((char *)v155 + 7);
  *(_BYTE *)(a1 + 199) = v68;
  sub_10000AC00(&v153, "/");
  int v70 = (char)a2->__r_.__value_.__s.__size_;
  if (v70 >= 0) {
    char v71 = (const std::string::value_type *)a2;
  }
  else {
    char v71 = (const std::string::value_type *)a2->__r_.__value_.__r.__words[0];
  }
  if (v70 >= 0) {
    std::string::size_type v72 = a2->__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v72 = a2->__r_.__value_.__l.__size_;
  }
  char v73 = std::string::append(&v153, v71, v72);
  __int128 v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__l.__cap_ = v73->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v74;
  v73->__r_.__value_.__l.__size_ = 0LL;
  v73->__r_.__value_.__l.__cap_ = 0LL;
  v73->__r_.__value_.__r.__words[0] = 0LL;
  sub_10000AC00(&__p, "_nwdiag_services_resolved.txt");
  if ((v152 & 0x80u) == 0) {
    id v75 = (const std::string::value_type *)&__p;
  }
  else {
    id v75 = (const std::string::value_type *)__p;
  }
  if ((v152 & 0x80u) == 0) {
    std::string::size_type v76 = v152;
  }
  else {
    std::string::size_type v76 = v151;
  }
  char v77 = std::string::append(&v154, v75, v76);
  std::string::size_type v78 = v77->__r_.__value_.__r.__words[0];
  v155[0] = v77->__r_.__value_.__l.__size_;
  *(void *)((char *)v155 + 7) = *(std::string::size_type *)((char *)&v77->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 v79 = v77->__r_.__value_.__s.__size_;
  v77->__r_.__value_.__l.__size_ = 0LL;
  v77->__r_.__value_.__l.__cap_ = 0LL;
  v77->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v80 = v155[0];
  *(void *)(a1 + 20sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = v78;
  *(void *)(a1 + 20_Block_object_dispose(va, 8) = v80;
  *(void *)(a1 + 215) = *(void *)((char *)v155 + 7);
  *(_BYTE *)(a1 + 223) = v79;
  sub_10000AC00(&v153, "/");
  int v81 = (char)a2->__r_.__value_.__s.__size_;
  if (v81 >= 0) {
    id v82 = (const std::string::value_type *)a2;
  }
  else {
    id v82 = (const std::string::value_type *)a2->__r_.__value_.__r.__words[0];
  }
  if (v81 >= 0) {
    std::string::size_type v83 = a2->__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v83 = a2->__r_.__value_.__l.__size_;
  }
  id v84 = std::string::append(&v153, v82, v83);
  __int128 v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__l.__cap_ = v84->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v85;
  v84->__r_.__value_.__l.__size_ = 0LL;
  v84->__r_.__value_.__l.__cap_ = 0LL;
  v84->__r_.__value_.__r.__words[0] = 0LL;
  sub_10000AC00(&__p, "_nwdiag_cache_table.txt");
  if ((v152 & 0x80u) == 0) {
    unsigned int v86 = (const std::string::value_type *)&__p;
  }
  else {
    unsigned int v86 = (const std::string::value_type *)__p;
  }
  if ((v152 & 0x80u) == 0) {
    std::string::size_type v87 = v152;
  }
  else {
    std::string::size_type v87 = v151;
  }
  id v88 = std::string::append(&v154, v86, v87);
  std::string::size_type v89 = v88->__r_.__value_.__r.__words[0];
  v155[0] = v88->__r_.__value_.__l.__size_;
  *(void *)((char *)v155 + 7) = *(std::string::size_type *)((char *)&v88->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 v90 = v88->__r_.__value_.__s.__size_;
  v88->__r_.__value_.__l.__size_ = 0LL;
  v88->__r_.__value_.__l.__cap_ = 0LL;
  v88->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v91 = v155[0];
  *(void *)(a1 + 2memset(v10, 0, 24) = v89;
  *(void *)(a1 + 2sub_10000AB80(v2 - 32) = v91;
  *(void *)(a1 + 239) = *(void *)((char *)v155 + 7);
  *(_BYTE *)(a1 + 247) = v90;
  sub_10000AC00(&v153, "/");
  int v92 = (char)a2->__r_.__value_.__s.__size_;
  if (v92 >= 0) {
    id v93 = (const std::string::value_type *)a2;
  }
  else {
    id v93 = (const std::string::value_type *)a2->__r_.__value_.__r.__words[0];
  }
  if (v92 >= 0) {
    std::string::size_type v94 = a2->__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v94 = a2->__r_.__value_.__l.__size_;
  }
  id v95 = std::string::append(&v153, v93, v94);
  __int128 v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__l.__cap_ = v95->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v96;
  v95->__r_.__value_.__l.__size_ = 0LL;
  v95->__r_.__value_.__l.__cap_ = 0LL;
  v95->__r_.__value_.__r.__words[0] = 0LL;
  sub_10000AC00(&__p, "_nwdiag_fed_info.txt");
  if ((v152 & 0x80u) == 0) {
    id v97 = (const std::string::value_type *)&__p;
  }
  else {
    id v97 = (const std::string::value_type *)__p;
  }
  if ((v152 & 0x80u) == 0) {
    std::string::size_type v98 = v152;
  }
  else {
    std::string::size_type v98 = v151;
  }
  char v99 = std::string::append(&v154, v97, v98);
  std::string::size_type v100 = v99->__r_.__value_.__r.__words[0];
  v155[0] = v99->__r_.__value_.__l.__size_;
  *(void *)((char *)v155 + 7) = *(std::string::size_type *)((char *)&v99->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 v101 = v99->__r_.__value_.__s.__size_;
  v99->__r_.__value_.__l.__size_ = 0LL;
  v99->__r_.__value_.__l.__cap_ = 0LL;
  v99->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v102 = v155[0];
  *(void *)(a1 + 2sub_1000BE23C(v2 - 48) = v100;
  *(void *)(a1 + 2sub_10000D448(v30 - 56) = v102;
  *(void *)(a1 + 263) = *(void *)((char *)v155 + 7);
  *(_BYTE *)(a1 + 271) = v101;
  sub_10000AC00(&v153, "/");
  int v103 = (char)a2->__r_.__value_.__s.__size_;
  if (v103 >= 0) {
    unsigned __int8 v104 = (const std::string::value_type *)a2;
  }
  else {
    unsigned __int8 v104 = (const std::string::value_type *)a2->__r_.__value_.__r.__words[0];
  }
  if (v103 >= 0) {
    std::string::size_type v105 = a2->__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v105 = a2->__r_.__value_.__l.__size_;
  }
  unsigned int v106 = std::string::append(&v153, v104, v105);
  __int128 v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__l.__cap_ = v106->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v107;
  v106->__r_.__value_.__l.__size_ = 0LL;
  v106->__r_.__value_.__l.__cap_ = 0LL;
  v106->__r_.__value_.__r.__words[0] = 0LL;
  sub_10000AC00(&__p, "_nwdiag_sed_info.txt");
  if ((v152 & 0x80u) == 0) {
    int v108 = (const std::string::value_type *)&__p;
  }
  else {
    int v108 = (const std::string::value_type *)__p;
  }
  if ((v152 & 0x80u) == 0) {
    std::string::size_type v109 = v152;
  }
  else {
    std::string::size_type v109 = v151;
  }
  id v110 = std::string::append(&v154, v108, v109);
  std::string::size_type v111 = v110->__r_.__value_.__r.__words[0];
  v155[0] = v110->__r_.__value_.__l.__size_;
  *(void *)((char *)v155 + 7) = *(std::string::size_type *)((char *)&v110->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 v112 = v110->__r_.__value_.__s.__size_;
  v110->__r_.__value_.__l.__size_ = 0LL;
  v110->__r_.__value_.__l.__cap_ = 0LL;
  v110->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v113 = v155[0];
  *(void *)(a1 + 272) = v111;
  *(void *)(a1 + 28sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = v113;
  *(void *)(a1 + 287) = *(void *)((char *)v155 + 7);
  *(_BYTE *)(a1 + 295) = v112;
  sub_10000AC00(&v153, "/");
  int v114 = (char)a2->__r_.__value_.__s.__size_;
  if (v114 >= 0) {
    __int16 v115 = (const std::string::value_type *)a2;
  }
  else {
    __int16 v115 = (const std::string::value_type *)a2->__r_.__value_.__r.__words[0];
  }
  if (v114 >= 0) {
    std::string::size_type v116 = a2->__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v116 = a2->__r_.__value_.__l.__size_;
  }
  char v117 = std::string::append(&v153, v115, v116);
  __int128 v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__l.__cap_ = v117->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v118;
  v117->__r_.__value_.__l.__size_ = 0LL;
  v117->__r_.__value_.__l.__cap_ = 0LL;
  v117->__r_.__value_.__r.__words[0] = 0LL;
  sub_10000AC00(&__p, "_nwdiag_router_info.txt");
  if ((v152 & 0x80u) == 0) {
    id v119 = (const std::string::value_type *)&__p;
  }
  else {
    id v119 = (const std::string::value_type *)__p;
  }
  if ((v152 & 0x80u) == 0) {
    std::string::size_type v120 = v152;
  }
  else {
    std::string::size_type v120 = v151;
  }
  char v121 = std::string::append(&v154, v119, v120);
  std::string::size_type v122 = v121->__r_.__value_.__r.__words[0];
  v155[0] = v121->__r_.__value_.__l.__size_;
  *(void *)((char *)v155 + 7) = *(std::string::size_type *)((char *)&v121->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 v123 = v121->__r_.__value_.__s.__size_;
  v121->__r_.__value_.__l.__size_ = 0LL;
  v121->__r_.__value_.__l.__cap_ = 0LL;
  v121->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v124 = v155[0];
  *(void *)(a1 + 296) = v122;
  *(void *)(a1 + 304) = v124;
  *(void *)(a1 + 311) = *(void *)((char *)v155 + 7);
  *(_BYTE *)(a1 + 319) = v123;
  sub_10000AC00(&v153, "/");
  int v125 = (char)a2->__r_.__value_.__s.__size_;
  if (v125 >= 0) {
    unsigned int v126 = (const std::string::value_type *)a2;
  }
  else {
    unsigned int v126 = (const std::string::value_type *)a2->__r_.__value_.__r.__words[0];
  }
  if (v125 >= 0) {
    std::string::size_type v127 = a2->__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v127 = a2->__r_.__value_.__l.__size_;
  }
  unsigned int v128 = std::string::append(&v153, v126, v127);
  __int128 v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__l.__cap_ = v128->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v129;
  v128->__r_.__value_.__l.__size_ = 0LL;
  v128->__r_.__value_.__l.__cap_ = 0LL;
  v128->__r_.__value_.__r.__words[0] = 0LL;
  sub_10000AC00(&__p, "_network_diagnostics.dot");
  if ((v152 & 0x80u) == 0) {
    int v130 = (const std::string::value_type *)&__p;
  }
  else {
    int v130 = (const std::string::value_type *)__p;
  }
  if ((v152 & 0x80u) == 0) {
    std::string::size_type v131 = v152;
  }
  else {
    std::string::size_type v131 = v151;
  }
  unsigned int v132 = std::string::append(&v154, v130, v131);
  std::string::size_type v133 = v132->__r_.__value_.__r.__words[0];
  v155[0] = v132->__r_.__value_.__l.__size_;
  *(void *)((char *)v155 + 7) = *(std::string::size_type *)((char *)&v132->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 v134 = v132->__r_.__value_.__s.__size_;
  v132->__r_.__value_.__l.__size_ = 0LL;
  v132->__r_.__value_.__l.__cap_ = 0LL;
  v132->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v135 = v155[0];
  *(void *)(a1 + 32sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = v133;
  *(void *)(a1 + 32_Block_object_dispose(va, 8) = v135;
  *(void *)(a1 + 335) = *(void *)((char *)v155 + 7);
  *(_BYTE *)(a1 + 343) = v134;
  sub_10000AC00(&v153, "/");
  int v136 = (char)a2->__r_.__value_.__s.__size_;
  if (v136 >= 0) {
    char v137 = (const std::string::value_type *)a2;
  }
  else {
    char v137 = (const std::string::value_type *)a2->__r_.__value_.__r.__words[0];
  }
  if (v136 >= 0) {
    std::string::size_type v138 = a2->__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v138 = a2->__r_.__value_.__l.__size_;
  }
  char v139 = std::string::append(&v153, v137, v138);
  __int128 v140 = *(_OWORD *)&v139->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__l.__cap_ = v139->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v140;
  v139->__r_.__value_.__l.__size_ = 0LL;
  v139->__r_.__value_.__l.__cap_ = 0LL;
  v139->__r_.__value_.__r.__words[0] = 0LL;
  sub_10000AC00(&__p, "_nwdiag_legend.dot");
  if ((v152 & 0x80u) == 0) {
    char v141 = (const std::string::value_type *)&__p;
  }
  else {
    char v141 = (const std::string::value_type *)__p;
  }
  if ((v152 & 0x80u) == 0) {
    std::string::size_type v142 = v152;
  }
  else {
    std::string::size_type v142 = v151;
  }
  char v143 = std::string::append(&v154, v141, v142);
  std::string::size_type v144 = v143->__r_.__value_.__r.__words[0];
  v155[0] = v143->__r_.__value_.__l.__size_;
  *(void *)((char *)v155 + 7) = *(std::string::size_type *)((char *)&v143->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 v145 = v143->__r_.__value_.__s.__size_;
  v143->__r_.__value_.__l.__size_ = 0LL;
  v143->__r_.__value_.__l.__cap_ = 0LL;
  v143->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v146 = v155[0];
  *(void *)(a1 + 344) = v144;
  *(void *)(a1 + 352) = v146;
  *(void *)(a1 + 359) = *(void *)((char *)v155 + 7);
  *(_BYTE *)(a1 + 367) = v145;
  BOOL v147 = NetworkDiagnosticsConfigDb::openFiles(a1, (uint64_t)a2);
  if (!v147)
  {
    unsigned int v148 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(v148, OS_LOG_TYPE_ERROR)) {
      sub_1001B059C(v148);
    }
  }

  return v147;
}

void sub_1001AEE2C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

BOOL NetworkDiagnosticsConfigDb::openFiles(uint64_t a1, uint64_t a2)
{
  __int16 v4 = (const std::string::value_type *)(a1 + 6616);
  if ((create_new_tdm_log_folder(a2, (std::string *)(a1 + 6616)) & 1) != 0)
  {
    remove_old_files();
    int v5 = *(char *)(a1 + 6639);
    if (v5 >= 0) {
      std::string::size_type v6 = v4;
    }
    else {
      std::string::size_type v6 = *(const std::string::value_type **)(a1 + 6616);
    }
    if (v5 >= 0) {
      std::string::size_type v7 = *(unsigned __int8 *)(a1 + 6639);
    }
    else {
      std::string::size_type v7 = *(void *)(a1 + 6624);
    }
    std::string::insert((std::string *)(a1 + 56), 0LL, v6, v7);
    int v8 = *(char *)(a1 + 6639);
    if (v8 >= 0) {
      __int16 v9 = v4;
    }
    else {
      __int16 v9 = *(const std::string::value_type **)(a1 + 6616);
    }
    if (v8 >= 0) {
      std::string::size_type v10 = *(unsigned __int8 *)(a1 + 6639);
    }
    else {
      std::string::size_type v10 = *(void *)(a1 + 6624);
    }
    std::string::insert((std::string *)(a1 + 80), 0LL, v9, v10);
    int v11 = *(char *)(a1 + 6639);
    if (v11 >= 0) {
      std::string::size_type v12 = v4;
    }
    else {
      std::string::size_type v12 = *(const std::string::value_type **)(a1 + 6616);
    }
    if (v11 >= 0) {
      std::string::size_type v13 = *(unsigned __int8 *)(a1 + 6639);
    }
    else {
      std::string::size_type v13 = *(void *)(a1 + 6624);
    }
    std::string::insert((std::string *)(a1 + 104), 0LL, v12, v13);
    int v14 = *(char *)(a1 + 6639);
    if (v14 >= 0) {
      int v15 = v4;
    }
    else {
      int v15 = *(const std::string::value_type **)(a1 + 6616);
    }
    if (v14 >= 0) {
      std::string::size_type v16 = *(unsigned __int8 *)(a1 + 6639);
    }
    else {
      std::string::size_type v16 = *(void *)(a1 + 6624);
    }
    std::string::insert((std::string *)(a1 + 128), 0LL, v15, v16);
    int v17 = *(char *)(a1 + 6639);
    if (v17 >= 0) {
      uint64_t v18 = v4;
    }
    else {
      uint64_t v18 = *(const std::string::value_type **)(a1 + 6616);
    }
    if (v17 >= 0) {
      std::string::size_type v19 = *(unsigned __int8 *)(a1 + 6639);
    }
    else {
      std::string::size_type v19 = *(void *)(a1 + 6624);
    }
    std::string::insert((std::string *)(a1 + 152), 0LL, v18, v19);
    int v20 = *(char *)(a1 + 6639);
    if (v20 >= 0) {
      std::string::size_type v21 = v4;
    }
    else {
      std::string::size_type v21 = *(const std::string::value_type **)(a1 + 6616);
    }
    if (v20 >= 0) {
      std::string::size_type v22 = *(unsigned __int8 *)(a1 + 6639);
    }
    else {
      std::string::size_type v22 = *(void *)(a1 + 6624);
    }
    std::string::insert((std::string *)(a1 + 176), 0LL, v21, v22);
    int v23 = *(char *)(a1 + 6639);
    if (v23 >= 0) {
      unsigned __int8 v24 = v4;
    }
    else {
      unsigned __int8 v24 = *(const std::string::value_type **)(a1 + 6616);
    }
    if (v23 >= 0) {
      std::string::size_type v25 = *(unsigned __int8 *)(a1 + 6639);
    }
    else {
      std::string::size_type v25 = *(void *)(a1 + 6624);
    }
    std::string::insert((std::string *)(a1 + 200), 0LL, v24, v25);
    int v26 = *(char *)(a1 + 6639);
    if (v26 >= 0) {
      char v27 = v4;
    }
    else {
      char v27 = *(const std::string::value_type **)(a1 + 6616);
    }
    if (v26 >= 0) {
      std::string::size_type v28 = *(unsigned __int8 *)(a1 + 6639);
    }
    else {
      std::string::size_type v28 = *(void *)(a1 + 6624);
    }
    std::string::insert((std::string *)(a1 + 224), 0LL, v27, v28);
    int v29 = *(char *)(a1 + 6639);
    if (v29 >= 0) {
      __int128 v30 = v4;
    }
    else {
      __int128 v30 = *(const std::string::value_type **)(a1 + 6616);
    }
    if (v29 >= 0) {
      std::string::size_type v31 = *(unsigned __int8 *)(a1 + 6639);
    }
    else {
      std::string::size_type v31 = *(void *)(a1 + 6624);
    }
    std::string::insert((std::string *)(a1 + 248), 0LL, v30, v31);
    int v32 = *(char *)(a1 + 6639);
    if (v32 >= 0) {
      int v33 = v4;
    }
    else {
      int v33 = *(const std::string::value_type **)(a1 + 6616);
    }
    if (v32 >= 0) {
      std::string::size_type v34 = *(unsigned __int8 *)(a1 + 6639);
    }
    else {
      std::string::size_type v34 = *(void *)(a1 + 6624);
    }
    std::string::insert((std::string *)(a1 + 272), 0LL, v33, v34);
    int v35 = *(char *)(a1 + 6639);
    if (v35 >= 0) {
      uint64_t v36 = v4;
    }
    else {
      uint64_t v36 = *(const std::string::value_type **)(a1 + 6616);
    }
    if (v35 >= 0) {
      std::string::size_type v37 = *(unsigned __int8 *)(a1 + 6639);
    }
    else {
      std::string::size_type v37 = *(void *)(a1 + 6624);
    }
    std::string::insert((std::string *)(a1 + 296), 0LL, v36, v37);
    int v38 = *(char *)(a1 + 6639);
    if (v38 >= 0) {
      std::string::size_type v39 = v4;
    }
    else {
      std::string::size_type v39 = *(const std::string::value_type **)(a1 + 6616);
    }
    if (v38 >= 0) {
      std::string::size_type v40 = *(unsigned __int8 *)(a1 + 6639);
    }
    else {
      std::string::size_type v40 = *(void *)(a1 + 6624);
    }
    std::string::insert((std::string *)(a1 + 320), 0LL, v39, v40);
    int v41 = *(char *)(a1 + 6639);
    if (v41 >= 0) {
      id v42 = v4;
    }
    else {
      id v42 = *(const std::string::value_type **)(a1 + 6616);
    }
    if (v41 >= 0) {
      std::string::size_type v43 = *(unsigned __int8 *)(a1 + 6639);
    }
    else {
      std::string::size_type v43 = *(void *)(a1 + 6624);
    }
    std::string::insert((std::string *)(a1 + 344), 0LL, v42, v43);
    id v44 = (void *)(a1 + 368);
    uint64_t v45 = a1 + 56;
    std::ofstream::open(a1 + 368, v45, 16LL);
    if ((*((_BYTE *)v44 + *(void *)(*v44 - 24LL) + 32) & 5) == 0)
    {
      uint64_t v49 = sub_1001B02E4((void *)(a1 + 368), (uint64_t)"Current Time:", 13LL);
      int v50 = *(char *)(a2 + 23);
      if (v50 >= 0) {
        uint64_t v51 = a2;
      }
      else {
        uint64_t v51 = *(void *)a2;
      }
      if (v50 >= 0) {
        uint64_t v52 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v52 = *(void *)(a2 + 8);
      }
      int v53 = sub_1001B02E4(v49, v51, v52);
      std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(void *)(*v53 - 24LL)));
      std::string::size_type v54 = std::locale::use_facet(&v99, &std::ctype<char>::id);
      uint64_t v55 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 10LL);
      std::locale::~locale(&v99);
      std::ostream::put(v53, v55);
      std::ostream::flush(v53);
      std::ios_base::getloc((const std::ios_base *)((char *)v44 + *(void *)(*v44 - 24LL)));
      std::string::size_type v56 = std::locale::use_facet(&v99, &std::ctype<char>::id);
      uint64_t v57 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10LL);
      std::locale::~locale(&v99);
      std::ostream::put(a1 + 368, v57);
      std::ostream::flush(a1 + 368);
      uint64_t v58 = a1 + 320;
      std::ofstream::open(a1 + 5480, v58, 16LL);
      if ((*(_BYTE *)(a1 + 5480 + *(void *)(*(void *)(a1 + 5480) - 24LL) + 32) & 5) != 0)
      {
        int v59 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
        BOOL result = os_log_type_enabled(v59, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
      }

      else
      {
        uint64_t v60 = a1 + 344;
        std::ofstream::open(a1 + 6048, v60, 16LL);
        if ((*(_BYTE *)(a1 + 6048 + *(void *)(*(void *)(a1 + 6048) - 24LL) + 32) & 5) != 0)
        {
          std::string::size_type v61 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
          BOOL result = os_log_type_enabled(v61, OS_LOG_TYPE_ERROR);
          if (!result) {
            return result;
          }
        }

        else
        {
          xpc_object_t v62 = (void *)(a1 + 3208);
          uint64_t v63 = a1 + 224;
          std::ofstream::open(a1 + 3208, v63, 16LL);
          if ((*((_BYTE *)v62 + *(void *)(*v62 - 24LL) + 32) & 5) != 0)
          {
            __int16 v64 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
            BOOL result = os_log_type_enabled(v64, OS_LOG_TYPE_ERROR);
            if (!result) {
              return result;
            }
          }

          else
          {
            std::string::size_type v65 = sub_1001B02E4((void *)(a1 + 3208), (uint64_t)"Current Time:", 13LL);
            int v66 = *(char *)(a2 + 23);
            if (v66 >= 0) {
              uint64_t v67 = a2;
            }
            else {
              uint64_t v67 = *(void *)a2;
            }
            if (v66 >= 0) {
              uint64_t v68 = *(unsigned __int8 *)(a2 + 23);
            }
            else {
              uint64_t v68 = *(void *)(a2 + 8);
            }
            uint64_t v69 = sub_1001B02E4(v65, v67, v68);
            std::ios_base::getloc((const std::ios_base *)((char *)v69 + *(void *)(*v69 - 24LL)));
            int v70 = std::locale::use_facet(&v99, &std::ctype<char>::id);
            uint64_t v71 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v70->__vftable[2].~facet_0)(v70, 10LL);
            std::locale::~locale(&v99);
            std::ostream::put(v69, v71);
            std::ostream::flush(v69);
            std::ios_base::getloc((const std::ios_base *)((char *)v62 + *(void *)(*v62 - 24LL)));
            std::string::size_type v72 = std::locale::use_facet(&v99, &std::ctype<char>::id);
            uint64_t v73 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v72->__vftable[2].~facet_0)(v72, 10LL);
            std::locale::~locale(&v99);
            std::ostream::put(a1 + 3208, v73);
            std::ostream::flush(a1 + 3208);
            uint64_t v74 = a1 + 248;
            std::ofstream::open(a1 + 3776, v74, 16LL);
            if ((*(_BYTE *)(a1 + 3776 + *(void *)(*(void *)(a1 + 3776) - 24LL) + 32) & 5) != 0)
            {
              id v75 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
              BOOL result = os_log_type_enabled(v75, OS_LOG_TYPE_ERROR);
              if (!result) {
                return result;
              }
            }

            else
            {
              uint64_t v76 = a1 + 272;
              std::ofstream::open(a1 + 4344, v76, 16LL);
              if ((*(_BYTE *)(a1 + 4344 + *(void *)(*(void *)(a1 + 4344) - 24LL) + 32) & 5) != 0)
              {
                char v77 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
                BOOL result = os_log_type_enabled(v77, OS_LOG_TYPE_ERROR);
                if (!result) {
                  return result;
                }
              }

              else
              {
                uint64_t v78 = a1 + 296;
                std::ofstream::open(a1 + 4912, v78, 16LL);
                if ((*(_BYTE *)(a1 + 4912 + *(void *)(*(void *)(a1 + 4912) - 24LL) + 32) & 5) == 0)
                {
                  uint64_t v80 = sub_1001B02E4((void *)(a1 + 3776), (uint64_t)"Current Time:", 13LL);
                  int v81 = *(char *)(a2 + 23);
                  if (v81 >= 0) {
                    uint64_t v82 = a2;
                  }
                  else {
                    uint64_t v82 = *(void *)a2;
                  }
                  if (v81 >= 0) {
                    uint64_t v83 = *(unsigned __int8 *)(a2 + 23);
                  }
                  else {
                    uint64_t v83 = *(void *)(a2 + 8);
                  }
                  id v84 = sub_1001B02E4(v80, v82, v83);
                  __int128 v85 = sub_1001AF7B8(v84);
                  sub_1001AF7B8(v85);
                  unsigned int v86 = sub_1001B02E4((void *)(a1 + 4344), (uint64_t)"Current Time:", 13LL);
                  int v87 = *(char *)(a2 + 23);
                  if (v87 >= 0) {
                    uint64_t v88 = a2;
                  }
                  else {
                    uint64_t v88 = *(void *)a2;
                  }
                  if (v87 >= 0) {
                    uint64_t v89 = *(unsigned __int8 *)(a2 + 23);
                  }
                  else {
                    uint64_t v89 = *(void *)(a2 + 8);
                  }
                  unsigned __int8 v90 = sub_1001B02E4(v86, v88, v89);
                  uint64_t v91 = sub_1001AF7B8(v90);
                  sub_1001AF7B8(v91);
                  int v92 = sub_1001B02E4((void *)(a1 + 4912), (uint64_t)"Current Time:", 13LL);
                  int v93 = *(char *)(a2 + 23);
                  if (v93 >= 0) {
                    uint64_t v94 = a2;
                  }
                  else {
                    uint64_t v94 = *(void *)a2;
                  }
                  if (v93 >= 0) {
                    uint64_t v95 = *(unsigned __int8 *)(a2 + 23);
                  }
                  else {
                    uint64_t v95 = *(void *)(a2 + 8);
                  }
                  __int128 v96 = sub_1001B02E4(v92, v94, v95);
                  id v97 = sub_1001AF7B8(v96);
                  sub_1001AF7B8(v97);
                  std::string::size_type v98 = sub_1001B02E4((void *)(a1 + 1504), (uint64_t)"Version  : 1.1", 14LL);
                  sub_1001AF7B8(v98);
                  return 1LL;
                }

                unsigned __int8 v79 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
                BOOL result = os_log_type_enabled(v79, OS_LOG_TYPE_ERROR);
                if (!result) {
                  return result;
                }
              }
            }
          }
        }
      }

      sub_1001B05DC();
      return 0LL;
    }

    unsigned __int8 v46 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
    BOOL result = os_log_type_enabled(v46, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1001B05DC();
      return 0LL;
    }
  }

  else
  {
    int v48 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
    BOOL result = os_log_type_enabled(v48, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1001B0644((uint64_t *)a2, v48);
      return 0LL;
    }
  }

  return result;
}

void sub_1001AF798( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void *sub_1001AF7B8(void *a1)
{
  uint64_t v2 = std::locale::use_facet(&v5, &std::ctype<char>::id);
  uint64_t v3 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10LL);
  std::locale::~locale(&v5);
  std::ostream::put(a1, v3);
  std::ostream::flush(a1);
  return a1;
}

void sub_1001AF834( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t NetworkDiagnosticsConfigDb::closeFiles(NetworkDiagnosticsConfigDb *this)
{
  uint64_t v2 = (void *)((char *)this + 368);
  if ((*((_BYTE *)this + *(void *)(*((void *)this + 46) - 24LL) + 400) & 5) == 0
    && !std::filebuf::close((char *)this + 376))
  {
    std::ios_base::clear( (std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)),  *(_DWORD *)((char *)v2 + *(void *)(*v2 - 24LL) + 32) | 4);
  }

  if ((*((_BYTE *)this + *(void *)(*((void *)this + 685) - 24LL) + 5512) & 5) == 0
    && !std::filebuf::close((char *)this + 5488))
  {
    uint64_t v3 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 685) - 24LL) + 5480);
    std::ios_base::clear(v3, v3->__rdstate_ | 4);
  }

  if ((*((_BYTE *)this + *(void *)(*((void *)this + 756) - 24LL) + 6080) & 5) == 0
    && !std::filebuf::close((char *)this + 6056))
  {
    __int16 v4 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 756) - 24LL) + 6048);
    std::ios_base::clear(v4, v4->__rdstate_ | 4);
  }

  if ((*((_BYTE *)this + *(void *)(*((void *)this + 259) - 24LL) + 2104) & 5) == 0
    && !std::filebuf::close((char *)this + 2080))
  {
    std::locale v5 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 259) - 24LL) + 2072);
    std::ios_base::clear(v5, v5->__rdstate_ | 4);
  }

  if ((*((_BYTE *)this + *(void *)(*((void *)this + 472) - 24LL) + 3808) & 5) == 0
    && !std::filebuf::close((char *)this + 3784))
  {
    std::string::size_type v6 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 472) - 24LL) + 3776);
    std::ios_base::clear(v6, v6->__rdstate_ | 4);
  }

  if ((*((_BYTE *)this + *(void *)(*((void *)this + 543) - 24LL) + 4376) & 5) == 0
    && !std::filebuf::close((char *)this + 4352))
  {
    std::string::size_type v7 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 543) - 24LL) + 4344);
    std::ios_base::clear(v7, v7->__rdstate_ | 4);
  }

  if ((*((_BYTE *)this + *(void *)(*((void *)this + 614) - 24LL) + 4944) & 5) == 0
    && !std::filebuf::close((char *)this + 4920))
  {
    int v8 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 614) - 24LL) + 4912);
    std::ios_base::clear(v8, v8->__rdstate_ | 4);
  }

  if ((*((_BYTE *)this + *(void *)(*((void *)this + 330) - 24LL) + 2672) & 5) == 0
    && !std::filebuf::close((char *)this + 2648))
  {
    __int16 v9 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 330) - 24LL) + 2640);
    std::ios_base::clear(v9, v9->__rdstate_ | 4);
  }

  if ((*((_BYTE *)this + *(void *)(*((void *)this + 401) - 24LL) + 3240) & 5) == 0
    && !std::filebuf::close((char *)this + 3216))
  {
    std::string::size_type v10 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 401) - 24LL) + 3208);
    std::ios_base::clear(v10, v10->__rdstate_ | 4);
  }

  if ((*((_BYTE *)this + *(void *)(*((void *)this + 188) - 24LL) + 1536) & 5) == 0
    && !std::filebuf::close((char *)this + 1512))
  {
    int v11 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 188) - 24LL) + 1504);
    std::ios_base::clear(v11, v11->__rdstate_ | 4);
  }

  return 1LL;
}

void (__cdecl ***sub_1001AFB14( void (__cdecl ***a1)(std::ofstream *__hidden this)))(std::ofstream *__hidden this)
{
  uint64_t v2 = a1 + 1;
  *a1 = v3;
  *(void *)((char *)*(v3 - 3) + (void)a1) = v4;
  std::locale v5 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  std::ios_base::init(v5, a1 + 1);
  v5[1].__vftable = 0LL;
  v5[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf(v2);
  a1[71] = v3;
  *(void *)((char *)*(v3 - 3) + (void)(a1 + 71)) = v4;
  std::string::size_type v6 = (std::ios_base *)((char *)*(a1[71] - 3) + (void)(a1 + 71));
  std::ios_base::init(v6, a1 + 72);
  v6[1].__vftable = 0LL;
  v6[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf(a1 + 72);
  a1[142] = v3;
  *(void *)((char *)*(v3 - 3) + (void)(a1 + 142)) = v4;
  std::string::size_type v7 = (std::ios_base *)((char *)*(a1[142] - 3) + (void)(a1 + 142));
  std::ios_base::init(v7, a1 + 143);
  v7[1].__vftable = 0LL;
  v7[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf(a1 + 143);
  a1[213] = v3;
  *(void *)((char *)*(v3 - 3) + (void)(a1 + 213)) = v4;
  int v8 = (std::ios_base *)((char *)*(a1[213] - 3) + (void)(a1 + 213));
  std::ios_base::init(v8, a1 + 214);
  v8[1].__vftable = 0LL;
  v8[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf(a1 + 214);
  a1[284] = v3;
  *(void *)((char *)*(v3 - 3) + (void)(a1 + 284)) = v4;
  __int16 v9 = (std::ios_base *)((char *)*(a1[284] - 3) + (void)(a1 + 284));
  std::ios_base::init(v9, a1 + 285);
  v9[1].__vftable = 0LL;
  v9[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf(a1 + 285);
  a1[355] = v3;
  *(void *)((char *)*(v3 - 3) + (void)(a1 + 355)) = v4;
  std::string::size_type v10 = (std::ios_base *)((char *)*(a1[355] - 3) + (void)(a1 + 355));
  std::ios_base::init(v10, a1 + 356);
  v10[1].__vftable = 0LL;
  v10[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf(a1 + 356);
  a1[426] = v3;
  *(void *)((char *)*(v3 - 3) + (void)(a1 + 426)) = v4;
  int v11 = (std::ios_base *)((char *)*(a1[426] - 3) + (void)(a1 + 426));
  std::ios_base::init(v11, a1 + 427);
  v11[1].__vftable = 0LL;
  v11[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf(a1 + 427);
  a1[497] = v3;
  *(void *)((char *)*(v3 - 3) + (void)(a1 + 497)) = v4;
  std::string::size_type v12 = (std::ios_base *)((char *)*(a1[497] - 3) + (void)(a1 + 497));
  std::ios_base::init(v12, a1 + 498);
  v12[1].__vftable = 0LL;
  v12[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf(a1 + 498);
  a1[568] = v3;
  *(void *)((char *)*(v3 - 3) + (void)(a1 + 5sub_10016CB10((int *)(v1 - 68)) = v4;
  std::string::size_type v13 = (std::ios_base *)((char *)*(a1[568] - 3) + (void)(a1 + 568));
  std::ios_base::init(v13, a1 + 569);
  v13[1].__vftable = 0LL;
  v13[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf(a1 + 569);
  a1[639] = v3;
  *(void *)((char *)*(v3 - 3) + (void)(a1 + 639)) = v4;
  int v14 = (std::ios_base *)((char *)*(a1[639] - 3) + (void)(a1 + 639));
  std::ios_base::init(v14, a1 + 640);
  v14[1].__vftable = 0LL;
  v14[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf(a1 + 640);
  a1[710] = v3;
  *(void *)((char *)*(v3 - 3) + (void)(a1 + 710)) = v4;
  int v15 = (std::ios_base *)((char *)*(a1[710] - 3) + (void)(a1 + 710));
  std::ios_base::init(v15, a1 + 711);
  v15[1].__vftable = 0LL;
  v15[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf(a1 + 711);
  return a1;
}

void sub_1001AFF74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
}

void sub_1001B00A4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_1001B00D0()
{
}

void sub_1001B00FC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

void sub_1001B0128( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
}

void sub_1001B0154()
{
}

void sub_1001B0178()
{
}

void *sub_1001B019C(void *a1)
{
  return a1;
}

uint64_t sub_1001B01F4(uint64_t a1)
{
  return a1;
}

void *sub_1001B02E4(void *a1, uint64_t a2, uint64_t a3)
{
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)));
      std::string::size_type v10 = std::locale::use_facet(&v14, &std::ctype<char>::id);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32LL);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }

    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!sub_1001B0448(v7, a2, v11, a2 + a3, v6, v9)) {
      std::ios_base::clear( (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)),  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24LL) + 32) | 5);
    }
  }

  std::ostream::sentry::~sentry(v13);
  return a1;
}

void sub_1001B03EC( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
}

void sub_1001B0434(_Unwind_Exception *a1)
{
}

uint64_t sub_1001B0448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0LL;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (v12 >= 1)
    {
      sub_1001488F0(__p, v12, a6);
      std::string::size_type v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96LL))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0LL;
      }
    }

    uint64_t v15 = a4 - a3;
    else {
      return 0LL;
    }
  }

  return v6;
}

void sub_1001B0568( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

  ;
}

void sub_1001B0590(uint64_t a1@<X8>)
{
  *(void *)(v1 - std::ostream::~ostream(v0, v1 + 8) = a1;
}

void sub_1001B059C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "TDM: ERR cannot open the files for debug logging",  v1,  2u);
}

void sub_1001B05DC()
{
}

void sub_1001B0644(uint64_t *a1, os_log_s *a2)
{
  else {
    uint64_t v2 = (uint64_t *)*a1;
  }
  int v3 = 136315138;
  __int16 v4 = v2;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "TDM:ERR to create TDM log folder currentTime: %s",  (uint8_t *)&v3,  0xCu);
  sub_100008188();
}

void threadDiagnosticsManager_MsgHandler(__int128 *a1, void **a2, uint64_t a3)
{
  int v6 = sub_1000F3D4C();
  uint64_t v7 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 67109120;
    DWORD1(buf) = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "threadDiagnosticsManager_MsgHandler - os_feature_enabled : %d",  (uint8_t *)&buf,  8u);
  }

  if ((v6 & 1) == 0)
  {
    int64_t v12 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = "threadDiagnosticsManager_MsgHandler";
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "%s: This functionality is disabled...",  (uint8_t *)&buf,  0xCu);
    }

    xpc_object_t v13 = xpc_null_create();
    if (*(void *)a3) {
      uint64_t v14 = _Block_copy(*(const void **)a3);
    }
    else {
      uint64_t v14 = 0LL;
    }
    std::string::size_type v16 = *(dispatch_queue_s **)(a3 + 8);
    *(void *)&__int128 buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 1174405120LL;
    __int128 v30 = sub_1001B0E4C;
    std::string::size_type v31 = &unk_1002B5538;
    if (v14) {
      uint64_t v17 = _Block_copy(v14);
    }
    else {
      uint64_t v17 = 0LL;
    }
    int v34 = 6;
    aBlocuint64_t k = v17;
    xpc_object_t object = v13;
    if (v13) {
      xpc_retain(v13);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    dispatch_async(v16, &buf);
    xpc_release(object);
    xpc_object_t object = 0LL;
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v14) {
      _Block_release(v14);
    }
    goto LABEL_54;
  }

  BOOL v8 = tdm_queue == 0;
  int v9 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
  std::string::size_type v10 = v9;
  if (v8)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1001B0EC8(v10);
    }
    xpc_object_t v13 = xpc_null_create();
    if (*(void *)a3) {
      uint64_t v15 = _Block_copy(*(const void **)a3);
    }
    else {
      uint64_t v15 = 0LL;
    }
    std::string::size_type v21 = *(dispatch_queue_s **)(a3 + 8);
    *(void *)&__int128 buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 1174405120LL;
    __int128 v30 = sub_1001B0E4C;
    std::string::size_type v31 = &unk_1002B5538;
    if (v15) {
      std::string::size_type v22 = _Block_copy(v15);
    }
    else {
      std::string::size_type v22 = 0LL;
    }
    int v34 = 2;
    aBlocuint64_t k = v22;
    xpc_object_t object = v13;
    if (v13) {
      xpc_retain(v13);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    dispatch_async(v21, &buf);
    xpc_release(object);
    xpc_object_t object = 0LL;
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v15) {
      _Block_release(v15);
    }
LABEL_54:
    xpc_release(v13);
    return;
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "threadDiagnosticsManager_MsgHandler";
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s: dispatching on msg bridge response handler ...",  (uint8_t *)&buf,  0xCu);
  }

  uint64_t v11 = (dispatch_queue_s *)tdm_queue;
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 1174405120LL;
  void v23[2] = sub_1001B0B84;
  v23[3] = &unk_1002B5508;
  if (*((char *)a1 + 23) < 0)
  {
    sub_100168054(&__p, *(void **)a1, *((void *)a1 + 1));
  }

  else
  {
    __int128 __p = *a1;
    uint64_t v25 = *((void *)a1 + 2);
  }

  char v18 = *a2;
  xpc_object_t v26 = v18;
  if (v18) {
    xpc_retain(v18);
  }
  else {
    xpc_object_t v26 = xpc_null_create();
  }
  std::string::size_type v19 = *(void **)a3;
  if (*(void *)a3) {
    std::string::size_type v19 = _Block_copy(v19);
  }
  int v20 = *(dispatch_object_s **)(a3 + 8);
  char v27 = v19;
  dispatch_object_t v28 = v20;
  if (v20) {
    dispatch_retain(v20);
  }
  dispatch_async(v11, v23);
  if (v28) {
    dispatch_release(v28);
  }
  if (v27) {
    _Block_release(v27);
  }
  xpc_release(v26);
  xpc_object_t v26 = 0LL;
  if (SHIBYTE(v25) < 0) {
    operator delete((void *)__p);
  }
}

void sub_1001B0AE0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100006EEC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1001B0B84(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    sub_100168054(__p, *(void **)(a1 + 32), *(void *)(a1 + 40));
  }

  else
  {
    *(_OWORD *)__int128 __p = *(_OWORD *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 48);
  }

  uint64_t v2 = *(void **)(a1 + 56);
  xpc_object_t object = v2;
  if (v2) {
    xpc_retain(v2);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  threadDiagnosticsManager_MsgHandlerBridge((unint64_t *)__p, (xpc::object *)&object, &v11);
  xpc_release(object);
  xpc_object_t object = 0LL;
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  xpc_object_t v3 = v11;
  if (v11) {
    xpc_retain(v11);
  }
  else {
    xpc_object_t v3 = xpc_null_create();
  }
  __int16 v4 = *(const void **)(a1 + 64);
  if (v4) {
    std::locale v5 = _Block_copy(v4);
  }
  else {
    std::locale v5 = 0LL;
  }
  int v6 = *(dispatch_queue_s **)(a1 + 72);
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120LL;
  block[2] = sub_1001B0E4C;
  block[3] = &unk_1002B5538;
  if (v5) {
    uint64_t v7 = _Block_copy(v5);
  }
  else {
    uint64_t v7 = 0LL;
  }
  int v15 = 0;
  aBlocuint64_t k = v7;
  xpc_object_t v14 = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t v14 = xpc_null_create();
  }
  dispatch_async(v6, block);
  xpc_release(v14);
  xpc_object_t v14 = 0LL;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  xpc_release(v3);
  xpc_release(v11);
}

void sub_1001B0D24( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1001B0D54(void *a1, uint64_t a2)
{
  __int16 v4 = a1 + 4;
  if (*(char *)(a2 + 55) < 0)
  {
    sub_100168054(v4, *(void **)(a2 + 32), *(void *)(a2 + 40));
  }

  else
  {
    __int128 v5 = *(_OWORD *)(a2 + 32);
    void v4[2] = *(void *)(a2 + 48);
    *(_OWORD *)__int16 v4 = v5;
  }

  int v6 = *(void **)(a2 + 56);
  a1[7] = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    a1[7] = xpc_null_create();
  }
  uint64_t v7 = *(void **)(a2 + 64);
  if (v7) {
    uint64_t v7 = _Block_copy(v7);
  }
  BOOL v8 = *(dispatch_object_s **)(a2 + 72);
  a1[8] = v7;
  a1[9] = v8;
  if (v8) {
    dispatch_retain(v8);
  }
}

void sub_1001B0DEC(uint64_t a1)
{
  uint64_t v2 = *(dispatch_object_s **)(a1 + 72);
  if (v2) {
    dispatch_release(v2);
  }
  xpc_object_t v3 = *(const void **)(a1 + 64);
  if (v3) {
    _Block_release(v3);
  }
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(void *)(a1 + sub_10000D448(v30 - 56) = 0LL;
}

void sub_1001B0E4C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  xpc_object_t object = v2;
  if (v2) {
    xpc_retain(v2);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, void, xpc_object_t *))(v3 + 16))(v3, v1, &object);
  xpc_release(object);
}

void sub_1001B0EAC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void sub_1001B0EC8(os_log_t log)
{
  int v1 = 136315138;
  uint64_t v2 = "threadDiagnosticsManager_MsgHandler";
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "%s: Returning error response handler ...",  (uint8_t *)&v1,  0xCu);
}

NetworkDiagnosticsManager *sub_1001B103C()
{
  uint64_t v0 = (NetworkDiagnosticsManager *)NetworkDiagnosticsManager::mInstance;
  if (!NetworkDiagnosticsManager::mInstance)
  {
    uint64_t v0 = (NetworkDiagnosticsManager *)operator new(0x2E18uLL);
    NetworkDiagnosticsManager::NetworkDiagnosticsManager(v0);
    NetworkDiagnosticsManager::mInstance = (uint64_t)v0;
  }

  return v0;
}

void sub_1001B107C(_Unwind_Exception *a1)
{
}

void sub_1001B1114(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001B143C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22)
{
  if (v23 < 0) {
    operator delete(v22);
  }
  if (a22) {
    (*(void (**)(uint64_t))(*(void *)a22 + 8LL))(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001B20CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  sub_1000089BC(v28);
  _Unwind_Resume(a1);
}

id sub_1001B2324(uint64_t a1)
{
  return [*(id *)(a1 + 32) handlePeriodicTimer];
}

void sub_1001B24E0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  _Unwind_Resume(a1);
}

void sub_1001B2540(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  __int128 v5 = sub_1000160F4("com.apple.wpantund.tdm", "default");
  int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    std::string::size_type v16 = "vendor:networkdiagnosticsrsp";
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s TDM-Internal got TDM_NwDiagnostics_RspEvent\n",  buf,  0xCu);
  }

  uint64_t v7 = sub_10000CB98(a2);
  BOOL v8 = sub_1001B103C();
  uint64_t v9 = *(void *)(v7 + 8);
  if (*(void *)v7 == v9) {
    uint64_t v10 = 0LL;
  }
  else {
    uint64_t v10 = *(unsigned __int8 **)v7;
  }
  NetworkDiagnosticsManager::handle_networkdiagnostics_response(v8, v10, (unsigned __int16)(v9 - *(void *)v7));
  xpc_object_t v11 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 32LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001B26AC;
  block[3] = &unk_1002B5570;
  id v14 = WeakRetained;
  id v12 = WeakRetained;
  dispatch_async(v11, block);
}

void sub_1001B2690(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1001B26AC(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "Async call to send_nwdiagnostics_get_req",  v3,  2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "send_nwdiagnostics_get_req");
}

void sub_1001B29C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8LL))(a15);
  }
  if (v29 < 0) {
    operator delete(v28);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001B2C30( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8LL))(a15);
  }
  if (v17 < 0) {
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001B2E80( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8LL))(a15);
  }
  if (v17 < 0) {
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001B30D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8LL))(a15);
  }
  if (v17 < 0) {
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001B3300( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8LL))(a15);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001B3520( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8LL))(a15);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001B373C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8LL))(a15);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001B395C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8LL))(a15);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001B3B7C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8LL))(a15);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001B3D38( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1001B4054( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, void *a31, uint64_t a32, int a33, __int16 a34, char a35, char a36)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001B422C(id a1)
{
  int v1 = sub_1000160F4("com.apple.wpantund.tdm", "default");
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315394;
    uint64_t v7 = "-[ThreadDiagnosticsManagerInstance setupCleanupTimer]_block_invoke";
    __int16 v8 = 1024;
    int v9 = 914;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s:%d Cleanup Timer Fired !!! ",  (uint8_t *)&v6,  0x12u);
  }

  uint64_t v3 = sub_1001B103C();
  NetworkDiagnosticsManager::cleanupForNextIteration(v3, v4, v5);
}

void sub_1001B4464( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001B4678(uint64_t a1)
{
  uint64_t v2 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "TDM: startThreadDiagnosticsTimer : Timer Triggered",  (uint8_t *)__p,  2u);
  }

  [*(id *)(a1 + 32) handlePeriodicTimer];
  sub_10000AC00(__p, "Command Error");
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1001B47B0(uint64_t *a1, uint64_t *a2, os_log_t log)
{
  else {
    uint64_t v3 = (uint64_t *)*a2;
  }
  int v4 = 136315394;
  char v5 = a1;
  __int16 v6 = 2080;
  uint64_t v7 = v3;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "Wrong message received from client %s for method %s ",  (uint8_t *)&v4,  0x16u);
  sub_100008188();
}

void sub_1001B484C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001B48BC( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001B492C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001B499C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001B4A0C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001B4A7C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001B4AEC( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001B4B5C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001B4BCC( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001B4C3C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001B4CAC( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001B4D1C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001B4D8C()
{
}

void NetworkDiagnosticsMdnsResolver::NetworkDiagnosticsMdnsResolver( NetworkDiagnosticsMdnsResolver *this, NetworkDiagnosticsConfigDb *a2)
{
  *(_OWORD *)((char *)this + std::ostream::~ostream(v0, v1 + 8) = 0u;
  uint64_t v3 = (uint64_t *)((char *)this + 8);
  *(void *)this = a2;
  *(_OWORD *)((char *)this + memset(v10, 0, 24) = 0u;
  *(_OWORD *)((char *)this + memset(&v22.ai_socktype, 0, 40) = 0u;
  *((void *)this + 7) = 0LL;
  *((_DWORD *)this + 16) = 1065353216;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 8std::ostream::~ostream(v0, v1 + 8) = 0u;
  *((_DWORD *)this + 26) = 1065353216;
  *((void *)this + 15) = v4;
  __int16 v6 = (void (__cdecl ***)(std::ofstream *__hidden))((char *)this + 120);
  uint64_t v7 = (void (__cdecl ***)(std::ofstream *__hidden))((char *)this + 536);
  __int16 v8 = (char *)this + 128;
  *(void *)((char *)this + *(void *)(v4 - 24) + 12sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = v5;
  int v9 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 15) - 24LL) + 120);
  std::ios_base::init(v9, (char *)this + 128);
  v9[1].__vftable = 0LL;
  v9[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf(v8);
  *((_DWORD *)this + 2std::ostream::~ostream(v0, v1 + 8) = 0;
  *((_BYTE *)this + 68std::ostream::~ostream(v0, v1 + 8) = 1;
  uint64_t v11 = *((void *)this + 1);
  *((void *)this + 2) = v11;
  sub_1001B4F24(v3, 0x64uLL);
}

void sub_1001B4ECC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void **sub_1001B4F24(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  BOOL result = (void **)(a1 + 2);
  if (0xF0F0F0F0F0F0F0F1LL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x1E1E1E1E1E1E1E2LL) {
      sub_10000CCF0();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = sub_1001B67B8((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    void v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 136 * v6;
    sub_1001B6744(a1, v7);
    return sub_1001B6938(v7);
  }

  return result;
}

void sub_1001B4FC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void NetworkDiagnosticsMdnsResolver::~NetworkDiagnosticsMdnsResolver(NetworkDiagnosticsMdnsResolver *this)
{
  uint64_t v3 = (char *)this + 120;
  std::filebuf::~filebuf((char *)this + 128);
  std::ios::~ios((char *)this + 536);
  sub_1001B664C((uint64_t)this + 72);
  sub_1001B664C((uint64_t)this + 32);
  uint64_t v4 = (void **)((char *)this + 8);
  sub_1001B6554(&v4);
}

void NetworkDiagnosticsMdnsResolver::closeFiles(NetworkDiagnosticsMdnsResolver *this)
{
  int v1 = (void *)((char *)this + 120);
  if ((*((_BYTE *)this + *(void *)(*((void *)this + 15) - 24LL) + 152) & 5) == 0
    && !std::filebuf::close((char *)this + 128))
  {
    std::ios_base::clear( (std::ios_base *)((char *)v1 + *(void *)(*v1 - 24LL)),  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24LL) + 32) | 4);
  }

void NetworkDiagnosticsMdnsResolver::cleanup(NetworkDiagnosticsMdnsResolver *this, BOOL a2, int a3)
{
  if (a3)
  {
    uint64_t v5 = *((void *)this + 1);
    *((void *)this + 2) = v5;
    sub_1001B69AC((uint64_t)this + 32);
    sub_1001B69AC((uint64_t)this + 72);
    *((_DWORD *)this + 2std::ostream::~ostream(v0, v1 + 8) = 0;
  }

  NetworkDiagnosticsMdnsResolver::closeFiles(this);
}

BOOL NetworkDiagnosticsMdnsResolver::initialize( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = a2;
  int v9 = (void *)(a1 + 120);
  uint64_t v10 = (char *)a2 + 23;
  std::ofstream::open(a1 + 120, a2, 16LL);
  int v11 = *(_DWORD *)((_BYTE *)v9 + *(void *)(*(void *)(a1 + 120) - 24LL) + 32) & 5;
  if (v11)
  {
    id v12 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_1001B7540(v10, v7, v12);
    }
  }

  else
  {
    xpc_object_t v13 = sub_1001B02E4(v9, (uint64_t)"Current Time:", 13LL);
    int v14 = *(char *)(a6 + 23);
    if (v14 >= 0) {
      uint64_t v15 = a6;
    }
    else {
      uint64_t v15 = *(void *)a6;
    }
    if (v14 >= 0) {
      uint64_t v16 = *(unsigned __int8 *)(a6 + 23);
    }
    else {
      uint64_t v16 = *(void *)(a6 + 8);
    }
    int v17 = sub_1001B02E4(v13, v15, v16);
    std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24LL)));
    char v18 = std::locale::use_facet(&v23, &std::ctype<char>::id);
    uint64_t v19 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10LL);
    std::locale::~locale(&v23);
    std::ostream::put(v17, v19);
    std::ostream::flush(v17);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24LL)));
    int v20 = std::locale::use_facet(&v23, &std::ctype<char>::id);
    uint64_t v21 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10LL);
    std::locale::~locale(&v23);
    std::ostream::put(v9, v21);
    std::ostream::flush(v9);
  }

  return v11 == 0;
}

void sub_1001B52D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void NetworkDiagnosticsMdnsResolver::MyStopBrowsingForServices( NetworkDiagnosticsMdnsResolver *this, CFNetServiceBrowserRef browser)
{
  if (browser)
  {
    CFNetServiceBrowserStopSearch(browser, &error);
    Current = CFRunLoopGetCurrent();
    CFNetServiceBrowserUnscheduleFromRunLoop(browser, Current, kCFRunLoopCommonModes);
    CFNetServiceBrowserInvalidate(browser);
    CFRelease(browser);
    *((void *)this + 87) = 0LL;
    *((_BYTE *)this + 68std::ostream::~ostream(v0, v1 + 8) = 1;
    uint64_t v5 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "TDM:NetworkDiagnosticsMdnsResolver::MyStopBrowsingForServices completed",  v7,  2u);
    }
  }

  else
  {
    uint64_t v6 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1001B75C4();
    }
  }

void NetworkDiagnosticsMdnsResolver::updatebrowsedService( uint64_t *a1, __CFNetServiceBrowser *a2, std::string *__str, std::string *a4, std::string *a5, char a6)
{
  int v28 = 0;
  *(_OWORD *)int v29 = 0u;
  *(_OWORD *)__int128 v30 = 0u;
  __int128 v31 = 0u;
  *(_OWORD *)int v32 = 0u;
  *(_OWORD *)int v33 = 0u;
  __int128 v34 = 0u;
  memset(__p, 0, sizeof(__p));
  __int16 v36 = -1;
  std::string::operator=((std::string *)v32, __str);
  std::string::operator=((std::string *)&v30[1], a4);
  std::string::operator=((std::string *)v29, a5);
  unint64_t v12 = a1[2];
  if (v12 >= a1[3])
  {
    uint64_t v13 = sub_1001B6A00(a1 + 1, (uint64_t)&v28);
  }

  else
  {
    sub_1001B6434(a1[2], (uint64_t)&v28);
    uint64_t v13 = v12 + 136;
    a1[2] = v12 + 136;
  }

  a1[2] = v13;
  padString(__str, 0x1EuLL, 32);
  padString(a4, 0x1EuLL, 32);
  padString(a5, 0x32uLL, 32);
  int size = (char)a5->__r_.__value_.__s.__size_;
  if (size >= 0) {
    uint64_t v15 = (uint64_t)a5;
  }
  else {
    uint64_t v15 = a5->__r_.__value_.__r.__words[0];
  }
  if (size >= 0) {
    uint64_t v16 = a5->__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v16 = a5->__r_.__value_.__l.__size_;
  }
  int v17 = sub_1001B02E4(a1 + 15, v15, v16);
  sub_1001B02E4(v17, (uint64_t)"   ", 3LL);
  int v18 = (char)a4->__r_.__value_.__s.__size_;
  if (v18 >= 0) {
    uint64_t v19 = (uint64_t)a4;
  }
  else {
    uint64_t v19 = a4->__r_.__value_.__r.__words[0];
  }
  if (v18 >= 0) {
    uint64_t v20 = a4->__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v20 = a4->__r_.__value_.__l.__size_;
  }
  uint64_t v21 = sub_1001B02E4(a1 + 15, v19, v20);
  sub_1001B02E4(v21, (uint64_t)"   ", 3LL);
  int v22 = (char)__str->__r_.__value_.__s.__size_;
  if (v22 >= 0) {
    std::locale v23 = __str;
  }
  else {
    std::locale v23 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  if (v22 >= 0) {
    uint64_t v24 = __str->__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v24 = __str->__r_.__value_.__l.__size_;
  }
  uint64_t v25 = sub_1001B02E4(a1 + 15, (uint64_t)v23, v24);
  std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24LL)));
  xpc_object_t v26 = std::locale::use_facet(&v37, &std::ctype<char>::id);
  uint64_t v27 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10LL);
  std::locale::~locale(&v37);
  std::ostream::put(v25, v27);
  std::ostream::flush(v25);
  if ((a6 & 1) == 0) {
    NetworkDiagnosticsMdnsResolver::MyStopBrowsingForServices((NetworkDiagnosticsMdnsResolver *)a1, a2);
  }
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(v33[1]);
  }
  if (SHIBYTE(v33[0]) < 0) {
    operator delete(v32[0]);
  }
  if (SHIBYTE(v31) < 0) {
    operator delete(v30[1]);
  }
  if (SHIBYTE(v30[0]) < 0) {
    operator delete(v29[0]);
  }
}

void sub_1001B5620( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 + 16) = v10;
  sub_1001B5650((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1001B5650(uint64_t a1)
{
  return a1;
}

void NetworkDiagnosticsMdnsResolver::MyBrowseCallBack( NetworkDiagnosticsMdnsResolver *this, __CFNetServiceBrowser *a2, CFNetServiceRef theService, _DWORD *a4, CFStreamError *a5, void *a6)
{
  char v9 = (char)a2;
  if (!a5)
  {
    int v11 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_1001B76C0();
    }
  }

  if (!a4 || !a4[2]) {
    goto LABEL_13;
  }
  unint64_t v12 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
    sub_1001B7658();
  }
  if ((v9 & 1) == 0 && a5)
  {
    uint64_t v13 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_1001B75F0();
    }
    NetworkDiagnosticsMdnsResolver::MyStopBrowsingForServices((NetworkDiagnosticsMdnsResolver *)a5, this);
  }

  else
  {
LABEL_13:
    Name = CFNetServiceGetName(theService);
    CFStringGetCString(Name, buffer, 64LL, 0x8000100u);
    Type = CFNetServiceGetType(theService);
    CFStringGetCString(Type, v23, 24LL, 0x8000100u);
    Domaiuint64_t n = CFNetServiceGetDomain(theService);
    CFStringGetCString(Domain, __s, 1005LL, 0x8000100u);
    int v17 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)__s;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v23;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      uint64_t v21 = buffer;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "TDM: MyBrowseCallBack for %s.%s hostname:%s",  (uint8_t *)&buf,  0x20u);
    }

    sub_10000AC00(&buf, __s);
    sub_10000AC00(&v19, v23);
    sub_10000AC00(&__p, buffer);
    if (a5) {
      NetworkDiagnosticsMdnsResolver::updatebrowsedService(&a5->domain, this, &buf, &v19, &__p, v9);
    }
  }

void sub_1001B5938( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef verifydescription(const void *a1)
{
  return @"entered here ";
}

uint64_t NetworkDiagnosticsMdnsResolver::MyStartBrowsingForServices(NetworkDiagnosticsMdnsResolver *this)
{
  *((_BYTE *)this + 68std::ostream::~ostream(v0, v1 + 8) = 0;
  clientContext.versiouint64_t n = 0LL;
  clientContext.info = this;
  clientContext.retaiuint64_t n = 0LL;
  clientContext.release = 0LL;
  clientContext.copyDescriptiouint64_t n = (CFAllocatorCopyDescriptionCallBack)verifydescription;
  CFNetServiceBrowserRef v2 = CFNetServiceBrowserCreate( kCFAllocatorDefault,  (CFNetServiceBrowserClientCallBack)NetworkDiagnosticsMdnsResolver::MyBrowseCallBack,  &clientContext);
  if (v2)
  {
    uint64_t v3 = v2;
    *((void *)this + 87) = v2;
    Current = CFRunLoopGetCurrent();
    CFNetServiceBrowserScheduleWithRunLoop(v3, Current, kCFRunLoopCommonModes);
    uint64_t result = CFNetServiceBrowserSearchForServices(v3, @"local", @"_hap._udp", &error);
    if (!(_DWORD)result)
    {
      uint64_t v6 = CFRunLoopGetCurrent();
      CFNetServiceBrowserUnscheduleFromRunLoop(v3, v6, kCFRunLoopCommonModes);
      CFRelease(v3);
      uint64_t v7 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
      uint64_t result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        sub_1001B7718(&error.domain, v7);
        return 0LL;
      }
    }
  }

  else
  {
    __int16 v8 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
    uint64_t result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      sub_1001B76EC();
      return 0LL;
    }
  }

  return result;
}

void NetworkDiagnosticsMdnsResolver::MyCancelResolve( NetworkDiagnosticsMdnsResolver *this, __CFNetService *a2)
{
  if (!a2)
  {
    uint64_t v3 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1001B779C();
    }
  }

  Current = CFRunLoopGetCurrent();
  CFNetServiceUnscheduleFromRunLoop(a2, Current, kCFRunLoopCommonModes);
  CFNetServiceSetClient(a2, 0LL, 0LL);
  CFNetServiceCancel(a2);
  CFRelease(a2);
}

void NetworkDiagnosticsMdnsResolver::MyResolveCallBack( NetworkDiagnosticsMdnsResolver *this, int a2, CFNetServiceRef theService, CFStreamError *a4, void *a5)
{
  Addressing = CFNetServiceGetAddressing(theService);
  int Count = CFArrayGetCount(Addressing);
  TargetHost = CFNetServiceGetTargetHost(theService);
  CStringPtr = (char *)CFStringGetCStringPtr(TargetHost, 0);
  sub_10000AC00(&v38, CStringPtr);
  if (Addressing)
  {
    if (Count)
    {
      ++*((_DWORD *)this + 28);
      ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(Addressing, 0LL);
      if (ValueAtIndex)
      {
        BytePtr = CFDataGetBytePtr(ValueAtIndex);
        int v14 = BytePtr;
        if (BytePtr)
        {
          if (BytePtr[1] == 30)
          {
            __int128 v37 = *(_OWORD *)(BytePtr + 8);
            uint64_t v15 = (uint64_t)inet_ntop(30, &v37, __s, 0x2Eu);
            if (v15)
            {
              uint64_t v16 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
              if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
              {
                int v17 = &v38;
                if ((v38.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  int v17 = (std::string *)v38.__r_.__value_.__r.__words[0];
                }
                unsigned int v18 = bswap32(*((unsigned __int16 *)v14 + 1));
                *(_DWORD *)std::string buf = 136315650;
                *(void *)int v41 = v17;
                *(_WORD *)&v41[8] = 2080;
                *(void *)&v41[10] = __s;
                *(_WORD *)&v41[18] = 1024;
                unsigned int v42 = HIWORD(v18);
                _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "TDM: MyResolveCallBack hostanme:%s ip:%s port:%d",  buf,  0x1Cu);
              }

              sub_10000AC00(&__str, __s);
              uint64_t v19 = *((void *)this + 1);
              uint64_t v20 = v19 + 136LL * a2;
              if (*(char *)(v20 + 31) < 0)
              {
                sub_100168054(v34, *(void **)(v20 + 8), *(void *)(v20 + 16));
                uint64_t v19 = *((void *)this + 1);
              }

              else
              {
                __int128 v21 = *(_OWORD *)(v20 + 8);
                uint64_t v35 = *(void *)(v20 + 24);
                *(_OWORD *)__int128 v34 = v21;
              }

              std::string::operator=((std::string *)(v19 + 136LL * a2 + 80), &__str);
              uint64_t v30 = *((void *)this + 1) + 136LL * a2;
              *(_DWORD *)(v30 + 12std::ostream::~ostream(v0, v1 + 8) = bswap32(*((unsigned __int16 *)v14 + 1)) >> 16;
              std::string::operator=((std::string *)(v30 + 104), &v38);
              *(_WORD *)(*((void *)this + 1) + 136LL * a2 + 1sub_1001B664C(v2 + 32) = -1;
              __int128 v31 = sub_1001B6B04((void *)this + 4, (unsigned __int8 *)&__str);
              if (v31)
              {
                sub_1001B6434((uint64_t)buf, (uint64_t)(v31 + 40));
                uint64_t v32 = *((void *)this + 1) + 136LL * a2;
                *(_WORD *)(v32 + 1sub_1001B664C(v2 + 32) = *((_WORD *)v31 + 86);
                uint64_t v15 = sub_1001B606C((uint64_t)(v31 + 40), v32);
              }

              else
              {
                sub_1001B6434((uint64_t)buf, *((void *)this + 1) + 136LL * a2);
                p_str = &__str;
                int v33 = sub_1001B7150( (uint64_t)this + 32,  (unsigned __int8 *)&__str,  (uint64_t)&unk_10022BF58,  (__int128 **)&p_str);
                uint64_t v15 = sub_1001B606C((uint64_t)(v33 + 40), (uint64_t)buf);
              }

              if (v51 < 0) {
                operator delete(__p);
              }
              if (v49 < 0) {
                operator delete(v48);
              }
              if (v47 < 0) {
                operator delete(v46);
              }
              if (v45 < 0) {
                operator delete(v44);
              }
              if (v43 < 0) {
                operator delete(*(void **)&v41[4]);
              }
              if (SHIBYTE(v35) < 0) {
                operator delete(v34[0]);
              }
            }
          }

          else
          {
            xpc_object_t v26 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
            uint64_t v15 = os_log_type_enabled(v26, OS_LOG_TYPE_ERROR);
            if ((_DWORD)v15)
            {
              uint64_t v27 = &v38;
              if ((v38.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                uint64_t v27 = (std::string *)v38.__r_.__value_.__r.__words[0];
              }
              int v28 = v14[1];
              int v29 = *v14;
              *(_DWORD *)std::string buf = 136315650;
              *(void *)int v41 = v27;
              *(_WORD *)&v41[8] = 1024;
              *(_DWORD *)&v41[10] = v28;
              *(_WORD *)&v41[14] = 1024;
              *(_DWORD *)&uint8_t v41[16] = v29;
              _os_log_error_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "TDM: Not a valid Ipv6 address hostname:%s sa_family=%d sa_len=%d",  buf,  0x18u);
            }
          }
        }

        else
        {
          uint64_t v25 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
          uint64_t v15 = os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
          if ((_DWORD)v15) {
            sub_1001B784C();
          }
        }
      }

      else
      {
        uint64_t v24 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
        uint64_t v15 = os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
        if ((_DWORD)v15) {
          sub_1001B7820();
        }
      }
    }

    else
    {
      std::locale v23 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
      uint64_t v15 = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
      if ((_DWORD)v15) {
        sub_1001B77F4();
      }
    }
  }

  else
  {
    int v22 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
    uint64_t v15 = os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
    if ((_DWORD)v15) {
      sub_1001B77C8();
    }
  }

  NetworkDiagnosticsMdnsResolver::MyCancelResolve((NetworkDiagnosticsMdnsResolver *)v15, theService);
}

void sub_1001B5FD0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, uint64_t a30, uint64_t a31, char a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001B606C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 32));
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)(a2 + 56));
  std::string::operator=((std::string *)(a1 + 80), (const std::string *)(a2 + 80));
  std::string::operator=((std::string *)(a1 + 104), (const std::string *)(a2 + 104));
  *(_DWORD *)(a1 + 12std::ostream::~ostream(v0, v1 + 8) = *(_DWORD *)(a2 + 128);
  *(_WORD *)(a1 + 1sub_1001B664C(v2 + 32) = *(_WORD *)(a2 + 132);
  return a1;
}

void NetworkDiagnosticsMdnsResolver::MyResolveService(NetworkDiagnosticsMdnsResolver *this)
{
  uint64_t v1 = *((void *)this + 1);
  CFNetServiceBrowserRef v2 = (uint64_t *)((char *)this + 8);
  if (*((void *)this + 2) == v1) {
    return;
  }
  uint64_t v4 = 0LL;
  unsigned int v5 = 1;
  while (1)
  {
    uint64_t v6 = v1 + 136 * v4;
    uint64_t v7 = (const char *)(v6 + 56);
    CFStringRef v8 = CFStringCreateWithCString(0LL, v7, 0x8000100u);
    if (!v8)
    {
      std::locale v23 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        sub_1001B7878(&v32, v33, v23);
      }
      goto LABEL_25;
    }

    char v9 = v8;
    uint64_t v10 = *v2 + 136 * v4;
    int v11 = (const char *)(v10 + 32);
    CFStringRef v12 = CFStringCreateWithCString(0LL, v11, 0x8000100u);
    if (v12) {
      break;
    }
    uint64_t v24 = v9;
LABEL_24:
    CFRelease(v24);
LABEL_25:
    uint64_t v4 = v5;
    uint64_t v1 = *((void *)this + 1);
    if (0xF0F0F0F0F0F0F0F1LL * ((*((void *)this + 2) - v1) >> 3) <= v5++) {
      return;
    }
  }

  uint64_t v13 = v12;
  uint64_t v14 = *v2 + 136 * v4;
  uint64_t v15 = (const char *)(v14 + 8);
  uint64_t v16 = CFStringCreateWithCString(0LL, v15, 0x8000100u);
  if (!v16)
  {
    uint64_t v25 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      sub_1001B78AC(&v30, v31, v25);
    }
    CFRelease(v9);
    uint64_t v24 = v13;
    goto LABEL_24;
  }

  int v17 = v16;
  unsigned int v18 = CFNetServiceCreate(kCFAllocatorDefault, v9, v13, v16, 5683);
  if (v18)
  {
    uint64_t v20 = v18;
    LODWORD(v19) = *(_DWORD *)(*(void *)this + 28LL);
    if (CFNetServiceResolveWithTimeout(v18, (double)v19, &error))
    {
      NetworkDiagnosticsMdnsResolver::MyResolveCallBack(this, v5 - 1, v20, v21, v22);
    }

    else
    {
      Current = CFRunLoopGetCurrent();
      CFNetServiceUnscheduleFromRunLoop(v20, Current, kCFRunLoopCommonModes);
      CFNetServiceSetClient(v20, 0LL, 0LL);
      CFRelease(v20);
      uint64_t v27 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 134218240;
        domaiuint64_t n = error.domain;
        __int16 v37 = 1024;
        SInt32 v38 = error.error;
        _os_log_error_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "TDM: ERROR: CFNetServiceResolve returned %ld, %d",  buf,  0x12u);
      }
    }

    CFRelease(v9);
    CFRelease(v13);
    uint64_t v24 = v17;
    goto LABEL_24;
  }

  int v29 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
    sub_1001B78E0(v2, v4, v29);
  }
  CFRelease(v9);
  CFRelease(v13);
  CFRelease(v17);
}

uint64_t sub_1001B6434(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + std::ostream::~ostream(v0, v1 + 8) = 0u;
  uint64_t v4 = (std::string *)(a1 + 32);
  *(_OWORD *)(a1 + sub_10000D448(v30 - 56) = 0u;
  unsigned int v5 = (std::string *)(a1 + 56);
  uint64_t v6 = (std::string *)(a1 + 80);
  *(_OWORD *)(a1 + 104) = 0u;
  uint64_t v7 = (std::string *)(a1 + 104);
  *(void *)(a1 + 12sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = 0LL;
  *(_OWORD *)(a1 + 8std::ostream::~ostream(v0, v1 + 8) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + memset(&v22.ai_socktype, 0, 40) = 0u;
  *(_OWORD *)(a1 + memset(v10, 0, 24) = 0u;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  std::string::operator=(v4, (const std::string *)(a2 + 32));
  std::string::operator=(v5, (const std::string *)(a2 + 56));
  std::string::operator=(v6, (const std::string *)(a2 + 80));
  std::string::operator=(v7, (const std::string *)(a2 + 104));
  *(_DWORD *)(a1 + 12std::ostream::~ostream(v0, v1 + 8) = *(_DWORD *)(a2 + 128);
  *(_WORD *)(a1 + 1sub_1001B664C(v2 + 32) = *(_WORD *)(a2 + 132);
  return a1;
}

void sub_1001B64F8(_Unwind_Exception *exception_object)
{
  if (v1[127] < 0) {
    operator delete(*v6);
  }
  if (v1[103] < 0) {
    operator delete(*v5);
  }
  if (v1[79] < 0) {
    operator delete(*v4);
  }
  if (v1[55] < 0) {
    operator delete(*v3);
  }
  if (v1[31] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001B6554(void ***a1)
{
  uint64_t v1 = *a1;
  CFNetServiceBrowserRef v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unsigned int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136LL;
        sub_1001B65D8((uint64_t)(v1 + 2), v4);
      }

      while ((void *)v4 != v2);
      unsigned int v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_1001B65D8(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1001B664C(uint64_t a1)
{
  CFNetServiceBrowserRef v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1001B6684(uint64_t a1, void *a2)
{
  if (a2)
  {
    CFNetServiceBrowserRef v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_1001B66C0((uint64_t)(v2 + 2));
      operator delete(v2);
      CFNetServiceBrowserRef v2 = v3;
    }

    while (v3);
  }

void sub_1001B66C0(uint64_t a1)
{
}

uint64_t sub_1001B6744(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1001B67FC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1001B67B8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1E1E1E1E1E1E1E2LL) {
    sub_10000F12C();
  }
  return operator new(136 * a2);
}

uint64_t sub_1001B67FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v15 = a6;
  *((void *)&v15 + 1) = a7;
  __int128 v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }

  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 136LL;
      sub_1001B6434(v7 - 136, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 136LL;
      *((void *)&v15 + 1) -= 136LL;
    }

    while (v9 != a5);
    uint64_t v10 = v15;
  }

  char v13 = 1;
  sub_1001B68B4((uint64_t)v12);
  return v10;
}

void sub_1001B68A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1001B68B4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_1001B68E8((uint64_t *)a1);
  }
  return a1;
}

void sub_1001B68E8(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_1001B65D8(v3, v1);
      v1 += 136LL;
    }

    while (v1 != v2);
  }

void **sub_1001B6938(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1001B6968(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 136;
    sub_1001B65D8(v4, i - 136);
  }

void sub_1001B69AC(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_1001B6684(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0LL;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0LL; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0LL;
    }

    *(void *)(a1 + memset(v10, 0, 24) = 0LL;
  }

uint64_t sub_1001B6A00(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xF0F0F0F0F0F0F0F1LL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1E1E1E1E1E1E1E1LL) {
    sub_10000CCF0();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xF0F0F0F0F0F0F0F1LL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xF0F0F0F0F0F0F0LL) {
    unint64_t v9 = 0x1E1E1E1E1E1E1E1LL;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_1001B67B8(v7, v9);
  }
  else {
    uint64_t v10 = 0LL;
  }
  char v13 = v10;
  __int128 v14 = &v10[136 * v4];
  uint64_t v16 = &v10[136 * v9];
  sub_1001B6434((uint64_t)v14, a2);
  __int128 v15 = v14 + 136;
  sub_1001B6744(a1, &v13);
  uint64_t v11 = a1[1];
  sub_1001B6938(&v13);
  return v11;
}

void sub_1001B6AF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

unsigned __int8 *sub_1001B6B04(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = sub_1001B6C04((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0LL;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }

  else
  {
    unint64_t v9 = (*(void *)&v5 - 1LL) & v4;
  }

  uint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0LL;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if ((sub_1001B70AC(v12, v11 + 16, a2) & 1) != 0) {
          return v11;
        }
      }

      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }

        else
        {
          v13 &= *(void *)&v5 - 1LL;
        }

        if (v13 != v9) {
          return 0LL;
        }
      }

      uint64_t v11 = *(unsigned __int8 **)v11;
    }

    while (v11);
  }

  return v11;
}

unint64_t sub_1001B6C04(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }

  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }

  return sub_1001B6C40((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t sub_1001B6C40(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69LL
          * (v6 ^ ((0x9DDFEA08EB382D69LL * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69LL * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69LL * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297LL * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      int v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0LL);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273LL * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273LL * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64LL;
      }

      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297LL
          * ((0x9DDFEA08EB382D69LL
            * (v21 ^ ((0x9DDFEA08EB382D69LL * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69LL * (v21 ^ ((0x9DDFEA08EB382D69LL * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69LL
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297LL
                  * ((0x9DDFEA08EB382D69LL
                    * (v20 ^ ((0x9DDFEA08EB382D69LL * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69LL * (v20 ^ ((0x9DDFEA08EB382D69LL * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69LL
           * ((0x9DDFEA08EB382D69LL * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69LL * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }

    else
    {
      return sub_1001B6FEC(a2, a3);
    }
  }

  else if (a3 > 0x10)
  {
    return sub_1001B6F40(a2, a3);
  }

  else
  {
    return sub_1001B6E48(a2, a3);
  }

unint64_t sub_1001B6E48(_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557LL * (a2 + 4LL * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }

    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69LL * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69LL
           * ((0x9DDFEA08EB382D69LL * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69LL * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }

  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69LL
          * ((0x9DDFEA08EB382D69LL
            * (v4 ^ ((0x9DDFEA08EB382D69LL * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69LL * (v4 ^ ((0x9DDFEA08EB382D69LL * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }

  return result;
}

unint64_t sub_1001B6F40(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273LL * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557LL, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69LL * (v5 ^ (v4 - 0x3C5A37A36834CED9LL * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69LL
       * ((0x9DDFEA08EB382D69LL * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69LL * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t sub_1001B6FEC(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9LL * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9LL * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127LL * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1LL
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9LL * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9LL * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t sub_1001B70AC(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0LL) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0LL) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0LL;
  }
  if (v7 < 0) {
    uint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1LL;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }

  while (v9 == v11 && v14);
  return result;
}

unsigned __int8 *sub_1001B7150(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_1001B6C04(a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }

    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }

    BOOL v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if ((sub_1001B70AC(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }

          else
          {
            v16 &= v11 - 1;
          }

          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }

  sub_1001B73E8(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1LL;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_1001ACE48(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }

    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }

  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *uint64_t v23 = v26[0];
  }

  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8LL);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }

      else
      {
        v24 &= v11 - 1;
      }

      *(void *)(*(void *)a1 + 8 * vmemset(v10, 0, 24) = v26[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0LL;
  ++*v8;
  sub_1001B74C4((uint64_t)v26, 0LL);
  return i;
}

void sub_1001B73D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

char *sub_1001B73E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0xB0uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + std::ostream::~ostream(v0, v1 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(void *)uint64_t v8 = 0LL;
  *((void *)v8 + 1) = a2;
  uint64_t result = sub_1001B7454((char *)v8 + 16, *a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1001B743C(_Unwind_Exception *a1)
{
}

char *sub_1001B7454(char *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_100168054(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v3 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v3;
  }

  *((_DWORD *)__dst + 6) = 0;
  *((_OWORD *)__dst + 2) = 0u;
  *((_OWORD *)__dst + 3) = 0u;
  *((_OWORD *)__dst + 4) = 0u;
  *((_OWORD *)__dst + 5) = 0u;
  *((_OWORD *)__dst + 6) = 0u;
  *((_OWORD *)__dst + 7) = 0u;
  *((_OWORD *)__dst + std::ostream::~ostream(v0, v1 + 8) = 0u;
  *(_OWORD *)(__dst + 1memset(&v22.ai_socktype, 0, 40) = 0u;
  *((_WORD *)__dst + 7std::ostream::~ostream(v0, v1 + 8) = -1;
  return __dst;
}

void sub_1001B74C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_1001B66C0((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }

void sub_1001B7508(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_1001B7514(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

void sub_1001B7540(char *a1, void *a2, os_log_t log)
{
  if (*a1 >= 0) {
    __int128 v3 = a2;
  }
  else {
    __int128 v3 = (void *)*a2;
  }
  int v4 = 136315138;
  uint64_t v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "TDM:ERR to open %s", (uint8_t *)&v4, 0xCu);
  sub_100008188();
}

void sub_1001B75C4()
{
}

void sub_1001B75F0()
{
}

void sub_1001B7658()
{
}

void sub_1001B76C0()
{
}

void sub_1001B76EC()
{
}

void sub_1001B7718(uint64_t *a1, os_log_s *a2)
{
  uint64_t v2 = *a1;
  int v3 = *((_DWORD *)a1 + 2);
  int v4 = 134218240;
  uint64_t v5 = v2;
  __int16 v6 = 1024;
  int v7 = v3;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "TDM: CFNetServiceBrowserSearchForServices returned :(domaiuint64_t n = %ld, error = %d)",  (uint8_t *)&v4,  0x12u);
  sub_100008188();
}

void sub_1001B779C()
{
}

void sub_1001B77C8()
{
}

void sub_1001B77F4()
{
}

void sub_1001B7820()
{
}

void sub_1001B784C()
{
}

void sub_1001B7878(uint8_t *a1, _BYTE *a2, os_log_s *a3)
{
  *a1 = 0;
  *a2 = 0;
  sub_1001B7508( (void *)&_mh_execute_header,  a3,  (uint64_t)a3,  "TDM: ERROR: MyResolveService cannot create CFString for domain",  a1);
}

void sub_1001B78AC(uint8_t *a1, _BYTE *a2, os_log_s *a3)
{
  *a1 = 0;
  *a2 = 0;
  sub_1001B7508( (void *)&_mh_execute_header,  a3,  (uint64_t)a3,  "TDM: ERROR: MyResolveService cannot create CFString for name",  a1);
}

void sub_1001B78E0(uint64_t *a1, uint64_t a2, os_log_t log)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 136 * a2;
  uint64_t v5 = (void *)(v4 + 8);
  uint64_t v6 = v3 + 136 * a2;
  int v7 = (void *)(v6 + 32);
  uint64_t v8 = v3 + 136 * a2;
  unint64_t v9 = (void *)(v8 + 56);
  int v10 = 136315650;
  unint64_t v11 = v5;
  __int16 v12 = 2080;
  unint64_t v13 = v7;
  __int16 v14 = 2080;
  uint64_t v15 = v9;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "TDM: ERROR: MyResolveService CFNetServiceCreate failed for name:%s type:%s domain:%s port:5683",  (uint8_t *)&v10,  0x20u);
}

void NetworkDiagnosticsLogger::NetworkDiagnosticsLogger( NetworkDiagnosticsLogger *this, NetworkDiagnosticsMdnsResolver *a2, NetworkDiagnosticsConfigDb *a3)
{
  uint64_t v6 = (char *)this + 8;
  *(void *)this = v8;
  uint64_t v16 = v7;
  *(void *)((char *)this + *(void *)(v8 - sub_10016A418((unsigned int **)(v1 - 24)) = v7;
  unint64_t v9 = (std::ios_base *)((char *)this + *(void *)(*(void *)this - 24LL));
  std::ios_base::init(v9, (char *)this + 8);
  v9[1].__vftable = 0LL;
  v9[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf(v6);
  *((void *)this + 71) = v8;
  *(void *)((char *)this + *(void *)(v8 - 24) + 56std::ostream::~ostream(v0, v1 + 8) = v16;
  int v10 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 71) - 24LL) + 568);
  std::ios_base::init(v10, (char *)this + 576);
  v10[1].__vftable = 0LL;
  v10[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf((char *)this + 576);
  *((void *)this + 142) = v8;
  *(void *)((char *)this + *(void *)(v8 - 24) + 1136) = v16;
  unint64_t v11 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 142) - 24LL) + 1136);
  std::ios_base::init(v11, (char *)this + 1144);
  v11[1].__vftable = 0LL;
  v11[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf((char *)this + 1144);
  *((void *)this + 213) = v8;
  *(void *)((char *)this + *(void *)(v8 - 24) + 1704) = v16;
  __int16 v12 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 213) - 24LL) + 1704);
  std::ios_base::init(v12, (char *)this + 1712);
  v12[1].__vftable = 0LL;
  v12[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf((char *)this + 1712);
  *((void *)this + 284) = v8;
  *(void *)((char *)this + *(void *)(v8 - 24) + 2272) = v16;
  unint64_t v13 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 284) - 24LL) + 2272);
  std::ios_base::init(v13, (char *)this + 2280);
  v13[1].__vftable = 0LL;
  v13[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf((char *)this + 2280);
  *((void *)this + 355) = v8;
  *(void *)((char *)this + *(void *)(v8 - 24) + 28memset(&v22.ai_socktype, 0, 40) = v16;
  __int16 v14 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 355) - 24LL) + 2840);
  std::ios_base::init(v14, (char *)this + 2848);
  v14[1].__vftable = 0LL;
  v14[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf((char *)this + 2848);
  *((void *)this + 426) = v8;
  *(void *)((char *)this + *(void *)(v8 - 24) + 340std::ostream::~ostream(v0, v1 + 8) = v16;
  uint64_t v15 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 426) - 24LL) + 3408);
  std::ios_base::init(v15, (char *)this + 3416);
  v15[1].__vftable = 0LL;
  v15[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf((char *)this + 3416);
  *((void *)this + 497) = a2;
  *((void *)this + 49std::ostream::~ostream(v0, v1 + 8) = a3;
}

void sub_1001B7D1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
}

void sub_1001B7E24()
{
}

void sub_1001B7E48()
{
}

void NetworkDiagnosticsLogger::closeFiles(NetworkDiagnosticsLogger *this)
{
  if ((*((_BYTE *)this + *(void *)(*(void *)this - 24LL) + 32) & 5) == 0 && !std::filebuf::close((char *)this + 8)) {
    std::ios_base::clear( (std::ios_base *)((char *)this + *(void *)(*(void *)this - 24LL)),  *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24LL) + 32) | 4);
  }
  if ((*((_BYTE *)this + *(void *)(*((void *)this + 71) - 24LL) + 600) & 5) == 0
    && !std::filebuf::close((char *)this + 576))
  {
    uint64_t v2 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 71) - 24LL) + 568);
    std::ios_base::clear(v2, v2->__rdstate_ | 4);
  }

  if ((*((_BYTE *)this + *(void *)(*((void *)this + 213) - 24LL) + 1736) & 5) == 0
    && !std::filebuf::close((char *)this + 1712))
  {
    uint64_t v3 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 213) - 24LL) + 1704);
    std::ios_base::clear(v3, v3->__rdstate_ | 4);
  }

  if ((*((_BYTE *)this + *(void *)(*((void *)this + 355) - 24LL) + 2872) & 5) == 0
    && !std::filebuf::close((char *)this + 2848))
  {
    uint64_t v4 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 355) - 24LL) + 2840);
    std::ios_base::clear(v4, v4->__rdstate_ | 4);
  }

  if ((*((_BYTE *)this + *(void *)(*((void *)this + 426) - 24LL) + 3440) & 5) == 0
    && !std::filebuf::close((char *)this + 3416))
  {
    uint64_t v5 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 426) - 24LL) + 3408);
    std::ios_base::clear(v5, v5->__rdstate_ | 4);
  }

  if ((*((_BYTE *)this + *(void *)(*((void *)this + 142) - 24LL) + 1168) & 5) == 0
    && !std::filebuf::close((char *)this + 1144))
  {
    uint64_t v6 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 142) - 24LL) + 1136);
    std::ios_base::clear(v6, v6->__rdstate_ | 4);
  }

  if ((*((_BYTE *)this + *(void *)(*((void *)this + 284) - 24LL) + 2304) & 5) == 0
    && !std::filebuf::close((char *)this + 2280))
  {
    uint64_t v7 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 284) - 24LL) + 2272);
    std::ios_base::clear(v7, v7->__rdstate_ | 4);
  }

void NetworkDiagnosticsLogger::cleanup( NetworkDiagnosticsLogger *this, int a2, int a3, void *a4, void *a5, void *a6)
{
  if (a2 && *(_BYTE *)(*((void *)this + 498) + 49LL))
  {
    NetworkDiagnosticsLogger::output_services_info((uint64_t)this, a4, a5, a6);
    NetworkDiagnosticsLogger::output_dns_info_to_debug((uint64_t)this, a4, a5, a6);
  }

  if (a3)
  {
    NetworkDiagnosticsLogger::insertNetworkInformationToDot(this, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6);
    unint64_t v11 = sub_1001B02E4(this, (uint64_t)"}", 1LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24LL)));
    __int16 v12 = std::locale::use_facet(&v14, &std::ctype<char>::id);
    uint64_t v13 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10LL);
    std::locale::~locale(&v14);
    std::ostream::put(v11, v13);
    std::ostream::flush(v11);
  }

  NetworkDiagnosticsLogger::closeFiles(this);
}

void sub_1001B816C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t NetworkDiagnosticsLogger::output_services_info(uint64_t result, void *a2, void *a3, void *a4)
{
  uint64_t v4 = *(void *)(result + 3976);
  uint64_t v5 = *(void *)(v4 + 8);
  if (v5 != *(void *)(v4 + 16))
  {
    uint64_t v7 = 0LL;
    unsigned __int16 v8 = 0;
    unint64_t v9 = (void *)(result + 1704);
    uint64_t v10 = result + 1728;
    do
    {
      v52.__locale_ = 0LL;
      uint64_t v53 = 0LL;
      uint64_t v54 = 0LL;
      convertUint16ToHexString(*(unsigned __int16 *)(v5 + 136 * v7 + 132), (uint64_t)&v52);
      *(void *)(v10 + *(void *)(*v9 - 24LL)) = 5LL;
      std::to_string(&v51, v8);
      padString(&v51, 5uLL, 32);
      unint64_t v11 = sub_1001B02E4(v9, (uint64_t)"Index=", 6LL);
      if ((v51.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v12 = &v51;
      }
      else {
        __int16 v12 = (std::string *)v51.__r_.__value_.__r.__words[0];
      }
      if ((v51.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t size = v51.__r_.__value_.__s.__size_;
      }
      else {
        uint64_t size = v51.__r_.__value_.__l.__size_;
      }
      sub_1001B02E4(v11, (uint64_t)v12, size);
      unsigned int NodeType = getNodeType(*(_WORD *)(*(void *)(v4 + 8) + 136 * v7 + 132), a2, a3, a4);
      *(void *)(v10 + *(void *)(*v9 - 24LL)) = 10LL;
      uint64_t v15 = sub_1001B02E4(v9, (uint64_t)"Type=", 5LL);
      convertNodeTypeForDisplay(NodeType, __p);
      if ((v50 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v50 & 0x80u) == 0) {
        uint64_t v17 = v50;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      sub_1001B02E4(v15, (uint64_t)v16, v17);
      *(void *)(v10 + *(void *)(*v9 - 24LL)) = 10LL;
      float v18 = sub_1001B02E4(v9, (uint64_t)"Rloc16=", 7LL);
      if (v54 >= 0) {
        locale = &v52;
      }
      else {
        locale = v52.__locale_;
      }
      if (v54 >= 0) {
        uint64_t v20 = HIBYTE(v54);
      }
      else {
        uint64_t v20 = v53;
      }
      sub_1001B02E4(v18, (uint64_t)locale, v20);
      *(void *)(v10 + *(void *)(*v9 - 24LL)) = 10LL;
      padString((std::string *)(*(void *)(v4 + 8) + 136 * v7 + 8), 0x32uLL, 32);
      unint64_t v21 = sub_1001B02E4(v9, (uint64_t)"Name=", 5LL);
      uint64_t v22 = *(void *)(v4 + 8) + 136 * v7;
      uint64_t v25 = *(void *)(v22 + 8);
      uint64_t v23 = v22 + 8;
      uint64_t v24 = v25;
      int v26 = *(char *)(v23 + 23);
      if (v26 >= 0) {
        uint64_t v27 = v23;
      }
      else {
        uint64_t v27 = v24;
      }
      if (v26 >= 0) {
        uint64_t v28 = *(unsigned __int8 *)(v23 + 23);
      }
      else {
        uint64_t v28 = *(void *)(v23 + 8);
      }
      sub_1001B02E4(v21, v27, v28);
      *(void *)(v10 + *(void *)(*v9 - 24LL)) = 50LL;
      padString((std::string *)(*(void *)(v4 + 8) + 136 * v7 + 80), 0x32uLL, 32);
      uint64_t v29 = sub_1001B02E4(v9, (uint64_t)"IpAddr=", 7LL);
      uint64_t v30 = *(void *)(v4 + 8) + 136 * v7;
      uint64_t v33 = *(void *)(v30 + 80);
      uint64_t v31 = v30 + 80;
      uint64_t v32 = v33;
      int v34 = *(char *)(v31 + 23);
      if (v34 >= 0) {
        uint64_t v35 = v31;
      }
      else {
        uint64_t v35 = v32;
      }
      if (v34 >= 0) {
        uint64_t v36 = *(unsigned __int8 *)(v31 + 23);
      }
      else {
        uint64_t v36 = *(void *)(v31 + 8);
      }
      uint64_t v37 = sub_1001B02E4(v29, v35, v36);
      std::ios_base::getloc((const std::ios_base *)((char *)v37 + *(void *)(*v37 - 24LL)));
      unint64_t v38 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
      uint64_t v39 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10LL);
      std::locale::~locale((std::locale *)__p);
      std::ostream::put(v37, v39);
      std::ostream::flush(v37);
      if (SHIBYTE(v54) < 0) {
        operator delete(v52.__locale_);
      }
      uint64_t v7 = ++v8;
      uint64_t v5 = *(void *)(v4 + 8);
    }

    while (0xF0F0F0F0F0F0F0F1LL * ((*(void *)(v4 + 16) - v5) >> 3) > v8);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24LL)));
    unint64_t v40 = std::locale::use_facet(&v52, &std::ctype<char>::id);
    uint64_t v41 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v40->__vftable[2].~facet_0)(v40, 10LL);
    std::locale::~locale(&v52);
    std::ostream::put(v9, v41);
    std::ostream::flush(v9);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24LL)));
    unsigned int v42 = std::locale::use_facet(&v52, &std::ctype<char>::id);
    uint64_t v43 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10LL);
    std::locale::~locale(&v52);
    std::ostream::put(v9, v43);
    std::ostream::flush(v9);
    id v44 = sub_1001B02E4( v9,  (uint64_t)"NOTE:  Rloc16=0xffff implies the mapping from RLOC->Ipv6Addr->Hostname cannot be determined",  91LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v44 + *(void *)(*v44 - 24LL)));
    char v45 = std::locale::use_facet(&v52, &std::ctype<char>::id);
    uint64_t v46 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10LL);
    std::locale::~locale(&v52);
    std::ostream::put(v44, v46);
    return std::ostream::flush(v44);
  }

  return result;
}

void sub_1001B85A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, std::locale a24, uint64_t a25, int a26, __int16 a27, char a28, char a29)
{
}

uint64_t NetworkDiagnosticsLogger::output_dns_info_to_debug( uint64_t result, void *a2, void *a3, void *a4)
{
  uint64_t v4 = *(void *)(result + 3976);
  if (*(void *)(v4 + 56))
  {
    uint64_t v5 = (void *)result;
    uint64_t v6 = (void *)(result + 568);
    uint64_t v7 = sub_1001B02E4((void *)(result + 568), (uint64_t)"---------", 9LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24LL)));
    unsigned __int16 v8 = std::locale::use_facet(&v222, &std::ctype<char>::id);
    uint64_t v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10LL);
    std::locale::~locale(&v222);
    std::ostream::put(v7, v9);
    std::ostream::flush(v7);
    uint64_t v10 = sub_1001B02E4(v6, (uint64_t)"DNS INFO:", 9LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24LL)));
    unint64_t v11 = std::locale::use_facet(&v222, &std::ctype<char>::id);
    uint64_t v12 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10LL);
    std::locale::~locale(&v222);
    std::ostream::put(v10, v12);
    std::ostream::flush(v10);
    uint64_t v13 = sub_1001B02E4(v6, (uint64_t)"---------", 9LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24LL)));
    std::locale v14 = std::locale::use_facet(&v222, &std::ctype<char>::id);
    uint64_t v15 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10LL);
    std::locale::~locale(&v222);
    std::ostream::put(v13, v15);
    std::ostream::flush(v13);
    uint64_t v16 = v5 + 74;
    uint64_t v198 = v4;
    uint64_t v199 = v5;
    uint64_t v17 = *(void **)(v4 + 48);
    if (v17)
    {
      uint64_t v211 = 0LL;
      unsigned __int16 v18 = 0;
      unsigned __int16 v210 = 0;
      BOOL v19 = v5 + 284;
      uint64_t v20 = v5 + 426;
      unsigned int v202 = v5 + 429;
      id v204 = v5 + 287;
      unint64_t v21 = v5 + 355;
      char v200 = v5 + 358;
      do
      {
        sub_1001B6434((uint64_t)&v222, (uint64_t)(v17 + 5));
        id v219 = 0LL;
        uint64_t v220 = 0LL;
        uint64_t v221 = 0LL;
        convertUint16ToHexString(v231, (uint64_t)&v219);
        std::to_string(&v218, v18);
        padString(&v218, 5uLL, 32);
        std::to_string(&v217, WORD2(v211));
        padString(&v218, 5uLL, 32);
        std::to_string(&v216, (unsigned __int16)v211);
        padString(&v218, 5uLL, 32);
        std::to_string(&v215, v210);
        padString(&v218, 5uLL, 32);
        padString(&v223, 0x32uLL, 32);
        padString(&v228, 0x32uLL, 32);
        unsigned int NodeType = getNodeType(v231, a2, a3, a4);
        uint64_t v23 = sub_1001B02E4(v6, (uint64_t)"Index=", 6LL);
        if ((v218.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v24 = &v218;
        }
        else {
          uint64_t v24 = (std::string *)v218.__r_.__value_.__r.__words[0];
        }
        if ((v218.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t size = v218.__r_.__value_.__s.__size_;
        }
        else {
          uint64_t size = v218.__r_.__value_.__l.__size_;
        }
        sub_1001B02E4(v23, (uint64_t)v24, size);
        *(void *)((char *)v16 + *(void *)(*v6 - 24LL)) = 15LL;
        int v26 = sub_1001B02E4(v6, (uint64_t)"Type=", 5LL);
        convertNodeTypeForDisplay(NodeType, &__p);
        if ((v214 & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        if ((v214 & 0x80u) == 0) {
          uint64_t v28 = v214;
        }
        else {
          uint64_t v28 = v213;
        }
        sub_1001B02E4(v26, (uint64_t)p_p, v28);
        *(void *)((char *)v16 + *(void *)(*v6 - 24LL)) = 15LL;
        uint64_t v29 = sub_1001B02E4(v6, (uint64_t)"Rloc16=", 7LL);
        if (v221 >= 0) {
          uint64_t v30 = &v219;
        }
        else {
          uint64_t v30 = v219;
        }
        if (v221 >= 0) {
          uint64_t v31 = HIBYTE(v221);
        }
        else {
          uint64_t v31 = v220;
        }
        sub_1001B02E4(v29, (uint64_t)v30, v31);
        *(void *)((char *)v16 + *(void *)(*v6 - 24LL)) = 10LL;
        uint64_t v32 = sub_1001B02E4(v6, (uint64_t)"Name=", 5LL);
        if ((v223.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v33 = &v223;
        }
        else {
          uint64_t v33 = (std::string *)v223.__r_.__value_.__r.__words[0];
        }
        if ((v223.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v34 = v223.__r_.__value_.__s.__size_;
        }
        else {
          uint64_t v34 = v223.__r_.__value_.__l.__size_;
        }
        sub_1001B02E4(v32, (uint64_t)v33, v34);
        *(void *)((char *)v16 + *(void *)(*v6 - 24LL)) = 10LL;
        uint64_t v35 = sub_1001B02E4(v6, (uint64_t)"IpAddr=", 7LL);
        if ((v228.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v36 = &v228;
        }
        else {
          uint64_t v36 = (std::string *)v228.__r_.__value_.__r.__words[0];
        }
        if ((v228.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v37 = v228.__r_.__value_.__s.__size_;
        }
        else {
          uint64_t v37 = v228.__r_.__value_.__l.__size_;
        }
        sub_1001B02E4(v35, (uint64_t)v36, v37);
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24LL)));
        unint64_t v38 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
        uint64_t v39 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10LL);
        std::locale::~locale((std::locale *)&__p);
        std::ostream::put(v6, v39);
        std::ostream::flush(v6);
        if (NodeType)
        {
          if (NodeType == 2)
          {
            uint64_t v74 = sub_1001B02E4(v19, (uint64_t)"Index=", 6LL);
            if ((v215.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              id v75 = &v215;
            }
            else {
              id v75 = (std::string *)v215.__r_.__value_.__r.__words[0];
            }
            if ((v215.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              uint64_t v76 = v215.__r_.__value_.__s.__size_;
            }
            else {
              uint64_t v76 = v215.__r_.__value_.__l.__size_;
            }
            sub_1001B02E4(v74, (uint64_t)v75, v76);
            *(void *)((char *)v204 + *(void *)(*v19 - 24LL)) = 15LL;
            char v77 = sub_1001B02E4(v19, (uint64_t)"Type=", 5LL);
            convertNodeTypeForDisplay(2u, &__p);
            if ((v214 & 0x80u) == 0) {
              uint64_t v78 = &__p;
            }
            else {
              uint64_t v78 = __p;
            }
            if ((v214 & 0x80u) == 0) {
              uint64_t v79 = v214;
            }
            else {
              uint64_t v79 = v213;
            }
            sub_1001B02E4(v77, (uint64_t)v78, v79);
            *(void *)((char *)v204 + *(void *)(*v19 - 24LL)) = 15LL;
            uint64_t v80 = sub_1001B02E4(v19, (uint64_t)"Rloc16=", 7LL);
            if (v221 >= 0) {
              int v81 = &v219;
            }
            else {
              int v81 = v219;
            }
            if (v221 >= 0) {
              uint64_t v82 = HIBYTE(v221);
            }
            else {
              uint64_t v82 = v220;
            }
            sub_1001B02E4(v80, (uint64_t)v81, v82);
            *(void *)((char *)v204 + *(void *)(*v19 - 24LL)) = 10LL;
            uint64_t v83 = sub_1001B02E4(v19, (uint64_t)"Name=", 5LL);
            if ((v223.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              id v84 = &v223;
            }
            else {
              id v84 = (std::string *)v223.__r_.__value_.__r.__words[0];
            }
            if ((v223.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              uint64_t v85 = v223.__r_.__value_.__s.__size_;
            }
            else {
              uint64_t v85 = v223.__r_.__value_.__l.__size_;
            }
            sub_1001B02E4(v83, (uint64_t)v84, v85);
            *(void *)((char *)v204 + *(void *)(*v19 - 24LL)) = 10LL;
            unsigned int v86 = sub_1001B02E4(v19, (uint64_t)"IpAddr=", 7LL);
            if ((v228.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              int v87 = &v228;
            }
            else {
              int v87 = (std::string *)v228.__r_.__value_.__r.__words[0];
            }
            if ((v228.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              uint64_t v88 = v228.__r_.__value_.__s.__size_;
            }
            else {
              uint64_t v88 = v228.__r_.__value_.__l.__size_;
            }
            sub_1001B02E4(v86, (uint64_t)v87, v88);
            std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24LL)));
            uint64_t v89 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
            uint64_t v90 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v89->__vftable[2].~facet_0)(v89, 10LL);
            std::locale::~locale((std::locale *)&__p);
            std::ostream::put(v19, v90);
            std::ostream::flush(v19);
            ++v210;
          }

          else if (NodeType == 1)
          {
            unint64_t v40 = sub_1001B02E4(v21, (uint64_t)"Index=", 6LL);
            if ((v217.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              uint64_t v41 = &v217;
            }
            else {
              uint64_t v41 = (std::string *)v217.__r_.__value_.__r.__words[0];
            }
            if ((v217.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              uint64_t v42 = v217.__r_.__value_.__s.__size_;
            }
            else {
              uint64_t v42 = v217.__r_.__value_.__l.__size_;
            }
            sub_1001B02E4(v40, (uint64_t)v41, v42);
            *(void *)((char *)v200 + *(void *)(*v21 - 24LL)) = 15LL;
            uint64_t v43 = sub_1001B02E4(v21, (uint64_t)"Type=", 5LL);
            convertNodeTypeForDisplay(1u, &__p);
            if ((v214 & 0x80u) == 0) {
              id v44 = &__p;
            }
            else {
              id v44 = __p;
            }
            if ((v214 & 0x80u) == 0) {
              uint64_t v45 = v214;
            }
            else {
              uint64_t v45 = v213;
            }
            sub_1001B02E4(v43, (uint64_t)v44, v45);
            *(void *)((char *)v200 + *(void *)(*v21 - 24LL)) = 15LL;
            uint64_t v46 = sub_1001B02E4(v21, (uint64_t)"Rloc16=", 7LL);
            if (v221 >= 0) {
              char v47 = &v219;
            }
            else {
              char v47 = v219;
            }
            if (v221 >= 0) {
              uint64_t v48 = HIBYTE(v221);
            }
            else {
              uint64_t v48 = v220;
            }
            sub_1001B02E4(v46, (uint64_t)v47, v48);
            *(void *)((char *)v200 + *(void *)(*v21 - 24LL)) = 10LL;
            char v49 = sub_1001B02E4(v21, (uint64_t)"Name=", 5LL);
            if ((v223.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              unsigned __int8 v50 = &v223;
            }
            else {
              unsigned __int8 v50 = (std::string *)v223.__r_.__value_.__r.__words[0];
            }
            if ((v223.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              uint64_t v51 = v223.__r_.__value_.__s.__size_;
            }
            else {
              uint64_t v51 = v223.__r_.__value_.__l.__size_;
            }
            sub_1001B02E4(v49, (uint64_t)v50, v51);
            *(void *)((char *)v200 + *(void *)(*v21 - 24LL)) = 10LL;
            std::locale v52 = sub_1001B02E4(v21, (uint64_t)"IpAddr=", 7LL);
            if ((v228.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              uint64_t v53 = &v228;
            }
            else {
              uint64_t v53 = (std::string *)v228.__r_.__value_.__r.__words[0];
            }
            if ((v228.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              uint64_t v54 = v228.__r_.__value_.__s.__size_;
            }
            else {
              uint64_t v54 = v228.__r_.__value_.__l.__size_;
            }
            sub_1001B02E4(v52, (uint64_t)v53, v54);
            std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24LL)));
            uint64_t v55 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
            uint64_t v56 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10LL);
            std::locale::~locale((std::locale *)&__p);
            std::ostream::put(v21, v56);
            std::ostream::flush(v21);
            ++WORD2(v211);
          }

          else
          {
            uint64_t v91 = (const char *)&v219;
            if (v221 < 0) {
              uint64_t v91 = (const char *)v219;
            }
            int v92 = &v223;
            if ((v223.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              int v92 = (std::string *)v223.__r_.__value_.__r.__words[0];
            }
            if ((v228.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              int v93 = &v228;
            }
            else {
              int v93 = (std::string *)v228.__r_.__value_.__r.__words[0];
            }
            fprintf( __stderrp,  "Invalid Nodetype for Resolved service rloc16=%s name=%s ipAddr=%s\n",  v91,  (const char *)v92,  (const char *)v93);
          }
        }

        else
        {
          uint64_t v57 = sub_1001B02E4(v20, (uint64_t)"Index=", 6LL);
          if ((v216.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v58 = &v216;
          }
          else {
            uint64_t v58 = (std::string *)v216.__r_.__value_.__r.__words[0];
          }
          if ((v216.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v59 = v216.__r_.__value_.__s.__size_;
          }
          else {
            uint64_t v59 = v216.__r_.__value_.__l.__size_;
          }
          sub_1001B02E4(v57, (uint64_t)v58, v59);
          *(void *)((char *)v202 + *(void *)(*v20 - 24LL)) = 15LL;
          uint64_t v60 = sub_1001B02E4(v20, (uint64_t)"Type=", 5LL);
          convertNodeTypeForDisplay(0, &__p);
          if ((v214 & 0x80u) == 0) {
            std::string::size_type v61 = &__p;
          }
          else {
            std::string::size_type v61 = __p;
          }
          if ((v214 & 0x80u) == 0) {
            uint64_t v62 = v214;
          }
          else {
            uint64_t v62 = v213;
          }
          sub_1001B02E4(v60, (uint64_t)v61, v62);
          *(void *)((char *)v202 + *(void *)(*v20 - 24LL)) = 15LL;
          uint64_t v63 = sub_1001B02E4(v20, (uint64_t)"Rloc16=", 7LL);
          if (v221 >= 0) {
            __int16 v64 = &v219;
          }
          else {
            __int16 v64 = v219;
          }
          if (v221 >= 0) {
            uint64_t v65 = HIBYTE(v221);
          }
          else {
            uint64_t v65 = v220;
          }
          sub_1001B02E4(v63, (uint64_t)v64, v65);
          *(void *)((char *)v202 + *(void *)(*v20 - 24LL)) = 10LL;
          int v66 = sub_1001B02E4(v20, (uint64_t)"Name=", 5LL);
          if ((v223.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v67 = &v223;
          }
          else {
            uint64_t v67 = (std::string *)v223.__r_.__value_.__r.__words[0];
          }
          if ((v223.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v68 = v223.__r_.__value_.__s.__size_;
          }
          else {
            uint64_t v68 = v223.__r_.__value_.__l.__size_;
          }
          sub_1001B02E4(v66, (uint64_t)v67, v68);
          *(void *)((char *)v202 + *(void *)(*v20 - 24LL)) = 10LL;
          uint64_t v69 = sub_1001B02E4(v20, (uint64_t)"IpAddr=", 7LL);
          if ((v228.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            int v70 = &v228;
          }
          else {
            int v70 = (std::string *)v228.__r_.__value_.__r.__words[0];
          }
          if ((v228.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v71 = v228.__r_.__value_.__s.__size_;
          }
          else {
            uint64_t v71 = v228.__r_.__value_.__l.__size_;
          }
          sub_1001B02E4(v69, (uint64_t)v70, v71);
          std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24LL)));
          std::string::size_type v72 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
          uint64_t v73 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v72->__vftable[2].~facet_0)(v72, 10LL);
          std::locale::~locale((std::locale *)&__p);
          std::ostream::put(v20, v73);
          std::ostream::flush(v20);
          LOWORD(v211) = v211 + 1;
        }

        if (SHIBYTE(v221) < 0) {
          operator delete(v219);
        }
        if (v230 < 0) {
          operator delete(v229);
        }
        if (v227 < 0) {
          operator delete(v226);
        }
        if (v225 < 0) {
          operator delete(v224);
        }
        ++v18;
        uint64_t v17 = (void *)*v17;
      }

      while (v17);
    }

    else
    {
      uint64_t v211 = 0LL;
      unsigned __int16 v210 = 0;
      unsigned __int16 v18 = 0;
    }

    std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24LL)));
    uint64_t v94 = std::locale::use_facet(&v222, &std::ctype<char>::id);
    uint64_t v95 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v94->__vftable[2].~facet_0)(v94, 10LL);
    std::locale::~locale(&v222);
    std::ostream::put(v6, v95);
    std::ostream::flush(v6);
    __int128 v96 = v199 + 355;
    std::ios_base::getloc((const std::ios_base *)((char *)v199 + *(void *)(v199[355] - 24LL) + 2840));
    id v97 = std::locale::use_facet(&v222, &std::ctype<char>::id);
    uint64_t v98 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v97->__vftable[2].~facet_0)(v97, 10LL);
    std::locale::~locale(&v222);
    std::ostream::put(v199 + 355, v98);
    std::ostream::flush(v199 + 355);
    std::locale v99 = v199 + 426;
    std::ios_base::getloc((const std::ios_base *)((char *)v99 + *(void *)(*v99 - 24LL)));
    std::string::size_type v100 = std::locale::use_facet(&v222, &std::ctype<char>::id);
    uint64_t v101 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v100->__vftable[2].~facet_0)(v100, 10LL);
    std::locale::~locale(&v222);
    std::ostream::put(v199 + 426, v101);
    std::ostream::flush(v199 + 426);
    char v209 = v199 + 284;
    std::ios_base::getloc((const std::ios_base *)((char *)v209 + *(void *)(*v209 - 24LL)));
    uint64_t v102 = std::locale::use_facet(&v222, &std::ctype<char>::id);
    uint64_t v103 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v102->__vftable[2].~facet_0)(v102, 10LL);
    std::locale::~locale(&v222);
    std::ostream::put(v199 + 284, v103);
    std::ostream::flush(v199 + 284);
    unsigned __int8 v104 = *(void **)(v198 + 88);
    if (v104)
    {
      char v203 = v199 + 429;
      char v205 = v199 + 287;
      char v201 = v199 + 358;
      do
      {
        sub_1001B6434((uint64_t)&v222, (uint64_t)(v104 + 5));
        id v219 = 0LL;
        uint64_t v220 = 0LL;
        uint64_t v221 = 0LL;
        convertUint16ToHexString(v231, (uint64_t)&v219);
        std::to_string(&v218, v18);
        padString(&v218, 5uLL, 32);
        std::to_string(&v217, WORD2(v211));
        padString(&v218, 5uLL, 32);
        std::to_string(&v216, (unsigned __int16)v211);
        padString(&v218, 5uLL, 32);
        std::to_string(&v215, v210);
        padString(&v218, 5uLL, 32);
        padString(&v223, 0x32uLL, 32);
        padString(&v228, 0x32uLL, 32);
        unsigned int v105 = getNodeType(v231, a2, a3, a4);
        unsigned int v106 = sub_1001B02E4(v6, (uint64_t)"Index=", 6LL);
        if ((v218.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          __int128 v107 = &v218;
        }
        else {
          __int128 v107 = (std::string *)v218.__r_.__value_.__r.__words[0];
        }
        if ((v218.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v108 = v218.__r_.__value_.__s.__size_;
        }
        else {
          uint64_t v108 = v218.__r_.__value_.__l.__size_;
        }
        sub_1001B02E4(v106, (uint64_t)v107, v108);
        *(void *)((char *)v16 + *(void *)(*v6 - 24LL)) = 15LL;
        std::string::size_type v109 = sub_1001B02E4(v6, (uint64_t)"Type=", 5LL);
        convertNodeTypeForDisplay(v105, &__p);
        if ((v214 & 0x80u) == 0) {
          id v110 = &__p;
        }
        else {
          id v110 = __p;
        }
        if ((v214 & 0x80u) == 0) {
          uint64_t v111 = v214;
        }
        else {
          uint64_t v111 = v213;
        }
        sub_1001B02E4(v109, (uint64_t)v110, v111);
        *(void *)((char *)v16 + *(void *)(*v6 - 24LL)) = 15LL;
        unsigned __int8 v112 = sub_1001B02E4(v6, (uint64_t)"Rloc16=", 7LL);
        if (v221 >= 0) {
          uint64_t v113 = &v219;
        }
        else {
          uint64_t v113 = v219;
        }
        if (v221 >= 0) {
          uint64_t v114 = HIBYTE(v221);
        }
        else {
          uint64_t v114 = v220;
        }
        sub_1001B02E4(v112, (uint64_t)v113, v114);
        *(void *)((char *)v16 + *(void *)(*v6 - 24LL)) = 10LL;
        __int16 v115 = sub_1001B02E4(v6, (uint64_t)"Name=", 5LL);
        if ((v223.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type v116 = &v223;
        }
        else {
          std::string::size_type v116 = (std::string *)v223.__r_.__value_.__r.__words[0];
        }
        if ((v223.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v117 = v223.__r_.__value_.__s.__size_;
        }
        else {
          uint64_t v117 = v223.__r_.__value_.__l.__size_;
        }
        sub_1001B02E4(v115, (uint64_t)v116, v117);
        *(void *)((char *)v16 + *(void *)(*v6 - 24LL)) = 10LL;
        __int128 v118 = sub_1001B02E4(v6, (uint64_t)"IpAddr=", 7LL);
        if ((v228.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          id v119 = &v228;
        }
        else {
          id v119 = (std::string *)v228.__r_.__value_.__r.__words[0];
        }
        if ((v228.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v120 = v228.__r_.__value_.__s.__size_;
        }
        else {
          uint64_t v120 = v228.__r_.__value_.__l.__size_;
        }
        sub_1001B02E4(v118, (uint64_t)v119, v120);
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24LL)));
        char v121 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
        uint64_t v122 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v121->__vftable[2].~facet_0)(v121, 10LL);
        std::locale::~locale((std::locale *)&__p);
        std::ostream::put(v6, v122);
        std::ostream::flush(v6);
        if (v105)
        {
          if (v105 == 2)
          {
            char v157 = sub_1001B02E4(v209, (uint64_t)"Index=", 6LL);
            if ((v215.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              char v158 = &v215;
            }
            else {
              char v158 = (std::string *)v215.__r_.__value_.__r.__words[0];
            }
            if ((v215.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              uint64_t v159 = v215.__r_.__value_.__s.__size_;
            }
            else {
              uint64_t v159 = v215.__r_.__value_.__l.__size_;
            }
            sub_1001B02E4(v157, (uint64_t)v158, v159);
            *(void *)((char *)v205 + *(void *)(*v209 - 24LL)) = 15LL;
            id v160 = sub_1001B02E4(v209, (uint64_t)"Type=", 5LL);
            convertNodeTypeForDisplay(2u, &__p);
            if ((v214 & 0x80u) == 0) {
              uint64_t v161 = &__p;
            }
            else {
              uint64_t v161 = __p;
            }
            if ((v214 & 0x80u) == 0) {
              uint64_t v162 = v214;
            }
            else {
              uint64_t v162 = v213;
            }
            sub_1001B02E4(v160, (uint64_t)v161, v162);
            *(void *)((char *)v205 + *(void *)(*v209 - 24LL)) = 15LL;
            char v163 = sub_1001B02E4(v209, (uint64_t)"Rloc16=", 7LL);
            if (v221 >= 0) {
              int v164 = &v219;
            }
            else {
              int v164 = v219;
            }
            if (v221 >= 0) {
              uint64_t v165 = HIBYTE(v221);
            }
            else {
              uint64_t v165 = v220;
            }
            sub_1001B02E4(v163, (uint64_t)v164, v165);
            *(void *)((char *)v205 + *(void *)(*v209 - 24LL)) = 10LL;
            unsigned int v166 = sub_1001B02E4(v209, (uint64_t)"Name=", 5LL);
            if ((v223.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              BOOL v167 = &v223;
            }
            else {
              BOOL v167 = (std::string *)v223.__r_.__value_.__r.__words[0];
            }
            if ((v223.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              uint64_t v168 = v223.__r_.__value_.__s.__size_;
            }
            else {
              uint64_t v168 = v223.__r_.__value_.__l.__size_;
            }
            sub_1001B02E4(v166, (uint64_t)v167, v168);
            *(void *)((char *)v205 + *(void *)(*v209 - 24LL)) = 10LL;
            char v169 = sub_1001B02E4(v209, (uint64_t)"IpAddr=", 7LL);
            if ((v228.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              id v170 = &v228;
            }
            else {
              id v170 = (std::string *)v228.__r_.__value_.__r.__words[0];
            }
            if ((v228.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              uint64_t v171 = v228.__r_.__value_.__s.__size_;
            }
            else {
              uint64_t v171 = v228.__r_.__value_.__l.__size_;
            }
            sub_1001B02E4(v169, (uint64_t)v170, v171);
            std::ios_base::getloc((const std::ios_base *)((char *)v209 + *(void *)(*v209 - 24LL)));
            unsigned int v172 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
            uint64_t v173 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v172->__vftable[2].~facet_0)( v172,  10LL);
            std::locale::~locale((std::locale *)&__p);
            std::ostream::put(v209, v173);
            std::ostream::flush(v209);
            ++v210;
          }

          else if (v105 == 1)
          {
            unsigned __int8 v123 = sub_1001B02E4(v96, (uint64_t)"Index=", 6LL);
            if ((v217.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              uint64_t v124 = &v217;
            }
            else {
              uint64_t v124 = (std::string *)v217.__r_.__value_.__r.__words[0];
            }
            if ((v217.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              uint64_t v125 = v217.__r_.__value_.__s.__size_;
            }
            else {
              uint64_t v125 = v217.__r_.__value_.__l.__size_;
            }
            sub_1001B02E4(v123, (uint64_t)v124, v125);
            *(void *)((char *)v201 + *(void *)(*v96 - 24LL)) = 15LL;
            unsigned int v126 = sub_1001B02E4(v96, (uint64_t)"Type=", 5LL);
            convertNodeTypeForDisplay(1u, &__p);
            if ((v214 & 0x80u) == 0) {
              std::string::size_type v127 = &__p;
            }
            else {
              std::string::size_type v127 = __p;
            }
            if ((v214 & 0x80u) == 0) {
              uint64_t v128 = v214;
            }
            else {
              uint64_t v128 = v213;
            }
            sub_1001B02E4(v126, (uint64_t)v127, v128);
            *(void *)((char *)v201 + *(void *)(*v96 - 24LL)) = 15LL;
            __int128 v129 = sub_1001B02E4(v96, (uint64_t)"Rloc16=", 7LL);
            if (v221 >= 0) {
              int v130 = &v219;
            }
            else {
              int v130 = v219;
            }
            if (v221 >= 0) {
              uint64_t v131 = HIBYTE(v221);
            }
            else {
              uint64_t v131 = v220;
            }
            sub_1001B02E4(v129, (uint64_t)v130, v131);
            *(void *)((char *)v201 + *(void *)(*v96 - 24LL)) = 10LL;
            unsigned int v132 = sub_1001B02E4(v96, (uint64_t)"Name=", 5LL);
            if ((v223.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              std::string::size_type v133 = &v223;
            }
            else {
              std::string::size_type v133 = (std::string *)v223.__r_.__value_.__r.__words[0];
            }
            if ((v223.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              uint64_t v134 = v223.__r_.__value_.__s.__size_;
            }
            else {
              uint64_t v134 = v223.__r_.__value_.__l.__size_;
            }
            sub_1001B02E4(v132, (uint64_t)v133, v134);
            *(void *)((char *)v201 + *(void *)(*v96 - 24LL)) = 10LL;
            uint64_t v135 = sub_1001B02E4(v96, (uint64_t)"IpAddr=", 7LL);
            if ((v228.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              int v136 = &v228;
            }
            else {
              int v136 = (std::string *)v228.__r_.__value_.__r.__words[0];
            }
            if ((v228.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              uint64_t v137 = v228.__r_.__value_.__s.__size_;
            }
            else {
              uint64_t v137 = v228.__r_.__value_.__l.__size_;
            }
            sub_1001B02E4(v135, (uint64_t)v136, v137);
            std::ios_base::getloc((const std::ios_base *)((char *)v96 + *(void *)(*v96 - 24LL)));
            std::string::size_type v138 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
            uint64_t v139 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v138->__vftable[2].~facet_0)( v138,  10LL);
            std::locale::~locale((std::locale *)&__p);
            std::ostream::put(v96, v139);
            std::ostream::flush(v96);
            ++WORD2(v211);
          }

          else
          {
            uint64_t v174 = (const char *)&v219;
            if (v221 < 0) {
              uint64_t v174 = (const char *)v219;
            }
            if ((v223.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              char v175 = &v223;
            }
            else {
              char v175 = (std::string *)v223.__r_.__value_.__r.__words[0];
            }
            if ((v228.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              char v176 = &v228;
            }
            else {
              char v176 = (std::string *)v228.__r_.__value_.__r.__words[0];
            }
            fprintf( __stderrp,  "Invalid Nodetype for Unresolved service rloc16=%s name=%s ipAddr=%s\n",  v174,  (const char *)v175,  (const char *)v176);
          }
        }

        else
        {
          __int128 v140 = sub_1001B02E4(v99, (uint64_t)"Index=", 6LL);
          if ((v216.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            char v141 = &v216;
          }
          else {
            char v141 = (std::string *)v216.__r_.__value_.__r.__words[0];
          }
          if ((v216.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v142 = v216.__r_.__value_.__s.__size_;
          }
          else {
            uint64_t v142 = v216.__r_.__value_.__l.__size_;
          }
          sub_1001B02E4(v140, (uint64_t)v141, v142);
          *(void *)((char *)v203 + *(void *)(*v99 - 24LL)) = 15LL;
          char v143 = sub_1001B02E4(v99, (uint64_t)"Type=", 5LL);
          convertNodeTypeForDisplay(0, &__p);
          if ((v214 & 0x80u) == 0) {
            std::string::size_type v144 = &__p;
          }
          else {
            std::string::size_type v144 = __p;
          }
          if ((v214 & 0x80u) == 0) {
            uint64_t v145 = v214;
          }
          else {
            uint64_t v145 = v213;
          }
          sub_1001B02E4(v143, (uint64_t)v144, v145);
          *(void *)((char *)v203 + *(void *)(*v99 - 24LL)) = 15LL;
          uint64_t v146 = sub_1001B02E4(v99, (uint64_t)"Rloc16=", 7LL);
          if (v221 >= 0) {
            BOOL v147 = &v219;
          }
          else {
            BOOL v147 = v219;
          }
          if (v221 >= 0) {
            uint64_t v148 = HIBYTE(v221);
          }
          else {
            uint64_t v148 = v220;
          }
          sub_1001B02E4(v146, (uint64_t)v147, v148);
          *(void *)((char *)v203 + *(void *)(*v99 - 24LL)) = 10LL;
          id v149 = sub_1001B02E4(v99, (uint64_t)"Name=", 5LL);
          if ((v223.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            id v150 = &v223;
          }
          else {
            id v150 = (std::string *)v223.__r_.__value_.__r.__words[0];
          }
          if ((v223.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v151 = v223.__r_.__value_.__s.__size_;
          }
          else {
            uint64_t v151 = v223.__r_.__value_.__l.__size_;
          }
          sub_1001B02E4(v149, (uint64_t)v150, v151);
          *(void *)((char *)v203 + *(void *)(*v99 - 24LL)) = 10LL;
          unsigned __int8 v152 = sub_1001B02E4(v99, (uint64_t)"IpAddr=", 7LL);
          if ((v228.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string v153 = &v228;
          }
          else {
            std::string v153 = (std::string *)v228.__r_.__value_.__r.__words[0];
          }
          if ((v228.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v154 = v228.__r_.__value_.__s.__size_;
          }
          else {
            uint64_t v154 = v228.__r_.__value_.__l.__size_;
          }
          sub_1001B02E4(v152, (uint64_t)v153, v154);
          std::ios_base::getloc((const std::ios_base *)((char *)v99 + *(void *)(*v99 - 24LL)));
          id v155 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
          uint64_t v156 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v155->__vftable[2].~facet_0)(v155, 10LL);
          std::locale::~locale((std::locale *)&__p);
          std::ostream::put(v99, v156);
          std::ostream::flush(v99);
          LOWORD(v211) = v211 + 1;
        }

        if (SHIBYTE(v221) < 0) {
          operator delete(v219);
        }
        if (v230 < 0) {
          operator delete(v229);
        }
        if (v227 < 0) {
          operator delete(v226);
        }
        if (v225 < 0) {
          operator delete(v224);
        }
        ++v18;
        unsigned __int8 v104 = (void *)*v104;
      }

      while (v104);
    }

    std::ios_base::getloc((const std::ios_base *)((char *)v96 + *(void *)(*v96 - 24LL)));
    char v177 = std::locale::use_facet(&v222, &std::ctype<char>::id);
    uint64_t v178 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v177->__vftable[2].~facet_0)(v177, 10LL);
    std::locale::~locale(&v222);
    std::ostream::put(v96, v178);
    std::ostream::flush(v96);
    std::ios_base::getloc((const std::ios_base *)((char *)v96 + *(void *)(*v96 - 24LL)));
    char v179 = std::locale::use_facet(&v222, &std::ctype<char>::id);
    uint64_t v180 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v179->__vftable[2].~facet_0)(v179, 10LL);
    std::locale::~locale(&v222);
    std::ostream::put(v96, v180);
    std::ostream::flush(v96);
    char v181 = sub_1001B02E4( v96,  (uint64_t)"NOTE:  Rloc16=0xffff implies the mapping from RLOC->Ipv6Addr->Hostname cannot be determined",  91LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v181 + *(void *)(*v181 - 24LL)));
    char v182 = std::locale::use_facet(&v222, &std::ctype<char>::id);
    uint64_t v183 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v182->__vftable[2].~facet_0)(v182, 10LL);
    std::locale::~locale(&v222);
    std::ostream::put(v181, v183);
    std::ostream::flush(v181);
    std::ios_base::getloc((const std::ios_base *)((char *)v99 + *(void *)(*v99 - 24LL)));
    unsigned int v184 = std::locale::use_facet(&v222, &std::ctype<char>::id);
    uint64_t v185 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v184->__vftable[2].~facet_0)(v184, 10LL);
    std::locale::~locale(&v222);
    std::ostream::put(v99, v185);
    std::ostream::flush(v99);
    std::ios_base::getloc((const std::ios_base *)((char *)v99 + *(void *)(*v99 - 24LL)));
    uint64_t v186 = std::locale::use_facet(&v222, &std::ctype<char>::id);
    uint64_t v187 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v186->__vftable[2].~facet_0)(v186, 10LL);
    std::locale::~locale(&v222);
    std::ostream::put(v99, v187);
    std::ostream::flush(v99);
    char v188 = sub_1001B02E4( v99,  (uint64_t)"NOTE:  Rloc16=0xffff implies the mapping from RLOC->Ipv6Addr->Hostname cannot be determined",  91LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v188 + *(void *)(*v188 - 24LL)));
    char v189 = std::locale::use_facet(&v222, &std::ctype<char>::id);
    uint64_t v190 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v189->__vftable[2].~facet_0)(v189, 10LL);
    std::locale::~locale(&v222);
    std::ostream::put(v188, v190);
    std::ostream::flush(v188);
    std::ios_base::getloc((const std::ios_base *)((char *)v209 + *(void *)(*v209 - 24LL)));
    char v191 = std::locale::use_facet(&v222, &std::ctype<char>::id);
    uint64_t v192 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v191->__vftable[2].~facet_0)(v191, 10LL);
    std::locale::~locale(&v222);
    std::ostream::put(v209, v192);
    std::ostream::flush(v209);
    std::ios_base::getloc((const std::ios_base *)((char *)v209 + *(void *)(*v209 - 24LL)));
    id v193 = std::locale::use_facet(&v222, &std::ctype<char>::id);
    uint64_t v194 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v193->__vftable[2].~facet_0)(v193, 10LL);
    std::locale::~locale(&v222);
    std::ostream::put(v209, v194);
    std::ostream::flush(v209);
    char v195 = sub_1001B02E4( v209,  (uint64_t)"NOTE:  Rloc16=0xffff implies the mapping from RLOC->Ipv6Addr->Hostname cannot be determined",  91LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v195 + *(void *)(*v195 - 24LL)));
    unsigned int v196 = std::locale::use_facet(&v222, &std::ctype<char>::id);
    uint64_t v197 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v196->__vftable[2].~facet_0)(v196, 10LL);
    std::locale::~locale(&v222);
    std::ostream::put(v195, v197);
    return std::ostream::flush(v195);
  }

  return result;
}

void sub_1001B9F38( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28, void *a29, uint64_t a30, int a31, __int16 a32, char a33, char a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40, void *a41, uint64_t a42, int a43, __int16 a44, char a45, char a46, void *a47, uint64_t a48, int a49, __int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
}

uint64_t NetworkDiagnosticsLogger::insertNetworkInformationToDot( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a1[498];
  uint64_t v7 = *(unsigned __int16 *)(v6 + 6656);
  int v8 = *(unsigned __int16 *)(v6 + 6658);
  unsigned int v9 = *(_DWORD *)(v6 + 6660);
  uint64_t v10 = a1[497];
  unsigned int v136 = *(_DWORD *)(v10 + 112);
  sub_1001BC218((uint64_t)v145);
  unint64_t v11 = sub_1001B02E4(&v146, (uint64_t)"0x", 2LL);
  v140[0] = 48;
  uint64_t v12 = sub_1001BC344(v11, v140);
  uint64_t v13 = *v12;
  *(uint64_t *)((char *)v12 + *(void *)(*v12 - 24) + memset(v10, 0, 24) = 4LL;
  *(_DWORD *)((char *)v12 + *(void *)(v13 - 24) + std::ostream::~ostream(v0, v1 + 8) = *(_DWORD *)((_BYTE *)v12 + *(void *)(v13 - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<(v12, v7);
  sub_1001BC218((uint64_t)v140);
  std::locale v14 = sub_1001B02E4(&v141, (uint64_t)"0x", 2LL);
  v139.__r_.__value_.__s.__data_[0] = 48;
  uint64_t v15 = sub_1001BC344(v14, (char *)&v139);
  uint64_t v16 = *v15;
  *(uint64_t *)((char *)v15 + *(void *)(*v15 - 24) + memset(v10, 0, 24) = 16LL;
  *(_DWORD *)((char *)v15 + *(void *)(v16 - 24) + std::ostream::~ostream(v0, v1 + 8) = *(_DWORD *)((_BYTE *)v15 + *(void *)(v16 - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  uint64_t v17 = sub_1001B02E4( a1,  (uint64_t)"ThreadNwInfo [pos=0,0! shape=plaintext fontsize=14 margin=0 width=0 height=0 label=<<table title=Thread NW Info border=0 cellborder=1 cellspacing=0 color=black>\\  ",  186LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24LL)));
  unsigned __int16 v18 = std::locale::use_facet((const std::locale *)&v139, &std::ctype<char>::id);
  uint64_t v19 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10LL);
  std::locale::~locale((std::locale *)&v139);
  std::ostream::put(v17, v19);
  std::ostream::flush(v17);
  uint64_t v20 = sub_1001B02E4(a1, (uint64_t)"<tr><td align=left>Time</td><td align=left>", 47LL);
  int v21 = *(char *)(v6 + 23);
  if (v21 >= 0) {
    uint64_t v22 = v6;
  }
  else {
    uint64_t v22 = *(void *)v6;
  }
  if (v21 >= 0) {
    uint64_t v23 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    uint64_t v23 = *(void *)(v6 + 8);
  }
  uint64_t v24 = sub_1001B02E4(v20, v22, v23);
  uint64_t v25 = sub_1001B02E4(v24, (uint64_t)"</td></tr> \\ ", 13LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24LL)));
  int v26 = std::locale::use_facet((const std::locale *)&v139, &std::ctype<char>::id);
  uint64_t v27 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10LL);
  std::locale::~locale((std::locale *)&v139);
  std::ostream::put(v25, v27);
  std::ostream::flush(v25);
  uint64_t v28 = sub_1001B02E4(a1, (uint64_t)"<tr><td align=left>NetworkName</td><td align=left>", 54LL);
  int v29 = *(char *)(v6 + 6687);
  if (v29 >= 0) {
    uint64_t v30 = v6 + 6664;
  }
  else {
    uint64_t v30 = *(void *)(v6 + 6664);
  }
  if (v29 >= 0) {
    uint64_t v31 = *(unsigned __int8 *)(v6 + 6687);
  }
  else {
    uint64_t v31 = *(void *)(v6 + 6672);
  }
  uint64_t v32 = sub_1001B02E4(v28, v30, v31);
  uint64_t v33 = sub_1001B02E4(v32, (uint64_t)"</td></tr> \\ ", 13LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(void *)(*v33 - 24LL)));
  uint64_t v34 = std::locale::use_facet((const std::locale *)&v139, &std::ctype<char>::id);
  uint64_t v35 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10LL);
  std::locale::~locale((std::locale *)&v139);
  std::ostream::put(v33, v35);
  std::ostream::flush(v33);
  uint64_t v36 = sub_1001B02E4(a1, (uint64_t)"<tr><td align=left>Channel</td><td align=left>", 50LL);
  std::to_string(&v139, v8);
  if ((v139.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v37 = &v139;
  }
  else {
    uint64_t v37 = (std::string *)v139.__r_.__value_.__r.__words[0];
  }
  if ((v139.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t size = v139.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t size = v139.__r_.__value_.__l.__size_;
  }
  uint64_t v39 = sub_1001B02E4(v36, (uint64_t)v37, size);
  unint64_t v40 = sub_1001B02E4(v39, (uint64_t)"</td></tr> \\ ", 13LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v40 + *(void *)(*v40 - 24LL)));
  uint64_t v41 = std::locale::use_facet(&v150, &std::ctype<char>::id);
  uint64_t v42 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10LL);
  std::locale::~locale(&v150);
  std::ostream::put(v40, v42);
  std::ostream::flush(v40);
  uint64_t v43 = sub_1001B02E4(a1, (uint64_t)"<tr><td align=left>PANID</td><td align=left>", 48LL);
  id v44 = (void *)std::ostream::operator<<(v43, v147);
  uint64_t v45 = sub_1001B02E4(v44, (uint64_t)"</td></tr> \\ ", 13LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v45 + *(void *)(*v45 - 24LL)));
  uint64_t v46 = std::locale::use_facet((const std::locale *)&v139, &std::ctype<char>::id);
  uint64_t v47 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v46->__vftable[2].~facet_0)(v46, 10LL);
  std::locale::~locale((std::locale *)&v139);
  std::ostream::put(v45, v47);
  std::ostream::flush(v45);
  uint64_t v48 = sub_1001B02E4(a1, (uint64_t)"<tr><td align=left>XPANID</td><td align=left>", 49LL);
  char v49 = (void *)std::ostream::operator<<(v48, v142);
  unsigned __int8 v50 = sub_1001B02E4(v49, (uint64_t)"</td></tr> \\ ", 13LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v50 + *(void *)(*v50 - 24LL)));
  uint64_t v51 = std::locale::use_facet((const std::locale *)&v139, &std::ctype<char>::id);
  uint64_t v52 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10LL);
  std::locale::~locale((std::locale *)&v139);
  std::ostream::put(v50, v52);
  std::ostream::flush(v50);
  uint64_t v53 = sub_1001B02E4(a1, (uint64_t)"<tr><td align=left>PartitionID</td><td align=left>", 54LL);
  std::to_string(&v139, v9);
  if ((v139.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v54 = &v139;
  }
  else {
    uint64_t v54 = (std::string *)v139.__r_.__value_.__r.__words[0];
  }
  if ((v139.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v55 = v139.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v55 = v139.__r_.__value_.__l.__size_;
  }
  uint64_t v56 = sub_1001B02E4(v53, (uint64_t)v54, v55);
  uint64_t v57 = sub_1001B02E4(v56, (uint64_t)"</td></tr> \\ ", 13LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v57 + *(void *)(*v57 - 24LL)));
  uint64_t v58 = std::locale::use_facet(&v150, &std::ctype<char>::id);
  uint64_t v59 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v58->__vftable[2].~facet_0)(v58, 10LL);
  std::locale::~locale(&v150);
  std::ostream::put(v57, v59);
  std::ostream::flush(v57);
  uint64_t v60 = sub_1001B02E4(a1, (uint64_t)"<tr><td align=left>MLPrefix</td><td align=left>", 51LL);
  int v61 = *(char *)(v6 + 6711);
  if (v61 >= 0) {
    uint64_t v62 = v6 + 6688;
  }
  else {
    uint64_t v62 = *(void *)(v6 + 6688);
  }
  if (v61 >= 0) {
    uint64_t v63 = *(unsigned __int8 *)(v6 + 6711);
  }
  else {
    uint64_t v63 = *(void *)(v6 + 6696);
  }
  __int16 v64 = sub_1001B02E4(v60, v62, v63);
  uint64_t v65 = sub_1001B02E4(v64, (uint64_t)"/64", 3LL);
  int v66 = sub_1001B02E4(v65, (uint64_t)"</td></tr> \\ ", 13LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v66 + *(void *)(*v66 - 24LL)));
  uint64_t v67 = std::locale::use_facet((const std::locale *)&v139, &std::ctype<char>::id);
  uint64_t v68 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v67->__vftable[2].~facet_0)(v67, 10LL);
  std::locale::~locale((std::locale *)&v139);
  std::ostream::put(v66, v68);
  std::ostream::flush(v66);
  uint64_t v69 = sub_1001B02E4(a1, (uint64_t)"<tr><td align=left>TotalRouters</td><td href=", 48LL);
  int v70 = *(char *)(v6 + 319);
  if (v70 >= 0) {
    uint64_t v71 = v6 + 296;
  }
  else {
    uint64_t v71 = *(void *)(v6 + 296);
  }
  if (v70 >= 0) {
    uint64_t v72 = *(unsigned __int8 *)(v6 + 319);
  }
  else {
    uint64_t v72 = *(void *)(v6 + 304);
  }
  uint64_t v73 = sub_1001B02E4(v69, v71, v72);
  uint64_t v74 = sub_1001B02E4(v73, (uint64_t)" align=left>", 15LL);
  id v75 = sub_1001B02E4(v74, (uint64_t)"<U><FONT color=blue>", 22LL);
  uint64_t v76 = (void *)std::ostream::operator<<(v75, *(void *)(a2 + 24));
  char v77 = sub_1001B02E4(v76, (uint64_t)"</FONT></U> </td></tr> \\ ", 25LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v77 + *(void *)(*v77 - 24LL)));
  uint64_t v78 = std::locale::use_facet((const std::locale *)&v139, &std::ctype<char>::id);
  uint64_t v79 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v78->__vftable[2].~facet_0)(v78, 10LL);
  std::locale::~locale((std::locale *)&v139);
  std::ostream::put(v77, v79);
  std::ostream::flush(v77);
  uint64_t v80 = sub_1001B02E4(a1, (uint64_t)"<tr><td align=left>TotalFEDs</td><td href=", 45LL);
  int v81 = *(char *)(v6 + 271);
  if (v81 >= 0) {
    uint64_t v82 = v6 + 248;
  }
  else {
    uint64_t v82 = *(void *)(v6 + 248);
  }
  if (v81 >= 0) {
    uint64_t v83 = *(unsigned __int8 *)(v6 + 271);
  }
  else {
    uint64_t v83 = *(void *)(v6 + 256);
  }
  id v84 = sub_1001B02E4(v80, v82, v83);
  uint64_t v85 = sub_1001B02E4(v84, (uint64_t)" align=left>", 15LL);
  unsigned int v86 = sub_1001B02E4(v85, (uint64_t)"<U><FONT color=blue>", 22LL);
  int v87 = (void *)std::ostream::operator<<(v86, *(void *)(a3 + 24));
  uint64_t v88 = sub_1001B02E4(v87, (uint64_t)"</FONT></U> </td></tr> \\ ", 25LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v88 + *(void *)(*v88 - 24LL)));
  uint64_t v89 = std::locale::use_facet((const std::locale *)&v139, &std::ctype<char>::id);
  uint64_t v90 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v89->__vftable[2].~facet_0)(v89, 10LL);
  std::locale::~locale((std::locale *)&v139);
  std::ostream::put(v88, v90);
  std::ostream::flush(v88);
  uint64_t v91 = sub_1001B02E4(a1, (uint64_t)"<tr><td align=left>TotalSEDs</td><td href=", 45LL);
  int v92 = *(char *)(v6 + 295);
  if (v92 >= 0) {
    uint64_t v93 = v6 + 272;
  }
  else {
    uint64_t v93 = *(void *)(v6 + 272);
  }
  if (v92 >= 0) {
    uint64_t v94 = *(unsigned __int8 *)(v6 + 295);
  }
  else {
    uint64_t v94 = *(void *)(v6 + 280);
  }
  uint64_t v95 = sub_1001B02E4(v91, v93, v94);
  __int128 v96 = sub_1001B02E4(v95, (uint64_t)" align=left>", 15LL);
  id v97 = sub_1001B02E4(v96, (uint64_t)"<U><FONT color=blue>", 22LL);
  uint64_t v98 = (void *)std::ostream::operator<<(v97, *(void *)(a4 + 24));
  std::locale v99 = sub_1001B02E4(v98, (uint64_t)"</FONT></U> </td></tr> \\ ", 25LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v99 + *(void *)(*v99 - 24LL)));
  std::string::size_type v100 = std::locale::use_facet((const std::locale *)&v139, &std::ctype<char>::id);
  uint64_t v101 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v100->__vftable[2].~facet_0)(v100, 10LL);
  std::locale::~locale((std::locale *)&v139);
  std::ostream::put(v99, v101);
  std::ostream::flush(v99);
  uint64_t v102 = sub_1001B02E4(a1, (uint64_t)"<tr><td align=left>TotalNodes</td><td align=left>", 53LL);
  uint64_t v103 = (void *)std::ostream::operator<<(v102, *(void *)(a3 + 24) + *(void *)(a2 + 24) + *(void *)(a4 + 24));
  unsigned __int8 v104 = sub_1001B02E4(v103, (uint64_t)"</td></tr> \\ ", 13LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v104 + *(void *)(*v104 - 24LL)));
  unsigned int v105 = std::locale::use_facet((const std::locale *)&v139, &std::ctype<char>::id);
  uint64_t v106 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v105->__vftable[2].~facet_0)(v105, 10LL);
  std::locale::~locale((std::locale *)&v139);
  std::ostream::put(v104, v106);
  std::ostream::flush(v104);
  __int128 v107 = sub_1001B02E4(a1, (uint64_t)"<tr><td align=left>TotalServicesDiscovered</td><td href=", 59LL);
  int v108 = *(char *)(v6 + 199);
  if (v108 >= 0) {
    uint64_t v109 = v6 + 176;
  }
  else {
    uint64_t v109 = *(void *)(v6 + 176);
  }
  if (v108 >= 0) {
    uint64_t v110 = *(unsigned __int8 *)(v6 + 199);
  }
  else {
    uint64_t v110 = *(void *)(v6 + 184);
  }
  uint64_t v111 = sub_1001B02E4(v107, v109, v110);
  unsigned __int8 v112 = sub_1001B02E4(v111, (uint64_t)" align=left>", 15LL);
  uint64_t v113 = sub_1001B02E4(v112, (uint64_t)"<U><FONT color=blue>", 22LL);
  uint64_t v114 = (void *)std::ostream::operator<<( v113,  0xF0F0F0F0F0F0F0F1LL * ((uint64_t)(*(void *)(v10 + 16) - *(void *)(v10 + 8)) >> 3));
  __int16 v115 = sub_1001B02E4(v114, (uint64_t)"</FONT></U> </td></tr> \\ ", 25LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v115 + *(void *)(*v115 - 24LL)));
  std::string::size_type v116 = std::locale::use_facet((const std::locale *)&v139, &std::ctype<char>::id);
  uint64_t v117 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v116->__vftable[2].~facet_0)(v116, 10LL);
  std::locale::~locale((std::locale *)&v139);
  std::ostream::put(v115, v117);
  std::ostream::flush(v115);
  __int128 v118 = sub_1001B02E4(a1, (uint64_t)"<tr><td align=left>TotalServicesResolved</td><td href=", 57LL);
  int v119 = *(char *)(v6 + 223);
  if (v119 >= 0) {
    uint64_t v120 = v6 + 200;
  }
  else {
    uint64_t v120 = *(void *)(v6 + 200);
  }
  if (v119 >= 0) {
    uint64_t v121 = *(unsigned __int8 *)(v6 + 223);
  }
  else {
    uint64_t v121 = *(void *)(v6 + 208);
  }
  uint64_t v122 = sub_1001B02E4(v118, v120, v121);
  unsigned __int8 v123 = sub_1001B02E4(v122, (uint64_t)" align=left>", 15LL);
  uint64_t v124 = sub_1001B02E4(v123, (uint64_t)"<U><FONT color=blue>", 22LL);
  uint64_t v125 = (void *)std::ostream::operator<<(v124, v136);
  unsigned int v126 = sub_1001B02E4(v125, (uint64_t)"</FONT></U> </td></tr> \\ ", 25LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v126 + *(void *)(*v126 - 24LL)));
  std::string::size_type v127 = std::locale::use_facet((const std::locale *)&v139, &std::ctype<char>::id);
  uint64_t v128 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v127->__vftable[2].~facet_0)(v127, 10LL);
  std::locale::~locale((std::locale *)&v139);
  std::ostream::put(v126, v128);
  std::ostream::flush(v126);
  __int128 v129 = sub_1001B02E4(a1, (uint64_t)"</table>>];", 11LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v129 + *(void *)(*v129 - 24LL)));
  int v130 = std::locale::use_facet((const std::locale *)&v139, &std::ctype<char>::id);
  uint64_t v131 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v130->__vftable[2].~facet_0)(v130, 10LL);
  std::locale::~locale((std::locale *)&v139);
  std::ostream::put(v129, v131);
  std::ostream::flush(v129);
                             - 24LL)] = v133;
  uint64_t v141 = v134;
  if (v143 < 0) {
    operator delete((void *)v142[8]);
  }
  std::streambuf::~streambuf(v142);
  std::ios::~ios(&v144);
  v145[0] = v132;
  *(void *)((char *)v145 + *(void *)(v132 - sub_10016A418((unsigned int **)(v1 - 24)) = v133;
  uint64_t v146 = v134;
  if (v148 < 0) {
    operator delete((void *)v147[8]);
  }
  std::streambuf::~streambuf(v147);
  return std::ios::~ios(&v149);
}

void sub_1001BAC94( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
}

uint64_t NetworkDiagnosticsLogger::initialize( void *a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6, const char *a7, const char *a8, const char *a9, const char *a10, uint64_t a11)
{
  uint64_t v17 = (const char *)a2;
  std::ofstream::open(a1, a2, 16LL);
  if ((*((_BYTE *)a1 + *(void *)(*a1 - 24LL) + 32) & 5) != 0) {
    goto LABEL_4;
  }
  int v21 = sub_1001B02E4(a1, (uint64_t)"Current Time:", 13LL);
  int v22 = *(char *)(a11 + 23);
  if (v22 >= 0) {
    uint64_t v23 = a11;
  }
  else {
    uint64_t v23 = *(void *)a11;
  }
  if (v22 >= 0) {
    uint64_t v24 = *(unsigned __int8 *)(a11 + 23);
  }
  else {
    uint64_t v24 = *(void *)(a11 + 8);
  }
  uint64_t v25 = sub_1001B02E4(v21, v23, v24);
  std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24LL)));
  int v26 = std::locale::use_facet(&v93, &std::ctype<char>::id);
  uint64_t v27 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10LL);
  std::locale::~locale(&v93);
  std::ostream::put(v25, v27);
  std::ostream::flush(v25);
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)));
  uint64_t v28 = std::locale::use_facet(&v93, &std::ctype<char>::id);
  uint64_t v29 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10LL);
  std::locale::~locale(&v93);
  std::ostream::put(a1, v29);
  std::ostream::flush(a1);
  uint64_t v30 = a1 + 71;
  else {
    uint64_t v31 = *(const char **)a3;
  }
  std::ofstream::open(a1 + 71, v31, 16LL);
  if ((*((_BYTE *)v30 + *(void *)(a1[71] - 24LL) + 32) & 5) != 0)
  {
    uint64_t v19 = __stderrp;
    else {
      uint64_t v20 = *(const char **)a3;
    }
    goto LABEL_46;
  }

  uint64_t v92 = a5;
  uint64_t v32 = sub_1001B02E4(a1 + 71, (uint64_t)"Current Time:", 13LL);
  int v33 = *(char *)(a11 + 23);
  if (v33 >= 0) {
    uint64_t v34 = a11;
  }
  else {
    uint64_t v34 = *(void *)a11;
  }
  if (v33 >= 0) {
    uint64_t v35 = *(unsigned __int8 *)(a11 + 23);
  }
  else {
    uint64_t v35 = *(void *)(a11 + 8);
  }
  uint64_t v36 = sub_1001B02E4(v32, v34, v35);
  std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(void *)(*v36 - 24LL)));
  uint64_t v37 = std::locale::use_facet(&v93, &std::ctype<char>::id);
  uint64_t v38 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10LL);
  std::locale::~locale(&v93);
  std::ostream::put(v36, v38);
  std::ostream::flush(v36);
  std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(void *)(*v30 - 24LL)));
  uint64_t v39 = std::locale::use_facet(&v93, &std::ctype<char>::id);
  uint64_t v40 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10LL);
  std::locale::~locale(&v93);
  std::ostream::put(a1 + 71, v40);
  std::ostream::flush(a1 + 71);
  uint64_t v41 = a1 + 142;
  if (a6[23] >= 0) {
    uint64_t v42 = a6;
  }
  else {
    uint64_t v42 = *(const char **)a6;
  }
  std::ofstream::open(a1 + 142, v42, 16LL);
  if ((*((_BYTE *)v41 + *(void *)(a1[142] - 24LL) + 32) & 5) != 0)
  {
    uint64_t v19 = __stderrp;
    if (a6[23] >= 0) {
      uint64_t v20 = a6;
    }
    else {
      uint64_t v20 = *(const char **)a6;
    }
    goto LABEL_46;
  }

  uint64_t v43 = sub_1001B02E4(a1 + 142, (uint64_t)"Current Time:", 13LL);
  int v44 = *(char *)(a11 + 23);
  if (v44 >= 0) {
    uint64_t v45 = a11;
  }
  else {
    uint64_t v45 = *(void *)a11;
  }
  if (v44 >= 0) {
    uint64_t v46 = *(unsigned __int8 *)(a11 + 23);
  }
  else {
    uint64_t v46 = *(void *)(a11 + 8);
  }
  uint64_t v47 = sub_1001B02E4(v43, v45, v46);
  std::ios_base::getloc((const std::ios_base *)((char *)v47 + *(void *)(*v47 - 24LL)));
  uint64_t v48 = std::locale::use_facet(&v93, &std::ctype<char>::id);
  uint64_t v49 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v48->__vftable[2].~facet_0)(v48, 10LL);
  std::locale::~locale(&v93);
  std::ostream::put(v47, v49);
  std::ostream::flush(v47);
  std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(void *)(*v41 - 24LL)));
  unsigned __int8 v50 = std::locale::use_facet(&v93, &std::ctype<char>::id);
  uint64_t v51 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v50->__vftable[2].~facet_0)(v50, 10LL);
  std::locale::~locale(&v93);
  std::ostream::put(a1 + 142, v51);
  std::ostream::flush(a1 + 142);
  uint64_t v52 = a1 + 213;
  if (a7[23] >= 0) {
    uint64_t v53 = a7;
  }
  else {
    uint64_t v53 = *(const char **)a7;
  }
  std::ofstream::open(a1 + 213, v53, 16LL);
  if ((*((_BYTE *)v52 + *(void *)(a1[213] - 24LL) + 32) & 5) != 0)
  {
    uint64_t v19 = __stderrp;
    if (a7[23] >= 0) {
      uint64_t v20 = a7;
    }
    else {
      uint64_t v20 = *(const char **)a7;
    }
    goto LABEL_46;
  }

  uint64_t v55 = sub_1001B02E4(a1 + 213, (uint64_t)"Current Time:", 13LL);
  int v56 = *(char *)(a11 + 23);
  uint64_t v57 = v56 >= 0 ? a11 : *(void *)a11;
  uint64_t v58 = v56 >= 0 ? *(unsigned __int8 *)(a11 + 23) : *(void *)(a11 + 8);
  uint64_t v59 = sub_1001B02E4(v55, v57, v58);
  std::ios_base::getloc((const std::ios_base *)((char *)v59 + *(void *)(*v59 - 24LL)));
  uint64_t v60 = std::locale::use_facet(&v93, &std::ctype<char>::id);
  uint64_t v61 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v60->__vftable[2].~facet_0)(v60, 10LL);
  std::locale::~locale(&v93);
  std::ostream::put(v59, v61);
  std::ostream::flush(v59);
  std::ios_base::getloc((const std::ios_base *)((char *)v52 + *(void *)(*v52 - 24LL)));
  uint64_t v62 = std::locale::use_facet(&v93, &std::ctype<char>::id);
  uint64_t v63 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v62->__vftable[2].~facet_0)(v62, 10LL);
  uint64_t v17 = a9;
  std::locale::~locale(&v93);
  std::ostream::put(a1 + 213, v63);
  std::ostream::flush(a1 + 213);
  __int16 v64 = a1 + 355;
  uint64_t v65 = a9[23] >= 0 ? (uint64_t)a9 : *(void *)a9;
  std::ofstream::open(a1 + 355, v65, 16LL);
  if ((*((_BYTE *)v64 + *(void *)(a1[355] - 24LL) + 32) & 5) != 0) {
    goto LABEL_4;
  }
  int v66 = sub_1001B02E4(a1 + 355, (uint64_t)"Current Time:", 13LL);
  int v67 = *(char *)(a11 + 23);
  uint64_t v68 = v67 >= 0 ? a11 : *(void *)a11;
  uint64_t v69 = v67 >= 0 ? *(unsigned __int8 *)(a11 + 23) : *(void *)(a11 + 8);
  int v70 = sub_1001B02E4(v66, v68, v69);
  std::ios_base::getloc((const std::ios_base *)((char *)v70 + *(void *)(*v70 - 24LL)));
  uint64_t v71 = std::locale::use_facet(&v93, &std::ctype<char>::id);
  uint64_t v72 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v71->__vftable[2].~facet_0)(v71, 10LL);
  std::locale::~locale(&v93);
  std::ostream::put(v70, v72);
  std::ostream::flush(v70);
  std::ios_base::getloc((const std::ios_base *)((char *)v64 + *(void *)(*v64 - 24LL)));
  uint64_t v73 = std::locale::use_facet(&v93, &std::ctype<char>::id);
  uint64_t v74 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v73->__vftable[2].~facet_0)(v73, 10LL);
  uint64_t v17 = a10;
  std::locale::~locale(&v93);
  std::ostream::put(a1 + 355, v74);
  std::ostream::flush(a1 + 355);
  uint64_t v75 = a10[23] >= 0 ? (uint64_t)a10 : *(void *)a10;
  std::ofstream::open(a1 + 426, v75, 16LL);
  if ((*((_BYTE *)a1 + *(void *)(a1[426] - 24LL) + 3440) & 5) != 0)
  {
LABEL_4:
    uint64_t v19 = __stderrp;
    if (v17[23] >= 0) {
      uint64_t v20 = v17;
    }
    else {
      uint64_t v20 = *(const char **)v17;
    }
LABEL_46:
    fprintf(v19, "ERR to open %s\n", v20);
    return 0LL;
  }

  uint64_t v76 = sub_1001B02E4(a1 + 426, (uint64_t)"Current Time:", 13LL);
  int v77 = *(char *)(a11 + 23);
  if (v77 >= 0) {
    uint64_t v78 = a11;
  }
  else {
    uint64_t v78 = *(void *)a11;
  }
  if (v77 >= 0) {
    uint64_t v79 = *(unsigned __int8 *)(a11 + 23);
  }
  else {
    uint64_t v79 = *(void *)(a11 + 8);
  }
  uint64_t v80 = sub_1001B02E4(v76, v78, v79);
  sub_1001AF7B8(v80);
  sub_1001AF7B8(a1 + 426);
  if (a8[23] >= 0) {
    int v81 = a8;
  }
  else {
    int v81 = *(const char **)a8;
  }
  std::ofstream::open(a1 + 284, v81, 16LL);
  if ((*((_BYTE *)a1 + *(void *)(a1[284] - 24LL) + 2304) & 5) != 0)
  {
    uint64_t v19 = __stderrp;
    if (a8[23] >= 0) {
      uint64_t v20 = a8;
    }
    else {
      uint64_t v20 = *(const char **)a8;
    }
    goto LABEL_46;
  }

  uint64_t v82 = sub_1001B02E4(a1 + 284, (uint64_t)"Current Time:", 13LL);
  int v83 = *(char *)(a11 + 23);
  if (v83 >= 0) {
    uint64_t v84 = a11;
  }
  else {
    uint64_t v84 = *(void *)a11;
  }
  if (v83 >= 0) {
    uint64_t v85 = *(unsigned __int8 *)(a11 + 23);
  }
  else {
    uint64_t v85 = *(void *)(a11 + 8);
  }
  unsigned int v86 = sub_1001B02E4(v82, v84, v85);
  sub_1001AF7B8(v86);
  sub_1001AF7B8(a1 + 284);
  int v87 = sub_1001B02E4(a1, (uint64_t)"digraph {", 9LL);
  sub_1001AF7B8(v87);
  if (!*(_BYTE *)(a1[498] + 48LL))
  {
    uint64_t v88 = sub_1001B02E4(a1, (uint64_t)"concentrate=true;", 17LL);
    sub_1001AF7B8(v88);
  }

  uint64_t v89 = sub_1001B02E4(a1, (uint64_t)"forcelabels=true;", 17LL);
  sub_1001AF7B8(v89);
  uint64_t v90 = sub_1001B02E4(a1, (uint64_t)"rankdir=LR;", 11LL);
  sub_1001AF7B8(v90);
  uint64_t v91 = sub_1001B02E4(a1, (uint64_t)"node [shape=box, color=red];", 28LL);
  sub_1001AF7B8(v91);
  NetworkDiagnosticsLogger::insertLegendToDotFile(a1, a4, v92, a3);
  return 1LL;
}

void sub_1001BB564( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12)
{
}

uint64_t NetworkDiagnosticsLogger::insertLegendToDotFile(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = a1 + 142;
  unsigned int v9 = sub_1001B02E4(a1 + 142, (uint64_t)"digraph {", 9LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24LL)));
  uint64_t v10 = std::locale::use_facet(&v103, &std::ctype<char>::id);
  uint64_t v11 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10LL);
  std::locale::~locale(&v103);
  std::ostream::put(v9, v11);
  std::ostream::flush(v9);
  uint64_t v12 = sub_1001B02E4(v8, (uint64_t)"forcelabels=true;", 17LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24LL)));
  uint64_t v13 = std::locale::use_facet(&v103, &std::ctype<char>::id);
  uint64_t v14 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10LL);
  std::locale::~locale(&v103);
  std::ostream::put(v12, v14);
  std::ostream::flush(v12);
  uint64_t v15 = sub_1001B02E4(v8, (uint64_t)"rankdir=LR;", 11LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24LL)));
  uint64_t v16 = std::locale::use_facet(&v103, &std::ctype<char>::id);
  uint64_t v17 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10LL);
  std::locale::~locale(&v103);
  std::ostream::put(v15, v17);
  std::ostream::flush(v15);
  unsigned __int16 v18 = sub_1001B02E4(v8, (uint64_t)"rank=same;", 10LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24LL)));
  uint64_t v19 = std::locale::use_facet(&v103, &std::ctype<char>::id);
  uint64_t v20 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10LL);
  std::locale::~locale(&v103);
  std::ostream::put(v18, v20);
  std::ostream::flush(v18);
  int v21 = sub_1001B02E4(a1, (uint64_t)"node [shape=box, color=black];", 30LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24LL)));
  int v22 = std::locale::use_facet(&v103, &std::ctype<char>::id);
  uint64_t v23 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10LL);
  std::locale::~locale(&v103);
  std::ostream::put(v21, v23);
  std::ostream::flush(v21);
  uint64_t v24 = sub_1001B02E4(v8, (uint64_t)"color = black;", 14LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(void *)(*v24 - 24LL)));
  uint64_t v25 = std::locale::use_facet(&v103, &std::ctype<char>::id);
  uint64_t v26 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10LL);
  std::locale::~locale(&v103);
  std::ostream::put(v24, v26);
  std::ostream::flush(v24);
  uint64_t v27 = sub_1001B02E4(v8, (uint64_t)"Router [shape=box] [color=blue];", 36LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(void *)(*v27 - 24LL)));
  uint64_t v28 = std::locale::use_facet(&v103, &std::ctype<char>::id);
  uint64_t v29 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10LL);
  std::locale::~locale(&v103);
  std::ostream::put(v27, v29);
  std::ostream::flush(v27);
  sub_1001B02E4(v8, (uint64_t)"Leader [shape=box] [color=green]", 36LL);
  sub_1001B02E4(v8, (uint64_t)" [xlabel=<<font color=violet> <B> <I>", 39LL);
  sub_1001B02E4(v8, (uint64_t)"  DNS Info", 12LL);
  uint64_t v30 = sub_1001B02E4(v8, (uint64_t)"</I></B></font>>];", 18LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(void *)(*v30 - 24LL)));
  uint64_t v31 = std::locale::use_facet(&v103, &std::ctype<char>::id);
  uint64_t v32 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10LL);
  std::locale::~locale(&v103);
  std::ostream::put(v30, v32);
  std::ostream::flush(v30);
  int v33 = sub_1001B02E4(v8, (uint64_t)"ExpandBox [style=invis]", 23LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(void *)(*v33 - 24LL)));
  uint64_t v34 = std::locale::use_facet(&v103, &std::ctype<char>::id);
  uint64_t v35 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10LL);
  std::locale::~locale(&v103);
  std::ostream::put(v33, v35);
  std::ostream::flush(v33);
  uint64_t v36 = sub_1001B02E4(v8, (uint64_t)"FED [shape=circle color=red];", 31LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(void *)(*v36 - 24LL)));
  uint64_t v37 = std::locale::use_facet(&v103, &std::ctype<char>::id);
  uint64_t v38 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10LL);
  std::locale::~locale(&v103);
  std::ostream::put(v36, v38);
  std::ostream::flush(v36);
  uint64_t v39 = sub_1001B02E4(v8, (uint64_t)"SED [shape=circle color=orange];", 34LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v39 + *(void *)(*v39 - 24LL)));
  uint64_t v40 = std::locale::use_facet(&v103, &std::ctype<char>::id);
  uint64_t v41 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v40->__vftable[2].~facet_0)(v40, 10LL);
  std::locale::~locale(&v103);
  std::ostream::put(v39, v41);
  std::ostream::flush(v39);
  uint64_t v42 = sub_1001B02E4(v8, (uint64_t)"Router -> Leader [style=invis]", 30LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(void *)(*v42 - 24LL)));
  uint64_t v43 = std::locale::use_facet(&v103, &std::ctype<char>::id);
  uint64_t v44 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10LL);
  std::locale::~locale(&v103);
  std::ostream::put(v42, v44);
  std::ostream::flush(v42);
  uint64_t v45 = sub_1001B02E4(v8, (uint64_t)"Leader -> FED [style=invis]", 27LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v45 + *(void *)(*v45 - 24LL)));
  uint64_t v46 = std::locale::use_facet(&v103, &std::ctype<char>::id);
  uint64_t v47 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v46->__vftable[2].~facet_0)(v46, 10LL);
  std::locale::~locale(&v103);
  std::ostream::put(v45, v47);
  std::ostream::flush(v45);
  uint64_t v48 = sub_1001B02E4(v8, (uint64_t)"FED -> SED [style=invis]", 24LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v48 + *(void *)(*v48 - 24LL)));
  uint64_t v49 = std::locale::use_facet(&v103, &std::ctype<char>::id);
  uint64_t v50 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v49->__vftable[2].~facet_0)(v49, 10LL);
  std::locale::~locale(&v103);
  std::ostream::put(v48, v50);
  std::ostream::flush(v48);
  uint64_t v51 = sub_1001B02E4(v8, (uint64_t)"Parent [style=invis]", 20LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v51 + *(void *)(*v51 - 24LL)));
  uint64_t v52 = std::locale::use_facet(&v103, &std::ctype<char>::id);
  uint64_t v53 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10LL);
  std::locale::~locale(&v103);
  std::ostream::put(v51, v53);
  std::ostream::flush(v51);
  uint64_t v54 = sub_1001B02E4(v8, (uint64_t)"Child  [style=invis];", 21LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v54 + *(void *)(*v54 - 24LL)));
  uint64_t v55 = std::locale::use_facet(&v103, &std::ctype<char>::id);
  uint64_t v56 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10LL);
  std::locale::~locale(&v103);
  std::ostream::put(v54, v56);
  std::ostream::flush(v54);
  uint64_t v57 = sub_1001B02E4(v8, (uint64_t)"Parent -> Child [label=\\l parent-child link color=brown];", 61LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v57 + *(void *)(*v57 - 24LL)));
  uint64_t v58 = std::locale::use_facet(&v103, &std::ctype<char>::id);
  uint64_t v59 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v58->__vftable[2].~facet_0)(v58, 10LL);
  std::locale::~locale(&v103);
  std::ostream::put(v57, v59);
  std::ostream::flush(v57);
  uint64_t v60 = sub_1001B02E4(v8, (uint64_t)"}", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v60 + *(void *)(*v60 - 24LL)));
  uint64_t v61 = std::locale::use_facet(&v103, &std::ctype<char>::id);
  uint64_t v62 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v61->__vftable[2].~facet_0)(v61, 10LL);
  std::locale::~locale(&v103);
  std::ostream::put(v60, v62);
  std::ostream::flush(v60);
  uint64_t v63 = sub_1001B02E4(a1, (uint64_t)"Invis [label=        style=invis];", 36LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v63 + *(void *)(*v63 - 24LL)));
  __int16 v64 = std::locale::use_facet(&v103, &std::ctype<char>::id);
  uint64_t v65 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v64->__vftable[2].~facet_0)(v64, 10LL);
  std::locale::~locale(&v103);
  std::ostream::put(v63, v65);
  std::ostream::flush(v63);
  int v66 = sub_1001B02E4(a1, (uint64_t)"Legend [ tooltip=Display legend shape=plaintext fontsize=14 href=", 70LL);
  int v67 = *(char *)(a3 + 23);
  if (v67 >= 0) {
    uint64_t v68 = a3;
  }
  else {
    uint64_t v68 = *(void *)a3;
  }
  if (v67 >= 0) {
    uint64_t v69 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v69 = *(void *)(a3 + 8);
  }
  int v70 = sub_1001B02E4(v66, v68, v69);
  uint64_t v71 = sub_1001B02E4(v70, (uint64_t)" label=<<font color=blue> <U> Legend </U></font>>][color=blue];", 66LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v71 + *(void *)(*v71 - 24LL)));
  uint64_t v72 = std::locale::use_facet(&v103, &std::ctype<char>::id);
  uint64_t v73 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v72->__vftable[2].~facet_0)(v72, 10LL);
  std::locale::~locale(&v103);
  std::ostream::put(v71, v73);
  std::ostream::flush(v71);
  uint64_t v74 = sub_1001B02E4(a1, (uint64_t)"Tlvs [ tooltip=Display debug log shape=plaintext fontsize=14 href=", 71LL);
  int v75 = *(char *)(a4 + 23);
  if (v75 >= 0) {
    uint64_t v76 = a4;
  }
  else {
    uint64_t v76 = *(void *)a4;
  }
  if (v75 >= 0) {
    uint64_t v77 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    uint64_t v77 = *(void *)(a4 + 8);
  }
  uint64_t v78 = sub_1001B02E4(v74, v76, v77);
  uint64_t v79 = sub_1001B02E4(v78, (uint64_t)" label=<<font color=blue> <U> Tlvs </U></font>>][color=blue];", 64LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v79 + *(void *)(*v79 - 24LL)));
  uint64_t v80 = std::locale::use_facet(&v103, &std::ctype<char>::id);
  uint64_t v81 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v80->__vftable[2].~facet_0)(v80, 10LL);
  std::locale::~locale(&v103);
  std::ostream::put(v79, v81);
  std::ostream::flush(v79);
  uint64_t v82 = sub_1001B02E4( a1,  (uint64_t)"Output [ tooltip=Display execution script output shape=plaintext fontsize=14 href=",  87LL);
  int v83 = *(char *)(a2 + 23);
  if (v83 >= 0) {
    uint64_t v84 = a2;
  }
  else {
    uint64_t v84 = *(void *)a2;
  }
  if (v83 >= 0) {
    uint64_t v85 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v85 = *(void *)(a2 + 8);
  }
  unsigned int v86 = sub_1001B02E4(v82, v84, v85);
  int v87 = sub_1001B02E4(v86, (uint64_t)" label=<<font color=blue> <U> Output </U></font>>][color=blue];", 66LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v87 + *(void *)(*v87 - 24LL)));
  uint64_t v88 = std::locale::use_facet(&v103, &std::ctype<char>::id);
  uint64_t v89 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v88->__vftable[2].~facet_0)(v88, 10LL);
  std::locale::~locale(&v103);
  std::ostream::put(v87, v89);
  std::ostream::flush(v87);
  uint64_t v90 = sub_1001B02E4(a1, (uint64_t)"Invis  -> Legend [style=invis];", 31LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v90 + *(void *)(*v90 - 24LL)));
  uint64_t v91 = std::locale::use_facet(&v103, &std::ctype<char>::id);
  uint64_t v92 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v91->__vftable[2].~facet_0)(v91, 10LL);
  std::locale::~locale(&v103);
  std::ostream::put(v90, v92);
  std::ostream::flush(v90);
  std::locale v93 = sub_1001B02E4(a1, (uint64_t)"Legend -> Tlvs  [style=invis];", 30LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v93 + *(void *)(*v93 - 24LL)));
  uint64_t v94 = std::locale::use_facet(&v103, &std::ctype<char>::id);
  uint64_t v95 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v94->__vftable[2].~facet_0)(v94, 10LL);
  std::locale::~locale(&v103);
  std::ostream::put(v93, v95);
  std::ostream::flush(v93);
  __int128 v96 = sub_1001B02E4(a1, (uint64_t)"Tlvs  -> Output [style=invis];", 30LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v96 + *(void *)(*v96 - 24LL)));
  id v97 = std::locale::use_facet(&v103, &std::ctype<char>::id);
  uint64_t v98 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v97->__vftable[2].~facet_0)(v97, 10LL);
  std::locale::~locale(&v103);
  std::ostream::put(v96, v98);
  std::ostream::flush(v96);
  std::locale v99 = sub_1001B02E4(a1, (uint64_t)"Output -> Counters [style=invis];", 33LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v99 + *(void *)(*v99 - 24LL)));
  std::string::size_type v100 = std::locale::use_facet(&v103, &std::ctype<char>::id);
  uint64_t v101 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v100->__vftable[2].~facet_0)(v100, 10LL);
  std::locale::~locale(&v103);
  std::ostream::put(v99, v101);
  return std::ostream::flush(v99);
}

void sub_1001BC1A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_1001BC218(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = a1 + 24;
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - sub_10016A418((unsigned int **)(v1 - 24)) = v5;
  *(void *)(a1 + std::ostream::~ostream(v0, v1 + 8) = 0LL;
  uint64_t v6 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24LL));
  std::ios_base::init(v6, (void *)(a1 + 24));
  v6[1].__vftable = 0LL;
  v6[1].__fmtflags_ = -1;
  *(void *)(a1 + 16) = v7;
  *(void *)(v2 + *(void *)(v7 - sub_10016A418((unsigned int **)(v1 - 24)) = v8;
  *(void *)a1 = v9;
  std::streambuf::basic_streambuf(v3);
  *(_OWORD *)(a1 + 8std::ostream::~ostream(v0, v1 + 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 12sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = 24;
  return a1;
}

void sub_1001BC31C(_Unwind_Exception *a1)
{
}

void *sub_1001BC344(void *a1, char *a2)
{
  uint64_t v3 = (char *)a1 + *(void *)(*a1 - 24LL);
  int v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)));
    uint64_t v5 = std::locale::use_facet(&v8, &std::ctype<char>::id);
    int v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32LL);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }

  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_1001BC3D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_1001BC3E4(uint64_t a1)
{
  uint64_t v4 = a1 + 24;
  *(void *)(a1 + 16) = v3;
  std::streambuf::~streambuf(v4);
  std::ios::~ios(a1 + 128);
  return a1;
}

void *NetworkDiagnosticsLogger::output_addr16tlv_to_file( uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7)
{
  unsigned __int16 v26 = a2;
  uint64_t v12 = (void *)(a1 + 568);
  uint64_t v13 = sub_1001B02E4((void *)(a1 + 568), (uint64_t)"Rloc16:", 7LL);
  int v14 = *(char *)(a3 + 23);
  if (v14 >= 0) {
    uint64_t v15 = a3;
  }
  else {
    uint64_t v15 = *(void *)a3;
  }
  if (v14 >= 0) {
    uint64_t v16 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v16 = *(void *)(a3 + 8);
  }
  uint64_t v17 = sub_1001B02E4(v13, v15, v16);
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24LL)));
  unsigned __int16 v18 = std::locale::use_facet(&v27, &std::ctype<char>::id);
  uint64_t v19 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10LL);
  std::locale::~locale(&v27);
  std::ostream::put(v17, v19);
  std::ostream::flush(v17);
  uint64_t v20 = sub_1001B02E4(v12, (uint64_t)"------- ", 8LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24LL)));
  int v21 = std::locale::use_facet(&v27, &std::ctype<char>::id);
  uint64_t v22 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10LL);
  std::locale::~locale(&v27);
  std::ostream::put(v20, v22);
  std::ostream::flush(v20);
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24LL)));
  uint64_t v23 = std::locale::use_facet(&v27, &std::ctype<char>::id);
  uint64_t v24 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10LL);
  std::locale::~locale(&v27);
  std::ostream::put(v12, v24);
  uint64_t result = (void *)std::ostream::flush(v12);
  if (*a5 != 2)
  {
    if (*a5 != 1) {
      return result;
    }
    if ((a2 & 0x1FF) != 0) {
      a6 = a7;
    }
  }

  return sub_1001BEEEC(a6, &v26, &v26);
}

void sub_1001BC634( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void NetworkDiagnosticsLogger::output_ipAddrListTlv_to_file( uint64_t a1, unsigned int a2, uint64_t a3, std::string *a4, _DWORD *a5, uint64_t a6, uint64_t a7, void *a8, void *a9)
{
  int v14 = (void *)(a1 + 568);
  uint64_t v15 = sub_1001B02E4((void *)(a1 + 568), (uint64_t)"IpAddressList: ", 15LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24LL)));
  uint64_t v16 = std::locale::use_facet((const std::locale *)v79, &std::ctype<char>::id);
  uint64_t v17 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10LL);
  std::locale::~locale((std::locale *)v79);
  std::ostream::put(v15, v17);
  std::ostream::flush(v15);
  unsigned __int16 v18 = sub_1001B02E4(v14, (uint64_t)"-------------- ", 15LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24LL)));
  uint64_t v19 = std::locale::use_facet((const std::locale *)v79, &std::ctype<char>::id);
  uint64_t v20 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10LL);
  std::locale::~locale((std::locale *)v79);
  std::ostream::put(v18, v20);
  std::ostream::flush(v18);
  uint64_t v21 = *(void *)(a3 + 24);
  memset(&__str, 0, sizeof(__str));
  if (v21)
  {
    unsigned int v22 = *(unsigned __int8 *)(v21 + 1);
    int v67 = (unsigned __int8 *)(v21 + 1);
    if (v22 == 255)
    {
      unsigned int v23 = (bswap32(*(unsigned __int16 *)(v21 + 2)) >> 20);
      if (!v23) {
        goto LABEL_7;
      }
    }

    else
    {
      if (v22 <= 0xF)
      {
LABEL_7:
        fprintf(__stderrp, "ERR: Ip Address List is empty for Rloc=%x\n", a2);
        goto LABEL_8;
      }

      unsigned int v23 = v22 >> 4;
    }

    uint64_t v31 = 0LL;
    uint64_t v32 = 0LL;
    char v27 = 0;
    uint64_t v66 = v23;
    __int16 v64 = a4;
    while (1)
    {
      int v33 = v67 + 3;
      if (*v67 != 255) {
        int v33 = v67 + 1;
      }
      memset(__s, 0, 46);
      inet_ntop(30, &v33[16 * v31], (char *)__s, 0x2Eu);
      sub_10000AC00(v79, (char *)__s);
      std::string __str = *(std::string *)v79;
      uint64_t v34 = sub_1001B02E4(v14, (uint64_t)"Index:", 6LL);
      uint64_t v35 = (void *)std::ostream::operator<<(v34, v32);
      uint64_t v36 = sub_1001B02E4(v35, (uint64_t)" Ipv6 Address: ", 15LL);
      size_t v37 = strlen((const char *)__s);
      sub_1001B02E4(v36, (uint64_t)__s, v37);
      if ((v27 & 1) != 0) {
        goto LABEL_50;
      }
      if (*a5 == 1) {
        break;
      }
      uint64_t v44 = sub_1001B6B04(a8, (unsigned __int8 *)&__str);
      if (!v44)
      {
        char v27 = 0;
        goto LABEL_51;
      }

      uint64_t v45 = (uint64_t)(v44 + 40);
      sub_1001B6434((uint64_t)v79, (uint64_t)(v44 + 40));
      if (v84 != a2) {
        unsigned __int16 v84 = a2;
      }
      uint64_t v46 = a5;
      uint64_t v47 = a8;
      uint64_t v48 = a6;
      sub_1001B606C(v45, (uint64_t)v79);
      uint64_t v49 = a9[1] - *a9;
      if (v49)
      {
        unint64_t v50 = 0xF0F0F0F0F0F0F0F1LL * (v49 >> 3);
        uint64_t v51 = *a9 + 80LL;
        uint64_t v52 = 1LL;
        do
        {
          int v53 = *(char *)(v51 + 23);
          if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type size = __str.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type size = __str.__r_.__value_.__l.__size_;
          }
          if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            p_str = &__str;
          }
          else {
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          if (v53 >= 0) {
            size_t v56 = *(unsigned __int8 *)(v51 + 23);
          }
          else {
            size_t v56 = *(void *)(v51 + 8);
          }
          if (v53 >= 0) {
            uint64_t v57 = (const void *)v51;
          }
          else {
            uint64_t v57 = *(const void **)v51;
          }
          if (v56 >= size) {
            size_t v58 = size;
          }
          else {
            size_t v58 = v56;
          }
          BOOL v59 = !memcmp(p_str, v57, v58) && v56 == size;
          v51 += 136LL;
        }

        while (v50 > (unsigned __int16)v52++);
      }

      uint64_t v61 = sub_1001B02E4(v14, (uint64_t)" Name:", 6LL);
      a4 = v64;
      if (v79[31] >= 0) {
        uint64_t v62 = &v79[8];
      }
      else {
        uint64_t v62 = *(_BYTE **)&v79[8];
      }
      if (v79[31] >= 0) {
        uint64_t v63 = v79[31];
      }
      else {
        uint64_t v63 = *(void *)&v79[16];
      }
      sub_1001B02E4(v61, (uint64_t)v62, v63);
      std::string::operator=(v64, (const std::string *)&v79[8]);
      a6 = v48;
      a8 = v47;
      a5 = v46;
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (SHIBYTE(v82) < 0) {
        operator delete(*((void **)&v81 + 1));
      }
      if (SBYTE7(v81) < 0) {
        operator delete((void *)v80);
      }
      if ((v79[55] & 0x80000000) != 0) {
        operator delete(*(void **)&v79[32]);
      }
      if ((v79[31] & 0x80000000) != 0)
      {
        uint64_t v43 = *(void **)&v79[8];
LABEL_115:
        operator delete(v43);
      }

void sub_1001BCFBC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *__p, uint64_t a25, int a26, __int16 a27, char a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, void *a44, uint64_t a45, int a46, __int16 a47, char a48, char a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,std::locale a57)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  _Unwind_Resume(a1);
}

uint64_t NetworkDiagnosticsLogger::output_node_to_dot_file( void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, void *a8, void *a9, void *a10)
{
  uint64_t v16 = sub_1001B02E4(a1, (uint64_t)"", 1LL);
  int v17 = *(char *)(a3 + 23);
  if (v17 >= 0) {
    uint64_t v18 = a3;
  }
  else {
    uint64_t v18 = *(void *)a3;
  }
  if (v17 >= 0) {
    uint64_t v19 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v19 = *(void *)(a3 + 8);
  }
  uint64_t v20 = sub_1001B02E4(v16, v18, v19);
  sub_1001B02E4(v20, (uint64_t)"", 1LL);
  if (getRloc16FromRouterId(a7) == a2)
  {
    uint64_t v21 = sub_1001B02E4(a1, (uint64_t)" [shape=box] [color=green] ", 27LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24LL)));
    unsigned int v22 = std::locale::use_facet(&v39, &std::ctype<char>::id);
    uint64_t v23 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10LL);
  }

  else
  {
    int NodeType = getNodeType(a2, a8, a9, a10);
    if (NodeType)
    {
      if (NodeType == 1)
      {
        uint64_t v21 = sub_1001B02E4(a1, (uint64_t)" [shape=circle] [color=red] ", 28LL);
        std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24LL)));
        char v27 = std::locale::use_facet(&v39, &std::ctype<char>::id);
        uint64_t v23 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10LL);
      }

      else
      {
        if (NodeType == 2) {
          uint64_t v21 = sub_1001B02E4(a1, (uint64_t)" [shape=box] [color=blue] ", 26LL);
        }
        else {
          uint64_t v21 = sub_1001B02E4(a1, (uint64_t)" [shape=box] [color=black] ", 27LL);
        }
        std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24LL)));
        uint64_t v25 = std::locale::use_facet(&v39, &std::ctype<char>::id);
        uint64_t v23 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10LL);
      }
    }

    else
    {
      uint64_t v21 = sub_1001B02E4(a1, (uint64_t)" [shape=circle] [color=orange] ", 31LL);
      std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24LL)));
      uint64_t v26 = std::locale::use_facet(&v39, &std::ctype<char>::id);
      uint64_t v23 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10LL);
    }
  }

  uint64_t v28 = v23;
  std::locale::~locale(&v39);
  std::ostream::put(v21, v28);
  std::ostream::flush(v21);
  uint64_t v29 = *(unsigned __int8 *)(a5 + 23);
  if ((v29 & 0x80u) != 0LL) {
    uint64_t v29 = *(void *)(a5 + 8);
  }
  if (v29)
  {
    sub_1001B02E4(a1, (uint64_t)"[ xlabel=<<font color=violet> <B> <I>", 39LL);
    uint64_t v30 = sub_1001B02E4(a1, (uint64_t)" ", 2LL);
    int v31 = *(char *)(a5 + 23);
    if (v31 >= 0) {
      uint64_t v32 = a5;
    }
    else {
      uint64_t v32 = *(void *)a5;
    }
    if (v31 >= 0) {
      uint64_t v33 = *(unsigned __int8 *)(a5 + 23);
    }
    else {
      uint64_t v33 = *(void *)(a5 + 8);
    }
    uint64_t v34 = sub_1001B02E4(v30, v32, v33);
    sub_1001B02E4(v34, (uint64_t)"", 1LL);
    sub_1001B02E4(a1, (uint64_t)"</I></B></font>> ]", 18LL);
  }

  uint64_t v35 = sub_1001B02E4(a1, (uint64_t)";", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(void *)(*v35 - 24LL)));
  uint64_t v36 = std::locale::use_facet(&v39, &std::ctype<char>::id);
  uint64_t v37 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10LL);
  std::locale::~locale(&v39);
  std::ostream::put(v35, v37);
  return std::ostream::flush(v35);
}

void sub_1001BD3D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t NetworkDiagnosticsLogger::output_routeTlv_to_file( void *a1, int a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v7 = *(void *)(a4 + 8);
  std::locale v8 = a1 + 71;
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(a1[71] - 24LL) + 568));
  uint64_t v9 = std::locale::use_facet(&v86, &std::ctype<char>::id);
  uint64_t v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10LL);
  std::locale::~locale(&v86);
  std::ostream::put(v8, v10);
  std::ostream::flush(v8);
  uint64_t v11 = sub_1001B02E4(v8, (uint64_t)"Route: ", 7LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24LL)));
  uint64_t v12 = std::locale::use_facet(&v86, &std::ctype<char>::id);
  uint64_t v13 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10LL);
  std::locale::~locale(&v86);
  std::ostream::put(v11, v13);
  std::ostream::flush(v11);
  int v14 = sub_1001B02E4(v8, (uint64_t)"------ ", 7LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24LL)));
  uint64_t v15 = std::locale::use_facet(&v86, &std::ctype<char>::id);
  uint64_t v16 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10LL);
  std::locale::~locale(&v86);
  std::ostream::put(v14, v16);
  std::ostream::flush(v14);
  if (v7)
  {
    unsigned int v17 = *(unsigned __int8 *)(v7 + 1);
    if (v17 == 255) {
      unsigned int v17 = bswap32(*(unsigned __int16 *)(v7 + 2)) >> 16;
    }
    if (v17 <= 8)
    {
      std::locale v8 = sub_1001B02E4(v8, (uint64_t)"ERR: Route information not valid", 32LL);
      std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24LL)));
      __int128 v81 = std::locale::use_facet(&v86, &std::ctype<char>::id);
      uint64_t v79 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v81->__vftable[2].~facet_0)(v81, 10LL);
    }

    else
    {
      uint64_t v18 = sub_1001B02E4(v8, (uint64_t)"RouterSequenceId:", 17LL);
      uint64_t v19 = (void *)std::ostream::operator<<(v18, *(unsigned __int8 *)(v7 + 2));
      std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24LL)));
      uint64_t v20 = std::locale::use_facet(&v86, &std::ctype<char>::id);
      uint64_t v21 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10LL);
      std::locale::~locale(&v86);
      std::ostream::put(v19, v21);
      std::ostream::flush(v19);
      std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24LL)));
      unsigned int v22 = std::locale::use_facet(&v86, &std::ctype<char>::id);
      uint64_t v23 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10LL);
      std::locale::~locale(&v86);
      std::ostream::put(v19, v23);
      std::ostream::flush(v19);
      uint64_t v24 = 0LL;
      unsigned __int8 v25 = 0;
      do
      {
        if (((*(unsigned __int8 *)(v7 + (v24 >> 3) + 3) << (v24 & 7)) & 0x80) != 0)
        {
          v86.__locale_ = 0LL;
          uint64_t v87 = 0LL;
          uint64_t v88 = 0LL;
          uint64_t Rloc16FromRouterId = getRloc16FromRouterId(v24);
          int v27 = Rloc16FromRouterId;
          convertUint16ToHexString(Rloc16FromRouterId, (uint64_t)&v86);
          unsigned int v28 = *(unsigned __int8 *)(v7 + v25 + 11);
          uint64_t v29 = sub_1001B02E4(v8, (uint64_t)"RouteId:", 8LL);
          uint64_t v30 = (void *)std::ostream::operator<<(v29, v24);
          sub_1001B02E4(v30, (uint64_t)",  ", 3LL);
          int v31 = sub_1001B02E4(v8, (uint64_t)"Rloc16:", 7LL);
          if (v88 >= 0) {
            locale = &v86;
          }
          else {
            locale = v86.__locale_;
          }
          if (v88 >= 0) {
            uint64_t v33 = HIBYTE(v88);
          }
          else {
            uint64_t v33 = v87;
          }
          uint64_t v34 = sub_1001B02E4(v31, (uint64_t)locale, v33);
          sub_1001B02E4(v34, (uint64_t)",  ", 3LL);
          uint64_t v35 = sub_1001B02E4(v8, (uint64_t)"Cost:", 5LL);
          uint64_t v36 = (void *)std::ostream::operator<<(v35, v28 & 0xF);
          sub_1001B02E4(v36, (uint64_t)",  ", 3LL);
          uint64_t v37 = sub_1001B02E4(v8, (uint64_t)"LQIn:", 5LL);
          uint64_t v38 = (void *)std::ostream::operator<<(v37, (v28 >> 4) & 3);
          sub_1001B02E4(v38, (uint64_t)",  ", 3LL);
          std::locale v39 = sub_1001B02E4(v8, (uint64_t)"LQOut:", 6LL);
          uint64_t v40 = (ot *)(v28 >> 6);
          size_t v41 = (void *)std::ostream::operator<<(v39, v40);
          sub_1001B02E4(v41, (uint64_t)",  ", 3LL);
          std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24LL)));
          uint64_t v42 = std::locale::use_facet(&v89, &std::ctype<char>::id);
          uint64_t v43 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10LL);
          std::locale::~locale(&v89);
          std::ostream::put(v8, v43);
          std::ostream::flush(v8);
          if (v27 != a2 && ot::LinkQualityToCost(v40) != 16)
          {
            if ((a5 & 1) != 0)
            {
              uint64_t v44 = sub_1001B02E4(a1, (uint64_t)"", 1LL);
              int v45 = *(char *)(a3 + 23);
              if (v45 >= 0) {
                uint64_t v46 = a3;
              }
              else {
                uint64_t v46 = *(void *)a3;
              }
              if (v45 >= 0) {
                uint64_t v47 = *(unsigned __int8 *)(a3 + 23);
              }
              else {
                uint64_t v47 = *(void *)(a3 + 8);
              }
              uint64_t v48 = sub_1001B02E4(v44, v46, v47);
              uint64_t v49 = sub_1001B02E4(v48, (uint64_t)"", 1LL);
              unint64_t v50 = sub_1001B02E4(v49, (uint64_t)" -> ", 4LL);
              uint64_t v51 = sub_1001B02E4(v50, (uint64_t)"", 1LL);
              if (v88 >= 0) {
                uint64_t v52 = &v86;
              }
              else {
                uint64_t v52 = v86.__locale_;
              }
              if (v88 >= 0) {
                uint64_t v53 = HIBYTE(v88);
              }
              else {
                uint64_t v53 = v87;
              }
              uint64_t v54 = sub_1001B02E4(v51, (uint64_t)v52, v53);
              uint64_t v55 = sub_1001B02E4(v54, (uint64_t)"", 1LL);
              size_t v56 = sub_1001B02E4(v55, (uint64_t)"[label=", 8LL);
              uint64_t v57 = ot::LinkQualityToCost(v40);
              size_t v58 = (void *)std::ostream::operator<<(v56, v57);
              BOOL v59 = sub_1001B02E4(v58, (uint64_t)" weight=", 10LL);
              uint64_t v60 = ot::LinkQualityToCost(v40);
              uint64_t v61 = (void *)std::ostream::operator<<(v59, v60);
              uint64_t v62 = sub_1001B02E4(v61, (uint64_t)"     ];", 8LL);
              std::ios_base::getloc((const std::ios_base *)((char *)v62 + *(void *)(*v62 - 24LL)));
              uint64_t v63 = std::locale::use_facet(&v89, &std::ctype<char>::id);
              uint64_t v64 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v63->__vftable[2].~facet_0)(v63, 10LL);
              std::locale::~locale(&v89);
              std::ostream::put(v62, v64);
            }

            else
            {
              uint64_t v65 = sub_1001B02E4(a1, (uint64_t)"", 1LL);
              int v66 = *(char *)(a3 + 23);
              if (v66 >= 0) {
                uint64_t v67 = a3;
              }
              else {
                uint64_t v67 = *(void *)a3;
              }
              if (v66 >= 0) {
                uint64_t v68 = *(unsigned __int8 *)(a3 + 23);
              }
              else {
                uint64_t v68 = *(void *)(a3 + 8);
              }
              uint64_t v69 = sub_1001B02E4(v65, v67, v68);
              __int128 v70 = sub_1001B02E4(v69, (uint64_t)"", 1LL);
              __int128 v71 = sub_1001B02E4(v70, (uint64_t)" -> ", 4LL);
              __int128 v72 = sub_1001B02E4(v71, (uint64_t)"", 1LL);
              if (v88 >= 0) {
                uint64_t v73 = &v86;
              }
              else {
                uint64_t v73 = v86.__locale_;
              }
              if (v88 >= 0) {
                uint64_t v74 = HIBYTE(v88);
              }
              else {
                uint64_t v74 = v87;
              }
              int v75 = sub_1001B02E4(v72, (uint64_t)v73, v74);
              uint64_t v62 = sub_1001B02E4(v75, (uint64_t)";", 2LL);
              std::ios_base::getloc((const std::ios_base *)((char *)v62 + *(void *)(*v62 - 24LL)));
              __int128 v76 = std::locale::use_facet(&v89, &std::ctype<char>::id);
              uint64_t v77 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v76->__vftable[2].~facet_0)(v76, 10LL);
              std::locale::~locale(&v89);
              std::ostream::put(v62, v77);
            }

            std::ostream::flush(v62);
          }

          if (SHIBYTE(v88) < 0) {
            operator delete(v86.__locale_);
          }
          ++v25;
        }

        uint64_t v24 = (v24 + 1);
      }

      while ((_DWORD)v24 != 63);
      std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24LL)));
      uint64_t v78 = std::locale::use_facet(&v86, &std::ctype<char>::id);
      uint64_t v79 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v78->__vftable[2].~facet_0)(v78, 10LL);
    }
  }

  else
  {
    std::locale v8 = sub_1001B02E4(v8, (uint64_t)"ERR: Route information not present", 34LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24LL)));
    __int128 v80 = std::locale::use_facet(&v86, &std::ctype<char>::id);
    uint64_t v79 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v80->__vftable[2].~facet_0)(v80, 10LL);
  }

  uint64_t v82 = v79;
  std::locale::~locale(&v86);
  std::ostream::put(v8, v82);
  return std::ostream::flush(v8);
}

void sub_1001BDB54( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, std::locale a17)
{
}

uint64_t NetworkDiagnosticsLogger::output_connectivityTlv_to_file(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)(a1 + 568);
  std::ios_base::getloc((const std::ios_base *)(a1 + 568 + *(void *)(*(void *)(a1 + 568) - 24LL)));
  uint64_t v5 = std::locale::use_facet(&v38, &std::ctype<char>::id);
  uint64_t v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10LL);
  std::locale::~locale(&v38);
  std::ostream::put(v4, v6);
  std::ostream::flush(v4);
  uint64_t v7 = sub_1001B02E4(v4, (uint64_t)"ConnectivityTLV: ", 17LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24LL)));
  std::locale v8 = std::locale::use_facet(&v38, &std::ctype<char>::id);
  uint64_t v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10LL);
  std::locale::~locale(&v38);
  std::ostream::put(v7, v9);
  std::ostream::flush(v7);
  uint64_t v10 = sub_1001B02E4(v4, (uint64_t)"----------------", 16LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24LL)));
  uint64_t v11 = std::locale::use_facet(&v38, &std::ctype<char>::id);
  uint64_t v12 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10LL);
  std::locale::~locale(&v38);
  std::ostream::put(v10, v12);
  std::ostream::flush(v10);
  uint64_t v13 = *(void *)(a3 + 40);
  if (!v13)
  {
    unsigned int v28 = sub_1001B02E4(v4, (uint64_t)"Connectivity TLV not present", 28LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(void *)(*v28 - 24LL)));
    uint64_t v29 = std::locale::use_facet(&v38, &std::ctype<char>::id);
    uint64_t v30 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10LL);
LABEL_9:
    uint64_t v32 = v30;
    std::locale::~locale(&v38);
    std::ostream::put(v28, v32);
    goto LABEL_10;
  }

  unsigned int v14 = *(unsigned __int8 *)(v13 + 1);
  if (v14 == 255) {
    unsigned int v14 = bswap32(*(unsigned __int16 *)(v13 + 2)) >> 16;
  }
  if (v14 <= 9 && v14 != 7)
  {
    unsigned int v28 = sub_1001B02E4(v4, (uint64_t)"ERR: Connectivity TLV is not valid", 34LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(void *)(*v28 - 24LL)));
    int v31 = std::locale::use_facet(&v38, &std::ctype<char>::id);
    uint64_t v30 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10LL);
    goto LABEL_9;
  }

  uint64_t v15 = sub_1001B02E4(v4, (uint64_t)"ActiveRouters = ", 16LL);
  std::ostream::operator<<(v15, *(unsigned __int8 *)(v13 + 8));
  uint64_t v16 = sub_1001B02E4(v4, (uint64_t)"  IdSequence = ", 15LL);
  std::ostream::operator<<(v16, *(unsigned __int8 *)(v13 + 7));
  unsigned int v17 = sub_1001B02E4(v4, (uint64_t)"  LeaderCost = ", 15LL);
  std::ostream::operator<<(v17, *(unsigned __int8 *)(v13 + 6));
  uint64_t v18 = sub_1001B02E4(v4, (uint64_t)"  Parentpriority = ", 19LL);
  std::ostream::operator<<(v18, 0LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24LL)));
  uint64_t v19 = std::locale::use_facet(&v38, &std::ctype<char>::id);
  uint64_t v20 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10LL);
  std::locale::~locale(&v38);
  std::ostream::put(v4, v20);
  std::ostream::flush(v4);
  uint64_t v21 = sub_1001B02E4(v4, (uint64_t)"  SEDBuffersize = ", 18LL);
  std::ostream::operator<<(v21, bswap32(*(unsigned __int16 *)(v13 + 9)) >> 16);
  unsigned int v22 = sub_1001B02E4(v4, (uint64_t)"  SEDDatagramCount = ", 21LL);
  std::ostream::operator<<(v22, *(unsigned __int8 *)(v13 + 11));
  uint64_t v23 = sub_1001B02E4(v4, (uint64_t)"  LQ1= ", 7LL);
  std::ostream::operator<<(v23, *(unsigned __int8 *)(v13 + 5));
  uint64_t v24 = sub_1001B02E4(v4, (uint64_t)"  LQ2= ", 7LL);
  std::ostream::operator<<(v24, *(unsigned __int8 *)(v13 + 4));
  unsigned __int8 v25 = sub_1001B02E4(v4, (uint64_t)"  LQ3= ", 7LL);
  std::ostream::operator<<(v25, *(unsigned __int8 *)(v13 + 3));
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24LL)));
  uint64_t v26 = std::locale::use_facet(&v38, &std::ctype<char>::id);
  uint64_t v27 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10LL);
  std::locale::~locale(&v38);
  std::ostream::put(v4, v27);
  unsigned int v28 = v4;
LABEL_10:
  std::ostream::flush(v28);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24LL)));
  uint64_t v33 = std::locale::use_facet(&v38, &std::ctype<char>::id);
  uint64_t v34 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10LL);
  std::locale::~locale(&v38);
  std::ostream::put(v4, v34);
  std::ostream::flush(v4);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24LL)));
  uint64_t v35 = std::locale::use_facet(&v38, &std::ctype<char>::id);
  uint64_t v36 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10LL);
  std::locale::~locale(&v38);
  std::ostream::put(v4, v36);
  return std::ostream::flush(v4);
}

void sub_1001BE054( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t NetworkDiagnosticsLogger::output_macCountersTlv_to_file(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)(a1 + 568);
  uint64_t v5 = sub_1001B02E4((void *)(a1 + 568), (uint64_t)"MacCountersTLV: ", 16LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24LL)));
  uint64_t v6 = std::locale::use_facet(&v29, &std::ctype<char>::id);
  uint64_t v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10LL);
  std::locale::~locale(&v29);
  std::ostream::put(v5, v7);
  std::ostream::flush(v5);
  std::locale v8 = sub_1001B02E4(v4, (uint64_t)"----------------", 16LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24LL)));
  uint64_t v9 = std::locale::use_facet(&v29, &std::ctype<char>::id);
  uint64_t v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10LL);
  std::locale::~locale(&v29);
  std::ostream::put(v8, v10);
  std::ostream::flush(v8);
  uint64_t v11 = *(void *)(a3 + 32);
  if (v11)
  {
    unsigned int v12 = *(unsigned __int8 *)(v11 + 1);
    if (v12 == 255) {
      unsigned int v12 = bswap32(*(unsigned __int16 *)(v11 + 2)) >> 16;
    }
    if (v12 <= 0x23)
    {
      uint64_t v4 = sub_1001B02E4(v4, (uint64_t)"ERR: Mac counters TLV is not valid", 34LL);
    }

    else
    {
      uint64_t v13 = sub_1001B02E4(v4, (uint64_t)"IfInUcastPkts = ", 16LL);
      std::ostream::operator<<(v13, bswap32(*(_DWORD *)(v11 + 14)));
      unsigned int v14 = sub_1001B02E4(v4, (uint64_t)"   IfOutUcastPkts = ", 20LL);
      std::ostream::operator<<(v14, bswap32(*(_DWORD *)(v11 + 26)));
      uint64_t v15 = sub_1001B02E4(v4, (uint64_t)"   IfInBcastPkts = ", 19LL);
      std::ostream::operator<<(v15, bswap32(*(_DWORD *)(v11 + 18)));
      uint64_t v16 = sub_1001B02E4(v4, (uint64_t)"   IfOutBcastPkts = ", 20LL);
      std::ostream::operator<<(v16, bswap32(*(_DWORD *)(v11 + 30)));
      std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24LL)));
      unsigned int v17 = std::locale::use_facet(&v29, &std::ctype<char>::id);
      uint64_t v18 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10LL);
      std::locale::~locale(&v29);
      std::ostream::put(v4, v18);
      std::ostream::flush(v4);
      uint64_t v19 = sub_1001B02E4(v4, (uint64_t)"IfInErrors=", 11LL);
      std::ostream::operator<<(v19, bswap32(*(_DWORD *)(v11 + 6)));
      uint64_t v20 = sub_1001B02E4(v4, (uint64_t)"   IfOutErrors = ", 17LL);
      std::ostream::operator<<(v20, bswap32(*(_DWORD *)(v11 + 10)));
      uint64_t v21 = sub_1001B02E4(v4, (uint64_t)"   IfInDiscards = ", 18LL);
      std::ostream::operator<<(v21, bswap32(*(_DWORD *)(v11 + 22)));
      unsigned int v22 = sub_1001B02E4(v4, (uint64_t)"   IfOutDiscards = ", 19LL);
      std::ostream::operator<<(v22, bswap32(*(_DWORD *)(v11 + 34)));
      uint64_t v23 = sub_1001B02E4(v4, (uint64_t)"   IfUnknownProtos = ", 21LL);
      std::ostream::operator<<(v23, bswap32(*(_DWORD *)(v11 + 2)));
    }

    std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24LL)));
    uint64_t v24 = std::locale::use_facet(&v29, &std::ctype<char>::id);
    uint64_t v25 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10LL);
  }

  else
  {
    uint64_t v4 = sub_1001B02E4(v4, (uint64_t)"ERR: Mac counters TLV not present", 33LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24LL)));
    uint64_t v26 = std::locale::use_facet(&v29, &std::ctype<char>::id);
    uint64_t v25 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10LL);
  }

  uint64_t v27 = v25;
  std::locale::~locale(&v29);
  std::ostream::put(v4, v27);
  return std::ostream::flush(v4);
}

void sub_1001BE420( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t NetworkDiagnosticsLogger::output_childTableTlv_to_file( void *a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  std::locale v8 = a1 + 71;
  uint64_t v9 = sub_1001B02E4(a1 + 71, (uint64_t)"ChildTable: ", 12LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24LL)));
  uint64_t v10 = std::locale::use_facet(&v92, &std::ctype<char>::id);
  uint64_t v11 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10LL);
  std::locale::~locale(&v92);
  std::ostream::put(v9, v11);
  std::ostream::flush(v9);
  unsigned int v12 = sub_1001B02E4(v8, (uint64_t)"----------- ", 12LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24LL)));
  uint64_t v13 = std::locale::use_facet(&v92, &std::ctype<char>::id);
  uint64_t v14 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10LL);
  std::locale::~locale(&v92);
  std::ostream::put(v12, v14);
  std::ostream::flush(v12);
  uint64_t v15 = *(void *)(a4 + 16);
  sub_1001BC218((uint64_t)&v92);
  if (!v15)
  {
    uint64_t v18 = sub_1001B02E4(v8, (uint64_t)"ERR: ChildTable information not present", 39LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24LL)));
    uint64_t v19 = std::locale::use_facet(&v89, &std::ctype<char>::id);
    uint64_t v20 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10LL);
    std::locale::~locale(&v89);
    std::ostream::put(v18, v20);
LABEL_8:
    std::ostream::flush(v18);
    goto LABEL_53;
  }

  int v16 = *(unsigned __int8 *)(v15 + 1);
  if (v16 == 255)
  {
    unsigned int v17 = bswap32(*(unsigned __int16 *)(v15 + 2)) >> 16;
    goto LABEL_7;
  }

  if ((-1431655765 * v16) >= 0x55555556)
  {
LABEL_7:
    uint64_t v18 = sub_1001B02E4(v8, (uint64_t)"ERR: ChildTable information not valid", 37LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24LL)));
    uint64_t v21 = std::locale::use_facet(&v89, &std::ctype<char>::id);
    uint64_t v22 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10LL);
    std::locale::~locale(&v89);
    std::ostream::put(v18, v22);
    goto LABEL_8;
  }

  unsigned int v17 = *(unsigned __int8 *)(v15 + 1);
LABEL_10:
  unsigned int v23 = 43691 * v17;
  if ((v23 >> 17))
  {
    unsigned int v24 = v23 >> 17;
    BOOL v25 = v16 == 255;
    uint64_t v26 = v15 + 3;
    if (!v25) {
      uint64_t v26 = v15 + 1;
    }
    uint64_t v27 = v26 + 1;
    uint64_t v28 = v24;
    do
    {
      v89.__locale_ = 0LL;
      uint64_t v90 = 0LL;
      uint64_t v91 = 0LL;
      uint64_t Rloc16FromChildId = getRloc16FromChildId(a2, bswap32(*(_WORD *)v27 & 0xFF01) >> 16);
      unsigned __int16 v88 = Rloc16FromChildId;
      convertUint16ToHexString(Rloc16FromChildId, (uint64_t)&v89);
      if ((*(_BYTE *)(v27 + 2) & 8) != 0)
      {
        sub_1001BEEEC(a5, &v88, &v88);
        std::locale v38 = sub_1001B02E4(&v93, (uint64_t)"", 1LL);
        if (v91 >= 0) {
          locale = &v89;
        }
        else {
          locale = v89.__locale_;
        }
        if (v91 >= 0) {
          uint64_t v40 = HIBYTE(v91);
        }
        else {
          uint64_t v40 = v90;
        }
        size_t v41 = sub_1001B02E4(v38, (uint64_t)locale, v40);
        uint64_t v42 = sub_1001B02E4(v41, (uint64_t)"", 1LL);
        uint64_t v43 = sub_1001B02E4(v42, (uint64_t)" [shape=circle,color=red];", 26LL);
        std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(void *)(*v43 - 24LL)));
        uint64_t v44 = std::locale::use_facet(&v100, &std::ctype<char>::id);
        uint64_t v45 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10LL);
        std::locale::~locale(&v100);
        std::ostream::put(v43, v45);
        std::ostream::flush(v43);
      }

      else
      {
        sub_1001BEEEC(a6, &v88, &v88);
        uint64_t v30 = sub_1001B02E4(&v93, (uint64_t)"", 1LL);
        if (v91 >= 0) {
          int v31 = &v89;
        }
        else {
          int v31 = v89.__locale_;
        }
        if (v91 >= 0) {
          uint64_t v32 = HIBYTE(v91);
        }
        else {
          uint64_t v32 = v90;
        }
        uint64_t v33 = sub_1001B02E4(v30, (uint64_t)v31, v32);
        uint64_t v34 = sub_1001B02E4(v33, (uint64_t)"", 1LL);
        uint64_t v35 = sub_1001B02E4(v34, (uint64_t)" [shape=circle,color=orange];", 29LL);
        std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(void *)(*v35 - 24LL)));
        uint64_t v36 = std::locale::use_facet(&v100, &std::ctype<char>::id);
        uint64_t v37 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10LL);
        std::locale::~locale(&v100);
        std::ostream::put(v35, v37);
        std::ostream::flush(v35);
      }

      uint64_t v46 = sub_1001B02E4(v8, (uint64_t)"ChildId:", 8LL);
      uint64_t v47 = (void *)std::ostream::operator<<(v46, bswap32(*(_WORD *)v27 & 0xFF01) >> 16);
      sub_1001B02E4(v47, (uint64_t)",  ", 3LL);
      uint64_t v48 = sub_1001B02E4(v8, (uint64_t)"Rloc16:", 7LL);
      if (v91 >= 0) {
        uint64_t v49 = &v89;
      }
      else {
        uint64_t v49 = v89.__locale_;
      }
      if (v91 >= 0) {
        uint64_t v50 = HIBYTE(v91);
      }
      else {
        uint64_t v50 = v90;
      }
      uint64_t v51 = sub_1001B02E4(v48, (uint64_t)v49, v50);
      sub_1001B02E4(v51, (uint64_t)",  ", 3LL);
      uint64_t v52 = sub_1001B02E4(v8, (uint64_t)"Mode:", 5LL);
      uint64_t v53 = (void *)std::ostream::operator<<(v52, *(unsigned __int8 *)(v27 + 2));
      sub_1001B02E4(v53, (uint64_t)",  ", 3LL);
      uint64_t v54 = sub_1001B02E4(v8, (uint64_t)"Timeout:", 8LL);
      std::ostream::operator<<(v54, *(_WORD *)v27 >> 3);
      std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24LL)));
      uint64_t v55 = std::locale::use_facet(&v100, &std::ctype<char>::id);
      uint64_t v56 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10LL);
      std::locale::~locale(&v100);
      std::ostream::put(v8, v56);
      std::ostream::flush(v8);
      uint64_t v57 = sub_1001B02E4(a1, (uint64_t)"", 1LL);
      int v58 = *(char *)(a3 + 23);
      if (v58 >= 0) {
        uint64_t v59 = a3;
      }
      else {
        uint64_t v59 = *(void *)a3;
      }
      if (v58 >= 0) {
        uint64_t v60 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v60 = *(void *)(a3 + 8);
      }
      uint64_t v61 = sub_1001B02E4(v57, v59, v60);
      uint64_t v62 = sub_1001B02E4(v61, (uint64_t)"", 1LL);
      uint64_t v63 = sub_1001B02E4(v62, (uint64_t)" -> ", 4LL);
      uint64_t v64 = sub_1001B02E4(v63, (uint64_t)"", 1LL);
      if (v91 >= 0) {
        uint64_t v65 = &v89;
      }
      else {
        uint64_t v65 = v89.__locale_;
      }
      if (v91 >= 0) {
        uint64_t v66 = HIBYTE(v91);
      }
      else {
        uint64_t v66 = v90;
      }
      uint64_t v67 = sub_1001B02E4(v64, (uint64_t)v65, v66);
      uint64_t v68 = sub_1001B02E4(v67, (uint64_t)"", 1LL);
      uint64_t v69 = sub_1001B02E4(v68, (uint64_t)"[color=brown];", 16LL);
      std::ios_base::getloc((const std::ios_base *)((char *)v69 + *(void *)(*v69 - 24LL)));
      __int128 v70 = std::locale::use_facet(&v100, &std::ctype<char>::id);
      uint64_t v71 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v70->__vftable[2].~facet_0)(v70, 10LL);
      std::locale::~locale(&v100);
      std::ostream::put(v69, v71);
      std::ostream::flush(v69);
      if (SHIBYTE(v91) < 0) {
        operator delete(v89.__locale_);
      }
      v27 += 3LL;
      --v28;
    }

    while (v28);
  }

  else
  {
    __int128 v72 = sub_1001B02E4(v8, (uint64_t)"ChildTable empty", 16LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v72 + *(void *)(*v72 - 24LL)));
    uint64_t v73 = std::locale::use_facet(&v89, &std::ctype<char>::id);
    uint64_t v74 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v73->__vftable[2].~facet_0)(v73, 10LL);
    std::locale::~locale(&v89);
    std::ostream::put(v72, v74);
    std::ostream::flush(v72);
  }

  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24LL)));
  int v75 = std::locale::use_facet(&v89, &std::ctype<char>::id);
  uint64_t v76 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v75->__vftable[2].~facet_0)(v75, 10LL);
  std::locale::~locale(&v89);
  std::ostream::put(v8, v76);
  std::ostream::flush(v8);
LABEL_53:
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24LL)));
  uint64_t v77 = std::locale::use_facet(&v89, &std::ctype<char>::id);
  uint64_t v78 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v77->__vftable[2].~facet_0)(v77, 10LL);
  std::locale::~locale(&v89);
  std::ostream::put(v8, v78);
  std::ostream::flush(v8);
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24LL)));
  uint64_t v79 = std::locale::use_facet(&v89, &std::ctype<char>::id);
  uint64_t v80 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v79->__vftable[2].~facet_0)(v79, 10LL);
  std::locale::~locale(&v89);
  std::ostream::put(v8, v80);
  std::ostream::flush(v8);
  if (v95 >= v96) {
    uint64_t v81 = (*(uint64_t (**)(void *))(v94[0] + 56LL))(v94);
  }
  else {
    uint64_t v81 = v96 - v95;
  }
  if (v81) {
    std::ostream::operator<<(a1, v94);
  }
  *(void *)((char *)&v92
  uint64_t v93 = v82;
  if (v98 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf(v94);
  return std::ios::~ios(&v99);
}

void sub_1001BEC98( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, std::locale a21)
{
}

void NetworkDiagnosticsLogger::output_data_to_file( void *a1, uint64_t a2, uint64_t a3, _DWORD *a4, void *a5, void *a6, void *a7)
{
  unsigned int v12 = a2;
  uint64_t v14 = a1[497];
  uint64_t v15 = a1[498];
  int v16 = *(unsigned __int8 *)(v15 + 49);
  int v21 = *(unsigned __int8 *)(v15 + 48);
  int v22 = *(unsigned __int8 *)(v15 + 50);
  __int16 v17 = *(_WORD *)(v15 + 6640);
  v24[0] = 0LL;
  v24[1] = 0LL;
  uint64_t v25 = 0LL;
  convertUint16ToHexString(a2, (uint64_t)v24);
  NetworkDiagnosticsLogger::output_addr16tlv_to_file((uint64_t)a1, v12, (uint64_t)v24, v18, a4, (uint64_t)a5, (uint64_t)a6);
  memset(&__p, 0, sizeof(__p));
  NetworkDiagnosticsLogger::output_ipAddrListTlv_to_file( (uint64_t)a1,  v12,  a3,  &__p,  a4,  v16 != 0,  v14 + 72,  (void *)(v14 + 32),  (void *)(v14 + 8));
  NetworkDiagnosticsLogger::output_node_to_dot_file(a1, v12, (uint64_t)v24, v19, (uint64_t)&__p, v20, v17, a5, a6, a7);
  if (*a4 != 3)
  {
    NetworkDiagnosticsLogger::output_routeTlv_to_file(a1, v12, (uint64_t)v24, a3, v21 != 0);
    NetworkDiagnosticsLogger::output_childTableTlv_to_file(a1, v12, (uint64_t)v24, a3, (uint64_t)a6, (uint64_t)a7);
  }

  if (v22)
  {
    NetworkDiagnosticsLogger::output_macCountersTlv_to_file((uint64_t)a1, 0LL, a3);
    NetworkDiagnosticsLogger::output_connectivityTlv_to_file((uint64_t)a1, 0LL, a3);
  }

  if (SHIBYTE(v25) < 0) {
    operator delete(v24[0]);
  }
}

void sub_1001BEEB8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1001BEEEC(uint64_t a1, unsigned __int16 *a2, _WORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v7 - 1) & v6;
    }

    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
          }

          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }

            else
            {
              v11 &= v7 - 1;
            }

            if (v11 != v3) {
              break;
            }
          }

          uint64_t v10 = (void *)*v10;
        }

        while (v10);
      }
    }
  }

  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = 0LL;
  v10[1] = v6;
  *((_WORD *)v10 + std::iostream::~basic_iostream(v2, v3 + 8) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1LL;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_1001ACE48(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v7 - 1) & v6;
    }
  }

  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t v10 = *v19;
LABEL_38:
    *uint64_t v19 = v10;
    goto LABEL_39;
  }

  *uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * sub_1001B7514((void *)&_mh_execute_header, v0, v1, "TDM: Error inside MyBrowseCallBack %ld,%ld", v2, v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8LL);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }

    else
    {
      v20 &= v7 - 1;
    }

    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }

void sub_1001BF0F4(_Unwind_Exception *a1)
{
}

uint64_t ot::LinkQualityToCost(ot *this)
{
  unsigned int v1 = 0x1020410u >> (8 * (_BYTE)this);
  return v1;
}

BOOL ot::IsLoopback(ot *this, unsigned int *a2)
{
  return !*(_DWORD *)this && !*((_DWORD *)this + 1) && !*((_DWORD *)this + 2) && *((_DWORD *)this + 3) == 0;
}

BOOL ot::IsLinkLocal(ot *this, unsigned __int16 *a2)
{
  return (*(_WORD *)this & 0xC0FF) == 33022;
}

unsigned __int8 *ot::IsMulticast(unsigned __int8 *this, const unsigned __int8 *a2)
{
  if (this) {
    return (unsigned __int8 *)(*this == 255);
  }
  return this;
}

uint64_t ot::GetScope(ot *this, unsigned __int8 *a2)
{
  if ((*(_WORD *)this & 0xC0FF) == 0x80FE) {
    return 2LL;
  }
  if (*(_DWORD *)this || *((_DWORD *)this + 1)) {
    return 14LL;
  }
  int v4 = *((_DWORD *)this + 2);
  uint64_t result = 14LL;
  if (!v4)
  {
    if (*((_DWORD *)this + 3)) {
      return 14LL;
    }
    else {
      return 0LL;
    }
  }

  return result;
}

ot *ot::IsMulticastLargerThanRealmLocal(ot *this, unsigned __int8 *a2)
{
  if (this)
  {
    else {
      return 0LL;
    }
  }

  return this;
}

unint64_t ot::otPlatTimeGet(ot *this)
{
  return 1000 * v2.tv_sec + v2.tv_usec / 0x3E8uLL;
}

unint64_t ot::MsecToSec(unint64_t this)
{
  return this / 0x3E8;
}

unint64_t ot::UsecToSec(unint64_t this)
{
  return this / 0xF4240;
}

const char *ot::ErrorToString(unsigned int a1)
{
  if (a1 > 0x24) {
    return "UnknownErrorType";
  }
  else {
    return off_1002B55D8[a1];
  }
}

void startThreadDiagnosticsManagerBridge(void)
{
  dispatch_queue_attr_t v0 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_USER_INITIATED, 0);
  unsigned int v1 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v0);
  dispatch_queue_t v2 = dispatch_queue_create("wpantund.TDM.Queue", v1);
  unint64_t v3 = (void *)tdm_queue;
  tdm_queue = (uint64_t)v2;

  if (!tdm_queue)
  {
    float v13 = sub_1000160F4("com.apple.wpantund.tdm", "default");
    BOOL v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      sub_1001BF97C(v14, v15, v16, v17, v18, v19, v20, v21);
    }

    __assert_rtn("startThreadDiagnosticsManagerBridge", "ThreadDiagnosticsManagerBridge.mm", 34, "false");
  }

  int v4 = objc_alloc(&OBJC_CLASS___ThreadDiagnosticsManagerInstance);
  id v5 = -[ThreadDiagnosticsManagerInstance init:](v4, "init:", tdm_queue);
  unint64_t v6 = (void *)tdm_instance;
  tdm_instance = (uint64_t)v5;

  uint64_t v7 = tdm_instance;
  uint8x8_t v8 = sub_1000160F4("com.apple.wpantund.tdm", "default");
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  uint64_t v10 = v9;
  if (!v7)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1001BF9F0(v10, v22, v23, v24, v25, v26, v27, v28);
    }

    __assert_rtn("startThreadDiagnosticsManagerBridge", "ThreadDiagnosticsManagerBridge.mm", 42, "false");
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    int v29 = 136315394;
    uint64_t v30 = "startThreadDiagnosticsManagerBridge";
    __int16 v31 = 2112;
    uint64_t v32 = tdm_instance;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s: Instance is initiated : %@, signalling semaphore.",  (uint8_t *)&v29,  0x16u);
  }

  dispatch_semaphore_signal((dispatch_semaphore_t)tdm_instance_init_semaphore);
  unint64_t v11 = sub_1000160F4("com.apple.wpantund.tdm", "default");
  float v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    int v29 = 136315138;
    uint64_t v30 = "startThreadDiagnosticsManagerBridge";
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "%s: instance semaphore is signalled...",  (uint8_t *)&v29,  0xCu);
  }
}

void threadDiagnosticsManager_MsgHandlerBridge( unint64_t *a1@<X0>, xpc::object *a2@<X1>, void **a3@<X8>)
{
  if (tdm_queue)
  {
    if (!tdm_instance)
    {
      unint64_t v6 = sub_1000160F4("com.apple.wpantund.tdm", "default");
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = "threadDiagnosticsManager_MsgHandlerBridge";
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s: instance semaphore is waiting...",  (uint8_t *)&buf,  0xCu);
      }

      dispatch_semaphore_wait((dispatch_semaphore_t)tdm_instance_init_semaphore, 0xFFFFFFFFFFFFFFFFLL);
    }

    uint8x8_t v8 = sub_1000160F4("com.apple.wpantund.tdm", "default");
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = a1;
      xpc::object::to_string(a2);
      if (v28 >= 0) {
        p___int128 buf = &buf;
      }
      else {
        p___int128 buf = (__int128 *)buf;
      }
      *(_DWORD *)int v29 = 136315394;
      uint64_t v30 = v10;
      __int16 v31 = 2080;
      uint64_t v32 = p_buf;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "TDM Handling command for client %s with inputs %s",  v29,  0x16u);
      if (v28 < 0) {
        operator delete((void *)buf);
      }
    }

    float v12 = (void *)tdm_instance;
    if (*((char *)a1 + 23) < 0)
    {
      sub_100168054(__p, (void *)*a1, a1[1]);
    }

    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a1;
      unint64_t v26 = a1[2];
    }

    sub_1001BF91C(&v24, (id *)a2);
    if (v12) {
      objc_msgSend(v12, "threadDiagnosticsManagerInstance_MsgHandler:message:", __p, &v24);
    }
    else {
      *a3 = 0LL;
    }
    uint64_t v22 = v24;
    uint64_t v24 = 0LL;

    if (SHIBYTE(v26) < 0) {
      operator delete(__p[0]);
    }
  }

  else
  {
    float v13 = sub_1000160F4("com.apple.wpantund.tdm", "default");
    BOOL v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "TDM Msg received from client %s before TDM is started",  (uint8_t *)&buf,  0xCu);
    }

    xpc_object_t v15 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_object_t v16 = v15;
    if (!v15) {
      xpc_object_t v16 = xpc_null_create();
    }

    id v17 = v16;
    uint64_t v18 = v17;
    *a3 = v17;
    if (!v17 || xpc_get_type(v17) != (xpc_type_t)&_xpc_type_dictionary)
    {
      xpc_object_t v19 = xpc_null_create();
      uint64_t v20 = *a3;
      *a3 = v19;
    }

    *(void *)&__int128 buf = a3;
    *((void *)&buf + 1) = "ret";
    sub_1001BF8C4((uint64_t)&buf, &v23);
    xpc_object_t v21 = v23;
    xpc_object_t v23 = 0LL;
  }

void sub_1001BF868( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a2) {
    sub_100006EEC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001BF8C4(uint64_t a1@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t v5 = xpc_null_create();
  sub_1000089EC(a1, &v5, a2);
  xpc_object_t v4 = v5;
  xpc_object_t v5 = 0LL;
}

void **sub_1001BF91C(void **a1, id *a2)
{
  id v3 = *a2;
  *a1 = v3;
  if (!v3)
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v5 = *a1;
    *a1 = v4;
  }

  return a1;
}

void sub_1001BF97C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001BF9F0( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001BFA64()
{
  dispatch_queue_attr_t v0 = objc_autoreleasePoolPush();
  tdm_instance_init_semaphore = (uint64_t)dispatch_semaphore_create(0LL);
  objc_autoreleasePoolPop(v0);
}

void NetworkDiagnosticsManager::NetworkDiagnosticsManager(NetworkDiagnosticsManager *this)
{
  dispatch_queue_t v2 = (NetworkDiagnosticsConfigDb *)((char *)NetworkDiagnosticsConfigDb::NetworkDiagnosticsConfigDb(this) + 6752);
  NetworkDiagnosticsMdnsResolver::NetworkDiagnosticsMdnsResolver(v2, this);
  NetworkDiagnosticsLogger::NetworkDiagnosticsLogger((NetworkDiagnosticsManager *)((char *)this + 7456), v2, this);
  NetworkDiagnosticsReqTransmitReceive::NetworkDiagnosticsReqTransmitReceive( (uint64_t)this + 11448,  (uint64_t)this,  (uint64_t)this + 7456);
  NetworkDiagnosticsPendingConfig::NetworkDiagnosticsPendingConfig((NetworkDiagnosticsManager *)((char *)this + 11736));
  *(_OWORD *)((char *)this + 1176std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
  *((void *)this + 1473) = 0LL;
  *(_BYTE *)(v3 + sub_10000D448(v30 - 56) = 1;
  *(void *)((char *)this + 117sub_10000D448(v30 - 56) = 0xE1A0000000FLL;
  *(_WORD *)(v3 + 1) = 257;
  *(_BYTE *)(v3 + 3) = 1;
  *(_OWORD *)(v3 + 4) = xmmword_10022BF30;
  atomic_store(1u, (unsigned __int8 *)v3);
  *((_DWORD *)this + 2916) = 0;
}

void sub_1001BFB5C(_Unwind_Exception *a1)
{
  xpc_object_t v5 = v4;
  sub_1001BFBA4(v5);
  sub_1001C0660(v3);
  NetworkDiagnosticsMdnsResolver::~NetworkDiagnosticsMdnsResolver(v2);
  sub_1001BFC0C(v1);
  _Unwind_Resume(a1);
}

void *sub_1001BFBA4(void *a1)
{
  dispatch_queue_t v2 = (void *)a1[32];
  if (v2)
  {
    a1[33] = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)a1[28];
  if (v3)
  {
    a1[29] = v3;
    operator delete(v3);
  }

  sub_1001C0618((uint64_t)(a1 + 21));
  sub_1001C0618((uint64_t)(a1 + 16));
  sub_1001C0618((uint64_t)(a1 + 11));
  sub_1001C0618((uint64_t)(a1 + 6));
  sub_1001C0618((uint64_t)(a1 + 1));
  return a1;
}

uint64_t sub_1001BFC0C(uint64_t a1)
{
  dispatch_queue_t v2 = (char *)(a1 + 6639);
  if (v2[72] < 0) {
    operator delete(*(void **)(a1 + 6688));
  }
  if (v2[48] < 0) {
    operator delete(*(void **)(a1 + 6664));
  }
  if (*v2 < 0) {
    operator delete(*(void **)(a1 + 6616));
  }
  sub_1001C07D4((void *)(a1 + 368));
  sub_1001B01F4(a1 + 56);
  return a1;
}

uint64_t NetworkDiagnosticsManager::cleanup(uint64_t this, int a2, int a3)
{
  uint64_t v3 = (_BYTE *)(this + 11792);
  if (!*(_BYTE *)(this + 11792))
  {
    uint64_t v6 = this;
    uint64_t v7 = (_BYTE *)(this + 6736);
    if (*(_BYTE *)(this + 6736))
    {
      int v8 = *(_DWORD *)(this + 6740);
      int v9 = *(unsigned __int8 *)(this + 6744);
      uint64_t v10 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        v11[0] = 67109888;
        v11[1] = v8;
        __int16 v12 = 1024;
        int v13 = v9;
        __int16 v14 = 1024;
        int v15 = a2;
        __int16 v16 = 1024;
        int v17 = a3;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  " NetworkDiagnosticsManager::cleanup sys diag triggerd previously. Restore old config prevSendToChildMode=%d is PrevProcessDnsFlagEnabled=%d status=%d resetFlag=%d ",  (uint8_t *)v11,  0x1Au);
      }

      *(_DWORD *)(v6 + 44) = v8;
      *(_BYTE *)(v6 + 49) = v9;
      *uint64_t v7 = 0;
      v7[8] = 1;
      *(_DWORD *)(v6 + 67memset(&v22.ai_socktype, 0, 40) = 2;
    }

    NetworkDiagnosticsReqTransmitReceive::cleanup((NetworkDiagnosticsLogger **)(v6 + 11448), a2, a3);
    NetworkDiagnosticsMdnsResolver::cleanup((NetworkDiagnosticsMdnsResolver *)(v6 + 6752), a2, a3);
    if (a3) {
      *(void *)(v6 + 117memset(v31, 0, 76) = *(void *)(v6 + 11768);
    }
    this = NetworkDiagnosticsConfigDb::closeFiles((NetworkDiagnosticsConfigDb *)v6);
    _BYTE *v3 = 1;
  }

  return this;
}

uint64_t NetworkDiagnosticsManager::cleanupForNextIteration( NetworkDiagnosticsManager *this, double a2, double a3)
{
  if (*((_BYTE *)this + 11696) && (!*(_DWORD *)(*((void *)this + 1431) + 44LL) || *((_BYTE *)this + 11697)))
  {
    sub_1000E804C(*((_DWORD *)this + 2890), *((_DWORD *)this + 2900), *((_DWORD *)this + 2910), a2, a3);
    sub_100155D2C(*((_DWORD *)this + 2890), *((_DWORD *)this + 2900), *((_DWORD *)this + 2910));
    int v4 = 1;
  }

  else
  {
    int v4 = 0;
  }

  return NetworkDiagnosticsManager::cleanup((uint64_t)this, v4, 1);
}

BOOL NetworkDiagnosticsManager::handle_networkdiagnostics_response( NetworkDiagnosticsManager *this, unsigned __int8 *a2, unsigned int a3)
{
  int v4 = (char *)this + 11448;
  BOOL v5 = NetworkDiagnosticsReqTransmitReceive::handle_network_diagnostics_response( (NetworkDiagnosticsManager *)((char *)this + 11448),  a2,  a3);
  if (v5 && *((_BYTE *)this + 11696) && (!*(_DWORD *)(*(void *)v4 + 44LL) || *((_BYTE *)this + 11697))) {
    NetworkDiagnosticsManager::cleanupForNextIteration(this, v6, v7);
  }
  return v5;
}

uint64_t NetworkDiagnosticsManager::initialize(NetworkDiagnosticsManager *this)
{
  dispatch_queue_t v2 = (NetworkDiagnosticsManager *)((char *)this + 11736);
  current_time(&v6);
  *((_BYTE *)v2 + sub_10000D448(v30 - 56) = 0;
  NetworkDiagnosticsPendingConfig::NetworkDiagnosticsPendingConfig((NetworkDiagnosticsPendingConfig *)v5, v2);
  if (NetworkDiagnosticsConfigDb::initialize((uint64_t)this, &v6)
    && (atomic_store(0, (unsigned __int8 *)v2),
        NetworkDiagnosticsMdnsResolver::initialize( (uint64_t)this + 6752,  (uint64_t *)this + 22,  (uint64_t)this + 200,  *((unsigned int *)this + 6),  *((unsigned int *)this + 7),  (uint64_t)&v6)))
  {
    uint64_t v3 = NetworkDiagnosticsLogger::initialize( (void *)this + 932,  (uint64_t **)this + 40,  (uint64_t)this + 56,  (uint64_t)this + 80,  (uint64_t)this + 104,  (const char *)this + 344,  (const char *)this + 200,  (const char *)this + 296,  (const char *)this + 248,  (const char *)this + 272,  (uint64_t)&v6);
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  return v3;
}

void sub_1001BFFCC(_Unwind_Exception *exception_object)
{
}

void NetworkDiagnosticsManager::updatePendingConfig( NetworkDiagnosticsManager *this, char a2, int a3, char a4, int a5, int a6, int a7, int a8, unsigned int a9, unsigned int a10)
{
  __int16 v14 = (unsigned __int8 *)this + 11736;
  atomic_store(0, (unsigned __int8 *)this + 11736);
  if (a10 < 0x12D)
  {
    *((_OWORD *)this + 734) = xmmword_10022BF60;
    if (a10) {
      *((_DWORD *)this + 29memset(&v22.ai_socktype, 0, 40) = 3610;
    }
    else {
      *((_DWORD *)this + 29memset(&v22.ai_socktype, 0, 40) = 0;
    }
    *(_WORD *)((char *)this + 11737) = 257;
    *((_BYTE *)this + 11739) = 1;
    *((_DWORD *)this + 2935) = 2;
  }

  else
  {
    *((_DWORD *)this + 2936) = a6;
    *((_DWORD *)this + 2937) = a7;
    *((_DWORD *)this + 293std::iostream::~basic_iostream(v2, v3 + 8) = a8;
    *((_DWORD *)this + 2939) = a9;
    *((_DWORD *)this + 29memset(&v22.ai_socktype, 0, 40) = a10;
    *((_BYTE *)this + 1173std::iostream::~basic_iostream(v2, v3 + 8) = a3;
    *((_BYTE *)this + 11737) = a2;
    *((_BYTE *)this + 11739) = a4;
    *((_DWORD *)this + 2935) = a5;
  }

  atomic_store(1u, v14);
  int v15 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    int v16 = *((_DWORD *)this + 2940);
    int v17 = *((_DWORD *)this + 10);
    int v18 = v14[1];
    int v19 = v14[3];
    int v20 = *((_DWORD *)this + 2938);
    int v21 = *((_DWORD *)this + 2939);
    int v22 = *((_DWORD *)this + 2936);
    int v23 = *((_DWORD *)this + 2937);
    v24[0] = 67111424;
    v24[1] = v16;
    __int16 v25 = 1024;
    int v26 = v17;
    __int16 v27 = 1024;
    int v28 = a3;
    __int16 v29 = 1024;
    int v30 = a5;
    __int16 v31 = 1024;
    int v32 = v18;
    __int16 v33 = 1024;
    int v34 = v19;
    __int16 v35 = 1024;
    int v36 = v20;
    __int16 v37 = 1024;
    int v38 = v21;
    __int16 v39 = 1024;
    int v40 = v22;
    __int16 v41 = 1024;
    int v42 = v23;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "TDM: NetworkDiagnosticsManager::updatePendingConfig newPendingPeriodicity=%d curConfigPeriodicity=%d  processdns=% d sendTochildren=%d expandEdges=%d enhancedTlvReq=%d browseTimeout=%d resolveTimeout=%d routerRspTimeout=%d childRspTimeout=%d",  (uint8_t *)v24,  0x3Eu);
  }

void NetworkDiagnosticsManager::updateNCPProperties( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, uint64_t a6, __int16 a7, __int16 a8, int a9)
{
  else {
    std::string __dst = *(std::string *)a2;
  }
  else {
    std::string v17 = *(std::string *)a3;
  }
  else {
    std::string __p = *(std::string *)a4;
  }
  NetworkDiagnosticsConfigDb::updateNCPProperties(a1, &__dst, &v17, &__p, a5, a6, a7, a8, a9);
}

void sub_1001C02C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

BOOL NetworkDiagnosticsManager::browseServices(NetworkDiagnosticsManager *this)
{
  dispatch_queue_t v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    LOWORD(v10[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "TDM: Start Browse services", (uint8_t *)v10, 2u);
  }

  int started = NetworkDiagnosticsMdnsResolver::MyStartBrowsingForServices((NetworkDiagnosticsManager *)((char *)this + 6752));
  if (started)
  {
    LODWORD(v4) = *((_DWORD *)this + 6);
    CFRunLoopRunInMode(kCFRunLoopDefaultMode, (double)v4, 0);
    BOOL v5 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      int v6 = -252645135 * ((*((void *)this + 846) - *((void *)this + 845)) >> 3);
      int v7 = *((unsigned __int8 *)this + 7440);
      v10[0] = 67109376;
      v10[1] = v6;
      __int16 v11 = 1024;
      int v12 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "TDM: Browse service completed Total services discovered:%d browseServiceCompletedFlag=%d",  (uint8_t *)v10,  0xEu);
    }

    if (!*((_BYTE *)this + 7440)) {
      NetworkDiagnosticsMdnsResolver::MyStopBrowsingForServices( (NetworkDiagnosticsManager *)((char *)this + 6752),  *((CFNetServiceBrowserRef *)this + 931));
    }
  }

  else
  {
    int v8 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1001C0A20(v8);
    }
  }

  return started != 0;
}

uint64_t NetworkDiagnosticsManager::resolveServices(NetworkDiagnosticsManager *this)
{
  dispatch_queue_t v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tdm", "default");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v3 = *((_DWORD *)this + 1716);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "TDM: Resolved services: Total Services Resolved=%d",  (uint8_t *)v5,  8u);
  }

  return 1LL;
}

uint64_t NetworkDiagnosticsManager::startDiagnostics(NetworkDiagnosticsManager *this)
{
  dispatch_queue_t v2 = (unsigned __int8 *)this + 11736;
  NetworkDiagnosticsPendingConfig::NetworkDiagnosticsPendingConfig( (NetworkDiagnosticsPendingConfig *)v4,  (NetworkDiagnosticsManager *)((char *)this + 11736));
  if (NetworkDiagnosticsConfigDb::update((uint64_t)this, (uint64_t)v4))
  {
    atomic_store(0, v2);
    if (!*((_BYTE *)this + 49)) {
      goto LABEL_5;
    }
    if (NetworkDiagnosticsManager::browseServices(this))
    {
      NetworkDiagnosticsManager::resolveServices(this);
LABEL_5:
      *((_DWORD *)this + 2916) = 1;
      uint64_t result = NetworkDiagnosticsReqTransmitReceive::send_networkdiagnostics_get_to_self_ncp( (uint64_t)this + 11448,  (uint64_t *)this + 839);
      if ((result & 1) != 0) {
        return result;
      }
    }
  }

  return NetworkDiagnosticsManager::cleanup((uint64_t)this, 0, 1);
}

uint64_t sub_1001C0618(uint64_t a1)
{
  dispatch_queue_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      int v3 = (void *)*v2;
      operator delete(v2);
      dispatch_queue_t v2 = v3;
    }

    while (v3);
  }

  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *sub_1001C0660(void *a1)
{
  dispatch_queue_t v2 = a1 + 426;
  *(void *)((char *)a1 + *(void *)(v3 - 24) + 340std::iostream::~basic_iostream(v2, v3 + 8) = v4;
  std::filebuf::~filebuf(a1 + 427);
  std::ios::~ios(a1 + 478);
  a1[355] = v3;
  *(void *)((char *)a1 + *(void *)(v3 - 24) + 28memset(&v22.ai_socktype, 0, 40) = v4;
  std::filebuf::~filebuf(a1 + 356);
  std::ios::~ios(a1 + 407);
  a1[284] = v3;
  *(void *)((char *)a1 + *(void *)(v3 - 24) + 2272) = v4;
  std::filebuf::~filebuf(a1 + 285);
  std::ios::~ios(a1 + 336);
  a1[213] = v3;
  *(void *)((char *)a1 + *(void *)(v3 - 24) + 1704) = v4;
  std::filebuf::~filebuf(a1 + 214);
  std::ios::~ios(a1 + 265);
  a1[142] = v3;
  *(void *)((char *)a1 + *(void *)(v3 - 24) + 1136) = v4;
  std::filebuf::~filebuf(a1 + 143);
  std::ios::~ios(a1 + 194);
  a1[71] = v3;
  *(void *)((char *)a1 + *(void *)(v3 - 24) + 56std::iostream::~basic_iostream(v2, v3 + 8) = v4;
  std::filebuf::~filebuf(a1 + 72);
  std::ios::~ios(a1 + 123);
  *a1 = v3;
  *(void *)((char *)a1 + *(void *)(v3 - sub_10016A418((unsigned int **)(v1 - 24)) = v4;
  std::filebuf::~filebuf(a1 + 1);
  std::ios::~ios(a1 + 52);
  return a1;
}

void *sub_1001C07D4(void *a1)
{
  dispatch_queue_t v2 = a1 + 710;
  *(void *)((char *)a1 + *(void *)(v3 - 24) + 568sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = v4;
  std::filebuf::~filebuf(a1 + 711);
  std::ios::~ios(a1 + 762);
  a1[639] = v3;
  *(void *)((char *)a1 + *(void *)(v3 - 24) + 5112) = v4;
  std::filebuf::~filebuf(a1 + 640);
  std::ios::~ios(a1 + 691);
  a1[568] = v3;
  *(void *)((char *)a1 + *(void *)(v3 - 24) + 4544) = v4;
  std::filebuf::~filebuf(a1 + 569);
  std::ios::~ios(a1 + 620);
  a1[497] = v3;
  *(void *)((char *)a1 + *(void *)(v3 - 24) + 39memset(v31, 0, 76) = v4;
  std::filebuf::~filebuf(a1 + 498);
  std::ios::~ios(a1 + 549);
  a1[426] = v3;
  *(void *)((char *)a1 + *(void *)(v3 - 24) + 340std::iostream::~basic_iostream(v2, v3 + 8) = v4;
  std::filebuf::~filebuf(a1 + 427);
  std::ios::~ios(a1 + 478);
  a1[355] = v3;
  *(void *)((char *)a1 + *(void *)(v3 - 24) + 28memset(&v22.ai_socktype, 0, 40) = v4;
  std::filebuf::~filebuf(a1 + 356);
  std::ios::~ios(a1 + 407);
  a1[284] = v3;
  *(void *)((char *)a1 + *(void *)(v3 - 24) + 2272) = v4;
  std::filebuf::~filebuf(a1 + 285);
  std::ios::~ios(a1 + 336);
  a1[213] = v3;
  *(void *)((char *)a1 + *(void *)(v3 - 24) + 1704) = v4;
  std::filebuf::~filebuf(a1 + 214);
  std::ios::~ios(a1 + 265);
  a1[142] = v3;
  *(void *)((char *)a1 + *(void *)(v3 - 24) + 1136) = v4;
  std::filebuf::~filebuf(a1 + 143);
  std::ios::~ios(a1 + 194);
  a1[71] = v3;
  *(void *)((char *)a1 + *(void *)(v3 - 24) + 56std::iostream::~basic_iostream(v2, v3 + 8) = v4;
  std::filebuf::~filebuf(a1 + 72);
  std::ios::~ios(a1 + 123);
  *a1 = v3;
  *(void *)((char *)a1 + *(void *)(v3 - sub_10016A418((unsigned int **)(v1 - 24)) = v4;
  std::filebuf::~filebuf(a1 + 1);
  std::ios::~ios(a1 + 52);
  return a1;
}

void sub_1001C0A20(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "TDM: Error browsing for services", v1, 2u);
}

std::string *padString(std::string *result, std::string::size_type a2, std::string::value_type __c)
{
  if ((char)result->__r_.__value_.__s.__size_ < 0)
  {
    std::string::size_type size = result->__r_.__value_.__l.__size_;
    if (size >= a2) {
      return result;
    }
    BOOL v5 = (std::string *)result->__r_.__value_.__r.__words[0];
    uint64_t v4 = (char *)(result->__r_.__value_.__r.__words[0] + size);
  }

  else
  {
    std::string::size_type size = result->__r_.__value_.__s.__size_;
    if (size >= a2) {
      return result;
    }
    uint64_t v4 = (char *)result + size;
    BOOL v5 = result;
  }

  return std::string::insert(result, v4 - (char *)v5, a2 - size, __c);
}

void *convertNodeTypeForDisplay@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 2) {
    dispatch_queue_t v2 = "INVALID";
  }
  else {
    dispatch_queue_t v2 = off_1002B5700[a1];
  }
  return sub_10000AC00(a2, v2);
}

uint64_t getRloc16FromRouterId(char a1)
{
  return (a1 & 0x3F) << 10;
}

uint64_t getRloc16FromChildId(__int16 a1, __int16 a2)
{
  return a1 & 0xFC00 | a2 & 0x1FFu;
}

uint64_t convertUint16ToHexString(uint64_t a1, uint64_t a2)
{
  v7.__r_.__value_.__s.__data_[0] = 48;
  uint64_t v4 = sub_1001BC344(&v9, (char *)&v7);
  *(void *)((char *)v4 + *(void *)(*v4 - 24LL) + memset(v10, 0, 24) = 4LL;
  *(_DWORD *)((char *)&v9 + *(void *)(v9 - 24) + std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)((_BYTE *)&v9 + *(void *)(v9 - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<(&v9, a1);
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(void *)(a2 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  }

  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }

  std::stringbuf::str(&v7, &v10);
  *(std::stringbuf::string_type *)a2 = v7;
  *(void *)((char *)v8
  uint64_t v9 = v5;
  std::streambuf::~streambuf(&v10);
  return std::ios::~ios(&v11);
}

void sub_1001C0C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *current_time@<X0>(void *a1@<X8>)
{
  dispatch_queue_t v2 = localtime(&v4.tv_sec);
  strftime(__format, 0x40uLL, "%H:%M:%S:%%06u", v2);
  snprintf(__str, 0x40uLL, __format, v4.tv_usec);
  return sub_10000AC00(a1, __str);
}

void getDestinationIPv6FromPrefixAndRloc16(int a1, const void **a2, std::string *a3)
{
  if ((char)a3->__r_.__value_.__s.__size_ < 0)
  {
    *a3->__r_.__value_.__l.__data_ = 0;
    a3->__r_.__value_.__l.__size_ = 0LL;
  }

  else
  {
    a3->__r_.__value_.__s.__data_[0] = 0;
    a3->__r_.__value_.__s.__size_ = 0;
  }

  else {
    size_t v6 = (size_t)a2[1];
  }
  std::stringbuf::string_type v7 = &v13;
  sub_1000765F0((uint64_t)&v13, v6 + 8);
  if ((v13.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::stringbuf::string_type v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    else {
      int v8 = *a2;
    }
    memmove(v7, v8, v6);
  }

  strcpy((char *)v7 + v6, "ff:fe00:");
  if ((v16 & 0x80u) == 0) {
    uint64_t v9 = __p;
  }
  else {
    uint64_t v9 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v10 = v16;
  }
  else {
    std::string::size_type v10 = (std::string::size_type)__p[1];
  }
  uint64_t v11 = std::string::append(&v13, (const std::string::value_type *)v9, v10);
  __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__l.__cap_ = v11->__r_.__value_.__l.__cap_;
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0LL;
  v11->__r_.__value_.__l.__cap_ = 0LL;
  v11->__r_.__value_.__r.__words[0] = 0LL;
  std::string::operator=(a3, &__str);
  if (v19 < 0) {
    operator delete(v18);
  }
}

void sub_1001C0E80( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t getNodeType(unsigned __int16 a1, void *a2, void *a3, void *a4)
{
  unsigned __int16 v7 = a1;
  if ((a1 & 0x1FF) == 0 || sub_1001C0F60(a2, &v7)) {
    return 2LL;
  }
  if (sub_1001C0F60(a3, &v7)) {
    return 1LL;
  }
  if (sub_1001C0F60(a4, &v7)) {
    return 0LL;
  }
  return 3LL;
}

uint64_t **sub_1001C0F60(void *a1, unsigned __int16 *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0LL;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }

  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }

  size_t v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6) {
    return 0LL;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t **)*result)
  {
    unint64_t v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
    }

    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }

      else
      {
        v8 &= *(void *)&v2 - 1LL;
      }

      if (v8 != v5) {
        return 0LL;
      }
    }
  }

  return result;
}

void sub_1001C15C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1001C186C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8LL))(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001C1ABC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a24) {
    (*(void (**)(uint64_t))(*(void *)a24 + 8LL))(a24);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001C1D00( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a22) {
    (*(void (**)(uint64_t))(*(void *)a22 + 8LL))(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001C28E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1001C3460( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28, void *a29, uint64_t a30, int a31, __int16 a32, char a33, char a34)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }

  _Unwind_Resume(a1);
}

void sub_1001C37CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

_DWORD *sub_1001C38D4(uint64_t a1)
{
  int8x8_t v2 = objc_autoreleasePoolPush();
  unint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  if (!v3)
  {
    __int128 v12 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    size_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "TNM: state info dictionary is NULL", buf, 2u);
    }

    uint64_t v11 = 0LL;
    goto LABEL_22;
  }

  uint8x8_t v4 = v3;
  unint64_t v5 = *(void **)(a1 + 32);
  uint64_t v24 = v4;
  [v5 captureNCPStateInformation:&v24];
  size_t v6 = v24;

  id v23 = 0LL;
  unsigned __int16 v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSPropertyListSerialization dataWithPropertyList:format:options:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "dataWithPropertyList:format:options:error:",  v6,  200LL,  0LL,  &v23));
  id v8 = v23;
  if (v8)
  {
    uint64_t v9 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    std::string::size_type v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v26 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "Error serializing dictionary for State Capture: %@",  buf,  0xCu);
    }

    uint64_t v11 = 0LL;
LABEL_21:

LABEL_22:
    objc_autoreleasePoolPop(v2);
    return v11;
  }

  uint64_t result = [v7 length];
  size_t v14 = (size_t)result;
  size_t v15 = (size_t)(result + 50);
  if ((unint64_t)result < 0xFFFFFFFFFFFFFF38LL)
  {
    uint64_t result = calloc(1uLL, v15);
    uint64_t v11 = result;
    if (!result)
    {
LABEL_19:
      int v22 = sub_1000160F4("com.apple.wpantund.tnm", "default");
      std::string::size_type v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Done logging NCP state", buf, 2u);
      }

      goto LABEL_21;
    }

    if (v15 >= 4)
    {
      *uint64_t result = 1;
      if ((v15 & 0xFFFFFFFFFFFFFFFCLL) != 4)
      {
        result[1] = v14;
        unsigned __int8 v16 = (void *)objc_claimAutoreleasedReturnValue([@"NCP::State Information" dataUsingEncoding:4]);
        std::string v17 = v16;
        if (v16)
        {
          id v18 = v16;
          id v19 = [v18 bytes];
          id v20 = [v18 length];
          else {
            size_t v21 = (size_t)v20;
          }
          memcpy(v11 + 34, v19, v21);
        }

        memcpy(v11 + 50, [v7 bytes], v14);

        goto LABEL_19;
      }
    }

    __break(1u);
  }

  __break(0x5500u);
  return result;
}

void sub_1001C3BA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C3BF8(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "TNM(sysdiag_extn): getRCPProperties : Last Known state is not associated",  v1,  2u);
}

void sub_1001C3C38()
{
}

uint64_t getRandomNumberBetween(int a1, int a2)
{
  uint64_t result = arc4random();
  int v5 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    goto LABEL_6;
  }
  BOOL v6 = __OFADD__(v5, 1);
  unsigned int v7 = v5 + 1;
  if (v6 || (unsigned int v8 = result % v7, result = a1 + v8, __CFADD__(a1, v8)))
  {
    __break(0x5500u);
LABEL_6:
    __break(0x5515u);
  }

  return result;
}

id getUUIDAsStr(void)
{
  dispatch_queue_attr_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  [v0 getUUIDBytes:v11];

  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v11, 16LL));
  sub_100159A78((unint64_t)v11, 16LL, v10, 0x24uLL, 0);
  int8x8_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v10));
  unint64_t v3 = sub_1000160F4("com.apple.wpantund.tnm", "form");
  uint8x8_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v6 = 138412546;
    unsigned int v7 = v1;
    __int16 v8 = 2112;
    uint64_t v9 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Generated new uuid_temp: %@, full string: %@",  (uint8_t *)&v6,  0x16u);
  }

  return v2;
}

void sub_1001C3DCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id getUUIDAsByteArray(void)
{
  dispatch_queue_attr_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  [v0 getUUIDBytes:v7];

  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v7, 16LL));
  int8x8_t v2 = sub_1000160F4("com.apple.wpantund.tnm", "form");
  unint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    int v5 = 138412290;
    int v6 = v1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Generated new uuid_temp: %@", (uint8_t *)&v5, 0xCu);
  }

  return v1;
}

void sub_1001C3EE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id generateNewXPANIDAsString(void)
{
  id UUIDAsStr = getUUIDAsStr();
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(UUIDAsStr);
  int8x8_t v2 = sub_1000160F4("com.apple.wpantund.tnm", "form");
  unint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    uint8x8_t v4 = (void *)objc_claimAutoreleasedReturnValue([v1 substringToIndex:16]);
    int v7 = 138412546;
    __int16 v8 = v4;
    __int16 v9 = 2112;
    std::string::size_type v10 = v1;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Generated new XPANID: %@, full string: %@",  (uint8_t *)&v7,  0x16u);
  }

  int v5 = (void *)objc_claimAutoreleasedReturnValue([v1 substringToIndex:16]);
  return v5;
}

void sub_1001C4000(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t generateNewXPANIDAsInt(void)
{
  id UUIDAsByteArray = getUUIDAsByteArray();
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(UUIDAsByteArray);
  unint64_t v4 = 0LL;
  [v1 getBytes:&v4 length:8];
  unint64_t v4 = bswap64(v4);
  NSLog(@"Generated new XPANID Temp: %@, XPANID: 0x%016llx", v1, v4);
  unint64_t v2 = v4;

  return v2;
}

void sub_1001C408C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id generatreNewNetworkName(void)
{
  dispatch_queue_attr_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithCapacity:](&OBJC_CLASS___NSMutableString, "stringWithCapacity:", 0LL));
  uint32_t v1 = arc4random();
  unint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s%d",  "MyHome",  v1 + ((v1 / 0x7FFFFFFF) | ((v1 / 0x7FFFFFFF) << 31)) + 1));
  [v0 appendString:v2];

  unint64_t v3 = sub_1000160F4("com.apple.wpantund.tnm", "form");
  unint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 138412290;
    int v7 = v0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Generated new Network Name: %@", buf, 0xCu);
  }

  return v0;
}

void sub_1001C41C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id generatreNewPANIDAsString(void)
{
  dispatch_queue_attr_t v0 = sub_1000160F4("com.apple.wpantund.tnm", "form");
  uint32_t v1 = (os_log_s *)objc_claimAutoreleasedReturnValue(v0);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 67109120;
    int v11 = scannedNetworkCount;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "generatreNewPANIDAsString: scannedNetworkCount: %d",  buf,  8u);
  }

  do
  {
    uint64_t v2 = arc4random() % 0xF000 + 4096;
    if (scannedNetworkCount < 1) {
      break;
    }
    uint64_t v3 = 0LL;
    char v4 = 0;
    do
    {
      if (v3 == 100) {
        __break(0x5512u);
      }
      v4 |= (_DWORD)v2 == (unsigned __int16)scannedNetworks[v3++];
    }

    while (scannedNetworkCount != v3);
  }

  while ((v4 & 1) != 0);
  int v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithCapacity:](&OBJC_CLASS___NSMutableString, "stringWithCapacity:", 0LL));
  int v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"0x%04X", v2));
  [v5 appendString:v6];

  int v7 = sub_1000160F4("com.apple.wpantund.tnm", "form");
  __int16 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 67109378;
    int v11 = v2;
    __int16 v12 = 2112;
    std::string v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Generated new PANID: %04x, %@", buf, 0x12u);
  }

  return v5;
}

void sub_1001C43DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t generatreNewPANIDAsInt(void)
{
  dispatch_queue_attr_t v0 = sub_1000160F4("com.apple.wpantund.tnm", "form");
  uint32_t v1 = (os_log_s *)objc_claimAutoreleasedReturnValue(v0);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    int v8 = 67109120;
    int v9 = scannedNetworkCount;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "generatreNewPANIDAsInt: scannedNetworkCount: %d",  (uint8_t *)&v8,  8u);
  }

  do
  {
    uint32_t v2 = arc4random() % 0xF000 + 4096;
    if (scannedNetworkCount < 1) {
      break;
    }
    uint64_t v3 = 0LL;
    char v4 = 0;
    do
    {
      if (v3 == 100) {
        __break(0x5512u);
      }
      v4 |= v2 == (unsigned __int16)scannedNetworks[v3++];
    }

    while (scannedNetworkCount != v3);
  }

  while ((v4 & 1) != 0);
  int v5 = sub_1000160F4("com.apple.wpantund.tnm", "form");
  int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v8 = 67109120;
    int v9 = v2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Generated new PANID: %04x", (uint8_t *)&v8, 8u);
  }

  return (unsigned __int16)v2;
}

id generateCommisonerCredentialAsString(void)
{
  id UUIDAsStr = getUUIDAsStr();
  uint32_t v1 = (void *)objc_claimAutoreleasedReturnValue(UUIDAsStr);
  uint32_t v2 = sub_1000160F4("com.apple.wpantund.tnm", "form");
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    int v5 = 138412290;
    int v6 = v1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Generated new CC %@ ", (uint8_t *)&v5, 0xCu);
  }

  return v1;
}

void sub_1001C4658(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id generateNewMasterKeyAsString(void)
{
  id UUIDAsStr = getUUIDAsStr();
  uint32_t v1 = (void *)objc_claimAutoreleasedReturnValue(UUIDAsStr);
  uint32_t v2 = sub_1000160F4("com.apple.wpantund.tnm", "form");
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    int v5 = 138412290;
    int v6 = v1;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Generated new Master Key %@ ",  (uint8_t *)&v5,  0xCu);
  }

  return v1;
}

void sub_1001C472C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NSData *generateNewMasterKeyAsByteArray(void)
{
  dispatch_queue_attr_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](&OBJC_CLASS___NSMutableData, "dataWithLength:", 16LL));
  id v1 = [v0 length];
  id v2 = v0;
  if (SecRandomCopyBytes(kSecRandomDefault, (size_t)v1, [v2 mutableBytes]))
  {
    int v9 = sub_1000160F4("com.apple.wpantund.tnm", "form");
    std::string::size_type v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_1001C4D88(v10);
    }

    __assert_rtn("generateNewMasterKeyAsByteArray", "ThreadNetworkManagerUtils.mm", 173, "false");
  }

  uint64_t v3 = objc_alloc(&OBJC_CLASS___NSData);
  id v4 = v2;
  int v5 = -[NSData initWithBytes:length:]( v3,  "initWithBytes:length:",  [v4 bytes],  objc_msgSend(v4, "length"));
  int v6 = sub_1000160F4("com.apple.wpantund.tnm", "form");
  int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    int v11 = 138412290;
    __int16 v12 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "Generated the new Master Key :: %@ ",  (uint8_t *)&v11,  0xCu);
  }

  return v5;
}

void sub_1001C48E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void generateNSStringfromCArray(unsigned __int8 *a1, unsigned int a2)
{
  if (!a1)
  {
    int v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString string](&OBJC_CLASS___NSString, "string"));
    goto LABEL_8;
  }

  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithCapacity:](&OBJC_CLASS___NSMutableString, "stringWithCapacity:", 2LL * a2));
  if (!a2)
  {
LABEL_6:
    int v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithString:](&OBJC_CLASS___NSString, "stringWithString:", v4));

LABEL_8:
    id v9 = v8;
    return;
  }

  uint64_t v5 = 0LL;
  while (1)
  {
    int v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%02lx", a1[v5]));
    [v4 appendString:v6];

    int v7 = v5 + 1;
    if (__OFADD__((_DWORD)v5, 1)) {
      break;
    }
    uint64_t v5 = v7;
  }

  __break(0x5500u);
}

void sub_1001C49F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id getRandomAlphanumericPSKdWithLength(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithCapacity:](&OBJC_CLASS___NSMutableString, "stringWithCapacity:", a1));
  if (a1 < 1) {
    return v2;
  }
  for (int i = 0; ; ++i)
  {
    id result = objc_msgSend( v2,  "appendFormat:",  @"%C",  objc_msgSend( @"ABCDEFGHJKLMNPRSTUVWXY0123456789",  "characterAtIndex:",  arc4random()
                             % (unint64_t)[@"ABCDEFGHJKLMNPRSTUVWXY0123456789" length]));
    int v5 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    if (v5 >= a1) {
      return v2;
    }
  }

  __break(0x5500u);
  return result;
}

void sub_1001C4AD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t isNetworkConnected(void)
{
  id v0 = [[NWPathEvaluator alloc] initWithEndpoint:0 parameters:0];
  id v1 = v0;
  if (!v0) {
    return 0LL;
  }
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v0 path]);
  if ([v2 usesInterfaceType:1])
  {
    uint64_t v3 = 1LL;
  }

  else
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v1 path]);
    uint64_t v3 = (uint64_t)[v4 usesInterfaceType:3];
  }

  return v3;
}

void sub_1001C4B8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL isSystemUpTimeIsGreaterThan(unint64_t a1)
{
  return sub_10000B370() > a1;
}

std::string *stringToLowercase@<X0>(std::string *__str@<X0>, std::string *a2@<X8>)
{
  id result = std::string::basic_string(a2, __str);
  uint64_t size = a2->__r_.__value_.__s.__size_;
  int v5 = (char)size;
  int v6 = (char *)a2 + size;
  if (v5 >= 0) {
    int v7 = v6;
  }
  else {
    int v7 = (char *)(a2->__r_.__value_.__r.__words[0] + a2->__r_.__value_.__l.__size_);
  }
  if (v5 >= 0) {
    int v8 = a2;
  }
  else {
    int v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  while (v8 != (std::string *)v7)
  {
    id result = (std::string *)__tolower(v8->__r_.__value_.__s.__data_[0]);
    v8->__r_.__value_.__s.__data_[0] = (char)result;
    int v8 = (std::string *)((char *)v8 + 1);
  }

  return result;
}

void sub_1001C4C48(_Unwind_Exception *exception_object)
{
}

std::string *stringEqualCaseInsensitive(std::string *a1, std::string *a2)
{
  id result = stringToLowercase(a2, &__p);
  unsigned __int8 size = __s1.__r_.__value_.__s.__size_;
  if ((__s1.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v5 = __s1.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v5 = __s1.__r_.__value_.__l.__size_;
  }
  std::string::size_type v6 = __p.__r_.__value_.__s.__size_;
  int v7 = (char)__p.__r_.__value_.__s.__size_;
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type v6 = __p.__r_.__value_.__l.__size_;
  }
  if (v5 != v6)
  {
    BOOL v12 = 0LL;
    goto LABEL_27;
  }

  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((char)__s1.__r_.__value_.__s.__size_ < 0)
  {
    BOOL v12 = memcmp(__s1.__r_.__value_.__l.__data_, p_p, __s1.__r_.__value_.__l.__size_) == 0;
LABEL_23:
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_24;
    }
LABEL_27:
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((__s1.__r_.__value_.__s.__size_ & 0x80) != 0) {
      goto LABEL_28;
    }
    return (std::string *)v12;
  }

  if (!__s1.__r_.__value_.__s.__size_)
  {
    BOOL v12 = 1LL;
LABEL_24:
    if ((size & 0x80) != 0) {
LABEL_28:
    }
      operator delete(__s1.__r_.__value_.__l.__data_);
    return (std::string *)v12;
  }

  unint64_t v9 = 0LL;
  while (v9 <= 0x17)
  {
    int v10 = __s1.__r_.__value_.__s.__data_[v9];
    int v11 = p_p->__r_.__value_.__s.__data_[v9];
    BOOL v12 = v10 == v11;
    ++v9;
    if (v10 != v11 || __s1.__r_.__value_.__s.__size_ == v9) {
      goto LABEL_23;
    }
  }

  __break(1u);
  return result;
}

void sub_1001C4D6C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001C4D88(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "Failed to generated new Master Key, unexpected error.. asserting.. ",  v1,  2u);
}

void srputil_srp_mdns_proxyd_interface_init()
{
  if (srputil_srp_mdns_proxyd_interface_q)
  {
    id v0 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tnm", "default");
    if (!os_log_type_enabled(v0, OS_LOG_TYPE_INFO)) {
      goto LABEL_10;
    }
    LOWORD(v13) = 0;
    uint64_t v1 = "srp-mdns-proxyd Q is already active";
LABEL_7:
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, v1, (uint8_t *)&v13, 2u);
    goto LABEL_10;
  }

  id v2 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v3 = dispatch_queue_create("wpantund.srp_mdns_proxyd.Interface.Queue", v2);
  srputil_srp_mdns_proxyd_interface_q = (uint64_t)v3;
  id v4 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tnm", "default");
  id v0 = v4;
  if (v3)
  {
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_INFO)) {
      goto LABEL_10;
    }
    LOWORD(v13) = 0;
    uint64_t v1 = "srp-mdns-proxyd Q Init Success";
    goto LABEL_7;
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_1001C6004(v0, v5, v6, v7, v8, v9, v10, v11);
  }
LABEL_10:
  BOOL v12 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tnm", "default");
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    int v13 = 134217984;
    uint64_t v14 = cref;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "srp-mdns-proxyd cref at init: %p",  (uint8_t *)&v13,  0xCu);
  }

void srputil_start_srp_mdns_proxyd()
{
  if (ncp_state == 8)
  {
    if (cref)
    {
      id v0 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tnm", "default");
      if (!os_log_type_enabled(v0, OS_LOG_TYPE_INFO)) {
        return;
      }
      *(_DWORD *)std::string __p = 134217984;
      *(void *)&__p[4] = cref;
      uint64_t v1 = "srp-mdns-proxyd is already running, no need to start again, Cref: %p";
LABEL_14:
      id v4 = v0;
      uint32_t v5 = 12;
LABEL_15:
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, v1, __p, v5);
      return;
    }

    if (start_cb_pending)
    {
      id v0 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tnm", "default");
      if (!os_log_type_enabled(v0, OS_LOG_TYPE_INFO)) {
        return;
      }
      *(_DWORD *)std::string __p = 134217984;
      *(void *)&__p[4] = cref;
      uint64_t v1 = "srp-mdns-proxyd start is already ongoing, no need to start again, Cref: %p";
      goto LABEL_14;
    }

    start_cb_pending = 1;
    uint64_t v6 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tnm", "default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string __p = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Starting srp-mdns-proxyd", __p, 2u);
    }

    if (srputil_srp_mdns_proxyd_interface_q)
    {
      dispatch_async((dispatch_queue_t)srputil_srp_mdns_proxyd_interface_q, &stru_1002B5760);
      return;
    }

    uint64_t v7 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tnm", "default");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string __p = 0;
      uint64_t v1 = "Starting srp-mdns-proxyd Failed: No Q";
      id v4 = v7;
      uint32_t v5 = 2;
      goto LABEL_15;
    }
  }

  else
  {
    id v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tnm", "default");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000B5130(ncp_state, __p);
      dispatch_queue_t v3 = v9 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)__int128 buf = 136315394;
      uint64_t v11 = v3;
      __int16 v12 = 2048;
      uint64_t v13 = cref;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "srp-mdns-proxyd Thread is not associated , no need to start SRP, ncp_state = %s, Cref: %p",  buf,  0x16u);
      if (v9 < 0) {
        operator delete(*(void **)__p);
      }
    }
  }

void sub_1001C51C8(id a1)
{
  uint64_t v1 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tnm", "default");
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    int v5 = 138412290;
    v6[0] = srputil_srp_mdns_proxyd_interface_q;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "Starting srp-mdns-proxyd from Q: %@",  (uint8_t *)&v5,  0xCu);
  }

  int v2 = advertising_proxy_enable(&cref, srputil_srp_mdns_proxyd_interface_q, sub_1001C5330);
  dispatch_queue_t v3 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tnm", "default");
  id v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1001C6034(v2, v4);
    }
    cref = 0LL;
    start_cb_pending = 0;
  }

  else if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    int v5 = 67109376;
    LODWORD(v6[0]) = 0;
    WORD2(v6[0]) = 2048;
    *(void *)((char *)v6 + 6) = cref;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Starting srp-mdns-proxyd Success: Err: %d, Cref: %p",  (uint8_t *)&v5,  0x12u);
  }

void sub_1001C5330(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = j__os_log_create("com.apple.wpantund.tnm", "default");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v8 = 134218496;
    uint64_t v9 = a1;
    __int16 v10 = 2048;
    uint64_t v11 = a2;
    __int16 v12 = 1024;
    int v13 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "srp-mdns-proxyd start Callback: conn_ref %p,  response %p,   err %d.",  (uint8_t *)&v8,  0x1Cu);
  }

  if (a3)
  {
    cref = 0LL;
    ++b2b_srp_enable_failures;
    uint64_t v7 = j__os_log_create("com.apple.wpantund.tnm", "default");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1001C60A4(a2, a3, v7);
    }
  }

  else
  {
    b2b_srp_enable_failures = 0;
  }

  start_cb_pending = 0;
  if (!cref) {
    srputil_check_and_resume_srp_mdns_proxyd();
  }
}

void srputil_stop_srp_mdns_proxyd()
{
  uint64_t v0 = cref;
  uint64_t v1 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tnm", "default");
  BOOL v2 = os_log_type_enabled(v1, OS_LOG_TYPE_INFO);
  if (v0)
  {
    if (v2)
    {
      *(_DWORD *)__int128 buf = 134217984;
      uint64_t v18 = cref;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "Stopping srp-mdns-proxyd, Cref: %p", buf, 0xCu);
    }

    if (srputil_srp_mdns_proxyd_interface_q)
    {
      dispatch_async((dispatch_queue_t)srputil_srp_mdns_proxyd_interface_q, &stru_1002B57A0);
    }

    else
    {
      dispatch_queue_t v3 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tnm", "default");
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        sub_1001C614C(v3, v4, v5, v6, v7, v8, v9, v10);
      }
    }
  }

  else
  {
    if (v2)
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  " srp-mdns-proxyd is not running to stop it",  buf,  2u);
    }

    sub_10000AC00(v15, "Error");
    sub_10000AC00(v13, "Error in Srp-mdns interaction");
    sub_10000AC00(__p, "Cannot stop srp-mdns-proxy as advertising proxy reference is null");
    sub_1000E8078((uint64_t *)v15, (uint64_t *)v13, (const std::string::value_type *)__p, 0LL);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
  }

void sub_1001C5618( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001C566C(id a1)
{
  if (cref)
  {
    advertising_proxy_ref_dealloc();
    cref = 0LL;
    start_cb_pending = 0;
    uint64_t v1 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tnm", "default");
    if (!os_log_type_enabled(v1, OS_LOG_TYPE_INFO)) {
      return;
    }
    int v3 = 138412546;
    uint64_t v4 = srputil_srp_mdns_proxyd_interface_q;
    __int16 v5 = 2048;
    uint64_t v6 = cref;
    BOOL v2 = "Stopped srp-mdns-proxyd from Q:%@, cref: %p";
  }

  else
  {
    uint64_t v1 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tnm", "default");
    if (!os_log_type_enabled(v1, OS_LOG_TYPE_INFO)) {
      return;
    }
    int v3 = 138412546;
    uint64_t v4 = srputil_srp_mdns_proxyd_interface_q;
    __int16 v5 = 2048;
    uint64_t v6 = cref;
    BOOL v2 = "Already stopped,cannot stop again srp-mdns-proxyd from Q:%@, cref: %p";
  }

  _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, v2, (uint8_t *)&v3, 0x16u);
}

void srputil_set_ncp_state(int a1)
{
  uint64_t v2 = sub_10000B370();
  __darwin_time_t v3 = sub_10000B428();
  unsigned int v4 = ncp_state;
  ncp_state = a1;
  __int16 v5 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tnm", "default");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    sub_1000B5130(v4, v12);
    int v6 = v13;
    uint64_t v7 = (void **)v12[0];
    sub_1000B5130(ncp_state, __p);
    uint64_t v8 = v12;
    if (v6 < 0) {
      uint64_t v8 = v7;
    }
    if (v11 >= 0) {
      uint64_t v9 = __p;
    }
    else {
      uint64_t v9 = (void **)__p[0];
    }
    *(_DWORD *)__int128 buf = 134219010;
    uint64_t v15 = v2;
    __int16 v16 = 2048;
    __darwin_time_t v17 = v3;
    __int16 v18 = 2080;
    id v19 = v8;
    __int16 v20 = 2080;
    size_t v21 = v9;
    __int16 v22 = 2048;
    uint64_t v23 = cref;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "[%llu, %llu] srp-mdns-proxyd NCP State changed from %s -> %s, cref: %p",  buf,  0x34u);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
  }

  if (ncp_state == 8)
  {
    srputil_start_srp_mdns_proxyd();
  }

  else if (v4 == 8)
  {
    srputil_stop_srp_mdns_proxyd();
  }

void sub_1001C5930( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void srputil_check_and_resume_srp_mdns_proxyd(void)
{
  uint64_t v0 = j__os_log_create("com.apple.wpantund.tnm", "default");
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    sub_1000B5130(ncp_state, __p);
    uint64_t v1 = v19 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)__int128 buf = 136315650;
    *(void *)size_t v21 = v1;
    *(_WORD *)&_BYTE v21[8] = 2048;
    *(void *)&v21[10] = cref;
    __int16 v22 = 1024;
    int v23 = b2b_srp_enable_failures;
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_INFO,  " srp-mdns-proxyd resume called in state %s, cref: %p, b2b_srp_enable_failures: %d",  buf,  0x1Cu);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
  }

  if (ncp_state == 8)
  {
    uint64_t v2 = 3000000000LL;
    else {
      char v3 = 10;
    }
    uint64_t v4 = 30000000000LL;
    else {
      char v5 = 3;
    }
    else {
      char v6 = 1;
    }
    else {
      int64_t v7 = 1000000000LL;
    }
    byte_1002C9648 = v6;
    dispatch_time_t v8 = dispatch_time(0LL, v7);
    uint64_t v9 = j__os_log_create("com.apple.wpantund.tnm", "default");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 67109376;
      *(_DWORD *)size_t v21 = byte_1002C9648;
      *(_WORD *)&v21[4] = 2048;
      *(void *)&v21[6] = cref;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Resuming srp-mdns-proxyd after %d sec, cref: %p",  buf,  0x12u);
    }

    if (srputil_srp_mdns_proxyd_interface_q)
    {
      dispatch_after(v8, (dispatch_queue_t)srputil_srp_mdns_proxyd_interface_q, &stru_1002B57E0);
    }

    else
    {
      uint64_t v10 = j__os_log_create("com.apple.wpantund.tnm", "default");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_1001C614C(v10, v11, v12, v13, v14, v15, v16, v17);
      }
    }
  }

void sub_1001C5BA0(id a1)
{
  uint64_t v1 = j__os_log_create("com.apple.wpantund.tnm", "default");
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    int v2 = 134217984;
    uint64_t v3 = cref;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "Resuming srp-mdns-proxyd now, cref: %p",  (uint8_t *)&v2,  0xCu);
  }

  srputil_start_srp_mdns_proxyd();
}

uint64_t srputil_set_stop()
{
  uint64_t v0 = j__os_log_create("com.apple.wpantund.tnm", "default");
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    int v8 = 134218240;
    uint64_t v9 = cref;
    __int16 v10 = 2048;
    uint64_t v11 = shutdown_cref;
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_INFO,  "srp-mdns-proxyd: Calling advertising_proxy_start_thread_shutdown, cref: %p, shutdown_cref: %p",  (uint8_t *)&v8,  0x16u);
  }

  if (!srputil_srp_mdns_proxyd_interface_q)
  {
    char v5 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tnm", "default");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1001C617C();
    }
    return 0LL;
  }

  dispatch_async((dispatch_queue_t)srputil_srp_mdns_proxyd_interface_q, &stru_1002B5820);
  dispatch_time_t v1 = dispatch_time(0LL, 5000000000LL);
  uint64_t v2 = dispatch_semaphore_wait((dispatch_semaphore_t)srp_semaphore, v1);
  uint64_t v3 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tnm", "default");
  uint64_t v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1001C61F0(v4);
    }
    return 0LL;
  }

  uint64_t v6 = 1LL;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    int v8 = 134218240;
    uint64_t v9 = cref;
    __int16 v10 = 2048;
    uint64_t v11 = shutdown_cref;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "srp-mdns-proxyd: Done with advertising_proxy_start_thread_shutdown, cref: %p, shutdown_cref: %p",  (uint8_t *)&v8,  0x16u);
  }

  return v6;
}

void sub_1001C5E28(id a1)
{
}

uint64_t sub_1001C5E44(uint64_t a1)
{
  uint64_t v2 = j__os_log_create("com.apple.wpantund.tnm", "default");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v6 = 136316162;
    int64_t v7 = "void srputil_srp_start_threadstop_callback(advertising_proxy_conn_ref, xpc_object_t, advertising_proxy_error_type)";
    __int16 v8 = 1024;
    *(_DWORD *)uint64_t v9 = 235;
    *(_WORD *)&void v9[4] = 2048;
    *(void *)&_DWORD v9[6] = a1;
    *(_WORD *)&v9[14] = 2048;
    *(void *)&uint8_t v9[16] = shutdown_cref;
    __int16 v10 = 2048;
    uint64_t v11 = cref;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s:%d: srp-mdns-proxyd: Inside the srputil_srp_start_threadstop_callback, signaling srp_semaphore, shutdown_conn_r ef: %p, shutdown_cref: %p, cref: %p",  (uint8_t *)&v6,  0x30u);
  }

  if (a1)
  {
    advertising_proxy_ref_dealloc(a1);
  }

  else
  {
    uint64_t v3 = j__os_log_create("com.apple.wpantund.tnm", "default");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1001C626C();
    }
  }

  uint64_t v4 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tnm", "default");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v6 = 138412802;
    int64_t v7 = (const char *)srputil_srp_mdns_proxyd_interface_q;
    __int16 v8 = 2048;
    *(void *)uint64_t v9 = cref;
    *(_WORD *)&_BYTE v9[8] = 2048;
    *(void *)&v9[10] = shutdown_cref;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Dealloc srp-mdns-proxyd shutdown conenction from Q:%@, cref: %p, shutdown_cref: %p",  (uint8_t *)&v6,  0x20u);
  }

  shutdown_cref = 0LL;
  return dispatch_semaphore_signal((dispatch_semaphore_t)srp_semaphore);
}

void sub_1001C6004( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001C6034(int a1, os_log_s *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "Starting srp-mdns-proxyd Failed: Err: %d",  (uint8_t *)v2,  8u);
  sub_100012A58();
}

void sub_1001C60A4(uint64_t a1, int a2, os_log_t log)
{
  int v3 = 134218752;
  uint64_t v4 = cref;
  __int16 v5 = 2048;
  uint64_t v6 = a1;
  __int16 v7 = 1024;
  int v8 = a2;
  __int16 v9 = 1024;
  int v10 = b2b_srp_enable_failures;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "srp-mdns-proxyd start Callback with failure: cref %p  response %p   err %d, b2b_srp_enable_failures: %d",  (uint8_t *)&v3,  0x22u);
}

void sub_1001C614C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001C617C()
{
}

void sub_1001C61F0(os_log_t log)
{
  int v1 = 136315138;
  uint64_t v2 = "srputil_set_stop";
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "%s: srp-mdns-proxyd: Error, semaphore wait timed out ",  (uint8_t *)&v1,  0xCu);
  sub_100008188();
}

void sub_1001C626C()
{
}

dispatch_semaphore_t sub_1001C62E0()
{
  dispatch_semaphore_t result = dispatch_semaphore_create(0LL);
  srp_semaphore = (uint64_t)result;
  return result;
}

void sub_1001C6438( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  _Unwind_Resume(a1);
}

void sub_1001C645C(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v2 = objc_opt_new(&OBJC_CLASS___THBorderAgentFinder);
  id v3 = WeakRetained[1];
  WeakRetained[1] = v2;

  id v4 = WeakRetained[1];
  if (v4)
  {
    [v4 setDelegate:*(void *)(a1 + 32)];
    [WeakRetained[1] start];
  }
}

void sub_1001C64CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1001C657C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = (void *)WeakRetained[1];
  if (v2)
  {
    WeakRetained[1] = 0LL;
    id v3 = WeakRetained;

    id WeakRetained = v3;
  }
}

void sub_1001C6C94(_Unwind_Exception *a1)
{
  __int16 v9 = v8;

  _Unwind_Resume(a1);
}

void sub_1001C6E80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C6EC0(uint64_t a1, os_log_s *a2)
{
  int v2 = 136315394;
  id v3 = "-[ThreadNetworkfinder printServer:]";
  __int16 v4 = 2112;
  uint64_t v5 = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "%s : No IP address is available for the server : %@, continue to next BR",  (uint8_t *)&v2,  0x16u);
}

void sub_1001C6F48()
{
}

void sub_1001C6FBC()
{
}

void sub_1001C7030()
{
}

void sub_1001C70A4(uint8_t *buf, uint64_t a2, uint64_t a3, os_log_t log)
{
  *(_DWORD *)__int128 buf = 136315906;
  *(void *)(buf + 4) = "-[ThreadNetworkfinder printServer:]";
  *((_WORD *)buf + 6) = 1024;
  *(_DWORD *)(buf + 14) = 120;
  *((_WORD *)buf + 9) = 2048;
  *(void *)(buf + 2sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = a2;
  *((_WORD *)buf + 14) = 2048;
  *(void *)(buf + 3sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = a3;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "%s:%d Continuing... BorderAgent ID and XpanID length mismatch !!! xpan id length : %lu, border agent id length : %lu",  buf,  0x26u);
}

void sub_1001C7118()
{
}

void sub_1001C718C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Agent Resolved ! Server is nil", v1, 2u);
}

void sub_1001C7244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C7384(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C74E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C76E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C7730( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001C77A0( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001C7810(uint64_t a1, os_log_s *a2)
{
  int v2 = 136315394;
  uint64_t v3 = "-[CTRFollowUpController ctrUtilPostFollowUpItem:]";
  __int16 v4 = 2112;
  uint64_t v5 = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "%s: Unique Identifier : %@, Failed to allocate Followup item, returning false",  (uint8_t *)&v2,  0x16u);
  sub_100008188();
}

void sub_1001C793C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C7B70( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001C7BC8(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained[6] stopScan];
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1001C7C0C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1001C8454( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id *location, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1001C862C(uint64_t a1)
{
  int v16 = 0;
  *(_OWORD *)uint64_t v17 = *(_OWORD *)buf;
  uint64_t v18 = *(void *)&buf[16];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v3 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  __int16 v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "kWPANTUNDEvent_ThreadNetwork_ActiveDataSetChanged setEventHandler \n",  buf,  2u);
  }

  if (WeakRetained
    && WeakRetained[5] == 8
    && [WeakRetained updatePreferredNetworkForDatasetChange])
  {
    uint64_t v5 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    uint8_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315394;
      *(void *)&uint8_t buf[4] = "-[ThreadNetworkManagerInstance createDriverInterface:]_block_invoke";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = 196;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s:%d: Successfully updated the keychain",  buf,  0x12u);
    }

    uint64_t v15 = 0LL;
    __int16 v7 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained CtrInternalClientPtr]);
    sub_10000AC00(__p, "Thread:ActiveDataset:Bytes");
    if (v7) {
      [v7 getProperty:__p output:&v15];
    }
    else {
      memset(buf, 0, 32);
    }
    int v8 = *sub_1000E4898(&v16, (uint64_t)buf);
    if (v14 < 0) {
      operator delete(__p[0]);
    }

    if (v8)
    {
      __int16 v9 = sub_1000160F4("com.apple.wpantund.tnm", "default");
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_1001EC5D8();
      }
    }

    else
    {
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue([WeakRetained CtrInternalClientPtr]);
      sub_10000AC00(v11, "PreferredNetworkUpdated");
      -[os_log_s signal_property_changed:value:](v10, "signal_property_changed:value:", v11, &v15);
      if (v12 < 0) {
        operator delete(v11[0]);
      }
    }

    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
    }
  }

  if (SHIBYTE(v18) < 0) {
    operator delete(v17[0]);
  }
}

void sub_1001C88C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  if (a22) {
    (*(void (**)(uint64_t))(*(void *)a22 + 8LL))(a22);
  }

  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

void sub_1001C8960(uint64_t a1, uint64_t *a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  __int16 v4 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "kWPANTUNDEvent_NCPState setEventHandler \n",  (uint8_t *)&__p,  2u);
  }

  if (WeakRetained)
  {
    WeakRetained[4] = WeakRetained[5];
    sub_100147B4C(a2, &__p);
    WeakRetained[5] = sub_1000B5828(&__p);
    uint8_t v6 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    __int16 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = WeakRetained[4];
      int v9 = WeakRetained[5];
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"NCP:State";
      WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v8;
      WORD1(__p.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(__p.__r_.__value_.__r.__words[2]) = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s TNM-Internal got event Data: NCP State: %d -> %d\n",  (uint8_t *)&__p,  0x18u);
    }

    [WeakRetained getNCPState:0];
    srputil_set_ncp_state(WeakRetained[5]);
    int v10 = WeakRetained[5];
    if (v10 == 1)
    {
      sub_100103418();
      int v10 = WeakRetained[5];
    }

    if (v10 == 8 || v10 == 4)
    {
      sub_1001035F8();
      int v10 = WeakRetained[5];
    }

    if (v10 == 8) {
      [WeakRetained upgradeCredentials];
    }
    [WeakRetained checkAndResumeNW];
  }
}

void sub_1001C8B28( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

void sub_1001C8B64(uint64_t a1, uint64_t *a2)
{
  id WeakRetained = (unsigned int *)objc_loadWeakRetained((id *)(a1 + 32));
  __int16 v4 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v12[0]) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "kWPANTUNDEvent_NetworkNodeType setEventHandler \n",  (uint8_t *)v12,  2u);
  }

  if (WeakRetained)
  {
    sub_1000B51B4(WeakRetained[6], &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_10000AC00(v12, (char *)p_p);
    sub_100147B4C(a2, &__p);
    unsigned int v7 = sub_1000B5270((char *)&__p);
    WeakRetained[6] = v7;
    if (v7) {
      WeakRetained[7] = v7;
    }
    int v8 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v10 = WeakRetained[6];
      unsigned int v11 = WeakRetained[7];
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Network:NodeType";
      WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v10;
      WORD1(__p.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(__p.__r_.__value_.__r.__words[2]) = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s TNM-Internal got event Data: Last known Node-Type-Value: %d, Last known valid Node-Type-Value: %d",  (uint8_t *)&__p,  0x18u);
    }

    if (v13 < 0) {
      operator delete(v12[0]);
    }
  }
}

void sub_1001C8D20( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1001C8D84(id a1, any a2)
{
  uint64_t v3 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  __int16 v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v12[0]) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "kWPANTUNDEvent_Beacon setEventHandler \n",  (uint8_t *)v12,  2u);
  }

  sub_10000C008((uint64_t)a2.var0, v12);
  sub_10000AC00(&__p, "kWPANTUNDProperty_NetworkPANID");
  uint64_t v5 = sub_10000ED88(v12, &__p);
  unsigned __int16 v6 = (unsigned __int16)sub_1001476B4(v5, 0);
  if (v14 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  uint64_t v7 = scannedNetworkCount;
  if (scannedNetworkCount < 1) {
    goto LABEL_10;
  }
  uint64_t v8 = 0LL;
  char v9 = 0;
  do
  {
    if (v8 == 100) {
      goto LABEL_16;
    }
    v9 |= (unsigned __int16)scannedNetworks[v8++] == v6;
  }

  while (scannedNetworkCount != v8);
  if ((v9 & 1) == 0)
  {
LABEL_10:
    if (scannedNetworkCount <= 99)
    {
      ++scannedNetworkCount;
      if (v7 > 0x63) {
LABEL_16:
      }
        __break(0x5512u);
      scannedNetworks[v7] = v6;
      unsigned int v10 = sub_1000160F4("com.apple.wpantund.tnm", "default");
      unsigned int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        __p.n128_u32[0] = 67109376;
        __p.n128_u32[1] = scannedNetworkCount;
        __p.n128_u16[4] = 1024;
        *(unsigned __int32 *)((char *)&__p.n128_u32[2] + 2) = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "TNM-Internal got new beacon(%d) with PANID: 0x%x",  (uint8_t *)&__p,  0xEu);
      }
    }
  }

  sub_10000D448((uint64_t)v12);
}

void sub_1001C8F70( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

void sub_1001C8FA8(uint64_t a1, uint64_t *a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    __int16 v4 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      sub_100147B4C(a2, &__p);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)__int128 buf = 136315394;
      char v9 = "NCP:Reset";
      __int16 v10 = 2080;
      unsigned int v11 = p_p;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s TNM-Internal got Reset Event: %s\n",  buf,  0x16u);
    }

    [WeakRetained setLogTimestampBase];
  }
}

void sub_1001C90C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1001C90E8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  uint64_t v24 = v3;
  sub_100144190((uint64_t)&v24, (uint64_t *)buf);
  __int16 v4 = operator new(0x20uLL);
  sub_1001EC4B4(v4, buf);
  sub_10000C178((uint64_t *)buf);
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
  }
  uint64_t v5 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  unsigned __int16 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = "Thread:ChildTable:AddChild";
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s TNM-Internal got ThreadChildTable-AddChild Event\n",  buf,  0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v8 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v23 = 0LL;
    char v9 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained CtrInternalClientPtr]);
    sub_10000AC00(__p, "Thread:ChildTable:Addresses:AsValMap");
    if (v9)
    {
      [v9 getProperty:__p output:&v23];
    }

    else
    {
      *(_OWORD *)__int128 buf = 0u;
      __int128 v26 = 0u;
    }

    if (v22 < 0) {
      operator delete(__p[0]);
    }

    if (*(_DWORD *)buf)
    {
      __int16 v10 = sub_1000160F4("com.apple.wpantund.tnm", "default");
      unsigned int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        sub_1001EC64C();
      }
    }

    else
    {
      uint64_t v12 = v23;
      if (v23) {
        uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 24LL))(v23);
      }
      uint64_t v18 = v12;
      sub_100143C98((uint64_t)&v18, v19);
      char v13 = operator new(0x20uLL);
      __int16 v20 = sub_1001EC4B4(v13, v19);
      sub_10000C178(v19);
      if (v18) {
        (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
      }
      char v14 = (void *)objc_claimAutoreleasedReturnValue([v8 CtrInternalClientPtr]);
      sub_10000AC00(v16, "NetworkTopology:ChildMetric");
      objc_msgSend(v14, "signal_property_changed:value:", v16, &v20);
      if (v17 < 0) {
        operator delete(v16[0]);
      }

      if (v20) {
        (*(void (**)(void *))(*v20 + 8LL))(v20);
      }
    }

    if (SHIBYTE(v26) < 0) {
      operator delete(*(void **)&buf[8]);
    }
    if (v23) {
      (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
    }
  }

  return (*(uint64_t (**)(void *))(*v4 + 8LL))(v4);
}

void sub_1001C938C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27)
{
  if (a27) {
    (*(void (**)(uint64_t))(*(void *)a27 + 8LL))(a27);
  }

  (*(void (**)(uint64_t))(*(void *)v27 + 8LL))(v27);
  _Unwind_Resume(a1);
}

uint64_t sub_1001C9498(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  uint64_t v13 = v3;
  sub_1001444E8((uint64_t)&v13, (uint64_t *)buf);
  __int16 v4 = operator new(0x20uLL);
  char v14 = sub_1001EC4B4(v4, buf);
  sub_10000C178((uint64_t *)buf);
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  uint64_t v5 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  unsigned __int16 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    int v16 = "Thread:ChildTable:RemoveChild";
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s TNM-Internal got ThreadChildTable-RemoveChild Event\n",  buf,  0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v8 = WeakRetained;
  if (WeakRetained)
  {
    char v9 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained CtrInternalClientPtr]);
    sub_10000AC00(__p, "NetworkTopology:ChildMetric");
    objc_msgSend(v9, "signal_property_changed:value:", __p, &v14);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t result = (uint64_t)v14;
  if (v14) {
    return (*(uint64_t (**)(void *))(*v14 + 8LL))(v14);
  }
  return result;
}

void sub_1001C961C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8LL))(a17);
  }
  _Unwind_Resume(a1);
}

void sub_1001CA16C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, int a23, __int16 a24, char a25, char a26, int a27, __int16 a28, char a29, char a30, void *__p, uint64_t a32, int a33, __int16 a34, char a35, char a36, void *a37, uint64_t a38, int a39, __int16 a40, char a41, char a42, char a43)
{
  _Block_object_dispose(&a18, 8);
  _Block_object_dispose(&a43, 8);
  if (a36 < 0) {
    operator delete(__p);
  }
  if (a42 < 0) {
    operator delete(a37);
  }

  _Block_object_dispose((const void *)(v45 - 160), 8);
  sub_1000089BC((xpc_object_t *)(v44 + 48));
  _Unwind_Resume(a1);
}

void sub_1001CA2E8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + sub_1000BE23C(v2 - 48) = *(id *)(a2 + 48);
  xpc_object_t v3 = xpc_null_create();
  __int16 v4 = *(void **)(a2 + 48);
  *(void *)(a2 + sub_1000BE23C(v2 - 48) = v3;
}

void sub_1001CA324(uint64_t a1)
{
  int v2 = *(void **)(a1 + 48);
  *(void *)(a1 + sub_1000BE23C(v2 - 48) = 0LL;
}

uint64_t sub_1001CA350(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void convert_ValMap_to_xpc_object( any a1@<0:X0>, const char *a2@<X1>, const char *a3@<X2>, xpc_object_t *a4@<X8>)
{
  xpc_object_t v8 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_string(v8, "method", a3);
  xpc_dictionary_set_string(v8, "key", a2);
  if (*(void *)a1.var0)
  {
    sub_10012C860(v8, (uint64_t *)a1.var0);
  }

  else
  {
    sub_10000AC00(__p, "<empty>");
    char v9 = (char *)operator new(0x20uLL);
    *(void *)char v9 = &off_1002AE030;
    *(_OWORD *)(v9 + std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)__p;
    *((void *)v9 + 3) = v15;
    __p[0] = 0LL;
    __p[1] = 0LL;
    uint64_t v15 = 0LL;
    int v16 = v9;
    sub_10012C860(v8, (uint64_t *)&v16);
    if (v16) {
      (*(void (**)(char *))(*(void *)v16 + 8LL))(v16);
    }
    if (SHIBYTE(v15) < 0) {
      operator delete(__p[0]);
    }
  }

  id v10 = v8;
  xpc_object_t v11 = v10;
  if (!v10) {
    xpc_object_t v11 = xpc_null_create();
  }

  id v12 = v11;
  uint64_t v13 = v12;
  *a4 = v12;
  if (v12)
  {
    if (xpc_get_type(v12) != (xpc_type_t)&_xpc_type_dictionary)
    {
      *a4 = xpc_null_create();
    }
  }

  else
  {
    *a4 = xpc_null_create();
  }
}

void sub_1001CA528( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8LL))(a15);
  }
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1001CA658(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001CAE44( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, uint64_t a30, void *a31, uint64_t a32, int a33, __int16 a34, char a35, char a36, uint64_t a37, uint64_t a38, void *a39, uint64_t a40, int a41, __int16 a42, char a43, char a44)
{
  if (a29) {
    (*(void (**)(uint64_t))(*(void *)a29 + 8LL))(a29);
  }
  if (a37) {
    (*(void (**)(uint64_t))(*(void *)a37 + 8LL))(a37);
  }
  uint64_t v49 = *(void *)(v47 - 160);
  if (v49) {
    (*(void (**)(uint64_t))(*(void *)v49 + 8LL))(v49);
  }
  sub_1000089BC((xpc_object_t *)(v47 - 152));

  _Unwind_Resume(a1);
}

void sub_1001CC118( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, void *a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, void *a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, void *a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, void *a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  if (a18) {
    (*(void (**)(uint64_t))(*(void *)a18 + 8LL))(a18);
  }
  if (a23) {
    (*(void (**)(uint64_t))(*(void *)a23 + 8LL))(a23);
  }
  if (a28) {
    (*(void (**)(uint64_t))(*(void *)a28 + 8LL))(a28);
  }
  if (a33) {
    (*(void (**)(uint64_t))(*(void *)a33 + 8LL))(a33);
  }
  if (a43) {
    (*(void (**)(uint64_t))(*(void *)a43 + 8LL))(a43);
  }
  if (a48) {
    (*(void (**)(uint64_t))(*(void *)a48 + 8LL))(a48);
  }
  if (a53) {
    (*(void (**)(uint64_t))(*(void *)a53 + 8LL))(a53);
  }
  uint64_t v56 = *(void *)(v54 - 248);
  if (v56) {
    (*(void (**)(uint64_t))(*(void *)v56 + 8LL))(v56);
  }

  uint64_t v57 = *(void *)(v54 - 208);
  if (v57) {
    (*(void (**)(uint64_t))(*(void *)v57 + 8LL))(v57);
  }
  sub_1000089BC((xpc_object_t *)(v54 - 200));
  _Unwind_Resume(a1);
}

id sub_1001CC52C(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_1001CC534(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_1001CCE40( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, uint64_t a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, uint64_t a35, int a36, __int16 a37, char a38, char a39, uint64_t a40, uint64_t a41, int a42, __int16 a43, char a44, char a45, uint64_t a46, uint64_t a47, int a48, __int16 a49, char a50,char a51)
{
}

void sub_1001CDB90( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, uint64_t a30, uint64_t a31, void *a32, uint64_t a33, int a34, __int16 a35, char a36, char a37, uint64_t a38, uint64_t a39, void *a40, uint64_t a41, int a42, __int16 a43, char a44, char a45, uint64_t a46, uint64_t a47, void *a48, uint64_t a49, int a50,__int16 a51,char a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59)
{
  if (a22) {
    (*(void (**)(uint64_t))(*(void *)a22 + 8LL))(a22);
  }
  if (a30) {
    (*(void (**)(uint64_t))(*(void *)a30 + 8LL))(a30);
  }
  if (a38) {
    (*(void (**)(uint64_t))(*(void *)a38 + 8LL))(a38);
  }
  if (a46) {
    (*(void (**)(uint64_t))(*(void *)a46 + 8LL))(a46);
  }
  if (a54) {
    (*(void (**)(uint64_t))(*(void *)a54 + 8LL))(a54);
  }

  uint64_t v62 = *(void *)(v60 - 208);
  if (v62) {
    (*(void (**)(uint64_t))(*(void *)v62 + 8LL))(v62);
  }
  sub_1000089BC((xpc_object_t *)(v60 - 200));
  _Unwind_Resume(a1);
}

id sub_1001CDE90(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_1001CDE98(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_1001CE4D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, uint64_t a28, int a29, __int16 a30, char a31, char a32, uint64_t a33, uint64_t a34, int a35, __int16 a36, char a37, char a38, uint64_t a39, uint64_t a40, int a41, __int16 a42, char a43, char a44)
{
}

void sub_1001CE9A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26, xpc_object_t a27, uint64_t a28, void *__p, uint64_t a30, int a31, __int16 a32, char a33, char a34)
{
  if (a21) {
    (*(void (**)(uint64_t))(*(void *)a21 + 8LL))(a21);
  }

  sub_1000089BC(&a27);
  if (a34 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

id sub_1001CEAC4(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_1001CEACC(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_1001CED38( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001CEEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, ...)
{
  sub_1000089BC((xpc_object_t *)va);
  if (v8 < 0) {
    operator delete(v7);
  }

  _Unwind_Resume(a1);
}

id sub_1001CEF40(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_1001CF1AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001CF960( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, uint64_t a35, void *a36, uint64_t a37, int a38, __int16 a39, char a40, char a41, uint64_t a42, xpc_object_t a43)
{
  if (a21) {
    (*(void (**)(uint64_t))(*(void *)a21 + 8LL))(a21);
  }
  if (a34) {
    (*(void (**)(uint64_t))(*(void *)a34 + 8LL))(a34);
  }
  if (a42) {
    (*(void (**)(uint64_t))(*(void *)a42 + 8LL))(a42);
  }

  sub_1000089BC(&a43);
  _Unwind_Resume(a1);
}

id sub_1001CFB38(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_1001CFB40(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_1001CFEA0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, uint64_t a28, void *__p, uint64_t a30, int a31, __int16 a32, char a33, char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001D003C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v17 = *(void *)(v15 - 24);
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001D0440( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, xpc_object_t a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  if (a22) {
    (*(void (**)(uint64_t))(*(void *)a22 + 8LL))(a22);
  }
  sub_1000089BC(&a23);
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

id sub_1001D052C(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_1001D06A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001D085C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001D0AA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

id sub_1001D0B08(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_1001D0B10(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_1001D0CE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  sub_1000089BC((xpc_object_t *)va);
  if (v5 < 0) {
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

void sub_1001D1710( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, int a28, __int16 a29, char a30, char a31, void *a32, uint64_t a33, int a34, __int16 a35, char a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,char a62)
{
  sub_10000D448((uint64_t)&a62);
  sub_10000D448(v62 - 240);
  sub_1000089BC((xpc_object_t *)(v62 - 216));
  sub_1000089BC((xpc_object_t *)(v62 - 208));
  uint64_t v64 = *(void *)(v62 - 200);
  if (v64) {
    (*(void (**)(uint64_t))(*(void *)v64 + 8LL))(v64);
  }
  sub_1000089BC((xpc_object_t *)(v62 - 192));
  sub_1000089BC((xpc_object_t *)(v62 - 184));
  _Unwind_Resume(a1);
}

id sub_1001D1988(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_1001D1B90(uint64_t a1)
{
  int v2 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  xpc_object_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    int v5 = 136315394;
    unsigned __int16 v6 = "-[ThreadNetworkManagerInstance configureRecoveryTimer]_block_invoke";
    __int16 v7 = 1024;
    int v8 = 2004;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s:%d: FRAME_COUNTER_RECOVERY_TIMER Expired",  (uint8_t *)&v5,  0x12u);
  }

  return [*(id *)(a1 + 32) checkAndResetFrameCounterDuplicates];
}

void sub_1001D1D58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1001D1D78(uint64_t a1, void *a2)
{
  xpc_object_t v3 = a2;
  __int16 v4 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "=========> com.apple.metrics.threadradiod",  buf,  2u);
  }

  if ([*(id *)(a1 + 32) shouldDefer])
  {
    unsigned __int16 v6 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    __int16 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      [*(id *)(a1 + 32) interval];
      uint64_t v9 = v8;
      unsigned int v10 = [*(id *)(a1 + 32) repeats];
      *(_DWORD *)__int128 buf = 134218240;
      *(void *)&uint8_t buf[4] = v9;
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "TNM:NSBackgroundActivity for periodic CA metrics submission is deferred: interval:%f repeats:%d",  buf,  0x12u);
    }

    v3[2](v3, 2LL);
    goto LABEL_51;
  }

  uint64_t v50 = 0LL;
  xpc_object_t v11 = *(void **)(*(void *)(a1 + 40) + 32LL);
  sub_10000AC00(__p, "ca:reporting:enabled");
  if (v11)
  {
    [v11 getProperty:__p output:&v50];
    BOOL v12 = *(_DWORD *)buf == 0;
  }

  else
  {
    memset(buf, 0, 32);
    BOOL v12 = 1;
  }

  if ((v49 & 0x80000000) == 0)
  {
    if (v12) {
      goto LABEL_18;
    }
LABEL_15:
    uint64_t v13 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315394;
      *(void *)&uint8_t buf[4] = "-[ThreadNetworkManagerInstance configureAndPostPeriodStats]_block_invoke";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = 2047;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "%s:%d: Failed to get kWPANTUNDProperty_CoreAnalyticsReporting Property",  buf,  0x12u);
    }

    goto LABEL_18;
  }

  operator delete(__p[0]);
  if (!v12) {
    goto LABEL_15;
  }
LABEL_18:
  if (sub_1001478B8(&v50))
  {
    [*(id *)(a1 + 40) getNCPState:0];
    uint64_t v15 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      [*(id *)(a1 + 32) interval];
      uint64_t v18 = v17;
      unsigned int v19 = [*(id *)(a1 + 32) repeats];
      sub_1000B5130(*(_DWORD *)(*(void *)(a1 + 40) + 20LL), v51);
      __int16 v20 = v52 >= 0 ? v51 : (void **)v51[0];
      *(_DWORD *)__int128 buf = 134218498;
      *(void *)&uint8_t buf[4] = v18;
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = v19;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "TNM:NSBackgroundActivity for periodic CA metrics submission handled: interval:%f repeats:%d NCPState:%s",  buf,  0x1Cu);
      if (v52 < 0) {
        operator delete(v51[0]);
      }
    }

    uint64_t v21 = *(void *)(a1 + 40);
    if (*(_DWORD *)(v21 + 20) == 8)
    {
      char v22 = *(void **)(v21 + 32);
      sub_10000AC00(v42, "UpdateLeaderInfo");
      objc_msgSend(v22, "setProperty:property_val:", v42, "1");
      if (v45 < 0) {
        operator delete(v44);
      }
      if (v43 < 0) {
        operator delete(v42[0]);
      }
      id v23 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
      __int16 v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
      [*(id *)(a1 + 40) updateInternalDBForCommonDimensions:v23 coexCntrsDict:v25 coexDict:v24];
      [*(id *)(a1 + 40) getNetworkRadioMetrics];
      [*(id *)(a1 + 40) getAllMacMetrics];
      [*(id *)(a1 + 40) getCoexMetrics:v25 coexDict:v24];
      [*(id *)(a1 + 40) getIPMLEMetrics:v23];
      [*(id *)(a1 + 40) getEngagementMetrics];
      [*(id *)(a1 + 40) getPowerMetrics];
      [*(id *)(a1 + 40) getTopologyMetrics];
      v3[2](v3, 1LL);
    }

    else
    {
      __int16 v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
      if (byte_1002C9DAF >= 0) {
        int v32 = &mDaemonVersion;
      }
      else {
        int v32 = (uint64_t *)mDaemonVersion;
      }
      __int16 v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v32));
      [v31 setObject:v33 forKey:@"header_daemon_version"];

      if (byte_1002C9DC7 >= 0) {
        int v34 = &mVendorVersion;
      }
      else {
        int v34 = (uint64_t *)mVendorVersion;
      }
      __int16 v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v34));
      [v31 setObject:v35 forKey:@"header_vendor_version"];

      sub_1000B5130(*(_DWORD *)(*(void *)(a1 + 40) + 20LL), buf);
      int v36 = (char)buf[23];
      __int16 v37 = *(uint8_t **)buf;
      NSStringEncoding v38 = +[NSString defaultCStringEncoding](&OBJC_CLASS___NSString, "defaultCStringEncoding");
      if (v36 >= 0) {
        __int16 v39 = buf;
      }
      else {
        __int16 v39 = v37;
      }
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithCString:encoding:]( &OBJC_CLASS___NSString,  "stringWithCString:encoding:",  v39,  v38));
      [v31 setObject:v24 forKey:@"thread_nw_state"];
      int v40 = sub_1000160F4("com.apple.wpantund.tnm", "default");
      __int16 v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        sub_1000B5130(*(_DWORD *)(*(void *)(a1 + 40) + 20LL), buf);
        sub_1001EC9B4();
      }

      v46[0] = _NSConcreteStackBlock;
      v46[1] = 3221225472LL;
      void v46[2] = sub_1001D255C;
      void v46[3] = &unk_1002B2158;
      id v23 = v31;
      id v47 = v23;
      AnalyticsSendEventLazy(@"com.apple.Flagstone.flagstoneStateInfo", v46);
      v3[2](v3, 1LL);
      __int16 v25 = v47;
    }
  }

  else
  {
    __int128 v26 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      [*(id *)(a1 + 32) interval];
      uint64_t v29 = v28;
      unsigned int v30 = [*(id *)(a1 + 32) repeats];
      *(_DWORD *)__int128 buf = 134218240;
      *(void *)&uint8_t buf[4] = v29;
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = v30;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_INFO,  "CA Reporting Disabled : interval:%f repeats:%d",  buf,  0x12u);
    }

    v3[2](v3, 2LL);
  }

  if (v50) {
    (*(void (**)(uint64_t))(*(void *)v50 + 8LL))(v50);
  }
LABEL_51:
}

void sub_1001D2414( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, uint64_t a30)
{
  if (a30) {
    (*(void (**)(uint64_t))(*(void *)a30 + 8LL))(a30);
  }

  _Unwind_Resume(a1);
}

id sub_1001D255C(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_1001D2844( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, void *__p, uint64_t a25, int a26, __int16 a27, char a28, char a29)
{
  if (a21) {
    (*(void (**)(uint64_t))(*(void *)a21 + 8LL))(a21);
  }
  if (a22) {
    (*(void (**)(uint64_t))(*(void *)a22 + 8LL))(a22);
  }
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001D2938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001D2D24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, id a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, id a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, id a36)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);

  _Block_object_dispose((const void *)(v37 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001D2DCC(uint64_t result, uint64_t a2)
{
  *(void *)(result + memset(&v22.ai_socktype, 0, 40) = *(void *)(a2 + 40);
  *(void *)(a2 + memset(&v22.ai_socktype, 0, 40) = 0LL;
  return result;
}

void sub_1001D2DDC(uint64_t a1)
{
}

void sub_1001D2DE4(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (v7)
  {
    uint64_t v8 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1001ECBD8();
    }
  }

  else
  {
    unsigned int v10 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
    xpc_object_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
      int v16 = 138412290;
      uint64_t v17 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "Got the Credentials Record, for the Network : %@",  (uint8_t *)&v16,  0xCu);
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), a2);
    *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 0;
  }

  uint64_t v13 = *(void *)(*(void *)(a1 + 64) + 8LL);
  char v14 = *(void **)(v13 + 40);
  *(void *)(v13 + memset(&v22.ai_socktype, 0, 40) = v7;
  id v15 = v7;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1001D2F58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001D3354( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, id a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, id a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, id a36)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);

  _Block_object_dispose((const void *)(v37 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1001D33FC(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (v7)
  {
    uint64_t v8 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1001ECBD8();
    }
  }

  else
  {
    unsigned int v10 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
    xpc_object_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
      int v16 = 138412290;
      uint64_t v17 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "Got the Credentials Record, for the Network : %@",  (uint8_t *)&v16,  0xCu);
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), a2);
    *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 0;
  }

  uint64_t v13 = *(void *)(*(void *)(a1 + 64) + 8LL);
  char v14 = *(void **)(v13 + 40);
  *(void *)(v13 + memset(&v22.ai_socktype, 0, 40) = v7;
  id v15 = v7;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1001D3570(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_149:
    uint64_t v79 = 0;
    goto LABEL_150;
  }

  uint64_t v132 = 0LL;
  uint64_t v133 = 0LL;
  __int128 v129 = 0LL;
  int v130 = 0LL;
  uint64_t v131 = 0LL;
  LOBYTE(v11) = 0;
  uint64_t v12 = 0;
  while (2)
  {
    uint64_t v13 = v12 + 1LL;
    if (v13 >= v5)
    {
      uint64_t v81 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
      std::locale v89 = (os_log_s *)objc_claimAutoreleasedReturnValue(v81);
      if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR)) {
        sub_1001ED78C();
      }
LABEL_147:

      unsigned __int8 v123 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
      int v58 = (THThreadNetworkCredentials *)objc_claimAutoreleasedReturnValue(v123);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR)) {
        sub_1001ED04C();
      }
      goto LABEL_149;
    }

    char v14 = v12 + 2;
    if (v12 >= 0xFFFFFFFE
      || (id v15 = v4[v13], v16 = (v14 + v15), __CFADD__((_DWORD)v14, (_DWORD)v15)))
    {
LABEL_151:
      __break(0x5500u);
    }

    if (v16 > v5)
    {
      uint64_t v82 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
      std::locale v89 = (os_log_s *)objc_claimAutoreleasedReturnValue(v82);
      if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR)) {
        sub_1001ED0C0();
      }
      goto LABEL_147;
    }

    uint64_t v17 = v4[v12];
    switch(v4[v12])
    {
      case 0:
        uint64_t v18 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
        unsigned int v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 136315394;
          uint64_t v135 = "-[ThreadNetworkManagerInstance validateDataSetTLVs:creds:]";
          unsigned int v136 = 1024;
          *(_DWORD *)uint64_t v137 = 2516;
          _os_log_error_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "%s: #MOS : ==> Decoded channel Line : %d",  buf,  0x12u);
        }

        if ((_DWORD)v15 != 3)
        {
          uint64_t v102 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
          std::locale v89 = (os_log_s *)objc_claimAutoreleasedReturnValue(v102);
          if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR)) {
            sub_1001ED3EC();
          }
          goto LABEL_147;
        }

        if (v4[v14])
        {
          uint64_t v113 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
          std::locale v89 = (os_log_s *)objc_claimAutoreleasedReturnValue(v113);
          if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR)) {
            sub_1001ED378();
          }
          goto LABEL_147;
        }

        if (v12 >= 0xFFFFFFFC) {
          goto LABEL_151;
        }
        xpc_object_t v11 = v4[v12 + 4];
        if ((v11 - 27) <= 0xEFu)
        {
          uint64_t v114 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
          std::locale v89 = (os_log_s *)objc_claimAutoreleasedReturnValue(v114);
          if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR)) {
            sub_1001ED300(v11, v89, v115, v116, v117, v118, v119, v120);
          }
          goto LABEL_147;
        }

        __int16 v20 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
        uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
        if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
          goto LABEL_75;
        }
        *(_DWORD *)__int128 buf = 136315394;
        uint64_t v135 = "-[ThreadNetworkManagerInstance validateDataSetTLVs:creds:]";
        unsigned int v136 = 1024;
        *(_DWORD *)uint64_t v137 = v11;
        char v22 = v21;
        id v23 = "%s: #MOS : Channel : %d";
        uint64_t v24 = 18;
        goto LABEL_33;
      case 1:
        NSStringEncoding v38 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
        __int16 v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 136315394;
          uint64_t v135 = "-[ThreadNetworkManagerInstance validateDataSetTLVs:creds:]";
          unsigned int v136 = 1024;
          *(_DWORD *)uint64_t v137 = 2550;
          _os_log_error_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_ERROR,  "%s: #MOS : ==> Decoded pan id Line : %d",  buf,  0x12u);
        }

        if ((_DWORD)v15 != 2)
        {
          unsigned __int8 v104 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
          std::locale v89 = (os_log_s *)objc_claimAutoreleasedReturnValue(v104);
          if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR)) {
            sub_1001ED460();
          }
          goto LABEL_147;
        }

        int v40 = objc_claimAutoreleasedReturnValue( +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  &v4[v14],  2LL));

        __int16 v41 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
        uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 136315394;
          uint64_t v135 = "-[ThreadNetworkManagerInstance validateDataSetTLVs:creds:]";
          unsigned int v136 = 2112;
          *(void *)uint64_t v137 = v40;
          _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%s: #MOS : PANID : %@", buf, 0x16u);
        }

        int v130 = (void *)v40;
        goto LABEL_75;
      case 2:
        int v34 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
        __int16 v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 136315394;
          uint64_t v135 = "-[ThreadNetworkManagerInstance validateDataSetTLVs:creds:]";
          unsigned int v136 = 1024;
          *(_DWORD *)uint64_t v137 = 2565;
          _os_log_error_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_ERROR,  "%s: #MOS : ==> Decoded XPAN ID : %d",  buf,  0x12u);
        }

        if ((_DWORD)v15 != 8)
        {
          uint64_t v99 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
          std::locale v89 = (os_log_s *)objc_claimAutoreleasedReturnValue(v99);
          if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR)) {
            sub_1001ED4D4();
          }
          goto LABEL_147;
        }

        int v36 = objc_claimAutoreleasedReturnValue( +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  &v4[v14],  8LL));

        uint64_t v37 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
        uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 136315394;
          uint64_t v135 = "-[ThreadNetworkManagerInstance validateDataSetTLVs:creds:]";
          unsigned int v136 = 2112;
          *(void *)uint64_t v137 = v36;
          _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%s: #MOS : XPAN ID: %@", buf, 0x16u);
        }

        __int128 v129 = (void *)v36;
        goto LABEL_75;
      case 3:
        uint64_t result = memcpy(__dst, &v4[v14], v4[v13]);
        if ((_DWORD)v15 != 255)
        {
          __dst[v15] = 0;
          id v47 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
          uint64_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
          if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = 136315394;
            uint64_t v135 = "-[ThreadNetworkManagerInstance validateDataSetTLVs:creds:]";
            unsigned int v136 = 1024;
            *(_DWORD *)uint64_t v137 = 2505;
            _os_log_error_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_ERROR,  "%s: #MOS : ==> Decoded Network Name Line : %d",  buf,  0x12u);
          }

          char v49 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", __dst));
          if (!v49)
          {
            unsigned int v105 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
            std::locale v89 = (os_log_s *)objc_claimAutoreleasedReturnValue(v105);
            if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR)) {
              sub_1001ED290(v89, v106, v107, v108, v109, v110, v111, v112);
            }
            uint64_t v133 = 0LL;
            goto LABEL_147;
          }

          uint64_t v50 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
          uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = 136315394;
            uint64_t v135 = "-[ThreadNetworkManagerInstance validateDataSetTLVs:creds:]";
            unsigned int v136 = 2112;
            *(void *)uint64_t v137 = v49;
            _os_log_error_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "%s : #MOS : Network Name : %@",  buf,  0x16u);
          }

void sub_1001D48D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _Unwind_Exception *exception_object, void *a19, void *a20, void *a21, void *a22, void *a23, void *a24)
{
}

void sub_1001D5418(_Unwind_Exception *a1)
{
  id v7 = v4;

  _Unwind_Resume(a1);
}

void sub_1001D5710(void *a1)
{
  id v1 = a1;
  int v2 = (void *)objc_claimAutoreleasedReturnValue([v1 network]);
  xpc_object_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 extendedPANID]);
  if (v3)
  {
    __int16 v4 = (void *)objc_claimAutoreleasedReturnValue([v1 network]);
    id v5 = objc_claimAutoreleasedReturnValue([v4 extendedPANID]);
    id v6 = (ctu *)[v5 bytes];
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v1 network]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 extendedPANID]);
    id v9 = [v8 length];
    ctu::hex(__p, v6, v9, v10);
  }

  else
  {
    sub_10000AC00(__p, "(unknown)");
  }

  xpc_object_t v11 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "\t==== Credentials ====\n", buf, 2u);
  }

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v1 uniqueIdentifier]);
  BOOL v14 = v13 == 0LL;

  if (!v14)
  {
    id v15 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
    int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v1 uniqueIdentifier]);
      id v18 = objc_claimAutoreleasedReturnValue([v17 UUIDString]);
      id v19 = [v18 UTF8String];
      *(_DWORD *)__int128 buf = 136315138;
      *(void *)&uint8_t buf[4] = v19;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "\t\t  - UUID: \t\t%s\n", buf, 0xCu);
    }
  }

  __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([v1 borderAgent]);
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 discriminatorId]);
  if (v21)
  {
    char v22 = (void *)objc_claimAutoreleasedReturnValue([v1 borderAgent]);
    id v23 = objc_claimAutoreleasedReturnValue([v22 discriminatorId]);
    uint64_t v24 = (ctu *)[v23 bytes];
    __int16 v25 = (void *)objc_claimAutoreleasedReturnValue([v1 borderAgent]);
    __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([v25 discriminatorId]);
    id v27 = [v26 length];
    ctu::hex(buf, v24, v27, v28);
  }

  else
  {
    sub_10000AC00(buf, "(unknown)");
  }

  uint64_t v29 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
  unsigned int v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
  {
    __int16 v31 = buf;
    if (v144 < 0) {
      __int16 v31 = *(_BYTE **)buf;
    }
    *(_DWORD *)std::string v139 = 136315138;
    *(void *)&v139[4] = v31;
    _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_INFO,  "\t\t  -  Border Agent Discriminator ID : %s\n",  v139,  0xCu);
  }

  int v32 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
  __int16 v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
  if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
  {
    int v34 = (void *)objc_claimAutoreleasedReturnValue([v1 network]);
    __int16 v35 = (__CFString *)objc_claimAutoreleasedReturnValue([v34 networkName]);
    int v36 = v35;
    if (!v35) {
      __int16 v35 = @"(unknown)";
    }
    id v37 = -[__CFString UTF8String](v35, "UTF8String");
    *(_DWORD *)std::string v139 = 136315138;
    *(void *)&v139[4] = v37;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "\t\t  - Network Name: \t%s\n", v139, 0xCu);
  }

  NSStringEncoding v38 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
  __int16 v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
  if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
  {
    int v40 = __p;
    if (v138 < 0) {
      int v40 = (void **)__p[0];
    }
    *(_DWORD *)std::string v139 = 136315138;
    *(void *)&v139[4] = v40;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "\t\t  - Network XPANID: \t%s\n", v139, 0xCu);
  }

  __int16 v41 = (void *)objc_claimAutoreleasedReturnValue([v1 credentials]);
  int v42 = (void *)objc_claimAutoreleasedReturnValue([v41 PANID]);
  BOOL v43 = v42 == 0LL;

  if (!v43)
  {
    uint64_t v44 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
    char v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
    {
      uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v1 credentials]);
      id v47 = objc_claimAutoreleasedReturnValue([v46 PANID]);
      uint64_t v48 = (ctu *)[v47 bytes];
      char v49 = (void *)objc_claimAutoreleasedReturnValue([v1 credentials]);
      uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([v49 PANID]);
      id v51 = [v50 length];
      ctu::hex(v139, v48, v51, v52);
      if (v140 >= 0) {
        uint64_t v53 = v139;
      }
      else {
        uint64_t v53 = *(_BYTE **)v139;
      }
      *(_DWORD *)uint64_t v141 = 136315138;
      uint64_t v142 = v53;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, "\t\t  - Network PANID: \t%s\n", v141, 0xCu);
      if (v140 < 0) {
        operator delete(*(void **)v139);
      }
    }
  }

  uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([v1 credentials]);
  uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue([v54 masterKey]);
  BOOL v56 = v55 == 0LL;

  if (!v56)
  {
    uint64_t v57 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
    int v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
    {
      uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([v1 credentials]);
      id v60 = objc_claimAutoreleasedReturnValue([v59 masterKey]);
      uint64_t v61 = (ctu *)[v60 bytes];
      uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue([v1 credentials]);
      uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue([v62 masterKey]);
      id v64 = [v63 length];
      ctu::hex(v139, v61, v64, v65);
      if (v140 >= 0) {
        uint64_t v66 = v139;
      }
      else {
        uint64_t v66 = *(_BYTE **)v139;
      }
      *(_DWORD *)uint64_t v141 = 136642819;
      uint64_t v142 = v66;
      _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_INFO,  "\t\t  - Master Key: \t%{sensitive}s\n",  v141,  0xCu);
      if (v140 < 0) {
        operator delete(*(void **)v139);
      }
    }
  }

  uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue([v1 credentials]);
  uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue([v67 PSKc]);
  BOOL v69 = v68 == 0LL;

  if (!v69)
  {
    __int128 v70 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
    uint64_t v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
    if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
    {
      __int128 v72 = (void *)objc_claimAutoreleasedReturnValue([v1 credentials]);
      id v73 = objc_claimAutoreleasedReturnValue([v72 PSKc]);
      uint64_t v74 = (ctu *)[v73 bytes];
      int v75 = (void *)objc_claimAutoreleasedReturnValue([v1 credentials]);
      uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue([v75 PSKc]);
      id v77 = [v76 length];
      ctu::hex(v139, v74, v77, v78);
      if (v140 >= 0) {
        uint64_t v79 = v139;
      }
      else {
        uint64_t v79 = *(_BYTE **)v139;
      }
      *(_DWORD *)uint64_t v141 = 136642819;
      uint64_t v142 = v79;
      _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_INFO, "\t\t  - PSKc: \t\t%{sensitive}s\n", v141, 0xCu);
      if (v140 < 0) {
        operator delete(*(void **)v139);
      }
    }
  }

  uint64_t v80 = (void *)objc_claimAutoreleasedReturnValue([v1 credentials]);
  uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue([v80 passPhrase]);
  BOOL v82 = v81 == 0LL;

  if (!v82)
  {
    int v83 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
    unsigned __int16 v84 = (os_log_s *)objc_claimAutoreleasedReturnValue(v83);
    if (os_log_type_enabled(v84, OS_LOG_TYPE_INFO))
    {
      uint64_t v85 = (void *)objc_claimAutoreleasedReturnValue([v1 credentials]);
      id v86 = objc_claimAutoreleasedReturnValue([v85 passPhrase]);
      id v87 = [v86 UTF8String];
      *(_DWORD *)std::string v139 = 136315138;
      *(void *)&v139[4] = v87;
      _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_INFO, "\t\t  - Passphrase: \t%s\n", v139, 0xCu);
    }
  }

  unsigned __int16 v88 = (void *)objc_claimAutoreleasedReturnValue([v1 credentials]);
  unsigned int v89 = [v88 channel];
  BOOL v90 = v89 == kTHNetworkChannel_None;

  if (!v90)
  {
    uint64_t v91 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
    std::locale v92 = (os_log_s *)objc_claimAutoreleasedReturnValue(v91);
    if (os_log_type_enabled(v92, OS_LOG_TYPE_INFO))
    {
      uint64_t v93 = (void *)objc_claimAutoreleasedReturnValue([v1 credentials]);
      unsigned int v94 = [v93 channel];
      *(_DWORD *)std::string v139 = 67109120;
      *(_DWORD *)&v139[4] = v94;
      _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_INFO, "\t\t  - Network Channel: \t%u\n", v139, 8u);
    }
  }

  unint64_t v95 = (void *)objc_claimAutoreleasedReturnValue([v1 credentialsDataSet]);
  unint64_t v96 = (void *)objc_claimAutoreleasedReturnValue([v95 dataSetArray]);
  if (v96)
  {
    id v97 = (void *)objc_claimAutoreleasedReturnValue([v1 credentialsDataSet]);
    id v98 = objc_claimAutoreleasedReturnValue([v97 dataSetArray]);
    uint64_t v99 = (ctu *)[v98 bytes];
    std::locale v100 = (void *)objc_claimAutoreleasedReturnValue([v1 credentialsDataSet]);
    uint64_t v101 = (void *)objc_claimAutoreleasedReturnValue([v100 dataSetArray]);
    id v102 = [v101 length];
    ctu::hex(v139, v99, v102, v103);
  }

  else
  {
    sub_10000AC00(v139, "(unknown)");
  }

  unsigned __int8 v104 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
  unsigned int v105 = (os_log_s *)objc_claimAutoreleasedReturnValue(v104);
  if (os_log_type_enabled(v105, OS_LOG_TYPE_INFO))
  {
    uint64_t v106 = v139;
    if (v140 < 0) {
      uint64_t v106 = *(_BYTE **)v139;
    }
    *(_DWORD *)uint64_t v141 = 136642819;
    uint64_t v142 = v106;
    _os_log_impl( (void *)&_mh_execute_header,  v105,  OS_LOG_TYPE_INFO,  "\t\t  - DataSet Credentials: %{sensitive}s\n",  v141,  0xCu);
  }

  __int128 v107 = (void *)objc_claimAutoreleasedReturnValue([v1 credentials]);
  int v108 = (void *)objc_claimAutoreleasedReturnValue([v107 userInfo]);
  BOOL v109 = v108 == 0LL;

  if (!v109)
  {
    uint64_t v110 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
    uint64_t v111 = (os_log_s *)objc_claimAutoreleasedReturnValue(v110);
    if (os_log_type_enabled(v111, OS_LOG_TYPE_INFO))
    {
      unsigned __int8 v112 = (void *)objc_claimAutoreleasedReturnValue([v1 credentials]);
      id v113 = objc_claimAutoreleasedReturnValue([v112 userInfo]);
      uint64_t v114 = [v113 UTF8String];
      *(_DWORD *)uint64_t v141 = 136315138;
      uint64_t v142 = v114;
      _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_INFO, "\t\t  - User Info: \t%s\n", v141, 0xCu);
    }
  }

  __int16 v115 = (void *)objc_claimAutoreleasedReturnValue([v1 keychainAccessGroup]);
  BOOL v116 = v115 == 0LL;

  if (!v116)
  {
    uint64_t v117 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
    __int128 v118 = (os_log_s *)objc_claimAutoreleasedReturnValue(v117);
    if (os_log_type_enabled(v118, OS_LOG_TYPE_INFO))
    {
      id v119 = objc_claimAutoreleasedReturnValue([v1 keychainAccessGroup]);
      uint64_t v120 = [v119 UTF8String];
      *(_DWORD *)uint64_t v141 = 136315138;
      uint64_t v142 = v120;
      _os_log_impl((void *)&_mh_execute_header, v118, OS_LOG_TYPE_INFO, "\t\t  - Access Group: \t%s\n", v141, 0xCu);
    }
  }

  uint64_t v121 = (void *)objc_claimAutoreleasedReturnValue([v1 creationDate]);
  BOOL v122 = v121 == 0LL;

  if (!v122)
  {
    unsigned __int8 v123 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
    uint64_t v124 = (os_log_s *)objc_claimAutoreleasedReturnValue(v123);
    if (os_log_type_enabled(v124, OS_LOG_TYPE_INFO))
    {
      uint64_t v125 = (void *)objc_claimAutoreleasedReturnValue([v1 creationDate]);
      id v126 = objc_claimAutoreleasedReturnValue([v125 description]);
      std::string::size_type v127 = [v126 UTF8String];
      *(_DWORD *)uint64_t v141 = 136315138;
      uint64_t v142 = v127;
      _os_log_impl((void *)&_mh_execute_header, v124, OS_LOG_TYPE_INFO, "\t\t  - Created on: \t%s\n", v141, 0xCu);
    }
  }

  uint64_t v128 = (void *)objc_claimAutoreleasedReturnValue([v1 lastModificationDate]);
  BOOL v129 = v128 == 0LL;

  if (!v129)
  {
    int v130 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
    uint64_t v131 = (os_log_s *)objc_claimAutoreleasedReturnValue(v130);
    if (os_log_type_enabled(v131, OS_LOG_TYPE_INFO))
    {
      uint64_t v132 = (void *)objc_claimAutoreleasedReturnValue([v1 lastModificationDate]);
      id v133 = objc_claimAutoreleasedReturnValue([v132 description]);
      uint64_t v134 = [v133 UTF8String];
      *(_DWORD *)uint64_t v141 = 136315138;
      uint64_t v142 = v134;
      _os_log_impl((void *)&_mh_execute_header, v131, OS_LOG_TYPE_INFO, "\t\t  - Last modified on: \t%s\n", v141, 0xCu);
    }
  }

  uint64_t v135 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
  unsigned int v136 = (os_log_s *)objc_claimAutoreleasedReturnValue(v135);
  if (os_log_type_enabled(v136, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v141 = 0;
    _os_log_impl((void *)&_mh_execute_header, v136, OS_LOG_TYPE_INFO, "\t-----------------\n", v141, 2u);
  }

  if (v140 < 0) {
    operator delete(*(void **)v139);
  }
  if (v144 < 0) {
    operator delete(*(void **)buf);
  }
  if (v138 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1001D6428( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }

  _Unwind_Resume(a1);
}

void sub_1001D6A50(_Unwind_Exception *a1)
{
  id v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1001D6D4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1001D6DB8(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int16 v4 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    int v9 = 136315138;
    unint64_t v10 = "-[ThreadNetworkManagerInstance deleteCurrentNetwork:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Inside : %s : ", (uint8_t *)&v9, 0xCu);
  }

  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + memset(&v22.ai_socktype, 0, 40) = v3;
  id v8 = v3;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1001D6EA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001D6FC8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001D7118(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001D75D4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    sub_100006EEC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001D78D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1001D7940(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int16 v4 = sub_1000160F4("com.apple.wpantund.tnm", "commissioning");
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    int v9 = 136315138;
    unint64_t v10 = "-[ThreadNetworkManagerInstance deleteCredentialsForThisNetwork:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Inside : %s : ", (uint8_t *)&v9, 0xCu);
  }

  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + memset(&v22.ai_socktype, 0, 40) = v3;
  id v8 = v3;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1001D7A30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001D7EA0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, id a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, id a36)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);

  _Unwind_Resume(a1);
}

void sub_1001D7F60(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = sub_1000160F4("com.apple.wpantund.tnm", "commissioning");
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    int v15 = 136315138;
    int v16 = "-[ThreadNetworkManagerInstance getMeCredentialsForThisNetwork:credentialsRecord_t:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Inside : %s : ", (uint8_t *)&v15, 0xCu);
  }

  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
  unint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + memset(&v22.ai_socktype, 0, 40) = v5;
  id v11 = v5;

  uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + memset(&v22.ai_socktype, 0, 40) = v6;
  id v14 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1001D807C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001D8884( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, void *__p, uint64_t a38, int a39, __int16 a40, char a41, char a42, uint64_t a43, uint64_t a44, int a45, __int16 a46, char a47, char a48, uint64_t a49, uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  _Block_object_dispose(&a22, 8);
  sub_1000089BC((xpc_object_t *)&a28);

  if (a36) {
    (*(void (**)(uint64_t))(*(void *)a36 + 8LL))(a36);
  }

  if (a42 < 0) {
    operator delete(__p);
  }
  if (a49) {
    (*(void (**)(uint64_t))(*(void *)a49 + 8LL))(a49);
  }
  if (a56 < 0) {
    operator delete(a51);
  }

  _Unwind_Resume(a1);
}

void sub_1001D8A38(uint64_t a1, void *a2)
{
  id v4 = a2;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a2);
  if (v4)
  {
    id v5 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1001EDDD8();
    }
  }

  else
  {
    xpc_object_t v7 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_object_t v8 = v7;
    if (!v7) {
      xpc_object_t v8 = xpc_null_create();
    }

    id v9 = v8;
    unint64_t v10 = v9;
    id v17 = v9;
    if (v9)
    {
      if (xpc_get_type(v9) != (xpc_type_t)&_xpc_type_dictionary)
      {
        id v17 = xpc_null_create();
      }
    }

    else
    {
      id v17 = xpc_null_create();
    }

    id v11 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v19 = "-[ThreadNetworkManagerInstance fillupThreadCredentialsToSelfHealThreadNetwork:store:]_block_invoke";
      __int16 v20 = 1024;
      int v21 = 3374;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "%s:%d: NCP is offline, Creating a new network and saving thread configuration again, this will be marked as new preferred network...",  buf,  0x12u);
    }

    uint64_t v13 = *(void **)(a1 + 32);
    sub_1001BF91C(&v16, &v17);
    [v13 formNewNetwork:&v16];
    id v14 = v16;
    int v16 = 0LL;

    id v15 = v17;
    id v17 = 0LL;
  }
}

void sub_1001D8C44( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    sub_100006EEC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001D8C94(uint64_t a1, void *a2)
{
  id v4 = a2;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a2);
  if (v4)
  {
    id v5 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1001EDE4C();
    }
  }

  else
  {
    xpc_object_t v7 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    xpc_object_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315394;
      uint64_t v12 = "-[ThreadNetworkManagerInstance fillupThreadCredentialsToSelfHealThreadNetwork:store:]_block_invoke";
      __int16 v13 = 1024;
      int v14 = 3422;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s:%d: Saving thread configuration again, this will be marked as new preferred network...",  buf,  0x12u);
    }

    [*(id *)(a1 + 32) saveThreadConfiguration:*(void *)(*(void *)(a1 + 48) + 8) + 48];
    if (v10 < 0) {
      operator delete(__p);
    }
  }
}

void sub_1001D8DEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001D8FE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id a22)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose((const void *)(v23 - 80), 8);

  _Unwind_Resume(a1);
}

void sub_1001D9034(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    xpc_object_t v7 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
    xpc_object_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1001EDFA0();
    }
  }

  else
  {
    id v9 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
    char v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v16 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "Got the Credentials Record, for the PreferredNetwork",  v16,  2u);
    }

    uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v12 = v5;
    xpc_object_t v8 = *(os_log_s **)(v11 + 40);
    *(void *)(v11 + memset(&v22.ai_socktype, 0, 40) = v12;
  }

  uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8LL);
  int v14 = *(void **)(v13 + 40);
  *(void *)(v13 + memset(&v22.ai_socktype, 0, 40) = v6;
  id v15 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1001D9150(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001D9340( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id a22)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose((const void *)(v23 - 80), 8);

  _Unwind_Resume(a1);
}

void sub_1001D9390(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    xpc_object_t v7 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
    xpc_object_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1001EDFA0();
    }
  }

  else
  {
    id v9 = sub_1000160F4("com.apple.wpantund.tnm", "threadStart");
    char v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v16 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "Got the Credentials Record, for the PreferredNetwork",  v16,  2u);
    }

    uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v12 = v5;
    xpc_object_t v8 = *(os_log_s **)(v11 + 40);
    *(void *)(v11 + memset(&v22.ai_socktype, 0, 40) = v12;
  }

  uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8LL);
  int v14 = *(void **)(v13 + 40);
  *(void *)(v13 + memset(&v22.ai_socktype, 0, 40) = v6;
  id v15 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1001D94AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001D98F0(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_100006EEC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001D9E50( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, id a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, id a36)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);

  _Unwind_Resume(a1);
}

void sub_1001D9F3C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  xpc_object_t v7 = sub_1000160F4("com.apple.wpantund.tnm", "commissioning");
  xpc_object_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    int v23 = 136315138;
    uint64_t v24 = "-[ThreadNetworkManagerInstance getMePassPhraseForThisNetwork:passPhrase:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Inside : %s : ", (uint8_t *)&v23, 0xCu);
  }

  if (v5)
  {
    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v10 = v5;
    uint64_t v11 = *(os_log_s **)(v9 + 40);
    *(void *)(v9 + memset(&v22.ai_socktype, 0, 40) = v10;
  }

  else
  {
    id v12 = sub_1000160F4("com.apple.wpantund.tnm", "commissioning");
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_1001EE150(v11, v13, v14, v15, v16, v17, v18, v19);
    }
  }

  uint64_t v20 = *(void *)(*(void *)(a1 + 48) + 8LL);
  int v21 = *(void **)(v20 + 40);
  *(void *)(v20 + memset(&v22.ai_socktype, 0, 40) = v6;
  id v22 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1001DA094(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DA1D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DA4C0(_Unwind_Exception *exception_object)
{
}

void sub_1001DA7BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

id sub_1001DA828(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_1001DA830(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_1001DA894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  xpc_object_t v8 = sub_1000160F4("com.apple.wpantund.tnm", "commissioning");
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    int v11 = 136315906;
    id v12 = "-[ThreadNetworkManagerInstance retrieveAndPostThirdPartyInfo]_block_invoke";
    __int16 v13 = 2048;
    uint64_t v14 = a2;
    __int16 v15 = 2048;
    uint64_t v16 = a3;
    __int16 v17 = 2048;
    uint64_t v18 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%s : numThirdPartyBRs : %lu numPrefNwByThirdPartyBRs : %lu numPrefNwByAppleBRs : %lu",  (uint8_t *)&v11,  0x2Au);
  }

  sub_1000E8054(a2, a3, a4);
  return [*(id *)(a1 + 32) sendThirdPartyMetricsInfo:a2 prefNws:a3 prefNwsByApple:a4];
}

void sub_1001DB368( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, int a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, uint64_t a27, int a28, __int16 a29, char a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, void *a38, uint64_t a39, int a40, __int16 a41, char a42, char a43, uint64_t a44, uint64_t a45, uint64_t a46, void *__p, uint64_t a48, int a49, __int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a2) {
    sub_100006EEC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001DC350( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, int a42, __int16 a43, char a44, char a45, uint64_t a46, void *__p, uint64_t a48, int a49, __int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a52 < 0) {
    operator delete(__p);
  }
  if (a61 < 0) {
    operator delete(a56);
  }

  _Unwind_Resume(a1);
}

void sub_1001DCB04( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a2) {
    sub_100006EEC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001DCF34( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }

  _Unwind_Resume(a1);
}

void sub_1001DD0C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DD9CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, void *a34, uint64_t a35, int a36, __int16 a37, char a38, char a39)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a39 < 0) {
    operator delete(a34);
  }

  _Unwind_Resume(a1);
}

void sub_1001DE2F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, id a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, id a30)
{
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a25, 8);

  _Unwind_Resume(a1);
}

void sub_1001DE460(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), a4);
  if (v10)
  {
    int v11 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_1001EE7E8();
    }
  }

  else
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL), a2);
    __int16 v13 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
      int v18 = 136315650;
      uint64_t v19 = "-[ThreadNetworkManagerInstance updatePreferredNetworkForDatasetChange]_block_invoke";
      __int16 v20 = 1024;
      int v21 = 4740;
      __int16 v22 = 2112;
      uint64_t v23 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "%s:%d: Got the Active DataSet unique Id : %@ on updating the preferred network",  (uint8_t *)&v18,  0x1Cu);
    }

    uint64_t v16 = *(void *)(a1 + 32);
    id v17 = v9;
    id v12 = *(os_log_s **)(v16 + 136);
    *(void *)(v16 + 136) = v17;
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_1001DE600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DEB08( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, uint64_t a25, void *__p, uint64_t a27, int a28, __int16 a29, char a30, char a31, void *a32, uint64_t a33, int a34, __int16 a35, char a36, char a37, uint64_t a38, uint64_t a39, void *a40, uint64_t a41, int a42, __int16 a43, char a44, char a45)
{
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8LL))(a17);
  }
  if (a24) {
    (*(void (**)(uint64_t))(*(void *)a24 + 8LL))(a24);
  }
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  _Unwind_Resume(a1);
}

void sub_1001DED9C(_Unwind_Exception *a1)
{
  id v4 = v2;

  _Unwind_Resume(a1);
}

void sub_1001DF12C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, id a28)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a23, 8);

  _Unwind_Resume(a1);
}

void sub_1001DF1B8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + memset(&v22.ai_socktype, 0, 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + memset(&v22.ai_socktype, 0, 40) = v6;
  id v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1001DF574(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _Unwind_Resume(a1);
}

void sub_1001DF808( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8LL))(a17);
  }
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1001DFA68( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  if (a22) {
    (*(void (**)(uint64_t))(*(void *)a22 + 8LL))(a22);
  }
  _Unwind_Resume(a1);
}

void sub_1001E0C24(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100006EEC(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1001E0E40(id *a1)
{
  id v1 = sub_1000EA704(a1);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  BOOL v3 = xpc_get_type(v2) == (xpc_type_t)&_xpc_type_dictionary;

  return v3;
}

void sub_1001E0E80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001E0E90(uint64_t a1, void *a2, void *a3)
{
  id v31 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1001EED9C();
    }
    goto LABEL_16;
  }

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL), a2);
  uint64_t v9 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    id v11 = *(const char **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
    *(_DWORD *)__int128 buf = 138412290;
    __int16 v35 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "#mOS: Got the Active DataSet unique Id : %@",  buf,  0xCu);
  }

  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) getPreferredNetwork]);
  id v8 = v12;
  if (!v12)
  {
LABEL_9:
    id v6 = 0LL;
    goto LABEL_16;
  }

  __int16 v13 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s network](v12, "network"));
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 networkName]);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) networkName]);
  if ([v14 isEqualToString:v15])
  {
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s network](v8, "network"));
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 extendedPANID]);
    int v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) extendedPANID]);
    unsigned __int8 v19 = [v17 isEqualToData:v18];

    if ((v19 & 1) != 0) {
      goto LABEL_9;
    }
  }

  else
  {
  }

  __int16 v20 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  int v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    __int16 v25 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s network](v8, "network"));
    __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([v25 networkName]);
    id v27 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s network](v8, "network"));
    unint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v27 extendedPANID]);
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) networkName]);
    unsigned int v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) extendedPANID]);
    *(_DWORD *)__int128 buf = 136316418;
    __int16 v35 = "-[ThreadNetworkManagerInstance saveThreadConfiguration:passPhrase:uuid:]_block_invoke";
    __int16 v36 = 1024;
    int v37 = 5205;
    __int16 v38 = 2112;
    __int16 v39 = v26;
    __int16 v40 = 2112;
    __int16 v41 = v28;
    __int16 v42 = 2112;
    BOOL v43 = v29;
    __int16 v44 = 2112;
    char v45 = v30;
    _os_log_error_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "%s:%d: Error, Preferred network exists (name : %@, xpanid : %@)  ! But newly created netowrk (name : %@, xpanid : %@) doesn't match with it, let's leave the network and delete this new network credentials..",  buf,  0x3Au);
  }

  [*(id *)(*(void *)(a1 + 32) + 32) leave];
  if (v33 < 0) {
    operator delete(__p);
  }
  [*(id *)(a1 + 32) deleteCurrentNetwork:*(void *)(a1 + 48)];
  id v6 = (id)objc_claimAutoreleasedReturnValue( +[NSError storeError:description:]( &OBJC_CLASS___NSError,  "storeError:description:",  6LL,  @"Thread network sync failure"));
LABEL_16:

  uint64_t v22 = *(void *)(*(void *)(a1 + 72) + 8LL);
  uint64_t v23 = *(void **)(v22 + 40);
  *(void *)(v22 + memset(&v22.ai_socktype, 0, 40) = v6;
  id v24 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
}

void sub_1001E1224( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1001E12E8(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (v7)
  {
    id v8 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1001EED9C();
    }
  }

  else
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a2);
    id v10 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
      int v15 = 138412290;
      uint64_t v16 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "#mOS: Got the Active DataSet unique Id : %@",  (uint8_t *)&v15,  0xCu);
    }
  }

  uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8LL);
  __int16 v13 = *(void **)(v12 + 40);
  *(void *)(v12 + memset(&v22.ai_socktype, 0, 40) = v7;
  id v14 = v7;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1001E1440(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001E1870( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27, uint64_t a28)
{
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8LL))(a17);
  }
  *(void *)(v28 - 112) = &a18;
  sub_100006F6C((void ***)(v28 - 112));
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1001E1B3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001E2614( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31, void *__p, uint64_t a33, int a34, __int16 a35, char a36, char a37, uint64_t a38, void *a39, uint64_t a40, uint64_t a41, uint64_t a42, void *a43, uint64_t a44, int a45, __int16 a46, char a47, char a48, uint64_t a49, void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a37 < 0) {
    operator delete(__p);
  }

  if (a48 < 0) {
    operator delete(a43);
  }
  if (a55 < 0) {
    operator delete(a50);
  }
  _Unwind_Resume(a1);
}

void sub_1001E2EC0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }

  _Unwind_Resume(a1);
}

void sub_1001E3520( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, void *__p, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001E3920( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, uint64_t a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31)
{
  if (a18 < 0) {
    operator delete(__p);
  }

  if (a31 < 0) {
    operator delete(a26);
  }

  _Unwind_Resume(a1);
}

void sub_1001E5874( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, void *a34, uint64_t a35, uint64_t a36, uint64_t a37, void *a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, xpc_object_t a44)
{
  if (a33) {
    (*(void (**)(uint64_t))(*(void *)a33 + 8LL))(a33);
  }
  if (a37) {
    (*(void (**)(uint64_t))(*(void *)a37 + 8LL))(a37);
  }
  sub_1000089BC(&a44);
  _Unwind_Resume(a1);
}

void sub_1001E618C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22) {
    (*(void (**)(uint64_t))(*(void *)a22 + 8LL))(a22);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001E64AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    sub_100006EEC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001E6A70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001E6A8C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v2 timeIntervalSince1970];
  double v4 = v3;

  id v5 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315650;
    id v8 = "-[ThreadNetworkManagerInstance initCheckPreferredTimer]_block_invoke";
    __int16 v9 = 1024;
    int v10 = 6066;
    __int16 v11 = 2048;
    double v12 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s:%d: Self heal thread network timer triggered : Timer Triggered timestamp :%f",  (uint8_t *)&v7,  0x1Cu);
  }

  if (v4 > 1657720000.0 && sub_1001102DC("CheckPreferredTimeStamp", v4)) {
    [*(id *)(a1 + 32) checkPreferredThreadNetworkTimerHandler];
  }
}

void sub_1001E6BB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001E6E88( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8LL))(a15);
  }
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1001E77D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, uint64_t a30, void *a31, uint64_t a32, int a33, __int16 a34, char a35, char a36, uint64_t a37, void *a38, uint64_t a39, int a40, __int16 a41, char a42, char a43, uint64_t a44, uint64_t a45, uint64_t a46, int a47, __int16 a48, char a49, char a50)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8LL))(a16);
  }
  if (a23) {
    (*(void (**)(uint64_t))(*(void *)a23 + 8LL))(a23);
  }
  if (a30) {
    (*(void (**)(uint64_t))(*(void *)a30 + 8LL))(a30);
  }
  if (a37) {
    (*(void (**)(uint64_t))(*(void *)a37 + 8LL))(a37);
  }
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8LL))(a44);
  }
  uint64_t v53 = *(void *)(v51 - 160);
  if (v53) {
    (*(void (**)(uint64_t))(*(void *)v53 + 8LL))(v53);
  }
  uint64_t v54 = *(void *)(v51 - 128);
  if (v54) {
    (*(void (**)(uint64_t))(*(void *)v54 + 8LL))(v54);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001E7B84( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8LL))(a15);
  }
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001E7DF8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  if (a22 < 0) {
    operator delete(__p);
  }

  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(a1);
}

void sub_1001E7E48(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained getNCPState:1];
    if (*((_DWORD *)v2 + 5) != 8)
    {
      [v2[4] reset:1];
      if (v4 < 0) {
        operator delete(__p);
      }
    }
  }
}

void sub_1001E7EB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001E81C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1001E82B4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && WeakRetained[5] == 5) {
    [WeakRetained resumeNetwork];
  }
}

void sub_1001E8300( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1001E8440(uint64_t a1)
{
  int v25 = 3;
  __int128 v26 = v22;
  uint64_t v27 = v23;
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v24 = 0LL;
  double v3 = (void *)objc_claimAutoreleasedReturnValue([v2 CtrInternalClientPtr]);
  sub_10000AC00(__p, "Thread:ChildTable:AsValMap");
  if (v3)
  {
    [v3 getProperty:__p output:&v24];
  }

  else
  {
    __int128 v23 = 0u;
    __int128 v22 = 0u;
  }

  sub_1000E4898(&v25, (uint64_t)&v22);
  if (SHIBYTE(v23) < 0) {
    operator delete(*((void **)&v22 + 1));
  }
  if (v21 < 0) {
    operator delete(__p[0]);
  }

  if (v25)
  {
    char v4 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1001EF28C();
    }
LABEL_25:

    goto LABEL_26;
  }

  uint64_t v6 = v24;
  if (v24) {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 24LL))(v24);
  }
  uint64_t v18 = v6;
  sub_100143FDC((uint64_t)&v18, v19);
  sub_10000C178(v19);
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
  }
  int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) CtrInternalClientPtr]);
  sub_10000AC00(v16, "Thread:ChildTable:Addresses:AsValMap");
  if (v7)
  {
    [v7 getProperty:v16 output:&v24];
  }

  else
  {
    __int128 v23 = 0u;
    __int128 v22 = 0u;
  }

  sub_1000E4898(&v25, (uint64_t)&v22);
  if (SHIBYTE(v23) < 0) {
    operator delete(*((void **)&v22 + 1));
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }

  if (v25)
  {
    id v8 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1001EF260();
    }
    goto LABEL_25;
  }

  uint64_t v9 = v24;
  if (v24) {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 24LL))(v24);
  }
  uint64_t v14 = v9;
  sub_100143C98((uint64_t)&v14, (uint64_t *)&v22);
  int v10 = operator new(0x20uLL);
  int v15 = sub_1001EC4B4(v10, &v22);
  sub_10000C178((uint64_t *)&v22);
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
  }
  __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) CtrInternalClientPtr]);
  sub_10000AC00(v12, "NetworkTopology:ChildMetric");
  objc_msgSend(v11, "signal_property_changed:value:", v12, &v15);
  if (v13 < 0) {
    operator delete(v12[0]);
  }

  if (v15) {
    (*(void (**)(void *))(*v15 + 8LL))(v15);
  }
LABEL_26:
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete((void *)v26);
  }
}

void sub_1001E8720( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  uint64_t v35 = *(void *)(v33 - 72);
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8LL))(v35);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001E8AE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, id a28)
{
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001E8B5C(uint64_t a1)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL))
  {
    uint64_t v2 = sub_1000160F4("com.apple.wpantund.tnm", "commissioning");
    double v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
      int v6 = 136315650;
      int v7 = "-[ThreadNetworkManagerInstance getCountOfThreadBorderRoutersWithMdns:]_block_invoke";
      __int16 v8 = 1024;
      int v9 = 6444;
      __int16 v10 = 2112;
      uint64_t v11 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s:%d: Stopping Scan Tag : %@",  (uint8_t *)&v6,  0x1Cu);
    }
  }

  [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) stopScan];
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1001E9AE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *a20, void *a21, void *a22, void *a23, void *a24)
{
  _Unwind_Resume(a1);
}

void sub_1001EB360( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, void *a21, uint64_t a22, void *a23, void *a24, void *a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, void *a30, uint64_t a31, uint64_t a32, uint64_t a33, void *a34, uint64_t a35, void *a36, void *a37, void *a38, void *a39)
{
  _Unwind_Resume(a1);
}

void sub_1001EBB44( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  if (a18) {
    (*(void (**)(uint64_t))(*(void *)a18 + 8LL))(a18);
  }

  if (a22) {
    (*(void (**)(uint64_t))(*(void *)a22 + 8LL))(a22);
  }

  _Unwind_Resume(a1);
}

void sub_1001EBE64( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  uint64_t v25 = *(void *)(v23 - 56);
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
  }

  _Unwind_Resume(a1);
}

void sub_1001EC1D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  _Unwind_Resume(a1);
}

void *sub_1001EC4B4(void *a1, void *a2)
{
  double v3 = a1 + 1;
  *a1 = off_1002B03B8;
  a1[1] = v3;
  a1[2] = v3;
  a1[3] = 0LL;
  sub_100044C80((uint64_t)v3, v3, a2);
  return a1;
}

  ;
}

uint64_t sub_1001EC50C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 4) = v3;
  *(_WORD *)(a3 + 12) = 2112;
  *(void *)(a3 + 14) = result;
  *(_WORD *)(a3 + 22) = 2112;
  *(void *)(a3 + memset(v10, 0, 24) = a2;
  return result;
}

  ;
}

  ;
}

void sub_1001EC550(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, os_log_s *a4@<X8>)
{
}

void sub_1001EC560( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void sub_1001EC584(uint64_t a1@<X8>)
{
  *(void *)(v1 - std::iostream::~basic_iostream(v2, v3 + 8) = a1;
}

  ;
}

void sub_1001EC5AC()
{
}

void sub_1001EC5D8()
{
}

void sub_1001EC64C()
{
}

void sub_1001EC678( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001EC6E8()
{
  __int16 v3 = 2080;
  uint64_t v4 = v0;
  sub_1000155C8( (void *)&_mh_execute_header,  v1,  (uint64_t)v1,  "Wrong message received from client %s for method %s ",  v2);
  sub_100008188();
}

void sub_1001EC770()
{
}

void sub_1001EC7E4()
{
  sub_100008178( (void *)&_mh_execute_header,  v0,  v1,  "%s:%d:  kWPANTUNDProperty_FrameCounterDuplicateDetectedFlag Property returns duplicate fc tx/rx were detected",  v2,  v3,  v4,  v5,  v6);
  sub_100008188();
}

void sub_1001EC858()
{
}

void sub_1001EC8CC()
{
}

void sub_1001EC940()
{
}

void sub_1001EC9B4()
{
  if (v6 != v7) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = v1;
  }
  *(_DWORD *)uint64_t v2 = 136315138;
  *(void *)(v2 + 4) = v8;
  sub_100012A20( (void *)&_mh_execute_header,  v3,  (uint64_t)v3,  "TNM:NSBackgroundActivity NCPState:%s is not associated. Return here. ",  v4);
  sub_1000EA740();
}

void sub_1001ECA08( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001ECA78()
{
  v2[0] = 136315394;
  sub_1001EC570();
  sub_1000155C8((void *)&_mh_execute_header, v0, v1, "%s: NSUUID :  unique Network Id is %s", (uint8_t *)v2);
  sub_100008188();
}

void sub_1001ECAEC()
{
  int v2 = 136315394;
  uint64_t v3 = "-[ThreadNetworkManagerInstance retrieveActiveDataSetRecordForUniqueId:record:]";
  sub_1001EC4FC();
  sub_1000155C8((void *)&_mh_execute_header, v0, v1, "%s: NSUUID :  unique Network Id is %@", (uint8_t *)&v2);
  sub_100008188();
}

void sub_1001ECB68( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001ECBD8()
{
  int v2 = 138412546;
  uint64_t v3 = v0;
  sub_1001EC4FC();
  sub_1000155C8( (void *)&_mh_execute_header,  v1,  (uint64_t)v1,  "error in getting Credentials Record : %@, for the Network : %@",  (uint8_t *)&v2);
  sub_100008188();
}

void sub_1001ECC48( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001ECCB8()
{
  v2[0] = 136315394;
  sub_1001EC570();
  sub_1000155C8((void *)&_mh_execute_header, v0, v1, "%s: NSUUID :  unique Network Id is %s", (uint8_t *)v2);
  sub_100008188();
}

void sub_1001ECD2C()
{
  int v2 = 136315394;
  uint64_t v3 = "-[ThreadNetworkManagerInstance retrieveCredentialsForUniqueId:credentialsRecord_t:]";
  sub_1001EC4FC();
  sub_1000155C8((void *)&_mh_execute_header, v0, v1, "%s: NSUUID :  unique Network Id is %@", (uint8_t *)&v2);
  sub_100008188();
}

void sub_1001ECDA8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001ECE18()
{
}

void sub_1001ECE44()
{
}

void sub_1001ECE70()
{
}

void sub_1001ECE9C()
{
}

void sub_1001ECEC8()
{
}

void sub_1001ECEF4()
{
}

void sub_1001ECF64()
{
}

void sub_1001ECFD8()
{
}

void sub_1001ED04C()
{
}

void sub_1001ED0C0()
{
  sub_100008178( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Decoded TLV, format is invalid, current position goes out of bound, Line : %d",  v2,  v3,  v4,  v5,  v6);
  sub_100008188();
}

void sub_1001ED134()
{
  sub_100008178( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Decoded Channel mask, mask entry format is invalid, Line : %d",  v2,  v3,  v4,  v5,  v6);
  sub_100008188();
}

void sub_1001ED1A8()
{
  sub_100008178( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> error : Decoded entry length is not matching,  Line : %d",  v2,  v3,  v4,  v5,  v6);
  sub_100008188();
}

void sub_1001ED21C()
{
  sub_100008178( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> error : Decoded Channel page is neither zero nor 2,  Line : %d",  v2,  v3,  v4,  v5,  v6);
  sub_100008188();
}

void sub_1001ED290( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001ED300( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001ED378()
{
}

void sub_1001ED3EC()
{
  sub_100008178((void *)&_mh_execute_header, v0, v1, "%s: #MOS : ==> Decoded channel Len : %d", v2, v3, v4, v5, v6);
  sub_100008188();
}

void sub_1001ED460()
{
  sub_1001940E0( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Invalid pan id length %d, Line : %d",  v2,  v3,  v4,  v5,  2u);
  sub_100008188();
}

void sub_1001ED4D4()
{
  sub_1001940E0( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Invalid extended pan id length %d, Line : %d",  v2,  v3,  v4,  v5,  2u);
  sub_100008188();
}

void sub_1001ED548()
{
  sub_1001940E0( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Invalid pskc length %d, Line : %d",  v2,  v3,  v4,  v5,  2u);
  sub_100008188();
}

void sub_1001ED5BC()
{
  sub_1001940E0( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Invalid network key length %d, Line : %d",  v2,  v3,  v4,  v5,  2u);
  sub_100008188();
}

void sub_1001ED630()
{
  sub_100008178( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Invalid rotation time, Line : %d",  v2,  v3,  v4,  v5,  v6);
  sub_100008188();
}

void sub_1001ED6A4()
{
  sub_1001940E0( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Invalid Security Policy length %d, Line : %d",  v2,  v3,  v4,  v5,  2u);
  sub_100008188();
}

void sub_1001ED718()
{
  sub_1001940E0( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Invalid Mesh local prefix length %d, Line : %d",  v2,  v3,  v4,  v5,  2u);
  sub_100008188();
}

void sub_1001ED78C()
{
  sub_100008178( (void *)&_mh_execute_header,  v0,  v1,  "%s: #MOS : ==> Decoded TLV, format is invalid, current position goes out of bound, Line : %d",  v2,  v3,  v4,  v5,  v6);
  sub_100008188();
}

void sub_1001ED800(uint64_t a1, os_log_s *a2, uint64_t a3)
{
  int v3 = 136315651;
  uint64_t v4 = "-[ThreadNetworkManagerInstance validateDataSetTLVs:creds:]";
  __int16 v5 = 2085;
  uint64_t v6 = a1;
  __int16 v7 = 1024;
  int v8 = 2414;
  sub_1001940C0((void *)&_mh_execute_header, a2, a3, "%s: #TNM : dump: %{sensitive}s, Line : %d", (uint8_t *)&v3);
  sub_1001941B0();
}

void sub_1001ED88C()
{
}

void sub_1001ED900( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001ED970(uint64_t a1, os_log_s *a2, uint64_t a3)
{
  int v3 = 136315394;
  uint64_t v4 = "-[ThreadNetworkManagerInstance howToStartThreadNetwork:credentialsRecord_t:]";
  __int16 v5 = 2080;
  uint64_t v6 = a1;
  sub_1000155C8( (void *)&_mh_execute_header,  a2,  a3,  "%s: Error getting records for unique Network ID : %s",  (uint8_t *)&v3);
  sub_100008188();
}

void sub_1001ED9EC( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001EDA5C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001EDACC()
{
}

void sub_1001EDB40()
{
}

void sub_1001EDB6C()
{
}

void sub_1001EDB98( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001EDC08( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001EDC78( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001EDCE8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001EDD58()
{
}

void sub_1001EDDD8()
{
}

void sub_1001EDE4C()
{
}

void sub_1001EDEC0( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001EDF30( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001EDFA0()
{
}

void sub_1001EE000( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001EE070( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001EE0E0( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001EE150( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001EE1C0()
{
}

void sub_1001EE1EC( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100043870((void *)&_mh_execute_header, a2, a3, "Joiner Attach failed, return code %u", a5, a6, a7, a8, 0);
  sub_100012A58();
}

void sub_1001EE254()
{
  int v2 = 136315394;
  uint64_t v3 = "-[ThreadNetworkManagerInstance formNetworkWithAOD:record:output:]";
  __int16 v4 = 2080;
  uint64_t v5 = v0;
  sub_1000155C8((void *)&_mh_execute_header, v1, (uint64_t)v1, "%s: Dataset is empty (%s) Throw Error", (uint8_t *)&v2);
  sub_100008188();
}

void sub_1001EE2DC()
{
  *(_DWORD *)int v2 = 136315650;
  sub_1001A0A34();
  *(_DWORD *)&v2[7] = 4175;
  v2[9] = 2080;
  uint64_t v3 = v0;
  sub_1001940C0( (void *)&_mh_execute_header,  v1,  (uint64_t)v1,  "%s:%d Dataset is not of TLV format (%s), calling formNetworkWithCreds",  (uint8_t *)v2);
  sub_1001941B0();
}

void sub_1001EE36C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000169DC( (void *)&_mh_execute_header,  a1,  a3,  "%s: Passphrase is nil, unable to generate PSKc, returning failure..",  a5,  a6,  a7,  a8,  2u);
  sub_100008188();
}

void sub_1001EE3DC( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001EE44C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001EE4BC()
{
}

void sub_1001EE530()
{
}

void sub_1001EE5A4()
{
}

void sub_1001EE618()
{
}

void sub_1001EE68C()
{
}

void sub_1001EE700()
{
}

void sub_1001EE774()
{
}

void sub_1001EE7E8()
{
  v2[0] = 136315650;
  sub_1001940B0();
  sub_1001940CC();
  sub_1001940C0( (void *)&_mh_execute_header,  v0,  v1,  " %s:%d: Failed to update preferred network dataset Error : %@",  (uint8_t *)v2);
  sub_1001941B0();
}

void sub_1001EE860()
{
}

void sub_1001EE88C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001EE8FC()
{
  _DWORD *v2 = 136315650;
  sub_1001EC50C(v3, v4, (uint64_t)v2);
  sub_1001EC550((void *)&_mh_execute_header, " %s: Credential Record is nil for the network : %@, xpan : %@", v5, v6);

  sub_1000EA740();
}

void sub_1001EE948()
{
  _DWORD *v2 = 136315650;
  sub_1001EC50C(v3, v4, (uint64_t)v2);
  sub_1001EC550((void *)&_mh_execute_header, " %s: No Credential Record found for the network : %@, xpan : %@", v5, v6);

  sub_1000EA740();
}

void sub_1001EE994( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001EEA04( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001EEA74( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001EEAE4()
{
}

void sub_1001EEB10()
{
}

void sub_1001EEB84()
{
}

void sub_1001EEBF8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001EEC68( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001EECD8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001EED48()
{
  if (v6 != v7) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = v1;
  }
  *(_DWORD *)uint64_t v2 = 136315138;
  *(void *)(v2 + 4) = v8;
  sub_100012A20((void *)&_mh_execute_header, v3, (uint64_t)v3, "Failed to get NCP Network Info : %s", v4);
  sub_1000EA740();
}

void sub_1001EED9C()
{
}

void sub_1001EEDFC()
{
  *(_DWORD *)uint64_t v3 = 136315650;
  sub_1001940B0();
  *(_DWORD *)&int v3[7] = 5348;
  v3[9] = 2080;
  uint64_t v4 = v0;
  sub_1001940C0( (void *)&_mh_execute_header,  v1,  v2,  "%s:%d Error getting records for unique Network ID : %s",  (uint8_t *)v3);
  sub_1001941B0();
}

void sub_1001EEE80()
{
}

void sub_1001EEEF4( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001EEF64( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001EEFCC()
{
}

void sub_1001EEFF8()
{
}

void sub_1001EF06C()
{
}

void sub_1001EF0E0()
{
}

void sub_1001EF154( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001EF1C4( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001EF234()
{
}

void sub_1001EF260()
{
}

void sub_1001EF28C()
{
}

void sub_1001EF2B8()
{
  *(_DWORD *)uint64_t v3 = 136315650;
  sub_1001940B0();
  *(_DWORD *)&int v3[7] = 6453;
  v3[9] = 2048;
  uint64_t v4 = v0;
  sub_1001940C0((void *)&_mh_execute_header, v1, v2, "%s : %d :  Found networks : %lu", (uint8_t *)v3);
  sub_1001941B0();
}

void sub_1001EF33C(void *a1, uint64_t a2, os_log_s *a3)
{
  *(_DWORD *)a2 = 136315650;
  *(void *)(a2 + 4) = "-[ThreadNetworkManagerInstance checkIfNetworkIsFoundInMDNSScan:borderAgentID:]";
  *(_WORD *)(a2 + 12) = 1024;
  *(_DWORD *)(a2 + 14) = 6565;
  *(_WORD *)(a2 + 1std::iostream::~basic_iostream(v2, v3 + 8) = 2112;
  *(void *)(a2 + 2sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = a1;
  sub_1001940C0((void *)&_mh_execute_header, a3, (uint64_t)a3, "%s : %d: Network :%@ not found", (uint8_t *)a2);

  sub_1000EA740();
}

void sub_1001EF3A8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001EF418()
{
  v2[0] = 136315650;
  sub_1001940B0();
  sub_1001940CC();
  sub_1001940C0( (void *)&_mh_execute_header,  v0,  v1,  "%s:%d: baIdStrArray is empty, current device is not advertising meshcop? currentBAIdStr=%@",  (uint8_t *)v2);
  sub_1001941B0();
}

void sub_1001EF490()
{
  v1[0] = 136315650;
  sub_1001940B0();
  sub_1001940CC();
  _os_log_debug_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_DEBUG,  "%s:%d: currentBAIdStr=%@ is the only apple device advertising meshcop",  (uint8_t *)v1,  0x1Cu);
  sub_1001941B0();
}

void sub_1001EF510()
{
}

void sub_1001EF53C()
{
}

void sub_1001EF568()
{
}

void sub_1001EF594()
{
}

void sub_1001EF5C0()
{
}

void sub_1001EF634()
{
  os_log_t v0 = objc_autoreleasePoolPush();
  qword_1002C9DA0 = 0LL;
  unk_1002C9DA8 = 0LL;
  mDaemonVersiouint64_t n = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &mDaemonVersion, (void *)&_mh_execute_header);
  qword_1002C9DB8 = 0LL;
  unk_1002C9DC0 = 0LL;
  mVendorVersiouint64_t n = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &mVendorVersion, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void startThreadNetworkManagerBridge(void)
{
  os_log_t v0 = objc_autoreleasePoolPush();
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_USER_INITIATED, 0);
  uint64_t v2 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v3 = dispatch_queue_create("wpantund.TNM.Queue", v2);
  uint64_t v4 = (void *)tnm_queue;
  tnm_queue = (uint64_t)v3;

  if (!tnm_queue)
  {
    uint64_t v5 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    uint8_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1001EFDBC(v6, v7, v8, v9, v10, v11, v12, v13);
    }
  }

  dispatch_queue_attr_t v14 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_USER_INITIATED, 0);
  int v15 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v14);
  dispatch_queue_t v16 = dispatch_queue_create("periodicStats.TNM.Queue", v15);
  char v17 = (void *)trigger_based_periodic_stats_collection_queue;
  trigger_based_periodic_stats_collection_queue = (uint64_t)v16;

  if (!trigger_based_periodic_stats_collection_queue)
  {
    uint64_t v18 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    unsigned __int8 v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      sub_1001EFD4C(v19, v20, v21, v22, v23, v24, v25, v26);
    }
  }

  uint64_t v27 = objc_alloc(&OBJC_CLASS___ThreadNetworkManagerInstance);
  id v28 = -[ThreadNetworkManagerInstance init:statsQueue:]( v27,  "init:statsQueue:",  tnm_queue,  trigger_based_periodic_stats_collection_queue);
  uint64_t v29 = (void *)instance;
  instance = (uint64_t)v28;

  if (!instance)
  {
    unsigned int v30 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    id v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      sub_1001EFCDC(v31, v32, v33, v34, v35, v36, v37, v38);
    }
  }

  __int16 v39 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  __int16 v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
  if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
  {
    int v43 = 136315394;
    __int16 v44 = "startThreadNetworkManagerBridge";
    __int16 v45 = 2112;
    uint64_t v46 = instance;
    _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_INFO,  "%s: Instance is initiated : %@, signalling semaphore.",  (uint8_t *)&v43,  0x16u);
  }

  dispatch_semaphore_signal((dispatch_semaphore_t)instance_init_semaphore);
  __int16 v41 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  __int16 v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
  if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
  {
    int v43 = 136315138;
    __int16 v44 = "startThreadNetworkManagerBridge";
    _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_INFO,  "%s: instance semaphore is signalled...",  (uint8_t *)&v43,  0xCu);
  }

  objc_autoreleasePoolPop(v0);
}

void threadNetworkManager_MsgHandlerBridge(const std::string *a1@<X0>, xpc::object *a2@<X1>, void **a3@<X8>)
{
  if (tnm_queue)
  {
    if (!instance)
    {
      uint8_t v6 = sub_1000160F4("com.apple.wpantund.tnm", "default");
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = "threadNetworkManager_MsgHandlerBridge";
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s: instance semaphore is waiting...",  (uint8_t *)&buf,  0xCu);
      }

      dispatch_semaphore_wait((dispatch_semaphore_t)instance_init_semaphore, 0xFFFFFFFFFFFFFFFFLL);
    }

    uint64_t v8 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = a1;
      xpc::object::to_string(a2);
      if (v27 >= 0) {
        p___int128 buf = &buf;
      }
      else {
        p___int128 buf = (__int128 *)buf;
      }
      *(_DWORD *)id v28 = 136315394;
      uint64_t v29 = v10;
      __int16 v30 = 2080;
      id v31 = p_buf;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "TNM Handling command for client %s with inputs %s",  v28,  0x16u);
      if (v27 < 0) {
        operator delete((void *)buf);
      }
    }

    uint64_t v12 = (void *)instance;
    std::string::basic_string(&v25, a1);
    sub_1001BF91C(&v24, (id *)a2);
    if (v12) {
      objc_msgSend(v12, "threadNetworkManagerInstance_MsgHandler:message:", &v25, &v24);
    }
    else {
      *a3 = 0LL;
    }
    uint64_t v22 = v24;
    uint64_t v24 = 0LL;
  }

  else
  {
    uint64_t v13 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    dispatch_queue_attr_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "TNM Msg received from client %s before TNM is started",  (uint8_t *)&buf,  0xCu);
    }

    xpc_object_t v15 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_object_t v16 = v15;
    if (!v15) {
      xpc_object_t v16 = xpc_null_create();
    }

    id v17 = v16;
    uint64_t v18 = v17;
    *a3 = v17;
    if (!v17 || xpc_get_type(v17) != (xpc_type_t)&_xpc_type_dictionary)
    {
      xpc_object_t v19 = xpc_null_create();
      uint64_t v20 = *a3;
      *a3 = v19;
    }

    *(void *)&__int128 buf = a3;
    *((void *)&buf + 1) = "ret";
    sub_1001BF8C4((uint64_t)&buf, &v23);
    xpc_object_t v21 = v23;
    xpc_object_t v23 = 0LL;
  }

void sub_1001EFC8C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a2) {
    sub_100006EEC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001EFCDC( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001EFD4C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001EFDBC( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001EFE2C()
{
  os_log_t v0 = objc_autoreleasePoolPush();
  instance_init_semaphore = (uint64_t)dispatch_semaphore_create(0LL);
  objc_autoreleasePoolPop(v0);
}

void sub_1001F048C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F04A8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v2 timeIntervalSince1970];
  double v4 = v3;

  uint64_t v5 = sub_1000160F4("com.apple.wpantund.tnm", "default");
  uint8_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315650;
    uint64_t v8 = "-[ThreadNetworkManagerSelfHealHandler initSelfHealThreadNetworkTimer]_block_invoke";
    __int16 v9 = 1024;
    int v10 = 105;
    __int16 v11 = 2048;
    double v12 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s:%d: Self heal thread network timer triggered : Timer Triggered timestamp :%f",  (uint8_t *)&v7,  0x1Cu);
  }

  if (v4 > 1657720000.0 && sub_1001102DC("SelfHealTimeStamp", v4)) {
    [*(id *)(a1 + 32) selfHealThreadNetworkTimerHandler];
  }
}

void sub_1001F05D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F07B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F092C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F0954(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    double v3 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    double v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1001F0CA4();
    }
  }

  else
  {
    uint64_t v5 = sub_1000160F4("com.apple.wpantund.tnm", "default");
    double v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      int v6 = 136315394;
      int v7 = "-[ThreadNetworkManagerSelfHealHandler cleanUpThreadKeychainEntries]_block_invoke";
      __int16 v8 = 1024;
      int v9 = 159;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s:%d:  Cleaned up the keychain database successfully.",  (uint8_t *)&v6,  0x12u);
    }
  }
}

void sub_1001F0A60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F0AD4( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001F0B44()
{
}

void sub_1001F0BBC()
{
}

void sub_1001F0C34( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001F0CA4()
{
  *(_DWORD *)uint64_t v2 = 136315650;
  sub_1001940B0();
  *(_DWORD *)&v2[7] = 161;
  v2[9] = 2112;
  uint64_t v3 = v0;
  _os_log_error_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_ERROR,  "%s:%d:  Failed to cleanup the keychain database, CFStreamError error = %@.",  (uint8_t *)v2,  0x1Cu);
}

void threadNetworkManager_MsgHandler(const std::string *a1, void **a2, uint64_t a3)
{
  int v6 = sub_1000F3D4C();
  int v7 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tnm", "default");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 67109120;
    DWORD1(buf) = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "threadNetworkManager_MsgHandler - os_feature_enabled : %d",  (uint8_t *)&buf,  8u);
  }

  if ((v6 & 1) == 0)
  {
    uint64_t v13 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tnm", "default");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = "threadNetworkManager_MsgHandler";
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "%s: This functionality is disabled...",  (uint8_t *)&buf,  0xCu);
    }

    xpc_object_t v14 = xpc_null_create();
    if (*(void *)a3) {
      xpc_object_t v15 = _Block_copy(*(const void **)a3);
    }
    else {
      xpc_object_t v15 = 0LL;
    }
    id v17 = *(dispatch_queue_s **)(a3 + 8);
    *(void *)&__int128 buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 1174405120LL;
    uint64_t v29 = sub_1001F1380;
    __int16 v30 = &unk_1002B5BC8;
    if (v15) {
      uint64_t v18 = _Block_copy(v15);
    }
    else {
      uint64_t v18 = 0LL;
    }
    int v33 = 6;
    aBlocuint64_t k = v18;
    xpc_object_t object = v14;
    if (v14) {
      xpc_retain(v14);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    dispatch_async(v17, &buf);
    xpc_release(object);
    xpc_object_t object = 0LL;
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v15) {
      _Block_release(v15);
    }
    goto LABEL_51;
  }

  BOOL v8 = tnm_queue == 0;
  int v9 = (os_log_s *)sub_1000160F4("com.apple.wpantund.tnm", "default");
  int v10 = v9;
  if (v8)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1001F13F8(v10);
    }
    xpc_object_t v14 = xpc_null_create();
    if (*(void *)a3) {
      xpc_object_t v16 = _Block_copy(*(const void **)a3);
    }
    else {
      xpc_object_t v16 = 0LL;
    }
    xpc_object_t v21 = *(dispatch_queue_s **)(a3 + 8);
    *(void *)&__int128 buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 1174405120LL;
    uint64_t v29 = sub_1001F1380;
    __int16 v30 = &unk_1002B5BC8;
    if (v16) {
      uint64_t v22 = _Block_copy(v16);
    }
    else {
      uint64_t v22 = 0LL;
    }
    int v33 = 2;
    aBlocuint64_t k = v22;
    xpc_object_t object = v14;
    if (v14) {
      xpc_retain(v14);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    dispatch_async(v21, &buf);
    xpc_release(object);
    xpc_object_t object = 0LL;
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v16) {
      _Block_release(v16);
    }
LABEL_51:
    xpc_release(v14);
    return;
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "threadNetworkManager_MsgHandler";
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s: dispatching on msg bridge response handler ...",  (uint8_t *)&buf,  0xCu);
  }

  __int16 v11 = (dispatch_queue_s *)tnm_queue;
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 1174405120LL;
  void v23[2] = sub_1001F11D8;
  v23[3] = &unk_1002B5B98;
  std::string::basic_string(&__p, a1);
  double v12 = *a2;
  xpc_object_t v25 = v12;
  if (v12) {
    xpc_retain(v12);
  }
  else {
    xpc_object_t v25 = xpc_null_create();
  }
  xpc_object_t v19 = *(void **)a3;
  if (*(void *)a3) {
    xpc_object_t v19 = _Block_copy(v19);
  }
  uint64_t v20 = *(dispatch_object_s **)(a3 + 8);
  uint64_t v26 = v19;
  dispatch_object_t v27 = v20;
  if (v20) {
    dispatch_retain(v20);
  }
  dispatch_async(v11, v23);
  if (v27) {
    dispatch_release(v27);
  }
  if (v26) {
    _Block_release(v26);
  }
  xpc_release(v25);
  xpc_object_t v25 = 0LL;
}

void sub_1001F1134(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100006EEC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1001F11D8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  xpc_object_t object = v2;
  if (v2) {
    xpc_retain(v2);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  threadNetworkManager_MsgHandlerBridge(&v9, (xpc::object *)&object, &v10);
  xpc_release(object);
  xpc_object_t object = 0LL;
  xpc_object_t v3 = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    xpc_object_t v3 = xpc_null_create();
  }
  uint64_t v4 = *(const void **)(a1 + 64);
  if (v4) {
    uint64_t v5 = _Block_copy(v4);
  }
  else {
    uint64_t v5 = 0LL;
  }
  int v6 = *(dispatch_queue_s **)(a1 + 72);
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120LL;
  block[2] = sub_1001F1380;
  block[3] = &unk_1002B5BC8;
  if (v5) {
    int v7 = _Block_copy(v5);
  }
  else {
    int v7 = 0LL;
  }
  int v14 = 0;
  aBlocuint64_t k = v7;
  xpc_object_t v13 = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t v13 = xpc_null_create();
  }
  dispatch_async(v6, block);
  xpc_release(v13);
  xpc_object_t v13 = 0LL;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  xpc_release(v3);
  xpc_release(v10);
}

void sub_1001F1358( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1001F1380(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  xpc_object_t object = v2;
  if (v2) {
    xpc_retain(v2);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, void, xpc_object_t *))(v3 + 16))(v3, v1, &object);
  xpc_release(object);
}

void sub_1001F13E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1001F13F8(os_log_t log)
{
  int v1 = 136315138;
  uint64_t v2 = "threadNetworkManager_MsgHandler";
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "%s: Returning error response handler ...",  (uint8_t *)&v1,  0xCu);
}

uint64_t _startBorderAgent(void)
{
  uint64_t v0 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf.fds_bits[0]) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_INFO,  "BA Wrapper: Starting Border Agent",  (uint8_t *)&buf,  2u);
  }

  if (byte_1002D1A58 == 1)
  {
    uint64_t v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_1001F255C();
    }
    if (byte_1002D1A58 == 1) {
      sub_1001F2534();
    }
    return 0LL;
  }

  uint64_t v4 = ot::BorderRouter::Ncp::Controller::Create(0LL, 0LL, 0LL, v1);
  if (!v4) {
    goto LABEL_21;
  }
  uint64_t v23 = 0LL;
  uint64_t v24 = &v23;
  uint64_t v25 = 0x2000000000LL;
  uint64_t v5 = (uint64_t *)operator new(0x50uLL);
  ot::BorderRouter::AgentInstance::AgentInstance(v5, (uint64_t)v4);
  uint64_t v26 = v5;
  int v6 = (ot::BorderRouter::AgentInstance *)v24[3];
  if (!v6)
  {
    xpc_object_t v13 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_1001F2588();
    }
    uint64_t v3 = 1LL;
    goto LABEL_36;
  }

  ot::BorderRouter::AgentInstance::Init(v6);
  int v7 = dispatch_queue_create("Border Agent debug queue", 0LL);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 0x40000000LL;
  v22[2] = sub_1001F19DC;
  void v22[3] = &unk_1002B5C00;
  void v22[4] = &v23;
  uint64_t v8 = os_state_add_handler(v7, v22);
  byte_1002D1A58 = 1;
  ot::BorderRouter::AgentInstance::TurnEventsOn((ot::BorderRouter::AgentInstance *)v24[3]);
  std::string v9 = (ot::BorderRouter::AgentInstance *)v24[3];
  xpc_object_t v10 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf.fds_bits[0]) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "BA Wrapper: Border router agent started.",  (uint8_t *)&buf,  2u);
  }

  if (!ot::BorderRouter::AgentInstance::IsSocketValid(v9))
  {
    int v14 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      sub_1001F2624();
    }
    goto LABEL_33;
  }

  int v30 = -1;
  timeval v31 = *(timeval *)"\n";
  memset(&buf, 0, sizeof(buf));
  memset(&v28, 0, sizeof(v28));
  memset(&v29, 0, sizeof(v29));
  ot::BorderRouter::AgentInstance::UpdateFdSet(v9, (uint64_t)&buf);
  int v11 = v30 + 1;
  if (__OFADD__(v30, 1))
  {
LABEL_20:
    __break(0x5500u);
LABEL_21:
    double v12 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
    uint64_t v3 = 1LL;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf.fds_bits[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "BA Wrapper: Failed to start Border Agent",  (uint8_t *)&buf,  2u);
    }

    return v3;
  }

  while (1)
  {
    if ((select(v11, &buf, &v28, &v29, &v31) & 0x80000000) == 0)
    {
      ot::BorderRouter::AgentInstance::Process(v9, &buf);
      goto LABEL_17;
    }

    if (*__error() != 4) {
      break;
    }
LABEL_17:
    if (ot::BorderRouter::AgentInstance::IsSocketClosedFlagSet(v9))
    {
      xpc_object_t v15 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        sub_1001F25B4();
      }
      goto LABEL_32;
    }

    int v30 = -1;
    timeval v31 = *(timeval *)"\n";
    memset(&buf, 0, sizeof(buf));
    memset(&v28, 0, sizeof(v28));
    memset(&v29, 0, sizeof(v29));
    ot::BorderRouter::AgentInstance::UpdateFdSet(v9, (uint64_t)&buf);
    int v11 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      goto LABEL_20;
    }
  }

  xpc_object_t v16 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    id v17 = __error();
    uint64_t v18 = strerror(*v17);
    sub_1001F25E0((uint64_t)v18, v32, v16);
  }

void sub_1001F199C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_1001F19DC(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 100LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    uint64_t v3 = Mutable;
    if (byte_1002D1A58) {
      uint64_t v4 = @"Started";
    }
    else {
      uint64_t v4 = @"Not started";
    }
    CFDictionaryAddValue(Mutable, @"Border Agent state", v4);
    if (qword_1002D1A48) {
      uint64_t v5 = @"Yes";
    }
    else {
      uint64_t v5 = @"NULL";
    }
    CFDictionaryAddValue(v3, @"XPC initialized", v5);
    ot::BorderRouter::AgentInstance::dumpState( *(ot::BorderRouter::AgentInstance **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL),  &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    CFStringRef v7 = CFStringCreateWithCString(0LL, (const char *)p_p, 0x8000100u);
    if (v7)
    {
      CFDictionaryAddValue(v3, @"Border Agent", v7);
      CFRelease(v7);
    }

    else
    {
      uint64_t v8 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_1001F267C();
      }
    }

    Data = CFPropertyListCreateData(0LL, v3, kCFPropertyListBinaryFormat_v1_0, 0LL, 0LL);
    xpc_object_t v10 = Data;
    if (!Data)
    {
      CFRelease(v3);
      uint64_t v18 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        sub_1001F2650();
      }
      goto LABEL_30;
    }

    unint64_t Length = CFDataGetLength(Data);
    size_t v12 = Length + 200;
    if (Length < 0xFFFFFFFFFFFFFF38LL)
    {
      xpc_object_t v13 = calloc(1uLL, v12);
      if (!v13) {
        goto LABEL_26;
      }
      int v14 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        xpc_object_t v15 = &__p;
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          xpc_object_t v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)fd_set buf = 134218242;
        unint64_t v21 = Length;
        __int16 v22 = 2080;
        uint64_t v23 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Logging %ld bytes : %s", buf, 0x16u);
      }

      if (v12 >= 4)
      {
        *xpc_object_t v13 = 1;
        if ((v12 & 0xFFFFFFFFFFFFFFFCLL) != 4)
        {
          v13[1] = Length;
          BytePtr = CFDataGetBytePtr(v10);
          memcpy(v13 + 50, BytePtr, Length);
LABEL_26:
          CFRelease(v10);
          CFRelease(v3);
          id v17 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)fd_set buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Done logging commissioner state", buf, 2u);
          }

void sub_1001F1CFC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001F1D3C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v3 = *(ot::BorderRouter::AgentInstance **)(v2 + 24);
  if (v3)
  {
    ot::BorderRouter::AgentInstance::~AgentInstance(v3);
    operator delete(v4);
    uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8LL);
  }

  *(void *)(v2 + memset(v10, 0, 24) = 0LL;
}

void CTRBorderAgentInitialize(void)
{
  if (*((void *)&v2 + 1)) {
    sub_10000ABAC(*((std::__shared_weak_count **)&v2 + 1));
  }
  otbrLogInit("otbr-agent", 6u);
  uint64_t v0 = qword_1002D1A48;
  sub_10000AC00(&__p, "NCP:State");
  sub_1000B8860(v0, &__p, &stru_1002B5C68, (dispatch_object_s *)baDispatchQueue);
}

void sub_1001F1E20( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001F1E3C(id a1, any a2)
{
  int v3 = sub_1000B5828(&__p);
  uint64_t v4 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    sub_100147B4C((uint64_t *)a2.var0, &__p);
    uint64_t v5 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)fd_set buf = 67109378;
    int v12 = v3;
    __int16 v13 = 2080;
    int v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "BA Wrapper: Got state update : %u, %s", buf, 0x12u);
  }

  int v6 = (dispatch_queue_s *)mainLoopQueue;
  if (v3 == 8)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 1174405120LL;
    void v8[2] = sub_1001F1FFC;
    void v8[3] = &unk_1002B5C88;
    uint64_t v7 = *(void *)a2.var0;
    if (*(void *)a2.var0) {
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 24LL))(v7);
    }
    uint64_t v9 = v7;
    dispatch_async(v6, v8);
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
    }
  }

  else
  {
    dispatch_async((dispatch_queue_t)mainLoopQueue, &stru_1002B5CD8);
  }

void sub_1001F1FD8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001F1FFC(uint64_t a1)
{
  __int128 v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)fd_set buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "BA Wrapper: Start Border Agent is called", buf, 2u);
  }

  uint64_t v22 = 0LL;
  sub_10000AC00(&v24, "Command Error");
  *(_DWORD *)fd_set buf = 3;
  std::string v21 = v24;
  int v3 = (void *)qword_1002D1A48;
  sub_10000AC00(&v17, "NCP:State");
  sub_1000B77C0(v3, &v17, (uint64_t)&v22, (uint64_t)&v18);
  LODWORD(v24.__r_.__value_.__l.__data_) = v18.__r_.__value_.__l.__data_;
  uint64_t v25 = 0LL;
  *(_OWORD *)&v24.__r_.__value_.__r.__words[1] = 0uLL;
  sub_1000E4898(buf, (uint64_t)&v24);
  if (SHIBYTE(v25) < 0) {
    operator delete((void *)v24.__r_.__value_.__l.__size_);
  }
  if (v19 < 0) {
    operator delete((void *)v18.__r_.__value_.__l.__size_);
  }
  if (*(_DWORD *)buf)
  {
    uint64_t v4 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      goto LABEL_11;
    }
    sub_1000E7B14(*(unsigned int *)buf, &v18);
    int size = (char)v18.__r_.__value_.__s.__size_;
    std::string::size_type v14 = v18.__r_.__value_.__r.__words[0];
    std::string::basic_string(&v23, &v21);
    xpc_object_t v15 = &v18;
    if (size < 0) {
      xpc_object_t v15 = (std::string *)v14;
    }
    if ((v23.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      xpc_object_t v16 = &v23;
    }
    else {
      xpc_object_t v16 = (std::string *)v23.__r_.__value_.__r.__words[0];
    }
    LODWORD(v24.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 4) = (std::string::size_type)"NCP:State";
    WORD2(v24.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v24.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v15;
    HIWORD(v24.__r_.__value_.__r.__words[2]) = 2080;
    uint64_t v25 = v16;
    _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "BA Wrapper: getProperty Failed: %s, res = %s, Error Info: %s \n",  (uint8_t *)&v24,  0x20u);
    int v11 = (void *)v18.__r_.__value_.__r.__words[0];
    goto LABEL_30;
  }

  memset(&v24, 0, sizeof(v24));
  sub_100147B4C(&v22, &v18);
  sub_100014D08((uint64_t)&v24, (__int128 *)&v18);
  int v6 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v7 = (char)v24.__r_.__value_.__s.__size_;
    std::string::size_type v8 = v24.__r_.__value_.__r.__words[0];
    sub_100147B4C((uint64_t *)(a1 + 32), &v18);
    uint64_t v9 = &v24;
    if (v7 < 0) {
      uint64_t v9 = (std::string *)v8;
    }
    if ((v18.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      xpc_object_t v10 = &v18;
    }
    else {
      xpc_object_t v10 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    LODWORD(v23.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
    WORD2(v23.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v23.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v10;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "BA Wrapper: Retrieved state : %s Original state: %s",  (uint8_t *)&v23,  0x16u);
  }

  if (sub_1000B5828(&v24) == 8)
  {
    if (((char)v24.__r_.__value_.__s.__size_ & 0x80000000) == 0)
    {
LABEL_11:
      _startBorderAgent();
      goto LABEL_12;
    }

    int v11 = (void *)v24.__r_.__value_.__r.__words[0];
LABEL_30:
    operator delete(v11);
    goto LABEL_11;
  }

  int v12 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
    sub_1001F26A8();
  }
LABEL_12:
  uint64_t result = v22;
  if (v22) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v22 + 8LL))(v22);
  }
  return result;
}

void sub_1001F2390( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, void *__p, uint64_t a25, int a26, __int16 a27, char a28, char a29, uint64_t a30, uint64_t a31)
{
}

uint64_t sub_1001F242C(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 32);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 24LL))(result);
  }
  *(void *)(a1 + sub_1001B664C(v2 + 32) = result;
  return result;
}

uint64_t sub_1001F2460(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void sub_1001F2478(id a1)
{
  int v1 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "BA Wrapper: Stop Border Agent is called", v3, 2u);
  }

  __int128 v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)fd_set buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "BA Wrapper: Network was not associated", buf, 2u);
  }

void sub_1001F2534()
{
  __assert_rtn("_startBorderAgent", "libBorderAgent.cpp", 115, "_gBorderAgentStarted == false");
}

void sub_1001F255C()
{
}

void sub_1001F2588()
{
}

void sub_1001F25B4()
{
}

void sub_1001F25E0(uint64_t a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)fd_set buf = 136315138;
  *(void *)(buf + 4) = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "BA Wrapper: select() failed : %s", buf, 0xCu);
}

void sub_1001F2624()
{
}

void sub_1001F2650()
{
}

void sub_1001F267C()
{
}

void sub_1001F26A8()
{
}

dispatch_queue_t sub_1001F26D4()
{
  qword_1002D1A48 = 0LL;
  unk_1002D1A50 = 0LL;
  __cxa_atexit((void (*)(void *))sub_1001F1478, &qword_1002D1A48, (void *)&_mh_execute_header);
  baDispatchQueue = (uint64_t)dispatch_queue_create("Border Agent Wrapper", 0LL);
  dispatch_queue_t result = dispatch_queue_create("Border Agent Wrapper MainLoop Queue", 0LL);
  mainLoopQueue = (uint64_t)result;
  return result;
}

void *ot::BorderRouter::Ncp::Controller::Create( ot::BorderRouter::Ncp::Controller *this, const char *a2, char *a3, char *a4)
{
  uint64_t v4 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint8_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Creating controller", v6, 2u);
  }

  dispatch_queue_t result = operator new(0x38uLL);
  result[2] = 0LL;
  *dispatch_queue_t result = &off_1002B5E20;
  result[1] = result + 2;
  result[4] = 0LL;
  result[5] = 0LL;
  result[3] = 0LL;
  return result;
}

void ControllerApple::ControllerApple(ControllerApple *this, const char *a2, char *a3, char *a4)
{
  *((void *)this + 2) = 0LL;
  *(void *)this = &off_1002B5E20;
  *((void *)this + 1) = (char *)this + 16;
  *((void *)this + 4) = 0LL;
  *((void *)this + 5) = 0LL;
  *((void *)this + 3) = 0LL;
}

{
  *((void *)this + 2) = 0LL;
  *(void *)this = &off_1002B5E20;
  *((void *)this + 1) = (char *)this + 16;
  *((void *)this + 4) = 0LL;
  *((void *)this + 5) = 0LL;
  *((void *)this + 3) = 0LL;
}

uint64_t ControllerApple::Init(ControllerApple *this)
{
  if (*((void *)&buf + 1)) {
    sub_10000ABAC(*((std::__shared_weak_count **)&buf + 1));
  }
  sub_1000B7514(*((void *)this + 4));
  *((void *)this + 6) = dispatch_queue_create("BA Internal Event queue", 0LL);
  uint64_t v2 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Initializing controller", (uint8_t *)&buf, 2u);
  }

  uint64_t v3 = *((void *)this + 4);
  sub_10000AC00(&v18, "Network:XPANID");
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 0x40000000LL;
  int v17[2] = sub_1001F2AE4;
  uint64_t v17[3] = &unk_1002B5D70;
  v17[4] = this;
  sub_1000B8860(v3, &v18, v17, *((dispatch_object_s **)this + 6));
  uint64_t v4 = *((void *)this + 4);
  sub_10000AC00(&v16, "NCP:State");
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 0x40000000LL;
  _OWORD v15[2] = sub_1001F2C68;
  void v15[3] = &unk_1002B5D90;
  void v15[4] = this;
  sub_1000B8860(v4, &v16, v15, *((dispatch_object_s **)this + 6));
  uint64_t v5 = *((void *)this + 4);
  sub_10000AC00(&__p, "Network:Name");
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 0x40000000LL;
  v13[2] = sub_1001F2E8C;
  void v13[3] = &unk_1002B5DB0;
  v13[4] = this;
  sub_1000B8860(v5, &__p, v13, *((dispatch_object_s **)this + 6));
  uint64_t v6 = *((void *)this + 4);
  sub_10000AC00(&v12, "UdpForward:Stream");
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 0x40000000LL;
  _DWORD v11[2] = sub_1001F3070;
  void v11[3] = &unk_1002B5DD0;
  void v11[4] = this;
  sub_1000B8860(v6, &v12, v11, *((dispatch_object_s **)this + 6));
  uint64_t v7 = *((void *)this + 4);
  sub_10000AC00(&v10, "NCP:ExtendedAddress");
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 0x40000000LL;
  _DWORD v9[2] = sub_1001F32EC;
  v9[3] = &unk_1002B5DF0;
  void v9[4] = this;
  sub_1000B8860(v7, &v10, v9, *((dispatch_object_s **)this + 6));
  return 0LL;
}

void sub_1001F2A74( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36, uint64_t a37, int a38, __int16 a39, char a40, char a41)
{
  if (a19 < 0) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001F2AE4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    xpc_object_t v15 = "Network:XPANID";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Got Event: %s", buf, 0xCu);
  }

  uint64_t v5 = sub_1001476B4(a2, 0);
  unint64_t v6 = 0LL;
  __int16 v13 = v5;
  unint64_t v7 = 7LL;
  do
  {
    if (v6 > 7 || v7 > 8) {
      __break(1u);
    }
    uint8_t v8 = buf[v6 - 8];
    buf[v6 - 8] = buf[v7 - 8];
    buf[v7 - 8] = v8;
    uint64_t v9 = &buf[v7 - 9];
    ++v6;
    --v7;
  }

  while (&buf[v6 - 8] < v9);
  std::string v10 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 134217984;
    xpc_object_t v15 = (const char *)v13;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Got XPANID : 0x%llX", buf, 0xCu);
  }

  return ot::BorderRouter::EventEmitter::Emit((uint64_t **)(v3 + 8), 0, v11, &v13);
}

void sub_1001F2C68(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"NCP:State";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Got Event: %s", (uint8_t *)&buf, 0xCu);
  }

  sub_100147B4C(a2, &buf);
  if ((char)buf.__r_.__value_.__s.__size_ < 0)
  {
    p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    if (buf.__r_.__value_.__l.__size_ >= 0xA) {
      size_t size = 10LL;
    }
    else {
      size_t size = buf.__r_.__value_.__l.__size_;
    }
  }

  else
  {
    if (buf.__r_.__value_.__s.__size_ >= 0xAu) {
      size_t size = 10LL;
    }
    else {
      size_t size = buf.__r_.__value_.__s.__size_;
    }
    p_std::string buf = &buf;
  }

  int v7 = strncmp((const char *)p_buf, "associated", size);
  uint8_t v8 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = &buf;
    if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v9 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string::size_type v14 = 136315394;
    xpc_object_t v15 = v9;
    __int16 v16 = 1024;
    BOOL v17 = v7 == 0;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "Got state update : %s isStateAssociated:%d",  v14,  0x12u);
  }

  if (v7) {
    sub_1000B7514(*(void *)(v3 + 32));
  }
  if ((char)buf.__r_.__value_.__s.__size_ < 0)
  {
    uint64_t v11 = (std::string *)buf.__r_.__value_.__r.__words[0];
    if (buf.__r_.__value_.__l.__size_ >= 0xA) {
      size_t v10 = 10LL;
    }
    else {
      size_t v10 = buf.__r_.__value_.__l.__size_;
    }
  }

  else
  {
    if (buf.__r_.__value_.__s.__size_ >= 0xAu) {
      size_t v10 = 10LL;
    }
    else {
      size_t v10 = buf.__r_.__value_.__s.__size_;
    }
    uint64_t v11 = &buf;
  }

  int v12 = strncmp((const char *)v11, "associated", v10);
  ot::BorderRouter::EventEmitter::Emit((uint64_t **)(v3 + 8), 3u, v13, v12 == 0);
}

void sub_1001F2E64( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001F2E8C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Network:Name";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Got Event: %s", (uint8_t *)&buf, 0xCu);
  }

  sub_100147B4C(a2, &buf);
  if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    unint64_t size = buf.__r_.__value_.__s.__size_;
  }
  else {
    unint64_t size = buf.__r_.__value_.__l.__size_;
  }
  if (size < 0x11)
  {
    uint64_t v13 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      p_std::string buf = &buf;
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)BOOL v17 = 136315138;
      std::string v18 = p_buf;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Got new Network Name : %s", v17, 0xCu);
    }

    __int16 v16 = &buf;
    if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      __int16 v16 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    ot::BorderRouter::EventEmitter::Emit((uint64_t **)(v3 + 8), 1u, v14, v16);
  }

  else
  {
    unint64_t v6 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1001F49A4(size, v6, v7, v8, v9, v10, v11, v12);
    }
  }

void sub_1001F3044( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001F3070(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = "UdpForward:Stream";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Got Event: %s", buf, 0xCu);
  }

  sub_100147058(a2, (uint64_t)&v20);
  size_t v5 = v21 - v20;
  if (v21 == v20) {
    unint64_t v6 = 0LL;
  }
  else {
    unint64_t v6 = v20;
  }
  uint64_t v7 = (unsigned __int8 *)malloc(v21 - v20);
  memcpy(v7, v6, v5);
  size_t v8 = v5 - 1;
  if (!v5) {
    goto LABEL_22;
  }
  if ((v8 & 0x8000000000000000LL) != 0 || v5 <= v8) {
    goto LABEL_23;
  }
  unint64_t v9 = v5 - 2;
  if (v5 == 1)
  {
LABEL_22:
    __break(0x5515u);
    goto LABEL_23;
  }

  if ((v9 & 0x8000000000000000LL) != 0 || v5 <= v9) {
    goto LABEL_23;
  }
  if (v9 < 0x10) {
    goto LABEL_22;
  }
  int v10 = v7[v8];
  int v11 = v7[v9];
  __int128 v19 = *(_OWORD *)&v7[v5 - 18];
  size_t v12 = v5 - 19;
  if (v5 == 18) {
    goto LABEL_22;
  }
  if ((v12 & 0x8000000000000000LL) != 0 || v5 <= v12) {
LABEL_23:
  }
    __break(1u);
  size_t v13 = v5 - 20;
  if (v5 == 19) {
    goto LABEL_22;
  }
  if ((v13 & 0x8000000000000000LL) != 0 || v5 <= v13) {
    goto LABEL_23;
  }
  int v14 = v7[v12];
  int v15 = v7[v13];
  *(_OWORD *)std::string buf = 0u;
  memset(v31, 0, sizeof(v31));
  inet_ntop(30, &v19, (char *)buf, 0x2Eu);
  __int16 v16 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
  uint64_t v17 = v10 | (v11 << 8);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t v22 = 67109890;
    int v23 = v13;
    __int16 v24 = 1024;
    int v25 = v17;
    __int16 v26 = 2080;
    dispatch_object_t v27 = buf;
    __int16 v28 = 1024;
    int v29 = v14 | (v15 << 8);
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "NCP->UDP [%04d] [:%d -> %s::%d]", v22, 0x1Eu);
  }

  ot::BorderRouter::EventEmitter::Emit( (uint64_t **)(v3 + 8),  5u,  v18,  v7,  v13,  v14 | (v15 << 8),  &v19,  v17);
  free(v7);
  *(void *)std::string buf = &v20;
  sub_100006F6C((void ***)buf);
}

void sub_1001F32C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void **a25)
{
  a25 = (void **)&a18;
  sub_100006F6C(&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F32EC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 136315138;
    int v10 = "NCP:ExtendedAddress";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Got Event: %s", buf, 0xCu);
  }

  size_t v5 = sub_1001476B4(a2, 0);
  unint64_t v6 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 134217984;
    int v10 = (const char *)v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Extended address : %llu", buf, 0xCu);
  }

  return ot::BorderRouter::EventEmitter::Emit((uint64_t **)(v3 + 8), 6u, v7, v5);
}

void ControllerApple::eventsON(ControllerApple *this)
{
}

void ControllerApple::printXpc(int a1, uint64_t *a2, xpc_object_t object)
{
  uint64_t v4 = xpc_copy_description(object);
  size_t v5 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315394;
    uint64_t v7 = a2;
    __int16 v8 = 2080;
    unint64_t v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s : %s\n", (uint8_t *)&v6, 0x16u);
  }

  free(v4);
}

void **ControllerApple::RequestEvent(ControllerApple *this, int a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0LL, 0LL, 0LL);
  sub_10000AC00(&buf, "Command Error");
  unsigned int v88 = 3;
  std::string v89 = buf;
  switch(a2)
  {
    case 0:
      int v6 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "==> Get XPANID", (uint8_t *)&buf, 2u);
      }

      uint64_t v87 = 0LL;
      uint64_t v7 = (void *)*((void *)this + 4);
      sub_10000AC00(&v86, "Network:XPANID");
      sub_1000B77C0(v7, &v86, (uint64_t)&v87, (uint64_t)&v90);
      LODWORD(buf.__r_.__value_.__l.__data_) = v90;
      unsigned int v94 = 0LL;
      *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0uLL;
      sub_1000E4898(&v88, (uint64_t)&buf);
      if (SHIBYTE(v94) < 0) {
        operator delete((void *)buf.__r_.__value_.__l.__size_);
      }
      if (v92 < 0) {
        operator delete(*((void **)&v90 + 1));
      }
      if (v88)
      {
        __int16 v8 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
        if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
          break;
        }
        sub_1000E7B14(v88, &v90);
        int v9 = v91;
        int v10 = (__int128 *)v90;
        std::string::basic_string(&v85, &v89);
        int v11 = &v90;
        if (v9 < 0) {
          int v11 = v10;
        }
        if ((v85.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          size_t v12 = &v85;
        }
        else {
          size_t v12 = (std::string *)v85.__r_.__value_.__r.__words[0];
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Network:XPANID";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v11;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
        unsigned int v94 = v12;
        goto LABEL_83;
      }

      dispatch_queue_t result = sub_1001476B4(&v87, 0);
      unint64_t v39 = 0LL;
      *(void *)&__int128 v90 = result;
      unint64_t v40 = 7LL;
      do
      {
        if (v39 > 7 || v40 > 8)
        {
          __break(1u);
          return result;
        }

        char v41 = *((_BYTE *)&v90 + v39);
        *((_BYTE *)&v90 + v39) = *((_BYTE *)&v90 + v40);
        *((_BYTE *)&v90 + vmemset(&v22.ai_socktype, 0, 40) = v41;
        __int16 v42 = (char *)&v90 + v40 - 1;
        ++v39;
        --v40;
      }

      while ((char *)&v90 + v39 < v42);
      int v43 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
      if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v90;
        _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_INFO,  "Retrieved XPANID : 0x%llX",  (uint8_t *)&buf,  0xCu);
      }

      ot::BorderRouter::EventEmitter::Emit((uint64_t **)this + 1, 0, v44, &v90);
      break;
    case 1:
      size_t v13 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "==> Get Network Name", (uint8_t *)&buf, 2u);
      }

      uint64_t v87 = 0LL;
      int v14 = (void *)*((void *)this + 4);
      sub_10000AC00(&v82, "Network:Name");
      sub_1000B77C0(v14, &v82, (uint64_t)&v87, (uint64_t)&v90);
      LODWORD(buf.__r_.__value_.__l.__data_) = v90;
      unsigned int v94 = 0LL;
      *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0uLL;
      sub_1000E4898(&v88, (uint64_t)&buf);
      if (SHIBYTE(v94) < 0) {
        operator delete((void *)buf.__r_.__value_.__l.__size_);
      }
      if (v92 < 0) {
        operator delete(*((void **)&v90 + 1));
      }
      if (!v88)
      {
        sub_100147B4C(&v87, &buf);
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          unint64_t size = buf.__r_.__value_.__s.__size_;
        }
        else {
          unint64_t size = buf.__r_.__value_.__l.__size_;
        }
        if (size < 0x11)
        {
          uint64_t v67 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
          if (os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
          {
            p_std::string buf = &buf;
            if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
            }
            LODWORD(v9sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = 136315138;
            *(void *)((char *)&v90 + 4) = p_buf;
            _os_log_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_INFO,  "Retrieved Network Name : %s",  (uint8_t *)&v90,  0xCu);
          }

          __int128 v70 = &buf;
          if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            __int128 v70 = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          ot::BorderRouter::EventEmitter::Emit((uint64_t **)this + 1, 1u, v68, v70);
        }

        else
        {
          uint64_t v46 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
          if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
            sub_1001F49A4(size, v46, v47, v48, v49, v50, v51, v52);
          }
        }

        goto LABEL_130;
      }

      __int16 v8 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        break;
      }
      sub_1000E7B14(v88, &v90);
      int v15 = v91;
      __int16 v16 = (__int128 *)v90;
      std::string::basic_string(&v85, &v89);
      uint64_t v17 = &v90;
      if (v15 < 0) {
        uint64_t v17 = v16;
      }
      if ((v85.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v18 = &v85;
      }
      else {
        uint64_t v18 = (std::string *)v85.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Network:Name";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v17;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      unsigned int v94 = v18;
      goto LABEL_83;
    case 2:
      __int128 v19 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "==> Get pskc", (uint8_t *)&buf, 2u);
      }

      uint64_t v87 = 0LL;
      uint64_t v20 = (void *)*((void *)this + 4);
      sub_10000AC00(&v84, "Network:PSKc");
      sub_1000B77C0(v20, &v84, (uint64_t)&v87, (uint64_t)&v90);
      LODWORD(buf.__r_.__value_.__l.__data_) = v90;
      unsigned int v94 = 0LL;
      *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0uLL;
      sub_1000E4898(&v88, (uint64_t)&buf);
      if (SHIBYTE(v94) < 0) {
        operator delete((void *)buf.__r_.__value_.__l.__size_);
      }
      if (v92 < 0) {
        operator delete(*((void **)&v90 + 1));
      }
      if (!v88)
      {
        sub_100147058(&v87, (uint64_t)&buf);
        uint64_t v54 = buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0];
        if (buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0] == 16)
        {
          __chkstk_darwin(v53);
          __int128 v80 = *v55;
          BOOL v56 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
          if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
          {
            LODWORD(v9sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = 134217984;
            *(void *)((char *)&v90 + 4) = 16LL;
            _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_INFO,  "Retrieved pskc with length: %lu",  (uint8_t *)&v90,  0xCu);
          }

          ot::BorderRouter::EventEmitter::Emit((uint64_t **)this + 1, 2u, v57, &v80);
        }

        else
        {
          uint64_t v71 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
          if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR)) {
            sub_1001F4A08(v54, v71, v72, v73, v74, v75, v76, v77);
          }
        }

        *(void *)&__int128 v90 = &buf;
        sub_100006F6C((void ***)&v90);
        break;
      }

      __int16 v8 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        break;
      }
      sub_1000E7B14(v88, &v90);
      int v21 = v91;
      uint64_t v22 = (__int128 *)v90;
      std::string::basic_string(&v85, &v89);
      int v23 = &v90;
      if (v21 < 0) {
        int v23 = v22;
      }
      if ((v85.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v24 = &v85;
      }
      else {
        __int16 v24 = (std::string *)v85.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Network:PSKc";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v23;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      unsigned int v94 = v24;
      goto LABEL_83;
    case 3:
      timeval v31 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "==> Get state", (uint8_t *)&buf, 2u);
      }

      uint64_t v87 = 0LL;
      uint64_t v32 = (void *)*((void *)this + 4);
      sub_10000AC00(&v83, "NCP:State");
      sub_1000B77C0(v32, &v83, (uint64_t)&v87, (uint64_t)&v90);
      LODWORD(buf.__r_.__value_.__l.__data_) = v90;
      unsigned int v94 = 0LL;
      *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0uLL;
      sub_1000E4898(&v88, (uint64_t)&buf);
      if (SHIBYTE(v94) < 0) {
        operator delete((void *)buf.__r_.__value_.__l.__size_);
      }
      if (v92 < 0) {
        operator delete(*((void **)&v90 + 1));
      }
      if (v88)
      {
        __int16 v8 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
        if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
          break;
        }
        sub_1000E7B14(v88, &v90);
        int v33 = v91;
        uint64_t v34 = (__int128 *)v90;
        std::string::basic_string(&v85, &v89);
        uint64_t v35 = &v90;
        if (v33 < 0) {
          uint64_t v35 = v34;
        }
        if ((v85.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v36 = &v85;
        }
        else {
          uint64_t v36 = (std::string *)v85.__r_.__value_.__r.__words[0];
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"NCP:State";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v35;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
        unsigned int v94 = v36;
        goto LABEL_83;
      }

      sub_100147B4C(&v87, &buf);
      uint64_t v62 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
      if (os_log_type_enabled(v62, OS_LOG_TYPE_INFO))
      {
        uint64_t v63 = &buf;
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t v63 = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        LODWORD(v9sub_1001941F4((void *)&_mh_execute_header, v1, v2, "Credentials: %d records:\n", v3, v4, v5, v6, 0) = 136315138;
        *(void *)((char *)&v90 + 4) = v63;
        _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_INFO, "Retrieved state : %s", (uint8_t *)&v90, 0xCu);
      }

      id v64 = (uint64_t **)((char *)this + 8);
      if ((char)buf.__r_.__value_.__s.__size_ < 0)
      {
        uint64_t v66 = (std::string *)buf.__r_.__value_.__r.__words[0];
        if (buf.__r_.__value_.__l.__size_ >= 0xA) {
          size_t v65 = 10LL;
        }
        else {
          size_t v65 = buf.__r_.__value_.__l.__size_;
        }
      }

      else
      {
        if (buf.__r_.__value_.__s.__size_ >= 0xAu) {
          size_t v65 = 10LL;
        }
        else {
          size_t v65 = buf.__r_.__value_.__s.__size_;
        }
        uint64_t v66 = &buf;
      }

      int v78 = strncmp((const char *)v66, "associated", v65);
      ot::BorderRouter::EventEmitter::Emit(v64, 3u, v79, v78 == 0);
LABEL_130:
      if ((char)buf.__r_.__value_.__s.__size_ < 0)
      {
        uint64_t v37 = (void *)buf.__r_.__value_.__r.__words[0];
        goto LABEL_132;
      }

      break;
    case 4:
      ot::BorderRouter::EventEmitter::Emit((uint64_t **)this + 1, 4u, v5, 3LL);
      goto LABEL_135;
    case 6:
      int v25 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_INFO,  "==> Get Extended address",  (uint8_t *)&buf,  2u);
      }

      uint64_t v87 = 0LL;
      __int16 v26 = (void *)*((void *)this + 4);
      sub_10000AC00(&v81, "NCP:ExtendedAddress");
      sub_1000B77C0(v26, &v81, (uint64_t)&v87, (uint64_t)&v90);
      LODWORD(buf.__r_.__value_.__l.__data_) = v90;
      unsigned int v94 = 0LL;
      *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0uLL;
      sub_1000E4898(&v88, (uint64_t)&buf);
      if (SHIBYTE(v94) < 0) {
        operator delete((void *)buf.__r_.__value_.__l.__size_);
      }
      if (v92 < 0) {
        operator delete(*((void **)&v90 + 1));
      }
      if (v88)
      {
        __int16 v8 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          sub_1000E7B14(v88, &v90);
          int v27 = v91;
          __int16 v28 = (__int128 *)v90;
          std::string::basic_string(&v85, &v89);
          int v29 = &v90;
          if (v27 < 0) {
            int v29 = v28;
          }
          if ((v85.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            int v30 = &v85;
          }
          else {
            int v30 = (std::string *)v85.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"NCP:ExtendedAddress";
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v29;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
          unsigned int v94 = v30;
LABEL_83:
          _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "getProperty Failed: %s, res = %s, Error Info: %s \n",  (uint8_t *)&buf,  0x20u);
          if (v91 < 0)
          {
            uint64_t v37 = (void *)v90;
LABEL_132:
            operator delete(v37);
          }
        }
      }

      else
      {
        int v58 = sub_1001476B4(&v87, 0);
        uint64_t v59 = (os_log_s *)sub_1000160F4("com.apple.wpantund.commissioning", "commissioning");
        std::string::size_type v60 = bswap64((unint64_t)v58);
        if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v60;
          _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_INFO,  "Extended address : %llu",  (uint8_t *)&buf,  0xCu);
        }

        ot::BorderRouter::EventEmitter::Emit((uint64_t **)this + 1, 6u, v61, v60);
      }

      break;
    default:
      __assert_rtn("RequestEvent", "ControllerApple.cpp", 554, "false");
  }

  if (v87) {
    (*(void (**)(uint64_t))(*(void *)v87 + 8LL))(v87);
  }
LABEL_135:
  xpc_release(v4);
  return 0LL;
}