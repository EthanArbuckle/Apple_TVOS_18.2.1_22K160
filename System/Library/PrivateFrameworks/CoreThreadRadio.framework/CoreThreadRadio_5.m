uint64_t ot::Mle::Mle::Start(ot::InstanceLocator *a1, char a2)
{
  ot::Radio *v2;
  ot::ThreadNetif *v3;
  ot::Mac::Mac *v4;
  __int16 RandomPanId;
  unsigned __int16 Rloc16;
  ot::KeyManager *v7;
  unsigned __int16 v8;
  uint64_t v9;
  ot::Mac::Mac *v11;
  unsigned int v13;
  v13 = 0;
  v2 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(a1);
  if ((ot::Radio::GetPromiscuous(v2) & 1) != 0)
  {
    return 13;
  }

  else
  {
    v3 = (ot::ThreadNetif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(a1);
    if ((ot::ThreadNetif::IsUp(v3) & 1) != 0)
    {
      v4 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
      if ((unsigned __int16)ot::Mac::Mac::GetPanId(v4) == 0xFFFF)
      {
        v11 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
        RandomPanId = (unsigned __int16)ot::Mac::GenerateRandomPanId(v11);
        ot::Mac::Mac::SetPanId(v11, RandomPanId);
      }

      ot::Mle::Mle::SetStateDetached(a1);
      ot::Mle::Mle::ApplyMeshLocalPrefix(a1);
      Rloc16 = ot::Mle::Mle::GetRloc16(a1);
      ot::Mle::Mle::SetRloc16(a1, Rloc16);
      ot::Mle::Mle::ResetAttachCounter((uint64_t)a1);
      v7 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(a1);
      ot::KeyManager::Start(v7);
      if (!a2) {
        *((_BYTE *)a1 + 315) = 1;
      }
      if (a2 == 1 || (unsigned __int16)ot::Mle::Mle::GetRloc16(a1) == 65534)
      {
        ot::Mle::Mle::Attach((uint64_t)a1, 0);
      }

      else
      {
        v8 = ot::Mle::Mle::GetRloc16(a1);
        if (ot::Mle::IsActiveRouter((ot::Mle *)v8))
        {
          v9 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(a1);
        }

        else
        {
          *((_BYTE *)a1 + 704) = 0;
          ot::Mle::Mle::SendChildUpdateRequest(a1);
          IgnoreError();
        }
      }
    }

    else
    {
      return 13;
    }
  }

  return v13;
}

uint64_t ot::Radio::GetPromiscuous(ot::Radio *this)
{
  return otPlatRadioGetPromiscuous() & 1;
}

{
  return __ZN2ot5Radio14GetPromiscuousEv(this);
}

void ot::Mle::Mle::SetStateDetached(ot::Mle::Mle *this)
{
  v1 = (ot::BackboneRouter::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>(this);
  ot::BackboneRouter::Local::Reset(v1);
  v2 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
  ot::BackboneRouter::Leader::Reset(v2);
  if (ot::Mle::Mle::IsLeader(this))
  {
    v3 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
    ot::Ip6::Netif::RemoveUnicastAddress(v3, this);
  }

  ot::Mle::Mle::SetRole((unsigned __int8 *)this, 1);
  ot::Mle::Mle::SetAttachState((uint64_t)this, 0);
  ot::TimerMilli::Stop((ot::Mle::Mle *)((char *)this + 320));
  ot::TimerMilli::Stop((ot::Mle::Mle *)((char *)this + 368));
  *((_BYTE *)this + 705) = 0;
  *((_BYTE *)this + 704) = 0;
  *((_BYTE *)this + 707) = 0;
  *((_BYTE *)this + 706) = 0;
  *((_BYTE *)this + 711) = 0;
  v4 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
  ot::MeshForwarder::SetRxOnWhenIdle(v4, 1);
  v5 = (_BYTE *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  ot::Mac::Mac::SetBeaconEnabled(v5, 0);
  v6 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  ot::Mle::MleRouter::HandleDetachStart(v6);
  v7 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  ot::Mac::Mac::UpdateCsl(v7, 0LL);
}

uint64_t ot::Mle::Mle::ApplyMeshLocalPrefix(ot::Mle::Mle *this)
{
  v19 = v1;
  ot::Mle::Mle::GetMeshLocalPrefix(this);
  ot::Ip6::Address::SetMulticastNetworkPrefix(v19, v2);
  ot::Ip6::Netif::MulticastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 1128));
  v21 = v3;
  ot::Mle::Mle::GetMeshLocalPrefix(this);
  ot::Ip6::Address::SetMulticastNetworkPrefix(v21, v4);
  if (!ot::Mle::Mle::IsDisabled(this))
  {
    v5 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
    ot::Ip6::Netif::AddUnicastAddress(v5, (ot::Mle::Mle *)((char *)this + 1040));
    v6 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
    ot::Ip6::Netif::SubscribeMulticast(v6, (ot::Mle::Mle *)((char *)this + 1104));
    v7 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
    ot::Ip6::Netif::SubscribeMulticast(v7, (ot::Mle::Mle *)((char *)this + 1128));
    if (ot::Mle::Mle::IsAttached(this))
    {
      v8 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
      ot::Ip6::Netif::AddUnicastAddress(v8, (ot::Mle::Mle *)((char *)this + 1072));
    }

    if (ot::Mle::Mle::IsLeader(this))
    {
      v9 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
      ot::Ip6::Netif::AddUnicastAddress(v9, this);
    }

    v10 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>(this);
    ot::MeshCoP::Commissioner::ApplyMeshLocalPrefix(v10);
    uint64_t v11 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::BorderAgent>(this);
    ot::MeshCoP::BorderAgent::ApplyMeshLocalPrefix(v11);
    uint64_t v12 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Dhcp6::Server>(this);
    ot::Dhcp6::Server::ApplyMeshLocalPrefix(v12);
    for (i = (ot::Mle::Mle *)((char *)this + 808);
          i != (ot::Mle::Mle *)((char *)this + 904);
          i = (const ot::Ip6::Netif::UnicastAddress *)((char *)i + 32))
    {
      if (ot::Mle::Mle::ServiceAloc::IsInUse(i))
      {
        v13 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
        ot::Ip6::Netif::RemoveUnicastAddress(v13, i);
      }

      ot::Mle::Mle::GetMeshLocalPrefix(this);
      ot::Mle::Mle::ServiceAloc::ApplyMeshLocalPrefix(i, v14);
      if (ot::Mle::Mle::ServiceAloc::IsInUse(i))
      {
        v15 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
        ot::Ip6::Netif::AddUnicastAddress(v15, i);
      }
    }

    v16 = (ot::BackboneRouter::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>(this);
    ot::BackboneRouter::Local::ApplyMeshLocalPrefix(v16);
  }

  v17 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
  return ot::Notifier::Signal(v17, 16LL);
}

void ot::Mle::Mle::SetRloc16(ot::Mle::Mle *this, unsigned __int16 a2)
{
  unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16(this);
  if (a2 != Rloc16) {
    ot::Logger::LogAtLevel<(ot::LogLevel)3>( (ot *)&ot::Mle::kLogModuleName,  "RLOC16 %04x -> %04x",  v2,  v3,  v4,  v5,  v6,  v7,  Rloc16);
  }
  v8 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
  if (ot::Ip6::Netif::HasUnicastAddress(v8, (ot::Mle::Mle *)((char *)this + 1072)))
  {
    ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 1072));
    Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v9);
    if (a2 != (unsigned __int16)ot::Ip6::InterfaceIdentifier::GetLocator(Iid))
    {
      uint64_t v11 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
      ot::Ip6::Netif::RemoveUnicastAddress(v11, (ot::Mle::Mle *)((char *)this + 1072));
      v18 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
      ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 1072));
      ot::Coap::CoapBase::ClearRequests(v18, v12);
    }
  }

  v13 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  ot::Mac::Mac::SetShortAddress(v13, a2);
  *((_WORD *)this + 396) = a2;
  if (a2 != 65534)
  {
    ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 1072));
    v15 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v14);
    ot::Ip6::InterfaceIdentifier::SetLocator(v15, a2);
    v16 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
    ot::Ip6::Netif::AddUnicastAddress(v16, (ot::Mle::Mle *)((char *)this + 1072));
    v17 = (ot::AddressResolver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>(this);
    ot::AddressResolver::RestartAddressQueries(v17);
  }

uint64_t ot::Mle::Mle::ResetAttachCounter(uint64_t this)
{
  *(_WORD *)(this + 316) = 0;
  return this;
}

void ot::Mle::Mle::Attach(uint64_t a1, char a2)
{
  if (!ot::Mle::Mle::IsDisabled((ot::Mle::Mle *)a1) && !ot::Mle::Mle::IsAttaching((ot::Mle::Mle *)a1))
  {
    if (!ot::Mle::Mle::IsDetached((ot::Mle::Mle *)a1)) {
      ot::Mle::Mle::ResetAttachCounter(a1);
    }
    if (*(_BYTE *)(a1 + 315) == 1)
    {
      active = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>((ot::InstanceLocator *)a1);
      else {
        *(_BYTE *)(a1 + 315) = 2;
      }
    }

    ot::Mle::Mle::ParentCandidate::Clear((ot::Mle::Mle::ParentCandidate *)(a1 + 424));
    ot::Mle::Mle::SetAttachState(a1, 2u);
    *(_BYTE *)(a1 + 417) = a2;
    if (a2 == 2)
    {
      ++*(_WORD *)(a1 + 918);
      ++*(_WORD *)(a1 + 1002);
    }

    else if (ot::Mle::Mle::IsFullThreadDevice((ot::Mle::Mle *)a1))
    {
      uint64_t v3 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
      ot::Mle::MleRouter::StopAdvertiseTrickleTimer(v3);
    }

    unsigned int AttachStartDelay = ot::Mle::Mle::GetAttachStartDelay((ot::Mle::Mle *)a1);
    ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 320), AttachStartDelay);
    if (ot::Mle::Mle::IsDetached((ot::Mle::Mle *)a1))
    {
      ot::Mle::Mle::IncrementAttachCounter(a1);
      ++*(_WORD *)(a1 + 998);
      if (!ot::Mle::Mle::IsRxOnWhenIdle((ot::Mle::Mle *)a1))
      {
        uint64_t v5 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1);
        ot::Mac::Mac::SetRxOnWhenIdle(v5, 0);
      }
    }
  }

uint64_t ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle *this)
{
  return ot::Mle::Mle::SendChildUpdateRequest(this, 0);
}

void ot::Mle::Mle::SetRole(unsigned __int8 *a1, char a2)
{
  v31 = a1;
  char v30 = a2;
  unsigned __int8 v29 = a1[41];
  int v28 = 0;
  uint64_t v2 = (ot::Uptime *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Uptime>((ot::InstanceLocator *)a1);
  ot::Uptime::GetUptime(v2, v32, 24);
  uint64_t v3 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>((ot::InstanceLocator *)a1);
  if (!ot::Notifier::Update<ot::Mle::DeviceRole>(v3, a1 + 41, &v30, 4LL))
  {
    ot::Mle::RoleToString(v29);
    ot::Mle::RoleToString(a1[41]);
    ot::Logger::LogAtLevel<(ot::LogLevel)3>( (ot *)&ot::Mle::kLogModuleName,  "%s Role %s -> %s",  v4,  v5,  v6,  v7,  v8,  v9,  (char)v32);
    ot::Mle::Mle::UpdateRoleTimeCounters((ot::InstanceLocator *)a1, v29);
    unint64_t v25 = a1[41];
    if (v25 <= 4) {
      __asm { BR              X8 }
    }

    if (!ot::Mle::Mle::IsChild((ot::Mle::Mle *)a1) && v29) {
      ot::Neighbor::SetState((ot::InstanceLocator *)(a1 + 48), 0);
    }
    Instance = ot::InstanceLocator::GetInstance((ot::InstanceLocator *)a1);
    BOOL IsAttached = ot::Mle::Mle::IsAttached((ot::Mle::Mle *)a1);
    otPowerControlSetAttachmentStatus((uint64_t)Instance, IsAttached, v11, v12, v13, v14, v15, v16);
    if (v29 == 1 && ot::Mle::Mle::IsChild((ot::Mle::Mle *)a1))
    {
      char DeviceMode = ot::Mle::Mle::GetDeviceMode((ot::Mle::Mle *)a1);
      a1[711] = !ot::Mle::DeviceMode::IsRxOnWhenIdle((ot::Mle::DeviceMode *)&DeviceMode);
    }
  }

  if (v28)
  {
    char v17 = otThreadErrorToString(v28);
    ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mle::kLogModuleName,  "Error %s while configuring the role",  v18,  v19,  v20,  v21,  v22,  v23,  v17);
  }

BOOL ot::CallbackBase<void (*)(void *)>::IsSet(void *a1)
{
  return *a1 != 0LL;
}

{
  return __ZNK2ot12CallbackBaseIPFvPvEE5IsSetEv(a1);
}

void *ot::CallbackBase<void (*)(void *)>::Clear(void *result)
{
  *result = 0LL;
  return result;
}

{
  return __ZN2ot12CallbackBaseIPFvPvEE5ClearEv(result);
}

uint64_t ot::Callback<void (*)(void *),(ot::CallbackContextPosition)0>::Invoke<>(uint64_t a1)
{
  return (*(uint64_t (**)(void))a1)(*(void *)(a1 + 8));
}

{
  return __ZNK2ot8CallbackIPFvPvELNS_23CallbackContextPositionE0EE6InvokeIJEEEvDpOT_(a1);
}

unint64_t ot::Mle::Mle::UpdateRoleTimeCounters(ot::InstanceLocator *a1, unsigned __int8 a2)
{
  uint64_t v2 = (ot::Uptime *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Uptime>(a1);
  unint64_t result = ot::Uptime::GetUptime(v2);
  unint64_t v5 = result - *((void *)a1 + 122);
  *((void *)a1 + 122) = result;
  *((void *)a1 + 120) += v5;
  if (a2 <= 4uLL) {
    __asm { BR              X8 }
  }

  return result;
}

uint64_t ot::Notifier::Update<ot::Mle::DeviceRole>(void *a1, _BYTE *a2, _BYTE *a3, uint64_t a4)
{
  unsigned int v5 = 0;
  if (*a2 == *a3)
  {
    ot::Notifier::SignalIfFirst(a1, a4);
    return 24;
  }

  else
  {
    *a2 = *a3;
    ot::Notifier::Signal(a1, a4);
  }

  return v5;
}

{
  return __ZN2ot8Notifier6UpdateINS_3Mle10DeviceRoleEEE7otErrorRT_RKS5_NS_5EventE(a1, a2, a3, a4);
}

BOOL ot::Mle::Mle::IsAttached(ot::Mle::Mle *this)
{
  BOOL v3 = 1;
  if (!ot::Mle::Mle::IsChild(this))
  {
    BOOL v3 = 1;
    if (!ot::Mle::Mle::IsRouter(this)) {
      return ot::Mle::Mle::IsLeader(this);
    }
  }

  return v3;
}

void ot::Mle::Mle::SetAttachState(uint64_t a1, unsigned __int8 a2)
{
  if (a2 != *(unsigned __int8 *)(a1 + 313))
  {
    char v8 = ot::Mle::Mle::AttachStateToString(*(_BYTE *)(a1 + 313));
    ot::Mle::Mle::AttachStateToString(a2);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)&ot::Mle::kLogModuleName,  "AttachState %s -> %s",  v2,  v3,  v4,  v5,  v6,  v7,  v8);
    *(_BYTE *)(a1 + 313) = a2;
  }

char *ot::Mle::Mle::AttachStateToString(unsigned __int8 a1)
{
  return ot::Mle::Mle::AttachStateToString(ot::Mle::Mle::AttachState)::kAttachStateStrings[a1];
}

uint64_t ot::Mle::Mle::IncrementAttachCounter(uint64_t this)
{
  if (!++*(_WORD *)(this + 316)) {
    --*(_WORD *)(this + 316);
  }
  ++*(_WORD *)(this + 914);
  return this;
}

uint64_t ot::Mle::Mle::GenerateMleIid(ot::Mle::Mle *this)
{
  Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v1);
  return ot::Ip6::InterfaceIdentifier::GenerateRandom(Iid);
}

void ot::Mle::Mle::Restore(ot::Mle::Mle *this)
{
  v65 = this;
  active = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
  ot::MeshCoP::DatasetManager::Restore(active);
  IgnoreError();
  uint64_t v2 = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>(this);
  ot::MeshCoP::DatasetManager::Restore(v2);
  IgnoreError();
  uint64_t v3 = (ot::DuaManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DuaManager>(this);
  ot::DuaManager::Restore(v3);
  unint64_t v64 = 0xC2FFEE5EED57A115LL;
  unint64_t v63 = 0LL;
  uint64_t v4 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Settings>(this);
  if (!ot::Settings::Read<ot::SettingsBase::NetworkInfo>(v4, (ot::SettingsBase::NetworkInfo *)v68))
  {
    unint64_t v66 = *(void *)ot::SettingsBase::NetworkInfo::GetExtAddress((ot::SettingsBase::NetworkInfo *)v68);
    unint64_t v63 = mpi_uint_bigendian_to_host(v66);
    ot::Logger::LogAtLevel<(ot::LogLevel)3>( (ot *)&ot::Mle::kLogModuleName,  "%s: defaultEmac: 0x%llx, in eMAC_in_settings_file_as_uint64: 0x%llx",  v5,  v6,  v7,  v8,  v9,  v10,  (char)"Restore");
    if (v64 == v63)
    {
      ot::Logger::LogAtLevel<(ot::LogLevel)3>( (ot *)&ot::Mle::kLogModuleName,  "%s: defaultEmac, eMAC address matched with default value, exit now",  v11,  v12,  v13,  v14,  v15,  v16,  (char)"Restore");
      Instance = ot::InstanceLocator::GetInstance(this);
      otInstanceErasePersistentInfo((uint64_t)Instance);
      IgnoreError();
      uint64_t v18 = ot::InstanceLocator::GetInstance(this);
      otLinkRegenerateExAddr((uint64_t)v18);
      return;
    }

    v58 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
    int KeySequence = ot::SettingsBase::NetworkInfo::GetKeySequence((ot::SettingsBase::NetworkInfo *)v68);
    ot::KeyManager::SetCurrentKeySequence(v58, KeySequence);
    v59 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
    int MleFrameCounter = ot::SettingsBase::NetworkInfo::GetMleFrameCounter((ot::SettingsBase::NetworkInfo *)v68);
    ot::KeyManager::SetMleFrameCounter((uint64_t)v59, MleFrameCounter);
    v60 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
    unsigned int MacFrameCounter = ot::SettingsBase::NetworkInfo::GetMacFrameCounter((ot::SettingsBase::NetworkInfo *)v68);
    ot::KeyManager::SetAllMacFrameCounters(v60, MacFrameCounter, 0);
    uint64_t v22 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
    ot::KeyManager::LogMacFrameCounters(v22);
    char DeviceMode = ot::SettingsBase::NetworkInfo::GetDeviceMode((ot::SettingsBase::NetworkInfo *)v68);
    ot::Mle::DeviceMode::Set((_BYTE *)this + 312, DeviceMode);
    ot::SettingsBase::NetworkInfo::GetDeviceMode((ot::SettingsBase::NetworkInfo *)v68);
    ot::Logger::LogAtLevel<(ot::LogLevel)3>( (ot *)&ot::Mle::kLogModuleName,  "%s: Setting device mode to: %d",  v24,  v25,  v26,  v27,  v28,  v29,  (char)"Restore");
    if ((unsigned __int16)ot::SettingsBase::NetworkInfo::GetVersion((ot::SettingsBase::NetworkInfo *)v68) == 4)
    {
      v56 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
      ExtAddress = (const ot::Mac::ExtAddress *)ot::SettingsBase::NetworkInfo::GetExtAddress((ot::SettingsBase::NetworkInfo *)v68);
      ot::Mac::Mac::SetExtAddress(v56, ExtAddress);
      ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 1040));
      v57 = v31;
      MeshLocalIid = (const ot::Ip6::InterfaceIdentifier *)ot::SettingsBase::NetworkInfo::GetMeshLocalIid((ot::SettingsBase::NetworkInfo *)v68);
      ot::Ip6::Address::SetIid(v57, MeshLocalIid);
      if (ot::SettingsBase::NetworkInfo::GetRole((ot::SettingsBase::NetworkInfo *)v68)
         - 2 <= 2)
      {
        v55 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
        __int16 Rloc16 = ot::SettingsBase::NetworkInfo::GetRloc16((ot::SettingsBase::NetworkInfo *)v68);
        ot::Mac::Mac::SetShortAddress(v55, Rloc16);
        *((_WORD *)this + 396) = ot::SettingsBase::NetworkInfo::GetRloc16((ot::SettingsBase::NetworkInfo *)v68);
        if ((unsigned __int16)ot::SettingsBase::NetworkInfo::GetRloc16((ot::SettingsBase::NetworkInfo *)v68) != 65534)
        {
          unsigned __int16 v35 = ot::SettingsBase::NetworkInfo::GetRloc16((ot::SettingsBase::NetworkInfo *)v68);
          if (ot::Mle::IsActiveRouter((ot::Mle *)v35))
          {
            v53 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
            unsigned __int16 v49 = ot::Mle::Mle::GetRloc16(this);
            char v50 = ot::Mle::RouterIdFromRloc16((ot::Mle *)v49);
            ot::Mle::MleRouter::SetRouterId((uint64_t)v53, v50);
            v54 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
            int PreviousPartitionId = ot::SettingsBase::NetworkInfo::GetPreviousPartitionId((ot::SettingsBase::NetworkInfo *)v68);
            ot::Mle::MleRouter::SetPreviousPartitionId((uint64_t)v54, PreviousPartitionId);
            v52 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
            ot::ChildTable::Restore(v52);
          }

          else
          {
            v36 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Settings>(this);
            if (ot::Settings::Read<ot::SettingsBase::ParentInfo>( v36,  (ot::SettingsBase::ParentInfo *)v67))
            {
              char v37 = ot::SettingsBase::NetworkInfo::GetRloc16((ot::SettingsBase::NetworkInfo *)v68);
              ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mle::kLogModuleName,  "Invalid settings - no saved parent info with valid end-device RLOC16 0x%04x",  v38,  v39,  v40,  v41,  v42,  v43,  v37);
              return;
            }

            ot::Parent::Clear((ot::Mle::Mle *)((char *)this + 48));
            ot::SettingsBase::ParentInfo::GetExtAddress((ot::SettingsBase::ParentInfo *)v67);
            ot::Neighbor::SetExtAddress((uint64_t)this + 48, v44);
            __int16 Version = ot::SettingsBase::ParentInfo::GetVersion((ot::SettingsBase::ParentInfo *)v67);
            ot::Neighbor::SetVersion((uint64_t)this + 48, Version);
            ot::Mle::DeviceMode::DeviceMode((ot::Mle::DeviceMode *)&v62, 11);
            ot::Neighbor::SetDeviceMode((uint64_t)this + 48, v62);
            unsigned __int16 v46 = ot::SettingsBase::NetworkInfo::GetRloc16((ot::SettingsBase::NetworkInfo *)v68);
            unsigned __int8 v47 = ot::Mle::RouterIdFromRloc16((ot::Mle *)v46);
            __int16 v48 = ot::Mle::Rloc16FromRouterId((ot::Mle *)v47);
            ot::Neighbor::SetRloc16((uint64_t)this + 48, v48);
            ot::Neighbor::SetState((ot::Mle::Mle *)((char *)this + 48), 1);
            *((_WORD *)this + 397) = ot::Neighbor::GetRloc16((ot::Mle::Mle *)((char *)this + 48));
          }

          *((_BYTE *)this + 393) = ot::SettingsBase::NetworkInfo::GetRole((ot::SettingsBase::NetworkInfo *)v68) == 4;
          *((_BYTE *)this + 709) = 1;
        }
      }
    }
  }

uint64_t ot::Settings::Read<ot::SettingsBase::NetworkInfo>( ot::InstanceLocator *a1, ot::SettingsBase::NetworkInfo *a2)
{
  return ot::Settings::ReadEntry(a1, 3u, a2, 0x26u);
}

{
  return __ZNK2ot8Settings4ReadINS_12SettingsBase11NetworkInfoEEE7otErrorRT_(a1, a2);
}

uint64_t ot::Settings::Read<ot::SettingsBase::ParentInfo>( ot::InstanceLocator *a1, ot::SettingsBase::ParentInfo *a2)
{
  return ot::Settings::ReadEntry(a1, 4u, a2, 0xAu);
}

{
  return __ZNK2ot8Settings4ReadINS_12SettingsBase10ParentInfoEEE7otErrorRT_(a1, a2);
}

uint64_t ot::Mle::MleRouter::SetPreviousPartitionId(uint64_t this, int a2)
{
  *(_DWORD *)(this + 46248) = a2;
  return this;
}

{
  return __ZN2ot3Mle9MleRouter22SetPreviousPartitionIdEj(this, a2);
}

uint64_t ot::Mle::Mle::Store(ot::Mle::Mle *this)
{
  unsigned int v32 = 0;
  ot::SettingsBase::NetworkInfo::Init((ot::SettingsBase::NetworkInfo *)v34);
  if (ot::Mle::Mle::IsAttached(this))
  {
    ot::SettingsBase::NetworkInfo::SetRole(v34, *((_BYTE *)this + 41));
    unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16(this);
    ot::SettingsBase::NetworkInfo::SetRloc16((ot::SettingsBase::NetworkInfo *)v34, Rloc16);
    unsigned int PartitionId = ot::Mle::LeaderData::GetPartitionId((ot::Mle::Mle *)((char *)this + 32));
    ot::SettingsBase::NetworkInfo::SetPreviousPartitionId((ot::SettingsBase::NetworkInfo *)v34, PartitionId);
    uint64_t v3 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    ExtAddress = (const ot::Mac::ExtAddress *)ot::Mac::Mac::GetExtAddress(v3);
    ot::SettingsBase::NetworkInfo::SetExtAddress((uint64_t)v34, ExtAddress);
    ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 1040));
    Iid = (const ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v5);
    ot::SettingsBase::NetworkInfo::SetMeshLocalIid((uint64_t)v34, Iid);
    ot::SettingsBase::NetworkInfo::SetVersion((ot::SettingsBase::NetworkInfo *)v34, 4u);
    if (ot::Mle::Mle::IsChild(this))
    {
      ot::SettingsBase::ParentInfo::Init((ot::SettingsBase::ParentInfo *)&v33);
      uint64_t v7 = (const ot::Mac::ExtAddress *)ot::Neighbor::GetExtAddress((ot::Mle::Mle *)((char *)this + 48));
      ot::SettingsBase::ParentInfo::SetExtAddress(&v33, v7);
      unsigned __int16 Version = ot::Neighbor::GetVersion((ot::Mle::Mle *)((char *)this + 48));
      ot::SettingsBase::ParentInfo::SetVersion((ot::SettingsBase::ParentInfo *)&v33, Version);
      uint64_t v9 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Settings>(this);
      unsigned int v32 = ot::Settings::Save<ot::SettingsBase::ParentInfo>(v9, &v33);
      if (v32) {
        return v32;
      }
    }
  }

  else
  {
    uint64_t v10 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Settings>(this);
  }

  uint64_t v11 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
  Currentint KeySequence = ot::KeyManager::GetCurrentKeySequence(v11);
  ot::SettingsBase::NetworkInfo::SetKeySequence((ot::SettingsBase::NetworkInfo *)v34, CurrentKeySequence);
  uint64_t v13 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
  int MleFrameCounter = ot::KeyManager::GetMleFrameCounter(v13);
  ot::SettingsBase::NetworkInfo::SetMleFrameCounter((ot::SettingsBase::NetworkInfo *)v34, MleFrameCounter + 1000);
  uint64_t v15 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
  Maximumint MacFrameCounter = ot::KeyManager::GetMaximumMacFrameCounter(v15);
  ot::SettingsBase::NetworkInfo::SetMacFrameCounter((ot::SettingsBase::NetworkInfo *)v34, MaximumMacFrameCounter + 1000);
  char v17 = ot::Mle::DeviceMode::Get((ot::Mle::Mle *)((char *)this + 312));
  ot::SettingsBase::NetworkInfo::SetDeviceMode((uint64_t)v34, v17);
  uint64_t v18 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Settings>(this);
  unsigned int v32 = ot::Settings::Save<ot::SettingsBase::NetworkInfo>(v18, v34);
  if (!v32)
  {
    uint64_t v29 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
    int v19 = ot::SettingsBase::NetworkInfo::GetMleFrameCounter((ot::SettingsBase::NetworkInfo *)v34);
    ot::KeyManager::SetStoredMleFrameCounter((uint64_t)v29, v19);
    char v30 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
    int MacFrameCounter = ot::SettingsBase::NetworkInfo::GetMacFrameCounter((ot::SettingsBase::NetworkInfo *)v34);
    ot::KeyManager::SetStoredMacFrameCounter((uint64_t)v30, MacFrameCounter);
    ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mle::kLogModuleName,  "Store Network Information",  v21,  v22,  v23,  v24,  v25,  v26,  v28);
  }

  return v32;
}

uint64_t ot::SettingsBase::NetworkInfo::Init(ot::SettingsBase::NetworkInfo *this)
{
  return ot::SettingsBase::NetworkInfo::SetVersion(this, 2u);
}

{
  return __ZN2ot12SettingsBase11NetworkInfo4InitEv(this);
}

_BYTE *ot::SettingsBase::NetworkInfo::SetRole(_BYTE *this, char a2)
{
  *this = a2;
  return this;
}

{
  return __ZN2ot12SettingsBase11NetworkInfo7SetRoleEh(this, a2);
}

uint64_t ot::SettingsBase::NetworkInfo::SetRloc16(ot::SettingsBase::NetworkInfo *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::LittleEndian::HostSwap16(a2);
  *((_WORD *)this + 1) = result;
  return result;
}

{
  return __ZN2ot12SettingsBase11NetworkInfo9SetRloc16Et(this, a2);
}

uint64_t ot::SettingsBase::NetworkInfo::SetPreviousPartitionId( ot::SettingsBase::NetworkInfo *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::LittleEndian::HostSwap32(a2);
  *((_DWORD *)this + 4) = result;
  return result;
}

{
  return __ZN2ot12SettingsBase11NetworkInfo22SetPreviousPartitionIdEj(this, a2);
}

uint64_t ot::SettingsBase::NetworkInfo::SetExtAddress(uint64_t this, const ot::Mac::ExtAddress *a2)
{
  *(void *)(this + 20) = *(void *)a2;
  return this;
}

{
  return __ZN2ot12SettingsBase11NetworkInfo13SetExtAddressERKNS_3Mac10ExtAddressE(this, a2);
}

uint64_t ot::SettingsBase::NetworkInfo::SetMeshLocalIid(uint64_t this, const ot::Ip6::InterfaceIdentifier *a2)
{
  *(void *)(this + 28) = *(void *)a2;
  return this;
}

{
  return __ZN2ot12SettingsBase11NetworkInfo15SetMeshLocalIidERKNS_3Ip619InterfaceIdentifierE(this, a2);
}

uint64_t ot::SettingsBase::NetworkInfo::SetVersion(ot::SettingsBase::NetworkInfo *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::LittleEndian::HostSwap16(a2);
  *((_WORD *)this + 18) = result;
  return result;
}

{
  return __ZN2ot12SettingsBase11NetworkInfo10SetVersionEt(this, a2);
}

uint64_t ot::SettingsBase::ParentInfo::Init(ot::SettingsBase::ParentInfo *this)
{
  return ot::SettingsBase::ParentInfo::SetVersion(this, 2u);
}

{
  return __ZN2ot12SettingsBase10ParentInfo4InitEv(this);
}

void *ot::SettingsBase::ParentInfo::SetExtAddress(void *this, const ot::Mac::ExtAddress *a2)
{
  *this = *(void *)a2;
  return this;
}

{
  return __ZN2ot12SettingsBase10ParentInfo13SetExtAddressERKNS_3Mac10ExtAddressE(this, a2);
}

uint64_t ot::SettingsBase::ParentInfo::SetVersion(ot::SettingsBase::ParentInfo *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::LittleEndian::HostSwap16(a2);
  *((_WORD *)this + 4) = result;
  return result;
}

{
  return __ZN2ot12SettingsBase10ParentInfo10SetVersionEt(this, a2);
}

uint64_t ot::Settings::Save<ot::SettingsBase::ParentInfo>(ot::InstanceLocator *a1, const void *a2)
{
  return ot::Settings::SaveEntry(a1, 4, a2, (uint64_t)v3, 0xAu);
}

{
  return __ZN2ot8Settings4SaveINS_12SettingsBase10ParentInfoEEE7otErrorRKT_(a1, a2);
}

uint64_t ot::SettingsBase::NetworkInfo::SetKeySequence(ot::SettingsBase::NetworkInfo *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::LittleEndian::HostSwap32(a2);
  *((_DWORD *)this + 1) = result;
  return result;
}

{
  return __ZN2ot12SettingsBase11NetworkInfo14SetKeySequenceEj(this, a2);
}

uint64_t ot::SettingsBase::NetworkInfo::SetMleFrameCounter( ot::SettingsBase::NetworkInfo *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::LittleEndian::HostSwap32(a2);
  *((_DWORD *)this + 2) = result;
  return result;
}

{
  return __ZN2ot12SettingsBase11NetworkInfo18SetMleFrameCounterEj(this, a2);
}

uint64_t ot::KeyManager::GetMleFrameCounter(ot::KeyManager *this)
{
  return *((unsigned int *)this + 23);
}

{
  return __ZNK2ot10KeyManager18GetMleFrameCounterEv(this);
}

uint64_t ot::SettingsBase::NetworkInfo::SetMacFrameCounter( ot::SettingsBase::NetworkInfo *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::LittleEndian::HostSwap32(a2);
  *((_DWORD *)this + 3) = result;
  return result;
}

{
  return __ZN2ot12SettingsBase11NetworkInfo18SetMacFrameCounterEj(this, a2);
}

uint64_t ot::KeyManager::GetMaximumMacFrameCounter(ot::KeyManager *this)
{
  return ot::Mac::LinkFrameCounters::GetMaximum((ot::KeyManager *)((char *)this + 84));
}

{
  return __ZNK2ot10KeyManager25GetMaximumMacFrameCounterEv(this);
}

uint64_t ot::SettingsBase::NetworkInfo::SetDeviceMode(uint64_t this, char a2)
{
  *(_BYTE *)(this + 1) = a2;
  return this;
}

{
  return __ZN2ot12SettingsBase11NetworkInfo13SetDeviceModeEh(this, a2);
}

uint64_t ot::Settings::Save<ot::SettingsBase::NetworkInfo>(ot::InstanceLocator *a1, const void *a2)
{
  return ot::Settings::SaveEntry(a1, 3, a2, (uint64_t)v3, 0x26u);
}

{
  return __ZN2ot8Settings4SaveINS_12SettingsBase11NetworkInfoEEE7otErrorRKT_(a1, a2);
}

uint64_t ot::KeyManager::SetStoredMleFrameCounter(uint64_t this, int a2)
{
  *(_DWORD *)(this + 100) = a2;
  return this;
}

{
  return __ZN2ot10KeyManager24SetStoredMleFrameCounterEj(this, a2);
}

uint64_t ot::KeyManager::SetStoredMacFrameCounter(uint64_t this, int a2)
{
  *(_DWORD *)(this + 96) = a2;
  return this;
}

{
  return __ZN2ot10KeyManager24SetStoredMacFrameCounterEj(this, a2);
}

uint64_t ot::Mle::Mle::BecomeDetached(ot::Mle::Mle *this)
{
  unsigned int v4 = 0;
  if (ot::Mle::Mle::IsDisabled(this))
  {
    return 13;
  }

  else if (!ot::Mle::Mle::IsDetached(this) || *((_BYTE *)this + 313) != 2)
  {
    if (!*((_BYTE *)this + 315))
    {
      v1 = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>(this);
      ot::MeshCoP::DatasetManager::HandleDetach(v1);
    }

    ot::Mle::Mle::SetStateDetached(this);
    ot::Neighbor::SetState((ot::Mle::Mle *)((char *)this + 48), 0);
    ot::Mle::Mle::SetRloc16(this, 0xFFFEu);
    ot::Mle::Mle::Attach((uint64_t)this, 0);
  }

  return v4;
}

uint64_t ot::Mle::Mle::BecomeChild(ot::Mle::Mle *this)
{
  unsigned int v3 = 0;
  if (ot::Mle::Mle::IsDisabled(this))
  {
    return 13;
  }

  else if (ot::Mle::Mle::IsAttaching(this))
  {
    return 5;
  }

  else
  {
    ot::Mle::Mle::Attach((uint64_t)this, 0);
  }

  return v3;
}

BOOL ot::Mle::Mle::IsAttaching(ot::Mle::Mle *this)
{
  return *((_BYTE *)this + 313) != 0;
}

{
  return __ZNK2ot3Mle3Mle11IsAttachingEv(this);
}

uint64_t ot::Mle::Mle::SearchForBetterParent(ot::Mle::Mle *this)
{
  unsigned int v3 = 0;
  if (ot::Mle::Mle::IsChild(this)) {
    ot::Mle::Mle::Attach((uint64_t)this, 4);
  }
  else {
    return 13;
  }
  return v3;
}

uint64_t ot::Mle::Mle::GetAttachStartDelay(ot::Mle::Mle *this)
{
  unsigned int v13 = 1;
  if (ot::Mle::Mle::IsDetached(this))
  {
    if (*((_WORD *)this + 158))
    {
      unsigned __int16 v11 = *((_WORD *)this + 158) - 1;
      else {
        unsigned int v13 = 251 << v11;
      }
      int Uint32InRange = ot::Random::NonCrypto::GetUint32InRange(0LL, 0x32u);
      __int16 v9 = *((_WORD *)this + 158);
      ot::ToUlong(v13 / 0x3E8);
      ot::Logger::LogAtLevel<(ot::LogLevel)3>( (ot *)&ot::Mle::kLogModuleName,  "Attach attempt %u unsuccessful, will try again in %lu.%03u seconds",  v2,  v3,  v4,  v5,  v6,  v7,  v9);
    }

    else
    {
      return ot::Random::NonCrypto::GetUint32InRange(0LL, 0x2EEu) + 1;
    }
  }

  return v13;
}

BOOL ot::Mle::Mle::IsRouterOrLeader(ot::Mle::Mle *this)
{
  BOOL v3 = 1;
  if (!ot::Mle::Mle::IsRouter(this)) {
    return ot::Mle::Mle::IsLeader(this);
  }
  return v3;
}

_BYTE *ot::Mac::Mac::SetBeaconEnabled(_BYTE *this, char a2)
{
  *this = *this & 0xEF | (16 * (a2 & 1));
  return this;
}

{
  return __ZN2ot3Mac3Mac16SetBeaconEnabledEb(this, a2);
}

void ot::Mle::Mle::SetStateChild(ot::Mle::Mle *this, unsigned __int16 a2)
{
  if (ot::Mle::Mle::IsLeader(this))
  {
    uint64_t v2 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
    ot::Ip6::Netif::RemoveUnicastAddress(v2, this);
  }

  ot::Mle::Mle::SetRloc16(this, a2);
  ot::Mle::Mle::SetRole((unsigned __int8 *)this, 2);
  ot::Mle::Mle::SetAttachState((uint64_t)this, 0);
  ot::TimerMilli::Start((ot::Mle::Mle *)((char *)this + 320), 0x4E20u);
  *((_BYTE *)this + 315) = 0;
  *((_BYTE *)this + 704) = 0;
  *((_BYTE *)this + 706) = 0;
  BOOL v3 = (_BYTE *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  ot::Mac::Mac::SetBeaconEnabled(v3, 0);
  ot::Mle::Mle::ScheduleMessageTransmissionTimer(this);
  if (ot::Mle::Mle::IsFullThreadDevice(this))
  {
    uint64_t v4 = (unsigned __int8 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    ot::Mle::MleRouter::HandleChildStart(v4, *((_BYTE *)this + 417));
  }

  ot::Mle::Mle::InformPreviousChannel((uint64_t)this);
  if (*((unsigned __int16 *)this + 397) != 65534)
  {
    int v6 = *((unsigned __int16 *)this + 397);
    if (v6 != (unsigned __int16)ot::Neighbor::GetRloc16((ot::Mle::Mle *)((char *)this + 48)))
    {
      ++*((_WORD *)this + 484);
      ++*((_WORD *)this + 502);
      ot::Mle::Mle::InformPreviousParent(this);
    }
  }

  *((_WORD *)this + 397) = ot::Neighbor::GetRloc16((ot::Mle::Mle *)((char *)this + 48));
  uint64_t v5 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  ot::Mac::Mac::UpdateCsl(v5, 0LL);
}

uint64_t ot::Mle::Mle::InformPreviousChannel(uint64_t this)
{
  BOOL v3 = (ot::Mle::Mle *)this;
  if (*(unsigned __int16 *)(this + 798) != 0xFFFF)
  {
    if (ot::Mle::Mle::IsChild((ot::Mle::Mle *)this) || (this = ot::Mle::Mle::IsRouter(v3), (this & 1) != 0))
    {
      if (!ot::Mle::Mle::IsFullThreadDevice(v3)
        || ot::Mle::Mle::IsRouter(v3)
        || (v1 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(v3),
            this = ot::Mle::MleRouter::GetRouterSelectionJitterTimeout(v1),
            !(_BYTE)this))
      {
        *((_WORD *)v3 + 399) = -1;
        uint64_t v2 = (ot::AnnounceBeginServer *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AnnounceBeginServer>(v3);
        return ot::AnnounceBeginServer::SendAnnounce(v2, 1 << *((_BYTE *)v3 + 797), 3, 0x3E8u);
      }
    }
  }

  return this;
}

void ot::Mle::Mle::InformPreviousParent(ot::Mle::Mle *this)
{
  uint64_t v24 = this;
  int v23 = 0;
  uint64_t v22 = 0LL;
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)v21);
  v1 = (ot::Ip6::Ip6 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Ip6>(this);
  uint64_t v22 = ot::Ip6::Ip6::NewMessage(v1, 0);
  if (v22)
  {
    int v23 = ot::Message::SetLength(v22, 0);
    if (!v23)
    {
      ot::Mle::Mle::GetMeshLocal64(this);
      ot::Ip6::MessageInfo::SetSockAddr(v21, v2);
      ot::Mle::Mle::GetMeshLocal16(this);
      ot::Ip6::MessageInfo::SetPeerAddr(v21, v3);
      ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)v21);
      Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v4);
      ot::Ip6::InterfaceIdentifier::SetLocator(Iid, *((_WORD *)this + 397));
      int v6 = (ot::Ip6::Ip6 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Ip6>(this);
      int v23 = ot::Ip6::Ip6::SendDatagram(v6, v22, (ot::Ip6::MessageInfo *)v21, 0x3Bu);
      if (!v23) {
        ot::Logger::LogAtLevel<(ot::LogLevel)3>( (ot *)&ot::Mle::kLogModuleName,  "Sending message to inform previous parent 0x%04x",  v7,  v8,  v9,  v10,  v11,  v12,  *((_WORD *)this + 397));
      }
    }
  }

  else
  {
    int v23 = 3;
  }

  if (v23)
  {
    char v13 = ot::ErrorToString(v23);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mle::kLogModuleName,  "Failed to inform previous parent: %s",  v14,  v15,  v16,  v17,  v18,  v19,  v13);
    if (v22) {
      ot::Message::Free(v22);
    }
  }

void ot::Mle::Mle::SetTimeout(ot::Mle::Mle *this, unsigned int a2)
{
  int v4 = a2;
  if (*((_DWORD *)this + 196) != a2)
  {
    if (a2 < 5) {
      int v4 = 5;
    }
    *((_DWORD *)this + 196) = v4;
    uint64_t v2 = (ot::DataPollSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollSender>(this);
    ot::DataPollSender::RecalculatePollPeriod(v2);
    if (ot::Mle::Mle::IsChild(this))
    {
      ot::Mle::Mle::SendChildUpdateRequest(this);
      IgnoreError();
    }
  }

uint64_t ot::Mle::Mle::SetDeviceMode(_BYTE *a1, char a2)
{
  char v18 = a2;
  uint64_t v17 = a1;
  unsigned int v16 = 0;
  char v15 = a1[312];
  if (ot::Mle::DeviceMode::IsValid((ot::Mle::DeviceMode *)&v18))
  {
    if (ot::Unequatable<ot::Mle::DeviceMode>::operator!=(a1 + 312, &v18))
    {
      a1[312] = v18;
      uint64_t v2 = (ot::Utils::HistoryTracker *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::HistoryTracker>((ot::InstanceLocator *)a1);
      ot::Utils::HistoryTracker::RecordNetworkInfo(v2);
      char v12 = ot::Mle::DeviceMode::Get((ot::Mle::DeviceMode *)&v15);
      ot::Mle::DeviceMode::Get((ot::Mle::DeviceMode *)(a1 + 312));
      ot::Mle::DeviceMode::ToString((ot::Mle::DeviceMode *)(a1 + 312), (ot::StringWriter *)v19);
      ot::String<(unsigned short)45>::AsCString((uint64_t)v19);
      ot::Logger::LogAtLevel<(ot::LogLevel)3>( (ot *)&ot::Mle::kLogModuleName,  "Mode 0x%02x -> 0x%02x [%s]",  v3,  v4,  v5,  v6,  v7,  v8,  v12);
      ot::Mle::Mle::Store((ot::Mle::Mle *)a1);
      IgnoreError();
      if (!ot::Mle::Mle::IsAttached((ot::Mle::Mle *)a1)) {
        goto LABEL_11;
      }
      BOOL IsFullThreadDevice = ot::Mle::DeviceMode::IsFullThreadDevice((ot::Mle::DeviceMode *)&v15);
      BOOL v14 = IsFullThreadDevice != ot::Mle::DeviceMode::IsFullThreadDevice((ot::Mle::DeviceMode *)(a1 + 312));
      if ((a1[711] & 1) == 0
        && ot::Mle::DeviceMode::IsRxOnWhenIdle((ot::Mle::DeviceMode *)&v15)
        && !ot::Mle::DeviceMode::IsRxOnWhenIdle((ot::Mle::DeviceMode *)(a1 + 312)))
      {
        BOOL v14 = 1;
      }

      if (v14)
      {
        ot::Mle::Mle::ResetAttachCounter((uint64_t)a1);
        ot::Mle::Mle::BecomeDetached((ot::Mle::Mle *)a1);
        IgnoreError();
      }

      else
      {
LABEL_11:
        if (ot::Mle::Mle::IsDetached((ot::Mle::Mle *)a1))
        {
          ot::Mle::Mle::ResetAttachCounter((uint64_t)a1);
          ot::Mle::Mle::SetStateDetached((ot::Mle::Mle *)a1);
          ot::Mle::Mle::Attach((uint64_t)a1, 0);
        }

        else if (ot::Mle::Mle::IsChild((ot::Mle::Mle *)a1))
        {
          unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16((ot::Mle::Mle *)a1);
          ot::Mle::Mle::SetStateChild((ot::Mle::Mle *)a1, Rloc16);
          ot::Mle::Mle::SendChildUpdateRequest((ot::Mle::Mle *)a1);
          IgnoreError();
        }
      }
    }
  }

  else
  {
    return 7;
  }

  return v16;
}

BOOL ot::Mle::DeviceMode::IsValid(ot::Mle::DeviceMode *this)
{
  BOOL v3 = 1;
  if (ot::Mle::DeviceMode::IsFullThreadDevice(this)) {
    return ot::Mle::DeviceMode::IsRxOnWhenIdle(this);
  }
  return v3;
}

{
  return __ZNK2ot3Mle10DeviceMode7IsValidEv(this);
}

BOOL ot::Unequatable<ot::Mle::DeviceMode>::operator!=(const void *a1, const void *a2)
{
  return !ot::Equatable<ot::Mle::DeviceMode>::operator==(a1, a2);
}

{
  return __ZNK2ot11UnequatableINS_3Mle10DeviceModeEEneERKS2_(a1, a2);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Dhcp6::Server>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Dhcp6::Server>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_5Dhcp66ServerEEERT_v(a1);
}

BOOL ot::Mle::Mle::ServiceAloc::IsInUse(ot::Mle::Mle::ServiceAloc *this)
{
  return (unsigned __int16)ot::Mle::Mle::ServiceAloc::GetAloc16(this) != 65534;
}

{
  return __ZNK2ot3Mle3Mle11ServiceAloc7IsInUseEv(this);
}

void *ot::Mle::Mle::ServiceAloc::ApplyMeshLocalPrefix(ot::Ip6::Netif::UnicastAddress *a1, void *a2)
{
  return ot::Ip6::Address::SetPrefix(v2, a2);
}

{
  return __ZN2ot3Mle3Mle11ServiceAloc20ApplyMeshLocalPrefixERKNS_3Ip613NetworkPrefixE(a1, a2);
}

uint64_t ot::Mle::Mle::SetLeaderData(ot::Mle::Mle *this, int a2, char a3, char a4)
{
  if (ot::Mle::LeaderData::GetPartitionId((ot::Mle::Mle *)((char *)this + 32)) == a2)
  {
    uint64_t v6 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
    ot::Notifier::SignalIfFirst(v6, 128LL);
  }

  else
  {
    uint64_t v4 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    ot::Mle::MleRouter::HandlePartitionChange(v4);
    uint64_t v5 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
    ot::Notifier::Signal(v5, 128LL);
    ++*((_WORD *)this + 458);
    ++*((_WORD *)this + 500);
  }

  ot::Mle::LeaderData::SetPartitionId((_DWORD *)this + 8, a2);
  ot::Mle::LeaderData::SetWeighting((uint64_t)this + 32, a3);
  return ot::Mle::LeaderData::SetLeaderRouterId((uint64_t)this + 32, a4);
}

_DWORD *ot::Mle::LeaderData::SetPartitionId(_DWORD *this, int a2)
{
  *this = a2;
  return this;
}

{
  return __ZN2ot3Mle10LeaderData14SetPartitionIdEj(this, a2);
}

uint64_t ot::Mle::LeaderData::SetWeighting(uint64_t this, char a2)
{
  *(_BYTE *)(this + 4) = a2;
  return this;
}

{
  return __ZN2ot3Mle10LeaderData12SetWeightingEh(this, a2);
}

uint64_t ot::Mle::LeaderData::SetLeaderRouterId(uint64_t this, char a2)
{
  *(_BYTE *)(this + 7) = a2;
  return this;
}

{
  return __ZN2ot3Mle10LeaderData17SetLeaderRouterIdEh(this, a2);
}

uint64_t ot::Mle::Mle::GetLeaderAddress(ot::Mle::Mle *this, ot::Ip6::Address *a2)
{
  unsigned int v8 = 0;
  if ((unsigned __int16)ot::Mle::Mle::GetRloc16(this) == 65534)
  {
    return 16;
  }

  else
  {
    ot::Mle::Mle::GetMeshLocalPrefix(this);
    uint64_t v6 = v2;
    unsigned __int8 LeaderRouterId = ot::Mle::LeaderData::GetLeaderRouterId((ot::Mle::Mle *)((char *)this + 32));
    unsigned __int16 v4 = ot::Mle::Rloc16FromRouterId((ot::Mle *)LeaderRouterId);
    ot::Ip6::Address::SetToRoutingLocator(a2, v6, v4);
  }

  return v8;
}

uint64_t ot::Mle::Mle::GetLocatorAddress(ot::Mle::Mle *this, ot::Ip6::Address *a2, unsigned __int16 a3)
{
  unsigned int v7 = 0;
  if ((unsigned __int16)ot::Mle::Mle::GetRloc16(this) == 65534)
  {
    return 16;
  }

  else
  {
    ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 1072));
    *(void *)a2 = *v3;
    *(void *)((char *)a2 + 6) = *(void *)((char *)v3 + 6);
    Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(a2);
    ot::Ip6::InterfaceIdentifier::SetLocator(Iid, a3);
  }

  return v7;
}

uint64_t ot::Mle::Mle::GetServiceAloc(ot::Mle::Mle *this, unsigned __int8 a2, ot::Ip6::Address *a3)
{
  unsigned int v8 = 0;
  if ((unsigned __int16)ot::Mle::Mle::GetRloc16(this) == 65534)
  {
    return 16;
  }

  else
  {
    ot::Mle::Mle::GetMeshLocalPrefix(this);
    uint64_t v6 = v3;
    unsigned __int16 v4 = ot::Mle::ServiceAlocFromId((ot::Mle *)a2);
    ot::Ip6::Address::SetToAnycastLocator(a3, v6, v4);
  }

  return v8;
}

uint64_t ot::Mle::ServiceAlocFromId(ot::Mle *this)
{
  return (unsigned __int16)(this - 1008);
}

{
  return __ZN2ot3Mle17ServiceAlocFromIdEh(this);
}

uint64_t ot::Mle::Mle::GetLeaderData(ot::Mle::Mle *this)
{
  uint64_t v1 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
  char Version = ot::NetworkData::LeaderBase::GetVersion(v1, 0);
  ot::Mle::LeaderData::SetDataVersion((uint64_t)this + 32, Version);
  uint64_t v3 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
  char v4 = ot::NetworkData::LeaderBase::GetVersion(v3, 1);
  ot::Mle::LeaderData::SetStableDataVersion((uint64_t)this + 32, v4);
  return (uint64_t)this + 32;
}

uint64_t ot::Mle::LeaderData::SetDataVersion(uint64_t this, char a2)
{
  *(_BYTE *)(this + 5) = a2;
  return this;
}

{
  return __ZN2ot3Mle10LeaderData14SetDataVersionEh(this, a2);
}

uint64_t ot::NetworkData::LeaderBase::GetVersion(uint64_t a1, char a2)
{
  if (a2) {
    return *(unsigned __int8 *)(a1 + 10);
  }
  else {
    return *(unsigned __int8 *)(a1 + 11);
  }
}

{
  return __ZNK2ot11NetworkData10LeaderBase10GetVersionENS0_4TypeE(a1, a2);
}

uint64_t ot::Mle::LeaderData::SetStableDataVersion(uint64_t this, char a2)
{
  *(_BYTE *)(this + 6) = a2;
  return this;
}

{
  return __ZN2ot3Mle10LeaderData20SetStableDataVersionEh(this, a2);
}

BOOL ot::Mle::Mle::HasUnregisteredAddress(ot::Mle::Mle *this)
{
  unsigned int v16 = this;
  BOOL v15 = 0;
  uint64_t v1 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
  ot::Ip6::Netif::GetUnicastAddresses(v1);
  v14[1] = v2;
  v14[0] = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::begin(v2);
  uint64_t v13 = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::end();
  while (ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator!=( v14,  &v13))
  {
    char v12 = (ot::Ip6::Netif::UnicastAddress *)ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator*((uint64_t)v14);
    ot::Ip6::Netif::UnicastAddress::GetAddress(v12);
    if (!ot::Ip6::Address::IsLinkLocal(v3))
    {
      ot::Ip6::Netif::UnicastAddress::GetAddress(v12);
      if (!ot::Mle::Mle::IsRoutingLocator(this, v4))
      {
        ot::Ip6::Netif::UnicastAddress::GetAddress(v12);
        if (!ot::Mle::Mle::IsAnycastLocator(this, v5))
        {
          ot::Ip6::Netif::UnicastAddress::GetAddress(v12);
          uint64_t v10 = v6;
          ot::Mle::Mle::GetMeshLocal64(this);
          if (ot::Unequatable<ot::Ip6::Address>::operator!=(v10, v7)) {
            return 1;
          }
        }
      }
    }

    ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator++(v14);
  }

  if (!ot::Mle::Mle::IsRxOnWhenIdle(this))
  {
    unsigned int v8 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
    return ot::Ip6::Netif::HasAnyExternalMulticastAddress(v8);
  }

  return v15;
}

BOOL ot::Mle::Mle::IsRoutingLocator(ot::Mle::Mle *this, const ot::Ip6::Address *a2)
{
  BOOL v4 = 0;
  if (ot::Mle::Mle::IsMeshLocalAddress(this, a2))
  {
    Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(a2);
    return ot::Ip6::InterfaceIdentifier::IsRoutingLocator(Iid);
  }

  return v4;
}

BOOL ot::Mle::Mle::IsAnycastLocator(ot::Mle::Mle *this, const ot::Ip6::Address *a2)
{
  BOOL v4 = 0;
  if (ot::Mle::Mle::IsMeshLocalAddress(this, a2))
  {
    Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(a2);
    return ot::Ip6::InterfaceIdentifier::IsAnycastLocator(Iid);
  }

  return v4;
}

BOOL ot::Ip6::Netif::HasAnyExternalMulticastAddress(ot::Ip6::Netif *this)
{
  v2[3] = this;
  ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Iterator((uint64_t)v2, (uint64_t)this, 0);
  return !ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::IsDone(v2);
}

{
  return __ZNK2ot3Ip65Netif30HasAnyExternalMulticastAddressEv(this);
}

uint64_t ot::Mle::Mle::SetCslTimeout(uint64_t this, int a2)
{
  BOOL v4 = (ot::InstanceLocator *)this;
  if (*(_DWORD *)(this + 788) != a2)
  {
    *(_DWORD *)(this + 788) = a2;
    uint64_t v2 = (ot::DataPollSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollSender>((ot::InstanceLocator *)this);
    ot::DataPollSender::RecalculatePollPeriod(v2);
    uint64_t v3 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(v4);
    this = ot::Mac::Mac::IsCslEnabled(v3);
    if ((this & 1) != 0) {
      return ot::Mle::Mle::ScheduleChildUpdateRequest(v4);
    }
  }

  return this;
}

uint64_t ot::Mle::Mle::InitNeighbor(ot::Mle::Mle *this, ot::Neighbor *a2, ot::Ip6::MessageInfo **a3)
{
  Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v3);
  ExtAddress = (ot::Mac::ExtAddress *)ot::Neighbor::GetExtAddress(a2);
  ot::Ip6::InterfaceIdentifier::ConvertToExtAddress(Iid, ExtAddress);
  LinkInfo = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(a2);
  ot::LinkQualityInfo::Clear(LinkInfo);
  uint64_t v11 = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(a2);
  ThreadLinkInfo = (ot::ThreadLinkInfo *)ot::Ip6::MessageInfo::GetThreadLinkInfo(a3[1]);
  char Rss = ot::ThreadLinkInfo::GetRss(ThreadLinkInfo);
  ot::LinkQualityInfo::AddRss(v11, Rss);
  unsigned int v8 = (ot::TimerMilli *)ot::Neighbor::ResetLinkFailures((uint64_t)a2);
  int Now = ot::TimerMilli::GetNow(v8);
  return ot::Neighbor::SetLastHeard((uint64_t)a2, Now);
}

uint64_t ot::Mle::Mle::InitParentCandidate(ot::Mle::Mle *this, ot::Mac::ExtAddress *a2)
{
  return ot::Neighbor::SetExtAddress((uint64_t)this + 424, a2);
}

uint64_t ot::Mle::Mle::HandleNotifierEvents(_BYTE *a1, uint64_t a2)
{
  uint64_t v16 = a2;
  uint64_t result = ot::Mle::Mle::IsDisabled((ot::Mle::Mle *)a1);
  if ((result & 1) == 0)
  {
    if (ot::Events::Contains(&v16, 4LL)
      && ot::Mle::Mle::IsChild((ot::Mle::Mle *)a1)
      && !ot::Mle::Mle::IsFullThreadDevice((ot::Mle::Mle *)a1)
      && a1[708] == 1)
    {
      a1[708] = 0;
      ot::Mle::Mle::ScheduleChildUpdateRequest((ot::Mle::Mle *)a1);
    }

    if (ot::Events::ContainsAny((ot::Events *)&v16, 3LL))
    {
      BOOL v14 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)a1);
      ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Ip6::Netif::UnicastAddress *)(a1 + 1040));
      if (!ot::Ip6::Netif::HasUnicastAddress(v14, v3))
      {
        ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Ip6::Netif::UnicastAddress *)(a1 + 1040));
        Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v4);
        ot::Ip6::InterfaceIdentifier::GenerateRandom(Iid);
        uint64_t v6 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)a1);
        ot::Ip6::Netif::AddUnicastAddress(v6, (ot::Ip6::Netif::UnicastAddress *)(a1 + 1040));
        unsigned int v7 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>((ot::InstanceLocator *)a1);
        ot::Notifier::Signal(v7, 16LL);
      }

      if (ot::Mle::Mle::IsChild((ot::Mle::Mle *)a1) && !ot::Mle::Mle::IsFullThreadDevice((ot::Mle::Mle *)a1)) {
        ot::Mle::Mle::ScheduleChildUpdateRequest((ot::Mle::Mle *)a1);
      }
    }

    if (ot::Events::ContainsAny((ot::Events *)&v16, 12288LL)
      && ot::Mle::Mle::IsChild((ot::Mle::Mle *)a1)
      && !ot::Mle::Mle::IsFullThreadDevice((ot::Mle::Mle *)a1))
    {
      if (!ot::Mle::Mle::IsRxOnWhenIdle((ot::Mle::Mle *)a1)
        || (Parent = (ot::Neighbor *)ot::Mle::Mle::GetParent((ot::Mle::Mle *)a1),
            !ot::Neighbor::IsThreadVersion1p1(Parent)))
      {
        ot::Mle::Mle::ScheduleChildUpdateRequest((ot::Mle::Mle *)a1);
      }
    }

    if (ot::Events::Contains(&v16, 512LL))
    {
      if (ot::Mle::Mle::IsFullThreadDevice((ot::Mle::Mle *)a1))
      {
        uint64_t v9 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
        ot::Mle::MleRouter::HandleNetworkDataUpdateRouter(v9);
      }

      else if (ot::Mle::Mle::IsChild((ot::Mle::Mle *)a1) && !ot::Events::Contains(&v16, 4LL))
      {
        ot::Mle::Mle::ScheduleChildUpdateRequest((ot::Mle::Mle *)a1);
      }

      uint64_t v10 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>((ot::InstanceLocator *)a1);
      ot::BackboneRouter::Leader::Update(v10);
      ot::Mle::Mle::UpdateServiceAlocs((ot::Mle::Mle *)a1);
      uint64_t v11 = (ot::Dhcp6::Server *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Dhcp6::Server>((ot::InstanceLocator *)a1);
      ot::Dhcp6::Server::UpdateService(v11);
      IgnoreError();
      char v12 = (ot::Dhcp6::Client *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Dhcp6::Client>((ot::InstanceLocator *)a1);
      ot::Dhcp6::Client::UpdateAddresses(v12);
    }

    if (ot::Events::ContainsAny((ot::Events *)&v16, 260LL)
      && (ot::Events::Contains(&v16, 256LL) || ot::Mle::Mle::IsAttached((ot::Mle::Mle *)a1)))
    {
      ot::Mle::Mle::Store((ot::Mle::Mle *)a1);
      IgnoreError();
    }

    uint64_t result = ot::Events::Contains(&v16, 0x100000LL);
    if ((result & 1) != 0)
    {
      uint64_t v13 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
      return ot::Mle::MleRouter::HandleSecurityPolicyChanged(v13);
    }
  }

  return result;
}

uint64_t ot::Mle::Mle::UpdateServiceAlocs(ot::Mle::Mle *this)
{
  uint64_t v16 = this;
  uint64_t result = ot::Mle::Mle::IsDisabled(this);
  if ((result & 1) == 0)
  {
    for (i = (ot::Mle::Mle *)((char *)this + 808);
          i != (ot::Mle::Mle *)((char *)this + 904);
          i = (ot::Mle::Mle::ServiceAloc *)((char *)i + 32))
    {
      char v13 = 0;
      if (ot::Mle::Mle::ServiceAloc::IsInUse(i))
      {
        unsigned int v15 = 0;
        while (1)
        {
          uint64_t v9 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
          unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16(this);
          if (ot::NetworkData::NetworkData::GetNextService( v9,  &v15,  Rloc16,  (ot::NetworkData::ServiceConfig *)v17)) {
            break;
          }
          int v8 = v17[0];
          unsigned __int16 Aloc16 = ot::Mle::Mle::ServiceAloc::GetAloc16(i);
          if (v8 == ot::Mle::ServiceIdFromAloc((ot::Mle *)Aloc16))
          {
            char v13 = 1;
            break;
          }
        }

        if ((v13 & 1) == 0)
        {
          BOOL v4 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
          ot::Ip6::Netif::RemoveUnicastAddress(v4, i);
          ot::Mle::Mle::ServiceAloc::MarkAsNotInUse(i);
        }
      }
    }

    unsigned int v15 = 0;
    while (1)
    {
      unsigned int v7 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
      unsigned __int16 v5 = ot::Mle::Mle::GetRloc16(this);
      uint64_t result = ot::NetworkData::NetworkData::GetNextService(v7, &v15, v5, (ot::NetworkData::ServiceConfig *)v17);
      if ((_DWORD)result) {
        break;
      }
      unsigned __int16 v12 = ot::Mle::ServiceAlocFromId((ot::Mle *)v17[0]);
      if (!ot::Mle::Mle::FindInServiceAlocs(this, v12))
      {
        uint64_t result = (uint64_t)ot::Mle::Mle::FindInServiceAlocs(this, 0xFFFEu);
        uint64_t v11 = (ot::Ip6::Netif::UnicastAddress *)result;
        if (!result) {
          return result;
        }
        ot::Mle::Mle::ServiceAloc::SetAloc16((ot::Mle::Mle::ServiceAloc *)result, v12);
        uint64_t v6 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
        ot::Ip6::Netif::AddUnicastAddress(v6, v11);
      }
    }
  }

  return result;
}

ot::Mle::Mle::ServiceAloc *ot::Mle::Mle::FindInServiceAlocs(ot::Mle::Mle *this, unsigned __int16 a2)
{
  uint64_t v5 = 0LL;
  BOOL v4 = (ot::Mle::Mle *)((char *)this + 808);
  uint64_t v3 = (ot::Mle::Mle *)((char *)this + 904);
  while (v4 != v3)
  {
    BOOL v4 = (ot::Mle::Mle::ServiceAloc *)((char *)v4 + 32);
  }

  return (ot::Mle::Mle::ServiceAloc *)v5;
}

uint64_t ot::Mle::Mle::ServiceAloc::GetAloc16(ot::Mle::Mle::ServiceAloc *this)
{
  Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v1);
  return (unsigned __int16)ot::Ip6::InterfaceIdentifier::GetLocator(Iid);
}

{
  return __ZNK2ot3Mle3Mle11ServiceAloc9GetAloc16Ev(this);
}

uint64_t ot::Mle::ServiceIdFromAloc(ot::Mle *this)
{
  return ((_BYTE)this - 16);
}

{
  return __ZN2ot3Mle17ServiceIdFromAlocEt(this);
}

uint64_t ot::Mle::Mle::ServiceAloc::MarkAsNotInUse(ot::Mle::Mle::ServiceAloc *this)
{
  return ot::Mle::Mle::ServiceAloc::SetAloc16(this, 0xFFFEu);
}

{
  return __ZN2ot3Mle3Mle11ServiceAloc14MarkAsNotInUseEv(this);
}

uint64_t ot::Mle::Mle::ServiceAloc::SetAloc16(ot::Mle::Mle::ServiceAloc *this, unsigned __int16 a2)
{
  Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v2);
  return ot::Ip6::InterfaceIdentifier::SetLocator(Iid, a2);
}

{
  return __ZN2ot3Mle3Mle11ServiceAloc9SetAloc16Et(this, a2);
}

uint64_t ot::Mle::Mle::DetermineParentRequestType(uint64_t a1, _BYTE *a2, int *a3)
{
  unsigned int v5 = 0;
  if (*(_BYTE *)(a1 + 313) != 3) {
    __assert_rtn("DetermineParentRequestType", "mle.cpp", 2318, "mAttachState == kAttachStateParentRequest");
  }
  *a2 = 1;
  if (*(unsigned __int16 *)(a1 + 316) > 1u || *(_BYTE *)(a1 + 417) == 4)
  {
  }

  else
  {
  }

  if (a3)
  {
    if (*a2) {
      int v3 = 1250;
    }
    else {
      int v3 = 750;
    }
    *a3 = v3;
  }

  return v5;
}

uint64_t ot::Mle::Mle::HasAcceptableParentCandidate(ot::Mle::Mle *this)
{
  uint64_t v6 = this;
  char v5 = 0;
  int v2 = *((unsigned __int8 *)this + 313);
  if (v2 != 3)
  {
    if (v2 != 4 || ot::Mle::Mle::HasMoreChannelsToAnnounce(this)) {
      return v5 & 1;
    }
    goto LABEL_12;
  }

  if (v4 || ot::Router::GetTwoWayLinkQuality((ot::Mle::Mle *)((char *)this + 424)) == 3)
  {
LABEL_12:
    if (!ot::Mle::Mle::IsChild(this) || (*((_BYTE *)this + 710) & 1) != 0 || *((_BYTE *)this + 417) == 2) {
      char v5 = 1;
    }
  }

  return v5 & 1;
}

BOOL ot::Neighbor::IsStateParentResponse(ot::Neighbor *this)
{
  return (*((_BYTE *)this + 98) & 0xF) == 3;
}

{
  return __ZNK2ot8Neighbor21IsStateParentResponseEv(this);
}

BOOL ot::Mle::Mle::HasMoreChannelsToAnnounce(ot::Mle::Mle *this)
{
  int v3 = this;
  unsigned __int8 v2 = *((_BYTE *)this + 796);
  return ot::Mle::Mle::GetNextAnnounceChannel(this, &v2) == 0;
}

uint64_t ot::Mle::Mle::SendChildIdRequest(ot::Mle::Mle *this)
{
  uint64_t v19 = this;
  *(_DWORD *)&v18[1] = 0;
  v18[0] = 3;
  uint64_t v17 = 0LL;
  ExtAddress = (const void *)ot::Neighbor::GetExtAddress((ot::Mle::Mle *)((char *)this + 48));
  uint64_t v1 = (const void *)ot::Neighbor::GetExtAddress((ot::Mle::Mle *)((char *)this + 424));
  if (ot::Equatable<ot::Mac::ExtAddress>::operator==(ExtAddress, v1))
  {
    if (ot::Mle::Mle::IsChild(this))
    {
      ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)&ot::Mle::kLogModuleName,  "Already attached to candidate parent",  v2,  v3,  v4,  v5,  v6,  v7,  v13);
      *(_DWORD *)&v18[1] = 24;
      goto LABEL_25;
    }

    ot::Neighbor::SetState((ot::Mle::Mle *)((char *)this + 48), 0);
  }

  uint64_t v17 = ot::Mle::Mle::NewMleMessage((uint64_t)this, 0xBu);
  if (v17)
  {
    *(_DWORD *)&v18[1] = ot::Mle::Mle::TxMessage::AppendResponseTlv(v17, (ot::Mle::Mle *)((char *)this + 673));
    if (!*(_DWORD *)&v18[1])
    {
      *(_DWORD *)&v18[1] = ot::Mle::Mle::TxMessage::AppendLinkFrameCounterTlv(v17);
      if (!*(_DWORD *)&v18[1])
      {
        *(_DWORD *)&v18[1] = ot::Mle::Mle::TxMessage::AppendMleFrameCounterTlv(v17);
        if (!*(_DWORD *)&v18[1])
        {
          *(_DWORD *)&v18[1] = ot::Mle::Mle::TxMessage::AppendModeTlv((uint64_t)v17, *((_BYTE *)this + 312));
          if (!*(_DWORD *)&v18[1])
          {
            *(_DWORD *)&v18[1] = ot::Mle::Mle::TxMessage::AppendTimeoutTlv(v17, *((_DWORD *)this + 196));
            if (!*(_DWORD *)&v18[1])
            {
              *(_DWORD *)&v18[1] = ot::Mle::Mle::TxMessage::AppendVersionTlv(v17);
              if (!*(_DWORD *)&v18[1])
              {
                int v8 = (ot::SupervisionListener *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SupervisionListener>(this);
                unsigned __int16 CurrentInterval = ot::SupervisionListener::GetCurrentInterval(v8);
                *(_DWORD *)&v18[1] = ot::Mle::Mle::TxMessage::AppendSupervisionIntervalTlv(v17, CurrentInterval);
                if (!*(_DWORD *)&v18[1])
                {
                  if (!ot::Mle::Mle::IsFullThreadDevice(this))
                  {
                    *(_DWORD *)&v18[1] = ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv( v17,  *((_BYTE *)this + 708));
                    if (*(_DWORD *)&v18[1]) {
                      goto LABEL_25;
                    }
                    *(_DWORD *)char v18 = (v18[0] - 1);
                  }

                  *(_DWORD *)&v18[1] = ot::Mle::Mle::TxMessage::AppendTlvRequestTlv( v17,  ot::Mle::Mle::SendChildIdRequest(void)::kTlvs,  v18[0]);
                  if (!*(_DWORD *)&v18[1])
                  {
                    *(_DWORD *)&v18[1] = ot::Mle::Mle::TxMessage::AppendActiveTimestampTlv(v17);
                    if (!*(_DWORD *)&v18[1])
                    {
                      *(_DWORD *)&v18[1] = ot::Mle::Mle::TxMessage::AppendPendingTimestampTlv(v17);
                      if (!*(_DWORD *)&v18[1])
                      {
                        ot::Neighbor::SetState((ot::Mle::Mle *)((char *)this + 424), 7);
                        uint64_t v10 = (const ot::Mac::ExtAddress *)ot::Neighbor::GetExtAddress((ot::Mle::Mle *)((char *)this + 424));
                        ot::Ip6::Address::SetToLinkLocalAddress((ot::Ip6::Address *)&v16, v10);
                        *(_DWORD *)&v18[1] = ot::Mle::Mle::TxMessage::SendTo(v17, &v16);
                        if (!*(_DWORD *)&v18[1])
                        {
                          if (*((_BYTE *)this + 708) == 1) {
                            unsigned __int8 v11 = 3;
                          }
                          else {
                            unsigned __int8 v11 = 2;
                          }
                          ot::Mle::Mle::Log(0, v11, (ot::Ip6::Address *)&v16);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  else
  {
    *(_DWORD *)&v18[1] = 3;
  }

void ot::Mle::Mle::ProcessAnnounce( ot::Mle::Mle *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v14 = *((_BYTE *)this + 797);
  __int16 v13 = *((_WORD *)this + 399);
  if (*((_BYTE *)this + 313) != 1) {
    __assert_rtn("ProcessAnnounce", "mle.cpp", 5220, "mAttachState == kAttachStateProcessAnnounce");
  }
  ot::Logger::LogAtLevel<(ot::LogLevel)3>( (ot *)&ot::Mle::kLogModuleName,  "Processing Announce - channel %d, panid 0x%02x",  a3,  a4,  a5,  a6,  a7,  a8,  v14);
  ot::Mle::Mle::Stop(this, 0);
  int v8 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  *((_BYTE *)this + 797) = ot::Mac::Mac::GetPanChannel(v8);
  uint64_t v9 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  *((_WORD *)this + 399) = ot::Mac::Mac::GetPanId(v9);
  *((void *)this + 100) = 0LL;
  uint64_t v10 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  ot::Mac::Mac::SetPanChannel(v10, v14);
  IgnoreError();
  unsigned __int8 v11 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  ot::Mac::Mac::SetPanId(v11, v13);
  ot::Mle::Mle::Start(this, 1);
  IgnoreError();
}

char *ot::Mle::Mle::AttachModeToString(unsigned __int8 a1)
{
  return ot::Mle::Mle::AttachModeToString(ot::Mle::Mle::AttachMode)::kAttachModeStrings[a1];
}

uint64_t ot::Mle::Mle::ReattachStateToString(unsigned __int8 a1)
{
  return *((void *)&ot::Mle::Mle::ReattachStateToString(ot::Mle::Mle::ReattachState)::kReattachStateStrings + a1);
}

void ot::Mle::Mle::SendParentRequest(uint64_t a1, char a2)
{
  uint64_t v8 = a1;
  char v7 = a2;
  int appended = 0;
  unsigned __int8 v4 = 0;
  ot::Mle::Mle::Challenge::GenerateRandom((ot::Mle::Mle::Challenge *)(a1 + 408));
  if (v7)
  {
    if (v7 == 1)
    {
      unsigned __int8 v4 = -64;
      ot::Ip6::Address::SetToLinkLocalAllRoutersMulticast((ot::Ip6::Address *)&v3);
    }
  }

  else
  {
    unsigned __int8 v4 = 0x80;
    ot::Ip6::Address::SetToLinkLocalAllRoutersMulticast((ot::Ip6::Address *)&v3);
  }

  uint64_t v5 = ot::Mle::Mle::NewMleMessage(a1, 9u);
  if (v5)
  {
    int appended = ot::Mle::Mle::TxMessage::AppendModeTlv((uint64_t)v5, *(_BYTE *)(a1 + 312));
    if (!appended)
    {
      int appended = ot::Mle::Mle::TxMessage::AppendChallengeTlv(v5, (const ot::Mle::Mle::Challenge *)(a1 + 408));
      if (!appended)
      {
        int appended = ot::Mle::Mle::TxMessage::AppendScanMaskTlv(v5, v4);
        if (!appended)
        {
          int appended = ot::Mle::Mle::TxMessage::AppendVersionTlv(v5);
          if (!appended)
          {
            int appended = ot::Mle::Mle::TxMessage::SendTo(v5, &v3);
            if (!appended)
            {
              if (v7)
              {
                if (v7 == 1) {
                  ot::Mle::Mle::Log(0, 0xEu, (ot::Ip6::Address *)&v3);
                }
              }

              else
              {
                ot::Mle::Mle::Log(0, 0xDu, (ot::Ip6::Address *)&v3);
              }
            }
          }
        }
      }
    }
  }

  else
  {
    int appended = 3;
  }

  if (appended)
  {
    if (v5) {
      ot::Message::Free(v5);
    }
  }

uint64_t ot::Mle::Mle::PrepareAnnounceState(ot::Mle::Mle *this)
{
  uint64_t v8 = this;
  char v7 = 0;
  ot::Mac::ChannelMask::ChannelMask((ot::Mac::ChannelMask *)&v6);
  if (!ot::Mle::Mle::IsChild(this) && !*((_BYTE *)this + 315))
  {
    active = (ot::MeshCoP::ActiveDatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
    if (ot::MeshCoP::ActiveDatasetManager::IsPartiallyComplete(active) || !ot::Mle::Mle::IsFullThreadDevice(this))
    {
      uint64_t v2 = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
      if (ot::MeshCoP::DatasetManager::GetChannelMask(v2, (ot::Mac::ChannelMask *)&v6))
      {
        __n128 v3 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
        int v6 = *(_DWORD *)ot::Mac::Mac::GetSupportedChannelMask(v3);
      }

      *((_WORD *)this + 159) = 0x578
      char v7 = 1;
    }
  }

  return v7 & 1;
}

uint64_t ot::Mle::Mle::GetNextAnnounceChannel(ot::Mle::Mle *this, unsigned __int8 *a2)
{
  uint64_t v8 = this;
  char v7 = a2;
  ot::Mac::ChannelMask::ChannelMask((ot::Mac::ChannelMask *)&v6);
  active = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
  if (ot::MeshCoP::DatasetManager::GetChannelMask(active, (ot::Mac::ChannelMask *)&v6))
  {
    __n128 v3 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    int v6 = *(_DWORD *)ot::Mac::Mac::GetSupportedChannelMask(v3);
  }

  return ot::Mac::ChannelMask::GetNextChannel((ot::Mac::ChannelMask *)&v6, v7);
}

void ot::Mle::Mle::SendAnnounce(ot::InstanceLocator *a1, unsigned __int8 a2, char a3)
{
  char v7 = a1;
  unsigned __int8 v6 = a2;
  char v5 = a3;
  ot::Ip6::Address::SetToLinkLocalAllNodesMulticast((ot::Ip6::Address *)&v4);
  ot::Mle::Mle::SendAnnounce(a1, v6, &v4, v5);
}

uint64_t ot::Mle::Mle::Reattach(ot::Mle::Mle *this)
{
  unsigned int v7 = 0;
  if (*((_BYTE *)this + 315) == 2)
  {
    uint64_t v1 = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>(this);
    if (ot::MeshCoP::DatasetManager::Restore(v1))
    {
      *((_BYTE *)this + 315) = 0;
    }

    else
    {
      uint64_t v2 = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>(this);
      ot::MeshCoP::DatasetManager::ApplyConfiguration(v2);
      IgnoreError();
      *((_BYTE *)this + 315) = 3;
      ot::Mle::Mle::SetAttachState((uint64_t)this, 2u);
      unsigned int v7 = ot::Random::NonCrypto::GetUint32InRange(0LL, 0x32u) + 1;
    }
  }

  else if (*((_BYTE *)this + 315) == 3)
  {
    *((_BYTE *)this + 315) = 0;
    active = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
    ot::MeshCoP::DatasetManager::Restore(active);
    IgnoreError();
  }

  if (!*((_BYTE *)this + 315))
  {
    unint64_t v5 = *((unsigned __int8 *)this + 417);
    if (v5 <= 4) {
      __asm { BR              X8 }
    }
  }

  return v7;
}

void ot::Mle::Mle::DelayedResponseMetadata::ReadFrom( ot::Mle::Mle::DelayedResponseMetadata *this, const ot::Message *a2)
{
  unsigned __int16 Length = ot::Message::GetLength(a2);
  if (Length < 0x14uLL) {
    __assert_rtn("ReadFrom", "mle.cpp", 6156, "length >= sizeof(*this)");
  }
  ot::Message::Read<ot::Mle::Mle::DelayedResponseMetadata>(a2, Length - 20, (char *)this);
  IgnoreError();
}

void ot::Mle::Mle::SendDelayedResponse( ot::InstanceLocator *a1, ot::Message *a2, ot::Mle::Mle::DelayedResponseMetadata *a3)
{
  if (ot::Message::GetSubType(a2) != 11
    || (int appended = ot::Mle::Mle::TxMessage::AppendActiveTimestampTlv(a2)) == 0
    && (int appended = ot::Mle::Mle::TxMessage::AppendPendingTimestampTlv(a2)) == 0)
  {
    int appended = ot::Mle::Mle::TxMessage::SendTo(a2, (__n128 *)a3);
    if (!appended)
    {
      ot::Mle::Mle::Log(0, 0xBu, a3);
      if (!ot::Mle::Mle::IsRxOnWhenIdle(a1))
      {
        uint64_t v3 = ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollSender>(a1);
        ot::DataPollSender::SendFastPolls(v3, 8u);
      }
    }
  }

  if (appended) {
    ot::Message::Free(a2);
  }
}

uint64_t ot::Mle::Mle::DelayedResponseMetadata::RemoveFrom( ot::Mle::Mle::DelayedResponseMetadata *this, ot::Message *a2)
{
  __int16 Length = ot::Message::GetLength(a2);
  uint64_t result = ot::Message::SetLength(a2, Length - 20);
  if ((_DWORD)result) {
    __assert_rtn("RemoveFrom", "mle.cpp", 6162, "false");
  }
  return result;
}

uint64_t ot::Mle::Mle::TxMessage::AppendActiveTimestampTlv(ot::Mle::Mle::TxMessage *this)
{
  unsigned int v5 = 0;
  active = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::Message>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
  Timestamp = (void *)ot::MeshCoP::DatasetManager::GetTimestamp(active);
  if (Timestamp) {
    return ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)22,ot::MeshCoP::Timestamp>>(this, Timestamp);
  }
  return v5;
}

uint64_t ot::Mle::Mle::TxMessage::AppendPendingTimestampTlv(ot::Mle::Mle::TxMessage *this)
{
  unsigned int v5 = 0;
  uint64_t v1 = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::Message>::Get<ot::MeshCoP::PendingDatasetManager>(this);
  Timestamp = (ot::MeshCoP::Timestamp *)ot::MeshCoP::DatasetManager::GetTimestamp(v1);
  if (Timestamp && ot::MeshCoP::Timestamp::GetSeconds(Timestamp)) {
    return ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)23,ot::MeshCoP::Timestamp>>(this, Timestamp);
  }
  return v5;
}

uint64_t ot::Mle::Mle::TxMessage::SendTo(ot::Mle::Mle::TxMessage *this, __n128 *a2)
{
  uint64_t v19 = this;
  char v18 = a2;
  unsigned int v17 = 0;
  unsigned __int16 v16 = 0;
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)v14);
  ot::Ip6::MessageInfo::SetPeerAddr(v14, v18);
  uint64_t v2 = ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(this);
  ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Ip6::Netif::UnicastAddress *)(v2 + 1008));
  ot::Ip6::MessageInfo::SetSockAddr(v14, v3);
  ot::Ip6::MessageInfo::SetPeerPort((uint64_t)v14, 19788);
  ot::Ip6::MessageInfo::SetHopLimit((uint64_t)v14, 255);
  ot::Message::Read<unsigned char>(this, v16, &v15);
  IgnoreError();
  ++v16;
  if (v15) {
    goto LABEL_4;
  }
  ot::Message::Read<ot::Mle::Mle::SecurityHeader>(this, v16, v13);
  IgnoreError();
  __n128 v4 = (ot::KeyManager *)ot::GetProvider<ot::Message>::Get<ot::KeyManager>(this);
  unsigned int MleFrameCounter = ot::KeyManager::GetMleFrameCounter(v4);
  ot::Mle::Mle::SecurityHeader::SetFrameCounter((ot::Mle::Mle::SecurityHeader *)v13, MleFrameCounter);
  unsigned __int8 v6 = (ot::KeyManager *)ot::GetProvider<ot::Message>::Get<ot::KeyManager>(this);
  Currentint KeySequence = ot::KeyManager::GetCurrentKeySequence(v6);
  ot::Mle::Mle::SecurityHeader::SetKeyId((ot::Mle::Mle::SecurityHeader *)v13, CurrentKeySequence);
  ot::Message::Write<ot::Mle::Mle::SecurityHeader>(this, v16, v13);
  v16 += 10;
  uint64_t v8 = (ot::InstanceLocator *)ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(this);
  unsigned int v17 = ot::Mle::Mle::ProcessMessageSecurity( v8,  0,  this,  (ot::Ip6::MessageInfo *)v14,  v16,  (ot::Mle::Mle::SecurityHeader *)v13);
  if (!v17)
  {
    uint64_t v9 = (ot::KeyManager *)ot::GetProvider<ot::Message>::Get<ot::KeyManager>(this);
    ot::KeyManager::IncrementMleFrameCounter(v9);
LABEL_4:
    uint64_t v10 = ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(this);
    return ot::Ip6::Udp::Socket::SendTo( (ot::Ip6::Udp::Socket *)(v10 + 712),  this,  (const ot::Ip6::MessageInfo *)v14);
  }

  return v17;
}

void ot::Mle::Mle::Log(unsigned __int8 a1, unsigned __int8 a2, ot::Ip6::Address *a3)
{
}

BOOL ot::Mle::Mle::RemoveDelayedDataResponseMessage(ot::Mle::Mle *this)
{
  return ot::Mle::Mle::RemoveDelayedMessage((uint64_t)this, 9, 8u, 0LL);
}

BOOL ot::Mle::Mle::RemoveDelayedMessage(uint64_t a1, char a2, unsigned __int8 a3, const void *a4)
{
  uint64_t v18 = a1;
  char v17 = a2;
  unsigned __int8 v16 = a3;
  char v15 = a4;
  char v14 = (ot::MessageQueue *)(a1 + 400);
  v13[0] = ot::MessageQueue::begin((ot::MessageQueue *)(a1 + 400));
  v13[1] = v4;
  v12[0] = ot::MessageQueue::end(v14);
  v12[1] = v5;
  while (1)
  {
    BOOL result = ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v13, v12);
    if (!result) {
      break;
    }
    unsigned __int8 v11 = (ot::Message *)ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator*((uint64_t)v13);
    ot::Mle::Mle::DelayedResponseMetadata::ReadFrom((ot::Mle::Mle::DelayedResponseMetadata *)v10, v11);
    char SubType = ot::Message::GetSubType(v11);
    if (v17 == SubType && (!v15 || ot::Equatable<ot::Ip6::Address>::operator==(v10, v15)))
    {
      ot::MessageQueue::DequeueAndFree((ot::MessageQueue *)(a1 + 400), v11);
      ot::Mle::Mle::Log(3u, v16, (ot::Ip6::Address *)v10);
    }

    ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v13, v8);
  }

  return result;
}

BOOL ot::Mle::Mle::RemoveDelayedDataRequestMessage(ot::Mle::Mle *this, const ot::Ip6::Address *a2)
{
  return ot::Mle::Mle::RemoveDelayedMessage((uint64_t)this, 11, 7u, a2);
}

void ot::Mle::Mle::Challenge::GenerateRandom(ot::Mle::Mle::Challenge *this)
{
  *((_BYTE *)this + 8) = 8;
  ot::Random::Crypto::FillBuffer(this, (unsigned __int8 *)*((unsigned __int8 *)this + 8));
  IgnoreError();
}

ot::Buffer *ot::Mle::Mle::NewMleMessage(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v13 = a1;
  unsigned __int8 v12 = a2;
  int v11 = 0;
  ot::Message::Settings::Settings(v9, 0, 3);
  uint64_t v10 = ot::Ip6::Udp::Socket::NewMessage((ot::Ip6::Udp::Socket *)(a1 + 712), 0, (const ot::Message::Settings *)v9);
  if (v10)
  {
    char v7 = 0;
    char v8 = 6;
    unint64_t v3 = v12 - 7;
    if (v3 <= 0xA) {
      __asm { BR              X8 }
    }

    ot::Message::SetSubType(v10, v8);
    int v11 = ot::Message::Append<unsigned char>(v10, &v7);
    if (!v11)
    {
      if (v7
        || (ot::Mle::Mle::SecurityHeader::InitSecurityControl(v6),
            (int v11 = ot::Message::Append<ot::Mle::Mle::SecurityHeader>(v10, v6)) == 0))
      {
        unsigned __int8 v5 = v12;
        int v11 = ot::Message::Append<unsigned char>(v10, (char *)&v5);
      }
    }
  }

  else
  {
    int v11 = 3;
  }

  if (v11 && v10)
  {
    ot::Message::Free(v10);
    return 0LL;
  }

  return v10;
}

uint64_t ot::Mle::Mle::TxMessage::AppendModeTlv(uint64_t a1, char a2)
{
  char v5 = a2;
  unsigned __int8 v2 = ot::Mle::DeviceMode::Get((ot::Mle::DeviceMode *)&v5);
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)1,unsigned char>>(a1, v2);
}

uint64_t ot::Mle::Mle::TxMessage::AppendChallengeTlv( ot::Mle::Mle::TxMessage *this, const ot::Mle::Mle::Challenge *a2)
{
  return ot::Tlv::Append<ot::TlvInfo<(unsigned char)3>>(this, a2, *((_BYTE *)a2 + 8));
}

uint64_t ot::Mle::Mle::TxMessage::AppendScanMaskTlv(ot::Mle::Mle::TxMessage *this, unsigned __int8 a2)
{
  return ot::Tlv::Append<ot::Mle::ScanMaskTlv>((uint64_t)this, a2);
}

uint64_t ot::Mle::Mle::TxMessage::AppendVersionTlv(ot::Mle::Mle::TxMessage *this)
{
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)18,unsigned short>>((uint64_t)this, 4u);
}

void ot::Mle::Mle::RequestShorterChildIdRequest(ot::Mle::Mle *this)
{
  if (*((_BYTE *)this + 313) == 5)
  {
    *((_BYTE *)this + 708) = 1;
    ot::Mle::Mle::SendChildIdRequest(this);
    IgnoreError();
  }

void ot::Mle::Mle::HandleChildIdRequestTxDone(ot::Mle::Mle *this, ot::Message *a2)
{
  if ((ot::Message::GetTxSuccess(a2) & 1) != 0 && !ot::Mle::Mle::IsRxOnWhenIdle(this))
  {
    unsigned __int8 v2 = (ot::DataPollSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollSender>(this);
    ot::DataPollSender::SetAttachMode(v2, 1);
    unint64_t v3 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
    ot::MeshForwarder::SetRxOnWhenIdle(v3, 0);
  }

  if ((ot::Message::IsLinkSecurityEnabled(a2) & 1) != 0)
  {
    ot::Mle::Mle::RequestShorterChildIdRequest(this);
  }

uint64_t ot::Mle::Mle::TxMessage::AppendResponseTlv( ot::Mle::Mle::TxMessage *this, const ot::Mle::Mle::Challenge *a2)
{
  return ot::Tlv::Append<ot::TlvInfo<(unsigned char)4>>(this, a2, *((_BYTE *)a2 + 8));
}

uint64_t ot::Mle::Mle::TxMessage::AppendLinkFrameCounterTlv(ot::Mle::Mle::TxMessage *this)
{
  uint64_t v1 = (ot::KeyManager *)ot::GetProvider<ot::Message>::Get<ot::KeyManager>(this);
  Maximumint MacFrameCounter = ot::KeyManager::GetMaximumMacFrameCounter(v1);
  unsigned __int8 v2 = (ot::KeyManager *)ot::GetProvider<ot::Message>::Get<ot::KeyManager>(this);
  ot::KeyManager::LogMacFrameCounters(v2);
  unint64_t v3 = (ot::KeyManager *)ot::GetProvider<ot::Message>::Get<ot::KeyManager>(this);
  ot::KeyManager::SetAllMacFrameCounters(v3, MaximumMacFrameCounter, 1);
  ot::Message::GetSubType(this);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)&ot::Mle::kLogModuleName,  "Mle::TxMessage::AppendLinkFrameCounterTlv frameCounterTlv=%u, mleMsgSubType=%d",  v4,  v5,  v6,  v7,  v8,  v9,  MaximumMacFrameCounter);
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)5,unsigned int>>(this, MaximumMacFrameCounter);
}

uint64_t ot::Mle::Mle::TxMessage::AppendMleFrameCounterTlv(ot::Mle::Mle::TxMessage *this)
{
  uint64_t v1 = (ot::KeyManager *)ot::GetProvider<ot::Message>::Get<ot::KeyManager>(this);
  char MleFrameCounter = ot::KeyManager::GetMleFrameCounter(v1);
  ot::Message::GetSubType(this);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)&ot::Mle::kLogModuleName,  "Mle::TxMessage::AppendMleFrameCounterTlv mleFrameCounterTlv:%u mleMsgSubType=%d",  v2,  v3,  v4,  v5,  v6,  v7,  MleFrameCounter);
  uint64_t v8 = (ot::KeyManager *)ot::GetProvider<ot::Message>::Get<ot::KeyManager>(this);
  unsigned int v9 = ot::KeyManager::GetMleFrameCounter(v8);
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)8,unsigned int>>(this, v9);
}

uint64_t ot::Mle::Mle::TxMessage::AppendTimeoutTlv(ot::Mle::Mle::TxMessage *this, unsigned int a2)
{
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)2,unsigned int>>(this, a2);
}

uint64_t ot::Mle::Mle::TxMessage::AppendSupervisionIntervalTlv( ot::Mle::Mle::TxMessage *this, unsigned __int16 a2)
{
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)27,unsigned short>>((uint64_t)this, a2);
}

uint64_t ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(ot::Message *a1, char a2)
{
  v59 = a1;
  char v58 = a2;
  unsigned int appended = 0;
  char v53 = 0;
  unsigned __int16 Length = ot::Message::GetLength(a1);
  ot::Mle::Tlv::SetType(v56, 19);
  unsigned int appended = ot::Message::Append<ot::Mle::Tlv>(a1, v56);
  if (!appended)
  {
    uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(a1);
    ot::Mle::Mle::GetMeshLocal64(v2);
    unsigned int appended = ot::Mle::Mle::TxMessage::AppendCompressedAddressEntry(a1, 0, v3);
    if (!appended && v58 != 1)
    {
      ++v53;
      uint64_t v42 = (ot::Ip6::Netif *)ot::GetProvider<ot::Message>::Get<ot::ThreadNetif>(a1);
      uint64_t v4 = (ot::DuaManager *)ot::GetProvider<ot::Message>::Get<ot::DuaManager>(a1);
      ot::DuaManager::GetDomainUnicastAddress(v4);
      if (ot::Ip6::Netif::HasUnicastAddress(v42, v5))
      {
        uint64_t v41 = (ot::InstanceLocator *)ot::GetProvider<ot::Message>::Get<ot::NetworkData::Leader>(a1);
        uint64_t v6 = (ot::DuaManager *)ot::GetProvider<ot::Message>::Get<ot::DuaManager>(a1);
        ot::DuaManager::GetDomainUnicastAddress(v6);
        if (!ot::NetworkData::LeaderBase::GetContext(v41, v7, (ot::Ip6::Prefix *)v54))
        {
          unsigned __int8 v40 = v55;
          uint64_t v8 = (ot::DuaManager *)ot::GetProvider<ot::Message>::Get<ot::DuaManager>(a1);
          ot::DuaManager::GetDomainUnicastAddress(v8);
          unsigned int appended = ot::Mle::Mle::TxMessage::AppendCompressedAddressEntry(a1, v40, v9);
          if (appended) {
            goto LABEL_31;
          }
          ++v53;
        }
      }

      char v10 = (ot::Ip6::Netif *)ot::GetProvider<ot::Message>::Get<ot::ThreadNetif>(a1);
      ot::Ip6::Netif::GetUnicastAddresses(v10);
      v51[1] = v11;
      v51[0] = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::begin(v11);
      uint64_t v50 = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::end();
      while (ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator!=( v51,  &v50))
      {
        unsigned __int16 v49 = (ot::Ip6::Netif::UnicastAddress *)ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator*((uint64_t)v51);
        ot::Ip6::Netif::UnicastAddress::GetAddress(v49);
        if (!ot::Ip6::Address::IsLinkLocal(v12))
        {
          uint64_t v39 = (ot::Mle::Mle *)ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(a1);
          ot::Ip6::Netif::UnicastAddress::GetAddress(v49);
          if (!ot::Mle::Mle::IsRoutingLocator(v39, v13))
          {
            uint64_t v38 = (ot::Mle::Mle *)ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(a1);
            ot::Ip6::Netif::UnicastAddress::GetAddress(v49);
            if (!ot::Mle::Mle::IsAnycastLocator(v38, v14))
            {
              ot::Ip6::Netif::UnicastAddress::GetAddress(v49);
              char v37 = v15;
              unsigned __int8 v16 = (ot::Mle::Mle *)ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(a1);
              ot::Mle::Mle::GetMeshLocal64(v16);
              if (!ot::Equatable<ot::Ip6::Address>::operator==(v37, v17))
              {
                ot::Ip6::Netif::UnicastAddress::GetAddress(v49);
                v36 = v18;
                uint64_t v19 = (ot::DuaManager *)ot::GetProvider<ot::Message>::Get<ot::DuaManager>(a1);
                ot::DuaManager::GetDomainUnicastAddress(v19);
                if (!ot::Equatable<ot::Ip6::Address>::operator==(v36, v20))
                {
                  unsigned __int16 v35 = (ot::InstanceLocator *)ot::GetProvider<ot::Message>::Get<ot::NetworkData::Leader>(a1);
                  ot::Ip6::Netif::UnicastAddress::GetAddress(v49);
                  if (ot::NetworkData::LeaderBase::GetContext(v35, v21, (ot::Ip6::Prefix *)v54))
                  {
                    ot::Ip6::Netif::UnicastAddress::GetAddress(v49);
                    unsigned int appended = ot::Mle::Mle::TxMessage::AppendAddressEntry(a1, v23);
                    if (appended) {
                      goto LABEL_31;
                    }
                  }

                  else
                  {
                    unsigned __int8 v34 = v55;
                    ot::Ip6::Netif::UnicastAddress::GetAddress(v49);
                    unsigned int appended = ot::Mle::Mle::TxMessage::AppendCompressedAddressEntry(a1, v34, v22);
                    if (appended) {
                      goto LABEL_31;
                    }
                  }
                }
              }
            }
          }
        }

        ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator++(v51);
      }

      uint64_t v24 = (ot::Mle::Mle *)ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(a1);
      if (!ot::Mle::Mle::IsRxOnWhenIdle(v24)
        || (uint64_t v25 = (ot::Mle::Mle *)ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(a1),
            Parent = (ot::Neighbor *)ot::Mle::Mle::GetParent(v25),
            !ot::Neighbor::IsThreadVersion1p1(Parent)))
      {
        uint64_t v27 = ot::GetProvider<ot::Message>::Get<ot::ThreadNetif>(a1);
        v47[0] = ot::Ip6::Netif::IterateExternalMulticastAddresses(v27, 0);
        v47[1] = v28;
        __int16 v48 = (ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder *)v47;
        ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::begin( (ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder *)v47,  (uint64_t)v46);
        ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::end(v48, v45);
        while (ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator!=( v46,  v45))
        {
          v44 = (ot::Ip6::Netif::MulticastAddress *)ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator*((uint64_t)v46);
          uint64_t v29 = (ot::Mle::Mle *)ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(a1);
          if (!ot::Mle::Mle::IsRxOnWhenIdle(v29)
            || (ot::Ip6::Netif::MulticastAddress::GetAddress(v44), ot::Ip6::Address::IsMulticastLargerThanRealmLocal(v30)))
          {
            ot::Ip6::Netif::MulticastAddress::GetAddress(v44);
            unsigned int appended = ot::Mle::Mle::TxMessage::AppendAddressEntry(a1, v31);
            if (appended) {
              break;
            }
          }

          ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator++(v46);
        }
      }
    }
  }

uint64_t ot::Mle::Mle::TxMessage::AppendTlvRequestTlv( ot::Mle::Mle::TxMessage *this, unsigned __int8 *a2, unsigned __int8 a3)
{
  return ot::Tlv::Append<ot::TlvInfo<(unsigned char)13>>(this, a2, a3);
}

uint64_t ot::Mle::Mle::SendDataRequest(ot::Mle::Mle *this, const ot::Ip6::Address *a2)
{
  return ot::Mle::Mle::SendDataRequestAfterDelay(this, a2, 0);
}

uint64_t ot::Mle::Mle::SendDataRequestAfterDelay( ot::Mle::Mle *this, const ot::Ip6::Address *a2, unsigned __int16 a3)
{
  if ((*((_BYTE *)this + 40) & 2) != 0) {
    unsigned __int8 v3 = 2;
  }
  else {
    unsigned __int8 v3 = 1;
  }
  return ot::Mle::Mle::SendDataRequest( this,  a2,  ot::Mle::Mle::SendDataRequestAfterDelay(ot::Ip6::Address const&,unsigned short)::kTlvs,  v3,  a3,  0LL);
}

uint64_t ot::Mle::Mle::SendDataRequest( ot::Mle::Mle *a1, const ot::Ip6::Address *a2, unsigned __int8 *a3, unsigned __int8 a4, unsigned __int16 a5, uint64_t a6)
{
  char v10 = ot::Mle::Mle::NewMleMessage((uint64_t)a1, 7u);
  if (v10)
  {
    unsigned int appended = ot::Mle::Mle::TxMessage::AppendTlvRequestTlv(v10, a3, a4);
    if (!appended)
    {
      if (!a6
        || (uint64_t v6 = ot::GetProvider<ot::InstanceLocator>::Get<ot::LinkMetrics::Initiator>(a1),
            (unsigned int appended = ot::LinkMetrics::Initiator::AppendLinkMetricsQueryTlv(v6, v10, a6)) == 0))
      {
        if (a5)
        {
          unsigned int appended = ot::Mle::Mle::TxMessage::SendAfterDelay(v10, a2, a5);
          if (!appended) {
            ot::Mle::Mle::Log(2u, 7u, a2);
          }
        }

        else
        {
          unsigned int appended = ot::Mle::Mle::TxMessage::AppendActiveTimestampTlv(v10);
          if (!appended)
          {
            unsigned int appended = ot::Mle::Mle::TxMessage::AppendPendingTimestampTlv(v10);
            if (!appended)
            {
              unsigned int appended = ot::Mle::Mle::TxMessage::SendTo(v10, (__n128 *)a2);
              if (!appended)
              {
                ot::Mle::Mle::Log(0, 7u, a2);
                if (!ot::Mle::Mle::IsRxOnWhenIdle(a1))
                {
                  uint64_t v7 = ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollSender>(a1);
                  ot::DataPollSender::SendFastPolls(v7, 8u);
                }
              }
            }
          }
        }
      }
    }
  }

  else
  {
    unsigned int appended = 3;
  }

  if (appended && v10) {
    ot::Message::Free(v10);
  }
  if (ot::Mle::Mle::IsChild(a1) && !ot::Mle::Mle::IsRxOnWhenIdle(a1))
  {
    *((_BYTE *)a1 + 707) = 1;
    if (!*((_BYTE *)a1 + 705)) {
      ot::Mle::Mle::ScheduleMessageTransmissionTimer(a1);
    }
  }

  return appended;
}

uint64_t ot::Mle::Mle::SendDataRequestForLinkMetricsReport( ot::Mle::Mle *a1, const ot::Ip6::Address *a2, uint64_t a3)
{
  return ot::Mle::Mle::SendDataRequest( a1,  a2,  ot::Mle::Mle::SendDataRequestForLinkMetricsReport(ot::Ip6::Address const&,ot::LinkMetrics::Initiator::QueryInfo const&)::kTlvs,  1u,  0,  a3);
}

uint64_t ot::Mle::Mle::TxMessage::SendAfterDelay( ot::Mle::Mle::TxMessage *this, const ot::Ip6::Address *a2, unsigned __int16 a3)
{
  char v14 = this;
  uint64_t v13 = a2;
  unsigned __int16 v12 = a3;
  unsigned int v11 = 0;
  int Now = ot::TimerMilli::GetNow(this);
  int v8 = ot::Time::operator+(&Now, v12);
  int v10 = v8;
  __int128 v9 = *(_OWORD *)v13;
  unsigned int v11 = ot::Mle::Mle::DelayedResponseMetadata::AppendTo((ot::Mle::Mle::DelayedResponseMetadata *)&v9, this);
  if (!v11)
  {
    uint64_t v3 = ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(this);
    ot::MessageQueue::Enqueue((ot::MessageQueue *)(v3 + 400), this);
    uint64_t v4 = ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(this);
    ot::TimerMilli::FireAtIfEarlier((int *)(v4 + 344), v10);
  }

  return v11;
}

BOOL ot::Notifier::IsPending(ot::Notifier *this)
{
  return !ot::Events::IsEmpty(this);
}

{
  return __ZNK2ot8Notifier9IsPendingEv(this);
}

uint64_t ot::Mle::Mle::SendChildUpdateRequest(_BYTE *a1, char a2)
{
  uint64_t v21 = a1;
  char v20 = a2;
  unsigned int appended = 0;
  char v17 = 0LL;
  if (ot::Neighbor::IsStateValidOrRestoring((ot::Neighbor *)(a1 + 48)))
  {
    a1[705] = 2;
    ot::Mle::Mle::ScheduleMessageTransmissionTimer((ot::Mle::Mle *)a1);
    char v17 = ot::Mle::Mle::NewMleMessage((uint64_t)a1, 0xDu);
    if (v17)
    {
      unsigned int appended = ot::Mle::Mle::TxMessage::AppendModeTlv((uint64_t)v17, a1[312]);
      if (!appended)
      {
        if (v20 != 1 && !ot::Mle::Mle::IsDetached((ot::Mle::Mle *)a1)
          || (ot::Mle::Mle::Challenge::GenerateRandom((ot::Mle::Mle::Challenge *)(a1 + 408)),
              (unsigned int appended = ot::Mle::Mle::TxMessage::AppendChallengeTlv(v17, (const ot::Mle::Mle::Challenge *)(a1 + 408))) == 0))
        {
          unint64_t v15 = a1[41];
          if (v15 <= 4) {
            __asm { BR              X8 }
          }

          if (ot::Mle::Mle::IsFullThreadDevice((ot::Mle::Mle *)a1)
            || (unsigned int appended = ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(v17, 0)) == 0)
          {
            ExtAddress = (const ot::Mac::ExtAddress *)ot::Neighbor::GetExtAddress((ot::Neighbor *)(a1 + 48));
            ot::Ip6::Address::SetToLinkLocalAddress((ot::Ip6::Address *)&v18, ExtAddress);
            unsigned int appended = ot::Mle::Mle::TxMessage::SendTo(v17, &v18);
            if (!appended)
            {
              ot::Mle::Mle::Log(0, 5u, (ot::Ip6::Address *)&v18);
              if (ot::Mle::Mle::IsRxOnWhenIdle((ot::Mle::Mle *)a1))
              {
                unsigned __int16 v12 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
                ot::MeshForwarder::SetRxOnWhenIdle(v12, 1);
              }

              else
              {
                __int128 v9 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
                ot::MeshForwarder::SetRxOnWhenIdle(v9, 0);
                char v14 = (ot::DataPollSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollSender>((ot::InstanceLocator *)a1);
                int v10 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1);
                BOOL IsCslEnabled = ot::Mac::Mac::IsCslEnabled(v10);
                ot::DataPollSender::SetAttachMode(v14, !IsCslEnabled);
              }
            }
          }
        }
      }
    }

    else
    {
      unsigned int appended = 3;
    }
  }

  else
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mle::kLogModuleName,  "No valid parent when sending Child Update Request requestMode=%d",  v2,  v3,  v4,  v5,  v6,  v7,  v20);
    ot::Mle::Mle::BecomeDetached((ot::Mle::Mle *)a1);
    IgnoreError();
  }

  if (appended && v17) {
    ot::Message::Free(v17);
  }
  return appended;
}

uint64_t ot::Mle::Mle::TxMessage::AppendSourceAddressTlv(ot::Mle::Mle::TxMessage *this)
{
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(this);
  unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16(v1);
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)0,unsigned short>>((uint64_t)this, Rloc16);
}

uint64_t ot::Mle::Mle::TxMessage::AppendLeaderDataTlv(ot::Mle::Mle::TxMessage *this)
{
  unsigned int v11 = this;
  uint64_t v7 = ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(this);
  uint64_t v1 = ot::GetProvider<ot::Message>::Get<ot::NetworkData::Leader>(this);
  char Version = ot::NetworkData::LeaderBase::GetVersion(v1, 0);
  ot::Mle::LeaderData::SetDataVersion(v7 + 32, Version);
  uint64_t v8 = ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(this);
  uint64_t v3 = ot::GetProvider<ot::Message>::Get<ot::NetworkData::Leader>(this);
  char v4 = ot::NetworkData::LeaderBase::GetVersion(v3, 1);
  ot::Mle::LeaderData::SetStableDataVersion(v8 + 32, v4);
  ot::Mle::LeaderDataTlv::Init((ot::Mle::LeaderDataTlv *)v10);
  uint64_t v5 = ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(this);
  ot::Mle::LeaderDataTlv::Set((ot::Mle::LeaderDataTlv *)v10, (const ot::Mle::LeaderData *)(v5 + 32));
  return ot::Tlv::AppendTo((ot::Tlv *)v10, this);
}

uint64_t ot::Mle::Mle::TxMessage::AppendCslChannelTlv(ot::Mle::Mle::TxMessage *this)
{
  uint64_t v6 = this;
  ot::Mle::CslChannelTlv::Init((ot::Mle::CslChannelTlv *)v5);
  ot::Mle::CslChannelTlv::SetChannelPage((uint64_t)v5, 0);
  uint64_t v1 = (ot::Mac::Mac *)ot::GetProvider<ot::Message>::Get<ot::Mac::Mac>(this);
  unsigned __int8 CslChannel = ot::Mac::Mac::GetCslChannel(v1);
  ot::Mle::CslChannelTlv::SetChannel((ot::Mle::CslChannelTlv *)v5, CslChannel);
  return ot::Message::Append<ot::Mle::CslChannelTlv>(this, v5);
}

uint64_t ot::Mle::Mle::TxMessage::AppendCslTimeoutTlv(ot::Mle::Mle::TxMessage *this)
{
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(this);
  unsigned int CslTimeout = ot::Mle::Mle::GetCslTimeout(v1);
  if (!CslTimeout)
  {
    uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(this);
    unsigned int CslTimeout = ot::Mle::Mle::GetTimeout(v2);
  }

  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)85,unsigned int>>(this, CslTimeout);
}

uint64_t ot::Mle::Mle::SendChildUpdateResponse( ot::Mle::Mle *this, const ot::Mle::Mle::TlvList *a2, const ot::Mle::Mle::Challenge *a3)
{
  uint64_t v19 = this;
  __n128 v18 = a2;
  char v17 = a3;
  unsigned int appended = 0;
  char v13 = 0;
  char v14 = ot::Mle::Mle::NewMleMessage((uint64_t)this, 0xEu);
  if (v14)
  {
    unsigned int appended = ot::Mle::Mle::TxMessage::AppendSourceAddressTlv(v14);
    if (!appended)
    {
      unsigned int appended = ot::Mle::Mle::TxMessage::AppendLeaderDataTlv(v14);
      if (!appended)
      {
        ot::Array<unsigned char,(unsigned short)32,unsigned char>::begin();
        unsigned __int16 v12 = v3;
        uint64_t v11 = ot::Array<unsigned char,(unsigned short)32,unsigned char>::end((uint64_t)v18);
        while (v12 != (unsigned __int8 *)v11)
        {
          int v9 = *v12;
          switch(v9)
          {
            case 2:
              unsigned int appended = ot::Mle::Mle::TxMessage::AppendTimeoutTlv(v14, *((_DWORD *)this + 196));
              if (appended) {
                goto LABEL_39;
              }
              break;
            case 4:
              unsigned int appended = ot::Mle::Mle::TxMessage::AppendResponseTlv(v14, v17);
              if (appended) {
                goto LABEL_39;
              }
              break;
            case 5:
              unsigned int appended = ot::Mle::Mle::TxMessage::AppendLinkFrameCounterTlv(v14);
              if (appended) {
                goto LABEL_39;
              }
              break;
            case 8:
              unsigned int appended = ot::Mle::Mle::TxMessage::AppendMleFrameCounterTlv(v14);
              if (appended) {
                goto LABEL_39;
              }
              break;
            case 17:
              unsigned int appended = ot::Mle::Mle::TxMessage::AppendStatusTlv((uint64_t)v14, 1u);
              if (appended) {
                goto LABEL_39;
              }
              break;
            case 19:
              if (!ot::Mle::Mle::IsFullThreadDevice(this))
              {
                unsigned int appended = ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(v14, 1);
                if (appended) {
                  goto LABEL_39;
                }
                char v13 = 1;
              }

              break;
            case 27:
              char v4 = (ot::SupervisionListener *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SupervisionListener>(this);
              unsigned __int16 CurrentInterval = ot::SupervisionListener::GetCurrentInterval(v4);
              unsigned int appended = ot::Mle::Mle::TxMessage::AppendSupervisionIntervalTlv(v14, CurrentInterval);
              if (appended) {
                goto LABEL_39;
              }
              break;
            case 85:
              uint64_t v6 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
              if (ot::Mac::Mac::IsCslEnabled(v6))
              {
                unsigned int appended = ot::Mle::Mle::TxMessage::AppendCslTimeoutTlv(v14);
                if (appended) {
                  goto LABEL_39;
                }
              }

              break;
          }

          ++v12;
        }

        ExtAddress = (const ot::Mac::ExtAddress *)ot::Neighbor::GetExtAddress((ot::Mle::Mle *)((char *)this + 48));
        ot::Ip6::Address::SetToLinkLocalAddress((ot::Ip6::Address *)&v15, ExtAddress);
        unsigned int appended = ot::Mle::Mle::TxMessage::SendTo(v14, &v15);
        if (!appended)
        {
          ot::Mle::Mle::Log(0, 6u, (ot::Ip6::Address *)&v15);
          if ((v13 & 1) != 0 && ot::Mle::Mle::HasUnregisteredAddress(this))
          {
            ot::Mle::Mle::SendChildUpdateRequest(this);
            IgnoreError();
          }
        }
      }
    }
  }

  else
  {
    unsigned int appended = 3;
  }

uint64_t ot::Array<unsigned char,(unsigned short)32,unsigned char>::end(uint64_t a1)
{
  return a1 + *(unsigned __int8 *)(a1 + 32);
}

{
  return __ZNK2ot5ArrayIhLt32EhE3endEv(a1);
}

uint64_t ot::Mle::Mle::TxMessage::AppendStatusTlv(uint64_t a1, unsigned __int8 a2)
{
  return ot::Tlv::Append<ot::Mle::StatusTlv>(a1, a2);
}

void ot::Mle::Mle::SendAnnounce(ot::InstanceLocator *a1, unsigned __int8 a2, __n128 *a3, char a4)
{
  uint64_t v24 = a1;
  unsigned __int8 v23 = a2;
  uint64_t v22 = a3;
  char v21 = a4;
  int appended = 0;
  char v17 = 0LL;
  char v4 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
  SupportedChannelMask = (ot::Mac::ChannelMask *)ot::Mac::Mac::GetSupportedChannelMask(v4);
  if (!ot::Mac::ChannelMask::ContainsChannel(SupportedChannelMask, v23))
  {
    int appended = 7;
    goto LABEL_14;
  }

  char v17 = ot::Mle::Mle::NewMleMessage((uint64_t)a1, 0xFu);
  if (!v17)
  {
    int appended = 3;
    goto LABEL_14;
  }

  ot::Message::SetLinkSecurityEnabled(v17, 1);
  ot::Message::SetChannel(v17, v23);
  ot::Mle::ChannelTlv::Init((ot::Mle::ChannelTlv *)v19);
  ot::Mle::ChannelTlv::SetChannelPage((uint64_t)v19, 0);
  uint64_t v6 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
  unsigned __int8 PanChannel = ot::Mac::Mac::GetPanChannel(v6);
  ot::Mle::ChannelTlv::SetChannel((ot::Mle::ChannelTlv *)v19, PanChannel);
  int appended = ot::Tlv::AppendTo((ot::Tlv *)v19, v17);
  if (!appended)
  {
    if (v21)
    {
      if (v21 == 1)
      {
        ot::Clearable<ot::MeshCoP::Timestamp>::Clear(&v18);
        ot::MeshCoP::Timestamp::SetAuthoritative((ot::MeshCoP::Timestamp *)&v18, 1);
        int appended = ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)22,ot::MeshCoP::Timestamp>>(v17, &v18);
        if (appended) {
          goto LABEL_14;
        }
      }
    }

    else
    {
      int appended = ot::Mle::Mle::TxMessage::AppendActiveTimestampTlv(v17);
      if (appended) {
        goto LABEL_14;
      }
    }

    uint64_t v8 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
    unsigned __int16 PanId = ot::Mac::Mac::GetPanId(v8);
    int appended = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)21,unsigned short>>((uint64_t)v17, PanId);
    if (!appended)
    {
      int appended = ot::Mle::Mle::TxMessage::SendTo(v17, v22);
      if (!appended) {
        ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)&ot::Mle::kLogModuleName,  "Send Announce on channel %d",  v10,  v11,  v12,  v13,  v14,  v15,  v23);
      }
    }
  }

uint64_t ot::Message::SetChannel(ot::Message *this, char a2)
{
  uint64_t result = ot::Buffer::GetMetadata(this);
  *(_BYTE *)(result + 54) = a2;
  return result;
}

{
  return __ZN2ot7Message10SetChannelEh(this, a2);
}

uint64_t ot::Mle::ChannelTlv::Init(ot::Mle::ChannelTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 3);
}

{
  return __ZN2ot3Mle10ChannelTlv4InitEv(this);
}

uint64_t ot::Mle::ChannelTlv::SetChannelPage(uint64_t this, char a2)
{
  *(_BYTE *)(this + 2) = a2;
  return this;
}

{
  return __ZN2ot3Mle10ChannelTlv14SetChannelPageEh(this, a2);
}

uint64_t ot::Mle::ChannelTlv::SetChannel(ot::Mle::ChannelTlv *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *(_WORD *)((char *)this + 3) = result;
  return result;
}

{
  return __ZN2ot3Mle10ChannelTlv10SetChannelEt(this, a2);
}

uint64_t ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)22,ot::MeshCoP::Timestamp>>(ot::Tlv *a1, void *a2)
{
  return ot::Tlv::AppendTlv(a1, (ot::Message *)0x16, a2, (const void *)8);
}

{
  return __ZN2ot3Tlv6AppendINS_13SimpleTlvInfoILh22ENS_7MeshCoP9TimestampEEEEE7otErrorRNS_7MessageERKNT_9ValueTypeE( a1,  a2);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)21,unsigned short>>(uint64_t a1, unsigned __int16 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned short>(a1, 21, a2);
}

{
  return __ZN2ot3Tlv6AppendINS_11UintTlvInfoILh21EtEEEE7otErrorRNS_7MessageENT_13UintValueTypeE(a1, a2);
}

uint64_t ot::Mle::Mle::SendLinkMetricsManagementResponse(uint64_t a1, __n128 *a2, char a3)
{
  uint64_t v11 = a1;
  uint64_t v10 = a2;
  char v9 = a3;
  unsigned int v8 = 0;
  uint64_t v7 = ot::Mle::Mle::NewMleMessage(a1, 0x13u);
  if (v7)
  {
    ot::Mle::Tlv::SetType(v6, 88);
    ot::Tlv::SetType(v5, 5);
    ot::Tlv::SetLength((uint64_t)v5, 1);
    char Size = ot::Tlv::GetSize((ot::Tlv *)v5);
    ot::Tlv::SetLength((uint64_t)v6, Size);
    unsigned int v8 = ot::Message::Append<ot::Mle::Tlv>(v7, v6);
    if (!v8)
    {
      unsigned int v8 = ot::Message::Append<ot::Tlv>(v7, v5);
      if (!v8)
      {
        unsigned int v8 = ot::Message::Append<ot::LinkMetrics::Status>(v7, &v9);
        if (!v8) {
          unsigned int v8 = ot::Mle::Mle::TxMessage::SendTo(v7, v10);
        }
      }
    }
  }

  else
  {
    unsigned int v8 = 3;
  }

  if (v8 && v7) {
    ot::Message::Free(v7);
  }
  return v8;
}

uint64_t ot::Message::Append<ot::LinkMetrics::Status>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 1u);
}

{
  return __ZN2ot7Message6AppendINS_11LinkMetrics6StatusEEE7otErrorRKT_(a1, a2);
}

uint64_t ot::Mle::Mle::SendLinkProbe(ot::Mle::Mle *this, __n128 *a2, char a3, char *a4, unsigned __int8 a5)
{
  uint64_t v13 = this;
  uint64_t v12 = a2;
  char v11 = a3;
  uint64_t v10 = a4;
  unsigned __int8 v9 = a5;
  unsigned int appended = 0;
  uint64_t v7 = ot::Mle::Mle::NewMleMessage((uint64_t)this, 0x14u);
  if (v7)
  {
    ot::Mle::Tlv::SetType(v6, 90);
    ot::Tlv::SetLength((uint64_t)v6, v9 + 1);
    unsigned int appended = ot::Message::Append<ot::Mle::Tlv>(v7, v6);
    if (!appended)
    {
      unsigned int appended = ot::Message::Append<unsigned char>(v7, &v11);
      if (!appended)
      {
        unsigned int appended = ot::Message::AppendBytes(v7, v10, v9);
        if (!appended) {
          unsigned int appended = ot::Mle::Mle::TxMessage::SendTo(v7, v12);
        }
      }
    }
  }

  else
  {
    unsigned int appended = 3;
  }

  if (appended && v7) {
    ot::Message::Free(v7);
  }
  return appended;
}

uint64_t ot::Mle::Mle::ProcessMessageSecurity( ot::InstanceLocator *a1, char a2, ot::Message *a3, ot::Ip6::MessageInfo *a4, unsigned __int16 a5, ot::Mle::Mle::SecurityHeader *a6)
{
  unsigned __int16 v35 = a1;
  char v34 = a2;
  uint64_t v33 = a3;
  char v32 = a4;
  unsigned __int16 v31 = a5;
  char v30 = a6;
  int v29 = 0;
  ot::Crypto::AesCcm::AesCcm((ot::Crypto::AesCcm *)v38);
  unsigned __int16 v26 = ot::Message::GetLength(v33) - v31;
  ot::Ip6::MessageInfo::GetSockAddr(v32);
  uint64_t v25 = v6;
  ot::Ip6::MessageInfo::GetPeerAddr(v32);
  uint64_t v24 = v7;
  if (v34 && v34 == 1)
  {
    ot::Ip6::MessageInfo::GetPeerAddr(v32);
    uint64_t v25 = v8;
    ot::Ip6::MessageInfo::GetSockAddr(v32);
    uint64_t v24 = v9;
    if ((unint64_t)v31 + 5 > (unsigned __int16)ot::Message::GetLength(v33))
    {
      int v29 = 6;
      goto LABEL_16;
    }

    v26 -= 4;
  }

  Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v25);
  ot::Ip6::InterfaceIdentifier::ConvertToExtAddress(Iid, (ot::Mac::ExtAddress *)v36);
  FrameCounter = (const ot::Mac::ExtAddress *)ot::Mle::Mle::SecurityHeader::GetFrameCounter(v30);
  ot::Crypto::AesCcm::GenerateNonce((ot::Crypto::AesCcm *)v36, FrameCounter, (unsigned __int8 *)5, (uint64_t)v37, v12);
  unsigned int KeyId = ot::Mle::Mle::SecurityHeader::GetKeyId(v30);
  uint64_t v13 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(a1);
  if (KeyId == ot::KeyManager::GetCurrentKeySequence(v13))
  {
    uint64_t v14 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(a1);
    CurrentMleKey = (ot::Mac::KeyMaterial *)ot::KeyManager::GetCurrentMleKey(v14);
  }

  else
  {
    uint64_t v15 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(a1);
    CurrentMleKey = (ot::Mac::KeyMaterial *)ot::KeyManager::GetTemporaryMleKey(v15, KeyId);
  }

  ot::Crypto::AesCcm::SetKey((ot::Crypto::AesCcm *)v38, CurrentMleKey);
  ot::Crypto::AesCcm::Init((ot::Crypto::AesCcm *)v38, 0x2Au, v26, 4u, v37, 0xDu);
  ot::Crypto::AesCcm::Header<ot::Ip6::Address>((ot::Crypto::AesEcb *)v38, v25);
  ot::Crypto::AesCcm::Header<ot::Ip6::Address>((ot::Crypto::AesEcb *)v38, v24);
  ot::Crypto::AesCcm::Header<ot::Mle::Mle::SecurityHeader>((ot::Crypto::AesEcb *)v38, v30);
  ot::Crypto::AesCcm::Payload((uint64_t)v38, v33, v31, v26, v34);
  ot::Crypto::AesCcm::Finalize((ot::Crypto::AesCcm *)v38, v28);
  if (v34)
  {
    char v21 = v33;
    __int16 Length = ot::Message::GetLength(v33);
    if (ot::Message::Compare<unsigned char [4]>(v21, Length - 4, (const unsigned __int8 *)v28))
    {
      char v20 = v33;
      __int16 v17 = ot::Message::GetLength(v33);
      ot::Message::SetLength(v20, v17 - 4);
      IgnoreError();
    }

    else
    {
      int v29 = 8;
    }
  }

  else
  {
    int v29 = ot::Message::Append<unsigned char [4]>(v33, v28);
  }

uint64_t ot::Mle::Mle::SecurityHeader::GetFrameCounter(ot::Mle::Mle::SecurityHeader *this)
{
  return ot::Encoding::LittleEndian::HostSwap32(*(unsigned int *)((char *)this + 1));
}

{
  return __ZNK2ot3Mle3Mle14SecurityHeader15GetFrameCounterEv(this);
}

uint64_t ot::Mle::Mle::SecurityHeader::GetKeyId(ot::Mle::Mle::SecurityHeader *this)
{
  return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*(unsigned int *)((char *)this + 5));
}

{
  return __ZNK2ot3Mle3Mle14SecurityHeader8GetKeyIdEv(this);
}

uint64_t ot::KeyManager::GetCurrentMleKey(ot::KeyManager *this)
{
  return (uint64_t)this + 20;
}

{
  return __ZNK2ot10KeyManager16GetCurrentMleKeyEv(this);
}

ot::Crypto::AesEcb *ot::Crypto::AesCcm::Header<ot::Ip6::Address>(ot::Crypto::AesEcb *a1, _BYTE *a2)
{
  return ot::Crypto::AesCcm::Header(a1, a2, 0x10u);
}

{
  return __ZN2ot6Crypto6AesCcm6HeaderINS_3Ip67AddressEEEvRKT_(a1, a2);
}

ot::Crypto::AesEcb *ot::Crypto::AesCcm::Header<ot::Mle::Mle::SecurityHeader>( ot::Crypto::AesEcb *a1, _BYTE *a2)
{
  return ot::Crypto::AesCcm::Header(a1, a2, 0xAu);
}

{
  return __ZN2ot6Crypto6AesCcm6HeaderINS_3Mle3Mle14SecurityHeaderEEEvRKT_(a1, a2);
}

uint64_t ot::Message::Append<unsigned char [4]>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 4u);
}

{
  return __ZN2ot7Message6AppendIA4_hEE7otErrorRKT_(a1, a2);
}

BOOL ot::Message::Compare<unsigned char [4]>( ot::Message *a1, unsigned __int16 a2, const unsigned __int8 *a3)
{
  return ot::Message::CompareBytes(a1, a2, a3, 4u, 0LL);
}

{
  return __ZNK2ot7Message7CompareIA4_hEEbtRKT_(a1, a2, a3);
}

uint64_t ot::Mle::Mle::HandleUdpReceive(ot::Mle::Mle *this, ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  unint64_t v66 = this;
  v65 = a2;
  unint64_t v64 = a3;
  int v63 = 0;
  ot::Mle::Mle::RxInfo::RxInfo((ot::Mle::Mle::RxInfo *)v59, a2, a3);
  __int16 Length = ot::Message::GetLength(v65);
  unsigned __int8 v53 = -1;
  ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mle::kLogModuleName,  "Receive MLE message",  v3,  v4,  v5,  v6,  v7,  v8,  v36);
  if (!ot::Ip6::MessageInfo::GetLinkInfo(v64)) {
    goto LABEL_44;
  }
  if (ot::Ip6::MessageInfo::GetHopLimit(v64) != 255)
  {
    int v63 = 6;
    goto LABEL_44;
  }

  v51 = v65;
  unsigned __int16 Offset = ot::Message::GetOffset(v65);
  int v63 = ot::Message::Read<unsigned char>(v51, Offset, (char *)&v58);
  if (!v63)
  {
    ot::Message::MoveOffset(v65, 1);
    if (v58 == 255)
    {
      uint64_t v50 = v65;
      unsigned __int16 v10 = ot::Message::GetOffset(v65);
      int v63 = ot::Message::Read<unsigned char>(v50, v10, (char *)&v53);
      if (!v63)
      {
        ot::Message::MoveOffset(v65, 1);
        if (v53 == 16)
        {
          char v11 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
          ot::Mle::MleRouter::HandleDiscoveryRequest(v11, v59);
        }

        else if (v53 == 17)
        {
          uint64_t v12 = (ot::Mle::DiscoverScanner *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::DiscoverScanner>(this);
          ot::Mle::DiscoverScanner::HandleDiscoveryResponse(v12, v59);
        }
      }

      goto LABEL_44;
    }

    if (ot::Mle::Mle::IsDisabled(this))
    {
      int v63 = 13;
      goto LABEL_44;
    }

    if (v58)
    {
      int v63 = 6;
      goto LABEL_44;
    }

    unsigned __int16 v49 = v65;
    unsigned __int16 v13 = ot::Message::GetOffset(v65);
    int v63 = ot::Message::Read<ot::Mle::Mle::SecurityHeader>(v49, v13, v57);
    if (!v63)
    {
      ot::Message::MoveOffset(v65, 10);
      if (!ot::Mle::Mle::SecurityHeader::IsSecurityControlValid((ot::Mle::Mle::SecurityHeader *)v57))
      {
        int v63 = 6;
        goto LABEL_44;
      }

      unsigned int KeyId = ot::Mle::Mle::SecurityHeader::GetKeyId((ot::Mle::Mle::SecurityHeader *)v57);
      unsigned int FrameCounter = ot::Mle::Mle::SecurityHeader::GetFrameCounter((ot::Mle::Mle::SecurityHeader *)v57);
      unsigned __int8 v47 = v65;
      __int16 v48 = v64;
      unsigned __int16 v14 = ot::Message::GetOffset(v65);
      int v63 = ot::Mle::Mle::ProcessMessageSecurity(this, 1, v47, v48, v14, (ot::Mle::Mle::SecurityHeader *)v57);
      if (!v63)
      {
        unsigned __int16 v46 = v65;
        unsigned __int16 v15 = ot::Message::GetOffset(v65);
        ot::Message::Read<unsigned char>(v46, v15, (char *)&v53);
        IgnoreError();
        ot::Message::MoveOffset(v65, 1);
        ot::Ip6::MessageInfo::GetPeerAddr(v64);
        Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v16);
        ot::Ip6::InterfaceIdentifier::ConvertToExtAddress(Iid, (ot::Mac::ExtAddress *)v67);
        if (v53 == 12) {
          Parent = (ot::RadioSelector::NeighborInfo *)ot::NeighborTable::FindParent( (ot::Mle::Mle *)((char *)this + 304),  (uint64_t)v67,  1);
        }
        else {
          Parent = (ot::RadioSelector::NeighborInfo *)ot::NeighborTable::FindNeighbor( (ot::Mle::Mle *)((char *)this + 304),  (uint64_t)v67,  1);
        }
        if (Parent && ot::Neighbor::IsStateValid(Parent))
        {
          int v44 = KeyId;
          if (v44 == ot::Neighbor::GetKeySequence(Parent))
          {
            unsigned int v43 = FrameCounter + 1;
            if (v43 == ot::Neighbor::GetMleFrameCounter(Parent))
            {
              if ((ot::Message::IsRadioTypeSet(v65) & 1) == 0) {
                __assert_rtn("HandleUdpReceive", "mle.cpp", 3626, "aMessage.IsRadioTypeSet()");
              }
              uint64_t v42 = ot::GetProvider<ot::InstanceLocator>::Get<ot::RadioSelector>(this);
              unsigned __int8 RadioType = ot::Message::GetRadioType(v65);
              ot::RadioSelector::UpdateOnReceive(v42, Parent, RadioType, 1);
              goto LABEL_44;
            }

            unsigned int v41 = FrameCounter;
            if (v41 < ot::Neighbor::GetMleFrameCounter(Parent))
            {
              char v40 = FrameCounter;
              ot::Neighbor::GetMleFrameCounter(Parent);
              ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mle::kLogModuleName,  "Frame counter (%d) smaller than expected (%d) mle-command(%u)",  v19,  v20,  v21,  v22,  v23,  v24,  v40);
              int v63 = 29;
              goto LABEL_44;
            }
          }

          else
          {
            unsigned int v39 = KeyId;
            if (v39 <= ot::Neighbor::GetKeySequence(Parent))
            {
              char v38 = KeyId;
              ot::Neighbor::GetKeySequence(Parent);
              ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mle::kLogModuleName,  "Key sequence (%d) smaller than expected (%d) mle-command(%u)",  v25,  v26,  v27,  v28,  v29,  v30,  v38);
              int v63 = 29;
              goto LABEL_44;
            }

            ot::Neighbor::SetKeySequence((uint64_t)Parent, KeyId);
            LinkFrameCounters = (ot::Mac::LinkFrameCounters *)ot::Neighbor::GetLinkFrameCounters(Parent);
            ot::Mac::LinkFrameCounters::Reset(LinkFrameCounters);
            ot::Neighbor::SetLinkAckFrameCounter((uint64_t)Parent, 0);
          }

          ot::Neighbor::SetMleFrameCounter((uint64_t)Parent, FrameCounter + 1);
        }

        if (Parent)
        {
          if ((ot::Message::IsRadioTypeSet(v65) & 1) == 0) {
            __assert_rtn("HandleUdpReceive", "mle.cpp", 3674, "aMessage.IsRadioTypeSet()");
          }
          uint64_t v37 = ot::GetProvider<ot::InstanceLocator>::Get<ot::RadioSelector>(this);
          unsigned __int8 v32 = ot::Message::GetRadioType(v65);
          ot::RadioSelector::UpdateOnReceive(v37, Parent, v32, 0);
        }

        int v61 = KeyId;
        unsigned int v60 = FrameCounter;
        char v62 = Parent;
        if (v53 <= 0x14uLL) {
          __asm { BR              X8 }
        }

        int v63 = 2;
      }
    }
  }

ot::Mle::Mle::RxInfo *ot::Mle::Mle::RxInfo::RxInfo( ot::Mle::Mle::RxInfo *this, ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  return this;
}

uint64_t ot::Ip6::MessageInfo::GetLinkInfo(ot::Ip6::MessageInfo *this)
{
  return *((void *)this + 5);
}

{
  return __ZNK2ot3Ip611MessageInfo11GetLinkInfoEv(this);
}

uint64_t ot::Message::Read<ot::Mle::Mle::SecurityHeader>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0xAu);
}

{
  return __ZNK2ot7Message4ReadINS_3Mle3Mle14SecurityHeaderEEE7otErrortRT_(a1, a2, a3);
}

BOOL ot::Mle::Mle::SecurityHeader::IsSecurityControlValid(ot::Mle::Mle::SecurityHeader *this)
{
  return *(_BYTE *)this == 21;
}

{
  return __ZNK2ot3Mle3Mle14SecurityHeader22IsSecurityControlValidEv(this);
}

uint64_t ot::Neighbor::GetMleFrameCounter(ot::Neighbor *this)
{
  return *((unsigned int *)this + 19);
}

{
  return __ZNK2ot8Neighbor18GetMleFrameCounterEv(this);
}

void ot::Mle::Mle::HandleAdvertisement(ot::Mle::Mle *this, ot::Neighbor **a2)
{
  uint64_t v27 = this;
  uint64_t v26 = a2;
  int LeaderDataTlv = 0;
  if (ot::Mle::Mle::IsAttached(this))
  {
    int LeaderDataTlv = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)0,unsigned short>>(*v26, &v24, v2, v3);
    if (!LeaderDataTlv)
    {
      ot::Ip6::MessageInfo::GetPeerAddr(v26[1]);
      ot::Mle::Mle::Log(1u, 0, v4, v24);
      int LeaderDataTlv = ot::Mle::Mle::RxMessage::ReadLeaderDataTlv(*v26, (ot::Mle::LeaderData *)v23, v5, v6, v7);
      if (!LeaderDataTlv)
      {
        if (!ot::Mle::Mle::IsFullThreadDevice(this)
          || (uint64_t v8 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this),
              (int LeaderDataTlv = ot::Mle::MleRouter::HandleAdvertisement(v8, v26, v24, (const ot::Mle::LeaderData *)v23)) == 0))
        {
          if (ot::Mle::Mle::IsChild(this))
          {
            unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16((ot::Mle::Mle *)((char *)this + 48));
            if (v24 != Rloc16)
            {
              ot::Mle::Mle::BecomeDetached(this);
              IgnoreError();
              goto LABEL_20;
            }

            int PartitionId = ot::Mle::LeaderData::GetPartitionId((ot::Mle::LeaderData *)v23);
            if (PartitionId != ot::Mle::LeaderData::GetPartitionId((ot::Mle::Mle *)((char *)this + 32))
              || (int v18 = ot::Mle::LeaderData::GetLeaderRouterId((ot::Mle::LeaderData *)v23),
                  LeaderId = (ot::TimerMilli *)ot::Mle::Mle::GetLeaderId(this),
                  v18 != LeaderId))
            {
              unsigned int v16 = ot::Mle::LeaderData::GetPartitionId((ot::Mle::LeaderData *)v23);
              char Weighting = ot::Mle::LeaderData::GetWeighting((ot::Mle::LeaderData *)v23);
              char LeaderRouterId = ot::Mle::LeaderData::GetLeaderRouterId((ot::Mle::LeaderData *)v23);
              ot::Mle::Mle::SetLeaderData(this, v16, Weighting, LeaderRouterId);
              unsigned __int16 v15 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
              unsigned __int16 v14 = v26;
              unsigned __int8 RouterId = ot::Neighbor::GetRouterId((ot::Mle::Mle *)((char *)this + 48));
              LeaderId = (ot::TimerMilli *)ot::Mle::MleRouter::ReadAndProcessRouteTlvOnFed(v15, v14, RouterId);
              int LeaderDataTlv = (int)LeaderId;
              if ((_DWORD)LeaderId) {
                goto LABEL_20;
              }
              *((_BYTE *)this + 40) = *((_BYTE *)this + 40) & 0xFE | 1;
            }

            int Now = ot::TimerMilli::GetNow(LeaderId);
            ot::Neighbor::SetLastHeard((uint64_t)this + 48, Now);
          }

          else if (!ot::Mle::Mle::RxInfo::IsNeighborStateValid(v26))
          {
            goto LABEL_20;
          }

          if ((*((_BYTE *)this + 40) & 1) != 0
            || ot::Mle::Mle::IsNetworkDataNewer(this, (const ot::Mle::LeaderData *)v23))
          {
            unsigned __int16 Uint16InRange = ot::Random::NonCrypto::GetUint16InRange(0LL, 0x3E8u);
            ot::Ip6::MessageInfo::GetPeerAddr(v26[1]);
            ot::Mle::Mle::SendDataRequestAfterDelay(this, v13, Uint16InRange);
            IgnoreError();
          }

          *((_BYTE *)v26 + 32) = 2;
        }
      }
    }
  }

void ot::Mle::Mle::HandleDataResponse(ot::Mle::Mle *this, ot::Neighbor **a2)
{
  char v36 = this;
  unsigned __int16 v35 = a2;
  ot::Ip6::MessageInfo::GetPeerAddr(a2[1]);
  ot::Mle::Mle::Log(1u, 8u, v2);
  if (ot::Mle::Mle::RxInfo::IsNeighborStateValid(v35))
  {
    if (!ot::Tlv::FindTlvValueOffset(*v35, (const ot::Message *)0x59, &v29, &v28, v3))
    {
      uint64_t v26 = (ot::LinkMetrics::Initiator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::LinkMetrics::Initiator>(this);
      uint64_t v23 = *v35;
      unsigned __int16 v24 = v29;
      unsigned __int16 v25 = v28;
      ot::Ip6::MessageInfo::GetPeerAddr(v35[1]);
      ot::LinkMetrics::Initiator::HandleReport(v26, v23, v24, v25, v4);
    }

    uint64_t v22 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    uint64_t v21 = v35;
    unsigned __int8 RouterId = ot::Neighbor::GetRouterId((ot::Mle::Mle *)((char *)this + 48));
    int LeaderDataTlv = ot::Mle::MleRouter::ReadAndProcessRouteTlvOnFed(v22, v21, RouterId);
    if (!LeaderDataTlv)
    {
      int LeaderDataTlv = ot::Mle::Mle::HandleLeaderData(this, v35, v6, v7, v8);
      if (!*((_BYTE *)this + 707) && !ot::Mle::Mle::IsRxOnWhenIdle(this))
      {
        uint64_t v11 = ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollSender>(this);
        ot::DataPollSender::StopFastPolls(v11);
      }

      if (!LeaderDataTlv)
      {
        *((_BYTE *)v35 + 32) = 2;
        int LeaderDataTlv = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)0,unsigned short>>(*v35, &v31, v9, v10);
        if (!LeaderDataTlv)
        {
          unsigned __int8 v32 = ot::Mle::RouterIdFromRloc16((ot::Mle *)v31);
          uint64_t v12 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
          ot::RouterTable::FindRouterById((ot::RouterTable *)(v12 + 38136), v32);
          uint64_t v33 = v16;
          if (v16)
          {
            int LeaderDataTlv = ot::Mle::Mle::RxMessage::ReadLeaderDataTlv(*v35, (ot::Mle::LeaderData *)v30, v13, v14, v15);
            if (!LeaderDataTlv)
            {
              uint64_t v19 = v33;
              Datachar Version = ot::Mle::LeaderData::GetDataVersion((uint64_t)v30, 0);
              ot::Neighbor::SetLeaderFullDataVersion((uint64_t)v19, DataVersion);
              uint64_t v20 = v33;
              char v18 = ot::Mle::LeaderData::GetDataVersion((uint64_t)v30, 1);
              ot::Neighbor::SetLeaderStableDataVersion((uint64_t)v20, v18);
            }
          }
        }
      }
    }
  }

  else
  {
    int LeaderDataTlv = 2;
  }

  ot::Mle::Mle::LogProcessError(8u, LeaderDataTlv);
}

void ot::Mle::Mle::HandleParentResponse(ot::Mle::Mle *this, ot::Ip6::MessageInfo **a2)
{
  v208 = this;
  v207 = a2;
  v187 = this;
  *(_DWORD *)&v206[1] = 0;
  ThreadLinkInfo = (ot::ThreadLinkInfo *)ot::Ip6::MessageInfo::GetThreadLinkInfo(a2[1]);
  *(_DWORD *)v206 = ot::ThreadLinkInfo::GetRss(ThreadLinkInfo);
  BOOL v195 = 0;
  unsigned __int16 v194 = 0;
  unsigned __int16 v193 = 0;
  *(_DWORD *)&v206[1] = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)0,unsigned short>>(*v207, &v204, v3, v4);
  if (!*(_DWORD *)&v206[1])
  {
    ot::Ip6::MessageInfo::GetPeerAddr(v207[1]);
    ot::Mle::Mle::Log(1u, 0xFu, v5, v204);
    *(_DWORD *)&v206[1] = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)18,unsigned short>>(*v207, &v205, v6, v7);
    if (!*(_DWORD *)&v206[1])
    {
      if (v205 >= 2u)
      {
        *(_DWORD *)&v206[1] = ot::Mle::Mle::RxMessage::ReadResponseTlv( *v207,  (ot::Mle::Mle::Challenge *)v213,  v8,  v9,  v10);
        if (!*(_DWORD *)&v206[1])
        {
          if (ot::Mle::Mle::Challenge::operator==((ot::Mle::Mle::Challenge *)v213, (uint64_t)v187 + 408))
          {
            ot::Ip6::MessageInfo::GetPeerAddr(v207[1]);
            Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v11);
            ot::Ip6::InterfaceIdentifier::ConvertToExtAddress(Iid, (ot::Mac::ExtAddress *)v212);
            if (ot::Mle::Mle::IsChild(v187))
            {
              ExtAddress = (const void *)ot::Neighbor::GetExtAddress((ot::InstanceLocator *)((char *)v187 + 48));
              if (ot::Equatable<ot::Mac::ExtAddress>::operator==(ExtAddress, v212)) {
                *((_BYTE *)v187 + 710) = 1;
              }
            }

            *(_DWORD *)&v206[1] = ot::Mle::Mle::RxMessage::ReadLeaderDataTlv( *v207,  (ot::Mle::LeaderData *)&v203,  v13,  v14,  v15);
            if (!*(_DWORD *)&v206[1])
            {
              *(_DWORD *)&v206[1] = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)16,unsigned char>>( *v207,  &v202,  v17,  v18);
              if (!*(_DWORD *)&v206[1])
              {
                uint64_t v19 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(v187);
                unsigned __int8 v201 = ot::Mac::Mac::ComputeLinkMargin(v19, v206[0]);
                unsigned __int8 v200 = ot::LinkQualityForLinkMargin((ot *)v201);
                *(_DWORD *)&v206[1] = ot::Tlv::FindTlv<ot::Mle::ConnectivityTlv>(*v207, v199, v20, v21, v22);
                if (!*(_DWORD *)&v206[1])
                {
                  int PartitionId = ot::Mle::LeaderData::GetPartitionId((ot::Mle::LeaderData *)&v203);
                  unsigned int v179 = v206[0];
                  unsigned int v180 = v200;
                  v176 = (ot::Mle::ConnectivityTlv *)v199;
                  int ParentPriority = ot::Mle::ConnectivityTlv::GetParentPriority((ot::Mle::ConnectivityTlv *)v199);
                  int LinkQuality1 = ot::Mle::ConnectivityTlv::GetLinkQuality1((ot::Mle::ConnectivityTlv *)v199);
                  int LinkQuality2 = ot::Mle::ConnectivityTlv::GetLinkQuality2((ot::Mle::ConnectivityTlv *)v199);
                  int LinkQuality3 = ot::Mle::ConnectivityTlv::GetLinkQuality3((ot::Mle::ConnectivityTlv *)v199);
                  ot::Ip6::MessageInfo::GetPeerAddr(v207[1]);
                  v177 = v211;
                  ot::Ip6::Address::ToString(v23, (ot::StringWriter *)v211);
                  v185 = &v125;
                  uint64_t v126 = v179;
                  uint64_t v127 = v180;
                  uint64_t v128 = (char)ParentPriority;
                  uint64_t v129 = LinkQuality1;
                  uint64_t v130 = LinkQuality2;
                  uint64_t v131 = LinkQuality3;
                  uint64_t v132 = ot::String<(unsigned short)40>::AsCString((uint64_t)v211);
                  uint64_t v133 = v204;
                  ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)&ot::Mle::kLogModuleName,  "Partition ID: %u, RSSI: %d, Link quality: %u, Priority: %d, LQI1: %u, LQI2: %u, LQI3: %u (%s,0x%04x)",  v24,  v25,  v26,  v27,  v28,  v29,  PartitionId);
                  int CslClockAccuracyTlv = ot::Mle::Mle::RxMessage::ReadCslClockAccuracyTlv( *v207,  (ot::Mac::CslAccuracy *)v196,  v30,  v31,  v32);
                  if (CslClockAccuracyTlv)
                  {
                    if (CslClockAccuracyTlv != 23)
                    {
                      ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mle::kLogModuleName,  "Parent Response parse error: Could not read CSL accuracy TLV",  v33,  v34,  v35,  v36,  v37,  v38,  v125);
                      *(_DWORD *)&v206[1] = 6;
                      goto LABEL_39;
                    }

                    ot::Mac::CslAccuracy::Init(v196);
                  }

                  unsigned int v39 = v187;
                  *((_BYTE *)v207 + 32) = 1;
                  if (ot::Mle::Mle::IsFullThreadDevice(v39) && !ot::Mle::Mle::IsDetached(v187))
                  {
                    v157 = (ot::Mle::LeaderData *)&v203;
                    int v153 = ot::Mle::LeaderData::GetPartitionId((ot::Mle::LeaderData *)&v203);
                    int v40 = ot::Mle::LeaderData::GetPartitionId((ot::InstanceLocator *)((char *)v187 + 32));
                    int v156 = 1;
                    BOOL v192 = v153 == v40;
                    v158 = (ot::Mle::ConnectivityTlv *)v199;
                    int IdSequence = ot::Mle::ConnectivityTlv::GetIdSequence((ot::Mle::ConnectivityTlv *)v199);
                    unsigned int v41 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(v187);
                    unsigned __int8 RouterIdSequence = ot::RouterTable::GetRouterIdSequence(v41);
                    unsigned __int8 v191 = (IdSequence == RouterIdSequence) & v156;
                    int v155 = ot::Mle::ConnectivityTlv::GetIdSequence(v158);
                    unsigned int v43 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(v187);
                    char v44 = ot::RouterTable::GetRouterIdSequence(v43);
                    unsigned __int8 v190 = ot::SerialNumber::IsGreater<unsigned char>(v155, v44) & v156;
                    BOOL v159 = v192;
                    int v160 = v191;
                    int v161 = v190;
                    unsigned int v162 = *((unsigned __int8 *)v187 + 417);
                    BOOL v163 = v192;
                    int v164 = v191;
                    int v165 = v190;
                    unsigned int v166 = *((unsigned __int8 *)v187 + 417);
                    unsigned int v167 = ot::Mle::LeaderData::GetPartitionId((ot::InstanceLocator *)((char *)v187 + 32));
                    v45 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(v187);
                    int v168 = ot::RouterTable::GetRouterIdSequence(v45);
                    int Weighting = ot::Mle::LeaderData::GetWeighting((ot::InstanceLocator *)((char *)v187 + 32));
                    unsigned __int16 v46 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(v187);
                    BOOL IsSingleton = ot::Mle::MleRouter::IsSingleton(v46);
                    unsigned int v171 = ot::Mle::LeaderData::GetPartitionId(v157);
                    int v172 = ot::Mle::ConnectivityTlv::GetIdSequence(v158);
                    int v173 = ot::Mle::LeaderData::GetWeighting(v157);
                    unsigned __int8 ActiveRouters = ot::Mle::ConnectivityTlv::GetActiveRouters(v158);
                    v174 = &v125;
                    uint64_t v126 = v160 & 1;
                    uint64_t v127 = v161 & 1;
                    uint64_t v128 = v162;
                    uint64_t v129 = v163;
                    uint64_t v130 = v164 & 1;
                    uint64_t v131 = v165 & 1;
                    uint64_t v132 = v166;
                    uint64_t v133 = v167;
                    uint64_t v134 = v168;
                    uint64_t v135 = Weighting;
                    BOOL v136 = IsSingleton;
                    uint64_t v137 = v171;
                    uint64_t v138 = v172;
                    uint64_t v139 = v173;
                    uint64_t v140 = ActiveRouters;
                    ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)&ot::Mle::kLogModuleName,  "Parent Response isPartIdSame=%d, isIdSeqSame=%d, isIdSeqGreater=%d,mAttachMode=%d cur:[partId:%u, idSeq:%u wt:%u, isSingleton:%d] other:[partId:%u, idSeq:%u wt:%u acRtrs:%u] ",  v129,  v162,  v162,  v126,  v159,  v48,  v159);
                    unint64_t v175 = *((unsigned __int8 *)v187 + 417);
                    if (v175 <= 4) {
                      __asm { BR              X8 }
                    }
                  }

                  uint64_t v50 = (const void *)ot::Neighbor::GetExtAddress((ot::InstanceLocator *)((char *)v187 + 424));
                  if (!ot::Unequatable<ot::Mac::ExtAddress>::operator!=(v50, v212)) {
                    goto LABEL_32;
                  }
                  int v189 = 0;
                  if (ot::Mle::Mle::IsFullThreadDevice(v187))
                  {
                    BOOL v51 = ot::Mle::ConnectivityTlv::GetActiveRouters((ot::Mle::ConnectivityTlv *)v199) <= 1u;
                    int v189 = ot::Mle::MleRouter::ComparePartitions( (ot::Mle::MleRouter *)v51,  (ot::Mle::LeaderData *)&v203,  (const ot::Mle::LeaderData *)(*((_BYTE *)v187 + 700) & 1),  (ot::InstanceLocator *)((char *)v187 + 692),  v52);
                  }

                  if (v189 >= 0
                    && (v189
                     || ot::Mle::Mle::IsBetterParent( (uint64_t)v187,  v204,  v200,  v201,  (ot::Mle::ConnectivityTlv *)v199,  v205,  (const ot::Mac::CslAccuracy *)v196)))
                  {
LABEL_32:
                    *(_DWORD *)&v206[1] = ot::Mle::Mle::RxMessage::ReadFrameCounterTlvs(*v207, &v198, &v197, v49);
                    if (!*(_DWORD *)&v206[1])
                    {
                      ot::Ip6::MessageInfo::GetPeerAddr(v207[1]);
                      v152 = v210;
                      ot::Ip6::Address::ToString(v53, (ot::StringWriter *)v210);
                      uint64_t v126 = ot::String<(unsigned short)40>::AsCString((uint64_t)v152);
                      uint64_t v127 = v198;
                      uint64_t v128 = v197;
                      ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)&ot::Mle::kLogModuleName,  "%s Rx from %s linkFrameCounter=%d mleFrameCounter=%d",  v54,  v55,  v56,  v57,  v58,  v59,  (char)"HandleParentResponse");
                      *(_DWORD *)&v206[1] = ot::Mle::Mle::RxMessage::ReadChallengeTlv( *v207,  (ot::InstanceLocator *)((char *)v187 + 673),  v60,  v61,  v62);
                      if (!*(_DWORD *)&v206[1])
                      {
                        *(_DWORD *)&v206[1] = ot::Mle::Mle::RxMessage::ReadVendorDataTlv( *v207,  &v195,  &v194,  &v193,  v63);
                        if (!*(_DWORD *)&v206[1])
                        {
                          if (v195)
                          {
                            uint64_t v126 = v194;
                            uint64_t v127 = v193;
                            ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mle::kLogModuleName,  "HandleParentResponse isOptionalDataPresent(%d) vendorId(%d) vendorSepcificInfo(%d)",  v64,  v65,  v66,  v67,  v68,  v69,  v195);
                            ot::Neighbor::SetVendorId((uint64_t)v187 + 424, v194);
                            ot::Neighbor::SetVendorSpecificInfo((uint64_t)v187 + 424, v193);
                            ot::Neighbor::SetPowerControlMode((ot::InstanceLocator *)((char *)v187 + 424), v193 & 7);
                          }

                          else
                          {
                            ot::Neighbor::SetVendorId((uint64_t)v187 + 424, 0);
                            Instance = ot::InstanceLocator::GetInstance(v187);
                            unsigned __int16 v193 = otPowerControlGetMode( (uint64_t)Instance,  v71,  v72,  v73,  v74,  v75,  v76,  v77) != 0;
                            ot::Neighbor::SetVendorSpecificInfo((uint64_t)v187 + 424, v193);
                            uint64_t v126 = v193;
                            ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mle::kLogModuleName,  "HandleParentResponse::else vendorId(%d) vendorSepcificInfo(%d)",  v78,  v79,  v80,  v81,  v82,  v83,  v194);
                          }

                          ot::Mle::Mle::InitNeighbor(v187, (ot::InstanceLocator *)((char *)v187 + 424), v207);
                          ot::Neighbor::SetRloc16((uint64_t)v187 + 424, v204);
                          LinkFrameCounters = (_DWORD *)ot::Neighbor::GetLinkFrameCounters((ot::InstanceLocator *)((char *)v187 + 424));
                          ot::Mac::LinkFrameCounters::SetAll(LinkFrameCounters, v198);
                          ot::Neighbor::SetLinkAckFrameCounter((uint64_t)v187 + 424, v198);
                          ot::Neighbor::SetMleFrameCounter((uint64_t)v187 + 424, v197);
                          ot::Neighbor::SetVersion((uint64_t)v187 + 424, v205);
                          uint64_t v141 = (uint64_t)v187 + 424;
                          ot::Mle::DeviceMode::DeviceMode((ot::Mle::DeviceMode *)&v188, 11);
                          ot::Neighbor::SetDeviceMode(v141, v188);
                          uint64_t v142 = (uint64_t)v187 + 424;
                          char v85 = ot::LinkQualityForLinkMargin((ot *)v202);
                          ot::Router::SetLinkQualityOut(v142, v85);
                          ot::Neighbor::SetState((ot::InstanceLocator *)((char *)v187 + 424), 3);
                          ot::Neighbor::SetKeySequence((uint64_t)v187 + 424, *((_DWORD *)v207 + 5));
                          v143 = (ot::InstanceLocator *)((char *)v187 + 424);
                          v145 = (ot::Mle::ConnectivityTlv *)v199;
                          char LeaderCost = ot::Mle::ConnectivityTlv::GetLeaderCost((ot::Mle::ConnectivityTlv *)v199);
                          ot::Parent::SetLeaderCost((uint64_t)v143, LeaderCost);
                          v144 = (ot::Mac::CslAccuracy *)v196;
                          char ClockAccuracy = ot::Mac::CslAccuracy::GetClockAccuracy((ot::Mac::CslAccuracy *)v196);
                          v151 = (ot *)&ot::Mle::kLogModuleName;
                          ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)&ot::Mle::kLogModuleName,  "ClockAccuracy Info-HandleParentResponse: Accuracy - %d",  v88,  v89,  v90,  v91,  v92,  v93,  ClockAccuracy);
                          char Uncertainty = ot::Mac::CslAccuracy::GetUncertainty(v144);
                          ot::Logger::LogAtLevel<(ot::LogLevel)4>( v151,  "ClockUncertainity Info-HandleParentResponse: Uncertainity - %d",  v95,  v96,  v97,  v98,  v99,  v100,  Uncertainty);
                          ot::Parent::SetCslAccuracy((uint64_t)v187 + 424, v144);
                          char v101 = ot::Mle::ConnectivityTlv::GetParentPriority(v145);
                          v102 = v145;
                          *((_BYTE *)v187 + 682) = v101;
                          char v103 = ot::Mle::ConnectivityTlv::GetLinkQuality3(v102);
                          v104 = v145;
                          *((_BYTE *)v187 + 683) = v103;
                          char v105 = ot::Mle::ConnectivityTlv::GetLinkQuality2(v104);
                          v106 = v145;
                          *((_BYTE *)v187 + 684) = v105;
                          char v107 = ot::Mle::ConnectivityTlv::GetLinkQuality1(v106);
                          v108 = v145;
                          *((_BYTE *)v187 + 685) = v107;
                          SedBufferchar Size = ot::Mle::ConnectivityTlv::GetSedBufferSize(v108);
                          v110 = v145;
                          *((_WORD *)v187 + 343) = SedBufferSize;
                          char SedDatagramCount = ot::Mle::ConnectivityTlv::GetSedDatagramCount(v110);
                          v112 = v187;
                          char v113 = SedDatagramCount;
                          v114 = v145;
                          *((_BYTE *)v187 + 688) = v113;
                          *(void *)((char *)v112 + 692) = v203;
                          unsigned __int8 v115 = ot::Mle::ConnectivityTlv::GetActiveRouters(v114);
                          v116 = v187;
                          *((_BYTE *)v187 + 700) = v115 <= 1u;
                          *((_BYTE *)v116 + 689) = v201;
                          ot::Ip6::MessageInfo::GetPeerAddr(v207[1]);
                          v146 = v209;
                          ot::Ip6::Address::ToString(v117, (ot::StringWriter *)v209);
                          uint64_t v147 = ot::String<(unsigned short)40>::AsCString((uint64_t)v146);
                          unsigned int v148 = v204;
                          uint64_t v149 = v198;
                          uint64_t v150 = v197;
                          v118 = ot::Mle::Mle::AttachStateToString(*((_BYTE *)v187 + 313));
                          uint64_t v126 = v148;
                          uint64_t v127 = v149;
                          uint64_t v128 = v150;
                          uint64_t v129 = (uint64_t)v118;
                          uint64_t v130 = v200;
                          ot::Logger::LogAtLevel<(ot::LogLevel)4>( v151,  "Added new parent candidate: %s (%u) ,linkFc:%u, mleFc:%u, mAttachState:%s, linkQuality:%d",  v119,  v120,  v121,  v122,  v123,  v124,  v147);
                        }
                      }
                    }
                  }
                }
              }
            }
          }

          else
          {
            *(_DWORD *)&v206[1] = 6;
          }
        }
      }

      else
      {
        *(_DWORD *)&v206[1] = 6;
      }
    }
  }

void ot::Mle::Mle::HandleChildIdResponse( ot::Mle::Mle *this, ot::Neighbor **a2, uint64_t a3, unsigned __int16 *a4)
{
  uint64_t v57 = this;
  uint64_t v56 = a2;
  int LeaderDataTlv = 0;
  int LeaderDataTlv = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)0,unsigned short>>(*a2, &v53, a3, a4);
  if (!LeaderDataTlv)
  {
    ot::Ip6::MessageInfo::GetPeerAddr(v56[1]);
    ot::Mle::Mle::Log(1u, 4u, v4, v53);
    if (!ot::Mle::Mle::RxInfo::IsNeighborStateValid(v56))
    {
      int LeaderDataTlv = 8;
      goto LABEL_29;
    }

    if (*((_BYTE *)this + 313) == 5)
    {
      int LeaderDataTlv = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)10,unsigned short>>(*v56, &v52, v5, v6);
      if (!LeaderDataTlv)
      {
        if (!ot::Mle::RouterIdMatch((ot::Mle *)v53, v52))
        {
          int LeaderDataTlv = 37;
          goto LABEL_29;
        }

        int LeaderDataTlv = ot::Mle::Mle::RxMessage::ReadLeaderDataTlv(*v56, (ot::Mle::LeaderData *)v54, v7, v8, v9);
        if (!LeaderDataTlv)
        {
          int LeaderDataTlv = ot::Tlv::FindTlvValueOffset(*v56, (const ot::Message *)0xC, &v50, &v49, v10);
          if (!LeaderDataTlv)
          {
            int v45 = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)22,ot::MeshCoP::Timestamp>>( *v56,  (uint64_t)v51,  v11,  v12,  v13);
            if (v45)
            {
              if (v45 != 23)
              {
                int LeaderDataTlv = 6;
                goto LABEL_29;
              }
            }

            else if (!ot::Tlv::FindTlvValueOffset(*v56, (const ot::Message *)0x18, &v48, &v47, v16))
            {
              active = (ot::MeshCoP::ActiveDatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
              int LeaderDataTlv = ot::MeshCoP::ActiveDatasetManager::Save( active,  (const ot::MeshCoP::Timestamp *)v51,  *v56,  v48,  v47);
              if (LeaderDataTlv) {
                goto LABEL_29;
              }
            }

            if (*((_BYTE *)this + 315) == 3)
            {
              char v18 = (ot::MeshCoP::PendingDatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>(this);
              ot::MeshCoP::PendingDatasetManager::Clear(v18);
            }

            int v44 = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)23,ot::MeshCoP::Timestamp>>( *v56,  (uint64_t)v51,  v14,  v15,  v16);
            if (v44)
            {
              if (v44 != 23)
              {
                int LeaderDataTlv = 6;
                goto LABEL_29;
              }

              uint64_t v21 = (ot::MeshCoP::PendingDatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>(this);
              ot::MeshCoP::PendingDatasetManager::ClearNetwork(v21);
            }

            else if (!ot::Tlv::FindTlvValueOffset(*v56, (const ot::Message *)0x19, &v48, &v47, v19))
            {
              uint64_t v20 = (ot::MeshCoP::PendingDatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>(this);
              ot::MeshCoP::PendingDatasetManager::Save(v20, (const ot::MeshCoP::Timestamp *)v51, *v56, v48, v47);
              IgnoreError();
            }

            ot::Mle::Mle::SetStateDetached(this);
            unsigned int PartitionId = ot::Mle::LeaderData::GetPartitionId((ot::Mle::LeaderData *)v54);
            char Weighting = ot::Mle::LeaderData::GetWeighting((ot::Mle::LeaderData *)v54);
            char LeaderRouterId = ot::Mle::LeaderData::GetLeaderRouterId((ot::Mle::LeaderData *)v54);
            ot::Mle::Mle::SetLeaderData(this, PartitionId, Weighting, LeaderRouterId);
            unsigned int v41 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
            int v40 = v56;
            unsigned __int8 v23 = ot::Mle::RouterIdFromRloc16((ot::Mle *)v53);
            int LeaderDataTlv = ot::Mle::MleRouter::ReadAndProcessRouteTlvOnFed(v41, v40, v23);
            if (!LeaderDataTlv)
            {
              ot::Mle::Mle::ParentCandidate::CopyTo( (ot::Mle::Mle *)((char *)this + 424),  (ot::Mle::Mle *)((char *)this + 48));
              ot::Mle::Mle::ParentCandidate::Clear((ot::Mle::Mle *)((char *)this + 424));
              CslAccuracy = (_WORD *)ot::Parent::GetCslAccuracy((ot::Mle::Mle *)((char *)this + 48));
              ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)&ot::Mle::kLogModuleName,  "ClockAccuracy Info-ChildIdResponse: Accuracy - %d",  v25,  v26,  v27,  v28,  v29,  v30,  *CslAccuracy);
              uint64_t v36 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
              uint64_t v31 = (const ot::Mac::CslAccuracy *)ot::Parent::GetCslAccuracy((ot::Mle::Mle *)((char *)this + 48));
              ot::Mac::Mac::SetCslParentAccuracy(v36, v31);
              ot::Neighbor::SetRloc16((uint64_t)this + 48, v53);
              unsigned int v39 = (ot::NetworkData::MutableNetworkData *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
              Datachar Version = ot::Mle::LeaderData::GetDataVersion((uint64_t)v54, 0);
              char v38 = ot::Mle::LeaderData::GetDataVersion((uint64_t)v54, 1);
              char NetworkDataType = ot::Mle::Mle::GetNetworkDataType(this);
              ot::NetworkData::LeaderBase::SetNetworkData(v39, DataVersion, v38, NetworkDataType, *v56, v50, v49);
              IgnoreError();
              ot::Mle::Mle::SetStateChild(this, v52);
              if (ot::Mle::Mle::IsRxOnWhenIdle(this))
              {
                uint64_t v35 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
                ot::MeshForwarder::SetRxOnWhenIdle(v35, 1);
              }

              else
              {
                uint64_t v33 = (ot::DataPollSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollSender>(this);
                ot::DataPollSender::SetAttachMode(v33, 0);
                uint64_t v34 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
                ot::MeshForwarder::SetRxOnWhenIdle(v34, 0);
              }

              *((_BYTE *)v56 + 32) = 2;
            }
          }
        }
      }
    }
  }

void ot::Mle::Mle::HandleAnnounce(ot::Mle::Mle *this, ot::Ip6::MessageInfo **a2)
{
  char v38 = this;
  uint64_t v37 = a2;
  int v36 = 0;
  ot::Ip6::MessageInfo::GetPeerAddr(a2[1]);
  ot::Mle::Mle::Log(1u, 1u, v2);
  int v36 = ot::Tlv::FindTlv<ot::Mle::ChannelTlv>(*v37, v35, v3, v4, v5);
  if (!v36)
  {
    if (ot::Mle::ChannelTlv::IsValid((ot::Mle::ChannelTlv *)v35))
    {
      unsigned __int8 Channel = ot::Mle::ChannelTlv::GetChannel((ot::Mle::ChannelTlv *)v35);
      int v36 = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)22,ot::MeshCoP::Timestamp>>(*v37, (uint64_t)v34, v6, v7, v8);
      if (!v36)
      {
        int v36 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)21,unsigned short>>(*v37, &v31, v9, v10);
        if (!v36)
        {
          *((_BYTE *)v37 + 32) = 2;
          active = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
          Timestamp = (const ot::MeshCoP::Timestamp *)ot::MeshCoP::DatasetManager::GetTimestamp(active);
          BOOL IsOrphanTimestamp = ot::MeshCoP::Timestamp::IsOrphanTimestamp((ot::MeshCoP::Timestamp *)v34);
          int v29 = ot::MeshCoP::Timestamp::Compare((ot::MeshCoP::Timestamp *)v34, Timestamp, v12);
          int v26 = Channel;
          uint64_t v13 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
          BOOL v27 = 0;
          if (v26 == ot::Mac::Mac::GetPanChannel(v13))
          {
            int v25 = v31;
            uint64_t v14 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
            BOOL v27 = v25 == (unsigned __int16)ot::Mac::Mac::GetPanId(v14);
          }

          if (IsOrphanTimestamp || v29 < 0)
          {
            if (!IsOrphanTimestamp || !v27)
            {
              ot::Mle::Mle::SendAnnounce(this, Channel);
              unsigned __int8 v24 = Channel;
              ot::Ip6::MessageInfo::GetPeerAddr(v37[1]);
              ot::Mle::Mle::SendAnnounce(this, v24, v15, 0);
            }
          }

          else if (v29 <= 0)
          {
            uint64_t v22 = (ot::AnnounceSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AnnounceSender>(this);
            ot::AnnounceSender::UpdateOnReceivedAnnounce(v22);
          }

          else if (!ot::Mle::Mle::IsDetached(this) || !v27)
          {
            if (*((_BYTE *)this + 313) != 1
              || (unint64_t v23 = *((void *)this + 100), v23 < ot::MeshCoP::Timestamp::GetSeconds((ot::MeshCoP::Timestamp *)v34)))
            {
              *((void *)this + 100) = ot::MeshCoP::Timestamp::GetSeconds((ot::MeshCoP::Timestamp *)v34);
              *((_BYTE *)this + 797) = Channel;
              *((_WORD *)this + 399) = v31;
              ot::Mle::Mle::SetAttachState((uint64_t)this, 1u);
              ot::TimerMilli::Start((ot::Mle::Mle *)((char *)this + 320), 0xFAu);
              ot::Mle::Mle::ResetAttachCounter((uint64_t)this);
              ot::Logger::LogAtLevel<(ot::LogLevel)3>( (ot *)&ot::Mle::kLogModuleName,  "Delay processing Announce - channel %d, panid 0x%02x",  v16,  v17,  v18,  v19,  v20,  v21,  Channel);
            }
          }
        }
      }
    }

    else
    {
      int v36 = 6;
    }
  }

  ot::Mle::Mle::LogProcessError(1u, v36);
}

void ot::Mle::Mle::HandleChildUpdateRequest(ot::Mle::Mle *this, ot::Mle::Mle::RxInfo *a2)
{
  int v29 = this;
  uint64_t v28 = a2;
  int updated = 0;
  ot::Mle::Mle::TlvList::TlvList((ot::Mle::Mle::TlvList *)v31);
  ot::Mle::Mle::TlvList::TlvList((ot::Mle::Mle::TlvList *)v30);
  int updated = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)0,unsigned short>>(*(ot::Tlv **)v28, &v26, v2, v3);
  if (updated) {
    goto LABEL_27;
  }
  ot::Ip6::MessageInfo::GetPeerAddr(*((ot::Ip6::MessageInfo **)v28 + 1));
  ot::Mle::Mle::Log(1u, 5u, v4, v26);
  int ChallengeTlv = ot::Mle::Mle::RxMessage::ReadChallengeTlv( *(ot::Mle::Mle::RxMessage **)v28,  (ot::Mle::Mle::Challenge *)v32,  v5,  v6,  v7);
  if (ChallengeTlv)
  {
    if (ChallengeTlv != 23)
    {
      int updated = 6;
      goto LABEL_27;
    }

    char v33 = 0;
  }

  else
  {
    ot::Mle::Mle::TlvList::Add((ot::Mle::Mle::TlvList *)v30, 4);
    ot::Mle::Mle::TlvList::Add((ot::Mle::Mle::TlvList *)v30, 8);
    ot::Mle::Mle::TlvList::Add((ot::Mle::Mle::TlvList *)v30, 5);
  }

  if (*((ot::Mle::Mle **)v28 + 3) == (ot::Mle::Mle *)((char *)this + 48))
  {
    int v21 = ot::Tlv::Find<ot::Mle::StatusTlv>(*(ot::Tlv **)v28, &v25, v8, v9);
    if (v21)
    {
      if (v21 != 23)
      {
        int updated = 6;
        goto LABEL_27;
      }
    }

    else if (v25 == 1)
    {
      goto LABEL_12;
    }

    unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16((ot::Mle::Mle *)((char *)this + 48));
    if (v26 == Rloc16)
    {
      int updated = ot::Mle::Mle::HandleLeaderData(this, (ot::Mle::Mle::RxMessage **)v28, v11, v12, v13);
      if (updated) {
        goto LABEL_27;
      }
      if (!ot::Mle::Mle::RxMessage::ReadCslClockAccuracyTlv( *(ot::Mle::Mle::RxMessage **)v28,  (ot::Mac::CslAccuracy *)v24,  v14,  v15,  v16)) {
        ot::Mle::Mle::TlvList::Add((ot::Mle::Mle::TlvList *)v30, 85);
      }
      goto LABEL_19;
    }

void ot::Mle::Mle::HandleChildUpdateResponse(ot::Mle::Mle *this, ot::Mle::Mle::RxMessage **a2)
{
  uint64_t v57 = this;
  uint64_t v56 = a2;
  int FrameCounterTlvs = 0;
  ot::Ip6::MessageInfo::GetPeerAddr(a2[1]);
  ot::Mle::Mle::Log(1u, 6u, v2);
  int ResponseTlv = ot::Mle::Mle::RxMessage::ReadResponseTlv(*v56, (ot::Mle::Mle::Challenge *)v59, v3, v4, v5);
  if (ResponseTlv)
  {
    if (ResponseTlv != 23)
    {
      int FrameCounterTlvs = 6;
      goto LABEL_48;
    }

    char v60 = 0;
  }

  int v46 = *((unsigned __int8 *)this + 41);
  if (v46 == 1)
  {
    if (!ot::Mle::Mle::Challenge::operator==((ot::Mle::Mle::Challenge *)v59, (uint64_t)this + 408))
    {
      int FrameCounterTlvs = 8;
      goto LABEL_48;
    }
  }

  else
  {
    if (v46 != 2) {
      __assert_rtn("HandleChildUpdateResponse", "mle.cpp", 4935, "false");
    }
    if (v56[3] != (ot::Mle::Mle *)((char *)this + 48)
      || !ot::Neighbor::IsStateValid((ot::Mle::Mle *)((char *)this + 48)))
    {
      int FrameCounterTlvs = 8;
      goto LABEL_48;
    }
  }

  if (ot::Tlv::Find<ot::Mle::StatusTlv>(*v56, &v54, v6, v7))
  {
    int FrameCounterTlvs = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)1,unsigned char>>(*v56, &v53, v8, v9);
    if (!FrameCounterTlvs)
    {
      ot::Mle::DeviceMode::DeviceMode((ot::Mle::DeviceMode *)&v50, v53);
      if (ot::Equatable<ot::Mle::DeviceMode>::operator==(&v50, (char *)this + 312))
      {
        int v45 = *((unsigned __int8 *)this + 41);
        if (v45 == 1)
        {
          int FrameCounterTlvs = ot::Mle::Mle::RxMessage::ReadFrameCounterTlvs( *v56,  (unsigned int *)&v52[3],  (unsigned int *)&v52[1],  v11);
          if (FrameCounterTlvs) {
            goto LABEL_48;
          }
          ot::Ip6::MessageInfo::GetPeerAddr(v56[1]);
          ot::Ip6::Address::ToString(v12, (ot::StringWriter *)v58);
          ot::String<(unsigned short)40>::AsCString((uint64_t)v58);
          ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)&ot::Mle::kLogModuleName,  "%s Rx from %s linkFrameCounter=%d mleFrameCounter=%d",  v13,  v14,  v15,  v16,  v17,  v18,  (char)"HandleChildUpdateResponse");
          LinkFrameCounters = (_DWORD *)ot::Neighbor::GetLinkFrameCounters((ot::Mle::Mle *)((char *)this + 48));
          ot::Mac::LinkFrameCounters::SetAll(LinkFrameCounters, *(int *)&v52[3]);
          ot::Neighbor::SetLinkAckFrameCounter((uint64_t)this + 48, *(int *)&v52[3]);
          ot::Neighbor::SetMleFrameCounter((uint64_t)this + 48, *(int *)&v52[1]);
          ot::Neighbor::SetState((ot::Mle::Mle *)((char *)this + 48), 7);
          unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16(this);
          ot::Mle::Mle::SetStateChild(this, Rloc16);
          *((_BYTE *)this + 40) = *((_BYTE *)this + 40) & 0xFE | 1;
          if (ot::Mle::Mle::IsFullThreadDevice(this)) {
            *((_BYTE *)this + 40) = *((_BYTE *)this + 40) & 0xFD | 2;
          }
        }

        else if (v45 != 2)
        {
          __assert_rtn("HandleChildUpdateResponse", "mle.cpp", 5043, "false");
        }

        int FrameCounterTlvs = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)0,unsigned short>>(*v56, v52, v10, v11);
        if (!FrameCounterTlvs)
        {
          int v44 = ot::Mle::RouterIdFromRloc16((ot::Mle *)v52[0]);
          unsigned __int16 v21 = ot::Mle::Mle::GetRloc16(this);
          if (v44 == ot::Mle::RouterIdFromRloc16((ot::Mle *)v21))
          {
            int FrameCounterTlvs = ot::Mle::Mle::HandleLeaderData(this, v56, v22, v23, v24);
            if (!FrameCounterTlvs)
            {
              int v43 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)2,unsigned int>>(*v56, &v51, v25, v26);
              if (v43)
              {
                if (v43 != 23)
                {
                  int FrameCounterTlvs = 6;
                  goto LABEL_48;
                }
              }

              else if (v51 || !ot::Mle::Mle::IsDetachingGracefully(this))
              {
                *((_DWORD *)this + 196) = v51;
              }

              else
              {
                ot::Mle::Mle::Stop(this);
              }

              int CslClockAccuracyTlv = ot::Mle::Mle::RxMessage::ReadCslClockAccuracyTlv( *v56,  (ot::Mac::CslAccuracy *)v49,  v27,  v28,  v29);
              if (CslClockAccuracyTlv)
              {
                if (CslClockAccuracyTlv != 23)
                {
                  int FrameCounterTlvs = 6;
                  goto LABEL_48;
                }
              }

              else
              {
                uint64_t v30 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
                ot::Mac::Mac::SetCslParentAccuracy(v30, (const ot::Mac::CslAccuracy *)v49);
                char ClockAccuracy = ot::Mac::CslAccuracy::GetClockAccuracy((ot::Mac::CslAccuracy *)v49);
                ot::Mac::CslAccuracy::GetUncertainty((ot::Mac::CslAccuracy *)v49);
                ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)&ot::Mle::kLogModuleName,  "ClockAccuracy Info-ChildUpdateResponse: Accuracy - %d, Uncertainty - %d",  v31,  v32,  v33,  v34,  v35,  v36,  ClockAccuracy);
              }

              if (ot::Mle::Mle::IsRxOnWhenIdle(this))
              {
                unsigned int v39 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
                ot::MeshForwarder::SetRxOnWhenIdle(v39, 1);
              }

              else
              {
                uint64_t v37 = (ot::DataPollSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollSender>(this);
                ot::DataPollSender::SetAttachMode(v37, 0);
                char v38 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
                ot::MeshForwarder::SetRxOnWhenIdle(v38, 0);
              }

              if (v60) {
                char v40 = 1;
              }
              else {
                char v40 = 2;
              }
              *((_BYTE *)v56 + 32) = v40;
            }
          }

          else
          {
            ot::Mle::Mle::BecomeDetached(this);
            IgnoreError();
          }
        }
      }

      else
      {
        int FrameCounterTlvs = 2;
      }
    }
  }

  else
  {
    ot::Mle::Mle::BecomeDetached(this);
    IgnoreError();
  }

void ot::Mle::Mle::HandleLinkMetricsManagementRequest(ot::Mle::Mle *this, ot::Ip6::MessageInfo **a2)
{
  uint64_t v10 = this;
  uint64_t v9 = a2;
  int v8 = 0;
  ot::Ip6::MessageInfo::GetPeerAddr(a2[1]);
  ot::Mle::Mle::Log(1u, 0x1Cu, v2);
  if (v9[3])
  {
    uint64_t v3 = (ot::LinkMetrics::Subject *)ot::GetProvider<ot::InstanceLocator>::Get<ot::LinkMetrics::Subject>(this);
    int v8 = ot::LinkMetrics::Subject::HandleManagementRequest(v3, *v9, v9[3], &v7, v4);
    if (!v8)
    {
      ot::Ip6::MessageInfo::GetPeerAddr(v9[1]);
      int v8 = ot::Mle::Mle::SendLinkMetricsManagementResponse((uint64_t)this, v5, v7);
      *((_BYTE *)v9 + 32) = 2;
    }
  }

  else
  {
    int v8 = 13;
  }

  ot::Mle::Mle::LogProcessError(0x1Cu, v8);
}

void ot::Mle::Mle::HandleLinkMetricsManagementResponse(ot::Mle::Mle *this, ot::Ip6::MessageInfo **a2)
{
  if (a2[3])
  {
    uint64_t v5 = (ot::LinkMetrics::Initiator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::LinkMetrics::Initiator>(this);
    uint64_t v4 = *a2;
    ot::Ip6::MessageInfo::GetPeerAddr(a2[1]);
    int v7 = ot::LinkMetrics::Initiator::HandleManagementResponse(v5, v4, v3);
    *((_BYTE *)a2 + 32) = 2;
    ot::Mle::Mle::LogProcessError(0x1Du, v7);
  }

  else
  {
    ot::Mle::Mle::LogProcessError(0x1Du, 13);
  }

void ot::Mle::Mle::HandleLinkProbe(ot::Mle::Mle *this, ot::Ip6::MessageInfo **a2)
{
  uint64_t v14 = this;
  uint64_t v13 = a2;
  int v12 = 0;
  ot::Ip6::MessageInfo::GetPeerAddr(a2[1]);
  ot::Mle::Mle::Log(1u, 0x1Eu, v2);
  uint64_t v3 = (ot::LinkMetrics::Subject *)ot::GetProvider<ot::InstanceLocator>::Get<ot::LinkMetrics::Subject>(this);
  int v12 = ot::LinkMetrics::Subject::HandleLinkProbe(v3, *v13, (char *)&v11, v4, v5);
  if (!v12)
  {
    if (v13[3])
    {
      uint64_t v9 = v13[3];
      unsigned __int8 v7 = v11;
      unsigned __int8 AverageLqi = ot::Message::GetAverageLqi(*v13);
      Averagechar Rss = ot::Message::GetAverageRss(*v13);
      ot::Neighbor::AggregateLinkMetrics(v9, v7, 0, AverageLqi, AverageRss);
    }

    *((_BYTE *)v13 + 32) = 2;
  }

  ot::Mle::Mle::LogProcessError(0x1Eu, v12);
}

void ot::Mle::Mle::ProcessKeySequence(ot::Mle::Mle *this, ot::Mle::Mle::RxInfo *a2)
{
  unsigned int v36 = *((_DWORD *)a2 + 5);
  uint64_t v2 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
  if (v36 > ot::KeyManager::GetCurrentKeySequence(v2))
  {
    int v35 = *((unsigned __int8 *)a2 + 32);
    if (*((_BYTE *)a2 + 32))
    {
      if (v35 == 1)
      {
        uint64_t v3 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
        ot::KeyManager::GetCurrentKeySequence(v3);
        ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)&ot::Mle::kLogModuleName,  "%s Authoritative MLE msg with keySeq:%u, mCurrSeq:%u received, update keysequence",  v4,  v5,  v6,  v7,  v8,  v9,  (char)"ProcessKeySequence");
        uint64_t v10 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
        ot::KeyManager::SetCurrentKeySequence(v10, *((_DWORD *)a2 + 5));
      }

      else if (v35 == 2 && *((void *)a2 + 3) && ot::Neighbor::IsStateValid(*((ot::Neighbor **)a2 + 3)))
      {
        int v34 = *((_DWORD *)a2 + 5);
        unsigned __int8 v11 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
        if (v34 - ot::KeyManager::GetCurrentKeySequence(v11) == 1)
        {
          int v12 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
          ot::KeyManager::GetCurrentKeySequence(v12);
          ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)&ot::Mle::kLogModuleName,  "%s Peer MLE msg with keySeq:%u mCurrSeq:%u received, update keysequence",  v13,  v14,  v15,  v16,  v17,  v18,  (char)"ProcessKeySequence");
          uint64_t v19 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
          ot::KeyManager::SetCurrentKeySequence(v19, *((_DWORD *)a2 + 5));
        }

        else
        {
          char Rloc16 = ot::Neighbor::GetRloc16(*((ot::Neighbor **)a2 + 3));
          ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)&ot::Mle::kLogModuleName,  "Large key seq jump in peer class msg from 0x%04x ",  v21,  v22,  v23,  v24,  v25,  v26,  Rloc16);
          ot::Mle::Mle::ReestablishLinkWithNeighbor(this, *((ot::Neighbor **)a2 + 3));
        }
      }
    }

    else
    {
      uint64_t v27 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
      ot::KeyManager::GetCurrentKeySequence(v27);
      ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mle::kLogModuleName,  "%s Unknown MLE msg with keySeq:%u, mCurrSeq:%u received",  v28,  v29,  v30,  v31,  v32,  v33,  (char)"ProcessKeySequence");
    }
  }

uint64_t ot::ThreadLinkInfo::IsDstPanIdBroadcast(ot::ThreadLinkInfo *this)
{
  return (*((unsigned __int8 *)this + 5) >> 1) & 1;
}

{
  return __ZNK2ot14ThreadLinkInfo19IsDstPanIdBroadcastEv(this);
}

void ot::Mle::Mle::ReestablishLinkWithNeighbor(ot::Mle::Mle *this, ot::Neighbor *a2)
{
  if (ot::Mle::Mle::IsAttached(this) && ot::Neighbor::IsStateValid(a2))
  {
    if (ot::Mle::Mle::IsChild(this) && a2 == (ot::Mle::Mle *)((char *)this + 48))
    {
      ot::Mle::Mle::SendChildUpdateRequest(this, 1);
      IgnoreError();
    }

    else if (ot::Mle::Mle::IsFullThreadDevice(this))
    {
      unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(a2);
      if (ot::Mle::IsActiveRouter((ot::Mle *)Rloc16))
      {
        uint64_t v3 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
        ot::Mle::MleRouter::SendLinkRequest(v3, a2);
        IgnoreError();
      }

      else
      {
        uint64_t v4 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
        if (ot::ChildTable::Contains(v4, a2))
        {
          ot::Neighbor::SetState(a2, 6);
          uint64_t v5 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
          ot::Mle::MleRouter::SendChildUpdateRequest(v5, a2);
          IgnoreError();
        }
      }
    }
  }

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)0,unsigned short>>( ot::Tlv *a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned short>(a1, 0, a2, a4);
}

{
  return __ZN2ot3Tlv4FindINS_11UintTlvInfoILh0EtEEEE7otErrorRKNS_7MessageERNT_13UintValueTypeE(a1, a2, a3, a4);
}

void ot::Mle::Mle::Log(unsigned __int8 a1, unsigned __int8 a2, ot::Ip6::Address *a3, unsigned __int16 a4)
{
  if (a4 != 65534) {
    ot::StringWriter::Append((ot::StringWriter *)v16, ",0x%04x", a4);
  }
  char v10 = ot::Mle::Mle::MessageActionToString(a1);
  ot::Mle::Mle::MessageTypeToString(a2);
  ot::Mle::Mle::MessageTypeActionToSuffixString(a2);
  ot::Ip6::Address::ToString(a3, (ot::StringWriter *)v15);
  ot::String<(unsigned short)40>::AsCString((uint64_t)v15);
  ot::String<(unsigned short)17>::AsCString((uint64_t)v16);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "%s %s%s (%s%s)", v4, v5, v6, v7, v8, v9, v10);
}

uint64_t ot::Mle::Mle::RxMessage::ReadLeaderDataTlv( ot::Mle::Mle::RxMessage *this, ot::Mle::LeaderData *a2, uint64_t a3, uint64_t a4, ot::Tlv *a5)
{
  uint64_t v9 = this;
  uint64_t v8 = a2;
  unsigned int v7 = ot::Tlv::FindTlv<ot::Mle::LeaderDataTlv>(this, v6, a3, a4, a5);
  if (!v7)
  {
    if (ot::Mle::LeaderDataTlv::IsValid((ot::Mle::LeaderDataTlv *)v6)) {
      ot::Mle::LeaderDataTlv::Get((ot::Mle::LeaderDataTlv *)v6, v8);
    }
    else {
      return 6;
    }
  }

  return v7;
}

uint64_t ot::Neighbor::GetRouterId(ot::Neighbor *this)
{
  return (int)*((unsigned __int16 *)this + 48) >> 10;
}

{
  return __ZNK2ot8Neighbor11GetRouterIdEv(this);
}

BOOL ot::Mle::Mle::RxInfo::IsNeighborStateValid(ot::Neighbor **this)
{
  BOOL v2 = 0;
  if (this[3]) {
    return ot::Neighbor::IsStateValid(this[3]);
  }
  return v2;
}

{
  return __ZNK2ot3Mle3Mle6RxInfo20IsNeighborStateValidEv(this);
}

BOOL ot::Mle::Mle::IsNetworkDataNewer(ot::Mle::Mle *this, const ot::Mle::LeaderData *a2)
{
  char NetworkDataType = ot::Mle::Mle::GetNetworkDataType(this);
  Datachar Version = ot::Mle::LeaderData::GetDataVersion((uint64_t)a2, NetworkDataType);
  uint64_t v8 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
  char v3 = ot::Mle::Mle::GetNetworkDataType(this);
  char Version = ot::NetworkData::LeaderBase::GetVersion(v8, v3);
  return ot::SerialNumber::IsGreater<unsigned char>(DataVersion, Version);
}

void ot::Mle::Mle::LogProcessError(unsigned __int8 a1, int a2)
{
}

uint64_t ot::Mle::Mle::HandleLeaderData( ot::Mle::Mle *this, ot::Mle::Mle::RxMessage **a2, uint64_t a3, uint64_t a4, ot::Tlv *a5)
{
  char v50 = this;
  unsigned __int16 v49 = a2;
  unsigned int LeaderDataTlv = 0;
  char v43 = 0;
  char v42 = 0;
  unsigned __int16 v39 = 0;
  unsigned __int16 v38 = 0;
  unsigned __int16 v37 = 0;
  unsigned __int16 v36 = 0;
  char v35 = 0;
  unsigned int LeaderDataTlv = ot::Mle::Mle::RxMessage::ReadLeaderDataTlv(*a2, (ot::Mle::LeaderData *)v47, a3, a4, a5);
  if (!LeaderDataTlv)
  {
    int PartitionId = ot::Mle::LeaderData::GetPartitionId((ot::Mle::LeaderData *)v47);
    if (PartitionId == ot::Mle::LeaderData::GetPartitionId((ot::Mle::Mle *)((char *)this + 32))
      && (int v31 = ot::Mle::LeaderData::GetWeighting((ot::Mle::LeaderData *)v47),
          v31 == ot::Mle::LeaderData::GetWeighting((ot::Mle::Mle *)((char *)this + 32)))
      && (int v30 = ot::Mle::LeaderData::GetLeaderRouterId((ot::Mle::LeaderData *)v47),
          v30 == ot::Mle::Mle::GetLeaderId(this)))
    {
      if ((*((_BYTE *)this + 40) & 1) == 0 && !ot::Mle::Mle::IsNetworkDataNewer(this, (const ot::Mle::LeaderData *)v47)) {
        goto LABEL_37;
      }
    }

    else
    {
      if (!ot::Mle::Mle::IsChild(this))
      {
        unsigned int LeaderDataTlv = 2;
        goto LABEL_37;
      }

      unsigned int v28 = ot::Mle::LeaderData::GetPartitionId((ot::Mle::LeaderData *)v47);
      char Weighting = ot::Mle::LeaderData::GetWeighting((ot::Mle::LeaderData *)v47);
      char LeaderRouterId = ot::Mle::LeaderData::GetLeaderRouterId((ot::Mle::LeaderData *)v47);
      ot::Mle::Mle::SetLeaderData(this, v28, Weighting, LeaderRouterId);
      *((_BYTE *)this + 40) = *((_BYTE *)this + 40) & 0xFE | 1;
    }

    int v27 = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)22,ot::MeshCoP::Timestamp>>(*v49, (uint64_t)v46, v5, v6, v7);
    if (v27)
    {
      if (v27 != 23)
      {
        unsigned int LeaderDataTlv = 6;
        goto LABEL_37;
      }
    }

    else
    {
      char v43 = 1;
      active = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
      Timestamp = (const ot::MeshCoP::Timestamp *)ot::MeshCoP::DatasetManager::GetTimestamp(active);
      if (!ot::Mle::Mle::IsLeader(this)
        && ot::MeshCoP::Timestamp::Compare((ot::MeshCoP::Timestamp *)v46, Timestamp, v9)
        && ot::Tlv::FindTlvValueOffset(*v49, (const ot::Message *)0x18, &v39, &v38, v11))
      {
        char v35 = 1;
        goto LABEL_37;
      }
    }

    int v26 = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)23,ot::MeshCoP::Timestamp>>( *v49,  (uint64_t)v45,  (uint64_t)v9,  v10,  v11);
    if (v26)
    {
      if (v26 != 23)
      {
        unsigned int LeaderDataTlv = 6;
        goto LABEL_37;
      }
    }

    else
    {
      char v42 = 1;
      uint64_t v14 = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>(this);
      Timestamp = (const ot::MeshCoP::Timestamp *)ot::MeshCoP::DatasetManager::GetTimestamp(v14);
      if (!ot::Mle::Mle::IsLeader(this)
        && ot::MeshCoP::Timestamp::Compare((ot::MeshCoP::Timestamp *)v45, Timestamp, v15)
        && ot::Tlv::FindTlvValueOffset(*v49, (const ot::Message *)0x19, &v37, &v36, v13))
      {
        char v35 = 1;
        goto LABEL_37;
      }
    }

    if (ot::Tlv::FindTlvValueOffset(*v49, (const ot::Message *)0xC, &v41, &v40, v13))
    {
      char v35 = 1;
    }

    else
    {
      uint64_t v25 = (ot::NetworkData::MutableNetworkData *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
      Datachar Version = ot::Mle::LeaderData::GetDataVersion((uint64_t)v47, 0);
      char v24 = ot::Mle::LeaderData::GetDataVersion((uint64_t)v47, 1);
      char NetworkDataType = ot::Mle::Mle::GetNetworkDataType(this);
      unsigned int LeaderDataTlv = ot::NetworkData::LeaderBase::SetNetworkData( v25,  DataVersion,  v24,  NetworkDataType,  *v49,  v41,  v40);
      if (!LeaderDataTlv)
      {
        if (ot::Mle::Mle::IsLeader(this))
        {
          uint64_t v17 = (ot::NetworkData::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
          ot::NetworkData::Leader::IncrementVersionAndStableVersion(v17);
        }

        else
        {
          if ((v43 & 1) != 0 && v39)
          {
            uint64_t v18 = (ot::MeshCoP::ActiveDatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
            ot::MeshCoP::ActiveDatasetManager::Save(v18, (const ot::MeshCoP::Timestamp *)v46, *v49, v39, v38);
            IgnoreError();
          }

          if ((v42 & 1) != 0 && v37)
          {
            uint64_t v19 = (ot::MeshCoP::PendingDatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>(this);
            ot::MeshCoP::PendingDatasetManager::Save(v19, (const ot::MeshCoP::Timestamp *)v45, *v49, v37, v36);
            IgnoreError();
          }
        }

        *((_BYTE *)this + 40) &= ~1u;
      }
    }
  }

void ot::RouterTable::FindRouterById(ot::RouterTable *this, unsigned __int8 a2)
{
}

{
  __ZN2ot11RouterTable14FindRouterByIdEh(this, a2);
}

uint64_t ot::Neighbor::SetLeaderFullDataVersion(uint64_t this, char a2)
{
  *(_BYTE *)(this + 99) = a2;
  return this;
}

{
  return __ZN2ot8Neighbor24SetLeaderFullDataVersionEh(this, a2);
}

uint64_t ot::Neighbor::SetLeaderStableDataVersion(uint64_t this, char a2)
{
  *(_BYTE *)(this + 100) = a2;
  return this;
}

{
  return __ZN2ot8Neighbor26SetLeaderStableDataVersionEh(this, a2);
}

BOOL ot::SerialNumber::IsGreater<unsigned char>(char a1, char a2)
{
  return ot::SerialNumber::IsLess<unsigned char>(a2, a1);
}

{
  return __ZN2ot12SerialNumber9IsGreaterIhEEbT_S2_(a1, a2);
}

BOOL ot::Mle::Mle::GetNetworkDataType(ot::Mle::Mle *this)
{
  return ot::Mle::DeviceMode::GetNetworkDataType((ot::Mle::Mle *)((char *)this + 312));
}

{
  return __ZNK2ot3Mle3Mle18GetNetworkDataTypeEv(this);
}

uint64_t ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)22,ot::MeshCoP::Timestamp>>( ot::Tlv *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)0x16, a2, (void *)8, a5);
}

{
  return __ZN2ot3Tlv4FindINS_13SimpleTlvInfoILh22ENS_7MeshCoP9TimestampEEEEE7otErrorRKNS_7MessageERNT_9ValueTypeE( a1,  a2,  a3,  a4,  a5);
}

uint64_t ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)23,ot::MeshCoP::Timestamp>>( ot::Tlv *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)0x17, a2, (void *)8, a5);
}

{
  return __ZN2ot3Tlv4FindINS_13SimpleTlvInfoILh23ENS_7MeshCoP9TimestampEEEEE7otErrorRKNS_7MessageERNT_9ValueTypeE( a1,  a2,  a3,  a4,  a5);
}

BOOL ot::Mle::Mle::IsBetterParent( uint64_t a1, unsigned __int16 a2, unsigned __int8 a3, unsigned __int8 a4, ot::Mle::ConnectivityTlv *a5, unsigned __int16 a6, const ot::Mac::CslAccuracy *a7)
{
  unsigned __int8 TwoWayLinkQuality = ot::Router::GetTwoWayLinkQuality((ot::Router *)(a1 + 424));
  int v28 = ot::ThreeWayCompare<ot::LinkQuality>(a3, TwoWayLinkQuality);
  if (!v28)
  {
    BOOL IsActiveRouter = ot::Mle::IsActiveRouter((ot::Mle *)a2);
    unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16((ot::Neighbor *)(a1 + 424));
    BOOL v8 = ot::Mle::IsActiveRouter((ot::Mle *)Rloc16);
    int v28 = ot::ThreeWayCompare<BOOL>(IsActiveRouter, v8);
    if (!v28)
    {
      char ParentPriority = ot::Mle::ConnectivityTlv::GetParentPriority(a5);
      int v28 = ot::ThreeWayCompare<signed char>(ParentPriority, *(_BYTE *)(a1 + 682));
      if (!v28)
      {
        unsigned __int8 LinkQuality3 = ot::Mle::ConnectivityTlv::GetLinkQuality3(a5);
        int v28 = ot::ThreeWayCompare<unsigned char>(LinkQuality3, *(_BYTE *)(a1 + 683));
        if (!v28)
        {
          unsigned __int16 Version = ot::Neighbor::GetVersion((ot::Neighbor *)(a1 + 424));
          int v28 = ot::ThreeWayCompare<unsigned short>(a6, Version);
          if (!v28)
          {
            SedBufferchar Size = ot::Mle::ConnectivityTlv::GetSedBufferSize(a5);
            int v28 = ot::ThreeWayCompare<unsigned short>(SedBufferSize, *(_WORD *)(a1 + 686));
            if (!v28)
            {
              unsigned __int8 SedDatagramCount = ot::Mle::ConnectivityTlv::GetSedDatagramCount(a5);
              int v28 = ot::ThreeWayCompare<unsigned char>(SedDatagramCount, *(_BYTE *)(a1 + 688));
              if (!v28)
              {
                unsigned __int8 LinkQuality2 = ot::Mle::ConnectivityTlv::GetLinkQuality2(a5);
                int v28 = ot::ThreeWayCompare<unsigned char>(LinkQuality2, *(_BYTE *)(a1 + 684));
                if (!v28)
                {
                  unsigned __int8 LinkQuality1 = ot::Mle::ConnectivityTlv::GetLinkQuality1(a5);
                  int v28 = ot::ThreeWayCompare<unsigned char>(LinkQuality1, *(_BYTE *)(a1 + 685));
                  if (!v28)
                  {
                    if (ot::Mle::Mle::IsRxOnWhenIdle((ot::Mle::Mle *)a1)
                      || (unint64_t v26 = ot::Mle::Mle::CalcParentCslMetric((ot::Mle::Mle *)a1, a7),
                          CslAccuracy = (const ot::Mac::CslAccuracy *)ot::Parent::GetCslAccuracy((ot::Parent *)(a1 + 424)),
                          unint64_t v25 = ot::Mle::Mle::CalcParentCslMetric((ot::Mle::Mle *)a1, CslAccuracy),
                          (int v28 = ot::ThreeWayCompare<unsigned long long>(v25, v26)) == 0))
                    {
                      int v28 = ot::ThreeWayCompare<unsigned char>(a4, *(_BYTE *)(a1 + 689));
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  ot::Neighbor::GetRloc16((ot::Neighbor *)(a1 + 424));
  unsigned int v18 = ot::Mle::ConnectivityTlv::GetParentPriority(a5);
  unsigned int v19 = *(char *)(a1 + 682);
  unsigned int v20 = ot::Mle::ConnectivityTlv::GetLinkQuality3(a5);
  unsigned int v21 = *(unsigned __int8 *)(a1 + 683);
  unsigned int v22 = ot::Neighbor::GetVersion((ot::Neighbor *)(a1 + 424));
  ot::Mle::ConnectivityTlv::GetSedBufferSize(a5);
  ot::Mle::ConnectivityTlv::GetSedDatagramCount(a5);
  ot::Mle::ConnectivityTlv::GetLinkQuality2(a5);
  ot::Mle::ConnectivityTlv::GetLinkQuality1(a5);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)&ot::Mle::kLogModuleName,  "MleRouter::IsBetterParent rval:%d, rloc:[0x%x, 0x%x], mesh:[%d %d], actRtr:[%d, %d], pPrio:[%d %d], lq3:[%d %d], ver s:[%d %d], sedBufSz:[%d %d], sedDgmCnt:[%d %d], lq2:[%d %d], lq1:[%d %d] lm:[%d %d]",  v22,  a6,  v21,  v20,  v19,  v18,  v28);
  return v28 > 0;
}

uint64_t ot::ThreeWayCompare<ot::LinkQuality>(unsigned __int8 a1, unsigned __int8 a2)
{
  if (a1 == a2)
  {
    return 0;
  }

  else if (a1 > (int)a2)
  {
    return 1;
  }

  else
  {
    return -1;
  }

{
  return __ZN2ot15ThreeWayCompareINS_11LinkQualityEEEiT_S2_(a1, a2);
}

uint64_t ot::ThreeWayCompare<signed char>(char a1, char a2)
{
  if (a1 == a2)
  {
    return 0;
  }

  else if (a1 > a2)
  {
    return 1;
  }

  else
  {
    return -1;
  }

{
  return __ZN2ot15ThreeWayCompareIaEEiT_S1_(a1, a2);
}

uint64_t ot::ThreeWayCompare<unsigned char>(unsigned __int8 a1, unsigned __int8 a2)
{
  if (a1 == a2)
  {
    return 0;
  }

  else if (a1 > (int)a2)
  {
    return 1;
  }

  else
  {
    return -1;
  }

{
  return __ZN2ot15ThreeWayCompareIhEEiT_S1_(a1, a2);
}

uint64_t ot::Mle::ConnectivityTlv::GetLinkQuality3(ot::Mle::ConnectivityTlv *this)
{
  return *((unsigned __int8 *)this + 3);
}

{
  return __ZNK2ot3Mle15ConnectivityTlv15GetLinkQuality3Ev(this);
}

uint64_t ot::Mle::ConnectivityTlv::GetSedBufferSize(ot::Mle::ConnectivityTlv *this)
{
  unsigned __int16 v3 = 1280;
  if (ot::Mle::ConnectivityTlv::IsSedBufferingIncluded(this)) {
    return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)((char *)this + 9));
  }
  return v3;
}

{
  return __ZNK2ot3Mle15ConnectivityTlv16GetSedBufferSizeEv(this);
}

uint64_t ot::Mle::ConnectivityTlv::GetSedDatagramCount(ot::Mle::ConnectivityTlv *this)
{
  unsigned __int8 v3 = 1;
  if (ot::Mle::ConnectivityTlv::IsSedBufferingIncluded(this)) {
    return *((unsigned __int8 *)this + 11);
  }
  return v3;
}

{
  return __ZNK2ot3Mle15ConnectivityTlv19GetSedDatagramCountEv(this);
}

uint64_t ot::Mle::ConnectivityTlv::GetLinkQuality2(ot::Mle::ConnectivityTlv *this)
{
  return *((unsigned __int8 *)this + 4);
}

{
  return __ZNK2ot3Mle15ConnectivityTlv15GetLinkQuality2Ev(this);
}

uint64_t ot::Mle::ConnectivityTlv::GetLinkQuality1(ot::Mle::ConnectivityTlv *this)
{
  return *((unsigned __int8 *)this + 5);
}

{
  return __ZNK2ot3Mle15ConnectivityTlv15GetLinkQuality1Ev(this);
}

unint64_t ot::Mle::Mle::CalcParentCslMetric(ot::Mle::Mle *this, const ot::Mac::CslAccuracy *a2)
{
  unint64_t v4 = 1000000 * (unint64_t)ot::Mle::Mle::GetCslTimeout(this) / 0x26C0;
  unint64_t v3 = 9920 * v4 * (v4 + 1) / 0xF4240 * ot::Mac::CslAccuracy::GetClockAccuracy(a2);
  return v3 + (unsigned __int16)ot::Mac::CslAccuracy::GetUncertaintyInMicrosec(a2) * v4;
}

uint64_t ot::Parent::GetCslAccuracy(ot::Parent *this)
{
  return (uint64_t)this + 247;
}

{
  return __ZNK2ot6Parent14GetCslAccuracyEv(this);
}

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)18,unsigned short>>( ot::Tlv *a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned short>(a1, 0x12u, a2, a4);
}

{
  return __ZN2ot3Tlv4FindINS_11UintTlvInfoILh18EtEEEE7otErrorRKNS_7MessageERNT_13UintValueTypeE(a1, a2, a3, a4);
}

uint64_t ot::Mle::Mle::RxMessage::ReadResponseTlv( ot::Mle::Mle::RxMessage *this, ot::Mle::Mle::Challenge *a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  return ot::Mle::Mle::RxMessage::ReadChallengeOrResponse(this, 4u, a2, a4, a5);
}

BOOL ot::Mle::Mle::Challenge::operator==(ot::Mle::Mle::Challenge *a1, uint64_t a2)
{
  return ot::Mle::Mle::Challenge::Matches(a1, (const unsigned __int8 *)a2, *(_BYTE *)(a2 + 8));
}

{
  return __ZNK2ot3Mle3Mle9ChallengeeqERKS2_(a1, a2);
}

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)16,unsigned char>>( ot::Tlv *a1, _BYTE *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned char>(a1, 0x10u, a2, a4);
}

{
  return __ZN2ot3Tlv4FindINS_11UintTlvInfoILh16EhEEEE7otErrorRKNS_7MessageERNT_13UintValueTypeE(a1, a2, a3, a4);
}

uint64_t ot::Tlv::FindTlv<ot::Mle::ConnectivityTlv>( ot::Tlv *a1, void *a2, uint64_t a3, uint64_t a4, ot::Tlv *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)0xF, 0xCu, a2, a5);
}

{
  return __ZN2ot3Tlv7FindTlvINS_3Mle15ConnectivityTlvEEE7otErrorRKNS_7MessageERT_(a1, a2, a3, a4, a5);
}

uint64_t ot::Mle::Mle::RxMessage::ReadCslClockAccuracyTlv( ot::Mle::Mle::RxMessage *this, ot::Mac::CslAccuracy *a2, uint64_t a3, uint64_t a4, ot::Tlv *a5)
{
  uint64_t v13 = this;
  int v12 = a2;
  unsigned int v11 = ot::Tlv::FindTlv<ot::Mle::CslClockAccuracyTlv>(this, v10, a3, a4, a5);
  if (!v11)
  {
    if (ot::Mle::CslClockAccuracyTlv::IsValid((ot::Mle::CslClockAccuracyTlv *)v10))
    {
      BOOL v8 = v12;
      Cslchar ClockAccuracy = ot::Mle::CslClockAccuracyTlv::GetCslClockAccuracy((ot::Mle::CslClockAccuracyTlv *)v10);
      ot::Mac::CslAccuracy::SetClockAccuracy(v8, CslClockAccuracy);
      uint64_t v9 = v12;
      Cslchar Uncertainty = ot::Mle::CslClockAccuracyTlv::GetCslUncertainty((ot::Mle::CslClockAccuracyTlv *)v10);
      ot::Mac::CslAccuracy::SetUncertainty((uint64_t)v9, CslUncertainty);
    }

    else
    {
      return 6;
    }
  }

  return v11;
}

uint64_t ot::Mle::ConnectivityTlv::GetIdSequence(ot::Mle::ConnectivityTlv *this)
{
  return *((unsigned __int8 *)this + 7);
}

{
  return __ZNK2ot3Mle15ConnectivityTlv13GetIdSequenceEv(this);
}

uint64_t ot::Mle::ConnectivityTlv::GetActiveRouters(ot::Mle::ConnectivityTlv *this)
{
  return *((unsigned __int8 *)this + 8);
}

{
  return __ZNK2ot3Mle15ConnectivityTlv16GetActiveRoutersEv(this);
}

uint64_t ot::Mle::Mle::RxMessage::ReadFrameCounterTlvs( ot::Mle::Mle::RxMessage *this, unsigned int *a2, unsigned int *a3, unsigned __int16 *a4)
{
  unsigned int v9 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)5,unsigned int>>(this, a2, (uint64_t)a3, a4);
  if (!v9)
  {
    int v7 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)8,unsigned int>>(this, a3, v4, v5);
    if (v7)
    {
      if (v7 == 23) {
        *a3 = *a2;
      }
      else {
        return 6;
      }
    }
  }

  return v9;
}

uint64_t ot::Mle::Mle::RxMessage::ReadChallengeTlv( ot::Mle::Mle::RxMessage *this, ot::Mle::Mle::Challenge *a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  return ot::Mle::Mle::RxMessage::ReadChallengeOrResponse(this, 3u, a2, a4, a5);
}

uint64_t ot::Mle::Mle::RxMessage::ReadVendorDataTlv( ot::Mle::Mle::RxMessage *this, BOOL *a2, unsigned __int16 *a3, unsigned __int16 *a4, ot::Tlv *a5)
{
  unsigned int v18 = this;
  uint64_t v17 = a2;
  uint64_t v16 = a3;
  uint64_t v15 = a4;
  if ((ot::Mle::VendorDataTlv::IsValid((ot::Mle::VendorDataTlv *)v14) & 1) != 0)
  {
    BOOL *v17 = 1;
    unsigned __int16 VendorIdentifier = ot::Mle::VendorDataTlv::GetVendorIdentifier((ot::Mle::VendorDataTlv *)v14);
    unsigned __int16 *v16 = VendorIdentifier;
    unsigned __int16 VendorSpecificInformation = ot::Mle::VendorDataTlv::GetVendorSpecificInformation((ot::Mle::VendorDataTlv *)v14);
    unsigned __int16 *v15 = VendorSpecificInformation;
    ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mle::kLogModuleName,  "ReadVendorData isOptionalDataPresent=%d vendorId=%d vendorInfo=%d",  v7,  v8,  v9,  v10,  v11,  v12,  *v17);
    return 0;
  }

  return 6;
}

uint64_t ot::Router::SetLinkQualityOut(uint64_t result, char a2)
{
  *(_BYTE *)(result + 245) = *(_BYTE *)(result + 245) & 0xFC | a2 & 3;
  return result;
}

{
  return __ZN2ot6Router17SetLinkQualityOutENS_11LinkQualityE(result, a2);
}

uint64_t ot::Parent::SetLeaderCost(uint64_t this, char a2)
{
  *(_BYTE *)(this + 246) = a2;
  return this;
}

{
  return __ZN2ot6Parent13SetLeaderCostEh(this, a2);
}

uint64_t ot::Mle::ConnectivityTlv::GetLeaderCost(ot::Mle::ConnectivityTlv *this)
{
  return *((unsigned __int8 *)this + 6);
}

{
  return __ZNK2ot3Mle15ConnectivityTlv13GetLeaderCostEv(this);
}

uint64_t ot::Mac::CslAccuracy::GetUncertainty(ot::Mac::CslAccuracy *this)
{
  return *((unsigned __int8 *)this + 1);
}

{
  return __ZNK2ot3Mac11CslAccuracy14GetUncertaintyEv(this);
}

uint64_t ot::Parent::SetCslAccuracy(uint64_t this, const ot::Mac::CslAccuracy *a2)
{
  *(_WORD *)(this + 247) = *(_WORD *)a2;
  return this;
}

{
  return __ZN2ot6Parent14SetCslAccuracyERKNS_3Mac11CslAccuracyE(this, a2);
}

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)10,unsigned short>>( ot::Tlv *a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned short>(a1, 0xAu, a2, a4);
}

{
  return __ZN2ot3Tlv4FindINS_11UintTlvInfoILh10EtEEEE7otErrorRKNS_7MessageERNT_13UintValueTypeE(a1, a2, a3, a4);
}

void *ot::Mle::Mle::ParentCandidate::CopyTo(ot::Mle::Mle::ParentCandidate *this, ot::Parent *a2)
{
  return memcpy(a2, this, 0xF9uLL);
}

ot::Mle::Mle::TlvList *ot::Mle::Mle::TlvList::TlvList(ot::Mle::Mle::TlvList *this)
{
  return this;
}

{
  ot::Array<unsigned char,(unsigned short)32,unsigned char>::Array((uint64_t)this);
  return this;
}

void ot::Mle::Mle::TlvList::Add(ot::Mle::Mle::TlvList *this, char a2)
{
  uint64_t v10 = this;
  char v9 = a2;
  if (!ot::Array<unsigned char,(unsigned short)32,unsigned char>::Contains((uint64_t)this, (unsigned __int8 *)&v9))
  {
    if (ot::Array<unsigned char,(unsigned short)32,unsigned char>::PushBack((uint64_t)this, &v9)) {
      ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mle::kLogModuleName,  "Failed to include TLV %d",  v2,  v3,  v4,  v5,  v6,  v7,  v9);
    }
  }

uint64_t ot::Tlv::Find<ot::Mle::StatusTlv>(ot::Tlv *a1, _BYTE *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned char>(a1, 0x11u, a2, a4);
}

{
  return __ZN2ot3Tlv4FindINS_3Mle9StatusTlvEEE7otErrorRKNS_7MessageERNT_13UintValueTypeE(a1, a2, a3, a4);
}

uint64_t ot::Mle::Mle::RxMessage::ReadTlvRequestTlv( ot::Mle::Mle::RxMessage *this, ot::Mle::Mle::TlvList *a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  uint64_t v14 = this;
  uint64_t v13 = a2;
  TlvValueunsigned __int16 Offset = ot::Tlv::FindTlvValueOffset(this, (const ot::Message *)0xD, &v11, &v10, a5);
  if (!TlvValueOffset)
  {
    int v8 = v10;
    if (v8 > ot::Array<unsigned char,(unsigned short)32,unsigned char>::GetMaxSize())
    {
      LOBYTE(v10) = ot::Array<unsigned char,(unsigned short)32,unsigned char>::GetMaxSize();
      unsigned __int16 v10 = v10;
    }

    unsigned __int16 v7 = v11;
    ot::Array<unsigned char,(unsigned short)32,unsigned char>::GetArrayBuffer();
    ot::Message::ReadBytes(this, v7, v5, v10);
    ot::Array<unsigned char,(unsigned short)32,unsigned char>::SetLength((uint64_t)v13, v10);
  }

  return TlvValueOffset;
}

void ot::Mle::Mle::TlvList::AddElementsFrom(ot::Mle::Mle::TlvList *this, const ot::Mle::Mle::TlvList *a2)
{
  uint64_t v5 = v2;
  uint64_t v4 = ot::Array<unsigned char,(unsigned short)32,unsigned char>::end((uint64_t)a2);
}

uint64_t ot::Neighbor::ClearLastRxFragmentTag(uint64_t this)
{
  *(_WORD *)(this + 84) = 0;
  return this;
}

{
  return __ZN2ot8Neighbor22ClearLastRxFragmentTagEv(this);
}

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)1,unsigned char>>( ot::Tlv *a1, _BYTE *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned char>(a1, 1u, a2, a4);
}

{
  return __ZN2ot3Tlv4FindINS_11UintTlvInfoILh1EhEEEE7otErrorRKNS_7MessageERNT_13UintValueTypeE(a1, a2, a3, a4);
}

BOOL ot::Equatable<ot::Mle::DeviceMode>::operator==(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 1uLL) == 0;
}

{
  return __ZNK2ot9EquatableINS_3Mle10DeviceModeEEeqERKS2_(a1, a2);
}

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)2,unsigned int>>( ot::Tlv *a1, unsigned int *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned int>(a1, 2u, a2, a4);
}

{
  return __ZN2ot3Tlv4FindINS_11UintTlvInfoILh2EjEEEE7otErrorRKNS_7MessageERNT_13UintValueTypeE(a1, a2, a3, a4);
}

BOOL ot::Mle::Mle::IsDetachingGracefully(ot::Mle::Mle *this)
{
  return ot::Timer::IsRunning((ot::Mle::Mle *)((char *)this + 1152));
}

{
  return __ZN2ot3Mle3Mle21IsDetachingGracefullyEv(this);
}

uint64_t ot::Tlv::FindTlv<ot::Mle::ChannelTlv>(ot::Tlv *a1, void *a2, uint64_t a3, uint64_t a4, ot::Tlv *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)0x14, 5u, a2, a5);
}

{
  return __ZN2ot3Tlv7FindTlvINS_3Mle10ChannelTlvEEE7otErrorRKNS_7MessageERT_(a1, a2, a3, a4, a5);
}

BOOL ot::Mle::ChannelTlv::IsValid(ot::Mle::ChannelTlv *this)
{
  return ot::Tlv::GetLength(this) >= 3uLL;
}

{
  return __ZNK2ot3Mle10ChannelTlv7IsValidEv(this);
}

uint64_t ot::Mle::ChannelTlv::GetChannel(ot::Mle::ChannelTlv *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)((char *)this + 3));
}

{
  return __ZNK2ot3Mle10ChannelTlv10GetChannelEv(this);
}

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)21,unsigned short>>( ot::Tlv *a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned short>(a1, 0x15u, a2, a4);
}

{
  return __ZN2ot3Tlv4FindINS_11UintTlvInfoILh21EtEEEE7otErrorRKNS_7MessageERNT_13UintValueTypeE(a1, a2, a3, a4);
}

BOOL ot::MeshCoP::Timestamp::IsOrphanTimestamp(ot::MeshCoP::Timestamp *this)
{
  BOOL v3 = 0;
  if (!ot::MeshCoP::Timestamp::GetSeconds(this))
  {
    BOOL v3 = 0;
  }

  return v3;
}

{
  return __ZNK2ot7MeshCoP9Timestamp17IsOrphanTimestampEv(this);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::LinkMetrics::Subject>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::LinkMetrics::Subject>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_11LinkMetrics7SubjectEEERT_v(a1);
}

uint64_t ot::Mle::Mle::GetNextHop(ot::Mle::Mle *this)
{
  else {
    return (unsigned __int16)-2;
  }
}

uint64_t ot::Mle::Mle::GetParentInfo(uint64_t a1, ot::Router::Info *a2)
{
  unsigned int v4 = 0;
  if (ot::Mle::Mle::IsChild((ot::Mle::Mle *)a1)) {
    ot::Router::Info::SetFrom(a2, (const ot::Parent *)(a1 + 48));
  }
  else {
    return 13;
  }
  return v4;
}

BOOL ot::Mle::Mle::IsMeshLocalAddress(ot::Mle::Mle *this, const ot::Ip6::Address *a2)
{
  uint64_t v6 = v2;
  ot::Mle::Mle::GetMeshLocalPrefix(this);
  return ot::Equatable<ot::Ip6::NetworkPrefix>::operator==(v6, v3);
}

uint64_t ot::Mle::Mle::CheckReachability(ot::Mle::Mle *this, unsigned __int16 a2, const ot::Ip6::Header *a3)
{
  char v17 = a2;
  if (a2 == (unsigned __int16)ot::Mle::Mle::GetRloc16(this)
    && (uint64_t v13 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this),
        BOOL v3 = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination(a3),
        !ot::Ip6::Netif::HasUnicastAddress(v13, v3)))
  {
    ot::Mle::Mle::GetRloc16(this);
    Source = (ot::Ip6::Address *)ot::Ip6::Header::GetSource(a3);
    ot::Ip6::Address::ToString(Source, (ot::StringWriter *)v19);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v19);
    Destination = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination(a3);
    ot::Ip6::Address::ToString(Destination, (ot::StringWriter *)v18);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v18);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mle::kLogModuleName,  "Check reachability to %hu returns NoRoute: rloc16:0x%x (ipv6.src:%s ipv6.dst:%s)",  v6,  v7,  v8,  v9,  v10,  v11,  v17);
    return 4;
  }

  else
  {
    return 0;
  }

char *ot::Mle::Mle::MessageActionToString(unsigned __int8 a1)
{
  return ot::Mle::Mle::MessageActionToString(ot::Mle::Mle::MessageAction)::kMessageActionStrings[a1];
}

char *ot::Mle::Mle::MessageTypeToString(unsigned __int8 a1)
{
  return ot::Mle::Mle::MessageTypeToString(ot::Mle::Mle::MessageType)::kMessageTypeStrings[a1];
}

const char *ot::Mle::Mle::MessageTypeActionToSuffixString(unsigned __int8 a1)
{
  unint64_t v2 = a1 - 3;
  if (v2 <= 0x13) {
    __asm { BR              X8 }
  }

  return "";
}

void ot::Mle::Mle::LogError(char a1, unsigned __int8 a2, int a3)
{
  if (a3)
  {
    if (a1 == 1 && (a3 == 2 || a3 == 4))
    {
      ot::Mle::Mle::MessageTypeToString(a2);
      ot::Mle::Mle::MessageTypeActionToSuffixString(a2);
      ot::ErrorToString(a3);
      ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)&ot::Mle::kLogModuleName,  "Failed to %s %s%s: %s",  v3,  v4,  v5,  v6,  v7,  v8,  (char)"process");
    }

    else
    {
      uint64_t v9 = "send";
      if (a1) {
        uint64_t v9 = "process";
      }
      char v16 = (char)v9;
      ot::Mle::Mle::MessageTypeToString(a2);
      ot::Mle::Mle::MessageTypeActionToSuffixString(a2);
      ot::ErrorToString(a3);
      ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mle::kLogModuleName,  "Failed to %s %s%s: %s",  v10,  v11,  v12,  v13,  v14,  v15,  v16);
    }
  }

void ot::Mle::Mle::LogSendError(unsigned __int8 a1, int a2)
{
}

uint64_t ot::Mle::Mle::SendLinkMetricsManagementRequest(ot::Mle::Mle *this, __n128 *a2, const ot::Tlv *a3)
{
  uint64_t v10 = this;
  uint64_t v9 = a2;
  uint64_t v8 = a3;
  unsigned int v7 = 0;
  uint64_t v6 = ot::Mle::Mle::NewMleMessage((uint64_t)this, 0x12u);
  if (v6)
  {
    ot::Mle::Tlv::SetType(v5, 88);
    char Size = ot::Tlv::GetSize(v8);
    ot::Tlv::SetLength((uint64_t)v5, Size);
    unsigned int v7 = ot::Message::Append<ot::Mle::Tlv>(v6, v5);
    if (!v7)
    {
      unsigned int v7 = ot::Tlv::AppendTo(v8, v6);
      if (!v7) {
        unsigned int v7 = ot::Mle::Mle::TxMessage::SendTo(v6, v9);
      }
    }
  }

  else
  {
    unsigned int v7 = 3;
  }

  if (v7 && v6) {
    ot::Message::Free(v6);
  }
  return v7;
}

uint64_t ot::Mle::Mle::DetachGracefully(ot::Mle::Mle *this, void (*a2)(void *), uint64_t a3)
{
  unsigned int v6 = 0;
  if (ot::Mle::Mle::IsDetachingGracefully(this))
  {
    return 5;
  }

  else
  {
    ot::CallbackBase<void (*)(void *)>::Set((void *)this + 147, (uint64_t)a2, a3);
    unint64_t v4 = *((unsigned __int8 *)this + 41);
    if (v4 <= 4) {
      __asm { BR              X8 }
    }

    ot::TimerMilli::Start((ot::Mle::Mle *)((char *)this + 1152), 0x3E8u);
  }

  return v6;
}

void *ot::CallbackBase<void (*)(void *)>::Set(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1] = a3;
  return result;
}

{
  return __ZN2ot12CallbackBaseIPFvPvEE3SetES3_S1_(result, a2, a3);
}

BOOL ot::Array<unsigned char,(unsigned short)32,unsigned char>::Contains(uint64_t a1, unsigned __int8 *a2)
{
  return ot::Array<unsigned char,(unsigned short)32,unsigned char>::Find(a1, a2) != 0LL;
}

{
  return __ZNK2ot5ArrayIhLt32EhE8ContainsERKh(a1, a2);
}

uint64_t ot::Array<unsigned char,(unsigned short)32,unsigned char>::PushBack(uint64_t a1, char *a2)
{
  if (ot::Array<unsigned char,(unsigned short)32,unsigned char>::IsFull(a1))
  {
    return 3;
  }

  else
  {
    char v2 = *a2;
    uint64_t v3 = (*(_BYTE *)(a1 + 32))++;
    *(_BYTE *)(a1 + v3) = v2;
    return 0;
  }

{
  return __ZN2ot5ArrayIhLt32EhE8PushBackERKh(a1, a2);
}

BOOL ot::Mle::Mle::Challenge::Matches( ot::Mle::Mle::Challenge *this, const unsigned __int8 *a2, unsigned __int8 a3)
{
  BOOL v4 = 0;
  return v4;
}

uint64_t ot::Message::Read<ot::Mle::Mle::DelayedResponseMetadata>( ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0x14u);
}

{
  return __ZNK2ot7Message4ReadINS_3Mle3Mle23DelayedResponseMetadataEEE7otErrortRT_(a1, a2, a3);
}

_BYTE *ot::Mle::Mle::SecurityHeader::InitSecurityControl(_BYTE *this)
{
  *this = 21;
  return this;
}

{
  return __ZN2ot3Mle3Mle14SecurityHeader19InitSecurityControlEv(this);
}

uint64_t ot::Message::Append<ot::Mle::Mle::SecurityHeader>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 0xAu);
}

{
  return __ZN2ot7Message6AppendINS_3Mle3Mle14SecurityHeaderEEE7otErrorRKT_(a1, a2);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)0,unsigned short>>(uint64_t a1, unsigned __int16 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned short>(a1, 0, a2);
}

{
  return __ZN2ot3Tlv6AppendINS_11UintTlvInfoILh0EtEEEE7otErrorRNS_7MessageENT_13UintValueTypeE(a1, a2);
}

uint64_t ot::Tlv::Append<ot::Mle::StatusTlv>(uint64_t a1, unsigned __int8 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned char>(a1, 17, a2);
}

{
  return __ZN2ot3Tlv6AppendINS_3Mle9StatusTlvEEE7otErrorRNS_7MessageENT_13UintValueTypeE(a1, a2);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)2,unsigned int>>(ot::Tlv *a1, unsigned int a2)
{
  return ot::Tlv::AppendUintTlv<unsigned int>(a1, 2u, a2);
}

{
  return __ZN2ot3Tlv6AppendINS_11UintTlvInfoILh2EjEEEE7otErrorRNS_7MessageENT_13UintValueTypeE(a1, a2);
}

uint64_t ot::Tlv::Append<ot::TlvInfo<(unsigned char)3>>(ot::Tlv *a1, void *a2, unsigned __int8 a3)
{
  return ot::Tlv::AppendTlv(a1, (ot::Message *)3, a2, (const void *)a3);
}

{
  return __ZN2ot3Tlv6AppendINS_7TlvInfoILh3EEEEE7otErrorRNS_7MessageEPKvh(a1, a2, a3);
}

uint64_t ot::Mle::Mle::TxMessage::AppendChallengeTlv( ot::Mle::Mle::TxMessage *this, unsigned __int8 *a2, unsigned __int8 a3)
{
  return ot::Tlv::Append<ot::TlvInfo<(unsigned char)3>>(this, a2, a3);
}

uint64_t ot::Tlv::Append<ot::TlvInfo<(unsigned char)4>>(ot::Tlv *a1, void *a2, unsigned __int8 a3)
{
  return ot::Tlv::AppendTlv(a1, (ot::Message *)4, a2, (const void *)a3);
}

{
  return __ZN2ot3Tlv6AppendINS_7TlvInfoILh4EEEEE7otErrorRNS_7MessageEPKvh(a1, a2, a3);
}

uint64_t ot::GetProvider<ot::Message>::Get<ot::KeyManager>(ot::Message *a1)
{
  Instance = ot::Message::GetInstance(a1);
  return ot::Instance::Get<ot::KeyManager>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_7MessageEE3GetINS_10KeyManagerEEERT_v(a1);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)5,unsigned int>>(ot::Tlv *a1, unsigned int a2)
{
  return ot::Tlv::AppendUintTlv<unsigned int>(a1, 5u, a2);
}

{
  return __ZN2ot3Tlv6AppendINS_11UintTlvInfoILh5EjEEEE7otErrorRNS_7MessageENT_13UintValueTypeE(a1, a2);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)8,unsigned int>>(ot::Tlv *a1, unsigned int a2)
{
  return ot::Tlv::AppendUintTlv<unsigned int>(a1, 8u, a2);
}

{
  return __ZN2ot3Tlv6AppendINS_11UintTlvInfoILh8EjEEEE7otErrorRNS_7MessageENT_13UintValueTypeE(a1, a2);
}

uint64_t ot::Mle::Mle::TxMessage::AppendAddress16Tlv(ot::Mle::Mle::TxMessage *this, unsigned __int16 a2)
{
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)10,unsigned short>>((uint64_t)this, a2);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)10,unsigned short>>(uint64_t a1, unsigned __int16 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned short>(a1, 10, a2);
}

{
  return __ZN2ot3Tlv6AppendINS_11UintTlvInfoILh10EtEEEE7otErrorRNS_7MessageENT_13UintValueTypeE(a1, a2);
}

uint64_t ot::Mle::LeaderDataTlv::Init(ot::Mle::LeaderDataTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 8);
}

{
  return __ZN2ot3Mle13LeaderDataTlv4InitEv(this);
}

uint64_t ot::Mle::LeaderDataTlv::Set(ot::Mle::LeaderDataTlv *this, const ot::Mle::LeaderData *a2)
{
  int PartitionId = (ot::Encoding::BigEndian *)ot::Mle::LeaderData::GetPartitionId(a2);
  *(_DWORD *)((char *)this + 2) = ot::Encoding::BigEndian::HostSwap32(PartitionId);
  *((_BYTE *)this + 6) = ot::Mle::LeaderData::GetWeighting(a2);
  *((_BYTE *)this + 7) = ot::Mle::LeaderData::GetDataVersion((uint64_t)a2, 0);
  *((_BYTE *)this + 8) = ot::Mle::LeaderData::GetDataVersion((uint64_t)a2, 1);
  uint64_t result = ot::Mle::LeaderData::GetLeaderRouterId(a2);
  *((_BYTE *)this + 9) = result;
  return result;
}

{
  return __ZN2ot3Mle13LeaderDataTlv3SetERKNS0_10LeaderDataE(this, a2);
}

uint64_t ot::Mle::Mle::TxMessage::AppendNetworkDataTlv(ot::Message *a1, char a2)
{
  uint64_t v8 = a1;
  char v7 = a2;
  int v6 = 0;
  if ((*(_BYTE *)(ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(a1) + 40) & 1) != 0)
  {
    return 13;
  }

  else
  {
    unsigned __int8 v5 = -2;
    char v2 = (ot::InstanceLocator *)ot::GetProvider<ot::Message>::Get<ot::NetworkData::Leader>(a1);
    ot::NetworkData::NetworkData::CopyNetworkData(v2, v7, v9, (char *)&v5);
    IgnoreError();
    return ot::Tlv::Append<ot::TlvInfo<(unsigned char)12>>(a1, v9, v5);
  }

uint64_t ot::Tlv::Append<ot::TlvInfo<(unsigned char)12>>(ot::Tlv *a1, void *a2, unsigned __int8 a3)
{
  return ot::Tlv::AppendTlv(a1, (ot::Message *)0xC, a2, (const void *)a3);
}

{
  return __ZN2ot3Tlv6AppendINS_7TlvInfoILh12EEEEE7otErrorRNS_7MessageEPKvh(a1, a2, a3);
}

uint64_t ot::Tlv::Append<ot::TlvInfo<(unsigned char)13>>(ot::Tlv *a1, void *a2, unsigned __int8 a3)
{
  return ot::Tlv::AppendTlv(a1, (ot::Message *)0xD, a2, (const void *)a3);
}

{
  return __ZN2ot3Tlv6AppendINS_7TlvInfoILh13EEEEE7otErrorRNS_7MessageEPKvh(a1, a2, a3);
}

uint64_t ot::Tlv::Append<ot::Mle::ScanMaskTlv>(uint64_t a1, unsigned __int8 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned char>(a1, 14, a2);
}

{
  return __ZN2ot3Tlv6AppendINS_3Mle11ScanMaskTlvEEE7otErrorRNS_7MessageENT_13UintValueTypeE(a1, a2);
}

uint64_t ot::Mle::Mle::TxMessage::AppendLinkMarginTlv(ot::Mle::Mle::TxMessage *this, unsigned __int8 a2)
{
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)16,unsigned char>>((uint64_t)this, a2);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)16,unsigned char>>(uint64_t a1, unsigned __int8 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned char>(a1, 16, a2);
}

{
  return __ZN2ot3Tlv6AppendINS_11UintTlvInfoILh16EhEEEE7otErrorRNS_7MessageENT_13UintValueTypeE(a1, a2);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)18,unsigned short>>(uint64_t a1, unsigned __int16 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned short>(a1, 18, a2);
}

{
  return __ZN2ot3Tlv6AppendINS_11UintTlvInfoILh18EtEEEE7otErrorRNS_7MessageENT_13UintValueTypeE(a1, a2);
}

uint64_t ot::Mle::Mle::TxMessage::AppendCompressedAddressEntry( ot::Mle::Mle::TxMessage *this, unsigned __int8 a2, const ot::Ip6::Address *a3)
{
  uint64_t v10 = this;
  unsigned __int8 v9 = a2;
  uint64_t v8 = a3;
  char v6 = ot::Mle::AddressRegistrationTlv::ControlByteFor((ot::Mle::AddressRegistrationTlv *)a2);
  unsigned int v7 = ot::Message::Append<unsigned char>(this, &v6);
  if (!v7)
  {
    Iid = (char *)ot::Ip6::Address::GetIid(v8);
    return ot::Message::Append<ot::Ip6::InterfaceIdentifier>(this, Iid);
  }

  return v7;
}

uint64_t ot::GetProvider<ot::Message>::Get<ot::ThreadNetif>(ot::Message *a1)
{
  Instance = ot::Message::GetInstance(a1);
  return ot::Instance::Get<ot::ThreadNetif>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_7MessageEE3GetINS_11ThreadNetifEEERT_v(a1);
}

uint64_t ot::GetProvider<ot::Message>::Get<ot::DuaManager>(ot::Message *a1)
{
  Instance = ot::Message::GetInstance(a1);
  return ot::Instance::Get<ot::DuaManager>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_7MessageEE3GetINS_10DuaManagerEEERT_v(a1);
}

uint64_t ot::Mle::Mle::TxMessage::AppendAddressEntry( ot::Mle::Mle::TxMessage *this, const ot::Ip6::Address *a2)
{
  unsigned int v7 = this;
  char v6 = (char *)a2;
  char v4 = 0;
  unsigned int v5 = ot::Message::Append<unsigned char>(this, &v4);
  if (!v5) {
    return ot::Message::Append<ot::Ip6::Address>(this, v6);
  }
  return v5;
}

uint64_t ot::Ip6::Netif::IterateExternalMulticastAddresses(uint64_t a1, char a2)
{
  return v3;
}

{
  return __ZN2ot3Ip65Netif33IterateExternalMulticastAddressesENS0_7Address10TypeFilterE(a1, a2);
}

uint64_t ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::begin@<X0>( ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder *this@<X0>, uint64_t a2@<X8>)
{
  return ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Iterator(a2, *(void *)this, *((_BYTE *)this + 8));
}

{
  return __ZN2ot3Ip65Netif24ExternalMulticastAddress8Iterator7Builder5beginEv(this, a2);
}

void *ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::end@<X0>( ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder *this@<X0>, void *a2@<X8>)
{
  return ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Iterator(a2, *(void *)this);
}

{
  return __ZN2ot3Ip65Netif24ExternalMulticastAddress8Iterator7Builder3endEv(this, a2);
}

BOOL ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator!=( void *a1, void *a2)
{
  return *a1 != *a2;
}

{
  return __ZNK2ot15ItemPtrIteratorINS_3Ip65Netif24ExternalMulticastAddressENS3_8IteratorEEneERKS4_(a1, a2);
}

uint64_t ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator*( uint64_t a1)
{
  return *(void *)a1;
}

{
  return __ZN2ot15ItemPtrIteratorINS_3Ip65Netif24ExternalMulticastAddressENS3_8IteratorEEdeEv(a1);
}

void ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator++( ot::Ip6::Netif::ExternalMulticastAddress **a1)
{
}

{
  __ZN2ot15ItemPtrIteratorINS_3Ip65Netif24ExternalMulticastAddressENS3_8IteratorEEppEv(a1);
}

uint64_t ot::Message::Write<ot::Mle::Tlv>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::WriteBytes(a1, a2, a3, 2u);
}

{
  return __ZN2ot7Message5WriteINS_3Mle3TlvEEEvtRKT_(a1, a2, a3);
}

uint64_t ot::Mle::AddressRegistrationTlv::ControlByteFor(ot::Mle::AddressRegistrationTlv *this)
{
  return this & 0xF | 0x80u;
}

{
  return __ZN2ot3Mle22AddressRegistrationTlv14ControlByteForEh(this);
}

uint64_t ot::Message::Append<ot::Ip6::InterfaceIdentifier>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 8u);
}

{
  return __ZN2ot7Message6AppendINS_3Ip619InterfaceIdentifierEEE7otErrorRKT_(a1, a2);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)27,unsigned short>>(uint64_t a1, unsigned __int16 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned short>(a1, 27, a2);
}

{
  return __ZN2ot3Tlv6AppendINS_11UintTlvInfoILh27EtEEEE7otErrorRNS_7MessageENT_13UintValueTypeE(a1, a2);
}

uint64_t ot::GetProvider<ot::Message>::Get<ot::MeshCoP::ActiveDatasetManager>(ot::Message *a1)
{
  Instance = ot::Message::GetInstance(a1);
  return ot::Instance::Get<ot::MeshCoP::ActiveDatasetManager>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_7MessageEE3GetINS_7MeshCoP20ActiveDatasetManagerEEERT_v(a1);
}

uint64_t ot::GetProvider<ot::Message>::Get<ot::MeshCoP::PendingDatasetManager>(ot::Message *a1)
{
  Instance = ot::Message::GetInstance(a1);
  return ot::Instance::Get<ot::MeshCoP::PendingDatasetManager>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_7MessageEE3GetINS_7MeshCoP21PendingDatasetManagerEEERT_v(a1);
}

uint64_t ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)23,ot::MeshCoP::Timestamp>>(ot::Tlv *a1, void *a2)
{
  return ot::Tlv::AppendTlv(a1, (ot::Message *)0x17, a2, (const void *)8);
}

{
  return __ZN2ot3Tlv6AppendINS_13SimpleTlvInfoILh23ENS_7MeshCoP9TimestampEEEEE7otErrorRNS_7MessageERKNT_9ValueTypeE( a1,  a2);
}

uint64_t ot::Mle::Mle::TxMessage::AppendVendorDataTlv( ot::Mle::Mle::TxMessage *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v28 = this;
  unsigned int v27 = 0;
  unsigned __int16 Mode = 0;
  ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mle::kLogModuleName,  "Inside Mle::AppendVendorDataTlv",  a3,  a4,  a5,  a6,  a7,  a8,  v23);
  ot::Mle::VendorDataTlv::Init((ot::Mle::VendorDataTlv *)v25);
  ot::Mle::VendorDataTlv::SetVendorIdentifier((ot::Mle::VendorDataTlv *)v25, 0xA0B0u);
  Instance = ot::Message::GetInstance(this);
  unsigned __int16 Mode = otPowerControlGetMode((uint64_t)Instance, v9, v10, v11, v12, v13, v14, v15);
  ot::Mle::VendorDataTlv::SetVendorSpecificInformation((ot::Mle::VendorDataTlv *)v25, Mode);
  unsigned int v27 = ot::Message::Append<ot::Mle::VendorDataTlv>(this, v25);
  if (!v27) {
    ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mle::kLogModuleName,  "AppendVendorDataTlv vendorInfo(powerControlMode)=%d vendorId(%d) added",  v16,  v17,  v18,  v19,  v20,  v21,  Mode);
  }
  return v27;
}

uint64_t ot::Mle::VendorDataTlv::Init(ot::Mle::VendorDataTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 4);
}

{
  return __ZN2ot3Mle13VendorDataTlv4InitEv(this);
}

uint64_t ot::Mle::VendorDataTlv::SetVendorIdentifier(ot::Mle::VendorDataTlv *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + 1) = result;
  return result;
}

{
  return __ZN2ot3Mle13VendorDataTlv19SetVendorIdentifierEt(this, a2);
}

uint64_t ot::Mle::VendorDataTlv::SetVendorSpecificInformation( ot::Mle::VendorDataTlv *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + 2) = result;
  return result;
}

{
  return __ZN2ot3Mle13VendorDataTlv28SetVendorSpecificInformationEt(this, a2);
}

uint64_t ot::Message::Append<ot::Mle::VendorDataTlv>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 6u);
}

{
  return __ZN2ot7Message6AppendINS_3Mle13VendorDataTlvEEE7otErrorRKT_(a1, a2);
}

uint64_t ot::Mle::CslChannelTlv::Init(ot::Mle::CslChannelTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 3);
}

{
  return __ZN2ot3Mle13CslChannelTlv4InitEv(this);
}

uint64_t ot::Mle::CslChannelTlv::SetChannelPage(uint64_t this, char a2)
{
  *(_BYTE *)(this + 2) = a2;
  return this;
}

{
  return __ZN2ot3Mle13CslChannelTlv14SetChannelPageEh(this, a2);
}

uint64_t ot::Mle::CslChannelTlv::SetChannel(ot::Mle::CslChannelTlv *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *(_WORD *)((char *)this + 3) = result;
  return result;
}

{
  return __ZN2ot3Mle13CslChannelTlv10SetChannelEt(this, a2);
}

uint64_t ot::GetProvider<ot::Message>::Get<ot::Mac::Mac>(ot::Message *a1)
{
  Instance = ot::Message::GetInstance(a1);
  return ot::Instance::Get<ot::Mac::Mac>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_7MessageEE3GetINS_3Mac3MacEEERT_v(a1);
}

uint64_t ot::Message::Append<ot::Mle::CslChannelTlv>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 5u);
}

{
  return __ZN2ot7Message6AppendINS_3Mle13CslChannelTlvEEE7otErrorRKT_(a1, a2);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)85,unsigned int>>(ot::Tlv *a1, unsigned int a2)
{
  return ot::Tlv::AppendUintTlv<unsigned int>(a1, 0x55u, a2);
}

{
  return __ZN2ot3Tlv6AppendINS_11UintTlvInfoILh85EjEEEE7otErrorRNS_7MessageENT_13UintValueTypeE(a1, a2);
}

uint64_t ot::Mle::Mle::TxMessage::AppendCslClockAccuracyTlv(ot::Mle::Mle::TxMessage *this)
{
  uint64_t v8 = this;
  uint64_t v1 = (ot::Radio *)ot::GetProvider<ot::Message>::Get<ot::Radio>(this);
  Cslchar Uncertainty = ot::Radio::GetCslUncertainty(v1);
  ot::Mle::CslClockAccuracyTlv::Init((ot::Mle::CslClockAccuracyTlv *)v7);
  char v2 = (ot::Radio *)ot::GetProvider<ot::Message>::Get<ot::Radio>(this);
  char CslAccuracy = ot::Radio::GetCslAccuracy(v2);
  ot::Mle::CslClockAccuracyTlv::SetCslClockAccuracy((uint64_t)v7, CslAccuracy);
  ot::Mle::CslClockAccuracyTlv::SetCslUncertainty((uint64_t)v7, CslUncertainty);
  return ot::Message::Append<ot::Mle::CslClockAccuracyTlv>(this, v7);
}

uint64_t ot::GetProvider<ot::Message>::Get<ot::Radio>(ot::Message *a1)
{
  Instance = ot::Message::GetInstance(a1);
  return ot::Instance::Get<ot::Radio>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_7MessageEE3GetINS_5RadioEEERT_v(a1);
}

uint64_t ot::Mle::CslClockAccuracyTlv::Init(ot::Mle::CslClockAccuracyTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 2);
}

{
  return __ZN2ot3Mle19CslClockAccuracyTlv4InitEv(this);
}

uint64_t ot::Mle::CslClockAccuracyTlv::SetCslClockAccuracy(uint64_t this, char a2)
{
  *(_BYTE *)(this + 2) = a2;
  return this;
}

{
  return __ZN2ot3Mle19CslClockAccuracyTlv19SetCslClockAccuracyEh(this, a2);
}

uint64_t ot::Mle::CslClockAccuracyTlv::SetCslUncertainty(uint64_t this, char a2)
{
  *(_BYTE *)(this + 3) = a2;
  return this;
}

{
  return __ZN2ot3Mle19CslClockAccuracyTlv17SetCslUncertaintyEh(this, a2);
}

uint64_t ot::Message::Append<ot::Mle::CslClockAccuracyTlv>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 4u);
}

{
  return __ZN2ot7Message6AppendINS_3Mle19CslClockAccuracyTlvEEE7otErrorRKT_(a1, a2);
}

uint64_t ot::Mle::Mle::SecurityHeader::SetFrameCounter(ot::Mle::Mle::SecurityHeader *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::LittleEndian::HostSwap32(a2);
  *(_DWORD *)((char *)this + 1) = result;
  return result;
}

{
  return __ZN2ot3Mle3Mle14SecurityHeader15SetFrameCounterEj(this, a2);
}

uint64_t ot::Mle::Mle::SecurityHeader::SetKeyId(ot::Mle::Mle::SecurityHeader *this, unsigned int a2)
{
  char v4 = a2;
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *(_DWORD *)((char *)this + 5) = result;
  *((_BYTE *)this + 9) = (v4 & 0x7F) + 1;
  return result;
}

{
  return __ZN2ot3Mle3Mle14SecurityHeader8SetKeyIdEj(this, a2);
}

uint64_t ot::Message::Write<ot::Mle::Mle::SecurityHeader>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::WriteBytes(a1, a2, a3, 0xAu);
}

{
  return __ZN2ot7Message5WriteINS_3Mle3Mle14SecurityHeaderEEEvtRKT_(a1, a2, a3);
}

uint64_t ot::Mle::Mle::DelayedResponseMetadata::AppendTo( ot::Mle::Mle::DelayedResponseMetadata *this, ot::Message *a2)
{
  return ot::Message::Append<ot::Mle::Mle::DelayedResponseMetadata>(a2, (char *)this);
}

{
  return __ZNK2ot3Mle3Mle23DelayedResponseMetadata8AppendToERNS_7MessageE(this, a2);
}

uint64_t ot::Mle::Mle::TxMessage::AppendConnectivityTlv(ot::Mle::Mle::TxMessage *this)
{
  unsigned int v5 = this;
  ot::Mle::ConnectivityTlv::Init((ot::Mle::ConnectivityTlv *)v4);
  uint64_t v1 = (ot::Mle::MleRouter *)ot::GetProvider<ot::Message>::Get<ot::Mle::MleRouter>(this);
  ot::Mle::MleRouter::FillConnectivityTlv(v1, (ot::Mle::ConnectivityTlv *)v4);
  return ot::Tlv::AppendTo((ot::Tlv *)v4, this);
}

uint64_t ot::Mle::ConnectivityTlv::Init(ot::Mle::ConnectivityTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 10);
}

{
  return __ZN2ot3Mle15ConnectivityTlv4InitEv(this);
}

uint64_t ot::GetProvider<ot::Message>::Get<ot::Mle::MleRouter>(ot::Message *a1)
{
  Instance = ot::Message::GetInstance(a1);
  return ot::Instance::Get<ot::Mle::MleRouter>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_7MessageEE3GetINS_3Mle9MleRouterEEERT_v(a1);
}

uint64_t ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(ot::Mle::Mle::TxMessage *this, ot::Child *a2)
{
  uint64_t v18 = this;
  uint64_t v17 = a2;
  unsigned __int16 Length = ot::Message::GetLength(this);
  ot::Mle::Tlv::SetType(v15, 19);
  unsigned int appended = ot::Message::Append<ot::Mle::Tlv>(this, v15);
  if (!appended)
  {
    v10[0] = ot::Child::IterateIp6Addresses((uint64_t)v17, 0);
    v10[1] = v2;
    uint64_t v11 = (ot::Child::AddressIteratorBuilder *)v10;
    ot::Child::AddressIteratorBuilder::begin((ot::Child::AddressIteratorBuilder *)v10, (uint64_t)v9);
    ot::Child::AddressIteratorBuilder::end(v11, (uint64_t)v8);
    while (ot::Unequatable<ot::Child::AddressIterator>::operator!=((uint64_t)v9, (uint64_t)v8))
    {
      unsigned int v7 = (ot::Ip6::Address *)ot::Child::AddressIterator::operator*((ot::Child::AddressIterator *)v9);
      if (ot::Ip6::Address::IsMulticast(v7)
        || (uint64_t v3 = (ot::InstanceLocator *)ot::GetProvider<ot::Message>::Get<ot::NetworkData::Leader>(this),
            ot::NetworkData::LeaderBase::GetContext(v3, v7, (ot::Ip6::Prefix *)v13)))
      {
        unsigned int appended = ot::Mle::Mle::TxMessage::AppendAddressEntry(this, v7);
        if (appended) {
          return appended;
        }
      }

      else if (v14)
      {
        unsigned int appended = ot::Mle::Mle::TxMessage::AppendCompressedAddressEntry(this, v14, v7);
        if (appended) {
          return appended;
        }
      }

      ot::Child::AddressIterator::operator++((ot::Child::AddressIterator *)v9);
    }

    char v4 = ot::Message::GetLength(this);
    ot::Tlv::SetLength((uint64_t)v15, v4 - Length - 2);
    ot::Message::Write<ot::Mle::Tlv>(this, Length, v15);
  }

  return appended;
}

uint64_t ot::Child::IterateIp6Addresses(uint64_t a1, char a2)
{
  return v3;
}

{
  return __ZNK2ot5Child19IterateIp6AddressesENS_3Ip67Address10TypeFilterE(a1, a2);
}

uint64_t ot::Child::AddressIteratorBuilder::begin@<X0>( ot::Child::AddressIteratorBuilder *this@<X0>, uint64_t a2@<X8>)
{
  return ot::Child::AddressIterator::AddressIterator(a2, *(void *)this, *((_BYTE *)this + 8));
}

{
  return __ZN2ot5Child22AddressIteratorBuilder5beginEv(this, a2);
}

uint64_t ot::Child::AddressIteratorBuilder::end@<X0>( ot::Child::AddressIteratorBuilder *this@<X0>, uint64_t a2@<X8>)
{
  return ot::Child::AddressIterator::AddressIterator(a2, *(void *)this);
}

{
  return __ZN2ot5Child22AddressIteratorBuilder3endEv(this, a2);
}

BOOL ot::Unequatable<ot::Child::AddressIterator>::operator!=(uint64_t a1, uint64_t a2)
{
  return !ot::Child::AddressIterator::operator==(a1, a2);
}

{
  return __ZNK2ot11UnequatableINS_5Child15AddressIteratorEEneERKS2_(a1, a2);
}

uint64_t ot::Child::AddressIterator::operator*(ot::Child::AddressIterator *a1)
{
  return ot::Child::AddressIterator::GetAddress(a1);
}

{
  return __ZNK2ot5Child15AddressIteratordeEv(a1);
}

uint64_t ot::Mle::Mle::TxMessage::AppendRouteTlv(ot::Mle::Mle::TxMessage *this, ot::Neighbor *a2)
{
  uint64_t v2 = (ot::RouterTable *)ot::GetProvider<ot::Message>::Get<ot::RouterTable>(this);
  ot::RouterTable::FillRouteTlv(v2, (ot::Mle::RouteTlv *)v6, a2);
  return ot::Tlv::AppendTo((ot::Tlv *)v6, this);
}

uint64_t ot::GetProvider<ot::Message>::Get<ot::RouterTable>(ot::Message *a1)
{
  Instance = ot::Message::GetInstance(a1);
  return ot::Instance::Get<ot::RouterTable>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_7MessageEE3GetINS_11RouterTableEEERT_v(a1);
}

uint64_t ot::Mle::Mle::TxMessage::AppendActiveDatasetTlv(ot::Mle::Mle::TxMessage *this)
{
  active = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::Message>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
  return ot::MeshCoP::DatasetManager::AppendMleDatasetTlv(active, this);
}

uint64_t ot::Mle::Mle::TxMessage::AppendPendingDatasetTlv(ot::Mle::Mle::TxMessage *this)
{
  uint64_t v1 = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::Message>::Get<ot::MeshCoP::PendingDatasetManager>(this);
  return ot::MeshCoP::DatasetManager::AppendMleDatasetTlv(v1, this);
}

uint64_t ot::Mle::Mle::RxMessage::ReadChallengeOrResponse( ot::Mle::Mle::RxMessage *this, unsigned __int8 a2, ot::Mle::Mle::Challenge *a3, uint64_t a4, unsigned __int16 *a5)
{
  uint64_t v12 = this;
  unsigned __int8 v11 = a2;
  uint64_t v10 = a3;
  TlvValueunsigned __int16 Offset = ot::Tlv::FindTlvValueOffset(this, (const ot::Message *)a2, &v8, &v7, a5);
  if (!TlvValueOffset)
  {
    if (v7 >= 4u)
    {
      unsigned __int16 v7 = ot::Min<unsigned short>(v7, 8u);
      ot::Message::ReadBytes(this, v8, (char *)v10, v7);
      *((_BYTE *)v10 + 8) = v7;
    }

    else
    {
      return 6;
    }
  }

  return TlvValueOffset;
}

uint64_t ot::Tlv::FindTlv<ot::Mle::VendorDataTlv>(ot::Tlv *a1, void *a2, uint64_t a3, uint64_t a4, ot::Tlv *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)0x5B, 6u, a2, a5);
}

{
  return __ZN2ot3Tlv7FindTlvINS_3Mle13VendorDataTlvEEE7otErrorRKNS_7MessageERT_(a1, a2, a3, a4, a5);
}

uint64_t ot::Mle::VendorDataTlv::IsValid(ot::Mle::VendorDataTlv *this)
{
  return 1LL;
}

{
  return __ZNK2ot3Mle13VendorDataTlv7IsValidEv(this);
}

uint64_t ot::Mle::VendorDataTlv::GetVendorIdentifier(ot::Mle::VendorDataTlv *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1));
}

{
  return __ZNK2ot3Mle13VendorDataTlv19GetVendorIdentifierEv(this);
}

uint64_t ot::Mle::VendorDataTlv::GetVendorSpecificInformation(ot::Mle::VendorDataTlv *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 2));
}

{
  return __ZNK2ot3Mle13VendorDataTlv28GetVendorSpecificInformationEv(this);
}

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)5,unsigned int>>( ot::Tlv *a1, unsigned int *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned int>(a1, 5u, a2, a4);
}

{
  return __ZN2ot3Tlv4FindINS_11UintTlvInfoILh5EjEEEE7otErrorRKNS_7MessageERNT_13UintValueTypeE(a1, a2, a3, a4);
}

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)8,unsigned int>>( ot::Tlv *a1, unsigned int *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned int>(a1, 8u, a2, a4);
}

{
  return __ZN2ot3Tlv4FindINS_11UintTlvInfoILh8EjEEEE7otErrorRKNS_7MessageERNT_13UintValueTypeE(a1, a2, a3, a4);
}

uint64_t ot::Tlv::FindTlv<ot::Mle::LeaderDataTlv>(ot::Tlv *a1, void *a2, uint64_t a3, uint64_t a4, ot::Tlv *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)0xB, 0xAu, a2, a5);
}

{
  return __ZN2ot3Tlv7FindTlvINS_3Mle13LeaderDataTlvEEE7otErrorRKNS_7MessageERT_(a1, a2, a3, a4, a5);
}

BOOL ot::Mle::LeaderDataTlv::IsValid(ot::Mle::LeaderDataTlv *this)
{
  return ot::Tlv::GetLength(this) >= 8uLL;
}

{
  return __ZNK2ot3Mle13LeaderDataTlv7IsValidEv(this);
}

uint64_t ot::Mle::LeaderDataTlv::Get(ot::Mle::LeaderDataTlv *this, ot::Mle::LeaderData *a2)
{
  int v2 = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*(unsigned int *)((char *)this + 2));
  ot::Mle::LeaderData::SetPartitionId(a2, v2);
  ot::Mle::LeaderData::SetWeighting((uint64_t)a2, *((_BYTE *)this + 6));
  ot::Mle::LeaderData::SetDataVersion((uint64_t)a2, *((_BYTE *)this + 7));
  ot::Mle::LeaderData::SetStableDataVersion((uint64_t)a2, *((_BYTE *)this + 8));
  return ot::Mle::LeaderData::SetLeaderRouterId((uint64_t)a2, *((_BYTE *)this + 9));
}

{
  return __ZNK2ot3Mle13LeaderDataTlv3GetERNS0_10LeaderDataE(this, a2);
}

uint64_t ot::Array<unsigned char,(unsigned short)32,unsigned char>::GetMaxSize()
{
  return 32LL;
}

  ;
}

{
  return __ZNK2ot5ArrayIhLt32EhE10GetMaxSizeEv();
}

uint64_t ot::Array<unsigned char,(unsigned short)32,unsigned char>::SetLength(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2;
  return result;
}

{
  return __ZN2ot5ArrayIhLt32EhE9SetLengthEh(result, a2);
}

uint64_t ot::Tlv::FindTlv<ot::Mle::CslClockAccuracyTlv>( ot::Tlv *a1, void *a2, uint64_t a3, uint64_t a4, ot::Tlv *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)0x56, 4u, a2, a5);
}

{
  return __ZN2ot3Tlv7FindTlvINS_3Mle19CslClockAccuracyTlvEEE7otErrorRKNS_7MessageERT_(a1, a2, a3, a4, a5);
}

BOOL ot::Mle::CslClockAccuracyTlv::IsValid(ot::Mle::CslClockAccuracyTlv *this)
{
  return ot::Tlv::GetLength(this) >= 2uLL;
}

{
  return __ZNK2ot3Mle19CslClockAccuracyTlv7IsValidEv(this);
}

_BYTE *ot::Mac::CslAccuracy::SetClockAccuracy(_BYTE *this, char a2)
{
  *this = a2;
  return this;
}

{
  return __ZN2ot3Mac11CslAccuracy16SetClockAccuracyEh(this, a2);
}

uint64_t ot::Mle::CslClockAccuracyTlv::GetCslClockAccuracy(ot::Mle::CslClockAccuracyTlv *this)
{
  return *((unsigned __int8 *)this + 2);
}

{
  return __ZNK2ot3Mle19CslClockAccuracyTlv19GetCslClockAccuracyEv(this);
}

uint64_t ot::Mac::CslAccuracy::SetUncertainty(uint64_t this, char a2)
{
  *(_BYTE *)(this + 1) = a2;
  return this;
}

{
  return __ZN2ot3Mac11CslAccuracy14SetUncertaintyEh(this, a2);
}

uint64_t ot::Mle::CslClockAccuracyTlv::GetCslUncertainty(ot::Mle::CslClockAccuracyTlv *this)
{
  return *((unsigned __int8 *)this + 3);
}

{
  return __ZNK2ot3Mle19CslClockAccuracyTlv17GetCslUncertaintyEv(this);
}

uint64_t ot::Mle::Mle::RxMessage::ReadRouteTlv( ot::Mle::Mle::RxMessage *this, ot::Mle::RouteTlv *a2, uint64_t a3, uint64_t a4, ot::Tlv *a5)
{
  unsigned int v6 = ot::Tlv::FindTlv<ot::Mle::RouteTlv>(this, a2, a3, a4, a5);
  if (!v6 && !ot::Mle::RouteTlv::IsValid(a2)) {
    return 6;
  }
  return v6;
}

uint64_t ot::Tlv::FindTlv<ot::Mle::RouteTlv>(ot::Tlv *a1, void *a2, uint64_t a3, uint64_t a4, ot::Tlv *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)9, 0x4Au, a2, a5);
}

{
  return __ZN2ot3Tlv7FindTlvINS_3Mle8RouteTlvEEE7otErrorRKNS_7MessageERT_(a1, a2, a3, a4, a5);
}

void *ot::Clearable<ot::SettingsBase::NetworkInfo>::Clear(void *a1)
{
  return memset(a1, 0, 0x26uLL);
}

{
  return __ZN2ot9ClearableINS_12SettingsBase11NetworkInfoEE5ClearEv(a1);
}

uint64_t ot::Clearable<ot::SettingsBase::ParentInfo>::Clear(uint64_t result)
{
  *(void *)uint64_t result = 0LL;
  *(_WORD *)(result + 8) = 0;
  return result;
}

{
  return __ZN2ot9ClearableINS_12SettingsBase10ParentInfoEE5ClearEv(result);
}

BOOL ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::IsDone( void *a1)
{
  return *a1 == 0LL;
}

{
  return __ZNK2ot15ItemPtrIteratorINS_3Ip65Netif24ExternalMulticastAddressENS3_8IteratorEE6IsDoneEv(a1);
}

uint64_t ot::Mle::Mle::RxInfo::RxInfo(uint64_t this, ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  *(void *)this = a2;
  *(void *)(this + 8) = a3;
  *(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(this + ot::Mle::Tlv::SetType(this, 20) = 0;
  *(void *)(this + 24) = 0LL;
  *(_BYTE *)(this + 32) = 0;
  return this;
}

  ;
}

  ;
}

BOOL ot::Mle::ConnectivityTlv::IsSedBufferingIncluded(ot::Mle::ConnectivityTlv *this)
{
  return ot::Tlv::GetLength(this) >= 0xAuLL;
}

{
  return __ZNK2ot3Mle15ConnectivityTlv22IsSedBufferingIncludedEv(this);
}

uint64_t ot::Array<unsigned char,(unsigned short)32,unsigned char>::Array(uint64_t result)
{
  *(_BYTE *)(result + 32) = 0;
  return result;
}

uint64_t ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::Builder( uint64_t a1, uint64_t a2, char a3)
{
  return a1;
}

uint64_t ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::Builder( uint64_t result, uint64_t a2, char a3)
{
  *(void *)uint64_t result = a2;
  *(_BYTE *)(result + 8) = a3;
  return result;
}

void *ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Iterator(void *a1, uint64_t a2)
{
  return a1;
}

{
  void *result;
  ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::ItemPtrIterator(a1);
  uint64_t result = a1;
  a1[1] = a2;
  return result;
}

uint64_t ot::Message::Append<ot::Mle::Mle::DelayedResponseMetadata>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 0x14u);
}

{
  return __ZN2ot7Message6AppendINS_3Mle3Mle23DelayedResponseMetadataEEE7otErrorRKT_(a1, a2);
}

uint64_t ot::Child::AddressIterator::AddressIterator(uint64_t a1, uint64_t a2, char a3)
{
  return a1;
}

uint64_t ot::Child::AddressIterator::AddressIterator(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t ot::Child::AddressIterator::AddressIterator(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = a2;
  *(_WORD *)(result + 10) = 16;
  return result;
}

uint64_t ot::TimerMilliIn<ot::Mle::Mle,&ot::Mle::Mle::HandleAttachTimer>::HandleTimer( ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1);
  return ((uint64_t (*)(uint64_t))ot::Mle::Mle::HandleAttachTimer)(v2);
}

uint64_t ot::TimerMilliIn<ot::Mle::Mle,&ot::Mle::Mle::HandleDelayedResponseTimer>::HandleTimer( ot::InstanceLocator *a1)
{
  uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1);
  return ot::Mle::Mle::HandleDelayedResponseTimer(v2);
}

uint64_t ot::TimerMilliIn<ot::Mle::Mle,&ot::Mle::Mle::HandleMessageTransmissionTimer>::HandleTimer( ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1);
  return ((uint64_t (*)(uint64_t))ot::Mle::Mle::HandleMessageTransmissionTimer)(v2);
}

uint64_t ot::TimerMilliIn<ot::Mle::Mle,&ot::Mle::Mle::HandleDetachGracefullyTimer>::HandleTimer( ot::InstanceLocator *a1)
{
  uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1);
  return ot::Mle::Mle::HandleDetachGracefullyTimer(v2);
}

uint64_t ot::Instance::Get<ot::Dhcp6::Server>(uint64_t a1)
{
  return a1 + 86808;
}

{
  return __ZN2ot8Instance3GetINS_5Dhcp66ServerEEERT_v(a1);
}

uint64_t ot::Instance::Get<ot::LinkMetrics::Subject>(uint64_t a1)
{
  return a1 + 164592;
}

{
  return __ZN2ot8Instance3GetINS_11LinkMetrics7SubjectEEERT_v(a1);
}

unsigned __int8 *ot::Array<unsigned char,(unsigned short)32,unsigned char>::Find( uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v7 = 0LL;
  ot::Array<unsigned char,(unsigned short)32,unsigned char>::begin();
  unsigned int v5 = v2;
  uint64_t v4 = ot::Array<unsigned char,(unsigned short)32,unsigned char>::end(a1);
  while (v5 != (unsigned __int8 *)v4)
  {
    if (*v5 == *a2) {
      return v5;
    }
    ++v5;
  }

  return (unsigned __int8 *)v7;
}

{
  return __ZNK2ot5ArrayIhLt32EhE4FindERKh(a1, a2);
}

BOOL ot::Array<unsigned char,(unsigned short)32,unsigned char>::IsFull(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 32);
  return v2 == ot::Array<unsigned char,(unsigned short)32,unsigned char>::GetMaxSize();
}

{
  return __ZNK2ot5ArrayIhLt32EhE6IsFullEv(a1);
}

void ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Advance( ot::Ip6::Netif::ExternalMulticastAddress **this)
{
}

{
  __ZN2ot3Ip65Netif24ExternalMulticastAddress8Iterator7AdvanceEv(this);
}

BOOL ot::Child::AddressIterator::operator==(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(a1 + 10) == *(unsigned __int16 *)(a2 + 10);
}

{
  return __ZNK2ot5Child15AddressIteratoreqERKS1_(a1, a2);
}

ot::Mle::MleRouter *ot::Mle::MleRouter::MleRouter(ot::Mle::MleRouter *this, ot::Instance *a2)
{
  *((_BYTE *)this + 46176) = 0;
  *((_WORD *)this + 23093) = 511;
  *((_BYTE *)this + 46188) = 120;
  *((_BYTE *)this + 46189) = 16;
  *((_BYTE *)this + 46190) = 23;
  *((_BYTE *)this + 46192) = *((_BYTE *)this + 46192) & 0xFE | 1;
  *((_BYTE *)this + 46192) &= ~2u;
  *((_BYTE *)this + 46192) &= ~4u;
  ot::Utils::FifoHistogram<unsigned char,(short)24>::FifoHistogram((ot::Mle::MleRouter *)((char *)this + 46193));
  ot::Utils::FifoHistogram<unsigned char,(short)24>::FifoHistogram((ot::Mle::MleRouter *)((char *)this + 46217));
  *((_DWORD *)this + 11561) = 0;
  *((_DWORD *)this + 11562) = 0;
  *((_BYTE *)this + 46252) = 0;
  *((_BYTE *)this + 46253) = 0;
  *((_BYTE *)this + 46254) = 5;
  *((_BYTE *)this + 46255) = 0;
  *((_BYTE *)this + 46256) = 3;
  *(_WORD *)((char *)this + 46257) = 254;
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 5783);
  ot::TimerMilli::TimerMilli( (ot::Mle::MleRouter *)((char *)this + 46280),  a2,  (void (*)(ot::Timer *))ot::Mle::MleRouter::HandleConnectedNeighbourTimer);
  char v2 = ot::Mle::DeviceMode::Get((ot::Mle::MleRouter *)((char *)this + 312));
  ot::Mle::DeviceMode::Set((_BYTE *)this + 312, v2 | 3);
  *((_BYTE *)this + 461ot::Mle::Tlv::SetType(this, 91) = 68;
  ot::Mle::MleRouter::SetRouterId((uint64_t)this, 63);
  unsigned int v3 = ot::Time::SecToMsec((ot::Time *)0xE10);
  ot::TimerMilli::Start((ot::Mle::MleRouter *)((char *)this + 46280), v3);
  return this;
}

{
  ot::Mle::MleRouter::MleRouter(this, a2);
  return this;
}

void ot::Mle::MleRouter::HandleAdvertiseTrickleTimer(ot::Mle::MleRouter *this, ot::TrickleTimer *a2)
{
  char v2 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  ot::Mle::MleRouter::HandleAdvertiseTrickleTimer(v2);
}

void *ot::Utils::FifoHistogram<unsigned char,(short)24>::FifoHistogram(void *a1)
{
  return a1;
}

{
  ot::Utils::FifoHistogram<unsigned char,(short)24>::Clear(a1);
  return a1;
}

uint64_t ot::Mle::MleRouter::HandleConnectedNeighbourTimer(ot::Mle::MleRouter *this, ot::Timer *a2)
{
  char v2 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  return ot::Mle::MleRouter::HandleConnectedNeighbourTimer(v2);
}

uint64_t ot::Mle::MleRouter::SetRouterId(uint64_t this, char a2)
{
  *(_BYTE *)(this + 46241) = a2;
  *(_BYTE *)(this + 46242) = *(_BYTE *)(this + 46241);
  return this;
}

uint64_t ot::Mle::MleRouter::HandlePartitionChange(ot::Mle::MleRouter *this)
{
  *((_DWORD *)this + 11562) = ot::Mle::LeaderData::GetPartitionId((ot::Mle::MleRouter *)((char *)this + 32));
  *((_BYTE *)this + 46252) = ot::RouterTable::GetRouterIdSequence((ot::Mle::MleRouter *)((char *)this + 38136));
  *((_BYTE *)this + 46253) = ot::Mle::MleRouter::GetNetworkIdTimeout(this);
  uint64_t v1 = (ot::AddressResolver::CacheEntry *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>(this);
  ot::AddressResolver::Clear(v1);
  char v2 = (ot::Coap::MessageQueue *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  ot::Coap::CoapBase::AbortTransaction(v2, (uint64_t)ot::Mle::MleRouter::HandleAddressSolicitResponse, (uint64_t)this);
  IgnoreError();
  return ot::RouterTable::Clear((ot::Mle::MleRouter *)((char *)this + 38136));
}

uint64_t ot::Mle::MleRouter::HandleAddressSolicitResponse(_BYTE *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7 = v4;
  ot::AsCoreTypePtr<otMessageInfo>();
  return ot::Mle::MleRouter::HandleAddressSolicitResponse(a1, v7, v5, a4);
}

uint64_t ot::Mle::MleRouter::IsRouterEligible(ot::Mle::MleRouter *this)
{
  char v5 = 0;
  uint64_t v1 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
  uint64_t SecurityPolicy = ot::KeyManager::GetSecurityPolicy(v1);
  if ((*((_BYTE *)this + 46192) & 1) != 0
    && ot::Mle::Mle::IsFullThreadDevice(this)
    && ((*(_WORD *)(SecurityPolicy + 2) & 0x10) == 0 || (*(_WORD *)(SecurityPolicy + 2) & 0x100) != 0)
    && ((*(_WORD *)(SecurityPolicy + 2) & 4) != 0 || ((*(unsigned __int16 *)(SecurityPolicy + 2) >> 9) & 7) + 3 <= 4))
  {
    char v5 = 1;
  }

  return v5 & 1;
}

uint64_t ot::Mle::MleRouter::SetRouterEligible(ot::Mle::MleRouter *this, char a2)
{
  char v8 = a2 & 1;
  unsigned int v7 = 0;
  if (ot::Mle::Mle::IsFullThreadDevice(this) || (v8 & 1) == 0)
  {
    *((_BYTE *)this + 46192) = *((_BYTE *)this + 46192) & 0xFE | v8 & 1;
    unsigned int v5 = *((unsigned __int8 *)this + 41);
    if (v5 > 1)
    {
      if (v5 == 2)
      {
        unsigned int v3 = (_BYTE *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
        ot::Mac::Mac::SetBeaconEnabled(v3, *((_BYTE *)this + 46192) & 1);
      }

      else
      {
        BOOL v2 = v5 == 4 || v5 == 3;
        if (v2 && (*((_BYTE *)this + 46192) & 1) == 0)
        {
          ot::Mle::Mle::BecomeDetached(this);
          IgnoreError();
        }
      }
    }
  }

  else
  {
    return 27;
  }

  return v7;
}

uint64_t ot::Mle::MleRouter::HandleSecurityPolicyChanged(ot::Mle::MleRouter *this)
{
  uint64_t result = ot::Mle::Mle::IsRouterOrLeader(this);
  if ((result & 1) != 0)
  {
    uint64_t result = ot::Mle::MleRouter::IsRouterEligible(this);
    if ((result & 1) == 0 && !*((_BYTE *)this + 46255))
    {
      *((_BYTE *)this + 46255) = ot::Random::NonCrypto::GetUint8InRange(0LL, *((_BYTE *)this + 46254)) + 1;
      uint64_t result = ot::Mle::Mle::IsLeader(this);
      if ((result & 1) != 0) {
        *((_BYTE *)this + 46255) += 10;
      }
    }
  }

  return result;
}

uint64_t ot::Mle::MleRouter::SetDeviceProperties( ot::Mle::MleRouter *this, const ot::Mle::DeviceProperties *a2)
{
  *((void *)this + 157) = *(void *)a2;
  ot::Mle::DeviceProperties::ClampWeightAdjustment((ot::Mle::MleRouter *)((char *)this + 1256));
  char v2 = ot::Mle::DeviceProperties::CalculateLeaderWeight((ot::Mle::MleRouter *)((char *)this + 1256));
  return ot::Mle::MleRouter::SetLeaderWeight((uint64_t)this, v2);
}

uint64_t ot::Mle::MleRouter::BecomeRouter(uint64_t a1, unsigned __int8 a2)
{
  if (ot::Mle::Mle::IsDisabled((ot::Mle::Mle *)a1))
  {
    return 13;
  }

  else if (ot::Mle::Mle::IsRouter((ot::Mle::Mle *)a1))
  {
    return 0;
  }

  else if ((ot::Mle::MleRouter::IsRouterEligible((ot::Mle::MleRouter *)a1) & 1) != 0)
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)&ot::Mle::kLogModuleName,  "Attempt to become router",  v2,  v3,  v4,  v5,  v6,  v7,  v12);
    char v8 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
    ot::MeshForwarder::SetRxOnWhenIdle(v8, 1);
    *(_BYTE *)(a1 + 46255) = 0;
    int v14 = *(unsigned __int8 *)(a1 + 41);
    if (v14 == 1)
    {
      BOOL v13 = 1;
      if ((*(_BYTE *)(a1 + 393) & 1) == 0) {
        BOOL v13 = (unsigned __int16)ot::ChildTable::GetNumChildren((__int16 *)(a1 + 1264), 1u) >= 6u;
      }
      if (v13) {
        char v9 = 6;
      }
      else {
        char v9 = 3;
      }
      *(_BYTE *)(a1 + 392) = v9;
      unsigned int v16 = ot::Mle::MleRouter::SendLinkRequest((ot::Mle::MleRouter *)a1, 0LL);
      if (!v16)
      {
        --*(_BYTE *)(a1 + 392);
        ot::Mle::Mle::ScheduleMessageTransmissionTimer((ot::Mle::Mle *)a1);
        uint64_t v10 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>((ot::InstanceLocator *)a1);
        ot::TimeTicker::RegisterReceiver(v10, 1);
      }
    }

    else
    {
      if (v14 != 2) {
        __assert_rtn("BecomeRouter", "mle_router.cpp", 278, "false");
      }
      return ot::Mle::MleRouter::SendAddressSolicit((ot::InstanceLocator *)a1, a2);
    }
  }

  else
  {
    return 27;
  }

  return v16;
}

uint64_t ot::Mle::MleRouter::SendLinkRequest(ot::Mle::MleRouter *this, ot::Neighbor *a2)
{
  uint64_t v20 = this;
  uint64_t v19 = a2;
  unsigned int appended = 0;
  uint64_t v17 = 0LL;
  if (!*((_BYTE *)this + 46176))
  {
    ot::Clearable<ot::Ip6::Address>::Clear(&v16);
    uint64_t v17 = ot::Mle::Mle::NewMleMessage((uint64_t)this, 0);
    if (v17)
    {
      unsigned int appended = ot::Mle::Mle::TxMessage::AppendVersionTlv(v17);
      if (!appended)
      {
        unint64_t v14 = *((unsigned __int8 *)this + 41);
        if (v14 <= 4) {
          __asm { BR              X8 }
        }

        unsigned int appended = ot::Mle::Mle::TxMessage::AppendVendorDataTlv(v17, v2, v3, v4, v5, v6, v7, v8);
        if (!appended)
        {
          if (v19)
          {
            if (ot::Neighbor::IsStateValid(v19))
            {
              ot::Mle::Mle::Challenge::GenerateRandom((ot::Mle::Mle::Challenge *)v21);
              unsigned int appended = ot::Mle::Mle::TxMessage::AppendChallengeTlv(v17, (const ot::Mle::Mle::Challenge *)v21);
              if (appended) {
                goto LABEL_18;
              }
            }

            else
            {
              ot::Neighbor::GenerateChallenge(v19);
              BOOL v13 = v17;
              Challenge = (unsigned __int8 *)ot::Neighbor::GetChallenge(v19);
              Challengechar Size = ot::Neighbor::GetChallengeSize(v19);
              unsigned int appended = ot::Mle::Mle::TxMessage::AppendChallengeTlv(v13, Challenge, ChallengeSize);
              if (appended) {
                goto LABEL_18;
              }
            }

            ExtAddress = (const ot::Mac::ExtAddress *)ot::Neighbor::GetExtAddress(v19);
            ot::Ip6::Address::SetToLinkLocalAddress((ot::Ip6::Address *)&v16, ExtAddress);
          }

          else
          {
            ot::Mle::Mle::Challenge::GenerateRandom((ot::Mle::MleRouter *)((char *)this + 46177));
            *((_BYTE *)this + 46176) = 2;
            unsigned int appended = ot::Mle::Mle::TxMessage::AppendChallengeTlv(v17, (ot::Mle::MleRouter *)((char *)this + 46177));
            if (appended) {
              goto LABEL_18;
            }
            ot::Ip6::Address::SetToLinkLocalAllRoutersMulticast((ot::Ip6::Address *)&v16);
          }

          unsigned int appended = ot::Mle::Mle::TxMessage::SendTo(v17, &v16);
          if (!appended) {
            ot::Mle::Mle::Log(0, 0x1Au, (ot::Ip6::Address *)&v16);
          }
        }
      }
    }

    else
    {
      unsigned int appended = 3;
    }
  }

uint64_t ot::Mle::MleRouter::SendAddressSolicit(ot::InstanceLocator *a1, unsigned __int8 a2)
{
  uint64_t v15 = a1;
  unsigned __int8 v14 = a2;
  unsigned int v13 = 0;
  Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(a1);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v12, Instance);
  unsigned __int8 v11 = 0LL;
  if ((*((_BYTE *)a1 + 46192) & 2) == 0)
  {
    uint64_t v3 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
    unsigned __int8 v11 = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v3, 4u);
    if (v11)
    {
      uint64_t v4 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
      ExtAddress = (void *)ot::Mac::Mac::GetExtAddress(v4);
      unsigned int v13 = ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)1,ot::Mac::ExtAddress>>(v11, ExtAddress);
      if (!v13)
      {
        if (!ot::Mle::MleRouter::IsRouterIdValid((ot::Mle::MleRouter *)*((unsigned __int8 *)a1 + 46242))
          || (unsigned __int16 v6 = ot::Mle::Rloc16FromRouterId((ot::Mle *)*((unsigned __int8 *)a1 + 46242)),
              (unsigned int v13 = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)2,unsigned short>>((uint64_t)v11, v6)) == 0))
        {
          unsigned int v13 = ot::Tlv::Append<ot::ThreadStatusTlv>((uint64_t)v11, v14);
          if (!v13)
          {
            unsigned int v13 = ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderRloc((ot::Tmf::MessageInfo *)v12);
            if (!v13)
            {
              uint64_t v7 = (ot::Coap::TxParameters *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
              unsigned int v13 = ot::Coap::CoapBase::SendMessage( v7,  v11,  (ot::Ip6::MessageInfo *)v12,  (uint64_t)ot::Mle::MleRouter::HandleAddressSolicitResponse,  (uint64_t)a1);
              if (!v13)
              {
                *((_BYTE *)a1 + 46192) = *((_BYTE *)a1 + 46192) & 0xFD | 2;
                ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)v12);
                ot::Mle::Mle::Log(0, 0x13u, v8);
              }
            }
          }
        }
      }
    }

    else
    {
      unsigned int v13 = 3;
    }
  }

  if (v13 && v11) {
    ot::Message::Free(v11);
  }
  return v13;
}

uint64_t ot::Mle::MleRouter::BecomeLeader(ot::Mle::MleRouter *this, char a2)
{
  char v23 = a2 & 1;
  unsigned int v22 = 0;
  active = (ot::MeshCoP::ActiveDatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
  if (ot::MeshCoP::ActiveDatasetManager::IsPartiallyComplete(active))
  {
    return 13;
  }

  else if (ot::Mle::Mle::IsDisabled(this))
  {
    return 13;
  }

  else if (ot::Mle::Mle::IsLeader(this))
  {
    return 0;
  }

  else if ((ot::Mle::MleRouter::IsRouterEligible(this) & 1) != 0)
  {
    if ((v23 & 1) != 0
      && ot::Mle::Mle::IsAttached(this)
      && (char v18 = *((_BYTE *)this + 46191),
          ot::Mle::LeaderData::GetWeighting((ot::Mle::MleRouter *)((char *)this + 32)),
          ot::Logger::LogAtLevel<(ot::LogLevel)3>( (ot *)&ot::Mle::kLogModuleName,  "Leader re-election [BecomeLeader] Weight[%d] LeaderWeight[%d]",  v3,  v4,  v5,  v6,  v7,  v8,  v18),  int v17 = *((unsigned __int8 *)this + 46191),  v17 <= ot::Mle::LeaderData::GetWeighting((ot::Mle::MleRouter *)((char *)this + 32))))
    {
      return 27;
    }

    else
    {
      char v9 = (ot::Random::NonCrypto *)ot::RouterTable::Clear((ot::Mle::MleRouter *)((char *)this + 38136));
      int Uint32 = ot::Random::NonCrypto::GetUint32(v9);
      else {
        unsigned __int8 Uint8InRange = ot::Random::NonCrypto::GetUint8InRange(0LL, 0x3Fu);
      }
      ot::Mle::Mle::SetLeaderData(this, Uint32, *((_BYTE *)this + 46191), Uint8InRange);
      uint64_t v21 = ot::RouterTable::Allocate((ot::Mle::MleRouter *)((char *)this + 38136), Uint8InRange);
      if (!v21) {
        __assert_rtn("BecomeLeader", "mle_router.cpp", 343, "router != nullptr");
      }
      ot::Mle::MleRouter::SetRouterId((uint64_t)this, Uint8InRange);
      uint64_t v10 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
      ExtAddress = (const ot::Mac::ExtAddress *)ot::Mac::Mac::GetExtAddress(v10);
      ot::Neighbor::SetExtAddress(v21, ExtAddress);
      char v12 = (ot::NetworkData::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
      ot::NetworkData::Leader::Reset(v12);
      unsigned int v13 = (ot::MeshCoP::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Leader>(this);
      ot::MeshCoP::Leader::SetEmptyCommissionerData(v13);
      unsigned __int16 v14 = ot::Mle::Rloc16FromRouterId((ot::Mle *)Uint8InRange);
      ot::Mle::MleRouter::SetStateLeader((uint64_t)this, v14, 0);
    }
  }

  else
  {
    return 27;
  }

  return v22;
}

void ot::Mle::MleRouter::SetStateLeader(uint64_t a1, unsigned __int16 a2, char a3)
{
}

ot::Ip6::Netif::MulticastAddress *ot::Mle::MleRouter::StopLeader(ot::Mle::MleRouter *this)
{
  uint64_t v1 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
  return ot::Ip6::Netif::UnsubscribeAllRoutersMulticast(v1);
}

uint64_t ot::Mle::MleRouter::StopAdvertiseTrickleTimer(ot::Mle::MleRouter *this)
{
  return ot::TrickleTimer::Stop((ot::Mle::MleRouter *)((char *)this + 1192));
}

uint64_t ot::Mle::MleRouter::HandleDetachStart(ot::Mle::MleRouter *this)
{
  uint64_t v1 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>(this);
  return ot::TimeTicker::UnregisterReceiver(v1, 1);
}

uint64_t ot::Mle::MleRouter::HandleChildStart(unsigned __int8 *a1, unsigned __int8 a2)
{
  a1[46192] &= ~4u;
  a1[46255] = ot::Random::NonCrypto::GetUint8InRange(0LL, a1[46254]) + 1;
  ot::Mle::MleRouter::StopLeader((ot::Mle::MleRouter *)a1);
  uint64_t v2 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>((ot::InstanceLocator *)a1);
  ot::TimeTicker::RegisterReceiver(v2, 1);
  if ((a1[46192] & 1) != 0)
  {
    uint64_t v3 = (_BYTE *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1);
    ot::Mac::Mac::SetBeaconEnabled(v3, 1);
  }

  uint64_t v4 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)a1);
  ot::Ip6::Netif::SubscribeAllRoutersMulticast(v4);
  if (ot::Mle::MleRouter::IsRouterIdValid((ot::Mle::MleRouter *)a1[46242]) && a2 <= 4uLL) {
    __asm { BR              X8 }
  }

  uint64_t result = ot::RouterTable::GetActiveRouterCount((ot::RouterTable *)(a1 + 38136));
  if (a1[46189] <= (int)result)
  {
    if (!ot::Mle::MleRouter::IsRouterIdValid((ot::Mle::MleRouter *)a1[46242])) {
      return ot::Mle::MleRouter::SetRouterId((uint64_t)a1, 63);
    }
    uint64_t result = ot::Mle::MleRouter::HasChildren((ot::Mle::MleRouter *)a1);
    if ((result & 1) == 0) {
      return ot::Mle::MleRouter::SetRouterId((uint64_t)a1, 63);
    }
  }

  return result;
}

void ot::Mle::MleRouter::SendAddressRelease(ot::Mle::MleRouter *this)
{
  char v12 = this;
  int v11 = 0;
  Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v10, Instance);
  uint64_t v2 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  char v9 = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v2, 3u);
  if (v9)
  {
    unsigned __int16 v3 = ot::Mle::Rloc16FromRouterId((ot::Mle *)*((unsigned __int8 *)this + 46241));
    int v11 = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)2,unsigned short>>((uint64_t)v9, v3);
    if (!v11)
    {
      uint64_t v4 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
      ExtAddress = (void *)ot::Mac::Mac::GetExtAddress(v4);
      int v11 = ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)1,ot::Mac::ExtAddress>>(v9, ExtAddress);
      if (!v11)
      {
        int v11 = ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderRloc((ot::Tmf::MessageInfo *)v10);
        if (!v11)
        {
          uint64_t v6 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
          int v11 = ot::Coap::CoapBase::SendMessage(v6, v9, (const ot::Ip6::MessageInfo *)v10);
          if (!v11)
          {
            ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)v10);
            ot::Mle::Mle::Log(0, 0x10u, v7);
          }
        }
      }
    }
  }

  else
  {
    int v11 = 3;
  }

  if (v11 && v9) {
    ot::Message::Free(v9);
  }
  ot::Mle::Mle::LogSendError(0x10u, v11);
}

BOOL ot::Mle::MleRouter::HasChildren(ot::Mle::MleRouter *this)
{
  return ot::ChildTable::HasChildren((ot::Mle::MleRouter *)((char *)this + 1264), 3);
}

BOOL ot::Mle::MleRouter::RemoveChildren(ot::Mle::MleRouter *this)
{
  int v11 = this;
  uint64_t v1 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  char v9 = ot::ChildTable::Iterate(v1, 1);
  uint64_t v10 = (ot::ChildTable::IteratorBuilder *)&v9;
  v8[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v9);
  v8[1] = v2;
  v7[0] = ot::ChildTable::IteratorBuilder::end(v10);
  v7[1] = v3;
  while (1)
  {
    BOOL result = ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v8, v7);
    if (!result) {
      break;
    }
    uint64_t v6 = (ot::Neighbor *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v8);
    ot::Mle::MleRouter::RemoveNeighbor(this, v6);
    ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v8);
  }

  return result;
}

BOOL ot::Mle::Mle::IsAnnounceAttach(ot::Mle::Mle *this)
{
  return *((unsigned __int16 *)this + 399) != 0xFFFF;
}

{
  return __ZNK2ot3Mle3Mle16IsAnnounceAttachEv(this);
}

uint64_t ot::RouterTable::GetActiveRouterCount(ot::RouterTable *this)
{
  return ot::Array<ot::Router,(unsigned short)32,unsigned char>::GetLength((uint64_t)this + 8);
}

{
  return __ZNK2ot11RouterTable20GetActiveRouterCountEv(this);
}

void ot::Mle::MleRouter::SetStateRouter(ot::Mle::MleRouter *this, unsigned __int16 a2)
{
}

void ot::Mle::MleRouter::SetStateRouterOrLeader(uint64_t a1, char a2, unsigned __int16 a3, char a4)
{
  uint64_t v37 = a1;
  char v36 = a2;
  unsigned __int16 v35 = a3;
  char v34 = a4;
  if (a2 == 4)
  {
    active = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>((ot::InstanceLocator *)a1);
    ot::MeshCoP::DatasetManager::Restore(active);
    IgnoreError();
    uint64_t v5 = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>((ot::InstanceLocator *)a1);
    ot::MeshCoP::DatasetManager::Restore(v5);
    IgnoreError();
  }

  ot::Mle::Mle::SetRloc16((ot::Mle::Mle *)a1, v35);
  ot::Mle::Mle::SetRole((unsigned __int8 *)a1, v36);
  ot::Mle::Mle::SetAttachState(a1, 0);
  ot::Mle::Mle::ResetAttachCounter(a1);
  ot::TimerMilli::Stop((ot::TimerMilli *)(a1 + 320));
  ot::TimerMilli::Stop((ot::TimerMilli *)(a1 + 368));
  ot::Mle::MleRouter::StopAdvertiseTrickleTimer((ot::Mle::MleRouter *)a1);
  ot::Mle::MleRouter::ResetAdvertiseInterval((ot::Mle::MleRouter *)a1);
  uint64_t v6 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)a1);
  ot::Ip6::Netif::SubscribeAllRoutersMulticast(v6);
  *(_DWORD *)(a1 + 46244) = ot::Mle::LeaderData::GetPartitionId((ot::Mle::LeaderData *)(a1 + 32));
  uint64_t v7 = (_BYTE *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1);
  ot::Mac::Mac::SetBeaconEnabled(v7, 1);
  if (v36 == 4)
  {
    ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Ip6::Netif::UnicastAddress *)a1);
    ot::Mle::Mle::GetLeaderAloc((ot::Mle::Mle *)a1, v8);
    IgnoreError();
    char v9 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)a1);
    ot::Ip6::Netif::AddUnicastAddress(v9, (ot::Ip6::Netif::UnicastAddress *)a1);
    uint64_t v10 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>((ot::InstanceLocator *)a1);
    ot::TimeTicker::RegisterReceiver(v10, 1);
    int v11 = (_BYTE *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>((ot::InstanceLocator *)a1);
    ot::NetworkData::Leader::Start(v11, v34);
    char v12 = (ot::MeshCoP::ActiveDatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>((ot::InstanceLocator *)a1);
    ot::MeshCoP::ActiveDatasetManager::StartLeader(v12);
    unsigned int v13 = (ot::MeshCoP::PendingDatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>((ot::InstanceLocator *)a1);
    ot::MeshCoP::PendingDatasetManager::StartLeader(v13);
    unsigned __int16 v14 = (ot::AddressResolver::CacheEntry *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>((ot::InstanceLocator *)a1);
    ot::AddressResolver::Clear(v14);
  }

  uint64_t v15 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>((ot::InstanceLocator *)a1);
  char v32 = ot::ChildTable::Iterate(v15, 1);
  uint64_t v33 = (ot::ChildTable::IteratorBuilder *)&v32;
  v31[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v32);
  v31[1] = v16;
  v30[0] = ot::ChildTable::IteratorBuilder::end(v33);
  v30[1] = v17;
  while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v31, v30))
  {
    uint64_t v29 = (ot::Neighbor *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v31);
    unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(v29);
    ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v31);
  }

  uint64_t v19 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1);
  ot::Mac::Mac::UpdateCsl(v19, 0LL);
  uint64_t PartitionId = ot::Mle::LeaderData::GetPartitionId((ot::Mle::LeaderData *)(a1 + 32));
  char v21 = ot::ToUlong(PartitionId);
  ot::Logger::LogAtLevel<(ot::LogLevel)3>( (ot *)&ot::Mle::kLogModuleName,  "Partition ID 0x%lx",  v22,  v23,  v24,  v25,  v26,  v27,  v21);
}

uint64_t ot::Mle::MleRouter::ResetAdvertiseInterval(ot::Mle::MleRouter *this)
{
  uint64_t result = ot::Mle::Mle::IsRouterOrLeader(this);
  if ((result & 1) != 0)
  {
    if (!ot::TrickleTimer::IsRunning((ot::Mle::MleRouter *)((char *)this + 1192)))
    {
      unsigned int v3 = ot::Time::SecToMsec((ot::Time *)1);
      unsigned int v2 = ot::Time::SecToMsec((ot::Time *)0x20);
      ot::TrickleTimer::Start((uint64_t)this + 1192, 0, v3, v2, 0xFFFF);
    }

    return ot::TrickleTimer::IndicateInconsistent((uint64_t)this + 1192);
  }

  return result;
}

uint64_t ot::Mle::Mle::GetLeaderAloc(ot::Mle::Mle *this, ot::Ip6::Address *a2)
{
  return ot::Mle::Mle::GetLocatorAddress(this, a2, 0xFC00u);
}

{
  return __ZNK2ot3Mle3Mle13GetLeaderAlocERNS_3Ip67AddressE(this, a2);
}

BOOL ot::Mle::MleRouter::RemoveNeighbor(ot::Mle::MleRouter *this, ot::Neighbor *a2)
{
  BOOL result = ot::Neighbor::IsStateInvalid(a2);
  if ((result & 1) == 0)
  {
    if (a2 == (ot::Mle::MleRouter *)((char *)this + 48))
    {
      if (ot::Mle::Mle::IsChild(this))
      {
        ot::Mle::Mle::BecomeDetached(this);
        IgnoreError();
      }
    }

    else if (a2 == (ot::Neighbor *)ot::Mle::Mle::GetParentCandidate(this))
    {
      ot::Mle::Mle::ClearParentCandidate(this);
    }

    else
    {
      unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(a2);
      if (ot::Mle::IsActiveRouter((ot::Mle *)Rloc16))
      {
        if (ot::Neighbor::IsStateValid(a2))
        {
          ot::NeighborTable::Signal((ot::Mle::MleRouter *)((char *)this + 304), 4u, a2);
          ot::RouterTable::RemoveRouterLink((ot::Mle::MleRouter *)((char *)this + 38136), a2);
        }
      }

      else
      {
        if (ot::Neighbor::IsStateValidOrRestoring(a2)) {
          ot::NeighborTable::Signal((ot::Mle::MleRouter *)((char *)this + 304), 1u, a2);
        }
        uint64_t v4 = (ot::IndirectSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::IndirectSender>(this);
        ot::IndirectSender::ClearAllMessagesForSleepyChild(v4, a2);
        if (ot::Neighbor::IsFullThreadDevice(a2))
        {
          uint64_t v7 = (ot::AddressResolver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>(this);
          unsigned __int16 v5 = ot::Neighbor::GetRloc16(a2);
          ot::AddressResolver::RemoveEntriesForRloc16(v7, v5);
        }

        ot::ChildTable::RemoveStoredChild((ot::Mle::MleRouter *)((char *)this + 1264), a2);
      }
    }

    LinkInfo = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(a2);
    ot::LinkQualityInfo::Clear(LinkInfo);
    ot::Neighbor::SetState(a2, 0);
    return ot::Neighbor::RemoveAllForwardTrackingSeriesInfo(a2);
  }

  return result;
}

void ot::Mle::MleRouter::HandleAdvertiseTrickleTimer(ot::Mle::MleRouter *this)
{
  if ((ot::Mle::MleRouter::IsRouterEligible(this) & 1) != 0) {
    ot::Mle::MleRouter::SendAdvertisement(this);
  }
  else {
    ot::TrickleTimer::Stop((ot::Mle::MleRouter *)((char *)this + 1192));
  }
}

void ot::Mle::MleRouter::SendAdvertisement(ot::Mle::MleRouter *this)
{
  uint64_t v7 = this;
  int appended = 0;
  uint64_t v4 = 0LL;
  if (!ot::Mle::Mle::IsAttaching(this) && (*((_BYTE *)this + 46192) & 2) == 0)
  {
    uint64_t v4 = ot::Mle::Mle::NewMleMessage((uint64_t)this, 4u);
    if (v4)
    {
      int appended = ot::Mle::Mle::TxMessage::AppendSourceAddressTlv(v4);
      if (!appended)
      {
        int appended = ot::Mle::Mle::TxMessage::AppendLeaderDataTlv(v4);
        if (!appended)
        {
          ot::Message::SetSubType(v4, 12);
          unsigned int v2 = *((unsigned __int8 *)this + 41);
          if (v2 <= 1) {
            __assert_rtn("SendAdvertisement", "mle_router.cpp", 587, "false");
          }
          if (v2 == 2
            || (v2 != 4 && v2 != 3 ? (char v1 = 0) : (char v1 = 1),
                (v1 & 1) == 0 || (int appended = ot::Mle::Mle::TxMessage::AppendRouteTlv(v4, 0LL)) == 0))
          {
            ot::Ip6::Address::SetToLinkLocalAllNodesMulticast((ot::Ip6::Address *)&v5);
            int appended = ot::Mle::Mle::TxMessage::SendTo(v4, &v5);
            if (!appended) {
              ot::Mle::Mle::Log(0, 0, (ot::Ip6::Address *)&v5);
            }
          }
        }
      }
    }

    else
    {
      int appended = 3;
    }
  }

  if (appended && v4) {
    ot::Message::Free(v4);
  }
  ot::Mle::Mle::LogSendError(0, appended);
}

uint64_t ot::Mle::Mle::TxMessage::AppendTlvRequestTlv<(unsigned char)2>( ot::Mle::Mle::TxMessage *a1, unsigned __int8 *a2)
{
  return ot::Mle::Mle::TxMessage::AppendTlvRequestTlv(a1, a2, 2u);
}

{
  return __ZN2ot3Mle3Mle9TxMessage19AppendTlvRequestTlvILh2EEE7otErrorRAT__Kh(a1, a2);
}

uint64_t ot::Mle::Mle::TxMessage::AppendTlvRequestTlv<(unsigned char)1>( ot::Mle::Mle::TxMessage *a1, unsigned __int8 *a2)
{
  return ot::Mle::Mle::TxMessage::AppendTlvRequestTlv(a1, a2, 1u);
}

{
  return __ZN2ot3Mle3Mle9TxMessage19AppendTlvRequestTlvILh1EEE7otErrorRAT__Kh(a1, a2);
}

uint64_t ot::Neighbor::GetChallenge(ot::Neighbor *this)
{
  return (uint64_t)this + 68;
}

{
  return __ZNK2ot8Neighbor12GetChallengeEv(this);
}

uint64_t ot::Neighbor::GetChallengeSize(ot::Neighbor *this)
{
  return 8LL;
}

{
  return __ZNK2ot8Neighbor16GetChallengeSizeEv(this);
}

void ot::Mle::MleRouter::HandleLinkRequest(ot::Mle::MleRouter *this, ot::Neighbor **a2)
{
  uint64_t v125 = this;
  uint64_t v124 = a2;
  int ChallengeTlv = 0;
  uint64_t v122 = 0LL;
  ot::Mle::Mle::TlvList::TlvList((ot::Mle::Mle::TlvList *)v130);
  BOOL v118 = 0;
  ot::Ip6::MessageInfo::GetPeerAddr(v124[1]);
  ot::Mle::Mle::Log(1u, 0x1Au, v2);
  if (!ot::Mle::Mle::IsRouterOrLeader(this))
  {
    int ChallengeTlv = 13;
    goto LABEL_52;
  }

  if (ot::Mle::Mle::IsAttaching(this))
  {
    int ChallengeTlv = 13;
    goto LABEL_52;
  }

  int ChallengeTlv = ot::Mle::Mle::RxMessage::ReadChallengeTlv(*v124, (ot::Mle::Mle::Challenge *)v131, v3, v4, v5);
  if (!ChallengeTlv)
  {
    int ChallengeTlv = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)18,unsigned short>>(*v124, &v121, v6, v7);
    if (!ChallengeTlv)
    {
      if (v121 < 2u)
      {
        int ChallengeTlv = 6;
        ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mle::kLogModuleName,  "Link request Parse error",  v8,  v9,  (uint64_t)v10,  v11,  v12,  v13,  v105);
        ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mle::kLogModuleName,  "version:%d less than Thread 1.1 version:%d",  v14,  v15,  v16,  v17,  v18,  v19,  v121);
        goto LABEL_52;
      }

      int LeaderDataTlv = ot::Mle::Mle::RxMessage::ReadLeaderDataTlv(*v124, (ot::Mle::LeaderData *)v120, v8, v9, v10);
      if (LeaderDataTlv)
      {
        if (LeaderDataTlv != 23)
        {
          ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mle::kLogModuleName,  "Link request Parse error ReadLeaderData failed",  v20,  (uint64_t)v21,  v22,  v23,  v24,  v25,  v105);
          int ChallengeTlv = 6;
          goto LABEL_52;
        }
      }

      else
      {
        int PartitionId = ot::Mle::LeaderData::GetPartitionId((ot::Mle::LeaderData *)v120);
        if (PartitionId != ot::Mle::LeaderData::GetPartitionId((ot::Mle::MleRouter *)((char *)this + 32)))
        {
          int ChallengeTlv = 13;
          goto LABEL_52;
        }
      }

      int v112 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)0,unsigned short>>(*v124, &v119, v20, v21);
      if (v112)
      {
        if (v112 != 23)
        {
          char v68 = ot::ErrorToString(6);
          ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mle::kLogModuleName,  "HandleLinkRequest source address TLV unhandled case. Exit here error:%s",  v69,  v70,  v71,  v72,  v73,  v74,  v68);
          int ChallengeTlv = 6;
          goto LABEL_52;
        }

        if (!ot::Mle::Mle::RxInfo::IsNeighborStateValid(v124)
          || (unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(v124[3]), !ot::Mle::IsActiveRouter((ot::Mle *)Rloc16)))
        {
          int ChallengeTlv = 2;
          if (v124[3])
          {
            char v107 = ot::ErrorToString(ChallengeTlv);
            ot::Neighbor::GetState(v124[3]);
            ot::Neighbor::IsStateValid(v124[3]);
            ot::Neighbor::GetRloc16(v124[3]);
            unsigned __int8 RouterId = ot::Neighbor::GetRouterId(v124[3]);
            ot::Mle::IsActiveRouter((ot::Mle *)RouterId);
            ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mle::kLogModuleName,  "HandleLinkRequest source address TLV not found (router coming out of reset) error:%s nbr.state:%d isNbrSta teValid:%d nbr.rloc16:0x%x Router Id:%d",  v55,  v56,  v57,  v58,  v59,  v60,  v107);
          }

          else
          {
            char v61 = ot::ErrorToString(ChallengeTlv);
            ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mle::kLogModuleName,  "HandleLinkRequest source address TLV not found (router coming out of reset) error:%s aNeighbor NULL ",  v62,  v63,  v64,  v65,  v66,  v67,  v61);
          }

          goto LABEL_52;
        }

        uint64_t v122 = v124[3];
      }

      else if (ot::Mle::IsActiveRouter((ot::Mle *)v119))
      {
        ot::RouterTable::FindRouterByRloc16((ot::Mle::MleRouter *)((char *)this + 38136), v119);
        uint64_t v122 = v33;
        if (!v33)
        {
          int ChallengeTlv = 6;
          ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mle::kLogModuleName,  "Link request Parse error Neighbor src address is NULL:sourceAddress:%x",  v27,  v28,  v29,  v30,  v31,  v32,  v119);
          goto LABEL_52;
        }

        if (ot::Neighbor::IsStateLinkRequest(v122))
        {
          int ChallengeTlv = 24;
          goto LABEL_52;
        }

        if (ot::Neighbor::IsStateValid(v122))
        {
          ot::Ip6::MessageInfo::GetPeerAddr(v124[1]);
          Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v34);
          ot::Ip6::InterfaceIdentifier::ConvertToExtAddress(Iid, (ot::Mac::ExtAddress *)v129);
          char State = ot::Neighbor::GetState(v122);
          ExtAddress = (ot::Mac::ExtAddress *)ot::Neighbor::GetExtAddress(v122);
          ot::Mac::ExtAddress::ToString(ExtAddress, (ot::StringWriter *)v128);
          ot::String<(unsigned short)17>::AsCString((uint64_t)v128);
          ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mle::kLogModuleName,  "Current neighbor state: %u nbr.extAddr:%s",  v37,  v38,  v39,  v40,  v41,  v42,  State);
          char v43 = (const void *)ot::Neighbor::GetExtAddress(v122);
          if (!ot::Equatable<ot::Mac::ExtAddress>::operator==(v43, v129))
          {
            int ChallengeTlv = 6;
            char v110 = ot::Neighbor::GetState(v122);
            int v44 = (ot::Mac::ExtAddress *)ot::Neighbor::GetExtAddress(v122);
            ot::Mac::ExtAddress::ToString(v44, (ot::StringWriter *)v127);
            ot::String<(unsigned short)17>::AsCString((uint64_t)v127);
            ot::Mac::ExtAddress::ToString((ot::Mac::ExtAddress *)v129, (ot::StringWriter *)v126);
            ot::String<(unsigned short)17>::AsCString((uint64_t)v126);
            ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mle::kLogModuleName,  "Link request Parse error, nbr.state:%d nbr.extAddr(%s) != extAddr(%s)",  v45,  v46,  v47,  v48,  v49,  v50,  v110);
            goto LABEL_52;
          }

          v108 = v122;
          Dataunsigned __int16 Version = ot::Mle::LeaderData::GetDataVersion((uint64_t)v120, 0);
          ot::Neighbor::SetLeaderFullDataVersion((uint64_t)v108, DataVersion);
          v109 = v122;
          char v52 = ot::Mle::LeaderData::GetDataVersion((uint64_t)v120, 1);
          ot::Neighbor::SetLeaderStableDataVersion((uint64_t)v109, v52);
        }

        else
        {
          ot::Mle::Mle::InitNeighbor(this, v122, v124);
          ot::Neighbor::SetState(v122, 5);
        }
      }

      int ChallengeTlv = ot::Mle::Mle::RxMessage::ReadVendorDataTlv(*v124, &v118, &v117, &v116, v26);
      if (!ChallengeTlv)
      {
        if (v122)
        {
          if (v118)
          {
            ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mle::kLogModuleName,  "HandleLinkRequest vendorId=%d vendorSpecificInfo=%d powerControlMode=%d added",  v75,  v76,  v77,  v78,  v79,  v80,  v117);
          }

          else
          {
            unsigned __int16 v117 = 0;
            unsigned __int16 v116 = 0;
            if (ot::Neighbor::IsFullThreadDevice(v122))
            {
              Instance = ot::InstanceLocator::GetInstance(this);
            }

            ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mle::kLogModuleName,  "HandleLinkRequest vendorId=%d vendorSpecificInfo=%d",  v81,  v82,  v83,  v84,  v85,  v86,  v117);
          }

          ot::Neighbor::SetVendorId((uint64_t)v122, v117);
          ot::Neighbor::SetVendorSpecificInfo((uint64_t)v122, v116);
          ot::Neighbor::SetPowerControlMode(v122, v116 & 7);
        }

        else
        {
          ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mle::kLogModuleName,  "HandleLinkRequest Neighbor is NULL",  v75,  v76,  v77,  v78,  v79,  v80,  v105);
        }

        int TlvRequestTlv = ot::Mle::Mle::RxMessage::ReadTlvRequestTlv(*v124, (ot::Mle::Mle::TlvList *)v130, v95, v96, v97);
        if (TlvRequestTlv && TlvRequestTlv != 23)
        {
          char v98 = ot::ErrorToString(6);
          ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mle::kLogModuleName,  "HandleLinkRequest Request TLV unhandled case. Exit here error:%s",  v99,  v100,  v101,  v102,  v103,  v104,  v98);
          int ChallengeTlv = 6;
        }

        else
        {
          if (v122) {
            ot::Neighbor::ClearLastRxFragmentTag((uint64_t)v122);
          }
          *((_BYTE *)v124 + 32) = 2;
          ot::Mle::Mle::ProcessKeySequence(this, (ot::Mle::Mle::RxInfo *)v124);
          int ChallengeTlv = ot::Mle::MleRouter::SendLinkAccept( this,  v124[1],  v122,  (const ot::Mle::Mle::TlvList *)v130,  (const ot::Mle::Mle::Challenge *)v131);
        }
      }
    }
  }

void ot::RouterTable::FindRouterByRloc16(ot::RouterTable *this, unsigned __int16 a2)
{
}

{
  __ZN2ot11RouterTable18FindRouterByRloc16Et(this, a2);
}

BOOL ot::Neighbor::IsStateLinkRequest(ot::Neighbor *this)
{
  return (*((_BYTE *)this + 98) & 0xF) == 5;
}

{
  return __ZNK2ot8Neighbor18IsStateLinkRequestEv(this);
}

uint64_t ot::Mle::MleRouter::SendLinkAccept( ot::Mle::MleRouter *this, const ot::Ip6::MessageInfo *a2, ot::Neighbor *a3, const ot::Mle::Mle::TlvList *a4, const ot::Mle::Mle::Challenge *a5)
{
  BOOL IsStateValid = 1;
  if (a3) {
    BOOL IsStateValid = ot::Neighbor::IsStateValid(a3);
  }
  if (IsStateValid) {
    unsigned __int8 v5 = 1;
  }
  else {
    unsigned __int8 v5 = 2;
  }
  unsigned __int8 v41 = v5;
  uint64_t v42 = ot::Mle::Mle::NewMleMessage((uint64_t)this, v5);
  if (!v42)
  {
    unsigned int appended = 3;
    goto LABEL_46;
  }

  unsigned int appended = ot::Mle::Mle::TxMessage::AppendVersionTlv(v42);
  if (!appended)
  {
    unsigned int appended = ot::Mle::Mle::TxMessage::AppendSourceAddressTlv(v42);
    if (!appended)
    {
      unsigned int appended = ot::Mle::Mle::TxMessage::AppendResponseTlv(v42, a5);
      if (!appended)
      {
        unsigned int appended = ot::Mle::Mle::TxMessage::AppendLinkFrameCounterTlv(v42);
        if (!appended)
        {
          unsigned int appended = ot::Mle::Mle::TxMessage::AppendMleFrameCounterTlv(v42);
          if (!appended)
          {
            char v34 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
            ThreadLinkInfo = (ot::ThreadLinkInfo *)ot::Ip6::MessageInfo::GetThreadLinkInfo(a2);
            char Rss = ot::ThreadLinkInfo::GetRss(ThreadLinkInfo);
            unsigned __int8 v40 = ot::Mac::Mac::ComputeLinkMargin(v34, Rss);
            unsigned int appended = ot::Mle::Mle::TxMessage::AppendLinkMarginTlv(v42, v40);
            if (!appended)
            {
              if (!a3
                || (unsigned __int16 v8 = ot::Neighbor::GetRloc16(a3), !ot::Mle::IsActiveRouter((ot::Mle *)v8))
                || (unsigned int appended = ot::Mle::Mle::TxMessage::AppendLeaderDataTlv(v42)) == 0)
              {
                ot::Array<unsigned char,(unsigned short)32,unsigned char>::begin();
                uint64_t v39 = v9;
                uint64_t v38 = ot::Array<unsigned char,(unsigned short)32,unsigned char>::end((uint64_t)a4);
                while (v39 != (unsigned __int8 *)v38)
                {
                  int v33 = *v39;
                  switch(v33)
                  {
                    case 9:
                      unsigned int appended = ot::Mle::Mle::TxMessage::AppendRouteTlv(v42, a3);
                      if (appended) {
                        goto LABEL_46;
                      }
                      break;
                    case 10:
                      if (!a3)
                      {
                        unsigned int appended = 2;
                        goto LABEL_46;
                      }

                      unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(a3);
                      unsigned int appended = ot::Mle::Mle::TxMessage::AppendAddress16Tlv(v42, Rloc16);
                      if (appended) {
                        goto LABEL_46;
                      }
                      break;
                    case 16:
                      break;
                    default:
                      unsigned int appended = 2;
                      goto LABEL_46;
                  }

                  ++v39;
                }

                if (a3 && !ot::Neighbor::IsStateValid(a3))
                {
                  ot::Neighbor::GenerateChallenge(a3);
                  Challenge = (unsigned __int8 *)ot::Neighbor::GetChallenge(a3);
                  Challengechar Size = ot::Neighbor::GetChallengeSize(a3);
                  unsigned int appended = ot::Mle::Mle::TxMessage::AppendChallengeTlv(v42, Challenge, ChallengeSize);
                  if (appended) {
                    goto LABEL_46;
                  }
                  uint64_t v19 = (ot::TimerMilli *)ot::Mle::Mle::TxMessage::AppendTlvRequestTlv<(unsigned char)1>( v42,  (unsigned __int8 *)&ot::Mle::MleRouter::SendLinkAccept(ot::Ip6::MessageInfo const&,ot::Neighbor *,ot::Mle::Mle::TlvList const&,ot::Mle::Mle::Challenge const&)::kRouterTlvs);
                  unsigned int appended = v19;
                  if ((_DWORD)v19) {
                    goto LABEL_46;
                  }
                  int Now = ot::TimerMilli::GetNow(v19);
                  ot::Neighbor::SetLastHeard((uint64_t)a3, Now);
                  ot::Neighbor::SetState(a3, 5);
                }

                unsigned int appended = ot::Mle::Mle::TxMessage::AppendVendorDataTlv(v42, v10, v11, v12, v13, v14, v15, v16);
                if (!appended)
                {
                  ot::Ip6::MessageInfo::GetSockAddr(a2);
                  if (ot::Ip6::Address::IsMulticast(v20))
                  {
                    ot::Ip6::MessageInfo::GetPeerAddr(a2);
                    uint64_t v31 = v21;
                    __int16 Uint16InRange = ot::Random::NonCrypto::GetUint16InRange(0LL, 0x3E8u);
                    unsigned int appended = ot::Mle::Mle::TxMessage::SendAfterDelay(v42, v31, Uint16InRange + 1);
                    if (!appended)
                    {
                      if (v41 == 1) {
                        char v23 = 23;
                      }
                      else {
                        char v23 = 24;
                      }
                      unsigned __int8 v30 = v23;
                      ot::Ip6::MessageInfo::GetPeerAddr(a2);
                      ot::Mle::Mle::Log(2u, v30, v24);
                    }
                  }

                  else
                  {
                    ot::Ip6::MessageInfo::GetPeerAddr(a2);
                    unsigned int appended = ot::Mle::Mle::TxMessage::SendTo(v42, v25);
                    if (!appended)
                    {
                      if (v41 == 1) {
                        char v26 = 23;
                      }
                      else {
                        char v26 = 24;
                      }
                      unsigned __int8 v29 = v26;
                      ot::Ip6::MessageInfo::GetPeerAddr(a2);
                      ot::Mle::Mle::Log(0, v29, v27);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

void ot::Mle::MleRouter::HandleLinkAccept( ot::Mle::MleRouter *this, ot::Ip6::MessageInfo **a2, uint64_t a3, unsigned __int16 *a4)
{
  int v4 = ot::Mle::MleRouter::HandleLinkAccept(this, a2, 0LL, a4);
  ot::Mle::Mle::LogProcessError(0x17u, v4);
}

uint64_t ot::Mle::MleRouter::HandleLinkAccept( ot::Mle::MleRouter *this, ot::Ip6::MessageInfo **a2, uint64_t a3, unsigned __int16 *a4)
{
  uint64_t v77 = this;
  uint64_t v76 = a2;
  char v75 = a3 & 1;
  unsigned int ResponseTlv = 0;
  BOOL v67 = 0;
  unsigned int ResponseTlv = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)0,unsigned short>>(*a2, v73, a3, a4);
  if (!ResponseTlv)
  {
    if ((v75 & 1) != 0) {
      char v4 = 24;
    }
    else {
      char v4 = 23;
    }
    unsigned __int8 v62 = v4;
    ot::Ip6::MessageInfo::GetPeerAddr(v76[1]);
    ot::Mle::Mle::Log(1u, v62, v5, v73[0]);
    if (ot::Mle::IsActiveRouter((ot::Mle *)v73[0]))
    {
      unsigned __int8 v70 = ot::Mle::RouterIdFromRloc16((ot::Mle *)v73[0]);
      ot::RouterTable::FindRouterById((ot::Mle::MleRouter *)((char *)this + 38136), v70);
      *(void *)&v73[3] = v9;
      if (v9) {
        char State = ot::Neighbor::GetState(*(ot::Neighbor **)&v73[3]);
      }
      else {
        char State = 0;
      }
      HIBYTE(v73[2]) = State;
      unsigned int ResponseTlv = ot::Mle::Mle::RxMessage::ReadResponseTlv(*v76, (ot::Mle::Mle::Challenge *)v82, v6, v7, v8);
      if (!ResponseTlv)
      {
        if (HIBYTE(v73[2]))
        {
          if (HIBYTE(v73[2]) == 5)
          {
            Challenge = (unsigned __int8 *)ot::Neighbor::GetChallenge(*(ot::Neighbor **)&v73[3]);
            Challengechar Size = ot::Neighbor::GetChallengeSize(*(ot::Neighbor **)&v73[3]);
            if (!ot::Mle::Mle::Challenge::Matches((ot::Mle::Mle::Challenge *)v82, Challenge, ChallengeSize)) {
              return 8;
            }
          }

          else if (HIBYTE(v73[2]) != 7)
          {
            return 8;
          }
        }

        else if (!*((_BYTE *)this + 392) && !*((_BYTE *)this + 46176) {
               || !ot::Mle::Mle::Challenge::operator==((ot::Mle::Mle::Challenge *)v82, (uint64_t)this + 46177))
        }
        {
          return 8;
        }

        if (v76[3])
        {
          unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(v76[3]);
          if (v73[0] != Rloc16) {
            ot::Mle::MleRouter::RemoveNeighbor(this, v76[3]);
          }
        }

        unsigned int ResponseTlv = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)18,unsigned short>>(*v76, &v73[1], v10, v11);
        if (!ResponseTlv)
        {
          if (v73[1] >= 2u)
          {
            unsigned int ResponseTlv = ot::Mle::Mle::RxMessage::ReadFrameCounterTlvs(*v76, &v72, &v71, v14);
            if (!ResponseTlv)
            {
              ot::Ip6::MessageInfo::GetPeerAddr(v76[1]);
              ot::Ip6::Address::ToString(v15, (ot::StringWriter *)v80);
              ot::String<(unsigned short)40>::AsCString((uint64_t)v80);
              ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)&ot::Mle::kLogModuleName,  "%s Rx from %s linkFrameCounter=%d mleFrameCounter=%d",  v16,  v17,  v18,  v19,  v20,  v21,  (char)"HandleLinkAccept");
              int v59 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)16,unsigned char>>(*v76, &v68, v22, v23);
              if (v59)
              {
                if (v59 != 23) {
                  return 6;
                }
                if (!ot::Mle::Mle::IsDetached(this)) {
                  return 23;
                }
                unsigned __int8 v68 = 0;
              }

              unint64_t v58 = *((unsigned __int8 *)this + 41);
              if (v58 <= 4) {
                __asm { BR              X8 }
              }

              ot::Mle::Mle::InitNeighbor(this, *(ot::Neighbor **)&v73[3], v76);
              ot::Neighbor::SetRloc16(*(uint64_t *)&v73[3], v73[0]);
              LinkFrameCounters = (_DWORD *)ot::Neighbor::GetLinkFrameCounters(*(ot::Neighbor **)&v73[3]);
              ot::Mac::LinkFrameCounters::SetAll(LinkFrameCounters, v72);
              ot::Neighbor::SetLinkAckFrameCounter(*(uint64_t *)&v73[3], v72);
              ot::Neighbor::SetMleFrameCounter(*(uint64_t *)&v73[3], v71);
              ot::Neighbor::SetVersion(*(uint64_t *)&v73[3], v73[1]);
              uint64_t v53 = *(void *)&v73[3];
              ot::Mle::DeviceMode::DeviceMode((ot::Mle::DeviceMode *)&v64, 11);
              ot::Neighbor::SetDeviceMode(v53, v64);
              uint64_t v54 = *(void *)&v73[3];
              char v25 = ot::LinkQualityForLinkMargin((ot *)v68);
              ot::Router::SetLinkQualityOut(v54, v25);
              ot::Neighbor::SetState(*(ot::InstanceLocator **)&v73[3], 7);
              ot::Neighbor::SetKeySequence(*(uint64_t *)&v73[3], *((_DWORD *)v76 + 5));
              uint64_t v55 = *(ot::Neighbor **)&v73[3];
              Dataunsigned __int16 Version = ot::Mle::LeaderData::GetDataVersion((uint64_t)&v69, 0);
              ot::Neighbor::SetLeaderFullDataVersion((uint64_t)v55, DataVersion);
              uint64_t v56 = *(ot::Neighbor **)&v73[3];
              char v27 = ot::Mle::LeaderData::GetDataVersion((uint64_t)&v69, 1);
              ot::Neighbor::SetLeaderStableDataVersion((uint64_t)v56, v27);
              uint64_t v57 = *(ot::Neighbor **)&v73[3];
              char RouterIdSequence = ot::Mle::RouteTlv::GetRouterIdSequence((ot::Mle::RouteTlv *)v81);
              ot::Neighbor::SetIdSeqNum((uint64_t)v57, RouterIdSequence);
              unsigned int ResponseTlv = ot::Mle::Mle::RxMessage::ReadVendorDataTlv(*v76, &v67, &v66, &v65, v29);
              if (!ResponseTlv)
              {
                if (*(void *)&v73[3])
                {
                  if (v67)
                  {
                    ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mle::kLogModuleName,  "HandleLinkAccept vendorId=%d vendorSpecificInfo=%d powerControlMode=%d added",  v30,  v31,  v32,  v33,  v34,  v35,  v66);
                  }

                  else
                  {
                    unsigned __int16 v66 = 0;
                    unsigned __int16 v65 = 0;
                    if (v76[3])
                    {
                      if (ot::Neighbor::IsFullThreadDevice(v76[3]))
                      {
                        Instance = ot::InstanceLocator::GetInstance(this);
                      }
                    }

                    ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mle::kLogModuleName,  "HandleLinkAccept vendorId=%d vendorSpecificInfo=%d",  v30,  v31,  v32,  v33,  v34,  v35,  v66);
                  }

                  ot::Neighbor::SetVendorId(*(uint64_t *)&v73[3], v66);
                  ot::Neighbor::SetVendorSpecificInfo(*(uint64_t *)&v73[3], v65);
                  ot::Neighbor::SetPowerControlMode(*(ot::InstanceLocator **)&v73[3], v65 & 7);
                }

                else
                {
                  ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mle::kLogModuleName,  "HandleLinkAccept Neighbor is NULL",  v30,  v31,  v32,  v33,  v34,  v35,  v51);
                }

                ot::NeighborTable::Signal((ot::Mle::MleRouter *)((char *)this + 304), 3u, *(ot::Neighbor **)&v73[3]);
                *((_BYTE *)v76 + 32) = 1;
                ot::Mle::Mle::ProcessKeySequence(this, (ot::Mle::Mle::RxInfo *)v76);
                if ((v75 & 1) != 0)
                {
                  ot::Mle::Mle::TlvList::TlvList((ot::Mle::Mle::TlvList *)v78);
                  unsigned int ResponseTlv = ot::Mle::Mle::RxMessage::ReadChallengeTlv( *v76,  (ot::Mle::Mle::Challenge *)v79,  v44,  v45,  v46);
                  if (!ResponseTlv)
                  {
                    int TlvRequestTlv = ot::Mle::Mle::RxMessage::ReadTlvRequestTlv( *v76,  (ot::Mle::Mle::TlvList *)v78,  v47,  v48,  v49);
                    if (TlvRequestTlv && TlvRequestTlv != 23) {
                      return 6;
                    }
                    else {
                      return ot::Mle::MleRouter::SendLinkAccept( this,  v76[1],  *(ot::Neighbor **)&v73[3],  (const ot::Mle::Mle::TlvList *)v78,  (const ot::Mle::Mle::Challenge *)v79);
                    }
                  }
                }
              }
            }
          }

          else
          {
            return 6;
          }
        }
      }
    }

    else
    {
      return 6;
    }
  }

  return ResponseTlv;
}

void ot::Mle::MleRouter::HandleLinkAcceptAndRequest( ot::Mle::MleRouter *this, ot::Ip6::MessageInfo **a2, uint64_t a3, unsigned __int16 *a4)
{
  int v4 = ot::Mle::MleRouter::HandleLinkAccept(this, a2, 1LL, a4);
  ot::Mle::Mle::LogProcessError(0x18u, v4);
}

uint64_t ot::Mle::MleRouter::ProcessRouteTlv( ot::Mle::MleRouter *this, const ot::Mle::RouteTlv *a2, ot::Neighbor **a3)
{
  unsigned int v16 = 0;
  unsigned __int16 Rloc16 = -2;
  if (a3[3])
  {
    uint64_t v3 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(this);
    if (ot::RouterTable::Contains(v3, a3[3])) {
      unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(a3[3]);
    }
  }

  char RouterIdSequence = ot::Mle::RouteTlv::GetRouterIdSequence(a2);
  RouterIdMask = (const ot::Mle::RouterIdSet *)ot::Mle::RouteTlv::GetRouterIdMask(a2);
  ot::RouterTable::UpdateRouterIdSet((ot::Mle::MleRouter *)((char *)this + 38136), RouterIdSequence, RouterIdMask);
  if (ot::Mle::Mle::IsRouter(this)
    && !ot::RouterTable::IsAllocated((ot::Mle::MleRouter *)((char *)this + 38136), *((_BYTE *)this + 46241)))
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mle::kLogModuleName,  "Error while processing Route TLV - Router ID: %d",  v5,  v6,  v7,  v8,  v9,  v10,  *((_BYTE *)this + 46241));
    ot::Mle::Mle::BecomeDetached(this);
    IgnoreError();
    unsigned int v16 = 4;
  }

  if (Rloc16 != 65534)
  {
    uint64_t v11 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
    a3[3] = (ot::Neighbor *)ot::NeighborTable::FindNeighbor(v11, Rloc16, 1);
  }

  return v16;
}

uint64_t ot::Router::GetNextHop(ot::Router *this)
{
  return *((unsigned __int8 *)this + 244);
}

{
  return __ZNK2ot6Router10GetNextHopEv(this);
}

uint64_t ot::Neighbor::SetIdSeqNum(uint64_t this, char a2)
{
  *(_BYTE *)(this + 101) = a2;
  return this;
}

{
  return __ZN2ot8Neighbor11SetIdSeqNumEh(this, a2);
}

uint64_t ot::Mle::RouteTlv::GetRouterIdSequence(ot::Mle::RouteTlv *this)
{
  return *((unsigned __int8 *)this + 2);
}

{
  return __ZNK2ot3Mle8RouteTlv19GetRouterIdSequenceEv(this);
}

uint64_t ot::Mle::MleRouter::SetRouterSelectionJitter(ot::Mle::MleRouter *this, char a2)
{
  unsigned int v3 = 0;
  if (a2) {
    *((_BYTE *)this + 46254) = a2;
  }
  else {
    return 7;
  }
  return v3;
}

BOOL ot::RouterTable::Contains(ot::RouterTable *this, const ot::Neighbor *a2)
{
  return ot::Array<ot::Router,(unsigned short)32,unsigned char>::IsInArrayBuffer( (unint64_t)this + 8,  (unint64_t)a2);
}

{
  return __ZNK2ot11RouterTable8ContainsERKNS_8NeighborE(this, a2);
}

uint64_t ot::Mle::RouteTlv::GetRouterIdMask(ot::Mle::RouteTlv *this)
{
  return (uint64_t)this + 3;
}

{
  return __ZNK2ot3Mle8RouteTlv15GetRouterIdMaskEv(this);
}

uint64_t ot::Mle::MleRouter::ReadAndProcessRouteTlvOnFed( ot::Mle::MleRouter *this, ot::Mle::Mle::RxMessage **a2, unsigned __int8 a3)
{
  unsigned int v9 = 0;
  if (ot::Mle::Mle::IsFullThreadDevice(this))
  {
    int RouteTlv = ot::Mle::Mle::RxMessage::ReadRouteTlv(*a2, (ot::Mle::RouteTlv *)v12, v3, v4, v5);
    if (RouteTlv)
    {
      if (RouteTlv != 23) {
        return 6;
      }
    }

    else
    {
      unsigned int v9 = ot::Mle::MleRouter::ProcessRouteTlv(this, (const ot::Mle::RouteTlv *)v12, a2);
      if (!v9)
      {
        ot::RouterTable::UpdateRoutesOnFed((BOOL)this + 38136, (const ot::Mle::RouteTlv *)v12, a3);
        *((_BYTE *)this + 40) &= ~2u;
      }
    }
  }

  return v9;
}

BOOL ot::Mle::MleRouter::IsSingleton(ot::Mle::MleRouter *this)
{
  BOOL v3 = 1;
  if (ot::Mle::Mle::IsAttached(this) && (ot::Mle::MleRouter::IsRouterEligible(this) & 1) != 0) {
    return ot::RouterTable::GetActiveRouterCount((ot::Mle::MleRouter *)((char *)this + 38136)) <= 1u;
  }
  return v3;
}

uint64_t ot::Mle::MleRouter::ComparePartitions( ot::Mle::MleRouter *this, ot::Mle::LeaderData *a2, const ot::Mle::LeaderData *a3, ot::Mle::LeaderData *a4, const ot::Mle::LeaderData *a5)
{
  char v20 = this & 1;
  char v18 = a3 & 1;
  unsigned __int8 Weighting = ot::Mle::LeaderData::GetWeighting(a2);
  unsigned __int8 v5 = ot::Mle::LeaderData::GetWeighting(a4);
  unsigned int v16 = ot::ThreeWayCompare<unsigned char>(Weighting, v5);
  if (!v16)
  {
    unsigned int v16 = ot::ThreeWayCompare<BOOL>((v20 ^ 1) & 1, (v18 ^ 1) & 1);
    if (!v16)
    {
      unsigned int PartitionId = ot::Mle::LeaderData::GetPartitionId(a2);
      unsigned int v6 = ot::Mle::LeaderData::GetPartitionId(a4);
      unsigned int v16 = ot::ThreeWayCompare<unsigned int>(PartitionId, v6);
    }
  }

  ot::Mle::LeaderData::GetWeighting(a2);
  ot::Mle::LeaderData::GetWeighting(a4);
  ot::Mle::LeaderData::GetPartitionId(a2);
  ot::Mle::LeaderData::GetPartitionId(a4);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)&ot::Mle::kLogModuleName,  "MleRouter::ComparePartitions rval:%d, weighting:[%u %u], !singleton:[%d %d], partId:[%u %u]",  v7,  v8,  v9,  v10,  v11,  v12,  v16);
  return v16;
}

uint64_t ot::ThreeWayCompare<unsigned int>(unsigned int a1, unsigned int a2)
{
  if (a1 == a2)
  {
    return 0;
  }

  else if (a1 > a2)
  {
    return 1;
  }

  else
  {
    return -1;
  }

{
  return __ZN2ot15ThreeWayCompareIjEEiT_S1_(a1, a2);
}

uint64_t ot::Mle::MleRouter::HandleAdvertisement( ot::Mle::MleRouter *this, ot::Neighbor **a2, unsigned __int16 a3, const ot::Mle::LeaderData *a4)
{
  uint64_t v128 = this;
  uint64_t v127 = a2;
  unsigned __int16 v126 = a3;
  uint64_t v125 = a4;
  unsigned __int8 v115 = this;
  *(_DWORD *)&v124[1] = 0;
  unsigned __int16 v116 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  ThreadLinkInfo = (ot::ThreadLinkInfo *)ot::Ip6::MessageInfo::GetThreadLinkInfo(v127[1]);
  char Rss = ot::ThreadLinkInfo::GetRss(ThreadLinkInfo);
  *(_DWORD *)uint64_t v124 = ot::Mac::Mac::ComputeLinkMargin(v116, Rss);
  int RouteTlv = ot::Mle::Mle::RxMessage::ReadRouteTlv(*v127, (ot::Mle::RouteTlv *)v129, v6, v7, v8);
  if (RouteTlv)
  {
    if (RouteTlv != 23)
    {
      *(_DWORD *)&v124[1] = 6;
      goto LABEL_66;
    }

    ot::Tlv::SetLength((uint64_t)v129, 0);
  }

  int PartitionId = ot::Mle::LeaderData::GetPartitionId(v125);
  if (PartitionId == ot::Mle::LeaderData::GetPartitionId((ot::InstanceLocator *)((char *)v115 + 32)))
  {
    int LeaderRouterId = ot::Mle::LeaderData::GetLeaderRouterId(v125);
    if (LeaderRouterId == ot::Mle::Mle::GetLeaderId(v115))
    {
      if (ot::Mle::IsActiveRouter((ot::Mle *)v126) && ot::Mle::RouteTlv::IsValid((ot::Mle::RouteTlv *)v129))
      {
        unsigned __int8 v122 = ot::Mle::RouterIdFromRloc16((ot::Mle *)v126);
        int v92 = ot::Mle::Rloc16FromRouterId((ot::Mle *)v122);
        int v89 = 0;
        Dataunsigned __int16 Version = ot::Mle::LeaderData::GetDataVersion((uint64_t)v125, 0);
        int v90 = 1;
        int v94 = ot::Mle::LeaderData::GetDataVersion((uint64_t)v125, 1);
        int v95 = ot::Mle::LeaderData::GetDataVersion((uint64_t)v115 + 32, 0);
        int v96 = ot::Mle::LeaderData::GetDataVersion((uint64_t)v115 + 32, 1);
        uint64_t v91 = (ot::Mle::RouteTlv *)v129;
        int RouterIdSequence = ot::Mle::RouteTlv::GetRouterIdSequence((ot::Mle::RouteTlv *)v129);
        uint64_t v68 = DataVersion;
        uint64_t v69 = v94;
        uint64_t v70 = v95;
        uint64_t v71 = v96;
        uint64_t v72 = RouterIdSequence;
        uint64_t IsRouteTlvIdSequenceMoreRecent = ot::RouterTable::IsRouteTlvIdSequenceMoreRecent( (ot::InstanceLocator *)((char *)v115 + 38136),  (const ot::Mle::RouteTlv *)v129);
        ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)&ot::Mle::kLogModuleName,  "MLE Advertisement received from router (0x%04x), aleaderDataVersion:[full:%d stable:%d] myLeaderDataVer:[full: %d, stable:%d] ,routeTlvIdSeqNum(%d), isRouteTlvIdSeqNumMoreRecent(%d)",  v27,  v28,  v29,  v30,  v31,  v32,  v92);
        if (!ot::Mle::Mle::RxInfo::IsNeighborStateValid(v127)
          || !ot::RouterTable::IsRouteTlvIdSequenceMoreRecent( (ot::InstanceLocator *)((char *)v115 + 38136),  (const ot::Mle::RouteTlv *)v129))
        {
          goto LABEL_38;
        }

        BOOL IsStateValid = 0;
        if (ot::Mle::Mle::IsChild(v115))
        {
          int v88 = v126;
          if (v126 == (unsigned __int16)ot::Neighbor::GetRloc16((ot::InstanceLocator *)((char *)v115 + 48)))
          {
            BOOL IsStateValid = 1;
          }

          else
          {
            ot::RouterTable::FindRouterById((ot::InstanceLocator *)((char *)v115 + 38136), v122);
            uint64_t v123 = v33;
            if (v33) {
              BOOL IsStateValid = ot::Neighbor::IsStateValid(v123);
            }
          }
        }

        else
        {
          BOOL IsStateValid = 1;
        }

        if (!IsStateValid
          || (*(_DWORD *)&v124[1] = ot::Mle::MleRouter::ProcessRouteTlv(v115, (const ot::Mle::RouteTlv *)v129, v127)) == 0)
        {
LABEL_38:
          if (ot::Mle::Mle::IsChild(v115))
          {
            if (v127[3] == (ot::InstanceLocator *)((char *)v115 + 48))
            {
              uint64_t v123 = (ot::InstanceLocator *)((char *)v115 + 48);
              if (v126 != (unsigned __int16)ot::Neighbor::GetRloc16((ot::InstanceLocator *)((char *)v115 + 48)))
              {
                char Rloc16 = ot::Neighbor::GetRloc16((ot::InstanceLocator *)((char *)v115 + 48));
                uint64_t v68 = v126;
                ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mle::kLogModuleName,  "RLOC16 of the parent mismatches parentRloc16:0x%x sourceAddr:0x%x",  v35,  v36,  v37,  v38,  v39,  v40,  Rloc16);
                ot::Mle::Mle::BecomeDetached(v115);
                IgnoreError();
                *(_DWORD *)&v124[1] = 16;
                goto LABEL_66;
              }

              if (!*((_BYTE *)v115 + 46255)
                && *((unsigned __int8 *)v115 + 46189) > (int)ot::RouterTable::GetActiveRouterCount((ot::InstanceLocator *)((char *)v115 + 38136)))
              {
                *((_BYTE *)v115 + 46255) = ot::Random::NonCrypto::GetUint8InRange(0LL, *((_BYTE *)v115 + 46254)) + 1;
              }

              int updated = (ot::TimerMilli *)ot::RouterTable::UpdateRoutesOnFed( (BOOL)v115 + 38136,  (const ot::Mle::RouteTlv *)v129,  v122);
            }

            else
            {
              ot::RouterTable::FindRouterById((ot::InstanceLocator *)((char *)v115 + 38136), v122);
              uint64_t v123 = v42;
              if (!v42) {
                goto LABEL_66;
              }
              int updated = (ot::TimerMilli *)ot::Neighbor::IsStateValid(v123);
              if ((updated & 1) == 0)
              {
                int updated = (ot::TimerMilli *)ot::Neighbor::IsStateLinkRequest(v123);
                if ((updated & 1) == 0)
                {
                  int updated = (ot::TimerMilli *)ot::RouterTable::GetNeighborCount((ot::InstanceLocator *)((char *)v115 + 38136));
                  if (*((unsigned __int8 *)v115 + 46256) > (int)updated)
                  {
                    ot::Mle::Mle::InitNeighbor(v115, v123, v127);
                    ot::Neighbor::SetState(v123, 5);
                    ot::Mle::MleRouter::SendLinkRequest(v115, v123);
                    IgnoreError();
                    *(_DWORD *)&v124[1] = 4;
                    goto LABEL_66;
                  }
                }
              }
            }

            v87 = v123;
            int Now = ot::TimerMilli::GetNow(updated);
            ot::Neighbor::SetLastHeard((uint64_t)v123, Now);
            goto LABEL_66;
          }

          if (ot::Mle::Mle::IsRouter(v115)
            && (ot::Mle::MleRouter::ShouldDowngrade(v115, v122, (const ot::Mle::RouteTlv *)v129) & 1) != 0)
          {
            *((_BYTE *)v115 + 46255) = ot::Random::NonCrypto::GetUint8InRange(0LL, *((_BYTE *)v115 + 46254)) + 1;
          }

          ot::RouterTable::FindRouterById((ot::InstanceLocator *)((char *)v115 + 38136), v122);
          uint64_t v123 = v43;
          if (v43)
          {
            uint64_t v84 = v123;
            char v44 = ot::Mle::LeaderData::GetDataVersion((uint64_t)v125, 0);
            ot::Neighbor::SetLeaderFullDataVersion((uint64_t)v123, v44);
            uint64_t v85 = v123;
            char v45 = ot::Mle::LeaderData::GetDataVersion((uint64_t)v125, 1);
            ot::Neighbor::SetLeaderStableDataVersion((uint64_t)v123, v45);
            uint64_t v86 = v123;
            char v46 = ot::Mle::RouteTlv::GetRouterIdSequence((ot::Mle::RouteTlv *)v129);
            ot::Neighbor::SetIdSeqNum((uint64_t)v123, v46);
            if (!ot::Neighbor::IsStateValid(v123) && ot::Mle::Mle::RxInfo::IsNeighborStateValid(v127))
            {
              uint64_t v47 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(v115);
              if (ot::ChildTable::Contains(v47, v127[3]))
              {
                char v48 = ot::Mle::Rloc16FromRouterId((ot::Mle *)v122);
                ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)&ot::Mle::kLogModuleName,  "Advertisement received from former child which is now a router (0x%04x),copy entries from child table to router table and update eid cache",  v49,  v50,  v51,  v52,  v53,  v54,  v48);
                memcpy(v123, v127[3], 0xF4uLL);
                uint64_t v80 = v123;
                __int16 v55 = ot::Mle::Rloc16FromRouterId((ot::Mle *)v122);
                ot::Neighbor::SetRloc16((uint64_t)v123, v55);
                uint64_t v81 = v123;
                ot::Mle::DeviceMode::DeviceMode((ot::Mle::DeviceMode *)&v119, 11);
                ot::Neighbor::SetDeviceMode((uint64_t)v81, v119);
                ot::NeighborTable::Signal((ot::InstanceLocator *)((char *)v115 + 304), 3u, v123);
                uint64_t v83 = (ot::AddressResolver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>(v115);
                int v82 = ot::Neighbor::GetRloc16(v127[3]);
                __int16 v56 = ot::Neighbor::GetRloc16(v123);
                ot::AddressResolver::ReplaceEntriesForRloc16((BOOL)v83, v82, v56);
              }
            }

            BOOL IsStateLinkRequest = ot::Neighbor::IsStateValid(v123);
            if (IsStateLinkRequest
              || (BOOL IsStateLinkRequest = ot::Neighbor::IsStateLinkRequest(v123))
              || *((_BYTE *)v115 + 46176)
              || v124[0] < 0xAu)
            {
              uint64_t v79 = v123;
              int v118 = ot::TimerMilli::GetNow((ot::TimerMilli *)IsStateLinkRequest);
              ot::Neighbor::SetLastHeard((uint64_t)v79, v118);
              ot::RouterTable::UpdateRoutes( (ot::InstanceLocator *)((char *)v115 + 38136),  (const ot::Mle::RouteTlv *)v129,  v122);
            }

            else
            {
              ot::Mle::Mle::InitNeighbor(v115, v123, v127);
              ot::Neighbor::SetState(v123, 5);
              ot::Mle::MleRouter::SendLinkRequest(v115, v123);
              IgnoreError();
              char v58 = ot::Mle::Rloc16FromRouterId((ot::Mle *)v122);
              ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mle::kLogModuleName,  "Advertisement received from router (0x%04x) to which no link exists",  v59,  v60,  v61,  v62,  v63,  v64,  v58);
              *(_DWORD *)&v124[1] = 4;
            }
          }
        }
      }
    }

    else if (ot::Mle::Mle::RxInfo::IsNeighborStateValid(v127) && !ot::Mle::Mle::IsChild(v115))
    {
      int LeaderId = ot::Mle::Mle::GetLeaderId(v115);
      uint64_t v68 = ot::Mle::LeaderData::GetLeaderRouterId(v125);
      ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)&ot::Mle::kLogModuleName,  "Leader ID mismatch leaderId=%d, leaderData.leaderRouterId=%d",  v21,  v22,  v23,  v24,  v25,  v26,  LeaderId);
      ot::Mle::Mle::BecomeDetached(v115);
      IgnoreError();
      *(_DWORD *)&v124[1] = 2;
    }
  }

  else
  {
    uint64_t v9 = ot::Mle::LeaderData::GetPartitionId(v125);
    uint64_t v103 = ot::ToUlong(v9);
    uint64_t v10 = ot::Mle::LeaderData::GetPartitionId((ot::InstanceLocator *)((char *)v115 + 32));
    uint64_t v104 = ot::ToUlong(v10);
    int v105 = v124[0];
    uint64_t v102 = (ot::Mle::RouteTlv *)v129;
    BOOL IsValid = ot::Mle::RouteTlv::IsValid((ot::Mle::RouteTlv *)v129);
    unsigned int v107 = *((unsigned __int8 *)v115 + 46253);
    unsigned int v108 = ot::Mle::LeaderData::GetPartitionId(v125);
    uint64_t v109 = *((unsigned int *)v115 + 11562);
    int v110 = ot::Mle::RouteTlv::GetRouterIdSequence((ot::Mle::RouteTlv *)v129);
    unsigned int v111 = *((unsigned __int8 *)v115 + 46252);
    BOOL IsSingleton = ot::Mle::RouteTlv::IsSingleton((ot::Mle::RouteTlv *)v129);
    char v113 = &v67;
    uint64_t v68 = v104;
    uint64_t v69 = v124[0];
    uint64_t v70 = 10LL;
    uint64_t v71 = IsValid;
    uint64_t v72 = v107;
    uint64_t IsRouteTlvIdSequenceMoreRecent = v108;
    uint64_t v74 = v109;
    uint64_t v75 = v110;
    uint64_t v76 = v111;
    BOOL v77 = IsSingleton;
    BOOL v78 = ot::Mle::MleRouter::IsSingleton(v115);
    ot::Logger::LogAtLevel<(ot::LogLevel)3>( (ot *)&ot::Mle::kLogModuleName,  "Different partition (peer:%lu, local:%lu), linkMargin:%d, partitionMergeLinkMargin:%d, routeTlvIsValid:%d, mPrevPa rtIdTimeout:%d, leaderDataPartId:%d, prevPartId:%d, routerIdSeq:%d, prevPartRouterIdSeq:%d, routeTlvIsSingleton:%d isSingleTon:%d",  v11,  v12,  v13,  v14,  v15,  v16,  v103);
    if (v124[0] >= 0xAu)
    {
      if (ot::Mle::RouteTlv::IsValid((ot::Mle::RouteTlv *)v129)
        && *((_BYTE *)v115 + 46253)
        && (int v17 = ot::Mle::LeaderData::GetPartitionId(v125), v17 == *((_DWORD *)v115 + 11562))
        && (char v18 = ot::Mle::RouteTlv::GetRouterIdSequence((ot::Mle::RouteTlv *)v129),
            !ot::SerialNumber::IsGreater<unsigned char>(v18, *((_BYTE *)v115 + 46252))))
      {
        *(_DWORD *)&v124[1] = 2;
      }

      else if (!ot::Mle::Mle::IsChild(v115) || v127[3] != (ot::InstanceLocator *)((char *)v115 + 48))
      {
        BOOL v101 = ot::Mle::RouteTlv::IsSingleton((ot::Mle::RouteTlv *)v129);
        *(void *)uint64_t v100 = v125;
        BOOL v19 = ot::Mle::MleRouter::IsSingleton(v115);
        if ((int)ot::Mle::MleRouter::ComparePartitions( (ot::Mle::MleRouter *)v101,  *(ot::Mle::LeaderData **)v100,  (const ot::Mle::LeaderData *)v19,  (ot::InstanceLocator *)((char *)v115 + 32),  v20) > 0) {
          ot::Mle::Mle::Attach((uint64_t)v115, 2);
        }
        *(_DWORD *)&v124[1] = 2;
      }
    }

    else
    {
      *(_DWORD *)&v124[1] = 34;
    }
  }

BOOL ot::Mle::RouteTlv::IsSingleton(ot::Mle::RouteTlv *this)
{
  BOOL v3 = 0;
  if (ot::Mle::RouteTlv::IsValid(this)) {
    return ot::Mle::RouterIdSet::GetNumberOfAllocatedIds((ot::Mle::RouteTlv *)((char *)this + 3)) <= 1u;
  }
  return v3;
}

{
  return __ZNK2ot3Mle8RouteTlv11IsSingletonEv(this);
}

uint64_t ot::Mle::MleRouter::ShouldDowngrade( ot::Mle::MleRouter *this, unsigned __int8 a2, const ot::Mle::RouteTlv *a3)
{
  char v12 = 0;
  unsigned __int8 ActiveRouterCount = ot::RouterTable::GetActiveRouterCount((ot::Mle::MleRouter *)((char *)this + 38136));
  if (ot::Mle::Mle::IsRouter(this)
    && ot::RouterTable::IsAllocated((ot::Mle::MleRouter *)((char *)this + 38136), a2)
    && !*((_BYTE *)this + 46255)
    && ActiveRouterCount > (int)*((unsigned __int8 *)this + 46190))
  {
    unsigned __int8 v9 = 0;
    ot::RouterTable::begin((ot::Mle::MleRouter *)((char *)this + 38136));
    uint64_t v8 = v3;
    uint64_t v7 = ot::RouterTable::end((ot::Mle::MleRouter *)((char *)this + 38136));
    while (v8 != (ot::Neighbor *)v7)
    {
      uint64_t v8 = (ot::Neighbor *)((char *)v8 + 248);
    }

    if (v9 >= 7u)
    {
      unsigned __int8 v10 = ActiveRouterCount - *((_BYTE *)this + 46190);
      if (3 * v10 > (unsigned __int16)ot::ChildTable::GetNumChildren((__int16 *)this + 632, 0)
        && (ot::Mle::MleRouter::NeighborHasComparableConnectivity(this, a3, a2) & 1) != 0)
      {
        uint64_t v4 = (ot::NetworkData::Notifier *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Notifier>(this);
        if (!ot::NetworkData::Notifier::IsEligibleForRouterRoleUpgradeAsBorderRouter(v4)) {
          char v12 = 1;
        }
      }
    }
  }

  return v12 & 1;
}

void ot::Mle::MleRouter::HandleParentRequest(ot::Mle::MleRouter *this, ot::Ip6::MessageInfo **a2)
{
  uint64_t v76 = this;
  uint64_t v75 = a2;
  int ChallengeTlv = 0;
  ot::Ip6::MessageInfo::GetPeerAddr(a2[1]);
  ot::Mle::Mle::Log(1u, 0x1Bu, v2);
  if ((ot::Mle::MleRouter::IsRouterEligible(this) & 1) == 0)
  {
    int ChallengeTlv = 13;
    char v3 = ot::ErrorToString(13);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mle::kLogModuleName,  "Parent Request dropped as not router eligible error:%s",  v4,  v5,  v6,  v7,  v8,  v9,  v3);
    goto LABEL_46;
  }

  BOOL IsRxOnWhenIdle = ot::Mle::Mle::IsRxOnWhenIdle(this);
  ot::Ip6::MessageInfo::GetSockAddr(v75[1]);
  if (IsRxOnWhenIdle != ot::Ip6::Address::IsMulticast(v10))
  {
    int ChallengeTlv = 13;
    goto LABEL_46;
  }

  if (ot::Mle::Mle::IsDetached(this) || ot::Mle::Mle::IsAttaching(this))
  {
    int ChallengeTlv = 2;
    BOOL IsDetached = ot::Mle::Mle::IsDetached(this);
    ot::Mle::Mle::IsAttaching(this);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mle::kLogModuleName,  "Parent Request dropped as isDetached(%d) isAttaching(%d)",  v11,  v12,  v13,  v14,  v15,  v16,  IsDetached);
    goto LABEL_46;
  }

  if (ot::RouterTable::GetLeaderAge((ot::Mle::MleRouter *)((char *)this + 38136)) >= *((unsigned __int8 *)this + 46188))
  {
    int ChallengeTlv = 2;
    char LeaderAge = ot::RouterTable::GetLeaderAge((ot::Mle::MleRouter *)((char *)this + 38136));
    ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mle::kLogModuleName,  "Parent Request dropped as routerTable.leaderAge(%d) nwIdTimeout(%d)",  v18,  v19,  v20,  v21,  v22,  v23,  LeaderAge);
    goto LABEL_46;
  }

  if (ot::RouterTable::GetPathCostToLeader((ot::Mle::MleRouter *)((char *)this + 38136)) >= 0x10u)
  {
    char PathCostToLeader = ot::RouterTable::GetPathCostToLeader((ot::Mle::MleRouter *)((char *)this + 38136));
    ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mle::kLogModuleName,  "Parent Request dropped here LinkCostToLeader:%d",  v25,  v26,  v27,  v28,  v29,  v30,  PathCostToLeader);
    goto LABEL_46;
  }

  ot::Ip6::MessageInfo::GetPeerAddr(v75[1]);
  Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v31);
  ot::Ip6::InterfaceIdentifier::ConvertToExtAddress(Iid, (ot::Mac::ExtAddress *)v78);
  int ChallengeTlv = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)18,unsigned short>>(*v75, &v73, v33, v34);
  if (!ChallengeTlv)
  {
    if (v73 < 2u)
    {
      int ChallengeTlv = 6;
      ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mle::kLogModuleName,  "Parent Request dropped due to Parse error version:%d",  v35,  (uint64_t)v36,  v37,  v38,  v39,  v40,  v73);
      goto LABEL_46;
    }

    int ChallengeTlv = ot::Tlv::Find<ot::Mle::ScanMaskTlv>(*v75, &v72, v35, v36);
    if (!ChallengeTlv)
    {
      unsigned int v60 = *((unsigned __int8 *)this + 41);
      if (v60 > 1)
      {
        if (v60 == 2)
        {
          if (!ot::Mle::ScanMaskTlv::IsEndDeviceFlagSet((ot::Mle::ScanMaskTlv *)v72)) {
            goto LABEL_46;
          }
          if (ot::RouterTable::GetActiveRouterCount((ot::Mle::MleRouter *)((char *)this + 38136)) >= 0x20u)
          {
            int ChallengeTlv = 2;
            goto LABEL_46;
          }
        }

        else
        {
          BOOL v44 = v60 == 4 || v60 == 3;
          if (v44 && !ot::Mle::ScanMaskTlv::IsRouterFlagSet((ot::Mle::ScanMaskTlv *)v72)) {
            goto LABEL_46;
          }
        }

        int ChallengeTlv = ot::Mle::Mle::RxMessage::ReadChallengeTlv(*v75, (ot::Mle::Mle::Challenge *)v77, v41, v42, v43);
        if (ChallengeTlv)
        {
          char v45 = ot::ErrorToString(ChallengeTlv);
          ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mle::kLogModuleName,  "Parent Request dropped error:%s as ReadChallenge failed",  v46,  v47,  v48,  v49,  v50,  v51,  v45);
        }

        else
        {
          ot::ChildTable::FindChild((ot::Mle::MleRouter *)((char *)this + 1264), (uint64_t)v78, 5);
          NewChild = v52;
          if (v52)
          {
            int Now = ot::TimerMilli::GetNow(v52);
            int LastHeard = ot::Neighbor::GetLastHeard(NewChild);
            if (ot::Time::operator-(&Now, &LastHeard) < 0x2BC)
            {
              int ChallengeTlv = 29;
              goto LABEL_46;
            }
          }

          else
          {
            NewChild = ot::ChildTable::GetNewChild((ot::Mle::MleRouter *)((char *)this + 1264));
            if (!NewChild)
            {
              int ChallengeTlv = 3;
              goto LABEL_46;
            }

            ot::Mle::Mle::InitNeighbor(this, NewChild, v75);
            ot::Neighbor::SetState(NewChild, 2);
            if (!ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)1,unsigned char>>(*v75, &v70, v53, v54))
            {
              ot::Mle::DeviceMode::Set(&v69, v70);
              char v67 = v69;
              ot::Child::SetDeviceMode(NewChild, v69);
              ot::Neighbor::SetVersion((uint64_t)NewChild, v73);
            }
          }

          BOOL IsStateValidOrRestoring = ot::Neighbor::IsStateValidOrRestoring(NewChild);
          if (!IsStateValidOrRestoring)
          {
            char v58 = NewChild;
            int v64 = ot::TimerMilli::GetNow((ot::TimerMilli *)IsStateValidOrRestoring);
            ot::Neighbor::SetLastHeard((uint64_t)v58, v64);
            uint64_t v59 = NewChild;
            int v56 = ot::Time::MsecToSec((ot::Time *)0x1388);
            ot::Child::SetTimeout((uint64_t)v59, v56);
          }

          *((_BYTE *)v75 + 32) = 2;
          ot::Mle::Mle::ProcessKeySequence(this, (ot::Mle::Mle::RxInfo *)v75);
          if (ot::Mle::ScanMaskTlv::IsEndDeviceFlagSet((ot::Mle::ScanMaskTlv *)v72)) {
            unsigned __int16 v57 = 1000;
          }
          else {
            unsigned __int16 v57 = 500;
          }
          unsigned __int16 v68 = v57;
          ot::Mle::MleRouter::SendParentResponse(this, NewChild, (const ot::Mle::Mle::Challenge *)v77, v57);
        }
      }
    }
  }

uint64_t ot::Tlv::Find<ot::Mle::ScanMaskTlv>(ot::Tlv *a1, _BYTE *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned char>(a1, 0xEu, a2, a4);
}

{
  return __ZN2ot3Tlv4FindINS_3Mle11ScanMaskTlvEEE7otErrorRKNS_7MessageERNT_13UintValueTypeE(a1, a2, a3, a4);
}

BOOL ot::Mle::ScanMaskTlv::IsEndDeviceFlagSet(ot::Mle::ScanMaskTlv *this)
{
  return (this & 0x40) != 0;
}

{
  return __ZN2ot3Mle11ScanMaskTlv18IsEndDeviceFlagSetEh(this);
}

BOOL ot::Mle::ScanMaskTlv::IsRouterFlagSet(ot::Mle::ScanMaskTlv *this)
{
  return (char)this < 0;
}

{
  return __ZN2ot3Mle11ScanMaskTlv15IsRouterFlagSetEh(this);
}

void ot::Mle::MleRouter::SendParentResponse( ot::Mle::MleRouter *this, ot::Child *a2, const ot::Mle::Mle::Challenge *a3, unsigned __int16 a4)
{
  uint64_t v22 = this;
  uint64_t v21 = a2;
  uint64_t v20 = a3;
  unsigned __int16 v19 = a4;
  int appended = 0;
  uint64_t v16 = ot::Mle::Mle::NewMleMessage((uint64_t)this, 0xAu);
  if (v16)
  {
    ot::Message::SetDirectTransmission(v16);
    int appended = ot::Mle::Mle::TxMessage::AppendSourceAddressTlv(v16);
    if (!appended)
    {
      int appended = ot::Mle::Mle::TxMessage::AppendLeaderDataTlv(v16);
      if (!appended)
      {
        int appended = ot::Mle::Mle::TxMessage::AppendLinkFrameCounterTlv(v16);
        if (!appended)
        {
          int appended = ot::Mle::Mle::TxMessage::AppendMleFrameCounterTlv(v16);
          if (!appended)
          {
            int appended = ot::Mle::Mle::TxMessage::AppendResponseTlv(v16, v20);
            if (!appended)
            {
              int appended = ot::Mle::Mle::TxMessage::AppendVendorDataTlv(v16, v4, v5, v6, v7, v8, v9, v10);
              if (!appended)
              {
                ot::Message::SetSubType(v16, 13);
                if (!ot::Neighbor::IsThreadVersionCslCapable(v21)
                  || (int appended = ot::Mle::Mle::TxMessage::AppendCslClockAccuracyTlv(v16)) == 0)
                {
                  ot::Child::GenerateChallenge(v21);
                  Challenge = (unsigned __int8 *)ot::Child::GetChallenge(v21);
                  Challengechar Size = ot::Child::GetChallengeSize(v21);
                  int appended = ot::Mle::Mle::TxMessage::AppendChallengeTlv(v16, Challenge, ChallengeSize);
                  if (!appended)
                  {
                    LinkInfo = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v21);
                    unsigned __int8 LinkMargin = ot::LinkQualityInfo::GetLinkMargin(LinkInfo);
                    int appended = ot::Mle::Mle::TxMessage::AppendLinkMarginTlv(v16, LinkMargin);
                    if (!appended)
                    {
                      int appended = ot::Mle::Mle::TxMessage::AppendConnectivityTlv(v16);
                      if (!appended)
                      {
                        int appended = ot::Mle::Mle::TxMessage::AppendVersionTlv(v16);
                        if (!appended)
                        {
                          ExtAddress = (const ot::Mac::ExtAddress *)ot::Neighbor::GetExtAddress(v21);
                          ot::Ip6::Address::SetToLinkLocalAddress((ot::Ip6::Address *)v17, ExtAddress);
                          int appended = ot::Mle::Mle::TxMessage::SendAfterDelay(v16, (const ot::Ip6::Address *)v17, v19);
                          if (!appended) {
                            ot::Mle::Mle::Log(2u, 0xFu, (ot::Ip6::Address *)v17);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  else
  {
    int appended = 3;
  }

  if (appended && v16) {
    ot::Message::Free(v16);
  }
  ot::Mle::Mle::LogSendError(0xFu, appended);
}

uint64_t ot::Mle::MleRouter::HasNeighborWithGoodLinkQuality(ot::Mle::MleRouter *this)
{
  char v13 = 1;
  uint64_t v9 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  LinkInfo = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo((ot::Mle::MleRouter *)((char *)this + 48));
  Lastchar Rss = ot::LinkQualityInfo::GetLastRss(LinkInfo);
  if (ot::Mac::Mac::ComputeLinkMargin(v9, LastRss) < 0xAu)
  {
    uint64_t v12 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(this);
    ot::RouterTable::begin(v12);
    uint64_t v11 = v3;
    uint64_t v10 = ot::RouterTable::end(v12);
    while (v11 != (ot::Neighbor *)v10)
    {
      if (ot::Neighbor::IsStateValid(v11))
      {
        uint64_t v7 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
        uint64_t v4 = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v11);
        char v5 = ot::LinkQualityInfo::GetLastRss(v4);
      }

      uint64_t v11 = (ot::Neighbor *)((char *)v11 + 248);
    }

    char v13 = 0;
  }

  return v13 & 1;
}

uint64_t ot::Mle::MleRouter::HandleTimeTick(ot::Mle::MleRouter *this)
{
  int v94 = this;
  char v93 = 0;
  if (!ot::Mle::Mle::IsFullThreadDevice(this))
  {
    char v1 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>(this);
    return ot::TimeTicker::UnregisterReceiver(v1, 1);
  }

  if (*((_BYTE *)this + 46176)) {
    --*((_BYTE *)this + 46176);
  }
  if (*((_BYTE *)this + 46253)) {
    --*((_BYTE *)this + 46253);
  }
  if (*((_BYTE *)this + 46255))
  {
    if (!--*((_BYTE *)this + 46255)) {
      char v93 = 1;
    }
  }

  else if (*((_BYTE *)this + 46258))
  {
    if (!--*((_BYTE *)this + 46258))
    {
      char v3 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
      if (!ot::BackboneRouter::Leader::HasPrimary(v3))
      {
        uint64_t v4 = (ot::BackboneRouter::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>(this);
        if (!ot::BackboneRouter::Local::AddService(v4, 0))
        {
          char v5 = (ot::NetworkData::Notifier *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Notifier>(this);
          ot::NetworkData::Notifier::HandleServerDataUpdated(v5);
        }
      }
    }
  }

  unint64_t v69 = *((unsigned __int8 *)this + 41);
  if (v69 <= 4) {
    __asm { BR              X8 }
  }

  uint64_t v6 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  char v91 = ot::ChildTable::Iterate(v6, 5);
  int v92 = (ot::ChildTable::IteratorBuilder *)&v91;
  v90[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v91);
  v90[1] = v7;
  v89[0] = ot::ChildTable::IteratorBuilder::end(v92);
  v89[1] = v8;
  while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v90, v89))
  {
    int v88 = (ot::Neighbor *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v90);
    unsigned int v87 = 0;
    char v86 = 1;
    char v85 = 1;
    uint64_t State = ot::Neighbor::GetState(v88);
    if (!(_BYTE)State) {
      goto LABEL_48;
    }
    if (State != 4)
    {
      if (State == 5) {
LABEL_35:
      }
        __assert_rtn("HandleTimeTick", "mle_router.cpp", 2111, "false");
      if (State == 7 || State == 6)
      {
LABEL_34:
        Timeout = (ot::Time *)ot::Child::GetTimeout(v88);
        uint64_t State = ot::Time::SecToMsec(Timeout);
        unsigned int v87 = State;
      }

      if ((v85 & 1) != 0)
      {
        uint64_t State = ot::CslTxScheduler::ChildInfo::IsCslSynchronized((ot::Neighbor *)((char *)v88 + 272));
        if ((State & 1) != 0)
        {
          int Now = ot::TimerMilli::GetNow((ot::TimerMilli *)State);
          Cslint LastHeard = ot::CslTxScheduler::ChildInfo::GetCslLastHeard((ot::Neighbor *)((char *)v88 + 272));
          unsigned int v68 = ot::Time::operator-(&Now, &CslLastHeard);
          unsigned int CslTimeout = (ot::Time *)ot::CslTxScheduler::ChildInfo::GetCslTimeout((ot::Neighbor *)((char *)v88 + 272));
          unsigned int v14 = ot::Time::SecToMsec(CslTimeout);
          uint64_t State = v68;
          if (v68 < v14)
          {
            char v86 = 0;
          }

          else
          {
            uint64_t v15 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
            uint64_t Counters = ot::Mac::Mac::GetCounters(v15);
            ++*(_DWORD *)(Counters + 88);
            char Rloc16 = ot::Neighbor::GetRloc16(v88);
            ExtAddress = (ot::Mac::ExtAddress *)ot::Neighbor::GetExtAddress(v88);
            ot::Mac::ExtAddress::ToString(ExtAddress, (ot::StringWriter *)v99);
            ot::String<(unsigned short)17>::AsCString((uint64_t)v99);
            ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)&ot::Mle::kLogModuleName,  "Child CSL synchronization expired RLOC16: 0x%04x ExtAddr: %s",  v17,  v18,  v19,  v20,  v21,  v22,  Rloc16);
            ot::CslTxScheduler::ChildInfo::SetCslSynchronized((_BYTE *)v88 + 272, 0);
            ot::CslTxScheduler::ChildInfo::SetCslPrevSnValid((_BYTE *)v88 + 272, 0);
            uint64_t v23 = (ot::CslTxScheduler *)ot::GetProvider<ot::InstanceLocator>::Get<ot::CslTxScheduler>(this);
            ot::CslTxScheduler::Update(v23);
          }
        }
      }

      BOOL v66 = 0;
      if ((v86 & 1) != 0)
      {
        int v81 = ot::TimerMilli::GetNow((ot::TimerMilli *)State);
        int LastHeard = ot::Neighbor::GetLastHeard(v88);
        unsigned int v24 = ot::Time::operator-(&v81, &LastHeard);
        BOOL v66 = v24 >= v87;
      }

      if (v66)
      {
        char v65 = ot::Neighbor::GetRloc16(v88);
        uint64_t v25 = (ot::Mac::ExtAddress *)ot::Neighbor::GetExtAddress(v88);
        ot::Mac::ExtAddress::ToString(v25, (ot::StringWriter *)v98);
        ot::String<(unsigned short)17>::AsCString((uint64_t)v98);
        ot::Neighbor::GetState(v88);
        ot::Neighbor::GetLinkFailures(v88);
        int v79 = ot::Neighbor::GetLastHeard(v88);
        ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mle::kLogModuleName,  "Child timeout expired, RLOC16: 0x%04x, ExtAddr: %s State:%d LinkFailureCount:%d LastHeard:%d",  v26,  v27,  v28,  v29,  v30,  v31,  v65);
        ot::Mle::MleRouter::RemoveNeighbor(this, v88);
        ot::Mle::Mle::IncrementChildLossCounter((uint64_t)this);
      }

      else if (ot::Mle::Mle::IsRouterOrLeader(this) && ot::Neighbor::IsStateRestored(v88))
      {
        ot::Mle::MleRouter::SendChildUpdateRequest(this, v88);
        IgnoreError();
      }
    }

uint64_t ot::CslTxScheduler::ChildInfo::GetCslLastHeard(ot::CslTxScheduler::ChildInfo *this)
{
  return *((unsigned int *)this + 3);
}

{
  return __ZNK2ot14CslTxScheduler9ChildInfo15GetCslLastHeardEv(this);
}

uint64_t ot::CslTxScheduler::ChildInfo::GetCslTimeout(ot::CslTxScheduler::ChildInfo *this)
{
  return *((unsigned int *)this + 1);
}

{
  return __ZNK2ot14CslTxScheduler9ChildInfo13GetCslTimeoutEv(this);
}

uint64_t ot::Mle::Mle::IncrementChildLossCounter(uint64_t this)
{
  return this;
}

{
  return __ZN2ot3Mle3Mle25IncrementChildLossCounterEv(this);
}

BOOL ot::Neighbor::IsStateRestored(ot::Neighbor *this)
{
  return (*((_BYTE *)this + 98) & 0xF) == 1;
}

{
  return __ZNK2ot8Neighbor15IsStateRestoredEv(this);
}

uint64_t ot::Mle::MleRouter::SendChildUpdateRequest(ot::Mle::MleRouter *this, ot::Child *a2)
{
  uint64_t v36 = this;
  uint64_t v35 = a2;
  unsigned int appended = 0;
  uint64_t v32 = 0LL;
  if (!ot::Neighbor::IsRxOnWhenIdle(a2))
  {
    uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
    unsigned __int16 ChildIndex = ot::ChildTable::GetChildIndex(v2, (uint64_t)v35);
    char v3 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
    ot::MeshForwarder::GetSendQueue(v3);
    uint64_t v30 = v4;
    uint64_t v29 = (ot::Message *)ot::PriorityQueue::begin(v4);
    uint64_t v28 = ot::PriorityQueue::end(v30);
    while (ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator!=(&v29, &v28))
    {
      uint64_t v27 = (ot::Message *)ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator*((uint64_t)&v29);
      if (ot::Message::GetChildMask(v27, ChildIndex) && ot::Message::GetSubType(v27) == 8)
      {
        if (ot::Neighbor::IsStateRestoring(v35)) {
          goto LABEL_28;
        }
        uint64_t v5 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
        ot::MeshForwarder::RemoveMessages(v5, v35, 8u);
        break;
      }

      ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator++(&v29);
    }
  }

  uint64_t v32 = ot::Mle::Mle::NewMleMessage((uint64_t)this, 0xDu);
  if (!v32)
  {
    unsigned int appended = 3;
    goto LABEL_28;
  }

  unsigned int appended = ot::Mle::Mle::TxMessage::AppendSourceAddressTlv(v32);
  if (!appended)
  {
    unsigned int appended = ot::Mle::Mle::TxMessage::AppendLeaderDataTlv(v32);
    if (!appended)
    {
      ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mle::kLogModuleName,  "%s AppendNetworkDataTlv",  v6,  v7,  v8,  v9,  v10,  v11,  (char)"SendChildUpdateRequest");
      uint64_t v25 = v32;
      char NetworkDataType = ot::Neighbor::GetNetworkDataType(v35);
      unsigned int appended = ot::Mle::Mle::TxMessage::AppendNetworkDataTlv(v25, NetworkDataType);
      if (!appended)
      {
        unsigned int appended = ot::Mle::Mle::TxMessage::AppendActiveTimestampTlv(v32);
        if (!appended)
        {
          unsigned int appended = ot::Mle::Mle::TxMessage::AppendPendingTimestampTlv(v32);
          if (!appended)
          {
            if (ot::Neighbor::IsStateValid(v35))
            {
              if ((ot::Child::IsAddressRegistrationFailedFlagSet(v35) & 1) != 0)
              {
                ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mle::kLogModuleName,  "%s Add AddressRegistrationTLV for context-mismatch child",  v14,  v15,  v16,  v17,  v18,  v19,  (char)"SendChildUpdateRequest");
                unsigned int appended = ot::Mle::Mle::TxMessage::AppendTlvRequestTlv<(unsigned char)2>( v32,  ot::Mle::MleRouter::SendChildUpdateRequest(ot::Child &)::kTlvs);
                if (appended) {
                  goto LABEL_28;
                }
              }

              goto LABEL_24;
            }

            unsigned int appended = ot::Mle::Mle::TxMessage::AppendTlvRequestTlv<(unsigned char)2>( v32,  ot::Mle::MleRouter::SendChildUpdateRequest(ot::Child &)::kTlvs);
            if (!appended)
            {
              if (!ot::Neighbor::IsStateRestored(v35)) {
                ot::Child::GenerateChallenge(v35);
              }
              unsigned int v24 = v32;
              Challenge = (unsigned __int8 *)ot::Child::GetChallenge(v35);
              Challengechar Size = ot::Child::GetChallengeSize(v35);
              unsigned int appended = ot::Mle::Mle::TxMessage::AppendChallengeTlv(v24, Challenge, ChallengeSize);
              if (!appended)
              {
LABEL_24:
                ExtAddress = (const ot::Mac::ExtAddress *)ot::Neighbor::GetExtAddress(v35);
                ot::Ip6::Address::SetToLinkLocalAddress((ot::Ip6::Address *)&v33, ExtAddress);
                unsigned int appended = ot::Mle::Mle::TxMessage::SendTo(v32, &v33);
                if (!appended)
                {
                  if (ot::Neighbor::IsRxOnWhenIdle(v35)) {
                    ot::Neighbor::SetState(v35, 6);
                  }
                  unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(v35);
                  ot::Mle::Mle::Log(0, 0x14u, (ot::Ip6::Address *)&v33, Rloc16);
                }
              }
            }
          }
        }
      }
    }
  }

uint64_t ot::Mle::Mle::IncrementRouterLossCounter(uint64_t this)
{
  return this;
}

{
  return __ZN2ot3Mle3Mle26IncrementRouterLossCounterEv(this);
}

void ot::RouterTable::FindNextHopOf(ot::RouterTable *this, const ot::Router *a2)
{
}

{
  __ZN2ot11RouterTable13FindNextHopOfERKNS_6RouterE(this, a2);
}

uint64_t ot::Mle::MleRouter::SynchronizeChildNetworkData(ot::Mle::MleRouter *this)
{
  uint64_t v14 = this;
  uint64_t result = ot::Mle::Mle::IsRouterOrLeader(this);
  if ((result & 1) != 0)
  {
    uint64_t v2 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
    char v12 = ot::ChildTable::Iterate(v2, 0);
    char v13 = (ot::ChildTable::IteratorBuilder *)&v12;
    v11[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v12);
    v11[1] = v3;
    v10[0] = ot::ChildTable::IteratorBuilder::end(v13);
    v10[1] = v4;
    while (1)
    {
      uint64_t result = ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v11, v10);
      if ((result & 1) == 0) {
        break;
      }
      uint64_t v9 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v11);
      if (!ot::Neighbor::IsRxOnWhenIdle(v9))
      {
        NetworkDataunsigned __int16 Version = ot::Child::GetNetworkDataVersion(v9);
        uint64_t v6 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
        char NetworkDataType = ot::Neighbor::GetNetworkDataType(v9);
        if (NetworkDataVersion != ot::NetworkData::LeaderBase::GetVersion(v6, NetworkDataType))
        {
          uint64_t result = ot::Mle::MleRouter::SendChildUpdateRequest(this, v9);
          if ((_DWORD)result) {
            break;
          }
        }
      }

      ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v11);
    }
  }

  return result;
}

void ot::Mle::MleRouter::GetConnectedRouterNodesHistogram(ot::Mle::MleRouter *this, unsigned __int8 *a2)
{
  *a2 = ot::Utils::FifoHistogram<unsigned char,(short)24>::GetCount();
  ot::Utils::FifoHistogram<unsigned char,(short)24>::GetData();
}

uint64_t ot::Utils::FifoHistogram<unsigned char,(short)24>::GetCount()
{
  return 24LL;
}

  ;
}

{
  return __ZNK2ot5Utils13FifoHistogramIhLs24EE8GetCountEv();
}

void ot::Mle::MleRouter::GetConnectedChildNodesHistogram(ot::Mle::MleRouter *this, unsigned __int8 *a2)
{
  *a2 = ot::Utils::FifoHistogram<unsigned char,(short)24>::GetCount();
  ot::Utils::FifoHistogram<unsigned char,(short)24>::GetData();
}

void *ot::Mle::MleRouter::ClearConnectedRouterNodesHistogram(ot::Mle::MleRouter *this)
{
  return ot::Utils::FifoHistogram<unsigned char,(short)24>::Clear((ot::Mle::MleRouter *)((char *)this + 46193));
}

void *ot::Utils::FifoHistogram<unsigned char,(short)24>::Clear(void *result)
{
  *uint64_t result = 0LL;
  result[1] = 0LL;
  result[2] = 0LL;
  return result;
}

{
  return __ZN2ot5Utils13FifoHistogramIhLs24EE5ClearEv(result);
}

void *ot::Mle::MleRouter::ClearConnectedChildNodesHistogram(ot::Mle::MleRouter *this)
{
  return ot::Utils::FifoHistogram<unsigned char,(short)24>::Clear((ot::Mle::MleRouter *)((char *)this + 46217));
}

uint64_t ot::Mle::MleRouter::HandleConnectedNeighbourTimer(ot::Mle::MleRouter *this)
{
  if (ot::Mle::Mle::IsFullThreadDevice(this))
  {
    char NeighborCount = ot::RouterTable::GetNeighborCount((ot::Mle::MleRouter *)((char *)this + 38136));
    ot::Utils::FifoHistogram<unsigned char,(short)24>::Update((uint64_t)this + 46193, NeighborCount);
    char NumChildren = ot::ChildTable::GetNumChildren((__int16 *)this + 632, 0);
    ot::Utils::FifoHistogram<unsigned char,(short)24>::Update((uint64_t)this + 46217, NumChildren);
  }

  unsigned int v3 = ot::Time::SecToMsec((ot::Time *)0xE10);
  return ot::TimerMilli::Start((ot::Mle::MleRouter *)((char *)this + 46280), v3);
}

__n128 ot::Utils::FifoHistogram<unsigned char,(short)24>::Update(uint64_t a1, char a2)
{
  __n128 result = *(__n128 *)a1;
  int v3 = *(_DWORD *)(a1 + 16);
  __int16 v4 = *(_WORD *)(a1 + 20);
  char v5 = *(_BYTE *)(a1 + 22);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)a1;
  *(_DWORD *)(a1 + 17) = v3;
  *(_WORD *)(a1 + 21) = v4;
  *(_BYTE *)(a1 + 23) = v5;
  *(_BYTE *)a1 = a2;
  return result;
}

BOOL ot::Neighbor::IsThreadVersionCslCapable(ot::Neighbor *this)
{
  LOBYTE(v3) = 0;
  if (ot::Neighbor::IsThreadVersion1p2OrHigher(this)) {
    return !ot::Neighbor::IsRxOnWhenIdle(this);
  }
  return v3;
}

{
  return __ZNK2ot8Neighbor25IsThreadVersionCslCapableEv(this);
}

uint64_t ot::Child::GetChallenge(ot::Child *this)
{
  return (uint64_t)this + 553;
}

{
  return __ZNK2ot5Child12GetChallengeEv(this);
}

uint64_t ot::Child::GetChallengeSize(ot::Child *this)
{
  return 8LL;
}

{
  return __ZNK2ot5Child16GetChallengeSizeEv(this);
}

uint64_t ot::Mle::MleRouter::GetMaxChildIpAddresses(ot::Mle::MleRouter *this)
{
  return 16LL;
}

uint64_t ot::Mle::MleRouter::ProcessAddressRegistrationTlv( ot::Mle::MleRouter *this, ot::Tlv **a2, ot::Child *a3, uint64_t a4, unsigned __int16 *a5)
{
  uint64_t v84 = this;
  uint64_t v83 = a2;
  int v82 = a3;
  char v78 = 0;
  char v77 = 0;
  DomainUnicastAddress = 0LL;
  char v74 = 0;
  unsigned __int16 v73 = 0;
  *(_DWORD *)&v81[2] = ot::Tlv::FindTlvValueOffset(*a2, (const ot::Message *)0x13, v81, &v80, a5);
  if (*(_DWORD *)&v81[2]) {
    return *(unsigned int *)&v81[2];
  }
  unsigned __int16 v79 = *(_WORD *)v81 + v80;
  DomainUnicastAddress = ot::Child::GetDomainUnicastAddress(v82);
  if (DomainUnicastAddress) {
    __int128 v76 = *(_OWORD *)DomainUnicastAddress;
  }
  if ((ot::Child::HasAnyMlrRegisteredAddress(v82) & 1) != 0)
  {
    if (!ot::Neighbor::IsStateValid(v82)) {
      __assert_rtn("ProcessAddressRegistrationTlv", "mle_router.cpp", 2451, "aChild.IsStateValid()");
    }
    v71[0] = ot::Child::IterateIp6Addresses((uint64_t)v82, 3);
    v71[1] = v5;
    int v72 = (ot::Child::AddressIteratorBuilder *)v71;
    ot::Child::AddressIteratorBuilder::begin((ot::Child::AddressIteratorBuilder *)v71, (uint64_t)v70);
    ot::Child::AddressIteratorBuilder::end(v72, (uint64_t)v69);
    while (ot::Unequatable<ot::Child::AddressIterator>::operator!=((uint64_t)v70, (uint64_t)v69))
    {
      *(void *)&v68[1] = ot::Child::AddressIterator::operator*((ot::Child::AddressIterator *)v70);
      if (ot::Child::GetAddressMlrState(v82, *(const ot::Ip6::Address **)&v68[1]) == 2)
      {
        uint64_t v6 = v73++;
        v87[v6] = **(_OWORD **)&v68[1];
      }

      ot::Child::AddressIterator::operator++((ot::Child::AddressIterator *)v70);
    }
  }

  ot::Child::ClearIp6Addresses(v82);
  while (*(unsigned __int16 *)v81 < (int)v79)
  {
    *(_DWORD *)&v81[2] = ot::Message::Read<unsigned char>(*v83, *(unsigned __int16 *)v81, v68);
    if (*(_DWORD *)&v81[2]) {
      return *(unsigned int *)&v81[2];
    }
    *(_DWORD *)int v81 = (unsigned __int16)(*(_WORD *)v81 + 1);
    ++v78;
    ot::Clearable<ot::Ip6::Address>::Clear(v67);
    if (ot::Mle::AddressRegistrationTlv::IsEntryCompressed((ot::Mle::AddressRegistrationTlv *)v68[0]))
    {
      char ContextId = ot::Mle::AddressRegistrationTlv::GetContextId((ot::Mle::AddressRegistrationTlv *)v68[0]);
      if ((unint64_t)*(unsigned __int16 *)v81 + 8 > v79)
      {
        *(_DWORD *)&v81[2] = 6;
        return *(unsigned int *)&v81[2];
      }

      unsigned int v58 = *v83;
      unsigned __int16 v57 = *(_WORD *)v81;
      Iid = (char *)ot::Ip6::Address::GetIid((ot::Ip6::Address *)v67);
      ot::Message::Read<ot::Ip6::InterfaceIdentifier>(v58, v57, Iid);
      IgnoreError();
      *(_WORD *)v81 += 8;
      uint64_t v8 = (ot::NetworkData::NetworkData *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
      if (!ot::NetworkData::LeaderBase::GetContext(v8, ContextId, (ot::Ip6::Prefix *)v65))
      {
        ot::Ip6::Address::SetPrefix((ot::Ip6::Address *)v67, (const ot::Ip6::Prefix *)v65);
        goto LABEL_24;
      }

      char v56 = ContextId;
      ot::Neighbor::GetRloc16(v82);
      ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mle::kLogModuleName,  "Failed to get context %u for compressed address from child 0x%04x",  v9,  v10,  v11,  v12,  v13,  v14,  v56);
      handle_addrRegfailure_captureABC();
      ot::Child::SetAddressRegistrationFailedFlag((uint64_t)v82, 1);
    }

    else
    {
      if ((unint64_t)*(unsigned __int16 *)v81 + 16 > v79)
      {
        *(_DWORD *)&v81[2] = 6;
        return *(unsigned int *)&v81[2];
      }

      ot::Message::Read<ot::Ip6::Address>(*v83, *(unsigned __int16 *)v81, (char *)v67);
      IgnoreError();
      *(_WORD *)v81 += 16;
LABEL_24:
      *(_DWORD *)&v81[2] = ot::Child::AddIp6Address(v82, (const ot::Ip6::Address *)v67);
      if (*(_DWORD *)&v81[2])
      {
        unsigned int v24 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
        if (ot::BackboneRouter::Leader::IsDomainUnicast(v24, (const ot::Ip6::Address *)v67)) {
          char v74 = 0;
        }
        char v52 = ot::ErrorToString(*(int *)&v81[2]);
        ot::Ip6::Address::ToString((ot::Ip6::Address *)v67, (ot::StringWriter *)v85);
        ot::String<(unsigned short)40>::AsCString((uint64_t)v85);
        ot::Neighbor::GetRloc16(v82);
        ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mle::kLogModuleName,  "Error %s adding IPv6 address %s to child 0x%04x",  v25,  v26,  v27,  v28,  v29,  v30,  v52);
      }

      else
      {
        ++v77;
        uint64_t v15 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
        if (ot::BackboneRouter::Leader::IsDomainUnicast(v15, (const ot::Ip6::Address *)v67))
        {
          char v74 = 1;
          if (DomainUnicastAddress)
          {
            uint64_t v55 = (unsigned __int16 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DuaManager>(this);
            uint64_t v54 = v82;
            if (ot::Unequatable<ot::Ip6::Address>::operator!=(&v76, v67)) {
              char v16 = 1;
            }
            else {
              char v16 = 3;
            }
            ot::DuaManager::UpdateChildDomainUnicastAddress(v55, (uint64_t)v54, v16);
          }

          else
          {
            uint64_t v17 = (unsigned __int16 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DuaManager>(this);
            ot::DuaManager::UpdateChildDomainUnicastAddress(v17, (uint64_t)v82, 0);
          }
        }

        char Rloc16 = ot::Neighbor::GetRloc16(v82);
        ot::Ip6::Address::ToString((ot::Ip6::Address *)v67, (ot::StringWriter *)v86);
        ot::String<(unsigned short)40>::AsCString((uint64_t)v86);
        ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)&ot::Mle::kLogModuleName,  "Child 0x%04x IPv6 address[%u]=%s",  v18,  v19,  v20,  v21,  v22,  v23,  Rloc16);
      }

      if (!ot::Ip6::Address::IsMulticast((ot::Ip6::Address *)v67))
      {
        uint64_t v31 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
        char v63 = ot::ChildTable::Iterate(v31, 1);
        int v64 = (ot::ChildTable::IteratorBuilder *)&v63;
        v62[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v63);
        v62[1] = v32;
        v61[0] = ot::ChildTable::IteratorBuilder::end(v64);
        v61[1] = v33;
        while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v62, v61))
        {
          char v60 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v62);
          if (v60 != v82)
          {
            ot::Child::RemoveIp6Address(v60, (const ot::Ip6::Address *)v67);
            IgnoreError();
          }

          ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v62);
        }

        uint64_t v34 = (ot::AddressResolver::CacheEntry **)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>(this);
        ot::AddressResolver::RemoveEntryForAddress(v34, (const ot::Ip6::Address *)v67);
      }
    }
  }

  if (DomainUnicastAddress && (v74 & 1) == 0)
  {
    uint64_t v35 = (unsigned __int16 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DuaManager>(this);
    ot::DuaManager::UpdateChildDomainUnicastAddress(v35, (uint64_t)v82, 2);
  }

  uint64_t v36 = (ot::MlrManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MlrManager>(this);
  ot::MlrManager::UpdateProxiedSubscriptions(v36, v82, (const ot::Ip6::Address *)v87, v73);
  if (v78)
  {
    char v44 = ot::Neighbor::GetRloc16(v82);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)&ot::Mle::kLogModuleName,  "Child 0x%04x has %u registered IPv6 address%s, %u address%s stored",  v45,  v46,  v47,  v48,  v49,  v50,  v44);
  }

  else
  {
    char v37 = ot::Neighbor::GetRloc16(v82);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)&ot::Mle::kLogModuleName,  "Child 0x%04x has no registered IPv6 address",  v38,  v39,  v40,  v41,  v42,  v43,  v37);
  }

  *(_DWORD *)&v81[2] = 0;
  return *(unsigned int *)&v81[2];
}

uint64_t ot::Child::HasAnyMlrRegisteredAddress(ot::Child *this)
{
  return ot::BitVector<(unsigned short)15>::HasAny((_BYTE *)this + 550) & 1;
}

{
  return __ZNK2ot5Child26HasAnyMlrRegisteredAddressEv(this);
}

BOOL ot::Mle::AddressRegistrationTlv::IsEntryCompressed(ot::Mle::AddressRegistrationTlv *this)
{
  return (char)this < 0;
}

{
  return __ZN2ot3Mle22AddressRegistrationTlv17IsEntryCompressedEh(this);
}

uint64_t ot::Mle::AddressRegistrationTlv::GetContextId(ot::Mle::AddressRegistrationTlv *this)
{
  return this & 0xF;
}

{
  return __ZN2ot3Mle22AddressRegistrationTlv12GetContextIdEh(this);
}

uint64_t ot::Message::Read<ot::Ip6::InterfaceIdentifier>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 8u);
}

{
  return __ZNK2ot7Message4ReadINS_3Ip619InterfaceIdentifierEEE7otErrortRT_(a1, a2, a3);
}

uint64_t ot::Child::SetAddressRegistrationFailedFlag(uint64_t this, char a2)
{
  *(_BYTE *)(this + 573) = a2 & 1;
  return this;
}

{
  return __ZN2ot5Child32SetAddressRegistrationFailedFlagEb(this, a2);
}

void ot::Mle::MleRouter::HandleChildIdRequest(ot::Mle::MleRouter *this, ot::Tlv **a2)
{
  unsigned __int16 v117 = this;
  unsigned __int16 v116 = a2;
  int ResponseTlv = 0;
  ot::Mle::Mle::TlvList::TlvList((ot::Mle::Mle::TlvList *)v119);
  BOOL v100 = 0;
  ot::Ip6::MessageInfo::GetPeerAddr(v116[1]);
  ot::Mle::Mle::Log(1u, 2u, v2);
  if ((ot::Mle::MleRouter::IsRouterEligible(this) & 1) != 0)
  {
    if (ot::Mle::Mle::IsAttached(this))
    {
      ot::Ip6::MessageInfo::GetPeerAddr(v116[1]);
      Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v3);
      ot::Ip6::InterfaceIdentifier::ConvertToExtAddress(Iid, (ot::Mac::ExtAddress *)v121);
      ot::ChildTable::FindChild((ot::Mle::MleRouter *)((char *)this + 1264), (uint64_t)v121, 5);
      uint64_t v104 = v7;
      if (v7)
      {
        int ResponseTlv = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)18,unsigned short>>( *v116,  (unsigned __int16 *)&v114,  v5,  v6);
        if (!ResponseTlv)
        {
          if ((unsigned __int16)v114 >= 2u)
          {
            int ResponseTlv = ot::Mle::Mle::RxMessage::ReadResponseTlv(*v116, (ot::Mle::Mle::Challenge *)v120, v8, v9, v10);
            if (!ResponseTlv)
            {
              Challenge = (unsigned __int8 *)ot::Child::GetChallenge(v104);
              Challengechar Size = ot::Child::GetChallengeSize(v104);
              if (ot::Mle::Mle::Challenge::Matches((ot::Mle::Mle::Challenge *)v120, Challenge, ChallengeSize))
              {
                uint64_t v12 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
                ot::MeshForwarder::RemoveMessages(v12, v104, 6u);
                uint64_t v13 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
                ot::MeshForwarder::RemoveMessages(v13, v104, 0xAu);
                uint64_t v14 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
                ot::MeshForwarder::RemoveMessages(v14, v104, 8u);
                uint64_t v15 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
                ot::MeshForwarder::RemoveMessages(v15, v104, 9u);
                int ResponseTlv = ot::Mle::Mle::RxMessage::ReadFrameCounterTlvs(*v116, &v113, &v112, v16);
                if (!ResponseTlv)
                {
                  ot::Ip6::MessageInfo::GetPeerAddr(v116[1]);
                  ot::Ip6::Address::ToString(v17, (ot::StringWriter *)v118);
                  ot::String<(unsigned short)40>::AsCString((uint64_t)v118);
                  ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)&ot::Mle::kLogModuleName,  "%s Rx from %s linkFrameCounter=%d mleFrameCounter=%d",  v18,  v19,  v20,  v21,  v22,  v23,  (char)"HandleChildIdRequest");
                  int ResponseTlv = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)1,unsigned char>>(*v116, &v111, v24, v25);
                  if (!ResponseTlv)
                  {
                    ot::Mle::DeviceMode::Set(&v110, v111);
                    int ResponseTlv = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)2,unsigned int>>(*v116, &v109, v26, v27);
                    if (!ResponseTlv)
                    {
                      char v105 = 0;
                      int v92 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)27,unsigned short>>(*v116, &v101, v28, v29);
                      if (v92)
                      {
                        if (v92 != 23)
                        {
                          int ResponseTlv = 6;
                          goto LABEL_79;
                        }

                        else {
                          unsigned __int16 v33 = 129;
                        }
                        unsigned __int16 v101 = v33;
                      }

                      else
                      {
                        char v105 = 1;
                      }

                      int ResponseTlv = ot::Mle::Mle::RxMessage::ReadTlvRequestTlv( *v116,  (ot::Mle::Mle::TlvList *)v119,  v30,  v31,  v32);
                      if (!ResponseTlv)
                      {
                        BOOL v107 = 1;
                        int v91 = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)22,ot::MeshCoP::Timestamp>>( *v116,  (uint64_t)v108,  v34,  v35,  v36);
                        if (v91)
                        {
                          if (v91 != 23)
                          {
                            int ResponseTlv = 6;
                            goto LABEL_79;
                          }
                        }

                        else
                        {
                          active = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
                          Timestamp = (const ot::MeshCoP::Timestamp *)ot::MeshCoP::DatasetManager::GetTimestamp(active);
                          BOOL v107 = ot::MeshCoP::Timestamp::Compare( (ot::MeshCoP::Timestamp *)v108,  Timestamp,  v42) != 0;
                        }

                        BOOL v106 = 1;
                        int v90 = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)23,ot::MeshCoP::Timestamp>>( *v116,  (uint64_t)v108,  v37,  v38,  v39);
                        if (v90)
                        {
                          if (v90 != 23)
                          {
                            int ResponseTlv = 6;
                            goto LABEL_79;
                          }
                        }

                        else
                        {
                          uint64_t v43 = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>(this);
                          char v44 = (const ot::MeshCoP::Timestamp *)ot::MeshCoP::DatasetManager::GetTimestamp(v43);
                          BOOL v106 = ot::MeshCoP::Timestamp::Compare((ot::MeshCoP::Timestamp *)v108, v44, v45) != 0;
                        }

                        unsigned __int8 Length = ot::Array<unsigned char,(unsigned short)32,unsigned char>::GetLength((uint64_t)v119);
                        if (v107) {
                          ++Length;
                        }
                        if (v106) {
                          ++Length;
                        }
                        if ((v105 & 1) != 0) {
                          ++Length;
                        }
                        if (Length <= 6u)
                        {
                          if (ot::Mle::DeviceMode::IsFullThreadDevice((ot::Mle::DeviceMode *)&v110)
                            || (int ResponseTlv = ot::Mle::MleRouter::ProcessAddressRegistrationTlv( this,  v116,  v104,  v46,  v47)) == 0)
                          {
                            ot::RouterTable::FindRouter( (ot::Mle::MleRouter *)((char *)this + 38136),  (const ot::Mac::ExtAddress *)v121);
                            uint64_t v103 = v48;
                            if (v48) {
                              ot::Mle::MleRouter::RemoveNeighbor(this, v103);
                            }
                            if (ot::Neighbor::IsStateValid(v104)) {
                              ot::Mle::MleRouter::RemoveNeighbor(this, v104);
                            }
                            else {
                              ot::Neighbor::SetState(v104, 4);
                            }
                            int ResponseTlv = ot::Mle::Mle::RxMessage::ReadVendorDataTlv(*v116, &v100, &v99, &v98, v49);
                            if (!ResponseTlv)
                            {
                              if (v104)
                              {
                                if (v100)
                                {
                                  ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mle::kLogModuleName,  "HandleChildIDRequest vendorId=%d vendorSpecificInfo=%d powerControlMode=%d added",  v50,  v51,  v52,  v53,  v54,  v55,  v99);
                                }

                                else
                                {
                                  unsigned __int16 v99 = 0;
                                  unsigned __int16 v98 = 0;
                                  if (ot::Mle::DeviceMode::IsFullThreadDevice((ot::Mle::DeviceMode *)&v110))
                                  {
                                    Instance = ot::InstanceLocator::GetInstance(this);
                                    if (otPowerControlGetMode( (uint64_t)Instance,  v63,  v64,  v65,  v66,  v67,  v68,  v69)) {
                                      unsigned __int16 v98 = 1;
                                    }
                                  }

                                  ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mle::kLogModuleName,  "HandleChildIDRequest vendorId=%d vendorSpecificInfo=%d",  v56,  v57,  v58,  v59,  v60,  v61,  v99);
                                }

                                ot::Neighbor::SetVendorId((uint64_t)v104, v99);
                                ot::Neighbor::SetVendorSpecificInfo((uint64_t)v104, v98);
                                ReassemblyTimeout = (ot::TimerMilli *)ot::Neighbor::SetPowerControlMode(v104, v98 & 7);
                              }

                              else
                              {
                                ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mle::kLogModuleName,  "HandleChildIDRequest Neighbor is NULL",  v50,  v51,  v52,  v53,  v54,  v55,  v81);
                              }

                              if (gEnableNetworkMonitor == 1)
                              {
                                int Now = ot::TimerMilli::GetNow(ReassemblyTimeout);
                                ot::Neighbor::SetLastHeardTraffic((uint64_t)v104, Now);
                                int v89 = v104;
                                int DistantPast = ot::Time::GetDistantPast((ot::Time *)&Now);
                                ReassemblyTimeout = (ot::TimerMilli *)ot::Neighbor::SetLastReassemblyTimeout( (uint64_t)v89,  DistantPast);
                              }

                              char v86 = v104;
                              int v95 = ot::TimerMilli::GetNow(ReassemblyTimeout);
                              ot::Neighbor::SetLastHeard((uint64_t)v86, v95);
                              LinkFrameuint64_t Counters = (_DWORD *)ot::Neighbor::GetLinkFrameCounters(v104);
                              ot::Mac::LinkFrameCounters::SetAll(LinkFrameCounters, v113);
                              ot::Neighbor::SetLinkAckFrameCounter((uint64_t)v104, v113);
                              ot::Neighbor::SetMleFrameCounter((uint64_t)v104, v112);
                              ot::Neighbor::SetKeySequence((uint64_t)v104, *((_DWORD *)v116 + 5));
                              ot::Child::SetDeviceMode(v104, v110);
                              ot::Neighbor::SetVersion((uint64_t)v104, v114);
                              LinkInfo = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v104);
                              ThreadLinkInfo = (ot::ThreadLinkInfo *)ot::Ip6::MessageInfo::GetThreadLinkInfo(v116[1]);
                              char Rss = ot::ThreadLinkInfo::GetRss(ThreadLinkInfo);
                              ot::LinkQualityInfo::AddRss(LinkInfo, Rss);
                              ot::Child::SetTimeout((uint64_t)v104, v109);
                              ot::Child::SetSupervisionInterval((uint64_t)v104, v101);
                              ot::Neighbor::ClearLastRxFragmentTag((uint64_t)v104);
                              int v88 = v104;
                              char NetworkDataType = ot::Mle::DeviceMode::GetNetworkDataType((ot::Mle::DeviceMode *)&v110);
                              Dataunsigned __int16 Version = ot::Mle::LeaderData::GetDataVersion((uint64_t)this + 32, NetworkDataType);
                              ot::Child::SetNetworkDataVersion((uint64_t)v88, DataVersion);
                              ot::Child::ClearRequestTlvs((uint64_t)v104);
                              for (unsigned __int8 Length = 0; ; ++Length)
                              {
                                int v85 = Length;
                                uint64_t v84 = v104;
                                unsigned __int8 v83 = Length;
                                __int128 v76 = (char *)ot::Array<unsigned char,(unsigned short)32,unsigned char>::operator[]( (uint64_t)v119,  Length);
                                ot::Child::SetRequestTlv((uint64_t)v84, v83, *v76);
                              }

                              if (v107)
                              {
                                unsigned __int8 v77 = Length++;
                                ot::Child::SetRequestTlv((uint64_t)v104, v77, 24);
                              }

                              if (v106)
                              {
                                unsigned __int8 v78 = Length++;
                                ot::Child::SetRequestTlv((uint64_t)v104, v78, 25);
                              }

                              if ((v105 & 1) != 0)
                              {
                                unsigned __int8 v79 = Length++;
                                ot::Child::SetRequestTlv((uint64_t)v104, v79, 27);
                              }

                              *((_BYTE *)v116 + 32) = 1;
                              ot::Mle::Mle::ProcessKeySequence(this, (ot::Mle::Mle::RxInfo *)v116);
                              unsigned int v82 = *((unsigned __int8 *)this + 41);
                              if (v82 <= 1) {
                                __assert_rtn("HandleChildIdRequest", "mle_router.cpp", 2892, "false");
                              }
                              if (v82 == 2)
                              {
                                ot::Neighbor::SetState(v104, 4);
                                ot::Mle::MleRouter::BecomeRouter((uint64_t)this, 3u);
                                IgnoreError();
                              }

                              else if (v82 == 4 || v82 == 3)
                              {
                                int ResponseTlv = ot::Mle::MleRouter::SendChildIdResponse(this, v104);
                              }
                            }
                          }
                        }

                        else
                        {
                          int ResponseTlv = 6;
                        }
                      }
                    }
                  }
                }
              }

              else
              {
                int ResponseTlv = 8;
              }
            }
          }

          else
          {
            int ResponseTlv = 6;
          }
        }
      }

      else
      {
        int ResponseTlv = 24;
      }
    }

    else
    {
      int ResponseTlv = 13;
    }
  }

  else
  {
    int ResponseTlv = 13;
  }

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)27,unsigned short>>( ot::Tlv *a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned short>(a1, 0x1Bu, a2, a4);
}

{
  return __ZN2ot3Tlv4FindINS_11UintTlvInfoILh27EtEEEE7otErrorRKNS_7MessageERNT_13UintValueTypeE(a1, a2, a3, a4);
}

uint64_t ot::Array<unsigned char,(unsigned short)32,unsigned char>::GetLength(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

{
  return __ZNK2ot5ArrayIhLt32EhE9GetLengthEv(a1);
}

uint64_t ot::Time::GetDistantPast(ot::Time *this)
{
  return v2;
}

{
  return __ZNK2ot4Time14GetDistantPastEv(this);
}

uint64_t ot::Child::SetSupervisionInterval(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 562) = a2;
  return this;
}

{
  return __ZN2ot5Child22SetSupervisionIntervalEt(this, a2);
}

uint64_t ot::Child::SetNetworkDataVersion(uint64_t this, char a2)
{
  *(_BYTE *)(this + 552) = a2;
  return this;
}

{
  return __ZN2ot5Child21SetNetworkDataVersionEh(this, a2);
}

uint64_t ot::Child::ClearRequestTlvs(uint64_t this)
{
  *(_DWORD *)(this + 553) = -1;
  *(_WORD *)(this + 557) = -1;
  return this;
}

{
  return __ZN2ot5Child16ClearRequestTlvsEv(this);
}

uint64_t ot::Child::SetRequestTlv(uint64_t this, unsigned __int8 a2, char a3)
{
  *(_BYTE *)(this + 553 + a2) = a3;
  return this;
}

{
  return __ZN2ot5Child13SetRequestTlvEhh(this, a2, a3);
}

uint64_t ot::Array<unsigned char,(unsigned short)32,unsigned char>::operator[]( uint64_t a1, unsigned __int8 a2)
{
  return a1 + a2;
}

{
  return __ZN2ot5ArrayIhLt32EhEixEh(a1, a2);
}

uint64_t ot::Mle::MleRouter::SendChildIdResponse(ot::Mle::MleRouter *this, ot::Child *a2)
{
  uint64_t v19 = this;
  uint64_t v18 = a2;
  unsigned int appended = 0;
  uint64_t v15 = ot::Mle::Mle::NewMleMessage((uint64_t)this, 0xCu);
  if (v15)
  {
    unsigned int appended = ot::Mle::Mle::TxMessage::AppendSourceAddressTlv(v15);
    if (!appended)
    {
      unsigned int appended = ot::Mle::Mle::TxMessage::AppendLeaderDataTlv(v15);
      if (!appended)
      {
        unsigned int appended = ot::Mle::Mle::TxMessage::AppendActiveTimestampTlv(v15);
        if (!appended)
        {
          unsigned int appended = ot::Mle::Mle::TxMessage::AppendPendingTimestampTlv(v15);
          if (!appended)
          {
            if (!(unsigned __int16)ot::Neighbor::GetRloc16(v18)
              || (unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(v18),
                  unsigned __int16 v2 = ot::Mle::Mle::GetRloc16(this),
                  !ot::Mle::RouterIdMatch((ot::Mle *)Rloc16, v2)))
            {
              do
              {
                BOOL v3 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
                __int16 v14 = ot::Mac::Mac::GetShortAddress(v3) | *((_WORD *)this + 23093);
                ot::ChildTable::FindChild((ot::Mle::MleRouter *)((char *)this + 1264), v14, 5);
              }

              while (v4);
              ot::Neighbor::SetRloc16((uint64_t)v18, v14);
            }

            unsigned __int16 v5 = ot::Neighbor::GetRloc16(v18);
            unsigned int appended = ot::Mle::Mle::TxMessage::AppendAddress16Tlv(v15, v5);
            if (!appended)
            {
              for (unsigned __int8 i = 0; i < 6u; ++i)
              {
                unint64_t v10 = ot::Child::GetRequestTlv(v18, i) - 9;
                if (v10 <= 0x12) {
                  __asm { BR              X8 }
                }
              }

              if (ot::Neighbor::IsFullThreadDevice(v18)
                || (unsigned int appended = ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(v15, v18)) == 0)
              {
                ot::Mle::MleRouter::SetChildStateToValid(this, v18);
                if (!ot::Neighbor::IsRxOnWhenIdle(v18))
                {
                  uint64_t v6 = (ot::IndirectSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::IndirectSender>(this);
                  ot::IndirectSender::SetChildUseShortAddress(v6, v18, 0);
                }

                ExtAddress = (const ot::Mac::ExtAddress *)ot::Neighbor::GetExtAddress(v18);
                ot::Ip6::Address::SetToLinkLocalAddress((ot::Ip6::Address *)&v16, ExtAddress);
                unsigned int appended = ot::Mle::Mle::TxMessage::SendTo(v15, &v16);
                if (!appended)
                {
                  unsigned __int16 v8 = ot::Neighbor::GetRloc16(v18);
                  ot::Mle::Mle::Log(0, 4u, (ot::Ip6::Address *)&v16, v8);
                }
              }
            }
          }
        }
      }
    }
  }

  else
  {
    unsigned int appended = 3;
  }

  if (appended && v15) {
    ot::Message::Free(v15);
  }
  return appended;
}

void ot::Mle::MleRouter::HandleChildUpdateRequest(ot::Mle::MleRouter *this, ot::Tlv **a2)
{
  uint64_t v69 = this;
  uint64_t v68 = a2;
  int v67 = 0;
  ot::Mle::Mle::TlvList::TlvList((ot::Mle::Mle::TlvList *)v72);
  ot::Mle::Mle::TlvList::TlvList((ot::Mle::Mle::TlvList *)v71);
  char v59 = 0;
  ot::Ip6::MessageInfo::GetPeerAddr(v68[1]);
  ot::Mle::Mle::Log(1u, 0x14u, v2);
  int v67 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)1,unsigned char>>(*v68, &v66, v3, v4);
  if (!v67)
  {
    ot::Mle::DeviceMode::Set(&v65, v66);
    int ChallengeTlv = ot::Mle::Mle::RxMessage::ReadChallengeTlv(*v68, (ot::Mle::Mle::Challenge *)v73, v5, v6, v7);
    if (ChallengeTlv)
    {
      if (ChallengeTlv != 23)
      {
        int v67 = 6;
        goto LABEL_58;
      }

      char v74 = 0;
    }

    else
    {
      ot::Mle::Mle::TlvList::Add((ot::Mle::Mle::TlvList *)v71, 4);
    }

    ot::Mle::Mle::TlvList::Add((ot::Mle::Mle::TlvList *)v71, 0);
    ot::Ip6::MessageInfo::GetPeerAddr(v68[1]);
    Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v8);
    ot::Ip6::InterfaceIdentifier::ConvertToExtAddress(Iid, (ot::Mac::ExtAddress *)v75);
    ot::ChildTable::FindChild((ot::Mle::MleRouter *)((char *)this + 1264), (uint64_t)v75, 5);
    uint64_t v61 = v10;
    if (v10)
    {
      if (ot::Neighbor::IsStateValid(v61))
      {
        char DeviceMode = ot::Neighbor::GetDeviceMode(v61);
        char v60 = DeviceMode;
        v57[5] = v65;
        ot::Child::SetDeviceMode(v61, v65);
        ot::Mle::Mle::TlvList::Add((ot::Mle::Mle::TlvList *)v71, 1);
        ot::Mle::Mle::TlvList::Add((ot::Mle::Mle::TlvList *)v71, 11);
        if (v74)
        {
          ot::Mle::Mle::TlvList::Add((ot::Mle::Mle::TlvList *)v71, 8);
          ot::Mle::Mle::TlvList::Add((ot::Mle::Mle::TlvList *)v71, 5);
        }

        int v49 = ot::Mle::MleRouter::ProcessAddressRegistrationTlv(this, v68, v61, v11, v12);
        if (v49)
        {
          if (v49 != 23)
          {
            int v67 = 6;
            goto LABEL_58;
          }
        }

        else
        {
          ot::Mle::Mle::TlvList::Add((ot::Mle::Mle::TlvList *)v71, 19);
        }

        int LeaderDataTlv = ot::Mle::Mle::RxMessage::ReadLeaderDataTlv(*v68, (ot::Mle::LeaderData *)v64, v13, v14, v15);
        if (LeaderDataTlv)
        {
          if (LeaderDataTlv != 23)
          {
            int v67 = 6;
            goto LABEL_58;
          }
        }

        else
        {
          char NetworkDataType = ot::Neighbor::GetNetworkDataType(v61);
          Dataunsigned __int16 Version = ot::Mle::LeaderData::GetDataVersion((uint64_t)v64, NetworkDataType);
          ot::Child::SetNetworkDataVersion((uint64_t)v61, DataVersion);
        }

        int v47 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)2,unsigned int>>(*v68, &v63, v16, v17);
        if (v47)
        {
          if (v47 != 23)
          {
            int v67 = 6;
            goto LABEL_58;
          }
        }

        else
        {
          int Timeout = ot::Child::GetTimeout(v61);
          if (Timeout != v63)
          {
            ot::Child::SetTimeout((uint64_t)v61, v63);
            char v59 = 1;
          }

          ot::Mle::Mle::TlvList::Add((ot::Mle::Mle::TlvList *)v71, 2);
        }

        int v46 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)27,unsigned short>>(*v68, &v62, v20, v21);
        if (v46)
        {
          if (v46 != 23)
          {
            int v67 = 6;
            goto LABEL_58;
          }

          else {
            unsigned __int16 v23 = 129;
          }
          unsigned __int16 v62 = v23;
        }

        else
        {
          ot::Mle::Mle::TlvList::Add((ot::Mle::Mle::TlvList *)v71, 27);
        }

        ot::Child::SetSupervisionInterval((uint64_t)v61, v62);
        int TlvRequestTlv = ot::Mle::Mle::RxMessage::ReadTlvRequestTlv(*v68, (ot::Mle::Mle::TlvList *)v72, v24, v25, v26);
        if (TlvRequestTlv)
        {
          if (TlvRequestTlv != 23)
          {
            int v67 = 6;
            goto LABEL_58;
          }
        }

        else
        {
          ot::Mle::Mle::TlvList::AddElementsFrom((ot::Mle::Mle::TlvList *)v71, (const ot::Mle::Mle::TlvList *)v72);
        }

        uint64_t IsCslSynchronized = ot::CslTxScheduler::ChildInfo::IsCslSynchronized((ot::Child *)((char *)v61 + 272));
        if ((IsCslSynchronized & 1) != 0)
        {
          int v44 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)85,unsigned int>>(*v68, &v56, v28, v29);
          if (v44)
          {
            if (v44 != 23)
            {
              int v67 = 0;
              goto LABEL_58;
            }
          }

          else
          {
            ot::CslTxScheduler::ChildInfo::SetCslTimeout((uint64_t)v61 + 272, v56);
            ot::Mle::Mle::TlvList::Add((ot::Mle::Mle::TlvList *)v71, 86);
          }

          uint64_t IsCslSynchronized = ot::Tlv::FindTlv<ot::Mle::CslChannelTlv>(*v68, v57, v30, v31, v32);
          if (!(_DWORD)IsCslSynchronized)
          {
            if (!ot::Mle::CslChannelTlv::IsValid((ot::Mle::CslChannelTlv *)v57))
            {
              int v67 = 6;
              goto LABEL_58;
            }

            uint64_t v43 = (ot::Child *)((char *)v61 + 272);
            char Channel = ot::Mle::CslChannelTlv::GetChannel((ot::Mle::CslChannelTlv *)v57);
            uint64_t IsCslSynchronized = ot::CslTxScheduler::ChildInfo::SetCslChannel((uint64_t)v43, Channel);
          }
        }

        uint64_t v42 = v61;
        int Now = ot::TimerMilli::GetNow((ot::TimerMilli *)IsCslSynchronized);
        ot::Neighbor::SetLastHeard((uint64_t)v42, Now);
        char v54 = ot::Neighbor::GetDeviceMode(v61);
        if (ot::Unequatable<ot::Mle::DeviceMode>::operator!=(&v60, &v54))
        {
          char Rloc16 = ot::Neighbor::GetRloc16(v61);
          ot::Mle::DeviceMode::Get((ot::Mle::DeviceMode *)&v60);
          char v53 = ot::Neighbor::GetDeviceMode(v61);
          ot::Mle::DeviceMode::Get((ot::Mle::DeviceMode *)&v53);
          char v52 = ot::Neighbor::GetDeviceMode(v61);
          ot::Mle::DeviceMode::ToString((ot::Mle::DeviceMode *)&v52, (ot::StringWriter *)v70);
          ot::String<(unsigned short)45>::AsCString((uint64_t)v70);
          ot::Logger::LogAtLevel<(ot::LogLevel)3>( (ot *)&ot::Mle::kLogModuleName,  "Child 0x%04x mode change 0x%02x -> 0x%02x [%s]",  v34,  v35,  v36,  v37,  v38,  v39,  Rloc16);
          char v59 = 1;
          if (ot::Neighbor::IsRxOnWhenIdle(v61))
          {
            ot::CslTxScheduler::ChildInfo::SetCslSynchronized((_BYTE *)v61 + 272, 0);
            ot::CslTxScheduler::ChildInfo::SetCslPrevSnValid((_BYTE *)v61 + 272, 0);
          }

          uint64_t v40 = ot::GetProvider<ot::InstanceLocator>::Get<ot::IndirectSender>(this);
          ot::IndirectSender::HandleChildModeChange(v40, v61, v60);
        }

        if ((v59 & 1) != 0)
        {
          ot::ChildTable::StoreChild((ot::Mle::MleRouter *)((char *)this + 1264), v61);
          IgnoreError();
        }

        if (v74) {
          ot::Neighbor::ClearLastRxFragmentTag((uint64_t)v61);
        }
        ot::Mle::MleRouter::SendChildUpdateResponse( this,  v61,  v68[1],  (const ot::Mle::Mle::TlvList *)v71,  (const ot::Mle::Mle::Challenge *)v73);
        *((_BYTE *)v68 + 32) = 2;
      }
    }

    else if (ot::Mle::DeviceMode::IsRxOnWhenIdle((ot::Mle::DeviceMode *)&v65))
    {
      ot::Mle::Mle::TlvList::Add((ot::Mle::Mle::TlvList *)v71, 17);
      ot::Mle::MleRouter::SendChildUpdateResponse( this,  0LL,  v68[1],  (const ot::Mle::Mle::TlvList *)v71,  (const ot::Mle::Mle::Challenge *)v73);
    }
  }

void ot::Mle::MleRouter::SendChildUpdateResponse( ot::Mle::MleRouter *this, ot::Child *a2, const ot::Ip6::MessageInfo *a3, const ot::Mle::Mle::TlvList *a4, const ot::Mle::Mle::Challenge *a5)
{
  unsigned __int16 v23 = ot::Mle::Mle::NewMleMessage((uint64_t)this, 0xEu);
  if (v23)
  {
    ot::Array<unsigned char,(unsigned short)32,unsigned char>::begin();
    uint64_t v22 = v5;
    uint64_t v21 = ot::Array<unsigned char,(unsigned short)32,unsigned char>::end((uint64_t)a4);
    while (v22 != (unsigned __int8 *)v21)
    {
      unsigned __int8 v20 = *v22;
      if (*v22 <= 0x11uLL) {
        __asm { BR              X8 }
      }

      if (a2)
      {
        switch(v20)
        {
          case 1u:
            char DeviceMode = ot::Neighbor::GetDeviceMode(a2);
            int appended = ot::Mle::Mle::TxMessage::AppendModeTlv((uint64_t)v23, DeviceMode);
            if (appended) {
              goto LABEL_34;
            }
            break;
          case 2u:
            unsigned int Timeout = ot::Child::GetTimeout(a2);
            int appended = ot::Mle::Mle::TxMessage::AppendTimeoutTlv(v23, Timeout);
            if (appended) {
              goto LABEL_34;
            }
            break;
          case 0xCu:
            ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mle::kLogModuleName,  "%s AppendNetworkDataTlv",  v6,  v7,  v8,  v9,  v10,  v11,  (char)"SendChildUpdateResponse");
            char NetworkDataType = ot::Neighbor::GetNetworkDataType(a2);
            int appended = ot::Mle::Mle::TxMessage::AppendNetworkDataTlv(v23, NetworkDataType);
            if (appended) {
              goto LABEL_34;
            }
            int appended = ot::Mle::Mle::TxMessage::AppendActiveTimestampTlv(v23);
            if (appended) {
              goto LABEL_34;
            }
            int appended = ot::Mle::Mle::TxMessage::AppendPendingTimestampTlv(v23);
            if (appended) {
              goto LABEL_34;
            }
            break;
          case 0x13u:
            int appended = ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(v23, a2);
            if (appended) {
              goto LABEL_34;
            }
            break;
          case 0x1Bu:
            unsigned __int16 SupervisionInterval = ot::Child::GetSupervisionInterval(a2);
            int appended = ot::Mle::Mle::TxMessage::AppendSupervisionIntervalTlv(v23, SupervisionInterval);
            if (appended) {
              goto LABEL_34;
            }
            break;
          default:
            if (v20 == 86 && !ot::Neighbor::IsRxOnWhenIdle(a2))
            {
              int appended = ot::Mle::Mle::TxMessage::AppendCslClockAccuracyTlv(v23);
              if (appended) {
                goto LABEL_34;
              }
            }

            break;
        }
      }

      ++v22;
    }

    ot::Ip6::MessageInfo::GetPeerAddr(a3);
    int appended = ot::Mle::Mle::TxMessage::SendTo(v23, v15);
    if (!appended)
    {
      ot::Ip6::MessageInfo::GetPeerAddr(a3);
      if (a2)
      {
        uint64_t v18 = v16;
        unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(a2);
        ot::Mle::Mle::Log(0, 0x15u, v18, Rloc16);
      }

      else
      {
        ot::Mle::Mle::Log(0, 0x15u, v16);
      }
    }
  }

  else
  {
    int appended = 3;
  }

BOOL ot::Neighbor::GetNetworkDataType(ot::Neighbor *this)
{
  uint64_t v3 = this;
  char DeviceMode = ot::Neighbor::GetDeviceMode(this);
  return ot::Mle::DeviceMode::GetNetworkDataType((ot::Mle::DeviceMode *)&DeviceMode);
}

{
  return __ZNK2ot8Neighbor18GetNetworkDataTypeEv(this);
}

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)85,unsigned int>>( ot::Tlv *a1, unsigned int *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned int>(a1, 0x55u, a2, a4);
}

{
  return __ZN2ot3Tlv4FindINS_11UintTlvInfoILh85EjEEEE7otErrorRKNS_7MessageERNT_13UintValueTypeE(a1, a2, a3, a4);
}

uint64_t ot::Tlv::FindTlv<ot::Mle::CslChannelTlv>(ot::Tlv *a1, void *a2, uint64_t a3, uint64_t a4, ot::Tlv *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)0x50, 5u, a2, a5);
}

{
  return __ZN2ot3Tlv7FindTlvINS_3Mle13CslChannelTlvEEE7otErrorRKNS_7MessageERT_(a1, a2, a3, a4, a5);
}

BOOL ot::Mle::CslChannelTlv::IsValid(ot::Mle::CslChannelTlv *this)
{
  return ot::Tlv::GetLength(this) >= 3uLL;
}

{
  return __ZNK2ot3Mle13CslChannelTlv7IsValidEv(this);
}

uint64_t ot::Mle::CslChannelTlv::GetChannel(ot::Mle::CslChannelTlv *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)((char *)this + 3));
}

{
  return __ZNK2ot3Mle13CslChannelTlv10GetChannelEv(this);
}

void ot::Mle::MleRouter::HandleChildUpdateResponse(ot::Mle::MleRouter *this, ot::Tlv **a2)
{
  uint64_t v69 = this;
  uint64_t v68 = a2;
  int v67 = 0;
  if (a2[3]
    && (unsigned __int16 v2 = ot::Neighbor::GetRloc16(v68[3]), !ot::Mle::IsActiveRouter((ot::Mle *)v2))
    && (uint64_t v3 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this),
        ot::ChildTable::Contains(v3, v68[3])))
  {
    char v60 = v68[3];
    int ResponseTlv = ot::Mle::Mle::RxMessage::ReadResponseTlv(*v68, (ot::Mle::Mle::Challenge *)v71, v4, v5, v6);
    if (ResponseTlv)
    {
      if (ResponseTlv != 23)
      {
        int v67 = 0;
        goto LABEL_52;
      }

      if (!ot::Neighbor::IsStateValid(v60))
      {
        int v67 = 8;
        goto LABEL_52;
      }

      char v72 = 0;
    }

    else
    {
      Challenge = (unsigned __int8 *)ot::Child::GetChallenge(v60);
      Challengechar Size = ot::Child::GetChallengeSize(v60);
      if (!ot::Mle::Mle::Challenge::Matches((ot::Mle::Mle::Challenge *)v71, Challenge, ChallengeSize))
      {
        int v67 = 8;
        goto LABEL_52;
      }
    }

    ot::Ip6::MessageInfo::GetPeerAddr(v68[1]);
    char v53 = v9;
    unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(v60);
    ot::Mle::Mle::Log(1u, 0x15u, v53, Rloc16);
    int v54 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)0,unsigned short>>(*v68, &v66, v11, v12);
    if (v54)
    {
      if (v54 != 23)
      {
        int v67 = 6;
        goto LABEL_52;
      }
    }

    else
    {
      unsigned __int16 v15 = ot::Neighbor::GetRloc16(v60);
      if (v66 != v15)
      {
        ot::Mle::MleRouter::RemoveNeighbor(this, v60);
        goto LABEL_52;
      }
    }

    int v52 = ot::Tlv::Find<ot::Mle::StatusTlv>(*v68, &v64, v13, v14);
    if (v52)
    {
      if (v52 != 23)
      {
        int v67 = 6;
        goto LABEL_52;
      }
    }

    else if (v64 == 1)
    {
      ot::Mle::MleRouter::RemoveNeighbor(this, v60);
      goto LABEL_52;
    }

    int v51 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)5,unsigned int>>(*v68, &v63, v16, v17);
    if (v51)
    {
      if (v51 != 23)
      {
        int v67 = 6;
        goto LABEL_52;
      }
    }

    else
    {
      LinkFrameuint64_t Counters = (_DWORD *)ot::Neighbor::GetLinkFrameCounters(v60);
      ot::Mac::LinkFrameCounters::SetAll(LinkFrameCounters, v63);
      ot::Neighbor::SetLinkAckFrameCounter((uint64_t)v60, v63);
    }

    int v50 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)8,unsigned int>>(*v68, (unsigned int *)&v62, v18, v19);
    if (v50)
    {
      if (v50 != 23)
      {
        int v67 = 0;
        goto LABEL_52;
      }
    }

    else
    {
      ot::Neighbor::SetMleFrameCounter((uint64_t)v60, v62);
    }

    ot::Ip6::MessageInfo::GetPeerAddr(v68[1]);
    ot::Ip6::Address::ToString(v21, (ot::StringWriter *)v70);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v70);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)&ot::Mle::kLogModuleName,  "%s Rx from %s linkFrameCounter=%d mleFrameCounter=%d",  v22,  v23,  v24,  v25,  v26,  v27,  (char)"HandleChildUpdateResponse");
    int v49 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)2,unsigned int>>(*v68, &v65, v28, v29);
    if (v49)
    {
      if (v49 != 23)
      {
        int v67 = 6;
        goto LABEL_52;
      }
    }

    else
    {
      ot::Child::SetTimeout((uint64_t)v60, v65);
    }

    int v48 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)27,unsigned short>>(*v68, &v59, v30, v31);
    if (v48)
    {
      if (v48 != 23)
      {
        int v67 = 6;
        goto LABEL_52;
      }
    }

    else
    {
      ot::Child::SetSupervisionInterval((uint64_t)v60, v59);
    }

    int v47 = ot::Mle::MleRouter::ProcessAddressRegistrationTlv(this, v68, v60, v32, v33);
    if (v47 && v47 != 23)
    {
      int v67 = 6;
    }

    else
    {
      int LeaderDataTlv = ot::Mle::Mle::RxMessage::ReadLeaderDataTlv(*v68, (ot::Mle::LeaderData *)v61, v34, v35, v36);
      if (LeaderDataTlv)
      {
        if (LeaderDataTlv != 23)
        {
          int v67 = 6;
          goto LABEL_52;
        }
      }

      else
      {
        uint64_t v45 = v60;
        char NetworkDataType = ot::Neighbor::GetNetworkDataType(v60);
        Dataunsigned __int16 Version = ot::Mle::LeaderData::GetDataVersion((uint64_t)v61, NetworkDataType);
        ot::Child::SetNetworkDataVersion((uint64_t)v45, DataVersion);
      }

      uint64_t v39 = (ot::TimerMilli *)ot::Mle::MleRouter::SetChildStateToValid(this, v60);
      uint64_t v43 = v60;
      int Now = ot::TimerMilli::GetNow(v39);
      ot::Neighbor::SetLastHeard((uint64_t)v43, Now);
      ot::Neighbor::SetKeySequence((uint64_t)v60, *((_DWORD *)v68 + 5));
      LinkInfo = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v60);
      ThreadLinkInfo = (ot::ThreadLinkInfo *)ot::Ip6::MessageInfo::GetThreadLinkInfo(v68[1]);
      char Rss = ot::ThreadLinkInfo::GetRss(ThreadLinkInfo);
      ot::LinkQualityInfo::AddRss(LinkInfo, Rss);
      if (v72) {
        char v42 = 1;
      }
      else {
        char v42 = 2;
      }
      *((_BYTE *)v68 + 32) = v42;
    }
  }

  else
  {
    ot::Ip6::MessageInfo::GetPeerAddr(v68[1]);
    ot::Mle::Mle::Log(1u, 0x16u, v7);
    int v67 = 23;
  }

uint64_t ot::Mle::MleRouter::SetChildStateToValid(ot::Mle::MleRouter *this, ot::Child *a2)
{
  uint64_t result = ot::Neighbor::IsStateValid(a2);
  if ((result & 1) == 0)
  {
    ot::Neighbor::SetState(a2, 7);
    ot::ChildTable::StoreChild((ot::Mle::MleRouter *)((char *)this + 1264), a2);
    IgnoreError();
    uint64_t v3 = (ot::MlrManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MlrManager>(this);
    ot::MlrManager::UpdateProxiedSubscriptions(v3, a2, 0LL, 0);
    return ot::NeighborTable::Signal((ot::Mle::MleRouter *)((char *)this + 304), 0, a2);
  }

  return result;
}

void ot::Mle::MleRouter::HandleDataRequest(ot::Mle::MleRouter *this, ot::Mle::Mle::RxInfo *a2)
{
  uint64_t v28 = this;
  uint64_t v27 = a2;
  int TlvRequestTlv = 0;
  ot::Mle::Mle::TlvList::TlvList((ot::Mle::Mle::TlvList *)v29);
  ot::Ip6::MessageInfo::GetPeerAddr(*((ot::Ip6::MessageInfo **)v27 + 1));
  ot::Mle::Mle::Log(1u, 7u, v2);
  if (ot::Mle::Mle::RxInfo::IsNeighborStateValid((ot::Neighbor **)v27))
  {
    int TlvRequestTlv = ot::Mle::Mle::RxMessage::ReadTlvRequestTlv( *(ot::Mle::Mle::RxMessage **)v27,  (ot::Mle::Mle::TlvList *)v29,  v3,  v4,  v5);
    if (TlvRequestTlv) {
      goto LABEL_15;
    }
    int v23 = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)22,ot::MeshCoP::Timestamp>>( *(ot::Tlv **)v27,  (uint64_t)v25,  v6,  v7,  v8);
    if (v23)
    {
      if (v23 != 23)
      {
        int TlvRequestTlv = 6;
        goto LABEL_15;
      }
    }

    else
    {
      active = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
      Timestamp = (const ot::MeshCoP::Timestamp *)ot::MeshCoP::DatasetManager::GetTimestamp(active);
    }

    ot::Mle::Mle::TlvList::Add((ot::Mle::Mle::TlvList *)v29, 24);
LABEL_9:
    int v22 = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)23,ot::MeshCoP::Timestamp>>( *(ot::Tlv **)v27,  (uint64_t)v25,  v12,  v13,  v14);
    if (v22)
    {
      if (v22 != 23)
      {
        int TlvRequestTlv = 6;
        goto LABEL_15;
      }
    }

    else
    {
      unsigned __int16 v15 = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>(this);
      uint64_t v16 = (const ot::MeshCoP::Timestamp *)ot::MeshCoP::DatasetManager::GetTimestamp(v15);
      if (!ot::MeshCoP::Timestamp::Compare((ot::MeshCoP::Timestamp *)v25, v16, v17))
      {
LABEL_14:
        *((_BYTE *)v27 + 32) = 2;
        ot::Mle::Mle::ProcessKeySequence(this, v27);
        ot::Ip6::MessageInfo::GetPeerAddr(*((ot::Ip6::MessageInfo **)v27 + 1));
        ot::Mle::MleRouter::SendDataResponse( this,  v18,  (const ot::Mle::Mle::TlvList *)v29,  0LL,  *(const ot::Message **)v27,  v19,  v20,  v21);
        goto LABEL_15;
      }
    }

    ot::Mle::Mle::TlvList::Add((ot::Mle::Mle::TlvList *)v29, 25);
    goto LABEL_14;
  }

  int TlvRequestTlv = 8;
LABEL_15:
  ot::Mle::Mle::LogProcessError(7u, TlvRequestTlv);
}

void ot::Mle::MleRouter::SendDataResponse( ot::Mle::MleRouter *this, const ot::Ip6::Address *a2, const ot::Mle::Mle::TlvList *a3, uint64_t a4, const ot::Message *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 v29 = a4;
  int appended = 0;
  uint64_t v26 = 0LL;
  if ((*((_BYTE *)this + 40) & 1) != 0)
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)&ot::Mle::kLogModuleName,  "Suppressing Data Response - waiting for new network data",  (uint64_t)a3,  a4,  (uint64_t)a5,  a6,  a7,  a8,  v18);
  }

  else
  {
    uint64_t v26 = ot::Mle::Mle::NewMleMessage((uint64_t)this, 8u);
    if (v26)
    {
      int appended = ot::Mle::Mle::TxMessage::AppendSourceAddressTlv(v26);
      if (!appended)
      {
        int appended = ot::Mle::Mle::TxMessage::AppendLeaderDataTlv(v26);
        if (!appended)
        {
          int appended = ot::Mle::Mle::TxMessage::AppendActiveTimestampTlv(v26);
          if (!appended)
          {
            int appended = ot::Mle::Mle::TxMessage::AppendPendingTimestampTlv(v26);
            if (!appended)
            {
              ot::Array<unsigned char,(unsigned short)32,unsigned char>::begin();
              int v23 = v8;
              uint64_t v22 = ot::Array<unsigned char,(unsigned short)32,unsigned char>::end((uint64_t)a3);
              while (v23 != (unsigned __int8 *)v22)
              {
                int v20 = *v23;
                switch(v20)
                {
                  case 9:
                    int appended = ot::Mle::Mle::TxMessage::AppendRouteTlv(v26, 0LL);
                    if (appended) {
                      goto LABEL_39;
                    }
                    break;
                  case 12:
                    Neighbor = (ot::Neighbor *)ot::NeighborTable::FindNeighbor( (ot::Mle::MleRouter *)((char *)this + 304),  a2,  1);
                    ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)&ot::Mle::kLogModuleName,  "%s AppendNetworkDataTlv",  v9,  v10,  v11,  v12,  v13,  v14,  (char)"SendDataResponse");
                    if (Neighbor)
                    {
                      char NetworkDataType = ot::Neighbor::GetNetworkDataType(Neighbor);
                      int v15 = ot::Mle::Mle::TxMessage::AppendNetworkDataTlv(v26, NetworkDataType);
                    }

                    else
                    {
                      int v15 = ot::Mle::Mle::TxMessage::AppendNetworkDataTlv(v26, 0);
                    }

                    int appended = v15;
                    if (v15) {
                      goto LABEL_39;
                    }
                    break;
                  case 24:
                    int appended = ot::Mle::Mle::TxMessage::AppendActiveDatasetTlv(v26);
                    if (appended) {
                      goto LABEL_39;
                    }
                    break;
                  case 25:
                    int appended = ot::Mle::Mle::TxMessage::AppendPendingDatasetTlv(v26);
                    if (appended) {
                      goto LABEL_39;
                    }
                    break;
                  case 89:
                    if (!a5) {
                      __assert_rtn("SendDataResponse", "mle_router.cpp", 3946, "aRequestMessage != nullptr");
                    }
                    uint64_t v25 = (ot::Neighbor *)ot::NeighborTable::FindNeighbor( (ot::Mle::MleRouter *)((char *)this + 304),  a2,  1);
                    if (!v25)
                    {
                      int appended = 13;
                      goto LABEL_39;
                    }

                    uint64_t v16 = (ot::LinkMetrics::Subject *)ot::GetProvider<ot::InstanceLocator>::Get<ot::LinkMetrics::Subject>(this);
                    int appended = ot::LinkMetrics::Subject::AppendReport(v16, v26, a5, v25);
                    if (appended) {
                      goto LABEL_39;
                    }
                    break;
                }

                ++v23;
              }

              if (v29)
              {
                uint64_t v17 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
                ot::MeshForwarder::RemoveDataResponseMessages(v17);
                ot::Mle::Mle::RemoveDelayedDataResponseMessage(this);
                int appended = ot::Mle::Mle::TxMessage::SendAfterDelay(v26, a2, v29);
                if (!appended) {
                  ot::Mle::Mle::Log(2u, 8u, a2);
                }
              }

              else
              {
                int appended = ot::Mle::Mle::TxMessage::SendTo(v26, (__n128 *)a2);
                if (!appended) {
                  ot::Mle::Mle::Log(0, 8u, a2);
                }
              }
            }
          }
        }
      }
    }

    else
    {
      int appended = 3;
    }
  }

uint64_t ot::Mle::MleRouter::HandleNetworkDataUpdateRouter(ot::Mle::MleRouter *this)
{
  uint64_t v8 = this;
  ot::Mle::Mle::TlvList::TlvList((ot::Mle::Mle::TlvList *)v9);
  uint64_t result = ot::Mle::Mle::IsRouterOrLeader(this);
  if ((result & 1) != 0)
  {
    ot::Ip6::Address::SetToLinkLocalAllNodesMulticast((ot::Ip6::Address *)v7);
    ot::Mle::Mle::TlvList::Add((ot::Mle::Mle::TlvList *)v9, 12);
    if (ot::Mle::Mle::IsLeader(this)) {
      unsigned __int16 Uint16InRange = 0;
    }
    else {
      unsigned __int16 Uint16InRange = ot::Random::NonCrypto::GetUint16InRange(0LL, 0x1F4u);
    }
    ot::Mle::MleRouter::SendDataResponse( this,  (const ot::Ip6::Address *)v7,  (const ot::Mle::Mle::TlvList *)v9,  Uint16InRange,  0LL,  v2,  v3,  v4);
    return ot::Mle::MleRouter::SynchronizeChildNetworkData(this);
  }

  return result;
}

uint64_t ot::Child::GetNetworkDataVersion(ot::Child *this)
{
  return *((unsigned __int8 *)this + 552);
}

{
  return __ZNK2ot5Child21GetNetworkDataVersionEv(this);
}

void ot::Mle::MleRouter::HandleDiscoveryRequest(ot::Mle::MleRouter *this, ot::Ip6::MessageInfo **a2)
{
  uint64_t v24 = this;
  int v23 = a2;
  TlvValueunsigned __int16 Offset = 0;
  ot::Ip6::MessageInfo::GetPeerAddr(a2[1]);
  ot::Mle::Mle::Log(1u, 9u, v2);
  ot::Tlv::SetLength((uint64_t)v20, 0);
  if ((ot::Mle::MleRouter::IsRouterEligible(this) & 1) != 0)
  {
    TlvValueunsigned __int16 Offset = ot::Tlv::FindTlvValueOffset(*v23, (const ot::Message *)0x1A, &v19, &v18, v3);
    if (!TlvValueOffset)
    {
      unsigned __int16 v17 = v19 + v18;
      while (v19 < (int)v17)
      {
        ot::Message::Read<ot::MeshCoP::Tlv>(*v23, v19, v21);
        IgnoreError();
        int Type = ot::MeshCoP::Tlv::GetType((ot::MeshCoP::Tlv *)v21);
        if (Type == 2)
        {
          TlvValueunsigned __int16 Offset = ot::Tlv::Read<ot::MeshCoP::ExtendedPanIdTlv>(*v23, v19, (uint64_t)v27);
          if (TlvValueOffset) {
            goto LABEL_22;
          }
          uint64_t v4 = (ot::MeshCoP::ExtendedPanIdManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ExtendedPanIdManager>(this);
          ot::MeshCoP::ExtendedPanIdManager::GetExtPanId(v4);
          if (!ot::Unequatable<ot::MeshCoP::ExtendedPanId>::operator!=(v5, v27))
          {
            TlvValueunsigned __int16 Offset = 2;
            goto LABEL_22;
          }
        }

        else if (Type == 128)
        {
          ot::Message::Read<ot::MeshCoP::DiscoveryRequestTlv>(*v23, v19, v20);
          IgnoreError();
          if (!ot::MeshCoP::DiscoveryRequestTlv::IsValid((ot::MeshCoP::DiscoveryRequestTlv *)v20))
          {
            TlvValueunsigned __int16 Offset = 6;
            goto LABEL_22;
          }
        }

        unsigned __int8 Length = ot::Tlv::GetLength((ot::Tlv *)v21);
        v19 += Length + 2;
      }

      if (!ot::MeshCoP::DiscoveryRequestTlv::IsValid((ot::MeshCoP::DiscoveryRequestTlv *)v20)) {
        goto LABEL_21;
      }
      if (ot::CallbackBase<void (*)(otThreadDiscoveryRequestInfo const*,void *)>::IsSet((void *)this + 5783))
      {
        ot::Ip6::MessageInfo::GetPeerAddr(v23[1]);
        Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v7);
        ot::AsCoreType<otExtAddress>((uint64_t)v25);
        ot::Ip6::InterfaceIdentifier::ConvertToExtAddress(Iid, v8);
        char Version = ot::MeshCoP::DiscoveryRequestTlv::GetVersion((ot::MeshCoP::DiscoveryRequestTlv *)v20);
        char v26 = v26 & 0xF0 | Version & 0xF;
        BOOL IsJoiner = ot::MeshCoP::DiscoveryRequestTlv::IsJoiner((ot::MeshCoP::DiscoveryRequestTlv *)v20);
        char v26 = v26 & 0xEF | (16 * IsJoiner);
        uint64_t v16 = v25;
        ot::Callback<void (*)(otThreadDiscoveryRequestInfo const*,void *),(ot::CallbackContextPosition)1>::Invoke<otThreadDiscoveryRequestInfo*>( (uint64_t)this + 46264,  &v16);
      }

      if (ot::MeshCoP::DiscoveryRequestTlv::IsJoiner((ot::MeshCoP::DiscoveryRequestTlv *)v20)
        && (uint64_t v11 = (ot::NetworkData::LeaderBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this),
            (ot::NetworkData::LeaderBase::IsJoiningEnabled(v11) & 1) == 0))
      {
        TlvValueunsigned __int16 Offset = 8;
      }

      else
      {
LABEL_21:
        ot::Ip6::MessageInfo::GetPeerAddr(v23[1]);
        TlvValueunsigned __int16 Offset = ot::Mle::MleRouter::SendDiscoveryResponse(this, v12, *v23);
      }
    }
  }

  else
  {
    TlvValueunsigned __int16 Offset = 13;
  }

uint64_t ot::Message::Read<ot::MeshCoP::DiscoveryRequestTlv>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 4u);
}

{
  return __ZNK2ot7Message4ReadINS_7MeshCoP19DiscoveryRequestTlvEEE7otErrortRT_(a1, a2, a3);
}

BOOL ot::MeshCoP::DiscoveryRequestTlv::IsValid(ot::MeshCoP::DiscoveryRequestTlv *this)
{
  return ot::Tlv::GetLength(this) >= 2uLL;
}

{
  return __ZNK2ot7MeshCoP19DiscoveryRequestTlv7IsValidEv(this);
}

BOOL ot::CallbackBase<void (*)(otThreadDiscoveryRequestInfo const*,void *)>::IsSet(void *a1)
{
  return *a1 != 0LL;
}

{
  return __ZNK2ot12CallbackBaseIPFvPK28otThreadDiscoveryRequestInfoPvEE5IsSetEv(a1);
}

uint64_t ot::MeshCoP::DiscoveryRequestTlv::GetVersion(ot::MeshCoP::DiscoveryRequestTlv *this)
{
  return (int)*((unsigned __int8 *)this + 2) >> 4;
}

{
  return __ZNK2ot7MeshCoP19DiscoveryRequestTlv10GetVersionEv(this);
}

BOOL ot::MeshCoP::DiscoveryRequestTlv::IsJoiner(ot::MeshCoP::DiscoveryRequestTlv *this)
{
  return (*((_BYTE *)this + 2) & 8) != 0;
}

{
  return __ZNK2ot7MeshCoP19DiscoveryRequestTlv8IsJoinerEv(this);
}

uint64_t ot::Callback<void (*)(otThreadDiscoveryRequestInfo const*,void *),(ot::CallbackContextPosition)1>::Invoke<otThreadDiscoveryRequestInfo*>( uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))a1)(*a2, *(void *)(a1 + 8));
}

{
  return __ZNK2ot8CallbackIPFvPK28otThreadDiscoveryRequestInfoPvELNS_23CallbackContextPositionE1EE6InvokeIJPS1_EEEvDpOT_( a1,  a2);
}

uint64_t ot::Mle::MleRouter::SendDiscoveryResponse( ot::Mle::MleRouter *this, const ot::Ip6::Address *a2, const ot::Message *a3)
{
  unsigned __int16 v33 = this;
  uint64_t v32 = a2;
  uint64_t v31 = a3;
  unsigned int v30 = 0;
  unsigned __int16 v29 = ot::Mle::Mle::NewMleMessage((uint64_t)this, 0x11u);
  if (v29)
  {
    ot::Message::SetDirectTransmission(v29);
    __int16 PanId = ot::Message::GetPanId(v31);
    ot::Message::SetPanId(v29, PanId);
    char RadioType = ot::Message::GetRadioType(v31);
    ot::Message::SetRadioType(v29, RadioType);
    ot::Mle::Tlv::SetType(v27, 26);
    unsigned int v30 = ot::Message::Append<ot::Mle::Tlv>(v29, v27);
    if (!v30)
    {
      __int16 Length = ot::Message::GetLength(v29);
      ot::MeshCoP::DiscoveryResponseTlv::Init((ot::MeshCoP::DiscoveryResponseTlv *)v26);
      ot::MeshCoP::DiscoveryResponseTlv::SetVersion((uint64_t)v26, 4);
      uint64_t v5 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
      if ((*(_WORD *)(ot::KeyManager::GetSecurityPolicy(v5) + 2) & 2) != 0)
      {
        uint64_t v22 = v29;
        uint64_t v6 = (ot::MeshCoP::BorderAgent *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::BorderAgent>(this);
        unsigned __int16 UdpPort = ot::MeshCoP::BorderAgent::GetUdpPort(v6);
        unsigned int v30 = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)15,unsigned short>>((uint64_t)v22, UdpPort);
        if (v30) {
          goto LABEL_18;
        }
        ot::MeshCoP::DiscoveryResponseTlv::SetNativeCommissioner((uint64_t)v26, 1);
      }

      else
      {
        ot::MeshCoP::DiscoveryResponseTlv::SetNativeCommissioner((uint64_t)v26, 0);
      }

      uint64_t v8 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
      if ((*(_WORD *)(ot::KeyManager::GetSecurityPolicy(v8) + 2) & 0x10) != 0) {
        ot::MeshCoP::DiscoveryResponseTlv::SetCommercialCommissioningMode((uint64_t)v26, 1);
      }
      unsigned int v30 = ot::Tlv::AppendTo((ot::Tlv *)v26, v29);
      if (!v30)
      {
        uint64_t v21 = v29;
        uint64_t v9 = (ot::MeshCoP::ExtendedPanIdManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ExtendedPanIdManager>(this);
        ot::MeshCoP::ExtendedPanIdManager::GetExtPanId(v9);
        unsigned int v30 = ot::Tlv::Append<ot::MeshCoP::ExtendedPanIdTlv>(v21, v10);
        if (!v30)
        {
          ot::MeshCoP::NetworkNameTlv::Init((ot::MeshCoP::NetworkNameTlv *)v34);
          uint64_t v11 = (ot::MeshCoP::NetworkNameManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::NetworkNameManager>(this);
          ot::MeshCoP::NetworkNameManager::GetNetworkName(v11);
          v24[0] = ot::MeshCoP::NetworkName::GetAsData(v12);
          v24[1] = v13;
          ot::MeshCoP::NetworkNameTlv::SetNetworkName( (ot::MeshCoP::NetworkNameTlv *)v34,  (const ot::MeshCoP::NameData *)v24);
          unsigned int v30 = ot::Tlv::AppendTo((ot::Tlv *)v34, v29);
          if (!v30)
          {
            uint64_t v14 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
            ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(v14, 8u);
            if (!v15 || (unsigned int v30 = ot::Tlv::AppendTo(v15, v29)) == 0)
            {
              int v20 = v29;
              uint64_t v16 = (ot::MeshCoP::JoinerRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::JoinerRouter>(this);
              Joinerunsigned __int16 UdpPort = ot::MeshCoP::JoinerRouter::GetJoinerUdpPort(v16);
              unsigned int v30 = ot::Tlv::Append<ot::MeshCoP::JoinerUdpPortTlv>((uint64_t)v20, JoinerUdpPort);
              if (!v30)
              {
                char v18 = ot::Message::GetLength(v29);
                ot::Tlv::SetLength((uint64_t)v27, v18 - Length);
                ot::Message::Write<ot::Mle::Tlv>(v29, Length - 2, v27);
                unsigned __int16 Uint16InRange = ot::Random::NonCrypto::GetUint16InRange(0LL, 0xFBu);
                unsigned int v30 = ot::Mle::Mle::TxMessage::SendAfterDelay(v29, v32, Uint16InRange);
                if (!v30) {
                  ot::Mle::Mle::Log(2u, 0xAu, v32);
                }
              }
            }
          }
        }
      }
    }
  }

  else
  {
    unsigned int v30 = 3;
  }

uint64_t ot::MeshCoP::DiscoveryResponseTlv::Init(ot::MeshCoP::DiscoveryResponseTlv *this)
{
  uint64_t result = ot::Tlv::SetLength((uint64_t)this, 2);
  *((_BYTE *)this + 2) = 0;
  *((_BYTE *)this + 3) = 0;
  return result;
}

{
  return __ZN2ot7MeshCoP20DiscoveryResponseTlv4InitEv(this);
}

uint64_t ot::MeshCoP::DiscoveryResponseTlv::SetVersion(uint64_t this, char a2)
{
  *(_BYTE *)(this + 2) = *(_BYTE *)(this + 2) & 0xF | (16 * a2);
  return this;
}

{
  return __ZN2ot7MeshCoP20DiscoveryResponseTlv10SetVersionEh(this, a2);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)15,unsigned short>>(uint64_t a1, unsigned __int16 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned short>(a1, 15, a2);
}

{
  return __ZN2ot3Tlv6AppendINS_11UintTlvInfoILh15EtEEEE7otErrorRNS_7MessageENT_13UintValueTypeE(a1, a2);
}

uint64_t ot::MeshCoP::DiscoveryResponseTlv::SetNativeCommissioner(uint64_t this, char a2)
{
  if ((a2 & 1) != 0) {
    *(_BYTE *)(this + 2) |= 8u;
  }
  else {
    *(_BYTE *)(this + 2) &= ~8u;
  }
  return this;
}

{
  return __ZN2ot7MeshCoP20DiscoveryResponseTlv21SetNativeCommissionerEb(this, a2);
}

uint64_t ot::MeshCoP::DiscoveryResponseTlv::SetCommercialCommissioningMode(uint64_t this, char a2)
{
  if ((a2 & 1) != 0) {
    *(_BYTE *)(this + 2) |= 4u;
  }
  else {
    *(_BYTE *)(this + 2) &= ~4u;
  }
  return this;
}

{
  return __ZN2ot7MeshCoP20DiscoveryResponseTlv30SetCommercialCommissioningModeEb(this, a2);
}

uint64_t ot::Child::GetRequestTlv(ot::Child *this, unsigned __int8 a2)
{
  return *((unsigned __int8 *)this + a2 + 553);
}

{
  return __ZNK2ot5Child13GetRequestTlvEh(this, a2);
}

uint64_t ot::Child::IsAddressRegistrationFailedFlagSet(ot::Child *this)
{
  return *((_BYTE *)this + 573) & 1;
}

{
  return __ZN2ot5Child34IsAddressRegistrationFailedFlagSetEv(this);
}

BOOL ot::Mle::MleRouter::IsMinimalChild(ot::Mle::MleRouter *this, unsigned __int16 a2)
{
  BOOL v9 = 0;
  int v7 = ot::Mle::RouterIdFromRloc16((ot::Mle *)a2);
  uint64_t v2 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  unsigned __int16 ShortAddress = ot::Mac::Mac::GetShortAddress(v2);
  if (v7 == ot::Mle::RouterIdFromRloc16((ot::Mle *)ShortAddress))
  {
    Neighbor = (ot::Neighbor *)ot::NeighborTable::FindNeighbor((ot::Mle::MleRouter *)((char *)this + 304), a2, 1);
    LOBYTE(v5) = 0;
    if (Neighbor) {
      return !ot::Neighbor::IsFullThreadDevice(Neighbor);
    }
    return v5;
  }

  return v9;
}

void ot::Mle::MleRouter::RemoveRouterLink(ot::Mle::MleRouter *this, ot::Router *a2)
{
  int v3 = *((unsigned __int8 *)this + 41);
  if (v3 == 2)
  {
    if (a2 == (ot::Mle::MleRouter *)((char *)this + 48))
    {
      ot::Mle::Mle::BecomeDetached(this);
      IgnoreError();
    }
  }

  else if (v3 == 4 || v3 == 3)
  {
    ot::RouterTable::RemoveRouterLink((ot::Mle::MleRouter *)((char *)this + 38136), a2);
  }

_BYTE *ot::Mle::Mle::ClearParentCandidate(ot::Mle::Mle *this)
{
  return ot::Mle::Mle::ParentCandidate::Clear((ot::Mle::Mle *)((char *)this + 424));
}

{
  return __ZN2ot3Mle3Mle20ClearParentCandidateEv(this);
}

uint64_t ot::Mle::MleRouter::SetPreferredRouterId(ot::Mle::MleRouter *this, char a2)
{
  unsigned int v4 = 0;
  if (ot::Mle::Mle::IsDetached(this) || ot::Mle::Mle::IsDisabled(this)) {
    *((_BYTE *)this + 46242) = a2;
  }
  else {
    return 13;
  }
  return v4;
}

void ot::Mle::MleRouter::ResolveRoutingLoops( ot::Mle::MleRouter *this, unsigned __int16 a2, unsigned __int16 a3)
{
  char v19 = a2;
  if (a2 == (unsigned __int16)ot::Mle::MleRouter::GetNextHop(this, a3))
  {
    ot::RouterTable::FindRouterByRloc16((ot::Mle::MleRouter *)((char *)this + 38136), a3);
    unsigned __int16 v17 = v9;
    if (!v9) {
      ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mle::kLogModuleName,  "Routing Loop exists srcRloc16=0x%x dstRloc16=0x%x",  v3,  v4,  v5,  v6,  v7,  v8,  v19);
    }
    if (v17)
    {
      ot::Router::GetNextHop(v17);
      ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mle::kLogModuleName,  "Routing Loop exists srcRloc16=0x%x dstRloc16=0x%x nextHop=%d invalidate next hop and reset advertisement interval",  v10,  v11,  v12,  v13,  v14,  v15,  v19);
      ot::Router::SetNextHopToInvalid(v17);
      ot::Mle::MleRouter::ResetAdvertiseInterval(this);
    }
  }

uint64_t ot::Mle::MleRouter::CheckReachability( ot::Mle::MleRouter *this, unsigned __int16 a2, const ot::Ip6::Header *a3)
{
  unsigned int v34 = 0;
  if (ot::Mle::Mle::IsChild(this)) {
    return ot::Mle::Mle::CheckReachability(this, a2, a3);
  }
  uint64_t v3 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  if (a2 != (unsigned __int16)ot::Mac::Mac::GetShortAddress(v3))
  {
    if (*((unsigned __int8 *)this + 46241) == ot::Mle::RouterIdFromRloc16((ot::Mle *)a2))
    {
      ot::ChildTable::FindChild((ot::Mle::MleRouter *)((char *)this + 1264), a2, 1);
      if (v14) {
        return v34;
      }
      Source = (ot::Ip6::Address *)ot::Ip6::Header::GetSource(a3);
      ot::Ip6::Address::ToString(Source, (ot::StringWriter *)v40);
      ot::String<(unsigned short)40>::AsCString((uint64_t)v40);
      Destination = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination(a3);
      ot::Ip6::Address::ToString(Destination, (ot::StringWriter *)v39);
      ot::String<(unsigned short)40>::AsCString((uint64_t)v39);
      ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mle::kLogModuleName,  "Check reachability mesh dst: %04hx, IPv6 src: [%s], ipv6 dst: [%s], not a child of this node.",  v17,  v18,  v19,  v20,  v21,  v22,  a2);
    }

    else
    {
      int v23 = (ot::Ip6::Address *)ot::Ip6::Header::GetSource(a3);
      ot::Ip6::Address::ToString(v23, (ot::StringWriter *)v38);
      ot::String<(unsigned short)40>::AsCString((uint64_t)v38);
      uint64_t v24 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination(a3);
      ot::Ip6::Address::ToString(v24, (ot::StringWriter *)v37);
      ot::String<(unsigned short)40>::AsCString((uint64_t)v37);
      ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mle::kLogModuleName,  "Check reachability mesh dst: %04hx, IPv6 src: [%s], ipv6 dst: [%s], not able to generate next hop.",  v25,  v26,  v27,  v28,  v29,  v30,  a2);
    }

    return 4;
  }

  uint64_t v32 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
  uint64_t v4 = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination(a3);
  if (!ot::Ip6::Netif::HasUnicastAddress(v32, v4))
  {
    uint64_t v5 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination(a3);
    if (!ot::NeighborTable::FindNeighbor((ot::Mle::MleRouter *)((char *)this + 304), v5, 1))
    {
      uint64_t v6 = (ot::Ip6::Address *)ot::Ip6::Header::GetSource(a3);
      ot::Ip6::Address::ToString(v6, (ot::StringWriter *)v42);
      ot::String<(unsigned short)40>::AsCString((uint64_t)v42);
      uint64_t v7 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination(a3);
      ot::Ip6::Address::ToString(v7, (ot::StringWriter *)v41);
      ot::String<(unsigned short)40>::AsCString((uint64_t)v41);
      ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mle::kLogModuleName,  "Check reachability mesh dst: %04hx, IPv6 src: [%s], ipv6 dst: [%s], neither this node nor neighbour",  v8,  v9,  v10,  v11,  v12,  v13,  a2);
      return 4;
    }
  }

  return v34;
}

uint64_t ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)1,ot::Mac::ExtAddress>>(ot::Tlv *a1, void *a2)
{
  return ot::Tlv::AppendTlv(a1, (ot::Message *)1, a2, (const void *)8);
}

{
  return __ZN2ot3Tlv6AppendINS_13SimpleTlvInfoILh1ENS_3Mac10ExtAddressEEEEE7otErrorRNS_7MessageERKNT_9ValueTypeE(a1, a2);
}

uint64_t ot::Mle::MleRouter::HandleAddressSolicitResponse( _BYTE *a1, ot::Tlv *a2, ot::Ip6::MessageInfo *a3, int a4)
{
  int v49 = a1;
  int v48 = a2;
  int v47 = a3;
  int v46 = a4;
  a1[46192] &= ~2u;
  if (!v46)
  {
    if (v48)
    {
      if (v47)
      {
        if (ot::Coap::Message::GetCode(v48) == 68)
        {
          ot::Ip6::MessageInfo::GetPeerAddr(v47);
          ot::Mle::Mle::Log(1u, 0x12u, v4);
          if (!ot::Tlv::Find<ot::ThreadStatusTlv>(v48, &v45, v5, v6))
          {
            if (v45)
            {
              a1[46192] = a1[46192] & 0xFB | 4;
              unsigned __int8 v34 = a1[46242];
              ot::Mle::MleRouter::IsRouterIdValid((ot::Mle::MleRouter *)v34);
              ot::Mle::MleRouter::HasChildren((ot::Mle::MleRouter *)a1);
              ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)&ot::Mle::kLogModuleName,  "Address Solicit Rejected mPreviousRouterId=%d IsPrevRouterIdValid=%d HasChildren=%d",  v9,  v10,  v11,  v12,  v13,  v14,  v34);
              if (ot::Mle::MleRouter::IsRouterIdValid((ot::Mle::MleRouter *)a1[46242]))
              {
                if (ot::Mle::MleRouter::HasChildren((ot::Mle::MleRouter *)a1)) {
                  ot::Mle::MleRouter::RemoveChildren((ot::Mle::MleRouter *)a1);
                }
                ot::Mle::MleRouter::SetRouterId((uint64_t)a1, 63);
              }
            }

            else if (!ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)2,unsigned short>>(v48, &v44, v7, v8))
            {
              unsigned __int8 v43 = ot::Mle::RouterIdFromRloc16((ot::Mle *)v44);
              if (!ot::Tlv::FindTlv<ot::ThreadRouterMaskTlv>(v48, v50, v15, v16, v17)
                && ot::ThreadRouterMaskTlv::IsValid((ot::ThreadRouterMaskTlv *)v50))
              {
                ot::Mle::MleRouter::SetRouterId((uint64_t)a1, v43);
                unsigned __int16 v18 = ot::Mle::Rloc16FromRouterId((ot::Mle *)a1[46241]);
                ot::Mle::MleRouter::SetStateRouter((ot::Mle::MleRouter *)a1, v18);
                ot::RouterTable::ClearNeighbors((ot::RouterTable *)(a1 + 38136));
                char IdSequence = ot::ThreadRouterMaskTlv::GetIdSequence((ot::ThreadRouterMaskTlv *)v50);
                AssignedRouterIdMask = (const ot::Mle::RouterIdSet *)ot::ThreadRouterMaskTlv::GetAssignedRouterIdMask((ot::ThreadRouterMaskTlv *)v50);
                ot::RouterTable::UpdateRouterIdSet((ot::RouterTable *)(a1 + 38136), IdSequence, AssignedRouterIdMask);
                ot::RouterTable::FindRouterById((ot::RouterTable *)(a1 + 38136), v43);
                char v42 = v20;
                if (v20)
                {
                  uint64_t v21 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1);
                  ExtAddress = (const ot::Mac::ExtAddress *)ot::Mac::Mac::GetExtAddress(v21);
                  ot::Neighbor::SetExtAddress((uint64_t)v42, ExtAddress);
                  ot::Router::SetNextHopToInvalid(v42);
                  unsigned __int8 RouterId = ot::Neighbor::GetRouterId((ot::Neighbor *)(a1 + 48));
                  ot::RouterTable::FindRouterById((ot::RouterTable *)(a1 + 38136), RouterId);
                  char v42 = v24;
                  if (v24)
                  {
                    ot::Router::SetFrom(v42, (const ot::Parent *)(a1 + 48));
                    ot::Neighbor::SetState(v42, 7);
                    ot::Router::SetNextHopToInvalid(v42);
                    if (ot::RouterTable::GetPathCostToLeader((ot::RouterTable *)(a1 + 38136)) >= 0x10u)
                    {
                      ot::RouterTable::GetLeader((ot::RouterTable *)(a1 + 38136));
                      uint64_t v41 = v25;
                      if (!v25) {
                        __assert_rtn("HandleAddressSolicitResponse", "mle_router.cpp", 4361, "leader != nullptr");
                      }
                      unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16((ot::Neighbor *)(a1 + 48));
                      unsigned __int8 v32 = ot::Mle::RouterIdFromRloc16((ot::Mle *)Rloc16);
                      char LeaderCost = ot::Parent::GetLeaderCost((ot::Parent *)(a1 + 48));
                      ot::Router::SetNextHopAndCost(v41, v32, LeaderCost);
                    }

                    if ((unsigned __int16)ot::Neighbor::GetVersion((ot::Neighbor *)(a1 + 48)) < 4u)
                    {
                      ot::Mle::MleRouter::SendLinkRequest((ot::Mle::MleRouter *)a1, (ot::Neighbor *)(a1 + 48));
                      IgnoreError();
                    }

                    ot::Mle::MleRouter::SendAdvertisement((ot::Mle::MleRouter *)a1);
                    uint64_t v28 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>((ot::InstanceLocator *)a1);
                    char v39 = ot::ChildTable::Iterate(v28, 2);
                    uint64_t v40 = (ot::ChildTable::IteratorBuilder *)&v39;
                    v38[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v39);
                    v38[1] = v29;
                    v37[0] = ot::ChildTable::IteratorBuilder::end(v40);
                    v37[1] = v30;
                    while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v38, v37))
                    {
                      uint64_t v36 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v38);
                      ot::Mle::MleRouter::SendChildIdResponse((ot::Mle::MleRouter *)a1, v36);
                      IgnoreError();
                      ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v38);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return ot::Mle::Mle::InformPreviousChannel((uint64_t)a1);
}

uint64_t ot::Tlv::FindTlv<ot::ThreadRouterMaskTlv>( ot::Tlv *a1, void *a2, uint64_t a3, uint64_t a4, ot::Tlv *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)7, 0xBu, a2, a5);
}

{
  return __ZN2ot3Tlv7FindTlvINS_19ThreadRouterMaskTlvEEE7otErrorRKNS_7MessageERT_(a1, a2, a3, a4, a5);
}

BOOL ot::ThreadRouterMaskTlv::IsValid(ot::ThreadRouterMaskTlv *this)
{
  return ot::Tlv::GetLength(this) >= 9uLL;
}

{
  return __ZNK2ot19ThreadRouterMaskTlv7IsValidEv(this);
}

uint64_t ot::ThreadRouterMaskTlv::GetIdSequence(ot::ThreadRouterMaskTlv *this)
{
  return *((unsigned __int8 *)this + 2);
}

{
  return __ZNK2ot19ThreadRouterMaskTlv13GetIdSequenceEv(this);
}

uint64_t ot::ThreadRouterMaskTlv::GetAssignedRouterIdMask(ot::ThreadRouterMaskTlv *this)
{
  return (uint64_t)this + 3;
}

{
  return __ZN2ot19ThreadRouterMaskTlv23GetAssignedRouterIdMaskEv(this);
}

void ot::RouterTable::GetLeader(ot::RouterTable *this)
{
}

{
  __ZN2ot11RouterTable9GetLeaderEv(this);
}

uint64_t ot::Parent::GetLeaderCost(ot::Parent *this)
{
  return *((unsigned __int8 *)this + 246);
}

{
  return __ZNK2ot6Parent13GetLeaderCostEv(this);
}

uint64_t ot::Mle::MleRouter::SetChildRouterLinks(ot::Mle::MleRouter *this, char a2)
{
  unsigned int v4 = 0;
  if (ot::Mle::Mle::IsDisabled(this)) {
    *((_BYTE *)this + 46256) = a2;
  }
  else {
    return 13;
  }
  return v4;
}

uint64_t ot::Mle::MleRouter::IsExpectedToBecomeRouterSoon(ot::Mle::MleRouter *this)
{
  char v4 = 0;
  if ((ot::Mle::MleRouter::IsRouterEligible(this) & 1) != 0)
  {
    char v4 = 0;
    if (ot::Mle::Mle::IsChild(this))
    {
      char v4 = 0;
      if ((*((_BYTE *)this + 46192) & 4) == 0)
      {
        if (!ot::Mle::MleRouter::GetRouterSelectionJitterTimeout(this) {
          || (LOBYTE(ot::Mle::Mle::Log(1u, 0x1Du, v2) = 1, ot::Mle::MleRouter::GetRouterSelectionJitterTimeout(this) > 0xAu))
        }
        {
          int v2 = (*((unsigned __int8 *)this + 46192) >> 1) & 1;
        }

        char v4 = v2;
      }
    }
  }

  return v4 & 1;
}

void ot::Mle::MleRouter::HandleTmf<(ot::Uri)4>(_BYTE *a1, ot::Tlv *a2, ot::Ip6::MessageInfo *a3)
{
  uint64_t v37 = a1;
  uint64_t v36 = a2;
  uint64_t v35 = a3;
  int v34 = 0;
  unsigned __int8 v33 = 1;
  *(void *)&v32[1] = 0LL;
  if (a1[41] != 4)
  {
    int v34 = 13;
    goto LABEL_33;
  }

  if (!ot::Coap::Message::IsConfirmablePostRequest(v36))
  {
    int v34 = 6;
    goto LABEL_33;
  }

  ot::Ip6::MessageInfo::GetPeerAddr(v35);
  ot::Mle::Mle::Log(1u, 0x13u, v3);
  int v34 = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)1,ot::Mac::ExtAddress>>(v36, (uint64_t)v39, v4, v5, v6);
  if (v34) {
    goto LABEL_33;
  }
  int v34 = ot::Tlv::Find<ot::ThreadStatusTlv>(v36, &v31, v7, v8);
  if (v34) {
    goto LABEL_33;
  }
  int v29 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)2,unsigned short>>(v36, v32, v9, v10);
  if (v29)
  {
    if (v29 != 23)
    {
      int v34 = 6;
      goto LABEL_33;
    }

    v32[0] = -2;
  }

  ot::RouterTable::FindRouter((ot::RouterTable *)(a1 + 38136), (const ot::Mac::ExtAddress *)v39);
  *(void *)&v32[1] = v11;
  if (v11)
  {
    unsigned __int8 v33 = 0;
    goto LABEL_33;
  }

  if (v31 == 2)
  {
  }

  else if (v31 != 4 && v31 != 3)
  {
    if (v31 != 5)
    {
      unsigned __int8 v33 = 6;
      goto LABEL_33;
    }

    if (a1[46189] <= (int)ot::RouterTable::GetActiveRouterCount((ot::RouterTable *)(a1 + 38136)))
    {
      uint64_t v13 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>((ot::InstanceLocator *)a1);
      if (ot::NetworkData::NetworkData::CountBorderRouters(v13, 1) >= 2u)
      {
        ot::Mac::ExtAddress::ToString((ot::Mac::ExtAddress *)v39, (ot::StringWriter *)v38);
        char v14 = ot::String<(unsigned short)17>::AsCString((uint64_t)v38);
        ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)&ot::Mle::kLogModuleName,  "Rejecting BR %s router role req - have %u BR routers",  v15,  v16,  v17,  v18,  v19,  v20,  v14);
        goto LABEL_33;
      }
    }
  }

  if (v32[0] != 65534)
  {
    unsigned __int8 v21 = ot::Mle::RouterIdFromRloc16((ot::Mle *)v32[0]);
    *(void *)&v32[1] = ot::RouterTable::Allocate((ot::RouterTable *)(a1 + 38136), v21);
    if (*(void *)&v32[1])
    {
      char v22 = ot::Mle::RouterIdFromRloc16((ot::Mle *)v32[0]);
      ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)&ot::Mle::kLogModuleName,  "Router id %u requested and provided!",  v23,  v24,  v25,  v26,  v27,  v28,  v22);
    }
  }

  if (*(void *)&v32[1] || (*(void *)&v32[1] = ot::RouterTable::Allocate((ot::RouterTable *)(a1 + 38136))) != 0LL)
  {
    ot::Neighbor::SetExtAddress(*(uint64_t *)&v32[1], (const ot::Mac::ExtAddress *)v39);
    unsigned __int8 v33 = 0;
  }

uint64_t ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)1,ot::Mac::ExtAddress>>( ot::Tlv *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)1, a2, (void *)8, a5);
}

{
  return __ZN2ot3Tlv4FindINS_13SimpleTlvInfoILh1ENS_3Mac10ExtAddressEEEEE7otErrorRKNS_7MessageERNT_9ValueTypeE( a1,  a2,  a3,  a4,  a5);
}

void ot::Mle::MleRouter::SendAddressSolicitResponse( uint64_t a1, const ot::Coap::Message *a2, unsigned __int8 a3, ot::Neighbor *a4, ot::Ip6::MessageInfo *a5)
{
  uint64_t v5 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>((ot::InstanceLocator *)a1);
  uint64_t v18 = ot::Coap::CoapBase::NewPriorityResponseMessage(v5, a2);
  if (v18)
  {
    if (!ot::Tlv::Append<ot::ThreadStatusTlv>((uint64_t)v18, a3))
    {
      if (!a4
        || (unsigned __int16 v6 = ot::Neighbor::GetRloc16(a4),
            !ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)2,unsigned short>>((uint64_t)v18, v6))
        && (ot::ThreadRouterMaskTlv::Init((ot::ThreadRouterMaskTlv *)v23),
            char RouterIdSequence = ot::RouterTable::GetRouterIdSequence((ot::RouterTable *)(a1 + 38136)),
            ot::ThreadRouterMaskTlv::SetIdSequence((uint64_t)v23, RouterIdSequence),
            AssignedRouterIdMask = (ot::Mle::RouterIdSet *)ot::ThreadRouterMaskTlv::GetAssignedRouterIdMask((ot::ThreadRouterMaskTlv *)v23),
            ot::RouterTable::GetRouterIdSet((ot::RouterTable *)(a1 + 38136), AssignedRouterIdMask),
            !ot::Tlv::AppendTo((ot::Tlv *)v23, v18)))
      {
        uint64_t v9 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>((ot::InstanceLocator *)a1);
        if (!ot::Coap::CoapBase::SendMessage(v9, v18, a5))
        {
          uint64_t v18 = 0LL;
          ot::Ip6::MessageInfo::GetPeerAddr(a5);
          ot::Mle::Mle::Log(0, 0x12u, v10);
          if (!a3)
          {
            if (a4)
            {
              ot::Ip6::MessageInfo::GetPeerAddr(a5);
              if (ot::Mle::Mle::IsRoutingLocator((ot::Mle::Mle *)a1, v11))
              {
                ot::Ip6::MessageInfo::GetPeerAddr(a5);
                Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v12);
                unsigned __int16 Locator = ot::Ip6::InterfaceIdentifier::GetLocator(Iid);
                if (Locator != (unsigned __int16)ot::Neighbor::GetRloc16(a4))
                {
                  unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16((ot::Mle::Mle *)a1);
                  if (!ot::Mle::RouterIdMatch((ot::Mle *)Locator, Rloc16))
                  {
                    uint64_t v15 = (ot::AddressResolver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>((ot::InstanceLocator *)a1);
                    ot::AddressResolver::RemoveEntriesForRloc16(v15, Locator);
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  if (v18) {
    ot::Message::Free(v18);
  }
}

void *ot::ThreadRouterMaskTlv::Init(ot::ThreadRouterMaskTlv *this)
{
  return ot::Mle::RouterIdSet::Clear((ot::ThreadRouterMaskTlv *)((char *)this + 3));
}

{
  return __ZN2ot19ThreadRouterMaskTlv4InitEv(this);
}

uint64_t ot::ThreadRouterMaskTlv::SetIdSequence(uint64_t this, char a2)
{
  *(_BYTE *)(this + 2) = a2;
  return this;
}

{
  return __ZN2ot19ThreadRouterMaskTlv13SetIdSequenceEh(this, a2);
}

void ot::Mle::MleRouter::HandleTmf<(ot::Uri)3>(_BYTE *a1, ot::Coap::Message *a2, uint64_t a3)
{
  uint64_t v17 = a1;
  uint64_t v16 = a2;
  *(void *)&v15[1] = a3;
  if (a1[41] == 4 && ot::Coap::Message::IsConfirmablePostRequest(v16))
  {
    ot::Ip6::MessageInfo::GetPeerAddr(*(ot::Ip6::MessageInfo **)&v15[1]);
    ot::Mle::Mle::Log(1u, 0x10u, v3);
    if (!ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)2,unsigned short>>(v16, v15, v4, v5)
      && !ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)1,ot::Mac::ExtAddress>>( v16,  (uint64_t)v18,  v6,  v7,  v8))
    {
      unsigned __int8 v14 = ot::Mle::RouterIdFromRloc16((ot::Mle *)v15[0]);
      ot::RouterTable::FindRouterById((ot::RouterTable *)(a1 + 38136), v14);
      if (v9)
      {
        ExtAddress = (const void *)ot::Neighbor::GetExtAddress(v9);
        if (ot::Equatable<ot::Mac::ExtAddress>::operator==(ExtAddress, v18))
        {
          ot::RouterTable::Release((ot::RouterTable *)(a1 + 38136), v14);
          IgnoreError();
          uint64_t v11 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>((ot::InstanceLocator *)a1);
          if (!ot::Coap::CoapBase::SendEmptyAck(v11, v16, *(const ot::Ip6::MessageInfo **)&v15[1]))
          {
            ot::Ip6::MessageInfo::GetPeerAddr(*(ot::Ip6::MessageInfo **)&v15[1]);
            ot::Mle::Mle::Log(0, 0x11u, v12);
          }
        }
      }
    }
  }

uint64_t ot::Mle::MleRouter::FillConnectivityTlv(ot::Mle::MleRouter *this, ot::Mle::ConnectivityTlv *a2)
{
  if (*((char *)this + 46257) == -2)
  {
    unsigned __int16 NumChildren = ot::ChildTable::GetNumChildren((__int16 *)this + 632, 0);
    unsigned __int16 MaxChildrenAllowed = ot::ChildTable::GetMaxChildrenAllowed((ot::Mle::MleRouter *)((char *)this + 1264));
    if (MaxChildrenAllowed - NumChildren >= MaxChildrenAllowed / 3) {
      ot::Mle::ConnectivityTlv::SetParentPriority(a2, 0);
    }
    else {
      ot::Mle::ConnectivityTlv::SetParentPriority(a2, 255);
    }
  }

  else
  {
    ot::Mle::ConnectivityTlv::SetParentPriority(a2, *((_BYTE *)this + 46257));
  }

  ot::Mle::ConnectivityTlv::SetLinkQuality1((uint64_t)a2, 0);
  ot::Mle::ConnectivityTlv::SetLinkQuality2((uint64_t)a2, 0);
  ot::Mle::ConnectivityTlv::SetLinkQuality3((uint64_t)a2, 0);
  if (ot::Mle::Mle::IsChild(this))
  {
    unsigned __int8 LinkQualityIn = ot::Neighbor::GetLinkQualityIn((ot::Mle::MleRouter *)((char *)this + 48));
    ot::Mle::ConnectivityTlv::IncrementLinkQuality((uint64_t)a2, LinkQualityIn);
  }

  unsigned __int8 v14 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(this);
  ot::RouterTable::begin(v14);
  uint64_t v13 = v3;
  uint64_t v12 = ot::RouterTable::end(v14);
  while (v13 != (ot::Neighbor *)v12)
  {
    int Rloc16 = (unsigned __int16)ot::Neighbor::GetRloc16(v13);
    if (Rloc16 != (unsigned __int16)ot::Mle::Mle::GetRloc16(this) && ot::Neighbor::IsStateValid(v13))
    {
      unsigned __int8 TwoWayLinkQuality = ot::Router::GetTwoWayLinkQuality(v13);
      ot::Mle::ConnectivityTlv::IncrementLinkQuality((uint64_t)a2, TwoWayLinkQuality);
    }

    uint64_t v13 = (ot::Neighbor *)((char *)v13 + 248);
  }

  char ActiveRouterCount = ot::RouterTable::GetActiveRouterCount((ot::Mle::MleRouter *)((char *)this + 38136));
  ot::Mle::ConnectivityTlv::SetActiveRouters((uint64_t)a2, ActiveRouterCount);
  unsigned __int8 PathCostToLeader = ot::RouterTable::GetPathCostToLeader((ot::Mle::MleRouter *)((char *)this + 38136));
  char v7 = ot::Min<unsigned char>(PathCostToLeader, 0x10u);
  ot::Mle::ConnectivityTlv::SetLeaderCost((uint64_t)a2, v7);
  char RouterIdSequence = ot::RouterTable::GetRouterIdSequence((ot::Mle::MleRouter *)((char *)this + 38136));
  ot::Mle::ConnectivityTlv::SetIdSequence((uint64_t)a2, RouterIdSequence);
  ot::Mle::ConnectivityTlv::SetSedBufferSize(a2, 0x500u);
  return ot::Mle::ConnectivityTlv::SetSedDatagramCount((uint64_t)a2, 1);
}

uint64_t ot::Mle::ConnectivityTlv::SetLinkQuality1(uint64_t this, char a2)
{
  *(_BYTE *)(this + 5) = a2;
  return this;
}

{
  return __ZN2ot3Mle15ConnectivityTlv15SetLinkQuality1Eh(this, a2);
}

uint64_t ot::Mle::ConnectivityTlv::SetLinkQuality2(uint64_t this, char a2)
{
  *(_BYTE *)(this + 4) = a2;
  return this;
}

{
  return __ZN2ot3Mle15ConnectivityTlv15SetLinkQuality2Eh(this, a2);
}

uint64_t ot::Mle::ConnectivityTlv::SetLinkQuality3(uint64_t this, char a2)
{
  *(_BYTE *)(this + 3) = a2;
  return this;
}

{
  return __ZN2ot3Mle15ConnectivityTlv15SetLinkQuality3Eh(this, a2);
}

uint64_t ot::Neighbor::GetLinkQualityIn(ot::Neighbor *this)
{
  LinkInfo = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(this);
  return ot::LinkQualityInfo::GetLinkQuality(LinkInfo);
}

{
  return __ZNK2ot8Neighbor16GetLinkQualityInEv(this);
}

uint64_t ot::Mle::ConnectivityTlv::SetActiveRouters(uint64_t this, char a2)
{
  *(_BYTE *)(this + 8) = a2;
  return this;
}

{
  return __ZN2ot3Mle15ConnectivityTlv16SetActiveRoutersEh(this, a2);
}

uint64_t ot::Mle::ConnectivityTlv::SetLeaderCost(uint64_t this, char a2)
{
  *(_BYTE *)(this + 6) = a2;
  return this;
}

{
  return __ZN2ot3Mle15ConnectivityTlv13SetLeaderCostEh(this, a2);
}

uint64_t ot::Mle::ConnectivityTlv::SetIdSequence(uint64_t this, char a2)
{
  *(_BYTE *)(this + ot::ThreadTlv::SetType(this, 7) = a2;
  return this;
}

{
  return __ZN2ot3Mle15ConnectivityTlv13SetIdSequenceEh(this, a2);
}

uint64_t ot::Mle::ConnectivityTlv::SetSedBufferSize(ot::Mle::ConnectivityTlv *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *(_WORD *)((char *)this + ot::Tlv::SetLength((uint64_t)this, 9) = result;
  return result;
}

{
  return __ZN2ot3Mle15ConnectivityTlv16SetSedBufferSizeEt(this, a2);
}

uint64_t ot::Mle::ConnectivityTlv::SetSedDatagramCount(uint64_t this, char a2)
{
  *(_BYTE *)(this + ot::Mle::Tlv::SetType(this, 11) = a2;
  return this;
}

{
  return __ZN2ot3Mle15ConnectivityTlv19SetSedDatagramCountEh(this, a2);
}

uint64_t ot::Mle::MleRouter::NeighborHasComparableConnectivity( ot::Mle::MleRouter *this, const ot::Mle::RouteTlv *a2, unsigned __int8 a3)
{
  char v11 = 1;
  unsigned __int8 v10 = 0;
  unsigned __int8 v9 = 0;
  while (v10 <= 0x3Eu)
  {
    if (v10 != *((unsigned __int8 *)this + 46241) && v10 != a3)
    {
      RouterById = (ot::Neighbor *)ot::RouterTable::FindRouterById((ot::Mle::MleRouter *)((char *)this + 38136), v10);
      if (RouterById)
      {
        if (ot::Neighbor::IsStateValid(RouterById))
        {
          unsigned __int8 TwoWayLinkQuality = ot::Router::GetTwoWayLinkQuality(RouterById);
          if (TwoWayLinkQuality >= 2u)
          {
            if (!ot::Mle::RouteTlv::IsRouterIdSet(a2, v10))
            {
              char v11 = 0;
              return v11 & 1;
            }

            unsigned __int8 LinkQualityIn = ot::Mle::RouteTlv::GetLinkQualityIn(a2, v9);
            unsigned __int8 LinkQualityOut = ot::Mle::RouteTlv::GetLinkQualityOut(a2, v9);
            if (ot::Min<ot::LinkQuality>(LinkQualityIn, LinkQualityOut) < (int)TwoWayLinkQuality)
            {
              char v11 = 0;
              return v11 & 1;
            }
          }
        }
      }
    }

    v9 += ot::Mle::RouteTlv::IsRouterIdSet(a2, v10++);
  }

  return v11 & 1;
}

uint64_t ot::Min<ot::LinkQuality>(unsigned __int8 a1, unsigned __int8 a2)
{
  else {
    return a1;
  }
}

{
  return __ZN2ot3MinINS_11LinkQualityEEET_S2_S2_(a1, a2);
}

uint64_t ot::Mle::RouteTlv::GetLinkQualityOut(ot::Mle::RouteTlv *this, unsigned __int8 a2)
{
  return (*((_BYTE *)this + a2 + 11) & 0xC0) >> 6;
}

{
  return __ZNK2ot3Mle8RouteTlv17GetLinkQualityOutEh(this, a2);
}

uint64_t ot::Mle::MleRouter::SetAssignParentPriority(ot::Mle::MleRouter *this, char a2)
{
  unsigned int v3 = 0;
  if (a2 <= 1 && a2 >= -2) {
    *((_BYTE *)this + 4625ot::ThreadTlv::SetType(this, 7) = a2;
  }
  else {
    return 7;
  }
  return v3;
}

uint64_t ot::Mle::MleRouter::GetMaxChildTimeout(ot::Mle::MleRouter *this, unsigned int *a2)
{
  uint64_t v16 = this;
  uint64_t v15 = a2;
  unsigned int v14 = 23;
  *a2 = 0;
  if (ot::Mle::Mle::IsRouterOrLeader(this))
  {
    int v2 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
    char v12 = ot::ChildTable::Iterate(v2, 0);
    uint64_t v13 = (ot::ChildTable::IteratorBuilder *)&v12;
    v11[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v12);
    v11[1] = v3;
    v10[0] = ot::ChildTable::IteratorBuilder::end(v13);
    v10[1] = v4;
    while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v11, v10))
    {
      unsigned __int8 v9 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v11);
      if (!ot::Neighbor::IsFullThreadDevice(v9))
      {
        unsigned int Timeout = ot::Child::GetTimeout(v9);
        if (Timeout > *v15)
        {
          unsigned int v6 = ot::Child::GetTimeout(v9);
          unsigned int *v15 = v6;
        }

        unsigned int v14 = 0;
      }

      ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v11);
    }
  }

  else
  {
    return 13;
  }

  return v14;
}

uint64_t ot::Array<ot::Router,(unsigned short)32,unsigned char>::GetLength(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 7936);
}

{
  return __ZNK2ot5ArrayINS_6RouterELt32EhE9GetLengthEv(a1);
}

BOOL ot::Array<ot::Router,(unsigned short)32,unsigned char>::IsInArrayBuffer( unint64_t a1, unint64_t a2)
{
  BOOL v3 = 0;
  if (a1 <= a2) {
    return a2 < ot::GetArrayEnd<ot::Router,(unsigned short)32>(a1);
  }
  return v3;
}

{
  return __ZNK2ot5ArrayINS_6RouterELt32EhE15IsInArrayBufferEPKS1_(a1, a2);
}

uint64_t ot::GetArrayEnd<ot::Router,(unsigned short)32>(uint64_t a1)
{
  return a1 + 7936;
}

{
  return __ZN2ot11GetArrayEndINS_6RouterELt32EEEPKT_RAT0__S3_(a1);
}

BOOL ot::Neighbor::IsThreadVersion1p2OrHigher(ot::Neighbor *this)
{
  BOOL v2 = 0;
  if ((*((_BYTE *)this + 98) & 0xF) != 0) {
    return *((unsigned __int16 *)this + 52) >= 3u;
  }
  return v2;
}

{
  return __ZNK2ot8Neighbor26IsThreadVersion1p2OrHigherEv(this);
}

uint64_t ot::BitVector<(unsigned short)15>::HasAny(_BYTE *a1)
{
  char v3 = 0;
  for (unsigned __int8 i = a1; i != a1 + 2; ++i)
  {
    if (*i)
    {
      char v3 = 1;
      return v3 & 1;
    }
  }

  return v3 & 1;
}

  ;
}

{
  return __ZNK2ot9BitVectorILt15EE6HasAnyEv(a1);
}

uint64_t otHistoryTrackerInitIterator(uint64_t a1)
{
  return ot::Utils::HistoryTracker::Iterator::Init(v1);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otHistoryTrackerIterator>( uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

uint64_t ot::Utils::HistoryTracker::Iterator::Init(ot::Utils::HistoryTracker::Iterator *this)
{
  return ot::Utils::HistoryTracker::Iterator::SetInitTime(this);
}

{
  return __ZN2ot5Utils14HistoryTracker8Iterator4InitEv(this);
}

uint64_t otHistoryTrackerIterateNetInfoHistory(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  if (!a3) {
    __assert_rtn("otHistoryTrackerIterateNetInfoHistory", "history_tracker_api.cpp", 52, "(aEntryAge) != nullptr");
  }
  ot::AsCoreType<otInstance>(a1);
  unsigned int v6 = (ot::Utils::HistoryTracker *)ot::Instance::Get<ot::Utils::HistoryTracker>(v3);
  ot::AsCoreType<otHistoryTrackerIterator>(a2);
  return ot::Utils::HistoryTracker::IterateNetInfoHistory(v6, v4, a3);
}

uint64_t ot::Utils::HistoryTracker::IterateNetInfoHistory( ot::Utils::HistoryTracker *this, ot::Utils::HistoryTracker::Iterator *a2, unsigned int *a3)
{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::Iterate( (uint64_t)this + 4,  a2,  a3);
}

{
  return __ZNK2ot5Utils14HistoryTracker21IterateNetInfoHistoryERNS1_8IteratorERj(this, a2, a3);
}

uint64_t otHistoryTrackerIterateUnicastAddressHistory(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  if (!a3) {
    __assert_rtn( "otHistoryTrackerIterateUnicastAddressHistory",  "history_tracker_api.cpp",  62,  "(aEntryAge) != nullptr");
  }
  ot::AsCoreType<otInstance>(a1);
  unsigned int v6 = (ot::Utils::HistoryTracker *)ot::Instance::Get<ot::Utils::HistoryTracker>(v3);
  ot::AsCoreType<otHistoryTrackerIterator>(a2);
  return ot::Utils::HistoryTracker::IterateUnicastAddressHistory(v6, v4, a3);
}

uint64_t ot::Utils::HistoryTracker::IterateUnicastAddressHistory( ot::Utils::HistoryTracker *this, ot::Utils::HistoryTracker::Iterator *a2, unsigned int *a3)
{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerUnicastAddressInfo,(unsigned short)20>::Iterate( (uint64_t)this + 520,  a2,  a3);
}

{
  return __ZNK2ot5Utils14HistoryTracker28IterateUnicastAddressHistoryERNS1_8IteratorERj(this, a2, a3);
}

uint64_t otHistoryTrackerIterateMulticastAddressHistory(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  if (!a3) {
    __assert_rtn( "otHistoryTrackerIterateMulticastAddressHistory",  "history_tracker_api.cpp",  73,  "(aEntryAge) != nullptr");
  }
  ot::AsCoreType<otInstance>(a1);
  unsigned int v6 = (ot::Utils::HistoryTracker *)ot::Instance::Get<ot::Utils::HistoryTracker>(v3);
  ot::AsCoreType<otHistoryTrackerIterator>(a2);
  return ot::Utils::HistoryTracker::IterateMulticastAddressHistory(v6, v4, a3);
}

uint64_t ot::Utils::HistoryTracker::IterateMulticastAddressHistory( ot::Utils::HistoryTracker *this, ot::Utils::HistoryTracker::Iterator *a2, unsigned int *a3)
{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerMulticastAddressInfo,(unsigned short)20>::Iterate( (uint64_t)this + 1164,  a2,  a3);
}

{
  return __ZNK2ot5Utils14HistoryTracker30IterateMulticastAddressHistoryERNS1_8IteratorERj(this, a2, a3);
}

uint64_t otHistoryTrackerIterateRxHistory(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  if (!a3) {
    __assert_rtn("otHistoryTrackerIterateRxHistory", "history_tracker_api.cpp", 83, "(aEntryAge) != nullptr");
  }
  ot::AsCoreType<otInstance>(a1);
  unsigned int v6 = (ot::Utils::HistoryTracker *)ot::Instance::Get<ot::Utils::HistoryTracker>(v3);
  ot::AsCoreType<otHistoryTrackerIterator>(a2);
  return ot::Utils::HistoryTracker::IterateRxHistory(v6, v4, a3);
}

uint64_t ot::Utils::HistoryTracker::IterateRxHistory( ot::Utils::HistoryTracker *this, ot::Utils::HistoryTracker::Iterator *a2, unsigned int *a3)
{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerMessageInfo,(unsigned short)32>::Iterate( (uint64_t)this + 1728,  a2,  a3);
}

{
  return __ZNK2ot5Utils14HistoryTracker16IterateRxHistoryERNS1_8IteratorERj(this, a2, a3);
}

uint64_t otHistoryTrackerIterateTxHistory(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  if (!a3) {
    __assert_rtn("otHistoryTrackerIterateTxHistory", "history_tracker_api.cpp", 92, "(aEntryAge) != nullptr");
  }
  ot::AsCoreType<otInstance>(a1);
  unsigned int v6 = (ot::Utils::HistoryTracker *)ot::Instance::Get<ot::Utils::HistoryTracker>(v3);
  ot::AsCoreType<otHistoryTrackerIterator>(a2);
  return ot::Utils::HistoryTracker::IterateTxHistory(v6, v4, a3);
}

uint64_t ot::Utils::HistoryTracker::IterateTxHistory( ot::Utils::HistoryTracker *this, ot::Utils::HistoryTracker::Iterator *a2, unsigned int *a3)
{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerMessageInfo,(unsigned short)32>::Iterate( (uint64_t)this + 3332,  a2,  a3);
}

{
  return __ZNK2ot5Utils14HistoryTracker16IterateTxHistoryERNS1_8IteratorERj(this, a2, a3);
}

uint64_t otHistoryTrackerIterateNeighborHistory(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  if (!a3) {
    __assert_rtn("otHistoryTrackerIterateNeighborHistory", "history_tracker_api.cpp", 101, "(aEntryAge) != nullptr");
  }
  ot::AsCoreType<otInstance>(a1);
  unsigned int v6 = (ot::Utils::HistoryTracker *)ot::Instance::Get<ot::Utils::HistoryTracker>(v3);
  ot::AsCoreType<otHistoryTrackerIterator>(a2);
  return ot::Utils::HistoryTracker::IterateNeighborHistory(v6, v4, a3);
}

uint64_t ot::Utils::HistoryTracker::IterateNeighborHistory( ot::Utils::HistoryTracker *this, ot::Utils::HistoryTracker::Iterator *a2, unsigned int *a3)
{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNeighborInfo,(unsigned short)64>::Iterate( (uint64_t)this + 4936,  a2,  a3);
}

{
  return __ZNK2ot5Utils14HistoryTracker22IterateNeighborHistoryERNS1_8IteratorERj(this, a2, a3);
}

uint64_t otHistoryTrackerIterateRouterHistory(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  if (!a3) {
    __assert_rtn("otHistoryTrackerIterateRouterHistory", "history_tracker_api.cpp", 110, "(aEntryAge) != nullptr");
  }
  ot::AsCoreType<otInstance>(a1);
  unsigned int v6 = (ot::Utils::HistoryTracker *)ot::Instance::Get<ot::Utils::HistoryTracker>(v3);
  ot::AsCoreType<otHistoryTrackerIterator>(a2);
  return ot::Utils::HistoryTracker::IterateRouterHistory(v6, v4, a3);
}

uint64_t ot::Utils::HistoryTracker::IterateRouterHistory( ot::Utils::HistoryTracker *this, ot::Utils::HistoryTracker::Iterator *a2, unsigned int *a3)
{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerRouterInfo,(unsigned short)256>::Iterate( (uint64_t)this + 5964,  a2,  a3);
}

{
  return __ZNK2ot5Utils14HistoryTracker20IterateRouterHistoryERNS1_8IteratorERj(this, a2, a3);
}

uint64_t otHistoryTrackerIterateOnMeshPrefixHistory(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  if (!a3) {
    __assert_rtn("otHistoryTrackerIterateOnMeshPrefixHistory", "history_tracker_api.cpp", 119, "(aEntryAge) != nullptr");
  }
  ot::AsCoreType<otInstance>(a1);
  unsigned int v6 = (ot::Utils::HistoryTracker *)ot::Instance::Get<ot::Utils::HistoryTracker>(v3);
  ot::AsCoreType<otHistoryTrackerIterator>(a2);
  return ot::Utils::HistoryTracker::IterateOnMeshPrefixHistory(v6, v4, a3);
}

uint64_t ot::Utils::HistoryTracker::IterateOnMeshPrefixHistory( ot::Utils::HistoryTracker *this, ot::Utils::HistoryTracker::Iterator *a2, unsigned int *a3)
{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerOnMeshPrefixInfo,(unsigned short)32>::Iterate( (uint64_t)this + 7760,  a2,  a3);
}

{
  return __ZNK2ot5Utils14HistoryTracker26IterateOnMeshPrefixHistoryERNS1_8IteratorERj(this, a2, a3);
}

uint64_t otHistoryTrackerIterateExternalRouteHistory(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  if (!a3) {
    __assert_rtn( "otHistoryTrackerIterateExternalRouteHistory",  "history_tracker_api.cpp",  130,  "(aEntryAge) != nullptr");
  }
  ot::AsCoreType<otInstance>(a1);
  unsigned int v6 = (ot::Utils::HistoryTracker *)ot::Instance::Get<ot::Utils::HistoryTracker>(v3);
  ot::AsCoreType<otHistoryTrackerIterator>(a2);
  return ot::Utils::HistoryTracker::IterateExternalRouteHistory(v6, v4, a3);
}

uint64_t ot::Utils::HistoryTracker::IterateExternalRouteHistory( ot::Utils::HistoryTracker *this, ot::Utils::HistoryTracker::Iterator *a2, unsigned int *a3)
{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerExternalRouteInfo,(unsigned short)32>::Iterate( (uint64_t)this + 8788,  a2,  a3);
}

{
  return __ZNK2ot5Utils14HistoryTracker27IterateExternalRouteHistoryERNS1_8IteratorERj(this, a2, a3);
}

ot::StringWriter *otHistoryTrackerEntryAgeToString(unsigned int a1, char *a2, unsigned __int16 a3)
{
  return ot::Utils::HistoryTracker::EntryAgeToString((ot::Utils::HistoryTracker *)a1, a2, (char *)a3);
}

uint64_t ot::Utils::HistoryTracker::Iterator::ResetEntryNumber(uint64_t this)
{
  *(_WORD *)(this + 4) = 0;
  return this;
}

{
  return __ZN2ot5Utils14HistoryTracker8Iterator16ResetEntryNumberEv(this);
}

uint64_t ot::Utils::HistoryTracker::Iterator::SetInitTime(ot::Utils::HistoryTracker::Iterator *this)
{
  uint64_t v4 = this;
  int Now = ot::TimerMilli::GetNow(this);
  uint64_t result = ot::Time::GetValue((ot::Time *)&Now);
  *(_DWORD *)this = result;
  return result;
}

{
  return __ZN2ot5Utils14HistoryTracker8Iterator11SetInitTimeEv(this);
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::Iterate( uint64_t a1, ot::Utils::HistoryTracker::Iterator *a2, unsigned int *a3)
{
  uint64_t v9 = a1;
  uint64_t v8 = a2;
  char v7 = a3;
  if (ot::Utils::HistoryTracker::List::Iterate( (ot::Utils::HistoryTracker::List *)a1,  0x20u,  (const ot::Utils::HistoryTracker::Timestamp *)(a1 + 4),  a2,  &v6,  a3)) {
    return 0LL;
  }
  else {
    return a1 + 132 + 12LL * v6;
  }
}

{
  return __ZNK2ot5Utils14HistoryTracker9EntryListI27otHistoryTrackerNetworkInfoLt32EE7IterateERNS1_8IteratorERj( a1,  a2,  a3);
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerUnicastAddressInfo,(unsigned short)20>::Iterate( uint64_t a1, ot::Utils::HistoryTracker::Iterator *a2, unsigned int *a3)
{
  uint64_t v9 = a1;
  uint64_t v8 = a2;
  char v7 = a3;
  if (ot::Utils::HistoryTracker::List::Iterate( (ot::Utils::HistoryTracker::List *)a1,  0x14u,  (const ot::Utils::HistoryTracker::Timestamp *)(a1 + 4),  a2,  &v6,  a3)) {
    return 0LL;
  }
  else {
    return a1 + 84 + 28LL * v6;
  }
}

{
  return __ZNK2ot5Utils14HistoryTracker9EntryListI34otHistoryTrackerUnicastAddressInfoLt20EE7IterateERNS1_8IteratorERj( a1,  a2,  a3);
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerMulticastAddressInfo,(unsigned short)20>::Iterate( uint64_t a1, ot::Utils::HistoryTracker::Iterator *a2, unsigned int *a3)
{
  uint64_t v9 = a1;
  uint64_t v8 = a2;
  char v7 = a3;
  if (ot::Utils::HistoryTracker::List::Iterate( (ot::Utils::HistoryTracker::List *)a1,  0x14u,  (const ot::Utils::HistoryTracker::Timestamp *)(a1 + 4),  a2,  &v6,  a3)) {
    return 0LL;
  }
  else {
    return a1 + 84 + 24LL * v6;
  }
}

{
  return __ZNK2ot5Utils14HistoryTracker9EntryListI36otHistoryTrackerMulticastAddressInfoLt20EE7IterateERNS1_8IteratorERj( a1,  a2,  a3);
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerMessageInfo,(unsigned short)32>::Iterate( uint64_t a1, ot::Utils::HistoryTracker::Iterator *a2, unsigned int *a3)
{
  uint64_t v9 = a1;
  uint64_t v8 = a2;
  char v7 = a3;
  if (ot::Utils::HistoryTracker::List::Iterate( (ot::Utils::HistoryTracker::List *)a1,  0x20u,  (const ot::Utils::HistoryTracker::Timestamp *)(a1 + 4),  a2,  &v6,  a3)) {
    return 0LL;
  }
  else {
    return a1 + 132 + 46LL * v6;
  }
}

{
  return __ZNK2ot5Utils14HistoryTracker9EntryListI27otHistoryTrackerMessageInfoLt32EE7IterateERNS1_8IteratorERj( a1,  a2,  a3);
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNeighborInfo,(unsigned short)64>::Iterate( uint64_t a1, ot::Utils::HistoryTracker::Iterator *a2, unsigned int *a3)
{
  uint64_t v9 = a1;
  uint64_t v8 = a2;
  char v7 = a3;
  if (ot::Utils::HistoryTracker::List::Iterate( (ot::Utils::HistoryTracker::List *)a1,  0x40u,  (const ot::Utils::HistoryTracker::Timestamp *)(a1 + 4),  a2,  &v6,  a3)) {
    return 0LL;
  }
  else {
    return a1 + 260 + 12LL * v6;
  }
}

{
  return __ZNK2ot5Utils14HistoryTracker9EntryListI28otHistoryTrackerNeighborInfoLt64EE7IterateERNS1_8IteratorERj( a1,  a2,  a3);
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerRouterInfo,(unsigned short)256>::Iterate( uint64_t a1, ot::Utils::HistoryTracker::Iterator *a2, unsigned int *a3)
{
  uint64_t v9 = a1;
  uint64_t v8 = a2;
  char v7 = a3;
  if (ot::Utils::HistoryTracker::List::Iterate( (ot::Utils::HistoryTracker::List *)a1,  0x100u,  (const ot::Utils::HistoryTracker::Timestamp *)(a1 + 4),  a2,  &v6,  a3)) {
    return 0LL;
  }
  else {
    return a1 + 1028 + 3LL * v6;
  }
}

{
  return __ZNK2ot5Utils14HistoryTracker9EntryListI26otHistoryTrackerRouterInfoLt256EE7IterateERNS1_8IteratorERj( a1,  a2,  a3);
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerOnMeshPrefixInfo,(unsigned short)32>::Iterate( uint64_t a1, ot::Utils::HistoryTracker::Iterator *a2, unsigned int *a3)
{
  uint64_t v9 = a1;
  uint64_t v8 = a2;
  char v7 = a3;
  if (ot::Utils::HistoryTracker::List::Iterate( (ot::Utils::HistoryTracker::List *)a1,  0x20u,  (const ot::Utils::HistoryTracker::Timestamp *)(a1 + 4),  a2,  &v6,  a3)) {
    return 0LL;
  }
  else {
    return a1 + 132 + 28LL * v6;
  }
}

{
  return __ZNK2ot5Utils14HistoryTracker9EntryListI32otHistoryTrackerOnMeshPrefixInfoLt32EE7IterateERNS1_8IteratorERj( a1,  a2,  a3);
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerExternalRouteInfo,(unsigned short)32>::Iterate( uint64_t a1, ot::Utils::HistoryTracker::Iterator *a2, unsigned int *a3)
{
  uint64_t v9 = a1;
  uint64_t v8 = a2;
  char v7 = a3;
  if (ot::Utils::HistoryTracker::List::Iterate( (ot::Utils::HistoryTracker::List *)a1,  0x20u,  (const ot::Utils::HistoryTracker::Timestamp *)(a1 + 4),  a2,  &v6,  a3)) {
    return 0LL;
  }
  else {
    return a1 + 132 + 28LL * v6;
  }
}

{
  return __ZNK2ot5Utils14HistoryTracker9EntryListI33otHistoryTrackerExternalRouteInfoLt32EE7IterateERNS1_8IteratorERj( a1,  a2,  a3);
}

BOOL ot::Mle::DeviceMode::Get(ot::Mle::DeviceMode *a1, _BYTE *a2)
{
  *a2 = *a2 & 0xFE | ot::Mle::DeviceMode::IsRxOnWhenIdle(a1);
  *a2 = *a2 & 0xFD | (2 * ot::Mle::DeviceMode::IsFullThreadDevice(a1));
  BOOL result = ot::Mle::DeviceMode::GetNetworkDataType(a1);
  *a2 = *a2 & 0xFB | (4 * !result);
  return result;
}

_BYTE *ot::Mle::DeviceMode::Set(_BYTE *result, _BYTE *a2)
{
  *BOOL result = 4;
  if ((*a2 & 1) != 0) {
    char v2 = 8;
  }
  else {
    char v2 = 0;
  }
  *result |= v2;
  if ((*a2 & 2) != 0) {
    char v3 = 2;
  }
  else {
    char v3 = 0;
  }
  *result |= v3;
  *result |= (*a2 & 4) != 0;
  return result;
}

ot::StringWriter *ot::Mle::DeviceMode::ToString@<X0>( ot::Mle::DeviceMode *this@<X0>, ot::StringWriter *a2@<X8>)
{
  BOOL IsRxOnWhenIdle = ot::Mle::DeviceMode::IsRxOnWhenIdle(this);
  uint64_t v8 = ot::ToYesNo((ot *)IsRxOnWhenIdle);
  BOOL IsFullThreadDevice = ot::Mle::DeviceMode::IsFullThreadDevice(this);
  uint64_t v9 = ot::ToYesNo((ot *)IsFullThreadDevice);
  BOOL NetworkDataType = ot::Mle::DeviceMode::GetNetworkDataType(this);
  uint64_t v5 = ot::ToYesNo((ot *)!NetworkDataType);
  return ot::StringWriter::Append(a2, "rx-on:%s ftd:%s full-net:%s", v8, v9, v5);
}

ot::Mle::DeviceProperties *ot::Mle::DeviceProperties::DeviceProperties(ot::Mle::DeviceProperties *this)
{
  BOOL result = this;
  *(_DWORD *)this = 1;
  *((_BYTE *)this + 5) = 0;
  return result;
}

{
  ot::Mle::DeviceProperties::DeviceProperties(this);
  return this;
}

void *ot::Clearable<ot::Mle::DeviceProperties>::Clear(void *result)
{
  *BOOL result = 0LL;
  return result;
}

{
  return __ZN2ot9ClearableINS_3Mle16DevicePropertiesEE5ClearEv(result);
}

uint64_t ot::Mle::DeviceProperties::ClampWeightAdjustment(ot::Mle::DeviceProperties *this)
{
  uint64_t result = ot::Clamp<signed char>(*((_BYTE *)this + 5), -16, 16);
  *((_BYTE *)this + 5) = result;
  return result;
}

uint64_t ot::Mle::DeviceProperties::CalculateLeaderWeight(ot::Mle::DeviceProperties *this)
{
  char v5 = 64;
  unsigned __int8 v4 = ot::MapEnum<otPowerSupply>(*(unsigned int *)this);
  if ((*((_BYTE *)this + 4) & 1) != 0)
  {
    if ((*((_BYTE *)this + 4) & 2) != 0) {
      char v1 = 8;
    }
    else {
      char v1 = 1;
    }
    char v5 = v1 + 64;
  }

  if ((*((_BYTE *)this + 4) & 4) != 0 && v4 && v4 != 3) {
    v5 -= 4;
  }
  return (v5 + *((_BYTE *)this + 5));
}

uint64_t ot::MapEnum<otPowerSupply>(uint64_t result)
{
  return result;
}

{
  return __ZN2ot7MapEnumI13otPowerSupplyEEKNS_10MappedEnumIT_E4TypeES3_(result);
}

uint64_t ot::GetArrayLength<signed char,(unsigned short)4>()
{
  return 4LL;
}

{
  return __ZN2ot14GetArrayLengthIaLt4EEEtRAT0__KT_();
}

uint64_t ot::Mle::RouterIdSet::GetNumberOfAllocatedIds(ot::Mle::RouterIdSet *this)
{
  unsigned __int8 v4 = 0;
  char v3 = (char *)this;
  char v2 = (char *)this + 8;
  while (v3 != v2)
    v4 += ot::CountBitsInMask<unsigned char>(*v3++);
  return v4;
}

uint64_t ot::CountBitsInMask<unsigned char>(char a1)
{
  unsigned __int8 v2 = 0;
  while (a1)
  {
    a1 &= a1 - 1;
    ++v2;
  }

  return v2;
}

{
  return __ZN2ot15CountBitsInMaskIhEEhT_(a1);
}

const char *ot::Mle::RoleToString(unsigned __int8 a1)
{
  else {
    return ot::Mle::RoleToString(ot::Mle::DeviceRole)::kRoleStrings[a1];
  }
}

uint64_t ot::GetArrayLength<char const*,(unsigned short)5>()
{
  return 5LL;
}

{
  return __ZN2ot14GetArrayLengthIPKcLt5EEEtRAT0__KT_();
}

ot::MlrManager *ot::MlrManager::MlrManager(ot::MlrManager *this, ot::Instance *a2)
{
  uint64_t result = this;
  *((_DWORD *)this + 4) = 0;
  *((_WORD *)this + 10) = 0;
  *((_BYTE *)this + 22) &= ~1u;
  *((_BYTE *)this + 22) &= ~2u;
  return result;
}

{
  ot::MlrManager::MlrManager(this, a2);
  return this;
}

void ot::MlrManager::HandleNotifierEvents(ot::MlrManager *a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (ot::Events::Contains(&v4, 4096LL)) {
    ot::MlrManager::UpdateLocalSubscriptions(a1);
  }
  if (ot::Events::Contains(&v4, 4LL))
  {
    unsigned __int8 v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(a1);
    if (ot::Mle::Mle::IsChild(v2)) {
      ot::MlrManager::UpdateReregistrationDelay(a1, 1);
    }
  }

uint64_t ot::MlrManager::UpdateLocalSubscriptions(ot::MlrManager *this)
{
  char v11 = this;
  uint64_t v1 = ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
  v9[0] = ot::Ip6::Netif::IterateExternalMulticastAddresses(v1, 3);
  v9[1] = v2;
  unsigned __int8 v10 = (ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder *)v9;
  ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::begin( (ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder *)v9,  (uint64_t)v8);
  ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::end(v10, v7);
  while (ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator!=( v8,  v7))
  {
    unsigned __int16 v6 = (ot::Ip6::Netif::MulticastAddress *)ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator*((uint64_t)v8);
    if (!ot::Ip6::Netif::ExternalMulticastAddress::GetMlrState(v6))
    {
      ot::Ip6::Netif::MulticastAddress::GetAddress(v6);
      if ((ot::MlrManager::IsAddressMlrRegisteredByAnyChild(this, v3) & 1) != 0) {
        ot::Ip6::Netif::ExternalMulticastAddress::SetMlrState((uint64_t)v6, 2);
      }
    }

    ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator++(v8);
  }

  ot::MlrManager::CheckInvariants(this);
  return ot::MlrManager::ScheduleSend((uint64_t)this, 0);
}

void ot::MlrManager::UpdateReregistrationDelay(ot::MlrManager *this, char a2)
{
  uint64_t v23 = this;
  char v22 = a2 & 1;
  unsigned __int8 v21 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (ot::Mle::Mle::IsFullThreadDevice(v21)
    || (Parent = (ot::Neighbor *)ot::Mle::Mle::GetParent(v21), BOOL HasPrimary = 0, ot::Neighbor::IsThreadVersion1p1(Parent)))
  {
    char v3 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
    BOOL HasPrimary = ot::BackboneRouter::Leader::HasPrimary(v3);
  }

  BOOL v20 = HasPrimary;
  if (HasPrimary)
  {
    uint64_t v4 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
    ot::BackboneRouter::Leader::GetConfig(v4, (uint64_t)v17);
    IgnoreError();
    if ((v22 & 1) != 0)
    {
      if (v18 <= 1u) {
        int Uint16InRange = 1;
      }
      else {
        int Uint16InRange = (unsigned __int16)ot::Random::NonCrypto::GetUint16InRange((ot::Random::NonCrypto *)1, v18);
      }
      unsigned int Uint32InRange = Uint16InRange;
    }

    else
    {
      unsigned int v15 = ot::Max<unsigned int>(v19, 0x12Cu);
      unsigned int Uint32InRange = ot::Random::NonCrypto::GetUint32InRange((ot::Random::NonCrypto *)((v15 >> 1) + 1), v15 - 9);
    }
  }

  else
  {
    *((_DWORD *)this + 4) = 0;
  }

  ot::MlrManager::UpdateTimeTickerRegistration(this);
  char v11 = v22;
  ot::ToUlong(*((unsigned int *)this + 4));
  ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"MlrManager",  "MlrManager::UpdateReregistrationDelay: rereg=%d, needSendMlr=%d, ReregDelay=%lu",  v5,  v6,  v7,  v8,  v9,  v10,  v11 & 1);
}

void ot::MlrManager::HandleBackboneRouterPrimaryUpdate(ot::MlrManager *a1, char a2)
{
  BOOL v2 = 1;
  if (a2 != 1) {
    BOOL v2 = a2 == 3;
  }
  ot::MlrManager::UpdateReregistrationDelay(a1, v2);
}

uint64_t ot::Ip6::Netif::ExternalMulticastAddress::GetMlrState( ot::Ip6::Netif::ExternalMulticastAddress *this)
{
  return *((unsigned __int8 *)this + 24);
}

{
  return __ZNK2ot3Ip65Netif24ExternalMulticastAddress11GetMlrStateEv(this);
}

uint64_t ot::MlrManager::IsAddressMlrRegisteredByAnyChild(ot::MlrManager *this, const ot::Ip6::Address *a2)
{
  return ot::MlrManager::IsAddressMlrRegisteredByAnyChildExcept(this, a2, 0LL) & 1;
}

{
  return __ZNK2ot10MlrManager32IsAddressMlrRegisteredByAnyChildERKNS_3Ip67AddressE(this, a2);
}

uint64_t ot::Ip6::Netif::ExternalMulticastAddress::SetMlrState(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2;
  return result;
}

  ;
}

{
  return __ZN2ot3Ip65Netif24ExternalMulticastAddress11SetMlrStateENS_8MlrStateE(result, a2);
}

uint64_t ot::MlrManager::ScheduleSend(uint64_t this, unsigned __int16 a2)
{
  BOOL v2 = (ot::MlrManager *)this;
  BOOL v3 = 1;
  if ((*(_BYTE *)(this + 22) & 1) != 0) {
    BOOL v3 = *(_WORD *)(this + 20) == 0;
  }
  if (!v3) {
    __assert_rtn("ScheduleSend", "mlr_manager.cpp", 194, "!mMlrPending || mSendDelay == 0");
  }
  if ((*(_BYTE *)(this + 22) & 1) == 0)
  {
    if (a2)
    {
    }

    else
    {
      *(_WORD *)(this + ot::Mle::Tlv::SetType(this, 20) = 0;
      ot::MlrManager::SendMulticastListenerRegistration((ot::MlrManager *)this);
    }

    return ot::MlrManager::UpdateTimeTickerRegistration(v2);
  }

  return this;
}

uint64_t ot::MlrManager::IsAddressMlrRegisteredByNetif (ot::MlrManager *this, const ot::Ip6::Address *a2)
{
  unsigned int v14 = this;
  uint64_t v13 = a2;
  char v12 = 0;
  if (!ot::Ip6::Address::IsMulticastLargerThanRealmLocal(a2)) {
    __assert_rtn("IsAddressMlrRegisteredByNetif", "mlr_manager.cpp", 113, "aAddress.IsMulticastLargerThanRealmLocal()");
  }
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
  v10[0] = ot::Ip6::Netif::IterateExternalMulticastAddresses(v2, 0);
  v10[1] = v3;
  char v11 = (ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder *)v10;
  ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::begin( (ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder *)v10,  (uint64_t)v9);
  ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::end(v11, v8);
  while (ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator!=( v9,  v8))
  {
    uint64_t v7 = (ot::Ip6::Netif::MulticastAddress *)ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator*((uint64_t)v9);
    ot::Ip6::Netif::MulticastAddress::GetAddress(v7);
    if (ot::Equatable<ot::Ip6::Address>::operator==(v4, v13)
      && ot::Ip6::Netif::ExternalMulticastAddress::GetMlrState(v7) == 2)
    {
      char v12 = 1;
      return v12 & 1;
    }

    ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator++(v9);
  }

  return v12 & 1;
}

uint64_t ot::MlrManager::IsAddressMlrRegisteredByAnyChildExcept( ot::MlrManager *this, const ot::Ip6::Address *a2, const ot::Child *a3)
{
  uint64_t v16 = this;
  unsigned int v15 = a2;
  unsigned int v14 = a3;
  char v13 = 0;
  if (!ot::Ip6::Address::IsMulticastLargerThanRealmLocal(a2)) {
    __assert_rtn( "IsAddressMlrRegisteredByAnyChildExcept",  "mlr_manager.cpp",  135,  "aAddress.IsMulticastLargerThanRealmLocal()");
  }
  uint64_t v3 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  char v11 = ot::ChildTable::Iterate(v3, 0);
  char v12 = (ot::ChildTable::IteratorBuilder *)&v11;
  v10[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v11);
  v10[1] = v4;
  v9[0] = ot::ChildTable::IteratorBuilder::end(v12);
  v9[1] = v5;
  while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v10, v9))
  {
    uint64_t v8 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v10);
    if (v8 != v14 && (ot::Child::HasMlrRegisteredAddress(v8, v15) & 1) != 0)
    {
      char v13 = 1;
      return v13 & 1;
    }

    ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v10);
  }

  return v13 & 1;
}

uint64_t ot::MlrManager::UpdateProxiedSubscriptions( ot::MlrManager *this, ot::Child *a2, const ot::Ip6::Address *a3, unsigned __int16 a4)
{
  uint64_t v28 = this;
  uint64_t v27 = a2;
  uint64_t v26 = a3;
  unsigned __int16 v25 = a4;
  if (ot::Neighbor::IsStateValid(a2))
  {
    v23[0] = ot::Child::IterateIp6Addresses((uint64_t)v27, 3);
    v23[1] = v11;
    uint64_t v24 = (ot::Child::AddressIteratorBuilder *)v23;
    ot::Child::AddressIteratorBuilder::begin((ot::Child::AddressIteratorBuilder *)v23, (uint64_t)v22);
    ot::Child::AddressIteratorBuilder::end(v24, (uint64_t)v21);
    while (ot::Unequatable<ot::Child::AddressIterator>::operator!=((uint64_t)v22, (uint64_t)v21))
    {
      BOOL v20 = (ot::Ip6::Address *)ot::Child::AddressIterator::operator*((ot::Child::AddressIterator *)v22);
      char v19 = 0;
      for (unint64_t i = 0LL; i < v25; ++i)
      {
        if (ot::Equatable<ot::Ip6::Address>::operator==((char *)v26 + 16 * i, v20))
        {
          char v19 = 1;
          break;
        }
      }

      char IsAddressMlrRegisteredByNetif = 1;
      if ((v19 & 1) == 0) {
        char IsAddressMlrRegisteredByNetif = ot::MlrManager::IsAddressMlrRegisteredByNetif (this, v20);
      }
      char IsAddressMlrRegisteredByAnyChildExcept = 1;
      if ((IsAddressMlrRegisteredByNetif & 1) == 0) {
        char IsAddressMlrRegisteredByAnyChildExcept = ot::MlrManager::IsAddressMlrRegisteredByAnyChildExcept(this, v20, v27);
      }
      if ((IsAddressMlrRegisteredByAnyChildExcept & 1) != 0) {
        char v12 = 2;
      }
      else {
        char v12 = 0;
      }
      ot::Child::SetAddressMlrState((uint64_t)v27, (unint64_t)v20, v12);
      ot::Child::AddressIterator::operator++((ot::Child::AddressIterator *)v22);
    }
  }

  ot::MlrManager::LogMulticastAddresses(this, v4, v5, v6, v7, v8, v9, v10);
  ot::MlrManager::CheckInvariants(this);
  uint64_t result = ot::Child::HasAnyMlrToRegisterAddress(v27);
  if ((result & 1) != 0)
  {
    unsigned __int16 Uint16InRange = ot::Random::NonCrypto::GetUint16InRange((ot::Random::NonCrypto *)1, 5u);
    return ot::MlrManager::ScheduleSend((uint64_t)this, Uint16InRange);
  }

  return result;
}

BOOL ot::MlrManager::LogMulticastAddresses( ot::MlrManager *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v47 = this;
  ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"MlrManager",  "-------- Multicast Addresses --------",  a3,  a4,  a5,  a6,  a7,  a8,  v28);
  uint64_t v8 = ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
  v45[0] = ot::Ip6::Netif::IterateExternalMulticastAddresses(v8, 0);
  v45[1] = v9;
  int v46 = (ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder *)v45;
  ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::begin( (ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder *)v45,  (uint64_t)v44);
  ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::end(v46, v43);
  while (ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator!=( v44,  v43))
  {
    char v42 = (ot::Ip6::Netif::ExternalMulticastAddress *)ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator*((uint64_t)v44);
    ot::Ip6::Netif::MulticastAddress::GetAddress(v42);
    ot::Ip6::Address::ToString(v10, (ot::StringWriter *)v49);
    char v30 = ot::String<(unsigned short)40>::AsCString((uint64_t)v49);
    ot::Ip6::Netif::ExternalMulticastAddress::GetMlrState(v42);
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"MlrManager", "%-32s%c", v11, v12, v13, v14, v15, v16, v30);
    ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator++(v44);
  }

  uint64_t v17 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  char v40 = ot::ChildTable::Iterate(v17, 0);
  uint64_t v41 = (ot::ChildTable::IteratorBuilder *)&v40;
  v39[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v40);
  v39[1] = v18;
  v38[0] = ot::ChildTable::IteratorBuilder::end(v41);
  v38[1] = v19;
  while (1)
  {
    BOOL result = ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v39, v38);
    if (!result) {
      break;
    }
    uint64_t v37 = (ot::Neighbor *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v39);
    v35[0] = ot::Child::IterateIp6Addresses((uint64_t)v37, 3);
    v35[1] = v21;
    uint64_t v36 = (ot::Child::AddressIteratorBuilder *)v35;
    ot::Child::AddressIteratorBuilder::begin((ot::Child::AddressIteratorBuilder *)v35, (uint64_t)v34);
    ot::Child::AddressIteratorBuilder::end(v36, (uint64_t)v33);
    while (ot::Unequatable<ot::Child::AddressIterator>::operator!=((uint64_t)v34, (uint64_t)v33))
    {
      unsigned __int8 v32 = (ot::Ip6::Address *)ot::Child::AddressIterator::operator*((ot::Child::AddressIterator *)v34);
      ot::Ip6::Address::ToString(v32, (ot::StringWriter *)v48);
      char v29 = ot::String<(unsigned short)40>::AsCString((uint64_t)v48);
      ot::Child::GetAddressMlrState(v37, v32);
      ot::Neighbor::GetRloc16(v37);
      ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"MlrManager", "%-32s%c %04x", v22, v23, v24, v25, v26, v27, v29);
      ot::Child::AddressIterator::operator++((ot::Child::AddressIterator *)v34);
    }

    ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v39);
  }

  return result;
}

uint64_t ot::Child::HasAnyMlrToRegisterAddress(ot::Child *this)
{
  return ot::BitVector<(unsigned short)15>::HasAny((_BYTE *)this + 548) & 1;
}

{
  return __ZNK2ot5Child26HasAnyMlrToRegisterAddressEv(this);
}

void ot::MlrManager::SendMulticastListenerRegistration(ot::MlrManager *this)
{
  unsigned int v56 = this;
  int v54 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  unsigned __int8 v53 = 0;
  if ((*((_BYTE *)this + 22) & 1) != 0)
  {
    int v55 = 5;
  }

  else if (ot::Mle::Mle::IsAttached(v54))
  {
    if (ot::Mle::Mle::IsFullThreadDevice(v54)
      || (Parent = (ot::Neighbor *)ot::Mle::Mle::GetParent(v54), ot::Neighbor::IsThreadVersion1p1(Parent)))
    {
      uint64_t v9 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
      if (ot::BackboneRouter::Leader::HasPrimary(v9))
      {
        char v36 = *((_BYTE *)this + 22) & 1;
        ot::Mle::Mle::IsAttached(v54);
        ot::Mle::Mle::IsFullThreadDevice(v54);
        uint64_t v10 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
        ot::BackboneRouter::Leader::HasPrimary(v10);
        otLogDebgPlat( "MlrManager::SendMulticastListenerRegistration mlrPending:%d isAttached:%d isFTD:%d hasPrimary:%d",  v11,  v12,  v13,  v14,  v15,  v16,  v17,  v36 & 1);
        uint64_t v18 = ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
        v51[0] = ot::Ip6::Netif::IterateExternalMulticastAddresses(v18, 3);
        v51[1] = v19;
        int v52 = (ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder *)v51;
        ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::begin( (ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder *)v51,  (uint64_t)v50);
        ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::end(v52, v49);
        while (ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator!=( v50,  v49))
        {
          int v48 = (ot::Ip6::Netif::ExternalMulticastAddress *)ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator*((uint64_t)v50);
          if (v53 >= 0xFu) {
            break;
          }
          ot::Ip6::Netif::MulticastAddress::GetAddress(v48);
          ot::Ip6::Address::ToString(v20, (ot::StringWriter *)v57);
          char v35 = ot::String<(unsigned short)40>::AsCString((uint64_t)v57);
          ot::Ip6::Netif::ExternalMulticastAddress::GetMlrState(v48);
          otLogInfoPlat( "MlrManager::SendMulticastListenerRegistration addr:%s state:%d",  v21,  v22,  v23,  v24,  v25,  v26,  v27,  v35);
          if (!ot::Ip6::Netif::ExternalMulticastAddress::GetMlrState(v48))
          {
            ot::Ip6::Netif::MulticastAddress::GetAddress(v48);
            ot::MlrManager::AppendToUniqueAddressList((uint64_t)this, (uint64_t)v58, &v53, v28);
            ot::Ip6::Netif::ExternalMulticastAddress::SetMlrState((uint64_t)v48, 1);
          }

          ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator++(v50);
        }

        char v29 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
        char v46 = ot::ChildTable::Iterate(v29, 0);
        int v47 = (ot::ChildTable::IteratorBuilder *)&v46;
        v45[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v46);
        v45[1] = v30;
        v44[0] = ot::ChildTable::IteratorBuilder::end(v47);
        v44[1] = v31;
        while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v45, v44))
        {
          unsigned __int8 v43 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v45);
          if (v53 >= 0xFu) {
            break;
          }
          if ((ot::Child::HasAnyMlrToRegisterAddress(v43) & 1) != 0)
          {
            v41[0] = ot::Child::IterateIp6Addresses((uint64_t)v43, 3);
            v41[1] = v32;
            char v42 = (ot::Child::AddressIteratorBuilder *)v41;
            ot::Child::AddressIteratorBuilder::begin((ot::Child::AddressIteratorBuilder *)v41, (uint64_t)v40);
            ot::Child::AddressIteratorBuilder::end(v42, (uint64_t)v39);
            while (ot::Unequatable<ot::Child::AddressIterator>::operator!=((uint64_t)v40, (uint64_t)v39))
            {
              uint64_t v38 = (ot::Ip6::Address *)ot::Child::AddressIterator::operator*((ot::Child::AddressIterator *)v40);
              if (v53 >= 0xFu) {
                break;
              }
              if (!ot::Child::GetAddressMlrState(v43, v38))
              {
                ot::MlrManager::AppendToUniqueAddressList((uint64_t)this, (uint64_t)v58, &v53, (__n128 *)v38);
                ot::Child::SetAddressMlrState((uint64_t)v43, (unint64_t)v38, 1);
              }

              ot::Child::AddressIterator::operator++((ot::Child::AddressIterator *)v40);
            }
          }

          ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v45);
        }

        if (v53)
        {
          int v55 = ot::MlrManager::SendMulticastListenerRegistrationMessage( this,  v58,  v53,  0LL,  (uint64_t)ot::MlrManager::HandleMulticastListenerRegistrationResponse,  (uint64_t)this);
          if (!v55)
          {
            *((_BYTE *)this + 22) = *((_BYTE *)this + 22) & 0xFE | 1;
            unsigned __int8 v33 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
            if (!ot::Mle::Mle::IsRxOnWhenIdle(v33))
            {
              uint64_t v34 = ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollSender>(this);
              ot::DataPollSender::SendFastPolls(v34, 0);
            }
          }
        }

        else
        {
          int v55 = 23;
        }
      }

      else
      {
        int v55 = 13;
      }
    }

    else
    {
      int v55 = 13;
    }
  }

  else
  {
    int v55 = 13;
  }

  if (v55)
  {
    ot::MlrManager::SetMulticastAddressMlrState(this, 1, 0);
    if (v55 == 3) {
      ot::MlrManager::ScheduleSend(this, 1u);
    }
  }

  ot::MlrManager::LogMulticastAddresses(this, v1, v2, v3, v4, v5, v6, v7);
  ot::MlrManager::CheckInvariants(this);
}

uint64_t ot::MlrManager::UpdateTimeTickerRegistration(ot::MlrManager *this)
{
  if (*((_WORD *)this + 10) || *((_DWORD *)this + 4))
  {
    uint64_t v3 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>(this);
    return ot::TimeTicker::RegisterReceiver(v3, 5);
  }

  else
  {
    uint64_t v1 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>(this);
    return ot::TimeTicker::UnregisterReceiver(v1, 5);
  }

__n128 ot::MlrManager::AppendToUniqueAddressList(uint64_t a1, uint64_t a2, _BYTE *a3, __n128 *a4)
{
  for (unsigned __int8 i = 0; i < (int)*a3; ++i)
  {
  }

  uint64_t v5 = (*a3)++;
  __n128 result = *a4;
  *(__n128 *)(a2 + 16 * v5) = *a4;
  return result;
}

uint64_t ot::MlrManager::SendMulticastListenerRegistrationMessage( ot::InstanceLocator *a1, char *a2, unsigned __int8 a3, unsigned int *a4, uint64_t a5, uint64_t a6)
{
  int v51 = a1;
  int v50 = a2;
  unsigned __int8 v49 = a3;
  int v48 = a4;
  uint64_t v47 = a5;
  uint64_t v46 = a6;
  unsigned int appended = 0;
  unsigned __int16 v44 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(a1);
  unsigned __int8 v43 = 0LL;
  Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(a1);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v42, Instance);
  uint64_t v7 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(a1);
  if (!ot::BackboneRouter::Leader::HasPrimary(v7))
  {
    unsigned int appended = 13;
    goto LABEL_18;
  }

  uint64_t v8 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
  unsigned __int8 v43 = ot::Coap::CoapBase::NewConfirmablePostMessage(v8, 0x26u);
  if (!v43)
  {
    unsigned int appended = 3;
    goto LABEL_18;
  }

  ot::Ip6AddressesTlv::Init((ot::Ip6AddressesTlv *)v41);
  ot::Tlv::SetLength((uint64_t)v41, 16 * v49);
  unsigned int appended = ot::Message::Append<ot::Ip6AddressesTlv>(v43, v41);
  if (appended) {
    goto LABEL_18;
  }
  unsigned int appended = ot::Message::AppendBytes(v43, v50, 16 * v49);
  if (appended) {
    goto LABEL_18;
  }
  uint64_t v9 = (ot::MeshCoP::Commissioner *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>(a1);
  if (ot::MeshCoP::Commissioner::IsActive(v9))
  {
    uint64_t v38 = v43;
    uint64_t v10 = (ot::MeshCoP::Commissioner *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>(a1);
    unsigned __int16 SessionId = ot::MeshCoP::Commissioner::GetSessionId(v10);
    unsigned int appended = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)15,unsigned short>>((uint64_t)v38, SessionId);
    if (appended) {
      goto LABEL_18;
    }
  }

  if (v48)
  {
    unsigned int appended = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)11,unsigned int>>(v43, *v48);
    if (appended) {
      goto LABEL_18;
    }
  }

  if (ot::Mle::Mle::IsFullThreadDevice(v44)
    || (Parent = (ot::Neighbor *)ot::Mle::Mle::GetParent(v44), !ot::Neighbor::IsThreadVersion1p1(Parent)))
  {
    ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)v42);
    char v35 = v15;
    ot::Mle::Mle::GetMeshLocalPrefix(v44);
    uint64_t v34 = v16;
    uint64_t v17 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(a1);
    unsigned __int16 Server16 = ot::BackboneRouter::Leader::GetServer16(v17);
    ot::Ip6::Address::SetToRoutingLocator(v35, v34, Server16);
LABEL_17:
    ot::Tmf::MessageInfo::SetSockAddrToRloc((ot::Tmf::MessageInfo *)v42);
    uint64_t v19 = (ot::Coap::TxParameters *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
    unsigned int appended = ot::Coap::CoapBase::SendMessage(v19, v43, (ot::Ip6::MessageInfo *)v42, v47, v46);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"MlrManager",  "Sent MLR.req: addressNum=%d",  v20,  v21,  v22,  v23,  v24,  v25,  v49);
    goto LABEL_18;
  }

  uint64_t v13 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(a1);
  unsigned int appended = ot::BackboneRouter::Leader::GetServiceId(v13, &v40);
  if (!appended)
  {
    uint64_t v37 = v44;
    unsigned __int8 v36 = v40;
    ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)v42);
    unsigned int appended = ot::Mle::Mle::GetServiceAloc(v37, v36, v14);
    if (!appended) {
      goto LABEL_17;
    }
  }

uint64_t ot::MlrManager::HandleMulticastListenerRegistrationResponse( ot::MlrManager *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v11 = v4;
  ot::AsCoreTypePtr<otMessageInfo>();
  return ot::MlrManager::HandleMulticastListenerRegistrationResponse(a1, v11, v5, a4, v6, v7, v8, v9);
}

BOOL ot::MlrManager::SetMulticastAddressMlrState(ot::InstanceLocator *a1, char a2, char a3)
{
  uint64_t v30 = a1;
  char v29 = a2;
  char v28 = a3;
  uint64_t v3 = ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(a1);
  v26[0] = ot::Ip6::Netif::IterateExternalMulticastAddresses(v3, 3);
  v26[1] = v4;
  uint64_t v27 = (ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder *)v26;
  ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::begin( (ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder *)v26,  (uint64_t)v25);
  ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::end(v27, v24);
  while (ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator!=( v25,  v24))
  {
    uint64_t v23 = (ot::Ip6::Netif::ExternalMulticastAddress *)ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator*((uint64_t)v25);
    Mlruint64_t State = ot::Ip6::Netif::ExternalMulticastAddress::GetMlrState(v23);
    if (v29 == MlrState) {
      ot::Ip6::Netif::ExternalMulticastAddress::SetMlrState((uint64_t)v23, v28);
    }
    ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator++(v25);
  }

  uint64_t v6 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(a1);
  char v21 = ot::ChildTable::Iterate(v6, 0);
  uint64_t v22 = (ot::ChildTable::IteratorBuilder *)&v21;
  v20[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v21);
  v20[1] = v7;
  v19[0] = ot::ChildTable::IteratorBuilder::end(v22);
  v19[1] = v8;
  while (1)
  {
    BOOL result = ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v20, v19);
    if (!result) {
      break;
    }
    uint64_t v18 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v20);
    v16[0] = ot::Child::IterateIp6Addresses((uint64_t)v18, 3);
    v16[1] = v10;
    uint64_t v17 = (ot::Child::AddressIteratorBuilder *)v16;
    ot::Child::AddressIteratorBuilder::begin((ot::Child::AddressIteratorBuilder *)v16, (uint64_t)v15);
    ot::Child::AddressIteratorBuilder::end(v17, (uint64_t)v14);
    while (ot::Unequatable<ot::Child::AddressIterator>::operator!=((uint64_t)v15, (uint64_t)v14))
    {
      uint64_t v13 = (ot::Ip6::Address *)ot::Child::AddressIterator::operator*((ot::Child::AddressIterator *)v15);
      AddressMlruint64_t State = ot::Child::GetAddressMlrState(v18, v13);
      if (v29 == AddressMlrState) {
        ot::Child::SetAddressMlrState((uint64_t)v18, (unint64_t)v13, v28);
      }
      ot::Child::AddressIterator::operator++((ot::Child::AddressIterator *)v15);
    }

    ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v20);
  }

  return result;
}

uint64_t ot::MlrManager::RegisterMulticastListeners( ot::InstanceLocator *a1, char *a2, unsigned __int8 a3, unsigned int *a4, uint64_t a5, uint64_t a6)
{
  if (a2)
  {
    if (a3 && a3 <= 0xFu)
    {
      if (!a6 || a5)
      {
        uint64_t v6 = (ot::MeshCoP::Commissioner *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>(a1);
        if (ot::MeshCoP::Commissioner::IsActive(v6))
        {
          if ((*((_BYTE *)a1 + 22) & 2) != 0)
          {
            return 5;
          }

          else
          {
            unsigned int v9 = ot::MlrManager::SendMulticastListenerRegistrationMessage( a1,  a2,  a3,  a4,  (uint64_t)ot::MlrManager::HandleRegisterMulticastListenersResponse,  (uint64_t)a1);
            if (!v9)
            {
              *((_BYTE *)a1 + 22) = *((_BYTE *)a1 + 22) & 0xFD | 2;
              ot::CallbackBase<void (*)(void *,otError,unsigned char,otIp6Address const*,unsigned char)>::Set( a1,  a5,  a6);
            }
          }
        }

        else
        {
          return 13;
        }
      }

      else
      {
        return 7;
      }
    }

    else
    {
      return 7;
    }
  }

  else
  {
    return 7;
  }

  return v9;
}

void *ot::MlrManager::HandleRegisterMulticastListenersResponse( __int128 *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7 = v4;
  ot::AsCoreTypePtr<otMessageInfo>();
  return ot::MlrManager::HandleRegisterMulticastListenersResponse(a1, v7, v5, a4);
}

{
  ot::Tlv *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  __int128 v10;
  unsigned __int8 v11;
  unsigned int v12;
  unsigned __int8 v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  _BYTE v18[240];
  uint64_t v17 = a1;
  uint64_t v16 = a2;
  uint64_t v15 = a3;
  uint64_t v14 = a4;
  uint64_t v11 = 0;
  uint64_t v10 = *a1;
  *((_BYTE *)a1 + 22) &= ~2u;
  ot::CallbackBase<void (*)(void *,otError,unsigned char,otIp6Address const*,unsigned char)>::Clear(a1);
  unsigned int v9 = v14;
  ot::AsCoapMessagePtr();
  uint64_t v12 = ot::MlrManager::ParseMulticastListenerRegistrationResponse(v9, v4, &v13, (uint64_t)v18, &v11, v5, v6, v7);
  return ot::Callback<void (*)(void *,otError,unsigned char,otIp6Address const*,unsigned char),(ot::CallbackContextPosition)0>::InvokeIfSet<otError&,unsigned char &,ot::Ip6::Address (&)[15],unsigned char &>( &v10,  &v12,  &v13,  (uint64_t)v18,  &v11);
}

void *ot::CallbackBase<void (*)(void *,otError,unsigned char,otIp6Address const*,unsigned char)>::Set( void *result, uint64_t a2, uint64_t a3)
{
  *BOOL result = a2;
  result[1] = a3;
  return result;
}

{
  return __ZN2ot12CallbackBaseIPFvPv7otErrorhPK12otIp6AddresshEE3SetES7_S1_(result, a2, a3);
}

void *ot::CallbackBase<void (*)(void *,otError,unsigned char,otIp6Address const*,unsigned char)>::Clear( void *result)
{
  *BOOL result = 0LL;
  return result;
}

{
  return __ZN2ot12CallbackBaseIPFvPv7otErrorhPK12otIp6AddresshEE5ClearEv(result);
}

uint64_t ot::MlrManager::ParseMulticastListenerRegistrationResponse( unsigned int a1, ot::Tlv *a2, _BYTE *a3, uint64_t a4, _BYTE *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v21 = a1;
  uint64_t v20 = a2;
  uint64_t v19 = a3;
  uint64_t v18 = a4;
  uint64_t v17 = a5;
  *a3 = 6;
  if (v21 || !v20)
  {
    unsigned int v16 = 6;
    goto LABEL_18;
  }

  if (ot::Coap::Message::GetCode(v20) != 68)
  {
    unsigned int v16 = 6;
    goto LABEL_18;
  }

  unsigned int v16 = ot::Tlv::Find<ot::ThreadStatusTlv>(v20, v19, v8, v9);
  if (!v16)
  {
    if (!ot::Tlv::FindTlvValueOffset(v20, (const ot::Message *)0xE, &v15, &v14, v10))
    {
      if (v14 % 0x10uLL)
      {
        unsigned int v16 = 6;
        goto LABEL_18;
      }

      if (v14 / 0x10uLL > 0xF)
      {
        unsigned int v16 = 6;
        goto LABEL_18;
      }

      for (unsigned __int16 i = 0; i < (int)v14; i += 16)
      {
        ot::Message::Read<ot::Ip6::Address>(v20, v15 + i, (char *)(v18 + 16LL * *v17));
        IgnoreError();
        ++*v17;
      }
    }

    if (*v17 && !*v19) {
      unsigned int v16 = 6;
    }
  }

void *ot::Callback<void (*)(void *,otError,unsigned char,otIp6Address const*,unsigned char),(ot::CallbackContextPosition)0>::InvokeIfSet<otError&,unsigned char &,ot::Ip6::Address (&)[15],unsigned char &>( void *result, unsigned int *a2, unsigned __int8 *a3, uint64_t a4, unsigned __int8 *a5)
{
  if (*result) {
    return (void *)ot::Callback<void (*)(void *,otError,unsigned char,otIp6Address const*,unsigned char),(ot::CallbackContextPosition)0>::Invoke<otError&,unsigned char &,ot::Ip6::Address (&)[15],unsigned char &>( (uint64_t)result,  a2,  a3,  a4,  a5);
  }
  return result;
}

{
  return __ZNK2ot8CallbackIPFvPv7otErrorhPK12otIp6AddresshELNS_23CallbackContextPositionE0EE11InvokeIfSetIJRS2_RhRA15_NS_3Ip67AddressESC_EEEvDpOT_( result,  a2,  a3,  a4,  a5);
}

uint64_t ot::MlrManager::HandleMulticastListenerRegistrationResponse( ot::MlrManager *a1, ot::Tlv *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v21 = a1;
  uint64_t v20 = a2;
  uint64_t v19 = a3;
  unsigned int v18 = a4;
  unsigned __int8 v15 = 0;
  int v16 = ot::MlrManager::ParseMulticastListenerRegistrationResponse(a4, a2, &v17, (uint64_t)v22, &v15, a6, a7, a8);
  BOOL v11 = 0;
  if (!v16) {
    BOOL v11 = v17 == 0;
  }
  ot::MlrManager::FinishMulticastListenerRegistration(a1, v11, (const ot::Ip6::Address *)v22, v15);
  if (!v16 && !v17) {
    return ot::MlrManager::ScheduleSend(a1, 0);
  }
  unsigned int v9 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(a1);
  uint64_t result = ot::BackboneRouter::Leader::GetConfig(v9, (uint64_t)v13);
  if (!(_DWORD)result)
  {
    if (v14 <= 1u) {
      unsigned __int16 Uint16InRange = 1;
    }
    else {
      unsigned __int16 Uint16InRange = ot::Random::NonCrypto::GetUint16InRange((ot::Random::NonCrypto *)1, v14);
    }
    return ot::MlrManager::ScheduleSend(a1, Uint16InRange);
  }

  return result;
}

void ot::MlrManager::FinishMulticastListenerRegistration( ot::MlrManager *this, char a2, const ot::Ip6::Address *a3, unsigned __int8 a4)
{
  uint64_t v46 = this;
  char v45 = a2 & 1;
  unsigned __int16 v44 = a3;
  unsigned __int8 v43 = a4;
  if ((*((_BYTE *)this + 22) & 1) == 0) {
    __assert_rtn("FinishMulticastListenerRegistration", "mlr_manager.cpp", 571, "mMlrPending");
  }
  *((_BYTE *)this + 22) &= ~1u;
  uint64_t v4 = ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
  v41[0] = ot::Ip6::Netif::IterateExternalMulticastAddresses(v4, 3);
  v41[1] = v5;
  char v42 = (ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder *)v41;
  ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::begin( (ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder *)v41,  (uint64_t)v40);
  ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::end(v42, v39);
  while (ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator!=( v40,  v39))
  {
    uint64_t v38 = (ot::Ip6::Netif::MulticastAddress *)ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator*((uint64_t)v40);
    if (ot::Ip6::Netif::ExternalMulticastAddress::GetMlrState(v38) == 1)
    {
      LOBYTE(v25) = 1;
      if ((v45 & 1) == 0)
      {
        uint64_t v24 = v44;
        unsigned int v23 = v43;
        ot::Ip6::Netif::MulticastAddress::GetAddress(v38);
        int v25 = ot::MlrManager::AddressListContains(v24, (const ot::Ip6::Address *)v23, v6, v7) ^ 1;
      }

      char v37 = v25 & 1;
      if ((v25 & 1) != 0) {
        char v8 = 2;
      }
      else {
        char v8 = 0;
      }
      ot::Ip6::Netif::ExternalMulticastAddress::SetMlrState((uint64_t)v38, v8);
    }

    ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator++(v40);
  }

  unsigned int v9 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  char v35 = ot::ChildTable::Iterate(v9, 0);
  unsigned __int8 v36 = (ot::ChildTable::IteratorBuilder *)&v35;
  v34[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v35);
  v34[1] = v10;
  v33[0] = ot::ChildTable::IteratorBuilder::end(v36);
  v33[1] = v11;
  while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v34, v33))
  {
    uint64_t v32 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v34);
    v30[0] = ot::Child::IterateIp6Addresses((uint64_t)v32, 3);
    v30[1] = v19;
    uint64_t v31 = (ot::Child::AddressIteratorBuilder *)v30;
    ot::Child::AddressIteratorBuilder::begin((ot::Child::AddressIteratorBuilder *)v30, (uint64_t)v29);
    ot::Child::AddressIteratorBuilder::end(v31, (uint64_t)v28);
    while (ot::Unequatable<ot::Child::AddressIterator>::operator!=((uint64_t)v29, (uint64_t)v28))
    {
      uint64_t v27 = (ot::Ip6::Address *)ot::Child::AddressIterator::operator*((ot::Child::AddressIterator *)v29);
      if (ot::Child::GetAddressMlrState(v32, v27) == 1)
      {
        LOBYTE(v22) = 1;
        if ((v45 & 1) == 0) {
          int v22 = ot::MlrManager::AddressListContains(v44, (const ot::Ip6::Address *)v43, v27, v20) ^ 1;
        }
        if ((v22 & 1) != 0) {
          char v21 = 2;
        }
        else {
          char v21 = 0;
        }
        ot::Child::SetAddressMlrState((uint64_t)v32, (unint64_t)v27, v21);
      }

      ot::Child::AddressIterator::operator++((ot::Child::AddressIterator *)v29);
    }

    ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v34);
  }

  ot::MlrManager::LogMulticastAddresses(this, v12, v13, v14, v15, v16, v17, v18);
  ot::MlrManager::CheckInvariants(this);
}

void ot::MlrManager::LogMlrResponse( int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v24 = a5;
  if (a1 || a2 || (_BYTE)a3)
  {
    char v22 = ot::ErrorToString(a1);
    ot::ErrorToString(a2);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)"MlrManager",  "Receive MLR.rsp: result=%s, error=%s, status=%d, failedAddressNum=%d",  v8,  v9,  v10,  v11,  v12,  v13,  v22);
    for (unsigned __int8 i = 0; i < (int)v24; ++i)
    {
      ot::Ip6::Address::ToString((ot::Ip6::Address *)(a4 + 16LL * i), (ot::StringWriter *)v27);
      char v14 = ot::String<(unsigned short)40>::AsCString((uint64_t)v27);
      ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"MlrManager", "MA failed: %s", v15, v16, v17, v18, v19, v20, v14);
    }
  }

  else
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"MlrManager", "Receive MLR.rsp OK", a3, a4, a5, a6, a7, a8, v21);
  }

uint64_t ot::MlrManager::AddressListContains( ot::MlrManager *this, const ot::Ip6::Address *a2, const void *a3, const ot::Ip6::Address *a4)
{
  unsigned __int8 v8 = a2;
  char v6 = 0;
  if ((_BYTE)a2)
  {
    for (unsigned __int8 i = 0; i < (int)v8; ++i)
    {
      if (ot::Equatable<ot::Ip6::Address>::operator==((char *)this + 16 * i, a3))
      {
        char v6 = 1;
        return v6 & 1;
      }
    }
  }

  else
  {
    char v6 = 1;
  }

  return v6 & 1;
}

uint64_t ot::MlrManager::HandleTimeTick( ot::MlrManager *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_WORD *)this + 10))
  {
    __int16 v8 = *((_WORD *)this + 10);
    *((_WORD *)this + 10) = v8 - 1;
    if (v8 == 1) {
      ot::MlrManager::SendMulticastListenerRegistration(this);
    }
  }

  if (*((_DWORD *)this + 4))
  {
    int v9 = *((_DWORD *)this + 4) - 1;
    *((_DWORD *)this + 4) = v9;
    if (!v9) {
      ot::MlrManager::Reregister(this, a2, a3, a4, a5, a6, a7, a8);
    }
  }

  return ot::MlrManager::UpdateTimeTickerRegistration(this);
}

void ot::MlrManager::Reregister( ot::MlrManager *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t ot::Max<unsigned int>(unsigned int a1, unsigned int a2)
{
  if (a1 >= a2) {
    return a1;
  }
  else {
    return a2;
  }
}

{
  return __ZN2ot3MaxIjEET_S1_S1_(a1, a2);
}

uint64_t ot::Callback<void (*)(void *,otError,unsigned char,otIp6Address const*,unsigned char),(ot::CallbackContextPosition)0>::Invoke<otError&,unsigned char &,ot::Ip6::Address (&)[15],unsigned char &>( uint64_t a1, unsigned int *a2, unsigned __int8 *a3, uint64_t a4, unsigned __int8 *a5)
{
  return (*(uint64_t (**)(void, void, void, uint64_t, void))a1)(*(void *)(a1 + 8), *a2, *a3, a4, *a5);
}

{
  return __ZNK2ot8CallbackIPFvPv7otErrorhPK12otIp6AddresshELNS_23CallbackContextPositionE0EE6InvokeIJRS2_RhRA15_NS_3Ip67AddressESC_EEEvDpOT_( a1,  a2,  a3,  a4,  a5);
}

ot::NeighborTable *ot::NeighborTable::NeighborTable(ot::NeighborTable *this, ot::Instance *a2)
{
  uint64_t result = this;
  *(void *)this = 0LL;
  return result;
}

{
  ot::NeighborTable::NeighborTable(this, a2);
  return this;
}

uint64_t ot::NeighborTable::FindParent(ot::NeighborTable *this, const ot::Neighbor::AddressMatcher *a2)
{
  uint64_t v6 = 0LL;
  uint64_t v5 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
  Parent = (ot::Neighbor *)ot::Mle::Mle::GetParent(v5);
  if ((ot::Neighbor::Matches(Parent, a2) & 1) != 0) {
    return ot::Mle::Mle::GetParent(v5);
  }
  ParentCandidate = (ot::Neighbor *)ot::Mle::Mle::GetParentCandidate(v5);
  if ((ot::Neighbor::Matches(ParentCandidate, a2) & 1) != 0) {
    return ot::Mle::Mle::GetParentCandidate(v5);
  }
  return v6;
}

uint64_t ot::NeighborTable::FindParent(ot::NeighborTable *a1, __int16 a2, char a3)
{
  uint64_t v7 = a1;
  __int16 v6 = a2;
  v5[21] = a3;
  ot::Neighbor::AddressMatcher::AddressMatcher((uint64_t)v5, a2, a3);
  return ot::NeighborTable::FindParent(a1, (const ot::Neighbor::AddressMatcher *)v5);
}

uint64_t ot::NeighborTable::FindParent(ot::NeighborTable *a1, uint64_t a2, char a3)
{
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  v5[23] = a3;
  ot::Neighbor::AddressMatcher::AddressMatcher((uint64_t)v5, a2, a3);
  return ot::NeighborTable::FindParent(a1, (const ot::Neighbor::AddressMatcher *)v5);
}

uint64_t ot::NeighborTable::FindParent(ot::NeighborTable *a1, ot::Mac::Address *a2, char a3)
{
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  v5[23] = a3;
  ot::Neighbor::AddressMatcher::AddressMatcher((uint64_t)v5, a2, a3);
  return ot::NeighborTable::FindParent(a1, (const ot::Neighbor::AddressMatcher *)v5);
}

uint64_t ot::NeighborTable::FindNeighbor(ot::NeighborTable *this, const ot::Neighbor::AddressMatcher *a2)
{
  uint64_t ChildOrRouter = 0LL;
  uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
  if (ot::Mle::Mle::IsRouterOrLeader(v2)) {
    uint64_t ChildOrRouter = ot::NeighborTable::FindChildOrRouter(this, a2);
  }
  if (!ChildOrRouter) {
    return ot::NeighborTable::FindParent(this, a2);
  }
  return ChildOrRouter;
}

uint64_t ot::NeighborTable::FindChildOrRouter( ot::NeighborTable *this, const ot::Neighbor::AddressMatcher *a2)
{
  uint64_t v2 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  ot::ChildTable::FindChild(v2, a2);
  uint64_t v8 = v3;
  if (!v3)
  {
    uint64_t v4 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(this);
    ot::RouterTable::FindRouter(v4, a2);
    return v5;
  }

  return v8;
}

uint64_t ot::NeighborTable::FindNeighbor(ot::NeighborTable *a1, unsigned __int16 a2, char a3)
{
  int v9 = a1;
  unsigned __int16 v8 = a2;
  char v7 = a3;
  uint64_t v6 = 0LL;
  if (a2 != 0xFFFF && v8 != 65534)
  {
    ot::Neighbor::AddressMatcher::AddressMatcher((uint64_t)v5, v8, v7);
    return ot::NeighborTable::FindNeighbor(a1, (const ot::Neighbor::AddressMatcher *)v5);
  }

  return v6;
}

uint64_t ot::NeighborTable::FindNeighbor(ot::NeighborTable *a1, uint64_t a2, char a3)
{
  char v7 = a1;
  uint64_t v6 = a2;
  v5[23] = a3;
  ot::Neighbor::AddressMatcher::AddressMatcher((uint64_t)v5, a2, a3);
  return ot::NeighborTable::FindNeighbor(a1, (const ot::Neighbor::AddressMatcher *)v5);
}

uint64_t ot::NeighborTable::FindNeighbor(ot::NeighborTable *a1, ot::Mac::Address *a2, char a3)
{
  char v7 = a1;
  uint64_t v6 = a2;
  v5[23] = a3;
  ot::Neighbor::AddressMatcher::AddressMatcher((uint64_t)v5, a2, a3);
  return ot::NeighborTable::FindNeighbor(a1, (const ot::Neighbor::AddressMatcher *)v5);
}

void ot::RouterTable::FindRouter(ot::RouterTable *this, const ot::Neighbor::AddressMatcher *a2)
{
}

{
  __ZN2ot11RouterTable10FindRouterERKNS_8Neighbor14AddressMatcherE(this, a2);
}

uint64_t ot::NeighborTable::FindNeighbor(ot::InstanceLocator *a1, ot::Ip6::Address *a2, char a3)
{
  char v22 = a1;
  char v21 = a2;
  char v20 = a3;
  uint64_t v19 = 0LL;
  ot::Mac::Address::Address((ot::Mac::Address *)v18);
  if (ot::Ip6::Address::IsLinkLocal(v21))
  {
    Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v21);
    ot::Ip6::InterfaceIdentifier::ConvertToMacAddress(Iid, (ot::Mac::Address *)v18);
  }

  uint64_t v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1);
  if (ot::Mle::Mle::IsRoutingLocator(v4, v21))
  {
    uint64_t v5 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v21);
    __int16 Locator = ot::Ip6::InterfaceIdentifier::GetLocator(v5);
    ot::Mac::Address::SetShort((uint64_t)v18, Locator);
  }

  if (ot::Mac::Address::IsNone((ot::Mac::Address *)v18))
  {
    char v7 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(a1);
    char v15 = ot::ChildTable::Iterate(v7, v20);
    uint64_t v16 = (ot::ChildTable::IteratorBuilder *)&v15;
    v14[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v15);
    v14[1] = v8;
    v13[0] = ot::ChildTable::IteratorBuilder::end(v16);
    v13[1] = v9;
    while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v14, v13))
    {
      uint64_t v12 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v14);
      if (ot::Child::HasIp6Address(v12, v21)) {
        return (uint64_t)v12;
      }
      ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v14);
    }
  }

  else
  {
    ot::Neighbor::AddressMatcher::AddressMatcher((uint64_t)v17, (ot::Mac::Address *)v18, v20);
    return ot::NeighborTable::FindNeighbor(a1, (const ot::Neighbor::AddressMatcher *)v17);
  }

  return v19;
}

uint64_t ot::NeighborTable::FindRxOnlyNeighborRouter(ot::NeighborTable *this, const ot::Mac::Address *a2)
{
  uint64_t v7 = 0LL;
  uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
  if (ot::Mle::Mle::IsChild(v2))
  {
    uint64_t v3 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(this);
    ot::RouterTable::FindNeighbor(v3, a2);
    return v4;
  }

  return v7;
}

uint64_t ot::NeighborTable::GetNextNeighborInfo( ot::InstanceLocator *a1, unsigned __int16 *a2, ot::Neighbor::Info *a3)
{
  unsigned int v12 = 0;
  if ((*a2 & 0x8000u) != 0)
  {
LABEL_8:
    for (__int16 i = -*a2; i <= 62; ++i)
    {
      uint64_t v4 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(a1);
      ot::RouterTable::FindRouterById(v4, i);
      uint64_t v8 = v5;
      if (v5 && ot::Neighbor::IsStateValid(v5))
      {
        ot::Neighbor::Info::SetFrom(a3, v8);
        *((_BYTE *)a3 + 54) &= ~8u;
        *a2 = -(__int16)(i + 1);
        return v12;
      }
    }

    *a2 = -i;
    return 23;
  }

  else
  {
    for (unsigned __int16 j = *a2; ; ++j)
    {
      uint64_t v3 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(a1);
      ChildAtIndex = (ot::Neighbor *)ot::ChildTable::GetChildAtIndex(v3, j);
      if (!ChildAtIndex)
      {
        *a2 = 0;
        goto LABEL_8;
      }

      if (ot::Neighbor::IsStateValid(ChildAtIndex)) {
        break;
      }
    }

    ot::Neighbor::Info::SetFrom(a3, ChildAtIndex);
    *((_BYTE *)a3 + 54) = *((_BYTE *)a3 + 54) & 0xF7 | 8;
    *a2 = j + 1;
  }

  return v12;
}

uint64_t ot::NeighborTable::Signal(ot::InstanceLocator *a1, unsigned __int8 a2, ot::Neighbor *a3)
{
  PowerControlunsigned __int16 Mode = ot::Neighbor::GetPowerControlMode(a3);
  if (a2 != 3 && a2)
  {
    if ((a2 == 4 || a2 == 1) && (otPowerControlGetFlagTpcEntriesRemoved() & 1) == 0)
    {
      Instance = ot::InstanceLocator::GetInstance(a1);
      unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(a3);
      uint64_t ExtAddress = ot::Neighbor::GetExtAddress(a3);
      otPowerControlNeighborRemoved((uint64_t)Instance, Rloc16, ExtAddress, PowerControlMode, v14, v15, v16, v17);
    }
  }

  else
  {
    int v48 = ot::InstanceLocator::GetInstance(a1);
    unsigned __int16 v46 = ot::Neighbor::GetRloc16(a3);
    uint64_t v47 = ot::Neighbor::GetExtAddress(a3);
    BOOL IsRxOnWhenIdle = ot::Neighbor::IsRxOnWhenIdle(a3);
    otPowerControlNeighborAdded((uint64_t)v48, v46, v47, PowerControlMode, IsRxOnWhenIdle, v10, v11, v12);
  }

  if (a2)
  {
    if (a2 == 1)
    {
      ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"NeighborTbl",  "Removing child entry from Radio table",  v3,  v4,  v5,  v6,  v7,  v8,  v39);
      char v42 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(a1);
      unsigned __int16 v25 = ot::Neighbor::GetRloc16(a3);
      if (ot::Radio::ClearChildEntry(v42, v25)) {
        ot::Logger::LogAtLevel<(ot::LogLevel)1>( (ot *)"NeighborTbl",  "Removing child entry from Radio table failed",  v26,  v27,  v28,  v29,  v30,  v31,  v41);
      }
    }
  }

  else
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"NeighborTbl",  "Adding child entry to Radio table",  v3,  v4,  v5,  v6,  v7,  v8,  v39);
    unsigned __int8 v43 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(a1);
    unsigned __int16 v18 = ot::Neighbor::GetRloc16(a3);
    if (ot::Radio::AddChildEntry(v43, v18)) {
      ot::Logger::LogAtLevel<(ot::LogLevel)1>( (ot *)"NeighborTbl",  "Adding child entry to Radio table failed",  v19,  v20,  v21,  v22,  v23,  v24,  v40);
    }
  }

  unsigned __int8 v53 = ot::InstanceLocator::GetInstance(a1);
  if (a2 <= 2u)
  {
    unsigned __int8 v33 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(a1);
    if (!ot::ChildTable::Contains(v33, a3)) {
      __assert_rtn("Signal", "neighbor_table.cpp", 346, "Get<ChildTable>().Contains(aNeighbor)");
    }
    ot::Child::Info::SetFrom((ot::Child::Info *)v54, a3);
  }

  else if (a2 == 4 || a2 == 3)
  {
    ot::Neighbor::Info::SetFrom((ot::Neighbor::Info *)v54, a3);
  }

  uint64_t v34 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::HistoryTracker>(a1);
  uint64_t result = ot::Utils::HistoryTracker::RecordNeighborEvent(v34, a2, (uint64_t)&v53);
  if (*(void *)a1) {
    uint64_t result = (*(uint64_t (**)(void, void **))a1)(a2, &v53);
  }
  if (a2)
  {
    if (a2 == 1)
    {
      char v37 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(a1);
      ot::Notifier::Signal(v37, 2048LL);
      uint64_t v38 = (unsigned __int16 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DuaManager>(a1);
      return ot::DuaManager::UpdateChildDomainUnicastAddress(v38, (uint64_t)a3, 2);
    }
  }

  else
  {
    unsigned __int8 v36 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(a1);
    return ot::Notifier::Signal(v36, 1024LL);
  }

  return result;
}

uint64_t ot::Radio::AddChildEntry(ot::Radio *this, unsigned __int16 a2)
{
  InstancePtr = ot::Radio::GetInstancePtr(this);
  return otPlatRadioAddChildEntry((uint64_t)InstancePtr, a2, v3, v4, v5, v6, v7, v8);
}

{
  return __ZN2ot5Radio13AddChildEntryEt(this, a2);
}

uint64_t ot::Radio::ClearChildEntry(ot::Radio *this, unsigned __int16 a2)
{
  InstancePtr = ot::Radio::GetInstancePtr(this);
  return otPlatRadioClearChildEntry((uint64_t)InstancePtr, a2, v3, v4, v5, v6, v7, v8);
}

{
  return __ZN2ot5Radio15ClearChildEntryEt(this, a2);
}

uint64_t ot::NetworkData::NetworkData::CopyNetworkData( ot::InstanceLocator *a1, char a2, unsigned __int8 *a3, char *a4)
{
  uint64_t v13 = a1;
  char v12 = a2;
  uint64_t v11 = a3;
  uint64_t v10 = a4;
  Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(a1);
  ot::NetworkData::MutableNetworkData::MutableNetworkData( (ot::NetworkData::MutableNetworkData *)v8,  Instance,  v11,  0,  *v10);
  unsigned int v9 = ot::NetworkData::NetworkData::CopyNetworkData((uint64_t)a1, v12, (ot::NetworkData::MutableNetworkData *)v8);
  if (!v9)
  {
    char Length = ot::NetworkData::NetworkData::GetLength((ot::NetworkData::NetworkData *)v8);
    char *v10 = Length;
  }

  return v9;
}

uint64_t ot::NetworkData::NetworkData::CopyNetworkData( uint64_t a1, char a2, ot::NetworkData::MutableNetworkData *a3)
{
  unsigned int v6 = 0;
  if (*(unsigned __int8 *)(a1 + 8) <= (int)ot::NetworkData::MutableNetworkData::GetSize(a3))
  {
    ot::NetworkData::MutableNetworkData::GetBytes(a3);
    memcpy(v3, *(const void **)a1, *(unsigned __int8 *)(a1 + 8));
    ot::NetworkData::MutableNetworkData::SetLength((uint64_t)a3, *(_BYTE *)(a1 + 8));
    ot::NetworkData::NetworkData::PrintServiceTLVInfo(a3);
    if (a2 == 1) {
      ot::NetworkData::MutableNetworkData::RemoveTemporaryData(a3);
    }
  }

  else
  {
    return 3;
  }

  return v6;
}

uint64_t ot::NetworkData::MutableNetworkData::GetSize(ot::NetworkData::MutableNetworkData *this)
{
  return *((unsigned __int8 *)this + 9);
}

{
  return __ZNK2ot11NetworkData18MutableNetworkData7GetSizeEv(this);
}

void ot::NetworkData::MutableNetworkData::GetBytes(ot::NetworkData::MutableNetworkData *this)
{
}

{
  __ZN2ot11NetworkData18MutableNetworkData8GetBytesEv(this);
}

uint64_t ot::NetworkData::MutableNetworkData::SetLength(uint64_t this, char a2)
{
  *(_BYTE *)(this + 8) = a2;
  return this;
}

{
  return __ZN2ot11NetworkData18MutableNetworkData9SetLengthEh(this, a2);
}

void ot::NetworkData::NetworkData::PrintServiceTLVInfo(ot::NetworkData::NetworkData *this)
{
  int v52 = this;
  unsigned __int8 v43 = this;
  unsigned __int8 v51 = 0;
  NextThreadService = 0LL;
  unsigned __int16 v44 = v49;
  ot::Data<(ot::DataLengthType)0>::InitFrom<unsigned char>( (uint64_t)v49,  (uint64_t)&ot::NetworkData::Service::DnsSrpUnicast::kServiceData);
  uint64_t v1 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(v43);
  NextThreadService = ot::NetworkData::NetworkData::FindNextThreadService(v1, NextThreadService, (uint64_t)v49, 0);
  if (NextThreadService)
  {
    int v48 = 0;
    if (ot::Data<(ot::DataLengthType)0>::GetLength((uint64_t)v49) <= 3uLL)
    {
      char v41 = v49;
      *(void *)char v42 = ot::Data<(ot::DataLengthType)0>::GetBytes((uint64_t)v49);
      unsigned __int8 Length = ot::Data<(ot::DataLengthType)0>::GetLength((uint64_t)v49);
      encode_data_into_string(*(unsigned __int8 **)v42, Length, (char *)&v48, 4uLL, 0);
      ot::NetworkData::TlvIterator::TlvIterator((ot::NetworkData::TlvIterator *)v47, NextThreadService);
      unsigned __int16 v46 = 0LL;
      while (1)
      {
        ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::ServerTlv>((uint64_t)v47);
        unsigned __int16 v46 = v3;
        if (!v3) {
          break;
        }
        ++v51;
        memset(__b, 0, sizeof(__b));
        char v40 = v45;
        ot::NetworkData::ServerTlv::GetServerData(v46, (uint64_t)v45);
        if (ot::Data<(ot::DataLengthType)0>::GetLength((uint64_t)v40) >= 0x64uLL)
        {
          uint64_t v19 = ot::Data<(ot::DataLengthType)0>::GetLength((uint64_t)v45);
          ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)"NetworkData",  "%s:Error ServerDataLen:%d",  v12,  v13,  v14,  v15,  v16,  v17,  (char)"PrintServiceTLVInfo");
        }

        else
        {
          uint64_t v30 = v45;
          *(void *)uint64_t v29 = ot::Data<(ot::DataLengthType)0>::GetBytes((uint64_t)v45);
          unsigned __int8 v4 = ot::Data<(ot::DataLengthType)0>::GetLength((uint64_t)v30);
          unsigned __int8 v36 = __b;
          encode_data_into_string(*(unsigned __int8 **)v29, v4, __b, 0x64uLL, 0);
          unsigned int v31 = v51;
          int Type = ot::NetworkData::NetworkDataTlv::GetType(NextThreadService);
          unsigned int EnterpriseNumber = ot::NetworkData::ServiceTlv::GetEnterpriseNumber(NextThreadService);
          ServiceDataunsigned __int8 Length = ot::NetworkData::ServiceTlv::GetServiceDataLength(NextThreadService);
          BOOL IsStable = ot::NetworkData::NetworkDataTlv::IsStable(v46);
          int v37 = ot::Data<(ot::DataLengthType)0>::GetLength((uint64_t)v30);
          int Server16 = ot::NetworkData::ServerTlv::GetServer16(v46);
          unsigned __int8 ServiceId = ot::NetworkData::ServiceTlv::GetServiceId(NextThreadService);
          char v39 = &v18;
          uint64_t v19 = v31;
          uint64_t v20 = Type;
          uint64_t v21 = EnterpriseNumber;
          uint64_t v22 = &v48;
          uint64_t v23 = ServiceDataLength;
          BOOL v24 = IsStable;
          unsigned __int16 v25 = v36;
          uint64_t v26 = v37;
          uint64_t v27 = (unsigned __int16)Server16;
          uint64_t v28 = ServiceId;
          ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"NetworkData",  "%s: Entry:%d ServiceType:%d, EnterpriseNumber:%d, ServiceData:%s, ServiceDataLen:%d, Stable:%d, ServerData:% s, ServerDataLen:%d, Rloc16:0x%04x, Sid:%d",  v6,  v7,  v8,  v9,  v10,  v11,  (char)"PrintServiceTLVInfo");
        }
      }
    }
  }

void ot::NetworkData::MutableNetworkData::RemoveTemporaryData(ot::NetworkData::MutableNetworkData *this)
{
  Next = v1;
  while (1)
  {
    ot::NetworkData::MutableNetworkData::GetTlvsEnd(this);
    int Type = ot::NetworkData::NetworkDataTlv::GetType(Next);
    if (Type == 1)
    {
      ot::NetworkData::As<ot::NetworkData::PrefixTlv>();
      uint64_t v8 = v3;
      ot::NetworkData::MutableNetworkData::RemoveTemporaryDataIn(this, v3);
      goto LABEL_12;
    }

    if (Type == 5)
    {
      ot::NetworkData::As<ot::NetworkData::ServiceTlv>();
      uint64_t v7 = v4;
      ot::NetworkData::MutableNetworkData::RemoveTemporaryDataIn(this, v4);
LABEL_12:
      ot::NetworkData::MutableNetworkData::RemoveTlv(this, Next);
    }

    else
    {
      if (!ot::NetworkData::NetworkDataTlv::IsStable(Next)) {
        goto LABEL_12;
      }
LABEL_13:
      Next = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(Next);
    }
  }

uint64_t ot::Data<(ot::DataLengthType)0>::InitFrom<unsigned char>(uint64_t a1, uint64_t a2)
{
  return ot::Data<(ot::DataLengthType)0>::Init(a1, a2, 1);
}

{
  return __ZN2ot4DataILNS_14DataLengthTypeE0EE8InitFromIhEEvRKT_(a1, a2);
}

ot::NetworkData::ServiceTlv *ot::NetworkData::NetworkData::FindNextThreadService( uint64_t a1, ot::NetworkData::NetworkDataTlv *a2, uint64_t a3, char a4)
{
  return ot::NetworkData::NetworkData::FindNextService(a1, a2, 44970, a3, a4);
}

ot::NetworkData::TlvIterator *ot::NetworkData::TlvIterator::TlvIterator( ot::NetworkData::TlvIterator *this, const ot::NetworkData::ServiceTlv *a2)
{
  uint64_t SubTlvs = ot::NetworkData::ServiceTlv::GetSubTlvs(a2);
  uint64_t Next = ot::NetworkData::NetworkDataTlv::GetNext(a2);
  ot::Cli::Dataset::Dataset(this, SubTlvs, Next);
  return this;
}

void ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::ServerTlv>(uint64_t a1)
{
}

{
  __ZN2ot11NetworkData11TlvIterator7IterateINS0_9ServerTlvEEEPKT_v(a1);
}

uint64_t ot::NetworkData::ServerTlv::GetServerData(ot::NetworkData::ServerTlv *a1, uint64_t a2)
{
  uint64_t ServerData = ot::NetworkData::ServerTlv::GetServerData(a1);
  ServerDataunsigned __int8 Length = ot::NetworkData::ServerTlv::GetServerDataLength(a1);
  return ot::Data<(ot::DataLengthType)0>::Init(a2, ServerData, ServerDataLength);
}

{
  return __ZNK2ot11NetworkData9ServerTlv13GetServerDataERNS0_10ServerDataE(a1, a2);
}

uint64_t ot::NetworkData::NetworkDataTlv::GetType(ot::NetworkData::NetworkDataTlv *this)
{
  return (int)*(unsigned __int8 *)this >> 1;
}

{
  return __ZNK2ot11NetworkData14NetworkDataTlv7GetTypeEv(this);
}

uint64_t ot::NetworkData::ServiceTlv::GetEnterpriseNumber(ot::NetworkData::ServiceTlv *this)
{
  if (ot::NetworkData::ServiceTlv::IsThreadEnterprise(this)) {
    return 44970;
  }
  else {
    return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*(unsigned int *)((char *)this + 3));
  }
}

{
  return __ZNK2ot11NetworkData10ServiceTlv19GetEnterpriseNumberEv(this);
}

uint64_t ot::NetworkData::ServiceTlv::GetServiceDataLength(ot::NetworkData::ServiceTlv *this)
{
  if (ot::NetworkData::ServiceTlv::IsThreadEnterprise(this)) {
    return *((_BYTE *)this + 3);
  }
  else {
    return *((_BYTE *)this + 7);
  }
}

{
  return __ZNK2ot11NetworkData10ServiceTlv20GetServiceDataLengthEv(this);
}

BOOL ot::NetworkData::NetworkDataTlv::IsStable(ot::NetworkData::NetworkDataTlv *this)
{
  return (*(_BYTE *)this & 1) != 0;
}

{
  return __ZNK2ot11NetworkData14NetworkDataTlv8IsStableEv(this);
}

uint64_t ot::NetworkData::ServerTlv::GetServer16(ot::NetworkData::ServerTlv *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1));
}

{
  return __ZNK2ot11NetworkData9ServerTlv11GetServer16Ev(this);
}

uint64_t ot::NetworkData::ServiceTlv::GetServiceId(ot::NetworkData::ServiceTlv *this)
{
  return *((_BYTE *)this + 2) & 0xF;
}

{
  return __ZNK2ot11NetworkData10ServiceTlv12GetServiceIdEv(this);
}

uint64_t ot::NetworkData::NetworkData::GetNextOnMeshPrefix( const unsigned __int8 **this, unsigned int *a2, ot::NetworkData::OnMeshPrefixConfig *a3)
{
  return ot::NetworkData::NetworkData::GetNextOnMeshPrefix(this, a2, 0xFFFFu, a3);
}

uint64_t ot::NetworkData::NetworkData::GetNextOnMeshPrefix( const unsigned __int8 **this, unsigned int *a2, unsigned __int16 a3, ot::NetworkData::OnMeshPrefixConfig *a4)
{
  uint64_t v8 = this;
  uint64_t v7 = a2;
  unsigned __int16 v6 = a3;
  v5[4] = a4;
  v5[0] = a4;
  memset(&v5[1], 0, 24);
  return ot::NetworkData::NetworkData::Iterate(this, (uint64_t)a2, a3, v5);
}

uint64_t ot::NetworkData::NetworkData::Iterate( const unsigned __int8 **a1, uint64_t a2, unsigned __int16 a3, ot::NetworkData::OnMeshPrefixConfig **a4)
{
  char v45 = a1;
  uint64_t v44 = a2;
  unsigned __int16 v43 = a3;
  char v42 = a4;
  unsigned int v41 = 23;
  ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(&v40, a2);
  while (1)
  {
    Tlv = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkData::NetworkDataIterator::GetTlv( (ot::NetworkData::NetworkData::NetworkDataIterator *)&v40,  *a1);
    BOOL v26 = 0;
    if ((unint64_t)Tlv + 2 <= ot::NetworkData::NetworkData::GetTlvsEnd((ot::NetworkData::NetworkData *)a1))
    {
      unint64_t Next = ot::NetworkData::NetworkDataTlv::GetNext(Tlv);
      BOOL v26 = Next <= ot::NetworkData::NetworkData::GetTlvsEnd((ot::NetworkData::NetworkData *)a1);
    }

    if (!v26) {
      break;
    }
    uint64_t SubTlvs = 0LL;
    int Type = ot::NetworkData::NetworkDataTlv::GetType(Tlv);
    if (Type == 1)
    {
      if (*v42 || v42[1] || v42[3])
      {
        ot::NetworkData::As<ot::NetworkData::PrefixTlv>();
        uint64_t SubTlvs = (const ot::NetworkData::NetworkDataTlv *)ot::NetworkData::PrefixTlv::GetSubTlvs(v4);
      }
    }

    else if (Type == 5 && v42[2])
    {
      ot::NetworkData::As<ot::NetworkData::ServiceTlv>();
      uint64_t SubTlvs = (const ot::NetworkData::NetworkDataTlv *)ot::NetworkData::ServiceTlv::GetSubTlvs(v5);
    }

    if (SubTlvs)
    {
      while (1)
      {
        SubTlv = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkData::NetworkDataIterator::GetSubTlv( (ot::NetworkData::NetworkData::NetworkDataIterator *)&v40,  SubTlvs);
        BOOL v23 = 0;
        if ((unint64_t)SubTlv + 2 <= ot::NetworkData::NetworkDataTlv::GetNext(Tlv))
        {
          unint64_t v22 = ot::NetworkData::NetworkDataTlv::GetNext(SubTlv);
          BOOL v23 = v22 <= ot::NetworkData::NetworkDataTlv::GetNext(Tlv);
        }

        if (!v23) {
          break;
        }
        if (ot::NetworkData::NetworkDataTlv::GetType(Tlv) == 1)
        {
          ot::NetworkData::As<ot::NetworkData::PrefixTlv>();
          unsigned __int8 v36 = v6;
          int v21 = ot::NetworkData::NetworkDataTlv::GetType(SubTlv);
          if (v21)
          {
            if (v21 == 2)
            {
              ot::NetworkData::As<ot::NetworkData::BorderRouterTlv>();
              char v35 = v7;
              if (*v42)
              {
                while (1)
                {
                  unsigned __int8 v34 = ot::NetworkData::NetworkData::NetworkDataIterator::GetAndAdvanceIndex((ot::NetworkData::NetworkData::NetworkDataIterator *)&v40);
                  if (v43 != 0xFFFF)
                  {
                    Entry = (ot::NetworkData::BorderRouterEntry *)ot::NetworkData::BorderRouterTlv::GetEntry(v35, v34);
                    unsigned __int16 Rloc = ot::NetworkData::BorderRouterEntry::GetRloc(Entry);
                    if (v43 != Rloc) {
                      continue;
                    }
                  }

                  uint64_t v10 = (const ot::NetworkData::BorderRouterEntry *)ot::NetworkData::BorderRouterTlv::GetEntry(v35, v34);
                  v42[1] = 0LL;
                  int v42[2] = 0LL;
                  v42[3] = 0LL;
                  ot::NetworkData::OnMeshPrefixConfig::SetFrom(*v42, v36, v35, v10);
                  return 0;
                }
              }
            }

            else if (v21 == 3)
            {
              ot::NetworkData::As<ot::NetworkData::ContextTlv>();
              uint64_t v30 = v15;
              if (v42[3])
              {
                if (ot::NetworkData::NetworkData::NetworkDataIterator::IsNewEntry((ot::NetworkData::NetworkData::NetworkDataIterator *)&v40))
                {
                  *char v42 = 0LL;
                  v42[1] = 0LL;
                  int v42[2] = 0LL;
                  ot::NetworkData::LowpanContextInfo::SetFrom(v42[3], v36, v30);
                  ot::NetworkData::NetworkData::NetworkDataIterator::MarkEntryAsNotNew((ot::NetworkData::NetworkData::NetworkDataIterator *)&v40);
                  return 0;
                }
              }
            }
          }

          else
          {
            ot::NetworkData::As<ot::NetworkData::HasRouteTlv>();
            unsigned __int8 v33 = v11;
            if (v42[1])
            {
              while (1)
              {
                unsigned __int8 v32 = ot::NetworkData::NetworkData::NetworkDataIterator::GetAndAdvanceIndex((ot::NetworkData::NetworkData::NetworkDataIterator *)&v40);
                if (v43 != 0xFFFF)
                {
                  uint64_t v12 = (ot::NetworkData::HasRouteEntry *)ot::NetworkData::HasRouteTlv::GetEntry(v33, v32);
                  unsigned __int16 v13 = ot::NetworkData::HasRouteEntry::GetRloc(v12);
                  if (v43 != v13) {
                    continue;
                  }
                }

                unsigned int v31 = (ot::NetworkData::HasRouteEntry *)ot::NetworkData::HasRouteTlv::GetEntry(v33, v32);
                *char v42 = 0LL;
                int v42[2] = 0LL;
                v42[3] = 0LL;
                uint64_t v20 = v42[1];
                Instance = (ot::Instance *)ot::InstanceLocator::GetInstance((ot::InstanceLocator *)a1);
                ot::NetworkData::ExternalRouteConfig::SetFrom(v20, Instance, v36, v33, v31);
                return 0;
              }
            }
          }
        }

        else
        {
          ot::NetworkData::As<ot::NetworkData::ServiceTlv>();
          uint64_t v29 = v16;
          if (v42[2])
          {
            if (ot::NetworkData::NetworkDataTlv::GetType(SubTlv) == 6)
            {
              ot::NetworkData::As<ot::NetworkData::ServerTlv>();
              uint64_t v28 = v17;
              if (ot::NetworkData::NetworkData::NetworkDataIterator::IsNewEntry((ot::NetworkData::NetworkData::NetworkDataIterator *)&v40))
              {
                if (v43 == 0xFFFF || (unsigned __int16 Server16 = ot::NetworkData::ServerTlv::GetServer16(v28), v43 == Server16))
                {
                  *char v42 = 0LL;
                  v42[1] = 0LL;
                  v42[3] = 0LL;
                  ot::NetworkData::ServiceConfig::SetFrom(v42[2], v29, v28);
                  ot::NetworkData::NetworkData::NetworkDataIterator::MarkEntryAsNotNew((ot::NetworkData::NetworkData::NetworkDataIterator *)&v40);
                  return 0;
                }
              }
            }
          }
        }

        ot::NetworkData::NetworkData::NetworkDataIterator::AdvanceSubTlv( (ot::NetworkData::NetworkData::NetworkDataIterator *)&v40,  SubTlvs);
      }
    }

    ot::NetworkData::NetworkData::NetworkDataIterator::AdvanceTlv( (ot::NetworkData::NetworkData::NetworkDataIterator *)&v40,  *a1);
  }

  return v41;
}

uint64_t ot::NetworkData::NetworkData::GetNextExternalRoute( const unsigned __int8 **this, unsigned int *a2, ot::NetworkData::ExternalRouteConfig *a3)
{
  return ot::NetworkData::NetworkData::GetNextExternalRoute(this, a2, 0xFFFFu, a3);
}

uint64_t ot::NetworkData::NetworkData::GetNextExternalRoute( const unsigned __int8 **this, unsigned int *a2, unsigned __int16 a3, ot::NetworkData::ExternalRouteConfig *a4)
{
  uint64_t v8 = this;
  uint64_t v7 = a2;
  unsigned __int16 v6 = a3;
  v5[4] = a4;
  v5[0] = 0LL;
  v5[1] = a4;
  char v5[2] = 0LL;
  v5[3] = 0LL;
  return ot::NetworkData::NetworkData::Iterate(this, (uint64_t)a2, a3, v5);
}

uint64_t ot::NetworkData::NetworkData::GetNextService( const unsigned __int8 **this, unsigned int *a2, ot::NetworkData::ServiceConfig *a3)
{
  return ot::NetworkData::NetworkData::GetNextService(this, a2, 0xFFFFu, a3);
}

uint64_t ot::NetworkData::NetworkData::GetNextService( const unsigned __int8 **this, unsigned int *a2, unsigned __int16 a3, ot::NetworkData::ServiceConfig *a4)
{
  uint64_t v8 = this;
  uint64_t v7 = a2;
  unsigned __int16 v6 = a3;
  v5[4] = a4;
  v5[0] = 0LL;
  v5[1] = 0LL;
  char v5[2] = a4;
  v5[3] = 0LL;
  return ot::NetworkData::NetworkData::Iterate(this, (uint64_t)a2, a3, v5);
}

uint64_t ot::NetworkData::NetworkData::GetNextLowpanContextInfo( ot::NetworkData::NetworkData *this, ot::NetworkData::OnMeshPrefixConfig *a2, ot::NetworkData::LowpanContextInfo *a3)
{
  v4[6] = this;
  v4[5] = a2;
  v4[4] = a3;
  memset(v4, 0, 24);
  v4[3] = a3;
  return ot::NetworkData::NetworkData::Iterate((const unsigned __int8 **)this, (uint64_t)a2, 0xFFFFu, v4);
}

const unsigned __int8 *ot::NetworkData::NetworkData::NetworkDataIterator::GetTlv( ot::NetworkData::NetworkData::NetworkDataIterator *this, const unsigned __int8 *a2)
{
  return &a2[ot::NetworkData::NetworkData::NetworkDataIterator::GetTlvOffset(this)];
}

{
  return __ZNK2ot11NetworkData11NetworkData19NetworkDataIterator6GetTlvEPKh(this, a2);
}

uint64_t ot::NetworkData::NetworkData::GetTlvsEnd(ot::NetworkData::NetworkData *this)
{
  return *(void *)this + *((unsigned __int8 *)this + 8);
}

{
  return __ZNK2ot11NetworkData11NetworkData10GetTlvsEndEv(this);
}

uint64_t ot::NetworkData::NetworkDataTlv::GetNext(ot::NetworkData::NetworkDataTlv *this)
{
  return (uint64_t)this + *((unsigned __int8 *)this + 1) + 2;
}

  ;
}

{
  return (uint64_t)this + *((unsigned __int8 *)this + 1) + 2;
}

{
  return __ZN2ot11NetworkData14NetworkDataTlv7GetNextEv(this);
}

{
  return __ZNK2ot11NetworkData14NetworkDataTlv7GetNextEv(this);
}

uint64_t ot::NetworkData::PrefixTlv::GetSubTlvs(ot::NetworkData::PrefixTlv *this)
{
  uint64_t Prefix = ot::NetworkData::PrefixTlv::GetPrefix(this);
  return Prefix + ot::Ip6::Prefix::SizeForLength((ot::Ip6::Prefix *)*((unsigned __int8 *)this + 3));
}

  ;
}

{
  uint64_t Prefix;
  uint64_t Prefix = ot::NetworkData::PrefixTlv::GetPrefix(this);
  return Prefix + ot::Ip6::Prefix::SizeForLength((ot::Ip6::Prefix *)*((unsigned __int8 *)this + 3));
}

  ;
}

{
  return __ZN2ot11NetworkData9PrefixTlv10GetSubTlvsEv(this);
}

{
  return __ZNK2ot11NetworkData9PrefixTlv10GetSubTlvsEv(this);
}

uint64_t ot::NetworkData::ServiceTlv::GetSubTlvs(ot::NetworkData::ServiceTlv *this)
{
  uint64_t Value = ot::NetworkData::NetworkDataTlv::GetValue(this);
  return Value + ot::NetworkData::ServiceTlv::GetFieldsLength(this);
}

{
  uint64_t Value;
  uint64_t Value = ot::NetworkData::NetworkDataTlv::GetValue(this);
  return Value + ot::NetworkData::ServiceTlv::GetFieldsLength(this);
}

  ;
}

{
  return __ZN2ot11NetworkData10ServiceTlv10GetSubTlvsEv(this);
}

{
  return __ZNK2ot11NetworkData10ServiceTlv10GetSubTlvsEv(this);
}

uint64_t ot::NetworkData::NetworkData::NetworkDataIterator::GetSubTlv( ot::NetworkData::NetworkData::NetworkDataIterator *this, const ot::NetworkData::NetworkDataTlv *a2)
{
  return (uint64_t)a2 + ot::NetworkData::NetworkData::NetworkDataIterator::GetSubTlvOffset(this);
}

  ;
}

{
  return __ZNK2ot11NetworkData11NetworkData19NetworkDataIterator9GetSubTlvEPKNS0_14NetworkDataTlvE(this, a2);
}

uint64_t ot::NetworkData::NetworkData::NetworkDataIterator::GetAndAdvanceIndex( ot::NetworkData::NetworkData::NetworkDataIterator *this)
{
  uint64_t v1 = *(void *)this;
  uint64_t result = *(unsigned __int8 *)(*(void *)this + 2LL);
  *(_BYTE *)(v1 + 2) = result + 1;
  return result;
}

{
  return __ZN2ot11NetworkData11NetworkData19NetworkDataIterator18GetAndAdvanceIndexEv(this);
}

uint64_t ot::NetworkData::BorderRouterTlv::GetNumEntries(ot::NetworkData::BorderRouterTlv *this)
{
  return ot::NetworkData::NetworkDataTlv::GetLength(this) / 4u;
}

{
  return __ZNK2ot11NetworkData15BorderRouterTlv13GetNumEntriesEv(this);
}

uint64_t ot::NetworkData::BorderRouterTlv::GetEntry( ot::NetworkData::BorderRouterTlv *this, unsigned __int8 a2)
{
  return ot::NetworkData::NetworkDataTlv::GetValue(this) + 4LL * a2;
}

{
  return ot::NetworkData::NetworkDataTlv::GetValue(this) + 4LL * a2;
}

{
  return __ZN2ot11NetworkData15BorderRouterTlv8GetEntryEh(this, a2);
}

{
  return __ZNK2ot11NetworkData15BorderRouterTlv8GetEntryEh(this, a2);
}

uint64_t ot::NetworkData::BorderRouterEntry::GetRloc(ot::NetworkData::BorderRouterEntry *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)this);
}

  ;
}

{
  return __ZNK2ot11NetworkData17BorderRouterEntry7GetRlocEv(this);
}

uint64_t ot::NetworkData::HasRouteTlv::GetNumEntries(ot::NetworkData::HasRouteTlv *this)
{
  return ot::NetworkData::NetworkDataTlv::GetLength(this) / 3u;
}

{
  return __ZNK2ot11NetworkData11HasRouteTlv13GetNumEntriesEv(this);
}

uint64_t ot::NetworkData::HasRouteTlv::GetEntry(ot::NetworkData::HasRouteTlv *this, unsigned __int8 a2)
{
  return ot::NetworkData::NetworkDataTlv::GetValue(this) + 3LL * a2;
}

{
  return ot::NetworkData::NetworkDataTlv::GetValue(this) + 3LL * a2;
}

{
  return __ZN2ot11NetworkData11HasRouteTlv8GetEntryEh(this, a2);
}

{
  return __ZNK2ot11NetworkData11HasRouteTlv8GetEntryEh(this, a2);
}

uint64_t ot::NetworkData::HasRouteEntry::GetRloc(ot::NetworkData::HasRouteEntry *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)this);
}

  ;
}

{
  return __ZNK2ot11NetworkData13HasRouteEntry7GetRlocEv(this);
}

BOOL ot::NetworkData::NetworkData::NetworkDataIterator::IsNewEntry( ot::NetworkData::NetworkData::NetworkDataIterator *this)
{
  return ot::NetworkData::NetworkData::NetworkDataIterator::GetEntryIndex(this) == 0;
}

{
  return __ZNK2ot11NetworkData11NetworkData19NetworkDataIterator10IsNewEntryEv(this);
}

uint64_t ot::NetworkData::NetworkData::NetworkDataIterator::MarkEntryAsNotNew( ot::NetworkData::NetworkData::NetworkDataIterator *this)
{
  return ot::NetworkData::NetworkData::NetworkDataIterator::SetEntryIndex((uint64_t)this, 1);
}

  ;
}

{
  return __ZN2ot11NetworkData11NetworkData19NetworkDataIterator17MarkEntryAsNotNewEv(this);
}

uint64_t ot::NetworkData::NetworkData::NetworkDataIterator::AdvanceSubTlv( ot::NetworkData::NetworkData::NetworkDataIterator *this, const ot::NetworkData::NetworkDataTlv *a2)
{
  SubTlv = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkData::NetworkDataIterator::GetSubTlv(this, a2);
  unint64_t Next = (const ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(SubTlv);
  ot::NetworkData::NetworkData::NetworkDataIterator::SaveSubTlvOffset(this, Next, a2);
  return ot::NetworkData::NetworkData::NetworkDataIterator::SetEntryIndex((uint64_t)this, 0);
}

{
  return __ZN2ot11NetworkData11NetworkData19NetworkDataIterator13AdvanceSubTlvEPKNS0_14NetworkDataTlvE(this, a2);
}

uint64_t ot::NetworkData::NetworkData::NetworkDataIterator::AdvanceTlv( ot::NetworkData::NetworkData::NetworkDataIterator *this, const unsigned __int8 *a2)
{
  Tlv = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkData::NetworkDataIterator::GetTlv(this, a2);
  unint64_t Next = (const ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(Tlv);
  ot::NetworkData::NetworkData::NetworkDataIterator::SaveTlvOffset(this, Next, a2);
  ot::NetworkData::NetworkData::NetworkDataIterator::SetSubTlvOffset((uint64_t)this, 0);
  return ot::NetworkData::NetworkData::NetworkDataIterator::SetEntryIndex((uint64_t)this, 0);
}

{
  return __ZN2ot11NetworkData11NetworkData19NetworkDataIterator10AdvanceTlvEPKh(this, a2);
}

uint64_t ot::NetworkData::NetworkData::ContainsOnMeshPrefix( const unsigned __int8 **this, const ot::NetworkData::OnMeshPrefixConfig *a2)
{
  uint64_t v8 = this;
  uint64_t v7 = (unsigned __int16 *)a2;
  char v6 = 0;
  unsigned int v5 = 0;
  while (!ot::NetworkData::NetworkData::GetNextOnMeshPrefix( this,  &v5,  v7[10],  (ot::NetworkData::OnMeshPrefixConfig *)v4))
  {
    if (ot::Equatable<ot::NetworkData::OnMeshPrefixConfig>::operator==(v4, v7))
    {
      char v6 = 1;
      return v6 & 1;
    }
  }

  return v6 & 1;
}

BOOL ot::Equatable<ot::NetworkData::OnMeshPrefixConfig>::operator==(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 0x18uLL) == 0;
}

{
  return __ZNK2ot9EquatableINS_11NetworkData18OnMeshPrefixConfigEEeqERKS2_(a1, a2);
}

uint64_t ot::NetworkData::NetworkData::ContainsExternalRoute( const unsigned __int8 **this, const ot::NetworkData::ExternalRouteConfig *a2)
{
  uint64_t v8 = this;
  uint64_t v7 = (unsigned __int16 *)a2;
  char v6 = 0;
  unsigned int v5 = 0;
  while (!ot::NetworkData::NetworkData::GetNextExternalRoute( this,  &v5,  v7[9],  (ot::NetworkData::ExternalRouteConfig *)v4))
  {
    if (ot::Equatable<ot::NetworkData::ExternalRouteConfig>::operator==(v4, v7))
    {
      char v6 = 1;
      return v6 & 1;
    }
  }

  return v6 & 1;
}

BOOL ot::Equatable<ot::NetworkData::ExternalRouteConfig>::operator==(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 0x18uLL) == 0;
}

{
  return __ZNK2ot9EquatableINS_11NetworkData19ExternalRouteConfigEEeqERKS2_(a1, a2);
}

uint64_t ot::NetworkData::NetworkData::ContainsService( const unsigned __int8 **this, const ot::NetworkData::ServiceConfig *a2)
{
  uint64_t v8 = this;
  uint64_t v7 = a2;
  char v6 = 0;
  unsigned int v5 = 0;
  while (1)
  {
    uint64_t ServerConfig = ot::NetworkData::ServiceConfig::GetServerConfig(v7);
    if (ot::NetworkData::NetworkData::GetNextService( this,  &v5,  *(_WORD *)(ServerConfig + 250),  (ot::NetworkData::ServiceConfig *)v9)) {
      break;
    }
    if (ot::NetworkData::ServiceConfig::operator==((uint64_t)v9, (uint64_t)v7))
    {
      char v6 = 1;
      return v6 & 1;
    }
  }

  return v6 & 1;
}

uint64_t ot::NetworkData::ServiceConfig::GetServerConfig(ot::NetworkData::ServiceConfig *this)
{
  return (uint64_t)this + 262;
}

{
  return (uint64_t)this + 262;
}

{
  return __ZN2ot11NetworkData13ServiceConfig15GetServerConfigEv(this);
}

{
  return __ZNK2ot11NetworkData13ServiceConfig15GetServerConfigEv(this);
}

uint64_t ot::NetworkData::NetworkData::ContainsEntriesFrom( const unsigned __int8 **this, const unsigned __int8 **a2, unsigned __int16 a3)
{
  uint64_t v15 = this;
  uint64_t v14 = a2;
  unsigned __int16 v13 = a3;
  char v12 = 1;
  int v11 = 0;
  while (1)
  {
    uint64_t v7 = (ot::NetworkData::OnMeshPrefixConfig *)&v6;
    uint64_t v8 = (ot::NetworkData::ExternalRouteConfig *)&v5;
    uint64_t v9 = (ot::NetworkData::ServiceConfig *)&v16;
    uint64_t v10 = 0LL;
    if (v7 && (ot::NetworkData::NetworkData::ContainsOnMeshPrefix(this, v7) & 1) == 0
      || v8 && (ot::NetworkData::NetworkData::ContainsExternalRoute(this, v8) & 1) == 0
      || v9 && (ot::NetworkData::NetworkData::ContainsService(this, v9) & 1) == 0)
    {
      char v12 = 0;
      return v12 & 1;
    }
  }

  return v12 & 1;
}

void ot::NetworkData::MutableNetworkData::GetTlvsStart(ot::NetworkData::MutableNetworkData *this)
{
}

{
  __ZN2ot11NetworkData18MutableNetworkData12GetTlvsStartEv(this);
}

void ot::NetworkData::MutableNetworkData::GetTlvsEnd(ot::NetworkData::MutableNetworkData *this)
{
}

  ;
}

{
  __ZN2ot11NetworkData18MutableNetworkData10GetTlvsEndEv(this);
}

unint64_t ot::NetworkData::MutableNetworkData::RemoveTemporaryDataIn( ot::NetworkData::MutableNetworkData *this, ot::NetworkData::PrefixTlv *a2)
{
  uint64_t SubTlvs = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::PrefixTlv::GetSubTlvs(a2);
  while (1)
  {
    unint64_t result = ot::NetworkData::NetworkDataTlv::GetNext(a2);
    if (ot::NetworkData::NetworkDataTlv::IsStable(SubTlvs))
    {
      int Type = ot::NetworkData::NetworkDataTlv::GetType(SubTlvs);
      if (Type)
      {
        if (Type == 2)
        {
          ot::NetworkData::As<ot::NetworkData::BorderRouterTlv>();
          uint64_t v15 = v3;
          ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::ContextTlv>((uint64_t)a2);
          uint64_t v14 = v4;
          for (__int16 i = (ot::NetworkData::BorderRouterEntry *)ot::NetworkData::BorderRouterTlv::GetFirstEntry(v15);
                (unint64_t)i <= ot::NetworkData::BorderRouterTlv::GetLastEntry(v15);
                __int16 i = (ot::NetworkData::BorderRouterEntry *)ot::NetworkData::BorderRouterEntry::GetNext(i))
          {
            if ((ot::NetworkData::BorderRouterEntry::IsDhcp(i) || ot::NetworkData::BorderRouterEntry::IsConfigure(i))
              && v14)
            {
              unsigned __int8 ContextId = ot::NetworkData::ContextTlv::GetContextId(v14);
              ot::NetworkData::BorderRouterEntry::SetRloc(i, ContextId | 0xFC00);
            }

            else
            {
              ot::NetworkData::BorderRouterEntry::SetRloc(i, 0xFFFEu);
            }
          }
        }
      }

      else
      {
        ot::NetworkData::As<ot::NetworkData::HasRouteTlv>();
        char v12 = v6;
        for (unsigned __int16 j = (ot::NetworkData::HasRouteEntry *)ot::NetworkData::HasRouteTlv::GetFirstEntry(v6);
              (unint64_t)j <= ot::NetworkData::HasRouteTlv::GetLastEntry(v12);
              unsigned __int16 j = (ot::NetworkData::HasRouteEntry *)ot::NetworkData::HasRouteEntry::GetNext(j))
        {
          ot::NetworkData::HasRouteEntry::SetRloc(j, 0xFFFEu);
        }
      }

      uint64_t SubTlvs = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(SubTlvs);
    }

    else
    {
      char Size = ot::NetworkData::NetworkDataTlv::GetSize(SubTlvs);
      ot::NetworkData::MutableNetworkData::RemoveTlv(this, SubTlvs);
      SubTlvsunsigned __int8 Length = ot::NetworkData::PrefixTlv::GetSubTlvsLength(a2);
      ot::NetworkData::PrefixTlv::SetSubTlvsLength(a2, SubTlvsLength - Size);
    }
  }

  return result;
}

uint64_t ot::NetworkData::PrefixTlv::GetSubTlvsLength(ot::NetworkData::PrefixTlv *this)
{
  char Length = ot::NetworkData::NetworkDataTlv::GetLength(this);
  return (Length
}

{
  return __ZNK2ot11NetworkData9PrefixTlv16GetSubTlvsLengthEv(this);
}

void *ot::NetworkData::MutableNetworkData::RemoveTlv( ot::NetworkData::MutableNetworkData *this, ot::NetworkData::NetworkDataTlv *a2)
{
  unsigned __int8 Size = ot::NetworkData::NetworkDataTlv::GetSize(a2);
  return ot::NetworkData::MutableNetworkData::Remove(this, (char *)a2, Size);
}

  ;
}

unint64_t ot::NetworkData::MutableNetworkData::RemoveTemporaryDataIn( ot::NetworkData::MutableNetworkData *this, ot::NetworkData::ServiceTlv *a2)
{
  uint64_t SubTlvs = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::ServiceTlv::GetSubTlvs(a2);
  while (1)
  {
    unint64_t result = ot::NetworkData::NetworkDataTlv::GetNext(a2);
    if (ot::NetworkData::NetworkDataTlv::IsStable(SubTlvs))
    {
      if (ot::NetworkData::NetworkDataTlv::GetType(SubTlvs) == 6)
      {
        ot::NetworkData::As<ot::NetworkData::ServerTlv>();
        uint64_t v7 = v3;
        unsigned __int8 ServiceId = ot::NetworkData::ServiceTlv::GetServiceId(a2);
        unsigned __int16 v5 = ot::Mle::ServiceAlocFromId((ot::Mle *)ServiceId);
        ot::NetworkData::ServerTlv::SetServer16(v7, v5);
      }

      uint64_t SubTlvs = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(SubTlvs);
    }

    else
    {
      char Size = ot::NetworkData::NetworkDataTlv::GetSize(SubTlvs);
      ot::NetworkData::MutableNetworkData::RemoveTlv(this, SubTlvs);
      SubTlvschar Length = ot::NetworkData::ServiceTlv::GetSubTlvsLength(a2);
      ot::NetworkData::ServiceTlv::SetSubTlvsLength(a2, SubTlvsLength - Size);
    }
  }

  return result;
}

uint64_t ot::NetworkData::ServiceTlv::GetSubTlvsLength(ot::NetworkData::ServiceTlv *this)
{
  char Length = ot::NetworkData::NetworkDataTlv::GetLength(this);
  return (Length - ot::NetworkData::ServiceTlv::GetFieldsLength(this));
}

{
  return __ZN2ot11NetworkData10ServiceTlv16GetSubTlvsLengthEv(this);
}

void ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::ContextTlv>(uint64_t a1)
{
}

{
  __ZN2ot11NetworkData9PrefixTlv10FindSubTlvINS0_10ContextTlvEEEPT_v(a1);
}

uint64_t ot::NetworkData::BorderRouterTlv::GetFirstEntry(ot::NetworkData::BorderRouterTlv *this)
{
  return ot::NetworkData::NetworkDataTlv::GetValue(this);
}

{
  return ot::NetworkData::NetworkDataTlv::GetValue(this);
}

{
  return __ZN2ot11NetworkData15BorderRouterTlv13GetFirstEntryEv(this);
}

{
  return __ZNK2ot11NetworkData15BorderRouterTlv13GetFirstEntryEv(this);
}

uint64_t ot::NetworkData::BorderRouterTlv::GetLastEntry(ot::NetworkData::BorderRouterTlv *this)
{
  uint64_t Value = ot::NetworkData::NetworkDataTlv::GetValue(this);
  return Value + ot::NetworkData::NetworkDataTlv::GetLength(this) - 4;
}

{
  uint64_t Value;
  uint64_t Value = ot::NetworkData::NetworkDataTlv::GetValue(this);
  return Value + ot::NetworkData::NetworkDataTlv::GetLength(this) - 4;
}

{
  return __ZN2ot11NetworkData15BorderRouterTlv12GetLastEntryEv(this);
}

{
  return __ZNK2ot11NetworkData15BorderRouterTlv12GetLastEntryEv(this);
}

BOOL ot::NetworkData::BorderRouterEntry::IsDhcp(ot::NetworkData::BorderRouterEntry *this)
{
  return (ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1)) & 0x800) != 0;
}

{
  return __ZNK2ot11NetworkData17BorderRouterEntry6IsDhcpEv(this);
}

BOOL ot::NetworkData::BorderRouterEntry::IsConfigure(ot::NetworkData::BorderRouterEntry *this)
{
  return (ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1)) & 0x400) != 0;
}

{
  return __ZNK2ot11NetworkData17BorderRouterEntry11IsConfigureEv(this);
}

uint64_t ot::NetworkData::BorderRouterEntry::SetRloc( ot::NetworkData::BorderRouterEntry *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *(_WORD *)this = result;
  return result;
}

{
  return __ZN2ot11NetworkData17BorderRouterEntry7SetRlocEt(this, a2);
}

uint64_t ot::NetworkData::ContextTlv::GetContextId(ot::NetworkData::ContextTlv *this)
{
  return *((_BYTE *)this + 2) & 0xF;
}

{
  return __ZNK2ot11NetworkData10ContextTlv12GetContextIdEv(this);
}

uint64_t ot::NetworkData::BorderRouterEntry::GetNext(ot::NetworkData::BorderRouterEntry *this)
{
  return (uint64_t)this + 4;
}

  ;
}

{
  return (uint64_t)this + 4;
}

{
  return __ZN2ot11NetworkData17BorderRouterEntry7GetNextEv(this);
}

{
  return __ZNK2ot11NetworkData17BorderRouterEntry7GetNextEv(this);
}

uint64_t ot::NetworkData::HasRouteTlv::GetFirstEntry(ot::NetworkData::HasRouteTlv *this)
{
  return ot::NetworkData::NetworkDataTlv::GetValue(this);
}

{
  return ot::NetworkData::NetworkDataTlv::GetValue(this);
}

{
  return __ZN2ot11NetworkData11HasRouteTlv13GetFirstEntryEv(this);
}

{
  return __ZNK2ot11NetworkData11HasRouteTlv13GetFirstEntryEv(this);
}

uint64_t ot::NetworkData::HasRouteTlv::GetLastEntry(ot::NetworkData::HasRouteTlv *this)
{
  uint64_t Value = ot::NetworkData::NetworkDataTlv::GetValue(this);
  return Value + ot::NetworkData::NetworkDataTlv::GetLength(this) - 3;
}

{
  uint64_t Value;
  uint64_t Value = ot::NetworkData::NetworkDataTlv::GetValue(this);
  return Value + ot::NetworkData::NetworkDataTlv::GetLength(this) - 3;
}

{
  return __ZN2ot11NetworkData11HasRouteTlv12GetLastEntryEv(this);
}

{
  return __ZNK2ot11NetworkData11HasRouteTlv12GetLastEntryEv(this);
}

uint64_t ot::NetworkData::HasRouteEntry::SetRloc(ot::NetworkData::HasRouteEntry *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *(_WORD *)this = result;
  return result;
}

{
  return __ZN2ot11NetworkData13HasRouteEntry7SetRlocEt(this, a2);
}

uint64_t ot::NetworkData::HasRouteEntry::GetNext(ot::NetworkData::HasRouteEntry *this)
{
  return (uint64_t)this + 3;
}

{
  return (uint64_t)this + 3;
}

{
  return __ZN2ot11NetworkData13HasRouteEntry7GetNextEv(this);
}

{
  return __ZNK2ot11NetworkData13HasRouteEntry7GetNextEv(this);
}

uint64_t ot::NetworkData::NetworkDataTlv::GetSize(ot::NetworkData::NetworkDataTlv *this)
{
  return (*((_BYTE *)this + 1) + 2);
}

{
  return __ZNK2ot11NetworkData14NetworkDataTlv7GetSizeEv(this);
}

uint64_t ot::NetworkData::PrefixTlv::SetSubTlvsLength(ot::NetworkData::PrefixTlv *this, char a2)
{
  char v2 = ot::Ip6::Prefix::SizeForLength((ot::Ip6::Prefix *)*((unsigned __int8 *)this + 3));
  return ot::NetworkData::NetworkDataTlv::SetLength((uint64_t)this, v2 + 2 + a2);
}

{
  return __ZN2ot11NetworkData9PrefixTlv16SetSubTlvsLengthEh(this, a2);
}

uint64_t ot::NetworkData::ServerTlv::SetServer16(ot::NetworkData::ServerTlv *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + 1) = result;
  return result;
}

{
  return __ZN2ot11NetworkData9ServerTlv11SetServer16Et(this, a2);
}

uint64_t ot::NetworkData::ServiceTlv::SetSubTlvsLength(ot::NetworkData::ServiceTlv *this, char a2)
{
  Fieldschar Length = ot::NetworkData::ServiceTlv::GetFieldsLength(this);
  return ot::NetworkData::NetworkDataTlv::SetLength((uint64_t)this, a2 + FieldsLength);
}

{
  return __ZN2ot11NetworkData10ServiceTlv16SetSubTlvsLengthEh(this, a2);
}

ot::NetworkData::PrefixTlv *ot::NetworkData::NetworkData::FindPrefix( ot::NetworkData::NetworkData *this, const unsigned __int8 *a2, unsigned __int8 a3)
{
  uint64_t v9 = this;
  uint64_t v8 = a2;
  unsigned __int8 v7 = a3;
  ot::NetworkData::TlvIterator::TlvIterator( (ot::NetworkData::TlvIterator *)v6,  *(const unsigned __int8 **)this,  *((_BYTE *)this + 8));
  do
  {
    ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::PrefixTlv>((uint64_t)v6);
    unsigned __int16 v5 = v3;
  }

  while (v3 && !ot::NetworkData::PrefixTlv::IsEqual(v3, v8, v7));
  return v5;
}

ot::NetworkData::TlvIterator *ot::NetworkData::TlvIterator::TlvIterator( ot::NetworkData::TlvIterator *this, const unsigned __int8 *a2, unsigned __int8 a3)
{
  return this;
}

void ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::PrefixTlv>(uint64_t a1)
{
}

{
  __ZN2ot11NetworkData11TlvIterator7IterateINS0_9PrefixTlvEEEPKT_v(a1);
}

BOOL ot::NetworkData::PrefixTlv::IsEqual( ot::NetworkData::PrefixTlv *this, const unsigned __int8 *a2, unsigned __int8 a3)
{
  BOOL v7 = 0;
  if (a3 == *((unsigned __int8 *)this + 3))
  {
    uint64_t Prefix = (ot::Ip6::Prefix *)ot::NetworkData::PrefixTlv::GetPrefix(this);
    unsigned __int8 v3 = ot::Ip6::Prefix::SizeForLength((ot::Ip6::Prefix *)a3);
    return *((unsigned __int8 *)this + 3) <= (int)ot::Ip6::Prefix::MatchLength( Prefix,  a2,  (const unsigned __int8 *)v3);
  }

  return v7;
}

{
  return __ZNK2ot11NetworkData9PrefixTlv7IsEqualEPKhh(this, a2, a3);
}

ot::NetworkData::ServiceTlv *ot::NetworkData::NetworkData::FindService( uint64_t a1, int a2, uint64_t a3, char a4)
{
  uint64_t v11 = a1;
  int v10 = a2;
  uint64_t v9 = a3;
  char v8 = a4;
  ot::NetworkData::TlvIterator::TlvIterator( (ot::NetworkData::TlvIterator *)v7,  *(const unsigned __int8 **)a1,  *(_BYTE *)(a1 + 8));
  do
  {
    ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::ServiceTlv>((uint64_t)v7);
    char v6 = v4;
  }

  while (v4 && !ot::NetworkData::NetworkData::MatchService(v4, v10, v9, v8));
  return v6;
}

void ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::ServiceTlv>(uint64_t a1)
{
}

{
  __ZN2ot11NetworkData11TlvIterator7IterateINS0_10ServiceTlvEEEPKT_v(a1);
}

BOOL ot::NetworkData::NetworkData::MatchService( ot::NetworkData::ServiceTlv *a1, int a2, uint64_t a3, char a4)
{
  int v10 = a1;
  int v9 = a2;
  uint64_t v8 = a3;
  char v7 = a4;
  BOOL v6 = 0;
  if (ot::NetworkData::ServiceTlv::GetEnterpriseNumber(a1) == a2)
  {
    ot::NetworkData::ServiceTlv::GetServiceData(v10, (uint64_t)v5);
    if (v7)
    {
      if (v7 == 1) {
        return ot::Data<(ot::DataLengthType)0>::operator==((uint64_t)v5, v8);
      }
    }

    else
    {
      return ot::Data<(ot::DataLengthType)0>::StartsWith((uint64_t)v5, v8);
    }
  }

  return v6;
}

ot::NetworkData::ServiceTlv *ot::NetworkData::NetworkData::FindNextService( uint64_t a1, ot::NetworkData::NetworkDataTlv *a2, int a3, uint64_t a4, char a5)
{
  uint64_t v15 = a1;
  uint64_t v14 = a2;
  int v13 = a3;
  uint64_t v12 = a4;
  char v11 = a5;
  if (a2)
  {
    unint64_t Next = (unsigned __int8 *)ot::NetworkData::NetworkDataTlv::GetNext(v14);
    unsigned __int8 v9 = *(_BYTE *)a1 + *(_BYTE *)(a1 + 8) - (_BYTE)Next;
  }

  else
  {
    unint64_t Next = *(unsigned __int8 **)a1;
    unsigned __int8 v9 = *(_BYTE *)(a1 + 8);
  }

  Instance = (ot::Instance *)ot::InstanceLocator::GetInstance((ot::InstanceLocator *)a1);
  ot::NetworkData::NetworkData::NetworkData((ot::NetworkData::NetworkData *)v8, Instance, Next, v9);
  return ot::NetworkData::NetworkData::FindService((uint64_t)v8, v13, v12, v11);
}

uint64_t ot::NetworkData::ServiceTlv::GetServiceData(ot::NetworkData::ServiceTlv *a1, uint64_t a2)
{
  ServiceData = ot::NetworkData::ServiceTlv::GetServiceData(a1);
  ServiceDatachar Length = ot::NetworkData::ServiceTlv::GetServiceDataLength(a1);
  return ot::Data<(ot::DataLengthType)0>::Init(a2, (uint64_t)ServiceData, ServiceDataLength);
}

{
  return __ZNK2ot11NetworkData10ServiceTlv14GetServiceDataERNS0_11ServiceDataE(a1, a2);
}

BOOL ot::Data<(ot::DataLengthType)0>::StartsWith(uint64_t a1, uint64_t a2)
{
  BOOL v3 = 0;
  return v3;
}

{
  return __ZNK2ot4DataILNS_14DataLengthTypeE0EE10StartsWithERKS2_(a1, a2);
}

uint64_t ot::NetworkData::MutableNetworkData::AppendTlv( ot::NetworkData::MutableNetworkData *this, unsigned __int16 a2)
{
  char v6 = a2;
  if (!ot::NetworkData::MutableNetworkData::CanInsert(this, a2)) {
    return 0LL;
  }
  ot::NetworkData::MutableNetworkData::GetTlvsEnd(this);
  uint64_t v5 = v2;
  *((_BYTE *)this + 8) += v6;
  return v5;
}

BOOL ot::NetworkData::MutableNetworkData::CanInsert( ot::NetworkData::MutableNetworkData *this, unsigned __int16 a2)
{
  return *((unsigned __int8 *)this + 8) + a2 <= *((unsigned __int8 *)this + 9);
}

{
  return __ZNK2ot11NetworkData18MutableNetworkData9CanInsertEt(this, a2);
}

void *ot::NetworkData::MutableNetworkData::Insert( ot::NetworkData::MutableNetworkData *this, char *a2, unsigned __int8 a3)
{
  BOOL v5 = 0;
  if (ot::NetworkData::MutableNetworkData::CanInsert(this, a3))
  {
    BOOL v5 = 0;
  }

  if (!v5) {
    __assert_rtn("Insert", "network_data.cpp", 711, "CanInsert(aLength) && mTlvs <= start && start <= mTlvs + mLength");
  }
  uint64_t result = memmove(&a2[a3], a2, *((unsigned __int8 *)this + 8) - (void)&a2[-*(void *)this]);
  *((_BYTE *)this + 8) += a3;
  return result;
}

void *ot::NetworkData::MutableNetworkData::Remove( ot::NetworkData::MutableNetworkData *this, char *a2, unsigned __int8 a3)
{
  unint64_t v9 = v3 + *((unsigned __int8 *)this + 8);
  __src = &a2[a3];
  BOOL v7 = 0;
  if (a3 <= (int)*((unsigned __int8 *)this + 8))
  {
    ot::NetworkData::MutableNetworkData::GetBytes(this);
    BOOL v7 = 0;
  }

  if (!v7) {
    __assert_rtn( "Remove",  "network_data.cpp",  722,  "(aRemoveLength <= mLength) && (GetBytes() <= removeStart) && (removeEnd <= end)");
  }
  uint64_t result = memmove(a2, __src, (v9 - (_BYTE)__src));
  *((_BYTE *)this + 8) -= a3;
  return result;
}

uint64_t ot::NetworkData::NetworkData::GetNextServer( const unsigned __int8 **this, unsigned int *a2, unsigned __int16 *a3)
{
  int v13 = this;
  uint64_t v12 = a2;
  char v11 = a3;
  unint64_t v4 = (ot::NetworkData::OnMeshPrefixConfig *)&v9;
  BOOL v5 = &v8;
  char v6 = &v14;
  uint64_t v7 = 0LL;
  unsigned int v10 = ot::NetworkData::NetworkData::Iterate(this, (uint64_t)a2, 0xFFFFu, &v4);
  if (!v10)
  {
    if (v4)
    {
      *char v11 = *((_WORD *)v4 + 10);
    }

    else if (v5)
    {
      *char v11 = *((_WORD *)v5 + 9);
    }

    else
    {
      if (!v6) {
        __assert_rtn("GetNextServer", "network_data.cpp", 759, "false");
      }
      *char v11 = *((_WORD *)v6 + 256);
    }
  }

  return v10;
}

uint64_t ot::NetworkData::NetworkData::FindBorderRouters( const unsigned __int8 **a1, char a2, uint64_t a3, char *a4)
{
  uint64_t v18 = a1;
  char v17 = a2;
  uint64_t v16 = a3;
  uint64_t v15 = a4;
  unsigned int v14 = 0;
  ot::NetworkData::NetworkData::FindBorderRouters(ot::NetworkData::RoleFilter,unsigned short *,unsigned char &)const::Rlocs::Rlocs( (uint64_t)v13,  a2,  a3,  *a4);
  unsigned int v12 = 0;
  while (!ot::NetworkData::NetworkData::GetNextExternalRoute( a1,  &v12,  (ot::NetworkData::ExternalRouteConfig *)v10))
  {
    unsigned int v14 = ot::NetworkData::NetworkData::FindBorderRouters(ot::NetworkData::RoleFilter,unsigned short *,unsigned char &)const::Rlocs::AddRloc16( v13,  v11);
    if (v14) {
      goto LABEL_11;
    }
  }

  unsigned int v12 = 0;
  while (!ot::NetworkData::NetworkData::GetNextOnMeshPrefix( a1,  &v12,  (ot::NetworkData::OnMeshPrefixConfig *)v7))
  {
    if ((v8 & 0x40) != 0 && v8 < 0)
    {
      unsigned int v14 = ot::NetworkData::NetworkData::FindBorderRouters(ot::NetworkData::RoleFilter,unsigned short *,unsigned char &)const::Rlocs::AddRloc16( v13,  v9);
      if (v14) {
        break;
      }
    }
  }

uint64_t ot::NetworkData::NetworkData::FindBorderRouters(ot::NetworkData::RoleFilter,unsigned short *,unsigned char &)const::Rlocs::Rlocs( uint64_t a1, char a2, uint64_t a3, char a4)
{
  return a1;
}

uint64_t ot::NetworkData::NetworkData::FindBorderRouters(ot::NetworkData::RoleFilter,unsigned short *,unsigned char &)const::Rlocs::AddRloc16( unsigned __int8 *a1, unsigned __int16 a2)
{
  unsigned int v8 = 0;
  int v6 = *a1;
  if (*a1)
  {
    if (v6 == 1)
    {
      if (!ot::Mle::IsActiveRouter((ot::Mle *)a2)) {
        return v8;
      }
    }

    else if (v6 == 2 && ot::Mle::IsActiveRouter((ot::Mle *)a2))
    {
      return v8;
    }
  }

  if (i == a1[16])
  {
    if (a1[16] < (int)a1[17])
    {
      uint64_t v2 = *((void *)a1 + 1);
      uint64_t v3 = a1[16]++;
      *(_WORD *)(v2 + 2 * v3) = a2;
    }

    else
    {
      return 3;
    }
  }

  return v8;
}

uint64_t ot::NetworkData::NetworkData::FindBorderRouters(ot::NetworkData::RoleFilter,unsigned short *,unsigned char &)const::Rlocs::GetLength( uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t ot::NetworkData::NetworkData::CountBorderRouters(const unsigned __int8 **a1, char a2)
{
  unint64_t v4 = a1;
  v3[1] = a2;
  v3[0] = 85;
  return v3[0];
}

uint64_t ot::NetworkData::NetworkData::ContainsBorderRouterWithRloc(const unsigned __int8 **this, __int16 a2)
{
  unsigned int v12 = this;
  __int16 v11 = a2;
  char v10 = 0;
  unsigned int v9 = 0;
  while (!ot::NetworkData::NetworkData::GetNextExternalRoute( this,  &v9,  (ot::NetworkData::ExternalRouteConfig *)v7))
  {
    if (v8 == v11)
    {
      char v10 = 1;
      return v10 & 1;
    }
  }

  unsigned int v9 = 0;
  while (!ot::NetworkData::NetworkData::GetNextOnMeshPrefix( this,  &v9,  (ot::NetworkData::OnMeshPrefixConfig *)v4))
  {
    if (v6 == v11 && (v5 & 0x80) != 0 && ((v5 & 0x40) != 0 || (v5 & 0x400) != 0))
    {
      char v10 = 1;
      return v10 & 1;
    }
  }

  return v10 & 1;
}

  ;
}

uint64_t ot::NetworkData::NetworkData::GetBytes(ot::NetworkData::NetworkData *this)
{
  return *(void *)this;
}

{
  return __ZNK2ot11NetworkData11NetworkData8GetBytesEv(this);
}

uint64_t ot::NetworkData::ServerTlv::GetServerData(ot::NetworkData::ServerTlv *this)
{
  return (uint64_t)this + 4;
}

{
  return __ZNK2ot11NetworkData9ServerTlv13GetServerDataEv(this);
}

uint64_t ot::NetworkData::ServerTlv::GetServerDataLength(ot::NetworkData::ServerTlv *this)
{
  return (ot::NetworkData::NetworkDataTlv::GetLength(this) - 2);
}

{
  return __ZNK2ot11NetworkData9ServerTlv19GetServerDataLengthEv(this);
}

uint64_t ot::NetworkData::NetworkDataTlv::GetLength(ot::NetworkData::NetworkDataTlv *this)
{
  return *((unsigned __int8 *)this + 1);
}

{
  return __ZNK2ot11NetworkData14NetworkDataTlv9GetLengthEv(this);
}

BOOL ot::NetworkData::ServiceTlv::IsThreadEnterprise(ot::NetworkData::ServiceTlv *this)
{
  return *((char *)this + 2) < 0;
}

{
  return __ZNK2ot11NetworkData10ServiceTlv18IsThreadEnterpriseEv(this);
}

uint64_t ot::NetworkData::NetworkData::NetworkDataIterator::GetTlvOffset( ot::NetworkData::NetworkData::NetworkDataIterator *this)
{
  return **(unsigned __int8 **)this;
}

{
  return __ZNK2ot11NetworkData11NetworkData19NetworkDataIterator12GetTlvOffsetEv(this);
}

uint64_t ot::NetworkData::PrefixTlv::GetPrefix(ot::NetworkData::PrefixTlv *this)
{
  return (uint64_t)this + 4;
}

{
  return (uint64_t)this + 4;
}

{
  return __ZN2ot11NetworkData9PrefixTlv9GetPrefixEv(this);
}

{
  return __ZNK2ot11NetworkData9PrefixTlv9GetPrefixEv(this);
}

uint64_t ot::NetworkData::NetworkDataTlv::GetValue(ot::NetworkData::NetworkDataTlv *this)
{
  return (uint64_t)this + 2;
}

{
  return (uint64_t)this + 2;
}

{
  return __ZN2ot11NetworkData14NetworkDataTlv8GetValueEv(this);
}

{
  return __ZNK2ot11NetworkData14NetworkDataTlv8GetValueEv(this);
}

uint64_t ot::NetworkData::ServiceTlv::GetFieldsLength(ot::NetworkData::ServiceTlv *this)
{
  BOOL IsThreadEnterprise = ot::NetworkData::ServiceTlv::IsThreadEnterprise(this);
  char v2 = 0;
  if (!IsThreadEnterprise) {
    char v2 = 4;
  }
  return (v2 + 2 + ot::NetworkData::ServiceTlv::GetServiceDataLength(this));
}

{
  return __ZNK2ot11NetworkData10ServiceTlv15GetFieldsLengthEv(this);
}

uint64_t ot::NetworkData::NetworkData::NetworkDataIterator::GetSubTlvOffset( ot::NetworkData::NetworkData::NetworkDataIterator *this)
{
  return *(unsigned __int8 *)(*(void *)this + 1LL);
}

{
  return __ZNK2ot11NetworkData11NetworkData19NetworkDataIterator15GetSubTlvOffsetEv(this);
}

uint64_t ot::NetworkData::NetworkData::NetworkDataIterator::GetEntryIndex( ot::NetworkData::NetworkData::NetworkDataIterator *this)
{
  return *(unsigned __int8 *)(*(void *)this + 2LL);
}

{
  return __ZNK2ot11NetworkData11NetworkData19NetworkDataIterator13GetEntryIndexEv(this);
}

uint64_t ot::NetworkData::NetworkData::NetworkDataIterator::SetEntryIndex(uint64_t this, char a2)
{
  *(_BYTE *)(*(void *)this + 2LL) = a2;
  return this;
}

{
  return __ZN2ot11NetworkData11NetworkData19NetworkDataIterator13SetEntryIndexEh(this, a2);
}

uint64_t ot::NetworkData::NetworkData::NetworkDataIterator::SaveSubTlvOffset( ot::NetworkData::NetworkData::NetworkDataIterator *this, const ot::NetworkData::NetworkDataTlv *a2, const ot::NetworkData::NetworkDataTlv *a3)
{
  return ot::NetworkData::NetworkData::NetworkDataIterator::SetSubTlvOffset( (uint64_t)this,  a2 - a3);
}

{
  return __ZN2ot11NetworkData11NetworkData19NetworkDataIterator16SaveSubTlvOffsetEPKNS0_14NetworkDataTlvES5_( this,  a2,  a3);
}

uint64_t ot::NetworkData::NetworkData::NetworkDataIterator::SetSubTlvOffset(uint64_t this, char a2)
{
  *(_BYTE *)(*(void *)this + 1LL) = a2;
  return this;
}

{
  return __ZN2ot11NetworkData11NetworkData19NetworkDataIterator15SetSubTlvOffsetEh(this, a2);
}

_BYTE **ot::NetworkData::NetworkData::NetworkDataIterator::SaveTlvOffset( ot::NetworkData::NetworkData::NetworkDataIterator *this, const ot::NetworkData::NetworkDataTlv *a2, const unsigned __int8 *a3)
{
  return ot::NetworkData::NetworkData::NetworkDataIterator::SetTlvOffset( (_BYTE **)this,  a2 - a3);
}

{
  return __ZN2ot11NetworkData11NetworkData19NetworkDataIterator13SaveTlvOffsetEPKNS0_14NetworkDataTlvEPKh(this, a2, a3);
}

_BYTE **ot::NetworkData::NetworkData::NetworkDataIterator::SetTlvOffset(_BYTE **this, char a2)
{
  **this = a2;
  return this;
}

  ;
}

{
  return __ZN2ot11NetworkData11NetworkData19NetworkDataIterator12SetTlvOffsetEh(this, a2);
}

uint64_t ot::NetworkData::NetworkData::GetTlvsStart(ot::NetworkData::NetworkData *this)
{
  return *(void *)this;
}

{
  return __ZNK2ot11NetworkData11NetworkData12GetTlvsStartEv(this);
}

uint64_t ot::NetworkData::NetworkDataTlv::SetLength(uint64_t this, char a2)
{
  *(_BYTE *)(this + 1) = a2;
  return this;
}

{
  return __ZN2ot11NetworkData14NetworkDataTlv9SetLengthEh(this, a2);
}

char *ot::NetworkData::ServiceTlv::GetServiceData(ot::NetworkData::ServiceTlv *this)
{
  if (ot::NetworkData::ServiceTlv::IsThreadEnterprise(this)) {
    char v2 = (char *)this + 3;
  }
  else {
    char v2 = (char *)this + 7;
  }
  return v2 + 1;
}

{
  return __ZNK2ot11NetworkData10ServiceTlv14GetServiceDataEv(this);
}

uint64_t ot::NetworkData::NetworkData::FindBorderRouters(ot::NetworkData::RoleFilter,unsigned short *,unsigned char &)const::Rlocs::Rlocs( uint64_t result, char a2, uint64_t a3, char a4)
{
  *(_BYTE *)uint64_t result = a2;
  *(void *)(result + 8) = a3;
  *(_BYTE *)(result + 16) = 0;
  *(_BYTE *)(result + 1ot::ThreadTlv::SetType(this, 7) = a4;
  return result;
}

  ;
}

void ot::NetworkData::PrefixTlv::FindSubTlv(uint64_t a1, unsigned __int8 a2)
{
}

  ;
}

{
  __ZN2ot11NetworkData9PrefixTlv10FindSubTlvENS0_14NetworkDataTlv4TypeE(a1, a2);
}

ot::Crypto::LiteralKey *ot::Crypto::LiteralKey::LiteralKey( ot::Crypto::LiteralKey *this, const ot::Crypto::Key *a2)
{
  *(void *)this = ot::Crypto::Key::GetBytes(a2);
  __int16 Length = ot::Crypto::Key::GetLength(a2);
  uint64_t result = this;
  *((_WORD *)this + 4) = Length;
  return result;
}

{
  ot::Crypto::LiteralKey::LiteralKey(this, a2);
  return this;
}

uint64_t ot::Crypto::Key::GetBytes(ot::Crypto::Key *this)
{
  return *(void *)this;
}

{
  return __ZNK2ot6Crypto3Key8GetBytesEv(this);
}

uint64_t ot::Crypto::Key::GetLength(ot::Crypto::Key *this)
{
  return *((unsigned __int16 *)this + 4);
}

{
  return __ZNK2ot6Crypto3Key9GetLengthEv(this);
}

uint64_t ot::NetworkData::LeaderBase::Reset(ot::NetworkData::LeaderBase *this)
{
  Uint8 = (ot::Random::NonCrypto *)ot::Random::NonCrypto::GetUint8(this);
  *((_BYTE *)this + ot::Mle::Tlv::SetType(this, 11) = (_BYTE)Uint8;
  *((_BYTE *)this + 1ot::MlrManager::UpdateReregistrationDelay(this, 0) = ot::Random::NonCrypto::GetUint8(Uint8);
  ot::NetworkData::MutableNetworkData::SetLength((uint64_t)this, 0);
  ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"NetworkData",  "%s: SignalNetDataChanged",  v2,  v3,  v4,  v5,  v6,  v7,  (char)"Reset");
  return ot::NetworkData::LeaderBase::SignalNetDataChanged(this);
}

uint64_t ot::NetworkData::LeaderBase::SignalNetDataChanged(ot::NetworkData::LeaderBase *this)
{
  unsigned __int8 v4 = *((_BYTE *)this + 266);
  unsigned __int8 Length = ot::NetworkData::NetworkData::GetLength(this);
  *((_BYTE *)this + 266) = ot::Max<unsigned char>(v4, Length);
  uint64_t v2 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
  return ot::Notifier::Signal(v2, 512LL);
}

uint64_t ot::NetworkData::LeaderBase::GetServiceId( const unsigned __int8 **a1, int a2, uint64_t a3, char a4, _BYTE *a5)
{
  unsigned int v14 = a1;
  int v13 = a2;
  uint64_t v12 = a3;
  char v11 = a4 & 1;
  char v10 = a5;
  unsigned int v9 = 23;
  unsigned int v8 = 0;
  while (!ot::NetworkData::NetworkData::GetNextService(a1, &v8, (ot::NetworkData::ServiceConfig *)v15))
  {
    ot::NetworkData::ServiceConfig::GetServiceData((uint64_t)v15, (uint64_t)v7);
    if (v13 == v16 && ot::Data<(ot::DataLengthType)0>::operator==(v12, (uint64_t)v7) && (v11 & 1) == (v17 & 1))
    {
      _BYTE *v10 = v15[0];
      return 0;
    }
  }

  return v9;
}

uint64_t ot::NetworkData::ServiceConfig::GetServiceData(uint64_t a1, uint64_t a2)
{
  return ot::Data<(ot::DataLengthType)0>::Init(a2, a1 + 9, *(_BYTE *)(a1 + 8));
}

{
  return __ZNK2ot11NetworkData13ServiceConfig14GetServiceDataERNS0_11ServiceDataE(a1, a2);
}

uint64_t ot::NetworkData::LeaderBase::GetPreferredNat64Prefix( const unsigned __int8 **this, ot::NetworkData::ExternalRouteConfig *a2)
{
  uint64_t v18 = this;
  char v17 = a2;
  unsigned int v16 = 23;
  unsigned int v15 = 0;
  while (!ot::NetworkData::NetworkData::GetNextExternalRoute( this,  &v15,  (ot::NetworkData::ExternalRouteConfig *)&v13))
  {
    if ((v14 & 0x400000000LL) != 0)
    {
      ot::NetworkData::ExternalRouteConfig::GetPrefix((ot::NetworkData::ExternalRouteConfig *)&v13);
      if (ot::Ip6::Prefix::IsValidNat64(v2))
      {
        if (v16 == 23
          || ((int v3 = (char)(BYTE4(v14) << 6) >> 6,
               BOOL v4 = __OFSUB__(v3, (char)(*((_BYTE *)v17 + 20) << 6) >> 6),
               int v5 = v3 - ((char)(*((_BYTE *)v17 + 20) << 6) >> 6),
               (v5 < 0) ^ v4 | (v5 == 0))
            ? (char v6 = 0)
            : (char v6 = 1),
              (v6 & 1) != 0
           || (char)((char)(BYTE4(v14) << 6) >> 6) == (char)((char)(*((_BYTE *)v17 + 20) << 6) >> 6)
           && (ot::NetworkData::ExternalRouteConfig::GetPrefix((ot::NetworkData::ExternalRouteConfig *)&v13),
               char v11 = v7,
               ot::NetworkData::ExternalRouteConfig::GetPrefix(v17),
               ot::Ip6::Prefix::operator<(v11, v8))))
        {
          unsigned int v9 = v17;
          *(_OWORD *)char v17 = v13;
          *((void *)v9 + 2) = v14;
          unsigned int v16 = 0;
        }
      }
    }
  }

  return v16;
}

ot::NetworkData::PrefixTlv *ot::NetworkData::LeaderBase::FindNextMatchingPrefixTlv( ot::NetworkData::LeaderBase *this, const ot::Ip6::Address *a2, const ot::NetworkData::PrefixTlv *a3)
{
  unsigned int v15 = this;
  uint64_t v14 = a2;
  __int128 v13 = a3;
  if (a3) {
    uint64_t Next = ot::NetworkData::NetworkDataTlv::GetNext(v13);
  }
  else {
    uint64_t Next = ot::NetworkData::NetworkData::GetTlvsStart(this);
  }
  uint64_t TlvsEnd = ot::NetworkData::NetworkData::GetTlvsEnd(this);
  ot::Cli::Dataset::Dataset(v11, Next, TlvsEnd);
  do
  {
    ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::PrefixTlv>((uint64_t)v11);
    uint64_t v12 = v4;
    if (!v4) {
      break;
    }
    unsigned int v8 = v14;
    uint64_t Prefix = (unsigned __int8 *)ot::NetworkData::PrefixTlv::GetPrefix(v12);
    Prefixunsigned __int8 Length = ot::NetworkData::PrefixTlv::GetPrefixLength(v12);
  }

  while (!ot::Ip6::Address::MatchesPrefix(v8, Prefix, PrefixLength));
  return v12;
}

uint64_t ot::NetworkData::PrefixTlv::GetPrefixLength(ot::NetworkData::PrefixTlv *this)
{
  return *((unsigned __int8 *)this + 3);
}

{
  return __ZNK2ot11NetworkData9PrefixTlv15GetPrefixLengthEv(this);
}

uint64_t ot::NetworkData::LeaderBase::GetContext( ot::InstanceLocator *a1, const ot::Ip6::Address *a2, ot::Ip6::Prefix *a3)
{
  NextMatchingPrefixTlv = 0LL;
  ot::Ip6::Prefix::SetLength((uint64_t)a3, 0);
  int v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(a1);
  if (ot::Mle::Mle::IsMeshLocalAddress(v3, a2)) {
    ot::NetworkData::LeaderBase::GetContextForMeshLocalPrefix(a1, a3);
  }
  while (1)
  {
    NextMatchingPrefixTlv = ot::NetworkData::LeaderBase::FindNextMatchingPrefixTlv(a1, a2, NextMatchingPrefixTlv);
    if (!NextMatchingPrefixTlv) {
      break;
    }
    ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::ContextTlv>(NextMatchingPrefixTlv);
    char v11 = v4;
    if (v4)
    {
      Prefixchar Length = ot::NetworkData::PrefixTlv::GetPrefixLength(NextMatchingPrefixTlv);
      if (PrefixLength > ot::Ip6::Prefix::GetLength(a3))
      {
        ot::NetworkData::PrefixTlv::CopyPrefixTo(NextMatchingPrefixTlv, a3);
        *((_BYTE *)a3 + 1ot::ThreadTlv::SetType(this, 7) = ot::NetworkData::ContextTlv::GetContextId(v11);
        *((_BYTE *)a3 + 18) = ot::NetworkData::ContextTlv::IsCompress(v11);
        *((_BYTE *)a3 + 1ot::Tlv::SetLength((uint64_t)this, 9) = 1;
      }
    }
  }

  char Length = ot::Ip6::Prefix::GetLength(a3);
  if (v6 | (Length == 0)) {
    char v7 = 0;
  }
  else {
    char v7 = 1;
  }
  if ((v7 & 1) != 0) {
    return 0LL;
  }
  else {
    return 23LL;
  }
}

void *ot::NetworkData::LeaderBase::GetContextForMeshLocalPrefix( ot::InstanceLocator *a1, ot::Ip6::Prefix *a2)
{
  uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(a1);
  ot::Mle::Mle::GetMeshLocalPrefix(v2);
  uint64_t result = ot::Ip6::Prefix::Set(a2, v3);
  *((_BYTE *)a2 + 1ot::ThreadTlv::SetType(this, 7) = 0;
  *((_BYTE *)a2 + 18) = 1;
  *((_BYTE *)a2 + 1ot::Tlv::SetLength((uint64_t)this, 9) = 1;
  return result;
}

void ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::ContextTlv>(ot::NetworkData::PrefixTlv *a1)
{
}

{
  __ZNK2ot11NetworkData9PrefixTlv10FindSubTlvINS0_10ContextTlvEEEPKT_v(a1);
}

void *ot::NetworkData::PrefixTlv::CopyPrefixTo(ot::NetworkData::PrefixTlv *this, ot::Ip6::Prefix *a2)
{
  uint64_t Prefix = (unsigned __int8 *)ot::NetworkData::PrefixTlv::GetPrefix(this);
  Prefixchar Length = ot::NetworkData::PrefixTlv::GetPrefixLength(this);
  return ot::Ip6::Prefix::Set(a2, Prefix, PrefixLength);
}

{
  return __ZNK2ot11NetworkData9PrefixTlv12CopyPrefixToERNS_3Ip66PrefixE(this, a2);
}

BOOL ot::NetworkData::ContextTlv::IsCompress(ot::NetworkData::ContextTlv *this)
{
  return (*((_BYTE *)this + 2) & 0x10) != 0;
}

{
  return __ZNK2ot11NetworkData10ContextTlv10IsCompressEv(this);
}

uint64_t ot::NetworkData::LeaderBase::GetContext( ot::NetworkData::NetworkData *a1, char a2, ot::Ip6::Prefix *a3)
{
  uint64_t v18 = a1;
  char v17 = a2;
  unsigned int v16 = a3;
  unsigned int v15 = 23;
  uint64_t TlvsStart = ot::NetworkData::NetworkData::GetTlvsStart(a1);
  uint64_t TlvsEnd = ot::NetworkData::NetworkData::GetTlvsEnd(a1);
  ot::Cli::Dataset::Dataset(v14, TlvsStart, TlvsEnd);
  if (v17)
  {
    while (1)
    {
      ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::PrefixTlv>((uint64_t)v14);
      __int128 v13 = v4;
      if (!v4) {
        break;
      }
      ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::ContextTlv>(v4);
      uint64_t v12 = v5;
      if (v5)
      {
        char ContextId = ot::NetworkData::ContextTlv::GetContextId(v5);
        if (v17 == ContextId)
        {
          ot::NetworkData::PrefixTlv::CopyPrefixTo(v13, v16);
          char v7 = ot::NetworkData::ContextTlv::GetContextId(v12);
          *((_BYTE *)v16 + 1ot::ThreadTlv::SetType(this, 7) = v7;
          BOOL IsCompress = ot::NetworkData::ContextTlv::IsCompress(v12);
          *((_BYTE *)v16 + 18) = IsCompress;
          *((_BYTE *)v16 + 1ot::Tlv::SetLength((uint64_t)this, 9) = 1;
          return 0;
        }
      }
    }
  }

  else
  {
    ot::NetworkData::LeaderBase::GetContextForMeshLocalPrefix(a1, v16);
    return 0;
  }

  return v15;
}

void *ot::Ip6::Prefix::Set(ot::Ip6::Prefix *a1, const unsigned __int8 *a2)
{
  return ot::Ip6::Prefix::Set(a1, a2, 0x40u);
}

{
  return __ZN2ot3Ip66Prefix3SetERKNS0_13NetworkPrefixE(a1, a2);
}

uint64_t ot::NetworkData::LeaderBase::IsOnMesh(ot::NetworkData::LeaderBase *this, const ot::Ip6::Address *a2)
{
  uint64_t v12 = this;
  char v11 = a2;
  NextMatchingPrefixTlv = 0LL;
  char v9 = 0;
  uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (ot::Mle::Mle::IsMeshLocalAddress(v2, v11))
  {
    char v9 = 1;
  }

  else
  {
    while (1)
    {
      NextMatchingPrefixTlv = ot::NetworkData::LeaderBase::FindNextMatchingPrefixTlv(this, v11, NextMatchingPrefixTlv);
      if (!NextMatchingPrefixTlv) {
        break;
      }
      ot::NetworkData::TlvIterator::TlvIterator((ot::NetworkData::TlvIterator *)v8, NextMatchingPrefixTlv);
      while (1)
      {
        ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::BorderRouterTlv>((uint64_t)v8);
        char v7 = v3;
        if (!v3) {
          break;
        }
        for (unsigned __int8 i = (ot::NetworkData::BorderRouterEntry *)ot::NetworkData::BorderRouterTlv::GetFirstEntry(v3);
              (unint64_t)i <= ot::NetworkData::BorderRouterTlv::GetLastEntry(v7);
              unsigned __int8 i = (ot::NetworkData::BorderRouterEntry *)ot::NetworkData::BorderRouterEntry::GetNext(i))
        {
          if (ot::NetworkData::BorderRouterEntry::IsOnMesh(i))
          {
            char v9 = 1;
            return v9 & 1;
          }
        }
      }
    }
  }

  return v9 & 1;
}

ot::NetworkData::TlvIterator *ot::NetworkData::TlvIterator::TlvIterator( ot::NetworkData::TlvIterator *this, const ot::NetworkData::PrefixTlv *a2)
{
  uint64_t SubTlvs = ot::NetworkData::PrefixTlv::GetSubTlvs(a2);
  uint64_t Next = ot::NetworkData::NetworkDataTlv::GetNext(a2);
  ot::Cli::Dataset::Dataset(this, SubTlvs, Next);
  return this;
}

void ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::BorderRouterTlv>(uint64_t a1)
{
}

{
  __ZN2ot11NetworkData11TlvIterator7IterateINS0_15BorderRouterTlvEEEPKT_v(a1);
}

BOOL ot::NetworkData::BorderRouterEntry::IsOnMesh(ot::NetworkData::BorderRouterEntry *this)
{
  return (ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1)) & 0x100) != 0;
}

{
  return __ZNK2ot11NetworkData17BorderRouterEntry8IsOnMeshEv(this);
}

uint64_t ot::NetworkData::LeaderBase::RouteLookup( ot::NetworkData::LeaderBase *this, const ot::Ip6::Address *a2, const ot::Ip6::Address *a3, unsigned __int16 *a4)
{
  unsigned int v9 = 4;
  NextMatchingPrefixTlv = 0LL;
  while (1)
  {
    NextMatchingPrefixTlv = ot::NetworkData::LeaderBase::FindNextMatchingPrefixTlv(this, a2, NextMatchingPrefixTlv);
    if (!NextMatchingPrefixTlv) {
      break;
    }
    ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::BorderRouterTlv>(NextMatchingPrefixTlv);
    if (v4)
    {
      char DomainId = ot::NetworkData::PrefixTlv::GetDomainId(NextMatchingPrefixTlv);
    }
  }

  return v9;
}

void ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::BorderRouterTlv>( ot::NetworkData::PrefixTlv *a1)
{
}

{
  __ZNK2ot11NetworkData9PrefixTlv10FindSubTlvINS0_15BorderRouterTlvEEEPKT_v(a1);
}

uint64_t ot::NetworkData::LeaderBase::ExternalRouteLookup( ot::NetworkData::LeaderBase *this, char a2, const ot::Ip6::Address *a3, unsigned __int16 *a4)
{
  uint64_t v20 = this;
  char v19 = a2;
  uint64_t v18 = a3;
  char v17 = a4;
  unsigned int v16 = 4;
  NextMatchingPrefixTlv = 0LL;
  uint64_t v14 = 0LL;
  unsigned __int8 v13 = 0;
  while (1)
  {
    NextMatchingPrefixTlv = ot::NetworkData::LeaderBase::FindNextMatchingPrefixTlv(this, v18, NextMatchingPrefixTlv);
    if (!NextMatchingPrefixTlv) {
      break;
    }
    Prefixchar Length = ot::NetworkData::PrefixTlv::GetPrefixLength(NextMatchingPrefixTlv);
    ot::NetworkData::TlvIterator::TlvIterator((ot::NetworkData::TlvIterator *)v10, NextMatchingPrefixTlv);
    char DomainId = ot::NetworkData::PrefixTlv::GetDomainId(NextMatchingPrefixTlv);
    if (v19 == DomainId && (!v14 || PrefixLength > (int)v13))
    {
      while (1)
      {
        ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::HasRouteTlv>((uint64_t)v10);
        uint64_t v12 = v5;
        if (!v5) {
          break;
        }
        for (unsigned __int8 i = (ot::NetworkData::HasRouteEntry *)ot::NetworkData::HasRouteTlv::GetFirstEntry(v12);
              (unint64_t)i <= ot::NetworkData::HasRouteTlv::GetLastEntry(v12);
              unsigned __int8 i = (ot::NetworkData::HasRouteEntry *)ot::NetworkData::HasRouteEntry::GetNext(i))
        {
          if (!v14
            || PrefixLength > (int)v13
            || (int)ot::NetworkData::LeaderBase::CompareRouteEntries<ot::NetworkData::HasRouteEntry>(this, i, v14) > 0)
          {
            uint64_t v14 = i;
            unsigned __int8 v13 = PrefixLength;
          }
        }
      }
    }
  }

  if (v14)
  {
    unsigned __int16 Rloc = ot::NetworkData::HasRouteEntry::GetRloc(v14);
    unsigned __int16 *v17 = Rloc;
    return 0;
  }

  return v16;
}

uint64_t ot::NetworkData::PrefixTlv::GetDomainId(ot::NetworkData::PrefixTlv *this)
{
  return *((unsigned __int8 *)this + 2);
}

{
  return __ZNK2ot11NetworkData9PrefixTlv11GetDomainIdEv(this);
}

uint64_t ot::NetworkData::LeaderBase::DefaultRouteLookup( ot::NetworkData::LeaderBase *this, const ot::NetworkData::PrefixTlv *a2, unsigned __int16 *a3)
{
  uint64_t v14 = this;
  unsigned __int8 v13 = a2;
  uint64_t v12 = a3;
  unsigned int v11 = 4;
  ot::NetworkData::TlvIterator::TlvIterator((ot::NetworkData::TlvIterator *)v10, a2);
  unsigned int v8 = 0LL;
  while (1)
  {
    ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::BorderRouterTlv>((uint64_t)v10);
    unsigned int v9 = v3;
    if (!v3) {
      break;
    }
    for (unsigned __int8 i = (ot::NetworkData::BorderRouterEntry *)ot::NetworkData::BorderRouterTlv::GetFirstEntry(v3);
          (unint64_t)i <= ot::NetworkData::BorderRouterTlv::GetLastEntry(v9);
          unsigned __int8 i = (ot::NetworkData::BorderRouterEntry *)ot::NetworkData::BorderRouterEntry::GetNext(i))
    {
      if (ot::NetworkData::BorderRouterEntry::IsDefaultRoute(i)
        && (!v8
         || (int)ot::NetworkData::LeaderBase::CompareRouteEntries<ot::NetworkData::BorderRouterEntry>(this, i, v8) > 0))
      {
        unsigned int v8 = i;
      }
    }
  }

  if (v8)
  {
    unsigned __int16 Rloc = ot::NetworkData::BorderRouterEntry::GetRloc(v8);
    *uint64_t v12 = Rloc;
    return 0;
  }

  return v11;
}

uint64_t ot::NetworkData::LeaderBase::CompareRouteEntries( ot::NetworkData::LeaderBase *this, char a2, unsigned __int16 a3, char a4, unsigned __int16 a5)
{
  unsigned int v13 = ot::ThreeWayCompare<signed char>(a2, a4);
  if (!v13)
  {
    int v5 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(this);
    unsigned __int8 PathCost = ot::RouterTable::GetPathCost(v5, a5);
    char v6 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(this);
    unsigned __int8 v7 = ot::RouterTable::GetPathCost(v6, a3);
    unsigned int v13 = ot::ThreeWayCompare<unsigned char>(PathCost, v7);
    if (!v13)
    {
      BOOL IsActiveRouter = ot::Mle::IsActiveRouter((ot::Mle *)a3);
      BOOL v8 = ot::Mle::IsActiveRouter((ot::Mle *)a5);
      return ot::ThreeWayCompare<BOOL>(IsActiveRouter, v8);
    }
  }

  return v13;
}

void ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::HasRouteTlv>(uint64_t a1)
{
}

{
  __ZN2ot11NetworkData11TlvIterator7IterateINS0_11HasRouteTlvEEEPKT_v(a1);
}

uint64_t ot::NetworkData::LeaderBase::CompareRouteEntries<ot::NetworkData::HasRouteEntry>( ot::NetworkData::LeaderBase *a1, ot::NetworkData::HasRouteEntry *a2, ot::NetworkData::HasRouteEntry *a3)
{
  char Preference = ot::NetworkData::HasRouteEntry::GetPreference(a2);
  unsigned __int16 Rloc = ot::NetworkData::HasRouteEntry::GetRloc(a2);
  char v7 = ot::NetworkData::HasRouteEntry::GetPreference(a3);
  unsigned __int16 v3 = ot::NetworkData::HasRouteEntry::GetRloc(a3);
  return ot::NetworkData::LeaderBase::CompareRouteEntries(a1, Preference, Rloc, v7, v3);
}

{
  return __ZNK2ot11NetworkData10LeaderBase19CompareRouteEntriesINS0_13HasRouteEntryEEEiRKT_S6_(a1, a2, a3);
}

BOOL ot::NetworkData::BorderRouterEntry::IsDefaultRoute(ot::NetworkData::BorderRouterEntry *this)
{
  return (ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1)) & 0x200) != 0;
}

{
  return __ZNK2ot11NetworkData17BorderRouterEntry14IsDefaultRouteEv(this);
}

uint64_t ot::NetworkData::LeaderBase::CompareRouteEntries<ot::NetworkData::BorderRouterEntry>( ot::NetworkData::LeaderBase *a1, ot::NetworkData::BorderRouterEntry *a2, ot::NetworkData::BorderRouterEntry *a3)
{
  char Preference = ot::NetworkData::BorderRouterEntry::GetPreference(a2);
  unsigned __int16 Rloc = ot::NetworkData::BorderRouterEntry::GetRloc(a2);
  char v7 = ot::NetworkData::BorderRouterEntry::GetPreference(a3);
  unsigned __int16 v3 = ot::NetworkData::BorderRouterEntry::GetRloc(a3);
  return ot::NetworkData::LeaderBase::CompareRouteEntries(a1, Preference, Rloc, v7, v3);
}

{
  return __ZNK2ot11NetworkData10LeaderBase19CompareRouteEntriesINS0_17BorderRouterEntryEEEiRKT_S6_(a1, a2, a3);
}

uint64_t ot::NetworkData::LeaderBase::SetNetworkData( ot::NetworkData::MutableNetworkData *a1, char a2, char a3, char a4, ot::Message *a5, unsigned __int16 a6, unsigned __int16 a7)
{
  if (a7 <= 0xFEu)
  {
    ot::NetworkData::MutableNetworkData::GetBytes(a1);
    unsigned int v22 = ot::Message::Read(a5, a6, v7, a7);
    if (!v22)
    {
      ot::NetworkData::MutableNetworkData::SetLength((uint64_t)a1, a7);
      *((_BYTE *)a1 + ot::Mle::Tlv::SetType(this, 11) = a2;
      *((_BYTE *)a1 + 1ot::MlrManager::UpdateReregistrationDelay(this, 0) = a3;
      if (a4 == 1) {
        ot::NetworkData::MutableNetworkData::RemoveTemporaryData(a1);
      }
      BOOL v8 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(a1);
      if (ot::Mle::Mle::IsLeader(v8))
      {
        unsigned int v9 = (ot::NetworkData::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(a1);
        ot::NetworkData::Leader::HandleNetworkDataRestoredAfterReset(v9);
      }

      ot::NetworkData::MutableNetworkData::GetBytes(a1);
      char v19 = v10;
      unsigned __int8 Length = ot::NetworkData::NetworkData::GetLength(a1);
      encode_data_into_string(v19, Length, __b, 0x3E8uLL, 0);
      char v20 = *((_BYTE *)a1 + 11);
      ot::NetworkData::NetworkData::GetLength(a1);
      ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"NetworkData",  "SetNetworkData, SignalNetDataChanged ver=%d, stable_ver=%d, len=%d, data=%s",  v12,  v13,  v14,  v15,  v16,  v17,  v20);
      ot::NetworkData::LeaderBase::SignalNetDataChanged(a1);
    }
  }

  else
  {
    return 6;
  }

  return v22;
}

uint64_t ot::NetworkData::LeaderBase::setStringAsNetworkData( ot::NetworkData::LeaderBase *this, char *a2, size_t a3, char a4, char a5)
{
  BOOL v23 = this;
  unsigned int v22 = a2;
  size_t v21 = a3;
  char v20 = a4;
  char v19 = a5;
  uint64_t v13 = this;
  unsigned int v18 = 0;
  if (a3)
  {
    uint64_t v17 = v10;
    unint64_t v11 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    __chkstk_darwin();
    uint64_t v12 = &v10[-v11];
    uint64_t v16 = v5;
    bzero(&v10[-v11], v21);
    int v15 = parse_string_into_data(v12, v21, v22);
    if (v15 == v21)
    {
      unsigned int v18 = 6;
      int v14 = 4;
    }

    else
    {
      ot::NetworkData::MutableNetworkData::SetLength((uint64_t)v13, v15);
      ot::NetworkData::MutableNetworkData::GetBytes(v13);
      memcpy(v6, v12, v15);
      char v7 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(v13);
      if (ot::Mle::Mle::IsLeader(v7))
      {
        BOOL v8 = (ot::NetworkData::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(v13);
        ot::NetworkData::Leader::HandleNetworkDataRestoredAfterReset(v8);
      }

      int v14 = 0;
    }
  }

  return v18;
}

uint64_t ot::NetworkData::LeaderBase::SetCommissioningData( ot::NetworkData::LeaderBase *this, const unsigned __int8 *a2, unsigned __int8 a3)
{
  unsigned int v14 = 0;
  ot::NetworkData::LeaderBase::RemoveCommissioningData(this);
  if (!a3) {
    goto LABEL_7;
  }
  if (a3 <= 0xFCuLL)
  {
    ot::NetworkData::MutableNetworkData::AppendTlv(this, a3 + 2);
    ot::NetworkData::As<ot::NetworkData::CommissioningDataTlv>();
    uint64_t v13 = v9;
    if (!v9) {
      return 3;
    }
    ot::NetworkData::CommissioningDataTlv::Init(v9);
    ot::NetworkData::NetworkDataTlv::SetLength((uint64_t)v13, a3);
    uint64_t Value = (void *)ot::NetworkData::NetworkDataTlv::GetValue(v13);
    memcpy(Value, a2, a3);
LABEL_7:
    ++*((_BYTE *)this + 11);
    ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"NetworkData",  "%s: SignalNetDataChanged",  v3,  v4,  v5,  v6,  v7,  v8,  (char)"SetCommissioningData");
    ot::NetworkData::LeaderBase::SignalNetDataChanged(this);
    return v14;
  }

  return 3;
}

void ot::NetworkData::LeaderBase::RemoveCommissioningData(ot::NetworkData::LeaderBase *this)
{
  if (v1) {
    ot::NetworkData::MutableNetworkData::RemoveTlv(this, v1);
  }
}

  ;
}

uint64_t ot::NetworkData::CommissioningDataTlv::Init(ot::NetworkData::CommissioningDataTlv *this)
{
  return ot::NetworkData::NetworkDataTlv::SetLength((uint64_t)this, 0);
}

{
  return __ZN2ot11NetworkData20CommissioningDataTlv4InitEv(this);
}

void ot::NetworkData::NetworkDataTlv::Find<ot::NetworkData::CommissioningDataTlv>( ot::NetworkData::NetworkDataTlv *a1, unint64_t a2)
{
}

{
  __ZN2ot11NetworkData14NetworkDataTlv4FindINS0_20CommissioningDataTlvEEEPKT_PKS1_S8_(a1, a2);
}

ot::Tlv *ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv( ot::NetworkData::LeaderBase *a1, unsigned __int8 a2)
{
  uint64_t v7 = 0LL;
  ot::NetworkData::LeaderBase::GetCommissioningData(a1);
  uint64_t v6 = v2;
  if (v2)
  {
    uint64_t Value = (ot::Tlv *)ot::NetworkData::NetworkDataTlv::GetValue(v2);
    unsigned __int8 Length = ot::NetworkData::NetworkDataTlv::GetLength(v6);
    return ot::MeshCoP::Tlv::FindTlv(Value, Length, a2);
  }

  return (ot::Tlv *)v7;
}

uint64_t ot::NetworkData::LeaderBase::IsJoiningEnabled(ot::NetworkData::LeaderBase *this)
{
  char v4 = 0;
  if (ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(this, 9u))
  {
    CommissioningDataSubTlv = ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(this, 8u);
    if (CommissioningDataSubTlv)
    {
      for (int i = 0; i < ot::Tlv::GetLength(CommissioningDataSubTlv); ++i)
      {
        if (*(_BYTE *)(ot::Tlv::GetValue(CommissioningDataSubTlv) + i))
        {
          char v4 = 1;
          return v4 & 1;
        }
      }
    }
  }

  return v4 & 1;
}

uint64_t ot::NetworkData::LeaderBase::SteeringDataCheck( ot::NetworkData::LeaderBase *a1, unsigned __int16 *a2)
{
  unsigned int v4 = 0;
  if (ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(a1, 8u))
  {
    ot::As<ot::MeshCoP::SteeringDataTlv>();
    ot::MeshCoP::SteeringDataTlv::CopyTo(v2, (ot::MeshCoP::SteeringData *)v6);
    if (!ot::MeshCoP::SteeringData::Contains((ot::MeshCoP::SteeringData *)v6, a2)) {
      return 23;
    }
  }

  else
  {
    return 13;
  }

  return v4;
}

  ;
}

uint64_t ot::NetworkData::LeaderBase::SteeringDataCheckJoiner( ot::NetworkData::LeaderBase *this, const ot::Mac::ExtAddress *a2, ot::Mac::ExtAddress *a3)
{
  uint64_t v7 = this;
  uint64_t v6 = a2;
  ot::MeshCoP::ComputeJoinerId(a2, (const ot::Mac::ExtAddress *)v8, a3);
  ot::MeshCoP::SteeringData::CalculateHashBitIndexes(v8, v5);
  return ot::NetworkData::LeaderBase::SteeringDataCheck(this, v5);
}

uint64_t ot::NetworkData::LeaderBase::SteeringDataCheckJoiner( ot::NetworkData::LeaderBase *this, const ot::MeshCoP::JoinerDiscerner *a2)
{
  uint64_t v6 = this;
  uint64_t v5 = a2;
  ot::MeshCoP::SteeringData::CalculateHashBitIndexes(a2, v4);
  return ot::NetworkData::LeaderBase::SteeringDataCheck(this, v4);
}

uint64_t ot::Max<unsigned char>(unsigned __int8 a1, unsigned __int8 a2)
{
  else {
    return a2;
  }
}

{
  return __ZN2ot3MaxIhEET_S1_S1_(a1, a2);
}

_BYTE *ot::NetworkData::NetworkDataTlv::Init(_BYTE *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

{
  return __ZN2ot11NetworkData14NetworkDataTlv4InitEv(this);
}

_BYTE *ot::NetworkData::NetworkDataTlv::SetType(_BYTE *result, char a2)
{
  *uint64_t result = *result & 1 | (2 * a2);
  return result;
}

{
  return __ZN2ot11NetworkData14NetworkDataTlv7SetTypeENS1_4TypeE(result, a2);
}

uint64_t ot::NetworkData::HasRouteEntry::GetPreference(ot::NetworkData::HasRouteEntry *this)
{
  unsigned __int8 Flags = ot::NetworkData::HasRouteEntry::GetFlags(this);
  return (char)ot::NetworkData::HasRouteEntry::PreferenceFromFlags((ot::NetworkData::HasRouteEntry *)Flags);
}

{
  return __ZNK2ot11NetworkData13HasRouteEntry13GetPreferenceEv(this);
}

uint64_t ot::NetworkData::HasRouteEntry::PreferenceFromFlags(ot::NetworkData::HasRouteEntry *this)
{
  return (char)ot::NetworkData::RoutePreferenceFromValue((ot::NetworkData *)((int)this >> 6));
}

{
  return __ZN2ot11NetworkData13HasRouteEntry19PreferenceFromFlagsEh(this);
}

uint64_t ot::NetworkData::HasRouteEntry::GetFlags(ot::NetworkData::HasRouteEntry *this)
{
  return *((unsigned __int8 *)this + 2);
}

{
  return __ZNK2ot11NetworkData13HasRouteEntry8GetFlagsEv(this);
}

uint64_t ot::NetworkData::RoutePreferenceFromValue(ot::NetworkData *this)
{
  return (char)ot::Preference::From2BitUint((ot::Preference *)this);
}

{
  return __ZN2ot11NetworkData24RoutePreferenceFromValueEh(this);
}

uint64_t ot::NetworkData::BorderRouterEntry::GetPreference(ot::NetworkData::BorderRouterEntry *this)
{
  unsigned __int16 Flags = ot::NetworkData::BorderRouterEntry::GetFlags(this);
  return (char)ot::NetworkData::BorderRouterEntry::PreferenceFromFlags((ot::NetworkData::BorderRouterEntry *)Flags);
}

{
  return __ZNK2ot11NetworkData17BorderRouterEntry13GetPreferenceEv(this);
}

uint64_t ot::NetworkData::BorderRouterEntry::PreferenceFromFlags(ot::NetworkData::BorderRouterEntry *this)
{
  return (char)ot::NetworkData::RoutePreferenceFromValue((ot::NetworkData *)((int)(unsigned __int16)this >> 14));
}

{
  return __ZN2ot11NetworkData17BorderRouterEntry19PreferenceFromFlagsEt(this);
}

uint64_t ot::NetworkData::BorderRouterEntry::GetFlags(ot::NetworkData::BorderRouterEntry *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1));
}

  ;
}

{
  return __ZNK2ot11NetworkData17BorderRouterEntry8GetFlagsEv(this);
}

ot::NetworkData::Leader *ot::NetworkData::Leader::Leader(ot::NetworkData::Leader *this, ot::Instance *a2)
{
  *((_BYTE *)this + 26ot::ThreadTlv::SetType(this, 7) = 0;
  *((_BYTE *)this + 268) = 0;
  ot::NetworkData::Leader::ContextIds::ContextIds((ot::NetworkData::Leader *)((char *)this + 272), a2);
  ot::TimerMilliIn<ot::NetworkData::Leader,&ot::NetworkData::Leader::HandleTimer>::TimerMilliIn( (ot::NetworkData::Leader *)((char *)this + 344),  a2);
  ot::NetworkData::Leader::Reset(this);
  return this;
}

{
  ot::NetworkData::Leader::Leader(this, a2);
  return this;
}

void ot::NetworkData::Leader::HandleTimer( ot::NetworkData::Leader *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*((_BYTE *)this + 268) & 1) != 0)
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"NetworkData",  "Timed out waiting for netdata on restoring leader role after reset",  a3,  a4,  a5,  a6,  a7,  a8,  (char)this);
    uint64_t v8 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(v9);
    ot::Mle::Mle::BecomeDetached(v8);
    IgnoreError();
  }

  else
  {
    ot::NetworkData::Leader::ContextIds::HandleTimer((ot::NetworkData::Leader *)((char *)this + 272));
  }

ot::NetworkData::LeaderBase *ot::NetworkData::LeaderBase::LeaderBase( ot::NetworkData::LeaderBase *this, ot::Instance *a2)
{
  *((_BYTE *)this + 266) = 0;
  ot::NetworkData::LeaderBase::Reset(this);
  return this;
}

ot::NetworkData::Leader::ContextIds *ot::NetworkData::Leader::ContextIds::ContextIds( ot::NetworkData::Leader::ContextIds *this, ot::Instance *a2)
{
  return this;
}

{
  ot::NetworkData::Leader::ContextIds *result;
  ot::InstanceLocator::InstanceLocator();
  uint64_t result = this;
  *((_DWORD *)this + ot::Mle::Tlv::SetType(this, 15) = 300;
  *((_BYTE *)this + 6ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  return result;
}

ot::TimerMilli *ot::TimerMilliIn<ot::NetworkData::Leader,&ot::NetworkData::Leader::HandleTimer>::TimerMilliIn( ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli( a1,  a2,  (void (*)(ot::Timer *))ot::TimerMilliIn<ot::NetworkData::Leader,&ot::NetworkData::Leader::HandleTimer>::HandleTimer);
  return a1;
}

void ot::NetworkData::Leader::Reset(ot::NetworkData::Leader *this)
{
}

ot::NetworkData::Leader::ContextIds *ot::NetworkData::Leader::ContextIds::Clear( ot::NetworkData::Leader::ContextIds *this)
{
  uint64_t v1 = this;
  for (unsigned __int8 i = 1; i <= 0xFu; ++i)
    this = (ot::NetworkData::Leader::ContextIds *)ot::NetworkData::Leader::ContextIds::MarkAsUnallocated(v1, i);
  return this;
}

_BYTE *ot::NetworkData::Leader::Start(_BYTE *result, char a2)
{
  if ((result[267] & 1) != 0) {
    __assert_rtn("Start", "network_data_leader_ftd.cpp", 89, "!mIsClone");
  }
  result[268] = a2 == 1;
  if ((result[268] & 1) != 0) {
    return (_BYTE *)ot::TimerMilli::Start((ot::TimerMilli *)(result + 344), 0xEA60u);
  }
  return result;
}

ot::NetworkData::LeaderBase *ot::NetworkData::Leader::IncrementVersion(ot::NetworkData::Leader *this)
{
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  uint64_t result = (ot::NetworkData::LeaderBase *)ot::Mle::Mle::IsLeader(v1);
  return result;
}

ot::NetworkData::LeaderBase *ot::NetworkData::Leader::IncrementVersions( ot::NetworkData::LeaderBase *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = this;
  if ((*((_BYTE *)this + 267) & 1) == 0)
  {
    if ((a2 & 1) != 0) {
      ++*((_BYTE *)this + 10);
    }
    ++*((_BYTE *)this + 11);
    ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"NetworkData",  "%s: SignalNetDataChanged",  a3,  a4,  a5,  a6,  a7,  a8,  (char)"IncrementVersions");
    return (ot::NetworkData::LeaderBase *)ot::NetworkData::LeaderBase::SignalNetDataChanged(v8);
  }

  return this;
}

ot::NetworkData::LeaderBase *ot::NetworkData::Leader::IncrementVersionAndStableVersion( ot::NetworkData::Leader *this)
{
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  uint64_t result = (ot::NetworkData::LeaderBase *)ot::Mle::Mle::IsLeader(v1);
  return result;
}

uint64_t ot::NetworkData::Leader::IncrementVersions( ot::NetworkData::Leader *this, const ot::NetworkData::Leader::ChangedFlags *a2)
{
  uint64_t result = ot::NetworkData::Leader::ChangedFlags::DidChange(a2);
  if ((result & 1) != 0)
  {
    char v3 = ot::NetworkData::Leader::ChangedFlags::DidStableChange(a2);
    return (uint64_t)ot::NetworkData::Leader::IncrementVersions(this, v3 & 1, v4, v5, v6, v7, v8, v9);
  }

  return result;
}

uint64_t ot::NetworkData::Leader::ChangedFlags::DidChange(ot::NetworkData::Leader::ChangedFlags *this)
{
  return *(_BYTE *)this & 1;
}

{
  return __ZNK2ot11NetworkData6Leader12ChangedFlags9DidChangeEv(this);
}

uint64_t ot::NetworkData::Leader::ChangedFlags::DidStableChange(ot::NetworkData::Leader::ChangedFlags *this)
{
  return *((_BYTE *)this + 1) & 1;
}

{
  return __ZNK2ot11NetworkData6Leader12ChangedFlags15DidStableChangeEv(this);
}

uint64_t ot::NetworkData::Leader::RemoveBorderRouter(ot::InstanceLocator *a1, unsigned __int16 a2, char a3)
{
  uint64_t v8 = a1;
  unsigned __int16 v7 = a2;
  char v6 = a3;
  ot::NetworkData::Leader::ChangedFlags::ChangedFlags((ot::NetworkData::Leader::ChangedFlags *)v5);
  ot::NetworkData::Leader::RemoveRloc(a1, v7, v6, (ot::NetworkData::Leader::ChangedFlags *)v5);
  return ot::NetworkData::Leader::IncrementVersions(a1, (const ot::NetworkData::Leader::ChangedFlags *)v5);
}

ot::NetworkData::Leader::ChangedFlags *ot::NetworkData::Leader::ChangedFlags::ChangedFlags( ot::NetworkData::Leader::ChangedFlags *this)
{
  return this;
}

void ot::NetworkData::Leader::RemoveRloc( ot::InstanceLocator *a1, unsigned __int16 a2, char a3, ot::NetworkData::Leader::ChangedFlags *a4)
{
  char v10 = a1;
  unsigned __int16 v9 = a2;
  char v8 = a3;
  unsigned __int16 v7 = a4;
  Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(a1);
  ot::NetworkData::NetworkData::NetworkData((ot::NetworkData::NetworkData *)v6, Instance, 0LL, 0);
  ot::NetworkData::Leader::RemoveRloc(a1, v9, v8, (ot::NetworkData::NetworkData *)v6, v7);
}

void ot::NetworkData::Leader::HandleTmf<(ot::Uri)5>( ot::InstanceLocator *a1, ot::Coap::Message *a2, ot::Ip6::MessageInfo *a3)
{
  uint64_t v38 = a1;
  int v37 = a2;
  unsigned __int8 v36 = a3;
  char v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1);
  if (ot::Mle::Mle::IsLeader(v3) && (*((_BYTE *)a1 + 268) & 1) == 0)
  {
    char v4 = ot::UriToString<(ot::Uri)5>();
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"NetworkData", "Received %s", v5, v6, v7, v8, v9, v10, v4);
    ot::Ip6::MessageInfo::GetPeerAddr(v36);
    Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v11);
    if (ot::Ip6::InterfaceIdentifier::IsRoutingLocator(Iid))
    {
      int v32 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)2,unsigned short>>(v37, &v35, v13, v14);
      if (v32)
      {
        if (v32 != 23) {
          return;
        }
      }

      else
      {
        ot::NetworkData::Leader::RemoveBorderRouter(a1, v35, 0);
      }

      if (!ot::Tlv::FindTlv<ot::ThreadNetworkDataTlv>(v37, v39, v15, v16, v17))
      {
        if ((ot::ThreadNetworkDataTlv::IsValid((ot::ThreadNetworkDataTlv *)v39) & 1) == 0) {
          return;
        }
        Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(a1);
        Tlvs = (unsigned __int8 *)ot::ThreadNetworkDataTlv::GetTlvs((ot::ThreadNetworkDataTlv *)v39);
        char Length = ot::Tlv::GetLength((ot::Tlv *)v39);
        ot::NetworkData::NetworkData::NetworkData((ot::NetworkData::NetworkData *)v34, Instance, Tlvs, Length);
        ot::Ip6::MessageInfo::GetPeerAddr(v36);
        char v20 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v19);
        unsigned __int16 Locator = ot::Ip6::InterfaceIdentifier::GetLocator(v20);
        ot::NetworkData::Leader::RegisterNetworkData(a1, Locator, (const ot::NetworkData::NetworkData *)v34);
      }

      unsigned int v22 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
      if (!ot::Coap::CoapBase::SendEmptyAck(v22, v37, v36))
      {
        char v23 = ot::UriToString<(ot::Uri)5>();
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"NetworkData", "Sent %s ack", v24, v25, v26, v27, v28, v29, v23);
      }
    }
  }

uint64_t ot::Tlv::FindTlv<ot::ThreadNetworkDataTlv>( ot::Tlv *a1, void *a2, uint64_t a3, uint64_t a4, ot::Tlv *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)0xA, 0x101u, a2, a5);
}

{
  return __ZN2ot3Tlv7FindTlvINS_20ThreadNetworkDataTlvEEE7otErrorRKNS_7MessageERT_(a1, a2, a3, a4, a5);
}

uint64_t ot::ThreadNetworkDataTlv::IsValid(ot::ThreadNetworkDataTlv *this)
{
  return 1LL;
}

{
  return __ZNK2ot20ThreadNetworkDataTlv7IsValidEv(this);
}

uint64_t ot::ThreadNetworkDataTlv::GetTlvs(ot::ThreadNetworkDataTlv *this)
{
  return (uint64_t)this + 2;
}

{
  return __ZN2ot20ThreadNetworkDataTlv7GetTlvsEv(this);
}

void ot::NetworkData::Leader::RegisterNetworkData( ot::NetworkData::Leader *this, unsigned __int16 a2, const ot::NetworkData::NetworkData *a3)
{
  uint64_t v25 = this;
  unsigned __int16 v24 = a2;
  char v23 = a3;
  int v22 = 0;
  ot::NetworkData::Leader::ChangedFlags::ChangedFlags((ot::NetworkData::Leader::ChangedFlags *)v21);
  unsigned int v18 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(this);
  unsigned __int8 v3 = ot::Mle::RouterIdFromRloc16((ot::Mle *)v24);
  if (ot::RouterTable::IsAllocated(v18, v3))
  {
    int v22 = ot::NetworkData::Leader::Validate(v23, (const ot::NetworkData::NetworkData *)v24);
    if (!v22)
    {
      ot::NetworkData::Leader::RemoveRloc(this, v24, 0, v23, (ot::NetworkData::Leader::ChangedFlags *)v21);
      for (unsigned __int8 i = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkData::GetTlvsStart(v23);
            (unint64_t)i < ot::NetworkData::NetworkData::GetTlvsEnd(v23);
            unsigned __int8 i = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(i))
      {
        int Type = ot::NetworkData::NetworkDataTlv::GetType(i);
        if (Type == 1)
        {
          ot::NetworkData::As<ot::NetworkData::PrefixTlv>();
          int v22 = ot::NetworkData::Leader::AddPrefix(this, v4, (ot::NetworkData::Leader::ChangedFlags *)v21);
          if (v22) {
            goto LABEL_14;
          }
        }

        else if (Type == 5)
        {
          ot::NetworkData::As<ot::NetworkData::ServiceTlv>();
          int v22 = ot::NetworkData::Leader::AddService(this, v5, (ot::NetworkData::Leader::ChangedFlags *)v21);
          if (v22) {
            goto LABEL_14;
          }
        }
      }

      ot::NetworkData::MutableNetworkData::GetBytes(this);
      uint64_t v16 = v6;
      unsigned __int8 Length = ot::NetworkData::NetworkData::GetLength(this);
      ot::Logger::Dump<(ot::LogLevel)5,&ot::NetworkData::kLogModuleName>((ot *)"Register", v16, Length);
    }
  }

  else
  {
    int v22 = 4;
  }

void ot::NetworkData::Leader::HandleTmf<(ot::Uri)16>( ot::InstanceLocator *a1, ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  unsigned __int16 Offset = ot::Message::GetOffset(a2);
  __int16 Length = ot::Message::GetLength(a2);
  unsigned __int16 v25 = Length - ot::Message::GetOffset(a2);
  unsigned __int8 v24 = -1;
  char v23 = 0;
  char v22 = 0;
  Commissionerunsigned __int16 SessionId = 0;
  unsigned __int8 v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1);
  if (ot::Mle::Mle::IsLeader(v3) && (*((_BYTE *)a1 + 268) & 1) == 0 && v25 <= 0xFEuLL)
  {
    ot::Message::ReadBytes(a2, Offset, v29, v25);
    unsigned int v18 = (ot::Tlv *)v29;
    uint64_t v17 = (unsigned __int8 *)&v29[v25];
    while (v18 < (ot::Tlv *)v17)
    {
      if (ot::Tlv::IsExtended(v18)) {
        goto LABEL_32;
      }
      ot::MeshCoP::Tlv::GetNext(v18);
      char Type = ot::MeshCoP::Tlv::GetType(v18);
      switch(Type)
      {
        case 18:
        case 8:
          char v22 = 1;
          break;
        case 9:
          goto LABEL_32;
        case 11:
          ot::As<ot::MeshCoP::CommissionerSessionIdTlv>();
          uint64_t v15 = v5;
          if (!ot::MeshCoP::CommissionerSessionIdTlv::IsValid(v5)) {
            goto LABEL_32;
          }
          Commissionerunsigned __int16 SessionId = ot::MeshCoP::CommissionerSessionIdTlv::GetCommissionerSessionId(v15);
          char v23 = 1;
          break;
      }

      ot::MeshCoP::Tlv::GetNext(v18);
      unsigned int v18 = v6;
    }

    if ((v23 & 1) != 0 && (v22 & 1) != 0)
    {
      ot::NetworkData::LeaderBase::GetCommissioningData(a1);
      char v20 = v7;
      if (v7)
      {
        for (unsigned __int8 i = (ot::Tlv *)ot::NetworkData::NetworkDataTlv::GetValue(v7); ; unsigned __int8 i = v10)
        {
          uint64_t Value = ot::NetworkData::NetworkDataTlv::GetValue(v20);
          if ((unint64_t)i >= Value {
          if (ot::MeshCoP::Tlv::GetType(i) == 11)
          }
          {
            ot::As<ot::MeshCoP::CommissionerSessionIdTlv>();
          }

          else if (ot::MeshCoP::Tlv::GetType(i) == 9)
          {
            unsigned int Size = ot::Tlv::GetSize(i);
            memcpy(&v29[v25], i, Size);
            v25 += ot::Tlv::GetSize(i);
          }

          ot::MeshCoP::Tlv::GetNext(i);
        }
      }

      ot::NetworkData::LeaderBase::SetCommissioningData(a1, (const unsigned __int8 *)v29, v25);
      IgnoreError();
      unsigned __int8 v24 = 1;
    }
  }

BOOL ot::MeshCoP::CommissionerSessionIdTlv::IsValid(ot::MeshCoP::CommissionerSessionIdTlv *this)
{
  return ot::Tlv::GetLength(this) >= 2uLL;
}

{
  return __ZNK2ot7MeshCoP24CommissionerSessionIdTlv7IsValidEv(this);
}

void ot::NetworkData::Leader::SendCommissioningSetResponse( ot::InstanceLocator *a1, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3, unsigned __int8 a4)
{
  unint64_t v4 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
  uint64_t v14 = ot::Coap::CoapBase::NewPriorityResponseMessage(v4, a2);
  if (v14)
  {
    int v15 = ot::Tlv::Append<ot::MeshCoP::StateTlv>((uint64_t)v14, a4);
    if (!v15)
    {
      uint64_t v5 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
      int v15 = ot::Coap::CoapBase::SendMessage(v5, v14, a3);
      if (!v15)
      {
        char v6 = ot::UriToString<(ot::Uri)16>();
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"NetworkData", "sent %s response", v7, v8, v9, v10, v11, v12, v6);
      }
    }
  }

  else
  {
    int v15 = 3;
  }

  if (v15)
  {
    if (v14) {
      ot::Message::Free(v14);
    }
  }

void ot::NetworkData::Leader::HandleTmf<(ot::Uri)14>( ot::InstanceLocator *a1, ot::Tlv *a2, ot::Ip6::MessageInfo *a3)
{
  uint64_t v11 = a1;
  uint64_t v10 = a2;
  uint64_t v9 = a3;
  unsigned __int16 v8 = 0;
  unsigned __int8 v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1);
  if (ot::Mle::Mle::IsLeader(v3)
    && (*((_BYTE *)a1 + 268) & 1) == 0
    && !ot::Tlv::FindTlvValueOffset(v10, (const ot::Message *)0xD, &v7, &v8, v4))
  {
    ot::Message::SetOffset(v10, v7);
  }

  uint64_t v5 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(a1);
  if (ot::Mle::Mle::IsLeader(v5)) {
    ot::NetworkData::Leader::SendCommissioningGetResponse(a1, v10, v8, v9);
  }
}

void ot::NetworkData::Leader::SendCommissioningGetResponse( ot::NetworkData::Leader *this, const ot::Coap::Message *a2, unsigned __int16 a3, const ot::Ip6::MessageInfo *a4)
{
  uint64_t v29 = this;
  uint64_t v28 = a2;
  unsigned __int16 v27 = a3;
  uint64_t v26 = a4;
  int appended = 0;
  memset(v22, 0, sizeof(v22));
  unint64_t v4 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  unsigned __int8 v24 = ot::Coap::CoapBase::NewPriorityResponseMessage(v4, v28);
  if (!v24)
  {
    int appended = 3;
    goto LABEL_22;
  }

  ot::NetworkData::LeaderBase::GetCommissioningData(this);
  char v23 = v5;
  if (v5)
  {
    *(void *)&v22[1] = ot::NetworkData::NetworkDataTlv::GetValue(v23);
    v22[0] = ot::NetworkData::NetworkDataTlv::GetLength(v23);
  }

  if (!*(void *)&v22[1] || !v22[0])
  {
    int appended = 2;
    goto LABEL_22;
  }

  if (v27)
  {
    for (unsigned __int16 i = 0; i < (int)v27; ++i)
    {
      uint64_t v17 = v28;
      __int16 Offset = ot::Message::GetOffset(v28);
      ot::Message::Read<unsigned char>(v17, i + Offset, &v20);
      IgnoreError();
      for (unsigned __int16 j = *(ot::MeshCoP::Tlv **)&v22[1]; (unint64_t)j < *(void *)&v22[1] + (unint64_t)v22[0]; unsigned __int16 j = v8)
      {
        char Type = ot::MeshCoP::Tlv::GetType(j);
        if (v20 == Type)
        {
          int appended = ot::Tlv::AppendTo(j, v24);
          if (appended) {
            goto LABEL_22;
          }
          break;
        }

        ot::MeshCoP::Tlv::GetNext(j);
      }
    }
  }

  else
  {
    int appended = ot::Message::AppendBytes(v24, *(char **)&v22[1], v22[0]);
    if (appended) {
      goto LABEL_22;
    }
  }

  uint64_t v9 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  int appended = ot::Coap::CoapBase::SendMessage(v9, v24, v26);
  if (!appended)
  {
    char v10 = ot::UriToString<(ot::Uri)14>();
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"NetworkData", "Sent %s response", v11, v12, v13, v14, v15, v16, v10);
  }

BOOL ot::NetworkData::Leader::RlocMatch(unsigned __int16 a1, unsigned __int16 a2, char a3)
{
  BOOL v4 = 0;
  if (a3)
  {
    if (a3 == 1) {
      return ot::Mle::RouterIdMatch((ot::Mle *)a1, a2);
    }
  }

  else
  {
    return a1 == a2;
  }

  return v4;
}

uint64_t ot::NetworkData::Leader::Validate( ot::NetworkData::Leader *this, const ot::NetworkData::NetworkData *a2)
{
  char v20 = this;
  unsigned __int16 v19 = (unsigned __int16)a2;
  unsigned int v18 = 0;
  unint64_t TlvsEnd = ot::NetworkData::NetworkData::GetTlvsEnd(this);
  for (unsigned __int16 i = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkData::GetTlvsStart(v20);
        (unint64_t)i < TlvsEnd;
        unsigned __int16 i = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(i))
  {
    Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(v20);
    uint64_t TlvsStart = (const ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkData::GetTlvsStart(v20);
    ot::NetworkData::NetworkData::NetworkData((ot::NetworkData::NetworkData *)v15, Instance, TlvsStart, i);
    unint64_t Next = ot::NetworkData::NetworkDataTlv::GetNext(i);
    if (Next > TlvsEnd) {
      return 6;
    }
    int Type = ot::NetworkData::NetworkDataTlv::GetType(i);
    if (Type == 1)
    {
      ot::NetworkData::As<ot::NetworkData::PrefixTlv>();
      uint64_t v14 = v4;
      if (!ot::NetworkData::PrefixTlv::IsValid(v4)) {
        return 6;
      }
      uint64_t Prefix = (unsigned __int8 *)ot::NetworkData::PrefixTlv::GetPrefix(v14);
      Prefix__int16 Length = ot::NetworkData::PrefixTlv::GetPrefixLength(v14);
      if (ot::NetworkData::NetworkData::FindPrefix((ot::NetworkData::NetworkData *)v15, Prefix, PrefixLength)) {
        return 6;
      }
      unsigned int v18 = ot::NetworkData::Leader::ValidatePrefix(v14, (const ot::NetworkData::PrefixTlv *)v19);
      if (v18) {
        return v18;
      }
    }

    else if (Type == 5)
    {
      ot::NetworkData::As<ot::NetworkData::ServiceTlv>();
      uint64_t v13 = v6;
      if (!ot::NetworkData::ServiceTlv::IsValid(v6)) {
        return 6;
      }
      ot::NetworkData::ServiceTlv::GetServiceData(v13, (uint64_t)v12);
      int EnterpriseNumber = ot::NetworkData::ServiceTlv::GetEnterpriseNumber(v13);
      unsigned int v18 = ot::NetworkData::Leader::ValidateService(v13, (const ot::NetworkData::ServiceTlv *)v19);
      if (v18) {
        return v18;
      }
    }
  }

  return v18;
}

ot::NetworkData::NetworkData *ot::NetworkData::NetworkData::NetworkData( ot::NetworkData::NetworkData *this, ot::Instance *a2, const ot::NetworkData::NetworkDataTlv *a3, const ot::NetworkData::NetworkDataTlv *a4)
{
  return this;
}

{
  ot::NetworkData::NetworkData *result;
  char v6;
  char v6 = (char)a4;
  ot::InstanceLocator::InstanceLocator();
  uint64_t result = this;
  *(void *)this = a3;
  *((_BYTE *)this + 8) = v6 - (_BYTE)a3;
  return result;
}

  ;
}

  ;
}

BOOL ot::NetworkData::PrefixTlv::IsValid(ot::NetworkData::PrefixTlv *this)
{
  BOOL v4 = 0;
  if (ot::NetworkData::NetworkDataTlv::GetLength(this) >= 2uLL)
  {
    unsigned __int8 Length = ot::NetworkData::NetworkDataTlv::GetLength(this);
    BOOL v4 = 0;
    if ((unint64_t)ot::Ip6::Prefix::SizeForLength((ot::Ip6::Prefix *)*((unsigned __int8 *)this
                                                                                              + 3))
       + 2 <= Length)
      return ot::Ip6::Prefix::SizeForLength((ot::Ip6::Prefix *)*((unsigned __int8 *)this + 3)) <= 0x10uLL;
  }

  return v4;
}

{
  return __ZNK2ot11NetworkData9PrefixTlv7IsValidEv(this);
}

uint64_t ot::NetworkData::Leader::ValidatePrefix( ot::NetworkData::Leader *this, const ot::NetworkData::PrefixTlv *a2)
{
  unsigned __int16 v19 = (unsigned __int16)a2;
  unsigned int v18 = 6;
  unint64_t Next = ot::NetworkData::NetworkDataTlv::GetNext(this);
  char v16 = 0;
  char v15 = 0;
  char v14 = 0;
  char v13 = 0;
  for (unsigned __int16 i = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::PrefixTlv::GetSubTlvs(this);
        (unint64_t)i < Next;
        unsigned __int16 i = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(i))
  {
    int Type = ot::NetworkData::NetworkDataTlv::GetType(i);
    if (Type)
    {
      if (Type == 2)
      {
        ot::NetworkData::As<ot::NetworkData::BorderRouterTlv>();
        uint64_t v11 = v2;
        if (ot::NetworkData::NetworkDataTlv::IsStable(v2))
        {
          if ((v13 & 1) != 0) {
            return v18;
          }
          char v13 = 1;
        }

        else
        {
          if ((v14 & 1) != 0) {
            return v18;
          }
          char v14 = 1;
        }

        uint64_t FirstEntry = ot::NetworkData::BorderRouterTlv::GetFirstEntry(v11);
        if (FirstEntry != ot::NetworkData::BorderRouterTlv::GetLastEntry(v11)) {
          return v18;
        }
        unsigned __int8 v3 = (ot::NetworkData::BorderRouterEntry *)ot::NetworkData::BorderRouterTlv::GetFirstEntry(v11);
      }
    }

    else
    {
      ot::NetworkData::As<ot::NetworkData::HasRouteTlv>();
      char v10 = v4;
      if (ot::NetworkData::NetworkDataTlv::IsStable(v4))
      {
        if ((v15 & 1) != 0) {
          return v18;
        }
        char v15 = 1;
      }

      else
      {
        if ((v16 & 1) != 0) {
          return v18;
        }
        char v16 = 1;
      }

      uint64_t v7 = ot::NetworkData::HasRouteTlv::GetFirstEntry(v10);
      if (v7 != ot::NetworkData::HasRouteTlv::GetLastEntry(v10)) {
        return v18;
      }
      uint64_t v5 = (ot::NetworkData::HasRouteEntry *)ot::NetworkData::HasRouteTlv::GetFirstEntry(v10);
    }
  }

  if ((v13 & 1) != 0 || (v14 & 1) != 0 || (v15 & 1) != 0 || (v16 & 1) != 0) {
    return 0;
  }
  return v18;
}

BOOL ot::NetworkData::ServiceTlv::IsValid(ot::NetworkData::ServiceTlv *this)
{
  unsigned __int8 Length = ot::NetworkData::NetworkDataTlv::GetLength(this);
  BOOL v7 = 0;
  if (Length)
  {
    BOOL IsThreadEnterprise = ot::NetworkData::ServiceTlv::IsThreadEnterprise(this);
    uint64_t v2 = 0LL;
    if (!IsThreadEnterprise) {
      uint64_t v2 = 4LL;
    }
    BOOL v7 = 0;
    if (Length >= (unint64_t)(v2 + 2))
    {
      unsigned int EnterpriseNumber = ot::NetworkData::ServiceTlv::GetEnterpriseNumber(this);
      ServiceDataunsigned __int8 Length = ot::NetworkData::ServiceTlv::GetServiceDataLength(this);
      return (unint64_t)Length + 2 >= (unsigned __int16)ot::NetworkData::ServiceTlv::CalculateSize( (ot::NetworkData::ServiceTlv *)EnterpriseNumber,  ServiceDataLength);
    }
  }

  return v7;
}

{
  return __ZNK2ot11NetworkData10ServiceTlv7IsValidEv(this);
}

uint64_t ot::NetworkData::Leader::ValidateService( ot::NetworkData::Leader *this, const ot::NetworkData::ServiceTlv *a2)
{
  unsigned __int16 v9 = (unsigned __int16)a2;
  unsigned int v8 = 6;
  unint64_t Next = ot::NetworkData::NetworkDataTlv::GetNext(this);
  char v6 = 0;
  for (unsigned __int16 i = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::ServiceTlv::GetSubTlvs(this);
        (unint64_t)i < Next;
        unsigned __int16 i = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(i))
  {
    if (ot::NetworkData::NetworkDataTlv::GetNext(i) > Next) {
      return v8;
    }
    if (ot::NetworkData::NetworkDataTlv::GetType(i) == 6)
    {
      ot::NetworkData::As<ot::NetworkData::ServerTlv>();
      BOOL v4 = v2;
      if ((v6 & 1) != 0) {
        return v8;
      }
      char v6 = 1;
      if (!ot::NetworkData::ServerTlv::IsValid(v2)
        || v9 != (unsigned __int16)ot::NetworkData::ServerTlv::GetServer16(v4))
      {
        return v8;
      }
    }
  }

  if ((v6 & 1) != 0) {
    return 0;
  }
  return v8;
}

BOOL ot::NetworkData::ServerTlv::IsValid(ot::NetworkData::ServerTlv *this)
{
  return ot::NetworkData::NetworkDataTlv::GetLength(this) >= 2uLL;
}

{
  return __ZNK2ot11NetworkData9ServerTlv7IsValidEv(this);
}

uint64_t ot::NetworkData::Leader::ContainsMatchingEntry( ot::NetworkData::Leader *this, const ot::NetworkData::PrefixTlv *a2, const ot::NetworkData::HasRouteTlv *a3, const ot::NetworkData::HasRouteEntry *a4)
{
  if (this)
  {
    ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::HasRouteTlv>(this, a2 & 1);
    char v7 = ot::NetworkData::Leader::ContainsMatchingEntry(v4, a3, v5);
  }

  else
  {
    char v7 = 0;
  }

  return v7 & 1;
}

uint64_t ot::NetworkData::Leader::ContainsMatchingEntry( ot::NetworkData::Leader *this, const ot::NetworkData::HasRouteTlv *a2, const ot::NetworkData::HasRouteEntry *a3)
{
  char v5 = 0;
  if (this)
  {
    for (unsigned __int16 i = (char *)ot::NetworkData::HasRouteTlv::GetFirstEntry(this);
          (unint64_t)i <= ot::NetworkData::HasRouteTlv::GetLastEntry(this);
          i += 3)
    {
      if (ot::Equatable<ot::NetworkData::HasRouteEntry>::operator==(i, a2))
      {
        char v5 = 1;
        return v5 & 1;
      }
    }
  }

  return v5 & 1;
}

void ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::HasRouteTlv>( ot::NetworkData::PrefixTlv *a1, char a2)
{
}

{
  __ZNK2ot11NetworkData9PrefixTlv10FindSubTlvINS0_11HasRouteTlvEEEPKT_b(a1, a2);
}

BOOL ot::Equatable<ot::NetworkData::HasRouteEntry>::operator==(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 3uLL) == 0;
}

{
  return __ZNK2ot9EquatableINS_11NetworkData13HasRouteEntryEEeqERKS2_(a1, a2);
}

uint64_t ot::NetworkData::Leader::ContainsMatchingEntry( ot::NetworkData::Leader *this, const ot::NetworkData::PrefixTlv *a2, const ot::NetworkData::BorderRouterTlv *a3, const ot::NetworkData::BorderRouterEntry *a4)
{
  if (this)
  {
    ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::BorderRouterTlv>(this, a2 & 1);
    char v7 = ot::NetworkData::Leader::ContainsMatchingEntry(v4, a3, v5);
  }

  else
  {
    char v7 = 0;
  }

  return v7 & 1;
}

uint64_t ot::NetworkData::Leader::ContainsMatchingEntry( ot::NetworkData::Leader *this, const ot::NetworkData::BorderRouterTlv *a2, const ot::NetworkData::BorderRouterEntry *a3)
{
  char v5 = 0;
  if (this)
  {
    for (unsigned __int16 i = (char *)ot::NetworkData::BorderRouterTlv::GetFirstEntry(this);
          (unint64_t)i <= ot::NetworkData::BorderRouterTlv::GetLastEntry(this);
          i += 4)
    {
      if (ot::Equatable<ot::NetworkData::BorderRouterEntry>::operator==(i, a2))
      {
        char v5 = 1;
        return v5 & 1;
      }
    }
  }

  return v5 & 1;
}

void ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::BorderRouterTlv>( ot::NetworkData::PrefixTlv *a1, char a2)
{
}

{
  __ZNK2ot11NetworkData9PrefixTlv10FindSubTlvINS0_15BorderRouterTlvEEEPKT_b(a1, a2);
}

BOOL ot::Equatable<ot::NetworkData::BorderRouterEntry>::operator==(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 4uLL) == 0;
}

{
  return __ZNK2ot9EquatableINS_11NetworkData17BorderRouterEntryEEeqERKS2_(a1, a2);
}

uint64_t ot::NetworkData::Leader::ContainsMatchingServer( ot::NetworkData::Leader *this, const ot::NetworkData::ServiceTlv *a2, const ot::NetworkData::ServerTlv *a3)
{
  char v10 = this;
  unsigned __int16 v9 = a2;
  char v8 = 0;
  if (this)
  {
    ot::NetworkData::TlvIterator::TlvIterator((ot::NetworkData::TlvIterator *)v6, v10);
    while (1)
    {
      BOOL IsStable = ot::NetworkData::NetworkDataTlv::IsStable(v9);
      ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::ServerTlv>((uint64_t)v6, IsStable);
      char v7 = v4;
      if (!v4) {
        break;
      }
      if (ot::NetworkData::ServerTlv::operator==(v7, v9))
      {
        char v8 = 1;
        return v8 & 1;
      }
    }
  }

  return v8 & 1;
}

void ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::ServerTlv>(uint64_t a1, char a2)
{
}

{
  __ZN2ot11NetworkData11TlvIterator7IterateINS0_9ServerTlvEEEPKT_b(a1, a2);
}

BOOL ot::NetworkData::ServerTlv::operator==( ot::NetworkData::NetworkDataTlv *a1, ot::NetworkData::NetworkDataTlv *a2)
{
  int Length = ot::NetworkData::NetworkDataTlv::GetLength(a1);
  BOOL v8 = 0;
  if (Length == ot::NetworkData::NetworkDataTlv::GetLength(a2))
  {
    __s1 = (void *)ot::NetworkData::NetworkDataTlv::GetValue(a1);
    __s2 = (void *)ot::NetworkData::NetworkDataTlv::GetValue(a2);
    unsigned __int8 v2 = ot::NetworkData::NetworkDataTlv::GetLength(a1);
    return memcmp(__s1, __s2, v2) == 0;
  }

  return v8;
}

{
  return __ZNK2ot11NetworkData9ServerTlveqERKS1_(a1, a2);
}

uint64_t ot::NetworkData::Leader::UpdatePrefix(ot::NetworkData::Leader *this, ot::NetworkData::PrefixTlv *a2)
{
  uint64_t SubTlvs = (const ot::NetworkData::NetworkDataTlv *)ot::NetworkData::PrefixTlv::GetSubTlvs(a2);
  return ot::NetworkData::Leader::UpdateTlv(this, a2, SubTlvs);
}

uint64_t ot::NetworkData::Leader::UpdateTlv( ot::NetworkData::Leader *this, ot::NetworkData::NetworkDataTlv *a2, const ot::NetworkData::NetworkDataTlv *a3)
{
  unsigned __int8 v6 = 1;
  if (a3 == (const ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(a2))
  {
    ot::NetworkData::MutableNetworkData::RemoveTlv(this, a2);
    return 0;
  }

  else
  {
    for (unsigned __int16 i = a3;
          (unint64_t)i < ot::NetworkData::NetworkDataTlv::GetNext(a2);
          unsigned __int16 i = (const ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(i))
    {
      if (ot::NetworkData::NetworkDataTlv::IsStable(i))
      {
        ot::NetworkData::NetworkDataTlv::SetStable(a2);
        return v6;
      }
    }

    ot::NetworkData::NetworkDataTlv::ClearStable(a2);
  }

  return v6;
}

uint64_t ot::NetworkData::Leader::UpdateService( ot::NetworkData::Leader *this, ot::NetworkData::ServiceTlv *a2)
{
  uint64_t SubTlvs = (const ot::NetworkData::NetworkDataTlv *)ot::NetworkData::ServiceTlv::GetSubTlvs(a2);
  return ot::NetworkData::Leader::UpdateTlv(this, a2, SubTlvs);
}

_BYTE *ot::NetworkData::NetworkDataTlv::SetStable(_BYTE *this)
{
  *this |= 1u;
  return this;
}

{
  return __ZN2ot11NetworkData14NetworkDataTlv9SetStableEv(this);
}

_BYTE *ot::NetworkData::NetworkDataTlv::ClearStable(_BYTE *this)
{
  *this &= ~1u;
  return this;
}

{
  return __ZN2ot11NetworkData14NetworkDataTlv11ClearStableEv(this);
}

void ot::NetworkData::Leader::CheckForNetDataGettingFull( ot::NetworkData::Leader *this, const ot::NetworkData::NetworkData *a2, unsigned __int16 a3)
{
  unsigned __int8 v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (!ot::Mle::Mle::IsLeader(v3))
  {
    Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
    ot::NetworkData::Leader::Leader((ot::NetworkData::Leader *)v10, Instance);
    ot::NetworkData::Leader::MarkAsClone((ot::NetworkData::Leader *)v10);
    if (ot::NetworkData::NetworkData::CopyNetworkData( (uint64_t)this,  0,  (ot::NetworkData::MutableNetworkData *)v10)) {
      __assert_rtn("CheckForNetDataGettingFull", "network_data_leader_ftd.cpp", 732, "false");
    }
    if (a3 != 65534) {
      ot::NetworkData::Leader::RemoveBorderRouter((ot::InstanceLocator *)v10, a3, 0);
    }
    char v5 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16(v5);
    ot::NetworkData::Leader::RegisterNetworkData((ot::NetworkData::Leader *)v10, Rloc16, a2);
  }

uint64_t ot::NetworkData::Leader::MarkAsClone(ot::NetworkData::Leader *this)
{
  *((_BYTE *)this + 26ot::ThreadTlv::SetType(this, 7) = 1;
  return ot::NetworkData::Leader::ContextIds::MarkAsClone((uint64_t)this + 272);
}

uint64_t ot::NetworkData::Leader::ContextIds::MarkAsClone(uint64_t this)
{
  *(_BYTE *)(this + 6ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 1;
  return this;
}

{
  return __ZN2ot11NetworkData6Leader10ContextIds11MarkAsCloneEv(this);
}

void ot::NetworkData::Leader::RemoveRloc( ot::NetworkData::MutableNetworkData *a1, unsigned __int16 a2, char a3, ot::NetworkData::NetworkData *a4, ot::NetworkData::Leader::ChangedFlags *a5)
{
  unsigned __int16 v27 = a1;
  unsigned __int16 v26 = a2;
  char v25 = a3;
  unsigned __int8 v24 = a4;
  char v23 = a5;
  ot::NetworkData::MutableNetworkData::GetTlvsStart(a1);
  unint64_t Next = v5;
  while (1)
  {
    char v15 = Next;
    ot::NetworkData::MutableNetworkData::GetTlvsEnd(a1);
    int Type = ot::NetworkData::NetworkDataTlv::GetType(Next);
    if (Type == 1)
    {
      ot::NetworkData::As<ot::NetworkData::PrefixTlv>();
      size_t v21 = v7;
      char v13 = v24;
      uint64_t Prefix = (unsigned __int8 *)ot::NetworkData::PrefixTlv::GetPrefix(v7);
      Prefixint Length = ot::NetworkData::PrefixTlv::GetPrefixLength(v21);
      char v20 = ot::NetworkData::NetworkData::FindPrefix(v13, Prefix, PrefixLength);
      ot::NetworkData::Leader::RemoveRlocInPrefix((uint64_t)a1, v21, v26, v25, v20, v23);
    }

    else if (Type != 5 {
           || (ot::NetworkData::As<ot::NetworkData::ServiceTlv>(),
    }
               unsigned __int16 v19 = v9,
               ot::NetworkData::ServiceTlv::GetServiceData(v9, (uint64_t)v18),
               uint64_t v11 = (uint64_t)v24,
               int EnterpriseNumber = ot::NetworkData::ServiceTlv::GetEnterpriseNumber(v19),
               Service = ot::NetworkData::NetworkData::FindService(v11, EnterpriseNumber, (uint64_t)v18, 1),
               ot::NetworkData::Leader::RemoveRlocInService(a1, v19, v26, v25, Service, v23),
               ot::NetworkData::Leader::UpdateService(a1, v19)))
    {
LABEL_9:
      unint64_t Next = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(Next);
    }
  }

uint64_t ot::NetworkData::Leader::AddPrefix( ot::NetworkData::Leader *this, const ot::NetworkData::PrefixTlv *a2, ot::NetworkData::Leader::ChangedFlags *a3)
{
  unsigned int HasRoute = 0;
  uint64_t Prefix = (unsigned __int8 *)ot::NetworkData::PrefixTlv::GetPrefix(a2);
  Prefixint Length = ot::NetworkData::PrefixTlv::GetPrefixLength(a2);
  ot::NetworkData::MutableNetworkData::FindPrefix(this, Prefix, PrefixLength);
  unsigned int v18 = v4;
  if (!v4)
  {
    unsigned __int8 v5 = ot::NetworkData::PrefixTlv::GetPrefixLength(a2);
    unsigned __int16 v6 = ot::NetworkData::PrefixTlv::CalculateSize((ot::NetworkData::PrefixTlv *)v5);
    ot::NetworkData::MutableNetworkData::AppendTlv(this, v6);
    ot::NetworkData::As<ot::NetworkData::PrefixTlv>();
    unsigned int v18 = v7;
    if (!v7)
    {
      unsigned int HasRoute = 3;
      goto LABEL_14;
    }

    char DomainId = ot::NetworkData::PrefixTlv::GetDomainId(a2);
    unsigned __int8 v14 = ot::NetworkData::PrefixTlv::GetPrefixLength(a2);
    BOOL v8 = (const unsigned __int8 *)ot::NetworkData::PrefixTlv::GetPrefix(a2);
    ot::NetworkData::PrefixTlv::Init(v18, DomainId, v14, v8);
  }

  for (unsigned __int16 i = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::PrefixTlv::GetSubTlvs(a2);
        (unint64_t)i < ot::NetworkData::NetworkDataTlv::GetNext(a2);
        unsigned __int16 i = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(i))
  {
    int Type = ot::NetworkData::NetworkDataTlv::GetType(i);
    if (Type)
    {
      if (Type == 2)
      {
        ot::NetworkData::As<ot::NetworkData::BorderRouterTlv>();
        unsigned int HasRoute = ot::NetworkData::Leader::AddBorderRouter(this, v10, v18, a3);
        if (HasRoute) {
          break;
        }
      }
    }

    else
    {
      ot::NetworkData::As<ot::NetworkData::HasRouteTlv>();
      unsigned int HasRoute = ot::NetworkData::Leader::AddHasRoute(this, v9, v18, a3);
      if (HasRoute) {
        break;
      }
    }
  }

uint64_t ot::NetworkData::Leader::AddService( ot::NetworkData::Leader *this, const ot::NetworkData::ServiceTlv *a2, ot::NetworkData::Leader::ChangedFlags *a3)
{
  unsigned __int8 v24 = this;
  char v23 = a2;
  char v22 = a3;
  unsigned int v21 = 0;
  ot::NetworkData::ServiceTlv::GetServiceData(a2, (uint64_t)v19);
  int EnterpriseNumber = ot::NetworkData::ServiceTlv::GetEnterpriseNumber(v23);
  ot::NetworkData::MutableNetworkData::FindService((uint64_t)this, EnterpriseNumber, (uint64_t)v19, 1);
  char v20 = v4;
  if (!v4)
  {
    unsigned int v21 = ot::NetworkData::Leader::AllocateServiceId(this, &v17);
    if (v21) {
      goto LABEL_9;
    }
    unsigned int v15 = ot::NetworkData::ServiceTlv::GetEnterpriseNumber(v23);
    unsigned __int8 Length = ot::Data<(ot::DataLengthType)0>::GetLength((uint64_t)v19);
    unsigned __int16 v6 = ot::NetworkData::ServiceTlv::CalculateSize((ot::NetworkData::ServiceTlv *)v15, Length);
    ot::NetworkData::MutableNetworkData::AppendTlv(this, v6);
    ot::NetworkData::As<ot::NetworkData::ServiceTlv>();
    char v20 = v7;
    if (!v7)
    {
      unsigned int v21 = 3;
      goto LABEL_9;
    }

    unsigned __int8 v14 = v20;
    char v13 = v17;
    unsigned int v8 = ot::NetworkData::ServiceTlv::GetEnterpriseNumber(v23);
    ot::NetworkData::ServiceTlv::Init(v14, v13, v8, (uint64_t)v19);
  }

  uint64_t SubTlvs = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::ServiceTlv::GetSubTlvs(v23);
  unint64_t Next = ot::NetworkData::NetworkDataTlv::GetNext(v23);
  ot::NetworkData::NetworkDataTlv::Find<ot::NetworkData::ServerTlv>(SubTlvs, Next);
  unsigned int v18 = v10;
  if (!v10) {
    __assert_rtn("AddService", "network_data_leader_ftd.cpp", 882, "server != nullptr");
  }
  unsigned int v21 = ot::NetworkData::Leader::AddServer(this, v18, v20, v22);
LABEL_9:
  if (v20) {
    ot::NetworkData::Leader::UpdateService(this, v20);
  }
  return v21;
}

void ot::Logger::Dump<(ot::LogLevel)5,&ot::NetworkData::kLogModuleName>( ot *a1, uint64_t a2, unsigned __int16 a3)
{
}

{
  ot::Logger::DumpAtLevel<(ot::LogLevel)5>((ot *)"NetworkData", a1, a2, a3);
}

uint64_t ot::NetworkData::Notifier::SignalNetworkDataFull(ot::NetworkData::Notifier *this)
{
  return ot::Tasklet::Post((ot::NetworkData::Notifier *)((char *)this + 56));
}

{
  return __ZN2ot11NetworkData8Notifier21SignalNetworkDataFullEv(this);
}

void ot::NetworkData::MutableNetworkData::FindPrefix( ot::NetworkData::MutableNetworkData *this, const unsigned __int8 *a2, unsigned __int8 a3)
{
}

{
  __ZN2ot11NetworkData18MutableNetworkData10FindPrefixEPKhh(this, a2, a3);
}

uint64_t ot::NetworkData::PrefixTlv::CalculateSize(ot::NetworkData::PrefixTlv *this)
{
  return (unsigned __int16)(ot::Ip6::Prefix::SizeForLength((ot::Ip6::Prefix *)this) + 4);
}

{
  return __ZN2ot11NetworkData9PrefixTlv13CalculateSizeEh(this);
}

uint64_t ot::NetworkData::PrefixTlv::Init( ot::NetworkData::PrefixTlv *this, char a2, unsigned __int8 a3, const unsigned __int8 *a4)
{
  *((_BYTE *)this + 2) = a2;
  *((_BYTE *)this + 3) = a3;
  __dst = (void *)ot::NetworkData::PrefixTlv::GetPrefix(this);
  unsigned __int8 v4 = ot::Ip6::Prefix::SizeForLength((ot::Ip6::Prefix *)a3);
  memcpy(__dst, a4, v4);
  return ot::NetworkData::PrefixTlv::SetSubTlvsLength(this, 0);
}

{
  return __ZN2ot11NetworkData9PrefixTlv4InitEhhPKh(this, a2, a3, a4);
}

uint64_t ot::NetworkData::Leader::AddHasRoute( ot::NetworkData::Leader *this, const ot::NetworkData::HasRouteTlv *a2, ot::NetworkData::PrefixTlv *a3, ot::NetworkData::Leader::ChangedFlags *a4)
{
  unsigned int v15 = 0;
  BOOL IsStable = ot::NetworkData::NetworkDataTlv::IsStable(a2);
  ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::HasRouteTlv>((uint64_t)a3, IsStable);
  unsigned __int8 v14 = v5;
  uint64_t FirstEntry = (ot::NetworkData::HasRouteTlv *)ot::NetworkData::HasRouteTlv::GetFirstEntry(a2);
  if (!v14)
  {
    if (!ot::NetworkData::MutableNetworkData::CanInsert(this, 5u)) {
      return 3;
    }
    ot::NetworkData::NetworkDataTlv::GetNext(a3);
    ot::NetworkData::As<ot::NetworkData::HasRouteTlv>();
    unsigned __int8 v14 = (ot::NetworkData::NetworkDataTlv *)v7;
    ot::NetworkData::MutableNetworkData::Insert(this, v7, 2u);
    ot::NetworkData::NetworkDataTlv::IncreaseLength((uint64_t)a3, 2);
    ot::NetworkData::HasRouteTlv::Init(v14);
    if (ot::NetworkData::NetworkDataTlv::IsStable(a2)) {
      ot::NetworkData::NetworkDataTlv::SetStable(v14);
    }
  }

  if ((ot::NetworkData::Leader::ContainsMatchingEntry(v14, FirstEntry, v6) & 1) == 0)
  {
    if (ot::NetworkData::MutableNetworkData::CanInsert(this, 3u))
    {
      unint64_t Next = (char *)ot::NetworkData::NetworkDataTlv::GetNext(v14);
      ot::NetworkData::MutableNetworkData::Insert(this, Next, 3u);
      ot::NetworkData::NetworkDataTlv::IncreaseLength((uint64_t)v14, 3);
      ot::NetworkData::NetworkDataTlv::IncreaseLength((uint64_t)a3, 3);
      uint64_t LastEntry = ot::NetworkData::HasRouteTlv::GetLastEntry(v14);
      *(_WORD *)uint64_t LastEntry = *(_WORD *)FirstEntry;
      *(_BYTE *)(LastEntry + 2) = *((_BYTE *)FirstEntry + 2);
      ot::NetworkData::Leader::ChangedFlags::Update(a4, v14);
    }

    else
    {
      return 3;
    }
  }

  return v15;
}

uint64_t ot::NetworkData::Leader::AddBorderRouter( ot::NetworkData::Leader *this, const ot::NetworkData::BorderRouterTlv *a2, ot::NetworkData::PrefixTlv *a3, ot::NetworkData::Leader::ChangedFlags *a4)
{
  unsigned __int16 v27 = this;
  unsigned __int16 v26 = a2;
  char v25 = a3;
  unsigned __int8 v24 = a4;
  unsigned int UnallocatedId = 0;
  BOOL IsStable = ot::NetworkData::NetworkDataTlv::IsStable(a2);
  ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::BorderRouterTlv>((uint64_t)a3, IsStable);
  char v22 = v5;
  ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::ContextTlv>((uint64_t)v25);
  unsigned int v21 = v6;
  unsigned __int8 v20 = 0;
  uint64_t FirstEntry = (ot::NetworkData::BorderRouterTlv *)ot::NetworkData::BorderRouterTlv::GetFirstEntry(v26);
  if (v21
    || (unsigned int UnallocatedId = ot::NetworkData::Leader::ContextIds::GetUnallocatedId( (ot::NetworkData::Leader *)((char *)this + 272),  &v20)) == 0)
  {
    if (!v22)
    {
      __int16 v7 = 4;
      if (v21) {
        __int16 v7 = 0;
      }
      if (!ot::NetworkData::MutableNetworkData::CanInsert(this, v7 + 6)) {
        return 3;
      }
      ot::NetworkData::NetworkDataTlv::GetNext(v25);
      ot::NetworkData::As<ot::NetworkData::BorderRouterTlv>();
      char v22 = v8;
      ot::NetworkData::MutableNetworkData::Insert(this, (char *)v8, 2u);
      ot::NetworkData::NetworkDataTlv::IncreaseLength((uint64_t)v25, 2);
      ot::NetworkData::BorderRouterTlv::Init(v22);
      if (ot::NetworkData::NetworkDataTlv::IsStable(v26)) {
        ot::NetworkData::NetworkDataTlv::SetStable(v22);
      }
    }

    if (!v21)
    {
      if (!ot::NetworkData::MutableNetworkData::CanInsert(this, 8u)) {
        return 3;
      }
      ot::NetworkData::NetworkDataTlv::GetNext(v25);
      ot::NetworkData::As<ot::NetworkData::ContextTlv>();
      unsigned int v21 = v9;
      ot::NetworkData::MutableNetworkData::Insert(this, (char *)v9, 4u);
      ot::NetworkData::NetworkDataTlv::IncreaseLength((uint64_t)v25, 4);
      char v16 = v21;
      char v15 = v20;
      Prefixunsigned __int8 Length = ot::NetworkData::PrefixTlv::GetPrefixLength(v25);
      ot::NetworkData::ContextTlv::Init(v16, v15, PrefixLength);
    }

    if (ot::NetworkData::NetworkDataTlv::IsStable(v26)) {
      ot::NetworkData::NetworkDataTlv::SetStable(v21);
    }
    ot::NetworkData::ContextTlv::SetCompress((uint64_t)v21);
    unsigned __int8 ContextId = ot::NetworkData::ContextTlv::GetContextId(v21);
    ot::NetworkData::Leader::ContextIds::MarkAsInUse((ot::NetworkData::Leader *)((char *)this + 272), ContextId);
    if ((ot::NetworkData::Leader::ContainsMatchingEntry(v22, FirstEntry, v12) & 1) == 0)
    {
      if (ot::NetworkData::MutableNetworkData::CanInsert(this, 4u))
      {
        unint64_t Next = (char *)ot::NetworkData::NetworkDataTlv::GetNext(v22);
        ot::NetworkData::MutableNetworkData::Insert(this, Next, 4u);
        ot::NetworkData::NetworkDataTlv::IncreaseLength((uint64_t)v22, 4);
        ot::NetworkData::NetworkDataTlv::IncreaseLength((uint64_t)v25, 4);
        *(_DWORD *)ot::NetworkData::BorderRouterTlv::GetLastEntry(v22) = *(_DWORD *)FirstEntry;
        ot::NetworkData::Leader::ChangedFlags::Update(v24, v22);
      }

      else
      {
        return 3;
      }
    }
  }

  return UnallocatedId;
}

void ot::NetworkData::MutableNetworkData::FindService(uint64_t a1, int a2, uint64_t a3, char a4)
{
}

{
  __ZN2ot11NetworkData18MutableNetworkData11FindServiceEjRKNS0_11ServiceDataENS0_11NetworkData16ServiceMatchModeE( a1,  a2,  a3,  a4);
}

uint64_t ot::NetworkData::Leader::AllocateServiceId(ot::NetworkData::Leader *this, unsigned __int8 *a2)
{
  unsigned int v11 = 23;
  if ((*((_BYTE *)this + 267) & 1) != 0)
  {
    *a2 = 0;
    return 0;
  }

  else
  {
    for (unsigned __int8 i = 0; i <= 0xFu; ++i)
    {
      if (!ot::NetworkData::Leader::FindServiceById(this, i))
      {
        *a2 = i;
        unsigned int v11 = 0;
        ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"NetworkData",  "Allocated Service ID = %d",  v2,  v3,  v4,  v5,  v6,  v7,  i);
        return v11;
      }
    }
  }

  return v11;
}

uint64_t ot::NetworkData::ServiceTlv::CalculateSize(ot::NetworkData::ServiceTlv *this, unsigned __int8 a2)
{
  __int16 v2 = 0;
  if ((_DWORD)this != 44970) {
    __int16 v2 = 4;
  }
  return (unsigned __int16)(a2 + 4 + v2);
}

{
  return __ZN2ot11NetworkData10ServiceTlv13CalculateSizeEjh(this, a2);
}

void ot::NetworkData::NetworkDataTlv::Find<ot::NetworkData::ServerTlv>( ot::NetworkData::NetworkDataTlv *a1, unint64_t a2)
{
}

{
  __ZN2ot11NetworkData14NetworkDataTlv4FindINS0_9ServerTlvEEEPKT_PKS1_S8_(a1, a2);
}

uint64_t ot::NetworkData::Leader::AddServer( ot::NetworkData::Leader *this, const ot::NetworkData::ServerTlv *a2, ot::NetworkData::ServiceTlv *a3, ot::NetworkData::Leader::ChangedFlags *a4)
{
  unsigned __int8 v17 = this;
  char v16 = a2;
  char v15 = a3;
  unsigned __int8 v14 = a4;
  unsigned int v13 = 0;
  unsigned __int8 Size = ot::NetworkData::NetworkDataTlv::GetSize(a2);
  if ((ot::NetworkData::Leader::ContainsMatchingServer(v15, v16, v4) & 1) == 0)
  {
    if (ot::NetworkData::MutableNetworkData::CanInsert(this, Size))
    {
      ot::NetworkData::ServerTlv::GetServerData(v16, (uint64_t)v11);
      ot::NetworkData::NetworkDataTlv::GetNext(v15);
      ot::NetworkData::As<ot::NetworkData::ServerTlv>();
      uint64_t v12 = v5;
      ot::NetworkData::MutableNetworkData::Insert(this, (char *)v5, Size);
      unsigned int v8 = v12;
      unsigned __int16 Server16 = ot::NetworkData::ServerTlv::GetServer16(v16);
      ot::NetworkData::ServerTlv::Init(v8, Server16, (uint64_t)v11);
      if (ot::NetworkData::NetworkDataTlv::IsStable(v16)) {
        ot::NetworkData::NetworkDataTlv::SetStable(v12);
      }
      ot::NetworkData::NetworkDataTlv::IncreaseLength((uint64_t)v15, Size);
      ot::NetworkData::Leader::ChangedFlags::Update(v14, v12);
    }

    else
    {
      return 3;
    }
  }

  return v13;
}

void ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::HasRouteTlv>(uint64_t a1, char a2)
{
}

{
  __ZN2ot11NetworkData9PrefixTlv10FindSubTlvINS0_11HasRouteTlvEEEPT_b(a1, a2);
}

uint64_t ot::NetworkData::NetworkDataTlv::IncreaseLength(uint64_t this, char a2)
{
  *(_BYTE *)(this + 1) += a2;
  return this;
}

{
  return __ZN2ot11NetworkData14NetworkDataTlv14IncreaseLengthEh(this, a2);
}

uint64_t ot::NetworkData::HasRouteTlv::Init(ot::NetworkData::HasRouteTlv *this)
{
  return ot::NetworkData::NetworkDataTlv::SetLength((uint64_t)this, 0);
}

{
  return __ZN2ot11NetworkData11HasRouteTlv4InitEv(this);
}

BOOL ot::NetworkData::Leader::ChangedFlags::Update( ot::NetworkData::Leader::ChangedFlags *this, const ot::NetworkData::NetworkDataTlv *a2)
{
  *(_BYTE *)this = 1;
  char v2 = *((_BYTE *)this + 1);
  BOOL result = 1LL;
  char v5 = 1;
  if ((v2 & 1) == 0)
  {
    BOOL result = ot::NetworkData::NetworkDataTlv::IsStable(a2);
    char v5 = result;
  }

  *((_BYTE *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = v5 & 1;
  return result;
}

{
  return __ZN2ot11NetworkData6Leader12ChangedFlags6UpdateERKNS0_14NetworkDataTlvE(this, a2);
}

void ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::BorderRouterTlv>(uint64_t a1, char a2)
{
}

{
  __ZN2ot11NetworkData9PrefixTlv10FindSubTlvINS0_15BorderRouterTlvEEEPT_b(a1, a2);
}

uint64_t ot::NetworkData::Leader::ContextIds::GetUnallocatedId( ot::NetworkData::Leader::ContextIds *this, unsigned __int8 *a2)
{
  unsigned int v5 = 23;
  if ((*((_BYTE *)this + 64) & 1) != 0)
  {
    *a2 = 1;
    return 0;
  }

  else
  {
    for (unsigned __int8 i = 1; i <= 0xFu; ++i)
    {
      if (ot::NetworkData::Leader::ContextIds::IsUnallocated(this, i))
      {
        *a2 = i;
        return 0;
      }
    }
  }

  return v5;
}

uint64_t ot::NetworkData::BorderRouterTlv::Init(ot::NetworkData::BorderRouterTlv *this)
{
  return ot::NetworkData::NetworkDataTlv::SetLength((uint64_t)this, 0);
}

{
  return __ZN2ot11NetworkData15BorderRouterTlv4InitEv(this);
}

uint64_t ot::NetworkData::ContextTlv::Init(ot::NetworkData::ContextTlv *this, char a2, char a3)
{
  uint64_t result = ot::NetworkData::NetworkDataTlv::SetLength((uint64_t)this, 2);
  *((_BYTE *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = a2 & 0xF;
  *((_BYTE *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 3) = a3;
  return result;
}

{
  return __ZN2ot11NetworkData10ContextTlv4InitEhh(this, a2, a3);
}

uint64_t ot::NetworkData::ContextTlv::SetCompress(uint64_t this)
{
  *(_BYTE *)(this + 2) |= 0x10u;
  return this;
}

{
  return __ZN2ot11NetworkData10ContextTlv11SetCompressEv(this);
}

_DWORD *ot::NetworkData::Leader::ContextIds::MarkAsInUse( ot::NetworkData::Leader::ContextIds *this, unsigned __int8 a2)
{
  return ot::Time::SetValue((_DWORD *)this + a2 - 1, 1);
}

{
  return __ZN2ot11NetworkData6Leader10ContextIds11MarkAsInUseEh(this, a2);
}

uint64_t ot::NetworkData::ServerTlv::Init(ot::NetworkData::ServerTlv *a1, unsigned __int16 a2, uint64_t a3)
{
  char Length = ot::Data<(ot::DataLengthType)0>::GetLength(a3);
  return ot::NetworkData::NetworkDataTlv::SetLength((uint64_t)a1, Length + 2);
}

{
  return __ZN2ot11NetworkData9ServerTlv4InitEtRKNS0_10ServerDataE(a1, a2, a3);
}

ot::NetworkData::ServiceTlv *ot::NetworkData::Leader::FindServiceById( ot::NetworkData::Leader *this, char a2)
{
  unsigned int v11 = this;
  char v10 = a2;
  uint64_t TlvsStart = ot::NetworkData::NetworkData::GetTlvsStart(this);
  uint64_t TlvsEnd = ot::NetworkData::NetworkData::GetTlvsEnd(this);
  ot::Cli::Dataset::Dataset(v8, TlvsStart, TlvsEnd);
  do
  {
    ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::ServiceTlv>((uint64_t)v8);
    unsigned __int16 v9 = v3;
    if (!v3) {
      break;
    }
    char ServiceId = ot::NetworkData::ServiceTlv::GetServiceId(v9);
  }

  while (v10 != ServiceId);
  return v9;
}

void ot::NetworkData::Leader::RemoveRlocInPrefix( uint64_t a1, ot::NetworkData::PrefixTlv *a2, unsigned __int16 a3, char a4, ot::NetworkData::Leader *a5, ot::NetworkData::Leader::ChangedFlags *a6)
{
  uint64_t SubTlvs = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::PrefixTlv::GetSubTlvs(a2);
  while ((unint64_t)SubTlvs < ot::NetworkData::NetworkDataTlv::GetNext(a2))
  {
    int Type = ot::NetworkData::NetworkDataTlv::GetType(SubTlvs);
    if (Type)
    {
      if (Type == 2)
      {
        ot::NetworkData::As<ot::NetworkData::BorderRouterTlv>();
        ot::NetworkData::Leader::RemoveRlocInBorderRouter( (ot::NetworkData::MutableNetworkData *)a1,  (uint64_t)a2,  v7,  a3,  a4,  a5,  a6);
      }

void ot::NetworkData::Leader::RemoveRlocInService( ot::NetworkData::MutableNetworkData *a1, ot::NetworkData::ServiceTlv *a2, unsigned __int16 a3, char a4, ot::NetworkData::Leader *a5, ot::NetworkData::Leader::ChangedFlags *a6)
{
  uint64_t SubTlvs = ot::NetworkData::ServiceTlv::GetSubTlvs(a2);
  while (1)
  {
    uint64_t Next = ot::NetworkData::NetworkDataTlv::GetNext(a2);
    ot::NetworkData::NetworkDataTlv::Find<ot::NetworkData::ServerTlv>(SubTlvs, Next);
    uint64_t v12 = v7;
    if (!v7) {
      break;
    }
    unsigned __int16 Server16 = ot::NetworkData::ServerTlv::GetServer16(v7);
    if (!ot::NetworkData::Leader::RlocMatch(Server16, a3, a4)
      || (ot::NetworkData::Leader::ContainsMatchingServer(a5, v12, v9) & 1) != 0)
    {
      uint64_t SubTlvs = ot::NetworkData::NetworkDataTlv::GetNext(v12);
    }

    else
    {
      char Size = ot::NetworkData::NetworkDataTlv::GetSize(v12);
      ot::NetworkData::Leader::ChangedFlags::Update(a6, v12);
      ot::NetworkData::MutableNetworkData::RemoveTlv(a1, v12);
      ot::NetworkData::NetworkDataTlv::DecreaseLength((uint64_t)a2, Size);
    }
  }

unint64_t ot::NetworkData::Leader::RemoveRlocInHasRoute( ot::NetworkData::MutableNetworkData *a1, uint64_t a2, ot::NetworkData::HasRouteTlv *a3, unsigned __int16 a4, char a5, ot::NetworkData::Leader *a6, ot::NetworkData::Leader::ChangedFlags *a7)
{
  uint64_t FirstEntry = (ot::NetworkData::HasRouteEntry *)ot::NetworkData::HasRouteTlv::GetFirstEntry(a3);
  while (1)
  {
    unint64_t result = ot::NetworkData::HasRouteTlv::GetLastEntry(a3);
    unsigned __int16 Rloc = ot::NetworkData::HasRouteEntry::GetRloc(FirstEntry);
    if (!ot::NetworkData::Leader::RlocMatch(Rloc, a4, a5)
      || (BOOL IsStable = ot::NetworkData::NetworkDataTlv::IsStable(a3),
          (ot::NetworkData::Leader::ContainsMatchingEntry( a6,  (const ot::NetworkData::PrefixTlv *)IsStable,  FirstEntry,  v10) & 1) != 0))
    {
      uint64_t FirstEntry = (ot::NetworkData::HasRouteEntry *)ot::NetworkData::HasRouteEntry::GetNext(FirstEntry);
    }

    else
    {
      ot::NetworkData::Leader::ChangedFlags::Update(a7, a3);
      ot::NetworkData::NetworkDataTlv::DecreaseLength((uint64_t)a3, 3);
      ot::NetworkData::NetworkDataTlv::DecreaseLength(a2, 3);
      ot::NetworkData::MutableNetworkData::Remove(a1, (char *)FirstEntry, 3u);
    }
  }

  return result;
}

uint64_t ot::NetworkData::NetworkDataTlv::DecreaseLength(uint64_t this, char a2)
{
  *(_BYTE *)(this + 1) -= a2;
  return this;
}

{
  return __ZN2ot11NetworkData14NetworkDataTlv14DecreaseLengthEh(this, a2);
}

unint64_t ot::NetworkData::Leader::RemoveRlocInBorderRouter( ot::NetworkData::MutableNetworkData *a1, uint64_t a2, ot::NetworkData::BorderRouterTlv *a3, unsigned __int16 a4, char a5, ot::NetworkData::Leader *a6, ot::NetworkData::Leader::ChangedFlags *a7)
{
  uint64_t FirstEntry = (ot::NetworkData::BorderRouterEntry *)ot::NetworkData::BorderRouterTlv::GetFirstEntry(a3);
  while (1)
  {
    unint64_t result = ot::NetworkData::BorderRouterTlv::GetLastEntry(a3);
    unsigned __int16 Rloc = ot::NetworkData::BorderRouterEntry::GetRloc(FirstEntry);
    if (!ot::NetworkData::Leader::RlocMatch(Rloc, a4, a5)
      || (BOOL IsStable = ot::NetworkData::NetworkDataTlv::IsStable(a3),
          (ot::NetworkData::Leader::ContainsMatchingEntry( a6,  (const ot::NetworkData::PrefixTlv *)IsStable,  FirstEntry,  v10) & 1) != 0))
    {
      uint64_t FirstEntry = (ot::NetworkData::BorderRouterEntry *)ot::NetworkData::BorderRouterEntry::GetNext(FirstEntry);
    }

    else
    {
      ot::NetworkData::Leader::ChangedFlags::Update(a7, a3);
      ot::NetworkData::NetworkDataTlv::DecreaseLength((uint64_t)a3, 4);
      ot::NetworkData::NetworkDataTlv::DecreaseLength(a2, 4);
      ot::NetworkData::MutableNetworkData::Remove(a1, (char *)FirstEntry, 4u);
    }
  }

  return result;
}

void ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::BorderRouterTlv>(uint64_t a1)
{
}

{
  __ZN2ot11NetworkData9PrefixTlv10FindSubTlvINS0_15BorderRouterTlvEEEPT_v(a1);
}

uint64_t ot::NetworkData::ContextTlv::ClearCompress(uint64_t this)
{
  *(_BYTE *)(this + 2) &= ~0x10u;
  return this;
}

{
  return __ZN2ot11NetworkData10ContextTlv13ClearCompressEv(this);
}

uint64_t ot::NetworkData::Leader::ContextIds::ScheduleToRemove(uint64_t this, unsigned __int8 a2)
{
  uint64_t v10 = this;
  unsigned __int8 v9 = a2;
  unsigned int v5 = (unsigned int *)this;
  if ((*(_BYTE *)(this + 64) & 1) == 0)
  {
    this = ot::NetworkData::Leader::ContextIds::IsInUse((ot::NetworkData::Leader::ContextIds *)this, v9);
    if ((this & 1) != 0)
    {
      unsigned __int8 v3 = v9;
      int Now = ot::TimerMilli::GetNow((ot::TimerMilli *)this);
      int v2 = ot::Time::SecToMsec((ot::Time *)v5[15]);
      int v8 = ot::Time::operator+(&Now, v2);
      ot::NetworkData::Leader::ContextIds::SetRemoveTime((uint64_t)v5, v3, v8);
      uint64_t v4 = (int *)(ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>((ot::InstanceLocator *)v5) + 344);
      int v6 = ot::NetworkData::Leader::ContextIds::GetRemoveTime((ot::NetworkData::Leader::ContextIds *)v5, v9);
      return ot::TimerMilli::FireAtIfEarlier(v4, v6);
    }
  }

  return this;
}

void ot::NetworkData::NetworkDataTlv::Find<ot::NetworkData::ServerTlv>(uint64_t a1, uint64_t a2)
{
}

{
  __ZN2ot11NetworkData14NetworkDataTlv4FindINS0_9ServerTlvEEEPT_PS1_S6_(a1, a2);
}

ot::NetworkData::LeaderBase *ot::NetworkData::Leader::RemoveContext( ot::NetworkData::Leader *this, unsigned __int8 a2)
{
  uint64_t Next = v2;
  while (1)
  {
    ot::NetworkData::MutableNetworkData::GetTlvsEnd(this);
    ot::NetworkData::NetworkDataTlv::Find<ot::NetworkData::PrefixTlv>(Next, v3);
    unsigned int v13 = v4;
    if (!v4) {
      break;
    }
    ot::NetworkData::Leader::RemoveContext(this, v4, a2);
  }

  return ot::NetworkData::Leader::IncrementVersions(this, 1, v5, v6, v7, v8, v9, v10);
}

void ot::NetworkData::NetworkDataTlv::Find<ot::NetworkData::PrefixTlv>(uint64_t a1, uint64_t a2)
{
}

{
  __ZN2ot11NetworkData14NetworkDataTlv4FindINS0_9PrefixTlvEEEPT_PS1_S6_(a1, a2);
}

void ot::NetworkData::Leader::RemoveContext( ot::NetworkData::Leader *this, ot::NetworkData::PrefixTlv *a2, unsigned __int8 a3)
{
  uint64_t SubTlvs = ot::NetworkData::PrefixTlv::GetSubTlvs(a2);
  while (1)
  {
    uint64_t Next = ot::NetworkData::NetworkDataTlv::GetNext(a2);
    ot::NetworkData::NetworkDataTlv::Find<ot::NetworkData::ContextTlv>(SubTlvs, Next);
    uint64_t v7 = v4;
    if (!v4) {
      break;
    }
    if (a3 == ot::NetworkData::ContextTlv::GetContextId(v4))
    {
      char Size = ot::NetworkData::NetworkDataTlv::GetSize(v7);
      ot::NetworkData::MutableNetworkData::RemoveTlv(this, v7);
      ot::NetworkData::NetworkDataTlv::DecreaseLength((uint64_t)a2, Size);
    }

    else
    {
      uint64_t SubTlvs = ot::NetworkData::NetworkDataTlv::GetNext(v7);
    }
  }

void ot::NetworkData::NetworkDataTlv::Find<ot::NetworkData::ContextTlv>(uint64_t a1, uint64_t a2)
{
}

{
  __ZN2ot11NetworkData14NetworkDataTlv4FindINS0_10ContextTlvEEEPT_PS1_S6_(a1, a2);
}

void ot::NetworkData::Leader::HandleNetworkDataRestoredAfterReset(ot::NetworkData::Leader *this)
{
  unsigned __int8 v17 = this;
  ot::NetworkData::MutableNetworkData::GetTlvsStart(this);
  uint64_t v9 = v1;
  ot::NetworkData::MutableNetworkData::GetTlvsEnd(this);
  ot::Cli::Dataset::Dataset(v15, v9, v2);
  unsigned int v14 = 0;
  ot::NetworkData::Leader::ChangedFlags::ChangedFlags((ot::NetworkData::Leader::ChangedFlags *)v13);
  *((_BYTE *)this + 268) = 0;
  while (!ot::NetworkData::NetworkData::GetNextServer((const unsigned __int8 **)this, &v14, &v12))
  {
    uint64_t v8 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(this);
    unsigned __int8 v3 = ot::Mle::RouterIdFromRloc16((ot::Mle *)v12);
    if (!ot::RouterTable::IsAllocated(v8, v3))
    {
      ot::NetworkData::Leader::RemoveRloc(this, v12, 1, (ot::NetworkData::Leader::ChangedFlags *)v13);
      unsigned int v14 = 0;
    }
  }

  ot::NetworkData::Leader::IncrementVersions(this, (const ot::NetworkData::Leader::ChangedFlags *)v13);
  while (1)
  {
    ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::PrefixTlv>((uint64_t)v15);
    char v16 = v4;
    if (!v4) {
      break;
    }
    ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::ContextTlv>(v16);
    unsigned int v11 = v5;
    if (v5)
    {
      unsigned __int8 ContextId = ot::NetworkData::ContextTlv::GetContextId(v5);
      ot::NetworkData::Leader::ContextIds::MarkAsInUse((ot::NetworkData::Leader *)((char *)this + 272), ContextId);
      if (!ot::NetworkData::ContextTlv::IsCompress(v11))
      {
        unsigned __int8 v7 = ot::NetworkData::ContextTlv::GetContextId(v11);
        ot::NetworkData::Leader::ContextIds::ScheduleToRemove((uint64_t)this + 272, v7);
      }
    }
  }

uint64_t ot::NetworkData::Leader::ContextIds::HandleTimer(ot::NetworkData::Leader::ContextIds *this)
{
  unsigned int v13 = this;
  int Now = ot::TimerMilli::GetNow(this);
  int DistantFuture = ot::Time::GetDistantFuture((ot::Time *)&Now);
  if ((*((_BYTE *)this + 64) & 1) != 0) {
    __assert_rtn("HandleTimer", "network_data_leader_ftd.cpp", 1533, "!mIsClone");
  }
  for (unsigned __int8 i = 1; i <= 0xFu; ++i)
  {
    if (!ot::NetworkData::Leader::ContextIds::IsUnallocated(this, i)
      && !ot::NetworkData::Leader::ContextIds::IsInUse(this, i))
    {
      int v9 = ot::NetworkData::Leader::ContextIds::GetRemoveTime(this, i);
      if (ot::Time::operator>=(&Now, &v9))
      {
        ot::NetworkData::Leader::ContextIds::MarkAsUnallocated(this, i);
        uint64_t v1 = (ot::NetworkData::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
        ot::NetworkData::Leader::RemoveContext(v1, i);
      }

      else
      {
        int v7 = DistantFuture;
        int v6 = ot::NetworkData::Leader::ContextIds::GetRemoveTime(this, i);
        int v8 = ot::Min<ot::Time>(v7, v6);
        int DistantFuture = v8;
      }
    }
  }

  int v5 = ot::Time::GetDistantFuture((ot::Time *)&Now);
  uint64_t result = ot::Unequatable<ot::Time>::operator!=(&DistantFuture, &v5);
  if ((result & 1) != 0)
  {
    uint64_t v3 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
    return ot::TimerMilli::FireAt((ot::InstanceLocator *)(v3 + 344), DistantFuture);
  }

  return result;
}

_DWORD *ot::NetworkData::Leader::ContextIds::MarkAsUnallocated( ot::NetworkData::Leader::ContextIds *this, unsigned __int8 a2)
{
  return ot::Time::SetValue((_DWORD *)this + a2 - 1, 0);
}

{
  return __ZN2ot11NetworkData6Leader10ContextIds17MarkAsUnallocatedEh(this, a2);
}

BOOL ot::NetworkData::Leader::ContextIds::IsUnallocated( ot::NetworkData::Leader::ContextIds *this, unsigned __int8 a2)
{
  return ot::Time::GetValue((ot::NetworkData::Leader::ContextIds *)((char *)this + 4 * a2 - 4)) == 0;
}

{
  return __ZNK2ot11NetworkData6Leader10ContextIds13IsUnallocatedEh(this, a2);
}

BOOL ot::NetworkData::Leader::ContextIds::IsInUse( ot::NetworkData::Leader::ContextIds *this, unsigned __int8 a2)
{
  return ot::Time::GetValue((ot::NetworkData::Leader::ContextIds *)((char *)this + 4 * a2 - 4)) == 1;
}

{
  return __ZNK2ot11NetworkData6Leader10ContextIds7IsInUseEh(this, a2);
}

_DWORD *ot::NetworkData::Leader::ContextIds::SetRemoveTime(uint64_t a1, unsigned __int8 a2, int a3)
{
  int v8 = a3;
  for (unsigned int i = ot::Time::GetValue((ot::Time *)&v8); ; ++i)
  {
    BOOL v4 = 1;
    if (i) {
      BOOL v4 = i == 1;
    }
    if (!v4) {
      break;
    }
  }

  return ot::Time::SetValue((_DWORD *)(a1 + 4LL * (a2 - 1)), i);
}

uint64_t ot::NetworkData::Leader::ContextIds::GetRemoveTime( ot::NetworkData::Leader::ContextIds *this, unsigned __int8 a2)
{
  return *((unsigned int *)this + a2 - 1);
}

{
  return __ZNK2ot11NetworkData6Leader10ContextIds13GetRemoveTimeEh(this, a2);
}

BOOL ot::Unequatable<ot::Time>::operator!=(_DWORD *a1, _DWORD *a2)
{
  return !ot::Time::operator==(a1, a2);
}

{
  return __ZNK2ot11UnequatableINS_4TimeEEneERKS1_(a1, a2);
}

_BYTE *ot::NetworkData::Leader::ChangedFlags::ChangedFlags(_BYTE *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

  ;
}

void ot::NetworkData::ServerTlv::GetServerData(ot::NetworkData::ServerTlv *this)
{
}

  ;
}

{
  __ZN2ot11NetworkData9ServerTlv13GetServerDataEv(this);
}

uint64_t ot::TimerMilliIn<ot::NetworkData::Leader,&ot::NetworkData::Leader::HandleTimer>::HandleTimer( ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(a1);
  return ((uint64_t (*)(uint64_t))ot::NetworkData::Leader::HandleTimer)(v2);
}

void ot::NetworkData::PrefixTlv::FindSubTlv(uint64_t a1, unsigned __int8 a2, char a3)
{
  char v4 = a3 & 1;
  ot::AsConst<ot::NetworkData::PrefixTlv>();
  ot::NetworkData::PrefixTlv::FindSubTlv(v3, a2, v4 & 1);
  ot::AsNonConst<ot::NetworkData::NetworkDataTlv>();
}

{
  __ZN2ot11NetworkData9PrefixTlv10FindSubTlvENS0_14NetworkDataTlv4TypeEb(a1, a2, a3);
}

void ot::NetworkData::NetworkDataTlv::Find(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  int v5 = v3;
  ot::AsConst<ot::NetworkData::NetworkDataTlv>();
  ot::NetworkData::NetworkDataTlv::Find(v5, v4, a3);
  ot::AsNonConst<ot::NetworkData::NetworkDataTlv>();
}

  ;
}

{
  __ZN2ot11NetworkData14NetworkDataTlv4FindEPS1_S2_NS1_4TypeE(a1, a2, a3);
}

uint64_t ot::NetworkData::Local::AddOnMeshPrefix( ot::NetworkData::Local *this, const ot::NetworkData::OnMeshPrefixConfig *a2)
{
  unsigned int v9 = 7;
  Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  if ((ot::NetworkData::OnMeshPrefixConfig::IsValid(a2, Instance) & 1) != 0)
  {
    ot::NetworkData::OnMeshPrefixConfig::GetPrefix(a2);
    int v6 = v3;
    unsigned __int16 v4 = ot::NetworkData::OnMeshPrefixConfig::ConvertToTlvFlags(a2);
    return ot::NetworkData::Local::AddPrefix(this, v6, 2, v4, HIBYTE(*(_WORD *)((char *)a2 + 17)) & 1);
  }

  return v9;
}

uint64_t ot::NetworkData::Local::AddPrefix( ot::NetworkData::Local *a1, ot::Ip6::Prefix *a2, char a3, unsigned __int16 a4, char a5)
{
  unsigned __int8 v34 = a1;
  unsigned __int8 v33 = a2;
  char v32 = a3;
  unsigned __int16 v31 = a4;
  char v30 = a5 & 1;
  unsigned int v29 = 0;
  ot::NetworkData::Local::RemovePrefix(a1, a2);
  IgnoreError();
  unsigned __int8 v5 = 6;
  if (v32 != 2) {
    unsigned __int8 v5 = 5;
  }
  unsigned __int8 v28 = v5;
  Byteschar Size = ot::Ip6::Prefix::GetBytesSize(v33);
  ot::NetworkData::MutableNetworkData::AppendTlv(a1, BytesSize + 4 + v28);
  ot::NetworkData::As<ot::NetworkData::PrefixTlv>();
  unsigned __int16 v27 = v7;
  if (v7)
  {
    __int128 v25 = *(_OWORD *)v33;
    char v26 = *((_BYTE *)v33 + 16);
    ot::NetworkData::PrefixTlv::Init(v27, 0, (ot::Ip6::Prefix *)&v25);
    ot::NetworkData::PrefixTlv::SetSubTlvsLength(v27, v28);
    if (v32 == 2)
    {
      ot::NetworkData::PrefixTlv::GetSubTlvs(v27);
      ot::NetworkData::As<ot::NetworkData::BorderRouterTlv>();
      unsigned __int8 v24 = v8;
      ot::NetworkData::BorderRouterTlv::Init(v8);
      char Length = ot::NetworkData::NetworkDataTlv::GetLength(v24);
      ot::NetworkData::NetworkDataTlv::SetLength((uint64_t)v24, Length + 4);
      Entry = (ot::NetworkData::BorderRouterEntry *)ot::NetworkData::BorderRouterTlv::GetEntry(v24, 0);
      ot::NetworkData::BorderRouterEntry::Init(Entry);
      unsigned int v11 = (ot::NetworkData::BorderRouterEntry *)ot::NetworkData::BorderRouterTlv::GetEntry(v24, 0);
      ot::NetworkData::BorderRouterEntry::SetFlags(v11, v31);
    }

    else
    {
      ot::NetworkData::PrefixTlv::GetSubTlvs(v27);
      ot::NetworkData::As<ot::NetworkData::HasRouteTlv>();
      char v23 = v12;
      ot::NetworkData::HasRouteTlv::Init(v12);
      char v13 = ot::NetworkData::NetworkDataTlv::GetLength(v23);
      ot::NetworkData::NetworkDataTlv::SetLength((uint64_t)v23, v13 + 3);
      unsigned int v14 = (ot::NetworkData::HasRouteEntry *)ot::NetworkData::HasRouteTlv::GetEntry(v23, 0);
      ot::NetworkData::HasRouteEntry::Init(v14);
      uint64_t v15 = ot::NetworkData::HasRouteTlv::GetEntry(v23, 0);
      ot::NetworkData::HasRouteEntry::SetFlags(v15, v31);
    }

    if ((v30 & 1) != 0)
    {
      ot::NetworkData::NetworkDataTlv::SetStable(v27);
      uint64_t SubTlvs = (_BYTE *)ot::NetworkData::PrefixTlv::GetSubTlvs(v27);
      ot::NetworkData::NetworkDataTlv::SetStable(SubTlvs);
    }

    ot::NetworkData::MutableNetworkData::GetBytes(a1);
    uint64_t v21 = v17;
    unsigned __int8 v18 = ot::NetworkData::NetworkData::GetLength(a1);
    ot::Logger::Dump<(ot::LogLevel)5,&ot::NetworkData::kLogModuleName>((ot *)"AddPrefix", v21, v18);
  }

  else
  {
    unsigned int v29 = 3;
  }

  if (v29 == 3)
  {
    unsigned __int16 v19 = (ot::NetworkData::Notifier *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Notifier>(a1);
    ot::NetworkData::Notifier::SignalNetworkDataFull(v19);
  }

  return v29;
}

BOOL ot::NetworkData::Local::ContainsOnMeshPrefix(ot::NetworkData::Local *this, const ot::Ip6::Prefix *a2)
{
  BOOL v3 = 0;
  uint64_t Prefix = ot::NetworkData::NetworkData::FindPrefix(this, a2);
  if (Prefix) {
    return ot::NetworkData::PrefixTlv::FindSubTlv(Prefix, 2u) != 0LL;
  }
  return v3;
}

ot::NetworkData::PrefixTlv *ot::NetworkData::NetworkData::FindPrefix( ot::NetworkData::NetworkData *this, const ot::Ip6::Prefix *a2)
{
  unsigned __int8 v5 = v2;
  unsigned __int8 Length = ot::Ip6::Prefix::GetLength(a2);
  return ot::NetworkData::NetworkData::FindPrefix(this, v5, Length);
}

{
  return __ZNK2ot11NetworkData11NetworkData10FindPrefixERKNS_3Ip66PrefixE(this, a2);
}

uint64_t ot::NetworkData::Local::AddHasRoutePrefix( ot::NetworkData::Local *this, const ot::NetworkData::ExternalRouteConfig *a2)
{
  unsigned int v9 = 7;
  Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  if ((ot::NetworkData::ExternalRouteConfig::IsValid(a2, Instance) & 1) != 0)
  {
    ot::NetworkData::ExternalRouteConfig::GetPrefix(a2);
    int v6 = v3;
    unsigned __int8 v4 = ot::NetworkData::ExternalRouteConfig::ConvertToTlvFlags(a2);
    return ot::NetworkData::Local::AddPrefix(this, v6, 0, v4, (*((_BYTE *)a2 + 20) & 8) != 0);
  }

  return v9;
}

uint64_t ot::NetworkData::Local::RemovePrefix(ot::NetworkData::Local *this, const ot::Ip6::Prefix *a2)
{
  unsigned int v8 = 0;
  ot::NetworkData::MutableNetworkData::FindPrefix(this, a2);
  if (v2) {
    ot::NetworkData::MutableNetworkData::RemoveTlv(this, v2);
  }
  else {
    unsigned int v8 = 23;
  }
  ot::NetworkData::MutableNetworkData::GetBytes(this);
  uint64_t v6 = v3;
  unsigned __int8 Length = ot::NetworkData::NetworkData::GetLength(this);
  ot::Logger::Dump<(ot::LogLevel)5,&ot::NetworkData::kLogModuleName>((ot *)"RmvPrefix", v6, Length);
  return v8;
}

uint64_t ot::NetworkData::PrefixTlv::Init(ot::NetworkData::PrefixTlv *a1, char a2, ot::Ip6::Prefix *a3)
{
  unsigned __int8 Length = ot::Ip6::Prefix::GetLength(a3);
  ot::Ip6::Prefix::GetBytes(a3);
  return ot::NetworkData::PrefixTlv::Init(a1, a2, Length, v3);
}

{
  return __ZN2ot11NetworkData9PrefixTlv4InitEhNS_3Ip66PrefixE(a1, a2, a3);
}

uint64_t ot::NetworkData::BorderRouterEntry::Init(ot::NetworkData::BorderRouterEntry *this)
{
  uint64_t result = ot::NetworkData::BorderRouterEntry::SetRloc(this, 0xFFFEu);
  *((_WORD *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = 0;
  return result;
}

{
  return __ZN2ot11NetworkData17BorderRouterEntry4InitEv(this);
}

uint64_t ot::NetworkData::BorderRouterEntry::SetFlags( ot::NetworkData::BorderRouterEntry *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = result;
  return result;
}

{
  return __ZN2ot11NetworkData17BorderRouterEntry8SetFlagsEt(this, a2);
}

uint64_t ot::NetworkData::HasRouteEntry::Init(ot::NetworkData::HasRouteEntry *this)
{
  uint64_t result = ot::NetworkData::HasRouteEntry::SetRloc(this, 0xFFFEu);
  *((_BYTE *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  return result;
}

{
  return __ZN2ot11NetworkData13HasRouteEntry4InitEv(this);
}

uint64_t ot::NetworkData::HasRouteEntry::SetFlags(uint64_t this, char a2)
{
  *(_BYTE *)(this + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = a2;
  return this;
}

{
  return __ZN2ot11NetworkData13HasRouteEntry8SetFlagsEh(this, a2);
}

void ot::NetworkData::MutableNetworkData::FindPrefix( ot::NetworkData::MutableNetworkData *this, const ot::Ip6::Prefix *a2)
{
  unsigned __int8 v4 = v2;
  unsigned __int8 Length = ot::Ip6::Prefix::GetLength(a2);
  ot::NetworkData::MutableNetworkData::FindPrefix(this, v4, Length);
}

{
  __ZN2ot11NetworkData18MutableNetworkData10FindPrefixERKNS_3Ip66PrefixE(this, a2);
}

unint64_t ot::NetworkData::Local::UpdateRloc( ot::NetworkData::Local *this, ot::NetworkData::PrefixTlv *a2)
{
  uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16(v2);
  for (unsigned int i = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::PrefixTlv::GetSubTlvs(a2);
        ;
        unsigned int i = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(i))
  {
    unint64_t result = ot::NetworkData::NetworkDataTlv::GetNext(a2);
    int Type = ot::NetworkData::NetworkDataTlv::GetType(i);
    if (Type)
    {
      if (Type != 2) {
        __assert_rtn("UpdateRloc", "network_data_local.cpp", 179, "false");
      }
      ot::NetworkData::As<ot::NetworkData::BorderRouterTlv>();
      Entry = (ot::NetworkData::BorderRouterEntry *)ot::NetworkData::BorderRouterTlv::GetEntry(v6, 0);
      ot::NetworkData::BorderRouterEntry::SetRloc(Entry, Rloc16);
    }

    else
    {
      ot::NetworkData::As<ot::NetworkData::HasRouteTlv>();
      unsigned __int8 v5 = (ot::NetworkData::HasRouteEntry *)ot::NetworkData::HasRouteTlv::GetEntry(v4, 0);
      ot::NetworkData::HasRouteEntry::SetRloc(v5, Rloc16);
    }
  }

  return result;
}

uint64_t ot::NetworkData::Local::AddService( ot::NetworkData::MutableNetworkData *a1, unsigned int a2, uint64_t a3, char a4, uint64_t a5)
{
  char v25 = a4 & 1;
  unsigned int v23 = 0;
  unsigned __int8 Length = ot::Data<(ot::DataLengthType)0>::GetLength(a3);
  __int16 v18 = ot::NetworkData::ServiceTlv::CalculateSize((ot::NetworkData::ServiceTlv *)a2, Length) + 4;
  unsigned __int16 v20 = v18 + ot::Data<(ot::DataLengthType)0>::GetLength(a5);
  ot::NetworkData::Local::RemoveService(a1, a2, a3);
  IgnoreError();
  if (v20 <= 0xFEu)
  {
    ot::NetworkData::MutableNetworkData::AppendTlv(a1, v20);
    ot::NetworkData::As<ot::NetworkData::ServiceTlv>();
    char v22 = v6;
    if (v6)
    {
      ot::NetworkData::ServiceTlv::Init(v6, 0, a2, a3);
      char v7 = ot::Data<(ot::DataLengthType)0>::GetLength(a5);
      ot::NetworkData::ServiceTlv::SetSubTlvsLength(v22, v7 + 4);
      ot::NetworkData::ServiceTlv::GetSubTlvs(v22);
      ot::NetworkData::As<ot::NetworkData::ServerTlv>();
      uint64_t v21 = v8;
      char v16 = v8;
      unsigned int v9 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(a1);
      unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16(v9);
      ot::NetworkData::ServerTlv::Init(v16, Rloc16, a5);
      if ((v25 & 1) != 0)
      {
        ot::NetworkData::NetworkDataTlv::SetStable(v22);
        ot::NetworkData::NetworkDataTlv::SetStable(v21);
      }

      ot::NetworkData::MutableNetworkData::GetBytes(a1);
      uint64_t v15 = v11;
      unsigned __int8 v12 = ot::NetworkData::NetworkData::GetLength(a1);
      ot::Logger::Dump<(ot::LogLevel)5,&ot::NetworkData::kLogModuleName>((ot *)"AddService", v15, v12);
    }

    else
    {
      unsigned int v23 = 3;
    }
  }

  else
  {
    unsigned int v23 = 3;
  }

  if (v23 == 3)
  {
    char v13 = (ot::NetworkData::Notifier *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Notifier>(a1);
    ot::NetworkData::Notifier::SignalNetworkDataFull(v13);
  }

  return v23;
}

uint64_t ot::NetworkData::Local::RemoveService(ot::NetworkData::MutableNetworkData *a1, int a2, uint64_t a3)
{
  unsigned int v9 = 0;
  ot::NetworkData::MutableNetworkData::FindService((uint64_t)a1, a2, a3, 1);
  if (v3) {
    ot::NetworkData::MutableNetworkData::RemoveTlv(a1, v3);
  }
  else {
    unsigned int v9 = 23;
  }
  ot::NetworkData::MutableNetworkData::GetBytes(a1);
  uint64_t v7 = v4;
  unsigned __int8 Length = ot::NetworkData::NetworkData::GetLength(a1);
  ot::Logger::Dump<(ot::LogLevel)5,&ot::NetworkData::kLogModuleName>((ot *)"RmvService", v7, Length);
  return v9;
}

unint64_t ot::NetworkData::Local::UpdateRloc( ot::NetworkData::Local *this, ot::NetworkData::ServiceTlv *a2)
{
  uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16(v2);
  for (unsigned int i = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::ServiceTlv::GetSubTlvs(a2);
        ;
        unsigned int i = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(i))
  {
    unint64_t result = ot::NetworkData::NetworkDataTlv::GetNext(a2);
    ot::NetworkData::As<ot::NetworkData::ServerTlv>();
    ot::NetworkData::ServerTlv::SetServer16(v4, Rloc16);
  }

  return result;
}

void ot::NetworkData::Local::UpdateRloc(ot::NetworkData::Local *this)
{
  for (unsigned int i = v1; ; unsigned int i = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(i))
  {
    ot::NetworkData::MutableNetworkData::GetTlvsEnd(this);
    int Type = ot::NetworkData::NetworkDataTlv::GetType(i);
    if (Type == 1)
    {
      ot::NetworkData::As<ot::NetworkData::PrefixTlv>();
      ot::NetworkData::Local::UpdateRloc(this, v3);
    }

    else
    {
      if (Type != 5) {
        __assert_rtn("UpdateRloc", "network_data_local.cpp", 289, "false");
      }
      ot::NetworkData::As<ot::NetworkData::ServiceTlv>();
      ot::NetworkData::Local::UpdateRloc(this, v4);
    }
  }

ot::NetworkData::Notifier *ot::NetworkData::Notifier::Notifier( ot::NetworkData::Notifier *this, ot::Instance *a2)
{
  *((_DWORD *)this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *((_WORD *)this + 26) = -2;
  *((_BYTE *)this + 54) &= ~1u;
  ot::TaskletIn<ot::NetworkData::Notifier,&ot::NetworkData::Notifier::HandleNetDataFull>::TaskletIn( (void *)this + 7,  (uint64_t)a2);
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 9);
  unint64_t result = this;
  *((_BYTE *)this + 88) &= ~1u;
  *((_BYTE *)this + 8ot::Tlv::SetLength((uint64_t)this, 9) = 0;
  return result;
}

{
  ot::NetworkData::Notifier::Notifier(this, a2);
  return this;
}

void ot::NetworkData::Notifier::HandleTimer(ot::NetworkData::Notifier *this)
{
}

void ot::NetworkData::Notifier::SynchronizeServerData(ot::NetworkData::Notifier *this)
{
  unsigned int updated = 23;
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (ot::Mle::Mle::IsAttached(v1)
    && (*((_BYTE *)this + 54) & 1) == 0
    && (!*((_DWORD *)this + 12) || !ot::Timer::IsRunning((ot::NetworkData::Notifier *)((char *)this + 8))))
  {
    *((_DWORD *)this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 5000;
    unsigned int updated = ot::NetworkData::Notifier::RemoveStaleChildEntries(this);
    if (updated == 23)
    {
      *((_DWORD *)this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 300000;
      unsigned int updated = ot::NetworkData::Notifier::UpdateInconsistentData(this);
    }
  }

  if (updated <= 0x17uLL) {
    __asm { BR              X8 }
  }

  __assert_rtn("SynchronizeServerData", "network_data_notifier.cpp", 123, "false");
}

void ot::NetworkData::Notifier::HandleNetDataFull(ot::NetworkData::Notifier *this)
{
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (!ot::Mle::Mle::IsLeader(v1)) {
    trigger_leader_override();
  }
}

ot::TimerMilli *ot::TimerMilliIn<ot::NetworkData::Notifier,&ot::NetworkData::Notifier::HandleTimer>::TimerMilliIn( ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli( a1,  a2,  (void (*)(ot::Timer *))ot::TimerMilliIn<ot::NetworkData::Notifier,&ot::NetworkData::Notifier::HandleTimer>::HandleTimer);
  return a1;
}

void *ot::TaskletIn<ot::NetworkData::Notifier,&ot::NetworkData::Notifier::SynchronizeServerData>::TaskletIn( void *a1, uint64_t a2)
{
  return a1;
}

{
  ot::Tasklet::Tasklet( a1,  a2,  (uint64_t)ot::TaskletIn<ot::NetworkData::Notifier,&ot::NetworkData::Notifier::SynchronizeServerData>::HandleTasklet);
  return a1;
}

void *ot::TaskletIn<ot::NetworkData::Notifier,&ot::NetworkData::Notifier::HandleNetDataFull>::TaskletIn( void *a1, uint64_t a2)
{
  return a1;
}

{
  ot::Tasklet::Tasklet( a1,  a2,  (uint64_t)ot::TaskletIn<ot::NetworkData::Notifier,&ot::NetworkData::Notifier::HandleNetDataFull>::HandleTasklet);
  return a1;
}

uint64_t ot::NetworkData::Notifier::HandleServerDataUpdated(ot::NetworkData::Notifier *this)
{
  *((_BYTE *)this + 88) &= ~1u;
  ot::NetworkData::Notifier::ScheduleRouterRoleUpgradeIfEligible((uint64_t)this);
  *((_DWORD *)this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  return ot::Tasklet::Post((ot::NetworkData::Notifier *)((char *)this + 32));
}

uint64_t ot::NetworkData::Notifier::ScheduleRouterRoleUpgradeIfEligible(uint64_t this)
{
  uint64_t v3 = (ot::NetworkData::Notifier *)this;
  if ((*(_BYTE *)(this + 88) & 1) == 0)
  {
    uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)this);
    this = ot::Mle::Mle::IsChild(v1);
    if ((this & 1) != 0)
    {
      this = ot::NetworkData::Notifier::IsEligibleForRouterRoleUpgradeAsBorderRouter(v3);
      if ((this & 1) != 0 && !*((_BYTE *)v3 + 89))
      {
        *((_BYTE *)v3 + 8ot::Callback<void (*)(void *),(ot::CallbackContextPosition)0>::InvokeIfSet<>((void *)this + 9) = ot::Random::NonCrypto::GetUint8InRange((ot::Random::NonCrypto *)1, 0xBu);
        unint64_t v2 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>(v3);
        return ot::TimeTicker::RegisterReceiver(v2, 6);
      }
    }
  }

  return this;
}

uint64_t ot::NetworkData::Notifier::RemoveStaleChildEntries(ot::NetworkData::Notifier *this)
{
  uint64_t v10 = this;
  *(void *)&v9[1] = 0x1700000000LL;
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (ot::Mle::Mle::IsRouterOrLeader(v1))
  {
    while (1)
    {
      unint64_t v2 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
      if (!ot::Mle::IsActiveRouter((ot::Mle *)v9[0]))
      {
        uint64_t v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
        unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16(v3);
        if (ot::Mle::RouterIdMatch((ot::Mle *)Rloc16, v9[0]))
        {
          unsigned __int8 v5 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
          ot::ChildTable::FindChild(v5, v9[0], 0);
          if (!v6)
          {
            *(_DWORD *)&v9[3] = ot::NetworkData::Notifier::SendServerDataNotification(this, v9[0], 0LL);
            return *(unsigned int *)&v9[3];
          }
        }
      }
    }
  }

  return *(unsigned int *)&v9[3];
}

uint64_t ot::NetworkData::Notifier::UpdateInconsistentData(ot::NetworkData::Notifier *this)
{
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  int Rloc16 = (unsigned __int16)ot::Mle::Mle::GetRloc16(v1);
  unint64_t v2 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if ((ot::Mle::MleRouter::IsExpectedToBecomeRouterSoon(v2) & 1) != 0)
  {
    return 13;
  }

  else
  {
    uint64_t v3 = (ot::NetworkData::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Local>(this);
    ot::NetworkData::Local::UpdateRloc(v3);
    uint64_t v10 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
    uint64_t v4 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Local>(this);
    if ((ot::NetworkData::NetworkData::ContainsEntriesFrom(v10, v4, Rloc16) & 1) != 0
      && (unsigned int v9 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Local>(this),
          unsigned __int8 v5 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this),
          (ot::NetworkData::NetworkData::ContainsEntriesFrom(v9, v5, Rloc16) & 1) != 0))
    {
      return 23;
    }

    else
    {
      unsigned __int16 v8 = *((_WORD *)this + 26);
      uint64_t v6 = (const ot::NetworkData::NetworkData *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Local>(this);
      unsigned int v13 = ot::NetworkData::Notifier::SendServerDataNotification(this, v8, v6);
      if (!v13) {
        *((_WORD *)this + 26) = Rloc16;
      }
    }
  }

  return v13;
}

uint64_t ot::NetworkData::Notifier::SendServerDataNotification( ot::NetworkData::Notifier *this, unsigned __int16 a2, const ot::NetworkData::NetworkData *a3)
{
  char v26 = this;
  unsigned __int16 v25 = a2;
  unsigned __int8 v24 = a3;
  unsigned int appended = 0;
  Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v21, Instance);
  uint64_t v4 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  char v22 = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v4, 5u);
  if (!v22)
  {
    unsigned int appended = 3;
    goto LABEL_11;
  }

  if (v24)
  {
    ot::ThreadTlv::SetType(v20, 10);
    char Length = ot::NetworkData::NetworkData::GetLength(v24);
    ot::Tlv::SetLength((uint64_t)v20, Length);
    unsigned int appended = ot::Message::Append<ot::ThreadTlv>(v22, v20);
    if (appended) {
      goto LABEL_11;
    }
    __int16 v18 = v22;
    Bytes = (char *)ot::NetworkData::NetworkData::GetBytes(v24);
    unsigned __int8 v6 = ot::NetworkData::NetworkData::GetLength(v24);
    unsigned int appended = ot::Message::AppendBytes(v18, Bytes, v6);
    if (appended) {
      goto LABEL_11;
    }
    uint64_t v7 = (ot::NetworkData::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
    ot::NetworkData::Leader::CheckForNetDataGettingFull(v7, v24, v25);
  }

  if (v25 == 65534
    || (unsigned int appended = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)2,unsigned short>>((uint64_t)v22, v25)) == 0)
  {
    ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderAloc((ot::Tmf::MessageInfo *)v21);
    IgnoreError();
    unsigned __int16 v8 = (ot::Coap::TxParameters *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
    unsigned int appended = ot::Coap::CoapBase::SendMessage( v8,  v22,  (ot::Ip6::MessageInfo *)v21,  (uint64_t)ot::NetworkData::Notifier::HandleCoapResponse,  (uint64_t)this);
    if (!appended)
    {
      char v9 = ot::UriToString<(ot::Uri)5>();
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"NetworkData", "Sent %s", v10, v11, v12, v13, v14, v15, v9);
    }
  }

uint64_t ot::Message::Append<ot::ThreadTlv>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 2u);
}

{
  return __ZN2ot7Message6AppendINS_9ThreadTlvEEE7otErrorRKT_(a1, a2);
}

uint64_t ot::NetworkData::Notifier::HandleCoapResponse(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return ot::NetworkData::Notifier::HandleCoapResponse(a1, a4);
}

void ot::NetworkData::Notifier::HandleNotifierEvents(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if (ot::Events::ContainsAny((ot::Events *)&v3, 2052LL)) {
    *(_DWORD *)(a1 + 48) = 0;
  }
  if (ot::Events::Contains(&v3, 128LL)) {
    *(_BYTE *)(a1 + 88) &= ~1u;
  }
  if (ot::Events::ContainsAny((ot::Events *)&v3, 644LL)) {
    ot::NetworkData::Notifier::ScheduleRouterRoleUpgradeIfEligible(a1);
  }
  if (ot::Events::ContainsAny((ot::Events *)&v3, 2564LL)) {
    ot::NetworkData::Notifier::SynchronizeServerData((ot::NetworkData::Notifier *)a1);
  }
}

uint64_t ot::NetworkData::Notifier::HandleCoapResponse(uint64_t a1, int a2)
{
  *(_BYTE *)(a1 + 54) &= ~1u;
  if (!a2) {
    return ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 8), *(_DWORD *)(a1 + 48) + 1);
  }
  if (a2 != 11 && a2 != 28) {
    __assert_rtn("HandleCoapResponse", "network_data_notifier.cpp", 287, "false");
  }
  return ot::NetworkData::Notifier::SynchronizeServerData((ot::NetworkData::Notifier *)a1);
}

void *ot::NetworkData::Notifier::SetNetDataFullCallback( ot::NetworkData::Notifier *this, void (*a2)(void *), uint64_t a3)
{
  return ot::CallbackBase<void (*)(void *)>::Set((void *)this + 9, (uint64_t)a2, a3);
}

void *ot::Callback<void (*)(void *),(ot::CallbackContextPosition)0>::InvokeIfSet<>(void *result)
{
  if (*result) {
    return (void *)ot::Callback<void (*)(void *),(ot::CallbackContextPosition)0>::Invoke<>((uint64_t)result);
  }
  return result;
}

{
  return __ZNK2ot8CallbackIPFvPvELNS_23CallbackContextPositionE0EE11InvokeIfSetIJEEEvDpOT_(result);
}

BOOL ot::NetworkData::Notifier::IsEligibleForRouterRoleUpgradeAsBorderRouter( ot::NetworkData::Notifier *this)
{
  BOOL v13 = 0;
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
  __int16 Rloc16 = ot::Mle::Mle::GetRloc16(v1);
  unint64_t v2 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if ((ot::Mle::MleRouter::IsRouterEligible(v2) & 1) != 0)
  {
    uint64_t v3 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    if (ot::Mle::MleRouter::GetRouterUpgradeThreshold(v3))
    {
      uint64_t v4 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Local>(this);
      if ((ot::NetworkData::NetworkData::ContainsBorderRouterWithRloc(v4, Rloc16) & 1) != 0)
      {
        unsigned __int8 v5 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
        if ((ot::NetworkData::NetworkData::ContainsBorderRouterWithRloc(v5, Rloc16) & 1) != 0)
        {
          unsigned __int8 v6 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(this);
          unsigned __int8 ActiveRouterCount = ot::RouterTable::GetActiveRouterCount(v6);
          uint64_t v7 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
          if (ActiveRouterCount >= (int)ot::Mle::MleRouter::GetRouterUpgradeThreshold(v7)
            && ActiveRouterCount < 0x20u)
          {
            unsigned __int16 v8 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
            return ot::NetworkData::NetworkData::CountBorderRouters(v8, 1) < 2u;
          }
        }
      }
    }
  }

  return v13;
}

void ot::NetworkData::Notifier::HandleTimeTick(ot::NetworkData::Notifier *this)
{
  if (*((_BYTE *)this + 89))
  {
    if (!--*((_BYTE *)this + 89))
    {
      uint64_t v1 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>(this);
      ot::TimeTicker::UnregisterReceiver(v1, 6);
      unint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
      if (ot::Mle::Mle::IsChild(v2) && ot::NetworkData::Notifier::IsEligibleForRouterRoleUpgradeAsBorderRouter(this))
      {
        ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"NetworkData",  "Requesting router role as BR",  v3,  v4,  v5,  v6,  v7,  v8,  (char)this);
        *((_BYTE *)v11 + 88) = *((_BYTE *)v11 + 88) & 0xFE | 1;
        uint64_t v9 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(v11);
        ot::Mle::MleRouter::BecomeRouter(v9, 5u);
        IgnoreError();
      }
    }
  }

uint64_t ot::TimerMilliIn<ot::NetworkData::Notifier,&ot::NetworkData::Notifier::HandleTimer>::HandleTimer( ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Notifier>(a1);
  return ((uint64_t (*)(uint64_t))ot::NetworkData::Notifier::HandleTimer)(v2);
}

uint64_t ot::TaskletIn<ot::NetworkData::Notifier,&ot::NetworkData::Notifier::SynchronizeServerData>::HandleTasklet( ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Notifier>(a1);
  return ((uint64_t (*)(uint64_t))ot::NetworkData::Notifier::SynchronizeServerData)(v2);
}

uint64_t ot::TaskletIn<ot::NetworkData::Notifier,&ot::NetworkData::Notifier::HandleNetDataFull>::HandleTasklet( ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Notifier>(a1);
  return ((uint64_t (*)(uint64_t))ot::NetworkData::Notifier::HandleNetDataFull)(v2);
}

uint64_t ot::NetworkData::Service::Manager::AddService( ot::NetworkData::Service::Manager *this, uint64_t a2, char a3, char a4, uint64_t a5, char a6)
{
  char v16 = this;
  uint64_t v15 = a2;
  char v14 = a3;
  char v13 = a4 & 1;
  uint64_t v12 = a5;
  char v11 = a6;
  ot::Data<(ot::DataLengthType)0>::Init((uint64_t)v10, a2, a3);
  ot::Data<(ot::DataLengthType)0>::Init((uint64_t)v9, v12, v11);
  uint64_t v6 = (ot::NetworkData::MutableNetworkData *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Local>(this);
  return ot::NetworkData::Local::AddService(v6, 0xAFAAu, (uint64_t)v10, v13 & 1, (uint64_t)v9);
}

uint64_t ot::NetworkData::Service::Manager::RemoveService( ot::NetworkData::Service::Manager *this, uint64_t a2, char a3)
{
  uint64_t v8 = this;
  uint64_t v7 = a2;
  _BYTE v6[23] = a3;
  ot::Data<(ot::DataLengthType)0>::Init((uint64_t)v6, a2, a3);
  uint64_t v3 = (ot::NetworkData::MutableNetworkData *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Local>(this);
  return ot::NetworkData::Local::RemoveService(v3, 44970, (uint64_t)v6);
}

uint64_t ot::NetworkData::Service::Manager::GetServiceId( ot::NetworkData::Service::Manager *this, uint64_t a2, char a3, char a4, unsigned __int8 *a5)
{
  char v13 = this;
  uint64_t v12 = a2;
  char v11 = a3;
  char v10 = a4 & 1;
  uint64_t v9 = a5;
  ot::Data<(ot::DataLengthType)0>::Init((uint64_t)v8, a2, a3);
  uint64_t v5 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
  return ot::NetworkData::LeaderBase::GetServiceId(v5, 44970, (uint64_t)v8, v10 & 1, v9);
}

ot::NetworkData::NetworkDataTlv *ot::NetworkData::Service::Manager::GetBackboneRouterPrimary( ot::InstanceLocator *a1, uint64_t a2)
{
  uint64_t v17 = a1;
  uint64_t v16 = a2;
  uint64_t v15 = 0LL;
  char v14 = 0LL;
  char v13 = 0LL;
  ot::Data<(ot::DataLengthType)0>::Init( (uint64_t)v12,  (uint64_t)&ot::NetworkData::Service::BackboneRouter::kServiceData,  1);
  *(_WORD *)uint64_t v16 = -2;
  while (1)
  {
    uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(a1);
    unint64_t result = ot::NetworkData::NetworkData::FindNextThreadService(v2, v13, (uint64_t)v12, 0);
    char v13 = result;
    if (!result) {
      break;
    }
    ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback(&v10);
    char v10 = v13;
    while (!ot::NetworkData::Service::Manager::IterateToNextServer(a1, &v10))
    {
      ot::NetworkData::ServerTlv::GetServerData(v11, (uint64_t)v9);
      if (ot::Data<(ot::DataLengthType)0>::GetLength((uint64_t)v9) >= 7uLL)
      {
        Bytes = (ot::NetworkData::Service::BackboneRouter::ServerData *)ot::Data<(ot::DataLengthType)0>::GetBytes((uint64_t)v9);
        if (!v15 || (ot::NetworkData::Service::Manager::IsBackboneRouterPreferredTo(a1, v11, Bytes, v15, v14) & 1) != 0)
        {
          uint64_t v15 = v11;
          char v14 = Bytes;
        }
      }
    }
  }

  if (v15)
  {
    __int16 Server16 = ot::NetworkData::ServerTlv::GetServer16(v15);
    *(_WORD *)uint64_t v16 = Server16;
    char SequenceNumber = ot::NetworkData::Service::BackboneRouter::ServerData::GetSequenceNumber(v14);
    *(_BYTE *)(v16 + 8) = SequenceNumber;
    __int16 ReregistrationDelay = ot::NetworkData::Service::BackboneRouter::ServerData::GetReregistrationDelay(v14);
    *(_WORD *)(v16 + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = ReregistrationDelay;
    unint64_t result = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::Service::BackboneRouter::ServerData::GetMlrTimeout(v14);
    *(_DWORD *)(v16 + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = (_DWORD)result;
  }

  return result;
}

uint64_t ot::NetworkData::Service::Manager::IterateToNextServer( ot::NetworkData::Service::Manager *this, ot::NetworkData::NetworkDataTlv **a2)
{
  unsigned int v6 = 23;
  if (*a2)
  {
    if (a2[1]) {
      uint64_t Next = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(a2[1]);
    }
    else {
      uint64_t Next = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::ServiceTlv::GetSubTlvs(*a2);
    }
    unint64_t v2 = ot::NetworkData::NetworkDataTlv::GetNext(*a2);
    ot::NetworkData::NetworkDataTlv::Find<ot::NetworkData::ServerTlv>(Next, v2);
    a2[1] = v3;
    if (a2[1]) {
      return 0;
    }
  }

  return v6;
}

uint64_t ot::NetworkData::Service::Manager::IsBackboneRouterPreferredTo( ot::NetworkData::Service::Manager *this, const ot::NetworkData::ServerTlv *a2, const ot::NetworkData::Service::BackboneRouter::ServerData *a3, const ot::NetworkData::ServerTlv *a4, const ot::NetworkData::Service::BackboneRouter::ServerData *a5)
{
  uint64_t v5 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  unsigned __int8 LeaderId = ot::Mle::Mle::GetLeaderId(v5);
  unsigned __int16 v13 = ot::Mle::Rloc16FromRouterId((ot::Mle *)LeaderId);
  if (v13 == (unsigned __int16)ot::NetworkData::ServerTlv::GetServer16(a2))
  {
    char v14 = 1;
  }

  else if (v13 == (unsigned __int16)ot::NetworkData::ServerTlv::GetServer16(a4))
  {
    char v14 = 0;
  }

  else
  {
    int SequenceNumber = ot::NetworkData::Service::BackboneRouter::ServerData::GetSequenceNumber(a3);
    char v12 = 1;
    if (SequenceNumber <= ot::NetworkData::Service::BackboneRouter::ServerData::GetSequenceNumber(a5))
    {
      int v9 = ot::NetworkData::Service::BackboneRouter::ServerData::GetSequenceNumber(a3);
      BOOL v10 = 0;
      if (v9 == ot::NetworkData::Service::BackboneRouter::ServerData::GetSequenceNumber(a5))
      {
        int Server16 = (unsigned __int16)ot::NetworkData::ServerTlv::GetServer16(a2);
        BOOL v10 = Server16 > (unsigned __int16)ot::NetworkData::ServerTlv::GetServer16(a4);
      }

      char v12 = v10;
    }

    char v14 = v12;
  }

  return v14 & 1;
}

uint64_t ot::NetworkData::Service::BackboneRouter::ServerData::GetSequenceNumber( ot::NetworkData::Service::BackboneRouter::ServerData *this)
{
  return *(unsigned __int8 *)this;
}

{
  return __ZNK2ot11NetworkData7Service14BackboneRouter10ServerData17GetSequenceNumberEv(this);
}

uint64_t ot::NetworkData::Service::BackboneRouter::ServerData::GetReregistrationDelay( ot::NetworkData::Service::BackboneRouter::ServerData *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)((char *)this + 1));
}

{
  return __ZNK2ot11NetworkData7Service14BackboneRouter10ServerData22GetReregistrationDelayEv(this);
}

uint64_t ot::NetworkData::Service::BackboneRouter::ServerData::GetMlrTimeout( ot::NetworkData::Service::BackboneRouter::ServerData *this)
{
  return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*(unsigned int *)((char *)this + 3));
}

{
  return __ZNK2ot11NetworkData7Service14BackboneRouter10ServerData13GetMlrTimeoutEv(this);
}

uint64_t ot::NetworkData::Service::Manager::GetNextDnsSrpAnycastInfo( ot::InstanceLocator *a1, ot::NetworkData::NetworkDataTlv **a2, ot::Ip6::Address *a3)
{
  unsigned __int16 v19 = a1;
  __int16 v18 = a2;
  uint64_t v17 = a3;
  unsigned int v16 = 0;
  NextThreadService = *a2;
  ot::Data<(ot::DataLengthType)0>::InitFrom<unsigned char>( (uint64_t)v15,  (uint64_t)&ot::NetworkData::Service::DnsSrpAnycast::kServiceData);
  do
  {
    uint64_t v3 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(a1);
    NextThreadService = ot::NetworkData::NetworkData::FindNextThreadService(v3, NextThreadService, (uint64_t)v15, 0);
    if (!NextThreadService) {
      return 23;
    }
  }

  while (ot::NetworkData::ServiceTlv::GetServiceDataLength(NextThreadService) < 2uLL);
  ot::NetworkData::ServiceTlv::GetServiceData(NextThreadService, (uint64_t)v15);
  char v12 = v17;
  uint64_t v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1);
  ot::Mle::Mle::GetMeshLocalPrefix(v4);
  char v11 = v5;
  unsigned __int8 ServiceId = ot::NetworkData::ServiceTlv::GetServiceId(NextThreadService);
  unsigned __int16 v7 = ot::Mle::ServiceAlocFromId((ot::Mle *)ServiceId);
  ot::Ip6::Address::SetToAnycastLocator(v12, v11, v7);
  Bytes = (ot::NetworkData::Service::DnsSrpAnycast::ServiceData *)ot::Data<(ot::DataLengthType)0>::GetBytes((uint64_t)v15);
  char SequenceNumber = ot::NetworkData::Service::DnsSrpAnycast::ServiceData::GetSequenceNumber(Bytes);
  *((_BYTE *)v17 + 16) = SequenceNumber;
  ot::Coap::Message *v18 = NextThreadService;
  return v16;
}

uint64_t ot::NetworkData::Service::DnsSrpAnycast::ServiceData::GetSequenceNumber( ot::NetworkData::Service::DnsSrpAnycast::ServiceData *this)
{
  return *((unsigned __int8 *)this + 1);
}

{
  return __ZNK2ot11NetworkData7Service13DnsSrpAnycast11ServiceData17GetSequenceNumberEv(this);
}

uint64_t ot::NetworkData::Service::Manager::FindPreferredDnsSrpAnycastInfo( ot::InstanceLocator *a1, uint64_t a2)
{
  char v14 = a1;
  uint64_t v13 = a2;
  unsigned int v12 = 23;
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback(v11);
  while (!ot::NetworkData::Service::Manager::GetNextDnsSrpAnycastInfo(a1, v11, (ot::Ip6::Address *)&v9))
  {
    if (v12 == 23)
    {
      uint64_t v2 = v13;
      *(_OWORD *)uint64_t v13 = v9;
      *(_BYTE *)(v2 + 16) = v10;
      __int128 v7 = v9;
      unsigned __int8 v8 = v10;
      unsigned int v12 = 0;
    }

    else
    {
      if (ot::SerialNumber::IsGreater<unsigned char>(v10, *(_BYTE *)(v13 + 16)))
      {
        uint64_t v3 = v13;
        *(_OWORD *)uint64_t v13 = v9;
        *(_BYTE *)(v3 + 16) = v10;
      }

      if (v10 > (int)v8)
      {
        __int128 v7 = v9;
        unsigned __int8 v8 = v10;
      }
    }
  }

  if (!v12)
  {
    ot::NetworkData::Service::Manager::Iterator::Reset(v11);
    while (!ot::NetworkData::Service::Manager::GetNextDnsSrpAnycastInfo(a1, v11, (ot::Ip6::Address *)&v9))
    {
      if (v10 != *(unsigned __int8 *)(v13 + 16)
        && ((v10 - *(_BYTE *)(v13 + 16)) == 128
         || !ot::SerialNumber::IsGreater<unsigned char>(*(_BYTE *)(v13 + 16), v10)))
      {
        uint64_t v4 = v13;
        *(_OWORD *)uint64_t v13 = v7;
        *(_BYTE *)(v4 + 16) = v8;
        return v12;
      }
    }
  }

  return v12;
}

void *ot::NetworkData::Service::Manager::Iterator::Reset(void *this)
{
  *this = 0LL;
  this[1] = 0LL;
  return this;
}

{
  return __ZN2ot11NetworkData7Service7Manager8Iterator5ResetEv(this);
}

uint64_t ot::NetworkData::Service::Manager::GetNextDnsSrpUnicastInfo( ot::NetworkData::Service::Manager *this, ot::NetworkData::NetworkDataTlv **a2, ot::NetworkData::Service::DnsSrpUnicast::Info *a3)
{
  unsigned __int8 v34 = this;
  unsigned __int8 v33 = a2;
  char v32 = a3;
  unsigned int v31 = 0;
  ot::Data<(ot::DataLengthType)0>::InitFrom<unsigned char>( (uint64_t)v30,  (uint64_t)&ot::NetworkData::Service::DnsSrpUnicast::kServiceData);
  do
  {
    while (!ot::NetworkData::Service::Manager::IterateToNextServer(this, v33))
    {
      ot::NetworkData::ServerTlv::GetServerData(v33[1], (uint64_t)v29);
      if (ot::Data<(ot::DataLengthType)0>::GetLength((uint64_t)v29) >= 0x12uLL)
      {
        Bytes = (ot::NetworkData::Service::DnsSrpUnicast::ServerData *)ot::Data<(ot::DataLengthType)0>::GetBytes((uint64_t)v29);
        unsigned __int8 v24 = v32;
        ot::NetworkData::Service::DnsSrpUnicast::ServerData::GetAddress(Bytes);
        ot::Ip6::SockAddr::SetAddress((__n128 *)v24, v3);
        unsigned __int16 v25 = v32;
        __int16 Port = ot::NetworkData::Service::DnsSrpUnicast::ServerData::GetPort(Bytes);
        ot::Ip6::SockAddr::SetPort((uint64_t)v25, Port);
        *((_BYTE *)v32 + 18) = 1;
        __int16 Server16 = ot::NetworkData::ServerTlv::GetServer16(v33[1]);
        *((_WORD *)v32 + 1ot::NetworkData::NetworkDataTlv::SetType(this, 0) = Server16;
        return v31;
      }

      if (ot::Data<(ot::DataLengthType)0>::GetLength((uint64_t)v29) == 2LL)
      {
        ot::Ip6::SockAddr::GetAddress(v32);
        char v22 = v6;
        __int128 v7 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
        ot::Mle::Mle::GetMeshLocalPrefix(v7);
        uint64_t v21 = v8;
        unsigned __int16 v9 = ot::NetworkData::ServerTlv::GetServer16(v33[1]);
        ot::Ip6::Address::SetToRoutingLocator(v22, v21, v9);
        unsigned int v23 = v32;
        unsigned __int8 v10 = (ot::Encoding::BigEndian *)ot::Data<(ot::DataLengthType)0>::GetBytes((uint64_t)v29);
        __int16 Uint16 = ot::Encoding::BigEndian::ReadUint16(v10, v11);
        ot::Ip6::SockAddr::SetPort((uint64_t)v23, Uint16);
        *((_BYTE *)v32 + 18) = 1;
        __int16 v13 = ot::NetworkData::ServerTlv::GetServer16(v33[1]);
        *((_WORD *)v32 + 1ot::NetworkData::NetworkDataTlv::SetType(this, 0) = v13;
        return v31;
      }
    }

    uint64_t v14 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
    NextThreadService = ot::NetworkData::NetworkData::FindNextThreadService(v14, *v33, (uint64_t)v30, 0);
    *unsigned __int8 v33 = NextThreadService;
    if (!*v33) {
      return 23;
    }
  }

  while (ot::NetworkData::ServiceTlv::GetServiceDataLength(*v33) < 0x13uLL);
  ot::NetworkData::ServiceTlv::GetServiceData(*v33, (uint64_t)v30);
  unsigned __int16 v27 = (ot::NetworkData::Service::DnsSrpUnicast::ServiceData *)ot::Data<(ot::DataLengthType)0>::GetBytes((uint64_t)v30);
  unsigned __int16 v19 = v32;
  Address = (__n128 *)ot::NetworkData::Service::DnsSrpUnicast::ServiceData::GetAddress(v27);
  ot::Ip6::SockAddr::SetAddress((__n128 *)v19, Address);
  unsigned __int16 v20 = v32;
  __int16 v17 = ot::NetworkData::Service::DnsSrpUnicast::ServiceData::GetPort(v27);
  ot::Ip6::SockAddr::SetPort((uint64_t)v20, v17);
  *((_BYTE *)v32 + 18) = 0;
  *((_WORD *)v32 + 1ot::NetworkData::NetworkDataTlv::SetType(this, 0) = -2;
  return v31;
}

__n128 ot::Ip6::SockAddr::SetAddress(__n128 *this, __n128 *a2)
{
  __n128 result = *a2;
  *this = *a2;
  return result;
}

void ot::NetworkData::Service::DnsSrpUnicast::ServerData::GetAddress( ot::NetworkData::Service::DnsSrpUnicast::ServerData *this)
{
}

{
  __ZNK2ot11NetworkData7Service13DnsSrpUnicast10ServerData10GetAddressEv(this);
}

uint64_t ot::Ip6::SockAddr::SetPort(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 16)  = a2;
  return this;
}

{
  return __ZN2ot3Ip68SockAddr7SetPortEt(this, a2);
}

uint64_t ot::NetworkData::Service::DnsSrpUnicast::ServerData::GetPort( ot::NetworkData::Service::DnsSrpUnicast::ServerData *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 8));
}

{
  return __ZNK2ot11NetworkData7Service13DnsSrpUnicast10ServerData7GetPortEv(this);
}

uint64_t ot::NetworkData::Service::DnsSrpUnicast::ServiceData::GetAddress( ot::NetworkData::Service::DnsSrpUnicast::ServiceData *this)
{
  return (uint64_t)this + 1;
}

{
  return __ZNK2ot11NetworkData7Service13DnsSrpUnicast11ServiceData10GetAddressEv(this);
}

uint64_t ot::NetworkData::Service::DnsSrpUnicast::ServiceData::GetPort( ot::NetworkData::Service::DnsSrpUnicast::ServiceData *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)((char *)this + 17));
}

{
  return __ZNK2ot11NetworkData7Service13DnsSrpUnicast11ServiceData7GetPortEv(this);
}

ot::NetworkData::NetworkDataTlv *ot::NetworkData::NetworkDataTlv::Find( ot::NetworkData::NetworkDataTlv *Next, unint64_t a2, unsigned __int8 a3)
{
  while (1)
  {
    BOOL v4 = 0;
    if (!v4) {
      break;
    }
    uint64_t Next = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(Next);
  }

  return 0LL;
}

ot::NetworkData::NetworkDataTlv *ot::NetworkData::NetworkDataTlv::Find( ot::NetworkData::NetworkDataTlv *Next, unint64_t a2, unsigned __int8 a3, char a4)
{
  char v7 = a4 & 1;
  while (1)
  {
    BOOL v5 = 0;
    if (!v5) {
      break;
    }
    if (a3 == ot::NetworkData::NetworkDataTlv::GetType(Next)
      && ot::NetworkData::NetworkDataTlv::IsStable(Next) == (v7 & 1))
    {
      return Next;
    }

    uint64_t Next = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(Next);
  }

  return 0LL;
}

ot::NetworkData::NetworkDataTlv *ot::NetworkData::PrefixTlv::FindSubTlv( ot::NetworkData::PrefixTlv *a1, unsigned __int8 a2)
{
  uint64_t SubTlvs = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::PrefixTlv::GetSubTlvs(a1);
  unint64_t Next = ot::NetworkData::NetworkDataTlv::GetNext(a1);
  return ot::NetworkData::NetworkDataTlv::Find(SubTlvs, Next, a2);
}

ot::NetworkData::NetworkDataTlv *ot::NetworkData::PrefixTlv::FindSubTlv( ot::NetworkData::PrefixTlv *a1, unsigned __int8 a2, char a3)
{
  char v7 = a3 & 1;
  uint64_t SubTlvs = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::PrefixTlv::GetSubTlvs(a1);
  unint64_t Next = ot::NetworkData::NetworkDataTlv::GetNext(a1);
  return ot::NetworkData::NetworkDataTlv::Find(SubTlvs, Next, a2, v7 & 1);
}

uint64_t ot::NetworkData::ServiceTlv::Init(_BYTE *a1, char a2, unsigned int a3, uint64_t a4)
{
  if (a3 == 44970) {
    char v4 = 0x80;
  }
  else {
    char v4 = 0;
  }
  a1[2]  = v4;
  a1[2] |= a2 & 0xF;
  if (a3 == 44970)
  {
    a1[3]  = ot::Data<(ot::DataLengthType)0>::GetLength(a4);
    ot::Data<(ot::DataLengthType)0>::CopyBytesTo(a4, a1 + 4);
  }

  else
  {
    *(_DWORD *)(a1 + ot::NetworkData::NetworkDataTlv::SetType(this, 3) = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a3);
    a1[7]  = ot::Data<(ot::DataLengthType)0>::GetLength(a4);
    ot::Data<(ot::DataLengthType)0>::CopyBytesTo(a4, a1 + 8);
  }

  Fieldschar Length = ot::NetworkData::ServiceTlv::GetFieldsLength((ot::NetworkData::ServiceTlv *)a1);
  return ot::NetworkData::NetworkDataTlv::SetLength((uint64_t)a1, FieldsLength);
}

ot::NetworkData::NetworkDataTlv *ot::NetworkData::TlvIterator::Iterate(uint64_t a1, unsigned __int8 a2)
{
  char v4 = ot::NetworkData::NetworkDataTlv::Find(*(ot::NetworkData::NetworkDataTlv **)a1, *(void *)(a1 + 8), a2);
  if (v4) {
    *(void *)a1  = ot::NetworkData::NetworkDataTlv::GetNext(v4);
  }
  return v4;
}

ot::NetworkData::NetworkDataTlv *ot::NetworkData::TlvIterator::Iterate( uint64_t a1, unsigned __int8 a2, char a3)
{
  BOOL v5 = ot::NetworkData::NetworkDataTlv::Find(*(ot::NetworkData::NetworkDataTlv **)a1, *(void *)(a1 + 8), a2, a3 & 1);
  if (v5) {
    *(void *)a1  = ot::NetworkData::NetworkDataTlv::GetNext(v5);
  }
  return v5;
}

uint64_t ot::NetworkData::OnMeshPrefixConfig::IsValid( ot::NetworkData::OnMeshPrefixConfig *this, ot::Instance *a2)
{
  char v11 = 0;
  if ((*(_WORD *)((_BYTE *)this + 17) & 0x10) == 0 || (*(_WORD *)((_BYTE *)this + 17) & 8) == 0)
  {
    if ((*(_WORD *)((_BYTE *)this + 17) & 8) == 0
      || (ot::NetworkData::OnMeshPrefixConfig::GetPrefix(this), ot::Ip6::Prefix::GetLength(v2) == 64))
    {
      if (ot::NetworkData::IsRoutePreferenceValid((ot::NetworkData *)((char)(*((_BYTE *)this + 17) << 6) >> 6)))
      {
        ot::NetworkData::OnMeshPrefixConfig::GetPrefix(this);
        if (ot::NetworkData::IsPrefixValid(a2, v3, v4))
        {
          ot::NetworkData::OnMeshPrefixConfig::GetPrefix(this);
          char Length = ot::Ip6::Prefix::GetLength(v5);
          if (v7 | (Length == 0)) {
            char v8 = 0;
          }
          else {
            char v8 = 1;
          }
          if ((v8 & 1) != 0) {
            char v11 = 1;
          }
        }
      }
    }
  }

  return v11 & 1;
}

BOOL ot::NetworkData::IsRoutePreferenceValid(ot::NetworkData *this)
{
  return ot::Preference::IsValid((ot::Preference *)(char)this);
}

{
  return __ZN2ot11NetworkData22IsRoutePreferenceValidEa(this);
}

BOOL ot::NetworkData::IsPrefixValid(ot::NetworkData *this, ot::Instance *a2, const ot::Ip6::Prefix *a3)
{
  LOBYTE(v6)  = 0;
  if (ot::Ip6::Prefix::IsValid(a2))
  {
    uint64_t v3 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::Mle>((uint64_t)this);
    ot::Mle::Mle::GetMeshLocalPrefix(v3);
    return !ot::Ip6::Prefix::ContainsPrefix((unsigned __int8 *)a2, v4);
  }

  return v6;
}

uint64_t ot::NetworkData::OnMeshPrefixConfig::ConvertToTlvFlags(ot::NetworkData::OnMeshPrefixConfig *this)
{
  __int16 v2 = 0;
  if ((*(_WORD *)((_BYTE *)this + 17) & 4) != 0) {
    __int16 v2 = 0x2000;
  }
  if ((*(_WORD *)((_BYTE *)this + 17) & 8) != 0) {
    v2 |= 0x1000u;
  }
  if ((*(_WORD *)((_BYTE *)this + 17) & 0x10) != 0) {
    v2 |= 0x800u;
  }
  if ((*(_WORD *)((_BYTE *)this + 17) & 0x20) != 0) {
    v2 |= 0x400u;
  }
  if ((*(_WORD *)((_BYTE *)this + 17) & 0x40) != 0) {
    v2 |= 0x200u;
  }
  if ((*(_WORD *)((_BYTE *)this + 17) & 0x80) != 0) {
    v2 |= 0x100u;
  }
  if ((*(_WORD *)((_BYTE *)this + 17) & 0x200) != 0) {
    v2 |= 0x80u;
  }
  if ((*(_WORD *)((_BYTE *)this + 17) & 0x400) != 0) {
    v2 |= 0x40u;
  }
  return (unsigned __int16)(v2 | (ot::NetworkData::RoutePreferenceToValue((ot::NetworkData *)((char)(*((_BYTE *)this + 17) << 6) >> 6)) << 14));
}

uint64_t ot::NetworkData::RoutePreferenceToValue(ot::NetworkData *this)
{
  return ot::Preference::To2BitUint((ot::Preference *)(char)this);
}

{
  return __ZN2ot11NetworkData22RoutePreferenceToValueEa(this);
}

BOOL ot::NetworkData::OnMeshPrefixConfig::SetFrom( ot::NetworkData::OnMeshPrefixConfig *this, const ot::NetworkData::PrefixTlv *a2, const ot::NetworkData::BorderRouterTlv *a3, const ot::NetworkData::BorderRouterEntry *a4)
{
  unsigned __int16 Flags = ot::NetworkData::BorderRouterEntry::GetFlags(a4);
  ot::NetworkData::OnMeshPrefixConfig::SetFromTlvFlags(this, Flags);
  *((_WORD *)this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 0) = ot::NetworkData::BorderRouterEntry::GetRloc(a4);
  BOOL result = ot::NetworkData::NetworkDataTlv::IsStable(a3);
  *(_WORD *)((char *)this + 1ot::ThreadTlv::SetType(this, 7) = *(_WORD *)((_BYTE *)this + 17) & 0xFEFF | (result << 8);
  return result;
}

void *ot::Clearable<ot::NetworkData::OnMeshPrefixConfig>::Clear(void *result)
{
  *BOOL result = 0LL;
  result[1]  = 0LL;
  result[2]  = 0LL;
  return result;
}

{
  return __ZN2ot9ClearableINS_11NetworkData18OnMeshPrefixConfigEE5ClearEv(result);
}

uint64_t ot::NetworkData::OnMeshPrefixConfig::SetFromTlvFlags( ot::NetworkData::OnMeshPrefixConfig *this, unsigned __int16 a2)
{
  *(_WORD *)((char *)this + 1ot::ThreadTlv::SetType(this, 7) = *(_WORD *)((_BYTE *)this + 17) & 0xFFFB | (4 * ((a2 & 0x2000) != 0));
  *(_WORD *)((char *)this + 1ot::ThreadTlv::SetType(this, 7) = *(_WORD *)((_BYTE *)this + 17) & 0xFFF7 | (8 * ((a2 & 0x1000) != 0));
  *(_WORD *)((char *)this + 1ot::ThreadTlv::SetType(this, 7) = *(_WORD *)((_BYTE *)this + 17) & 0xFFEF | (16 * ((a2 & 0x800) != 0));
  *(_WORD *)((char *)this + 1ot::ThreadTlv::SetType(this, 7) = *(_WORD *)((_BYTE *)this + 17) & 0xFFDF | (32 * ((a2 & 0x400) != 0));
  *(_WORD *)((char *)this + 1ot::ThreadTlv::SetType(this, 7) = *(_WORD *)((_BYTE *)this + 17) & 0xFFBF | (((a2 & 0x200) != 0) << 6);
  *(_WORD *)((char *)this + 1ot::ThreadTlv::SetType(this, 7) = *(_WORD *)((_BYTE *)this + 17) & 0xFF7F | (((a2 & 0x100) != 0) << 7);
  *(_WORD *)((char *)this + 1ot::ThreadTlv::SetType(this, 7) = *(_WORD *)((_BYTE *)this + 17) & 0xFDFF | (((a2 & 0x80u) != 0) << 9);
  *(_WORD *)((char *)this + 1ot::ThreadTlv::SetType(this, 7) = *(_WORD *)((_BYTE *)this + 17) & 0xFBFF | (((a2 & 0x40) != 0) << 10);
  uint64_t result = ot::NetworkData::RoutePreferenceFromValue((ot::NetworkData *)((int)a2 >> 14));
  *(_WORD *)((char *)this + 1ot::ThreadTlv::SetType(this, 7) = *(_WORD *)((_BYTE *)this + 17) & 0xFFFC | result & 3;
  return result;
}

uint64_t ot::NetworkData::ExternalRouteConfig::IsValid( ot::NetworkData::ExternalRouteConfig *this, ot::Instance *a2)
{
  char v7 = 0;
  if ((*((_BYTE *)this + 20) & 4) == 0
    || (ot::NetworkData::ExternalRouteConfig::GetPrefix(this), ot::Ip6::Prefix::IsValidNat64(v2)))
  {
    if (ot::NetworkData::IsRoutePreferenceValid((ot::NetworkData *)((char)(*((_BYTE *)this + 20) << 6) >> 6)))
    {
      ot::NetworkData::ExternalRouteConfig::GetPrefix(this);
      if (ot::NetworkData::IsPrefixValid(a2, v3, v4)) {
        char v7 = 1;
      }
    }
  }

  return v7 & 1;
}

uint64_t ot::NetworkData::ExternalRouteConfig::ConvertToTlvFlags(ot::NetworkData::ExternalRouteConfig *this)
{
  char v2 = 0;
  if ((*((_BYTE *)this + 20) & 4) != 0) {
    char v2 = 32;
  }
  return (v2 | (ot::NetworkData::RoutePreferenceToValue((ot::NetworkData *)((char)(*((_BYTE *)this + 20) << 6) >> 6)) << 6));
}

uint64_t ot::NetworkData::ExternalRouteConfig::SetFrom( ot::NetworkData::ExternalRouteConfig *this, ot::Instance *a2, const ot::NetworkData::PrefixTlv *a3, const ot::NetworkData::HasRouteTlv *a4, const ot::NetworkData::HasRouteEntry *a5)
{
  unsigned __int8 Flags = ot::NetworkData::HasRouteEntry::GetFlags(a5);
  ot::NetworkData::ExternalRouteConfig::SetFromTlvFlags(this, Flags);
  *((_BYTE *)this + ot::Mle::Tlv::SetType(this, 20) = *((_BYTE *)this + 20) & 0xF7 | (8 * ot::NetworkData::NetworkDataTlv::IsStable(a4));
  *((_WORD *)this + ot::Callback<void (*)(void *),(ot::CallbackContextPosition)0>::InvokeIfSet<>((void *)this + 9) = ot::NetworkData::HasRouteEntry::GetRloc(a5);
  int Rloc = (unsigned __int16)ot::NetworkData::HasRouteEntry::GetRloc(a5);
  char v7 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>((uint64_t)a2);
  uint64_t result = ot::Mle::Mle::GetRloc16(v7);
  *((_BYTE *)this + ot::Mle::Tlv::SetType(this, 20) = *((_BYTE *)this + 20) & 0xEF | (16 * (Rloc == (unsigned __int16)result));
  return result;
}

void *ot::Clearable<ot::NetworkData::ExternalRouteConfig>::Clear(void *result)
{
  *uint64_t result = 0LL;
  result[1]  = 0LL;
  result[2]  = 0LL;
  return result;
}

{
  return __ZN2ot9ClearableINS_11NetworkData19ExternalRouteConfigEE5ClearEv(result);
}

uint64_t ot::NetworkData::ExternalRouteConfig::SetFromTlvFlags( ot::NetworkData::ExternalRouteConfig *this, unsigned __int8 a2)
{
  *((_BYTE *)this + ot::Mle::Tlv::SetType(this, 20) = *((_BYTE *)this + 20) & 0xFB | (4 * ((a2 & 0x20) != 0));
  uint64_t result = ot::NetworkData::RoutePreferenceFromValue((ot::NetworkData *)((int)a2 >> 6));
  *((_BYTE *)this + ot::Mle::Tlv::SetType(this, 20) = *((_BYTE *)this + 20) & 0xFC | result & 3;
  return result;
}

BOOL ot::NetworkData::ServiceConfig::ServerConfig::operator==(_BYTE *a1, _BYTE *a2)
{
  BOOL v3 = 0;
  if ((*a1 & 1) == (*a2 & 1))
  {
    BOOL v3 = 0;
    if (a1[1] == a2[1]) {
      return memcmp(a1 + 2, a2 + 2, a1[1]) == 0;
    }
  }

  return v3;
}

void *ot::NetworkData::ServiceConfig::ServerConfig::SetFrom( ot::NetworkData::ServiceConfig::ServerConfig *this, const ot::NetworkData::ServerTlv *a2)
{
  BOOL v6 = this;
  BOOL v5 = a2;
  ot::NetworkData::ServerTlv::GetServerData(a2, (uint64_t)v4);
  *(_BYTE *)this  = *(_BYTE *)this & 0xFE | ot::NetworkData::NetworkDataTlv::IsStable(v5);
  *((_WORD *)this + 125)  = ot::NetworkData::ServerTlv::GetServer16(v5);
  *((_BYTE *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = ot::Data<(ot::DataLengthType)0>::GetLength((uint64_t)v4);
  return ot::Data<(ot::DataLengthType)0>::CopyBytesTo((uint64_t)v4, (char *)this + 2);
}

BOOL ot::NetworkData::ServiceConfig::operator==(uint64_t a1, uint64_t a2)
{
  BOOL v6 = 0;
  if (*(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4))
  {
    BOOL v6 = 0;
    if (*(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8))
    {
      BOOL v6 = 0;
      if (!memcmp((const void *)(a1 + 9), (const void *)(a2 + 9), *(unsigned __int8 *)(a1 + 8)))
      {
        uint64_t ServerConfig = (_BYTE *)ot::NetworkData::ServiceConfig::GetServerConfig((ot::NetworkData::ServiceConfig *)a1);
        char v2 = (_BYTE *)ot::NetworkData::ServiceConfig::GetServerConfig((ot::NetworkData::ServiceConfig *)a2);
        return ot::NetworkData::ServiceConfig::ServerConfig::operator==(ServerConfig, v2);
      }
    }
  }

  return v6;
}

void *ot::NetworkData::ServiceConfig::SetFrom( ot::NetworkData::ServiceConfig *this, const ot::NetworkData::ServiceTlv *a2, const ot::NetworkData::ServerTlv *a3)
{
  unsigned __int16 v9 = this;
  char v8 = a2;
  char v7 = a3;
  ot::Clearable<ot::NetworkData::ServiceConfig>::Clear(this);
  ot::NetworkData::ServiceTlv::GetServiceData(v8, (uint64_t)v6);
  *(_BYTE *)this  = ot::NetworkData::ServiceTlv::GetServiceId(v8);
  *((_DWORD *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = ot::NetworkData::ServiceTlv::GetEnterpriseNumber(v8);
  *((_BYTE *)this + 8)  = ot::Data<(ot::DataLengthType)0>::GetLength((uint64_t)v6);
  ot::Data<(ot::DataLengthType)0>::CopyBytesTo((uint64_t)v6, (char *)this + 9);
  uint64_t ServerConfig = (ot::NetworkData::ServiceConfig::ServerConfig *)ot::NetworkData::ServiceConfig::GetServerConfig(this);
  return ot::NetworkData::ServiceConfig::ServerConfig::SetFrom(ServerConfig, v7);
}

void ot::Clearable<ot::NetworkData::ServiceConfig>::Clear(void *a1)
{
}

{
  __ZN2ot9ClearableINS_11NetworkData13ServiceConfigEE5ClearEv(a1);
}

uint64_t ot::NetworkData::LowpanContextInfo::SetFrom( ot::NetworkData::LowpanContextInfo *this, const ot::NetworkData::PrefixTlv *a2, const ot::NetworkData::ContextTlv *a3)
{
  *(_BYTE *)this  = ot::NetworkData::ContextTlv::GetContextId(a3);
  *((_BYTE *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = ot::NetworkData::ContextTlv::IsCompress(a3);
  ot::NetworkData::LowpanContextInfo::GetPrefix(this);
  ot::NetworkData::PrefixTlv::CopyPrefixTo(a2, v3);
  ot::NetworkData::LowpanContextInfo::GetPrefix(this);
  char v8 = v4;
  Contextchar Length = ot::NetworkData::ContextTlv::GetContextLength(a3);
  return ot::Ip6::Prefix::SetLength((uint64_t)v8, ContextLength);
}

void ot::NetworkData::LowpanContextInfo::GetPrefix(ot::NetworkData::LowpanContextInfo *this)
{
}

{
  __ZN2ot11NetworkData17LowpanContextInfo9GetPrefixEv(this);
}

uint64_t ot::NetworkData::ContextTlv::GetContextLength(ot::NetworkData::ContextTlv *this)
{
  return *((unsigned __int8 *)this + 3);
}

{
  return __ZNK2ot11NetworkData10ContextTlv16GetContextLengthEv(this);
}

BOOL ot::Ip6::Prefix::IsValid(ot::Ip6::Prefix *this)
{
  return *((unsigned __int8 *)this + 16) <= 0x80u;
}

{
  return __ZNK2ot3Ip66Prefix7IsValidEv(this);
}

ot::NetworkDiagnostic::Server *ot::NetworkDiagnostic::Server::Server( ot::NetworkDiagnostic::Server *this, ot::Instance *a2)
{
  return this;
}

{
  ot::NetworkDiagnostic::Server::Server(this, a2);
  return this;
}

double ot::NetworkDiagnostic::Server::PrepareMessageInfoForDest( ot::NetworkDiagnostic::Server *this, const ot::Ip6::Address *a2, __n128 *a3)
{
  if (ot::Ip6::Address::IsMulticast(a2)) {
    ot::Ip6::MessageInfo::SetMulticastLoop((uint64_t)a3, 1);
  }
  if (ot::Ip6::Address::IsLinkLocal(a2) || ot::Ip6::Address::IsLinkLocalMulticast(a2))
  {
    BOOL v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    ot::Mle::Mle::GetLinkLocalAddress(v3);
    ot::Ip6::MessageInfo::SetSockAddr(a3, v4);
  }

  else
  {
    ot::Tmf::MessageInfo::SetSockAddrToRloc((ot::Tmf::MessageInfo *)a3);
  }

  return ot::Ip6::MessageInfo::SetPeerAddr(a3, (__n128 *)a2);
}

uint64_t ot::NetworkDiagnostic::Server::AppendIp6AddressList( ot::NetworkDiagnostic::Server *this, ot::Message *a2)
{
  uint64_t v21 = this;
  unsigned __int16 v20 = a2;
  unsigned int v19 = 0;
  unsigned __int16 v18 = 0;
  char v2 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
  ot::Ip6::Netif::GetUnicastAddresses(v2);
  v17[1]  = v3;
  v17[0]  = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::begin(v3);
  uint64_t v16 = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::end();
  while (ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator!=( v17,  &v16))
  {
    uint64_t v15 = ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator*((uint64_t)v17);
    ++v18;
    ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator++(v17);
  }

  if (16 * v18 > 254)
  {
    ot::Tlv::SetType(v13, 8);
    ot::ExtendedTlv::SetLength((ot::ExtendedTlv *)v13, 16 * v18);
    unsigned int v19 = ot::Message::Append<ot::ExtendedTlv>(v20, v13);
    if (v19) {
      return v19;
    }
  }

  else
  {
    ot::NetworkDiagnostic::Tlv::SetType(v14, 8);
    ot::Tlv::SetLength((uint64_t)v14, 16 * v18);
    unsigned int v19 = ot::Message::Append<ot::NetworkDiagnostic::Tlv>(v20, v14);
    if (v19) {
      return v19;
    }
  }

  char v4 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
  ot::Ip6::Netif::GetUnicastAddresses(v4);
  v12[1]  = v5;
  v12[0]  = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::begin(v5);
  uint64_t v11 = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::end();
  while (ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator!=( v12,  &v11))
  {
    unsigned __int8 v10 = (ot::Ip6::Netif::UnicastAddress *)ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator*((uint64_t)v12);
    char v8 = v20;
    ot::Ip6::Netif::UnicastAddress::GetAddress(v10);
    unsigned int v19 = ot::Message::Append<ot::Ip6::Address>(v8, v6);
    if (v19) {
      break;
    }
    ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator++(v12);
  }

  return v19;
}

_BYTE *ot::NetworkDiagnostic::Tlv::SetType(_BYTE *a1, char a2)
{
  return ot::Tlv::SetType(a1, a2);
}

{
  return __ZN2ot17NetworkDiagnostic3Tlv7SetTypeENS1_4TypeE(a1, a2);
}

uint64_t ot::Message::Append<ot::NetworkDiagnostic::Tlv>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 2u);
}

{
  return __ZN2ot7Message6AppendINS_17NetworkDiagnostic3TlvEEE7otErrorRKT_(a1, a2);
}

uint64_t ot::Message::Append<ot::ExtendedTlv>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 4u);
}

{
  return __ZN2ot7Message6AppendINS_11ExtendedTlvEEE7otErrorRKT_(a1, a2);
}

uint64_t ot::NetworkDiagnostic::Server::AppendChildTable( ot::NetworkDiagnostic::Server *this, ot::Message *a2)
{
  unsigned __int8 v28 = this;
  unsigned __int16 v27 = a2;
  unsigned int v26 = 0;
  char v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (ot::Mle::Mle::IsRouterOrLeader(v2))
  {
    uint64_t v3 = (__int16 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
    unsigned __int16 NumChildren = ot::ChildTable::GetNumChildren(v3, 0);
    unsigned __int16 v25 = ot::Min<unsigned short>(NumChildren, 0x18Eu);
    if (3 * (unint64_t)v25 > 0xFE)
    {
      ot::Tlv::SetType(v23, 16);
      ot::ExtendedTlv::SetLength((ot::ExtendedTlv *)v23, 3 * v25);
      unsigned int v26 = ot::Message::Append<ot::ExtendedTlv>(v27, v23);
      if (v26) {
        return v26;
      }
    }

    else
    {
      ot::NetworkDiagnostic::Tlv::SetType(v24, 16);
      ot::Tlv::SetLength((uint64_t)v24, 3 * v25);
      unsigned int v26 = ot::Message::Append<ot::NetworkDiagnostic::Tlv>(v27, v24);
      if (v26) {
        return v26;
      }
    }

    uint64_t v5 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
    char v21 = ot::ChildTable::Iterate(v5, 0);
    char v22 = (ot::ChildTable::IteratorBuilder *)&v21;
    v20[0]  = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v21);
    v20[1]  = v6;
    v19[0]  = ot::ChildTable::IteratorBuilder::end(v22);
    v19[1]  = v7;
    while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v20, v19))
    {
      unsigned __int16 v18 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v20);
      char v17 = 0;
      if (!v25--) {
        break;
      }
      while (1)
      {
        unsigned int v13 = 1 << v17;
        ++v17;
      }

      ot::Clearable<ot::NetworkDiagnostic::ChildTableEntry>::Clear((uint64_t)v16);
      ot::NetworkDiagnostic::ChildTableEntry::SetTimeout((ot::NetworkDiagnostic::ChildTableEntry *)v16, v17 + 4);
      unsigned __int8 LinkQualityIn = ot::Neighbor::GetLinkQualityIn(v18);
      ot::NetworkDiagnostic::ChildTableEntry::SetLinkQuality( (ot::NetworkDiagnostic::ChildTableEntry *)v16,  LinkQualityIn);
      unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(v18);
      __int16 v11 = ot::Mle::ChildIdFromRloc16((ot::Mle *)Rloc16);
      ot::NetworkDiagnostic::ChildTableEntry::SetChildId((ot::NetworkDiagnostic::ChildTableEntry *)v16, v11);
      char DeviceMode = ot::Neighbor::GetDeviceMode(v18);
      ot::NetworkDiagnostic::ChildTableEntry::SetMode((uint64_t)v16, DeviceMode);
      unsigned int v26 = ot::Message::Append<ot::NetworkDiagnostic::ChildTableEntry>(v27, v16);
      if (v26) {
        break;
      }
      ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v20);
    }
  }

  return v26;
}

uint64_t ot::Clearable<ot::NetworkDiagnostic::ChildTableEntry>::Clear(uint64_t result)
{
  *(_WORD *)uint64_t result = 0;
  *(_BYTE *)(result + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0;
  return result;
}

{
  return __ZN2ot9ClearableINS_17NetworkDiagnostic15ChildTableEntryEE5ClearEv(result);
}

uint64_t ot::NetworkDiagnostic::ChildTableEntry::SetTimeout( ot::NetworkDiagnostic::ChildTableEntry *this, unsigned __int8 a2)
{
  TimeoutChildId  = ot::NetworkDiagnostic::ChildTableEntry::GetTimeoutChildId(this);
  return ot::NetworkDiagnostic::ChildTableEntry::SetTimeoutChildId(this, TimeoutChildId & 0x7FFu | (a2 << 11));
}

{
  return __ZN2ot17NetworkDiagnostic15ChildTableEntry10SetTimeoutEh(this, a2);
}

uint64_t ot::NetworkDiagnostic::ChildTableEntry::SetLinkQuality( ot::NetworkDiagnostic::ChildTableEntry *a1, unsigned __int8 a2)
{
  TimeoutChildId  = ot::NetworkDiagnostic::ChildTableEntry::GetTimeoutChildId(a1);
  return ot::NetworkDiagnostic::ChildTableEntry::SetTimeoutChildId(a1, TimeoutChildId & 0xF9FF | (a2 << 9) & 0x600u);
}

{
  return __ZN2ot17NetworkDiagnostic15ChildTableEntry14SetLinkQualityENS_11LinkQualityE(a1, a2);
}

uint64_t ot::NetworkDiagnostic::ChildTableEntry::SetChildId( ot::NetworkDiagnostic::ChildTableEntry *this, __int16 a2)
{
  TimeoutChildId  = ot::NetworkDiagnostic::ChildTableEntry::GetTimeoutChildId(this);
  return ot::NetworkDiagnostic::ChildTableEntry::SetTimeoutChildId(this, TimeoutChildId & 0xFE00 | a2 & 0x1FFu);
}

{
  return __ZN2ot17NetworkDiagnostic15ChildTableEntry10SetChildIdEt(this, a2);
}

uint64_t ot::NetworkDiagnostic::ChildTableEntry::SetMode(uint64_t a1, char a2)
{
  char v4 = a2;
  uint64_t result = ot::Mle::DeviceMode::Get((ot::Mle::DeviceMode *)&v4);
  *(_BYTE *)(a1 + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = result;
  return result;
}

{
  return __ZN2ot17NetworkDiagnostic15ChildTableEntry7SetModeENS_3Mle10DeviceModeE(a1, a2);
}

uint64_t ot::Message::Append<ot::NetworkDiagnostic::ChildTableEntry>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 3u);
}

{
  return __ZN2ot7Message6AppendINS_17NetworkDiagnostic15ChildTableEntryEEE7otErrorRKT_(a1, a2);
}

uint64_t ot::NetworkDiagnostic::Server::AppendMacCounters( ot::NetworkDiagnostic::Server *this, ot::Message *a2)
{
  uint64_t v7 = this;
  uint64_t v6 = a2;
  char v2 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  uint64_t Counters = (unsigned int *)ot::Mac::Mac::GetCounters(v2);
  memset(__b, 0, sizeof(__b));
  ot::NetworkDiagnostic::MacCountersTlv::Init((ot::NetworkDiagnostic::MacCountersTlv *)__b);
  ot::NetworkDiagnostic::MacCountersTlv::SetIfInUnknownProtos( (ot::NetworkDiagnostic::MacCountersTlv *)__b,  Counters[31]);
  ot::NetworkDiagnostic::MacCountersTlv::SetIfInErrors( (ot::NetworkDiagnostic::MacCountersTlv *)__b,  Counters[35] + Counters[36] + Counters[37] + Counters[38] + Counters[39] + Counters[40]);
  ot::NetworkDiagnostic::MacCountersTlv::SetIfOutErrors((ot::NetworkDiagnostic::MacCountersTlv *)__b, Counters[14]);
  ot::NetworkDiagnostic::MacCountersTlv::SetIfInUcastPkts((ot::NetworkDiagnostic::MacCountersTlv *)__b, Counters[25]);
  ot::NetworkDiagnostic::MacCountersTlv::SetIfInBroadcastPkts( (ot::NetworkDiagnostic::MacCountersTlv *)__b,  Counters[26]);
  ot::NetworkDiagnostic::MacCountersTlv::SetIfInDiscards( (ot::NetworkDiagnostic::MacCountersTlv *)__b,  Counters[32] + Counters[33] + Counters[34]);
  ot::NetworkDiagnostic::MacCountersTlv::SetIfOutUcastPkts((ot::NetworkDiagnostic::MacCountersTlv *)__b, Counters[1]);
  ot::NetworkDiagnostic::MacCountersTlv::SetIfOutBroadcastPkts( (ot::NetworkDiagnostic::MacCountersTlv *)__b,  Counters[2]);
  ot::NetworkDiagnostic::MacCountersTlv::SetIfOutDiscards((ot::NetworkDiagnostic::MacCountersTlv *)__b, Counters[16]);
  return ot::Tlv::AppendTo((ot::Tlv *)__b, v6);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::Init(ot::NetworkDiagnostic::MacCountersTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 36);
}

{
  return __ZN2ot17NetworkDiagnostic14MacCountersTlv4InitEv(this);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::SetIfInUnknownProtos( ot::NetworkDiagnostic::MacCountersTlv *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *(_DWORD *)((char *)this + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = result;
  return result;
}

{
  return __ZN2ot17NetworkDiagnostic14MacCountersTlv20SetIfInUnknownProtosEj(this, a2);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::SetIfInErrors( ot::NetworkDiagnostic::MacCountersTlv *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *(_DWORD *)((char *)this + 6)  = result;
  return result;
}

{
  return __ZN2ot17NetworkDiagnostic14MacCountersTlv13SetIfInErrorsEj(this, a2);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::SetIfOutErrors( ot::NetworkDiagnostic::MacCountersTlv *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *(_DWORD *)((char *)this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 0) = result;
  return result;
}

{
  return __ZN2ot17NetworkDiagnostic14MacCountersTlv14SetIfOutErrorsEj(this, a2);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::SetIfInUcastPkts( ot::NetworkDiagnostic::MacCountersTlv *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *(_DWORD *)((char *)this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 4) = result;
  return result;
}

{
  return __ZN2ot17NetworkDiagnostic14MacCountersTlv16SetIfInUcastPktsEj(this, a2);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::SetIfInBroadcastPkts( ot::NetworkDiagnostic::MacCountersTlv *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *(_DWORD *)((char *)this + 18)  = result;
  return result;
}

{
  return __ZN2ot17NetworkDiagnostic14MacCountersTlv20SetIfInBroadcastPktsEj(this, a2);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::SetIfInDiscards( ot::NetworkDiagnostic::MacCountersTlv *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *(_DWORD *)((char *)this + 2ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = result;
  return result;
}

{
  return __ZN2ot17NetworkDiagnostic14MacCountersTlv15SetIfInDiscardsEj(this, a2);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::SetIfOutUcastPkts( ot::NetworkDiagnostic::MacCountersTlv *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *(_DWORD *)((char *)this + 26)  = result;
  return result;
}

{
  return __ZN2ot17NetworkDiagnostic14MacCountersTlv17SetIfOutUcastPktsEj(this, a2);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::SetIfOutBroadcastPkts( ot::NetworkDiagnostic::MacCountersTlv *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *(_DWORD *)((char *)this + 3ot::NetworkData::NetworkDataTlv::SetType(this, 0) = result;
  return result;
}

{
  return __ZN2ot17NetworkDiagnostic14MacCountersTlv21SetIfOutBroadcastPktsEj(this, a2);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::SetIfOutDiscards( ot::NetworkDiagnostic::MacCountersTlv *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *(_DWORD *)((char *)this + 3ot::NetworkData::NetworkDataTlv::SetType(this, 4) = result;
  return result;
}

{
  return __ZN2ot17NetworkDiagnostic14MacCountersTlv16SetIfOutDiscardsEj(this, a2);
}

uint64_t ot::NetworkDiagnostic::Server::AppendNmDeviceData( ot::NetworkDiagnostic::Server *this, ot::Message *a2)
{
  uint64_t v40 = this;
  char v39 = a2;
  NmDeviceData::NmDeviceData((NmDeviceData *)v29);
  char v2 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  unsigned __int16 MaxChildrenAllowed = ot::ChildTable::GetMaxChildrenAllowed(v2);
  for (unsigned __int16 i = 0; i < (int)MaxChildrenAllowed; ++i)
  {
    unsigned int v12 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
    ot::AsCoreType<otChildInfo>((uint64_t)v41);
    if (!ot::ChildTable::GetChildInfoByIndex(v12, i, v3) && (v42 & 8) == 0)
    {
      if ((v42 & 2) != 0)
      {
        ++v32;
      }

      else if ((v42 & 1) == 0)
      {
        if ((v42 & 0x10) != 0) {
          ++v31;
        }
        else {
          ++v30;
        }
      }
    }
  }

  char v4 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  char v23 = ot::ChildTable::Iterate(v4, 0);
  unsigned __int8 v24 = (ot::ChildTable::IteratorBuilder *)&v23;
  v22[0]  = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v23);
  v22[1]  = v5;
  v21[0]  = ot::ChildTable::IteratorBuilder::end(v24);
  v21[1]  = v6;
  while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v22, v21))
  {
    unsigned __int16 v20 = (ot::Neighbor *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v22);
    int Now = ot::TimerMilli::GetNow(v20);
    LastHeardTraffic  = ot::Neighbor::GetLastHeardTraffic(v20);
    uint64_t v7 = (ot::Time *)ot::Time::operator-(&Now, &LastHeardTraffic);
    char v8 = (ot::TimerMilli *)ot::Time::MsecToSec(v7);
    int v28 = (int)v8;
    int v17 = ot::TimerMilli::GetNow(v8);
    LastReassemblyunsigned int Timeout = ot::Neighbor::GetLastReassemblyTimeout(v20);
    unsigned __int16 v9 = (ot::Time *)ot::Time::operator-(&v17, &LastReassemblyTimeout);
    unsigned int v27 = ot::Time::MsecToSec(v9);
    if (v27 < 0xE10) {
      ++v34;
    }
    ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v22);
  }

  unsigned __int8 v10 = (ot::Trel::Interface *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Trel::Interface>(this);
  if (ot::Trel::Interface::IsEnabled(v10) & 1) {
    v35 |= 1u;
  }
  ot_get_device_data((NmDeviceData *)v29);
  memset(v14, 0, sizeof(v14));
  ot::NetworkDiagnostic::NmDeviceDataTlv::Init((ot::NetworkDiagnostic::NmDeviceDataTlv *)v14);
  ot::NetworkDiagnostic::NmDeviceDataTlv::SetStatus((uint64_t)v14, v29[0]);
  ot::NetworkDiagnostic::NmDeviceDataTlv::SetStability((uint64_t)v14, v29[1]);
  ot::NetworkDiagnostic::NmDeviceDataTlv::SetDataStall((uint64_t)v14, v29[2]);
  ot::NetworkDiagnostic::NmDeviceDataTlv::SetChildrenInfoSedCount((uint64_t)v14, v30);
  ot::NetworkDiagnostic::NmDeviceDataTlv::SetChildrenInfoSsedCount((uint64_t)v14, v31);
  ot::NetworkDiagnostic::NmDeviceDataTlv::SetChildrenInfoFedCount((uint64_t)v14, v32);
  ot::NetworkDiagnostic::NmDeviceDataTlv::SetChildrenInfoNoTrafficCount((uint64_t)v14, v33);
  ot::NetworkDiagnostic::NmDeviceDataTlv::SetTrelInfo((uint64_t)v14, v35);
  ot::NetworkDiagnostic::NmDeviceDataTlv::SetLinkNumSedQueueSizeHigh((uint64_t)v14, v36);
  ot::NetworkDiagnostic::NmDeviceDataTlv::SetLinkNumSedLastHeardGapHigh((uint64_t)v14, v37);
  ot::NetworkDiagnostic::NmDeviceDataTlv::SetLinkStatus((ot::NetworkDiagnostic::NmDeviceDataTlv *)v14, v38);
  return ot::Tlv::AppendTo((ot::Tlv *)v14, v39);
}

void NmDeviceData::NmDeviceData(NmDeviceData *this)
{
}

{
  *(_BYTE *)this  = 0;
  *((_BYTE *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = 0;
  *((_BYTE *)this + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0;
  *((_BYTE *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 3) = 0;
  *((_BYTE *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  *((_BYTE *)this + 5)  = 0;
  *((_BYTE *)this + 6)  = 0;
  *((_BYTE *)this + ot::ThreadTlv::SetType(this, 7) = 0;
  *((_BYTE *)this + 8)  = 0;
  *((_BYTE *)this + ot::NetworkDiagnostic::Tlv::SetType(this, 9) = 0;
  *((_BYTE *)this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0;
  *((_WORD *)this + 6)  = 0;
}

uint64_t ot::Neighbor::GetLastHeardTraffic(ot::Neighbor *this)
{
  return *((unsigned int *)this + 15);
}

{
  return __ZNK2ot8Neighbor19GetLastHeardTrafficEv(this);
}

uint64_t ot::Neighbor::GetLastReassemblyTimeout(ot::Neighbor *this)
{
  return *((unsigned int *)this + 16);
}

{
  return __ZNK2ot8Neighbor24GetLastReassemblyTimeoutEv(this);
}

uint64_t ot::NetworkDiagnostic::NmDeviceDataTlv::Init(ot::NetworkDiagnostic::NmDeviceDataTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 13);
}

{
  return __ZN2ot17NetworkDiagnostic15NmDeviceDataTlv4InitEv(this);
}

uint64_t ot::NetworkDiagnostic::NmDeviceDataTlv::SetStatus(uint64_t this, char a2)
{
  *(_BYTE *)(this + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = a2;
  return this;
}

{
  return __ZN2ot17NetworkDiagnostic15NmDeviceDataTlv9SetStatusEh(this, a2);
}

uint64_t ot::NetworkDiagnostic::NmDeviceDataTlv::SetStability(uint64_t this, char a2)
{
  *(_BYTE *)(this + ot::NetworkData::NetworkDataTlv::SetType(this, 3) = a2;
  return this;
}

{
  return __ZN2ot17NetworkDiagnostic15NmDeviceDataTlv12SetStabilityEh(this, a2);
}

uint64_t ot::NetworkDiagnostic::NmDeviceDataTlv::SetDataStall(uint64_t this, char a2)
{
  *(_BYTE *)(this + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a2;
  return this;
}

{
  return __ZN2ot17NetworkDiagnostic15NmDeviceDataTlv12SetDataStallEh(this, a2);
}

uint64_t ot::NetworkDiagnostic::NmDeviceDataTlv::SetChildrenInfoSedCount(uint64_t this, char a2)
{
  *(_BYTE *)(this + 5)  = a2;
  return this;
}

{
  return __ZN2ot17NetworkDiagnostic15NmDeviceDataTlv23SetChildrenInfoSedCountEh(this, a2);
}

uint64_t ot::NetworkDiagnostic::NmDeviceDataTlv::SetChildrenInfoSsedCount(uint64_t this, char a2)
{
  *(_BYTE *)(this + 6)  = a2;
  return this;
}

{
  return __ZN2ot17NetworkDiagnostic15NmDeviceDataTlv24SetChildrenInfoSsedCountEh(this, a2);
}

uint64_t ot::NetworkDiagnostic::NmDeviceDataTlv::SetChildrenInfoFedCount(uint64_t this, char a2)
{
  *(_BYTE *)(this + ot::ThreadTlv::SetType(this, 7) = a2;
  return this;
}

{
  return __ZN2ot17NetworkDiagnostic15NmDeviceDataTlv23SetChildrenInfoFedCountEh(this, a2);
}

uint64_t ot::NetworkDiagnostic::NmDeviceDataTlv::SetChildrenInfoNoTrafficCount(uint64_t this, char a2)
{
  *(_BYTE *)(this + 8)  = a2;
  return this;
}

{
  return __ZN2ot17NetworkDiagnostic15NmDeviceDataTlv29SetChildrenInfoNoTrafficCountEh(this, a2);
}

uint64_t ot::NetworkDiagnostic::NmDeviceDataTlv::SetTrelInfo(uint64_t this, char a2)
{
  *(_BYTE *)(this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 0) = a2;
  return this;
}

{
  return __ZN2ot17NetworkDiagnostic15NmDeviceDataTlv11SetTrelInfoEh(this, a2);
}

uint64_t ot::NetworkDiagnostic::NmDeviceDataTlv::SetLinkNumSedQueueSizeHigh(uint64_t this, char a2)
{
  *(_BYTE *)(this + ot::Mle::Tlv::SetType(this, 11) = a2;
  return this;
}

{
  return __ZN2ot17NetworkDiagnostic15NmDeviceDataTlv26SetLinkNumSedQueueSizeHighEh(this, a2);
}

uint64_t ot::NetworkDiagnostic::NmDeviceDataTlv::SetLinkNumSedLastHeardGapHigh(uint64_t this, char a2)
{
  *(_BYTE *)(this + 1ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = a2;
  return this;
}

{
  return __ZN2ot17NetworkDiagnostic15NmDeviceDataTlv29SetLinkNumSedLastHeardGapHighEh(this, a2);
}

uint64_t ot::NetworkDiagnostic::NmDeviceDataTlv::SetLinkStatus( ot::NetworkDiagnostic::NmDeviceDataTlv *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *(_WORD *)((char *)this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 3) = result;
  return result;
}

{
  return __ZN2ot17NetworkDiagnostic15NmDeviceDataTlv13SetLinkStatusEt(this, a2);
}

uint64_t ot::NetworkDiagnostic::Server::AppendRequestedTlvs( ot::NetworkDiagnostic::Server *this, const ot::Message *a2, ot::Message *a3, uint64_t a4, unsigned __int16 *a5)
{
  unsigned int v13 = this;
  unsigned int v12 = a2;
  __int16 v11 = a3;
  *(_DWORD *)&void v10[2] = ot::Tlv::FindTlvValueOffset(a2, (const ot::Message *)0x12, v10, &v9, a5);
  if (!*(_DWORD *)&v10[2])
  {
    unsigned __int16 v8 = *(_WORD *)v10 + v9;
    while (*(unsigned __int16 *)v10 < (int)v8)
    {
      *(_DWORD *)&void v10[2] = ot::Message::Read<unsigned char>(v12, *(unsigned __int16 *)v10, (char *)&v7);
      if (*(_DWORD *)&v10[2]) {
        break;
      }
      *(_DWORD *)&void v10[2] = ot::NetworkDiagnostic::Server::AppendDiagTlv(this, v7, v11);
      if (*(_DWORD *)&v10[2]) {
        break;
      }
      *(_DWORD *)unsigned __int8 v10 = (unsigned __int16)(*(_WORD *)v10 + 1);
    }
  }

  return *(unsigned int *)&v10[2];
}

uint64_t ot::NetworkDiagnostic::Server::AppendDiagTlv( ot::NetworkDiagnostic::Server *this, unsigned __int8 a2, ot::Message *a3)
{
  if (a2 <= 0x64uLL) {
    __asm { BR              X8 }
  }

  return 0LL;
}

uint64_t ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)0,ot::Mac::ExtAddress>>(ot::Tlv *a1, void *a2)
{
  return ot::Tlv::AppendTlv(a1, 0LL, a2, (const void *)8);
}

{
  return __ZN2ot3Tlv6AppendINS_13SimpleTlvInfoILh0ENS_3Mac10ExtAddressEEEEE7otErrorRNS_7MessageERKNT_9ValueTypeE(a1, a2);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)1,unsigned short>>(uint64_t a1, unsigned __int16 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned short>(a1, 1, a2);
}

{
  return __ZN2ot3Tlv6AppendINS_11UintTlvInfoILh1EtEEEE7otErrorRNS_7MessageENT_13UintValueTypeE(a1, a2);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)2,unsigned char>>(uint64_t a1, unsigned __int8 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned char>(a1, 2, a2);
}

{
  return __ZN2ot3Tlv6AppendINS_11UintTlvInfoILh2EhEEEE7otErrorRNS_7MessageENT_13UintValueTypeE(a1, a2);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)24,unsigned short>>(uint64_t a1, unsigned __int16 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned short>(a1, 24, a2);
}

{
  return __ZN2ot3Tlv6AppendINS_11UintTlvInfoILh24EtEEEE7otErrorRNS_7MessageENT_13UintValueTypeE(a1, a2);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)3,unsigned int>>(ot::Tlv *a1, unsigned int a2)
{
  return ot::Tlv::AppendUintTlv<unsigned int>(a1, 3u, a2);
}

{
  return __ZN2ot3Tlv6AppendINS_11UintTlvInfoILh3EjEEEE7otErrorRNS_7MessageENT_13UintValueTypeE(a1, a2);
}

_BYTE *ot::NetworkDiagnostic::LeaderDataTlv::Init(ot::NetworkDiagnostic::LeaderDataTlv *this)
{
  return ot::Tlv::SetType(this, 6);
}

{
  return __ZN2ot17NetworkDiagnostic13LeaderDataTlv4InitEv(this);
}

uint64_t ot::Tlv::Append<ot::TlvInfo<(unsigned char)7>>(ot::Tlv *a1, void *a2, unsigned __int8 a3)
{
  return ot::Tlv::AppendTlv(a1, (ot::Message *)7, a2, (const void *)a3);
}

{
  return __ZN2ot3Tlv6AppendINS_7TlvInfoILh7EEEEE7otErrorRNS_7MessageEPKvh(a1, a2, a3);
}

uint64_t ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)25,(unsigned char)32>>( ot::Tlv *a1, ot *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return ot::Tlv::AppendStringTlv(a1, (ot::Message *)0x19, 0x20u, a2, a5);
}

{
  return __ZN2ot3Tlv6AppendINS_13StringTlvInfoILh25ELh32EEEEE7otErrorRNS_7MessageEPKc(a1, a2, a3, a4, a5);
}

uint64_t ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)26,(unsigned char)32>>( ot::Tlv *a1, ot *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return ot::Tlv::AppendStringTlv(a1, (ot::Message *)0x1A, 0x20u, a2, a5);
}

{
  return __ZN2ot3Tlv6AppendINS_13StringTlvInfoILh26ELh32EEEEE7otErrorRNS_7MessageEPKc(a1, a2, a3, a4, a5);
}

uint64_t ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)27,(unsigned char)16>>( ot::Tlv *a1, ot *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return ot::Tlv::AppendStringTlv(a1, (ot::Message *)0x1B, 0x10u, a2, a5);
}

{
  return __ZN2ot3Tlv6AppendINS_13StringTlvInfoILh27ELh16EEEEE7otErrorRNS_7MessageEPKc(a1, a2, a3, a4, a5);
}

uint64_t ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)28,(unsigned char)64>>( ot::Tlv *a1, ot *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return ot::Tlv::AppendStringTlv(a1, (ot::Message *)0x1C, 0x40u, a2, a5);
}

{
  return __ZN2ot3Tlv6AppendINS_13StringTlvInfoILh28ELh64EEEEE7otErrorRNS_7MessageEPKc(a1, a2, a3, a4, a5);
}

uint64_t ot::NetworkDiagnostic::ChannelPagesTlv::Init(ot::NetworkDiagnostic::ChannelPagesTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 1);
}

{
  return __ZN2ot17NetworkDiagnostic15ChannelPagesTlv4InitEv(this);
}

uint64_t ot::NetworkDiagnostic::ChannelPagesTlv::GetChannelPages( ot::NetworkDiagnostic::ChannelPagesTlv *this)
{
  return (uint64_t)this + 2;
}

{
  return __ZN2ot17NetworkDiagnostic15ChannelPagesTlv15GetChannelPagesEv(this);
}

_BYTE *ot::NetworkDiagnostic::ConnectivityTlv::Init(ot::NetworkDiagnostic::ConnectivityTlv *this)
{
  return ot::Tlv::SetType(this, 4);
}

{
  return __ZN2ot17NetworkDiagnostic15ConnectivityTlv4InitEv(this);
}

_BYTE *ot::NetworkDiagnostic::RouteTlv::Init(ot::NetworkDiagnostic::RouteTlv *this)
{
  return ot::Tlv::SetType(this, 5);
}

{
  return __ZN2ot17NetworkDiagnostic8RouteTlv4InitEv(this);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)19,unsigned int>>(ot::Tlv *a1, unsigned int a2)
{
  return ot::Tlv::AppendUintTlv<unsigned int>(a1, 0x13u, a2);
}

{
  return __ZN2ot3Tlv6AppendINS_11UintTlvInfoILh19EjEEEE7otErrorRNS_7MessageENT_13UintValueTypeE(a1, a2);
}

void ot::NetworkDiagnostic::Server::HandleTmf<(ot::Uri)34>( ot::InstanceLocator *a1, ot::Coap::Message *a2, ot::Ip6::MessageInfo *a3)
{
  unsigned __int16 v43 = a1;
  char v42 = a2;
  unsigned int v41 = a3;
  int appended = 0;
  char v39 = 0LL;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(a1);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v38, Instance);
  if (ot::Coap::Message::IsPostRequest(v42))
  {
    char v36 = ot::UriToString<(ot::Uri)34>();
    ot::Ip6::MessageInfo::GetPeerAddr(v41);
    ot::Ip6::Address::ToString(v4, (ot::StringWriter *)v47);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v47);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"NetDiag", "Received %s from %s", v5, v6, v7, v8, v9, v10, v36);
    if (ot::Coap::Message::IsConfirmable(v42))
    {
      uint64_t v14 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
      ot::Coap::CoapBase::SendEmptyAck(v14, v42, v41);
      IgnoreError();
    }

    if (ot::Tlv::FindTlv<ot::NetworkDiagnostic::GroupAbcTriggerTlv>(v42, v46, v11, v12, v13))
    {
      unsigned int v29 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
      char v39 = ot::Coap::CoapBase::NewConfirmablePostMessage(v29, 0x20u);
      if (v39)
      {
        int appended = ot::NetworkDiagnostic::Server::AppendRequestedTlvs(a1, v42, v39, v30, v31);
        if (!appended)
        {
          ot::Ip6::MessageInfo::GetPeerAddr(v41);
          ot::NetworkDiagnostic::Server::PrepareMessageInfoForDest(a1, v32, v38);
          char v33 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
          int appended = ot::Coap::CoapBase::SendMessage(v33, v39, (const ot::Ip6::MessageInfo *)v38);
        }
      }

      else
      {
        int appended = 3;
      }
    }

    else
    {
      ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"NetDiag",  "Received GROUP_ABC_TRIGGER",  v15,  v16,  v17,  v18,  v19,  v20,  v34);
      if (ot::NetworkDiagnostic::GroupAbcTriggerTlv::IsValid((ot::NetworkDiagnostic::GroupAbcTriggerTlv *)v46))
      {
        ot::NetworkDiagnostic::ParseGroupAbcTrigger((ot::NetworkDiagnostic::GroupAbcTriggerTlv *)v46, (uint64_t)v44);
        char v21 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(a1);
        __int16 Rloc16 = ot::Mle::Mle::GetRloc16(v21);
        if (v45 == Rloc16) {
          ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"NetDiag",  "Not raising GROUP_ABC_TRIGGER for the source device",  v23,  v24,  v25,  v26,  v27,  v28,  v35);
        }
        else {
          raise_trigerred_group_ABC(v44);
        }
      }
    }
  }

  else
  {
    int appended = 2;
  }

  if (appended)
  {
    if (v39) {
      ot::Message::Free(v39);
    }
  }

uint64_t ot::Tlv::FindTlv<ot::NetworkDiagnostic::GroupAbcTriggerTlv>( ot::Tlv *a1, void *a2, uint64_t a3, uint64_t a4, ot::Tlv *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)0x65, 0x30u, a2, a5);
}

{
  return __ZN2ot3Tlv7FindTlvINS_17NetworkDiagnostic18GroupAbcTriggerTlvEEE7otErrorRKNS_7MessageERT_(a1, a2, a3, a4, a5);
}

BOOL ot::NetworkDiagnostic::GroupAbcTriggerTlv::IsValid(ot::NetworkDiagnostic::GroupAbcTriggerTlv *this)
{
  return ot::Tlv::GetLength(this) >= 0x2EuLL;
}

{
  return __ZNK2ot17NetworkDiagnostic18GroupAbcTriggerTlv7IsValidEv(this);
}

uint64_t ot::NetworkDiagnostic::ParseGroupAbcTrigger( ot::NetworkDiagnostic::GroupAbcTriggerTlv *a1, uint64_t a2)
{
  *(_BYTE *)a2  = ot::NetworkDiagnostic::GroupAbcTriggerTlv::GetCaseType(a1);
  *(_BYTE *)(a2 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = ot::NetworkDiagnostic::GroupAbcTriggerTlv::GetCaseSubType(a1);
  *(_BYTE *)(a2 + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = ot::NetworkDiagnostic::GroupAbcTriggerTlv::GetCaseSubTypeContext(a1);
  *(_WORD *)(a2 + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = ot::NetworkDiagnostic::GroupAbcTriggerTlv::GetSrcRloc16(a1);
  uint64_t result = ot::NetworkDiagnostic::GroupAbcTriggerTlv::GetGroupIdLen(a1);
  *(_BYTE *)(a2 + 6)  = result;
  if (*(unsigned __int8 *)(a2 + 6) < 0x28u)
  {
    for (int i = 0; i < *(unsigned __int8 *)(a2 + 6); ++i)
    {
      uint64_t result = ot::NetworkDiagnostic::GroupAbcTriggerTlv::GetGroupId(a1, i);
      *(_BYTE *)(a2 + 7 + i)  = result;
    }

    *(_BYTE *)(a2 + 7 + *(unsigned __int8 *)(a2 + 6))  = 0;
  }

  return result;
}

void ot::NetworkDiagnostic::Server::HandleTmf<(ot::Uri)33>( ot::InstanceLocator *a1, const ot::Coap::Message *a2, ot::Ip6::MessageInfo *a3)
{
  uint64_t v16 = 0LL;
  if (ot::Coap::Message::IsConfirmablePostRequest(a2))
  {
    char v14 = ot::UriToString<(ot::Uri)33>();
    ot::Ip6::MessageInfo::GetPeerAddr(a3);
    ot::Ip6::Address::ToString(v3, (ot::StringWriter *)v20);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v20);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"NetDiag", "Received %s from %s", v4, v5, v6, v7, v8, v9, v14);
    uint64_t v10 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
    uint64_t v16 = ot::Coap::CoapBase::NewResponseMessage(v10, a2);
    if (v16)
    {
      int appended = ot::NetworkDiagnostic::Server::AppendRequestedTlvs(a1, a2, v16, v11, v12);
      if (!appended)
      {
        unsigned int v13 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
        int appended = ot::Coap::CoapBase::SendMessage(v13, v16, a3);
      }
    }

    else
    {
      int appended = 3;
    }
  }

  else
  {
    int appended = 2;
  }

  if (appended)
  {
    if (v16) {
      ot::Message::Free(v16);
    }
  }

void ot::NetworkDiagnostic::Server::HandleTmf<(ot::Uri)35>( ot::InstanceLocator *a1, ot::Message *a2, ot::Ip6::MessageInfo *a3)
{
  char v21 = a1;
  uint64_t v20 = a2;
  uint64_t v19 = a3;
  __int16 v18 = 0;
  if (ot::Coap::Message::IsConfirmablePostRequest(a2))
  {
    char v13 = ot::UriToString<(ot::Uri)35>();
    ot::Ip6::MessageInfo::GetPeerAddr(v19);
    ot::Ip6::Address::ToString(v3, (ot::StringWriter *)v22);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v22);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"NetDiag", "Received %s from %s", v4, v5, v6, v7, v8, v9, v13);
    unsigned __int16 Offset = ot::Message::GetOffset(v20);
    if (!ot::Message::Read<ot::NetworkDiagnostic::Tlv>(v20, Offset, v16)
      && ot::NetworkDiagnostic::Tlv::GetType((ot::NetworkDiagnostic::Tlv *)v16) == 18)
    {
      __int16 v18 = ot::Message::GetOffset(v20) + 2;
      for (unsigned __int8 i = 0; i < (int)ot::Tlv::GetLength((ot::Tlv *)v16); ++i)
      {
        if (v17 == 9)
        {
          uint64_t v11 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
          ot::Mac::Mac::ResetCounters(v11);
        }
      }

      uint64_t v12 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
      ot::Coap::CoapBase::SendEmptyAck(v12, v20, v19);
      IgnoreError();
    }
  }

uint64_t ot::Message::Read<ot::NetworkDiagnostic::Tlv>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 2u);
}

{
  return __ZNK2ot7Message4ReadINS_17NetworkDiagnostic3TlvEEE7otErrortRT_(a1, a2, a3);
}

uint64_t ot::NetworkDiagnostic::Tlv::GetType(ot::NetworkDiagnostic::Tlv *this)
{
  return ot::Tlv::GetType(this);
}

{
  return __ZNK2ot17NetworkDiagnostic3Tlv7GetTypeEv(this);
}

ot::NetworkDiagnostic::Client *ot::NetworkDiagnostic::Client::Client( ot::NetworkDiagnostic::Client *this, ot::Instance *a2)
{
  return this;
}

{
  ot::NetworkDiagnostic::Client::Client(this, a2);
  return this;
}

uint64_t ot::NetworkDiagnostic::Client::SendDiagnosticGet( ot::InstanceLocator *a1, ot::Ip6::Address *a2, _BYTE *a3, unsigned __int8 a4, uint64_t a5, uint64_t a6)
{
  if (ot::Ip6::Address::IsMulticast(a2)) {
    unsigned int v8 = ot::NetworkDiagnostic::Client::SendCommand(a1, 0x22u, a2, a3, a4, 0LL, 0LL);
  }
  else {
    unsigned int v8 = ot::NetworkDiagnostic::Client::SendCommand( a1,  0x21u,  a2,  a3,  a4,  (uint64_t)ot::NetworkDiagnostic::Client::HandleGetResponse,  (uint64_t)a1);
  }
  if (!v8) {
    ot::CallbackBase<void (*)(otError,otMessage *,otMessageInfo const*,void *)>::Set(a1, a5, a6);
  }
  return v8;
}

uint64_t ot::NetworkDiagnostic::Client::SendCommand( ot::InstanceLocator *a1, unsigned __int8 a2, ot::Ip6::Address *a3, _BYTE *a4, unsigned __int8 a5, uint64_t a6, uint64_t a7)
{
  unsigned __int16 v38 = a1;
  unsigned __int8 v37 = a2;
  char v36 = a3;
  char v35 = a4;
  unsigned __int8 v34 = a5;
  uint64_t v33 = a6;
  uint64_t v32 = a7;
  uint64_t v30 = 0LL;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(a1);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v29, Instance);
  if (v37 != 33)
  {
    if (v37 == 34)
    {
      unsigned int v8 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
      uint64_t v30 = ot::Coap::CoapBase::NewNonConfirmablePostMessage(v8, v37);
      goto LABEL_7;
    }

    if (v37 != 35) {
      __assert_rtn("SendCommand", "network_diagnostic.cpp", 711, "false");
    }
  }

  uint64_t v10 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
  uint64_t v30 = ot::Coap::CoapBase::NewConfirmablePostMessage(v10, v37);
LABEL_7:
  if (v30)
  {
    if (v34 == 1 && *v35 == 101)
    {
      unsigned int appended = ot::NetworkDiagnostic::AppendGroupAbcTrigger(v30, v9);
      unsigned __int8 v34 = 0;
      ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"NetDiag",  "Client::SendCommand GROUP_ABC_TRIGGER",  v11,  v12,  v13,  v14,  v15,  v16,  v26);
    }

    if (!v34 || (unsigned int appended = ot::Tlv::Append<ot::NetworkDiagnostic::TypeListTlv>(v30, v35, v34)) == 0)
    {
      char v17 = (ot::NetworkDiagnostic::Server *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkDiagnostic::Server>(a1);
      ot::NetworkDiagnostic::Server::PrepareMessageInfoForDest(v17, v36, v29);
      __int16 v18 = (ot::Coap::TxParameters *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
      unsigned int appended = ot::Coap::CoapBase::SendMessage(v18, v30, (ot::Ip6::MessageInfo *)v29, v33, v32);
      if (!appended)
      {
        char v27 = ot::NetworkDiagnostic::Client::UriToString(v37);
        ot::Ip6::Address::ToString(v36, (ot::StringWriter *)v39);
        ot::String<(unsigned short)40>::AsCString((uint64_t)v39);
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"NetDiag", "Sent %s to %s", v19, v20, v21, v22, v23, v24, v27);
      }
    }
  }

  else
  {
    unsigned int appended = 3;
  }

  if (appended && v30) {
    ot::Message::Free(v30);
  }
  return appended;
}

void *ot::NetworkDiagnostic::Client::HandleGetResponse( ot::Coap::Message *a1, uint64_t a2, uint64_t a3, BOOL a4)
{
  uint64_t v7 = v4;
  ot::AsCoreTypePtr<otMessageInfo>();
  return ot::NetworkDiagnostic::Client::HandleGetResponse(a1, v7, v5, a4);
}

void *ot::CallbackBase<void (*)(otError,otMessage *,otMessageInfo const*,void *)>::Set( void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1]  = a3;
  return result;
}

{
  return __ZN2ot12CallbackBaseIPFv7otErrorP9otMessagePK13otMessageInfoPvEE3SetES9_S7_(result, a2, a3);
}

uint64_t ot::NetworkDiagnostic::AppendGroupAbcTrigger(ot::NetworkDiagnostic *this, ot::Message *a2)
{
  int v4 = 40;
  for (int i = 0; i < v4; ++i)
    ot::NetworkDiagnostic::GroupAbcTriggerTlv::SetGroupId((uint64_t)__b, i, byte_10047731F[i]);
  return ot::Tlv::AppendTo((ot::Tlv *)__b, this);
}

uint64_t ot::NetworkDiagnostic::GroupAbcTriggerTlv::Init(ot::NetworkDiagnostic::GroupAbcTriggerTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 46);
}

{
  return __ZN2ot17NetworkDiagnostic18GroupAbcTriggerTlv4InitEv(this);
}

uint64_t ot::NetworkDiagnostic::GroupAbcTriggerTlv::SetCaseType(uint64_t this, char a2)
{
  *(_BYTE *)(this + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = a2;
  return this;
}

{
  return __ZN2ot17NetworkDiagnostic18GroupAbcTriggerTlv11SetCaseTypeEh(this, a2);
}

uint64_t ot::NetworkDiagnostic::GroupAbcTriggerTlv::SetCaseSubType(uint64_t this, char a2)
{
  *(_BYTE *)(this + ot::NetworkData::NetworkDataTlv::SetType(this, 3) = a2;
  return this;
}

{
  return __ZN2ot17NetworkDiagnostic18GroupAbcTriggerTlv14SetCaseSubTypeEh(this, a2);
}

uint64_t ot::NetworkDiagnostic::GroupAbcTriggerTlv::SetCaseSubTypeContext(uint64_t this, char a2)
{
  *(_BYTE *)(this + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a2;
  return this;
}

{
  return __ZN2ot17NetworkDiagnostic18GroupAbcTriggerTlv21SetCaseSubTypeContextEh(this, a2);
}

uint64_t ot::NetworkDiagnostic::GroupAbcTriggerTlv::SetSrcRloc16( ot::NetworkDiagnostic::GroupAbcTriggerTlv *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *(_WORD *)((char *)this + 5)  = result;
  return result;
}

{
  return __ZN2ot17NetworkDiagnostic18GroupAbcTriggerTlv12SetSrcRloc16Et(this, a2);
}

uint64_t ot::NetworkDiagnostic::GroupAbcTriggerTlv::SetGroupIdLen(uint64_t this, char a2)
{
  *(_BYTE *)(this + ot::ThreadTlv::SetType(this, 7) = a2;
  return this;
}

{
  return __ZN2ot17NetworkDiagnostic18GroupAbcTriggerTlv13SetGroupIdLenEh(this, a2);
}

uint64_t ot::NetworkDiagnostic::GroupAbcTriggerTlv::SetGroupId(uint64_t this, int a2, char a3)
{
  *(_BYTE *)(this + 8 + aot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = a3;
  return this;
}

{
  return __ZN2ot17NetworkDiagnostic18GroupAbcTriggerTlv10SetGroupIdEih(this, a2, a3);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkDiagnostic::Server>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::NetworkDiagnostic::Server>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_17NetworkDiagnostic6ServerEEERT_v(a1);
}

const char *ot::NetworkDiagnostic::Client::UriToString(char a1)
{
  char v2 = "";
  switch(a1)
  {
    case '!':
      return ot::UriToString<(ot::Uri)33>();
    case '""':
      return ot::UriToString<(ot::Uri)34>();
    case '#':
      return ot::UriToString<(ot::Uri)35>();
  }

  return v2;
}

void *ot::NetworkDiagnostic::Client::HandleGetResponse( ot::Coap::Message *a1, ot::Coap::Message *a2, uint64_t a3, BOOL a4)
{
  v8[1]  = a1;
  v8[0]  = a2;
  uint64_t v7 = a3;
  BOOL v6 = a4;
  if (!a4) {
    BOOL v6 = ot::Coap::Message::GetCode(v8[0]) != 68;
  }
  return ot::Callback<void (*)(otError,otMessage *,otMessageInfo const*,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<otError&,ot::Coap::Message *&,ot::Ip6::MessageInfo const*&>( a1,  (unsigned int *)&v6,  v8,  &v7);
}

void *ot::Callback<void (*)(otError,otMessage *,otMessageInfo const*,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<otError&,ot::Coap::Message *&,ot::Ip6::MessageInfo const*&>( void *result, unsigned int *a2, void *a3, void *a4)
{
  if (*result) {
    return (void *)ot::Callback<void (*)(otError,otMessage *,otMessageInfo const*,void *),(ot::CallbackContextPosition)1>::Invoke<otError&,ot::Coap::Message *&,ot::Ip6::MessageInfo const*&>( (uint64_t)result,  a2,  a3,  a4);
  }
  return result;
}

{
  return __ZNK2ot8CallbackIPFv7otErrorP9otMessagePK13otMessageInfoPvELNS_23CallbackContextPositionE1EE11InvokeIfSetIJRS1_RPNS_4Coap7MessageERPKNS_3Ip611MessageInfoEEEEvDpOT_( result,  a2,  a3,  a4);
}

void ot::NetworkDiagnostic::Client::HandleTmf<(ot::Uri)32>( ot::InstanceLocator *a1, ot::Coap::Message *a2, ot::Ip6::MessageInfo *a3)
{
  char v17 = a1;
  uint64_t v16 = a2;
  uint64_t v15 = a3;
  if (ot::Coap::Message::IsConfirmablePostRequest(a2))
  {
    char v11 = ot::UriToString<(ot::Uri)32>();
    ot::Ip6::MessageInfo::GetPeerAddr(v15);
    ot::Ip6::Address::ToString(v3, (ot::StringWriter *)v18);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v18);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"NetDiag", "Received %s from %s", v4, v5, v6, v7, v8, v9, v11);
    uint64_t v14 = v16;
    uint64_t v13 = v15;
    ot::Callback<void (*)(otError,otMessage *,otMessageInfo const*,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<otError const&,ot::Coap::Message *,ot::Ip6::MessageInfo const*>( a1,  &ot::kErrorNone,  &v14,  &v13);
    uint64_t v10 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
    ot::Coap::CoapBase::SendEmptyAck(v10, v16, v15);
    IgnoreError();
  }

void *ot::Callback<void (*)(otError,otMessage *,otMessageInfo const*,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<otError const&,ot::Coap::Message *,ot::Ip6::MessageInfo const*>( void *result, unsigned int *a2, void *a3, void *a4)
{
  if (*result) {
    return (void *)ot::Callback<void (*)(otError,otMessage *,otMessageInfo const*,void *),(ot::CallbackContextPosition)1>::Invoke<otError const&,ot::Coap::Message *,ot::Ip6::MessageInfo const*>( (uint64_t)result,  a2,  a3,  a4);
  }
  return result;
}

{
  return __ZNK2ot8CallbackIPFv7otErrorP9otMessagePK13otMessageInfoPvELNS_23CallbackContextPositionE1EE11InvokeIfSetIJRKS1_PNS_4Coap7MessageEPKNS_3Ip611MessageInfoEEEEvDpOT_( result,  a2,  a3,  a4);
}

uint64_t ot::NetworkDiagnostic::Client::SendDiagnosticReset( ot::NetworkDiagnostic::Client *this, const ot::Ip6::Address *a2, unsigned __int8 *a3, unsigned __int8 a4)
{
  return ot::NetworkDiagnostic::Client::SendCommand(this, 0x23u, a2, a3, a4, 0LL, 0LL);
}

uint64_t ot::NetworkDiagnostic::Client::GetNextDiagTlv(ot::Message *a1, unsigned __int16 *a2, _BYTE *a3)
{
  __int16 v18 = a1;
  char v17 = a2;
  uint64_t v16 = a3;
  if (*a2) {
    unsigned __int16 Offset = *v17;
  }
  else {
    unsigned __int16 Offset = ot::Message::GetOffset(v18);
  }
  unsigned __int16 v14 = Offset;
  while (1)
  {
    int v8 = v14;
    char v13 = 0;
    unsigned int v15 = ot::Message::Read<ot::NetworkDiagnostic::Tlv>(v18, v14, v10);
    if (v15) {
      return v15;
    }
    if (ot::Tlv::IsExtended((ot::Tlv *)v10))
    {
      unsigned int v15 = ot::Message::Read<ot::ExtendedTlv>(v18, v14, v10);
      if (v15) {
        return v15;
      }
      __int16 v12 = v14 + 4;
      __int16 Length = ot::ExtendedTlv::GetLength((ot::ExtendedTlv *)v10);
    }

    else
    {
      __int16 v12 = v14 + 2;
      LOBYTE(Length)  = ot::Tlv::GetLength((ot::Tlv *)v10);
      __int16 Length = Length;
    }

    int v6 = v14;
    unsigned int v7 = v6 + ot::Tlv::GetSize((ot::Tlv *)v10);
    unint64_t Type = ot::NetworkDiagnostic::Tlv::GetType((ot::NetworkDiagnostic::Tlv *)v10);
    if (Type <= 0x64) {
      __asm { BR              X8 }
    }

    char v13 = 1;
    __int16 Size = ot::Tlv::GetSize((ot::Tlv *)v10);
    v14 += Size;
    if ((v13 & 1) == 0)
    {
      _BYTE *v16 = ot::NetworkDiagnostic::Tlv::GetType((ot::NetworkDiagnostic::Tlv *)v10);
      unsigned __int16 *v17 = v14;
      return 0;
    }
  }

  return 23;
}

uint64_t ot::Tlv::Read<ot::SimpleTlvInfo<(unsigned char)0,ot::Mac::ExtAddress>>( ot::Tlv *a1, unsigned __int16 a2, uint64_t a3)
{
  return ot::Tlv::ReadTlvValue(a1, (const ot::Message *)a2, a3, (void *)8);
}

{
  return __ZN2ot3Tlv4ReadINS_13SimpleTlvInfoILh0ENS_3Mac10ExtAddressEEEEE7otErrorRKNS_7MessageEtRNT_9ValueTypeE( a1,  a2,  a3);
}

uint64_t ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)1,unsigned short>>( ot::Tlv *a1, unsigned __int16 a2, unsigned __int16 *a3)
{
  return ot::Tlv::ReadUintTlv<unsigned short>(a1, a2, a3);
}

{
  return __ZN2ot3Tlv4ReadINS_11UintTlvInfoILh1EtEEEE7otErrorRKNS_7MessageEtRNT_13UintValueTypeE(a1, a2, a3);
}

uint64_t ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)2,unsigned char>>( ot::Tlv *a1, unsigned __int16 a2, _BYTE *a3)
{
  return ot::Tlv::ReadUintTlv<unsigned char>(a1, a2, a3);
}

{
  return __ZN2ot3Tlv4ReadINS_11UintTlvInfoILh2EhEEEE7otErrorRKNS_7MessageEtRNT_13UintValueTypeE(a1, a2, a3);
}

uint64_t ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)3,unsigned int>>( ot::Tlv *a1, unsigned __int16 a2, unsigned int *a3)
{
  return ot::Tlv::ReadUintTlv<unsigned int>(a1, a2, a3);
}

{
  return __ZN2ot3Tlv4ReadINS_11UintTlvInfoILh3EjEEEE7otErrorRKNS_7MessageEtRNT_13UintValueTypeE(a1, a2, a3);
}

uint64_t ot::Message::Read<ot::NetworkDiagnostic::ConnectivityTlv>( ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0xCu);
}

{
  return __ZNK2ot7Message4ReadINS_17NetworkDiagnostic15ConnectivityTlvEEE7otErrortRT_(a1, a2, a3);
}

BOOL ot::Mle::ConnectivityTlv::IsValid(ot::Mle::ConnectivityTlv *this)
{
  BOOL v3 = 1;
  if (!ot::Mle::ConnectivityTlv::IsSedBufferingIncluded(this)) {
    return ot::Tlv::GetLength(this) == 7LL;
  }
  return v3;
}

{
  return __ZNK2ot3Mle15ConnectivityTlv7IsValidEv(this);
}

uint64_t ot::NetworkDiagnostic::ConnectivityTlv::GetConnectivity(ot::Mle::ConnectivityTlv *a1, uint64_t a2)
{
  *(_BYTE *)a2  = ot::Mle::ConnectivityTlv::GetParentPriority(a1);
  *(_BYTE *)(a2 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = ot::Mle::ConnectivityTlv::GetLinkQuality3(a1);
  *(_BYTE *)(a2 + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = ot::Mle::ConnectivityTlv::GetLinkQuality2(a1);
  *(_BYTE *)(a2 + ot::NetworkData::NetworkDataTlv::SetType(this, 3) = ot::Mle::ConnectivityTlv::GetLinkQuality1(a1);
  *(_BYTE *)(a2 + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = ot::Mle::ConnectivityTlv::GetLeaderCost(a1);
  *(_BYTE *)(a2 + 5)  = ot::Mle::ConnectivityTlv::GetIdSequence(a1);
  *(_BYTE *)(a2 + 6)  = ot::Mle::ConnectivityTlv::GetActiveRouters(a1);
  *(_WORD *)(a2 + 8)  = ot::Mle::ConnectivityTlv::GetSedBufferSize(a1);
  uint64_t result = ot::Mle::ConnectivityTlv::GetSedDatagramCount(a1);
  *(_BYTE *)(a2 + 1ot::NetworkData::NetworkDataTlv::SetType(this, 0) = result;
  return result;
}

{
  return __ZNK2ot17NetworkDiagnostic15ConnectivityTlv15GetConnectivityER25otNetworkDiagConnectivity(a1, a2);
}

uint64_t ot::NetworkDiagnostic::ParseRoute(ot::Mle::RouteTlv *a1, _BYTE *a2)
{
  unsigned __int8 v4 = 0;
  for (unsigned __int8 i = 0; i <= 0x3Eu; ++i)
  {
    if (ot::Mle::RouteTlv::IsRouterIdSet(a1, i))
    {
      a2[2 * v4 + 2]  = i;
      a2[2 * v4 + 3]  = a2[2 * v4 + 3] & 0xF | (16 * (ot::Mle::RouteTlv::GetRouteCost(a1, v4) & 0xF));
      a2[2 * v4 + 3]  = a2[2 * v4 + 3] & 0xF3 | (4 * (ot::Mle::RouteTlv::GetLinkQualityIn(a1, v4) & 3));
      a2[2 * v4 + 3]  = a2[2 * v4 + 3] & 0xFC | ot::Mle::RouteTlv::GetLinkQualityOut(a1, v4) & 3;
      ++v4;
    }
  }

  a2[1]  = v4;
  uint64_t result = ot::Mle::RouteTlv::GetRouterIdSequence(a1);
  *a2  = result;
  return result;
}

uint64_t ot::Message::Read<ot::NetworkDiagnostic::LeaderDataTlv>( ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0xAu);
}

{
  return __ZNK2ot7Message4ReadINS_17NetworkDiagnostic13LeaderDataTlvEEE7otErrortRT_(a1, a2, a3);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otLeaderData>( uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

uint64_t ot::GetArrayLength<otIp6Address,(unsigned short)15>()
{
  return 15LL;
}

  ;
}

{
  return __ZN2ot14GetArrayLengthI12otIp6AddressLt15EEEtRAT0__KT_();
}

uint64_t ot::Message::Read<ot::NetworkDiagnostic::MacCountersTlv>( ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0x26u);
}

{
  return __ZNK2ot7Message4ReadINS_17NetworkDiagnostic14MacCountersTlvEEE7otErrortRT_(a1, a2, a3);
}

BOOL ot::NetworkDiagnostic::MacCountersTlv::IsValid(ot::NetworkDiagnostic::MacCountersTlv *this)
{
  return ot::Tlv::GetLength(this) >= 0x24uLL;
}

{
  return __ZNK2ot17NetworkDiagnostic14MacCountersTlv7IsValidEv(this);
}

uint64_t ot::NetworkDiagnostic::ParseMacCounters(ot::NetworkDiagnostic::MacCountersTlv *a1, _DWORD *a2)
{
  *a2  = ot::NetworkDiagnostic::MacCountersTlv::GetIfInUnknownProtos(a1);
  a2[1]  = ot::NetworkDiagnostic::MacCountersTlv::GetIfInErrors(a1);
  a2[2]  = ot::NetworkDiagnostic::MacCountersTlv::GetIfOutErrors(a1);
  a2[3]  = ot::NetworkDiagnostic::MacCountersTlv::GetIfInUcastPkts(a1);
  a2[4]  = ot::NetworkDiagnostic::MacCountersTlv::GetIfInBroadcastPkts(a1);
  a2[5]  = ot::NetworkDiagnostic::MacCountersTlv::GetIfInDiscards(a1);
  a2[6]  = ot::NetworkDiagnostic::MacCountersTlv::GetIfOutUcastPkts(a1);
  a2[7]  = ot::NetworkDiagnostic::MacCountersTlv::GetIfOutBroadcastPkts(a1);
  uint64_t result = ot::NetworkDiagnostic::MacCountersTlv::GetIfOutDiscards(a1);
  a2[8]  = result;
  return result;
}

uint64_t ot::Message::Read<ot::NetworkDiagnostic::NmDeviceDataTlv>( ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0xFu);
}

{
  return __ZNK2ot7Message4ReadINS_17NetworkDiagnostic15NmDeviceDataTlvEEE7otErrortRT_(a1, a2, a3);
}

BOOL ot::NetworkDiagnostic::NmDeviceDataTlv::IsValid(ot::NetworkDiagnostic::NmDeviceDataTlv *this)
{
  return ot::Tlv::GetLength(this) >= 0xDuLL;
}

{
  return __ZNK2ot17NetworkDiagnostic15NmDeviceDataTlv7IsValidEv(this);
}

uint64_t ot::NetworkDiagnostic::ParseNmDeviceData(ot::NetworkDiagnostic::NmDeviceDataTlv *a1, uint64_t a2)
{
  *(_BYTE *)a2  = ot::NetworkDiagnostic::NmDeviceDataTlv::GetStatus(a1);
  *(_BYTE *)(a2 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = ot::NetworkDiagnostic::NmDeviceDataTlv::GetStability(a1);
  *(_BYTE *)(a2 + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = ot::NetworkDiagnostic::NmDeviceDataTlv::GetDataStall(a1);
  *(_BYTE *)(a2 + ot::NetworkData::NetworkDataTlv::SetType(this, 3) = ot::NetworkDiagnostic::NmDeviceDataTlv::GetChildrenInfoSedCount(a1);
  *(_BYTE *)(a2 + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = ot::NetworkDiagnostic::NmDeviceDataTlv::GetChildrenInfoSsedCount(a1);
  *(_BYTE *)(a2 + 5)  = ot::NetworkDiagnostic::NmDeviceDataTlv::GetChildrenInfoFedCount(a1);
  *(_BYTE *)(a2 + 6)  = ot::NetworkDiagnostic::NmDeviceDataTlv::GetChildrenInfoNoTrafficCount(a1);
  *(_BYTE *)(a2 + ot::ThreadTlv::SetType(this, 7) = ot::NetworkDiagnostic::NmDeviceDataTlv::GetChildrenInfoReassemblyTimeoutCount(a1);
  *(_BYTE *)(a2 + 8)  = ot::NetworkDiagnostic::NmDeviceDataTlv::GetTrelInfo(a1);
  *(_BYTE *)(a2 + ot::NetworkDiagnostic::Tlv::SetType(this, 9) = ot::NetworkDiagnostic::NmDeviceDataTlv::GetLinkNumSedQueueSizeHigh(a1);
  *(_BYTE *)(a2 + 1ot::NetworkData::NetworkDataTlv::SetType(this, 0) = ot::NetworkDiagnostic::NmDeviceDataTlv::GetLinkNumSedLastHeardGapHigh(a1);
  uint64_t result = ot::NetworkDiagnostic::NmDeviceDataTlv::GetLinkStatus(a1);
  *(_WORD *)(a2 + 1ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = result;
  return result;
}

uint64_t ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)14,unsigned char>>( ot::Tlv *a1, unsigned __int16 a2, _BYTE *a3)
{
  return ot::Tlv::ReadUintTlv<unsigned char>(a1, a2, a3);
}

{
  return __ZN2ot3Tlv4ReadINS_11UintTlvInfoILh14EhEEEE7otErrorRKNS_7MessageEtRNT_13UintValueTypeE(a1, a2, a3);
}

uint64_t ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)15,unsigned short>>( ot::Tlv *a1, unsigned __int16 a2, unsigned __int16 *a3)
{
  return ot::Tlv::ReadUintTlv<unsigned short>(a1, a2, a3);
}

{
  return __ZN2ot3Tlv4ReadINS_11UintTlvInfoILh15EtEEEE7otErrorRKNS_7MessageEtRNT_13UintValueTypeE(a1, a2, a3);
}

uint64_t ot::GetArrayLength<otNetworkDiagChildEntry,(unsigned short)84>()
{
  return 84LL;
}

{
  return __ZN2ot14GetArrayLengthI23otNetworkDiagChildEntryLt84EEEtRAT0__KT_();
}

uint64_t ot::NetworkDiagnostic::ChildTableEntry::GetTimeout(ot::NetworkDiagnostic::ChildTableEntry *this)
{
  return (int)(ot::NetworkDiagnostic::ChildTableEntry::GetTimeoutChildId(this) & 0xF800) >> 11;
}

{
  return __ZNK2ot17NetworkDiagnostic15ChildTableEntry10GetTimeoutEv(this);
}

uint64_t ot::GetArrayLength<unsigned char,(unsigned short)254>()
{
  return 254LL;
}

{
  return __ZN2ot14GetArrayLengthIhLt254EEEtRAT0__KT_();
}

uint64_t ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)19,unsigned int>>( ot::Tlv *a1, unsigned __int16 a2, unsigned int *a3)
{
  return ot::Tlv::ReadUintTlv<unsigned int>(a1, a2, a3);
}

{
  return __ZN2ot3Tlv4ReadINS_11UintTlvInfoILh19EjEEEE7otErrorRKNS_7MessageEtRNT_13UintValueTypeE(a1, a2, a3);
}

uint64_t ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)24,unsigned short>>( ot::Tlv *a1, unsigned __int16 a2, unsigned __int16 *a3)
{
  return ot::Tlv::ReadUintTlv<unsigned short>(a1, a2, a3);
}

{
  return __ZN2ot3Tlv4ReadINS_11UintTlvInfoILh24EtEEEE7otErrorRKNS_7MessageEtRNT_13UintValueTypeE(a1, a2, a3);
}

uint64_t ot::Tlv::Read<ot::StringTlvInfo<(unsigned char)25,(unsigned char)32>>( ot::Tlv *a1, unsigned __int16 a2, void *a3, uint64_t a4, char *a5)
{
  return ot::Tlv::ReadStringTlv(a1, (const ot::Message *)a2, 0x20u, a3, a5);
}

{
  return __ZN2ot3Tlv4ReadINS_13StringTlvInfoILh25ELh32EEEEE7otErrorRKNS_7MessageEtRNT_10StringTypeE(a1, a2, a3, a4, a5);
}

uint64_t ot::Tlv::Read<ot::StringTlvInfo<(unsigned char)26,(unsigned char)32>>( ot::Tlv *a1, unsigned __int16 a2, void *a3, uint64_t a4, char *a5)
{
  return ot::Tlv::ReadStringTlv(a1, (const ot::Message *)a2, 0x20u, a3, a5);
}

{
  return __ZN2ot3Tlv4ReadINS_13StringTlvInfoILh26ELh32EEEEE7otErrorRKNS_7MessageEtRNT_10StringTypeE(a1, a2, a3, a4, a5);
}

uint64_t ot::Tlv::Read<ot::StringTlvInfo<(unsigned char)27,(unsigned char)16>>( ot::Tlv *a1, unsigned __int16 a2, void *a3, uint64_t a4, char *a5)
{
  return ot::Tlv::ReadStringTlv(a1, (const ot::Message *)a2, 0x10u, a3, a5);
}

{
  return __ZN2ot3Tlv4ReadINS_13StringTlvInfoILh27ELh16EEEEE7otErrorRKNS_7MessageEtRNT_10StringTypeE(a1, a2, a3, a4, a5);
}

uint64_t ot::Tlv::Read<ot::StringTlvInfo<(unsigned char)28,(unsigned char)64>>( ot::Tlv *a1, unsigned __int16 a2, void *a3, uint64_t a4, char *a5)
{
  return ot::Tlv::ReadStringTlv(a1, (const ot::Message *)a2, 0x40u, a3, a5);
}

{
  return __ZN2ot3Tlv4ReadINS_13StringTlvInfoILh28ELh64EEEEE7otErrorRKNS_7MessageEtRNT_10StringTypeE(a1, a2, a3, a4, a5);
}

uint64_t ot::NetworkDiagnostic::ChildTableEntry::SetTimeoutChildId( ot::NetworkDiagnostic::ChildTableEntry *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *(_WORD *)this  = result;
  return result;
}

{
  return __ZN2ot17NetworkDiagnostic15ChildTableEntry17SetTimeoutChildIdEt(this, a2);
}

uint64_t ot::NetworkDiagnostic::GroupAbcTriggerTlv::GetCaseType( ot::NetworkDiagnostic::GroupAbcTriggerTlv *this)
{
  return *((unsigned __int8 *)this + 2);
}

{
  return __ZNK2ot17NetworkDiagnostic18GroupAbcTriggerTlv11GetCaseTypeEv(this);
}

uint64_t ot::NetworkDiagnostic::GroupAbcTriggerTlv::GetCaseSubType( ot::NetworkDiagnostic::GroupAbcTriggerTlv *this)
{
  return *((unsigned __int8 *)this + 3);
}

{
  return __ZNK2ot17NetworkDiagnostic18GroupAbcTriggerTlv14GetCaseSubTypeEv(this);
}

uint64_t ot::NetworkDiagnostic::GroupAbcTriggerTlv::GetCaseSubTypeContext( ot::NetworkDiagnostic::GroupAbcTriggerTlv *this)
{
  return *((unsigned __int8 *)this + 4);
}

{
  return __ZNK2ot17NetworkDiagnostic18GroupAbcTriggerTlv21GetCaseSubTypeContextEv(this);
}

uint64_t ot::NetworkDiagnostic::GroupAbcTriggerTlv::GetSrcRloc16( ot::NetworkDiagnostic::GroupAbcTriggerTlv *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)((char *)this + 5));
}

{
  return __ZNK2ot17NetworkDiagnostic18GroupAbcTriggerTlv12GetSrcRloc16Ev(this);
}

uint64_t ot::NetworkDiagnostic::GroupAbcTriggerTlv::GetGroupIdLen( ot::NetworkDiagnostic::GroupAbcTriggerTlv *this)
{
  return *((unsigned __int8 *)this + 7);
}

{
  return __ZNK2ot17NetworkDiagnostic18GroupAbcTriggerTlv13GetGroupIdLenEv(this);
}

uint64_t ot::NetworkDiagnostic::GroupAbcTriggerTlv::GetGroupId( ot::NetworkDiagnostic::GroupAbcTriggerTlv *this, int a2)
{
  return *((unsigned __int8 *)this + a2 + 8);
}

{
  return __ZNK2ot17NetworkDiagnostic18GroupAbcTriggerTlv10GetGroupIdEi(this, a2);
}

uint64_t ot::Mle::RouteTlv::GetRouteCost(ot::Mle::RouteTlv *this, unsigned __int8 a2)
{
  return *((_BYTE *)this + a2 + 11) & 0xF;
}

{
  return __ZNK2ot3Mle8RouteTlv12GetRouteCostEh(this, a2);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::GetIfInUnknownProtos( ot::NetworkDiagnostic::MacCountersTlv *this)
{
  return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*(unsigned int *)((char *)this + 2));
}

{
  return __ZNK2ot17NetworkDiagnostic14MacCountersTlv20GetIfInUnknownProtosEv(this);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::GetIfInErrors(ot::NetworkDiagnostic::MacCountersTlv *this)
{
  return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*(unsigned int *)((char *)this + 6));
}

{
  return __ZNK2ot17NetworkDiagnostic14MacCountersTlv13GetIfInErrorsEv(this);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::GetIfOutErrors(ot::NetworkDiagnostic::MacCountersTlv *this)
{
  return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*(unsigned int *)((char *)this + 10));
}

{
  return __ZNK2ot17NetworkDiagnostic14MacCountersTlv14GetIfOutErrorsEv(this);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::GetIfInUcastPkts(ot::NetworkDiagnostic::MacCountersTlv *this)
{
  return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*(unsigned int *)((char *)this + 14));
}

{
  return __ZNK2ot17NetworkDiagnostic14MacCountersTlv16GetIfInUcastPktsEv(this);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::GetIfInBroadcastPkts( ot::NetworkDiagnostic::MacCountersTlv *this)
{
  return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*(unsigned int *)((char *)this + 18));
}

{
  return __ZNK2ot17NetworkDiagnostic14MacCountersTlv20GetIfInBroadcastPktsEv(this);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::GetIfInDiscards(ot::NetworkDiagnostic::MacCountersTlv *this)
{
  return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*(unsigned int *)((char *)this + 22));
}

{
  return __ZNK2ot17NetworkDiagnostic14MacCountersTlv15GetIfInDiscardsEv(this);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::GetIfOutUcastPkts( ot::NetworkDiagnostic::MacCountersTlv *this)
{
  return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*(unsigned int *)((char *)this + 26));
}

{
  return __ZNK2ot17NetworkDiagnostic14MacCountersTlv17GetIfOutUcastPktsEv(this);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::GetIfOutBroadcastPkts( ot::NetworkDiagnostic::MacCountersTlv *this)
{
  return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*(unsigned int *)((char *)this + 30));
}

{
  return __ZNK2ot17NetworkDiagnostic14MacCountersTlv21GetIfOutBroadcastPktsEv(this);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::GetIfOutDiscards(ot::NetworkDiagnostic::MacCountersTlv *this)
{
  return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*(unsigned int *)((char *)this + 34));
}

{
  return __ZNK2ot17NetworkDiagnostic14MacCountersTlv16GetIfOutDiscardsEv(this);
}

uint64_t ot::NetworkDiagnostic::NmDeviceDataTlv::GetStatus(ot::NetworkDiagnostic::NmDeviceDataTlv *this)
{
  return *((unsigned __int8 *)this + 2);
}

{
  return __ZNK2ot17NetworkDiagnostic15NmDeviceDataTlv9GetStatusEv(this);
}

uint64_t ot::NetworkDiagnostic::NmDeviceDataTlv::GetStability(ot::NetworkDiagnostic::NmDeviceDataTlv *this)
{
  return *((unsigned __int8 *)this + 3);
}

{
  return __ZNK2ot17NetworkDiagnostic15NmDeviceDataTlv12GetStabilityEv(this);
}

uint64_t ot::NetworkDiagnostic::NmDeviceDataTlv::GetDataStall(ot::NetworkDiagnostic::NmDeviceDataTlv *this)
{
  return *((unsigned __int8 *)this + 4);
}

{
  return __ZNK2ot17NetworkDiagnostic15NmDeviceDataTlv12GetDataStallEv(this);
}

uint64_t ot::NetworkDiagnostic::NmDeviceDataTlv::GetChildrenInfoSedCount( ot::NetworkDiagnostic::NmDeviceDataTlv *this)
{
  return *((unsigned __int8 *)this + 5);
}

{
  return __ZNK2ot17NetworkDiagnostic15NmDeviceDataTlv23GetChildrenInfoSedCountEv(this);
}

uint64_t ot::NetworkDiagnostic::NmDeviceDataTlv::GetChildrenInfoSsedCount( ot::NetworkDiagnostic::NmDeviceDataTlv *this)
{
  return *((unsigned __int8 *)this + 6);
}

{
  return __ZNK2ot17NetworkDiagnostic15NmDeviceDataTlv24GetChildrenInfoSsedCountEv(this);
}

uint64_t ot::NetworkDiagnostic::NmDeviceDataTlv::GetChildrenInfoFedCount( ot::NetworkDiagnostic::NmDeviceDataTlv *this)
{
  return *((unsigned __int8 *)this + 7);
}

{
  return __ZNK2ot17NetworkDiagnostic15NmDeviceDataTlv23GetChildrenInfoFedCountEv(this);
}

uint64_t ot::NetworkDiagnostic::NmDeviceDataTlv::GetChildrenInfoNoTrafficCount( ot::NetworkDiagnostic::NmDeviceDataTlv *this)
{
  return *((unsigned __int8 *)this + 8);
}

{
  return __ZNK2ot17NetworkDiagnostic15NmDeviceDataTlv29GetChildrenInfoNoTrafficCountEv(this);
}

uint64_t ot::NetworkDiagnostic::NmDeviceDataTlv::GetChildrenInfoReassemblyTimeoutCount( ot::NetworkDiagnostic::NmDeviceDataTlv *this)
{
  return *((unsigned __int8 *)this + 9);
}

{
  return __ZNK2ot17NetworkDiagnostic15NmDeviceDataTlv37GetChildrenInfoReassemblyTimeoutCountEv(this);
}

uint64_t ot::NetworkDiagnostic::NmDeviceDataTlv::GetTrelInfo(ot::NetworkDiagnostic::NmDeviceDataTlv *this)
{
  return *((unsigned __int8 *)this + 10);
}

{
  return __ZNK2ot17NetworkDiagnostic15NmDeviceDataTlv11GetTrelInfoEv(this);
}

uint64_t ot::NetworkDiagnostic::NmDeviceDataTlv::GetLinkNumSedQueueSizeHigh( ot::NetworkDiagnostic::NmDeviceDataTlv *this)
{
  return *((unsigned __int8 *)this + 11);
}

{
  return __ZNK2ot17NetworkDiagnostic15NmDeviceDataTlv26GetLinkNumSedQueueSizeHighEv(this);
}

uint64_t ot::NetworkDiagnostic::NmDeviceDataTlv::GetLinkNumSedLastHeardGapHigh( ot::NetworkDiagnostic::NmDeviceDataTlv *this)
{
  return *((unsigned __int8 *)this + 12);
}

{
  return __ZNK2ot17NetworkDiagnostic15NmDeviceDataTlv29GetLinkNumSedLastHeardGapHighEv(this);
}

uint64_t ot::NetworkDiagnostic::NmDeviceDataTlv::GetLinkStatus(ot::NetworkDiagnostic::NmDeviceDataTlv *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)((char *)this + 13));
}

{
  return __ZNK2ot17NetworkDiagnostic15NmDeviceDataTlv13GetLinkStatusEv(this);
}

uint64_t ot::Callback<void (*)(otError,otMessage *,otMessageInfo const*,void *),(ot::CallbackContextPosition)1>::Invoke<otError&,ot::Coap::Message *&,ot::Ip6::MessageInfo const*&>( uint64_t a1, unsigned int *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void, void))a1)(*a2, *a3, *a4, *(void *)(a1 + 8));
}

{
  return __ZNK2ot8CallbackIPFv7otErrorP9otMessagePK13otMessageInfoPvELNS_23CallbackContextPositionE1EE6InvokeIJRS1_RPNS_4Coap7MessageERPKNS_3Ip611MessageInfoEEEEvDpOT_( a1,  a2,  a3,  a4);
}

uint64_t ot::Callback<void (*)(otError,otMessage *,otMessageInfo const*,void *),(ot::CallbackContextPosition)1>::Invoke<otError const&,ot::Coap::Message *,ot::Ip6::MessageInfo const*>( uint64_t a1, unsigned int *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void, void))a1)(*a2, *a3, *a4, *(void *)(a1 + 8));
}

{
  return __ZNK2ot8CallbackIPFv7otErrorP9otMessagePK13otMessageInfoPvELNS_23CallbackContextPositionE1EE6InvokeIJRKS1_PNS_4Coap7MessageEPKNS_3Ip611MessageInfoEEEEvDpOT_( a1,  a2,  a3,  a4);
}

ot::PanIdQueryServer *ot::PanIdQueryServer::PanIdQueryServer(ot::PanIdQueryServer *this, ot::Instance *a2)
{
  *((_DWORD *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  *((_WORD *)this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 0) = -1;
  ot::TimerMilliIn<ot::PanIdQueryServer,&ot::PanIdQueryServer::HandleTimer>::TimerMilliIn( (ot::PanIdQueryServer *)((char *)this + 24),  a2);
  return this;
}

{
  ot::PanIdQueryServer::PanIdQueryServer(this, a2);
  return this;
}

void ot::PanIdQueryServer::HandleTimer(ot::PanIdQueryServer *this)
{
  uint64_t v1 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  ot::Mac::Mac::ActiveScan(v1, *((_DWORD *)this + 4), 0, (uint64_t)ot::PanIdQueryServer::HandleScanResult, (uint64_t)this);
  IgnoreError();
  *((_DWORD *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
}

ot::TimerMilli *ot::TimerMilliIn<ot::PanIdQueryServer,&ot::PanIdQueryServer::HandleTimer>::TimerMilliIn( ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli( a1,  a2,  (void (*)(ot::Timer *))ot::TimerMilliIn<ot::PanIdQueryServer,&ot::PanIdQueryServer::HandleTimer>::HandleTimer);
  return a1;
}

void ot::PanIdQueryServer::HandleTmf<(ot::Uri)26>(uint64_t a1, ot::Tlv *a2, ot::Ip6::MessageInfo *a3)
{
  uint64_t v24 = a1;
  uint64_t v23 = a2;
  uint64_t v22 = a3;
  if (ot::Coap::Message::IsPostRequest(a2))
  {
    ChannelMask  = ot::MeshCoP::ChannelMaskTlv::GetChannelMask(v23, v3, v4, v5, v6);
    if (ChannelMask)
    {
      if (!ot::Tlv::Find<ot::MeshCoP::PanIdTlv>(v23, &v21, v7, v8))
      {
        *(_DWORD *)(a1 + 16)  = ChannelMask;
        ot::Ip6::MessageInfo::GetPeerAddr(v22);
        *(_OWORD *)a1  = *v9;
        *(_WORD *)(a1 + ot::Mle::Tlv::SetType(this, 20) = v21;
        ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 24), 0x3E8u);
        if (ot::Coap::Message::IsConfirmable(v23))
        {
          ot::Ip6::MessageInfo::GetSockAddr(v22);
          if (!ot::Ip6::Address::IsMulticast(v10))
          {
            char v11 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>((ot::InstanceLocator *)a1);
            if (!ot::Coap::CoapBase::SendEmptyAck(v11, v23, v22))
            {
              char v12 = ot::UriToString<(ot::Uri)26>();
              ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"MeshCoP", "Sent %s ack", v13, v14, v15, v16, v17, v18, v12);
            }
          }
        }
      }
    }
  }

void ot::PanIdQueryServer::HandleScanResult(uint64_t a1, uint64_t a2)
{
}

{
  if (a2)
  {
  }

  else if (*(_DWORD *)(a1 + 16))
  {
    ot::PanIdQueryServer::SendConflict((ot::PanIdQueryServer *)a1);
  }

void ot::PanIdQueryServer::SendConflict(ot::PanIdQueryServer *this)
{
  uint64_t v16 = this;
  int v15 = 0;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v13, Instance);
  char v2 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  char v12 = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v2, 0x18u);
  if (v12)
  {
    ot::MeshCoP::ChannelMaskTlv::Init((ot::MeshCoP::ChannelMaskTlv *)v14);
    ot::MeshCoP::ChannelMaskTlv::SetChannelMask((ot::MeshCoP::ChannelMaskTlv *)v14, *((_DWORD *)this + 4));
    int v15 = ot::Tlv::AppendTo((ot::Tlv *)v14, v12);
    if (!v15)
    {
      int v15 = ot::Tlv::Append<ot::MeshCoP::PanIdTlv>((uint64_t)v12, *((_WORD *)this + 10));
      if (!v15)
      {
        ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo((ot::Tmf::MessageInfo *)v13, (__n128 *)this);
        BOOL v3 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
        int v15 = ot::Coap::CoapBase::SendMessage(v3, v12, (const ot::Ip6::MessageInfo *)v13);
        if (!v15)
        {
          char v4 = ot::UriToString<(ot::Uri)24>();
          ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"MeshCoP", "Sent %s", v5, v6, v7, v8, v9, v10, v4);
        }
      }
    }
  }

  else
  {
    int v15 = 3;
  }

  if (v15 && v12) {
    ot::Message::Free(v12);
  }
  ot::MeshCoP::LogError((char)"send panid conflict", v15);
}

uint64_t ot::TimerMilliIn<ot::PanIdQueryServer,&ot::PanIdQueryServer::HandleTimer>::HandleTimer( ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::PanIdQueryServer>(a1);
  return ((uint64_t (*)(uint64_t))ot::PanIdQueryServer::HandleTimer)(v2);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::PanIdQueryServer>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::PanIdQueryServer>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_16PanIdQueryServerEEERT_v(a1);
}

uint64_t ot::Instance::Get<ot::PanIdQueryServer>(uint64_t a1)
{
  return a1 + 164432;
}

{
  return __ZN2ot8Instance3GetINS_16PanIdQueryServerEEERT_v(a1);
}

ot::RadioSelector *ot::RadioSelector::RadioSelector(ot::RadioSelector *this, ot::Instance *a2)
{
  return this;
}

{
  ot::RadioSelector::RadioSelector(this, a2);
  return this;
}

uint64_t ot::RadioSelector::NeighborInfo::PopulateMultiRadioInfo( ot::RadioSelector::NeighborInfo *a1, _BYTE *a2)
{
  uint64_t v8 = a1;
  uint64_t v7 = a2;
  *(_WORD *)a2  = 0;
  a2[2]  = 0;
  SupportedRadioTypes  = ot::RadioSelector::NeighborInfo::GetSupportedRadioTypes(a1);
  if (ot::Mac::RadioTypes::Contains(&SupportedRadioTypes, 0))
  {
    _BYTE *v7 = *v7 & 0xFE | 1;
    Radiochar Preference = ot::RadioSelector::NeighborInfo::GetRadioPreference((uint64_t)a1, 0);
    v7[1]  = RadioPreference;
  }

  char v5 = ot::RadioSelector::NeighborInfo::GetSupportedRadioTypes(a1);
  uint64_t result = ot::Mac::RadioTypes::Contains(&v5, 1);
  if ((result & 1) != 0)
  {
    _BYTE *v7 = *v7 & 0xFD | 2;
    uint64_t result = ot::RadioSelector::NeighborInfo::GetRadioPreference((uint64_t)a1, 1u);
    void v7[2] = result;
  }

  return result;
}

uint64_t ot::RadioSelector::NeighborInfo::GetSupportedRadioTypes(ot::RadioSelector::NeighborInfo *this)
{
  return *(unsigned __int8 *)this;
}

{
  return __ZNK2ot13RadioSelector12NeighborInfo22GetSupportedRadioTypesEv(this);
}

uint64_t ot::RadioSelector::NeighborInfo::GetRadioPreference(uint64_t a1, unsigned __int8 a2)
{
  return *(unsigned __int8 *)(a1 + 1 + a2);
}

{
  return __ZNK2ot13RadioSelector12NeighborInfo18GetRadioPreferenceENS_3Mac9RadioTypeE(a1, a2);
}

uint64_t ot::RadioSelector::NeighborInfo::UpdateMultiRadioPreference(uint64_t a1, unsigned __int8 a2, char a3)
{
  return ot::RadioSelector::NeighborInfo::SetRadioPreference(a1, a2, a3);
}

uint64_t ot::RadioSelector::NeighborInfo::SetRadioPreference(uint64_t result, unsigned __int8 a2, char a3)
{
  *(_BYTE *)(result + 1 + aot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = a3;
  return result;
}

{
  return __ZN2ot13RadioSelector12NeighborInfo18SetRadioPreferenceENS_3Mac9RadioTypeEh(result, a2, a3);
}

uint64_t ot::RadioSelector::UpdatePreference(uint64_t a1, uint64_t a2, unsigned __int8 a3, __int16 a4)
{
  Radiochar Preference = ot::RadioSelector::NeighborInfo::GetRadioPreference(a2, a3);
  __int16 v6 = RadioPreference + a4;
  if (v6 > 255) {
    __int16 v6 = 255;
  }
  if (v6 < 0) {
    __int16 v6 = 0;
  }
  ot::RadioSelector::NeighborInfo::SetRadioPreference(a2, a3, v6);
  if (RadioPreference >= 0xDCu == v6 >= 220) {
    return 5;
  }
  else {
    return 4;
  }
}

void ot::RadioSelector::UpdateOnReceive( uint64_t a1, ot::RadioSelector::NeighborInfo *a2, unsigned __int8 a3, char a4)
{
  uint64_t v12 = a1;
  char v11 = a2;
  unsigned __int8 v10 = a3;
  char v9 = a4 & 1;
  unsigned __int8 v8 = 4;
  SupportedRadioTypes  = ot::RadioSelector::NeighborInfo::GetSupportedRadioTypes(a2);
  if (ot::Mac::RadioTypes::Contains(&SupportedRadioTypes, v10))
  {
    unsigned __int8 updated = ot::RadioSelector::UpdatePreference(a1, (uint64_t)v11, v10, 15);
    unsigned __int8 v8 = updated;
    if ((v9 & 1) != 0) {
      char v5 = "UpdateOnDupRx";
    }
    else {
      char v5 = "UpdateOnRx";
    }
    ot::RadioSelector::Log(a1, updated, (uint64_t)v5, v10, v11);
  }

  else
  {
    ot::RadioSelector::NeighborInfo::AddSupportedRadioType(v11, v10);
    ot::RadioSelector::NeighborInfo::SetRadioPreference((uint64_t)v11, v10, 200);
    ot::RadioSelector::Log(a1, v8, (uint64_t)"NewRadio(OnRx)", v10, v11);
  }

  if (v10 == 1) {
    ++*((_DWORD *)v11 + 3);
  }
}

void ot::RadioSelector::Log( uint64_t a1, unsigned __int8 a2, uint64_t a3, char a4, ot::RadioSelector::NeighborInfo *a5)
{
  uint64_t v38 = a1;
  unsigned __int8 v37 = a2;
  uint64_t v36 = a3;
  char v35 = a4;
  unsigned __int8 v34 = a5;
  char v5 = (ot::Instance *)ot::String<(unsigned short)75>::String((uint64_t)v40);
  char v33 = 1;
  if (v37 <= (int)ot::Instance::GetLogLevel(v5))
  {
    uint64_t v32 = &ot::RadioSelector::sRadioSelectionOrder;
    char v31 = (unsigned __int8 *)&ot::RadioSelector::sRadioSelectionOrder;
    uint64_t v30 = &ot::RadioSelector::SelectPollFrameRadio(ot::Neighbor const&)::selectionOrder;
    while (v31 != (unsigned __int8 *)v30)
    {
      unsigned __int8 v29 = *v31;
      SupportedRadioTypes  = ot::RadioSelector::NeighborInfo::GetSupportedRadioTypes(v34);
      if (ot::Mac::RadioTypes::Contains(&SupportedRadioTypes, v29))
      {
        __int16 v6 = "";
        if ((v33 & 1) == 0) {
          __int16 v6 = " ";
        }
        char v26 = v6;
        char v27 = ot::Mac::RadioTypeToString(v29);
        Radiochar Preference = ot::RadioSelector::NeighborInfo::GetRadioPreference((uint64_t)v34, v29);
        ot::StringWriter::Append((ot::StringWriter *)v40, "%s%s:%d", v26, v27, RadioPreference);
        char v33 = 0;
      }

      ++v31;
    }

    int v24 = v37;
    uint64_t v19 = v36;
    uint64_t v20 = ot::Mac::RadioTypeToString(v35);
    uint64_t ExtAddress = (ot::Mac::ExtAddress *)ot::Neighbor::GetExtAddress(v34);
    _BYTE v18[8] = v39;
    ot::Mac::ExtAddress::ToString(ExtAddress, (ot::StringWriter *)v39);
    uint64_t v21 = ot::String<(unsigned short)17>::AsCString((uint64_t)v39);
    int Rloc16 = ot::Neighbor::GetRloc16(v34);
    uint64_t v23 = ot::String<(unsigned short)75>::AsCString((uint64_t)v40);
    unsigned __int8 State = ot::Neighbor::GetState(v34);
    unsigned __int8 v10 = ot::Neighbor::StateToString(State);
    uint64_t v11 = *((unsigned int *)v34 + 8);
    uint64_t v12 = *((unsigned int *)v34 + 9);
    uint64_t v25 = v18;
    v18[1]  = v20;
    v18[2]  = v21;
    v18[3]  = (unsigned __int16)Rloc16;
    v18[4]  = v23;
    _BYTE v18[5] = v10;
    v18[6]  = v11;
    v18[7]  = v12;
    ot::Logger::LogInModule( (ot *)"RadioSelector",  v24,  "RadioSelector: %s %s - neighbor:[%s rloc16:0x%04x radio-pref:{%s} state:%s tx_probes_sent:%u dns_resolve_reqs_sent:%u]",  v13,  v14,  v15,  v16,  v17,  v19);
  }

uint64_t ot::RadioSelector::NeighborInfo::AddSupportedRadioType(_BYTE *a1, char a2)
{
  return ot::Mac::RadioTypes::Add(a1, a2);
}

{
  return __ZN2ot13RadioSelector12NeighborInfo21AddSupportedRadioTypeENS_3Mac9RadioTypeE(a1, a2);
}

void ot::RadioSelector::UpdateOnSendDone(ot::InstanceLocator *a1, ot::Mac::Frame *a2, int a3)
{
  uint64_t v15 = a1;
  uint64_t v14 = a2;
  int v13 = a3;
  unsigned __int8 v12 = 4;
  unsigned __int8 RadioType = ot::Mac::Frame::GetRadioType(a2);
  ot::Mac::Address::Address((ot::Mac::Address *)v10);
  if ((RadioType != 1 || v13) && ot::Mac::Frame::GetAckRequest(v14))
  {
    ot::Mac::Frame::GetDstAddr(v14, (ot::Mac::Address *)v10);
    IgnoreError();
    BOOL v3 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(a1);
    Neighbor  = (ot::RadioSelector::NeighborInfo *)ot::NeighborTable::FindNeighbor(v3, (ot::Mac::Address *)v10, 5);
    if (Neighbor)
    {
      SupportedRadioTypes  = ot::RadioSelector::NeighborInfo::GetSupportedRadioTypes(Neighbor);
      if (ot::Mac::RadioTypes::Contains(&SupportedRadioTypes, RadioType))
      {
        if (v13) {
          __int16 v4 = -35;
        }
        else {
          __int16 v4 = 25;
        }
        unsigned __int8 updated = ot::RadioSelector::UpdatePreference((uint64_t)a1, (uint64_t)Neighbor, RadioType, v4);
        unsigned __int8 v12 = updated;
        if (v13) {
          __int16 v6 = "UpdateOnTxErr";
        }
        else {
          __int16 v6 = "UpdateOnTxSucc";
        }
        ot::RadioSelector::Log((uint64_t)a1, updated, (uint64_t)v6, RadioType, Neighbor);
      }

      else if (!v13)
      {
        ot::RadioSelector::NeighborInfo::AddSupportedRadioType(Neighbor, RadioType);
        ot::RadioSelector::NeighborInfo::SetRadioPreference((uint64_t)Neighbor, RadioType, 200);
        ot::RadioSelector::Log((uint64_t)a1, v12, (uint64_t)"NewRadio(OnTx)", RadioType, Neighbor);
      }
    }
  }

void ot::RadioSelector::UpdateOnDeferredAck( uint64_t a1, ot::RadioSelector::NeighborInfo *a2, int a3, _BYTE *a4)
{
  uint64_t v17 = a1;
  uint64_t v16 = a2;
  int v15 = a3;
  uint64_t v14 = a4;
  unsigned __int8 updated = 4;
  *a4  = 1;
  SupportedRadioTypes  = ot::RadioSelector::NeighborInfo::GetSupportedRadioTypes(v16);
  if (ot::Mac::RadioTypes::Contains(&SupportedRadioTypes, 1))
  {
    if (v15) {
      __int16 v4 = -100;
    }
    else {
      __int16 v4 = 25;
    }
    unsigned __int8 updated = ot::RadioSelector::UpdatePreference(a1, (uint64_t)v16, 1u, v4);
    if (v15) {
      ot::RadioSelector::Log(a1, updated, (uint64_t)"UpdateOnDefAckFail", 1, v16);
    }
    else {
      ot::RadioSelector::Log(a1, updated, (uint64_t)"UpdateOnDefAckSucc", 1, v16);
    }
    if (v15) {
      ++*((_DWORD *)v16 + 7);
    }
    else {
      ++*((_DWORD *)v16 + 6);
    }
    if (v15)
    {
      uint64_t v11 = &ot::RadioSelector::sRadioSelectionOrder;
      unsigned __int8 v10 = (unsigned __int8 *)&ot::RadioSelector::sRadioSelectionOrder;
      char v9 = &ot::RadioSelector::SelectPollFrameRadio(ot::Neighbor const&)::selectionOrder;
      while (v10 != (unsigned __int8 *)v9)
      {
        unsigned __int8 v8 = *v10;
        BOOL v5 = 0;
        if (v8 != 1)
        {
          char v7 = ot::RadioSelector::NeighborInfo::GetSupportedRadioTypes(v16);
          BOOL v5 = 0;
          if (ot::Mac::RadioTypes::Contains(&v7, v8)) {
            BOOL v5 = ot::RadioSelector::NeighborInfo::GetRadioPreference((uint64_t)v16, v8) >= 0xDCu;
          }
        }

        if (v5)
        {
          _BYTE *v14 = 0;
          return;
        }

        ++v10;
      }
    }
  }

  else if (!v15)
  {
    ot::RadioSelector::NeighborInfo::AddSupportedRadioType(v16, 1);
    ot::RadioSelector::NeighborInfo::SetRadioPreference((uint64_t)v16, 1u, 200);
    ot::RadioSelector::Log(a1, updated, (uint64_t)"NewRadio(OnDefAckSucc)", 1, v16);
  }

uint64_t ot::RadioSelector::Select(uint64_t a1, char a2, uint64_t a3)
{
  char v11 = a2;
  unsigned __int8 v9 = ot::RadioSelector::sRadioSelectionOrder;
  unsigned __int8 v8 = 0;
  char v7 = 0;
  for (unsigned __int8 i = &ot::RadioSelector::sRadioSelectionOrder;
        i != &ot::RadioSelector::SelectPollFrameRadio(ot::Neighbor const&)::selectionOrder;
        ++i)
  {
    unsigned __int8 v5 = *i;
    if (ot::Mac::RadioTypes::Contains(&v11, *i))
    {
      Radiochar Preference = ot::RadioSelector::NeighborInfo::GetRadioPreference(a3, v5);
      if (RadioPreference >= 0xDCu) {
        return v5;
      }
      if ((v7 & 1) == 0 || v8 < (int)RadioPreference)
      {
        char v7 = 1;
        unsigned __int8 v9 = v5;
        unsigned __int8 v8 = RadioPreference;
      }
    }
  }

  return v9;
}

ot::Mac::Frame *ot::RadioSelector::SelectRadio( ot::RadioSelector *this, ot::Message *a2, const ot::Mac::Address *a3, ot::Mac::TxFrames *a4)
{
  uint64_t v22 = this;
  uint64_t v21 = a2;
  uint64_t v20 = a3;
  uint64_t v19 = a4;
  ot::Power::Domain::Domain((ot::Power::Domain *)&v16);
  if (ot::Mac::Address::IsBroadcast(v20) || ot::Mac::Address::IsNone(v20))
  {
    ot::Message::ClearRadioType(v21);
    Instance  = ot::InstanceLocator::GetInstance(this);
    else {
      ot::Mac::RadioTypes::Add(&v16, 0);
    }
  }

  else if ((ot::Message::IsRadioTypeSet(v21) & 1) != 0)
  {
    char RadioType = ot::Message::GetRadioType(v21);
    ot::Mac::RadioTypes::Add(&v16, RadioType);
  }

  else
  {
    __int16 v6 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
    Neighbor  = (ot::Neighbor *)ot::NeighborTable::FindNeighbor(v6, v20, 5);
    IsEmpty  = 1;
    if (Neighbor)
    {
      SupportedRadioTypes  = ot::RadioSelector::NeighborInfo::GetSupportedRadioTypes(Neighbor);
      IsEmpty  = ot::Mac::RadioTypes::IsEmpty((ot::Mac::RadioTypes *)&SupportedRadioTypes);
    }

    if (IsEmpty)
    {
      ot::Message::ClearRadioType(v21);
      ot::Mac::RadioTypes::AddAll((ot::Mac::RadioTypes *)&v16);
    }

    else
    {
      char v14 = ot::RadioSelector::NeighborInfo::GetSupportedRadioTypes(Neighbor);
      char v17 = ot::RadioSelector::Select((uint64_t)this, v14, (uint64_t)Neighbor);
      ot::Mac::RadioTypes::Add(&v16, v17);
      ot::RadioSelector::Log((uint64_t)this, 5u, (uint64_t)"SelectRadio", v17, Neighbor);
      ot::Message::SetRadioType(v21, v17);
      BOOL v9 = 0;
      if (!ot::Mac::RadioTypes::Contains(&v16, 1))
      {
        char v13 = ot::RadioSelector::NeighborInfo::GetSupportedRadioTypes(Neighbor);
        BOOL v9 = 0;
        if (ot::Mac::RadioTypes::Contains(&v13, 1)) {
          BOOL v9 = ot::Random::NonCrypto::GetUint8InRange(0LL, 0x64u) < 0xAu;
        }
      }

      if (v9)
      {
        ot::Mac::TxFrames::SetRequiredRadioTypes((uint64_t)v19, v16);
        ot::Mac::RadioTypes::Add(&v16, 1);
        ot::RadioSelector::Log((uint64_t)this, 5u, (uint64_t)"Probe", 1, Neighbor);
        if (ot::Random::NonCrypto::GetUint8InRange(0LL, 0x64u) < 0x14u
          && *((_DWORD *)Neighbor + 8) > 0x64u
          && *((_DWORD *)Neighbor + 9) < 5u
          && !ot::RadioSelector::NeighborInfo::GetRadioPreference((uint64_t)Neighbor, 1u))
        {
          uint64_t ExtAddress = (ot::Mac::ExtAddress *)ot::Neighbor::GetExtAddress(Neighbor);
          ot::Mac::ExtAddress::ToString(ExtAddress, (ot::StringWriter *)v23);
          unsigned __int8 v12 = (char *)ot::String<(unsigned short)17>::AsCString((uint64_t)v23);
          handle_trel_resolve_peers(1, v12);
          ++*((_DWORD *)Neighbor + 9);
        }

        ++*((_DWORD *)Neighbor + 8);
      }
    }
  }

  return ot::Mac::TxFrames::GetTxFrame((uint64_t)v19, v16);
}

uint64_t ot::Mac::TxFrames::SetRequiredRadioTypes(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1ot::ThreadTlv::SetType(this, 7) = a2;
  return result;
}

{
  return __ZN2ot3Mac8TxFrames21SetRequiredRadioTypesENS0_10RadioTypesE(result, a2);
}

uint64_t ot::RadioSelector::SelectPollFrameRadio(ot::RadioSelector *this, const ot::Neighbor *a2)
{
  unsigned __int8 v10 = this;
  BOOL v9 = a2;
  unsigned __int8 v8 = ot::RadioSelector::SelectPollFrameRadio(ot::Neighbor const&)::selectionOrder;
  char v7 = &ot::RadioSelector::SelectPollFrameRadio(ot::Neighbor const&)::selectionOrder;
  __int16 v6 = (unsigned __int8 *)&ot::RadioSelector::SelectPollFrameRadio(ot::Neighbor const&)::selectionOrder;
  unsigned __int8 v5 = "RadioSelector";
  while (v6 != (unsigned __int8 *)v5)
  {
    unsigned __int8 v4 = *v6;
    SupportedRadioTypes  = ot::RadioSelector::NeighborInfo::GetSupportedRadioTypes(v9);
    if (ot::Mac::RadioTypes::Contains(&SupportedRadioTypes, v4)) {
      return v4;
    }
    ++v6;
  }

  return v8;
}

uint64_t ot::String<(unsigned short)75>::String(uint64_t a1)
{
  return a1;
}

{
  ot::StringWriter::StringWriter(a1, (char *)(a1 + 12), 75);
  return a1;
}

uint64_t ot::String<(unsigned short)75>::AsCString(uint64_t a1)
{
  return a1 + 12;
}

{
  return __ZNK2ot6StringILt75EE9AsCStringEv(a1);
}

ot::RouterTable *ot::RouterTable::RouterTable(ot::RouterTable *this, ot::Instance *a2)
{
  uint64_t v2 = ot::Time::Time((ot::RouterTable *)((char *)this + 8032), 0);
  *((_BYTE *)this + 8036)  = ot::Random::NonCrypto::GetUint8(v2);
  ot::RouterTable::Clear(this);
  return this;
}

{
  ot::RouterTable::RouterTable(this, a2);
  return this;
}

uint64_t ot::RouterTable::HandleTableChanged( ot::RouterTable *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::HistoryTracker>(this);
  return ot::Utils::HistoryTracker::RecordRouterTableChange(v8);
}

uint64_t ot::Array<ot::Router,(unsigned short)32,unsigned char>::Array(uint64_t a1, ot::Instance *a2)
{
  return a1;
}

{
  BOOL v2;
  ot::Child *v5;
  ot::Router *i;
  unsigned __int8 v5 = (ot::Child *)a1;
  do
  {
    ot::Child::Child(v5);
    uint64_t v2 = (ot::Child *)((char *)v5 + 248) != (ot::Child *)(a1 + 7936);
    unsigned __int8 v5 = (ot::Child *)((char *)v5 + 248);
  }

  while (v2);
  *(_BYTE *)(a1 + 7936)  = 0;
  return a1;
}

void *ot::TaskletIn<ot::RouterTable,&ot::RouterTable::HandleTableChanged>::TaskletIn( void *a1, uint64_t a2)
{
  return a1;
}

{
  ot::Tasklet::Tasklet( a1,  a2,  (uint64_t)ot::TaskletIn<ot::RouterTable,&ot::RouterTable::HandleTableChanged>::HandleTasklet);
  return a1;
}

ot::RouterTable::RouterIdMap *ot::RouterTable::RouterIdMap::RouterIdMap(ot::RouterTable::RouterIdMap *this)
{
  return this;
}

{
  ot::RouterTable::RouterIdMap::Clear(this);
  return this;
}

uint64_t ot::RouterTable::Clear(ot::RouterTable *this)
{
  return ot::RouterTable::SignalTableChanged(this);
}

uint64_t ot::RouterTable::ClearNeighbors(ot::RouterTable *this)
{
  char v7 = (char *)this + 8;
  ot::Array<ot::Router,(unsigned short)32,unsigned char>::begin();
  __int16 v6 = v1;
  uint64_t result = ot::Array<ot::Router,(unsigned short)32,unsigned char>::end((uint64_t)v7);
  uint64_t v5 = result;
  while (v6 != (ot::Neighbor *)v5)
  {
    if (ot::Neighbor::IsStateValid(v6))
    {
      BOOL v3 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
      ot::NeighborTable::Signal(v3, 4u, v6);
      ot::RouterTable::SignalTableChanged(this);
    }

    uint64_t result = (uint64_t)ot::Neighbor::SetState(v6, 0);
    __int16 v6 = (ot::Neighbor *)((char *)v6 + 248);
  }

  return result;
}

void *ot::RouterTable::RouterIdMap::Clear(ot::RouterTable::RouterIdMap *this)
{
  return memset(this, 0, 0x3FuLL);
}

{
  return __ZN2ot11RouterTable11RouterIdMap5ClearEv(this);
}

uint64_t ot::Array<ot::Router,(unsigned short)32,unsigned char>::Clear(uint64_t result)
{
  *(_BYTE *)(result + 7936)  = 0;
  return result;
}

{
  return __ZN2ot5ArrayINS_6RouterELt32EhE5ClearEv(result);
}

uint64_t ot::RouterTable::SignalTableChanged(ot::RouterTable *this)
{
  return ot::Tasklet::Post((ot::RouterTable *)((char *)this + 7952));
}

BOOL ot::RouterTable::IsRouteTlvIdSequenceMoreRecent(ot::RouterTable *this, const ot::Mle::RouteTlv *a2)
{
  BOOL v6 = 1;
  if (ot::RouterTable::GetActiveRouterCount(this))
  {
    char RouterIdSequence = ot::Mle::RouteTlv::GetRouterIdSequence(a2);
    char v2 = ot::RouterTable::GetRouterIdSequence(this);
    return ot::SerialNumber::IsGreater<unsigned char>(RouterIdSequence, v2);
  }

  return v6;
}

ot::Router *ot::RouterTable::AddRouter(ot::RouterTable *this, unsigned __int8 a2)
{
  char v16 = (ot::Router *)ot::Array<ot::Router,(unsigned short)32,unsigned char>::PushBack((uint64_t)this + 8);
  if (v16)
  {
    ot::Router::Clear(v16);
    __int16 v2 = ot::Mle::Rloc16FromRouterId((ot::Mle *)a2);
    ot::Neighbor::SetRloc16((uint64_t)v16, v2);
    ot::Router::SetNextHopToInvalid(v16);
    char v3 = ot::Array<ot::Router,(unsigned short)32,unsigned char>::IndexOf((uint64_t)this + 8, (uint64_t)v16);
    ot::RouterTable::RouterIdMap::SetIndex((uint64_t)this + 7968, a2, v3);
    ot::RouterTable::SignalTableChanged(this);
    unsigned __int8 v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    int Rloc16 = (unsigned __int16)ot::Mle::Mle::GetRloc16(v4);
    if (Rloc16 == (unsigned __int16)ot::Mle::Rloc16FromRouterId((ot::Mle *)a2))
    {
      ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"RouterTable",  "Updating Ext Address for routerId  = %d",  v5,  v6,  v7,  v8,  v9,  v10,  a2);
      char v11 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
      uint64_t ExtAddress = (const ot::Mac::ExtAddress *)ot::Mac::Mac::GetExtAddress(v11);
      ot::Neighbor::SetExtAddress((uint64_t)v16, ExtAddress);
    }
  }

  return v16;
}

uint64_t ot::Array<ot::Router,(unsigned short)32,unsigned char>::PushBack(uint64_t a1)
{
  uint64_t v1 = (*(_BYTE *)(a1 + 7936))++;
  return a1 + 248 * v1;
}

{
  return __ZN2ot5ArrayINS_6RouterELt32EhE8PushBackEv(a1);
}

uint64_t ot::RouterTable::RouterIdMap::SetIndex(uint64_t this, unsigned __int8 a2, char a3)
{
  *(_BYTE *)(this + aot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = a3 | 0x80;
  return this;
}

{
  return __ZN2ot11RouterTable11RouterIdMap8SetIndexEhh(this, a2, a3);
}

uint64_t ot::Array<ot::Router,(unsigned short)32,unsigned char>::IndexOf(uint64_t a1, uint64_t a2)
{
  return ((a2 - a1) / 248);
}

{
  return __ZNK2ot5ArrayINS_6RouterELt32EhE7IndexOfERKS1_(a1, a2);
}

uint64_t ot::RouterTable::RemoveRouter(ot::RouterTable *this, ot::Router *a2)
{
  if (ot::Neighbor::IsStateValid(a2))
  {
    __int16 v2 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
    ot::NeighborTable::Signal(v2, 4u, a2);
  }

  unsigned __int8 RouterId = ot::Neighbor::GetRouterId(a2);
  ot::RouterTable::RouterIdMap::Release((uint64_t)this + 7968, RouterId);
  ot::Array<ot::Router,(unsigned short)32,unsigned char>::Remove((uint64_t)this + 8, a2);
  unsigned __int8 v4 = ot::Neighbor::GetRouterId(a2);
  if (ot::RouterTable::IsAllocated(this, v4))
  {
    unsigned __int8 v7 = ot::Neighbor::GetRouterId(a2);
    char v5 = ot::Array<ot::Router,(unsigned short)32,unsigned char>::IndexOf((uint64_t)this + 8, (uint64_t)a2);
    ot::RouterTable::RouterIdMap::SetIndex((uint64_t)this + 7968, v7, v5);
  }

  return ot::RouterTable::SignalTableChanged(this);
}

uint64_t ot::RouterTable::RouterIdMap::Release(uint64_t this, unsigned __int8 a2)
{
  *(_BYTE *)(this + aot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 100;
  return this;
}

{
  return __ZN2ot11RouterTable11RouterIdMap7ReleaseEh(this, a2);
}

void *ot::Array<ot::Router,(unsigned short)32,unsigned char>::Remove(uint64_t a1, void *a2)
{
  uint64_t result = (void *)ot::Array<ot::Router,(unsigned short)32,unsigned char>::PopBack(a1);
  if (result != a2) {
    return memcpy(a2, result, 0xF6uLL);
  }
  return result;
}

{
  return __ZN2ot5ArrayINS_6RouterELt32EhE6RemoveERS1_(a1, a2);
}

uint64_t ot::RouterTable::Allocate(ot::RouterTable *this)
{
  uint64_t v6 = 0LL;
  unsigned __int8 v5 = 0;
  unsigned __int8 v4 = 63;
  if (!ot::Array<ot::Router,(unsigned short)32,unsigned char>::IsFull((uint64_t)this + 8))
  {
    for (unsigned __int8 i = 0; i <= 0x3Eu; ++i)
    {
      if (ot::RouterTable::RouterIdMap::CanAllocate((ot::RouterTable *)((char *)this + 7968), i)
        && !ot::Random::NonCrypto::GetUint8InRange(0LL, ++v5))
      {
        unsigned __int8 v4 = i;
      }
    }

    if (v4 != 63)
    {
      uint64_t v6 = ot::RouterTable::Allocate(this, v4);
      if (!v6) {
        __assert_rtn("Allocate", "router_table.cpp", 174, "router != nullptr");
      }
    }
  }

  return v6;
}

BOOL ot::Array<ot::Router,(unsigned short)32,unsigned char>::IsFull(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 7936);
  return v2 == ot::Array<ot::Router,(unsigned short)32,unsigned char>::GetMaxSize();
}

{
  return __ZNK2ot5ArrayINS_6RouterELt32EhE6IsFullEv(a1);
}

BOOL ot::RouterTable::RouterIdMap::CanAllocate(ot::RouterTable::RouterIdMap *this, unsigned __int8 a2)
{
  return *((_BYTE *)this + a2) == 0;
}

{
  return __ZNK2ot11RouterTable11RouterIdMap11CanAllocateEh(this, a2);
}

uint64_t ot::RouterTable::Allocate(ot::RouterTable *this, unsigned __int8 a2)
{
  uint64_t v14 = 0LL;
  if (a2 <= 0x3Eu && ot::RouterTable::RouterIdMap::CanAllocate((ot::RouterTable *)((char *)this + 7968), a2))
  {
    int v2 = ot::RouterTable::AddRouter(this, a2);
    uint64_t v14 = (uint64_t)v2;
    if (v2)
    {
      int Now = ot::TimerMilli::GetNow(v2);
      Heard  = (ot::TimerMilli *)ot::Neighbor::SetLastHeard(v14, Now);
      ++*((_BYTE *)this + 8036);
      *((_DWORD *)this + 2008)  = ot::TimerMilli::GetNow(Heard);
      unsigned __int8 v4 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
      ot::Mle::MleRouter::ResetAdvertiseInterval(v4);
      ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)"RouterTable", "Allocate router id %d", v5, v6, v7, v8, v9, v10, a2);
    }
  }

  return v14;
}

uint64_t ot::RouterTable::Release(ot::RouterTable *this, unsigned __int8 a2)
{
  unsigned int v20 = 0;
  if (a2 > 0x3Eu) {
    __assert_rtn("Release", "router_table.cpp", 206, "aRouterId <= Mle::kMaxRouterId");
  }
  int v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (ot::Mle::Mle::IsLeader(v2))
  {
    ot::RouterTable::FindRouterById(this, a2);
    if (v3)
    {
      ot::RouterTable::RemoveRouter(this, v3);
      ot::Array<ot::Router,(unsigned short)32,unsigned char>::begin();
      uint64_t v19 = v4;
      NextHop  = (ot::TimerMilli *)ot::Array<ot::Router,(unsigned short)32,unsigned char>::end((uint64_t)this + 8);
      uint64_t v18 = NextHop;
      while (v19 != v18)
      {
        NextHop  = (ot::TimerMilli *)ot::Router::GetNextHop(v19);
        uint64_t v19 = (ot::Router *)((char *)v19 + 248);
      }

      ++*((_BYTE *)this + 8036);
      *((_DWORD *)this + 2008)  = ot::TimerMilli::GetNow(NextHop);
      uint64_t v6 = (ot::AddressResolver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>(this);
      ot::AddressResolver::RemoveEntriesForRouterId(v6, a2);
      char v16 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
      unsigned __int16 v7 = ot::Mle::Rloc16FromRouterId((ot::Mle *)a2);
      ot::NetworkData::Leader::RemoveBorderRouter(v16, v7, 1);
      uint64_t v8 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
      ot::Mle::MleRouter::ResetAdvertiseInterval(v8);
      ot::Logger::LogAtLevel<(ot::LogLevel)3>( (ot *)"RouterTable",  "Release router id %d",  v9,  v10,  v11,  v12,  v13,  v14,  a2);
    }

    else
    {
      return 23;
    }
  }

  else
  {
    return 13;
  }

  return v20;
}

ot::AddressResolver::CacheEntry *ot::RouterTable::RemoveRouterLink(ot::RouterTable *this, ot::Router *a2)
{
  if (ot::Router::GetLinkQualityOut(a2))
  {
    int v2 = (ot::TimerMilli *)ot::Router::SetLinkQualityOut((uint64_t)a2, 0);
    int Now = ot::TimerMilli::GetNow(v2);
    ot::Neighbor::SetLastHeard((uint64_t)a2, Now);
    ot::RouterTable::SignalTableChanged(this);
  }

  ot::Array<ot::Router,(unsigned short)32,unsigned char>::begin();
  uint64_t v12 = v3;
  uint64_t v11 = ot::Array<ot::Router,(unsigned short)32,unsigned char>::end((uint64_t)this + 8);
  while (v12 != (ot::Router *)v11)
  {
    NextHop  = ot::Router::GetNextHop(v12);
    if (NextHop == ot::Neighbor::GetRouterId(a2))
    {
      ot::Router::SetNextHopToInvalid(v12);
      ot::RouterTable::SignalTableChanged(this);
      if (ot::RouterTable::GetLinkCost(this, v12) >= 0x10u)
      {
        unsigned __int8 v4 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
        ot::Mle::MleRouter::ResetAdvertiseInterval(v4);
      }
    }

    uint64_t v12 = (ot::Router *)((char *)v12 + 248);
  }

  uint64_t result = (ot::AddressResolver::CacheEntry *)ot::Router::GetNextHop(a2);
  if (result == 63)
  {
    uint64_t v6 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    ot::Mle::MleRouter::ResetAdvertiseInterval(v6);
    uint64_t v8 = (ot::AddressResolver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>(this);
    unsigned __int8 RouterId = ot::Neighbor::GetRouterId(a2);
    return ot::AddressResolver::RemoveEntriesForRouterId(v8, RouterId);
  }

  return result;
}

uint64_t ot::Router::GetLinkQualityOut(ot::Router *this)
{
  return *((_BYTE *)this + 245) & 3;
}

{
  return __ZNK2ot6Router17GetLinkQualityOutEv(this);
}

uint64_t ot::RouterTable::GetLinkCost(ot::RouterTable *this, const ot::Router *a2)
{
  unsigned __int8 v7 = 16;
  int Rloc16 = (unsigned __int16)ot::Neighbor::GetRloc16(a2);
  int v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (Rloc16 != (unsigned __int16)ot::Mle::Mle::GetRloc16(v2) && ot::Neighbor::IsStateValid(a2))
  {
    unsigned __int8 TwoWayLinkQuality = ot::Router::GetTwoWayLinkQuality(a2);
    return ot::CostForLinkQuality(TwoWayLinkQuality);
  }

  return v7;
}

ot::Neighbor *ot::RouterTable::FindRouter(ot::RouterTable *this, const ot::Neighbor::AddressMatcher *a2)
{
  return ot::Array<ot::Router,(unsigned short)32,unsigned char>::FindMatching<ot::Neighbor::AddressMatcher>( (uint64_t)this + 8,  a2);
}

ot::Neighbor *ot::Array<ot::Router,(unsigned short)32,unsigned char>::FindMatching<ot::Neighbor::AddressMatcher>( uint64_t a1, const ot::Neighbor::AddressMatcher *a2)
{
  uint64_t v7 = 0LL;
  ot::Array<ot::Router,(unsigned short)32,unsigned char>::begin();
  uint64_t v5 = v2;
  uint64_t v4 = ot::Array<ot::Router,(unsigned short)32,unsigned char>::end(a1);
  while (v5 != (ot::Neighbor *)v4)
  {
    if ((ot::Neighbor::Matches(v5, a2) & 1) != 0) {
      return v5;
    }
    uint64_t v5 = (ot::Neighbor *)((char *)v5 + 248);
  }

  return (ot::Neighbor *)v7;
}

{
  return __ZNK2ot5ArrayINS_6RouterELt32EhE12FindMatchingINS_8Neighbor14AddressMatcherEEEPKS1_RKT_(a1, a2);
}

uint64_t ot::RouterTable::FindNeighbor(ot::RouterTable *this, unsigned __int16 a2)
{
  uint64_t v10 = this;
  unsigned __int16 v9 = a2;
  uint64_t v8 = 0LL;
  int v5 = a2;
  int v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (v5 != (unsigned __int16)ot::Mle::Mle::GetRloc16(v2))
  {
    ot::Neighbor::AddressMatcher::AddressMatcher((uint64_t)v7, v9, 0);
    ot::RouterTable::FindRouter(this, (const ot::Neighbor::AddressMatcher *)v7);
    return v3;
  }

  return v8;
}

void ot::RouterTable::FindNeighbor(ot::RouterTable *this, const ot::Mac::ExtAddress *a2)
{
  int v5 = this;
  uint64_t v4 = a2;
  ot::Neighbor::AddressMatcher::AddressMatcher((uint64_t)v3, (uint64_t)a2, 0);
  ot::RouterTable::FindRouter(this, (const ot::Neighbor::AddressMatcher *)v3);
}

void ot::RouterTable::FindNeighbor(ot::RouterTable *this, const ot::Mac::Address *a2)
{
  int v5 = this;
  uint64_t v4 = a2;
  ot::Neighbor::AddressMatcher::AddressMatcher((uint64_t)v3, a2, 0);
  ot::RouterTable::FindRouter(this, (const ot::Neighbor::AddressMatcher *)v3);
}

uint64_t ot::RouterTable::FindRouterById(ot::RouterTable *this, unsigned __int8 a2)
{
  uint64_t v5 = 0LL;
  if (a2 <= 0x3Eu && ot::RouterTable::IsAllocated(this, a2))
  {
    Index  = ot::RouterTable::RouterIdMap::GetIndex((ot::RouterTable *)((char *)this + 7968), a2);
    return ot::Array<ot::Router,(unsigned short)32,unsigned char>::operator[]((uint64_t)this + 8, Index);
  }

  return v5;
}

uint64_t ot::Array<ot::Router,(unsigned short)32,unsigned char>::operator[](uint64_t a1, unsigned __int8 a2)
{
  return a1 + 248LL * a2;
}

{
  return __ZNK2ot5ArrayINS_6RouterELt32EhEixEh(a1, a2);
}

uint64_t ot::RouterTable::RouterIdMap::GetIndex(ot::RouterTable::RouterIdMap *this, unsigned __int8 a2)
{
  return *((_BYTE *)this + a2) & 0x7F;
}

{
  return __ZNK2ot11RouterTable11RouterIdMap8GetIndexEh(this, a2);
}

uint64_t ot::RouterTable::FindRouterByRloc16(ot::RouterTable *this, unsigned __int16 a2)
{
  unsigned __int8 v2 = ot::Mle::RouterIdFromRloc16((ot::Mle *)a2);
  return ot::RouterTable::FindRouterById(this, v2);
}

uint64_t ot::RouterTable::FindNextHopOf(ot::RouterTable *this, const ot::Router *a2)
{
  NextHop  = ot::Router::GetNextHop(a2);
  return ot::RouterTable::FindRouterById(this, NextHop);
}

void ot::RouterTable::FindRouter(ot::RouterTable *this, const ot::Mac::ExtAddress *a2)
{
  uint64_t v5 = this;
  uint64_t v4 = a2;
  ot::Neighbor::AddressMatcher::AddressMatcher((uint64_t)v3, (uint64_t)a2, 7);
  ot::RouterTable::FindRouter(this, (const ot::Neighbor::AddressMatcher *)v3);
}

uint64_t ot::RouterTable::GetRouterInfo(ot::RouterTable *a1, unsigned __int16 a2, ot::Router::Info *a3)
{
  unsigned int v7 = 0;
  if (a2 > 0x3Eu)
  {
    if (!ot::Mle::IsActiveRouter((ot::Mle *)a2)) {
      return 7;
    }
    unsigned __int8 v6 = ot::Mle::RouterIdFromRloc16((ot::Mle *)a2);
    if (v6 > 0x3Eu) {
      return 7;
    }
    ot::RouterTable::FindRouterById(a1, v6);
  }

  else
  {
    ot::RouterTable::FindRouterById(a1, a2);
  }

  if (v3) {
    ot::Router::Info::SetFrom(a3, v3);
  }
  else {
    return 23;
  }
  return v7;
}

uint64_t ot::RouterTable::GetLeader(ot::RouterTable *this)
{
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  unsigned __int8 LeaderId = ot::Mle::Mle::GetLeaderId(v1);
  return ot::RouterTable::FindRouterById(this, LeaderId);
}

uint64_t ot::RouterTable::GetLeaderAge(ot::RouterTable *this)
{
  unsigned int v7 = this;
  IsEmpty  = ot::Array<ot::Router,(unsigned short)32,unsigned char>::IsEmpty((uint64_t)this + 8);
  if (IsEmpty)
  {
    return -1;
  }

  else
  {
    int Now = ot::TimerMilli::GetNow((ot::TimerMilli *)IsEmpty);
    unsigned __int8 v2 = (ot::Time *)ot::Time::operator-(&Now, (_DWORD *)this + 2008);
    return ot::Time::MsecToSec(v2);
  }

BOOL ot::Array<ot::Router,(unsigned short)32,unsigned char>::IsEmpty(uint64_t a1)
{
  return *(_BYTE *)(a1 + 7936) == 0;
}

{
  return __ZNK2ot5ArrayINS_6RouterELt32EhE7IsEmptyEv(a1);
}

uint64_t ot::RouterTable::GetNeighborCount(ot::RouterTable *this)
{
  unsigned __int8 v6 = 0;
  uint64_t v5 = (char *)this + 8;
  ot::Array<ot::Router,(unsigned short)32,unsigned char>::begin();
  uint64_t v4 = v1;
  uint64_t v3 = ot::Array<ot::Router,(unsigned short)32,unsigned char>::end((uint64_t)v5);
  while (v4 != (ot::Neighbor *)v3)
  {
    if (ot::Neighbor::IsStateValid(v4)) {
      ++v6;
    }
    uint64_t v4 = (ot::Neighbor *)((char *)v4 + 248);
  }

  return v6;
}

uint64_t ot::RouterTable::GetLinkCost(ot::RouterTable *this, unsigned __int8 a2)
{
  unsigned __int8 v5 = 16;
  RouterById  = (ot::Router *)ot::RouterTable::FindRouterById(this, a2);
  if (RouterById) {
    return ot::RouterTable::GetLinkCost(this, RouterById);
  }
  return v5;
}

uint64_t ot::RouterTable::GetPathCost(ot::RouterTable *this, unsigned __int16 a2)
{
  unsigned __int8 v6 = this;
  unsigned __int16 v5 = a2;
  ot::RouterTable::GetNextHopAndPathCost(this, a2, &v3, &v4);
  return v4;
}

void ot::RouterTable::GetNextHopAndPathCost( ot::RouterTable *this, unsigned __int16 a2, unsigned __int16 *a3, unsigned __int8 *a4)
{
  *a4  = 16;
  *a3  = -2;
  unsigned __int8 v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
  if (ot::Mle::Mle::IsAttached(v4))
  {
    unsigned __int16 v5 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    if (a2 == (unsigned __int16)ot::Mle::Mle::GetRloc16(v5))
    {
      *a4  = 0;
      *a3  = a2;
      return;
    }

    unsigned __int8 v20 = ot::Mle::RouterIdFromRloc16((ot::Mle *)a2);
    RouterById  = (const ot::Router *)ot::RouterTable::FindRouterById(this, v20);
    if (RouterById) {
      NextHopOf  = (const ot::Router *)ot::RouterTable::FindNextHopOf(this, RouterById);
    }
    else {
      NextHopOf  = 0LL;
    }
    unsigned __int8 v6 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    if (ot::Mle::Mle::IsChild(v6))
    {
      unsigned int v7 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
      Parent  = (ot::Neighbor *)ot::Mle::Mle::GetParent(v7);
      if (ot::Neighbor::IsStateValid(Parent)) {
        *a3  = ot::Neighbor::GetRloc16(Parent);
      }
      if (v20 == ot::Neighbor::GetRouterId(Parent) || NextHopOf)
      {
        unsigned __int8 LinkQualityIn = ot::Neighbor::GetLinkQualityIn(Parent);
        *a4  = ot::CostForLinkQuality(LinkQualityIn);
LABEL_24:
        if (!ot::Mle::IsActiveRouter((ot::Mle *)a2)) {
          ++*a4;
        }
      }
    }

    else
    {
      unsigned __int16 v9 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
      unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16(v9);
      if (v20 != ot::Mle::RouterIdFromRloc16((ot::Mle *)Rloc16))
      {
        if (!RouterById) {
          return;
        }
        *a4  = ot::RouterTable::GetLinkCost(this, RouterById);
        if (*a4 < 0x10u) {
          *a3  = ot::Neighbor::GetRloc16(RouterById);
        }
        if (NextHopOf)
        {
          Cost  = ot::Router::GetCost(RouterById);
          unsigned __int8 v17 = ot::RouterTable::GetLinkCost(this, NextHopOf) + Cost;
          if (v17 < (int)*a4)
          {
            *a4  = v17;
            *a3  = ot::Neighbor::GetRloc16(NextHopOf);
          }
        }

        goto LABEL_24;
      }

      uint64_t v11 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
      ot::ChildTable::FindChild(v11, a2, 5);
      if (v12)
      {
        *a3  = a2;
        unsigned __int8 v13 = ot::Neighbor::GetLinkQualityIn(v12);
        *a4  = ot::CostForLinkQuality(v13);
      }
    }
  }

uint64_t ot::RouterTable::GetPathCostToLeader(ot::RouterTable *this)
{
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
  unsigned __int8 LeaderId = ot::Mle::Mle::GetLeaderId(v1);
  unsigned __int16 v3 = ot::Mle::Rloc16FromRouterId((ot::Mle *)LeaderId);
  return ot::RouterTable::GetPathCost(this, v3);
}

uint64_t ot::Router::GetCost(ot::Router *this)
{
  return (*((_BYTE *)this + 245) >> 2) & 0xF;
}

{
  return __ZNK2ot6Router7GetCostEv(this);
}

uint64_t ot::RouterTable::GetNextHop(ot::RouterTable *this, unsigned __int16 a2)
{
  unsigned __int8 v6 = this;
  unsigned __int16 v5 = a2;
  ot::RouterTable::GetNextHopAndPathCost(this, a2, &v3, &v4);
  return v3;
}

uint64_t ot::RouterTable::UpdateRouterIdSet(ot::RouterTable *this, char a2, const ot::Mle::RouterIdSet *a3)
{
  char v11 = 0;
  *((_BYTE *)this + 8036)  = a2;
  uint64_t result = ot::TimerMilli::GetNow(this);
  *((_DWORD *)this + 2008)  = result;
  for (unsigned __int8 i = 0; i <= 0x3Eu; ++i)
  {
    IsAllocated  = ot::RouterTable::IsAllocated(this, i);
    uint64_t result = ot::Mle::RouterIdSet::Contains(a3, i);
    if (IsAllocated != (result & 1))
    {
      uint64_t result = ot::RouterTable::IsAllocated(this, i);
      if ((result & 1) != 0)
      {
        ot::RouterTable::FindRouterById(this, i);
        unsigned __int16 v9 = v4;
        if (!v4) {
          __assert_rtn("UpdateRouterIdSet", "router_table.cpp", 542, "router != nullptr");
        }
        ot::Router::SetNextHopToInvalid(v4);
        ot::RouterTable::RemoveRouterLink(this, v9);
        uint64_t result = ot::RouterTable::RemoveRouter(this, v9);
      }

      else
      {
        char v11 = 1;
      }
    }
  }

  if ((v11 & 1) != 0)
  {
    for (unsigned __int8 j = 0; j <= 0x3Eu; ++j)
    {
      if (!ot::RouterTable::IsAllocated(this, j) && ot::Mle::RouterIdSet::Contains(a3, j)) {
        ot::RouterTable::AddRouter(this, j);
      }
    }

    unsigned __int16 v5 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    return ot::Mle::MleRouter::ResetAdvertiseInterval(v5);
  }

  return result;
}

void ot::RouterTable::UpdateRoutes(ot::RouterTable *this, const ot::Mle::RouteTlv *a2, unsigned __int8 a3)
{
  uint64_t v30 = v3;
  if (v3)
  {
    ot::Mle::RouterIdSet::Clear(&v33);
    for (unsigned __int8 i = 0; i <= 0x3Eu; ++i)
    {
      unsigned __int16 v4 = ot::Mle::Rloc16FromRouterId((ot::Mle *)i);
    }

    unsigned __int8 v27 = 0;
    unsigned __int8 v26 = 0;
    while (v27 <= 0x3Eu)
    {
      unsigned __int16 v5 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
      unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16(v5);
      if (v27 == ot::Mle::RouterIdFromRloc16((ot::Mle *)Rloc16))
      {
        if (ot::Mle::RouteTlv::IsRouterIdSet(a2, v27))
        {
          unsigned __int8 LinkQualityIn = ot::Mle::RouteTlv::GetLinkQualityIn(a2, v26);
          if (LinkQualityIn != ot::Router::GetLinkQualityOut(v30))
          {
            ot::Router::SetLinkQualityOut((uint64_t)v30, LinkQualityIn);
            ot::RouterTable::SignalTableChanged(this);
          }
        }

        break;
      }

      v26 += ot::Mle::RouteTlv::IsRouterIdSet(a2, v27++);
    }

    LinkCost  = ot::RouterTable::GetLinkCost(this, v30);
    unsigned __int8 v24 = 0;
    unsigned __int8 v23 = 0;
    while (v24 <= 0x3Eu)
    {
      if (ot::Mle::RouteTlv::IsRouterIdSet(a2, v24))
      {
        ot::RouterTable::FindRouterById(this, v24);
        uint64_t v22 = v7;
        if (v7)
        {
          int v15 = (unsigned __int16)ot::Neighbor::GetRloc16(v7);
          uint64_t v8 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
          if (v15 != (unsigned __int16)ot::Mle::Mle::GetRloc16(v8) && v22 != v30)
          {
            ot::RouterTable::FindNextHopOf(this, v22);
            uint64_t v21 = v9;
            RouteCost  = ot::Mle::RouteTlv::GetRouteCost(a2, v23);
            if (RouteCost) {
              unsigned __int8 v14 = RouteCost;
            }
            else {
              unsigned __int8 v14 = 16;
            }
            if (v21 && v21 != v30)
            {
              Cost  = ot::Router::GetCost(v22);
              if ((v14 + LinkCost) < (int)(ot::RouterTable::GetLinkCost(this, v21)
                                                                            + Cost))
              {
                ot::Router::SetNextHopAndCost(v22, a3, v14);
                ot::RouterTable::SignalTableChanged(this);
              }
            }

            else if (v14 + LinkCost >= 16)
            {
              if (v21 == v30)
              {
                HopToInvalid  = (ot::TimerMilli *)ot::Router::SetNextHopToInvalid(v22);
                int Now = ot::TimerMilli::GetNow(HopToInvalid);
                ot::Neighbor::SetLastHeard((uint64_t)v22, Now);
                ot::RouterTable::SignalTableChanged(this);
              }
            }

            else if ((ot::Router::SetNextHopAndCost(v22, a3, v14) & 1) != 0)
            {
              ot::RouterTable::SignalTableChanged(this);
            }
          }
        }
      }

      v23 += ot::Mle::RouteTlv::IsRouterIdSet(a2, v24++);
    }

    for (unsigned __int8 j = 0; j <= 0x3Eu; ++j)
    {
      BOOL v17 = ot::Mle::RouterIdSet::Contains((ot::Mle::RouterIdSet *)&v33, j);
      unsigned __int16 v11 = ot::Mle::Rloc16FromRouterId((ot::Mle *)j);
      if (ot::RouterTable::GetPathCost(this, v11) < 0x10u != v17)
      {
        uint64_t v12 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
        ot::Mle::MleRouter::ResetAdvertiseInterval(v12);
        return;
      }
    }
  }

uint64_t ot::Mle::RouterIdSet::Add(ot::Mle::RouterIdSet *this, unsigned __int8 a2)
{
  uint64_t result = ot::Mle::RouterIdSet::MaskFor((ot::Mle::RouterIdSet *)a2);
  *((_BYTE *)this + a2 / 8) |= result;
  return result;
}

{
  return __ZN2ot3Mle11RouterIdSet3AddEh(this, a2);
}

BOOL ot::RouterTable::UpdateRoutesOnFed(BOOL this, const ot::Mle::RouteTlv *a2, unsigned __int8 a3)
{
  unsigned __int16 v5 = (ot::RouterTable *)this;
  unsigned __int8 v9 = 0;
  unsigned __int8 v8 = 0;
  while (v9 <= 0x3Eu)
  {
    if (ot::Mle::RouteTlv::IsRouterIdSet(a2, v9) && v9 != a3)
    {
      ot::RouterTable::FindRouterById(v5, v9);
      unsigned int v7 = v3;
      if (v3)
      {
        RouteCost  = ot::Mle::RouteTlv::GetRouteCost(a2, v8);
        if (RouteCost) {
          unsigned __int8 v4 = a3;
        }
        else {
          unsigned __int8 v4 = 63;
        }
        if ((ot::Router::SetNextHopAndCost(v7, v4, RouteCost) & 1) != 0) {
          ot::RouterTable::SignalTableChanged(v5);
        }
      }
    }

    this  = ot::Mle::RouteTlv::IsRouterIdSet(a2, v9);
    v8 += this;
    ++v9;
  }

  return this;
}

uint64_t ot::RouterTable::FillRouteTlv(ot::RouterTable *this, ot::Mle::RouteTlv *a2, const ot::Neighbor *a3)
{
  char v19 = *((_BYTE *)this + 8036);
  ot::RouterTable::RouterIdMap::GetAsRouterIdSet((ot::RouterTable *)((char *)this + 7968), (ot::Mle::RouterIdSet *)v22);
  if (a3)
  {
    unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(a3);
    if (ot::Mle::IsActiveRouter((ot::Mle *)Rloc16))
    {
      unsigned __int8 Length = ot::Array<ot::Router,(unsigned short)32,unsigned char>::GetLength((uint64_t)this + 8);
      if (Length > 0xFu)
      {
        for (unsigned __int8 i = 0; i <= 0x3Eu && Length > 0xFu; ++i)
        {
          unsigned __int8 v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
          unsigned __int16 v5 = ot::Mle::Mle::GetRloc16(v4);
          if (i != ot::Mle::RouterIdFromRloc16((ot::Mle *)v5)
            && i != ot::Neighbor::GetRouterId(a3))
          {
            unsigned __int8 v6 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
            if (i != ot::Mle::Mle::GetLeaderId(v6)
              && ot::Mle::RouterIdSet::Contains((ot::Mle::RouterIdSet *)v22, i))
            {
              ot::Mle::RouterIdSet::Remove((ot::Mle::RouterIdSet *)v22, i);
              --Length;
            }
          }
        }

        v19 -= 64;
      }
    }
  }

  ot::Mle::RouteTlv::SetRouterIdSequence((uint64_t)a2, v19);
  ot::Mle::RouteTlv::SetRouterIdMask((uint64_t)a2, (const ot::Mle::RouterIdSet *)v22);
  char v18 = 0;
  for (unsigned __int8 j = 0; j <= 0x3Eu; ++j)
  {
    if (ot::Mle::RouterIdSet::Contains((ot::Mle::RouterIdSet *)v22, j))
    {
      unsigned __int16 v14 = ot::Mle::Rloc16FromRouterId((ot::Mle *)j);
      unsigned int v7 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
      if (v14 == (unsigned __int16)ot::Mle::Mle::GetRloc16(v7))
      {
        ot::Mle::RouteTlv::SetRouteData((uint64_t)a2, v18, 0, 0, 1);
      }

      else
      {
        RouterById  = (ot::Neighbor *)ot::RouterTable::FindRouterById(this, j);
        if (!RouterById) {
          __assert_rtn("FillRouteTlv", "router_table.cpp", 797, "router != nullptr");
        }
        unsigned __int8 PathCost = ot::RouterTable::GetPathCost(this, v14);
        if (PathCost >= 0x10u) {
          unsigned __int8 PathCost = 0;
        }
        char LinkQualityIn = ot::Neighbor::GetLinkQualityIn(RouterById);
        char LinkQualityOut = ot::Router::GetLinkQualityOut(RouterById);
        ot::Mle::RouteTlv::SetRouteData((uint64_t)a2, v18, LinkQualityIn, LinkQualityOut, PathCost);
      }

      ++v18;
    }
  }

  return ot::Mle::RouteTlv::SetRouteDataLength(a2, v18);
}

uint64_t ot::RouterTable::RouterIdMap::GetAsRouterIdSet( ot::RouterTable::RouterIdMap *this, ot::Mle::RouterIdSet *a2)
{
  uint64_t result = (uint64_t)ot::Mle::RouterIdSet::Clear(a2);
  for (unsigned __int8 i = 0; i <= 0x3Eu; ++i)
  {
    uint64_t result = ot::RouterTable::RouterIdMap::IsAllocated(this, i);
    if ((result & 1) != 0) {
      uint64_t result = ot::Mle::RouterIdSet::Add(a2, i);
    }
  }

  return result;
}

uint64_t ot::Mle::RouteTlv::SetRouterIdSequence(uint64_t this, char a2)
{
  *(_BYTE *)(this + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = a2;
  return this;
}

{
  return __ZN2ot3Mle8RouteTlv19SetRouterIdSequenceEh(this, a2);
}

uint64_t ot::Mle::RouteTlv::SetRouterIdMask(uint64_t this, const ot::Mle::RouterIdSet *a2)
{
  *(void *)(this + ot::NetworkData::NetworkDataTlv::SetType(this, 3) = *(void *)a2;
  return this;
}

{
  return __ZN2ot3Mle8RouteTlv15SetRouterIdMaskERKNS0_11RouterIdSetE(this, a2);
}

uint64_t ot::Mle::RouteTlv::SetRouteData(uint64_t result, unsigned __int8 a2, char a3, char a4, char a5)
{
  *(_BYTE *)(result + 11 + aot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = (16 * a3) & 0x30 | (a4 << 6) | a5 & 0xF;
  return result;
}

{
  return __ZN2ot3Mle8RouteTlv12SetRouteDataEhNS_11LinkQualityES2_h(result, a2, a3, a4, a5);
}

uint64_t ot::Mle::RouteTlv::SetRouteDataLength(ot::Mle::RouteTlv *this, char a2)
{
  return ot::Tlv::SetLength((uint64_t)this, a2 + 9);
}

{
  return __ZN2ot3Mle8RouteTlv18SetRouteDataLengthEh(this, a2);
}

uint64_t ot::RouterTable::HandleTimeTick(ot::RouterTable *this)
{
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  uint64_t result = ot::Mle::Mle::IsLeader(v1);
  if ((result & 1) != 0)
  {
    uint64_t result = ot::RouterTable::GetLeaderAge(this);
    if (result >= 0xA)
    {
      ++*((_BYTE *)this + 8036);
      uint64_t result = ot::TimerMilli::GetNow((ot::TimerMilli *)result);
      *((_DWORD *)this + 2008)  = result;
    }
  }

  return result;
}

BOOL ot::RouterTable::RouterIdMap::HandleTimeTick(BOOL this)
{
  uint64_t v1 = (ot::RouterTable::RouterIdMap *)this;
  for (unsigned __int8 i = 0; i <= 0x3Eu; ++i)
  {
    this  = ot::RouterTable::RouterIdMap::IsAllocated(v1, i);
    if (!this)
    {
      if (*((_BYTE *)v1 + i)) {
        --*((_BYTE *)v1 + i);
      }
    }
  }

  return this;
}

void ot::RouterTable::LogRouteTable( ot::RouterTable *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v41 = v8;
  uint64_t v40 = ot::Array<ot::Router,(unsigned short)32,unsigned char>::end((uint64_t)this + 8);
  while (v41 != (ot::Neighbor *)v40)
  {
    ot::String<(unsigned short)128>::String((uint64_t)v42);
    unsigned __int8 RouterId = ot::Neighbor::GetRouterId(v41);
    unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(v41);
    ot::StringWriter::Append((ot::StringWriter *)v42, "    %2d 0x%04x", RouterId, Rloc16);
    int v38 = (unsigned __int16)ot::Neighbor::GetRloc16(v41);
    char v16 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    if (v38 == (unsigned __int16)ot::Mle::Mle::GetRloc16(v16))
    {
      ot::StringWriter::Append((ot::StringWriter *)v42, " - me");
    }

    else
    {
      BOOL v17 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
      if (ot::Mle::Mle::IsChild(v17)
        && (int v36 = (unsigned __int16)ot::Neighbor::GetRloc16(v41),
            char v18 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this),
            Parent  = (ot::Neighbor *)ot::Mle::Mle::GetParent(v18),
            v36 == (unsigned __int16)ot::Neighbor::GetRloc16(Parent)))
      {
        ot::StringWriter::Append((ot::StringWriter *)v42, " - parent");
      }

      else
      {
        if (ot::Neighbor::IsStateValid(v41))
        {
          unsigned __int8 LinkQualityIn = ot::Neighbor::GetLinkQualityIn(v41);
          unsigned __int8 LinkQualityOut = ot::Router::GetLinkQualityOut(v41);
          LinkCost  = ot::RouterTable::GetLinkCost(this, v41);
          ot::StringWriter::Append( (ot::StringWriter *)v42,  " - nbr{lq[i/o]:%d/%d cost:%d}",  LinkQualityIn,  LinkQualityOut,  LinkCost);
        }

        if (ot::Router::GetNextHop(v41) != 63)
        {
          NextHop  = ot::Router::GetNextHop(v41);
          Cost  = ot::Router::GetCost(v41);
          ot::StringWriter::Append((ot::StringWriter *)v42, " - nexthop{%d cost:%d}", NextHop, Cost);
        }
      }
    }

    int v32 = ot::Neighbor::GetRouterId(v41);
    uint64_t v22 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    char v23 = ot::String<(unsigned short)128>::AsCString((uint64_t)v42);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"RouterTable", "%s", v24, v25, v26, v27, v28, v29, v23);
    unsigned int v41 = (ot::Neighbor *)((char *)v41 + 248);
  }

  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"RouterTable", "Route table dump end", v9, v10, v11, v12, v13, v14, v31);
}

ot::InstanceLocator *ot::Router::Init(ot::Router *this, ot::Instance *a2)
{
  return ot::Neighbor::Init(this, a2);
}

{
  return __ZN2ot6Router4InitERNS_8InstanceE(this, a2);
}

uint64_t ot::TaskletIn<ot::RouterTable,&ot::RouterTable::HandleTableChanged>::HandleTasklet( ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(a1);
  return ((uint64_t (*)(uint64_t))ot::RouterTable::HandleTableChanged)(v2);
}

uint64_t ot::Array<ot::Router,(unsigned short)32,unsigned char>::PopBack(uint64_t a1)
{
  char v1 = *(_BYTE *)(a1 + 7936);
  *(_BYTE *)(a1 + 7936)  = v1 - 1;
  return a1 + 248LL * (v1 - 1);
}

{
  return __ZN2ot5ArrayINS_6RouterELt32EhE7PopBackEv(a1);
}

uint64_t ot::Array<ot::Router,(unsigned short)32,unsigned char>::GetMaxSize()
{
  return 32LL;
}

{
  return __ZNK2ot5ArrayINS_6RouterELt32EhE10GetMaxSizeEv();
}

ot::SourceMatchController *ot::SourceMatchController::SourceMatchController( ot::SourceMatchController *this, ot::Instance *a2)
{
  *(_BYTE *)this  = 0;
  ot::SourceMatchController::ClearTable(this);
  return this;
}

{
  ot::SourceMatchController::SourceMatchController(this, a2);
  return this;
}

void ot::SourceMatchController::ClearTable(ot::SourceMatchController *this)
{
  char v1 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  ot::Radio::ClearSrcMatchShortEntries(v1);
  uint64_t v2 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  ot::Radio::ClearSrcMatchExtEntries(v2);
  ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"SrcMatchCtrl",  "Cleared all entries",  v3,  v4,  v5,  v6,  v7,  v8,  (char)this);
}

uint64_t ot::SourceMatchController::IncrementMessageCount( ot::SourceMatchController *this, ot::Child *a2, char a3)
{
  char v5 = a3 & 1;
  uint64_t result = ot::IndirectSender::ChildInfo::IncrementIndirectMessageCount((uint64_t)a2 + 248);
  if ((v5 & 1) != 0) {
    return ot::IndirectSender::ChildInfo::IncrementApplicationMessageCount((uint64_t)a2 + 248);
  }
  return result;
}

void ot::SourceMatchController::AddEntry(ot::SourceMatchController *this, ot::Child *a2)
{
  if ((ot::SourceMatchController::IsEnabled(this) & 1) != 0)
  {
    else {
      ot::IndirectSender::ChildInfo::SetIndirectSourceMatchPending((uint64_t)a2 + 248, 0);
    }
  }

  else if (!ot::SourceMatchController::AddPendingEntries(this))
  {
    ot::SourceMatchController::Enable(this, 1);
  }

uint64_t ot::IndirectSender::ChildInfo::IncrementIndirectMessageCount(uint64_t this)
{
  return this;
}

{
  return __ZN2ot14IndirectSender9ChildInfo29IncrementIndirectMessageCountEv(this);
}

uint64_t ot::IndirectSender::ChildInfo::IncrementApplicationMessageCount(uint64_t this)
{
  *(void *)(this + 8)  = *(void *)(this + 8) & 0xFFFFC000FFFFFFFFLL | ((((HIDWORD(*(void *)(this + 8)) & 0x3FFF) + 1) & 0x3FFF) << 32);
  return this;
}

{
  return __ZN2ot14IndirectSender9ChildInfo32IncrementApplicationMessageCountEv(this);
}

void ot::SourceMatchController::DecrementMessageCount( ot::SourceMatchController *this, ot::Child *a2, char a3)
{
  char v21 = a3 & 1;
  if ((unsigned __int16)ot::IndirectSender::ChildInfo::GetIndirectMessageCount((ot::Child *)((char *)a2 + 248)))
  {
    if ((v21 & 1) != 0) {
      ot::IndirectSender::ChildInfo::DecrementApplicationMessageCount((uint64_t)a2 + 248);
    }
    ot::IndirectSender::ChildInfo::DecrementIndirectMessageCount((uint64_t)a2 + 248);
    if (!(unsigned __int16)ot::IndirectSender::ChildInfo::GetIndirectMessageCount((ot::Child *)((char *)a2 + 248)))
    {
      ApplicationMessageCount  = ot::IndirectSender::ChildInfo::GetApplicationMessageCount((ot::Child *)((char *)a2 + 248));
      if (v17 | (ApplicationMessageCount == 0)) {
        char v18 = 1;
      }
      else {
        char v18 = 0;
      }
      if ((v18 & 1) == 0)
      {
        ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)"SrcMatchCtrl",  "As IndirectMessageCount  = 0 and Application MessageCount > 0 which is invalid.",  v11,  v12,  v13,  v14,  v15,  v16,  v19);
        ot::IndirectSender::ChildInfo::ResetApplicationMessageCount((uint64_t)a2 + 248);
      }

      ot::SourceMatchController::ClearEntry(this, a2);
    }
  }

  else
  {
    char Rloc16 = ot::Neighbor::GetRloc16(a2);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)"SrcMatchCtrl",  "DecrementMessageCount(child 0x%04x) called when already at zero count.",  v4,  v5,  v6,  v7,  v8,  v9,  Rloc16);
  }

uint64_t ot::IndirectSender::ChildInfo::DecrementApplicationMessageCount(uint64_t this)
{
  if (v1 | ((*(void *)(this + 8) & 0x3FFF00000000LL) == 0)) {
    char v2 = 1;
  }
  else {
    char v2 = 0;
  }
  if ((v2 & 1) == 0) {
    *(void *)(this + 8)  = *(void *)(this + 8) & 0xFFFFC000FFFFFFFFLL | ((((HIDWORD(*(void *)(this + 8)) & 0x3FFF)
  }
                                                                            - 1) & 0x3FFF) << 32);
  return this;
}

{
  return __ZN2ot14IndirectSender9ChildInfo32DecrementApplicationMessageCountEv(this);
}

uint64_t ot::IndirectSender::ChildInfo::DecrementIndirectMessageCount(uint64_t this)
{
  return this;
}

{
  return __ZN2ot14IndirectSender9ChildInfo29DecrementIndirectMessageCountEv(this);
}

uint64_t ot::IndirectSender::ChildInfo::ResetApplicationMessageCount(uint64_t this)
{
  *(void *)(this + 8) &= 0xFFFFC000FFFFFFFFLL;
  return this;
}

{
  return __ZN2ot14IndirectSender9ChildInfo28ResetApplicationMessageCountEv(this);
}

void ot::SourceMatchController::ClearEntry(ot::SourceMatchController *this, ot::Child *a2)
{
  if ((ot::IndirectSender::ChildInfo::IsIndirectSourceMatchPending((ot::Child *)((char *)a2 + 248)) & 1) != 0)
  {
    char Rloc16 = ot::Neighbor::GetRloc16(a2);
    ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"SrcMatchCtrl",  "Clearing pending flag for 0x%04x",  v3,  v4,  v5,  v6,  v7,  v8,  Rloc16);
    ot::IndirectSender::ChildInfo::SetIndirectSourceMatchPending((uint64_t)a2 + 248, 0);
  }

  else
  {
    if ((ot::IndirectSender::ChildInfo::IsIndirectSourceMatchShort((ot::Child *)((char *)a2 + 248)) & 1) != 0)
    {
      uint64_t v26 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
      unsigned __int16 v9 = ot::Neighbor::GetRloc16(a2);
      matched  = ot::Radio::ClearSrcMatchShortEntry(v26, v9);
      char v27 = ot::Neighbor::GetRloc16(a2);
      ot::ErrorToString(matched);
      ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"SrcMatchCtrl",  "Clearing short addr: 0x%04x -- %s (%d)",  v10,  v11,  v12,  v13,  v14,  v15,  v27);
    }

    else
    {
      uint64_t ExtAddress = (void *)ot::Neighbor::GetExtAddress(a2);
      ot::Mac::ExtAddress::Set(v32, ExtAddress, 1);
      char v17 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
      matched  = ot::Radio::ClearSrcMatchExtEntry(v17, (const ot::Mac::ExtAddress *)v32);
      char v18 = (ot::Mac::ExtAddress *)ot::Neighbor::GetExtAddress(a2);
      ot::Mac::ExtAddress::ToString(v18, (ot::StringWriter *)v31);
      char v25 = ot::String<(unsigned short)17>::AsCString((uint64_t)v31);
      ot::ErrorToString(matched);
      ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"SrcMatchCtrl",  "Clearing addr: %s -- %s (%d)",  v19,  v20,  v21,  v22,  v23,  v24,  v25);
    }

    if (!matched
      && (ot::SourceMatchController::IsEnabled(this) & 1) == 0
      && !ot::SourceMatchController::AddPendingEntries(this))
    {
      ot::SourceMatchController::Enable(this, 1);
    }
  }

void ot::SourceMatchController::ResetMessageCount(ot::SourceMatchController *this, ot::Child *a2)
{
}

uint64_t ot::IndirectSender::ChildInfo::ResetIndirectMessageCount(uint64_t this)
{
  *(void *)(this + 8) &= 0xFFFFFFFFC000FFFFLL;
  return this;
}

{
  return __ZN2ot14IndirectSender9ChildInfo25ResetIndirectMessageCountEv(this);
}

void ot::SourceMatchController::SetSrcMatchAsShort(ot::SourceMatchController *this, ot::Child *a2, char a3)
{
  char v7 = a3 & 1;
  if ((ot::IndirectSender::ChildInfo::IsIndirectSourceMatchShort((ot::Child *)((char *)a2 + 248)) & 1) != (a3 & 1))
  {
    IndirectMessageCount  = ot::IndirectSender::ChildInfo::GetIndirectMessageCount((ot::Child *)((char *)a2 + 248));
    if (v4 | (IndirectMessageCount == 0)) {
      char v5 = 1;
    }
    else {
      char v5 = 0;
    }
    if ((v5 & 1) != 0)
    {
      ot::IndirectSender::ChildInfo::SetIndirectSourceMatchShort((uint64_t)a2 + 248, v7 & 1);
    }

    else
    {
      ot::SourceMatchController::ClearEntry(this, a2);
      ot::IndirectSender::ChildInfo::SetIndirectSourceMatchShort((uint64_t)a2 + 248, v7 & 1);
      ot::SourceMatchController::AddEntry(this, a2);
    }
  }

uint64_t ot::IndirectSender::ChildInfo::SetIndirectSourceMatchShort(uint64_t this, char a2)
{
  *(void *)(this + 8)  = *(void *)(this + 8) & 0xFFFFFFFFBFFFFFFFLL | ((unint64_t)(a2 & 1) << 30);
  return this;
}

{
  return __ZN2ot14IndirectSender9ChildInfo27SetIndirectSourceMatchShortEb(this, a2);
}

uint64_t ot::Radio::ClearSrcMatchShortEntries(ot::Radio *this)
{
  InstancePtr  = ot::Radio::GetInstancePtr(this);
  return otPlatRadioClearSrcMatchShortEntries((uint64_t)InstancePtr, v2, v3, v4, v5, v6, v7, v8);
}

{
  return __ZN2ot5Radio25ClearSrcMatchShortEntriesEv(this);
}

uint64_t ot::Radio::ClearSrcMatchExtEntries(ot::Radio *this)
{
  InstancePtr  = ot::Radio::GetInstancePtr(this);
  return otPlatRadioClearSrcMatchExtEntries((uint64_t)InstancePtr, v2, v3, v4, v5, v6, v7, v8);
}

{
  return __ZN2ot5Radio23ClearSrcMatchExtEntriesEv(this);
}

void ot::SourceMatchController::Enable(ot::SourceMatchController *this, char a2)
{
  *(_BYTE *)this  = a2 & 1;
  uint64_t v2 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  ot::Radio::EnableSrcMatch(v2, *(_BYTE *)this & 1);
  unsigned __int16 v9 = "En";
  if ((*(_BYTE *)this & 1) == 0) {
    unsigned __int16 v9 = "Dis";
  }
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"SrcMatchCtrl", "%sabling", v3, v4, v5, v6, v7, v8, (char)v9);
}

uint64_t ot::Radio::EnableSrcMatch(ot::Radio *this, char a2)
{
  char v10 = a2 & 1;
  InstancePtr  = ot::Radio::GetInstancePtr(this);
  return otPlatRadioEnableSrcMatch((uint64_t)InstancePtr, v10 & 1, v3, v4, v5, v6, v7, v8);
}

{
  return __ZN2ot5Radio14EnableSrcMatchEb(this, a2);
}

uint64_t ot::IndirectSender::ChildInfo::SetIndirectSourceMatchPending(uint64_t this, char a2)
{
  *(void *)(this + 8)  = *(void *)(this + 8) & 0xFFFFFFFF7FFFFFFFLL | ((unint64_t)(a2 & 1) << 31);
  return this;
}

{
  return __ZN2ot14IndirectSender9ChildInfo29SetIndirectSourceMatchPendingEb(this, a2);
}

uint64_t ot::SourceMatchController::IsEnabled(ot::SourceMatchController *this)
{
  return *(_BYTE *)this & 1;
}

{
  return __ZNK2ot21SourceMatchController9IsEnabledEv(this);
}

uint64_t ot::SourceMatchController::AddPendingEntries(ot::SourceMatchController *this)
{
  uint64_t v12 = this;
  unsigned int v11 = 0;
  char v1 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  char v9 = ot::ChildTable::Iterate(v1, 1);
  char v10 = (ot::ChildTable::IteratorBuilder *)&v9;
  v8[0]  = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v9);
  v8[1]  = v2;
  v7[0]  = ot::ChildTable::IteratorBuilder::end(v10);
  v7[1]  = v3;
  while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v8, v7))
  {
    uint64_t v6 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v8);
    if ((ot::IndirectSender::ChildInfo::IsIndirectSourceMatchPending((ot::Child *)((char *)v6 + 248)) & 1) != 0)
    {
      unsigned int v11 = ot::SourceMatchController::AddAddress(this, v6);
      if (v11) {
        return v11;
      }
      ot::IndirectSender::ChildInfo::SetIndirectSourceMatchPending((uint64_t)v6 + 248, 0);
    }

    ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v8);
  }

  return v11;
}

uint64_t ot::SourceMatchController::AddAddress(ot::SourceMatchController *this, const ot::Child *a2)
{
  if ((ot::IndirectSender::ChildInfo::IsIndirectSourceMatchShort((const ot::Child *)((char *)a2 + 248)) & 1) != 0)
  {
    uint64_t v20 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
    unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(a2);
    matched  = ot::Radio::AddSrcMatchShortEntry(v20, Rloc16);
    char v21 = ot::Neighbor::GetRloc16(a2);
    ot::ErrorToString(matched);
    ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"SrcMatchCtrl",  "Adding short addr: 0x%04x -- %s (%d)",  v3,  v4,  v5,  v6,  v7,  v8,  v21);
  }

  else
  {
    uint64_t ExtAddress = (void *)ot::Neighbor::GetExtAddress(a2);
    ot::Mac::ExtAddress::Set(v26, ExtAddress, 1);
    char v10 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
    matched  = ot::Radio::AddSrcMatchExtEntry(v10, (const ot::Mac::ExtAddress *)v26);
    unsigned int v11 = (ot::Mac::ExtAddress *)ot::Neighbor::GetExtAddress(a2);
    ot::Mac::ExtAddress::ToString(v11, (ot::StringWriter *)v25);
    char v19 = ot::String<(unsigned short)17>::AsCString((uint64_t)v25);
    ot::ErrorToString(matched);
    ot::Logger::LogAtLevel<(ot::LogLevel)5>( (ot *)"SrcMatchCtrl",  "Adding addr: %s -- %s (%d)",  v12,  v13,  v14,  v15,  v16,  v17,  v19);
  }

  return matched;
}

uint64_t ot::Radio::AddSrcMatchShortEntry(ot::Radio *this, unsigned __int16 a2)
{
  InstancePtr  = ot::Radio::GetInstancePtr(this);
  return otPlatRadioAddSrcMatchShortEntry((uint64_t)InstancePtr, a2, v3, v4, v5, v6, v7, v8);
}

{
  return __ZN2ot5Radio21AddSrcMatchShortEntryEt(this, a2);
}

uint64_t ot::Radio::AddSrcMatchExtEntry(ot::Radio *this, const ot::Mac::ExtAddress *a2)
{
  InstancePtr  = ot::Radio::GetInstancePtr(this);
  return otPlatRadioAddSrcMatchExtEntry((uint64_t)InstancePtr, (uint64_t)a2, v3, v4, v5, v6, v7, v8);
}

{
  return __ZN2ot5Radio19AddSrcMatchExtEntryERKNS_3Mac10ExtAddressE(this, a2);
}

uint64_t ot::IndirectSender::ChildInfo::IsIndirectSourceMatchPending(ot::IndirectSender::ChildInfo *this)
{
  return (*((void *)this + 1) >> 31) & 1LL;
}

{
  return __ZNK2ot14IndirectSender9ChildInfo28IsIndirectSourceMatchPendingEv(this);
}

uint64_t ot::Radio::ClearSrcMatchShortEntry(ot::Radio *this, unsigned __int16 a2)
{
  InstancePtr  = ot::Radio::GetInstancePtr(this);
  return otPlatRadioClearSrcMatchShortEntry((uint64_t)InstancePtr, a2, v3, v4, v5, v6, v7, v8);
}

{
  return __ZN2ot5Radio23ClearSrcMatchShortEntryEt(this, a2);
}

uint64_t ot::Radio::ClearSrcMatchExtEntry(ot::Radio *this, const ot::Mac::ExtAddress *a2)
{
  InstancePtr  = ot::Radio::GetInstancePtr(this);
  return otPlatRadioClearSrcMatchExtEntry((uint64_t)InstancePtr, (uint64_t)a2, v3, v4, v5, v6, v7, v8);
}

{
  return __ZN2ot5Radio21ClearSrcMatchExtEntryERKNS_3Mac10ExtAddressE(this, a2);
}

ot::ThreadNetif *ot::ThreadNetif::ThreadNetif (ot::ThreadNetif *this, ot::Instance *a2)
{
  uint64_t result = this;
  *((_BYTE *)this + 696)  = 0;
  return result;
}

{
  ot::ThreadNetif::ThreadNetif (this, a2);
  return this;
}

uint64_t ot::ThreadNetif::Up( uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*(_BYTE *)(this + 696) & 1) == 0)
  {
    otLogDebgPlat("ThreadNetif: Up", a2, a3, a4, a5, a6, a7, a8, this);
    uint64_t v8 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(v20);
    ot::Mac::Mac::SetEnabled(v8, 1);
    char v9 = (_BYTE *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(v20);
    ot::MeshForwarder::Start(v9);
    *((_BYTE *)v20 + 696)  = 1;
    ot::Ip6::Netif::SubscribeAllNodesMulticast(v20);
    char v10 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(v20);
    ot::Mle::Mle::Enable(v10, v11, v12, v13, v14, v15, v16, v17);
    IgnoreError();
    char v18 = (ot::Tmf::Agent *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(v20);
    ot::Tmf::Agent::Start(v18);
    IgnoreError();
    char v19 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(v20);
    return ot::Notifier::Signal(v19, 0x1000000LL);
  }

  return this;
}

uint64_t ot::ThreadNetif::Down( uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*(_BYTE *)(this + 696) & 1) != 0)
  {
    otLogDebgPlat("ThreadNetif: Down", a2, a3, a4, a5, a6, a7, a8, this);
    uint64_t v8 = (void **)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(v20);
    ot::Coap::CoapSecure::Stop(v8);
    char v9 = (ot::Coap::Coap *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(v20);
    ot::Coap::Coap::Stop(v9);
    IgnoreError();
    char v10 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(v20);
    ot::Mle::Mle::Disable(v10, v11, v12, v13, v14, v15, v16, v17);
    IgnoreError();
    ot::Ip6::Netif::RemoveAllExternalUnicastAddresses(v20);
    ot::Ip6::Netif::UnsubscribeAllExternalMulticastAddresses(v20);
    ot::Ip6::Netif::UnsubscribeAllRoutersMulticast(v20);
    ot::Ip6::Netif::UnsubscribeAllNodesMulticast(v20);
    *((_BYTE *)v20 + 696)  = 0;
    char v18 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(v20);
    ot::MeshForwarder::Stop(v18);
    char v19 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(v20);
    return ot::Notifier::Signal(v19, 0x1000000LL);
  }

  return this;
}

uint64_t ot::FrameData::ReadUint8(ot::FrameData *this, unsigned __int8 *a2)
{
  return ot::FrameData::ReadBytes(this, a2, 1u);
}

uint64_t ot::FrameData::ReadBytes(ot::FrameData *this, void *a2, unsigned __int16 a3)
{
  unsigned int v6 = 0;
  if (ot::FrameData::CanRead(this, a3))
  {
    Bytes  = (const void *)ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)this);
    memcpy(a2, Bytes, a3);
    ot::FrameData::SkipOver(this, a3);
  }

  else
  {
    return 6;
  }

  return v6;
}

uint64_t ot::FrameData::ReadBigEndianUint16(ot::FrameData *this, unsigned __int16 *a2)
{
  Bytes  = ot::FrameData::ReadBytes(this, a2, 2u);
  if (!Bytes) {
    *a2  = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*a2);
  }
  return Bytes;
}

uint64_t ot::FrameData::ReadBigEndianUint32(ot::FrameData *this, unsigned int *a2)
{
  Bytes  = ot::FrameData::ReadBytes(this, a2, 4u);
  if (!Bytes) {
    *a2  = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*a2);
  }
  return Bytes;
}

uint64_t ot::FrameData::ReadLittleEndianUint16(ot::FrameData *this, unsigned __int16 *a2)
{
  Bytes  = ot::FrameData::ReadBytes(this, a2, 2u);
  if (!Bytes) {
    *a2  = ot::Encoding::LittleEndian::HostSwap16(*a2);
  }
  return Bytes;
}

uint64_t ot::FrameData::ReadLittleEndianUint32(ot::FrameData *this, unsigned int *a2)
{
  Bytes  = ot::FrameData::ReadBytes(this, a2, 4u);
  if (!Bytes) {
    *a2  = ot::Encoding::LittleEndian::HostSwap32(*a2);
  }
  return Bytes;
}

uint64_t ot::FrameData::SkipOver(ot::FrameData *this, unsigned __int16 a2)
{
  Bytes  = ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)this);
  __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)this);
  return ot::Data<(ot::DataLengthType)1>::Init((uint64_t)this, Bytes + a2, Length - a2);
}

double ot::Tmf::MessageInfo::SetSockAddrToRloc(ot::Tmf::MessageInfo *this)
{
  char v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  ot::Mle::Mle::GetMeshLocal16(v1);
  return ot::Ip6::MessageInfo::SetSockAddr((__n128 *)this, v2);
}

uint64_t ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderAloc(ot::Tmf::MessageInfo *this)
{
  uint64_t v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  ot::Ip6::MessageInfo::GetPeerAddr(this);
  return ot::Mle::Mle::GetLeaderAloc(v4, v1);
}

uint64_t ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderRloc(ot::Tmf::MessageInfo *this)
{
  uint64_t v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  ot::Ip6::MessageInfo::GetPeerAddr(this);
  return ot::Mle::Mle::GetLeaderAddress(v4, v1);
}

double ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToRealmLocalAllRoutersMulticast( ot::Tmf::MessageInfo *this)
{
  *(void *)&double result = ot::Ip6::Address::SetToRealmLocalAllRoutersMulticast(v1).n128_u64[0];
  return result;
}

uint64_t ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo(ot::Tmf::MessageInfo *this, unsigned __int16 a2)
{
  uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  ot::Mle::Mle::GetMeshLocal16(v2);
  ot::Ip6::MessageInfo::SetPeerAddr((__n128 *)this, v3);
  ot::Ip6::MessageInfo::GetPeerAddr(this);
  Iid  = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v4);
  return ot::Ip6::InterfaceIdentifier::SetLocator(Iid, a2);
}

double ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo(ot::Tmf::MessageInfo *this, __n128 *a2)
{
  return ot::Ip6::MessageInfo::SetPeerAddr((__n128 *)this, a2);
}

ot::Tmf::Agent *ot::Tmf::Agent::Agent(ot::Tmf::Agent *this, ot::Instance *a2)
{
  return this;
}

{
  ot::Tmf::Agent::Agent(this, a2);
  return this;
}

uint64_t ot::Tmf::Agent::Filter( ot::Tmf::Agent *this, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3, void *a4)
{
  uint64_t v8 = v4;
  ot::Ip6::MessageInfo::GetSockAddr(a2);
  char v9 = v5;
  Sock__int16 Port = ot::Ip6::MessageInfo::GetSockPort(a2);
  if ((ot::Tmf::Agent::IsTmfMessage(a3, v8, v9, SockPort) & 1) != 0) {
    return 0LL;
  }
  else {
    return 31LL;
  }
}

uint64_t ot::Tmf::Agent::HandleResource( ot::Tmf::Agent *this, ot::Coap::CoapBase *a2, ot::Coap::Message *a3, ot::Coap::Message *a4, const ot::Ip6::MessageInfo *a5, int (*a6)(const void *, const void *))
{
  return ot::Tmf::Agent::HandleResource(this, a2, a3, a4, (uint64_t)a5, a6) & 1;
}

uint64_t ot::Tmf::Agent::Start(ot::Tmf::Agent *this)
{
  return ot::Coap::Coap::Start((uint64_t)this, 61631, 1u);
}

void ot::Tmf::Agent::HandleTmf<(ot::Uri)28>(ot::InstanceLocator *a1, ot::Tlv *a2, uint64_t a3)
{
  uint64_t v3 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>(a1);
  ot::MeshCoP::Commissioner::HandleTmf<(ot::Uri)28>(v3, a2, a3);
  uint64_t v4 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::BorderAgent>(a1);
  ot::MeshCoP::BorderAgent::HandleTmf<(ot::Uri)28>(v4, a2);
}

uint64_t ot::Tmf::Agent::HandleResource( ot::Tmf::Agent *this, ot *a2, ot::Coap::Message *a3, const ot::Ip6::MessageInfo *a4, uint64_t a5, int (*a6)(const void *, const void *))
{
  unint64_t v7 = ot::UriFromPath(a2, (const char *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6);
  if (v7 <= 0x26) {
    __asm { BR              X8 }
  }

  return 0LL;
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::PanIdQueryClient>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::PanIdQueryClient>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_16PanIdQueryClientEEERT_v(a1);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::EnergyScanClient>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::EnergyScanClient>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_16EnergyScanClientEEERT_v(a1);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkDiagnostic::Client>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::NetworkDiagnostic::Client>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_17NetworkDiagnostic6ClientEEERT_v(a1);
}

uint64_t ot::Tmf::Agent::IsTmfMessage( ot::Tmf::Agent *this, const ot::Ip6::Address *a2, const ot::Ip6::Address *a3, unsigned __int16 a4)
{
  char v9 = 0;
  if (a4 == 61631)
  {
    if (ot::Ip6::Address::IsLinkLocal(a2))
    {
      IsLinkLocalMulticast  = 1;
      if (!ot::Ip6::Address::IsLinkLocal(a3)) {
        IsLinkLocalMulticast  = ot::Ip6::Address::IsLinkLocalMulticast(a3);
      }
      char v9 = IsLinkLocalMulticast;
    }

    else
    {
      uint64_t v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
      if (ot::Mle::Mle::IsMeshLocalAddress(v4, a2))
      {
        uint64_t v5 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
        if (ot::Mle::Mle::IsMeshLocalAddress(v5, a3)
          || ot::Ip6::Address::IsLinkLocalMulticast(a3)
          || ot::Ip6::Address::IsRealmLocalMulticast(a3))
        {
          char v9 = 1;
        }
      }
    }
  }

  return v9 & 1;
}

uint64_t ot::Tmf::Agent::PriorityToDscp(char a1)
{
  unsigned __int8 v3 = 15;
  if (a1)
  {
    BOOL v1 = a1 == 2 || a1 == 1;
    if (!v1 && a1 == 3) {
      return 7;
    }
  }

  else
  {
    return 23;
  }

  return v3;
}

uint64_t ot::Tmf::Agent::DscpToPriority(ot::Tmf::Agent *this)
{
  unsigned __int8 v2 = 3;
  if (this != 7)
  {
    if (this == 15)
    {
      return 1;
    }

    else if (this == 23)
    {
      return 0;
    }
  }

  return v2;
}

ot::Tmf::SecureAgent *ot::Tmf::SecureAgent::SecureAgent(ot::Tmf::SecureAgent *this, ot::Instance *a2)
{
  return this;
}

{
  ot::Tmf::SecureAgent::SecureAgent(this, a2);
  return this;
}

uint64_t ot::Tmf::SecureAgent::HandleResource( ot::Tmf::SecureAgent *this, ot::Coap::CoapBase *a2, ot::Coap::Message *a3, ot::Coap::Message *a4, const ot::Ip6::MessageInfo *a5, int (*a6)(const void *, const void *))
{
  return ot::Tmf::SecureAgent::HandleResource(this, a2, a3, a4, (uint64_t)a5, a6) & 1;
}

uint64_t ot::Tmf::SecureAgent::HandleResource( ot::Tmf::SecureAgent *this, ot *a2, ot::Coap::Message *a3, const ot::Ip6::MessageInfo *a4, uint64_t a5, int (*a6)(const void *, const void *))
{
  unint64_t v7 = ot::UriFromPath(a2, (const char *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6) - 11;
  if (v7 <= 0x14) {
    __asm { BR              X8 }
  }

  return 0LL;
}

uint64_t ot::Instance::Get<ot::PanIdQueryClient>(uint64_t a1)
{
  return ot::MeshCoP::Commissioner::GetPanIdQueryClient((ot::MeshCoP::Commissioner *)(a1 + 160248));
}

{
  return __ZN2ot8Instance3GetINS_16PanIdQueryClientEEERT_v(a1);
}

uint64_t ot::Instance::Get<ot::EnergyScanClient>(uint64_t a1)
{
  return ot::MeshCoP::Commissioner::GetEnergyScanClient((ot::MeshCoP::Commissioner *)(a1 + 160248));
}

{
  return __ZN2ot8Instance3GetINS_16EnergyScanClientEEERT_v(a1);
}

ot::InstanceLocator *ot::Neighbor::SetState(ot::InstanceLocator *result, char a2)
{
  uint64_t v4 = result;
  if (a2 != (*((_BYTE *)result + 98) & 0xF))
  {
    *((_BYTE *)result + 98)  = *((_BYTE *)result + 98) & 0xF0 | a2 & 0xF;
    if ((*((_BYTE *)result + 98) & 0xF) == 7)
    {
      unsigned __int8 v2 = (ot::Uptime *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Uptime>(result);
      Uptime  = ot::Uptime::GetUptime(v2);
      double result = (ot::InstanceLocator *)ot::Uptime::MsecToSec(Uptime);
      *((_DWORD *)v4 + 3ot::NetworkData::NetworkDataTlv::SetType(this, 3) = (_DWORD)result;
    }
  }

  return result;
}

unint64_t ot::Uptime::MsecToSec(unint64_t this)
{
  return this / 0x3E8;
}

{
  return __ZN2ot6Uptime9MsecToSecEy(this);
}

uint64_t ot::Neighbor::GetConnectionTime(ot::Neighbor *this)
{
  if (ot::Neighbor::IsStateValid(this))
  {
    BOOL v1 = (ot::Uptime *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Uptime>(this);
    Uptime  = ot::Uptime::GetUptime(v1);
    return (ot::Uptime::MsecToSec(Uptime) - *((_DWORD *)this + 33));
  }

  else
  {
    return 0;
  }

uint64_t ot::Neighbor::AddressMatcher::Matches(ot::Neighbor::AddressMatcher *this, const ot::Neighbor *a2)
{
  char v7 = 0;
  if ((ot::Neighbor::MatchesFilter((uint64_t)a2, *(_BYTE *)this) & 1) != 0)
  {
    if (*((unsigned __int16 *)this + 1) == 65534
      || (int v5 = *((unsigned __int16 *)this + 1), v5 == (unsigned __int16)ot::Neighbor::GetRloc16(a2)))
    {
      if (!*((void *)this + 1)
        || (uint64_t v4 = (const void *)*((void *)this + 1),
            uint64_t ExtAddress = (const void *)ot::Neighbor::GetExtAddress(a2),
            ot::Equatable<ot::Mac::ExtAddress>::operator==(v4, ExtAddress)))
      {
        char v7 = 1;
      }
    }
  }

  return v7 & 1;
}

uint64_t ot::Neighbor::MatchesFilter(uint64_t a1, unsigned __int8 a2)
{
  if (a2 <= 7uLL) {
    __asm { BR              X8 }
  }

  return 0LL;
}

void *ot::Neighbor::Info::SetFrom(ot::Neighbor::Info *this, const ot::Neighbor *a2)
{
  uint64_t v17 = this;
  uint64_t v16 = a2;
  ot::Clearable<ot::Neighbor::Info>::Clear(this);
  uint64_t ExtAddress = (ot::TimerMilli *)ot::Neighbor::GetExtAddress(v16);
  *(void *)this  = *(void *)ExtAddress;
  int Now = ot::TimerMilli::GetNow(ExtAddress);
  int LastHeard = ot::Neighbor::GetLastHeard(v16);
  unsigned __int8 v3 = (ot::Time *)ot::Time::operator-(&Now, &LastHeard);
  *((_DWORD *)this + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = ot::Time::MsecToSec(v3);
  *((_WORD *)this + 8)  = ot::Neighbor::GetRloc16(v16);
  LinkFrameuint64_t Counters = (ot::Mac::LinkFrameCounters *)ot::Neighbor::GetLinkFrameCounters(v16);
  *((_DWORD *)this + 5)  = ot::Mac::LinkFrameCounters::GetMaximum(LinkFrameCounters);
  *((_DWORD *)this + 6)  = ot::Neighbor::GetMleFrameCounter(v16);
  *((_BYTE *)this + 28)  = ot::Neighbor::GetLinkQualityIn(v16);
  LinkInfo  = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v16);
  *((_BYTE *)this + 4ot::NetworkData::NetworkDataTlv::SetType(this, 4) = ot::LinkQualityInfo::GetAverageRss(LinkInfo);
  unsigned int v6 = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v16);
  *((_BYTE *)this + 45)  = ot::LinkQualityInfo::GetLastRss(v6);
  char v7 = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v16);
  *((_BYTE *)this + 46)  = ot::LinkQualityInfo::GetLinkMargin(v7);
  uint64_t v8 = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v16);
  *((_WORD *)this + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = ot::LinkQualityInfo::GetFrameErrorRate(v8);
  char v9 = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v16);
  *((_WORD *)this + 25)  = ot::LinkQualityInfo::GetMessageErrorRate(v9);
  *((_BYTE *)this + 5ot::NetworkData::NetworkDataTlv::SetType(this, 4) = *((_BYTE *)this + 54) & 0xFE | ot::Neighbor::IsRxOnWhenIdle(v16);
  *((_BYTE *)this + 5ot::NetworkData::NetworkDataTlv::SetType(this, 4) = *((_BYTE *)this + 54) & 0xFD | (2 * ot::Neighbor::IsFullThreadDevice(v16));
  *((_BYTE *)this + 5ot::NetworkData::NetworkDataTlv::SetType(this, 4) = *((_BYTE *)this + 54) & 0xFB | (4 * !ot::Neighbor::GetNetworkDataType(v16));
  *((_WORD *)this + 26)  = ot::Neighbor::GetVersion(v16);
  *((_DWORD *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 3) = ot::Neighbor::GetConnectionTime(v16);
  *((_BYTE *)this + 2ot::NetworkDiagnostic::Tlv::SetType(this, 9) = ot::Neighbor::GetVersion(v16);
  *((_BYTE *)this + 3ot::NetworkData::NetworkDataTlv::SetType(this, 1) = ot::Neighbor::GetLeaderFullDataVersion(v16);
  *((_BYTE *)this + 3ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = ot::Neighbor::GetLeaderStableDataVersion(v16);
  *((_BYTE *)this + 3ot::NetworkData::NetworkDataTlv::SetType(this, 0) = ot::Neighbor::GetIdSeqNum(v16);
  char v10 = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v16);
  *((_DWORD *)this + ot::NetworkDiagnostic::Tlv::SetType(this, 9) = ot::LinkQualityInfo::GetHomeKitMessageErrorRatePercent(v10);
  uint64_t v11 = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v16);
  *((_DWORD *)this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 0) = ot::LinkQualityInfo::GetMatterMessageErrorRatePercent(v11);
  *((_BYTE *)this + 5ot::NetworkData::NetworkDataTlv::SetType(this, 4) = *((_BYTE *)this + 54) & 0xEF | (16 * (ot::Neighbor::IsEnhacedAckEnabled(v16) & 1));
  memcpy((char *)this + 56, (char *)v16 + 176, 0x40uLL);
  return memcpy((char *)this + 120, (char *)v16 + 4, 0x24uLL);
}

void *ot::Clearable<ot::Neighbor::Info>::Clear(void *a1)
{
  return memset(a1, 0, 0xA0uLL);
}

{
  return __ZN2ot9ClearableINS_8Neighbor4InfoEE5ClearEv(a1);
}

uint64_t ot::LinkQualityInfo::GetFrameErrorRate(ot::LinkQualityInfo *this)
{
  return (unsigned __int16)ot::SuccessRateTracker::GetFailureRate((ot::LinkQualityInfo *)((char *)this + 4));
}

{
  return __ZNK2ot15LinkQualityInfo17GetFrameErrorRateEv(this);
}

uint64_t ot::LinkQualityInfo::GetMessageErrorRate(ot::LinkQualityInfo *this)
{
  return (unsigned __int16)ot::SuccessRateTracker::GetFailureRate((ot::LinkQualityInfo *)((char *)this + 6));
}

{
  return __ZNK2ot15LinkQualityInfo19GetMessageErrorRateEv(this);
}

uint64_t ot::Neighbor::GetLeaderFullDataVersion(ot::Neighbor *this)
{
  return *((unsigned __int8 *)this + 99);
}

{
  return __ZNK2ot8Neighbor24GetLeaderFullDataVersionEv(this);
}

uint64_t ot::Neighbor::GetLeaderStableDataVersion(ot::Neighbor *this)
{
  return *((unsigned __int8 *)this + 100);
}

{
  return __ZNK2ot8Neighbor26GetLeaderStableDataVersionEv(this);
}

uint64_t ot::Neighbor::GetIdSeqNum(ot::Neighbor *this)
{
  return *((unsigned __int8 *)this + 101);
}

{
  return __ZNK2ot8Neighbor11GetIdSeqNumEv(this);
}

ot::InstanceLocator *ot::Neighbor::Init(ot::Neighbor *this, ot::Instance *a2)
{
  return ot::Neighbor::SetState(this, 0);
}

void ot::LinkQualityInfo::Init(ot::LinkQualityInfo *this, ot::Instance *a2)
{
}

{
  __ZN2ot15LinkQualityInfo4InitERNS_8InstanceE(this, a2);
}

uint64_t ot::Neighbor::IsStateValidOrAttaching(ot::Neighbor *this)
{
  char v4 = 0;
  int State = ot::Neighbor::GetState(this);
  if (State)
  {
  }

  return v4 & 1;
}

BOOL ot::Neighbor::IsStateChildIdRequest(ot::Neighbor *this)
{
  return (*((_BYTE *)this + 98) & 0xF) == 4;
}

{
  return __ZNK2ot8Neighbor21IsStateChildIdRequestEv(this);
}

uint64_t ot::Neighbor::SetLastRxFragmentTag(ot::Neighbor *this, __int16 a2)
{
  if (a2) {
    __int16 v3 = a2;
  }
  else {
    __int16 v3 = -1;
  }
  *((_WORD *)this + 4ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = v3;
  uint64_t result = ot::TimerMilli::GetNow(this);
  *((_DWORD *)this + 2ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = result;
  return result;
}

BOOL ot::Neighbor::IsLastRxFragmentTagSet(ot::Neighbor *this)
{
  unsigned int v6 = this;
  BOOL v3 = 0;
  if (*((_WORD *)this + 42))
  {
    int Now = ot::TimerMilli::GetNow(0LL);
    int v4 = ot::Time::operator+((_DWORD *)this + 22, 20000);
    return ot::Time::operator<=(&Now, &v4);
  }

  return v3;
}

void ot::Neighbor::GenerateChallenge(ot::Neighbor *this)
{
}

uint64_t ot::Neighbor::SetDeviceMode(uint64_t a1, char a2)
{
  char v12 = a2;
  *(_BYTE *)(a1 + 98)  = *(_BYTE *)(a1 + 98) & 0xF | (16 * (ot::Mle::DeviceMode::Get((ot::Mle::DeviceMode *)&v12) & 0xF));
  Instance  = ot::InstanceLocator::GetInstance((ot::InstanceLocator *)a1);
  unsigned __int16 v10 = *(_WORD *)(a1 + 96);
  BOOL IsRxOnWhenIdle = ot::Mle::DeviceMode::IsRxOnWhenIdle((ot::Mle::DeviceMode *)&v12);
  return otPowerControlSetRxOnWhenIdle((uint64_t)Instance, v10, IsRxOnWhenIdle, v3, v4, v5, v6, v7);
}

uint64_t ot::Neighbor::GetTxPower(ot::Neighbor *this)
{
  return *((unsigned __int8 *)this + 136);
}

uint64_t ot::Neighbor::SetTxPower(uint64_t this, char a2)
{
  *(_BYTE *)(this + 136)  = a2;
  return this;
}

uint64_t ot::Neighbor::GetCodeWordCount(ot::Neighbor *this)
{
  return *((unsigned __int8 *)this + 162);
}

uint64_t ot::Neighbor::SetCodeWordCount(uint64_t this, char a2)
{
  *(_BYTE *)(this + 16ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = a2;
  return this;
}

uint64_t ot::Neighbor::SetIntegral(uint64_t this, int a2)
{
  *(_DWORD *)(this + 14ot::NetworkData::NetworkDataTlv::SetType(this, 0) = a2;
  return this;
}

uint64_t ot::Neighbor::GetIntegral(ot::Neighbor *this)
{
  return *((unsigned int *)this + 35);
}

uint64_t ot::Neighbor::IsLMProbeInterval(ot::Neighbor *this, unsigned int a2)
{
  if (*((_DWORD *)this + 42) > a2)
  {
    *((_DWORD *)this + 42) -= a2;
    char v5 = 0;
  }

  else
  {
    Instance  = ot::InstanceLocator::GetInstance(this);
    *((_DWORD *)this + 4ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 1000 * otPowerControlGetLinkMetricsProbeInterval((uint64_t)Instance);
    char v5 = 1;
  }

  return v5 & 1;
}

uint64_t ot::Neighbor::GetPowerControlMode(ot::Neighbor *this)
{
  return *((unsigned int *)this + 37);
}

uint64_t ot::Neighbor::SetPowerControlMode(ot::InstanceLocator *a1, int a2)
{
  *((_DWORD *)a1 + 3ot::ThreadTlv::SetType(this, 7) = a2;
  Instance  = ot::InstanceLocator::GetInstance(a1);
  LinkMetricsProbeInterval  = otPowerControlGetLinkMetricsProbeInterval((uint64_t)Instance);
  uint64_t result = ot::Random::NonCrypto::GetUint32InRange(0LL, 1000 * LinkMetricsProbeInterval);
  *((_DWORD *)a1 + 4ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = result;
  if (!a2) {
    return ot::Neighbor::SetTxPower((uint64_t)a1, 255);
  }
  return result;
}

uint64_t ot::Neighbor::SetVendorId(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 16ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a2;
  return this;
}

uint64_t ot::Neighbor::SetVendorSpecificInfo(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 166)  = a2;
  return this;
}

uint64_t ot::Neighbor::UpdateAckStatus(uint64_t this, char a2)
{
  if ((a2 & 1) != 0) {
    *(_BYTE *)(this + 144) *= 2;
  }
  else {
    *(_BYTE *)(this + 14ot::NetworkData::NetworkDataTlv::SetType(this, 4) = (2 * *(_BYTE *)(this + 144)) | 1;
  }
  return this;
}

uint64_t ot::Neighbor::GetLostAckCountInWindow(ot::Neighbor *this)
{
  unsigned __int8 v3 = 0;
  for (int i = 0; i < 4; ++i)
  {
  }

  return v3;
}

uint64_t ot::Neighbor::ResetPowerControlData(uint64_t this)
{
  *(_DWORD *)(this + 15ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0;
  *(_WORD *)(this + 156)  = 0;
  *(_WORD *)(this + 158)  = 0;
  *(_WORD *)(this + 16ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0;
  *(_BYTE *)(this + 16ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0;
  return this;
}

uint64_t ot::Neighbor::UpdateMeasurementWindowStatistics( uint64_t this, unsigned __int8 a2, char a3, unsigned __int8 a4)
{
  *(_DWORD *)(this + 152) += (a2 + 8) * a4;
  ++*(_WORD *)(this + 156);
  *(_WORD *)(this + 158) += a3;
  *(_WORD *)(this + 160) += a2 + 8;
  if (*(_WORD *)(this + 156) == 100)
  {
    *(_DWORD *)(this + 15ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0;
    *(_WORD *)(this + 156)  = 0;
    *(_WORD *)(this + 158)  = 0;
    *(_WORD *)(this + 16ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0;
  }

  return this;
}

BOOL ot::Neighbor::AggregateLinkMetrics( ot::Neighbor *this, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4, char a5)
{
  uint64_t v14 = this;
  unsigned __int8 v13 = a2;
  unsigned __int8 v12 = a3;
  unsigned __int8 v11 = a4;
  char v10 = a5;
  v9[1]  = (uint64_t)this + 120;
  v9[0]  = ot::LinkedList<ot::LinkMetrics::SeriesInfo>::begin((uint64_t)this + 120);
  uint64_t v8 = ot::LinkedList<ot::LinkMetrics::SeriesInfo>::end();
  while (1)
  {
    BOOL result = ot::ItemPtrIterator<ot::LinkMetrics::SeriesInfo,ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Iterator>::operator!=( v9,  &v8);
    if (!result) {
      break;
    }
    uint64_t v7 = (ot::LinkMetrics::SeriesInfo *)ot::ItemPtrIterator<ot::LinkMetrics::SeriesInfo,ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Iterator>::operator*((uint64_t)v9);
    ot::ItemPtrIterator<ot::LinkMetrics::SeriesInfo,ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Iterator>::operator++(v9);
  }

  return result;
}

uint64_t ot::LinkedList<ot::LinkMetrics::SeriesInfo>::begin(uint64_t a1)
{
  Head  = ot::LinkedList<ot::LinkMetrics::SeriesInfo>::GetHead(a1);
  ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(&v3, Head);
  return v3;
}

{
  return __ZN2ot10LinkedListINS_11LinkMetrics10SeriesInfoEE5beginEv(a1);
}

uint64_t ot::LinkedList<ot::LinkMetrics::SeriesInfo>::end()
{
  return v1;
}

{
  return __ZN2ot10LinkedListINS_11LinkMetrics10SeriesInfoEE3endEv();
}

BOOL ot::ItemPtrIterator<ot::LinkMetrics::SeriesInfo,ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Iterator>::operator!=( void *a1, void *a2)
{
  return *a1 != *a2;
}

{
  return __ZNK2ot15ItemPtrIteratorINS_11LinkMetrics10SeriesInfoENS_10LinkedListIS2_E8IteratorEEneERKS5_(a1, a2);
}

uint64_t ot::ItemPtrIterator<ot::LinkMetrics::SeriesInfo,ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Iterator>::operator*( uint64_t a1)
{
  return *(void *)a1;
}

{
  return __ZN2ot15ItemPtrIteratorINS_11LinkMetrics10SeriesInfoENS_10LinkedListIS2_E8IteratorEEdeEv(a1);
}

uint64_t ot::LinkMetrics::SeriesInfo::GetSeriesId(ot::LinkMetrics::SeriesInfo *this)
{
  return *((unsigned __int8 *)this + 8);
}

{
  return __ZNK2ot11LinkMetrics10SeriesInfo11GetSeriesIdEv(this);
}

uint64_t ot::ItemPtrIterator<ot::LinkMetrics::SeriesInfo,ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Iterator>::operator++( uint64_t *a1)
{
  return ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Iterator::Advance(a1);
}

{
  return __ZN2ot15ItemPtrIteratorINS_11LinkMetrics10SeriesInfoENS_10LinkedListIS2_E8IteratorEEppEv(a1);
}

void ot::Neighbor::GetForwardTrackingSeriesInfo(ot::Neighbor *this, ot::LinkMetrics::SeriesInfo *a2)
{
}

void ot::LinkedList<ot::LinkMetrics::SeriesInfo>::FindMatching<unsigned char>( uint64_t a1, ot::LinkMetrics::SeriesInfo *a2)
{
}

{
  __ZN2ot10LinkedListINS_11LinkMetrics10SeriesInfoEE12FindMatchingIhEEPS2_RKT_(a1, a2);
}

void *ot::Neighbor::AddForwardTrackingSeriesInfo(ot::Neighbor *this, ot::LinkMetrics::SeriesInfo *a2)
{
  return ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Push((uint64_t *)this + 15, a2);
}

uint64_t ot::Neighbor::RemoveForwardTrackingSeriesInfo(ot::Neighbor *this, ot::LinkMetrics::SeriesInfo *a2)
{
  return ot::LinkedList<ot::LinkMetrics::SeriesInfo>::RemoveMatching<unsigned char>( (ot::Neighbor *)((char *)this + 120),  a2);
}

uint64_t ot::LinkedList<ot::LinkMetrics::SeriesInfo>::RemoveMatching<unsigned char>( ot::LinkMetrics::SeriesInfo *a1, ot::LinkMetrics::SeriesInfo *a2)
{
  char v6[2] = a1;
  v6[1]  = a2;
  ot::LinkedList<ot::LinkMetrics::SeriesInfo>::FindMatching<unsigned char>((uint64_t)a1, (const unsigned __int8 *)a2, v6);
  uint64_t v5 = v2;
  if (v2) {
    ot::LinkedList<ot::LinkMetrics::SeriesInfo>::PopAfter((uint64_t *)a1, (void *)v6[0]);
  }
  return v5;
}

{
  return __ZN2ot10LinkedListINS_11LinkMetrics10SeriesInfoEE14RemoveMatchingIhEEPS2_RKT_(a1, a2);
}

BOOL ot::Neighbor::RemoveAllForwardTrackingSeriesInfo(ot::Neighbor *this)
{
  while (1)
  {
    BOOL result = ot::LinkedList<ot::LinkMetrics::SeriesInfo>::IsEmpty((void *)this + 15);
    if (result) {
      break;
    }
    uint64_t v4 = (ot::LinkMetrics::SeriesInfo *)ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Pop((uint64_t *)this + 15);
    uint64_t v2 = (ot::LinkMetrics::Subject *)ot::GetProvider<ot::InstanceLocator>::Get<ot::LinkMetrics::Subject>(this);
    ot::LinkMetrics::Subject::Free(v2, v4);
  }

  return result;
}

BOOL ot::LinkedList<ot::LinkMetrics::SeriesInfo>::IsEmpty(void *a1)
{
  return *a1 == 0LL;
}

{
  return __ZNK2ot10LinkedListINS_11LinkMetrics10SeriesInfoEE7IsEmptyEv(a1);
}

char *ot::Neighbor::StateToString(unsigned __int8 a1)
{
  return ot::Neighbor::StateToString(ot::Neighbor::State)::kStateStrings[a1];
}

uint64_t ot::Child::Info::SetFrom(ot::Child::Info *this, const ot::Child *a2)
{
  uint64_t v15 = this;
  uint64_t v14 = a2;
  ot::Clearable<ot::Child::Info>::Clear(this);
  *(void *)this  = *(void *)ot::Neighbor::GetExtAddress(v14);
  *((_DWORD *)this + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = ot::Child::GetTimeout(v14);
  *((_WORD *)this + 1ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = ot::Neighbor::GetRloc16(v14);
  unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(v14);
  *((_WORD *)this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 3) = ot::Mle::ChildIdFromRloc16((ot::Mle *)Rloc16);
  NetworkDataunsigned __int16 Version = (ot::TimerMilli *)ot::Child::GetNetworkDataVersion(v14);
  *((_BYTE *)this + 28)  = (_BYTE)NetworkDataVersion;
  int Now = ot::TimerMilli::GetNow(NetworkDataVersion);
  int LastHeard = ot::Neighbor::GetLastHeard(v14);
  uint64_t v4 = (ot::Time *)ot::Time::operator-(&Now, &LastHeard);
  *((_DWORD *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 3) = ot::Time::MsecToSec(v4);
  *((_BYTE *)this + 2ot::NetworkDiagnostic::Tlv::SetType(this, 9) = ot::Neighbor::GetLinkQualityIn(v14);
  LinkInfo  = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v14);
  *((_BYTE *)this + 3ot::NetworkData::NetworkDataTlv::SetType(this, 0) = ot::LinkQualityInfo::GetAverageRss(LinkInfo);
  int v6 = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v14);
  *((_BYTE *)this + 3ot::NetworkData::NetworkDataTlv::SetType(this, 1) = ot::LinkQualityInfo::GetLastRss(v6);
  uint64_t v7 = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v14);
  *((_WORD *)this + 16)  = ot::LinkQualityInfo::GetFrameErrorRate(v7);
  uint64_t v8 = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v14);
  *((_WORD *)this + 1ot::ThreadTlv::SetType(this, 7) = ot::LinkQualityInfo::GetMessageErrorRate(v8);
  *((_WORD *)this + 18)  = ot::IndirectSender::ChildInfo::GetIndirectMessageCount((ot::Neighbor *)((char *)v14 + 248));
  unsigned __int16 Version = ot::Neighbor::GetVersion(v14);
  *((_BYTE *)this + 4ot::NetworkData::NetworkDataTlv::SetType(this, 0) = ot::ClampToUint8<unsigned short>(Version);
  *((_BYTE *)this + 5ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = *((_BYTE *)this + 52) & 0xFE | ot::Neighbor::IsRxOnWhenIdle(v14);
  *((_BYTE *)this + 5ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = *((_BYTE *)this + 52) & 0xFD | (2 * ot::Neighbor::IsFullThreadDevice(v14));
  *((_BYTE *)this + 5ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = *((_BYTE *)this + 52) & 0xFB | (4 * !ot::Neighbor::GetNetworkDataType(v14));
  *((_BYTE *)this + 5ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = *((_BYTE *)this + 52) & 0xF7 | (8 * ot::Neighbor::IsStateRestoring(v14));
  *((_WORD *)this + 1ot::NetworkDiagnostic::Tlv::SetType(this, 9) = ot::Child::GetSupervisionInterval(v14);
  *((_BYTE *)this + 5ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = *((_BYTE *)this + 52) & 0xEF | (16
                                                        * ot::CslTxScheduler::ChildInfo::IsCslSynchronized((ot::Neighbor *)((char *)v14 + 272)));
  *((_BYTE *)this + 4ot::NetworkData::NetworkDataTlv::SetType(this, 1) = ot::CslTxScheduler::ChildInfo::GetCslChannel((ot::Neighbor *)((char *)v14 + 272));
  *((_DWORD *)this + ot::Mle::Tlv::SetType(this, 11) = ot::CslTxScheduler::ChildInfo::GetCslTimeout((ot::Neighbor *)((char *)v14 + 272));
  *((_WORD *)this + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = ot::CslTxScheduler::ChildInfo::GetCslPeriod((ot::Neighbor *)((char *)v14 + 272));
  *((_WORD *)this + 25)  = ot::CslTxScheduler::ChildInfo::GetCslPhase((ot::Neighbor *)((char *)v14 + 272));
  uint64_t result = ot::Neighbor::GetConnectionTime(v14);
  *((void *)this + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = result;
  return result;
}

void *ot::Clearable<ot::Child::Info>::Clear(void *a1)
{
  return memset(a1, 0, 0x38uLL);
}

{
  return __ZN2ot9ClearableINS_5Child4InfoEE5ClearEv(a1);
}

uint64_t ot::ClampToUint8<unsigned short>(unsigned __int16 a1)
{
  return ot::Min<unsigned short>(a1, 0xFFu);
}

{
  return __ZN2ot12ClampToUint8ItEEhT_(a1);
}

uint64_t ot::Child::AddressIterator::GetAddress(ot::Child::AddressIterator *this)
{
  if (!*((_WORD *)this + 5)) {
    return (uint64_t)this + 12;
  }
  else {
    return *(void *)this + 304LL + 16LL * (*((unsigned __int16 *)this + 5) - 1);
  }
}

uint64_t ot::Child::AddressIterator::Update(ot::Child::AddressIterator *this)
{
  if (!*((_WORD *)this + 5)
    && ot::Child::GetMeshLocalIp6Address( *(ot::Child **)this,  (ot::Child::AddressIterator *)((char *)this + 12)))
  {
    ++*((_WORD *)this + 5);
  }

  while (1)
  {
    uint64_t result = ot::Child::AddressIterator::GetAddress(this);
    uint64_t v3 = (ot::Ip6::Address *)result;
    if (!result) {
      break;
    }
    uint64_t result = ot::Ip6::Address::IsUnspecified((ot::Ip6::Address *)result);
    if ((result & 1) != 0) {
      break;
    }
    uint64_t result = ot::Ip6::Address::MatchesFilter((uint64_t)v3, *((_BYTE *)this + 8));
    if ((result & 1) != 0) {
      return result;
    }
    ++*((_WORD *)this + 5);
  }

  *((_WORD *)this + 5)  = 16;
  return result;
}

uint64_t ot::Child::GetMeshLocalIp6Address(ot::Child *this, ot::Ip6::Address *a2)
{
  unsigned int v6 = 0;
  if (ot::Ip6::InterfaceIdentifier::IsUnspecified((ot::Child *)((char *)this + 296)))
  {
    return 23;
  }

  else
  {
    uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    ot::Mle::Mle::GetMeshLocalPrefix(v2);
    ot::Ip6::Address::SetPrefix(a2, v3);
    ot::Ip6::Address::SetIid(a2, (ot::Child *)((char *)this + 296));
  }

  return v6;
}

ot::InstanceLocator *ot::Child::Clear(ot::Child *this)
{
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  bzero(this, 0x240uLL);
  *((_DWORD *)this + 14ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0;
  *((_BYTE *)this + 57ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0;
  *((_BYTE *)this + 57ot::NetworkData::NetworkDataTlv::SetType(this, 3) = 0;
  return ot::Child::Init(this, Instance);
}

_WORD *ot::Child::ClearIp6Addresses(ot::Child *this)
{
  uint64_t result = ot::Clearable<ot::BitVector<(unsigned short)15>>::Clear((_WORD *)this + 275);
  *((_DWORD *)this + 14ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0;
  *((_BYTE *)this + 57ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0;
  *((_BYTE *)this + 57ot::NetworkData::NetworkDataTlv::SetType(this, 3) = 0;
  return result;
}

_WORD *ot::Clearable<ot::BitVector<(unsigned short)15>>::Clear(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

{
  return __ZN2ot9ClearableINS_9BitVectorILt15EEEE5ClearEv(result);
}

uint64_t ot::Child::SetDeviceMode(ot::Neighbor *a1, char a2)
{
  char v7 = a2;
  unsigned int v6 = a1;
  char DeviceMode = ot::Neighbor::GetDeviceMode(a1);
  uint64_t result = ot::Unequatable<ot::Mle::DeviceMode>::operator!=(&v7, &DeviceMode);
  if ((result & 1) != 0)
  {
    ot::Neighbor::SetDeviceMode((uint64_t)a1, v7);
    uint64_t result = ot::Neighbor::IsStateValid(a1);
    if ((result & 1) != 0)
    {
      uint64_t v3 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(a1);
      return ot::NeighborTable::Signal(v3, 2u, a1);
    }
  }

  return result;
}

uint64_t ot::Child::AddIp6Address(ot::Child *this, const ot::Ip6::Address *a2)
{
  unsigned int v6 = 0;
  if (ot::Ip6::Address::IsUnspecified(a2))
  {
    return 7;
  }

  else
  {
    uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    if (ot::Mle::Mle::IsMeshLocalAddress(v2, a2))
    {
      else {
        return 24;
      }
    }

    else
    {
      for (int i = (ot::Child *)((char *)this + 304);
            i != (ot::Child *)((char *)this + 544);
            int i = (ot::Ip6::Address *)((char *)i + 16))
      {
        if (ot::Ip6::Address::IsUnspecified(i))
        {
          *(_OWORD *)int i = *(_OWORD *)a2;
          return v6;
        }

        if (!ot::Unequatable<ot::Ip6::Address>::operator!=(i, a2)) {
          return 24;
        }
      }

      return 3;
    }
  }

  return v6;
}

uint64_t ot::Child::RemoveIp6Address(ot::Child *this, const ot::Ip6::Address *a2)
{
  unsigned int v7 = 23;
  if (ot::Ip6::Address::IsUnspecified(a2))
  {
    return 7;
  }

  else
  {
    uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    if (ot::Mle::Mle::IsMeshLocalAddress(v2, a2))
    {
      Iid  = (const void *)ot::Ip6::Address::GetIid(a2);
      if (ot::Equatable<ot::Ip6::InterfaceIdentifier>::operator==(Iid, (char *)this + 296))
      {
        ot::Clearable<ot::Ip6::InterfaceIdentifier>::Clear((void *)this + 37);
        return 0;
      }
    }

    else
    {
      for (unsigned __int16 i = 0; i < 0xFu; ++i)
      {
        if (ot::Equatable<ot::Ip6::Address>::operator==((char *)this + 16 * i + 304, a2))
        {
          unsigned int v7 = 0;
          break;
        }
      }

      if (!v7)
      {
        while (i < 0xEu)
        {
          *((_OWORD *)this + i + 1ot::NetworkDiagnostic::Tlv::SetType(this, 9) = *((_OWORD *)this + i + 20);
          ++i;
        }

        ot::Clearable<ot::Ip6::Address>::Clear((void *)this + 66);
      }
    }
  }

  return v7;
}

BOOL ot::Child::HasIp6Address(ot::Child *this, const ot::Ip6::Address *a2)
{
  BOOL v7 = 0;
  if (!ot::Ip6::Address::IsUnspecified(a2))
  {
    uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    if (ot::Mle::Mle::IsMeshLocalAddress(v2, a2))
    {
      Iid  = (const void *)ot::Ip6::Address::GetIid(a2);
      return ot::Equatable<ot::Ip6::InterfaceIdentifier>::operator==(Iid, (char *)this + 296);
    }

    else
    {
      for (unsigned __int16 i = (char *)this + 304;
            i != (char *)this + 544 && !ot::Ip6::Address::IsUnspecified((ot::Ip6::Address *)i);
            i += 16)
      {
        if (ot::Equatable<ot::Ip6::Address>::operator==(i, a2)) {
          return 1;
        }
      }
    }
  }

  return v7;
}

const ot::Ip6::Address *ot::Child::GetDomainUnicastAddress(ot::Child *this)
{
  uint64_t v6 = 0LL;
  uint64_t v5 = (ot::Child *)((char *)this + 304);
  uint64_t v4 = (ot::Child *)((char *)this + 544);
  while (v5 != v4 && !ot::Ip6::Address::IsUnspecified(v5))
  {
    uint64_t v1 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
    if (ot::BackboneRouter::Leader::IsDomainUnicast(v1, v5)) {
      return v5;
    }
    uint64_t v5 = (const ot::Ip6::Address *)((char *)v5 + 16);
  }

  return (const ot::Ip6::Address *)v6;
}

void ot::Child::GenerateChallenge(ot::Child *this)
{
}

uint64_t ot::Child::HasMlrRegisteredAddress(ot::Child *this, const ot::Ip6::Address *a2)
{
  unsigned __int8 v12 = this;
  unsigned __int8 v11 = a2;
  char v10 = 0;
  if ((ot::BitVector<(unsigned short)15>::HasAny((_BYTE *)this + 550) & 1) != 0)
  {
    v8[0]  = ot::Child::IterateIp6Addresses((uint64_t)this, 3);
    v8[1]  = v2;
    char v9 = (ot::Child::AddressIteratorBuilder *)v8;
    ot::Child::AddressIteratorBuilder::begin((ot::Child::AddressIteratorBuilder *)v8, (uint64_t)v7);
    ot::Child::AddressIteratorBuilder::end(v9, (uint64_t)v6);
    while (ot::Unequatable<ot::Child::AddressIterator>::operator!=((uint64_t)v7, (uint64_t)v6))
    {
      uint64_t v5 = (ot::Ip6::Address *)ot::Child::AddressIterator::operator*((ot::Child::AddressIterator *)v7);
      if (ot::Child::GetAddressMlrState(this, v5) == 2
        && ot::Equatable<ot::Ip6::Address>::operator==(v5, v11))
      {
        char v10 = 1;
        return v10 & 1;
      }

      ot::Child::AddressIterator::operator++((ot::Child::AddressIterator *)v7);
    }
  }

  return v10 & 1;
}

uint64_t ot::Child::GetAddressMlrState(ot::Child *this, const ot::Ip6::Address *a2)
{
  BOOL v6 = 0;
  if (!v6) {
    __assert_rtn( "GetAddressMlrState",  "topology.cpp",  738,  "&mIp6Address[0] <= &aAddress && &aAddress < GetArrayEnd(mIp6Address)");
  }
  if (ot::BitVector<(unsigned short)15>::Get((uint64_t)this + 548, (a2 - (ot::Child *)((char *)this + 304)) / 16))
  {
    return 0;
  }

  else if (ot::BitVector<(unsigned short)15>::Get((uint64_t)this + 550, (a2 - (ot::Child *)((char *)this + 304)) / 16))
  {
    return 2;
  }

  else
  {
    return 1;
  }

uint64_t ot::GetArrayEnd<ot::Ip6::Address,(unsigned short)15>(uint64_t a1)
{
  return a1 + 240;
}

{
  return a1 + 240;
}

{
  return __ZN2ot11GetArrayEndINS_3Ip67AddressELt15EEEPKT_RAT0__S4_(a1);
}

{
  return __ZN2ot11GetArrayEndINS_3Ip67AddressELt15EEEPT_RAT0__S3_(a1);
}

BOOL ot::BitVector<(unsigned short)15>::Get(uint64_t a1, unsigned __int16 a2)
{
  if (a2 >= 0xFu) {
    __assert_rtn("Get", "bit_vector.hpp", 76, "aIndex < N");
  }
  return (*(unsigned __int8 *)(a1 + a2 / 8) & (128 >> (a2 % 8))) != 0;
}

{
  return __ZNK2ot9BitVectorILt15EE3GetEt(a1, a2);
}

uint64_t ot::Child::SetAddressMlrState(uint64_t a1, unint64_t a2, char a3)
{
  BOOL v5 = 0;
  if (a1 + 304 <= a2) {
    BOOL v5 = a2 < ot::GetArrayEnd<ot::Ip6::Address,(unsigned short)15>(a1 + 304);
  }
  if (!v5) {
    __assert_rtn( "SetAddressMlrState",  "topology.cpp",  751,  "&mIp6Address[0] <= &aAddress && &aAddress < GetArrayEnd(mIp6Address)");
  }
  ot::BitVector<(unsigned short)15>::Set(a1 + 548, (uint64_t)(a2 - (a1 + 304)) / 16, a3 == 0);
  return ot::BitVector<(unsigned short)15>::Set(a1 + 550, (uint64_t)(a2 - (a1 + 304)) / 16, a3 == 2);
}

uint64_t ot::BitVector<(unsigned short)15>::Set(uint64_t result, unsigned __int16 a2, char a3)
{
  if (a2 >= 0xFu) {
    __assert_rtn("Set", "bit_vector.hpp", 89, "aIndex < N");
  }
  if ((a3 & 1) != 0) {
    *(_BYTE *)(result + a2 / 8) |= 128 >> (a2 % 8);
  }
  else {
    *(_BYTE *)(result + a2 / 8) &= ~(128 >> (a2 % 8));
  }
  return result;
}

{
  return __ZN2ot9BitVectorILt15EE3SetEtb(result, a2, a3);
}

void ot::Child::HandleDirectTxToSED(ot::Child *this)
{
  unsigned __int8 v12 = this;
  char DeviceMode = ot::Neighbor::GetDeviceMode(this);
  if (!ot::Mle::DeviceMode::IsRxOnWhenIdle((ot::Mle::DeviceMode *)&DeviceMode))
  {
    char v10 = ot::Neighbor::GetDeviceMode(this);
    if (ot::Mle::DeviceMode::IsMinimalEndDevice((ot::Mle::DeviceMode *)&v10) && ++*((_DWORD *)this + 142) >= 5u)
    {
      if ((*((_BYTE *)this + 572) & 1) == 0)
      {
        *((_BYTE *)this + 57ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 1;
        handle_directTxToSED_captureABC();
        otLogWarnPlat( "%s - Request AddressRegistrationTLV via Child Update Request as max direct tx limit is reached: mDirectTXCount ToSED: %d, OPENTHREAD_DIRECT_TX_TO_SLEEPY_CHILD_THRESHOLD: %d",  v1,  v2,  v3,  v4,  v5,  v6,  v7,  (char)"HandleDirectTxToSED");
        uint64_t v8 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
        ot::Mle::MleRouter::SendChildUpdateRequest(v8, this);
        IgnoreError();
      }

      *((_DWORD *)this + 14ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0;
    }
  }

uint64_t ot::Router::Info::SetFrom(ot::Router::Info *this, const ot::Router *a2)
{
  char v10 = this;
  char v9 = a2;
  ot::Clearable<ot::Router::Info>::Clear((uint64_t)this);
  *((_WORD *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = ot::Neighbor::GetRloc16(v9);
  *((_BYTE *)this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 0) = ot::Mle::RouterIdFromRloc16((ot::Mle *)*((unsigned __int16 *)this + 4));
  *(void *)this  = *(void *)ot::Neighbor::GetExtAddress(v9);
  *((_BYTE *)this + 16)  = *((_BYTE *)this + 16) & 0xFE | 1;
  *((_BYTE *)this + ot::Mle::Tlv::SetType(this, 11) = ot::Router::GetNextHop(v9);
  *((_BYTE *)this + 16)  = *((_BYTE *)this + 16) & 0xFD | (2 * ot::Neighbor::IsStateValid(v9));
  *((_BYTE *)this + 1ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = ot::Router::GetCost(v9);
  *((_BYTE *)this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 3) = ot::Neighbor::GetLinkQualityIn(v9);
  unsigned __int8 LinkQualityOut = (ot::TimerMilli *)ot::Router::GetLinkQualityOut(v9);
  *((_BYTE *)this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 4) = (_BYTE)LinkQualityOut;
  int Now = ot::TimerMilli::GetNow(LinkQualityOut);
  int LastHeard = ot::Neighbor::GetLastHeard(v9);
  uint64_t v3 = (ot::Time *)ot::Time::operator-(&Now, &LastHeard);
  *((_BYTE *)this + ot::Mle::Tlv::SetType(this, 15) = ot::Time::MsecToSec(v3);
  unsigned __int16 Version = ot::Neighbor::GetVersion(v9);
  uint64_t result = ot::ClampToUint8<unsigned short>(Version);
  *((_BYTE *)this + 1ot::ThreadTlv::SetType(this, 7) = result;
  return result;
}

uint64_t ot::Clearable<ot::Router::Info>::Clear(uint64_t result)
{
  *(void *)uint64_t result = 0LL;
  *(void *)(result + 8)  = 0LL;
  *(_DWORD *)(result + 16)  = 0;
  return result;
}

{
  return __ZN2ot9ClearableINS_6Router4InfoEE5ClearEv(result);
}

uint64_t ot::Router::Info::SetFrom(ot::Router::Info *this, const ot::Parent *a2)
{
  char CslAccuracy = (ot::Mac::CslAccuracy *)ot::Parent::GetCslAccuracy(a2);
  *((_BYTE *)this + 18)  = ot::Mac::CslAccuracy::GetClockAccuracy(CslAccuracy);
  uint64_t v3 = (ot::Mac::CslAccuracy *)ot::Parent::GetCslAccuracy(a2);
  uint64_t result = ot::Mac::CslAccuracy::GetUncertainty(v3);
  *((_BYTE *)this + 1ot::NetworkDiagnostic::Tlv::SetType(this, 9) = result;
  return result;
}

ot::InstanceLocator *ot::Router::Clear(ot::Router *this)
{
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  memset(this, 0, 0xF8uLL);
  return ot::Router::Init(this, Instance);
}

uint64_t ot::Router::GetTwoWayLinkQuality(ot::Router *this)
{
  unsigned __int8 LinkQualityIn = ot::Neighbor::GetLinkQualityIn(this);
  unsigned __int8 LinkQualityOut = ot::Router::GetLinkQualityOut(this);
  return ot::Min<ot::LinkQuality>(LinkQualityIn, LinkQualityOut);
}

void *ot::Router::SetFrom(ot::Router *this, const ot::Parent *a2)
{
  return memcpy(this, a2, 0xF6uLL);
}

_BYTE *ot::Parent::Clear(ot::Parent *this)
{
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  memset(this, 0, 0x100uLL);
  return ot::Parent::Init(this, Instance);
}

uint64_t ot::Router::SetNextHopAndCost(ot::Router *this, unsigned __int8 a2, char a3)
{
  char v4 = 0;
  if (*((unsigned __int8 *)this + 244) != a2)
  {
    *((_BYTE *)this + 24ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a2;
    char v4 = 1;
  }

  if (a3 != ((*((_BYTE *)this + 245) >> 2) & 0xF))
  {
    *((_BYTE *)this + 245)  = *((_BYTE *)this + 245) & 0xC3 | (4 * (a3 & 0xF));
    char v4 = 1;
  }

  return v4 & 1;
}

uint64_t ot::Router::SetNextHopToInvalid(ot::Router *this)
{
  return ot::Router::SetNextHopAndCost(this, 0x3Fu, 0) & 1;
}

uint64_t ot::LinkedList<ot::LinkMetrics::SeriesInfo>::GetHead(uint64_t a1)
{
  return *(void *)a1;
}

{
  return __ZN2ot10LinkedListINS_11LinkMetrics10SeriesInfoEE7GetHeadEv(a1);
}

uint64_t ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Iterator::Advance(uint64_t *a1)
{
  uint64_t result = ot::LinkedListEntry<ot::LinkMetrics::SeriesInfo>::GetNext(*a1);
  *a1  = result;
  return result;
}

  ;
}

  ;
}

{
  return __ZN2ot10LinkedListINS_11LinkMetrics10SeriesInfoEE8Iterator7AdvanceEv(a1);
}

ot::LinkMetrics::SeriesInfo *ot::LinkedList<ot::LinkMetrics::SeriesInfo>::FindMatching<unsigned char>( ot::LinkMetrics::SeriesInfo *a1, ot::LinkMetrics::SeriesInfo *a2)
{
  char v3[2] = a1;
  v3[1]  = a2;
  return ot::LinkedList<ot::LinkMetrics::SeriesInfo>::FindMatching<unsigned char>( (ot::LinkMetrics::SeriesInfo **)a1,  (const unsigned __int8 *)a2,  v3);
}

{
  return __ZNK2ot10LinkedListINS_11LinkMetrics10SeriesInfoEE12FindMatchingIhEEPKS2_RKT_(a1, a2);
}

ot::LinkMetrics::SeriesInfo *ot::LinkedList<ot::LinkMetrics::SeriesInfo>::FindMatching<unsigned char>( ot::LinkMetrics::SeriesInfo **a1, const unsigned __int8 *a2, ot::LinkMetrics::SeriesInfo **a3)
{
  return ot::LinkedList<ot::LinkMetrics::SeriesInfo>::FindMatching<unsigned char>((uint64_t)a1, *a1, 0LL, a2, a3);
}

{
  return __ZNK2ot10LinkedListINS_11LinkMetrics10SeriesInfoEE12FindMatchingIhEEPKS2_RKT_RS6_(a1, a2, a3);
}

ot::LinkMetrics::SeriesInfo *ot::LinkedList<ot::LinkMetrics::SeriesInfo>::FindMatching<unsigned char>( uint64_t a1, ot::LinkMetrics::SeriesInfo *Next, ot::LinkMetrics::SeriesInfo *a3, const unsigned __int8 *a4, ot::LinkMetrics::SeriesInfo **a5)
{
  *a5  = 0LL;
  while (Next != a3 && !ot::LinkMetrics::SeriesInfo::Matches(Next, a4))
  {
    *a5  = Next;
    unint64_t Next = (ot::LinkMetrics::SeriesInfo *)ot::LinkedListEntry<ot::LinkMetrics::SeriesInfo>::GetNext((uint64_t)Next);
  }

  return Next;
}

{
  return __ZNK2ot10LinkedListINS_11LinkMetrics10SeriesInfoEE12FindMatchingIhEEPKS2_S6_S6_RKT_RS6_(a1, Next, a3, a4, a5);
}

BOOL ot::LinkMetrics::SeriesInfo::Matches(ot::LinkMetrics::SeriesInfo *this, const unsigned __int8 *a2)
{
  return *((unsigned __int8 *)this + 8) == *a2;
}

{
  return __ZNK2ot11LinkMetrics10SeriesInfo7MatchesERKh(this, a2);
}

void ot::LinkedList<ot::LinkMetrics::SeriesInfo>::FindMatching<unsigned char>( uint64_t a1, const unsigned __int8 *a2, ot::LinkMetrics::SeriesInfo **a3)
{
}

{
  __ZN2ot10LinkedListINS_11LinkMetrics10SeriesInfoEE12FindMatchingIhEEPS2_RKT_RS5_(a1, a2, a3);
}

uint64_t ot::LinkedList<ot::LinkMetrics::SeriesInfo>::PopAfter(uint64_t *a1, void *a2)
{
  if (!a2) {
    return ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Pop(a1);
  }
  uint64_t Next = ot::LinkedListEntry<ot::LinkMetrics::SeriesInfo>::GetNext((uint64_t)a2);
  if (Next)
  {
    uint64_t v2 = ot::LinkedListEntry<ot::LinkMetrics::SeriesInfo>::GetNext(Next);
    ot::LinkedListEntry<ot::LinkMetrics::SeriesInfo>::SetNext(a2, v2);
  }

  return Next;
}

{
  return __ZN2ot10LinkedListINS_11LinkMetrics10SeriesInfoEE8PopAfterEPS2_(a1, a2);
}

char *ot::PathForUri(unsigned __int8 a1)
{
  if (a1 == 39) {
    __assert_rtn("PathForUri", "uri_paths.cpp", 147, "aUri != kUriUnknown");
  }
  return ot::UriList::kEntries[a1];
}

uint64_t ot::UriFromPath( ot *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, int (*a6)(const void *, const void *))
{
  char v9 = this;
  unsigned __int8 v8 = 39;
  uint64_t v7 = ot::BinarySearch::Find<char const*,ot::UriList::Entry,(unsigned short)39>( (ot::BinarySearch *)&v9,  (char *)ot::UriList::kEntries,  a3,  a4,  a5,  a6);
  if (v7) {
    return ((v7 - (char *)ot::UriList::kEntries) / 8);
  }
  return v8;
}

char *ot::BinarySearch::Find<char const*,ot::UriList::Entry,(unsigned short)39>( ot::BinarySearch *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, int (*a6)(const void *, const void *))
{
  return ot::BinarySearch::Find( a1,  a2,  (const void *)0x27,  8u,  (uint64_t (*)(ot::BinarySearch *, char *))ot::BinarySearch::Compare<char const*,ot::UriList::Entry>,  a6);
}

{
  return __ZN2ot12BinarySearch4FindIPKcNS_7UriList5EntryELt39EEEPKT0_RKT_RAT1__S7_(a1, a2, a3, a4, a5, a6);
}

const char *ot::UriToString<(ot::Uri)0>()
{
  return "AddressError";
}

const char *ot::UriToString<(ot::Uri)1>()
{
  return "AddressNotify";
}

const char *ot::UriToString<(ot::Uri)2>()
{
  return "AddressQuery";
}

const char *ot::UriToString<(ot::Uri)3>()
{
  return "AddressRelease";
}

const char *ot::UriToString<(ot::Uri)4>()
{
  return "AddressSolicit";
}

const char *ot::UriToString<(ot::Uri)5>()
{
  return "ServerData";
}

const char *ot::UriToString<(ot::Uri)6>()
{
  return "AnycastLocate";
}

const char *ot::UriToString<(ot::Uri)7>()
{
  return "BackboneAnswer";
}

const char *ot::UriToString<(ot::Uri)8>()
{
  return "BackboneMlr";
}

const char *ot::UriToString<(ot::Uri)9>()
{
  return "BackboneQuery";
}

const char *ot::UriToString<(ot::Uri)10>()
{
  return "AnnounceBegin";
}

const char *ot::UriToString<(ot::Uri)11>()
{
  return "ActiveGet";
}

const char *ot::UriToString<(ot::Uri)12>()
{
  return "ActiveSet";
}

const char *ot::UriToString<(ot::Uri)13>()
{
  return "CommissionerKeepAlive";
}

const char *ot::UriToString<(ot::Uri)14>()
{
  return "CommissionerGet";
}

const char *ot::UriToString<(ot::Uri)15>()
{
  return "CommissionerPetition";
}

const char *ot::UriToString<(ot::Uri)16>()
{
  return "CommissionerSet";
}

const char *ot::UriToString<(ot::Uri)17>()
{
  return "DatasetChanged";
}

const char *ot::UriToString<(ot::Uri)18>()
{
  return "EnergyReport";
}

const char *ot::UriToString<(ot::Uri)19>()
{
  return "EnergyScan";
}

const char *ot::UriToString<(ot::Uri)20>()
{
  return "JoinerEntrust";
}

const char *ot::UriToString<(ot::Uri)21>()
{
  return "JoinerFinalize";
}

const char *ot::UriToString<(ot::Uri)22>()
{
  return "LeaderKeepAlive";
}

const char *ot::UriToString<(ot::Uri)23>()
{
  return "LeaderPetition";
}

const char *ot::UriToString<(ot::Uri)24>()
{
  return "PanIdConflict";
}

const char *ot::UriToString<(ot::Uri)25>()
{
  return "PendingGet";
}

const char *ot::UriToString<(ot::Uri)26>()
{
  return "PanIdQuery";
}

const char *ot::UriToString<(ot::Uri)27>()
{
  return "PendingSet";
}

const char *ot::UriToString<(ot::Uri)28>()
{
  return "RelayRx";
}

const char *ot::UriToString<(ot::Uri)29>()
{
  return "RelayTx";
}

const char *ot::UriToString<(ot::Uri)30>()
{
  return "ProxyRx";
}

const char *ot::UriToString<(ot::Uri)31>()
{
  return "ProxyTx";
}

const char *ot::UriToString<(ot::Uri)32>()
{
  return "DiagGetAnswer";
}

const char *ot::UriToString<(ot::Uri)33>()
{
  return "DiagGetRequest";
}

const char *ot::UriToString<(ot::Uri)34>()
{
  return "DiagGetQuery";
}

const char *ot::UriToString<(ot::Uri)35>()
{
  return "DiagReset";
}

const char *ot::UriToString<(ot::Uri)36>()
{
  return "DuaRegNotify";
}

const char *ot::UriToString<(ot::Uri)37>()
{
  return "DuaRegRequest";
}

const char *ot::UriToString<(ot::Uri)38>()
{
  return "Mlr";
}

uint64_t ot::BinarySearch::Compare<char const*,ot::UriList::Entry>(const char **a1, const char **a2)
{
  return ot::UriList::Entry::Compare(a2, *a1);
}

uint64_t ot::UriList::Entry::Compare(const char **this, const char *a2)
{
  return strcmp(a2, *this);
}

{
  return __ZNK2ot7UriList5Entry7CompareEPKc(this, a2);
}

ot::Utils::ChannelManager *ot::Utils::ChannelManager::ChannelManager( ot::Utils::ChannelManager *this, ot::Instance *a2)
{
  *((_WORD *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 120;
  *((_BYTE *)this + 1ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 0;
  *((_BYTE *)this + ot::Mle::Tlv::SetType(this, 11) = 0;
  ot::TimerMilliIn<ot::Utils::ChannelManager,&ot::Utils::ChannelManager::HandleTimer>::TimerMilliIn( (ot::Utils::ChannelManager *)((char *)this + 16),  a2);
  uint64_t result = this;
  *((_DWORD *)this + 1ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 10800;
  *((_BYTE *)this + 4ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  *((_WORD *)this + 2ot::NetworkData::NetworkDataTlv::SetType(this, 3) = 9174;
  return result;
}

{
  ot::Utils::ChannelManager::ChannelManager(this, a2);
  return this;
}

ot::Utils::ChannelManager *ot::Utils::ChannelManager::HandleTimer(ot::Utils::ChannelManager *this)
{
  if (*((_BYTE *)this + 11))
  {
    if (*((_BYTE *)this + 11) == 1) {
      return (ot::Utils::ChannelManager *)ot::Utils::ChannelManager::StartDatasetUpdate(this);
    }
  }

  return this;
}

ot::TimerMilli *ot::TimerMilliIn<ot::Utils::ChannelManager,&ot::Utils::ChannelManager::HandleTimer>::TimerMilliIn( ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli( a1,  a2,  (void (*)(ot::Timer *))ot::TimerMilliIn<ot::Utils::ChannelManager,&ot::Utils::ChannelManager::HandleTimer>::HandleTimer);
  return a1;
}

void ot::Utils::ChannelManager::RequestChannelChange( ot::Utils::ChannelManager *this, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  if (a2 == ot::Mac::Mac::GetPanChannel(v8))
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"ChannelManager",  "Already operating on the requested channel %d",  v9,  v10,  v11,  v12,  v13,  v14,  a2);
  }

  else if (*((_BYTE *)this + 11) != 2 || *((unsigned __int8 *)this + 10) != a2)
  {
    *((_BYTE *)this + ot::Mle::Tlv::SetType(this, 11) = 1;
    *((_BYTE *)this + 1ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = a2;
    int Uint32InRange = ot::Random::NonCrypto::GetUint32InRange(0LL, 0x2710u);
    ot::TimerMilli::Start((ot::Utils::ChannelManager *)((char *)this + 16), Uint32InRange + 1);
    uint64_t v16 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
    ot::Notifier::Signal(v16, 0x200000LL);
  }

uint64_t ot::Utils::ChannelManager::SetDelay(ot::Utils::ChannelManager *this, unsigned __int16 a2)
{
  unsigned int v3 = 0;
  if (a2 >= 0x78u) {
    *((_WORD *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a2;
  }
  else {
    return 7;
  }
  return v3;
}

uint64_t ot::Utils::ChannelManager::StartDatasetUpdate(ot::Utils::ChannelManager *this)
{
  int v1 = ot::Time::SecToMsec((ot::Time *)*((unsigned __int16 *)this + 4));
  ot::MeshCoP::Dataset::Info::SetDelay((uint64_t)v6, v1);
  uint64_t v2 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::DatasetUpdater>(this);
  unint64_t v5 = ot::MeshCoP::DatasetUpdater::RequestUpdate( v2,  v6,  (uint64_t)ot::Utils::ChannelManager::HandleDatasetUpdateDone,  (uint64_t)this);
  if (v5 <= 0xD) {
    __asm { BR              X8 }
  }

  *((_BYTE *)this + ot::Mle::Tlv::SetType(this, 11) = 0;
  return ot::Utils::ChannelManager::StartAutoSelectTimer((uint64_t)this);
}

uint64_t ot::Utils::ChannelManager::HandleDatasetUpdateDone( int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Utils::ChannelManager::HandleDatasetUpdateDone(a2, a1, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Utils::ChannelManager::StartAutoSelectTimer(uint64_t this)
{
  uint64_t v2 = this;
  if (!*(_BYTE *)(this + 11))
  {
    if ((*(_BYTE *)(this + 44) & 1) != 0)
    {
      unsigned int v1 = ot::Time::SecToMsec((ot::Time *)*(unsigned int *)(this + 40));
      return ot::TimerMilli::Start((ot::TimerMilli *)(v2 + 16), v1);
    }

    else
    {
      return ot::TimerMilli::Stop((ot::TimerMilli *)(this + 16));
    }
  }

  return this;
}

uint64_t ot::Utils::ChannelManager::HandleDatasetUpdateDone( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2) {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"ChannelManager",  "Canceling channel change to %d%s",  a3,  a4,  a5,  a6,  a7,  a8,  *(_BYTE *)(a1 + 10));
  }
  else {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"ChannelManager",  "Channel changed to %d",  a3,  a4,  a5,  a6,  a7,  a8,  *(_BYTE *)(a1 + 10));
  }
  *(_BYTE *)(a1 + ot::Mle::Tlv::SetType(this, 11) = 0;
  return ot::Utils::ChannelManager::StartAutoSelectTimer(a1);
}

  ;
}

uint64_t ot::Utils::ChannelManager::SetAutoChannelSelectionInterval( ot::Utils::ChannelManager *this, unsigned int a2)
{
  uint64_t v11 = this;
  unsigned int v10 = a2;
  unsigned int v9 = 0;
  unsigned int v8 = *((_DWORD *)this + 10);
  if (a2 && v10 <= ot::Time::MsecToSec((ot::Time *)0x7FFFFFFF))
  {
    *((_DWORD *)this + 1ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = v10;
    if ((*((_BYTE *)this + 44) & 1) != 0
      && !*((_BYTE *)this + 11)
      && ot::Timer::IsRunning((ot::Utils::ChannelManager *)((char *)this + 16))
      && v8 != v10)
    {
      FireTime  = ot::Timer::GetFireTime((ot::Utils::ChannelManager *)((char *)this + 16));
      int v2 = ot::Time::SecToMsec((ot::Time *)v8);
      int v7 = ot::Time::operator-(&FireTime, v2);
      unsigned int v3 = ot::Time::SecToMsec((ot::Time *)v10);
      ot::TimerMilli::StartAt((ot::Utils::ChannelManager *)((char *)this + 16), v7, v3);
    }
  }

  else
  {
    return 7;
  }

  return v9;
}

void ot::Utils::ChannelManager::SetSupportedChannels(ot::Utils::ChannelManager *this, int a2)
{
  int v2 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  SupportedChannelMask  = (ot::Mac::ChannelMask *)ot::Mac::Mac::GetSupportedChannelMask(v2);
  Mask  = ot::Mac::ChannelMask::GetMask(SupportedChannelMask);
  ot::Mac::ChannelMask::SetMask(this, a2 & Mask);
  ot::Mac::ChannelMask::ToString(this, (ot::StringWriter *)v14);
  char v5 = ot::String<(unsigned short)45>::AsCString((uint64_t)v14);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"ChannelManager",  "Supported channels: %s",  v6,  v7,  v8,  v9,  v10,  v11,  v5);
}

void ot::Utils::ChannelManager::SetFavoredChannels(ot::Utils::ChannelManager *this, int a2)
{
  int v2 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  SupportedChannelMask  = (ot::Mac::ChannelMask *)ot::Mac::Mac::GetSupportedChannelMask(v2);
  Mask  = ot::Mac::ChannelMask::GetMask(SupportedChannelMask);
  ot::Mac::ChannelMask::SetMask((_DWORD *)this + 1, a2 & Mask);
  ot::Mac::ChannelMask::ToString((ot::Utils::ChannelManager *)((char *)this + 4), (ot::StringWriter *)v14);
  char v5 = ot::String<(unsigned short)45>::AsCString((uint64_t)v14);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"ChannelManager", "Favored channels: %s", v6, v7, v8, v9, v10, v11, v5);
}

void ot::Utils::ChannelManager::SetCcaFailureRateThreshold( ot::Utils::ChannelManager *this, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *((_WORD *)this + 2ot::NetworkData::NetworkDataTlv::SetType(this, 3) = a2;
  ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"ChannelManager",  "CCA threshold: 0x%04x",  a3,  a4,  a5,  a6,  a7,  a8,  *((_WORD *)this + 23));
}

ot::Utils::ChannelManager *ot::TimerMilliIn<ot::Utils::ChannelManager,&ot::Utils::ChannelManager::HandleTimer>::HandleTimer( ot::InstanceLocator *a1)
{
  int v2 = (ot::Utils::ChannelManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::ChannelManager>(a1);
  return ot::Utils::ChannelManager::HandleTimer(v2);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::ChannelManager>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Utils::ChannelManager>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_5Utils14ChannelManagerEEERT_v(a1);
}

ot::Utils::Heap *ot::Utils::Heap::Heap(ot::Utils::Heap *this)
{
  uint64_t v7 = (const ot::Utils::Block *)ot::Utils::Heap::BlockAt(this, 6u);
  ot::Utils::Block::SetSize(v7, 4);
  uint64_t v6 = (const ot::Utils::Block *)ot::Utils::Heap::BlockRight(this, v7);
  ot::Utils::Block::SetSize(v6, 64492);
  char v5 = (ot::Utils::Block *)ot::Utils::Heap::BlockRight(this, v6);
  ot::Utils::Block::SetSize(v5, 0xFFFF);
  unsigned __int16 v1 = ot::Utils::Heap::BlockOffset(this, v6);
  ot::Utils::Block::SetNext((unsigned __int16 *)v7, v1);
  unsigned __int16 v2 = ot::Utils::Heap::BlockOffset(this, v5);
  ot::Utils::Block::SetNext((unsigned __int16 *)v6, v2);
  uint64_t result = this;
  *(_WORD *)this  = -1044;
  return result;
}

{
  ot::Utils::Heap::Heap(this);
  return this;
}

uint64_t ot::Utils::Heap::BlockAt(ot::Utils::Heap *this, unsigned __int16 a2)
{
  return (uint64_t)this + 2 * (a2 / 2);
}

{
  return __ZN2ot5Utils4Heap7BlockAtEt(this, a2);
}

_WORD *ot::Utils::Block::SetSize(_WORD *this, __int16 a2)
{
  *this  = a2;
  return this;
}

{
  return __ZN2ot5Utils5Block7SetSizeEt(this, a2);
}

uint64_t ot::Utils::Heap::BlockRight(ot::Utils::Heap *this, const ot::Utils::Block *a2)
{
  __int16 v4 = ot::Utils::Heap::BlockOffset(this, a2) + 4;
  __int16 Size = ot::Utils::Block::GetSize(a2);
  return ot::Utils::Heap::BlockAt(this, v4 + Size);
}

{
  return __ZN2ot5Utils4Heap10BlockRightERKNS0_5BlockE(this, a2);
}

unsigned __int16 *ot::Utils::Block::SetNext(unsigned __int16 *this, unsigned __int16 a2)
{
  *(unsigned __int16 *)((char *)this + *this + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = a2;
  return this;
}

{
  return __ZN2ot5Utils5Block7SetNextEt(this, a2);
}

uint64_t ot::Utils::Heap::BlockOffset(ot::Utils::Heap *this, const ot::Utils::Block *a2)
{
  return (unsigned __int16)((_WORD)a2 - (_WORD)this);
}

{
  return __ZN2ot5Utils4Heap11BlockOffsetERKNS0_5BlockE(this, a2);
}

uint64_t ot::Utils::Heap::CAlloc(ot::Utils::Heap *this, __int16 a2, __int16 a3)
{
  uint64_t v14 = 0LL;
  if (a2 * a3)
  {
    unsigned __int16 v11 = ((a2 * a3 + 3) & 0xFFF8) + 4;
    uint64_t v13 = (ot::Utils::Block *)ot::Utils::Heap::BlockSuper(this);
    uint64_t v12 = (ot::Utils::Block *)ot::Utils::Heap::BlockNext(this, v13);
    for (unsigned __int16 i = ot::Utils::Block::GetSize(v12); v11 > (int)i; unsigned __int16 i = ot::Utils::Block::GetSize(v12))
    {
      uint64_t v13 = v12;
      uint64_t v12 = (ot::Utils::Block *)ot::Utils::Heap::BlockNext(this, v12);
    }

    if (ot::Utils::Block::IsFree(v12))
    {
      unsigned __int16 Next = ot::Utils::Block::GetNext(v12);
      ot::Utils::Block::SetNext((unsigned __int16 *)v13, Next);
      if ((unint64_t)v11 + 4 < (unsigned __int16)ot::Utils::Block::GetSize(v12))
      {
        unsigned __int16 v10 = ot::Utils::Block::GetSize(v12) - v11 - 4;
        ot::Utils::Block::SetSize(v12, v11);
        uint64_t v9 = (ot::Utils::Block *)ot::Utils::Heap::BlockRight(this, v12);
        ot::Utils::Block::SetSize(v9, v10);
        ot::Utils::Block::SetNext((unsigned __int16 *)v9, 0);
        if (v10 <= (int)(unsigned __int16)ot::Utils::Block::GetSize(v13))
        {
          char v5 = (ot::Utils::Block *)ot::Utils::Heap::BlockSuper(this);
          ot::Utils::Heap::BlockInsert(this, v5, v9);
        }

        else
        {
          ot::Utils::Heap::BlockInsert(this, v13, v9);
        }

        *(_WORD *)this -= 4;
      }

      *(_WORD *)this -= ot::Utils::Block::GetSize(v12);
      ot::Utils::Block::SetNext((unsigned __int16 *)v12, 0);
      Pointer  = (void *)ot::Utils::Block::GetPointer(v12);
      bzero(Pointer, v11);
      return ot::Utils::Block::GetPointer(v12);
    }
  }

  return v14;
}

uint64_t ot::Utils::Heap::BlockSuper(ot::Utils::Heap *this)
{
  return ot::Utils::Heap::BlockAt(this, 6u);
}

{
  return __ZN2ot5Utils4Heap10BlockSuperEv(this);
}

uint64_t ot::Utils::Heap::BlockNext(ot::Utils::Heap *this, const ot::Utils::Block *a2)
{
  unsigned __int16 Next = ot::Utils::Block::GetNext(a2);
  return ot::Utils::Heap::BlockAt(this, Next);
}

{
  return __ZN2ot5Utils4Heap9BlockNextERKNS0_5BlockE(this, a2);
}

uint64_t ot::Utils::Block::GetSize(ot::Utils::Block *this)
{
  return *(unsigned __int16 *)this;
}

{
  return __ZNK2ot5Utils5Block7GetSizeEv(this);
}

BOOL ot::Utils::Block::IsFree(ot::Utils::Block *this)
{
  BOOL v2 = 0;
  return v2;
}

{
  return __ZNK2ot5Utils5Block6IsFreeEv(this);
}

uint64_t ot::Utils::Block::GetNext(ot::Utils::Block *this)
{
  return *(unsigned __int16 *)((char *)this + *(unsigned __int16 *)this + 2);
}

{
  return __ZNK2ot5Utils5Block7GetNextEv(this);
}

unsigned __int16 *ot::Utils::Heap::BlockInsert( ot::Utils::Heap *this, ot::Utils::Block *a2, ot::Utils::Block *a3)
{
  uint64_t v9 = a2;
  uint64_t v8 = (ot::Utils::Block *)ot::Utils::Heap::BlockNext(this, a2);
  for (unsigned __int16 i = ot::Utils::Block::GetSize(v8);
        i < (int)(unsigned __int16)ot::Utils::Block::GetSize(a3);
        unsigned __int16 i = ot::Utils::Block::GetSize(v8))
  {
    uint64_t v9 = v8;
    uint64_t v8 = (ot::Utils::Block *)ot::Utils::Heap::BlockNext(this, v8);
  }

  unsigned __int16 Next = ot::Utils::Block::GetNext(v9);
  ot::Utils::Block::SetNext((unsigned __int16 *)a3, Next);
  unsigned __int16 v5 = ot::Utils::Heap::BlockOffset(this, a3);
  return ot::Utils::Block::SetNext((unsigned __int16 *)v9, v5);
}

uint64_t ot::Utils::Block::GetPointer(ot::Utils::Block *this)
{
  return (uint64_t)this + 2;
}

{
  return __ZN2ot5Utils5Block10GetPointerEv(this);
}

ot::Utils::Block *ot::Utils::Heap::BlockPrev(ot::Utils::Heap *this, const ot::Utils::Block *a2)
{
  unsigned __int16 v5 = (ot::Utils::Block *)ot::Utils::Heap::BlockSuper(this);
  for (unsigned __int16 i = ot::Utils::Block::GetNext(v5);
        i != (unsigned __int16)ot::Utils::Heap::BlockOffset(this, a2);
        unsigned __int16 i = ot::Utils::Block::GetNext(v5))
  {
    unsigned __int16 v5 = (ot::Utils::Block *)ot::Utils::Heap::BlockNext(this, v5);
  }

  return v5;
}

unsigned __int16 *ot::Utils::Heap::Free(unsigned __int16 *this, void *a2)
{
  uint64_t v16 = (ot::Utils::Heap *)this;
  if (a2)
  {
    uint64_t v22 = (const ot::Utils::Block *)ot::Utils::Heap::BlockOf((ot::Utils::Heap *)this, a2);
    char v21 = (ot::Utils::Block *)ot::Utils::Heap::BlockRight(v16, v22);
    *(_WORD *)v16 += ot::Utils::Block::GetSize(v22);
    if (ot::Utils::Heap::IsLeftFree(v16, v22))
    {
      uint64_t v20 = (ot::Utils::Block *)ot::Utils::Heap::BlockSuper(v16);
      char v19 = (ot::Utils::Block *)ot::Utils::Heap::BlockNext(v16, v20);
      *(_WORD *)v16 += 4;
      Leftunsigned __int16 Next = ot::Utils::Block::GetLeftNext(v22);
      for (__int16 i = ot::Utils::Block::GetNext(v19); LeftNext != i; __int16 i = ot::Utils::Block::GetNext(v19))
      {
        uint64_t v20 = v19;
        char v19 = (ot::Utils::Block *)ot::Utils::Heap::BlockNext(v16, v19);
      }

      unsigned __int16 Next = ot::Utils::Block::GetNext(v19);
      ot::Utils::Block::SetNext((unsigned __int16 *)v20, Next);
      ot::Utils::Block::SetNext((unsigned __int16 *)v19, 0);
      if (ot::Utils::Block::IsFree(v21))
      {
        *(_WORD *)v16 += 4;
        int Size = (unsigned __int16)ot::Utils::Block::GetSize(v21);
        if (Size <= (unsigned __int16)ot::Utils::Block::GetSize(v19))
        {
          uint64_t v20 = ot::Utils::Heap::BlockPrev(v16, v21);
        }

        else
        {
          __int16 v17 = ot::Utils::Heap::BlockOffset(v16, v21);
          for (__int16 j = ot::Utils::Block::GetNext(v20); v17 != j; __int16 j = ot::Utils::Block::GetNext(v20))
            uint64_t v20 = (ot::Utils::Block *)ot::Utils::Heap::BlockNext(v16, v20);
        }

        unsigned __int16 v5 = ot::Utils::Block::GetNext(v21);
        ot::Utils::Block::SetNext((unsigned __int16 *)v20, v5);
        ot::Utils::Block::SetNext((unsigned __int16 *)v21, 0);
        __int16 v14 = ot::Utils::Block::GetSize(v19);
        __int16 v6 = ot::Utils::Block::GetSize(v21);
        ot::Utils::Block::SetSize(v19, v6 + v14 + 4);
      }

      __int16 v13 = ot::Utils::Block::GetSize(v19);
      __int16 v7 = ot::Utils::Block::GetSize(v22);
      ot::Utils::Block::SetSize(v19, v7 + v13 + 4);
      return ot::Utils::Heap::BlockInsert(v16, v20, v19);
    }

    else if (ot::Utils::Block::IsFree(v21))
    {
      unsigned __int16 v11 = ot::Utils::Heap::BlockPrev(v16, v21);
      unsigned __int16 v8 = ot::Utils::Block::GetNext(v21);
      ot::Utils::Block::SetNext((unsigned __int16 *)v11, v8);
      __int16 v12 = ot::Utils::Block::GetSize(v22);
      __int16 v9 = ot::Utils::Block::GetSize(v21);
      ot::Utils::Block::SetSize(v22, v9 + v12 + 4);
      this  = ot::Utils::Heap::BlockInsert(v16, v11, v22);
      *(_WORD *)v16 += 4;
    }

    else
    {
      unsigned __int16 v10 = (ot::Utils::Block *)ot::Utils::Heap::BlockSuper(v16);
      return ot::Utils::Heap::BlockInsert(v16, v10, v22);
    }
  }

  return this;
}

uint64_t ot::Utils::Heap::BlockOf(ot::Utils::Heap *this, void *a2)
{
  return ot::Utils::Heap::BlockAt(this, (unsigned __int16)a2 - (unsigned __int16)this - 2);
}

{
  return __ZN2ot5Utils4Heap7BlockOfEPv(this, a2);
}

BOOL ot::Utils::Heap::IsLeftFree(ot::Utils::Heap *this, const ot::Utils::Block *a2)
{
  BOOL v3 = 0;
  return v3;
}

{
  return __ZN2ot5Utils4Heap10IsLeftFreeERKNS0_5BlockE(this, a2);
}

uint64_t ot::Utils::Block::GetLeftNext(ot::Utils::Block *this)
{
  return *((unsigned __int16 *)this - 1);
}

{
  return __ZNK2ot5Utils5Block11GetLeftNextEv(this);
}

BOOL ot::Utils::Block::IsLeftFree(ot::Utils::Block *this)
{
  return (unsigned __int16)ot::Utils::Block::GetLeftNext(this) != 0;
}

{
  return __ZNK2ot5Utils5Block10IsLeftFreeEv(this);
}

uint64_t ot::Utils::CmdLineParser::ParseCmd( ot::Utils::CmdLineParser *this, char *a2, ot::Utils::CmdLineParser::Arg *a3)
{
  unsigned __int8 v10 = a3;
  unsigned int v9 = 0;
  unsigned __int8 v8 = 0;
  while (*(_BYTE *)this)
  {
    if (*(_BYTE *)this == 92
      && ot::Utils::CmdLineParser::IsEscapable((ot::Utils::CmdLineParser *)*((char *)this + 1)))
    {
      size_t v3 = strlen((const char *)this);
      memmove(this, (char *)this + 1, v3);
    }

    else if (ot::Utils::CmdLineParser::IsSeparator((ot::Utils::CmdLineParser *)*(char *)this))
    {
      *(_BYTE *)this  = 0;
    }

    if (*(_BYTE *)this && (!v8 || !*((_BYTE *)this - 1)))
    {
      if (v8 == v10 - 1)
      {
        unsigned int v9 = 7;
        break;
      }

      uint64_t v4 = v8++;
      ot::Utils::CmdLineParser::Arg::SetCString(&a2[8 * v4], (char *)this);
    }

    this  = (ot::Utils::CmdLineParser *)((char *)this + 1);
  }

  while (v8 < (int)v10)
  {
    uint64_t v5 = v8++;
    ot::Utils::CmdLineParser::Arg::Clear(&a2[8 * v5]);
  }

  return v9;
}

BOOL ot::Utils::CmdLineParser::IsEscapable(ot::Utils::CmdLineParser *this)
{
  char v3 = (char)this;
  BOOL v2 = 1;
  return v2;
}

BOOL ot::Utils::CmdLineParser::IsSeparator(ot::Utils::CmdLineParser *this)
{
  BOOL v2 = 1;
  if ((char)this != 32)
  {
    BOOL v2 = 1;
    if ((char)this != 9)
    {
      BOOL v2 = 1;
    }
  }

  return v2;
}

void *ot::Utils::CmdLineParser::Arg::SetCString(void *this, char *a2)
{
  *this  = a2;
  return this;
}

{
  return __ZN2ot5Utils13CmdLineParser3Arg10SetCStringEPc(this, a2);
}

uint64_t ot::Utils::CmdLineParser::ParseAsUint8( ot::Utils::CmdLineParser *this, char *a2, unsigned __int8 *a3)
{
  return ot::Utils::CmdLineParser::ParseUint<unsigned char>(this, a2, a3);
}

uint64_t ot::Utils::CmdLineParser::ParseUint<unsigned char>( ot::Utils::CmdLineParser *a1, _BYTE *a2, unsigned __int8 *a3)
{
  __int16 v7 = a1;
  __int16 v6 = a2;
  unsigned int v5 = ot::Utils::CmdLineParser::ParseAsUint64(a1, (char *)&v4, a3);
  if (!v5)
  {
    if (v4 <= 0xFF) {
      _BYTE *v6 = v4;
    }
    else {
      return 7;
    }
  }

  return v5;
}

{
  return __ZN2ot5Utils13CmdLineParser9ParseUintIhEE7otErrorPKcRT_(a1, a2, a3);
}

uint64_t ot::Utils::CmdLineParser::ParseAsUint16( ot::Utils::CmdLineParser *this, char *a2, unsigned __int8 *a3)
{
  return ot::Utils::CmdLineParser::ParseUint<unsigned short>(this, a2, a3);
}

uint64_t ot::Utils::CmdLineParser::ParseUint<unsigned short>( ot::Utils::CmdLineParser *a1, _WORD *a2, unsigned __int8 *a3)
{
  __int16 v7 = a1;
  __int16 v6 = a2;
  unsigned int v5 = ot::Utils::CmdLineParser::ParseAsUint64(a1, (char *)&v4, a3);
  if (!v5)
  {
    if (v4 < 0x10000) {
      _WORD *v6 = v4;
    }
    else {
      return 7;
    }
  }

  return v5;
}

{
  return __ZN2ot5Utils13CmdLineParser9ParseUintItEE7otErrorPKcRT_(a1, a2, a3);
}

uint64_t ot::Utils::CmdLineParser::ParseAsUint32( ot::Utils::CmdLineParser *this, char *a2, unsigned __int8 *a3)
{
  return ot::Utils::CmdLineParser::ParseUint<unsigned int>(this, a2, a3);
}

uint64_t ot::Utils::CmdLineParser::ParseUint<unsigned int>( ot::Utils::CmdLineParser *a1, _DWORD *a2, unsigned __int8 *a3)
{
  __int16 v7 = a1;
  __int16 v6 = a2;
  unsigned int v5 = ot::Utils::CmdLineParser::ParseAsUint64(a1, (char *)&v4, a3);
  if (!v5)
  {
    if (v4 <= 0xFFFFFFFF) {
      _DWORD *v6 = v4;
    }
    else {
      return 7;
    }
  }

  return v5;
}

{
  return __ZN2ot5Utils13CmdLineParser9ParseUintIjEE7otErrorPKcRT_(a1, a2, a3);
}

uint64_t ot::Utils::CmdLineParser::ParseAsUint64( ot::Utils::CmdLineParser *this, char *a2, unsigned __int8 *a3)
{
  __int16 v13 = this;
  __int16 v12 = a2;
  unsigned int v11 = 0;
  unint64_t v10 = 0LL;
  unsigned int v9 = this;
  char v8 = 0;
  if (this)
  {
    if (*(_BYTE *)v9 == 48 && (*((_BYTE *)v9 + 1) == 120 || *((_BYTE *)v9 + 1) == 88))
    {
      unsigned int v9 = (ot::Utils::CmdLineParser *)((char *)v9 + 2);
      char v8 = 1;
    }

    while (1)
    {
      unsigned int v6 = (v8 & 1) != 0
      unsigned int v11 = v6;
      if (v6) {
        break;
      }
      unint64_t v3 = 0xFFFFFFFFFFFFFFFLL;
      if ((v8 & 1) == 0) {
        unint64_t v3 = 0x1999999999999999LL;
      }
      if (v10 > v3) {
        return 7;
      }
      if ((v8 & 1) != 0) {
        unint64_t v5 = 16 * v10;
      }
      else {
        unint64_t v5 = 10 * v10;
      }
      unint64_t v10 = v5;
      if (v5 + v7 < v5) {
        return 7;
      }
      unint64_t v10 = v5 + v7;
      unsigned int v9 = (ot::Utils::CmdLineParser *)((char *)v9 + 1);
      if (!*(_BYTE *)v9)
      {
        *(void *)__int16 v12 = v10;
        return v11;
      }
    }
  }

  else
  {
    return 7;
  }

  return v11;
}

uint64_t ot::Utils::CmdLineParser::ParseHexDigit( ot::Utils::CmdLineParser *this, _BYTE *a2, unsigned __int8 *a3)
{
  unsigned int v4 = 0;
  if ((char)this < 65 || (char)this > 70)
  {
    if ((char)this < 97 || (char)this > 102) {
      return ot::Utils::CmdLineParser::ParseDigit( (ot::Utils::CmdLineParser *)(char)this,  a2,  a3);
    }
    else {
      *a2  = (_BYTE)this - 87;
    }
  }

  else
  {
    *a2  = (_BYTE)this - 55;
  }

  return v4;
}

uint64_t ot::Utils::CmdLineParser::ParseDigit(ot::Utils::CmdLineParser *this, _BYTE *a2, unsigned __int8 *a3)
{
  unsigned int v4 = 0;
  else {
    return 7;
  }
  return v4;
}

uint64_t ot::Utils::CmdLineParser::ParseAsInt8(ot::Utils::CmdLineParser *this, char *a2, unsigned __int8 *a3)
{
  return ot::Utils::CmdLineParser::ParseInt<signed char>(this, a2, a3);
}

uint64_t ot::Utils::CmdLineParser::ParseInt<signed char>( ot::Utils::CmdLineParser *a1, _BYTE *a2, unsigned __int8 *a3)
{
  unsigned __int8 v7 = a1;
  unsigned int v6 = a2;
  unsigned int v5 = ot::Utils::CmdLineParser::ParseAsInt32(a1, v4, a3);
  if (!v5)
  {
    else {
      return 7;
    }
  }

  return v5;
}

{
  return __ZN2ot5Utils13CmdLineParser8ParseIntIaEE7otErrorPKcRT_(a1, a2, a3);
}

uint64_t ot::Utils::CmdLineParser::ParseAsInt16( ot::Utils::CmdLineParser *this, char *a2, unsigned __int8 *a3)
{
  return ot::Utils::CmdLineParser::ParseInt<short>(this, a2, a3);
}

uint64_t ot::Utils::CmdLineParser::ParseInt<short>( ot::Utils::CmdLineParser *a1, _WORD *a2, unsigned __int8 *a3)
{
  unsigned __int8 v7 = a1;
  unsigned int v6 = a2;
  unsigned int v5 = ot::Utils::CmdLineParser::ParseAsInt32(a1, v4, a3);
  if (!v5)
  {
    else {
      return 7;
    }
  }

  return v5;
}

{
  return __ZN2ot5Utils13CmdLineParser8ParseIntIsEE7otErrorPKcRT_(a1, a2, a3);
}

uint64_t ot::Utils::CmdLineParser::ParseAsInt32( ot::Utils::CmdLineParser *this, char *a2, unsigned __int8 *a3)
{
  unint64_t v10 = this;
  unsigned int v9 = a2;
  char v6 = 0;
  if (this)
  {
    if (*(_BYTE *)v10 == 45)
    {
      unint64_t v10 = (ot::Utils::CmdLineParser *)((char *)v10 + 1);
      char v6 = 1;
    }

    else if (*(_BYTE *)v10 == 43)
    {
      unint64_t v10 = (ot::Utils::CmdLineParser *)((char *)v10 + 1);
    }

    unsigned int v8 = ot::Utils::CmdLineParser::ParseAsUint64(v10, v7, a3);
    if (!v8)
    {
      unint64_t v3 = 0x80000000LL;
      if ((v6 & 1) == 0) {
        unint64_t v3 = 0x7FFFFFFFLL;
      }
      if (*(void *)v7 <= v3)
      {
        if ((v6 & 1) != 0) {
          uint64_t v5 = -*(void *)v7;
        }
        else {
          LODWORD(v5)  = *(_DWORD *)v7;
        }
        *(_DWORD *)unsigned int v9 = v5;
      }

      else
      {
        return 7;
      }
    }
  }

  else
  {
    return 7;
  }

  return v8;
}

uint64_t ot::Utils::CmdLineParser::ParseAsBool(ot::Utils::CmdLineParser *this, char *a2, BOOL *a3)
{
  unsigned __int8 v7 = this;
  char v6 = a2;
  unsigned int v5 = ot::Utils::CmdLineParser::ParseAsUint32(this, v4, (unsigned __int8 *)a3);
  if (!v5) {
    char *v6 = *(_DWORD *)v4 != 0;
  }
  return v5;
}

uint64_t ot::Utils::CmdLineParser::ParseAsIp6Address(const char *a1, uint64_t a2)
{
  if (a1) {
    return otIp6AddressFromString(a1, a2);
  }
  else {
    return 7;
  }
}

uint64_t ot::Utils::CmdLineParser::ParseAsIp4Address(const char *a1, uint64_t a2)
{
  if (a1) {
    return otIp4AddressFromString(a1, a2);
  }
  else {
    return 7;
  }
}

uint64_t ot::Utils::CmdLineParser::ParseAsIp6Prefix(ot *a1, uint64_t a2)
{
  if (a1) {
    return otIp6PrefixFromString(a1, a2);
  }
  else {
    return 7;
  }
}

uint64_t ot::Utils::CmdLineParser::ParseAsHexString( ot::Utils::CmdLineParser *this, char *a2, unsigned __int8 *a3)
{
  char v6 = (const char *)this;
  unsigned int v5 = a2;
  __int16 v4 = (__int16)a3;
  return ot::Utils::CmdLineParser::ParseHexString(&v6, &v4, a2, 0);
}

uint64_t ot::Utils::CmdLineParser::ParseHexString(const char **a1, _WORD *a2, _BYTE *a3, int a4)
{
  uint64_t v15 = a1;
  __int16 v14 = a2;
  __int16 v13 = a3;
  int v12 = a4;
  unsigned int v11 = 0;
  unint64_t v10 = 0LL;
  if (*a1)
  {
    size_t v9 = strlen(*v15);
    unint64_t v8 = (v9 + 1) / 2;
    if (v12)
    {
    }

    else if (v8 != (unsigned __int16)*v14)
    {
      return 7;
    }

    BOOL v7 = (v9 & 1) != 0;
    while (v10 < v8)
    {
      if (v7)
      {
        _BYTE *v13 = 0;
        BOOL v7 = 0;
      }

      else
      {
        unsigned int v11 = ot::Utils::CmdLineParser::ParseHexDigit((ot::Utils::CmdLineParser *)**v15, &v6, v4);
        if (v11) {
          return v11;
        }
        ++*v15;
        _BYTE *v13 = 16 * v6;
      }

      unsigned int v11 = ot::Utils::CmdLineParser::ParseHexDigit((ot::Utils::CmdLineParser *)**v15, &v6, v4);
      if (v11) {
        return v11;
      }
      ++*v15;
      *v13++ |= v6;
      ++v10;
    }

    _WORD *v14 = v10;
  }

  else
  {
    return 7;
  }

  return v11;
}

uint64_t ot::Utils::CmdLineParser::ParseAsHexString( ot::Utils::CmdLineParser *this, char *a2, unsigned __int16 *a3, unsigned __int8 *a4)
{
  unsigned int v5 = (const char *)this;
  return ot::Utils::CmdLineParser::ParseHexString(&v5, a2, a3, 1);
}

uint64_t ot::Utils::CmdLineParser::ParseAsHexStringSegment( const char **this, const char **a2, unsigned __int16 *a3, unsigned __int8 *a4)
{
  return ot::Utils::CmdLineParser::ParseHexString(this, a2, a3, 2);
}

uint64_t ot::Utils::CmdLineParser::Arg::GetLength(const char **this)
{
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)this)) {
    return 0;
  }
  else {
    return (unsigned __int16)strlen(*this);
  }
}

BOOL ot::Utils::CmdLineParser::Arg::operator==(const char **a1, const char *a2)
{
  BOOL v4 = 0;
  if (!ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a1)) {
    return strcmp(*a1, a2) == 0;
  }
  return v4;
}

BOOL ot::Utils::CmdLineParser::Arg::CopyArgsToStringArray( ot::Utils::CmdLineParser::Arg *this, ot::Utils::CmdLineParser::Arg *a2, char **a3)
{
  for (unsigned __int8 i = 0; ; ++i)
  {
    BOOL result = ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)((char *)this + 8 * i));
    if (result) {
      break;
    }
    *((void *)a2 + i)  = ot::Utils::CmdLineParser::Arg::GetCString((ot::Utils::CmdLineParser::Arg *)((char *)this + 8 * i));
  }

  return result;
}

uint64_t ot::Utils::CmdLineParser::Arg::GetArgsLength( ot::Utils::CmdLineParser::Arg *this, ot::Utils::CmdLineParser::Arg *a2)
{
  return i;
}

uint64_t ot::Utils::PingSender::Config::SetUnspecifiedToDefault(uint64_t this)
{
  if (!*(_WORD *)(this + 56)) {
    *(_WORD *)(this + 56)  = 8;
  }
  if (!*(_WORD *)(this + 58)) {
    *(_WORD *)(this + 58)  = 1;
  }
  if (!*(_DWORD *)(this + 60)) {
    *(_DWORD *)(this + 6ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 1000;
  }
  if (!*(_WORD *)(this + 64)) {
    *(_WORD *)(this + 6ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 3000;
  }
  return this;
}

uint64_t ot::Utils::PingSender::HandleTimer(ot::Utils::PingSender *this)
{
  if (*((_WORD *)this + 29)) {
    return ot::Utils::PingSender::SendPing(this);
  }
  else {
    return ot::Utils::PingSender::Config::InvokeStatisticsCallback((uint64_t)this, (uint64_t)this + 72);
  }
}

uint64_t ot::Utils::PingSender::Config::InvokeReplyCallback(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 32)) {
    return (*(uint64_t (**)(uint64_t, void))(result + 32))(a2, *(void *)(result + 48));
  }
  return result;
}

uint64_t ot::Utils::PingSender::Config::InvokeStatisticsCallback(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 40)) {
    return (*(uint64_t (**)(uint64_t, void))(result + 40))(a2, *(void *)(result + 48));
  }
  return result;
}

ot::Utils::PingSender *ot::Utils::PingSender::PingSender(ot::Utils::PingSender *this, ot::Instance *a2)
{
  *((_WORD *)this + 4ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  *((_WORD *)this + 45)  = 0;
  ot::TimerMilliIn<ot::Utils::PingSender,&ot::Utils::PingSender::HandleTimer>::TimerMilliIn( (ot::Utils::PingSender *)((char *)this + 96),  a2);
  ot::Ip6::Icmp::Handler::Handler((void *)this + 15, (uint64_t)ot::Utils::PingSender::HandleIcmpReceive, (uint64_t)this);
  BOOL v2 = (ot::Ip6::Icmp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Icmp>(this);
  ot::Ip6::Icmp::RegisterHandler(v2, (ot::Utils::PingSender *)((char *)this + 120));
  IgnoreError();
  return this;
}

{
  ot::Utils::PingSender::PingSender(this, a2);
  return this;
}

ot::Utils::PingSender::Statistics *ot::Utils::PingSender::Statistics::Statistics( ot::Utils::PingSender::Statistics *this)
{
  return this;
}

{
  ot::Utils::PingSender::Statistics::Clear((uint64_t)this);
  return this;
}

ot::TimerMilli *ot::TimerMilliIn<ot::Utils::PingSender,&ot::Utils::PingSender::HandleTimer>::TimerMilliIn( ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli( a1,  a2,  (void (*)(ot::Timer *))ot::TimerMilliIn<ot::Utils::PingSender,&ot::Utils::PingSender::HandleTimer>::HandleTimer);
  return a1;
}

uint64_t ot::Utils::PingSender::HandleIcmpReceive( ot::Utils::PingSender *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = v4;
  ot::AsCoreType<otMessageInfo>(a3);
  size_t v9 = v5;
  ot::AsCoreType<otIcmp6Header>(a4);
  return ot::Utils::PingSender::HandleIcmpReceive(a1, v8, v9, v6);
}

uint64_t ot::Utils::PingSender::Ping(ot::Utils::PingSender *this, const ot::Utils::PingSender::Config *a2)
{
  unsigned int v5 = 0;
  if (ot::Timer::IsRunning((ot::Utils::PingSender *)((char *)this + 96)))
  {
    return 5;
  }

  else
  {
    memcpy(this, a2, 0x48uLL);
    ot::Utils::PingSender::Config::SetUnspecifiedToDefault((uint64_t)this);
    if (*((_DWORD *)this + 15) <= 0x7FFFFFFFu)
    {
      ot::Utils::PingSender::Statistics::Clear((uint64_t)this + 72);
      ot::AsCoreType<otIp6Address>((uint64_t)this + 16);
      *((_BYTE *)this + 8ot::NetworkData::NetworkDataTlv::SetType(this, 4) = ot::Ip6::Address::IsMulticast(v2);
      ++*((_WORD *)this + 44);
      ot::Utils::PingSender::SendPing(this);
    }

    else
    {
      return 7;
    }
  }

  return v5;
}

uint64_t ot::Utils::PingSender::Statistics::Clear(uint64_t this)
{
  *(_WORD *)this  = 0;
  *(_WORD *)(this + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0;
  *(_DWORD *)(this + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  *(_WORD *)(this + 8)  = -1;
  *(_WORD *)(this + 1ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 0;
  *(_BYTE *)(this + 1ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0;
  return this;
}

{
  return __ZN2ot5Utils10PingSender10Statistics5ClearEv(this);
}

uint64_t ot::Utils::PingSender::SendPing(ot::Utils::PingSender *this)
{
  __int16 v17 = this;
  int Now = ot::TimerMilli::GetNow(this);
  uint64_t v15 = 0LL;
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)v12);
  ot::Utils::PingSender::Config::GetSource(this);
  ot::Ip6::MessageInfo::SetSockAddr(v12, v1);
  ot::Utils::PingSender::Config::GetDestination(this);
  ot::Ip6::MessageInfo::SetPeerAddr(v12, v2);
  char v13 = *((_BYTE *)this + 66);
  char v14 = v14 & 0xF7 | (8 * (*((_BYTE *)this + 67) & 1));
  unint64_t v3 = (ot::Ip6::Icmp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Icmp>(this);
  uint64_t v15 = ot::Ip6::Icmp::NewMessage(v3);
  if (v15)
  {
    size_t v9 = v15;
    uint64_t Value = (ot::Encoding::BigEndian *)ot::Time::GetValue((ot::Time *)&Now);
    int v11 = ot::Encoding::BigEndian::HostSwap32(Value);
    if (!ot::Message::Append<unsigned int>(v9, (char *)&v11))
    {
      int v8 = *((unsigned __int16 *)this + 28);
      if (v8 <= (unsigned __int16)ot::Message::GetLength(v15)
        || !ot::Message::SetLength(v15, *((_WORD *)this + 28)))
      {
        unsigned int v5 = (ot::Ip6::Icmp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Icmp>(this);
        *((_WORD *)this + 45)  = ot::Ip6::Icmp::GetEchoSequence(v5);
        char v6 = (ot::Ip6::Icmp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Icmp>(this);
        if (!ot::Ip6::Icmp::SendEchoRequest( v6,  v15,  (const ot::Ip6::MessageInfo *)v12,  *((_WORD *)this + 44)))
        {
          ++*((_WORD *)this + 36);
          uint64_t v15 = 0LL;
        }
      }
    }
  }

  if (v15) {
    ot::Message::Free(v15);
  }
  if (--*((_WORD *)this + 29)) {
    return ot::TimerMilli::Start((ot::Utils::PingSender *)((char *)this + 96), *((_DWORD *)this + 15));
  }
  else {
    return ot::TimerMilli::Start((ot::Utils::PingSender *)((char *)this + 96), *((unsigned __int16 *)this + 32));
  }
}

uint64_t ot::Utils::PingSender::Stop(ot::Utils::PingSender *this)
{
  uint64_t result = ot::TimerMilli::Stop((ot::Utils::PingSender *)((char *)this + 96));
  ++*((_WORD *)this + 44);
  return result;
}

void ot::Utils::PingSender::Config::GetSource(ot::Utils::PingSender::Config *this)
{
}

{
  __ZN2ot5Utils10PingSender6Config9GetSourceEv(this);
}

void ot::Utils::PingSender::Config::GetDestination(ot::Utils::PingSender::Config *this)
{
}

{
  __ZN2ot5Utils10PingSender6Config14GetDestinationEv(this);
}

uint64_t ot::Message::Append<unsigned int>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 4u);
}

{
  return __ZN2ot7Message6AppendIjEE7otErrorRKT_(a1, a2);
}

uint64_t ot::Ip6::Icmp::GetEchoSequence(ot::Ip6::Icmp *this)
{
  return *((unsigned __int16 *)this + 4);
}

{
  return __ZNK2ot3Ip64Icmp15GetEchoSequenceEv(this);
}

uint64_t ot::Utils::PingSender::HandleIcmpReceive( ot::Utils::PingSender *this, const ot::Message *a2, const ot::Ip6::MessageInfo *a3, const ot::Ip6::Icmp::Header *a4)
{
  uint64_t v20 = this;
  char v19 = a2;
  char v18 = a3;
  __int16 v17 = a4;
  uint64_t result = ot::Timer::IsRunning((ot::Utils::PingSender *)((char *)this + 96));
  if ((result & 1) != 0)
  {
    uint64_t result = ot::Ip6::Icmp::Header::GetType(v17);
    if (result == 129)
    {
      uint64_t result = ot::Ip6::Icmp::Header::GetId(v17);
      if (*((unsigned __int16 *)this + 44) == (unsigned __int16)result)
      {
        unsigned __int16 Offset = ot::Message::GetOffset(v19);
        uint64_t result = ot::Message::Read<unsigned int>(v19, Offset, (char *)v12);
        if (!(_DWORD)result)
        {
          v12[0]  = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)v12[0]);
          ot::Ip6::MessageInfo::GetPeerAddr(v18);
          *(_OWORD *)&v12[1]  = *(_OWORD *)v6;
          int Now = ot::TimerMilli::GetNow(v6);
          ot::Time::Time((ot::Time *)&v10, v12[0]);
          unsigned int v7 = ot::Time::operator-(&Now, &v10);
          unsigned __int16 v13 = ot::ClampToUint16<unsigned int>(v7);
          __int16 Length = ot::Message::GetLength(v19);
          __int16 v14 = Length - ot::Message::GetOffset(v19);
          Sequence  = ot::Ip6::Icmp::Header::GetSequence(v17);
          HopLimit  = ot::Ip6::MessageInfo::GetHopLimit(v18);
          ++*((_WORD *)this + 37);
          *((_DWORD *)this + 19) += v13;
          *((_WORD *)this + 4ot::NetworkData::NetworkDataTlv::SetType(this, 1) = ot::Max<unsigned short>(*((_WORD *)this + 41), v13);
          *((_WORD *)this + 4ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = ot::Min<unsigned short>(*((_WORD *)this + 40), v13);
          if ((*((_BYTE *)this + 84) & 1) == 0
            && !*((_WORD *)this + 29)
            && *((unsigned __int16 *)this + 45) == (unsigned __int16)ot::Ip6::Icmp::Header::GetSequence(v17))
          {
            ot::TimerMilli::Stop((ot::Utils::PingSender *)((char *)this + 96));
          }

          uint64_t result = ot::Utils::PingSender::Config::InvokeReplyCallback((uint64_t)this, (uint64_t)&v12[1]);
          if ((*((_BYTE *)this + 84) & 1) == 0 && !*((_WORD *)this + 29))
          {
            uint64_t result = ot::Ip6::Icmp::Header::GetSequence(v17);
          }
        }
      }
    }
  }

  return result;
}

uint64_t ot::Ip6::Icmp::Header::GetId(ot::Ip6::Icmp::Header *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 2));
}

{
  return __ZNK2ot3Ip64Icmp6Header5GetIdEv(this);
}

uint64_t ot::Message::Read<unsigned int>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 4u);
}

{
  return __ZNK2ot7Message4ReadIjEE7otErrortRT_(a1, a2, a3);
}

uint64_t ot::ClampToUint16<unsigned int>(unsigned int a1)
{
  return (unsigned __int16)ot::Min<unsigned int>(a1, 0xFFFFu);
}

{
  return __ZN2ot13ClampToUint16IjEEtT_(a1);
}

uint64_t ot::TimerMilliIn<ot::Utils::PingSender,&ot::Utils::PingSender::HandleTimer>::HandleTimer( ot::InstanceLocator *a1)
{
  BOOL v2 = (ot::Utils::PingSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::PingSender>(a1);
  return ot::Utils::PingSender::HandleTimer(v2);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::PingSender>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Utils::PingSender>((uint64_t)Instance);
}

{
  return __ZNK2ot11GetProviderINS_15InstanceLocatorEE3GetINS_5Utils10PingSenderEEERT_v(a1);
}

ot::Utils::Slaac *ot::Utils::Slaac::Slaac(ot::Utils::Slaac *this, ot::Instance *a2)
{
  *(_BYTE *)this  = 1;
  *((void *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = 0LL;
  memset((char *)this + 16, 0, 0x80uLL);
  return this;
}

{
  ot::Utils::Slaac::Slaac(this, a2);
  return this;
}

_BYTE *ot::Utils::Slaac::Enable( _BYTE *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*this & 1) == 0)
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Slaac", "Enabling", a3, a4, a5, a6, a7, a8, (char)this);
    *(_BYTE *)int v8 = 1;
    return (_BYTE *)ot::Utils::Slaac::Update((uint64_t)v8, 1);
  }

  return this;
}

uint64_t ot::Utils::Slaac::Update(uint64_t this, char a2)
{
  uint64_t v52 = this;
  char v51 = a2;
  int v36 = (ot::InstanceLocator *)this;
  if ((a2 & 2) != 0)
  {
    uint64_t v46 = this + 16;
    __int16 v45 = (ot::Ip6::Netif::UnicastAddress *)(this + 16);
    uint64_t v44 = (ot::Ip6::Netif::UnicastAddress *)(this + 144);
    while (v45 != v44)
    {
      unsigned __int16 v43 = v45;
      if ((*((_BYTE *)v45 + 18) & 2) != 0)
      {
        char v47 = 0;
        if ((*(_BYTE *)v36 & 1) != 0)
        {
          unsigned int v50 = 0;
          while (1)
          {
            BOOL v2 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(v36);
            this  = ot::NetworkData::NetworkData::GetNextOnMeshPrefix( v2,  &v50,  (ot::NetworkData::OnMeshPrefixConfig *)v48);
            if ((_DWORD)this) {
              break;
            }
            if ((v49 & 0x400) == 0 && (v49 & 8) != 0)
            {
              ot::NetworkData::OnMeshPrefixConfig::GetPrefix((ot::NetworkData::OnMeshPrefixConfig *)v48);
              if ((ot::Utils::Slaac::ShouldFilter(v36, v3) & 1) == 0)
              {
                this  = ot::Utils::Slaac::DoesConfigMatchNetifAddr((ot::Utils::Slaac *)v48, v43, v4);
                if ((this & 1) != 0)
                {
                  char v47 = 1;
                  break;
                }
              }
            }
          }
        }

        if ((v47 & 1) == 0)
        {
          ot::Ip6::Netif::UnicastAddress::GetAddress(v43);
          ot::Ip6::Address::ToString(v5, (ot::StringWriter *)v54);
          char v6 = ot::String<(unsigned short)40>::AsCString((uint64_t)v54);
          ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Slaac", "Removing address %s", v7, v8, v9, v10, v11, v12, v6);
          unsigned __int16 v13 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(v36);
          this  = ot::Ip6::Netif::RemoveUnicastAddress(v13, v43);
          *((_BYTE *)v43 + 18) &= ~2u;
        }
      }

      __int16 v45 = (ot::Ip6::Netif::UnicastAddress *)((char *)v45 + 32);
    }
  }

  if ((v51 & 1) != 0 && (*(_BYTE *)v36 & 1) != 0)
  {
    unsigned int v50 = 0;
    while (1)
    {
      __int16 v14 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(v36);
      this  = ot::NetworkData::NetworkData::GetNextOnMeshPrefix(v14, &v50, (ot::NetworkData::OnMeshPrefixConfig *)v48);
      if ((_DWORD)this) {
        break;
      }
      ot::NetworkData::OnMeshPrefixConfig::GetPrefix((ot::NetworkData::OnMeshPrefixConfig *)v48);
      char v42 = v15;
      if ((v49 & 0x400) == 0
        && (v49 & 8) != 0
        && ot::Ip6::Prefix::GetLength(v42) == 64
        && (ot::Utils::Slaac::ShouldFilter(v36, v42) & 1) == 0)
      {
        char v47 = 0;
        uint64_t v16 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(v36);
        ot::Ip6::Netif::GetUnicastAddresses(v16);
        v41[1]  = v17;
        v41[0]  = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::begin(v17);
        uint64_t v40 = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::end();
        while (ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator!=( v41,  &v40))
        {
          char v39 = (ot::NetworkData::OnMeshPrefixConfig *)ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator*((uint64_t)v41);
          if (ot::Utils::Slaac::DoesConfigMatchNetifAddr((ot::Utils::Slaac *)v48, v39, v18))
          {
            char v47 = 1;
            break;
          }

          ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator++(v41);
        }

        if ((v47 & 1) == 0)
        {
          char v38 = 0;
          for (unsigned __int8 i = (ot::InstanceLocator *)((char *)v36 + 16);
                i != (ot::InstanceLocator *)((char *)v36 + 144);
                unsigned __int8 i = (ot::Ip6::Netif::UnicastAddress *)((char *)i + 32))
          {
            if ((*((_BYTE *)i + 18) & 2) == 0)
            {
              if ((v49 & 0x80) != 0) {
                ot::Ip6::Netif::UnicastAddress::InitAsSlaacOrigin(i, *((_BYTE *)v42 + 16), (v49 & 4) != 0);
              }
              else {
                ot::Ip6::Netif::UnicastAddress::InitAsSlaacOrigin(i, 128, (v49 & 4) != 0);
              }
              ot::Ip6::Netif::UnicastAddress::GetAddress(i);
              ot::Ip6::Address::SetPrefix(v19, v42);
              ot::Utils::Slaac::GenerateIid(v36, i, 0LL, 0, 0LL);
              IgnoreError();
              ot::Ip6::Netif::UnicastAddress::GetAddress(i);
              ot::Ip6::Address::ToString(v20, (ot::StringWriter *)v53);
              char v21 = ot::String<(unsigned short)40>::AsCString((uint64_t)v53);
              ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"Slaac",  "Adding address %s",  v22,  v23,  v24,  v25,  v26,  v27,  v21);
              uint64_t v28 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(v36);
              ot::Ip6::Netif::AddUnicastAddress(v28, i);
              char v38 = 1;
              break;
            }
          }

          if ((v38 & 1) == 0)
          {
            char v29 = ot::GetArrayLength<ot::Ip6::Netif::UnicastAddress,(unsigned short)4>();
            ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)"Slaac",  "Failed to add - max %d addresses supported and already in use",  v30,  v31,  v32,  v33,  v34,  v35,  v29);
          }
        }
      }
    }
  }

  return this;
}

_BYTE *ot::Utils::Slaac::Disable( _BYTE *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*this & 1) != 0)
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Slaac", "Disabling", a3, a4, a5, a6, a7, a8, (char)this);
    *(_BYTE *)uint64_t v8 = 0;
    return (_BYTE *)ot::Utils::Slaac::Update((uint64_t)v8, 2);
  }

  return this;
}

void ot::Utils::Slaac::SetFilter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 != *(void *)(a1 + 8))
  {
    *(void *)(a1 + 8)  = a2;
    uint64_t v8 = "updated";
    if (!*(void *)(a1 + 8)) {
      uint64_t v8 = "disabled";
    }
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Slaac", "Filter %s", a3, a4, a5, a6, a7, a8, (char)v8);
    if ((*(_BYTE *)a1 & 1) != 0) {
      ot::Utils::Slaac::Update(a1, 3);
    }
  }

uint64_t ot::Utils::Slaac::ShouldFilter(ot::Utils::Slaac *this, const ot::Ip6::Prefix *a2)
{
  char v5 = 0;
  if (*((void *)this + 1))
  {
    BOOL v4 = (uint64_t (*)(void *, const ot::Ip6::Prefix *))*((void *)this + 1);
    Instance  = ot::InstanceLocator::GetInstance(this);
    char v5 = v4(Instance, a2);
  }

  return v5 & 1;
}

uint64_t ot::Utils::Slaac::HandleNotifierEvents(uint64_t result, uint64_t a2)
{
  uint64_t v4 = a2;
  BOOL v2 = (ot::Utils::Slaac *)result;
  char v3 = 0;
  if ((*(_BYTE *)result & 1) != 0)
  {
    if (ot::Events::Contains(&v4, 512LL)) {
      char v3 = 3;
    }
    uint64_t result = ot::Events::Contains(&v4, 2LL);
    if ((result & 1) != 0) {
      v3 |= 1u;
    }
    if (v3) {
      return ot::Utils::Slaac::Update((uint64_t)v2, v3);
    }
  }

  return result;
}

BOOL ot::Utils::Slaac::DoesConfigMatchNetifAddr( ot::Utils::Slaac *this, const ot::NetworkData::OnMeshPrefixConfig *a2, const ot::Ip6::Netif::UnicastAddress *a3)
{
  if ((*(_WORD *)((_BYTE *)this + 17) & 0x80) != 0 && *((unsigned __int8 *)a2 + 16) == *((unsigned __int8 *)this + 16)
    || (BOOL v7 = 0, (*(_WORD *)((_BYTE *)this + 17) & 0x80) == 0) && (BOOL v7 = 0, *((unsigned __int8 *)a2 + 16) == 128))
  {
    ot::Ip6::Netif::UnicastAddress::GetAddress(a2);
    char v6 = v3;
    ot::NetworkData::OnMeshPrefixConfig::GetPrefix(this);
    return ot::Ip6::Address::MatchesPrefix(v6, v4);
  }

  return v7;
}

uint64_t ot::Utils::Slaac::GenerateIid( ot::Utils::Slaac *this, ot::Ip6::Netif::UnicastAddress *a2, unsigned __int8 *a3, unsigned __int8 a4, unsigned __int8 *a5)
{
  char v29 = this;
  uint64_t v28 = a2;
  uint64_t v27 = a3;
  unsigned __int8 v26 = a4;
  uint64_t v25 = a5;
  int v24 = 1;
  int v23 = 1851879543;
  if (a5) {
    unsigned __int8 v18 = *v25;
  }
  else {
    unsigned __int8 v18 = 0;
  }
  unsigned __int8 v22 = v18;
  ot::Crypto::Sha256::Sha256((ot::Crypto::Sha256 *)v21);
  ot::Utils::Slaac::GetIidSecretKey(this, (ot::Random::Crypto *)v31);
  for (unsigned __int16 i = 0; ; ++i)
  {
    if (i >= 0x100u)
    {
      ot::Logger::LogAtLevel<(ot::LogLevel)2>( (ot *)"Slaac",  "Failed to generate a non-reserved IID after %d attempts",  v5,  v6,  v7,  v8,  v9,  v10,  0);
      goto LABEL_14;
    }

    ot::Crypto::Sha256::Start((ot::Crypto::Sha256 *)v21);
    ot::Crypto::Sha256::Update( (ot::Crypto::Sha256 *)v21,  (uint64_t)v28,  ((*((unsigned __int8 *)v28 + 16) + 7) / 8));
    if (v27) {
      ot::Crypto::Sha256::Update((ot::Crypto::Sha256 *)v21, (uint64_t)v27, v26);
    }
    ot::Crypto::Sha256::Update<unsigned char [4]>((ot::Crypto::Sha256 *)v21, (uint64_t)&v23);
    ot::Crypto::Sha256::Update<unsigned char>((ot::Crypto::Sha256 *)v21, (uint64_t)&v22);
    ot::Crypto::Sha256::Update<ot::Utils::Slaac::IidSecretKey>((ot::Crypto::Sha256 *)v21, (uint64_t)v31);
    ot::Crypto::Sha256::Finish((ot::Crypto::Sha256 *)v21, (ot::Crypto::Sha256::Hash *)v30);
    ot::Ip6::Netif::UnicastAddress::GetAddress(v28);
    Iid  = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v11);
    ot::Crypto::Sha256::Hash::GetBytes((ot::Crypto::Sha256::Hash *)v30);
    ot::Ip6::InterfaceIdentifier::SetBytes(Iid, v12);
    ot::Ip6::Netif::UnicastAddress::GetAddress(v28);
    __int16 v14 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v13);
    if (!ot::Ip6::InterfaceIdentifier::IsReserved(v14)) {
      break;
    }
    ++v22;
  }

  if (v25) {
    *uint64_t v25 = v22;
  }
  int v24 = 0;
LABEL_14:
  unsigned int v16 = v24;
  ot::Crypto::Sha256::~Sha256((ot::Crypto::Sha256 *)v21);
  return v16;
}

uint64_t ot::GetArrayLength<ot::Ip6::Netif::UnicastAddress,(unsigned short)4>()
{
  return 4LL;
}

{
  return __ZN2ot14GetArrayLengthINS_3Ip65Netif14UnicastAddressELt4EEEtRAT0__KT_();
}

void ot::Utils::Slaac::GetIidSecretKey(ot::InstanceLocator *a1, ot::Random::Crypto *a2)
{
  BOOL v2 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Settings>(a1);
  if (ot::Settings::Read<ot::SettingsBase::SlaacIidSecretKey>(v2, a2))
  {
    if (ot::Random::Crypto::FillBuffer(a2, (unsigned __int8 *)0x20))
    {
      ot::Random::Crypto::FillBuffer(a2, (unsigned __int8 *)0x20);
      IgnoreError();
    }

    char v3 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Settings>(a1);
    ot::Settings::Save<ot::SettingsBase::SlaacIidSecretKey>(v3, a2);
    IgnoreError();
    ot::Logger::LogAtLevel<(ot::LogLevel)4>( (ot *)"Slaac",  "Generated and saved secret key",  v4,  v5,  v6,  v7,  v8,  v9,  (char)a1);
  }

uint64_t ot::Crypto::Sha256::Update<unsigned char [4]>(ot::Crypto::Sha256 *a1, uint64_t a2)
{
  return ot::Crypto::Sha256::Update(a1, a2, 4u);
}

{
  return __ZN2ot6Crypto6Sha2566UpdateIA4_hEEvRKT_(a1, a2);
}

uint64_t ot::Crypto::Sha256::Update<unsigned char>(ot::Crypto::Sha256 *a1, uint64_t a2)
{
  return ot::Crypto::Sha256::Update(a1, a2, 1u);
}

{
  return __ZN2ot6Crypto6Sha2566UpdateIhEEvRKT_(a1, a2);
}

uint64_t ot::Crypto::Sha256::Update<ot::Utils::Slaac::IidSecretKey>(ot::Crypto::Sha256 *a1, uint64_t a2)
{
  return ot::Crypto::Sha256::Update(a1, a2, 0x20u);
}

{
  return __ZN2ot6Crypto6Sha2566UpdateINS_5Utils5Slaac12IidSecretKeyEEEvRKT_(a1, a2);
}

uint64_t ot::Settings::Read<ot::SettingsBase::SlaacIidSecretKey>(ot::InstanceLocator *a1, void *a2)
{
  return ot::Settings::ReadEntry(a1, 7u, a2, 0x20u);
}

{
  return __ZNK2ot8Settings4ReadINS_12SettingsBase17SlaacIidSecretKeyEEE7otErrorRNT_9ValueTypeE(a1, a2);
}

uint64_t ot::Settings::Save<ot::SettingsBase::SlaacIidSecretKey>(ot::InstanceLocator *a1, const void *a2)
{
  return ot::Settings::SaveEntry(a1, 7, a2, (uint64_t)v3, 0x20u);
}

{
  return __ZN2ot8Settings4SaveINS_12SettingsBase17SlaacIidSecretKeyEEE7otErrorRKNT_9ValueTypeE(a1, a2);
}

uint64_t ot::Hdlc::Encoder::Encoder(uint64_t this, ot::Hdlc::FrameWritePointer *a2)
{
  *(void *)this  = a2;
  *(_WORD *)(this + 8)  = 0;
  return this;
}

ot::Hdlc::Encoder *ot::Hdlc::Encoder::Encoder(ot::Hdlc::Encoder *this, ot::Hdlc::FrameWritePointer *a2)
{
  return this;
}

uint64_t ot::Hdlc::Encoder::BeginFrame(ot::Hdlc::Encoder *this)
{
  *((_WORD *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = -1;
  return ot::Hdlc::FrameWritePointer::WriteByte(*(ot::Hdlc::FrameWritePointer **)this, 126);
}

uint64_t ot::Hdlc::FrameWritePointer::WriteByte(ot::Hdlc::FrameWritePointer *this, char a2)
{
  if (ot::Hdlc::FrameWritePointer::CanWrite(this, 1u))
  {
    BOOL v2 = (_BYTE *)(*(void *)this)++;
    _BYTE *v2 = a2;
    --*((_WORD *)this + 4);
    return 0;
  }

  else
  {
    return 3;
  }

{
  return __ZN2ot4Hdlc17FrameWritePointer9WriteByteEh(this, a2);
}

uint64_t ot::Hdlc::Encoder::Encode(ot::Hdlc::FrameWritePointer **this, unsigned __int8 a2)
{
  unsigned int v4 = 0;
  if (!ot::Hdlc::HdlcByteNeedsEscape((ot::Hdlc *)a2))
  {
    unsigned int v4 = ot::Hdlc::FrameWritePointer::WriteByte(*this, a2);
    if (v4) {
      return v4;
    }
LABEL_6:
    *((_WORD *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = ot::Hdlc::UpdateFcs((ot::Hdlc *)*((unsigned __int16 *)this + 4), a2);
    return v4;
  }

  if (ot::Hdlc::FrameWritePointer::CanWrite(*this, 2u))
  {
    ot::Hdlc::FrameWritePointer::WriteByte(*this, 125);
    IgnoreError();
    ot::Hdlc::FrameWritePointer::WriteByte(*this, a2 ^ 0x20);
    IgnoreError();
    goto LABEL_6;
  }

  return 3;
}

BOOL ot::Hdlc::HdlcByteNeedsEscape(ot::Hdlc *this)
{
  BOOL v3 = 1;
  if (this != 17 && this != 19)
  {
    BOOL v1 = this == 126 || this == 125;
  }

  return v3;
}

uint64_t ot::Hdlc::UpdateFcs(ot::Hdlc *this, char a2)
{
  return (unsigned __int16)(ot::Hdlc::UpdateFcs(unsigned short,unsigned char)::sFcsTable[(this ^ a2)] ^ ((int)(unsigned __int16)this >> 8));
}

uint64_t ot::Hdlc::Encoder::Encode(ot::Hdlc::FrameWritePointer **this, unsigned __int8 *a2, __int16 a3)
{
  *(_WORD *)&v9[4]  = 0;
  *(_DWORD *)uint64_t v9 = *((unsigned __int16 *)this + 4);
  __int128 v8 = *(_OWORD *)*this;
  do
  {
    if (!a3--) {
      break;
    }
    unsigned int v4 = a2++;
    *(_DWORD *)&uint64_t v9[2] = ot::Hdlc::Encoder::Encode(this, *v4);
  }

  while (!*(_DWORD *)&v9[2]);
  if (*(_DWORD *)&v9[2])
  {
    uint64_t v5 = *this;
    *(void *)uint64_t v5 = v8;
    *((_WORD *)v5 + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = WORD4(v8);
    *((_WORD *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = *(_WORD *)v9;
  }

  return *(unsigned int *)&v9[2];
}

uint64_t ot::Hdlc::Encoder::EndFrame(__int128 **this)
{
  __int128 v5 = **this;
  __int16 v4 = *((_WORD *)this + 4);
  unsigned int v6 = ot::Hdlc::Encoder::Encode((ot::Hdlc::FrameWritePointer **)this, ~(_BYTE)v4);
  if (!v6)
  {
    unsigned int v6 = ot::Hdlc::Encoder::Encode((ot::Hdlc::FrameWritePointer **)this, ~HIBYTE(v4));
    if (!v6) {
      unsigned int v6 = ot::Hdlc::FrameWritePointer::WriteByte((ot::Hdlc::FrameWritePointer *)*this, 126);
    }
  }

  if (v6)
  {
    BOOL v1 = *this;
    *(void *)BOOL v1 = v5;
    *((_WORD *)v1 + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = WORD4(v5);
    *((_WORD *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v4;
  }

  return v6;
}

uint64_t ot::Hdlc::Decoder::Decoder(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)uint64_t result = 0;
  *(void *)(result + 8)  = a2;
  *(void *)(result + 16)  = a3;
  *(void *)(result + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a4;
  *(_WORD *)(result + 3ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0;
  *(_WORD *)(result + 3ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  return result;
}

uint64_t ot::Hdlc::Decoder::Decoder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1;
}

uint64_t ot::Hdlc::Decoder::Reset(uint64_t this)
{
  *(_DWORD *)this  = 0;
  *(_WORD *)(this + 3ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0;
  *(_WORD *)(this + 3ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  return this;
}

void ot::Hdlc::Decoder::Decode(ot::Hdlc::Decoder *this, char *a2, __int16 a3)
{
  while (a3--)
  {
    __int16 v4 = a2++;
    char v8 = *v4;
    int v5 = *(_DWORD *)this;
    if (*(_DWORD *)this)
    {
      if (v5 == 1)
      {
        if (v8 == 125)
        {
          *(_DWORD *)this  = 2;
        }

        else if (v8 == 126)
        {
          if (*((_WORD *)this + 17))
          {
            unsigned int v7 = 6;
            if (*((unsigned __int16 *)this + 17) >= 2u && *((unsigned __int16 *)this + 16) == 61624)
            {
              ot::Hdlc::FrameWritePointer::UndoLastWrites(*((void *)this + 1), 2u);
              unsigned int v7 = 0;
            }

            (*((void (**)(void, void))this + 2))(*((void *)this + 3), v7);
          }

          *((_WORD *)this + 1ot::ThreadTlv::SetType(this, 7) = 0;
          *((_WORD *)this + 16)  = -1;
        }

        else if (ot::Hdlc::FrameWritePointer::CanWrite(*((ot::Hdlc::FrameWritePointer **)this + 1), 1u))
        {
          *((_WORD *)this + 16)  = ot::Hdlc::UpdateFcs((ot::Hdlc *)*((unsigned __int16 *)this + 16), v8);
          ot::Hdlc::FrameWritePointer::WriteByte(*((ot::Hdlc::FrameWritePointer **)this + 1), v8);
          IgnoreError();
          ++*((_WORD *)this + 17);
        }

        else
        {
LABEL_24:
          (*((void (**)(void, uint64_t))this + 2))(*((void *)this + 3), 3LL);
          *(_DWORD *)this  = 0;
        }
      }

      else if (v5 == 2)
      {
        char v9 = v8 ^ 0x20;
        *((_WORD *)this + 16)  = ot::Hdlc::UpdateFcs((ot::Hdlc *)*((unsigned __int16 *)this + 16), v9);
        ot::Hdlc::FrameWritePointer::WriteByte(*((ot::Hdlc::FrameWritePointer **)this + 1), v9);
        IgnoreError();
        ++*((_WORD *)this + 17);
        *(_DWORD *)this  = 1;
      }
    }

    else if (v8 == 126)
    {
      *(_DWORD *)this  = 1;
      *((_WORD *)this + 1ot::ThreadTlv::SetType(this, 7) = 0;
      *((_WORD *)this + 16)  = -1;
    }
  }

uint64_t ot::Hdlc::FrameWritePointer::UndoLastWrites(uint64_t this, unsigned __int16 a2)
{
  *(void *)this -= a2;
  *(_WORD *)(this + 8) += a2;
  return this;
}

{
  return __ZN2ot4Hdlc17FrameWritePointer14UndoLastWritesEt(this, a2);
}

void otExitCodeToString(unsigned __int8 a1)
{
  if (a1 <= 6uLL) {
    __asm { BR              X8 }
  }

  __assert_rtn("otExitCodeToString", "exit_code.c", 79, "false");
}

uint64_t ot::Url::Url::Init(ot::Url::Url *this, char *a2)
{
  unsigned int v8 = 0;
  *((void *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 3) = &a2[strlen(a2)];
  *(void *)this  = a2;
  __str  = strstr[abi:nn180100](a2, "://");
  if (__str)
  {
    *__str  = 0;
    *((void *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = __str + 3;
    __stra  = strstr[abi:nn180100](__str + 3, "?");
    if (__stra)
    {
      __strb  = __stra + 1;
      *((void *)this + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = __strb;
      for (unsigned __int16 i = strtok(__strb, "&"); i; unsigned __int16 i = strtok(0LL, "&"))
        *(i - ot::NetworkData::NetworkDataTlv::SetType(this, 1) = 0;
    }

    else
    {
      *((void *)this + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = *((void *)this + 3);
    }
  }

  else
  {
    return 6;
  }

  return v8;
}

char *ot::Url::Url::GetValue(ot::Url::Url *this, const char *a2, const char *a3)
{
  uint64_t v7 = 0LL;
  __n  = strlen(a2);
  if (!a3)
  {
    __s2  = (char *)*((void *)this + 2);
    goto LABEL_7;
  }

  if ((unint64_t)a3 > *((void *)this + 2) && (unint64_t)a3 < *((void *)this + 3))
  {
    __s2  = (char *)&a3[strlen(a3) + 1];
LABEL_7:
    while ((unint64_t)__s2 < *((void *)this + 3))
    {
      if (!strncmp(a2, __s2, __n))
      {
        if (__s2[__n] == 61) {
          return &__s2[__n + 1];
        }
        if (!__s2[__n]) {
          return &__s2[__n];
        }
      }

      __s2 += strlen(__s2) + 1;
    }
  }

  return (char *)v7;
}

void trelDnssdInitialize(char *__s)
{
  uint64_t v1 = sTrelDnssd;
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  otbr::TrelDnssd::TrelDnssd::Initialize(v1, (__int128 *)__p, v2, v3, v4, v5, v6, v7, v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100367338( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void otbr::TrelDnssd::TrelDnssd::Initialize( uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  char v10 = (void *)(a1 + 160);
  std::string::operator=[abi:ne180100](a1 + 160, a2);
  if ((*(char *)(a1 + 183) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 183)) {
      goto LABEL_7;
    }
LABEL_6:
    otbrLog(7u, "TrelDns", "Initialized on netif %s", v11, v12, v13, v14, v15, (char)v10);
    return;
  }

  if (*(void *)(a1 + 168))
  {
    char v10 = (void *)*v10;
    goto LABEL_6;
  }

void trelDnssdStartBrowse(void)
{
}

void otbr::TrelDnssd::TrelDnssd::StartBrowse(otbr::TrelDnssd::TrelDnssd *this)
{
  if (*((char *)this + 183) < 0)
  {
    if (!*((void *)this + 21)) {
      return;
    }
  }

  else if (!*((_BYTE *)this + 183))
  {
    return;
  }

  otbr::TrelDnssd::TrelDnssd::CheckTrelNetifReady(this);
  otbrLog(7u, "TrelDns", "Start browsing %s services ...", v2, v3, v4, v5, v6, (char)"_trel._udp");
  if (*((void *)this + 24)) {
    otbr::TrelDnssd::TrelDnssd::StartBrowse();
  }
  uint64_t v7 = *(void *)this;
  v19[0]  = off_100447CB8;
  v19[1]  = this;
  uint64_t v20 = v19;
  unsigned __int8 v18 = 0LL;
  *((void *)this + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = otbr::Mdns::Publisher::AddSubscriptionCallbacks(v7, (uint64_t)v19, (uint64_t)v17);
  char v8 = v18;
  if (v18 == v17)
  {
    uint64_t v9 = 4LL;
    char v8 = v17;
  }

  else
  {
    if (!v18) {
      goto LABEL_11;
    }
    uint64_t v9 = 5LL;
  }

  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  char v10 = v20;
  if (v20 == v19)
  {
    uint64_t v11 = 4LL;
    char v10 = v19;
  }

  else
  {
    if (!v20) {
      goto LABEL_16;
    }
    uint64_t v11 = 5LL;
  }

  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_16:
  if (otbr::TrelDnssd::TrelDnssd::IsReady(this))
  {
    uint64_t v12 = *(void *)this;
    std::string::basic_string[abi:ne180100]<0>(v15, "_trel._udp");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    (*(void (**)(uint64_t, void **, void **))(*(void *)v12 + 56LL))(v12, v15, __p);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
  }

void sub_100367588( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

BOOL trelDnssdIsInitialized(void)
{
  return sTrelDnssd != 0;
}

void trelDnssdResolvePeers(char *__s)
{
  uint64_t v1 = sTrelDnssd;
  std::string::basic_string(&__p, &__str);
  otbr::TrelDnssd::TrelDnssd::ResolvePeers(v1, (unsigned __int8 *)&__p);
}

void sub_1003676A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t otbr::TrelDnssd::TrelDnssd::ResolvePeers(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(result + 256);
  uint64_t v14 = v2;
  uint64_t v3 = result + 264;
  if (v2 != result + 264)
  {
    uint64_t v5 = (uint64_t *)result;
    while (1)
    {
      else {
        size_t v6 = a2[23];
      }
      else {
        uint64_t v7 = *(unsigned __int8 *)(v2 + 167);
      }
      if (v6 != v7) {
        goto LABEL_22;
      }
      char v8 = (void *)(v2 + 144);
      uint64_t v9 = (unsigned __int8 *)(*(char *)(v2 + 167) >= 0 ? v2 + 144 : *v8);
      if ((a2[23] & 0x80) == 0) {
        break;
      }
LABEL_22:
      uint64_t result = std::__tree_const_iterator<std::__value_type<std::string,boost::any>,std::__tree_node<std::__value_type<std::string,boost::any>,void *> *,long>::operator++[abi:ne180100]((uint64_t)&v14);
      uint64_t v2 = v14;
      if (v14 == v3) {
        return result;
      }
    }

    if (v6)
    {
      char v10 = a2;
      while (*v10 == *v9)
      {
        ++v10;
        ++v9;
        if (!--v6) {
          goto LABEL_20;
        }
      }

      goto LABEL_22;
    }

void sub_100367804( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void trelDnssdStopBrowse( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void otbr::TrelDnssd::TrelDnssd::StopBrowse( otbr::TrelDnssd::TrelDnssd *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((char *)this + 183) < 0)
  {
    if (!*((void *)this + 21)) {
      return;
    }
  }

  else if (!*((_BYTE *)this + 183))
  {
    return;
  }

  otbrLog(7u, "TrelDns", "Stop browsing %s service.", a4, a5, a6, a7, a8, (char)"_trel._udp");
  unint64_t v9 = *((void *)this + 24);
  if (!v9) {
    otbr::TrelDnssd::TrelDnssd::StopBrowse();
  }
  otbr::Mdns::Publisher::RemoveSubscriptionCallbacks(*(otbr::Mdns::Publisher **)this, v9);
  *((void *)this + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0LL;
  if (otbr::TrelDnssd::TrelDnssd::IsReady(this))
  {
    uint64_t v10 = *(void *)this;
    std::string::basic_string[abi:ne180100]<0>(v13, "_trel._udp");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    (*(void (**)(uint64_t, void **, void **))(*(void *)v10 + 64LL))(v10, v13, __p);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
  }

void sub_100367910( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void trelDnssdRegisterService( int a1, const unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void otbr::TrelDnssd::TrelDnssd::RegisterService( otbr::TrelDnssd::TrelDnssd *this, int a2, const unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2) {
    otbr::TrelDnssd::TrelDnssd::RegisterService();
  }
  if (!a3) {
    otbr::TrelDnssd::TrelDnssd::RegisterService();
  }
  unsigned int v9 = a4;
  if (*((char *)this + 183) < 0)
  {
    if (!*((void *)this + 21)) {
      return;
    }
  }

  else if (!*((_BYTE *)this + 183))
  {
    return;
  }

  otbrLog(7u, "TrelDns", "Register %s service: port=%u, TXT=%d bytes", a4, a5, a6, a7, a8, (char)"_trel._udp");
  otbrDump(7LL, (uint64_t)"TrelDns", (uint64_t)"TXT", (uint64_t)a3, v9);
  if (*((_WORD *)this + 100) && otbr::TrelDnssd::TrelDnssd::IsReady(this)) {
    otbr::TrelDnssd::TrelDnssd::UnpublishTrelService(this);
  }
  otbr::TrelDnssd::TrelDnssd::RegisterInfo::Assign((otbr::TrelDnssd::TrelDnssd *)((char *)this + 200), a2, a3, v9);
  if (otbr::TrelDnssd::TrelDnssd::IsReady(this)) {
    otbr::TrelDnssd::TrelDnssd::PublishTrelService(this);
  }
}

void trelDnssdRemoveService( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void otbr::TrelDnssd::TrelDnssd::UnregisterService( otbr::TrelDnssd::TrelDnssd *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((char *)this + 183) < 0)
  {
    if (!*((void *)this + 21)) {
      return;
    }
  }

  else if (!*((_BYTE *)this + 183))
  {
    return;
  }

  if (*((_WORD *)this + 100))
  {
    otbrLog(7u, "TrelDns", "Remove %s service", a4, a5, a6, a7, a8, (char)"_trel._udp");
    if (otbr::TrelDnssd::TrelDnssd::IsReady(this)) {
      otbr::TrelDnssd::TrelDnssd::UnpublishTrelService(this);
    }
    otbr::TrelDnssd::TrelDnssd::RegisterInfo::Clear((otbr::TrelDnssd::TrelDnssd *)((char *)this + 200));
  }

otbr::TrelDnssd::TrelDnssd *otbr::TrelDnssd::TrelDnssd::TrelDnssd( otbr::TrelDnssd::TrelDnssd *this, otbr::Ncp::ControllerOpenThread *a2, otbr::Mdns::Publisher *a3)
{
  *(void *)this  = a3;
  *((void *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = a2;
  otbr::TaskRunner::TaskRunner((otbr::TrelDnssd::TrelDnssd *)((char *)this + 16));
  *((void *)this + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0LL;
  *((_WORD *)this + 10ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 0;
  *((void *)this + 26)  = 0LL;
  *((void *)this + 2ot::ThreadTlv::SetType(this, 7) = 0LL;
  *((void *)this + 2ot::NetworkData::NetworkDataTlv::SetType(this, 1) = 0LL;
  *((void *)this + 2ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  *((void *)this + ot::Mle::Tlv::SetType(this, 20) = 0LL;
  *((_DWORD *)this + 46)  = 0;
  *((void *)this + 28)  = 0LL;
  *((void *)this + 2ot::NetworkDiagnostic::Tlv::SetType(this, 9) = 0LL;
  *((void *)this + 3ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 0LL;
  *((void *)this + 3ot::NetworkData::NetworkDataTlv::SetType(this, 1) = 0LL;
  *((void *)this + 3ot::NetworkData::NetworkDataTlv::SetType(this, 3) = 0LL;
  *((void *)this + 3ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0LL;
  *((void *)this + 3ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = (char *)this + 264;
  *((_BYTE *)this + 2ot::Mle::Tlv::SetType(this, 80) = 0;
  sTrelDnssd  = (uint64_t)this;
  return this;
}

void otbr::TrelDnssd::TrelDnssd::CheckTrelNetifReady(otbr::TrelDnssd::TrelDnssd *this)
{
  char v2 = *((_BYTE *)this + 183);
  if ((v2 & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 183)) {
      goto LABEL_3;
    }
LABEL_6:
    otbr::TrelDnssd::TrelDnssd::CheckTrelNetifReady();
  }

  if (!*((void *)this + 21)) {
    goto LABEL_6;
  }
LABEL_3:
  if (*((_DWORD *)this + 46)) {
    return;
  }
  uint64_t v3 = (const char **)((char *)this + 160);
  uint64_t v4 = (char *)this + 160;
  if (v2 < 0) {
    uint64_t v4 = *v3;
  }
  unsigned int v5 = if_nametoindex(v4);
  *((_DWORD *)this + 46)  = v5;
  int v11 = *((char *)this + 183);
  if (!v5)
  {
    if (v11 < 0) {
      uint64_t v3 = (const char **)*v3;
    }
    char v12 = __error();
    strerror(*v12);
    otbrLog(4u, "TrelDns", "Netif %s is not ready (%s), will retry after %d seconds", v13, v14, v15, v16, v17, (char)v3);
    v20[0]  = off_100447E58;
    v20[1]  = this;
    char v21 = v20;
    otbr::TaskRunner::Post((uint64_t)this + 16, 5000LL, (uint64_t)v20);
    unsigned __int8 v18 = v21;
    if (v21 == v20)
    {
      uint64_t v19 = 4LL;
      unsigned __int8 v18 = v20;
    }

    else
    {
      if (!v21) {
        return;
      }
      uint64_t v19 = 5LL;
    }

    (*(void (**)(void))(*v18 + 8 * v19))();
    return;
  }

  if (v11 < 0) {
    uint64_t v3 = (const char **)*v3;
  }
  otbrLog(7u, "TrelDns", "Netif %s is ready: index  = %u", v6, v7, v8, v9, v10, (char)v3);
  otbr::TrelDnssd::TrelDnssd::OnBecomeReady(this);
}

void sub_100367CF0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v17 = a15;
  if (a15 == v15)
  {
    uint64_t v18 = 4LL;
    uint64_t v17 = &a12;
  }

  else
  {
    if (!a15) {
      goto LABEL_6;
    }
    uint64_t v18 = 5LL;
  }

  (*(void (**)(void))(*(void *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL otbr::TrelDnssd::TrelDnssd::IsReady(otbr::TrelDnssd::TrelDnssd *this)
{
  if ((*((char *)this + 183) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 183)) {
      return *((_DWORD *)this + 46) && *((_BYTE *)this + 280) != 0;
    }
LABEL_6:
    otbr::TrelDnssd::TrelDnssd::IsReady();
  }

  if (!*((void *)this + 21)) {
    goto LABEL_6;
  }
  return *((_DWORD *)this + 46) && *((_BYTE *)this + 280) != 0;
}

std::string *otbr::TrelDnssd::TrelDnssd::UnpublishTrelService(otbr::TrelDnssd::TrelDnssd *this)
{
  if (!*((_WORD *)this + 100)) {
    otbr::TrelDnssd::TrelDnssd::UnpublishTrelService();
  }
  if ((*((char *)this + 255) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 255)) {
      goto LABEL_4;
    }
LABEL_8:
    otbr::TrelDnssd::TrelDnssd::UnpublishTrelService();
  }

  if (!*((void *)this + 30)) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v2 = *(void *)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "_trel._udp");
  uint64_t v3 = (std::string *)((char *)this + 232);
  v9[0]  = off_100447DD8;
  uint64_t v10 = v9;
  (*(void (**)(uint64_t, std::string *, void **, void *))(*(void *)v2 + 40LL))(v2, v3, __p, v9);
  uint64_t v4 = v10;
  if (v10 == v9)
  {
    uint64_t v5 = 4LL;
    uint64_t v4 = v9;
  }

  else
  {
    if (!v10) {
      goto LABEL_11;
    }
    uint64_t v5 = 5LL;
  }

  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return std::string::assign(v3, "");
}

void sub_100367E94( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  uint64_t v20 = a18;
  if (a18 == v18)
  {
    uint64_t v21 = 4LL;
    uint64_t v20 = &a15;
  }

  else
  {
    if (!a18) {
      goto LABEL_6;
    }
    uint64_t v21 = 5LL;
  }

  (*(void (**)(void))(*(void *)v20 + 8 * v21))();
LABEL_6:
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t otbr::TrelDnssd::TrelDnssd::RegisterInfo::Assign( otbr::TrelDnssd::TrelDnssd::RegisterInfo *this, int a2, const unsigned __int8 *a3, unsigned int a4)
{
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)this + 55)) {
      goto LABEL_3;
    }
LABEL_7:
    otbr::TrelDnssd::TrelDnssd::RegisterInfo::Assign();
  }

  if (*((void *)this + 5)) {
    goto LABEL_7;
  }
LABEL_3:
  if (!a2) {
    otbr::TrelDnssd::TrelDnssd::RegisterInfo::Assign();
  }
  *(_WORD *)this  = a2;
  uint64_t v6 = (uint64_t *)((char *)this + 8);
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__base_destruct_at_end[abi:ne180100]( (uint64_t)this + 8,  *((void *)this + 1));
  uint64_t result = otbr::Mdns::Publisher::DecodeTxtData(v6, (uint64_t)a3, a4);
  if ((_DWORD)result) {
    otbr::TrelDnssd::TrelDnssd::RegisterInfo::Assign();
  }
  return result;
}

void otbr::TrelDnssd::TrelDnssd::PublishTrelService(otbr::TrelDnssd::TrelDnssd *this)
{
  if (!*((_WORD *)this + 100)) {
    otbr::TrelDnssd::TrelDnssd::PublishTrelService();
  }
  if ((*((char *)this + 255) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)this + 255)) {
      goto LABEL_4;
    }
LABEL_11:
    otbr::TrelDnssd::TrelDnssd::PublishTrelService();
  }

  if (*((void *)this + 30)) {
    goto LABEL_11;
  }
LABEL_4:
  if (!*((_DWORD *)this + 46)) {
    otbr::TrelDnssd::TrelDnssd::PublishTrelService();
  }
  otbr::TrelDnssd::TrelDnssd::GetTrelInstanceName((otbr::Ncp::ControllerOpenThread **)this, (uint64_t)__p);
  std::string::operator=[abi:ne180100]((uint64_t)this + 232, (__int128 *)__p);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v2 = *(void *)this;
  std::string::basic_string[abi:ne180100]<0>(v8, "");
  std::string::basic_string[abi:ne180100]<0>(&v7, "_trel._udp");
  memset(v6, 0, sizeof(v6));
  uint64_t v3 = *((unsigned __int16 *)this + 100);
  __p[0]  = off_100447D48;
  char v12 = __p;
  otbr::Mdns::Publisher::PublishService( v2,  (uint64_t)v8,  (const std::string *)((char *)this + 232),  &v7,  (uint64_t)v6,  v3,  (uint64_t)this + 208,  (uint64_t)__p);
  uint64_t v4 = v12;
  if (v12 == __p)
  {
    uint64_t v5 = 4LL;
    uint64_t v4 = __p;
  }

  else
  {
    if (!v12) {
      goto LABEL_14;
    }
    uint64_t v5 = 5LL;
  }

  (*((void (**)(void))*v4 + v5))();
LABEL_14:
  __p[0]  = v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v9 < 0) {
    operator delete(v8[0]);
  }
}

void sub_1003680E0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t *a24, uint64_t a25, uint64_t a26, uint64_t *a27)
{
  uint64_t v28 = (uint64_t **)a27;
  if (a27 == (uint64_t *)&a24)
  {
    uint64_t v29 = 4LL;
    uint64_t v28 = &a24;
  }

  else
  {
    if (!a27) {
      goto LABEL_6;
    }
    uint64_t v29 = 5LL;
  }

  ((void (*)(void))(*v28)[v29])();
LABEL_6:
  a24  = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

void otbr::TrelDnssd::TrelDnssd::RegisterInfo::Clear(otbr::TrelDnssd::TrelDnssd::RegisterInfo *this)
{
  if (*((char *)this + 55) < 0)
  {
    if (!*((void *)this + 5)) {
      goto LABEL_3;
    }
LABEL_5:
    otbr::TrelDnssd::TrelDnssd::RegisterInfo::Clear();
  }

  if (*((_BYTE *)this + 55)) {
    goto LABEL_5;
  }
LABEL_3:
  *(_WORD *)this  = 0;
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__base_destruct_at_end[abi:ne180100]( (uint64_t)this + 8,  *((void *)this + 1));
}

void otbr::TrelDnssd::TrelDnssd::OnMdnsPublisherReady( otbr::TrelDnssd::TrelDnssd *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *((_BYTE *)this + 2ot::Mle::Tlv::SetType(this, 80) = 1;
  if (*((char *)this + 183) < 0)
  {
    if (*((void *)this + 21))
    {
LABEL_3:
      otbrLog(7u, "TrelDns", "mDNS Publisher is Ready", a4, a5, a6, a7, a8, v9);
      otbr::TrelDnssd::TrelDnssd::RemoveAllPeers(this);
      if (*((char *)this + 255) < 0)
      {
        if (!*((void *)this + 30)) {
          goto LABEL_6;
        }
      }

      else if (!*((_BYTE *)this + 255))
      {
LABEL_6:
        otbr::TrelDnssd::TrelDnssd::OnBecomeReady(this);
        return;
      }

      std::string::assign((std::string *)((char *)this + 232), "");
      goto LABEL_6;
    }
  }

  else if (*((_BYTE *)this + 183))
  {
    goto LABEL_3;
  }

void otbr::TrelDnssd::TrelDnssd::RemoveAllPeers(otbr::TrelDnssd::TrelDnssd *this)
{
  uint64_t v1 = (char *)this + 256;
  uint64_t v2 = (char *)*((void *)this + 32);
  uint64_t v5 = v2;
  for (i = (char *)this + 264; v5 != i; uint64_t v2 = v5)
  {
    otbr::TrelDnssd::TrelDnssd::NotifyRemovePeer( (otbr::Ncp::ControllerOpenThread **)this,  (const otbr::TrelDnssd::TrelDnssd::Peer *)(v2 + 56));
    std::__tree_const_iterator<std::__value_type<std::string,boost::any>,std::__tree_node<std::__value_type<std::string,boost::any>,void *> *,long>::operator++[abi:ne180100]((uint64_t)&v5);
  }

  std::__tree<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::__map_value_compare<std::string,std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>>>::clear((uint64_t)v1);
}

void otbr::TrelDnssd::TrelDnssd::OnBecomeReady(otbr::TrelDnssd::TrelDnssd *this)
{
  if (otbr::TrelDnssd::TrelDnssd::IsReady(this))
  {
    std::string v7 = (void *)((char *)this + 160);
    otbrLog( 6u,  "TrelDns",  "TREL DNS-SD Is Now Ready: Netif=%s(%u), SubscriberId=%llu, Register=%s!",  v2,  v3,  v4,  v5,  v6,  (char)v7);
    if (*((void *)this + 24))
    {
      uint64_t v8 = *(void *)this;
      std::string::basic_string[abi:ne180100]<0>(v11, "_trel._udp");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      (*(void (**)(uint64_t, void **, void **))(*(void *)v8 + 56LL))(v8, v11, __p);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      if (v12 < 0) {
        operator delete(v11[0]);
      }
    }

    if (*((_WORD *)this + 100)) {
      otbr::TrelDnssd::TrelDnssd::PublishTrelService(this);
    }
  }

void sub_10036837C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void otbr::TrelDnssd::TrelDnssd::OnTrelServiceInstanceResolved( otbr::Ncp::ControllerOpenThread **a1, std::string *a2, uint64_t a3)
{
  unsigned __int8 v6 = otbr::StringUtils::EqualCaseInsensitive(a2, &__p);
  unsigned __int8 v7 = v6;
  if ((char)__p.__r_.__value_.__s.__size_ < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v7 & 1) == 0) {
      return;
    }
  }

  else if ((v6 & 1) == 0)
  {
    return;
  }

  if (*(_BYTE *)a3) {
    otbr::TrelDnssd::TrelDnssd::OnTrelServiceInstanceRemoved(a1, (std::string *)(a3 + 8));
  }
  else {
    otbr::TrelDnssd::TrelDnssd::OnTrelServiceInstanceAdded( (otbr::TrelDnssd::TrelDnssd *)a1,  (const otbr::Mdns::Publisher::DiscoveredInstanceInfo *)a3);
  }
}

void sub_100368444( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void otbr::TrelDnssd::TrelDnssd::OnTrelServiceInstanceRemoved( otbr::Ncp::ControllerOpenThread **a1, std::string *__str)
{
  uint64_t v8 = (uint64_t *)std::__tree<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::__map_value_compare<std::string,std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>>>::find<std::string>( (uint64_t)(a1 + 32),  (const void **)&__p.__r_.__value_.__l.__data_);
  if (a1 + 33 != (otbr::Ncp::ControllerOpenThread **)v8)
  {
    p_p  = &__p;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      LOBYTE(p_p)  = __p.__r_.__value_.__s.__data_[0];
    }
    otbrLog(7u, "TrelDns", "Peer removed: %s", v3, v4, v5, v6, v7, (char)p_p);
    if (!otbr::TrelDnssd::TrelDnssd::CountDuplicatePeers( (otbr::TrelDnssd::TrelDnssd *)a1,  (const otbr::TrelDnssd::TrelDnssd::Peer *)(v8 + 7))) {
      otbr::TrelDnssd::TrelDnssd::NotifyRemovePeer(a1, (const otbr::TrelDnssd::TrelDnssd::Peer *)(v8 + 7));
    }
    std::__tree<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::__map_value_compare<std::string,std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>>>::erase( (uint64_t)(a1 + 32),  v8);
  }

void sub_100368524( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void otbr::TrelDnssd::TrelDnssd::OnTrelServiceInstanceAdded( otbr::TrelDnssd::TrelDnssd *this, const otbr::Mdns::Publisher::DiscoveredInstanceInfo *a2)
{
  uint64_t v4 = (const std::string *)((char *)a2 + 8);
  otbr::StringUtils::ToLowercase((std::string *)((char *)a2 + 8), &__str);
  otbr::TrelDnssd::TrelDnssd::OnTrelServiceInstanceRemoved((otbr::Ncp::ControllerOpenThread **)this, &__str);
  else {
    uint64_t v10 = *((void *)a2 + 1);
  }
  otbrLog( 7u,  "TrelDns",  "Peer discovered: %s hostname %s addresses %zu port %d priority %d weight %d",  v5,  v6,  v7,  v8,  v9,  v10);
  uint64_t v16 = (otbr::Ip6Address *)*((void *)a2 + 7);
  uint64_t v17 = (otbr::Ip6Address *)*((void *)a2 + 8);
  if (v16 == v17) {
    goto LABEL_14;
  }
  do
  {
    otbr::Ip6Address::ToString(v16, &__p);
    if (v44 >= 0) {
      p_p  = &__p;
    }
    else {
      LOBYTE(p_p)  = (_BYTE)__p;
    }
    otbrLog(7u, "TrelDns", "Peer address: %s", v18, v19, v20, v21, v22, (char)p_p);
    if (v44 < 0) {
      operator delete(__p);
    }
    uint64_t v16 = (otbr::Ip6Address *)((char *)v16 + 16);
  }

  while (v16 != v17);
  int v24 = (__int128 *)*((void *)a2 + 7);
  if (v24 == *((__int128 **)a2 + 8))
  {
LABEL_14:
    else {
      uint64_t v32 = *((void *)a2 + 1);
    }
    otbrLog(4u, "TrelDns", "Peer %s does not have any IPv6 address, ignored", v11, v12, v13, v14, v15, v32);
  }

  else
  {
    v35[0]  = 0;
    __int128 v38 = *v24;
    uint64_t v25 = *((void *)a2 + 11);
    __int16 v39 = *((_WORD *)a2 + 40);
    uint64_t v36 = v25;
    __int16 v37 = *((_WORD *)a2 + 48) - v25;
    std::vector<unsigned char>::vector(v34, (uint64_t)a2 + 88);
    otbr::TrelDnssd::TrelDnssd::Peer::Peer((uint64_t)&__p, (uint64_t)v34, (uint64_t)&v38);
    unsigned int v41 = (void **)v34;
    std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100](&v41);
    if (v45)
    {
      Instance  = otbr::Ncp::ControllerOpenThread::GetInstance(*((otbr::Ncp::ControllerOpenThread **)this + 1));
      otPlatTrelHandleDiscoveredPeerInfo(Instance, (const ot::Trel::Interface::Peer::Info *)v35);
      std::string::operator=(&v46, (const std::string *)((char *)a2 + 32));
      std::string::operator=(&v47, v4);
      std::map<std::string,otbr::TrelDnssd::TrelDnssd::Peer>::emplace[abi:ne180100]<std::string&,otbr::TrelDnssd::TrelDnssd::Peer&>( (uint64_t **)this + 32,  &__str,  (uint64_t)&__p);
      otbr::TrelDnssd::TrelDnssd::CheckPeersNumLimit(this);
    }

    else
    {
      else {
        uint64_t v33 = *((void *)a2 + 1);
      }
      otbrLog(4u, "TrelDns", "Peer %s is invalid", v26, v27, v28, v29, v30, v33);
    }

    unsigned int v41 = (void **)&v43;
    std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100](&v41);
  }

void sub_1003687F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *__p, uint64_t a25, int a26, __int16 a27, char a28, char a29, uint64_t a30, void *a31, uint64_t a32, int a33, __int16 a34, char a35, char a36)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void otbr::TrelDnssd::TrelDnssd::GetTrelInstanceName( otbr::Ncp::ControllerOpenThread **this@<X0>, uint64_t a2@<X8>)
{
  Instance  = otbr::Ncp::ControllerOpenThread::GetInstance(this[1]);
  ExtendedAddress  = (otbr::Utils *)otLinkGetExtendedAddress(Instance);
  *(void *)(a2 + 8)  = 0LL;
  *(void *)(a2 + 16)  = 0LL;
  *(void *)a2  = 0LL;
  otbr::Utils::Bytes2Hex(ExtendedAddress, (const unsigned __int8 *)8, __s, v5);
  std::string::basic_string[abi:ne180100]<0>(&__str, __s);
  otbr::StringUtils::ToLowercase(&__str, &__p);
  std::string::operator=[abi:ne180100](a2, (__int128 *)&__p);
  int v11 = *(char *)(a2 + 23);
  if (v11 < 0)
  {
    if (*(void *)(a2 + 8) != 16LL) {
      goto LABEL_11;
    }
    uint64_t v12 = *(void *)a2;
  }

  else
  {
    LOBYTE(v1ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = a2;
    if (v11 != 16) {
LABEL_11:
    }
      __assert_rtn("GetTrelInstanceName", "trel_dnssd.cpp", 289, "name.length() == sizeof(otExtAddress) * 2");
  }

  otbrLog(7u, "TrelDns", "Using instance name %s", v6, v7, v8, v9, v10, v12);
}

void sub_100368974( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t otbr::Ncp::ControllerOpenThread::GetInstance(otbr::Ncp::ControllerOpenThread *this)
{
  uint64_t result = *((void *)this + 1);
  if (!result) {
    otbr::Ncp::ControllerOpenThread::GetInstance();
  }
  return result;
}

void otbr::TrelDnssd::TrelDnssd::HandlePublishTrelServiceError(int a1)
{
  if (a1)
  {
    char v1 = otbrErrorString(a1);
    otbrLog(3u, "TrelDns", "Failed to publish TREL service: %s. TREL won't be working.", v2, v3, v4, v5, v6, v1);
  }

void otbr::TrelDnssd::TrelDnssd::HandleUnpublishTrelServiceError(int a1)
{
  if (a1)
  {
    char v1 = otbrErrorString(a1);
    otbrLog(6u, "TrelDns", "Failed to unpublish TREL service: %s", v2, v3, v4, v5, v6, v1);
  }

uint64_t *std::map<std::string,otbr::TrelDnssd::TrelDnssd::Peer>::emplace[abi:ne180100]<std::string&,otbr::TrelDnssd::TrelDnssd::Peer&>( uint64_t **a1, std::string *a2, uint64_t a3)
{
  return std::__tree<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::__map_value_compare<std::string,std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>>>::__emplace_unique_key_args<std::string,std::string&,otbr::TrelDnssd::TrelDnssd::Peer&>( a1,  (const void **)&a2->__r_.__value_.__l.__data_,  a2,  a3);
}

void otbr::TrelDnssd::TrelDnssd::CheckPeersNumLimit(otbr::TrelDnssd::TrelDnssd *this)
{
  if (*((void *)this + 34) >= 0x100uLL)
  {
    uint64_t v2 = (char *)*((void *)this + 32);
    uint64_t v5 = v2;
    uint64_t v3 = (char *)this + 264;
    if (v2 != (char *)this + 264)
    {
      uint64_t v4 = 0LL;
      do
      {
        std::__tree_const_iterator<std::__value_type<std::string,boost::any>,std::__tree_node<std::__value_type<std::string,boost::any>,void *> *,long>::operator++[abi:ne180100]((uint64_t)&v5);
        uint64_t v2 = v5;
      }

      while (v5 != v3);
      otbr::TrelDnssd::TrelDnssd::OnTrelServiceInstanceRemoved((otbr::Ncp::ControllerOpenThread **)this, v4);
    }
  }

void otbr::TrelDnssd::TrelDnssd::Peer::~Peer(void **this)
{
  uint64_t v2 = this + 1;
  std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t otbr::TrelDnssd::TrelDnssd::CountDuplicatePeers( otbr::TrelDnssd::TrelDnssd *this, const otbr::TrelDnssd::TrelDnssd::Peer *a2)
{
  uint64_t v2 = (char *)*((void *)this + 32);
  uint64_t v9 = v2;
  uint64_t v3 = (char *)this + 264;
  if (v2 == (char *)this + 264)
  {
    return 0;
  }

  else
  {
    unsigned __int16 v5 = 0;
    do
    {
      if (v2 + 56 != (char *)a2)
      {
        BOOL v7 = *((void *)v2 + 11) == *((void *)a2 + 4)
          && *((void *)v2 + 12) == *((void *)a2 + 5)
          && *((unsigned __int16 *)v2 + 52) == (unint64_t)*((unsigned __int16 *)a2 + 24);
      }

      std::__tree_const_iterator<std::__value_type<std::string,boost::any>,std::__tree_node<std::__value_type<std::string,boost::any>,void *> *,long>::operator++[abi:ne180100]((uint64_t)&v9);
      uint64_t v2 = v9;
    }

    while (v9 != v3);
  }

  return v5;
}

void otbr::TrelDnssd::TrelDnssd::NotifyRemovePeer( otbr::Ncp::ControllerOpenThread **this, const otbr::TrelDnssd::TrelDnssd::Peer *a2)
{
  v3[0]  = 1;
  uint64_t v4 = *((void *)a2 + 1);
  __int16 v5 = *((_DWORD *)a2 + 4) - v4;
  __int128 v6 = *((_OWORD *)a2 + 2);
  __int16 v7 = *((_WORD *)a2 + 24);
  Instance  = otbr::Ncp::ControllerOpenThread::GetInstance(this[1]);
  otPlatTrelHandleDiscoveredPeerInfo(Instance, (const ot::Trel::Interface::Peer::Info *)v3);
}

void otbr::TrelDnssd::TrelDnssd::Peer::ReadExtAddrFromTxtData(otbr::TrelDnssd::TrelDnssd::Peer *this)
{
  uint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  uint64_t v14 = 0LL;
  *(void *)((char *)this + 5ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 0LL;
  if (!otbr::Mdns::Publisher::DecodeTxtData( (uint64_t *)&v12,  *((void *)this + 1),  (unsigned __int16)(*((_WORD *)this + 8) - *((void *)this + 1))))
  {
    __int16 v7 = v12;
    uint64_t v8 = v13;
    if (v12 != v13)
    {
      while (1)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "xa");
        unsigned int v9 = otbr::StringUtils::EqualCaseInsensitive(v7, &__p);
        if (v9) {
          break;
        }
        v7 += 2;
        if (v7 == v8) {
          goto LABEL_2;
        }
      }

      data  = v7[1].__r_.__value_.__l.__data_;
      if (v7[1].__r_.__value_.__l.__size_ - (void)data == 8)
      {
        *(void *)((char *)this + 5ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = *data;
        *((_BYTE *)this + 58)  = 1;
      }
    }
  }

void sub_100368D38( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  __p  = &a15;
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t otbr::TrelDnssd::TrelDnssd::Peer::Peer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(std::chrono::system_clock::time_point *)a1  = std::chrono::system_clock::now();
  *(void *)(a1 + 8)  = 0LL;
  *(void *)(a1 + 16)  = 0LL;
  *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0LL;
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)a2;
  *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = *(void *)(a2 + 16);
  *(void *)a2  = 0LL;
  *(void *)(a2 + 8)  = 0LL;
  *(void *)(a2 + 16)  = 0LL;
  __int16 v6 = *(_WORD *)(a3 + 16);
  *(_OWORD *)(a1 + 3ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = *(_OWORD *)a3;
  *(_WORD *)(a1 + 48)  = v6;
  *(_BYTE *)(a1 + 58)  = 0;
  *(void *)(a1 + 6ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0LL;
  *(void *)(a1 + 7ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  *(void *)(a1 + ot::Mle::Tlv::SetType(this, 80) = 0LL;
  *(void *)(a1 + 88)  = 0LL;
  *(void *)(a1 + 96)  = 0LL;
  *(void *)(a1 + 10ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0LL;
  otbr::TrelDnssd::TrelDnssd::Peer::ReadExtAddrFromTxtData((otbr::TrelDnssd::TrelDnssd::Peer *)a1);
  return a1;
}

void sub_100368E10(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void std::vector<std::string>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 24LL)
  {
  }

  *(void *)(a1 + 8)  = a2;
}

void std::vector<otbr::Mdns::Publisher::TxtEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<otbr::Mdns::Publisher::TxtEntry>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)(*a1)[2] - (_BYTE *)v3) >> 4) >= 0x555555555555556LL) {
      __break(0x550Cu);
    }
    else {
      operator delete(v3);
    }
  }

void std::vector<otbr::Mdns::Publisher::TxtEntry>::__base_destruct_at_end[abi:ne180100]( uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; std::allocator<otbr::Mdns::Publisher::TxtEntry>::destroy[abi:ne180100]( a1 + 16,  i))
    i -= 48LL;
  *(void *)(a1 + 8)  = a2;
}

void std::allocator<otbr::Mdns::Publisher::TxtEntry>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)(a2 + 24);
  std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void *std::__function::__func<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0>,void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>::__clone( uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  v5[1]  = &v6;
  _BYTE v5[2] = 1LL;
  uint64_t v3 = *(void *)(a1 + 8);
  void *v2 = off_100447CB8;
  v2[1]  = v3;
  v5[0]  = 0LL;
  std::unique_ptr<std::__function::__func<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0>,void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::__allocator_destructor<std::allocator<std::__function::__func<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0>,void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>>>>::~unique_ptr[abi:ne180100]((uint64_t)v5);
  return v2;
}

uint64_t std::__function::__func<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0>,void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2  = off_100447CB8;
  a2[1]  = v2;
  return result;
}

void std::__function::__func<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0>,void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>::operator()( uint64_t a1, std::string *a2, uint64_t a3)
{
}

uint64_t std::__function::__func<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0>,void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **std::__function::__func<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0>,void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>::target_type()
{
}

void *std::unique_ptr<std::__function::__func<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0>,void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::__allocator_destructor<std::allocator<std::__function::__func<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0>,void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>>>>::~unique_ptr[abi:ne180100]( uint64_t a1)
{
  uint64_t result = *(void **)a1;
  *(void *)a1  = 0LL;
  if (!result) {
    return (void *)a1;
  }
  if (!(*(void *)(a1 + 16) >> 60))
  {
    operator delete(result);
    return (void *)a1;
  }

  __break(0x550Cu);
  return result;
}

void *std::__function::__func<otbr::TrelDnssd::TrelDnssd::PublishTrelService(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::PublishTrelService(void)::$_0>,void ()(otbrError)>::__clone()
{
  v0  = operator new(0x10uLL);
  v2[2]  = 1LL;
  *v0  = off_100447D48;
  v2[0]  = 0LL;
  v2[1]  = &v3;
  std::unique_ptr<std::__function::__func<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0>,void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::__allocator_destructor<std::allocator<std::__function::__func<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0>,void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>>>>::~unique_ptr[abi:ne180100]((uint64_t)v2);
  return v0;
}

void std::__function::__func<otbr::TrelDnssd::TrelDnssd::PublishTrelService(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::PublishTrelService(void)::$_0>,void ()(otbrError)>::__clone( uint64_t a1, void *a2)
{
  *a2  = off_100447D48;
}

void std::__function::__func<otbr::TrelDnssd::TrelDnssd::PublishTrelService(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::PublishTrelService(void)::$_0>,void ()(otbrError)>::operator()( uint64_t a1, int *a2)
{
}

uint64_t std::__function::__func<otbr::TrelDnssd::TrelDnssd::PublishTrelService(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::PublishTrelService(void)::$_0>,void ()(otbrError)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **std::__function::__func<otbr::TrelDnssd::TrelDnssd::PublishTrelService(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::PublishTrelService(void)::$_0>,void ()(otbrError)>::target_type()
{
}

void *std::__function::__func<otbr::TrelDnssd::TrelDnssd::UnpublishTrelService(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::UnpublishTrelService(void)::$_0>,void ()(otbrError)>::__clone()
{
  v0  = operator new(0x10uLL);
  v2[2]  = 1LL;
  *v0  = off_100447DD8;
  v2[0]  = 0LL;
  v2[1]  = &v3;
  std::unique_ptr<std::__function::__func<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0>,void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::__allocator_destructor<std::allocator<std::__function::__func<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0>,void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>>>>::~unique_ptr[abi:ne180100]((uint64_t)v2);
  return v0;
}

void std::__function::__func<otbr::TrelDnssd::TrelDnssd::UnpublishTrelService(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::UnpublishTrelService(void)::$_0>,void ()(otbrError)>::__clone( uint64_t a1, void *a2)
{
  *a2  = off_100447DD8;
}

void std::__function::__func<otbr::TrelDnssd::TrelDnssd::UnpublishTrelService(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::UnpublishTrelService(void)::$_0>,void ()(otbrError)>::operator()( uint64_t a1, int *a2)
{
}

uint64_t std::__function::__func<otbr::TrelDnssd::TrelDnssd::UnpublishTrelService(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::UnpublishTrelService(void)::$_0>,void ()(otbrError)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **std::__function::__func<otbr::TrelDnssd::TrelDnssd::UnpublishTrelService(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::UnpublishTrelService(void)::$_0>,void ()(otbrError)>::target_type()
{
}

uint64_t *std::__tree<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::__map_value_compare<std::string,std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>>>::__emplace_unique_key_args<std::string,std::string&,otbr::TrelDnssd::TrelDnssd::Peer&>( uint64_t **a1, const void **a2, const std::string *a3, uint64_t a4)
{
  __int16 v7 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>( (uint64_t)a1,  &v12,  a2);
  uint64_t v8 = *v7;
  if (!*v7)
  {
    unsigned int v9 = v7;
    std::__tree<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::__map_value_compare<std::string,std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>>>::__construct_node<std::string&,otbr::TrelDnssd::TrelDnssd::Peer&>( (uint64_t)a1,  a3,  a4,  (uint64_t)v11);
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__insert_node_at( a1,  v12,  v9,  (uint64_t *)v11[0]);
    uint64_t v8 = (uint64_t *)v11[0];
    v11[0]  = 0LL;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,void *>>>>::reset[abi:ne180100]( v11,  0LL);
  }

  return v8;
}

uint64_t std::__tree<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::__map_value_compare<std::string,std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>>>::__construct_node<std::string&,otbr::TrelDnssd::TrelDnssd::Peer&>@<X0>( uint64_t a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t v8 = operator new(0xA8uLL);
  *(void *)a4  = v8;
  *(void *)(a4 + 8)  = v7;
  *(_BYTE *)(a4 + 16)  = 0;
  uint64_t result = std::pair<std::string const,otbr::TrelDnssd::TrelDnssd::Peer>::pair[abi:ne180100]<std::string&,otbr::TrelDnssd::TrelDnssd::Peer&,0>( (uint64_t)v8 + 32,  a2,  a3);
  *(_BYTE *)(a4 + 16)  = 1;
  return result;
}

void sub_100369334(_Unwind_Exception *a1)
{
}

uint64_t std::pair<std::string const,otbr::TrelDnssd::TrelDnssd::Peer>::pair[abi:ne180100]<std::string&,otbr::TrelDnssd::TrelDnssd::Peer&,0>( uint64_t a1, const std::string *a2, uint64_t a3)
{
  uint64_t v5 = std::string::basic_string((std::string *)a1, a2);
  v5[1].__r_.__value_.__r.__words[0]  = *(void *)a3;
  std::vector<unsigned char>::vector(&v5[1].__r_.__value_.__l.__size_, a3 + 8);
  __int128 v6 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a1 + 6ot::ThreadTlv::SetType(this, 7) = *(_OWORD *)(a3 + 43);
  *(_OWORD *)(a1 + 56)  = v6;
  std::string::basic_string((std::string *)(a1 + 88), (const std::string *)(a3 + 64));
  std::string::basic_string((std::string *)(a1 + 112), (const std::string *)(a3 + 88));
  return a1;
}

void sub_1003693C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,void *>>>>::reset[abi:ne180100]( void **a1, void *a2)
{
  char v3 = *a1;
  *a1  = a2;
  if (v3) {
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,void *>>>::operator()[abi:ne180100]( (uint64_t)(a1 + 1),  v3);
  }
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,void *>>>::operator()[abi:ne180100]( uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8)) {
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,otbr::TrelDnssd::TrelDnssd::Peer>,0>((uint64_t)__p + 32);
  }
  if (__p) {
    operator delete(__p);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,otbr::TrelDnssd::TrelDnssd::Peer>,0>( uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 32);
  std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t std::__tree<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::__map_value_compare<std::string,std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>>>::find<std::string>( uint64_t a1, const void **a2)
{
  uint64_t v4 = a1 + 8;
  uint64_t v5 = std::__tree<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::__map_value_compare<std::string,std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>>>::__lower_bound<std::string>( a1,  a2,  *(void *)(a1 + 8),  a1 + 8);
  if (v4 != v5)
  {
    uint64_t v6 = v5;
  }

  return v4;
}

uint64_t std::__tree<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::__map_value_compare<std::string,std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>>>::__lower_bound<std::string>( uint64_t a1, const void **a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v5 = a3;
    uint64_t v7 = a1 + 16;
    do
    {
      BOOL v8 = std::less<std::string>::operator()[abi:ne180100](v7, (const void **)(v5 + 32), a2);
      unsigned int v9 = (uint64_t *)(v5 + 8);
      if (!v8)
      {
        unsigned int v9 = (uint64_t *)v5;
        a4  = v5;
      }

      uint64_t v5 = *v9;
    }

    while (*v9);
  }

  return a4;
}

uint64_t std::__tree<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::__map_value_compare<std::string,std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>>>::erase( uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::__map_value_compare<std::string,std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>>>::__remove_node_pointer( a1,  a2);
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,otbr::TrelDnssd::TrelDnssd::Peer>,0>((uint64_t)(a2 + 4));
  operator delete(a2);
  return v3;
}

uint64_t std::__tree<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::__map_value_compare<std::string,std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>>>::__remove_node_pointer( uint64_t a1, uint64_t *a2)
{
  BOOL v8 = a2;
  uint64_t result = std::__tree_const_iterator<std::__value_type<std::string,boost::any>,std::__tree_node<std::__value_type<std::string,boost::any>,void *> *,long>::operator++[abi:ne180100]((uint64_t)&v8);
  uint64_t v5 = *(void *)(a1 + 16);
  BOOL v6 = v5 != 0;
  uint64_t v7 = v5 - 1;
  if (v6)
  {
    *(void *)(a1 + 16)  = v7;
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), a2);
    return (uint64_t)v8;
  }

  else
  {
    __break(0x5515u);
  }

  return result;
}

void *std::__tree_next[abi:ne180100]<std::__tree_node_base<void *> *>(void *a1)
{
  char v1 = (void *)a1[1];
  if (v1)
  {
    do
    {
      uint64_t result = v1;
      char v1 = (void *)*v1;
    }

    while (v1);
  }

  else
  {
    uint64_t v3 = a1;
    do
    {
      uint64_t result = (void *)v3[2];
      BOOL v4 = *result == (void)v3;
      uint64_t v3 = result;
    }

    while (!v4);
  }

  return result;
}

void std::__tree<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::__map_value_compare<std::string,std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>>>::clear( uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 8);
  std::__tree<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::__map_value_compare<std::string,std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>>>::destroy( a1,  *(void **)(a1 + 8));
  *(void *)a1  = v2;
  *(void *)(a1 + 16)  = 0LL;
  void *v2 = 0LL;
}

void std::__tree<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::__map_value_compare<std::string,std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>>>::destroy( uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::__map_value_compare<std::string,std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>>>::destroy( a1,  *a2);
    std::__tree<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::__map_value_compare<std::string,std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>>>::destroy( a1,  a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,otbr::TrelDnssd::TrelDnssd::Peer>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }

void *std::__function::__func<otbr::TrelDnssd::TrelDnssd::CheckTrelNetifReady(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::CheckTrelNetifReady(void)::$_0>,void ()(void)>::__clone( uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  v5[1]  = &v6;
  _BYTE v5[2] = 1LL;
  uint64_t v3 = *(void *)(a1 + 8);
  void *v2 = off_100447E58;
  v2[1]  = v3;
  v5[0]  = 0LL;
  std::unique_ptr<std::__function::__func<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0>,void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::__allocator_destructor<std::allocator<std::__function::__func<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0>,void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>>>>::~unique_ptr[abi:ne180100]((uint64_t)v5);
  return v2;
}

uint64_t std::__function::__func<otbr::TrelDnssd::TrelDnssd::CheckTrelNetifReady(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::CheckTrelNetifReady(void)::$_0>,void ()(void)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2  = off_100447E58;
  a2[1]  = v2;
  return result;
}

void std::__function::__func<otbr::TrelDnssd::TrelDnssd::CheckTrelNetifReady(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::CheckTrelNetifReady(void)::$_0>,void ()(void)>::operator()( uint64_t a1)
{
}

uint64_t std::__function::__func<otbr::TrelDnssd::TrelDnssd::CheckTrelNetifReady(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::CheckTrelNetifReady(void)::$_0>,void ()(void)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **std::__function::__func<otbr::TrelDnssd::TrelDnssd::CheckTrelNetifReady(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::CheckTrelNetifReady(void)::$_0>,void ()(void)>::target_type()
{
}

uint64_t otbr::Mdns::PublisherMDnsSd::PublisherMDnsSd(uint64_t a1, uint64_t a2)
{
  BOOL v4 = otbr::MainloopProcessor::MainloopProcessor((otbr::MainloopProcessor *)a1);
  otbr::Mdns::Publisher::Publisher((otbr::MainloopProcessor *)((char *)v4 + 8));
  *(void *)a1  = off_100447EE8;
  *(void *)(a1 + 8)  = off_100447F88;
  *(void *)(a1 + 336)  = 0LL;
  *(_DWORD *)(a1 + 34ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  std::__function::__value_func<void ()(otbr::Mdns::Publisher::State)>::__value_func[abi:ne180100](a1 + 352, a2);
  *(void *)(a1 + 38ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0LL;
  *(void *)(a1 + 39ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  *(void *)(a1 + 40ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 0LL;
  *(void *)(a1 + 408)  = 0LL;
  *(void *)(a1 + 416)  = 0LL;
  *(void *)(a1 + 42ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0LL;
  otbrLog(6u, "MDNS", "PublisherMDnsSd::PublisherMDnsSd", v5, v6, v7, v8, v9, v11);
  return a1;
}

void sub_100369850( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v14 = v13;
  a10  = v10 + 51;
  std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10  = v14;
  std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::function<void ()(otbr::Mdns::Publisher::State)>::~function(v12);
  otbr::Mdns::Publisher::~Publisher(v11);
  otbr::MainloopProcessor::~MainloopProcessor((otbr::MainloopProcessor *)v10);
  _Unwind_Resume(a1);
}

double otbr::Mdns::Publisher::Publisher(otbr::Mdns::Publisher *this)
{
  *((void *)this + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  *(void *)this  = &off_100448138;
  *((void *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = (char *)this + 16;
  *((void *)this + 5)  = 0LL;
  *((void *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 3) = 0LL;
  *((void *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = (char *)this + 40;
  *((void *)this + ot::NetworkDiagnostic::Tlv::SetType(this, 9) = 0LL;
  *((_OWORD *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 3) = xmmword_1003ABFC0;
  *((void *)this + 8)  = (char *)this + 72;
  *((void *)this + 1ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  *((void *)this + 1ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 0LL;
  *((void *)this + ot::Mle::Tlv::SetType(this, 11) = (char *)this + 96;
  *((void *)this + ot::Mle::Tlv::SetType(this, 15) = 0LL;
  *((void *)this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 3) = 0LL;
  *((void *)this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 4) = (char *)this + 120;
  *((void *)this + 18)  = 0LL;
  *((void *)this + 16)  = 0LL;
  *((void *)this + 1ot::ThreadTlv::SetType(this, 7) = (char *)this + 144;
  *((void *)this + 2ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  *((void *)this + 2ot::NetworkData::NetworkDataTlv::SetType(this, 1) = 0LL;
  *((void *)this + 1ot::NetworkDiagnostic::Tlv::SetType(this, 9) = 0LL;
  *((void *)this + ot::Mle::Tlv::SetType(this, 20) = (char *)this + 168;
  double result = 0.0;
  *(_OWORD *)((char *)this + 248)  = 0u;
  *(_OWORD *)((char *)this + 23ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0u;
  *(_OWORD *)((char *)this + 216)  = 0u;
  *(_OWORD *)((char *)this + 18ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
  *(_OWORD *)((char *)this + 20ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 0u;
  *(_OWORD *)((char *)this + 296)  = 0u;
  *(_OWORD *)((char *)this + 31ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0u;
  *(_OWORD *)((char *)this + 26ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
  *(_OWORD *)((char *)this + 2ot::Mle::Tlv::SetType(this, 80) = 0u;
  return result;
}

void *std::function<void ()(otbr::Mdns::Publisher::State)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = a1;
    goto LABEL_5;
  }

  if (v2)
  {
    uint64_t v3 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return a1;
}

void otbr::Mdns::Publisher::~Publisher(otbr::Mdns::Publisher *this)
{
  *(void *)this  = &off_100448138;
  uint64_t v2 = (char *)this + 8;
  std::__tree<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::~__tree((uint64_t)this + 160);
  std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::~__tree((uint64_t)this + 136);
  std::__tree<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::~__tree((uint64_t)this + 112);
  std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::~__tree((uint64_t)this + 88);
  std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::~__tree((uint64_t)this + 64);
  std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::~__tree((uint64_t)this + 32);
  std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::~__tree((uint64_t)v2);
}

void otbr::Mdns::PublisherMDnsSd::~PublisherMDnsSd( otbr::Mdns::PublisherMDnsSd *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)this  = off_100447EE8;
  *((void *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = off_100447F88;
  uint64_t v9 = (otbr::Mdns::PublisherMDnsSd *)((char *)this + 8);
  otbrLog(6u, "MDNS", "PublisherMDnsSd::~PublisherMDnsSd", a4, a5, a6, a7, a8, v12);
  (*(void (**)(otbr::Mdns::PublisherMDnsSd *))(*(void *)this + 96LL))(this);
  uint64_t v13 = (void **)((char *)this + 408);
  std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>::__destroy_vector::operator()[abi:ne180100](&v13);
  uint64_t v13 = (void **)((char *)this + 384);
  std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>::__destroy_vector::operator()[abi:ne180100](&v13);
  uint64_t v10 = (otbr::Mdns::PublisherMDnsSd *)*((void *)this + 47);
  if (v10 == (otbr::Mdns::PublisherMDnsSd *)((char *)this + 352))
  {
    uint64_t v11 = 4LL;
    uint64_t v10 = (otbr::Mdns::PublisherMDnsSd *)((char *)this + 352);
    goto LABEL_5;
  }

  if (v10)
  {
    uint64_t v11 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v10 + 8 * v11))();
  }

  otbr::Mdns::Publisher::~Publisher(v9);
  otbr::MainloopProcessor::~MainloopProcessor(this);
}

{
  void *v8;
  otbr::Mdns::PublisherMDnsSd::~PublisherMDnsSd(this, a2, a3, a4, a5, a6, a7, a8);
  operator delete(v8);
}

void non-virtual thunk to'otbr::Mdns::PublisherMDnsSd::~PublisherMDnsSd( otbr::Mdns::PublisherMDnsSd *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  void *v8;
  otbr::Mdns::PublisherMDnsSd::~PublisherMDnsSd( (otbr::Mdns::PublisherMDnsSd *)((char *)this - 8),  a2,  a3,  a4,  a5,  a6,  a7,  a8);
  operator delete(v8);
}

uint64_t otbr::Mdns::PublisherMDnsSd::Start( otbr::Mdns::PublisherMDnsSd *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *((_DWORD *)this + ot::Mle::Tlv::SetType(this, 86) = 1;
  std::__function::__value_func<void ()(otbrError)>::operator()[abi:ne180100]((uint64_t)this + 352);
  return 0LL;
}

uint64_t non-virtual thunk to'otbr::Mdns::PublisherMDnsSd::Start( otbr::Mdns::PublisherMDnsSd *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return 0LL;
}

BOOL otbr::Mdns::PublisherMDnsSd::IsStarted(otbr::Mdns::PublisherMDnsSd *this)
{
  return *((_DWORD *)this + 86) == 1;
}

BOOL non-virtual thunk to'otbr::Mdns::PublisherMDnsSd::IsStarted(otbr::Mdns::PublisherMDnsSd *this)
{
  return *((_DWORD *)this + 84) == 1;
}

uint64_t otbr::Mdns::PublisherMDnsSd::Stop( otbr::Mdns::PublisherMDnsSd *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v24[0]  = 0LL;
  v24[1]  = 0LL;
  v22[1]  = 0LL;
  int v23 = v24;
  uint64_t v21 = v22;
  v22[0]  = 0LL;
  otbrLog(6u, "MDNS", "PublisherMDnsSd::Stop mState:%d", a4, a5, a6, a7, a8, *((_DWORD *)this + 86));
  if (*((_DWORD *)this + 86) == 1)
  {
    std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::swap( (uint64_t *)this + 2,  (uint64_t)&v23);
    std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::swap( (uint64_t *)this + 5,  (uint64_t)&v21);
    uint64_t v9 = (_DNSServiceRef_t *)*((void *)this + 42);
    if (v9)
    {
      DNSServiceRefDeallocate(v9);
      otbrLog(7u, "MDNS", "Deallocated DNSServiceRef for hosts: %p", v10, v11, v12, v13, v14, *((void *)this + 42));
      *((void *)this + 4ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
    }

    std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>::__base_destruct_at_end[abi:ne180100]( (uint64_t)this + 384,  *((uint64_t **)this + 48));
    std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>::__base_destruct_at_end[abi:ne180100]( (uint64_t)this + 408,  *((uint64_t **)this + 51));
    *((_DWORD *)this + ot::Mle::Tlv::SetType(this, 86) = 0;
    otbrLog(6u, "MDNS", "PublisherMDnsSd::Stop return mState:%d", v15, v16, v17, v18, v19, 0);
  }

  std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::~__tree((uint64_t)&v21);
  return std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::~__tree((uint64_t)&v23);
}

void sub_100369C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::~__tree((uint64_t)va);
  std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::~__tree((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'otbr::Mdns::PublisherMDnsSd::Stop( otbr::Mdns::PublisherMDnsSd *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return otbr::Mdns::PublisherMDnsSd::Stop( (otbr::Mdns::PublisherMDnsSd *)((char *)this - 8),  a2,  a3,  a4,  a5,  a6,  a7,  a8);
}

_DNSServiceRef_t *otbr::Mdns::PublisherMDnsSd::Update(void *a1, _DWORD *a2)
{
  uint64_t v4 = (void *)a1[2];
  uint64_t v20 = v4;
  for (i = a1 + 3; v20 != i; uint64_t v4 = v20)
  {
    uint64_t v6 = *(_DNSServiceRef_t **)(v4[7] + 176LL);
    if (!v6) {
      otbr::Mdns::PublisherMDnsSd::Update();
    }
    dnssd_sock_t v7 = DNSServiceRefSockFD(v6);
    if (v7 != -1)
    {
      dnssd_sock_t v8 = v7;
      if (__darwin_check_fd_set_overflow(v7, a2, 0)) {
        *(_DWORD *)((char *)a2 + (((unint64_t)v8 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v8;
      }
      dnssd_sock_t v9 = a2[96];
      if (v9 <= v8) {
        dnssd_sock_t v9 = v8;
      }
      a2[96]  = v9;
    }

    std::__tree_const_iterator<std::__value_type<std::string,boost::any>,std::__tree_node<std::__value_type<std::string,boost::any>,void *> *,long>::operator++[abi:ne180100]((uint64_t)&v20);
  }

  double result = (_DNSServiceRef_t *)a1[42];
  if (result)
  {
    dnssd_sock_t v11 = DNSServiceRefSockFD(result);
    if (v11 == -1) {
      otbr::Mdns::PublisherMDnsSd::Update();
    }
    dnssd_sock_t v12 = v11;
    double result = (_DNSServiceRef_t *)__darwin_check_fd_set_overflow(v11, a2, 0);
    if ((_DWORD)result) {
      *(_DWORD *)((char *)a2 + (((unint64_t)v12 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v12;
    }
    dnssd_sock_t v13 = a2[96];
    if (v13 <= v12) {
      dnssd_sock_t v13 = v12;
    }
    a2[96]  = v13;
  }

  uint64_t v14 = (uint64_t *)a1[48];
  uint64_t v15 = (uint64_t *)a1[49];
  while (v14 != v15)
  {
    uint64_t v16 = *v14++;
    double result = otbr::Mdns::PublisherMDnsSd::ServiceSubscription::UpdateAll(v16, a2);
  }

  uint64_t v18 = (_DNSServiceRef_t ***)a1[51];
  uint64_t v17 = (_DNSServiceRef_t ***)a1[52];
  while (v18 != v17)
  {
    uint64_t v19 = *v18++;
    double result = otbr::Mdns::PublisherMDnsSd::ServiceRef::Update(v19, a2);
  }

  return result;
}

_DNSServiceRef_t *otbr::Mdns::PublisherMDnsSd::ServiceSubscription::UpdateAll(uint64_t a1, _DWORD *a2)
{
  double result = otbr::Mdns::PublisherMDnsSd::ServiceRef::Update((_DNSServiceRef_t **)a1, a2);
  uint64_t v5 = *(_DNSServiceRef_t ****)(a1 + 64);
  uint64_t v6 = *(_DNSServiceRef_t ****)(a1 + 72);
  while (v5 != v6)
  {
    dnssd_sock_t v7 = *v5++;
    double result = otbr::Mdns::PublisherMDnsSd::ServiceRef::Update(v7, a2);
  }

  dnssd_sock_t v9 = *(_DNSServiceRef_t ****)(a1 + 88);
  dnssd_sock_t v8 = *(_DNSServiceRef_t ****)(a1 + 96);
  while (v9 != v8)
  {
    uint64_t v10 = *v9++;
    double result = otbr::Mdns::PublisherMDnsSd::ServiceRef::Update(v10, a2);
  }

  return result;
}

_DNSServiceRef_t *otbr::Mdns::PublisherMDnsSd::ServiceRef::Update(_DNSServiceRef_t **a1, _DWORD *a2)
{
  double result = *a1;
  if (result)
  {
    dnssd_sock_t v4 = DNSServiceRefSockFD(result);
    if (v4 == -1) {
      otbr::Mdns::PublisherMDnsSd::ServiceRef::Update();
    }
    dnssd_sock_t v5 = v4;
    double result = (_DNSServiceRef_t *)__darwin_check_fd_set_overflow(v4, a2, 0);
    if ((_DWORD)result) {
      *(_DWORD *)((char *)a2 + (((unint64_t)v5 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v5;
    }
    dnssd_sock_t v6 = a2[96];
    if (v6 <= v5) {
      dnssd_sock_t v6 = v5;
    }
    a2[96]  = v6;
  }

  return result;
}

_DNSServiceRef_t *non-virtual thunk to'otbr::Mdns::PublisherMDnsSd::Update(uint64_t a1, _DWORD *a2)
{
  return otbr::Mdns::PublisherMDnsSd::Update((void *)(a1 - 8), a2);
}

void otbr::Mdns::PublisherMDnsSd::Process(void *a1, char *a2)
{
  __int128 v38 = 0LL;
  __int16 v39 = 0LL;
  dnssd_sock_t v4 = (void **)a1[2];
  unint64_t v40 = 0LL;
  unsigned int v41 = v4;
  dnssd_sock_t v5 = (void **)(a1 + 3);
  while (v4 != v5)
  {
    dnssd_sock_t v6 = (char *)v4[7];
    dnssd_sock_t v8 = (_DNSServiceRef_t *)*((void *)v6 + 22);
    dnssd_sock_t v7 = (DNSServiceRef *)(v6 + 176);
    dnssd_sock_t v9 = DNSServiceRefSockFD(v8);
    if (__darwin_check_fd_set_overflow(v9, a2, 0)
      && ((*(_DWORD *)&a2[((unint64_t)v9 >> 3) & 0x1FFFFFFFFFFFFFFCLL] >> v9) & 1) != 0)
    {
      uint64_t v10 = v39;
      if ((unint64_t)v39 >= v40)
      {
        uint64_t v11 = std::vector<_DNSServiceRef_t *>::__push_back_slow_path<_DNSServiceRef_t * const&>((uint64_t *)&v38, v7);
      }

      else
      {
        *__int16 v39 = *v7;
        uint64_t v11 = (uint64_t)(v10 + 1);
      }

      __int16 v39 = (DNSServiceRef *)v11;
    }

    std::__tree_const_iterator<std::__value_type<std::string,boost::any>,std::__tree_node<std::__value_type<std::string,boost::any>,void *> *,long>::operator++[abi:ne180100]((uint64_t)&v41);
    dnssd_sock_t v4 = v41;
  }

  dnssd_sock_t v12 = (_DNSServiceRef_t *)a1[42];
  if (v12)
  {
    dnssd_sock_t v13 = DNSServiceRefSockFD(v12);
    if (__darwin_check_fd_set_overflow(v13, a2, 0))
    {
      if (((*(_DWORD *)&a2[((unint64_t)v13 >> 3) & 0x1FFFFFFFFFFFFFFCLL] >> v13) & 1) != 0)
      {
        uint64_t v14 = (DNSServiceRef *)(a1 + 42);
        uint64_t v15 = v39;
        if ((unint64_t)v39 >= v40)
        {
          uint64_t v16 = std::vector<_DNSServiceRef_t *>::__push_back_slow_path<_DNSServiceRef_t * const&>((uint64_t *)&v38, v14);
        }

        else
        {
          *__int16 v39 = *v14;
          uint64_t v16 = (uint64_t)(v15 + 1);
        }

        __int16 v39 = (DNSServiceRef *)v16;
      }
    }
  }

  uint64_t v17 = (uint64_t **)a1[48];
  uint64_t v18 = (uint64_t **)a1[49];
  while (v17 != v18)
    otbr::Mdns::PublisherMDnsSd::ServiceSubscription::ProcessAll(*v17++, a2, (uint64_t *)&v38);
  uint64_t v19 = (uint64_t **)a1[51];
  uint64_t v20 = (uint64_t **)a1[52];
  while (v19 != v20)
    otbr::Mdns::PublisherMDnsSd::ServiceRef::Process(*v19++, a2, (uint64_t *)&v38);
  uint64_t v21 = v38;
  uint64_t v22 = v39;
  if (v38 != v39)
  {
    while (1)
    {
      int v23 = (otbr::Mdns *)DNSServiceProcessResult(*v21);
      int v24 = (int)v23;
      if ((_DWORD)v23)
      {
        char v25 = otbr::Mdns::DNSErrorToString(v23);
        unsigned int v31 = v24 == -65541 ? 6 : 4;
        otbrLog(v31, "MDNS", "DNSServiceProcessResult failed: %s (serviceRef  = %p)", v26, v27, v28, v29, v30, v25);
        if (v24 == -65541 || v24 == -65563) {
          break;
        }
      }

      if (++v21 == v22) {
        goto LABEL_32;
      }
    }

    otbrLog(4u, "MDNS", "Need to reconnect to mdnsd", v32, v33, v34, v35, v36, v37);
    (*(void (**)(void *))(*a1 + 96LL))(a1);
    (*(void (**)(void *))(*a1 + 80LL))(a1);
  }

void sub_10036A130( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14  = (void **)&a11;
  std::vector<otbr::Ip6Address>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t otbr::Mdns::PublisherMDnsSd::ServiceSubscription::ProcessAll(uint64_t *a1, char *a2, uint64_t *a3)
{
  uint64_t result = otbr::Mdns::PublisherMDnsSd::ServiceRef::Process(a1, a2, a3);
  dnssd_sock_t v7 = (uint64_t **)a1[8];
  dnssd_sock_t v8 = (uint64_t **)a1[9];
  while (v7 != v8)
  {
    dnssd_sock_t v9 = *v7++;
    uint64_t result = otbr::Mdns::PublisherMDnsSd::ServiceRef::Process(v9, a2, a3);
  }

  uint64_t v11 = (uint64_t **)a1[11];
  uint64_t v10 = (uint64_t **)a1[12];
  while (v11 != v10)
  {
    dnssd_sock_t v12 = *v11++;
    uint64_t result = otbr::Mdns::PublisherMDnsSd::ServiceRef::Process(v12, a2, a3);
  }

  return result;
}

uint64_t otbr::Mdns::PublisherMDnsSd::ServiceRef::Process(uint64_t *a1, char *a2, uint64_t *a3)
{
  uint64_t result = *a1;
  if (result)
  {
    dnssd_sock_t v7 = DNSServiceRefSockFD((DNSServiceRef)result);
    if (v7 == -1) {
      otbr::Mdns::PublisherMDnsSd::ServiceRef::Process();
    }
    dnssd_sock_t v8 = v7;
    uint64_t result = __darwin_check_fd_set_overflow(v7, a2, 0);
    if ((_DWORD)result && ((*(_DWORD *)&a2[((unint64_t)v8 >> 3) & 0x1FFFFFFFFFFFFFFCLL] >> v8) & 1) != 0)
    {
      unint64_t v9 = a3[1];
      if (v9 >= a3[2])
      {
        uint64_t result = std::vector<_DNSServiceRef_t *>::__push_back_slow_path<_DNSServiceRef_t * const&>(a3, a1);
      }

      else
      {
        std::vector<_DNSServiceRef_t *>::__construct_one_at_end[abi:ne180100]<_DNSServiceRef_t * const&>( (uint64_t)a3,  a1);
        uint64_t result = v9 + 8;
      }

      a3[1]  = result;
    }
  }

  return result;
}

const char *otbr::Mdns::DNSErrorToString(otbr::Mdns *this)
{
  switch(this)
  {
    case 0xFFFEFFE0:
      return "Timeout";
    case 0xFFFEFFE1:
      return "Polling Mode";
    case 0xFFFEFFE2:
      return "No Router";
    case 0xFFFEFFE3:
      return "NAT Port Mapping Disabled";
    case 0xFFFEFFE4:
      return "NAT Port Mapping Unsupported";
    case 0xFFFEFFE5:
      return "Service Not Running";
    case 0xFFFEFFE6:
      return "Transient";
    case 0xFFFEFFE7:
      return "Bad Key";
    case 0xFFFEFFE8:
      return "Bad Sig";
    case 0xFFFEFFE9:
      return "Bad Time";
    case 0xFFFEFFEA:
      return "Double NAT";
    case 0xFFFEFFEB:
      return "NAT Traversal";
    case 0xFFFEFFEC:
      return "No Such Key";
    case 0xFFFEFFED:
      return "No Auth";
    case 0xFFFEFFEE:
      return "No Such Record";
    case 0xFFFEFFEF:
      return "Refused";
    case 0xFFFEFFF0:
      return "Bad Interface Index";
    case 0xFFFEFFF1:
      return "Incompatible";
    case 0xFFFEFFF2:
      return "Firewall";
    case 0xFFFEFFF3:
      return "Invalid";
    case 0xFFFEFFF4:
      return "Name Conflict";
    case 0xFFFEFFF5:
      return "Already Registered";
    case 0xFFFEFFF6:
      goto LABEL_35;
    case 0xFFFEFFF7:
      return "Not Initialized";
    case 0xFFFEFFF8:
      return "Unsupported";
    case 0xFFFEFFF9:
      return "Bad Flags";
    case 0xFFFEFFFA:
      return "Bad State";
    case 0xFFFEFFFB:
      return "Bad Reference";
    case 0xFFFEFFFC:
      return "Bad Param";
    case 0xFFFEFFFD:
      return "No Memory";
    case 0xFFFEFFFE:
      return "No Such Name";
    case 0xFFFEFFFF:
      return "Unknown";
    default:
      if ((_DWORD)this) {
LABEL_35:
      }
        otbr::Mdns::DNSErrorToString();
      return "OK";
  }

void non-virtual thunk to'otbr::Mdns::PublisherMDnsSd::Process(uint64_t a1, char *a2)
{
}

void otbr::Mdns::PublisherMDnsSd::DnssdServiceRegistration::~DnssdServiceRegistration(std::string *this)
{
  this->__r_.__value_.__r.__words[0]  = (std::string::size_type)off_100448028;
  size  = (_DNSServiceRef_t *)this[7].__r_.__value_.__l.__size_;
  if (size)
  {
    DNSServiceRefDeallocate(size);
    this[7].__r_.__value_.__l.__size_  = 0LL;
  }

  otbr::Mdns::Publisher::ServiceRegistration::~ServiceRegistration(this);
}

{
  void *v1;
  otbr::Mdns::PublisherMDnsSd::DnssdServiceRegistration::~DnssdServiceRegistration(this);
  operator delete(v1);
}

void otbr::Mdns::Publisher::ServiceRegistration::~ServiceRegistration(std::string *this)
{
  this->__r_.__value_.__r.__words[0]  = (std::string::size_type)off_1004481D8;
  otbr::Mdns::Publisher::ServiceRegistration::OnComplete(this, -12);
  p_size  = (void **)&this[6].__r_.__value_.__l.__size_;
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__destroy_vector::operator()[abi:ne180100](&p_size);
  p_size  = (void **)&this[5].__r_.__value_.__l.__data_;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_size);
  otbr::Mdns::Publisher::Registration::~Registration((otbr::Mdns::Publisher::Registration *)this);
}

{
  void *v1;
  otbr::Mdns::Publisher::ServiceRegistration::~ServiceRegistration(this);
  operator delete(v1);
}

void otbr::Mdns::PublisherMDnsSd::DnssdHostRegistration::~DnssdHostRegistration( otbr::Mdns::PublisherMDnsSd::DnssdHostRegistration *this)
{
  *(void *)this  = off_100448048;
  if (*((void *)this + 12))
  {
    uint64_t v2 = (DNSRecordRef *)*((void *)this + 13);
    uint64_t v28 = (char *)v2;
    uint64_t v3 = (char *)this + 112;
    if (v2 != (DNSRecordRef *)((char *)this + 112))
    {
      do
      {
        dnssd_sock_t v4 = (otbr::Ip6Address *)(v2 + 5);
        dnssd_sock_t v5 = (_DNSServiceRef_t *)*((void *)this + 12);
        if (!*((void *)this + 4))
        {
          uint64_t updated = DNSServiceUpdateRecord(v5, v2[4], 0x20u, 0x10u, v2 + 5, 1u);
          int v7 = otbr::Mdns::DNSErrorToOtbrError(updated);
          if (v7) {
            unsigned int v8 = 4;
          }
          else {
            unsigned int v8 = 6;
          }
          otbr::Mdns::Publisher::MakeFullHostName((const void **)this + 6, (uint64_t)v26);
          if (v27 >= 0) {
            unint64_t v9 = v26;
          }
          else {
            LOBYTE(vot::NetworkDiagnostic::Tlv::SetType(this, 9) = v26[0];
          }
          otbr::Ip6Address::ToString((otbr::Ip6Address *)(v2 + 5), __p);
          otbr::Mdns::DNSErrorToString((otbr::Mdns *)updated);
          otbrErrorString(v7);
          otbrLog(v8, "MDNS", "Send goodbye message for host %s address %s: %s: %s", v10, v11, v12, v13, v14, (char)v9);
          if (v25 < 0) {
            operator delete(__p[0]);
          }
          if (v27 < 0) {
            operator delete(v26[0]);
          }
          dnssd_sock_t v5 = (_DNSServiceRef_t *)*((void *)this + 12);
        }

        uint64_t v15 = DNSServiceRemoveRecord(v5, v2[4], 0);
        int v16 = otbr::Mdns::DNSErrorToOtbrError(v15);
        if (v16) {
          unsigned int v17 = 4;
        }
        else {
          unsigned int v17 = 6;
        }
        otbr::Mdns::Publisher::MakeFullHostName((const void **)this + 6, (uint64_t)v26);
        if (v27 >= 0) {
          uint64_t v18 = v26;
        }
        else {
          LOBYTE(v18)  = v26[0];
        }
        otbr::Ip6Address::ToString(v4, __p);
        otbr::Mdns::DNSErrorToString((otbr::Mdns *)v15);
        otbrErrorString(v16);
        otbrLog(v17, "MDNS", "Remove record for host %s address %s: %s: %s", v19, v20, v21, v22, v23, (char)v18);
        if (v25 < 0) {
          operator delete(__p[0]);
        }
        if (v27 < 0) {
          operator delete(v26[0]);
        }
        std::__tree_const_iterator<std::__value_type<std::string,boost::any>,std::__tree_node<std::__value_type<std::string,boost::any>,void *> *,long>::operator++[abi:ne180100]((uint64_t)&v28);
        uint64_t v2 = (DNSRecordRef *)v28;
      }

      while (v28 != v3);
    }
  }

  std::__tree<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::__map_value_compare<_DNSRecordRef_t *,std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::less<_DNSRecordRef_t *>,true>,std::allocator<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>>>::~__tree((uint64_t)this + 104);
  otbr::Mdns::Publisher::HostRegistration::~HostRegistration((void **)this);
}

{
  void *v1;
  otbr::Mdns::PublisherMDnsSd::DnssdHostRegistration::~DnssdHostRegistration(this);
  operator delete(v1);
}

uint64_t otbr::Mdns::DNSErrorToOtbrError(uint64_t this)
{
  switch(this)
  {
    case 0xFFFEFFEC:
    case 0xFFFEFFEE:
    case 0xFFFEFFFE:
      this  = 4294967289LL;
      break;
    case 0xFFFEFFED:
    case 0xFFFEFFEF:
    case 0xFFFEFFF1:
    case 0xFFFEFFF2:
    case 0xFFFEFFF5:
    case 0xFFFEFFF6:
    case 0xFFFEFFF7:
    case 0xFFFEFFFA:
    case 0xFFFEFFFB:
    case 0xFFFEFFFD:
      goto LABEL_6;
    case 0xFFFEFFF0:
    case 0xFFFEFFF3:
    case 0xFFFEFFF9:
    case 0xFFFEFFFC:
      this  = 4294967286LL;
      break;
    case 0xFFFEFFF4:
      this  = 4294967285LL;
      break;
    case 0xFFFEFFF8:
      this  = 4294967287LL;
      break;
    default:
      if ((_DWORD)this == -65563)
      {
        this  = 4294967283LL;
      }

      else if ((_DWORD)this)
      {
LABEL_6:
        this  = 4294967293LL;
      }

      break;
  }

  return this;
}

void otbr::Mdns::Publisher::HostRegistration::~HostRegistration(void **this)
{
  *this  = off_1004481F8;
  otbr::Mdns::Publisher::HostRegistration::OnComplete((uint64_t)this, -12);
  uint64_t v2 = this + 9;
  std::vector<otbr::Ip6Address>::__destroy_vector::operator()[abi:ne180100](&v2);
  otbr::Mdns::Publisher::Registration::~Registration((otbr::Mdns::Publisher::Registration *)this);
}

{
  void *v1;
  otbr::Mdns::Publisher::HostRegistration::~HostRegistration(this);
  operator delete(v1);
}

uint64_t otbr::Mdns::PublisherMDnsSd::FindServiceRegistration( otbr::Mdns::PublisherMDnsSd *this, _DNSServiceRef_t *const *a2)
{
  uint64_t v2 = (char *)*((void *)this + 2);
  dnssd_sock_t v6 = v2;
  uint64_t v3 = (char *)this + 24;
  while (1)
  {
    uint64_t result = *((void *)v2 + 7);
    if (*(_DNSServiceRef_t *const *)(result + 176) == *a2) {
      break;
    }
    std::__tree_const_iterator<std::__value_type<std::string,boost::any>,std::__tree_node<std::__value_type<std::string,boost::any>,void *> *,long>::operator++[abi:ne180100]((uint64_t)&v6);
    uint64_t v2 = v6;
    if (v6 == v3) {
      return 0LL;
    }
  }

  return result;
}

uint64_t otbr::Mdns::PublisherMDnsSd::FindHostRegistration( otbr::Mdns::PublisherMDnsSd *this, _DNSServiceRef_t *const *a2, _DNSRecordRef_t **a3)
{
  uint64_t v3 = (char *)*((void *)this + 5);
  unint64_t v9 = v3;
  dnssd_sock_t v4 = (char *)this + 48;
  while (1)
  {
    uint64_t v7 = *((void *)v3 + 7);
    if (*(_DNSServiceRef_t *const *)(v7 + 96) == *a2)
    {
      if (std::__tree<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::__map_value_compare<_DNSRecordRef_t *,std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::less<_DNSRecordRef_t *>,true>,std::allocator<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>>>::__count_unique<_DNSRecordRef_t *>( v7 + 104,  (unint64_t *)a3))
      {
        break;
      }
    }

    std::__tree_const_iterator<std::__value_type<std::string,boost::any>,std::__tree_node<std::__value_type<std::string,boost::any>,void *> *,long>::operator++[abi:ne180100]((uint64_t)&v9);
    uint64_t v3 = v9;
    if (v9 == v4) {
      return 0LL;
    }
  }

  return *((void *)v3 + 7);
}

void otbr::Mdns::PublisherMDnsSd::HandleServiceRegisterResult( otbr::Mdns::PublisherMDnsSd *this, _DNSServiceRef_t *a2, otbr::Mdns *a3, const char *a4, const char *a5, const char *a6, otbr::Mdns::PublisherMDnsSd *a7, uint64_t a8)
{
  char v12 = (char)a2;
  otbrLog( 7u,  "MDNS",  "%s:%d: Received Callback",  (uint64_t)a4,  (uint64_t)a5,  (uint64_t)a6,  (uint64_t)a7,  a8,  (char)"static void otbr::Mdns::PublisherMDnsSd::HandleServiceRegisterResult(DNSServiceRef, const DNSServiceFlags, DNS ServiceErrorType, const char *, const char *, const char *, void *)");
  otbr::Mdns::PublisherMDnsSd::HandleServiceRegisterResult(a7, this, v12, a3, a4, a5, v14);
}

void otbr::Mdns::PublisherMDnsSd::HandleServiceRegisterResult( otbr::Mdns::PublisherMDnsSd *this, _DNSServiceRef_t *a2, char a3, otbr::Mdns *a4, const char *a5, const char *a6, const char *a7)
{
  uint64_t v28 = a2;
  int v11 = otbr::Mdns::DNSErrorToOtbrError((uint64_t)a4);
  ServiceRegistration  = (std::string *)otbr::Mdns::PublisherMDnsSd::FindServiceRegistration(this, &v28);
  std::string::assign(ServiceRegistration + 3, a5);
  otbrLog(6u, "MDNS", "Received reply for service %s.%s, serviceRef  = %p", v13, v14, v15, v16, v17, (char)a5);
  if (ServiceRegistration)
  {
    if ((_DWORD)a4 || (a3 & 2) == 0)
    {
      otbr::Mdns::DNSErrorToString(a4);
      otbrLog(3u, "MDNS", "Failed to register service %s.%s: %s", v23, v24, v25, v26, v27, (char)a5);
      otbr::Mdns::Publisher::RemoveServiceRegistration( (uint64_t)this + 8,  (uint64_t)&ServiceRegistration[3],  (const std::string::value_type *)&ServiceRegistration[4],  v11);
    }

    else
    {
      otbrLog(6u, "MDNS", "Successfully registered service %s.%s", v18, v19, v20, v21, v22, (char)a5);
      otbr::Mdns::Publisher::ServiceRegistration::Complete(ServiceRegistration, 0);
    }
  }

uint64_t otbr::Mdns::PublisherMDnsSd::PublishServiceImpl( _DWORD *a1, std::string *a2, const std::string *a3, std::string *a4, std::vector<std::string> *__x, unsigned int a6, std::string **a7, void *a8)
{
  txtRecord  = 0LL;
  uint64_t v56 = 0LL;
  uint64_t v57 = 0LL;
  std::vector<std::string>::vector(&v53, __x);
  otbr::Mdns::Publisher::SortSubTypeList((uint64_t)&v53, (uint64_t)&__xa);
  *(void *)&__int128 v58 = &v53;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  std::vector<otbr::Mdns::Publisher::TxtEntry>::vector(&v51, a7);
  otbr::Mdns::Publisher::SortTxtList((uint64_t)&v51, (uint64_t)v52);
  *(void *)&__int128 v58 = &v51;
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  std::vector<std::string>::vector(&v49, &__xa);
  otbr::Mdns::PublisherMDnsSd::MakeRegType(a4, (uint64_t)&v49, &v50);
  *(void *)&__int128 v58 = &v49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  uint64_t v47 = 0LL;
  sdRef  = 0LL;
  __p[0]  = 0LL;
  __p[1]  = 0LL;
  if (a1[86] != 1)
  {
    uint64_t v17 = 4294967283LL;
    goto LABEL_33;
  }

  size  = a2->__r_.__value_.__s.__size_;
  if ((size & 0x80u) != 0LL) {
    size  = a2->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    otbr::Mdns::Publisher::MakeFullHostName((const void **)&a2->__r_.__value_.__l.__data_, (uint64_t)&v58);
    std::string::operator=[abi:ne180100]((uint64_t)__p, &v58);
    if (v59 < 0) {
      operator delete((void *)v58);
    }
    if (v47 >= 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)__p[0];
    }
  }

  else
  {
    uint64_t v16 = 0LL;
  }

  otbr::Mdns::Publisher::HandleDuplicateServiceRegistration( (uint64_t)(a1 + 2),  (unsigned __int8 *)a2,  (uint64_t)a3,  (std::string::value_type *)a4,  (unsigned __int8 **)&__xa,  a6,  v52,  a8,  (uint64_t)&v58);
  otbr::OnceCallback<void ()(otbrError)>::operator=(a8, &v58);
  uint64_t v18 = v60;
  if (v60 == &v58)
  {
    uint64_t v19 = 4LL;
    uint64_t v18 = &v58;
    goto LABEL_16;
  }

  if (v60)
  {
    uint64_t v19 = 5LL;
LABEL_16:
    (*(void (**)(void))(*(void *)v18 + 8 * v19))();
  }

  if (!a8[3]) {
    goto LABEL_38;
  }
  uint64_t v17 = (uint64_t)otbr::Mdns::Publisher::EncodeTxtData((char *)a7, (uint64_t *)&txtRecord);
  if (!(_DWORD)v17)
  {
    if ((a3->__r_.__value_.__s.__size_ & 0x80u) == 0) {
      LOBYTE(v25)  = (_BYTE)a3;
    }
    else {
      std::string::size_type v25 = a3->__r_.__value_.__r.__words[0];
    }
    otbrLog( 6u,  "MDNS",  "PublisherMDnsSd::PublishService: MDNS register current service name:%s port:%d type:%s hostname:%s",  v20,  v21,  v22,  v23,  v24,  v25);
    if ((a3->__r_.__value_.__s.__size_ & 0x80u) == 0) {
      LOBYTE(v3ot::NetworkData::NetworkDataTlv::SetType(this, 1) = (_BYTE)a3;
    }
    else {
      std::string::size_type v31 = a3->__r_.__value_.__r.__words[0];
    }
    otbrLog(6u, "MDNS", "Registering new service %s.%s.local, serviceRef  = %p", v26, v27, v28, v29, v30, v31);
    if ((v50.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v32 = &v50;
    }
    else {
      uint64_t v32 = (std::string *)v50.__r_.__value_.__r.__words[0];
    }
    uint64_t v33 = DNSServiceRegister( &sdRef,  8u,  0,  0LL,  (const char *)v32,  0LL,  (const char *)v16,  __rev16(a6),  v56 - (_WORD)txtRecord,  txtRecord,  (DNSServiceRegisterReply)otbr::Mdns::PublisherMDnsSd::HandleServiceRegisterResult,  a1);
    uint64_t v34 = v33;
    if ((_DWORD)v33)
    {
      int v35 = (char)a3->__r_.__value_.__s.__size_;
      std::string::size_type v36 = a3->__r_.__value_.__r.__words[0];
      otbr::Mdns::DNSErrorToString((otbr::Mdns *)v33);
      uint64_t v17 = otbr::Mdns::DNSErrorToOtbrError(v34);
      if (v35 >= 0) {
        char v42 = (char)a3;
      }
      else {
        char v42 = v36;
      }
      otbrLog(3u, "MDNS", "Failed to publish service %s.%s for mdnssd error: %s!", v37, v38, v39, v40, v41, v42);
      goto LABEL_33;
    }

    uint64_t v43 = operator new(0xB8uLL);
    otbr::Mdns::PublisherMDnsSd::DnssdServiceRegistration::DnssdServiceRegistration( v43,  a2,  a3,  a4,  &__xa,  a6,  (std::string **)v52,  a8,  (uint64_t)sdRef,  (uint64_t)a1);
    *(void *)&__int128 v58 = v43;
    otbr::Mdns::Publisher::AddServiceRegistration((uint64_t)(a1 + 2), (unint64_t *)&v58);
    uint64_t v44 = v58;
    *(void *)&__int128 v58 = 0LL;
    if (v44) {
      (*(void (**)(uint64_t))(*(void *)v44 + 8LL))(v44);
    }
LABEL_38:
    uint64_t v17 = 0LL;
    goto LABEL_39;
  }

void sub_10036AF30( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33)
{
  uint64_t v35 = *(void *)(v33 - 128);
  *(void *)(v33 - 128)  = 0LL;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8LL))(v35);
  }
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  *(void *)(v33 - 128)  = &a33;
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 128));
  *(void *)(v33 - 128)  = v33 - 176;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 128));
  *(void *)(v33 - 128)  = v33 - 152;
  std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 128));
  _Unwind_Resume(a1);
}

void otbr::Mdns::PublisherMDnsSd::MakeRegType( std::string *__str@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  unint64_t v5 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  if (*(void *)a2 != v6)
  {
    do
    {
      std::operator+<char>(__p, ",", v5);
      std::string::append[abi:ne180100](a3, (const std::string::value_type *)__p);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
      v5 += 24LL;
    }

    while (v5 != v6);
  }

void sub_10036B0A0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void *otbr::OnceCallback<void ()(otbrError)>::operator=(void *a1, void *a2)
{
  std::function<void ()(otbrError)>::operator=(a1, (uint64_t)a2);
  std::function<void ()(otbrError)>::operator=(a2);
  return a1;
}

void *otbr::OnceCallback<void ()(otbrError)>::operator()(void *a1)
{
  uint64_t result = v4;
  if (v4 == v3)
  {
    uint64_t v2 = 4LL;
    uint64_t result = v3;
  }

  else
  {
    if (!v4) {
      return result;
    }
    uint64_t v2 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v2))();
}

void sub_10036B1A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    uint64_t v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'otbr::Mdns::PublisherMDnsSd::PublishServiceImpl( uint64_t a1, std::string *a2, const std::string *a3, std::string *a4, std::vector<std::string> *a5, unsigned int a6, std::string **a7, void *a8)
{
  return otbr::Mdns::PublisherMDnsSd::PublishServiceImpl((_DWORD *)(a1 - 8), a2, a3, a4, a5, a6, a7, a8);
}

void *otbr::Mdns::PublisherMDnsSd::UnpublishService( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = *(unsigned __int8 *)(a3 + 23);
  if ((v12 & 0x80u) != 0LL) {
    uint64_t v12 = *(void *)(a3 + 8);
  }
  if (v12)
  {
    uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
    if ((v13 & 0x80u) != 0LL) {
      uint64_t v13 = *(void *)(a2 + 8);
    }
    if (v13) {
      otbrLog( 6u,  "MDNS",  "PublisherMDnsSd::UnpublishService mState:%d aName:%s aType:%s",  (uint64_t)a4,  a5,  a6,  a7,  a8,  *(_DWORD *)(a1 + 344));
    }
  }

  if (*(_DWORD *)(a1 + 344) == 1) {
    otbr::Mdns::Publisher::RemoveServiceRegistration(a1 + 8, a2, (const std::string::value_type *)a3, -12);
  }
  return otbr::OnceCallback<void ()(otbrError)>::operator()(a4);
}

void *non-virtual thunk to'otbr::Mdns::PublisherMDnsSd::UnpublishService( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return otbr::Mdns::PublisherMDnsSd::UnpublishService(a1 - 8, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otbr::Mdns::PublisherMDnsSd::PublishHostImpl(uint64_t a1, std::string *a2, __int128 **a3, void *a4)
{
  v40[0]  = 0LL;
  v40[1]  = 0LL;
  uint64_t v41 = 0LL;
  if (*(_DWORD *)(a1 + 344) != 1)
  {
    uint64_t v10 = 4294967283LL;
LABEL_8:
    otbr::OnceCallback<void ()(otbrError)>::operator()(a4);
    goto LABEL_27;
  }

  otbr::Mdns::Publisher::MakeFullHostName((const void **)&a2->__r_.__value_.__l.__data_, (uint64_t)__p);
  std::string::operator=[abi:ne180100]((uint64_t)v40, (__int128 *)__p);
  if (v43 < 0) {
    operator delete(__p[0]);
  }
  otbr::Mdns::Publisher::HandleDuplicateHostRegistration(a1 + 8, (uint64_t)a2, (uint64_t)a3, a4, (uint64_t)__p);
  otbr::OnceCallback<void ()(otbrError)>::operator=(a4, __p);
  char v8 = v44;
  if (v44 == __p)
  {
    uint64_t v9 = 4LL;
    char v8 = __p;
  }

  else
  {
    if (!v44) {
      goto LABEL_11;
    }
    uint64_t v9 = 5LL;
  }

  (*((void (**)(void))*v8 + v9))();
LABEL_11:
  if (!a4[3])
  {
LABEL_25:
    uint64_t v10 = 0LL;
    goto LABEL_27;
  }

  if (*a3 != a3[1])
  {
    int v11 = (uint64_t *)(a1 + 336);
    if (!*(void *)(a1 + 336))
    {
      Connection  = DNSServiceCreateConnection((DNSServiceRef *)(a1 + 336));
      if ((_DWORD)Connection)
      {
LABEL_31:
        size  = (char)a2->__r_.__value_.__s.__size_;
        std::string::size_type v33 = a2->__r_.__value_.__r.__words[0];
        otbr::Mdns::DNSErrorToString((otbr::Mdns *)Connection);
        uint64_t v10 = otbr::Mdns::DNSErrorToOtbrError(Connection);
        if (size >= 0) {
          char v39 = (char)a2;
        }
        else {
          char v39 = v33;
        }
        otbrLog(3u, "MDNS", "Failed to publish/update host %s for mdnssd error: %s!", v34, v35, v36, v37, v38, v39);
        goto LABEL_8;
      }

      otbrLog(7u, "MDNS", "Created new DNSServiceRef for hosts: %p", v27, v28, v29, v30, v31, *v11);
    }

    uint64_t v12 = (uint64_t **)operator new(0x88uLL);
    otbr::Mdns::PublisherMDnsSd::DnssdHostRegistration::DnssdHostRegistration( (uint64_t)v12,  a2,  (uint64_t)a3,  a4,  *v11,  a1 + 8);
    if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
      LOBYTE(v18)  = (_BYTE)a2;
    }
    else {
      std::string::size_type v18 = a2->__r_.__value_.__r.__words[0];
    }
    otbrLog(6u, "MDNS", "Registering new host %s", v13, v14, v15, v16, v17, v18);
    rdata  = *a3;
    uint64_t v20 = a3[1];
    if (*a3 != v20)
    {
      do
      {
        __p[0]  = 0LL;
        uint64_t v21 = v41 >= 0 ? (const char *)v40 : (const char *)v40[0];
        Connection  = DNSServiceRegisterRecord( *(DNSServiceRef *)(a1 + 336),  (DNSRecordRef *)__p,  0x10u,  0,  v21,  0x1Cu,  1u,  0x10u,  rdata,  0,  (DNSServiceRegisterRecordReply)otbr::Mdns::PublisherMDnsSd::HandleRegisterHostResult,  (void *)a1);
        if ((_DWORD)Connection) {
          goto LABEL_31;
        }
        uint64_t v23 = std::map<_DNSRecordRef_t *,otbr::Ip6Address>::operator[](v12 + 13, (uint64_t *)__p);
        __int128 v24 = *rdata++;
        *(_OWORD *)uint64_t v23 = v24;
      }

      while (rdata != v20);
    }

    __p[0]  = v12;
    otbr::Mdns::Publisher::AddHostRegistration(a1 + 8, (unint64_t *)__p);
    std::string::size_type v25 = __p[0];
    __p[0]  = 0LL;
    if (v25) {
      (*(void (**)(void *))(*(void *)v25 + 8LL))(v25);
    }
    goto LABEL_25;
  }

  otbr::OnceCallback<void ()(otbrError)>::operator()(a4);
  uint64_t v10 = 0LL;
LABEL_27:
  if (SHIBYTE(v41) < 0) {
    operator delete(v40[0]);
  }
  return v10;
}

void sub_10036B5B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21)
{
  if (a21) {
    (*(void (**)(uint64_t))(*(void *)a21 + 8LL))(a21);
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void otbr::Mdns::PublisherMDnsSd::HandleRegisterHostResult( otbr::Mdns::PublisherMDnsSd *this, _DNSServiceRef_t *a2, _DNSRecordRef_t *a3, otbr::Mdns *a4, otbr::Mdns::PublisherMDnsSd *a5, void *a6)
{
}

uint64_t *std::map<_DNSRecordRef_t *,otbr::Ip6Address>::operator[](uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = a2;
  return std::__tree<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::__map_value_compare<_DNSRecordRef_t *,std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::less<_DNSRecordRef_t *>,true>,std::allocator<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>>>::__emplace_unique_key_args<_DNSRecordRef_t *,std::piecewise_construct_t const&,std::tuple<_DNSRecordRef_t * const&>,std::tuple<>>( a1,  (unint64_t *)a2,  (uint64_t)&std::piecewise_construct,  &v3)
       + 5;
}

uint64_t non-virtual thunk to'otbr::Mdns::PublisherMDnsSd::PublishHostImpl( uint64_t a1, std::string *a2, __int128 **a3, void *a4)
{
  return otbr::Mdns::PublisherMDnsSd::PublishHostImpl(a1 - 8, a2, a3, a4);
}

void *otbr::Mdns::PublisherMDnsSd::UnpublishHost(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(_DWORD *)(a1 + 344) == 1) {
    otbr::Mdns::Publisher::RemoveHostRegistration(a1 + 8, a2, -12);
  }
  return otbr::OnceCallback<void ()(otbrError)>::operator()(a3);
}

void *non-virtual thunk to'otbr::Mdns::PublisherMDnsSd::UnpublishHost(uint64_t a1, uint64_t a2, void *a3)
{
  return otbr::Mdns::PublisherMDnsSd::UnpublishHost(a1 - 8, a2, a3);
}

void otbr::Mdns::PublisherMDnsSd::HandleRegisterHostResult( otbr::Mdns::PublisherMDnsSd *this, _DNSServiceRef_t *a2, _DNSRecordRef_t *a3, unsigned int a4, otbr::Mdns *a5)
{
  uint64_t v40 = a3;
  uint64_t v41 = a2;
  int v7 = otbr::Mdns::DNSErrorToOtbrError((uint64_t)a5);
  HostRegistration  = otbr::Mdns::PublisherMDnsSd::FindHostRegistration(this, &v41, &v40);
  v38[0]  = 0LL;
  v38[1]  = 0LL;
  uint64_t v39 = 0LL;
  if (HostRegistration)
  {
    uint64_t v9 = HostRegistration;
    uint64_t v10 = HostRegistration + 48;
    otbr::Mdns::Publisher::MakeFullHostName((const void **)(HostRegistration + 48), (uint64_t)__p);
    std::string::operator=[abi:ne180100]((uint64_t)v38, (__int128 *)__p);
    if (v37 < 0) {
      operator delete(__p[0]);
    }
    int v11 = SHIBYTE(v39);
    char v12 = (char)v38[0];
    otbr::Mdns::DNSErrorToString(a5);
    std::string::size_type v18 = v38;
    if (v11 < 0) {
      LOBYTE(v18)  = v12;
    }
    otbrLog(6u, "MDNS", "Received reply for host %s: %s", v13, v14, v15, v16, v17, (char)v18);
    if (v7)
    {
      int v24 = SHIBYTE(v39);
      char v25 = (char)v38[0];
      otbr::Mdns::DNSErrorToString(a5);
      uint64_t v31 = v38;
      if (v24 < 0) {
        LOBYTE(v3ot::NetworkData::NetworkDataTlv::SetType(this, 1) = v25;
      }
      otbrLog(4u, "MDNS", "Failed to register host %s for mdnssd error: %s", v26, v27, v28, v29, v30, (char)v31);
      otbr::Mdns::Publisher::RemoveHostRegistration((uint64_t)this + 8, v10, v7);
    }

    else
    {
      int v32 = *(_DWORD *)(v9 + 128);
      BOOL v33 = v32 != 0;
      int v34 = v32 - 1;
      if (!v33)
      {
        __break(0x5515u);
        return;
      }

      *(_DWORD *)(v9 + 128)  = v34;
      if (!v34)
      {
        uint64_t v35 = v38;
        if (v39 < 0) {
          LOBYTE(v35)  = v38[0];
        }
        otbrLog(6u, "MDNS", "Successfully registered host %s", v19, v20, v21, v22, v23, (char)v35);
        otbr::Mdns::Publisher::HostRegistration::Complete((void *)v9, 0);
      }
    }
  }

  if (SHIBYTE(v39) < 0) {
    operator delete(v38[0]);
  }
}

void sub_10036B82C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void otbr::Mdns::PublisherMDnsSd::SubscribeService(uint64_t a1, const std::string *a2, const std::string *a3)
{
  if (*(_DWORD *)(a1 + 344) == 1)
  {
    MakeUnique<otbr::Mdns::PublisherMDnsSd::ServiceSubscription,otbr::Mdns::PublisherMDnsSd&,std::string const&,std::string const&>( a1,  a2,  a3,  &__p);
    int v11 = *(std::string::size_type **)(a1 + 392);
    if ((unint64_t)v11 >= *(void *)(a1 + 400))
    {
      uint64_t v13 = std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>::__push_back_slow_path<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>( (uint64_t *)(a1 + 384),  (uint64_t *)&__p);
    }

    else
    {
      std::string::size_type v12 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0]  = 0LL;
      *int v11 = v12;
      uint64_t v13 = (uint64_t)(v11 + 1);
      *(void *)(a1 + 39ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = v13;
    }

    *(void *)(a1 + 39ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = v13;
    uint64_t v14 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0]  = 0LL;
    if (v14) {
      std::default_delete<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>::operator()[abi:ne180100]( (uint64_t)&__p,  v14);
    }
    if ((a3->__r_.__value_.__s.__size_ & 0x80u) == 0) {
      LOBYTE(vot::Mle::Tlv::SetType(this, 15) = (_BYTE)a3;
    }
    else {
      std::string::size_type v15 = a3->__r_.__value_.__r.__words[0];
    }
    otbrLog(6u, "MDNS", "Subscribe service %s.%s (total %zu)", v6, v7, v8, v9, v10, v15);
    size  = a3->__r_.__value_.__s.__size_;
    if ((size & 0x80u) != 0LL) {
      size  = a3->__r_.__value_.__l.__size_;
    }
    uint64_t v24 = *(void *)(a1 + 392);
    char v25 = *(uint64_t **)(v24 - 8);
    if (size)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "local.");
      otbr::Mdns::PublisherMDnsSd::ServiceSubscription::Resolve(v25, 0, a3, a2, &__p);
    }

    else
    {
      otbr::Mdns::PublisherMDnsSd::ServiceSubscription::Browse( *(DNSServiceRef **)(v24 - 8),  v16,  v17,  v18,  v19,  v20,  v21,  v22);
    }
  }

void sub_10036B988( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v18 = (uint64_t)__p;
  __p  = 0LL;
  if (v18) {
    std::default_delete<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>::operator()[abi:ne180100]((uint64_t)&__p, v18);
  }
  _Unwind_Resume(exception_object);
}

void MakeUnique<otbr::Mdns::PublisherMDnsSd::ServiceSubscription,otbr::Mdns::PublisherMDnsSd&,std::string const&,std::string const&>( uint64_t a1@<X0>, const std::string *a2@<X1>, const std::string *a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x70uLL);
  std::string::basic_string(&v10, a2);
  std::string::basic_string(&__p, a3);
  otbr::Mdns::PublisherMDnsSd::ServiceSubscription::ServiceSubscription( (uint64_t)v8,  a1,  (__int128 *)&v10,  (__n128 *)&__p);
  *a4  = v8;
}

void sub_10036BA5C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  operator delete(v20);
  _Unwind_Resume(a1);
}

uint64_t otbr::Mdns::PublisherMDnsSd::ServiceSubscription::Browse( DNSServiceRef *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*this) {
    otbr::Mdns::PublisherMDnsSd::ServiceSubscription::Browse();
  }
  uint64_t v9 = (const char *)(this + 2);
  LOBYTE(v1ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = (_BYTE)this + 16;
  otbrLog(6u, "MDNS", "DNSServiceBrowse %s", a4, a5, a6, a7, a8, (char)v10);
  return DNSServiceBrowse( this,  0,  0,  v9,  0LL,  (DNSServiceBrowseReply)otbr::Mdns::PublisherMDnsSd::ServiceSubscription::HandleBrowseResult,  this);
}

void otbr::Mdns::PublisherMDnsSd::ServiceSubscription::Resolve( uint64_t *a1, int a2, const std::string *a3, const std::string *a4, const std::string *a5)
{
  int v34 = a2;
  uint64_t v9 = a1[11];
  uint64_t v10 = a1[12];
  uint64_t v8 = a1 + 11;
  if (v9 != v10)
  {
    size  = (char)a3->__r_.__value_.__s.__size_;
    BOOL v12 = size < 0;
    if (size < 0) {
      uint64_t v13 = (const std::string *)a3->__r_.__value_.__r.__words[0];
    }
    else {
      uint64_t v13 = a3;
    }
    signed __int8 v14 = a4->__r_.__value_.__s.__size_;
    if (v12) {
      std::string::size_type v15 = a3->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type v15 = a3->__r_.__value_.__s.__size_;
    }
    if (v14 < 0) {
      uint64_t v16 = (const std::string *)a4->__r_.__value_.__r.__words[0];
    }
    else {
      uint64_t v16 = a4;
    }
    __s2  = v16;
    if (v14 < 0) {
      std::string::size_type v17 = a4->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type v17 = a4->__r_.__value_.__s.__size_;
    }
    do
    {
      uint64_t v18 = *(void *)v9;
      else {
        size_t v19 = *(unsigned __int8 *)(*(void *)v9 + 39LL);
      }
      if (v19 == v15)
      {
        uint64_t v20 = (const void **)(v18 + 16);
        if ((*(_BYTE *)(*(void *)v9 + 39LL) & 0x80) != 0)
        {
          if (!memcmp(*v20, v13, v19))
          {
LABEL_25:
            else {
              size_t v22 = *(unsigned __int8 *)(v18 + 63);
            }
            if (v22 == v17)
            {
              uint64_t v23 = (const void **)(v18 + 40);
              if ((*(_BYTE *)(v18 + 63) & 0x80) != 0)
              {
                if (!memcmp(*v23, __s2, v22)) {
                  return;
                }
              }

              else
              {
                if (!v22) {
                  return;
                }
                for (uint64_t i = __s2;
                      *(unsigned __int8 *)v23 == i->__r_.__value_.__s.__data_[0];
                      uint64_t i = (const std::string *)((char *)i + 1))
                {
                  uint64_t v23 = (const void **)((char *)v23 + 1);
                  if (!--v22) {
                    return;
                  }
                }
              }
            }
          }
        }

        else
        {
          if (!v19) {
            goto LABEL_25;
          }
          uint64_t v21 = v13;
          while (*(unsigned __int8 *)v20 == v21->__r_.__value_.__s.__data_[0])
          {
            uint64_t v20 = (const void **)((char *)v20 + 1);
            uint64_t v21 = (const std::string *)((char *)v21 + 1);
            if (!--v19) {
              goto LABEL_25;
            }
          }
        }
      }

      v9 += 8LL;
    }

    while (v9 != v10);
  }

  MakeUnique<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution,otbr::Mdns::PublisherMDnsSd::ServiceSubscription &,std::string const&,std::string const&,std::string const&,unsigned int &>( (uint64_t)a1,  a3,  a4,  a5,  &v34,  &v33);
  char v25 = (void ***)a1[9];
  if ((unint64_t)v25 >= a1[10])
  {
    uint64_t v27 = std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>::__push_back_slow_path<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>( a1 + 8,  (uint64_t *)&v33);
  }

  else
  {
    uint64_t v26 = v33;
    BOOL v33 = 0LL;
    *char v25 = v26;
    uint64_t v27 = (uint64_t)(v25 + 1);
    a1[9]  = v27;
  }

  a1[9]  = v27;
  std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>::reset[abi:ne180100](&v33, 0LL);
  otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::Resolve(*(otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution **)(a1[9] - 8));
  MakeUnique<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery,otbr::Mdns::PublisherMDnsSd::ServiceSubscription &,std::string const&,std::string const&,std::string const&,unsigned int &>( (uint64_t)a1,  a3,  a4,  a5,  &v34,  &v33);
  uint64_t v28 = (void ***)a1[12];
  if ((unint64_t)v28 >= a1[13])
  {
    uint64_t v30 = std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>::__push_back_slow_path<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>( v8,  (uint64_t *)&v33);
  }

  else
  {
    uint64_t v29 = v33;
    BOOL v33 = 0LL;
    *uint64_t v28 = v29;
    uint64_t v30 = (uint64_t)(v28 + 1);
    a1[12]  = v30;
  }

  a1[12]  = v30;
  std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>::reset[abi:ne180100](&v33, 0LL);
}

void sub_10036BD5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void non-virtual thunk to'otbr::Mdns::PublisherMDnsSd::SubscribeService( uint64_t a1, const std::string *a2, const std::string *a3)
{
}

void otbr::Mdns::PublisherMDnsSd::UnsubscribeService(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (*(_DWORD *)(a1 + 344) == 1)
  {
    unint64_t v5 = *(uint64_t **)(a1 + 384);
    uint64_t v6 = *(uint64_t **)(a1 + 392);
    if (v5 != v6)
    {
      int v7 = (char)a2[23];
      if (v7 < 0) {
        uint64_t v8 = *(unsigned __int8 **)a2;
      }
      else {
        uint64_t v8 = a2;
      }
      int v9 = (char)a3[23];
      if (v7 < 0) {
        uint64_t v10 = *((void *)a2 + 1);
      }
      else {
        uint64_t v10 = a2[23];
      }
      if (v9 < 0) {
        int v11 = *(unsigned __int8 **)a3;
      }
      else {
        int v11 = a3;
      }
      if (v9 < 0) {
        uint64_t v12 = *((void *)a3 + 1);
      }
      else {
        uint64_t v12 = a3[23];
      }
      while (1)
      {
        uint64_t v13 = *v5;
        else {
          size_t v14 = *(unsigned __int8 *)(*v5 + 39);
        }
        if (v14 == v10)
        {
          std::string::size_type v15 = (const void **)(v13 + 16);
          if ((*(_BYTE *)(*v5 + 39) & 0x80) != 0)
          {
            if (!memcmp(*v15, v8, v14))
            {
LABEL_26:
              else {
                size_t v17 = *(unsigned __int8 *)(v13 + 63);
              }
              if (v17 == v12)
              {
                uint64_t v18 = (const void **)(v13 + 40);
                if ((*(_BYTE *)(v13 + 63) & 0x80) != 0)
                {
                  if (!memcmp(*v18, v11, v17)) {
                    break;
                  }
                }

                else
                {
                  if (!v17) {
                    break;
                  }
                  size_t v19 = v11;
                  while (*(unsigned __int8 *)v18 == *v19)
                  {
                    uint64_t v18 = (const void **)((char *)v18 + 1);
                    ++v19;
                    if (!--v17) {
                      goto LABEL_39;
                    }
                  }
                }
              }
            }
          }

          else
          {
            if (!v14) {
              goto LABEL_26;
            }
            uint64_t v16 = v8;
            while (*(unsigned __int8 *)v15 == *v16)
            {
              std::string::size_type v15 = (const void **)((char *)v15 + 1);
              ++v16;
              if (!--v14) {
                goto LABEL_26;
              }
            }
          }
        }

        if (++v5 == v6) {
          goto LABEL_38;
        }
      }
    }

void non-virtual thunk to'otbr::Mdns::PublisherMDnsSd::UnsubscribeService( uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
}

void otbr::Mdns::PublisherMDnsSd::OnServiceResolveFailedImpl( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  else {
    uint64_t v8 = *a3;
  }
  otbrLog(4u, "MDNS", "Resolve service %s.%s failed: code=%d", a4, a5, a6, a7, a8, v8);
}

void otbr::Mdns::PublisherMDnsSd::OnHostResolveFailedImpl( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  else {
    uint64_t v8 = *a2;
  }
  otbrLog(4u, "MDNS", "Resolve host %s failed: code=%d", a4, a5, a6, a7, a8, v8);
}

void non-virtual thunk to'otbr::Mdns::PublisherMDnsSd::OnHostResolveFailedImpl( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  else {
    uint64_t v8 = *a2;
  }
  otbrLog(4u, "MDNS", "Resolve host %s failed: code=%d", a4, a5, a6, a7, a8, v8);
}

uint64_t otbr::Mdns::PublisherMDnsSd::DnsErrorToOtbrError(otbr::Mdns::PublisherMDnsSd *this, otbr::Mdns *a2)
{
  return otbr::Mdns::DNSErrorToOtbrError((uint64_t)a2);
}

uint64_t non-virtual thunk to'otbr::Mdns::PublisherMDnsSd::DnsErrorToOtbrError( otbr::Mdns::PublisherMDnsSd *this, otbr::Mdns *a2)
{
  return otbr::Mdns::DNSErrorToOtbrError((uint64_t)a2);
}

void otbr::Mdns::PublisherMDnsSd::SubscribeHost(uint64_t a1, const std::string *a2)
{
  if (*(_DWORD *)(a1 + 344) == 1)
  {
    MakeUnique<otbr::Mdns::PublisherMDnsSd::HostSubscription,otbr::Mdns::PublisherMDnsSd&,std::string const&>( a1,  a2,  &v14);
    int v9 = *(uint64_t **)(a1 + 416);
    if ((unint64_t)v9 >= *(void *)(a1 + 424))
    {
      uint64_t v11 = std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>::__push_back_slow_path<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>( (uint64_t *)(a1 + 408),  &v14);
    }

    else
    {
      uint64_t v10 = v14;
      uint64_t v14 = 0LL;
      uint64_t *v9 = v10;
      uint64_t v11 = (uint64_t)(v9 + 1);
      *(void *)(a1 + 416)  = v11;
    }

    *(void *)(a1 + 416)  = v11;
    uint64_t v12 = v14;
    uint64_t v14 = 0LL;
    if (v12) {
      std::default_delete<otbr::Mdns::PublisherMDnsSd::HostSubscription>::operator()[abi:ne180100]((uint64_t)&v14, v12);
    }
    if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
      LOBYTE(v1ot::NetworkData::NetworkDataTlv::SetType(this, 3) = (_BYTE)a2;
    }
    else {
      std::string::size_type v13 = a2->__r_.__value_.__r.__words[0];
    }
    otbrLog(6u, "MDNS", "Subscribe host %s (total %zu)", v4, v5, v6, v7, v8, v13);
    otbr::Mdns::PublisherMDnsSd::HostSubscription::Resolve(*(otbr::Mdns::PublisherMDnsSd::HostSubscription **)(*(void *)(a1 + 416) - 8LL));
  }

void sub_10036C138( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12  = 0LL;
  if (v13) {
    std::default_delete<otbr::Mdns::PublisherMDnsSd::HostSubscription>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void MakeUnique<otbr::Mdns::PublisherMDnsSd::HostSubscription,otbr::Mdns::PublisherMDnsSd&,std::string const&>( uint64_t a1@<X0>, const std::string *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x60uLL);
  std::string::basic_string(&v7, a2);
  otbr::Mdns::PublisherMDnsSd::HostSubscription::HostSubscription((uint64_t)v6, a1, (__int128 *)&v7);
  *a3  = v6;
}

void sub_10036C1C8(_Unwind_Exception *a1)
{
}

void otbr::Mdns::PublisherMDnsSd::HostSubscription::Resolve( otbr::Mdns::PublisherMDnsSd::HostSubscription *this)
{
  uint64_t v2 = (std::string *)((char *)this + 16);
  std::string::basic_string(&v11, (const std::string *)((char *)this + 16));
  if (*(void *)this) {
    __assert_rtn("Resolve", "mdns_mdnssd.cpp", 1270, "mServiceRef == nullptr");
  }
  rep  = (void *)std::chrono::steady_clock::now().__d_.__rep_;
  *std::map<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>::operator[]( (uint64_t **)(*((void *)this + 1) + 168LL),  ot::Mle::Mle::Log(1u, 0x1Du, v2) = rep;
  if ((v11.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v9 = &v11;
  }
  else {
    LOBYTE(vot::NetworkDiagnostic::Tlv::SetType(this, 9) = v11.__r_.__value_.__s.__data_[0];
  }
  otbrLog(6u, "MDNS", "DNSServiceGetAddrInfo %s inf %d", v4, v5, v6, v7, v8, (char)v9);
  if ((v11.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v10 = &v11;
  }
  else {
    uint64_t v10 = (std::string *)v11.__r_.__value_.__r.__words[0];
  }
  DNSServiceGetAddrInfo( (DNSServiceRef *)this,  0,  0,  3u,  (const char *)v10,  (DNSServiceGetAddrInfoReply)otbr::Mdns::PublisherMDnsSd::HostSubscription::HandleResolveResult,  this);
}

void sub_10036C2D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'otbr::Mdns::PublisherMDnsSd::SubscribeHost(uint64_t a1, const std::string *a2)
{
}

void otbr::Mdns::PublisherMDnsSd::UnsubscribeHost(uint64_t a1, unsigned __int8 *a2)
{
  if (*(_DWORD *)(a1 + 344) == 1)
  {
    uint64_t v4 = *(uint64_t **)(a1 + 408);
    uint64_t v5 = *(uint64_t **)(a1 + 416);
    if (v4 != v5)
    {
      int v6 = (char)a2[23];
      if (v6 < 0) {
        uint64_t v7 = *(unsigned __int8 **)a2;
      }
      else {
        uint64_t v7 = a2;
      }
      if (v6 < 0) {
        uint64_t v8 = *((void *)a2 + 1);
      }
      else {
        uint64_t v8 = a2[23];
      }
      do
      {
        uint64_t v9 = *v4;
        else {
          size_t v10 = *(unsigned __int8 *)(*v4 + 39);
        }
        if (v10 == v8)
        {
          std::string v11 = (const void **)(v9 + 16);
          if ((*(_BYTE *)(*v4 + 39) & 0x80) != 0)
          {
            if (!memcmp(*v11, v7, v10)) {
              goto LABEL_22;
            }
          }

          else
          {
            if (!v10) {
              goto LABEL_22;
            }
            uint64_t v12 = v7;
            while (*(unsigned __int8 *)v11 == *v12)
            {
              std::string v11 = (const void **)((char *)v11 + 1);
              ++v12;
              if (!--v10) {
                goto LABEL_22;
              }
            }
          }
        }

        ++v4;
      }

      while (v4 != v5);
LABEL_21:
      otbr::Mdns::PublisherMDnsSd::UnsubscribeHost();
    }

void non-virtual thunk to'otbr::Mdns::PublisherMDnsSd::UnsubscribeHost(uint64_t a1, unsigned __int8 *a2)
{
}

char *otbr::Mdns::Publisher::Create(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x1B0uLL);
  std::__function::__value_func<void ()(otbr::Mdns::Publisher::State)>::__value_func[abi:ne180100]((uint64_t)v6, a1);
  otbr::Mdns::PublisherMDnsSd::PublisherMDnsSd((uint64_t)v2, (uint64_t)v6);
  uint64_t v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return v2 + 8;
}

void sub_10036C4E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v15 = a13;
  if (a13 == &a10)
  {
    uint64_t v16 = 4LL;
    uint64_t v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  operator delete(v13);
  _Unwind_Resume(a1);
}

uint64_t otbr::Mdns::Publisher::Destroy(uint64_t this, otbr::Mdns::Publisher *a2)
{
  if (this) {
    return (*(uint64_t (**)(uint64_t))(*(void *)(this - 8) + 8LL))(this - 8);
  }
  return this;
}

void otbr::Mdns::PublisherMDnsSd::ServiceRef::Release(_DNSServiceRef_t **this)
{
  uint64_t v2 = *this;
  if (v2)
  {
    DNSServiceRefDeallocate(v2);
    *this  = 0LL;
  }

void otbr::Mdns::PublisherMDnsSd::ServiceRef::DeallocateServiceRef(_DNSServiceRef_t **this)
{
  uint64_t v2 = *this;
  if (v2)
  {
    DNSServiceRefDeallocate(v2);
    *this  = 0LL;
  }

void otbr::Mdns::PublisherMDnsSd::ServiceSubscription::HandleBrowseResult( otbr::Mdns::PublisherMDnsSd::ServiceSubscription *this, _DNSServiceRef_t *a2, uint64_t a3, uint64_t a4, char *a5, char *a6, char *a7, otbr::Mdns::PublisherMDnsSd::ServiceSubscription *a8, void *a9)
{
}

void otbr::Mdns::PublisherMDnsSd::ServiceSubscription::HandleBrowseResult( otbr::Mdns::PublisherMDnsSd::ServiceSubscription *this, _DNSServiceRef_t *a2, char a3, uint64_t a4, uint64_t a5, char *a6, char *a7, char *a8, char a9)
{
  int v13 = a4;
  uint64_t v16 = "add";
  if ((a3 & 2) == 0) {
    uint64_t v16 = "remove";
  }
  otbrLog( 6u,  "MDNS",  "DNSServiceBrowse reply: %s %s.%s inf %u, flags=%u, error=%d",  a4,  a5,  (uint64_t)a6,  (uint64_t)a7,  (uint64_t)a8,  (char)v16);
  if ((_DWORD)a5)
  {
    otbr::Mdns::Publisher::OnServiceResolveFailed( *((void *)this + 1) + 8LL,  (const std::string *)((char *)this + 16),  (const std::string *)((char *)this + 40),  a5);
    if (*(void *)this)
    {
      DNSServiceRefDeallocate(*(DNSServiceRef *)this);
      *(void *)this  = 0LL;
    }
  }

  else
  {
    if ((a3 & 2) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v29, a6);
      std::string::basic_string[abi:ne180100]<0>(&v28, a7);
      std::string::basic_string[abi:ne180100]<0>(&__p, a8);
      otbr::Mdns::PublisherMDnsSd::ServiceSubscription::Resolve((uint64_t *)this, v13, &v29, &v28, &__p);
    }

    else
    {
      if ((a3 & 1) != 0)
      {
        otbrLog( 6u,  "MDNS",  "DNSServiceBrowse reply: with kDNSServiceFlagsMoreComing flag set",  v17,  v18,  v19,  v20,  v21,  a9);
        return;
      }

      uint64_t v22 = *((void *)this + 1) + 8LL;
      std::string::basic_string[abi:ne180100]<0>(&v29, a6);
      otbr::Mdns::Publisher::OnServiceRemoved(v22, v13, (std::string *)((char *)this + 16), &v29, v23, v24, v25, v26);
    }
  }

void sub_10036C754( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
}

void MakeUnique<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution,otbr::Mdns::PublisherMDnsSd::ServiceSubscription &,std::string const&,std::string const&,std::string const&,unsigned int &>( uint64_t a1@<X0>, const std::string *a2@<X1>, const std::string *a3@<X2>, const std::string *a4@<X3>, int *a5@<X4>, void *a6@<X8>)
{
  uint64_t v12 = operator new(0xD8uLL);
  std::string::basic_string(&v15, a2);
  std::string::basic_string(&v14, a3);
  std::string::basic_string(&v13, a4);
  otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::ServiceInstanceResolution( (uint64_t)v12,  a1,  (__int128 *)&v15,  (__int128 *)&v14,  (__int128 *)&v13,  *a5);
  *a6  = v12;
}

void sub_10036C874( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  operator delete(v24);
  _Unwind_Resume(a1);
}

uint64_t otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::Resolve( otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution *this)
{
  if (*(void *)this) {
    otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::Resolve();
  }
  rep  = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v3 = (uint64_t **)(*(void *)(*((void *)this + 1) + 8LL) + 144LL);
  uint64_t v4 = (char *)this + 16;
  uint64_t v5 = (char *)this + 40;
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>( &v14,  (const std::string *)((char *)this + 16),  (const std::string *)((char *)this + 40));
  *std::map<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>::operator[]( v3,  (__int128 *)&v1ot::NetworkData::NetworkDataTlv::SetType(this, 4) = rep;
  if (v16 < 0) {
    operator delete(__p);
  }
  LOBYTE(vot::Mle::Tlv::SetType(this, 11) = (_BYTE)this + 16;
  otbrLog(6u, "MDNS", "DNSServiceResolve %s %s inf %u", v6, v7, v8, v9, v10, (char)v11);
  uint64_t v12 = (char *)this + 64;
  return DNSServiceResolve( (DNSServiceRef *)this,  0x10000u,  *((_DWORD *)this + 22),  v4,  v5,  v12,  (DNSServiceResolveReply)otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::HandleResolveResult,  this);
}

void sub_10036C9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void MakeUnique<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery,otbr::Mdns::PublisherMDnsSd::ServiceSubscription &,std::string const&,std::string const&,std::string const&,unsigned int &>( uint64_t a1@<X0>, const std::string *a2@<X1>, const std::string *a3@<X2>, const std::string *a4@<X3>, int *a5@<X4>, void *a6@<X8>)
{
  uint64_t v12 = operator new(0xD8uLL);
  std::string::basic_string(&v15, a2);
  std::string::basic_string(&v14, a3);
  std::string::basic_string(&v13, a4);
  otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery::ServiceInstanceQuery( (uint64_t)v12,  a1,  (__int128 *)&v15,  (__int128 *)&v14,  (__int128 *)&v13,  *a5);
  *a6  = v12;
}

void sub_10036CAC8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  operator delete(v24);
  _Unwind_Resume(a1);
}

void otbr::Mdns::PublisherMDnsSd::ServiceSubscription::RemoveInstanceResolution( otbr::Mdns::PublisherMDnsSd::ServiceSubscription *this, void **a2)
{
  uint64_t v3 = (void ***)*((void *)this + 8);
  uint64_t v2 = (void ***)*((void *)this + 9);
  uint64_t v4 = (char *)this + 64;
  if (v3 != v2)
  {
    while (*v3 != a2)
    {
      if (++v3 == v2) {
        goto LABEL_4;
      }
    }
  }

  if (v3 == v2) {
LABEL_4:
  }
    otbr::Mdns::PublisherMDnsSd::ServiceSubscription::RemoveInstanceResolution();
  std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution> *,std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution> *,std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution> *>( (uint64_t)&v6,  v3 + 1,  v2,  v3);
  std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>::__base_destruct_at_end[abi:ne180100]( (uint64_t)v4,  v5);
}

void otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::HandleQueryrecordResult( otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution *this, _DNSServiceRef_t *a2, uint64_t a3, uint64_t a4, char *a5, const char *a6, unsigned __int16 a7, size_t __n, size_t __na, void *__src, otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution *a11, void *a12)
{
  __srca  = (void *)__na;
  LOWORD(__na)  = __n;
  otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::HandleQueryrecordResult( a11,  a2,  (char)a2,  a3,  a4,  a5,  (uint64_t)a6,  0LL,  __na,  __srca,  a11);
}

void otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::HandleQueryrecordResult( otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution *this, _DNSServiceRef_t *a2, char a3, uint64_t a4, uint64_t a5, const char *a6, uint64_t a7, uint64_t a8, size_t __n, void *__src, unsigned int a11)
{
  if (!(_DWORD)a5)
  {
    if ((a3 & 2) != 0)
    {
      if ((_DWORD)a7 == 33 && (unsigned __int16)__n - 1 <= 0xFD)
      {
        memcpy(__dst, __src, (unsigned __int16)__n);
        *((_WORD *)this + 88)  = __rev16(v27);
        otbrLog( 6u,  "MDNS",  "%s: Got an ADD interface for %s at port=%u",  v19,  v20,  v21,  v22,  v23,  (char)"HandleQueryrecordResult");
      }

      uint64_t v24 = *((void *)this + 1);
      if (v24) {
        otbr::Mdns::Publisher::OnServiceResolved( *(void *)(v24 + 8) + 8LL,  (std::string *)(v24 + 16),  (_BYTE *)this + 96,  a4,  a5,  (uint64_t)a6,  a7,  a8);
      }
    }

    else
    {
      int v12 = a4;
      otbrLog( 6u,  "MDNS",  "%s: Got a RMV interface for %s",  a4,  a5,  (uint64_t)a6,  a7,  a8,  (char)"HandleQueryrecordResult");
      uint64_t v13 = *((void *)this + 1);
      if (v13)
      {
        uint64_t v14 = *(void *)(v13 + 8);
        std::string::basic_string[abi:ne180100]<0>(&__p, "_trel._udp");
        otbr::Mdns::Publisher::OnServiceRemoved( v14 + 8,  v12,  &__p,  (const std::string *)((char *)this + 104),  v15,  v16,  v17,  v18);
      }
    }
  }

void sub_10036CD10( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>::operator[]( uint64_t **a1, __int128 *a2)
{
  uint64_t v3 = a2;
  return std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::__emplace_unique_key_args<std::pair<std::string,std::string>,std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::string>&&>,std::tuple<>>( a1,  (const void **)a2,  (uint64_t)&std::piecewise_construct,  &v3)
       + 10;
}

void otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::HandleResolveResult( otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution *this, _DNSServiceRef_t *a2, uint64_t a3, uint64_t a4, char *a5, const char *a6, const char *a7, unsigned __int16 a8, char *a9, unsigned __int8 *__src, void *a11)
{
}

void otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::HandleResolveResult( otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution *this, _DNSServiceRef_t *a2, unsigned int a3, uint64_t a4, uint64_t a5, char *a6, const char *a7, uint64_t a8, unsigned __int16 a9, char *__src)
{
  unsigned int v10 = a8;
  uint32_t v14 = a4;
  memset(&__str, 0, sizeof(__str));
  v32[0]  = 0LL;
  v32[1]  = 0LL;
  uint64_t v33 = 0LL;
  v30[0]  = 0LL;
  v30[1]  = 0LL;
  uint64_t v31 = 0LL;
  otbrLog( 6u,  "MDNS",  "DNSServiceResolve reply: %s host %s:%d, TXT=%dB inf %u, flags=%u",  a4,  a5,  (uint64_t)a6,  (uint64_t)a7,  a8,  (char)a6);
  if ((_DWORD)a5)
  {
    AddrInfo  = 0;
    goto LABEL_11;
  }

  std::string::basic_string[abi:ne180100]<0>(&__p, a6);
  int v17 = SplitFullServiceInstanceName(&__p, (uint64_t)&__str, (uint64_t)v32, (uint64_t)v30);
  AddrInfo  = v17;
  if ((char)__p.__r_.__value_.__s.__size_ < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!AddrInfo) {
      goto LABEL_7;
    }
LABEL_10:
    otbrLog(4u, "MDNS", "Failed to resolve service instance %s", v18, v19, v20, v21, v22, (char)a6);
    goto LABEL_11;
  }

  if (v17) {
    goto LABEL_10;
  }
LABEL_7:
  *((_DWORD *)this + 25)  = v14;
  std::string::operator=((std::string *)((char *)this + 104), &__str);
  std::string::assign((std::string *)((char *)this + 128), a7);
  *((_WORD *)this + 88)  = __rev16(v10);
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>( (uint64_t *)this + 23,  __src,  (uint64_t)&__src[a9],  a9);
  *(_DWORD *)((char *)this + 178)  = 0;
  if (*(void *)this)
  {
    DNSServiceRefDeallocate(*(DNSServiceRef *)this);
    *(void *)this  = 0LL;
  }

  AddrInfo  = otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::GetAddrInfo( (DNSServiceRef *)this,  v14,  v23,  v24,  v25,  v26,  v27,  v28);
  if (AddrInfo) {
    goto LABEL_10;
  }
LABEL_11:
  if (AddrInfo | a5)
  {
    otbr::Mdns::Publisher::OnServiceResolveFailed( *(void *)(*((void *)this + 1) + 8LL) + 8LL,  (const std::string *)(*((void *)this + 1) + 16LL),  (const std::string *)((char *)this + 16),  a5);
    otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::FinishResolution(this);
  }

  if (SHIBYTE(v31) < 0) {
    operator delete(v30[0]);
  }
  if (SHIBYTE(v33) < 0) {
    operator delete(v32[0]);
  }
}

void sub_10036CF4C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, void *a27, uint64_t a28, int a29, __int16 a30, char a31, char a32)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::GetAddrInfo( DNSServiceRef *this, uint32_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*this) {
    otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::GetAddrInfo();
  }
  unsigned int v10 = (const char *)(this + 16);
  LOBYTE(vot::Mle::Tlv::SetType(this, 11) = (_BYTE)this + 0x80;
  otbrLog(6u, "MDNS", "DNSServiceGetAddrInfo %s inf %d", a4, a5, a6, a7, a8, (char)v11);
  uint64_t result = DNSServiceGetAddrInfo( this,  0,  a2,  3u,  v10,  (DNSServiceGetAddrInfoReply)otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::HandleGetAddrInfoResult,  this);
  if ((_DWORD)result)
  {
    char v13 = otbr::Mdns::DNSErrorToString((otbr::Mdns *)result);
    otbrLog(4u, "MDNS", "DNSServiceGetAddrInfo failed: %s", v14, v15, v16, v17, v18, v13);
    return 4294967293LL;
  }

  return result;
}

void otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::FinishResolution( otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution *this)
{
  uint64_t v2 = *((void *)this + 1);
  std::string::basic_string(&v21, (const std::string *)(v2 + 16));
  otbr::Mdns::Publisher::DiscoveredInstanceInfo::DiscoveredInstanceInfo( (otbr::Mdns::Publisher::DiscoveredInstanceInfo *)v14,  (otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution *)((char *)this + 96));
  otbrLog(6u, "MDNS", "ServiceInstanceResolution orig inf %u and inf %d", v3, v4, v5, v6, v7, *((_DWORD *)this + 25));
  if (v2)
  {
    uint64_t v13 = *(void *)(v2 + 8);
    if (v13) {
      otbr::Mdns::Publisher::OnServiceResolved(v13 + 8, &v21, v14, v8, v9, v10, v11, v12);
    }
  }

  uint64_t v22 = (void **)&v20;
  std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100](&v22);
  uint64_t v22 = (void **)&v19;
  std::vector<otbr::Ip6Address>::__destroy_vector::operator()[abi:ne180100](&v22);
  if (v18 < 0) {
    operator delete(__p);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
}

void sub_10036D13C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::HandleGetAddrInfoResult( otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution *this, _DNSServiceRef_t *a2, unsigned int a3, uint64_t a4, char *a5, const sockaddr_in6 *a6, const sockaddr *a7, otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution *a8, void *a9)
{
}

void otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::HandleGetAddrInfoResult( otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution *this, _DNSServiceRef_t *a2, char a3, uint64_t a4, uint64_t a5, const char *a6, const sockaddr_in6 *a7, uint64_t a8)
{
  int v8 = a8;
  Record  = a5;
  v51[0]  = 0LL;
  v51[1]  = 0LL;
  uint64_t v52 = 0LL;
  if ((_DWORD)a5) {
    unsigned int v13 = 4;
  }
  else {
    unsigned int v13 = 6;
  }
  __n128 v50 = 0uLL;
  otbrLog( v13,  "MDNS",  "DNSServiceGetAddrInfo reply: flags=%u, host=%s, sa_family=%u, error=%d",  a4,  a5,  (uint64_t)a6,  (uint64_t)a7,  a8,  a3);
  if (Record) {
    goto LABEL_14;
  }
  if ((a3 & 2) == 0 || a7->sin6_family != 30)
  {
LABEL_13:
    Record  = 0;
    goto LABEL_14;
  }

  otbr::Ip6Address::CopyFrom(&v50, a7);
  if (*(_OWORD *)&v50 == 0LL
    || (v50.n128_u16[0] & 0xC0FF) == 0x80FELL
    || v50.n128_u8[0] == 255LL
    || otbr::Ip6Address::IsLoopback((otbr::Ip6Address *)&v50))
  {
    otbr::Ip6Address::ToString((otbr::Ip6Address *)&v50, __p);
    if (cap >= 0) {
      uint64_t v19 = __p;
    }
    else {
      LOBYTE(v1ot::NetworkDiagnostic::Tlv::SetType(this, 9) = __p[0];
    }
    otbrLog(7u, "MDNS", "DNSServiceGetAddrInfo ignores address %s", v14, v15, v16, v17, v18, (char)v19);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_13;
  }

  *((void *)this + ot::Mle::Tlv::SetType(this, 20) = *((void *)this + 19);
  std::vector<otbr::Ip6Address>::push_back[abi:ne180100]((uint64_t *)this + 19, &v50);
  *((_DWORD *)this + 5ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = v8;
  otbr::Ip6Address::ToString((otbr::Ip6Address *)&v50, __p);
  if (cap >= 0) {
    uint64_t v25 = __p;
  }
  else {
    LOBYTE(v25)  = __p[0];
  }
  otbrLog(6u, "MDNS", "DNSServiceGetAddrInfo reply: address=%s, ttl=%u", v20, v21, v22, v23, v24, (char)v25);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>( "._trel._udp.",  (const void **)this + 13,  (void **)&v47.__r_.__value_.__l.__data_);
  uint64_t v26 = std::string::append(&v47, "local.");
  __int128 v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  cap  = v26->__r_.__value_.__l.__cap_;
  *(_OWORD *)__p  = v27;
  v26->__r_.__value_.__l.__size_  = 0LL;
  v26->__r_.__value_.__l.__cap_  = 0LL;
  v26->__r_.__value_.__r.__words[0]  = 0LL;
  std::string::operator=[abi:ne180100]((uint64_t)v51, (__int128 *)__p);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v33 = *((void *)this + 1);
  int v34 = *(uint64_t **)(v33 + 88);
  uint64_t v35 = *(uint64_t **)(v33 + 96);
  if (v34 != v35)
  {
    Record  = 0;
    while (1)
    {
      uint64_t v36 = *v34;
      else {
        size_t v37 = *(unsigned __int8 *)(*v34 + 39);
      }
      else {
        uint64_t v38 = *((unsigned __int8 *)this + 127);
      }
      if (v37 == v38)
      {
        uint64_t v39 = (const void **)(v36 + 16);
        else {
          uint64_t v40 = (unsigned __int8 *)*((void *)this + 13);
        }
        if ((*(_BYTE *)(*v34 + 39) & 0x80) == 0)
        {
          if (v37)
          {
            while (*(unsigned __int8 *)v39 == *v40)
            {
              uint64_t v39 = (const void **)((char *)v39 + 1);
              ++v40;
              if (!--v37) {
                goto LABEL_50;
              }
            }

            goto LABEL_55;
          }

void sub_10036D534( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, uint64_t a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

BOOL otbr::Ip6Address::IsLoopback(otbr::Ip6Address *this)
{
  return !*(_DWORD *)this && !*((_DWORD *)this + 1) && !*((_DWORD *)this + 2) && *((_DWORD *)this + 3) == 0x1000000;
}

uint64_t std::vector<otbr::Ip6Address>::push_back[abi:ne180100](uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = (_OWORD *)a1[1];
  if ((unint64_t)v3 >= a1[2])
  {
    uint64_t result = std::vector<otbr::Ip6Address>::__push_back_slow_path<otbr::Ip6Address const&>(a1, a2);
  }

  else
  {
    _OWORD *v3 = *a2;
    uint64_t result = (uint64_t)(v3 + 1);
  }

  a1[1]  = result;
  return result;
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>( char *__s@<X1>, const void **a2@<X0>, void **a3@<X8>)
{
  else {
    size_t v6 = (size_t)a2[1];
  }
  uint64_t result = strlen(__s);
  if (__CFADD__(v6, result))
  {
    __break(0x5500u);
  }

  else
  {
    size_t v8 = result;
    uint64_t result = std::string::basic_string[abi:ne180100]((uint64_t)a3, v6 + result);
    if (v6)
    {
      else {
        uint64_t v9 = *a2;
      }
      uint64_t result = (uint64_t)memmove(a3, v9, v6);
    }

    if (v8) {
      uint64_t result = (uint64_t)memmove((char *)a3 + v6, __s, v8);
    }
    *((_BYTE *)a3 + v6 + v8)  = 0;
  }

  return result;
}

void otbr::Mdns::Publisher::DiscoveredInstanceInfo::~DiscoveredInstanceInfo(void **this)
{
  uint64_t v2 = this + 11;
  std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 7;
  std::vector<otbr::Ip6Address>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void **std::map<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>::operator[]( uint64_t **a1, std::string *a2)
{
  uint64_t v3 = a2;
  return std::__tree<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>( a1,  (const void **)&a2->__r_.__value_.__l.__data_,  (uint64_t)&std::piecewise_construct,  &v3)
       + 7;
}

void otbr::Mdns::PublisherMDnsSd::HostSubscription::HandleResolveResult( otbr::Mdns::PublisherMDnsSd::HostSubscription *this, _DNSServiceRef_t *a2, unsigned int a3, uint64_t a4, char *a5, const sockaddr_in6 *a6, const sockaddr *a7, otbr::Mdns::PublisherMDnsSd::HostSubscription *a8, void *a9)
{
}

void otbr::Mdns::PublisherMDnsSd::HostSubscription::HandleResolveResult( otbr::Mdns::PublisherMDnsSd::HostSubscription *this, _DNSServiceRef_t *a2, char a3, uint64_t a4, uint64_t a5, char *a6, const sockaddr_in6 *a7, uint64_t a8)
{
  int v8 = a8;
  if ((_DWORD)a5) {
    unsigned int v14 = 4;
  }
  else {
    unsigned int v14 = 6;
  }
  __n128 v37 = 0uLL;
  otbrLog( v14,  "MDNS",  "DNSServiceGetAddrInfo reply: flags=%u, host=%s, sa_family=%u, error=%d",  a4,  a5,  (uint64_t)a6,  (uint64_t)a7,  a8,  a3);
  if ((a3 & 2) == 0 || (_DWORD)a5)
  {
    if (!(_DWORD)a5) {
      return;
    }
    uint64_t v21 = *((void *)this + 1) + 8LL;
    std::string::basic_string[abi:ne180100]<0>(__p, a6);
    otbr::Mdns::Publisher::OnHostResolveFailed(v21, (const void **)__p, a5);
    goto LABEL_14;
  }

  if (a7->sin6_family != 30) {
    return;
  }
  otbr::Ip6Address::CopyFrom(&v37, a7);
  if ((v37.n128_u16[0] & 0xC0FF) == 0x80FE)
  {
    otbr::Ip6Address::ToString((otbr::Ip6Address *)&v37, __p);
    if (v36 >= 0) {
      uint64_t v20 = __p;
    }
    else {
      LOBYTE(vot::Mle::Tlv::SetType(this, 20) = __p[0];
    }
    otbrLog(7u, "MDNS", "DNSServiceGetAddrInfo ignore link-local address %s", v15, v16, v17, v18, v19, (char)v20);
LABEL_14:
    if (v36 < 0) {
      operator delete(__p[0]);
    }
    return;
  }

  std::string::assign((std::string *)((char *)this + 40), a6);
  uint64_t v22 = (__n128 *)*((void *)this + 9);
  if ((unint64_t)v22 >= *((void *)this + 10))
  {
    uint64_t v23 = std::vector<otbr::Ip6Address>::__push_back_slow_path<otbr::Ip6Address const&>((uint64_t *)this + 8, &v37);
  }

  else
  {
    *uint64_t v22 = v37;
    uint64_t v23 = (uint64_t)&v22[1];
  }

  *((void *)this + ot::NetworkDiagnostic::Tlv::SetType(this, 9) = v23;
  *((_DWORD *)this + 2ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = v8;
  otbr::Ip6Address::ToString((otbr::Ip6Address *)&v37, __p);
  if (v36 >= 0) {
    uint64_t v29 = __p;
  }
  else {
    LOBYTE(v2ot::NetworkDiagnostic::Tlv::SetType(this, 9) = __p[0];
  }
  otbrLog(6u, "MDNS", "DNSServiceGetAddrInfo reply: address=%s, ttl=%u", v24, v25, v26, v27, v28, (char)v29);
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  otbr::Mdns::Publisher::OnHostResolved( *((void *)this + 1) + 8LL,  (uint64_t)this + 16,  (uint64_t)this + 40,  v30,  v31,  v32,  v33,  v34);
}

void sub_10036D94C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__tree<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::~__tree( uint64_t a1)
{
  return a1;
}

void std::__tree<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::destroy( uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::destroy( a1,  *(void *)a2);
    std::__tree<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::destroy( a1,  *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }

uint64_t std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::~__tree( uint64_t a1)
{
  return a1;
}

void std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::destroy( uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::destroy( a1,  *a2);
    std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::destroy( a1,  a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }

uint64_t std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::~__tree( uint64_t a1)
{
  return a1;
}

void std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::destroy( uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::destroy( a1,  *a2);
    std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::destroy( a1,  a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,0>(a2 + 4);
    operator delete(a2);
  }

void *std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,0>( void *a1)
{
  uint64_t v2 = a1 + 1;
  uint64_t v3 = a1 + 5;
  uint64_t v4 = (void *)a1[8];
  if (v4 == v3)
  {
    uint64_t v5 = 4LL;
    uint64_t v4 = v3;
  }

  else
  {
    if (!v4) {
      goto LABEL_6;
    }
    uint64_t v5 = 5LL;
  }

  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  uint64_t result = (void *)a1[4];
  if (result == v2)
  {
    uint64_t v7 = 4LL;
    uint64_t result = v2;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v7 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void std::vector<otbr::Ip6Address>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  char v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    v1[1]  = v2;
    if ((_BYTE *)v1[2] - (_BYTE *)v2 < 0) {
      __break(0x550Cu);
    }
    else {
      operator delete(v2);
    }
  }

void *otbr::Mdns::PublisherMDnsSd::DnssdServiceRegistration::DnssdServiceRegistration( void *a1, const std::string *a2, const std::string *a3, const std::string *a4, const std::vector<std::string> *a5, __int16 a6, std::string **a7, void *a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    uint64_t v17 = a10 + 8;
  }
  else {
    uint64_t v17 = 0LL;
  }
  otbr::Mdns::Publisher::ServiceRegistration::ServiceRegistration( (uint64_t)a1,  (__int128 *)&v23,  (__int128 *)&v22,  (__int128 *)&v21,  (__int128 *)&v20,  a6,  (__int128 *)&v19,  a8,  v17);
  uint64_t v24 = (std::vector<std::string> *)&v19;
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  uint64_t v24 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  *a1  = off_100448028;
  a1[22]  = a9;
  return a1;
}

void sub_10036DCD0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  *(void *)(v29 - 7ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = v28;
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 72));
  *(void *)(v29 - 7ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = &a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 72));
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

uint64_t otbr::Mdns::Publisher::ServiceRegistration::ServiceRegistration( uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, __int16 a6, __int128 *a7, void *a8, uint64_t a9)
{
  *(void *)a1  = off_100448258;
  otbr::OnceCallback<void ()(otbrError)>::OnceCallback(a1 + 8, a8);
  *(void *)(a1 + 4ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = a9;
  *(void *)a1  = off_1004481D8;
  __int128 v16 = *a2;
  *(void *)(a1 + 6ot::NetworkData::NetworkDataTlv::SetType(this, 4) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 48)  = v16;
  *((void *)a2 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = 0LL;
  *((void *)a2 + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  *(void *)a2  = 0LL;
  __int128 v17 = *a3;
  *(void *)(a1 + 88)  = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 7ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = v17;
  *((void *)a3 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = 0LL;
  *((void *)a3 + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  *(void *)a3  = 0LL;
  __int128 v18 = *a4;
  *(void *)(a1 + 11ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = *((void *)a4 + 2);
  *(_OWORD *)(a1 + 96)  = v18;
  *((void *)a4 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = 0LL;
  *((void *)a4 + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  *(void *)a4  = 0LL;
  __int128 v22 = *a5;
  uint64_t v23 = *((void *)a5 + 2);
  *((void *)a5 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = 0LL;
  *((void *)a5 + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  *(void *)a5  = 0LL;
  otbr::Mdns::Publisher::SortSubTypeList((uint64_t)&v22, a1 + 120);
  uint64_t v24 = (void **)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v24);
  *(_WORD *)(a1 + 14ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a6;
  __int128 v20 = *a7;
  uint64_t v21 = *((void *)a7 + 2);
  *((void *)a7 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = 0LL;
  *((void *)a7 + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  *(void *)a7  = 0LL;
  otbr::Mdns::Publisher::SortTxtList((uint64_t)&v20, a1 + 152);
  uint64_t v24 = (void **)&v20;
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__destroy_vector::operator()[abi:ne180100](&v24);
  return a1;
}

void sub_10036DE88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t otbr::OnceCallback<void ()(otbrError)>::OnceCallback(uint64_t a1, void *a2)
{
  std::function<void ()(otbrError)>::operator=(a2);
  return a1;
}

void *std::function<void ()(otbrError)>::operator=(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3]  = 0LL;
  if (v2 == a1)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = a1;
    goto LABEL_5;
  }

  if (v2)
  {
    uint64_t v3 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return a1;
}

uint64_t std::__function::__value_func<void ()(otbrError)>::__value_func[abi:ne180100]( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  void *v3 = 0LL;
  return a1;
}

uint64_t otbr::Mdns::PublisherMDnsSd::DnssdHostRegistration::DnssdHostRegistration( uint64_t a1, const std::string *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  unsigned int v14 = (void **)&v12;
  std::vector<otbr::Ip6Address>::__destroy_vector::operator()[abi:ne180100](&v14);
  *(void *)a1  = off_100448048;
  *(void *)(a1 + 1ot::Mle::Tlv::SetType(this, 20) = 0LL;
  *(void *)(a1 + 11ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  *(void *)(a1 + 96)  = a5;
  *(void *)(a1 + 10ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a1 + 112;
  *(_DWORD *)(a1 + 128)  = (*(void *)(a3 + 8) - *(void *)a3) >> 4;
  return a1;
}

void sub_10036E0A4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t otbr::Mdns::Publisher::HostRegistration::HostRegistration( uint64_t a1, __int128 *a2, __int128 *a3, void *a4, uint64_t a5)
{
  *(void *)a1  = off_100448258;
  otbr::OnceCallback<void ()(otbrError)>::OnceCallback(a1 + 8, a4);
  *(void *)(a1 + 4ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = a5;
  *(void *)a1  = off_1004481F8;
  __int128 v9 = *a2;
  *(void *)(a1 + 6ot::NetworkData::NetworkDataTlv::SetType(this, 4) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 48)  = v9;
  *((void *)a2 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = 0LL;
  *((void *)a2 + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  *(void *)a2  = 0LL;
  __int128 v11 = *a3;
  uint64_t v12 = *((void *)a3 + 2);
  *((void *)a3 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = 0LL;
  *((void *)a3 + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  *(void *)a3  = 0LL;
  otbr::Mdns::Publisher::SortAddressList((uint64_t)&v11, a1 + 72);
  std::string v13 = (void **)&v11;
  std::vector<otbr::Ip6Address>::__destroy_vector::operator()[abi:ne180100](&v13);
  return a1;
}

void sub_10036E198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  if (v4[71] < 0) {
    operator delete(*v5);
  }
  otbr::Mdns::Publisher::Registration::~Registration((otbr::Mdns::Publisher::Registration *)v4);
  _Unwind_Resume(a1);
}

uint64_t std::vector<otbr::Ip6Address>::vector(uint64_t a1, _BYTE **a2)
{
  *(void *)a1  = 0LL;
  *(void *)(a1 + 8)  = 0LL;
  *(void *)(a1 + 16)  = 0LL;
  std::vector<otbr::Ip6Address>::__init_with_size[abi:ne180100]<otbr::Ip6Address*,otbr::Ip6Address*>( (void **)a1,  *a2,  a2[1],  (a2[1] - *a2) >> 4);
  return a1;
}

void **std::vector<otbr::Ip6Address>::__init_with_size[abi:ne180100]<otbr::Ip6Address*,otbr::Ip6Address*>( void **result, _BYTE *a2, _BYTE *a3, unint64_t a4)
{
  if (a4)
  {
    size_t v6 = result;
    std::vector<otbr::Ip6Address>::__vallocate[abi:ne180100](result, a4);
    return std::vector<otbr::Ip6Address>::__construct_at_end<otbr::Ip6Address*,otbr::Ip6Address*>(v6, a2, a3);
  }

  return result;
}

void sub_10036E264( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<otbr::Ip6Address>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::allocator<otbr::Ip6Address>::allocate[abi:ne180100]((uint64_t)(a1 + 2), a2);
  *a1  = result;
  a1[1]  = result;
  a1[2]  = &result[16 * a2];
  return result;
}

void **std::vector<otbr::Ip6Address>::__construct_at_end<otbr::Ip6Address*,otbr::Ip6Address*>( void **result, _BYTE *a2, _BYTE *a3)
{
  uint64_t v3 = result;
  uint64_t v4 = (char *)result[1];
  int64_t v5 = a3 - a2;
  if (a3 == a2) {
    goto LABEL_5;
  }
  if (v5 < 0)
  {
    __break(0x550Cu);
  }

  else
  {
    size_t v6 = a3 - a2;
    if ((unint64_t)(v5 - 16) < 0xFFFFFFFFFFFFFFF0LL)
    {
      uint64_t result = (void **)memmove(result[1], a2, v6);
LABEL_5:
      v3[1]  = &v4[v5];
      return result;
    }
  }

  __break(0x5500u);
  return result;
}

void *std::allocator<otbr::Ip6Address>::allocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>( std::string *a1, const std::string *a2, const std::string *a3)
{
  int64_t v5 = std::string::basic_string(a1, a2);
  std::string::basic_string(v5 + 1, a3);
  return a1;
}

void sub_10036E364(_Unwind_Exception *exception_object)
{
}

otbr::Mdns::Publisher::DiscoveredInstanceInfo *otbr::Mdns::Publisher::DiscoveredInstanceInfo::DiscoveredInstanceInfo( otbr::Mdns::Publisher::DiscoveredInstanceInfo *this, const otbr::Mdns::Publisher::DiscoveredInstanceInfo *a2)
{
  uint64_t v4 = (const std::string *)((char *)a2 + 32);
  *(void *)this  = *(void *)a2;
  int64_t v5 = (std::string *)((char *)this + 32);
  std::string::basic_string((std::string *)((char *)this + 8), (const std::string *)((char *)a2 + 8));
  std::string::basic_string(v5, v4);
  std::vector<otbr::Ip6Address>::vector((uint64_t)this + 56, (_BYTE **)a2 + 7);
  int v6 = *((_DWORD *)a2 + 20);
  *((_WORD *)this + 4ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = *((_WORD *)a2 + 42);
  *((_DWORD *)this + ot::Mle::Tlv::SetType(this, 20) = v6;
  std::vector<unsigned char>::vector((void *)this + 11, (uint64_t)a2 + 88);
  *((_DWORD *)this + 28)  = *((_DWORD *)a2 + 28);
  return this;
}

void sub_10036E41C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t std::__function::__value_func<void ()(otbrError)>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48LL))(v1);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception  = __cxa_allocate_exception(8uLL);
  *exception  = off_100448230;
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
}

std::vector<std::string> *__cdecl std::vector<std::string>::vector( std::vector<std::string> *this, const std::vector<std::string> *__x)
{
  this->__begin_  = 0LL;
  this->__end_  = 0LL;
  this->__end_cap_.__value_  = 0LL;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>( (std::string *)this,  __x->__begin_,  __x->__end_,  0xAAAAAAAAAAAAAAABLL * (((char *)__x->__end_ - (char *)__x->__begin_) >> 3));
  return this;
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>( std::string *result, std::string *a2, std::string *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = (uint64_t)result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    return std::vector<std::string>::__construct_at_end<std::string*,std::string*>(v6, a2, a3);
  }

  return result;
}

void sub_10036E57C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<std::string>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::allocator<std::string>::allocate[abi:ne180100]((uint64_t)(a1 + 2), a2);
  *a1  = result;
  a1[1]  = result;
  a1[2]  = &result[24 * a2];
  return result;
}

std::string *std::vector<std::string>::__construct_at_end<std::string*,std::string*>( uint64_t a1, std::string *a2, std::string *a3)
{
  uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>( a1 + 16,  a2,  a3,  *(std::string **)(a1 + 8));
  *(void *)(a1 + 8)  = result;
  return result;
}

void sub_10036E614(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8)  = v2;
  _Unwind_Resume(a1);
}

void *std::allocator<std::string>::allocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>( uint64_t a1, std::string *__str, std::string *a3, std::string *this)
{
  uint64_t v4 = this;
  uint64_t v10 = this;
  __int128 v11 = this;
  v8[0]  = a1;
  v8[1]  = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (__str != a3)
  {
    uint64_t v6 = __str;
    do
    {
      std::string::basic_string(v4, v6++);
      uint64_t v4 = ++v11;
    }

    while (v6 != a3);
  }

  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_10036E6D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]( uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100]( uint64_t a1)
{
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 != a5)
  {
    uint64_t v6 = a3;
    do
    {
      v6 -= 24LL;
    }

    while (v6 != a5);
  }

std::string *std::vector<otbr::Mdns::Publisher::TxtEntry>::vector(std::string *a1, std::string **a2)
{
  a1->__r_.__value_.__r.__words[0]  = 0LL;
  a1->__r_.__value_.__l.__size_  = 0LL;
  a1->__r_.__value_.__l.__cap_  = 0LL;
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__init_with_size[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry*,otbr::Mdns::Publisher::TxtEntry*>( a1,  *a2,  a2[1],  0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 4));
  return a1;
}

std::string *std::vector<otbr::Mdns::Publisher::TxtEntry>::__init_with_size[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry*,otbr::Mdns::Publisher::TxtEntry*>( std::string *result, std::string *a2, std::string *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = (uint64_t)result;
    std::vector<otbr::Mdns::Publisher::TxtEntry>::__vallocate[abi:ne180100](result, a4);
    return std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_at_end<otbr::Mdns::Publisher::TxtEntry*,otbr::Mdns::Publisher::TxtEntry*>( v6,  a2,  a3);
  }

  return result;
}

void sub_10036E828( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<otbr::Mdns::Publisher::TxtEntry>::__vallocate[abi:ne180100]( void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556LL) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::allocator<otbr::Mdns::Publisher::TxtEntry>::allocate[abi:ne180100]((uint64_t)(a1 + 2), a2);
  *a1  = result;
  a1[1]  = result;
  a1[2]  = &result[48 * a2];
  return result;
}

std::string *std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_at_end<otbr::Mdns::Publisher::TxtEntry*,otbr::Mdns::Publisher::TxtEntry*>( uint64_t a1, std::string *a2, std::string *a3)
{
  uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<otbr::Mdns::Publisher::TxtEntry>,otbr::Mdns::Publisher::TxtEntry*,otbr::Mdns::Publisher::TxtEntry*,otbr::Mdns::Publisher::TxtEntry*>( a1 + 16,  a2,  a3,  *(std::string **)(a1 + 8));
  *(void *)(a1 + 8)  = result;
  return result;
}

void sub_10036E8C0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8)  = v2;
  _Unwind_Resume(a1);
}

void *std::allocator<otbr::Mdns::Publisher::TxtEntry>::allocate[abi:ne180100]( uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556LL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a2);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<otbr::Mdns::Publisher::TxtEntry>,otbr::Mdns::Publisher::TxtEntry*,otbr::Mdns::Publisher::TxtEntry*,otbr::Mdns::Publisher::TxtEntry*>( uint64_t a1, std::string *__str, std::string *a3, std::string *this)
{
  uint64_t v4 = this;
  __int128 v11 = this;
  uint64_t v12 = this;
  v9[0]  = a1;
  v9[1]  = &v11;
  uint64_t v9[2] = &v12;
  char v10 = 0;
  if (__str != a3)
  {
    uint64_t v6 = __str;
    int v7 = a1;
    do
    {
      std::allocator<otbr::Mdns::Publisher::TxtEntry>::construct[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry,otbr::Mdns::Publisher::TxtEntry&>( v7,  v4,  v6);
      v6 += 2;
      uint64_t v4 = v12 + 2;
      v12 += 2;
    }

    while (v6 != a3);
  }

  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<otbr::Mdns::Publisher::TxtEntry>,otbr::Mdns::Publisher::TxtEntry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_10036E988( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::allocator<otbr::Mdns::Publisher::TxtEntry>::construct[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry,otbr::Mdns::Publisher::TxtEntry&>( int a1, std::string *this, std::string *__str)
{
  return std::vector<unsigned char>::vector(this[1].__r_.__value_.__r.__words, (uint64_t)&__str[1]);
}

void sub_10036E9D4(_Unwind_Exception *exception_object)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<otbr::Mdns::Publisher::TxtEntry>,otbr::Mdns::Publisher::TxtEntry*>>::~__exception_guard_exceptions[abi:ne180100]( uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<otbr::Mdns::Publisher::TxtEntry>,otbr::Mdns::Publisher::TxtEntry*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<otbr::Mdns::Publisher::TxtEntry>,otbr::Mdns::Publisher::TxtEntry*>::operator()[abi:ne180100]( uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 48LL;
      std::allocator<otbr::Mdns::Publisher::TxtEntry>::destroy[abi:ne180100](v5, v3);
    }

    while (v3 != v4);
  }

uint64_t std::__tree<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::__map_value_compare<_DNSRecordRef_t *,std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::less<_DNSRecordRef_t *>,true>,std::allocator<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>>>::~__tree( uint64_t a1)
{
  return a1;
}

uint64_t std::__function::__value_func<void ()(otbr::Mdns::Publisher::State)>::__value_func[abi:ne180100]( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  void *v3 = 0LL;
  return a1;
}

{
  uint64_t v3;
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24LL))(*(void *)(a2 + 24), a1);
    }

    else
    {
      *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16LL))(v3);
    }
  }

  else
  {
    *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0LL;
  }

  return a1;
}

uint64_t std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::~__tree( uint64_t a1)
{
  return a1;
}

void std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::destroy( uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::destroy( a1,  *a2);
    std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::destroy( a1,  a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,0>( uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
}

void std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>::__destroy_vector::operator()[abi:ne180100]( void ***a1)
{
  uint64_t v2 = (uint64_t **)*a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>::__base_destruct_at_end[abi:ne180100]( (uint64_t)v2,  *v2);
    uint64_t v3 = **a1;
    if ((_BYTE *)(*a1)[2] - (_BYTE *)v3 < 0) {
      __break(0x550Cu);
    }
    else {
      operator delete(v3);
    }
  }

void std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>::__base_destruct_at_end[abi:ne180100]( uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = a1 + 16;
  while (v4 != a2)
    std::allocator_traits<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>>::destroy[abi:ne180100]<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>,void>( v5,  --v4);
  *(void *)(a1 + 8)  = a2;
}

void std::allocator_traits<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>>::destroy[abi:ne180100]<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>,void>( uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2  = 0LL;
  if (v3) {
    std::default_delete<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>::operator()[abi:ne180100]((uint64_t)a2, v3);
  }
}

void std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>::__destroy_vector::operator()[abi:ne180100]( void ***a1)
{
  uint64_t v2 = (uint64_t **)*a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>::__base_destruct_at_end[abi:ne180100]( (uint64_t)v2,  *v2);
    uint64_t v3 = **a1;
    if ((_BYTE *)(*a1)[2] - (_BYTE *)v3 < 0) {
      __break(0x550Cu);
    }
    else {
      operator delete(v3);
    }
  }

void std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>::__base_destruct_at_end[abi:ne180100]( uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = a1 + 16;
  while (v4 != a2)
    std::allocator_traits<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>>::destroy[abi:ne180100]<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>,void>( v5,  --v4);
  *(void *)(a1 + 8)  = a2;
}

void std::allocator_traits<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>>::destroy[abi:ne180100]<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>,void>( uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2  = 0LL;
  if (v3) {
    std::default_delete<otbr::Mdns::PublisherMDnsSd::HostSubscription>::operator()[abi:ne180100]((uint64_t)a2, v3);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::swap( uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = *(void *)a2;
  *(void *)a2  = v2;
  uint64_t v5 = result[1];
  uint64_t v4 = result[2];
  uint64_t v3 = result + 1;
  *(_OWORD *)(result + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8)  = v5;
  *(void *)(a2 + 16)  = v4;
  if (result[2]) {
    uint64_t result = (uint64_t *)(*v3 + 16LL);
  }
  *uint64_t result = (uint64_t)v3;
  uint64_t v6 = (void *)(*(void *)(a2 + 8) + 16LL);
  if (!v4) {
    uint64_t v6 = (void *)a2;
  }
  void *v6 = a2 + 8;
  return result;
}

uint64_t std::vector<_DNSServiceRef_t *>::__construct_one_at_end[abi:ne180100]<_DNSServiceRef_t * const&>( uint64_t result, void *a2)
{
  uint64_t v2 = *(void **)(result + 8);
  void *v2 = *a2;
  *(void *)(result + 8)  = v2 + 1;
  return result;
}

uint64_t std::vector<_DNSServiceRef_t *>::__push_back_slow_path<_DNSServiceRef_t * const&>( uint64_t *a1, void *a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 3;
  unint64_t v3 = v2 + 1;
  if (v2 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }

  if (v3 >> 61) {
    goto LABEL_10;
  }
  unint64_t v6 = a1[2] - *a1;
  if (v6 >> 2 > v3) {
    unint64_t v3 = v6 >> 2;
  }
  if (v6 >= 0x7FFFFFFFFFFFFFF8LL) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  std::__split_buffer<_DNSServiceRef_t *>::__split_buffer(v10, v7, v2, (uint64_t)(a1 + 2));
  *v11++  = *a2;
  std::vector<_DNSServiceRef_t *>::__swap_out_circular_buffer(a1, v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<_DNSServiceRef_t *>::~__split_buffer(v10);
  return v8;
}

void sub_10036EE54(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *std::vector<_DNSServiceRef_t *>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  while (v3 != v2)
  {
    uint64_t v5 = *(void *)(v3 - 8);
    v3 -= 8LL;
    *(void *)(v4 - 8)  = v5;
    v4 -= 8LL;
  }

  a2[1]  = v4;
  uint64_t v6 = *result;
  *uint64_t result = v4;
  a2[1]  = v6;
  uint64_t v7 = result[1];
  result[1]  = a2[2];
  a2[2]  = v7;
  uint64_t v8 = result[2];
  result[2]  = a2[3];
  a2[3]  = v8;
  *a2  = a2[1];
  return result;
}

void *std::__split_buffer<_DNSServiceRef_t *>::__split_buffer( void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[3]  = 0LL;
  a1[4]  = a4;
  if (a2) {
    uint64_t v7 = (char *)std::allocator<_DNSServiceRef_t *>::allocate[abi:ne180100](a4, a2);
  }
  else {
    uint64_t v7 = 0LL;
  }
  uint64_t v8 = &v7[8 * a3];
  *a1  = v7;
  a1[1]  = v8;
  a1[2]  = v8;
  a1[3]  = &v7[8 * a2];
  return a1;
}

void *std::allocator<_DNSServiceRef_t *>::allocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

void *std::__split_buffer<_DNSServiceRef_t *>::~__split_buffer(void *a1)
{
  uint64_t result = (void *)*a1;
  if (!*a1) {
    return a1;
  }
  if ((uint64_t)(a1[3] - (void)result) >= 0)
  {
    operator delete(result);
    return a1;
  }

  __break(0x550Cu);
  return result;
}

uint64_t std::__split_buffer<_DNSServiceRef_t *>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2) {
    *(void *)(result + 16)  = v2 + ((a2 - v2 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  }
  return result;
}

uint64_t std::__tree<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::__map_value_compare<_DNSRecordRef_t *,std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::less<_DNSRecordRef_t *>,true>,std::allocator<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>>>::__count_unique<_DNSRecordRef_t *>( uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    unint64_t v3 = *a2;
    uint64_t result = 1LL;
    do
    {
      unint64_t v5 = v2[4];
      if (v3 >= v5)
      {
        if (v5 >= v3) {
          return result;
        }
        ++v2;
      }

      uint64_t v2 = (void *)*v2;
    }

    while (v2);
  }

  return 0LL;
}

void *std::function<void ()(otbrError)>::operator=(void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(otbrError)>::operator=[abi:ne180100](a1, a2);
  return a1;
}

void *std::__function::__value_func<void ()(otbrError)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)a1[3];
  a1[3]  = 0LL;
  if (v4 == a1)
  {
    uint64_t v5 = 4LL;
    uint64_t v4 = a1;
  }

  else
  {
    if (!v4) {
      goto LABEL_6;
    }
    uint64_t v5 = 5LL;
  }

  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  uint64_t v6 = *(void *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      a1[3]  = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24LL))(*(void *)(a2 + 24), a1);
    }

    else
    {
      a1[3]  = v6;
      *(void *)(a2 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0LL;
    }
  }

  else
  {
    a1[3]  = 0LL;
  }

  return a1;
}

uint64_t *std::__tree<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::__map_value_compare<_DNSRecordRef_t *,std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::less<_DNSRecordRef_t *>,true>,std::allocator<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>>>::__emplace_unique_key_args<_DNSRecordRef_t *,std::piecewise_construct_t const&,std::tuple<_DNSRecordRef_t * const&>,std::tuple<>>( uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = (uint64_t **)std::__tree<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::__map_value_compare<_DNSRecordRef_t *,std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::less<_DNSRecordRef_t *>,true>,std::allocator<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>>>::__find_equal<_DNSRecordRef_t *>( (uint64_t)a1,  &v12,  a2);
  uint64_t v8 = *v7;
  if (!*v7)
  {
    char v9 = v7;
    std::__tree<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::__map_value_compare<_DNSRecordRef_t *,std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::less<_DNSRecordRef_t *>,true>,std::allocator<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<_DNSRecordRef_t * const&>,std::tuple<>>( (uint64_t)a1,  a3,  a4,  (uint64_t)v11);
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__insert_node_at( a1,  v12,  v9,  (uint64_t *)v11[0]);
    uint64_t v8 = (uint64_t *)v11[0];
    v11[0]  = 0LL;
    std::unique_ptr<std::__tree_node<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,void *>>>>::reset[abi:ne180100]( v11,  0LL);
  }

  return v8;
}

void *std::__tree<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::__map_value_compare<_DNSRecordRef_t *,std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::less<_DNSRecordRef_t *>,true>,std::allocator<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>>>::__find_equal<_DNSRecordRef_t *>( uint64_t a1, void *a2, unint64_t *a3)
{
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t result = (void *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    unint64_t v6 = *a3;
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        unint64_t v8 = v4[4];
        if (v6 >= v8) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        uint64_t result = v7;
        if (!*v7) {
          goto LABEL_10;
        }
      }

      if (v8 >= v6) {
        break;
      }
      uint64_t result = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }

    while (v4);
  }

  else
  {
    uint64_t v7 = result;
  }

void std::__tree<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::__map_value_compare<_DNSRecordRef_t *,std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::less<_DNSRecordRef_t *>,true>,std::allocator<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<_DNSRecordRef_t * const&>,std::tuple<>>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  unint64_t v8 = operator new(0x38uLL);
  *(void *)a4  = v8;
  *(void *)(a4 + 8)  = v7;
  *(_BYTE *)(a4 + 16)  = 0;
  std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,void *>>>::construct[abi:ne180100]<std::pair<_DNSRecordRef_t * const,otbr::Ip6Address>,std::piecewise_construct_t const&,std::tuple<_DNSRecordRef_t * const&>,std::tuple<>,void>( v7,  v8 + 4,  a2,  a3);
  *(_BYTE *)(a4 + 16)  = 1;
}

void sub_10036F1F4(_Unwind_Exception *a1)
{
}

void std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,void *>>>::construct[abi:ne180100]<std::pair<_DNSRecordRef_t * const,otbr::Ip6Address>,std::piecewise_construct_t const&,std::tuple<_DNSRecordRef_t * const&>,std::tuple<>,void>( uint64_t a1, void *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v4 = **a4;
  a2[1]  = 0LL;
  a2[2]  = 0LL;
  *a2  = v4;
}

void std::unique_ptr<std::__tree_node<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,void *>>>>::reset[abi:ne180100]( void **a1, void *a2)
{
  unint64_t v3 = *a1;
  *a1  = a2;
  if (v3) {
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,void *>>>::operator()[abi:ne180100]( (_DWORD)a1 + 8,  v3);
  }
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,void *>>>::operator()[abi:ne180100]( int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void std::__sort_dispatch[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void>>( unint64_t a1, const void **a2, uint64_t a3)
{
  unint64_t v3 = (2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - a1) >> 3))) ^ 0x7E;
  else {
    uint64_t v4 = v3;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(a1, a2, a3, v4, 1);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>( unint64_t a1, const void **a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    uint64_t v10 = a1;
    uint64_t v27 = (const void **)(a1 + 24);
    __int128 v11 = (const void **)(a1 + 48);
    uint64_t v12 = (const void **)(a1 - 24);
LABEL_2:
    uint64_t v13 = (uint64_t)a2 - v10;
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v10) >> 3);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        uint64_t v25 = a2 - 3;
        if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, v25, (const void **)v10))
        {
          uint64_t v31 = *(const void **)(v10 + 16);
          __int128 v29 = *(_OWORD *)v10;
          __int128 v26 = *(_OWORD *)v25;
          *(void *)(v10 + 16)  = v25[2];
          *(_OWORD *)uint64_t v10 = v26;
          v25[2]  = v31;
          *(_OWORD *)uint64_t v25 = v29;
        }

        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>( (const void **)v10,  (const void **)(v10 + 24),  a2 - 3,  a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>( v10,  (const void **)(v10 + 24),  (const void **)(v10 + 48),  (__int128 *)(a2 - 3),  a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>( v10,  (const void **)(v10 + 24),  (const void **)(v10 + 48),  (__int128 *)(v10 + 72),  (__int128 *)(a2 - 3),  a3);
        return;
      default:
        if (v13 <= 575)
        {
          if ((a5 & 1) != 0) {
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>( v10,  a2,  a3);
          }
          else {
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>( v10,  a2,  a3);
          }
          return;
        }

        if (!a4)
        {
          if ((const void **)v10 != a2) {
            std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,std::string *>( v10,  (uint64_t)a2,  (uint64_t)a2,  a3);
          }
          return;
        }

        if (__OFSUB__(a4--, 1LL))
        {
          __break(0x5515u);
          return;
        }

        unint64_t v16 = v14 >> 1;
        __int128 v17 = a2 - 3;
        unint64_t v18 = v10 + 24 * (v14 >> 1);
        if ((unint64_t)v13 < 0xC01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>( (const void **)(v10 + 24 * v16),  (const void **)v10,  v17,  a3);
          if ((a5 & 1) != 0) {
            goto LABEL_11;
          }
        }

        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>( (const void **)v10,  (const void **)(v10 + 24 * v16),  v17,  a3);
          std::string v19 = (const void **)(v10 + 24 * v16);
          __int128 v20 = v19 - 3;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>( v27,  v19 - 3,  a2 - 6,  a3);
          v19 += 3;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>( v11,  v19,  a2 - 9,  a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>( v20,  (const void **)v18,  v19,  a3);
          uint64_t v30 = *(void *)(v10 + 16);
          __int128 v28 = *(_OWORD *)v10;
          __int128 v21 = *(_OWORD *)v18;
          *(void *)(v10 + 16)  = *(void *)(v18 + 16);
          *(_OWORD *)uint64_t v10 = v21;
          *(void *)(v18 + 16)  = v30;
          *(_OWORD *)unint64_t v18 = v28;
          if ((a5 & 1) != 0) {
            goto LABEL_11;
          }
        }

        if (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, v12, (const void **)v10))
        {
          a1  = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>( v10,  (unint64_t)a2,  a3);
          a5  = 0;
          continue;
        }

BOOL std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>( uint64_t a1, const void **a2, const void **a3)
{
  int v3 = *((char *)a3 + 23);
  BOOL v4 = v3 < 0;
  if (v3 >= 0) {
    uint64_t v5 = a3;
  }
  else {
    uint64_t v5 = *a3;
  }
  if (v4) {
    size_t v6 = (size_t)a3[1];
  }
  else {
    size_t v6 = *((unsigned __int8 *)a3 + 23);
  }
  int v7 = *((char *)a2 + 23);
  if (v7 >= 0) {
    size_t v8 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v8 = (size_t)a2[1];
  }
  if (v7 >= 0) {
    char v9 = a2;
  }
  else {
    char v9 = *a2;
  }
  if (v6 >= v8) {
    size_t v10 = v8;
  }
  else {
    size_t v10 = v6;
  }
  int v11 = memcmp(v9, v5, v10);
  if (v11) {
    return v11 < 0;
  }
  else {
    return v8 < v6;
  }
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>( uint64_t a1, const void **a2, uint64_t a3)
{
  if ((const void **)a1 != a2)
  {
    uint64_t v16 = v3;
    uint64_t v17 = v4;
    int v7 = (const void **)(a1 + 24);
    if ((const void **)(a1 + 24) != a2)
    {
      uint64_t v9 = 0LL;
      size_t v10 = (const void **)a1;
      do
      {
        int v11 = v10;
        size_t v10 = v7;
        if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, v7, v11))
        {
          *(_OWORD *)__p  = *(_OWORD *)v10;
          uint64_t v15 = v10[2];
          v10[1]  = 0LL;
          void v10[2] = 0LL;
          std::string *v10 = 0LL;
          uint64_t v12 = v9;
          while (1)
          {
            std::string::operator=[abi:ne180100](a1 + v12 + 24, (__int128 *)(a1 + v12));
            if (!v12) {
              break;
            }
            v12 -= 24LL;
            if (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>( a3,  (const void **)__p,  (const void **)(v12 + a1)))
            {
              uint64_t v13 = a1 + v12 + 24;
              goto LABEL_10;
            }
          }

          uint64_t v13 = a1;
LABEL_10:
          std::string::operator=[abi:ne180100](v13, (__int128 *)__p);
          if (SHIBYTE(v15) < 0) {
            operator delete(__p[0]);
          }
        }

        int v7 = v10 + 3;
        v9 += 24LL;
      }

      while (v10 + 3 != a2);
    }
  }

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>( uint64_t a1, const void **a2, uint64_t a3)
{
  if ((const void **)a1 != a2)
  {
    uint64_t v12 = v3;
    uint64_t v13 = v4;
    size_t v6 = (__int128 *)a1;
    int v7 = (const void **)(a1 + 24);
    if ((const void **)(a1 + 24) != a2)
    {
      do
      {
        uint64_t v9 = v7;
        if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, v7, (const void **)v6))
        {
          *(_OWORD *)__p  = *(_OWORD *)v9;
          int v11 = v9[2];
          v9[1]  = 0LL;
          uint64_t v9[2] = 0LL;
          const void *v9 = 0LL;
          do
          {
            std::string::operator=[abi:ne180100]((uint64_t)v6 + 24, v6);
            size_t v6 = (__int128 *)((char *)v6 - 24);
          }

          while (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>( a3,  (const void **)__p,  (const void **)v6));
          std::string::operator=[abi:ne180100]((uint64_t)v6 + 24, (__int128 *)__p);
          if (SHIBYTE(v11) < 0) {
            operator delete(__p[0]);
          }
        }

        int v7 = v9 + 3;
        size_t v6 = (__int128 *)v9;
      }

      while (v9 + 3 != a2);
    }
  }

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>( const void **a1, const void **a2, const void **a3, uint64_t a4)
{
  BOOL v8 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a4, a2, a1);
  uint64_t result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a4, a3, a2);
  if (!v8)
  {
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t v13 = a2[2];
    __int128 v14 = *(_OWORD *)a2;
    uint64_t v15 = a3[2];
    *(_OWORD *)a2  = *(_OWORD *)a3;
    a2[2]  = v15;
    *(_OWORD *)a3  = v14;
    a3[2]  = v13;
    uint64_t v16 = a1[2];
    __int128 v17 = *(_OWORD *)a1;
    unint64_t v18 = a2[2];
    *(_OWORD *)a1  = *(_OWORD *)a2;
    a1[2]  = v18;
    *(_OWORD *)a2  = v17;
    a2[2]  = v16;
    return 2LL;
  }

  if (!(_DWORD)result)
  {
    std::string v19 = a1[2];
    __int128 v20 = *(_OWORD *)a1;
    __int128 v21 = a2[2];
    *(_OWORD *)a1  = *(_OWORD *)a2;
    a1[2]  = v21;
    *(_OWORD *)a2  = v20;
    a2[2]  = v19;
    __int128 v22 = a2[2];
    __int128 v23 = *(_OWORD *)a2;
    char v24 = a3[2];
    *(_OWORD *)a2  = *(_OWORD *)a3;
    a2[2]  = v24;
    *(_OWORD *)a3  = v23;
    a3[2]  = v22;
    return 2LL;
  }

  size_t v10 = a1[2];
  __int128 v11 = *(_OWORD *)a1;
  uint64_t v12 = a3[2];
  *(_OWORD *)a1  = *(_OWORD *)a3;
  a1[2]  = v12;
  *(_OWORD *)a3  = v11;
  a3[2]  = v10;
  return 1LL;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>( uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = a2;
  *(_OWORD *)__p  = *(_OWORD *)a1;
  uint64_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 8)  = 0LL;
  *(void *)(a1 + 16)  = 0LL;
  *(void *)a1  = 0LL;
  if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>( a3,  (const void **)__p,  (const void **)(a2 - 24)))
  {
    unint64_t v6 = a1;
    do
      v6 += 24LL;
    while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>( a3,  (const void **)__p,  (const void **)v6));
  }

  else
  {
    int v7 = (const void **)(a1 + 24);
    do
    {
      unint64_t v6 = (unint64_t)v7;
      BOOL v8 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, (const void **)__p, v7);
      int v7 = (const void **)(v6 + 24);
    }

    while (!v8);
  }

  if (v6 < v4)
  {
    do
      v4 -= 24LL;
    while (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>( a3,  (const void **)__p,  (const void **)v4));
  }

  while (v6 < v4)
  {
    __int128 v9 = *(_OWORD *)v6;
    uint64_t v16 = *(void *)(v6 + 16);
    __int128 v15 = v9;
    __int128 v10 = *(_OWORD *)v4;
    *(void *)(v6 + 16)  = *(void *)(v4 + 16);
    *(_OWORD *)unint64_t v6 = v10;
    __int128 v11 = v15;
    *(void *)(v4 + 16)  = v16;
    *(_OWORD *)unint64_t v4 = v11;
    do
      v6 += 24LL;
    while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>( a3,  (const void **)__p,  (const void **)v6));
    do
      v4 -= 24LL;
    while (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>( a3,  (const void **)__p,  (const void **)v4));
  }

  if (v6 - 24 != a1) {
    std::string::operator=[abi:ne180100](a1, (__int128 *)(v6 - 24));
  }
  std::string::operator=[abi:ne180100](v6 - 24, (__int128 *)__p);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  return v6;
}

__int128 *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>( uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v6 = 0LL;
  *(_OWORD *)__p  = *(_OWORD *)a1;
  uint64_t v16 = *(void *)(a1 + 16);
  *(void *)(a1 + 8)  = 0LL;
  *(void *)(a1 + 16)  = 0LL;
  *(void *)a1  = 0LL;
  do
    v6 += 24LL;
  while (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>( a3,  (const void **)(v6 + a1),  (const void **)__p));
  unint64_t v7 = a1 + v6;
  BOOL v8 = (__int128 *)(a1 + v6 - 24);
  if (v6 == 24)
  {
    do
    {
      a2 -= 3;
    }

    while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, a2, (const void **)__p));
  }

  else
  {
    do
      a2 -= 3;
    while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, a2, (const void **)__p));
  }

  if (v7 < (unint64_t)a2)
  {
    __int128 v9 = a2;
    unint64_t v10 = v7;
    do
    {
      __int128 v17 = *(_OWORD *)v10;
      __int128 v11 = v17;
      unint64_t v18 = *(const void **)(v10 + 16);
      uint64_t v12 = v18;
      uint64_t v13 = v9[2];
      *(_OWORD *)unint64_t v10 = *(_OWORD *)v9;
      *(void *)(v10 + 16)  = v13;
      uint64_t v9[2] = v12;
      *(_OWORD *)__int128 v9 = v11;
      do
        v10 += 24LL;
      while (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>( a3,  (const void **)v10,  (const void **)__p));
      do
        v9 -= 3;
      while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, v9, (const void **)__p));
    }

    while (v10 < (unint64_t)v9);
    BOOL v8 = (__int128 *)(v10 - 24);
  }

  std::string::operator=[abi:ne180100]((uint64_t)v8, (__int128 *)__p);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  return v8;
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = 1;
  switch(0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v6 & 1;
    case 2uLL:
      uint64_t v7 = a2 - 24;
      if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>( a3,  (const void **)(a2 - 24),  (const void **)a1))
      {
        uint64_t v8 = *(void *)(a1 + 16);
        __int128 v9 = *(_OWORD *)a1;
        uint64_t v10 = *(void *)(v7 + 16);
        *(_OWORD *)a1  = *(_OWORD *)v7;
        *(void *)(a1 + 16)  = v10;
        *(_OWORD *)uint64_t v7 = v9;
        *(void *)(v7 + 16)  = v8;
      }

      return v6 & 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>( (const void **)a1,  (const void **)(a1 + 24),  (const void **)(a2 - 24),  a3);
      return v6 & 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>( a1,  (const void **)(a1 + 24),  (const void **)(a1 + 48),  (__int128 *)(a2 - 24),  a3);
      return v6 & 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>( a1,  (const void **)(a1 + 24),  (const void **)(a1 + 48),  (__int128 *)(a1 + 72),  (__int128 *)(a2 - 24),  a3);
      return v6 & 1;
    default:
      __int128 v11 = (const void **)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>( (const void **)a1,  (const void **)(a1 + 24),  (const void **)(a1 + 48),  a3);
      uint64_t v12 = a1 + 72;
      if (a1 + 72 == a2) {
        goto LABEL_19;
      }
      int v13 = 0;
      break;
  }

  while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, (const void **)v12, v11))
  {
LABEL_18:
    __int128 v11 = (const void **)v12;
    v12 += 24LL;
    if (v12 == a2)
    {
LABEL_19:
      char v6 = 1;
      return v6 & 1;
    }
  }

  *(_OWORD *)__p  = *(_OWORD *)v12;
  uint64_t v21 = *(void *)(v12 + 16);
  *(void *)(v12 + 8)  = 0LL;
  *(void *)(v12 + 16)  = 0LL;
  *(void *)uint64_t v12 = 0LL;
  uint64_t v14 = (const void **)v12;
  while (1)
  {
    uint64_t v15 = (uint64_t)v14;
    uint64_t v14 = v11;
    std::string::operator=[abi:ne180100](v15, (__int128 *)v11);
    v11 -= 3;
    if (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, (const void **)__p, v14 - 3))
    {
      uint64_t v16 = (uint64_t)v14;
      goto LABEL_12;
    }
  }

  uint64_t v16 = a1;
LABEL_12:
  uint64_t result = std::string::operator=[abi:ne180100](v16, (__int128 *)__p);
  if (!__CFADD__(v13++, 1))
  {
    BOOL v19 = v12 + 24 == a2;
    if (v13 == 8)
    {
      v12 += 24LL;
      char v6 = v19;
    }

    if (SHIBYTE(v21) < 0) {
      operator delete(__p[0]);
    }
    if (v13 == 8) {
      return v6 & 1;
    }
    goto LABEL_18;
  }

  __break(0x5500u);
  return result;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>( uint64_t a1, const void **a2, const void **a3, __int128 *a4, uint64_t a5)
{
  if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a5, (const void **)a4, a3))
  {
    __int128 v11 = a3[2];
    __int128 v12 = *(_OWORD *)a3;
    int v13 = (const void *)*((void *)a4 + 2);
    *(_OWORD *)a3  = *a4;
    a3[2]  = v13;
    *a4  = v12;
    *((void *)a4 + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = v11;
    if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a5, a3, a2))
    {
      uint64_t v14 = a2[2];
      __int128 v15 = *(_OWORD *)a2;
      uint64_t v16 = a3[2];
      *(_OWORD *)a2  = *(_OWORD *)a3;
      a2[2]  = v16;
      *(_OWORD *)a3  = v15;
      a3[2]  = v14;
      if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a5, a2, (const void **)a1))
      {
        __int128 v17 = *(const void **)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        unint64_t v18 = a2[2];
        *(_OWORD *)a1  = *(_OWORD *)a2;
        *(void *)(a1 + 16)  = v18;
        *(__n128 *)a2  = result;
        a2[2]  = v17;
      }
    }
  }

  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>( uint64_t a1, const void **a2, const void **a3, __int128 *a4, __int128 *a5, uint64_t a6)
{
  if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>( a6,  (const void **)a5,  (const void **)a4))
  {
    uint64_t v13 = *((void *)a4 + 2);
    __int128 v14 = *a4;
    uint64_t v15 = *((void *)a5 + 2);
    *a4  = *a5;
    *((void *)a4 + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = v15;
    *a5  = v14;
    *((void *)a5 + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = v13;
    if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a6, (const void **)a4, a3))
    {
      uint64_t v16 = a3[2];
      __int128 v17 = *(_OWORD *)a3;
      unint64_t v18 = (const void *)*((void *)a4 + 2);
      *(_OWORD *)a3  = *a4;
      a3[2]  = v18;
      *a4  = v17;
      *((void *)a4 + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = v16;
      if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a6, a3, a2))
      {
        BOOL v19 = a2[2];
        __int128 v20 = *(_OWORD *)a2;
        uint64_t v21 = a3[2];
        *(_OWORD *)a2  = *(_OWORD *)a3;
        a2[2]  = v21;
        *(_OWORD *)a3  = v20;
        a3[2]  = v19;
        if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a6, a2, (const void **)a1))
        {
          __int128 v22 = *(const void **)(a1 + 16);
          __n128 result = *(__n128 *)a1;
          __int128 v23 = a2[2];
          *(_OWORD *)a1  = *(_OWORD *)a2;
          *(void *)(a1 + 16)  = v23;
          *(__n128 *)a2  = result;
          a2[2]  = v22;
        }
      }
    }
  }

  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,std::string *>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) / 24;
    if (a2 - a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = a1 + 24 * v10;
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a4, v9, v12);
        v12 -= 24LL;
        --v11;
      }

      while (v11);
    }

    uint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>( a4,  (const void **)v14,  (const void **)a1))
        {
          uint64_t v15 = *(void *)(v14 + 16);
          __int128 v16 = *(_OWORD *)v14;
          uint64_t v17 = *(void *)(a1 + 16);
          *(_OWORD *)uint64_t v14 = *(_OWORD *)a1;
          *(void *)(v14 + 16)  = v17;
          *(_OWORD *)a1  = v16;
          *(void *)(a1 + 16)  = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a4, v9, a1);
        }

        v14 += 24LL;
      }

      while (v14 != a3);
      uint64_t v13 = a3;
    }

    if (v8 >= 25)
    {
      unint64_t v18 = v8 / 0x18uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::string *>(a1, v6, a4, v18);
        v6 -= 24LL;
      }

      while (v18-- > 2);
    }

    return v13;
  }

  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a4 - a1) >> 3)))
    {
      uint64_t v10 = (0x5555555555555556LL * ((a4 - a1) >> 3)) | 1;
      uint64_t v11 = a1 + 24 * v10;
      uint64_t v12 = 0x5555555555555556LL * ((a4 - a1) >> 3) + 2;
      if (v12 < a3
        && std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>( a2,  (const void **)(a1 + 24 * v10),  (const void **)(v11 + 24)))
      {
        uint64_t v10 = v12;
        v11 += 24LL;
      }

      if (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>( a2,  (const void **)v11,  (const void **)v5))
      {
        *(_OWORD *)__p  = *(_OWORD *)v5;
        uint64_t v16 = *(void *)(v5 + 16);
        *(void *)(v5 + 8)  = 0LL;
        *(void *)(v5 + 16)  = 0LL;
        *(void *)uint64_t v5 = 0LL;
        do
        {
          uint64_t v13 = v11;
          std::string::operator=[abi:ne180100](v5, (__int128 *)v11);
          if (v7 < v10) {
            break;
          }
          if (v10 + 0x4000000000000000LL < 0)
          {
            __break(0x550Cu);
LABEL_19:
            __break(0x5500u);
            return;
          }

          uint64_t v10 = (2 * v10) | 1;
          if (__OFADD__(v10, 1LL)) {
            goto LABEL_19;
          }
          uint64_t v11 = a1 + 24 * v10;
          if (v10 + 1 < a3)
          {
            BOOL v14 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>( a2,  (const void **)(a1 + 24 * v10),  (const void **)(v11 + 24));
            v11 += 24LL * v14;
            if (v14) {
              ++v10;
            }
          }

          uint64_t v5 = v13;
        }

        while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>( a2,  (const void **)v11,  (const void **)__p));
        std::string::operator=[abi:ne180100](v13, (__int128 *)__p);
        if (SHIBYTE(v16) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::string *>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    *(_OWORD *)__p  = *(_OWORD *)a1;
    uint64_t v11 = *(void *)(a1 + 16);
    *(void *)(a1 + 8)  = 0LL;
    *(void *)(a1 + 16)  = 0LL;
    *(void *)a1  = 0LL;
    uint64_t v7 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a3, a4);
    uint64_t v8 = v7;
    uint64_t v9 = (__int128 *)(a2 - 24);
    if ((__int128 *)v7 == v9)
    {
      std::string::operator=[abi:ne180100](v7, (__int128 *)__p);
    }

    else
    {
      std::string::operator=[abi:ne180100](v7, v9);
      std::string::operator=[abi:ne180100]((uint64_t)v9, (__int128 *)__p);
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>( a1,  v8 + 24,  a3,  0xAAAAAAAAAAAAAAABLL * ((v8 + 24 - a1) >> 3));
    }

    if (SHIBYTE(v11) < 0) {
      operator delete(__p[0]);
    }
  }

void sub_1003703F4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>( uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  uint64_t v5 = 0LL;
  uint64_t v6 = a3 - 2;
  BOOL v7 = __OFSUB__(a3, 2LL);
  if (v6 < 0) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v8 = v6 >> 1;
  while (v5 + 0x4000000000000000LL >= 0)
  {
    uint64_t v9 = (2 * v5) | 1;
    if (__OFADD__(v9, 1LL)) {
      goto LABEL_18;
    }
    uint64_t v10 = v4 + 24 * v5;
    uint64_t v11 = (__int128 *)(v10 + 24);
    if (v9 + 1 >= a3)
    {
      uint64_t v5 = (2 * v5) | 1;
    }

    else
    {
      BOOL v12 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>( a2,  (const void **)(v10 + 24),  (const void **)(v10 + 48));
      uint64_t v11 = (__int128 *)((char *)v11 + 24 * v12);
      if (v12) {
        uint64_t v5 = v9 + 1;
      }
      else {
        uint64_t v5 = (2 * v5) | 1;
      }
    }

    __n128 result = std::string::operator=[abi:ne180100](v4, v11);
    if (v7) {
      goto LABEL_19;
    }
    uint64_t v4 = (uint64_t)v11;
    if (v5 > v8) {
      return (uint64_t)v11;
    }
  }

  __break(0x550Cu);
LABEL_18:
  __break(0x5500u);
LABEL_19:
  __break(0x5515u);
  return result;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v14 = v4;
    uint64_t v15 = v5;
    unint64_t v8 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v9 = (__int128 *)(a1 + 24 * v8);
    uint64_t v10 = a2 - 24;
    if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>( a3,  (const void **)v9,  (const void **)(a2 - 24)))
    {
      *(_OWORD *)__p  = *(_OWORD *)v10;
      uint64_t v13 = *(void *)(v10 + 16);
      *(void *)(v10 + 8)  = 0LL;
      *(void *)(v10 + 16)  = 0LL;
      *(void *)uint64_t v10 = 0LL;
      do
      {
        uint64_t v11 = (uint64_t)v9;
        std::string::operator=[abi:ne180100](v10, v9);
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = (__int128 *)(a1 + 24 * v8);
        uint64_t v10 = v11;
      }

      while (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>( a3,  (const void **)v9,  (const void **)__p));
      std::string::operator=[abi:ne180100](v11, (__int128 *)__p);
      if (SHIBYTE(v13) < 0) {
        operator delete(__p[0]);
      }
    }
  }

__n128 otbr::Mdns::PublisherMDnsSd::ServiceSubscription::ServiceSubscription( uint64_t a1, uint64_t a2, __int128 *a3, __n128 *a4)
{
  *(void *)a1  = 0LL;
  *(void *)(a1 + 8)  = a2;
  __int128 v4 = *a3;
  *(void *)(a1 + 3ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 16)  = v4;
  *((void *)a3 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = 0LL;
  *((void *)a3 + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  *(void *)a3  = 0LL;
  __n128 result = *a4;
  *(void *)(a1 + 56)  = a4[1].n128_u64[0];
  *(__n128 *)(a1 + 4ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = result;
  a4->n128_u64[1]  = 0LL;
  a4[1].n128_u64[0]  = 0LL;
  a4->n128_u64[0]  = 0LL;
  *(void *)(a1 + 6ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0LL;
  *(void *)(a1 + 7ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  *(void *)(a1 + ot::Mle::Tlv::SetType(this, 80) = 0LL;
  *(void *)(a1 + 88)  = 0LL;
  *(void *)(a1 + 96)  = 0LL;
  *(void *)(a1 + 10ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0LL;
  return result;
}

void std::default_delete<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>::operator()[abi:ne180100]( uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    __int128 v4 = (void **)(a2 + 88);
    std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>::__destroy_vector::operator()[abi:ne180100](&v4);
    __int128 v4 = (void **)(a2 + 64);
    std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>::__destroy_vector::operator()[abi:ne180100](&v4);
    otbr::Mdns::PublisherMDnsSd::ServiceRef::~ServiceRef((_DNSServiceRef_t **)a2);
    operator delete(v3);
  }

void otbr::Mdns::PublisherMDnsSd::ServiceRef::~ServiceRef(_DNSServiceRef_t **this)
{
  uint64_t v2 = *this;
  if (v2)
  {
    DNSServiceRefDeallocate(v2);
    *this  = 0LL;
  }

void std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>::__destroy_vector::operator()[abi:ne180100]( void ***a1)
{
  uint64_t v2 = (void ****)*a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>::__base_destruct_at_end[abi:ne180100]( (uint64_t)v2,  *v2);
    uint64_t v3 = **a1;
    if ((_BYTE *)(*a1)[2] - (_BYTE *)v3 < 0) {
      __break(0x550Cu);
    }
    else {
      operator delete(v3);
    }
  }

void std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>::__base_destruct_at_end[abi:ne180100]( uint64_t a1, void ***a2)
{
  for (uint64_t i = *(void ****)(a1 + 8);
        i != a2;
        std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>::reset[abi:ne180100](i, 0LL))
  {
    --i;
  }

  *(void *)(a1 + 8)  = a2;
}

uint64_t std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>::__push_back_slow_path<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>( uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 3;
  unint64_t v3 = v2 + 1;
  if (v2 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }

  if (v3 >> 61) {
    goto LABEL_10;
  }
  unint64_t v6 = a1[2] - *a1;
  if (v6 >> 2 > v3) {
    unint64_t v3 = v6 >> 2;
  }
  if (v6 >= 0x7FFFFFFFFFFFFFF8LL) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  std::__split_buffer<_DNSServiceRef_t *>::__split_buffer(v12, v7, v2, (uint64_t)(a1 + 2));
  unint64_t v8 = v13;
  uint64_t v9 = *a2;
  *a2  = 0LL;
  void *v8 = v9;
  uint64_t v13 = v8 + 1;
  std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>::__swap_out_circular_buffer(a1, v12);
  uint64_t v10 = a1[1];
  std::__split_buffer<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>::~__split_buffer(v12);
  return v10;
}

void sub_10037080C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>::__swap_out_circular_buffer( uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>*>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>*>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>*>>( (uint64_t)(a1 + 2),  a1[1],  (void *)a1[1],  *a1,  (void *)*a1,  a2[1],  a2[1]);
  a2[1]  = v5;
  uint64_t v6 = *a1;
  *a1  = v5;
  a2[1]  = v6;
  uint64_t v7 = a1[1];
  a1[1]  = a2[2];
  a2[2]  = v7;
  uint64_t v8 = a1[2];
  a1[2]  = a2[3];
  a2[3]  = v8;
  *a2  = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>*>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>*>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>*>>( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v16 = a6;
  *((void *)&v16 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = a7;
  __int128 v15 = v16;
  v13[0]  = a1;
  v13[1]  = &v15;
  _BYTE v13[2] = &v16;
  if (a3 != a5)
  {
    uint64_t v9 = (void *)(a7 - 8);
    uint64_t v10 = (void *)(a7 - 8);
    do
    {
      uint64_t v11 = *--a3;
      *a3  = 0LL;
      *v10--  = v11;
      *((void *)&v16 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = v9;
      v7 -= 8LL;
      uint64_t v9 = v10;
    }

    while (a3 != a5);
  }

  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>*>>>::~__exception_guard_exceptions[abi:ne180100]( uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>*>>::operator()[abi:ne180100]( uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v10 = *(void *)a1[2];
  uint64_t v11 = v1;
  uint64_t v12 = v10;
  uint64_t v13 = v1;
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(a1[1] + 8);
  uint64_t v5 = *(void *)a1[1];
  uint64_t v6 = v3;
  uint64_t v7 = v5;
  uint64_t v8 = v3;
  std::__allocator_destroy[abi:ne180100]<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>,std::reverse_iterator<std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>*>>,std::reverse_iterator<std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>*>>>( v2,  (uint64_t)v9,  (uint64_t)v4);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>,std::reverse_iterator<std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>*>>,std::reverse_iterator<std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>*>>>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(uint64_t **)(a2 + 32); i != *(uint64_t **)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    std::allocator_traits<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>>::destroy[abi:ne180100]<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>,void>( a1,  i);
    uint64_t i = (uint64_t *)(*(void *)(a2 + 32) + 8LL);
  }

void *std::__split_buffer<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>::~__split_buffer( void *a1)
{
  uint64_t result = (void *)*a1;
  if (!*a1) {
    return a1;
  }
  if ((uint64_t)(a1[3] - (void)result) >= 0)
  {
    operator delete(result);
    return a1;
  }

  __break(0x550Cu);
  return result;
}

void std::__split_buffer<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>::__destruct_at_end[abi:ne180100]( uint64_t a1, uint64_t a2)
{
  while (1)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4 == a2) {
      break;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 16)  = v4 - 8;
    std::allocator_traits<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>>::destroy[abi:ne180100]<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>,void>( v5,  (uint64_t *)(v4 - 8));
  }

uint64_t *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription> *,std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription> *,std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription> *>( uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
      std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>::operator=[abi:ne180100](a4++, v5++);
    while (v5 != a3);
    return a3;
  }

  return v5;
}

uint64_t *std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>::operator=[abi:ne180100]( uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2  = 0LL;
  uint64_t v4 = *a1;
  *a1  = v3;
  if (v4) {
    std::default_delete<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>::operator()[abi:ne180100]((uint64_t)a1, v4);
  }
  return a1;
}

double otbr::Mdns::PublisherMDnsSd::HostSubscription::HostSubscription(uint64_t a1, uint64_t a2, __int128 *a3)
{
  *(void *)a1  = 0LL;
  *(void *)(a1 + 8)  = a2;
  __int128 v3 = *a3;
  *(void *)(a1 + 3ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 16)  = v3;
  *((void *)a3 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = 0LL;
  *((void *)a3 + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  *(void *)a3  = 0LL;
  *(void *)(a1 + 7ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  *(void *)(a1 + ot::Mle::Tlv::SetType(this, 80) = 0LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 56)  = 0u;
  *(_OWORD *)(a1 + 4ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 0u;
  *(_DWORD *)(a1 + 88)  = 0;
  return result;
}

void std::default_delete<otbr::Mdns::PublisherMDnsSd::HostSubscription>::operator()[abi:ne180100]( uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = (void **)(a2 + 64);
    std::vector<otbr::Ip6Address>::__destroy_vector::operator()[abi:ne180100](&v4);
    otbr::Mdns::PublisherMDnsSd::ServiceRef::~ServiceRef((_DNSServiceRef_t **)a2);
    operator delete(v3);
  }

uint64_t std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>::__push_back_slow_path<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>( uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 3;
  unint64_t v3 = v2 + 1;
  if (v2 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }

  if (v3 >> 61) {
    goto LABEL_10;
  }
  unint64_t v6 = a1[2] - *a1;
  if (v6 >> 2 > v3) {
    unint64_t v3 = v6 >> 2;
  }
  if (v6 >= 0x7FFFFFFFFFFFFFF8LL) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  std::__split_buffer<_DNSServiceRef_t *>::__split_buffer(v12, v7, v2, (uint64_t)(a1 + 2));
  uint64_t v8 = v13;
  uint64_t v9 = *a2;
  *a2  = 0LL;
  void *v8 = v9;
  uint64_t v13 = v8 + 1;
  std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>::__swap_out_circular_buffer(a1, v12);
  uint64_t v10 = a1[1];
  std::__split_buffer<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>::~__split_buffer(v12);
  return v10;
}

void sub_100370C8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>::__swap_out_circular_buffer( uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>*>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>*>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>*>>( (uint64_t)(a1 + 2),  a1[1],  (void *)a1[1],  *a1,  (void *)*a1,  a2[1],  a2[1]);
  a2[1]  = v5;
  uint64_t v6 = *a1;
  *a1  = v5;
  a2[1]  = v6;
  uint64_t v7 = a1[1];
  a1[1]  = a2[2];
  a2[2]  = v7;
  uint64_t v8 = a1[2];
  a1[2]  = a2[3];
  a2[3]  = v8;
  *a2  = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>*>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>*>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>*>>( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v16 = a6;
  *((void *)&v16 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = a7;
  __int128 v15 = v16;
  v13[0]  = a1;
  v13[1]  = &v15;
  _BYTE v13[2] = &v16;
  if (a3 != a5)
  {
    uint64_t v9 = (void *)(a7 - 8);
    uint64_t v10 = (void *)(a7 - 8);
    do
    {
      uint64_t v11 = *--a3;
      *a3  = 0LL;
      *v10--  = v11;
      *((void *)&v16 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = v9;
      v7 -= 8LL;
      uint64_t v9 = v10;
    }

    while (a3 != a5);
  }

  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>*>>>::~__exception_guard_exceptions[abi:ne180100]( uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>*>>::operator()[abi:ne180100]( uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v10 = *(void *)a1[2];
  uint64_t v11 = v1;
  uint64_t v12 = v10;
  uint64_t v13 = v1;
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(a1[1] + 8);
  uint64_t v5 = *(void *)a1[1];
  uint64_t v6 = v3;
  uint64_t v7 = v5;
  uint64_t v8 = v3;
  std::__allocator_destroy[abi:ne180100]<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>,std::reverse_iterator<std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>*>>,std::reverse_iterator<std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>*>>>( v2,  (uint64_t)v9,  (uint64_t)v4);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>,std::reverse_iterator<std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>*>>,std::reverse_iterator<std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>*>>>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(uint64_t **)(a2 + 32); i != *(uint64_t **)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    std::allocator_traits<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>>::destroy[abi:ne180100]<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>,void>( a1,  i);
    uint64_t i = (uint64_t *)(*(void *)(a2 + 32) + 8LL);
  }

void *std::__split_buffer<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>::~__split_buffer( void *a1)
{
  uint64_t result = (void *)*a1;
  if (!*a1) {
    return a1;
  }
  if ((uint64_t)(a1[3] - (void)result) >= 0)
  {
    operator delete(result);
    return a1;
  }

  __break(0x550Cu);
  return result;
}

void std::__split_buffer<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>::__destruct_at_end[abi:ne180100]( uint64_t a1, uint64_t a2)
{
  while (1)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4 == a2) {
      break;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 16)  = v4 - 8;
    std::allocator_traits<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>>::destroy[abi:ne180100]<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>,void>( v5,  (uint64_t *)(v4 - 8));
  }

uint64_t *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription> *,std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription> *,std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription> *>( uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
      std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>::operator=[abi:ne180100](a4++, v5++);
    while (v5 != a3);
    return a3;
  }

  return v5;
}

uint64_t *std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>::operator=[abi:ne180100]( uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2  = 0LL;
  uint64_t v4 = *a1;
  *a1  = v3;
  if (v4) {
    std::default_delete<otbr::Mdns::PublisherMDnsSd::HostSubscription>::operator()[abi:ne180100]((uint64_t)a1, v4);
  }
  return a1;
}

double otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::ServiceInstanceResolution( uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4, __int128 *a5, int a6)
{
  *(void *)a1  = 0LL;
  *(void *)(a1 + 8)  = a2;
  __int128 v6 = *a3;
  *(void *)(a1 + 3ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 16)  = v6;
  *((void *)a3 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = 0LL;
  *((void *)a3 + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  *(void *)a3  = 0LL;
  __int128 v7 = *a4;
  *(void *)(a1 + 56)  = *((void *)a4 + 2);
  *(_OWORD *)(a1 + 4ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = v7;
  *((void *)a4 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = 0LL;
  *((void *)a4 + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  *(void *)a4  = 0LL;
  __int128 v8 = *a5;
  *(void *)(a1 + ot::Mle::Tlv::SetType(this, 80) = *((void *)a5 + 2);
  *(_OWORD *)(a1 + 6ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v8;
  *((void *)a5 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = 0LL;
  *((void *)a5 + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  *(void *)a5  = 0LL;
  *(_DWORD *)(a1 + 88)  = a6;
  *(_BYTE *)(a1 + 96)  = 0;
  *(_DWORD *)(a1 + 10ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 0;
  *(void *)(a1 + 11ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  *(void *)(a1 + 1ot::Mle::Tlv::SetType(this, 20) = 0LL;
  *(void *)(a1 + 10ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 128)  = 0u;
  *(_OWORD *)(a1 + 14ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
  *(void *)(a1 + 16ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 0LL;
  *(void *)(a1 + 168)  = 0LL;
  *(void *)(a1 + 19ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  *(void *)(a1 + 20ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 0LL;
  *(void *)(a1 + 18ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0LL;
  *(void *)(a1 + 17ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0LL;
  *(_DWORD *)(a1 + 208)  = 0;
  return result;
}

void std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>::reset[abi:ne180100]( void ***a1, void **a2)
{
  uint64_t v3 = *a1;
  *a1  = a2;
  if (v3)
  {
    otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::~ServiceInstanceResolution(v3);
    operator delete(v4);
  }

void otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::~ServiceInstanceResolution(void **this)
{
  uint64_t v2 = this + 23;
  std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 19;
  std::vector<otbr::Ip6Address>::__destroy_vector::operator()[abi:ne180100](&v2);
  otbr::Mdns::PublisherMDnsSd::ServiceRef::~ServiceRef((_DNSServiceRef_t **)this);
}

uint64_t std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>::__push_back_slow_path<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>( uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 3;
  unint64_t v3 = v2 + 1;
  if (v2 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }

  if (v3 >> 61) {
    goto LABEL_10;
  }
  unint64_t v6 = a1[2] - *a1;
  if (v6 >> 2 > v3) {
    unint64_t v3 = v6 >> 2;
  }
  if (v6 >= 0x7FFFFFFFFFFFFFF8LL) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  std::__split_buffer<_DNSServiceRef_t *>::__split_buffer(v12, v7, v2, (uint64_t)(a1 + 2));
  __int128 v8 = v13;
  uint64_t v9 = *a2;
  *a2  = 0LL;
  void *v8 = v9;
  uint64_t v13 = v8 + 1;
  std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>::__swap_out_circular_buffer( a1,  v12);
  uint64_t v10 = a1[1];
  std::__split_buffer<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>::~__split_buffer(v12);
  return v10;
}

void sub_100371220(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>::__swap_out_circular_buffer( uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>*>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>*>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>*>>( (uint64_t)(a1 + 2),  a1[1],  (void *)a1[1],  *a1,  (void *)*a1,  a2[1],  a2[1]);
  a2[1]  = v5;
  uint64_t v6 = *a1;
  *a1  = v5;
  a2[1]  = v6;
  uint64_t v7 = a1[1];
  a1[1]  = a2[2];
  a2[2]  = v7;
  uint64_t v8 = a1[2];
  a1[2]  = a2[3];
  a2[3]  = v8;
  *a2  = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>*>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>*>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>*>>( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v16 = a6;
  *((void *)&v16 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = a7;
  __int128 v15 = v16;
  v13[0]  = a1;
  v13[1]  = &v15;
  _BYTE v13[2] = &v16;
  if (a3 != a5)
  {
    uint64_t v9 = (void *)(a7 - 8);
    uint64_t v10 = (void *)(a7 - 8);
    do
    {
      uint64_t v11 = *--a3;
      *a3  = 0LL;
      *v10--  = v11;
      *((void *)&v16 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = v9;
      v7 -= 8LL;
      uint64_t v9 = v10;
    }

    while (a3 != a5);
  }

  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>*>>>::~__exception_guard_exceptions[abi:ne180100]( uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void ***std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>*>>::operator()[abi:ne180100]( uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v11 = *(void *)a1[2];
  uint64_t v12 = v1;
  uint64_t v13 = v11;
  uint64_t v14 = v1;
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(a1[1] + 8);
  uint64_t v6 = *(void *)a1[1];
  uint64_t v7 = v3;
  uint64_t v8 = v6;
  uint64_t v9 = v3;
  return std::__allocator_destroy[abi:ne180100]<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>,std::reverse_iterator<std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>*>>,std::reverse_iterator<std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>*>>>( v2,  (uint64_t)v10,  (uint64_t)v5);
}

void ***std::__allocator_destroy[abi:ne180100]<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>,std::reverse_iterator<std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>*>>,std::reverse_iterator<std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>*>>>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t result = *(void ****)(a2 + 32); result != *(void ****)(a3 + 32); *(void *)(a2 + 32) = result)
  {
    std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>::reset[abi:ne180100](result, 0LL);
    uint64_t result = (void ***)(*(void *)(a2 + 32) + 8LL);
  }

  return result;
}

void *std::__split_buffer<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>::~__split_buffer( void *a1)
{
  uint64_t result = (void *)*a1;
  if (!*a1) {
    return a1;
  }
  if ((uint64_t)(a1[3] - (void)result) >= 0)
  {
    operator delete(result);
    return a1;
  }

  __break(0x550Cu);
  return result;
}

void std::__split_buffer<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>::__destruct_at_end[abi:ne180100]( uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16)  = i - 8;
    std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>::reset[abi:ne180100]((void ***)(i - 8), 0LL);
  }

double otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery::ServiceInstanceQuery( uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4, __int128 *a5, int a6)
{
  *(void *)a1  = 0LL;
  __int128 v6 = *a3;
  *(void *)(a1 + 3ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 16)  = v6;
  *((void *)a3 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = 0LL;
  *((void *)a3 + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  *(void *)a3  = 0LL;
  __int128 v7 = *a4;
  *(void *)(a1 + 56)  = *((void *)a4 + 2);
  *(_OWORD *)(a1 + 4ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = v7;
  *((void *)a4 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = 0LL;
  *((void *)a4 + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  *(void *)a4  = 0LL;
  __int128 v8 = *a5;
  *(void *)(a1 + ot::Mle::Tlv::SetType(this, 80) = *((void *)a5 + 2);
  *(_OWORD *)(a1 + 6ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v8;
  *((void *)a5 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = 0LL;
  *((void *)a5 + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  *(void *)a5  = 0LL;
  *(_DWORD *)(a1 + 88)  = a6;
  *(_BYTE *)(a1 + 96)  = 0;
  *(_DWORD *)(a1 + 10ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 0;
  *(void *)(a1 + 11ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  *(void *)(a1 + 1ot::Mle::Tlv::SetType(this, 20) = 0LL;
  *(void *)(a1 + 10ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 128)  = 0u;
  *(_OWORD *)(a1 + 14ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
  *(void *)(a1 + 16ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 0LL;
  *(void *)(a1 + 168)  = 0LL;
  *(void *)(a1 + 19ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  *(void *)(a1 + 20ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 0LL;
  *(void *)(a1 + 18ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0LL;
  *(void *)(a1 + 17ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0LL;
  *(_DWORD *)(a1 + 208)  = 0;
  return result;
}

uint64_t std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>::__push_back_slow_path<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>( uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 3;
  unint64_t v3 = v2 + 1;
  if (v2 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }

  if (v3 >> 61) {
    goto LABEL_10;
  }
  unint64_t v6 = a1[2] - *a1;
  if (v6 >> 2 > v3) {
    unint64_t v3 = v6 >> 2;
  }
  if (v6 >= 0x7FFFFFFFFFFFFFF8LL) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  std::__split_buffer<_DNSServiceRef_t *>::__split_buffer(v12, v7, v2, (uint64_t)(a1 + 2));
  __int128 v8 = v13;
  uint64_t v9 = *a2;
  *a2  = 0LL;
  void *v8 = v9;
  uint64_t v13 = v8 + 1;
  std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>::__swap_out_circular_buffer(a1, v12);
  uint64_t v10 = a1[1];
  std::__split_buffer<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>::~__split_buffer(v12);
  return v10;
}

void sub_1003715E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>::__swap_out_circular_buffer( uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>*>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>*>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>*>>( (uint64_t)(a1 + 2),  a1[1],  (void *)a1[1],  *a1,  (void *)*a1,  a2[1],  a2[1]);
  a2[1]  = v5;
  uint64_t v6 = *a1;
  *a1  = v5;
  a2[1]  = v6;
  uint64_t v7 = a1[1];
  a1[1]  = a2[2];
  a2[2]  = v7;
  uint64_t v8 = a1[2];
  a1[2]  = a2[3];
  a2[3]  = v8;
  *a2  = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>*>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>*>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>*>>( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v16 = a6;
  *((void *)&v16 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = a7;
  __int128 v15 = v16;
  v13[0]  = a1;
  v13[1]  = &v15;
  _BYTE v13[2] = &v16;
  if (a3 != a5)
  {
    uint64_t v9 = (void *)(a7 - 8);
    uint64_t v10 = (void *)(a7 - 8);
    do
    {
      uint64_t v11 = *--a3;
      *a3  = 0LL;
      *v10--  = v11;
      *((void *)&v16 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = v9;
      v7 -= 8LL;
      uint64_t v9 = v10;
    }

    while (a3 != a5);
  }

  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>*>>>::~__exception_guard_exceptions[abi:ne180100]( uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void ***std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution> *,std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution> *,std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution> *>( uint64_t a1, void ***a2, void ***a3, void ***a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      uint64_t v7 = *v5;
      *v5++  = 0LL;
      std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>::reset[abi:ne180100](a4++, v7);
    }

    while (v5 != a3);
    return a3;
  }

  return v5;
}

uint64_t *std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::__emplace_unique_key_args<std::pair<std::string,std::string>,std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::string>&&>,std::tuple<>>( uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t v7 = (uint64_t **)std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::__find_equal<std::pair<std::string,std::string>>( (uint64_t)a1,  &v12,  a2);
  uint64_t v8 = *v7;
  if (!*v7)
  {
    uint64_t v9 = v7;
    std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::string>&&>,std::tuple<>>( (uint64_t)a1,  a3,  a4,  (uint64_t)v11);
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__insert_node_at( a1,  v12,  v9,  (uint64_t *)v11[0]);
    uint64_t v8 = (uint64_t *)v11[0];
    v11[0]  = 0LL;
    std::unique_ptr<std::__tree_node<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,void *>>>>::reset[abi:ne180100]( v11,  0LL);
  }

  return v8;
}

void *std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::__find_equal<std::pair<std::string,std::string>>( uint64_t a1, void *a2, const void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = (void *)v4;
        uint64_t v8 = (const void **)(v4 + 32);
        if (!std::operator<[abi:ne180100]<std::string,std::string,std::string,std::string>( a3,  (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      uint64_t v5 = v7 + 1;
      uint64_t v4 = v7[1];
    }

    while (v4);
  }

  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }

void std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::string>&&>,std::tuple<>>( uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t v8 = operator new(0x58uLL);
  *(void *)a4  = v8;
  *(void *)(a4 + 8)  = v7;
  *(_BYTE *)(a4 + 16)  = 0;
  std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,void *>>>::construct[abi:ne180100]<std::pair<std::pair<std::string,std::string> const,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::string>&&>,std::tuple<>,void>( v7,  (uint64_t)v8 + 32,  a2,  a3);
  *(_BYTE *)(a4 + 16)  = 1;
}

void sub_100371930(_Unwind_Exception *a1)
{
}

uint64_t std::operator<[abi:ne180100]<std::string,std::string,std::string,std::string>( const void **a1, const void **a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = a1;
  size_t v4 = *((unsigned __int8 *)a2 + 23);
  size_t v5 = (size_t)a2[1];
  if ((v4 & 0x80u) == 0LL)
  {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }

  else
  {
    a2  = (const void **)*a2;
    size_t v6 = v5;
  }

  size_t v7 = *((unsigned __int8 *)a1 + 23);
  if ((v7 & 0x80u) == 0LL) {
    size_t v8 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v8 = (size_t)a1[1];
  }
  if ((v7 & 0x80u) != 0LL) {
    a1  = (const void **)*a1;
  }
  if (v6 >= v8) {
    size_t v9 = v8;
  }
  else {
    size_t v9 = v6;
  }
  int v10 = memcmp(a1, a2, v9);
  BOOL v11 = v8 < v6;
  if (v10) {
    BOOL v11 = v10 < 0;
  }
  if (v11) {
    return 1LL;
  }
  if ((v7 & 0x80u) == 0LL) {
    uint64_t v13 = v3;
  }
  else {
    uint64_t v13 = *v3;
  }
  if ((v7 & 0x80u) != 0LL) {
    size_t v7 = (size_t)v3[1];
  }
  if ((v4 & 0x80u) == 0LL)
  {
    char v14 = v2;
  }

  else
  {
    size_t v4 = (size_t)v2[1];
    char v14 = *v2;
  }

  if (v7 >= v4) {
    size_t v15 = v4;
  }
  else {
    size_t v15 = v7;
  }
  int v16 = memcmp(v14, v13, v15);
  BOOL v17 = v4 < v7;
  if (v16) {
    BOOL v17 = v16 < 0;
  }
  if (v17) {
    return 0LL;
  }
  __int128 v20 = (const void **)v2[3];
  BOOL v19 = v2 + 3;
  unint64_t v18 = v20;
  int v21 = *((char *)v19 + 23);
  if (v21 >= 0) {
    __int128 v22 = v19;
  }
  else {
    __int128 v22 = v18;
  }
  if (v21 >= 0) {
    size_t v23 = *((unsigned __int8 *)v19 + 23);
  }
  else {
    size_t v23 = (size_t)v19[1];
  }
  __int128 v26 = (const void **)v3[3];
  uint64_t v25 = v3 + 3;
  char v24 = v26;
  int v27 = *((char *)v25 + 23);
  if (v27 >= 0) {
    size_t v28 = *((unsigned __int8 *)v25 + 23);
  }
  else {
    size_t v28 = (size_t)v25[1];
  }
  if (v27 >= 0) {
    __int128 v29 = v25;
  }
  else {
    __int128 v29 = v24;
  }
  if (v23 >= v28) {
    size_t v30 = v28;
  }
  else {
    size_t v30 = v23;
  }
  int v31 = memcmp(v29, v22, v30);
  if (v31) {
    return v31 < 0;
  }
  else {
    return v28 < v23;
  }
}

__n128 std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,void *>>>::construct[abi:ne180100]<std::pair<std::pair<std::string,std::string> const,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::string>&&>,std::tuple<>,void>( uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  size_t v4 = *a4;
  __int128 v5 = **a4;
  *(void *)(a2 + 16)  = *((void *)*a4 + 2);
  *(_OWORD *)a2  = v5;
  *((void *)v4 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = 0LL;
  *((void *)v4 + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  *(void *)size_t v4 = 0LL;
  __n128 result = *(__n128 *)((char *)v4 + 24);
  *(void *)(a2 + 4ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = *((void *)v4 + 5);
  *(__n128 *)(a2 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = result;
  *((void *)v4 + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0LL;
  *((void *)v4 + 5)  = 0LL;
  *((void *)v4 + ot::NetworkData::NetworkDataTlv::SetType(this, 3) = 0LL;
  *(void *)(a2 + 48)  = 0LL;
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,void *>>>>::reset[abi:ne180100]( void **a1, void *a2)
{
  unint64_t v3 = *a1;
  *a1  = a2;
  if (v3) {
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,void *>>>::operator()[abi:ne180100]( (uint64_t)(a1 + 1),  v3);
  }
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,void *>>>::operator()[abi:ne180100]( uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8)) {
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)__p + 32);
  }
  if (__p) {
    operator delete(__p);
  }
}

uint64_t *std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>( uint64_t *result, char *__src, uint64_t a3, unint64_t a4)
{
  size_t v7 = result;
  size_t v8 = (char *)*result;
  if (result[2] - *result < a4)
  {
    std::vector<unsigned char>::__vdeallocate((uint64_t)result);
    if ((a4 & 0x8000000000000000LL) != 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = v7[2] - *v7;
    uint64_t v10 = 2 * v9;
    if (2 * v9 <= a4) {
      uint64_t v10 = a4;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    __n128 result = (uint64_t *)std::vector<unsigned char>::__vallocate[abi:ne180100](v7, v11);
    size_t v8 = (char *)v7[1];
    goto LABEL_12;
  }

  uint64_t v12 = (_BYTE *)result[1];
  uint64_t v13 = v12 - v8;
  if (v12 - v8 >= a4)
  {
LABEL_12:
    size_t v15 = a3 - (void)__src;
    if (v15) {
      __n128 result = (uint64_t *)memmove(v8, __src, v15);
    }
    int v16 = &v8[v15];
LABEL_20:
    v7[1]  = (uint64_t)v16;
    return result;
  }

  if (v12 == v8)
  {
    uint64_t v14 = *result;
  }

  else
  {
    __n128 result = (uint64_t *)memmove((void *)*result, __src, v12 - v8);
    uint64_t v14 = *v7;
    size_t v8 = (char *)v7[1];
  }

  if ((unint64_t)&v8[-v14] <= a4)
  {
    BOOL v17 = &__src[v13];
    size_t v18 = a3 - (void)&__src[v13];
    if (v18) {
      __n128 result = (uint64_t *)memmove(v8, v17, v18);
    }
    int v16 = &v8[v18];
    goto LABEL_20;
  }

  __break(0x5515u);
  return result;
}

uint64_t std::vector<otbr::Ip6Address>::__push_back_slow_path<otbr::Ip6Address const&>( uint64_t *a1, _OWORD *a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 4;
  unint64_t v3 = v2 + 1;
  if (v2 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }

  if (v3 >> 60) {
    goto LABEL_10;
  }
  unint64_t v6 = a1[2] - *a1;
  if (v6 >> 3 > v3) {
    unint64_t v3 = v6 >> 3;
  }
  if (v6 >= 0x7FFFFFFFFFFFFFF0LL) {
    unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  std::__split_buffer<otbr::Ip6Address>::__split_buffer(v10, v7, v2, (uint64_t)(a1 + 2));
  *v11++  = *a2;
  std::vector<otbr::Ip6Address>::__swap_out_circular_buffer(a1, v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<otbr::Ip6Address>::~__split_buffer(v10);
  return v8;
}

void sub_100371CE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *std::vector<otbr::Ip6Address>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }

  else
  {
    do
    {
      uint64_t v5 = v4 - 16;
      *(_OWORD *)(v4 - 16)  = *(_OWORD *)(v3 - 16);
      v4 -= 16LL;
      v3 -= 16LL;
    }

    while (v3 != v2);
  }

  a2[1]  = v5;
  uint64_t v6 = *result;
  *__n128 result = v5;
  a2[1]  = v6;
  uint64_t v7 = result[1];
  result[1]  = a2[2];
  a2[2]  = v7;
  uint64_t v8 = result[2];
  result[2]  = a2[3];
  a2[3]  = v8;
  *a2  = a2[1];
  return result;
}

void *std::__split_buffer<otbr::Ip6Address>::__split_buffer( void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[3]  = 0LL;
  a1[4]  = a4;
  if (a2) {
    uint64_t v7 = (char *)std::allocator<otbr::Ip6Address>::allocate[abi:ne180100](a4, a2);
  }
  else {
    uint64_t v7 = 0LL;
  }
  uint64_t v8 = &v7[16 * a3];
  *a1  = v7;
  a1[1]  = v8;
  a1[2]  = v8;
  a1[3]  = &v7[16 * a2];
  return a1;
}

void *std::__split_buffer<otbr::Ip6Address>::~__split_buffer(void *a1)
{
  __n128 result = (void *)*a1;
  if (!*a1) {
    return a1;
  }
  if ((uint64_t)(a1[3] - (void)result) >= 0)
  {
    operator delete(result);
    return a1;
  }

  __break(0x550Cu);
  return result;
}

uint64_t std::__split_buffer<otbr::Ip6Address>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2) {
    *(void *)(result + 16)  = v2 + ((a2 - v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  }
  return result;
}

void **std::__tree<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>( uint64_t **a1, const void **a2, uint64_t a3, const std::string **a4)
{
  uint64_t v7 = (void ***)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>( (uint64_t)a1,  &v12,  a2);
  uint64_t v8 = *v7;
  if (!*v7)
  {
    unint64_t v9 = (uint64_t **)v7;
    std::__tree<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>( (uint64_t)a1,  a3,  a4,  (uint64_t)v11);
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__insert_node_at( a1,  v12,  v9,  (uint64_t *)v11[0]);
    uint64_t v8 = v11[0];
    v11[0]  = 0LL;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,void *>>>>::reset[abi:ne180100]( v11,  0LL);
  }

  return v8;
}

std::string *std::__tree<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, const std::string **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t v8 = (char *)operator new(0x40uLL);
  *(void *)a4  = v8;
  *(void *)(a4 + 8)  = v7;
  *(_BYTE *)(a4 + 16)  = 0;
  __n128 result = std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,void *>>>::construct[abi:ne180100]<std::pair<std::string const,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>,void>( v7,  (std::string *)(v8 + 32),  a2,  a3);
  *(_BYTE *)(a4 + 16)  = 1;
  return result;
}

void sub_100371F48(_Unwind_Exception *a1)
{
}

std::string *std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,void *>>>::construct[abi:ne180100]<std::pair<std::string const,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>,void>( int a1, std::string *this, uint64_t a3, const std::string **a4)
{
  __n128 result = std::string::basic_string(this, *a4);
  result[1].__r_.__value_.__r.__words[0]  = 0LL;
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,void *>>>>::reset[abi:ne180100]( void ***a1, void **a2)
{
  uint64_t v3 = *a1;
  *a1  = a2;
  if (v3) {
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,void *>>>::operator()[abi:ne180100]( (uint64_t)(a1 + 1),  v3);
  }
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,void *>>>::operator()[abi:ne180100]( uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
  }

  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

int *otbr::Mdns::Publisher::PublishService( uint64_t a1, uint64_t a2, const std::string *a3, const std::string *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  rep  = std::chrono::steady_clock::now().__d_.__rep_;
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(&v18, a3, a4);
  *std::map<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>::operator[]( (uint64_t **)(a1 + 88),  (__int128 *)&v18)  = rep;
  if (v20 < 0) {
    operator delete(__p);
  }
  __n128 result = (int *)(*(uint64_t (**)(uint64_t, uint64_t, const std::string *, const std::string *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 104LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);
  if ((_DWORD)result) {
    return otbr::Mdns::Publisher::UpdateMdnsResponseCounters((int *)(a1 + 216), (int)result);
  }
  return result;
}

void sub_1003720D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int *otbr::Mdns::Publisher::UpdateMdnsResponseCounters(int *result, int a2)
{
  switch(a2)
  {
    case -13:
      int v3 = result[7];
      result += 7;
      int v2 = v3;
      break;
    case -12:
      int v4 = result[6];
      result += 6;
      int v2 = v4;
      break;
    case -11:
      int v5 = result[3];
      result += 3;
      int v2 = v5;
      break;
    case -10:
      int v6 = result[2];
      result += 2;
      int v2 = v6;
      break;
    case -9:
      int v7 = result[4];
      result += 4;
      int v2 = v7;
      break;
    case -7:
      int v9 = result[1];
      ++result;
      int v2 = v9;
      break;
    case 0:
      int v2 = *result;
      break;
    default:
      int v8 = result[5];
      result += 5;
      int v2 = v8;
      break;
  }

  BOOL v10 = __CFADD__(v2, 1);
  int v11 = v2 + 1;
  if (v10) {
    __break(0x5500u);
  }
  else {
    *__n128 result = v11;
  }
  return result;
}

int *otbr::Mdns::Publisher::PublishHost(uint64_t a1, std::string *a2, uint64_t a3, uint64_t a4)
{
  rep  = (void *)std::chrono::steady_clock::now().__d_.__rep_;
  *std::map<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>::operator[]( (uint64_t **)(a1 + 112),  aot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = rep;
  __n128 result = (int *)(*(uint64_t (**)(uint64_t, std::string *, uint64_t, uint64_t))(*(void *)a1 + 112LL))( a1,  a2,  a3,  a4);
  if ((_DWORD)result) {
    return otbr::Mdns::Publisher::UpdateMdnsResponseCounters((int *)(a1 + 184), (int)result);
  }
  return result;
}

uint64_t otbr::Mdns::Publisher::OnServiceResolveFailed( uint64_t a1, const std::string *a2, const std::string *a3, uint64_t a4)
{
  int v8 = (int *)(a1 + 280);
  int v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 136LL))(a1, a4);
  otbr::Mdns::Publisher::UpdateMdnsResponseCounters(v8, v9);
  int v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 136LL))(a1, a4);
  otbr::Mdns::Publisher::UpdateServiceInstanceResolutionEmaLatency(a1, a3, a2, v10);
  return (*(uint64_t (**)(uint64_t, const std::string *, const std::string *, uint64_t))(*(void *)a1 + 120LL))( a1,  a2,  a3,  a4);
}

void otbr::Mdns::Publisher::UpdateServiceInstanceResolutionEmaLatency( uint64_t a1, const std::string *a2, const std::string *a3, int a4)
{
  uint64_t v6 = a1 + 136;
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(&v16, a2, a3);
  int v7 = (uint64_t *)std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::find<std::pair<std::string,std::string>>( v6,  (const void **)&v16.__r_.__value_.__l.__data_);
  if (v18 < 0) {
    operator delete(__p);
  }
  if ((uint64_t *)(a1 + 144) != v7)
  {
    v8.__d_.__rep_  = std::chrono::steady_clock::now().__d_.__rep_;
    uint64_t v9 = v7[10];
    BOOL v10 = __OFSUB__(v8.__d_.__rep_, v9);
    int v11 = LODWORD(v8.__d_.__rep_) - v9;
    if (v10)
    {
      __break(0x5515u);
    }

    else
    {
      if (a4 == -12)
      {
LABEL_12:
        std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::erase( v6,  v7);
        return;
      }

      int v12 = v11 / 1000000;
      int v13 = *(_DWORD *)(a1 + 324);
      if (!v13)
      {
LABEL_11:
        *(_DWORD *)(a1 + 32ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v12;
        goto LABEL_12;
      }

      BOOL v14 = __CFADD__(v12, v13);
      unsigned int v15 = v12 + v13;
      if (!v14)
      {
        int v12 = v15 >> 1;
        goto LABEL_11;
      }
    }

    __break(0x5500u);
  }

void sub_100372358( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t otbr::Mdns::Publisher::OnHostResolveFailed(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v6 = (int *)(a1 + 248);
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 136LL))(a1, a3);
  otbr::Mdns::Publisher::UpdateMdnsResponseCounters(v6, v7);
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 136LL))(a1, a3);
  otbr::Mdns::Publisher::UpdateHostResolutionEmaLatency(a1, a2, v8);
  return (*(uint64_t (**)(uint64_t, const void **, uint64_t))(*(void *)a1 + 128LL))(a1, a2, a3);
}

uint64_t otbr::Mdns::Publisher::UpdateHostResolutionEmaLatency(uint64_t a1, const void **a2, int a3)
{
  uint64_t v5 = a1 + 160;
  uint64_t result = std::__tree<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::__map_value_compare<std::string,std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>>>::find<std::string>( a1 + 160,  a2);
  if (a1 + 168 != result)
  {
    uint64_t v7 = result;
    uint64_t result = std::chrono::steady_clock::now().__d_.__rep_;
    uint64_t v8 = *(void *)(v7 + 56);
    BOOL v9 = __OFSUB__(result, v8);
    int v10 = result - v8;
    if (v9)
    {
      __break(0x5515u);
    }

    else
    {
      if (a3 == -12) {
        return std::__tree<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::erase( v5,  v7);
      }
      int v11 = v10 / 1000000;
      int v12 = *(_DWORD *)(a1 + 320);
      if (!v12)
      {
LABEL_7:
        *(_DWORD *)(a1 + 3ot::Mle::Tlv::SetType(this, 20) = v11;
        return std::__tree<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::erase( v5,  v7);
      }

      BOOL v13 = __CFADD__(v11, v12);
      unsigned int v14 = v11 + v12;
      if (!v13)
      {
        int v11 = v14 >> 1;
        goto LABEL_7;
      }
    }

    __break(0x5500u);
  }

  return result;
}

char *otbr::Mdns::Publisher::EncodeTxtData(char *result, uint64_t *a2)
{
  uint64_t v2 = *(void *)result;
  uint64_t v3 = *((void *)result + 1);
  if (*(void *)result == v3) {
    return 0LL;
  }
  while (1)
  {
    uint64_t v5 = *(char *)(v2 + 23) < 0 ? *(void *)(v2 + 8) : *(unsigned __int8 *)(v2 + 23);
    BOOL v6 = __CFADD__(v5, 1LL);
    uint64_t v7 = v5 + 1;
    if (v6) {
      break;
    }
    uint64_t v8 = *(void *)(v2 + 32) - *(void *)(v2 + 24);
    BOOL v6 = __CFADD__(v7, v8);
    unint64_t v9 = v7 + v8;
    if (v6) {
      break;
    }
    if (v9 > 0xFF) {
      return (char *)4294967286LL;
    }
    char v17 = v9;
    int v10 = (_BYTE *)a2[1];
    if ((unint64_t)v10 >= a2[2])
    {
      int v11 = (char *)std::vector<unsigned char>::__push_back_slow_path<unsigned char>(a2, &v17);
    }

    else
    {
      _BYTE *v10 = v9;
      int v11 = v10 + 1;
    }

    a2[1]  = (uint64_t)v11;
    if (*(char *)(v2 + 23) < 0)
    {
      BOOL v13 = *(char **)v2;
      uint64_t v12 = *(void *)(v2 + 8);
    }

    else
    {
      uint64_t v12 = *(unsigned __int8 *)(v2 + 23);
      BOOL v13 = (char *)v2;
    }

    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>( (char *)a2,  v11,  v13,  &v13[v12],  v12);
    char v16 = 61;
    unsigned int v14 = (_BYTE *)a2[1];
    if ((unint64_t)v14 >= a2[2])
    {
      unsigned int v15 = (char *)std::vector<unsigned char>::__push_back_slow_path<unsigned char>(a2, &v16);
    }

    else
    {
      _BYTE *v14 = 61;
      unsigned int v15 = v14 + 1;
    }

    a2[1]  = (uint64_t)v15;
    uint64_t result = std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>( (char *)a2,  v15,  *(char **)(v2 + 24),  *(char **)(v2 + 32),  *(void *)(v2 + 32) - *(void *)(v2 + 24));
    v2 += 48LL;
    if (v2 == v3) {
      return 0LL;
    }
  }

  __break(0x5500u);
  return result;
}

uint64_t otbr::Mdns::Publisher::DecodeTxtData(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  int v6 = 0;
  while (a3 > (unsigned __int16)v6)
  {
    int v7 = *(unsigned __int8 *)(a2 + (unsigned __int16)v6);
    unsigned int v8 = (unsigned __int16)(v6 + 1);
    int v9 = v6 + 1 + v7;
    unsigned __int16 v10 = v6 + 1;
    unsigned __int16 v11 = v6 + 1;
    if (v8 < (unsigned __int16)(v6 + 1 + v7))
    {
      uint64_t v12 = (unsigned __int16)v6 + 1LL;
      unsigned __int16 v10 = v6 + v7 + 1;
      while (*(_BYTE *)(a2 + v12) != 61)
      {
        if ((unsigned __int16)(v6 + 1 + v7) == (unsigned __int16)++v12)
        {
          unsigned __int16 v11 = v6 + v7 + 1;
          goto LABEL_9;
        }
      }

      unsigned __int16 v11 = v12 + 1;
      unsigned __int16 v10 = v12;
    }

uint64_t otbr::Mdns::Publisher::RemoveSubscriptionCallbacks(otbr::Mdns::Publisher *this, unint64_t a2)
{
  unint64_t v3 = a2;
  if (!a2) {
    otbr::Mdns::Publisher::RemoveSubscriptionCallbacks();
  }
  uint64_t result = std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::__erase_unique<unsigned long long>( (uint64_t)this + 64,  &v3);
  if (result != 1) {
    otbr::Mdns::Publisher::RemoveSubscriptionCallbacks();
  }
  return result;
}

unint64_t otbr::Mdns::Publisher::AddSubscriptionCallbacks(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(a1 + 56);
  if (v3 == -1LL) {
    __break(0x5500u);
  }
  *(void *)(a1 + 56)  = v3 + 1;
  unint64_t v10 = v3;
  if (!v3) {
    otbr::Mdns::Publisher::AddSubscriptionCallbacks();
  }
  int v4 = (uint64_t **)(a1 + 64);
  std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>::pair[abi:ne180100]<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>,0>( (uint64_t)v11,  a2,  a3);
  std::map<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>::emplace[abi:ne180100]<unsigned long long &,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>( v4,  &v10,  (uint64_t)v11);
  uint64_t v5 = v14;
  if (v14 == v13)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = v13;
  }

  else
  {
    if (!v14) {
      goto LABEL_8;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_8:
  int v7 = v12;
  if (v12 == v11)
  {
    uint64_t v8 = 4LL;
    int v7 = v11;
    goto LABEL_12;
  }

  if (v12)
  {
    uint64_t v8 = 5LL;
LABEL_12:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }

  return v10;
}

void sub_100372804(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *std::map<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>::emplace[abi:ne180100]<unsigned long long &,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>( uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  return std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>( a1,  a2,  a2,  a3);
}

void *std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>::~pair( void *a1)
{
  uint64_t v2 = a1 + 4;
  unint64_t v3 = (void *)a1[7];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    unint64_t v3 = v2;
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  uint64_t v5 = (void *)a1[3];
  if (v5 == a1)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = a1;
    goto LABEL_10;
  }

  if (v5)
  {
    uint64_t v6 = 5LL;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }

  return a1;
}

void otbr::Mdns::Publisher::OnServiceResolved( uint64_t a1, std::string *a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v26 = 0LL;
  int v27 = 0LL;
  unint64_t v28 = 0LL;
  if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
    LOBYTE(vot::Mle::Tlv::SetType(this, 11) = (_BYTE)a2;
  }
  else {
    std::string::size_type v11 = a2->__r_.__value_.__r.__words[0];
  }
  uint64_t v12 = (const std::string *)(a3 + 8);
  unint64_t v13 = (uint64_t *)(a3 + 32);
  otbrLog(6u, "MDNS", "Service %s is resolved successfully: %s %s host %s addresses %zu", a4, a5, a6, a7, a8, v11);
  otbr::DnsUtils::CheckServiceNameSanity(a2);
  if (!*a3) {
    otbr::DnsUtils::CheckHostnameSanity(v13);
  }
  int v14 = *(_DWORD *)(a1 + 280);
  BOOL v15 = __CFADD__(v14, 1);
  int v16 = v14 + 1;
  if (v15)
  {
    __break(0x5500u);
  }

  else
  {
    *(_DWORD *)(a1 + 2ot::Mle::Tlv::SetType(this, 80) = v16;
    otbr::Mdns::Publisher::UpdateServiceInstanceResolutionEmaLatency(a1, v12, a2, 0);
    std::vector<unsigned long long>::reserve((uint64_t *)&v26, *(void *)(a1 + 80));
    uint64_t v17 = *(void ***)(a1 + 64);
    __int128 v29 = v17;
    unsigned int v18 = (void **)(a1 + 72);
    while (v17 != v18)
    {
      uint64_t v19 = (unint64_t *)(v17 + 4);
      char v20 = v27;
      if ((unint64_t)v27 >= v28)
      {
        uint64_t v21 = std::vector<unsigned long long>::__push_back_slow_path<unsigned long long const&>((uint64_t *)&v26, v19);
      }

      else
      {
        *int v27 = *v19;
        uint64_t v21 = (uint64_t)(v20 + 1);
      }

      int v27 = (unint64_t *)v21;
      std::__tree_const_iterator<std::__value_type<std::string,boost::any>,std::__tree_node<std::__value_type<std::string,boost::any>,void *> *,long>::operator++[abi:ne180100]((uint64_t)&v29);
      uint64_t v17 = v29;
    }

    __int128 v22 = v26;
    size_t v23 = v27;
    if (v26 != v27)
    {
      uint64_t v24 = a1 + 64;
      do
      {
        uint64_t v25 = (void **)std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::find<unsigned long long>( v24,  v22);
        if (v18 != v25 && v25[8]) {
          std::__function::__value_func<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>::operator()[abi:ne180100]((uint64_t)(v25 + 5));
        }
        ++v22;
      }

      while (v22 != v23);
    }

    __int128 v29 = (void **)&v26;
    std::vector<otbr::Ip6Address>::__destroy_vector::operator()[abi:ne180100](&v29);
  }

void sub_100372A74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  *(void *)(v15 - 56)  = &a15;
  std::vector<otbr::Ip6Address>::__destroy_vector::operator()[abi:ne180100]((void ***)(v15 - 56));
  _Unwind_Resume(a1);
}

uint64_t *std::vector<unsigned long long>::reserve(uint64_t *result, unint64_t a2)
{
  if (a2 > (result[2] - *result) >> 3)
  {
    uint64_t v2 = result;
    if (a2 >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    std::__split_buffer<_DNSServiceRef_t *>::__split_buffer(v3, a2, (result[1] - *result) >> 3, (uint64_t)(result + 2));
    std::vector<_DNSServiceRef_t *>::__swap_out_circular_buffer(v2, v3);
    return std::__split_buffer<_DNSServiceRef_t *>::~__split_buffer(v3);
  }

  return result;
}

void sub_100372B10(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void otbr::Mdns::Publisher::OnServiceRemoved( uint64_t a1, int a2, std::string *a3, const std::string *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v18[0]  = 0;
  *(_OWORD *)uint64_t v19 = 0u;
  memset(__p, 0, sizeof(__p));
  __int16 v21 = 0;
  memset(v22, 0, sizeof(v22));
  int v23 = 0;
  if ((a4->__r_.__value_.__s.__size_ & 0x80u) == 0) {
    LOBYTE(v1ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = (_BYTE)a4;
  }
  else {
    std::string::size_type v12 = a4->__r_.__value_.__r.__words[0];
  }
  otbrLog(6u, "MDNS", "Service %s.%s is removed from netif %u.", (uint64_t)a4, a5, a6, a7, a8, v12);
  v18[0]  = 1;
  LODWORD(v19[0])  = a2;
  std::string::operator=((std::string *)((char *)v19 + 4), a4);
  otbr::Mdns::Publisher::OnServiceResolved(a1, a3, v18, v13, v14, v15, v16, v17);
  uint64_t v24 = (void **)v22;
  std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100](&v24);
  uint64_t v24 = (void **)((char *)&__p[4] + 4);
  std::vector<otbr::Ip6Address>::__destroy_vector::operator()[abi:ne180100](&v24);
  if (SBYTE3(__p[4]) < 0) {
    operator delete(*(void **)((char *)&__p[1] + 4));
  }
  if (SBYTE3(__p[1]) < 0) {
    operator delete(*(void **)((char *)v19 + 4));
  }
}

void sub_100372C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void otbr::Mdns::Publisher::OnHostResolved( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  else {
    std::string::size_type v11 = *(const void **)a2;
  }
  otbrLog(6u, "MDNS", "Host %s is resolved successfully: host %s addresses %zu ttl %u", a4, a5, a6, a7, a8, (char)v11);
  uint64_t v12 = *(unsigned __int8 *)(a3 + 23);
  if ((v12 & 0x80u) != 0LL) {
    uint64_t v12 = *(void *)(a3 + 8);
  }
  if (v12) {
    otbr::DnsUtils::CheckHostnameSanity((uint64_t *)a3);
  }
  int v13 = *(_DWORD *)(a1 + 248);
  BOOL v14 = __CFADD__(v13, 1);
  int v15 = v13 + 1;
  if (v14)
  {
    __break(0x5500u);
  }

  else
  {
    *(_DWORD *)(a1 + 248)  = v15;
    otbr::Mdns::Publisher::UpdateHostResolutionEmaLatency(a1, (const void **)a2, 0);
    uint64_t v16 = *(void *)(a1 + 64);
    uint64_t v18 = v16;
    uint64_t v17 = a1 + 72;
    while (v16 != v17)
    {
      if (*(void *)(v16 + 96)) {
        std::__function::__value_func<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>::operator()[abi:ne180100](v16 + 72);
      }
      std::__tree_const_iterator<std::__value_type<std::string,boost::any>,std::__tree_node<std::__value_type<std::string,boost::any>,void *> *,long>::operator++[abi:ne180100]((uint64_t)&v18);
      uint64_t v16 = v18;
    }
  }

__n128 otbr::Mdns::Publisher::SortSubTypeList@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  *(_OWORD *)a2  = *(_OWORD *)a1;
  *(void *)(a2 + 16)  = *(void *)(a1 + 16);
  *(void *)(a1 + 8)  = 0LL;
  *(void *)(a1 + 16)  = 0LL;
  *(void *)a1  = 0LL;
  return result;
}

__n128 otbr::Mdns::Publisher::SortTxtList@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void ***)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = (2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v5 - (uint64_t)v4) >> 4))) ^ 0x7E;
  else {
    uint64_t v7 = v6;
  }
  std::__introsort<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*,false>( v4,  v5,  (uint64_t)&v9,  v7,  1);
  __n128 result = *(__n128 *)a1;
  *(_OWORD *)a2  = *(_OWORD *)a1;
  *(void *)(a2 + 16)  = *(void *)(a1 + 16);
  *(void *)(a1 + 8)  = 0LL;
  *(void *)(a1 + 16)  = 0LL;
  *(void *)a1  = 0LL;
  return result;
}

__n128 otbr::Mdns::Publisher::SortAddressList@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  *(_OWORD *)a2  = *(_OWORD *)a1;
  *(void *)(a2 + 16)  = *(void *)(a1 + 16);
  *(void *)(a1 + 8)  = 0LL;
  *(void *)(a1 + 16)  = 0LL;
  *(void *)a1  = 0LL;
  return result;
}

void otbr::Mdns::Publisher::MakeFullServiceName( const void **a1@<X0>, const std::string::value_type *a2@<X1>, std::string *a3@<X8>)
{
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (v5 == -1LL)
  {
    __break(0x5500u);
  }

  else
  {
    p_p  = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v5 + 1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      p_p  = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v5)
    {
      else {
        uint64_t v8 = *a1;
      }
      memmove(p_p, v8, v5);
    }

    *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v5)  = 46;
    char v9 = std::string::append[abi:ne180100](&__p, a2);
    __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v13.__r_.__value_.__l.__cap_  = v9->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v13.__r_.__value_.__l.__data_  = v10;
    v9->__r_.__value_.__l.__size_  = 0LL;
    v9->__r_.__value_.__l.__cap_  = 0LL;
    v9->__r_.__value_.__r.__words[0]  = 0LL;
    std::string::size_type v11 = std::string::append(&v13, ".local");
    *a3  = *v11;
    v11->__r_.__value_.__l.__size_  = 0LL;
    v11->__r_.__value_.__l.__cap_  = 0LL;
    v11->__r_.__value_.__r.__words[0]  = 0LL;
  }

void sub_100372F80( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t otbr::Mdns::Publisher::MakeFullHostName@<X0>(const void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = a2;
  else {
    size_t v4 = (size_t)a1[1];
  }
  if (v4 >= 0xFFFFFFFFFFFFFFFALL)
  {
    __break(0x5500u);
  }

  else
  {
    uint64_t result = std::string::basic_string[abi:ne180100](a2, v4 + 6);
    else {
      size_t v5 = *(void **)result;
    }
    if (v4)
    {
      else {
        unint64_t v6 = *a1;
      }
      uint64_t result = (uint64_t)memmove(v5, v6, v4);
    }

    strcpy((char *)v5 + v4, ".local");
  }

  return result;
}

void otbr::Mdns::Publisher::AddServiceRegistration(uint64_t a1, unint64_t *a2)
{
  unint64_t v3 = (uint64_t **)(a1 + 8);
  otbr::Mdns::Publisher::MakeFullServiceName( (const void **)(*a2 + 72),  (const std::string::value_type *)(*a2 + 96),  &__p);
  std::map<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>::emplace[abi:ne180100]<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>( v3,  (const void **)&__p.__r_.__value_.__l.__data_,  a2);
}

void sub_1003730B4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>::emplace[abi:ne180100]<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>( uint64_t **a1, const void **a2, unint64_t *a3)
{
  return std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::__emplace_unique_key_args<std::string,std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>( a1,  a2,  (__n128 *)a2,  a3);
}

void otbr::Mdns::Publisher::RemoveServiceRegistration( uint64_t a1, uint64_t a2, const std::string::value_type *a3, int a4)
{
  uint64_t v7 = a1 + 8;
  otbr::Mdns::Publisher::MakeFullServiceName((const void **)a2, a3, &__p);
  std::string v13 = (uint64_t *)std::__tree<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::__map_value_compare<std::string,std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>>>::find<std::string>( v7,  (const void **)&__p.__r_.__value_.__l.__data_);
  else {
    BOOL v14 = *(const void **)a2;
  }
  otbrLog(6u, "MDNS", "Removing service %s.%s", v8, v9, v10, v11, v12, (char)v14);
  if ((uint64_t *)(a1 + 16) != v13)
  {
    int v15 = (std::string *)v13[7];
    v13[7]  = 0LL;
    std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::erase( v7,  v13);
    otbr::Mdns::Publisher::ServiceRegistration::Complete(v15, a4);
    if (v15) {
      (*(void (**)(std::string *))(v15->__r_.__value_.__r.__words[0] + 8))(v15);
    }
  }

void sub_1003731E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *otbr::Mdns::Publisher::ServiceRegistration::Complete(std::string *a1, int a2)
{
  return otbr::Mdns::Publisher::Registration::TriggerCompleteCallback(a1);
}

uint64_t otbr::Mdns::Publisher::FindServiceRegistration( uint64_t a1, const void **a2, const std::string::value_type *a3)
{
  uint64_t v4 = a1 + 8;
  otbr::Mdns::Publisher::MakeFullServiceName(a2, a3, &__p);
  uint64_t v5 = std::__tree<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::__map_value_compare<std::string,std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>>>::find<std::string>( v4,  (const void **)&__p.__r_.__value_.__l.__data_);
  if (a1 + 16 == v5) {
    return 0LL;
  }
  else {
    return *(void *)(v5 + 56);
  }
}

void sub_1003732B4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t otbr::Mdns::Publisher::HandleDuplicateServiceRegistration@<X0>( uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, std::string::value_type *a4@<X3>, unsigned __int8 **a5@<X4>, int a6@<W5>, unsigned __int8 **a7@<X6>, void *a8@<X7>, uint64_t a9@<X8>)
{
  ServiceRegistration  = otbr::Mdns::Publisher::FindServiceRegistration(a1, (const void **)a3, a4);
  if (!ServiceRegistration) {
    return otbr::OnceCallback<void ()(otbrError)>::OnceCallback(a9, a8);
  }
  uint64_t v19 = ServiceRegistration;
  if (otbr::Mdns::Publisher::ServiceRegistration::IsOutdated( ServiceRegistration,  a2,  (unsigned __int8 *)a3,  (unsigned __int8 *)a4,  a5,  a6,  a7))
  {
    else {
      uint64_t v25 = *(const void **)a3;
    }
    otbrLog(6u, "MDNS", "Removing existing service %s.%s: outdated", v20, v21, v22, v23, v24, (char)v25);
    otbr::Mdns::Publisher::RemoveServiceRegistration(a1, a3, a4, -12);
    return otbr::OnceCallback<void ()(otbrError)>::OnceCallback(a9, a8);
  }

  if (!*(void *)(v19 + 32))
  {
    otbr::OnceCallback<void ()(otbrError)>::operator()(a8);
    return otbr::OnceCallback<void ()(otbrError)>::OnceCallback(a9, a8);
  }

  std::allocate_shared[abi:ne180100]<otbr::OnceCallback<void ()(otbrError)>,std::allocator<otbr::OnceCallback<void ()(otbrError)>>,otbr::OnceCallback<void ()(otbrError)>,void>( (void *)(v19 + 8),  &v36);
  std::allocate_shared[abi:ne180100]<otbr::OnceCallback<void ()(otbrError)>,std::allocator<otbr::OnceCallback<void ()(otbrError)>>,otbr::OnceCallback<void ()(otbrError)>,void>( a8,  &v34);
  uint64_t v26 = v36;
  int v27 = v37;
  uint64_t v36 = 0LL;
  __n128 v37 = 0LL;
  uint64_t v28 = v34;
  __int128 v29 = v35;
  uint64_t v34 = 0LL;
  uint64_t v35 = 0LL;
  uint64_t v42 = v26;
  uint64_t v43 = v27;
  uint64_t v38 = 0LL;
  uint64_t v39 = 0LL;
  uint64_t v44 = v28;
  uint64_t v45 = v29;
  uint64_t v40 = 0LL;
  uint64_t v41 = 0LL;
  size_t v30 = operator new(0x30uLL);
  *size_t v30 = off_1004482D8;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::placeholders::__ph<1>>::__tuple_impl( (uint64_t)(v30 + 2),  (uint64_t)&v42);
  std::string v47 = v30;
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  otbr::OnceCallback<void ()(otbrError)>::operator=((void *)(v19 + 8), v46);
  int v31 = v47;
  if (v47 == v46)
  {
    uint64_t v32 = 4LL;
    int v31 = v46;
    goto LABEL_17;
  }

  if (v47)
  {
    uint64_t v32 = 5LL;
LABEL_17:
    (*(void (**)(void))(*v31 + 8 * v32))();
  }

  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  return otbr::OnceCallback<void ()(otbrError)>::OnceCallback(a9, a8);
}

void sub_1003734F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, std::__shared_weak_count *a22)
{
  if (v25)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    uint64_t v24 = a22;
  }

  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100](v23);
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100](v22);
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t otbr::Mdns::Publisher::ServiceRegistration::IsOutdated( uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 **a5, int a6, unsigned __int8 **a7)
{
  else {
    size_t v13 = *(unsigned __int8 *)(a1 + 71);
  }
  uint64_t v14 = a2[23];
  int v15 = (char)v14;
  if ((v14 & 0x80u) != 0LL) {
    uint64_t v14 = *((void *)a2 + 1);
  }
  if (v13 != v14) {
    return 1LL;
  }
  uint64_t v16 = (const void **)(a1 + 48);
  if (v15 < 0) {
    a2  = *(unsigned __int8 **)a2;
  }
  if ((*(_BYTE *)(a1 + 71) & 0x80) != 0)
  {
    if (memcmp(*v16, a2, v13)) {
      return 1LL;
    }
  }

  else if (v13)
  {
    while (*(unsigned __int8 *)v16 == *a2)
    {
      uint64_t v16 = (const void **)((char *)v16 + 1);
      ++a2;
      if (!--v13) {
        goto LABEL_15;
      }
    }

    return 1LL;
  }

uint64_t otbr::Mdns::Publisher::HandleDuplicateHostRegistration@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  HostRegistration  = otbr::Mdns::Publisher::FindHostRegistration(a1, (const void **)a2);
  if (!HostRegistration) {
    return otbr::OnceCallback<void ()(otbrError)>::OnceCallback(a5, a4);
  }
  uint64_t v11 = HostRegistration;
  if (otbr::Mdns::Publisher::HostRegistration::IsOutdated(HostRegistration, (unsigned __int8 *)a2, a3))
  {
    else {
      size_t v17 = *(const void **)a2;
    }
    otbrLog(6u, "MDNS", "Removing existing host %s: outdated", v12, v13, v14, v15, v16, (char)v17);
    otbr::Mdns::Publisher::RemoveHostRegistration(a1, v11 + 48, -12);
    return otbr::OnceCallback<void ()(otbrError)>::OnceCallback(a5, a4);
  }

  if (!*(void *)(v11 + 32))
  {
    otbr::OnceCallback<void ()(otbrError)>::operator()(a4);
    return otbr::OnceCallback<void ()(otbrError)>::OnceCallback(a5, a4);
  }

  std::allocate_shared[abi:ne180100]<otbr::OnceCallback<void ()(otbrError)>,std::allocator<otbr::OnceCallback<void ()(otbrError)>>,otbr::OnceCallback<void ()(otbrError)>,void>( (void *)(v11 + 8),  &v28);
  std::allocate_shared[abi:ne180100]<otbr::OnceCallback<void ()(otbrError)>,std::allocator<otbr::OnceCallback<void ()(otbrError)>>,otbr::OnceCallback<void ()(otbrError)>,void>( a4,  &v26);
  uint64_t v18 = v28;
  int v19 = v29;
  uint64_t v28 = 0LL;
  __int128 v29 = 0LL;
  uint64_t v20 = v26;
  uint64_t v21 = v27;
  uint64_t v26 = 0LL;
  int v27 = 0LL;
  uint64_t v34 = v18;
  BOOL v35 = v19;
  uint64_t v30 = 0LL;
  uint64_t v31 = 0LL;
  uint64_t v36 = v20;
  char v37 = v21;
  uint64_t v32 = 0LL;
  uint64_t v33 = 0LL;
  size_t v22 = operator new(0x30uLL);
  *size_t v22 = off_1004483D0;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::placeholders::__ph<1>>::__tuple_impl( (uint64_t)(v22 + 2),  (uint64_t)&v34);
  uint64_t v39 = v22;
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  otbr::OnceCallback<void ()(otbrError)>::operator=((void *)(v11 + 8), v38);
  uint64_t v23 = v39;
  if (v39 == v38)
  {
    uint64_t v24 = 4LL;
    uint64_t v23 = v38;
    goto LABEL_17;
  }

  if (v39)
  {
    uint64_t v24 = 5LL;
LABEL_17:
    (*(void (**)(void))(*v23 + 8 * v24))();
  }

  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  return otbr::OnceCallback<void ()(otbrError)>::OnceCallback(a5, a4);
}

void sub_100373988( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, std::__shared_weak_count *a21)
{
  if (v24)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    uint64_t v23 = a21;
  }

  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100](v22);
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100](v21);
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t otbr::Mdns::Publisher::FindHostRegistration(uint64_t a1, const void **a2)
{
  uint64_t v3 = a1 + 32;
  otbr::Mdns::Publisher::MakeFullHostName(a2, (uint64_t)__p);
  uint64_t v4 = std::__tree<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::__map_value_compare<std::string,std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>>>::find<std::string>( v3,  (const void **)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (a1 + 40 == v4) {
    return 0LL;
  }
  else {
    return *(void *)(v4 + 56);
  }
}

void sub_100373A4C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t otbr::Mdns::Publisher::HostRegistration::IsOutdated(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  else {
    size_t v5 = *(unsigned __int8 *)(a1 + 71);
  }
  uint64_t v6 = a2[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0LL) {
    uint64_t v6 = *((void *)a2 + 1);
  }
  if (v5 != v6) {
    return 1LL;
  }
  uint64_t v8 = (const void **)(a1 + 48);
  if (v7 < 0) {
    a2  = *(unsigned __int8 **)a2;
  }
  if ((*(_BYTE *)(a1 + 71) & 0x80) != 0)
  {
    if (memcmp(*v8, a2, v5)) {
      return 1LL;
    }
  }

  else if (v5)
  {
    while (*(unsigned __int8 *)v8 == *a2)
    {
      uint64_t v8 = (const void **)((char *)v8 + 1);
      ++a2;
      if (!--v5) {
        goto LABEL_15;
      }
    }

    return 1LL;
  }

void otbr::Mdns::Publisher::RemoveHostRegistration(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = a1 + 32;
  otbr::Mdns::Publisher::MakeFullHostName((const void **)a2, (uint64_t)__p);
  uint64_t v12 = (uint64_t *)std::__tree<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::__map_value_compare<std::string,std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>>>::find<std::string>( v6,  (const void **)__p);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  else {
    uint64_t v13 = *(const void **)a2;
  }
  otbrLog(6u, "MDNS", "Removing host %s", v7, v8, v9, v10, v11, (char)v13);
  if ((uint64_t *)(a1 + 40) != v12)
  {
    uint64_t v14 = (void *)v12[7];
    v12[7]  = 0LL;
    std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::erase( v6,  v12);
    otbr::Mdns::Publisher::HostRegistration::Complete(v14, a3);
    else {
      uint64_t v20 = *(const void **)a2;
    }
    otbrLog(6u, "MDNS", "Removed host %s", v15, v16, v17, v18, v19, (char)v20);
    if (v14) {
      (*(void (**)(void *))(*v14 + 8LL))(v14);
    }
  }

void sub_100373C6C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void otbr::Mdns::Publisher::AddHostRegistration(uint64_t a1, unint64_t *a2)
{
  uint64_t v3 = (uint64_t **)(a1 + 32);
  otbr::Mdns::Publisher::MakeFullHostName((const void **)(*a2 + 48), (uint64_t)__p);
  std::map<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>::emplace[abi:ne180100]<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>( v3,  (const void **)__p,  a2);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100373CFC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *otbr::Mdns::Publisher::HostRegistration::Complete(void *a1, int a2)
{
  return otbr::Mdns::Publisher::Registration::TriggerCompleteCallback(a1);
}

void otbr::Mdns::Publisher::Registration::~Registration(otbr::Mdns::Publisher::Registration *this)
{
  *(void *)this  = off_100448258;
  otbr::Mdns::Publisher::Registration::TriggerCompleteCallback(this);
  uint64_t v2 = (otbr::Mdns::Publisher::Registration *)*((void *)this + 4);
  if (v2 == (otbr::Mdns::Publisher::Registration *)((char *)this + 8))
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = (otbr::Mdns::Publisher::Registration *)((char *)this + 8);
  }

  else
  {
    if (!v2) {
      return;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*(void *)v2 + 8 * v3))();
}

{
  void *v1;
  otbr::Mdns::Publisher::Registration::~Registration(this);
  operator delete(v1);
}

void *otbr::Mdns::Publisher::Registration::TriggerCompleteCallback(void *result)
{
  if (result[4]) {
    return otbr::OnceCallback<void ()(otbrError)>::operator()(result + 1);
  }
  return result;
}

void otbr::Mdns::Publisher::ServiceRegistration::OnComplete(const std::string *a1, int a2)
{
  if (a1[1].__r_.__value_.__l.__size_)
  {
    otbr::Mdns::Publisher::UpdateMdnsResponseCounters((int *)(a1[1].__r_.__value_.__l.__cap_ + 216), a2);
    otbr::Mdns::Publisher::UpdateServiceRegistrationEmaLatency(a1[1].__r_.__value_.__l.__cap_, a1 + 3, a1 + 4, a2);
  }

void otbr::Mdns::Publisher::UpdateServiceRegistrationEmaLatency( uint64_t a1, const std::string *a2, const std::string *a3, int a4)
{
  uint64_t v6 = a1 + 88;
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(&v16, a2, a3);
  uint64_t v7 = (uint64_t *)std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::find<std::pair<std::string,std::string>>( v6,  (const void **)&v16.__r_.__value_.__l.__data_);
  if (v18 < 0) {
    operator delete(__p);
  }
  if ((uint64_t *)(a1 + 96) != v7)
  {
    v8.__d_.__rep_  = std::chrono::steady_clock::now().__d_.__rep_;
    uint64_t v9 = v7[10];
    BOOL v10 = __OFSUB__(v8.__d_.__rep_, v9);
    int v11 = LODWORD(v8.__d_.__rep_) - v9;
    if (v10)
    {
      __break(0x5515u);
    }

    else
    {
      if (a4 == -12)
      {
LABEL_12:
        std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::erase( v6,  v7);
        return;
      }

      int v12 = v11 / 1000000;
      int v13 = *(_DWORD *)(a1 + 316);
      if (!v13)
      {
LABEL_11:
        *(_DWORD *)(a1 + 316)  = v12;
        goto LABEL_12;
      }

      BOOL v14 = __CFADD__(v12, v13);
      unsigned int v15 = v12 + v13;
      if (!v14)
      {
        int v12 = v15 >> 1;
        goto LABEL_11;
      }
    }

    __break(0x5500u);
  }

void sub_100373F04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t otbr::Mdns::Publisher::HostRegistration::OnComplete(uint64_t result, int a2)
{
  if (*(void *)(result + 32))
  {
    uint64_t v3 = result;
    otbr::Mdns::Publisher::UpdateMdnsResponseCounters((int *)(*(void *)(result + 40) + 184LL), a2);
    return otbr::Mdns::Publisher::UpdateHostRegistrationEmaLatency(*(void *)(v3 + 40), (const void **)(v3 + 48), a2);
  }

  return result;
}

uint64_t otbr::Mdns::Publisher::UpdateHostRegistrationEmaLatency(uint64_t a1, const void **a2, int a3)
{
  uint64_t v5 = a1 + 112;
  uint64_t result = std::__tree<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::__map_value_compare<std::string,std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>>>::find<std::string>( a1 + 112,  a2);
  if (a1 + 120 != result)
  {
    uint64_t v7 = result;
    uint64_t result = std::chrono::steady_clock::now().__d_.__rep_;
    uint64_t v8 = *(void *)(v7 + 56);
    BOOL v9 = __OFSUB__(result, v8);
    int v10 = result - v8;
    if (v9)
    {
      __break(0x5515u);
    }

    else
    {
      if (a3 == -12) {
        return std::__tree<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::erase( v5,  v7);
      }
      int v11 = v10 / 1000000;
      int v12 = *(_DWORD *)(a1 + 312);
      if (!v12)
      {
LABEL_7:
        *(_DWORD *)(a1 + 31ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = v11;
        return std::__tree<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::erase( v5,  v7);
      }

      BOOL v13 = __CFADD__(v11, v12);
      unsigned int v14 = v11 + v12;
      if (!v13)
      {
        int v11 = v14 >> 1;
        goto LABEL_7;
      }
    }

    __break(0x5500u);
  }

  return result;
}

unsigned int *otbr::Mdns::Publisher::UpdateEmaLatency(unsigned int *result, unsigned int a2, int a3)
{
  if (a3 != -12)
  {
    unsigned int v3 = *result;
    if (*result)
    {
      BOOL v4 = __CFADD__(a2, v3);
      unsigned int v5 = a2 + v3;
      if (v4)
      {
        __break(0x5500u);
        return result;
      }

      a2  = v5 >> 1;
    }

    *uint64_t result = a2;
  }

  return result;
}

uint64_t std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>::pair[abi:ne180100]<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>,0>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = std::__function::__value_func<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>::__value_func[abi:ne180100]( a1,  a2);
  std::__function::__value_func<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>::__value_func[abi:ne180100]( v5 + 32,  a3);
  return a1;
}

uint64_t std::__function::__value_func<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>::__value_func[abi:ne180100]( uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v4;
  }

  else
  {
    unsigned int v3 = (void *)(a1 + 24);
  }

  void *v3 = 0LL;
  return a1;
}

uint64_t std::__function::__value_func<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>::__value_func[abi:ne180100]( uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v4;
  }

  else
  {
    unsigned int v3 = (void *)(a1 + 24);
  }

  void *v3 = 0LL;
  return a1;
}

uint64_t std::vector<unsigned char>::__push_back_slow_path<unsigned char>(uint64_t *a1, _BYTE *a2)
{
  uint64_t v2 = a1[1] - *a1;
  unint64_t v3 = v2 + 1;
  if (v2 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }

  if ((v3 & 0x8000000000000000LL) != 0) {
    goto LABEL_10;
  }
  unint64_t v6 = a1[2] - *a1;
  if (2 * v6 > v3) {
    unint64_t v3 = 2 * v6;
  }
  if (v6 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v7 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v7 = v3;
  }
  std::__split_buffer<unsigned char>::__split_buffer(v10, v7, v2, (uint64_t)(a1 + 2));
  *v11++  = *a2;
  std::vector<unsigned char>::__swap_out_circular_buffer(a1, v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<unsigned char>::~__split_buffer((uint64_t)v10);
  return v8;
}

void sub_1003741E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *std::vector<unsigned char>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  while (v3 != v2)
  {
    char v5 = *(_BYTE *)--v3;
    *(_BYTE *)--uint64_t v4 = v5;
  }

  a2[1]  = v4;
  uint64_t v6 = *result;
  *uint64_t result = v4;
  a2[1]  = v6;
  uint64_t v7 = result[1];
  result[1]  = a2[2];
  a2[2]  = v7;
  uint64_t v8 = result[2];
  result[2]  = a2[3];
  a2[3]  = v8;
  *a2  = a2[1];
  return result;
}

void *std::__split_buffer<unsigned char>::__split_buffer(void *a1, size_t __sz, uint64_t a3, uint64_t a4)
{
  a1[3]  = 0LL;
  a1[4]  = a4;
  if (__sz) {
    uint64_t v7 = (char *)operator new(__sz);
  }
  else {
    uint64_t v7 = 0LL;
  }
  *a1  = v7;
  a1[1]  = &v7[a3];
  a1[2]  = &v7[a3];
  a1[3]  = &v7[__sz];
  return a1;
}

uint64_t std::__split_buffer<unsigned char>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__split_buffer<unsigned char>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 16) != a2) {
    *(void *)(result + 16)  = a2;
  }
  return result;
}

char *std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>( char *result, char *a2, char *a3, char *a4, uint64_t a5)
{
  char v5 = a2;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v8 = (void **)result;
  uint64_t v9 = *((void *)result + 2);
  unint64_t v10 = *((void *)result + 1);
  if ((uint64_t)(v9 - v10) < a5)
  {
    int v11 = *(_BYTE **)result;
    unint64_t v12 = v10 - *(void *)result;
    BOOL v13 = __CFADD__(v12, a5);
    unint64_t v14 = v12 + a5;
    if (v13)
    {
      __break(0x5500u);
    }

    else if ((v14 & 0x8000000000000000LL) == 0)
    {
      uint64_t v15 = a2 - v11;
      unint64_t v16 = v9 - (void)v11;
      if (2 * v16 > v14) {
        unint64_t v14 = 2 * v16;
      }
      if (v16 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v17 = v14;
      }
      std::__split_buffer<unsigned char>::__split_buffer(v20, v17, v15, (uint64_t)(result + 16));
      std::__split_buffer<unsigned char>::__construct_at_end_with_size<std::__wrap_iter<char const*>>( (uint64_t)v20,  a3,  a5);
      char v5 = (char *)std::vector<unsigned char>::__swap_out_circular_buffer(v8, (uint64_t)v20, v5);
      std::__split_buffer<unsigned char>::~__split_buffer((uint64_t)v20);
      return v5;
    }

    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }

  uint64_t v18 = v10 - (void)a2;
  if ((uint64_t)(v10 - (void)a2) >= a5)
  {
    uint64_t v19 = &a3[a5];
    goto LABEL_16;
  }

  if (!__OFSUB__(a5, v18))
  {
    uint64_t v19 = &a3[v18];
    std::vector<unsigned char>::__construct_at_end<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>( (uint64_t)result,  &a3[v18],  a4);
    if (v18 < 1) {
      return v5;
    }
LABEL_16:
    std::vector<unsigned char>::__move_range(v8, v5, v10, &v5[a5]);
    if (v19 != a3) {
      memmove(v5, a3, v19 - a3);
    }
    return v5;
  }

  __break(0x5515u);
  return result;
}

void sub_100374444(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

_BYTE *std::vector<unsigned char>::__construct_at_end<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>( uint64_t a1, char *a2, char *a3)
{
  uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<unsigned char>,char const*,char const*,unsigned char *>( a1 + 16,  a2,  a3,  *(_BYTE **)(a1 + 8));
  *(void *)(a1 + 8)  = result;
  return result;
}

void sub_100374488(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8)  = v2;
  _Unwind_Resume(a1);
}

void *std::vector<unsigned char>::__move_range(void *result, char *a2, unint64_t a3, _BYTE *a4)
{
  uint64_t v4 = (_BYTE *)result[1];
  char v5 = &a2[v4 - a4];
  uint64_t v6 = v4;
  while ((unint64_t)v5 < a3)
  {
    char v7 = *v5++;
    *v6++  = v7;
  }

  result[1]  = v6;
  if (v4 != a4) {
    return memmove(a4, a2, v4 - a4);
  }
  return result;
}

uint64_t std::__split_buffer<unsigned char>::__construct_at_end_with_size<std::__wrap_iter<char const*>>( uint64_t result, char *a2, uint64_t a3)
{
  uint64_t v3 = *(_BYTE **)(result + 16);
  if (a3)
  {
    uint64_t v4 = &v3[a3];
    do
    {
      char v5 = *a2++;
      *v3++  = v5;
      --a3;
    }

    while (a3);
    uint64_t v3 = v4;
  }

  *(void *)(result + 16)  = v3;
  return result;
}

uint64_t std::vector<unsigned char>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    uint64_t v8 = __src;
    do
    {
      char v9 = *--v8;
      *(_BYTE *)--uint64_t v7 = v9;
    }

    while (v8 != v6);
  }

  *(void *)(a2 + 8)  = v7;
  unint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src) {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
  }
  *(void *)(a2 + 16)  = v11 + v12;
  BOOL v13 = (char *)*a1;
  *a1  = *(void **)(a2 + 8);
  *(void *)(a2 + 8)  = v13;
  unint64_t v14 = a1[1];
  a1[1]  = *(void **)(a2 + 16);
  *(void *)(a2 + 16)  = v14;
  uint64_t v15 = a1[2];
  a1[2]  = *(void **)(a2 + 24);
  *(void *)(a2 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v15;
  *(void *)a2  = *(void *)(a2 + 8);
  return v5;
}

_BYTE *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<unsigned char>,char const*,char const*,unsigned char *>( uint64_t a1, char *a2, char *a3, _BYTE *a4)
{
  uint64_t v4 = a4;
  unint64_t v10 = a4;
  char v9 = a4;
  v7[0]  = a1;
  v7[1]  = &v9;
  void v7[2] = &v10;
  while (a2 != a3)
  {
    char v5 = *a2++;
    _BYTE *v4 = v5;
    uint64_t v4 = ++v10;
  }

  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<unsigned char>,unsigned char *>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<unsigned char>,unsigned char *>>::~__exception_guard_exceptions[abi:ne180100]( uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    boost::any::holder<unsigned short>::~holder(a1);
  }
  return a1;
}

char *std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>( char *result, char *a2, char *a3, char *a4, uint64_t a5)
{
  char v5 = a2;
  if (a5 < 1) {
    return v5;
  }
  char v8 = result;
  uint64_t v9 = *((void *)result + 2);
  unint64_t v10 = *((void *)result + 1);
  if ((uint64_t)(v9 - v10) < a5)
  {
    uint64_t v11 = *(void *)result;
    unint64_t v12 = v10 - *(void *)result;
    BOOL v13 = __CFADD__(v12, a5);
    unint64_t v14 = v12 + a5;
    if (v13)
    {
      __break(0x5500u);
    }

    else if ((v14 & 0x8000000000000000LL) == 0)
    {
      uint64_t v15 = (uint64_t)&a2[-v11];
      unint64_t v16 = v9 - v11;
      if (2 * v16 > v14) {
        unint64_t v14 = 2 * v16;
      }
      if (v16 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v17 = v14;
      }
      std::__split_buffer<unsigned char>::__split_buffer(v21, v17, v15, (uint64_t)(result + 16));
      std::__split_buffer<unsigned char>::__construct_at_end_with_size<std::__wrap_iter<char const*>>( (uint64_t)v21,  a3,  a5);
      char v5 = (char *)std::vector<unsigned char>::__swap_out_circular_buffer((void **)v8, (uint64_t)v21, v5);
      std::__split_buffer<unsigned char>::~__split_buffer((uint64_t)v21);
      return v5;
    }

    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }

  uint64_t v18 = v10 - (void)a2;
  if ((uint64_t)(v10 - (void)a2) >= a5)
  {
    uint64_t v19 = &a3[a5];
LABEL_18:
    std::vector<unsigned char>::__move_range(v8, v5, v10, &v5[a5]);
    if (v19 != a3) {
      memmove(v5, a3, v19 - a3);
    }
    return v5;
  }

  if (!__OFSUB__(a5, v18))
  {
    uint64_t v19 = &a3[v18];
    int64_t v20 = a4 - &a3[v18];
    if (a4 != &a3[v18]) {
      memmove(*((void **)result + 1), &a3[v18], a4 - &a3[v18]);
    }
    *((void *)v8 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = v10 + v20;
    if (v18 < 1) {
      return v5;
    }
    goto LABEL_18;
  }

  __break(0x5515u);
  return result;
}

void sub_1003747C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_one_at_end[abi:ne180100]<char const*,int,unsigned char const*,int>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t result = std::allocator_traits<std::allocator<otbr::Mdns::Publisher::TxtEntry>>::construct[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry,char const*,int,unsigned char const*,int,void>( a1 + 16,  v6,  a2,  a3,  a4,  a5);
  *(void *)(a1 + 8)  = v6 + 48;
  return result;
}

void sub_100374818(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8)  = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<otbr::Mdns::Publisher::TxtEntry>::__emplace_back_slow_path<char const*,int,unsigned char const*,int>( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v7 = v6 + 1;
  if (v6 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }

  if (v7 > 0x555555555555555LL) {
    goto LABEL_10;
  }
  if (0x5555555555555556LL * ((a1[2] - *a1) >> 4) > v7) {
    unint64_t v7 = 0x5555555555555556LL * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v12 = 0x555555555555555LL;
  }
  else {
    unint64_t v12 = v7;
  }
  std::__split_buffer<otbr::Mdns::Publisher::TxtEntry>::__split_buffer(v15, v12, v6, (uint64_t)(a1 + 2));
  std::allocator_traits<std::allocator<otbr::Mdns::Publisher::TxtEntry>>::construct[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry,char const*,int,unsigned char const*,int,void>( a1 + 2,  v16,  a2,  a3,  a4,  a5);
  v16 += 48LL;
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<otbr::Mdns::Publisher::TxtEntry>::~__split_buffer(v15);
  return v13;
}

void sub_100374928(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

otbr::Mdns::Publisher::TxtEntry *std::allocator<otbr::Mdns::Publisher::TxtEntry>::construct[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry,char const*,int,unsigned char const*,int>( int a1, otbr::Mdns::Publisher::TxtEntry *this, char **a3, int *a4, const unsigned __int8 **a5, int *a6)
{
  return otbr::Mdns::Publisher::TxtEntry::TxtEntry(this, *a3, *a4, *a5, *a6);
}

otbr::Mdns::Publisher::TxtEntry *otbr::Mdns::Publisher::TxtEntry::TxtEntry( otbr::Mdns::Publisher::TxtEntry *this, char *a2, size_t a3, const unsigned __int8 *a4, uint64_t a5)
{
  char v8 = std::string::basic_string[abi:ne180100](this, a2, a3);
  std::vector<unsigned char>::vector<unsigned char const*,0>(v8 + 3, a4, (uint64_t)&a4[a5]);
  return this;
}

void sub_10037499C(_Unwind_Exception *exception_object)
{
}

void *std::string::basic_string[abi:ne180100](void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8LL) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    if ((__len | 7) == 0x17) {
      size_t v7 = 25LL;
    }
    else {
      size_t v7 = (__len | 7) + 1;
    }
    uint64_t v6 = operator new(v7);
    __dst[1]  = __len;
    __dst[2]  = v7 | 0x8000000000000000LL;
    void *__dst = v6;
  }

  else
  {
    *((_BYTE *)__dst + 2ot::NetworkData::NetworkDataTlv::SetType(this, 3) = __len;
    uint64_t v6 = __dst;
    if (!__len) {
      goto LABEL_10;
    }
  }

  memmove(v6, __src, __len);
LABEL_10:
  *((_BYTE *)v6 + __len)  = 0;
  return __dst;
}

void *std::vector<unsigned char>::vector<unsigned char const*,0>(void *a1, const void *a2, uint64_t a3)
{
  *a1  = 0LL;
  a1[1]  = 0LL;
  a1[2]  = 0LL;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>( a1,  a2,  a3,  a3 - (void)a2);
  return a1;
}

uint64_t std::vector<otbr::Mdns::Publisher::TxtEntry>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<otbr::Mdns::Publisher::TxtEntry>,std::reverse_iterator<otbr::Mdns::Publisher::TxtEntry*>,std::reverse_iterator<otbr::Mdns::Publisher::TxtEntry*>,std::reverse_iterator<otbr::Mdns::Publisher::TxtEntry*>>( (uint64_t)(a1 + 2),  a1[1],  (__int128 *)a1[1],  *a1,  (__int128 *)*a1,  a2[1],  a2[1]);
  a2[1]  = v5;
  uint64_t v6 = *a1;
  *a1  = v5;
  a2[1]  = v6;
  uint64_t v7 = a1[1];
  a1[1]  = a2[2];
  a2[2]  = v7;
  uint64_t v8 = a1[2];
  a1[2]  = a2[3];
  a2[3]  = v8;
  *a2  = a2[1];
  return result;
}

void *std::__split_buffer<otbr::Mdns::Publisher::TxtEntry>::__split_buffer( void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[3]  = 0LL;
  a1[4]  = a4;
  if (a2) {
    uint64_t v7 = (char *)std::allocator<otbr::Mdns::Publisher::TxtEntry>::allocate[abi:ne180100](a4, a2);
  }
  else {
    uint64_t v7 = 0LL;
  }
  uint64_t v8 = &v7[48 * a3];
  *a1  = v7;
  a1[1]  = v8;
  a1[2]  = v8;
  a1[3]  = &v7[48 * a2];
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<otbr::Mdns::Publisher::TxtEntry>,std::reverse_iterator<otbr::Mdns::Publisher::TxtEntry*>,std::reverse_iterator<otbr::Mdns::Publisher::TxtEntry*>,std::reverse_iterator<otbr::Mdns::Publisher::TxtEntry*>>( uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v16 = a6;
  *((void *)&v16 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = a7;
  __int128 v15 = v16;
  v13[0]  = a1;
  v13[1]  = &v15;
  _BYTE v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }

  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 3;
      std::allocator<otbr::Mdns::Publisher::TxtEntry>::construct[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry,otbr::Mdns::Publisher::TxtEntry>( a1,  v7 - 48,  v9);
      uint64_t v7 = *((void *)&v16 + 1) - 48LL;
      *((void *)&v16 + 1) -= 48LL;
    }

    while (v9 != a5);
    uint64_t v11 = v16;
  }

  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<otbr::Mdns::Publisher::TxtEntry>,std::reverse_iterator<otbr::Mdns::Publisher::TxtEntry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

__n128 std::allocator<otbr::Mdns::Publisher::TxtEntry>::construct[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry,otbr::Mdns::Publisher::TxtEntry>( uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3 = *a3;
  *(void *)(a2 + 16)  = *((void *)a3 + 2);
  *(_OWORD *)a2  = v3;
  *((void *)a3 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = 0LL;
  *((void *)a3 + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  *(void *)a3  = 0LL;
  *(void *)(a2 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0LL;
  *(void *)(a2 + 3ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  *(void *)(a2 + 4ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 0LL;
  __n128 result = *(__n128 *)((char *)a3 + 24);
  *(__n128 *)(a2 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = result;
  *(void *)(a2 + 4ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = *((void *)a3 + 5);
  *((void *)a3 + ot::NetworkData::NetworkDataTlv::SetType(this, 3) = 0LL;
  *((void *)a3 + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0LL;
  *((void *)a3 + 5)  = 0LL;
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<otbr::Mdns::Publisher::TxtEntry>,std::reverse_iterator<otbr::Mdns::Publisher::TxtEntry*>>>::~__exception_guard_exceptions[abi:ne180100]( uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<otbr::Mdns::Publisher::TxtEntry>,std::reverse_iterator<otbr::Mdns::Publisher::TxtEntry*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<otbr::Mdns::Publisher::TxtEntry>,std::reverse_iterator<otbr::Mdns::Publisher::TxtEntry*>>::operator()[abi:ne180100]( uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v10 = *(void *)a1[2];
  uint64_t v11 = v1;
  uint64_t v12 = v10;
  uint64_t v13 = v1;
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(a1[1] + 8);
  uint64_t v5 = *(void *)a1[1];
  uint64_t v6 = v3;
  uint64_t v7 = v5;
  uint64_t v8 = v3;
  std::__allocator_destroy[abi:ne180100]<std::allocator<otbr::Mdns::Publisher::TxtEntry>,std::reverse_iterator<std::reverse_iterator<otbr::Mdns::Publisher::TxtEntry*>>,std::reverse_iterator<std::reverse_iterator<otbr::Mdns::Publisher::TxtEntry*>>>( v2,  (uint64_t)v9,  (uint64_t)v4);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<otbr::Mdns::Publisher::TxtEntry>,std::reverse_iterator<std::reverse_iterator<otbr::Mdns::Publisher::TxtEntry*>>,std::reverse_iterator<std::reverse_iterator<otbr::Mdns::Publisher::TxtEntry*>>>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(void *)(a2 + 32); i != *(void *)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    std::allocator<otbr::Mdns::Publisher::TxtEntry>::destroy[abi:ne180100](a1, i);
    uint64_t i = *(void *)(a2 + 32) + 48LL;
  }

void *std::__split_buffer<otbr::Mdns::Publisher::TxtEntry>::~__split_buffer(void *a1)
{
  __n128 result = (void *)*a1;
  if (!*a1) {
    return a1;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[3] - (void)result) >> 4) < 0x555555555555556LL)
  {
    operator delete(result);
    return a1;
  }

  __break(0x550Cu);
  return result;
}

void std::__split_buffer<otbr::Mdns::Publisher::TxtEntry>::__destruct_at_end[abi:ne180100]( uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 16)  = i - 48;
    std::allocator<otbr::Mdns::Publisher::TxtEntry>::destroy[abi:ne180100](v5, i - 48);
  }

uint64_t std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::__erase_unique<unsigned long long>( uint64_t a1, unint64_t *a2)
{
  uint64_t v3 = std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::find<unsigned long long>( a1,  a2);
  std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::erase( a1,  v3);
  return 1LL;
}

void *std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::find<unsigned long long>( uint64_t a1, unint64_t *a2)
{
  uint64_t v3 = (void *)(a1 + 8);
  __n128 result = std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::__lower_bound<unsigned long long>( a1,  a2,  *(void **)(a1 + 8),  (void *)(a1 + 8));
  if (v3 == result || *a2 < result[4]) {
    return v3;
  }
  return result;
}

uint64_t std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::erase( uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::__map_value_compare<std::string,std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>>>::__remove_node_pointer( a1,  a2);
  std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,0>(a2 + 4);
  operator delete(a2);
  return v3;
}

void *std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::__lower_bound<unsigned long long>( uint64_t a1, unint64_t *a2, void *a3, void *a4)
{
  __n128 result = a4;
  if (a3)
  {
    unint64_t v5 = *a2;
    do
    {
      unint64_t v6 = a3[4];
      BOOL v7 = v6 >= v5;
      if (v6 >= v5) {
        uint64_t v8 = a3;
      }
      else {
        uint64_t v8 = a3 + 1;
      }
      if (v7) {
        __n128 result = a3;
      }
      a3  = (void *)*v8;
    }

    while (*v8);
  }

  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>( uint64_t **a1, unint64_t *a2, void *a3, uint64_t a4)
{
  BOOL v7 = (uint64_t **)std::__tree<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::__map_value_compare<_DNSRecordRef_t *,std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::less<_DNSRecordRef_t *>,true>,std::allocator<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>>>::__find_equal<_DNSRecordRef_t *>( (uint64_t)a1,  &v12,  a2);
  uint64_t v8 = *v7;
  if (!*v7)
  {
    uint64_t v9 = v7;
    std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::__construct_node<unsigned long long &,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>( (uint64_t)a1,  a3,  a4,  (uint64_t)v11);
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__insert_node_at( a1,  v12,  v9,  v11[0]);
    uint64_t v8 = v11[0];
    v11[0]  = 0LL;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,void *>>>>::reset[abi:ne180100]( v11,  0LL);
  }

  return v8;
}

uint64_t std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::__construct_node<unsigned long long &,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>@<X0>( uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t v8 = operator new(0x68uLL);
  *(void *)a4  = v8;
  *(void *)(a4 + 8)  = v7;
  *(_BYTE *)(a4 + 16)  = 0;
  uint64_t result = std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,void *>>>::construct[abi:ne180100]<std::pair<unsigned long long const,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,unsigned long long &,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>,void>( v7,  v8 + 4,  a2,  a3);
  *(_BYTE *)(a4 + 16)  = 1;
  return result;
}

void sub_100374FE8(_Unwind_Exception *a1)
{
}

uint64_t std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,void *>>>::construct[abi:ne180100]<std::pair<unsigned long long const,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,unsigned long long &,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>,void>( uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  *a2  = *a3;
  return std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>::pair[abi:ne180100]( (uint64_t)(a2 + 1),  a4);
}

uint64_t std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>::pair[abi:ne180100]( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = std::__function::__value_func<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>::__value_func[abi:ne180100]( a1,  a2);
  std::__function::__value_func<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>::__value_func[abi:ne180100]( v4 + 32,  a2 + 32);
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,void *>>>>::reset[abi:ne180100]( void **a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1  = a2;
  if (v3) {
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,void *>>>::operator()[abi:ne180100]( (uint64_t)(a1 + 1),  v3);
  }
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,void *>>>::operator()[abi:ne180100]( uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8)) {
    std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,0>(__p + 4);
  }
  if (__p) {
    operator delete(__p);
  }
}

uint64_t std::vector<unsigned long long>::__push_back_slow_path<unsigned long long const&>( uint64_t *a1, void *a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 3;
  unint64_t v3 = v2 + 1;
  if (v2 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }

  if (v3 >> 61) {
    goto LABEL_10;
  }
  unint64_t v6 = a1[2] - *a1;
  if (v6 >> 2 > v3) {
    unint64_t v3 = v6 >> 2;
  }
  if (v6 >= 0x7FFFFFFFFFFFFFF8LL) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  std::__split_buffer<_DNSServiceRef_t *>::__split_buffer(v11, v7, v2, (uint64_t)(a1 + 2));
  uint64_t v8 = v12;
  *uint64_t v12 = *a2;
  uint64_t v12 = v8 + 1;
  std::vector<_DNSServiceRef_t *>::__swap_out_circular_buffer(a1, v11);
  uint64_t v9 = a1[1];
  std::__split_buffer<_DNSServiceRef_t *>::~__split_buffer(v11);
  return v9;
}

void sub_100375150(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t std::__function::__value_func<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>::operator()[abi:ne180100]( uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48LL))(v1);
}

void std::__introsort<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*,false>( void **a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v7 = a2;
  uint64_t v8 = a1;
  v238  = (void **)a2;
  v239  = a1;
  while (2)
  {
    uint64_t v9 = v7 - (void)v8;
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v8) >> 4);
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        uint64_t v102 = (const void *)(v7 - 48);
        v238  = (void **)(v7 - 48);
        if (*((char *)v8 + 23) < 0)
        {
          v224  = v8;
          uint64_t v8 = (void **)*v8;
          size_t v103 = (size_t)v224[1];
        }

        else
        {
          size_t v103 = *((unsigned __int8 *)v8 + 23);
        }

        if (*(char *)(v7 - 25) < 0)
        {
          uint64_t v102 = *(const void **)(v7 - 48);
          v225  = *(void *)(v7 - 40);
        }

        else
        {
          v225  = *(unsigned __int8 *)(v7 - 25);
        }

        if (v103 >= v225) {
          v226  = v225;
        }
        else {
          v226  = v103;
        }
        v227  = memcmp(v102, v8, v226);
        v228  = v225 < v103;
        if (v227) {
          v228  = v227 < 0;
        }
        if (v228) {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry *&,otbr::Mdns::Publisher::TxtEntry *&>( (uint64_t *)&v239,  (uint64_t *)&v238);
        }
        return;
      case 3uLL:
        v238  = (void **)(v7 - 48);
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*>( (uint64_t)v8,  (const void **)v8 + 6,  v7 - 48);
        return;
      case 4uLL:
        v238  = (void **)(v7 - 48);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*>( (uint64_t)v8,  (const void **)v8 + 6,  (uint64_t)(v8 + 12),  v7 - 48);
        return;
      case 5uLL:
        v238  = (void **)(v7 - 48);
        std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*,0>( (uint64_t)v8,  (const void **)v8 + 6,  (uint64_t)(v8 + 12),  (uint64_t)(v8 + 18),  v7 - 48);
        return;
      default:
        if (v9 <= 1151)
        {
          if ((a5 & 1) != 0)
          {
            if (v8 != (void **)v7)
            {
              uint64_t v104 = (const void **)(v8 + 6);
              if (v8 + 6 != (void **)v7)
              {
                uint64_t v105 = 0LL;
                BOOL v106 = v8;
                do
                {
                  BOOL v107 = v104;
                  if (*((char *)v106 + 23) < 0)
                  {
                    unsigned int v109 = *v106;
                    size_t v108 = (size_t)v106[1];
                  }

                  else
                  {
                    size_t v108 = *((unsigned __int8 *)v106 + 23);
                    unsigned int v109 = v106;
                  }

                  if (*((char *)v106 + 71) < 0)
                  {
                    size_t v110 = (size_t)v106[7];
                    char v111 = *v104;
                  }

                  else
                  {
                    size_t v110 = *((unsigned __int8 *)v106 + 71);
                    char v111 = v104;
                  }

                  if (v108 >= v110) {
                    size_t v112 = v110;
                  }
                  else {
                    size_t v112 = v108;
                  }
                  int v113 = memcmp(v111, v109, v112);
                  BOOL v114 = v110 < v108;
                  if (v113) {
                    BOOL v114 = v113 < 0;
                  }
                  if (v114)
                  {
                    __int128 v115 = *(_OWORD *)v107;
                    v247  = v107[2];
                    *(_OWORD *)__p  = v115;
                    v107[1]  = 0LL;
                    v107[2]  = 0LL;
                    *BOOL v107 = 0LL;
                    v248  = 0uLL;
                    v248  = *(__n128 *)(v106 + 9);
                    v249  = v106[11];
                    v106[9]  = 0LL;
                    v106[10]  = 0LL;
                    v106[11]  = 0LL;
                    uint64_t v116 = v105;
                    while (1)
                    {
                      unsigned __int16 v117 = (char *)v8 + v116;
                      std::string::operator=[abi:ne180100]((uint64_t)v8 + v116 + 48, (__int128 *)((char *)v8 + v116));
                      std::vector<unsigned char>::__move_assign((uint64_t)(v117 + 72), (__n128 *)(v117 + 24));
                      if (!v116) {
                        break;
                      }
                      int v118 = v117 - 48;
                      if (*(v117 - 25) < 0)
                      {
                        int v118 = *(char **)v118;
                        size_t v119 = *(size_t *)((char *)v8 + v116 - 40);
                      }

                      else
                      {
                        size_t v119 = *(v117 - 25);
                      }

                      if (SHIBYTE(v247) >= 0) {
                        uint64_t v120 = (void *)HIBYTE(v247);
                      }
                      else {
                        uint64_t v120 = __p[1];
                      }
                      if (SHIBYTE(v247) >= 0) {
                        unsigned __int16 v121 = __p;
                      }
                      else {
                        unsigned __int16 v121 = (void **)__p[0];
                      }
                      else {
                        size_t v122 = v119;
                      }
                      int v123 = memcmp(v121, v118, v122);
                      BOOL v124 = (unint64_t)v120 < v119;
                      if (v123) {
                        BOOL v124 = v123 < 0;
                      }
                      v116 -= 48LL;
                      if (!v124)
                      {
                        uint64_t v125 = (uint64_t)v8 + v116 + 48;
                        goto LABEL_209;
                      }
                    }

                    uint64_t v125 = (uint64_t)v8;
LABEL_209:
                    std::string::operator=[abi:ne180100](v125, (__int128 *)__p);
                    std::vector<unsigned char>::__move_assign(v125 + 24, &v248);
                    v240[0]  = &v248;
                    std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100]((void ***)v240);
                    if (SHIBYTE(v247) < 0) {
                      operator delete(__p[0]);
                    }
                  }

                  uint64_t v104 = v107 + 6;
                  v105 += 48LL;
                  BOOL v106 = (void **)v107;
                }

                while (v107 + 6 != (const void **)v7);
              }
            }
          }

          else if (v8 != (void **)v7)
          {
            unsigned __int16 v204 = (const void **)(v8 + 6);
            if (v8 + 6 != (void **)v7)
            {
              unsigned __int16 v205 = v8 + 9;
              do
              {
                v206  = v204;
                if (*((char *)v8 + 23) < 0)
                {
                  v208  = *v8;
                  v207  = (size_t)v8[1];
                }

                else
                {
                  v207  = *((unsigned __int8 *)v8 + 23);
                  v208  = v8;
                }

                if (*((char *)v8 + 71) < 0)
                {
                  v209  = (size_t)v8[7];
                  v210  = *v204;
                }

                else
                {
                  v209  = *((unsigned __int8 *)v8 + 71);
                  v210  = v204;
                }

                if (v207 >= v209) {
                  v211  = v209;
                }
                else {
                  v211  = v207;
                }
                v212  = memcmp(v210, v208, v211);
                v213  = v209 < v207;
                if (v212) {
                  v213  = v212 < 0;
                }
                if (v213)
                {
                  v214  = *(_OWORD *)v206;
                  v247  = v206[2];
                  *(_OWORD *)__p  = v214;
                  v206[1]  = 0LL;
                  v206[2]  = 0LL;
                  *v206  = 0LL;
                  v248  = 0uLL;
                  v248  = *(__n128 *)(v8 + 9);
                  v249  = v8[11];
                  v8[9]  = 0LL;
                  v8[10]  = 0LL;
                  v8[11]  = 0LL;
                  v215  = (uint64_t)v205;
                  do
                  {
                    std::string::operator=[abi:ne180100](v215 - 24, (__int128 *)(v215 - 72));
                    v216  = v215 - 48;
                    std::vector<unsigned char>::__move_assign(v215, (__n128 *)(v215 - 48));
                    if (*(char *)(v215 - 97) < 0)
                    {
                      v217  = *(const void **)(v215 - 120);
                      v218  = *(void *)(v215 - 112);
                    }

                    else
                    {
                      v217  = (const void *)(v215 - 120);
                      v218  = *(unsigned __int8 *)(v215 - 97);
                    }

                    if (SHIBYTE(v247) >= 0) {
                      v219  = (void *)HIBYTE(v247);
                    }
                    else {
                      v219  = __p[1];
                    }
                    if (SHIBYTE(v247) >= 0) {
                      v220  = __p;
                    }
                    else {
                      v220  = (void **)__p[0];
                    }
                    else {
                      v221  = v218;
                    }
                    v222  = memcmp(v220, v217, v221);
                    v223  = (unint64_t)v219 < v218;
                    if (v222) {
                      v223  = v222 < 0;
                    }
                    v215  = v216;
                  }

                  while (v223);
                  std::string::operator=[abi:ne180100](v216 - 24, (__int128 *)__p);
                  std::vector<unsigned char>::__move_assign(v216, &v248);
                  v240[0]  = &v248;
                  std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100]((void ***)v240);
                  if (SHIBYTE(v247) < 0) {
                    operator delete(__p[0]);
                  }
                }

                unsigned __int16 v204 = v206 + 6;
                v205 += 6;
                uint64_t v8 = (void **)v206;
              }

              while (v206 + 6 != (const void **)v7);
            }
          }

          return;
        }

        if (!a4)
        {
          int64_t v126 = (v10 - 2) >> 1;
          v229  = v7;
          int64_t v127 = v126;
          v231  = v7 - (void)v8;
          v233  = v8;
          v234  = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v8) >> 4);
          do
          {
            int64_t v128 = v127;
            if (v126 >= v127)
            {
              uint64_t v129 = (2 * v127) | 1;
              uint64_t v130 = &v8[6 * v129];
              uint64_t v131 = 2 * v127 + 2;
              if (v131 < (uint64_t)v10)
              {
                if (*((char *)v130 + 71) < 0)
                {
                  uint64_t v133 = v130[6];
                  size_t v132 = (size_t)v130[7];
                }

                else
                {
                  size_t v132 = *((unsigned __int8 *)v130 + 71);
                  uint64_t v133 = v130 + 6;
                }

                int64_t v134 = v127;
                if (*((char *)v130 + 23) < 0)
                {
                  BOOL v136 = (void **)*v130;
                  size_t v135 = (size_t)v130[1];
                }

                else
                {
                  size_t v135 = *((unsigned __int8 *)v130 + 23);
                  BOOL v136 = &v8[6 * v129];
                }

                if (v132 >= v135) {
                  size_t v137 = v135;
                }
                else {
                  size_t v137 = v132;
                }
                int v138 = memcmp(v136, v133, v137);
                BOOL v139 = v135 < v132;
                if (v138) {
                  BOOL v139 = v138 < 0;
                }
                if (v139)
                {
                  uint64_t v129 = v131;
                  v130 += 6;
                }

                uint64_t v9 = v231;
                int64_t v128 = v134;
              }

              uint64_t v140 = (uint64_t)&v8[6 * v128];
              if (*(char *)(v140 + 23) < 0)
              {
                uint64_t v142 = *(void ***)v140;
                size_t v141 = *(void *)(v140 + 8);
              }

              else
              {
                size_t v141 = *(unsigned __int8 *)(v140 + 23);
                uint64_t v142 = &v8[6 * v128];
              }

              if (*((char *)v130 + 23) < 0)
              {
                v144  = *v130;
                v143  = (size_t)v130[1];
              }

              else
              {
                v143  = *((unsigned __int8 *)v130 + 23);
                v144  = v130;
              }

              if (v141 >= v143) {
                v145  = v143;
              }
              else {
                v145  = v141;
              }
              v146  = memcmp(v144, v142, v145);
              BOOL v147 = v143 < v141;
              if (v146) {
                BOOL v147 = v146 < 0;
              }
              if (!v147)
              {
                __int128 v148 = *(_OWORD *)v140;
                v247  = *(const void **)(v140 + 16);
                *(_OWORD *)__p  = v148;
                *(void *)(v140 + 8)  = 0LL;
                *(void *)(v140 + 16)  = 0LL;
                *(void *)uint64_t v140 = 0LL;
                v230  = v128;
                uint64_t v149 = &v8[6 * v128];
                v248  = *(__n128 *)(v149 + 3);
                v249  = v149[5];
                v149[3]  = 0LL;
                v149[4]  = 0LL;
                v149[5]  = 0LL;
                uint64_t v150 = __p;
                if (SHIBYTE(v247) < 0) {
                  uint64_t v150 = (void **)__p[0];
                }
                __s2  = v150;
                if (SHIBYTE(v247) >= 0) {
                  v151  = (void *)HIBYTE(v247);
                }
                else {
                  v151  = __p[1];
                }
                do
                {
                  v152  = (uint64_t)v130;
                  std::string::operator=[abi:ne180100](v140, (__int128 *)v130);
                  uint64_t v153 = (uint64_t)(v130 + 3);
                  std::vector<unsigned char>::__move_assign(v140 + 24, (__n128 *)(v130 + 3));
                  if (v126 < v129) {
                    break;
                  }
                  if (v129 + 0x4000000000000000LL < 0) {
                    goto LABEL_382;
                  }
                  uint64_t v129 = (2 * v129) | 1;
                  if (__OFADD__(v129, 1LL)) {
                    goto LABEL_383;
                  }
                  uint64_t v130 = &v8[6 * v129];
                  if (v129 + 1 < (uint64_t)v10)
                  {
                    if (*((char *)v130 + 71) < 0)
                    {
                      int v155 = v130[6];
                      v154  = (size_t)v130[7];
                    }

                    else
                    {
                      v154  = *((unsigned __int8 *)v130 + 71);
                      int v155 = v130 + 6;
                    }

                    int64_t v156 = v126;
                    if (*((char *)v130 + 23) < 0)
                    {
                      v158  = *v130;
                      v157  = (size_t)v130[1];
                    }

                    else
                    {
                      v157  = *((unsigned __int8 *)v130 + 23);
                      v158  = v130;
                    }

                    if (v154 >= v157) {
                      size_t v159 = v157;
                    }
                    else {
                      size_t v159 = v154;
                    }
                    int v160 = memcmp(v158, v155, v159);
                    BOOL v161 = v157 < v154;
                    if (v160) {
                      BOOL v161 = v160 < 0;
                    }
                    if (v161)
                    {
                      v130 += 6;
                      ++v129;
                    }

                    int64_t v126 = v156;
                    uint64_t v8 = v233;
                    unint64_t v10 = v234;
                  }

                  if (*((char *)v130 + 23) < 0)
                  {
                    BOOL v163 = *v130;
                    size_t v162 = (size_t)v130[1];
                  }

                  else
                  {
                    size_t v162 = *((unsigned __int8 *)v130 + 23);
                    BOOL v163 = v130;
                  }

                  else {
                    size_t v164 = (size_t)v151;
                  }
                  int v165 = memcmp(v163, __s2, v164);
                  BOOL v166 = v162 < (unint64_t)v151;
                  if (v165) {
                    BOOL v166 = v165 < 0;
                  }
                  uint64_t v140 = v152;
                }

                while (!v166);
                std::string::operator=[abi:ne180100](v152, (__int128 *)__p);
                std::vector<unsigned char>::__move_assign(v153, &v248);
                v240[0]  = &v248;
                std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100]((void ***)v240);
                if (SHIBYTE(v247) < 0) {
                  operator delete(__p[0]);
                }
                int64_t v128 = v230;
                uint64_t v9 = v231;
              }
            }

            int64_t v127 = v128 - 1;
          }

          while (v128);
          int64_t v167 = v9 / 0x30uLL;
          uint64_t v168 = v229;
LABEL_280:
          v169  = 0LL;
          v170  = *(_OWORD *)v8;
          __s2a  = (__int128 *)v168;
          v241  = v8[2];
          *(_OWORD *)v240  = v170;
          v8[1]  = 0LL;
          void v8[2] = 0LL;
          void *v8 = 0LL;
          v242  = *(__n128 *)(v8 + 3);
          v243  = v8[5];
          void v8[3] = 0LL;
          v8[4]  = 0LL;
          uint64_t v171 = (uint64_t)v8;
          v8[5]  = 0LL;
          while (v169 + 0x4000000000000000LL >= 0)
          {
            uint64_t v172 = (2 * v169) | 1;
            if (__OFADD__(v172, 1LL)) {
              goto LABEL_383;
            }
            uint64_t v173 = v171 + 48 * v169;
            v174  = v173 + 48;
            if (v172 + 1 < v167)
            {
              int v175 = *(char *)(v173 + 119);
              if (v175 < 0)
              {
                v177  = *(const void **)(v174 + 48);
                v176  = *(void *)(v174 + 56);
              }

              else
              {
                v176  = v175;
                v177  = (const void *)(v174 + 48);
              }

              if (*(char *)(v174 + 23) < 0)
              {
                unsigned int v179 = *(const void **)v174;
                v178  = *(void *)(v174 + 8);
              }

              else
              {
                v178  = *(unsigned __int8 *)(v174 + 23);
                unsigned int v179 = (const void *)v174;
              }

              if (v176 >= v178) {
                size_t v180 = v178;
              }
              else {
                size_t v180 = v176;
              }
              v181  = memcmp(v179, v177, v180);
              v182  = v178 < v176;
              if (v181) {
                v182  = v181 < 0;
              }
              if (v182)
              {
                v174 += 48LL;
                ++v172;
              }
            }

            std::string::operator=[abi:ne180100](v171, (__int128 *)v174);
            std::vector<unsigned char>::__move_assign(v171 + 24, (__n128 *)(v174 + 24));
            uint64_t v171 = v174;
            v169  = v172;
            if (v172 > (uint64_t)((unint64_t)(v167 - 2) >> 1))
            {
              uint64_t v168 = (uint64_t)(__s2a - 3);
              if ((__int128 *)v174 == __s2a - 3)
              {
                std::string::operator=[abi:ne180100](v174, (__int128 *)v240);
                std::vector<unsigned char>::__move_assign(v174 + 24, &v242);
              }

              else
              {
                std::string::operator=[abi:ne180100](v174, __s2a - 3);
                std::vector<unsigned char>::__move_assign(v174 + 24, (__n128 *)((char *)__s2a - 24));
                std::string::operator=[abi:ne180100](v168, (__int128 *)v240);
                std::vector<unsigned char>::__move_assign((uint64_t)__s2a - 24, &v242);
                v183  = v174 - (void)v8 + 48;
                if (v183 >= 49)
                {
                  if (*(char *)(v174 + 23) < 0)
                  {
                    v185  = *(const void **)v174;
                    v184  = *(void *)(v174 + 8);
                  }

                  else
                  {
                    v184  = *(unsigned __int8 *)(v174 + 23);
                    v185  = (const void *)v174;
                  }

                  v186  = (v183 / 0x30uLL - 2) >> 1;
                  v187  = &v8[6 * v186];
                  if (*((char *)v187 + 23) < 0)
                  {
                    int v189 = (void **)*v187;
                    size_t v188 = (size_t)v187[1];
                  }

                  else
                  {
                    size_t v188 = *((unsigned __int8 *)v187 + 23);
                    int v189 = &v8[6 * v186];
                  }

                  if (v184 >= v188) {
                    size_t v190 = v188;
                  }
                  else {
                    size_t v190 = v184;
                  }
                  int v191 = memcmp(v189, v185, v190);
                  BOOL v192 = v188 < v184;
                  if (v191) {
                    BOOL v192 = v191 < 0;
                  }
                  if (v192)
                  {
                    __int128 v193 = *(_OWORD *)v174;
                    v247  = *(const void **)(v174 + 16);
                    *(_OWORD *)__p  = v193;
                    *(void *)(v174 + 8)  = 0LL;
                    *(void *)(v174 + 16)  = 0LL;
                    *(void *)v174  = 0LL;
                    v248  = *(__n128 *)(v174 + 24);
                    v249  = *(void **)(v174 + 40);
                    *(void *)(v174 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0LL;
                    *(void *)(v174 + 3ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
                    *(void *)(v174 + 4ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 0LL;
                    unsigned __int16 v194 = __p;
                    if (SHIBYTE(v247) < 0) {
                      unsigned __int16 v194 = (void **)__p[0];
                    }
                    __s2b  = v194;
                    if (SHIBYTE(v247) >= 0) {
                      BOOL v195 = (void *)HIBYTE(v247);
                    }
                    else {
                      BOOL v195 = __p[1];
                    }
                    do
                    {
                      v196  = (uint64_t)v187;
                      std::string::operator=[abi:ne180100](v174, (__int128 *)v187);
                      uint64_t v197 = (uint64_t)(v187 + 3);
                      std::vector<unsigned char>::__move_assign(v174 + 24, (__n128 *)(v187 + 3));
                      if (!v186) {
                        break;
                      }
                      v186  = (v186 - 1) >> 1;
                      v187  = &v8[6 * v186];
                      if (*((char *)v187 + 23) < 0)
                      {
                        v199  = (void **)*v187;
                        size_t v198 = (size_t)v187[1];
                      }

                      else
                      {
                        size_t v198 = *((unsigned __int8 *)v187 + 23);
                        v199  = &v8[6 * v186];
                      }

                      else {
                        size_t v200 = (size_t)v195;
                      }
                      int v201 = memcmp(v199, __s2b, v200);
                      BOOL v202 = v198 < (unint64_t)v195;
                      if (v201) {
                        BOOL v202 = v201 < 0;
                      }
                      v174  = v196;
                    }

                    while (v202);
                    std::string::operator=[abi:ne180100](v196, (__int128 *)__p);
                    std::vector<unsigned char>::__move_assign(v197, &v248);
                    v245  = &v248;
                    std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
                    if (SHIBYTE(v247) < 0) {
                      operator delete(__p[0]);
                    }
                  }
                }
              }

              __p[0]  = &v242;
              std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              if (SHIBYTE(v241) < 0) {
                operator delete(v240[0]);
              }
              if (v167-- <= 2) {
                return;
              }
              goto LABEL_280;
            }
          }

LABEL_382:
          __break(0x550Cu);
LABEL_383:
          __break(0x5500u);
          goto LABEL_384;
        }

        if (__OFSUB__(a4--, 1LL))
        {
LABEL_384:
          __break(0x5515u);
          return;
        }

        uint64_t v12 = v7 - 48;
        if ((unint64_t)v9 < 0x1801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*>( (uint64_t)&v8[6 * (v10 >> 1)],  (const void **)v8,  v12);
          if ((a5 & 1) != 0) {
            goto LABEL_22;
          }
LABEL_10:
          char v14 = (char *)v239;
          if (*((char *)v239 + 23) < 0)
          {
            __int128 v16 = *(void **)v239;
            size_t v15 = *((void *)v239 + 1);
          }

          else
          {
            size_t v15 = *((unsigned __int8 *)v239 + 23);
            __int128 v16 = v239;
          }

          if (*((char *)v239 - 25) < 0)
          {
            size_t v17 = (char *)*((void *)v239 - 6);
            size_t v18 = *((void *)v239 - 5);
          }

          else
          {
            size_t v17 = (char *)v239 - 48;
            size_t v18 = *((char *)v239 - 25);
          }

          if (v15 >= v18) {
            size_t v19 = v18;
          }
          else {
            size_t v19 = v15;
          }
          int v20 = memcmp(v17, v16, v19);
          BOOL v21 = v18 < v15;
          if (v20) {
            BOOL v21 = v20 < 0;
          }
          if (!v21)
          {
            unint64_t v61 = (unint64_t)v238;
            v244  = v238;
            v245  = (__n128 *)v14;
            __n128 v62 = *(__n128 *)v14;
            v247  = (const void *)*((void *)v14 + 2);
            *(__n128 *)__p  = v62;
            *((void *)v14 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = 0LL;
            *((void *)v14 + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
            *(void *)char v14 = 0LL;
            v248  = *(__n128 *)(v14 + 24);
            v249  = (void *)*((void *)v14 + 5);
            *((void *)v14 + ot::NetworkData::NetworkDataTlv::SetType(this, 3) = 0LL;
            *((void *)v14 + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0LL;
            *((void *)v14 + 5)  = 0LL;
            uint64_t v63 = v61 - 48;
            if (*(char *)(v61 - 25) < 0)
            {
              unsigned int v65 = *(const void **)(v61 - 48);
              size_t v64 = *(void *)(v61 - 40);
            }

            else
            {
              size_t v64 = *(unsigned __int8 *)(v61 - 25);
              unsigned int v65 = (const void *)(v61 - 48);
            }

            if (SHIBYTE(v247) >= 0) {
              unsigned __int16 v66 = (void *)HIBYTE(v247);
            }
            else {
              unsigned __int16 v66 = __p[1];
            }
            if (SHIBYTE(v247) >= 0) {
              int v67 = __p;
            }
            else {
              int v67 = (void **)__p[0];
            }
            else {
              size_t v68 = v64;
            }
            int v69 = memcmp(v67, v65, v68);
            BOOL v70 = (unint64_t)v66 < v64;
            if (v69) {
              BOOL v70 = v69 < 0;
            }
            if (v70)
            {
              int v71 = (__n128 *)(v14 + 48);
              do
              {
                v245  = v71;
                if (v71[1].n128_i8[7] < 0)
                {
                  unsigned __int16 v73 = (__n128 *)v71->n128_u64[0];
                  size_t v72 = v71->n128_u64[1];
                }

                else
                {
                  size_t v72 = v71[1].n128_u8[7];
                  unsigned __int16 v73 = v71;
                }

                else {
                  size_t v74 = v72;
                }
                int v75 = memcmp(v67, v73, v74);
                BOOL v76 = (unint64_t)v66 < v72;
                if (v75) {
                  BOOL v76 = v75 < 0;
                }
                v71 += 3;
              }

              while (!v76);
              n128_u64  = (unint64_t)v71[-3].n128_u64;
            }

            else
            {
              unsigned __int8 v78 = (__n128 *)(v14 + 48);
              do
              {
                n128_u64  = (unint64_t)v78;
                v245  = v78;
                int v79 = v78[1].n128_i8[7];
                if (v79 < 0)
                {
                  char v81 = *(const void **)n128_u64;
                  size_t v80 = *(void *)(n128_u64 + 8);
                }

                else
                {
                  size_t v80 = v79;
                  char v81 = (const void *)n128_u64;
                }

                else {
                  size_t v82 = v80;
                }
                int v83 = memcmp(v67, v81, v82);
                BOOL v84 = v83 < 0;
                if (!v83) {
                  BOOL v84 = (unint64_t)v66 < v80;
                }
                unsigned __int8 v78 = (__n128 *)(n128_u64 + 48);
              }

              while (!v84);
            }

            if (n128_u64 < v61)
            {
              do
              {
                v244  = (void **)v63;
                if (*(char *)(v63 + 23) < 0)
                {
                  char v86 = *(const void **)v63;
                  size_t v85 = *(void *)(v63 + 8);
                }

                else
                {
                  size_t v85 = *(unsigned __int8 *)(v63 + 23);
                  char v86 = (const void *)v63;
                }

                else {
                  size_t v87 = v85;
                }
                int v88 = memcmp(v67, v86, v87);
                BOOL v89 = (unint64_t)v66 < v85;
                if (v88) {
                  BOOL v89 = v88 < 0;
                }
                v63 -= 48LL;
              }

              while (v89);
              unint64_t v61 = v63 + 48;
            }

            if (n128_u64 < v61)
            {
              do
              {
                std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry *&,otbr::Mdns::Publisher::TxtEntry *&>( (uint64_t *)&v245,  (uint64_t *)&v244);
                int v90 = (void **)&v245[3];
                do
                {
                  v245  = (__n128 *)v90;
                  if (*((char *)v90 + 23) < 0)
                  {
                    int v92 = *v90;
                    size_t v91 = (size_t)v90[1];
                  }

                  else
                  {
                    size_t v91 = *((unsigned __int8 *)v90 + 23);
                    int v92 = v90;
                  }

                  else {
                    size_t v93 = v91;
                  }
                  int v94 = memcmp(v67, v92, v93);
                  BOOL v95 = (unint64_t)v66 < v91;
                  if (v94) {
                    BOOL v95 = v94 < 0;
                  }
                  v90 += 6;
                }

                while (!v95);
                n128_u64  = (unint64_t)(v90 - 6);
                uint64_t v96 = (uint64_t)(v244 - 6);
                do
                {
                  v244  = (void **)v96;
                  if (*(char *)(v96 + 23) < 0)
                  {
                    unsigned __int16 v98 = *(const void **)v96;
                    size_t v97 = *(void *)(v96 + 8);
                  }

                  else
                  {
                    size_t v97 = *(unsigned __int8 *)(v96 + 23);
                    unsigned __int16 v98 = (const void *)v96;
                  }

                  else {
                    size_t v99 = v97;
                  }
                  int v100 = memcmp(v67, v98, v99);
                  BOOL v101 = (unint64_t)v66 < v97;
                  if (v100) {
                    BOOL v101 = v100 < 0;
                  }
                  v96 -= 48LL;
                }

                while (v101);
              }

              while (n128_u64 < v96 + 48);
            }

            if ((char *)(n128_u64 - 48) != v14)
            {
              std::string::operator=[abi:ne180100]((uint64_t)v14, (__int128 *)(n128_u64 - 48));
              std::vector<unsigned char>::__move_assign((uint64_t)(v14 + 24), (__n128 *)(n128_u64 - 24));
            }

            std::string::operator=[abi:ne180100](n128_u64 - 48, (__int128 *)__p);
            std::vector<unsigned char>::__move_assign(n128_u64 - 24, &v248);
            uint64_t v8 = (void **)v245;
            v240[0]  = &v248;
            std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100]((void ***)v240);
            if (SHIBYTE(v247) < 0) {
              operator delete(__p[0]);
            }
            goto LABEL_166;
          }

          goto LABEL_22;
        }

        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*>( (uint64_t)v8,  (const void **)&v8[6 * (v10 >> 1)],  v12);
        uint64_t v13 = 48 * (v10 >> 1);
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*>( (uint64_t)v239 + 48,  (const void **)((char *)v239 + v13 - 48),  (uint64_t)(v238 - 12));
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*>( (uint64_t)v239 + 96,  (const void **)((char *)v239 + v13 + 48),  (uint64_t)(v238 - 18));
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*>( (uint64_t)v239 + v13 - 48,  (const void **)((char *)v239 + v13),  (uint64_t)v239 + v13 + 48);
        __p[0]  = (char *)v239 + v13;
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry *&,otbr::Mdns::Publisher::TxtEntry *&>( (uint64_t *)&v239,  (uint64_t *)__p);
        if ((a5 & 1) == 0) {
          goto LABEL_10;
        }
LABEL_22:
        uint64_t v22 = 0LL;
        uint64_t v23 = (uint64_t)v238;
        uint64_t v24 = (void **)v239;
        v244  = v238;
        __int128 v25 = *(_OWORD *)v239;
        v247  = (const void *)*((void *)v239 + 2);
        *(_OWORD *)__p  = v25;
        *((void *)v239 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = 0LL;
        void v24[2] = 0LL;
        *uint64_t v24 = 0LL;
        v248  = *(__n128 *)(v24 + 3);
        v249  = v24[5];
        void v24[3] = 0LL;
        v24[4]  = 0LL;
        v24[5]  = 0LL;
        if (SHIBYTE(v247) >= 0) {
          uint64_t v26 = __p;
        }
        else {
          uint64_t v26 = (void **)__p[0];
        }
        if (SHIBYTE(v247) >= 0) {
          int v27 = (void *)HIBYTE(v247);
        }
        else {
          int v27 = __p[1];
        }
        do
        {
          uint64_t v28 = &v24[v22 + 6];
          v245  = (__n128 *)v28;
          if (SHIBYTE(v24[v22 + 8]) < 0)
          {
            size_t v29 = (size_t)v24[v22 + 7];
            uint64_t v28 = (void **)*v28;
          }

          else
          {
            size_t v29 = HIBYTE(v24[v22 + 8]);
          }

          else {
            size_t v30 = (size_t)v27;
          }
          int v31 = memcmp(v28, v26, v30);
          BOOL v32 = v29 < (unint64_t)v27;
          if (v31) {
            BOOL v32 = v31 < 0;
          }
          v22 += 6LL;
        }

        while (v32);
        unint64_t v33 = (unint64_t)&v24[v22];
        uint64_t v34 = v23 - 48;
        if (v22 == 6)
        {
          while (1)
          {
            unint64_t v40 = v34 + 48;
            if (v33 >= v34 + 48) {
              break;
            }
            v244  = (void **)v34;
            if (*(char *)(v34 + 23) < 0)
            {
              uint64_t v42 = *(const void **)v34;
              size_t v41 = *(void *)(v34 + 8);
            }

            else
            {
              size_t v41 = *(unsigned __int8 *)(v34 + 23);
              uint64_t v42 = (const void *)v34;
            }

            else {
              size_t v43 = (size_t)v27;
            }
            int v44 = memcmp(v42, v26, v43);
            BOOL v45 = v41 < (unint64_t)v27;
            if (v44) {
              BOOL v45 = v44 < 0;
            }
            v34 -= 48LL;
            if (v45) {
              goto LABEL_58;
            }
          }
        }

        else
        {
          do
          {
            v244  = (void **)v34;
            if (*(char *)(v34 + 23) < 0)
            {
              uint64_t v36 = *(const void **)v34;
              size_t v35 = *(void *)(v34 + 8);
            }

            else
            {
              size_t v35 = *(unsigned __int8 *)(v34 + 23);
              uint64_t v36 = (const void *)v34;
            }

            else {
              size_t v37 = (size_t)v27;
            }
            int v38 = memcmp(v36, v26, v37);
            BOOL v39 = v35 < (unint64_t)v27;
            if (v38) {
              BOOL v39 = v38 < 0;
            }
            v34 -= 48LL;
          }

          while (!v39);
LABEL_58:
          unint64_t v40 = v34 + 48;
        }

        uint64_t v8 = (void **)v33;
        if (v33 < v40)
        {
          do
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry *&,otbr::Mdns::Publisher::TxtEntry *&>( (uint64_t *)&v245,  (uint64_t *)&v244);
            uint64_t v46 = (void **)&v245[3];
            do
            {
              v245  = (__n128 *)v46;
              if (*((char *)v46 + 23) < 0)
              {
                int v48 = *v46;
                size_t v47 = (size_t)v46[1];
              }

              else
              {
                size_t v47 = *((unsigned __int8 *)v46 + 23);
                int v48 = v46;
              }

              else {
                size_t v49 = (size_t)v27;
              }
              int v50 = memcmp(v48, v26, v49);
              BOOL v51 = v47 < (unint64_t)v27;
              if (v50) {
                BOOL v51 = v50 < 0;
              }
              v46 += 6;
            }

            while (v51);
            uint64_t v8 = v46 - 6;
            uint64_t v52 = (uint64_t)(v244 - 6);
            do
            {
              v244  = (void **)v52;
              if (*(char *)(v52 + 23) < 0)
              {
                int v54 = *(const void **)v52;
                size_t v53 = *(void *)(v52 + 8);
              }

              else
              {
                size_t v53 = *(unsigned __int8 *)(v52 + 23);
                int v54 = (const void *)v52;
              }

              else {
                size_t v55 = (size_t)v27;
              }
              int v56 = memcmp(v54, v26, v55);
              BOOL v57 = v53 < (unint64_t)v27;
              if (v56) {
                BOOL v57 = v56 < 0;
              }
              v52 -= 48LL;
            }

            while (!v57);
          }

          while ((unint64_t)v8 < v52 + 48);
        }

        if (v8 - 6 != v24)
        {
          std::string::operator=[abi:ne180100]((uint64_t)v24, (__int128 *)v8 - 3);
          std::vector<unsigned char>::__move_assign((uint64_t)(v24 + 3), (__n128 *)(v8 - 3));
        }

        std::string::operator=[abi:ne180100]((uint64_t)(v8 - 6), (__int128 *)__p);
        std::vector<unsigned char>::__move_assign((uint64_t)(v8 - 3), &v248);
        v240[0]  = &v248;
        std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100]((void ***)v240);
        if (SHIBYTE(v247) < 0) {
          operator delete(__p[0]);
        }
        if (v33 < v40) {
          goto LABEL_86;
        }
        std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*>( (const void **)v239,  (uint64_t)(v8 - 6));
        int v59 = v58;
        std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*>( (const void **)v8,  (uint64_t)v238);
        if (!v60)
        {
          if (!v59)
          {
LABEL_86:
            std::__introsort<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*,false>( v239,  v8 - 6,  a3,  a4,  a5 & 1);
LABEL_166:
            a5  = 0;
            v239  = v8;
            goto LABEL_167;
          }

          v239  = v8;
LABEL_167:
          uint64_t v7 = (uint64_t)v238;
          continue;
        }

        if ((v59 & 1) == 0)
        {
          v238  = v8 - 6;
          uint64_t v8 = (void **)v239;
          goto LABEL_167;
        }

        return;
    }
  }

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry *&,otbr::Mdns::Publisher::TxtEntry *&>( uint64_t *a1, uint64_t *a2)
{
}

void std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*,0>( uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = (const void **)a5;
  unint64_t v6 = (const void **)a4;
  uint64_t v7 = (const void **)a3;
  uint64_t v8 = a2;
  uint64_t v9 = (const void **)a1;
  size_t v41 = a2;
  uint64_t v42 = a1;
  BOOL v39 = (const void **)a4;
  unint64_t v40 = (const void **)a3;
  uint64_t v38 = a5;
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*>( a1,  a2,  a3,  a4);
  if (*((char *)v6 + 23) < 0)
  {
    uint64_t v11 = v6;
    unint64_t v6 = (const void **)*v6;
    size_t v10 = (size_t)v11[1];
  }

  else
  {
    size_t v10 = *((unsigned __int8 *)v6 + 23);
  }

  if (*((char *)v5 + 23) < 0)
  {
    uint64_t v13 = v5;
    unint64_t v5 = (const void **)*v5;
    size_t v12 = (size_t)v13[1];
  }

  else
  {
    size_t v12 = *((unsigned __int8 *)v5 + 23);
  }

  if (v10 >= v12) {
    size_t v14 = v12;
  }
  else {
    size_t v14 = v10;
  }
  int v15 = memcmp(v5, v6, v14);
  BOOL v16 = v12 < v10;
  if (v15) {
    BOOL v16 = v15 < 0;
  }
  if (v16)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry *&,otbr::Mdns::Publisher::TxtEntry *&>( (uint64_t *)&v39,  &v38);
    size_t v17 = v39;
    if (*((char *)v7 + 23) < 0)
    {
      size_t v19 = v7;
      uint64_t v7 = (const void **)*v7;
      size_t v18 = (size_t)v19[1];
    }

    else
    {
      size_t v18 = *((unsigned __int8 *)v7 + 23);
    }

    if (*((char *)v39 + 23) < 0)
    {
      size_t v17 = *v39;
      size_t v20 = (size_t)v39[1];
    }

    else
    {
      size_t v20 = *((unsigned __int8 *)v39 + 23);
    }

    if (v18 >= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v18;
    }
    int v22 = memcmp(v17, v7, v21);
    BOOL v23 = v20 < v18;
    if (v22) {
      BOOL v23 = v22 < 0;
    }
    if (v23)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry *&,otbr::Mdns::Publisher::TxtEntry *&>( (uint64_t *)&v40,  (uint64_t *)&v39);
      uint64_t v24 = v40;
      if (*((char *)v8 + 23) < 0)
      {
        uint64_t v26 = v8;
        uint64_t v8 = (const void **)*v8;
        size_t v25 = (size_t)v26[1];
      }

      else
      {
        size_t v25 = *((unsigned __int8 *)v8 + 23);
      }

      if (*((char *)v40 + 23) < 0)
      {
        uint64_t v24 = *v40;
        size_t v27 = (size_t)v40[1];
      }

      else
      {
        size_t v27 = *((unsigned __int8 *)v40 + 23);
      }

      if (v25 >= v27) {
        size_t v28 = v27;
      }
      else {
        size_t v28 = v25;
      }
      int v29 = memcmp(v24, v8, v28);
      BOOL v30 = v27 < v25;
      if (v29) {
        BOOL v30 = v29 < 0;
      }
      if (v30)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry *&,otbr::Mdns::Publisher::TxtEntry *&>( (uint64_t *)&v41,  (uint64_t *)&v40);
        int v31 = v41;
        if (*((char *)v9 + 23) < 0)
        {
          unint64_t v33 = v9;
          uint64_t v9 = (const void **)*v9;
          size_t v32 = (size_t)v33[1];
        }

        else
        {
          size_t v32 = *((unsigned __int8 *)v9 + 23);
        }

        if (*((char *)v41 + 23) < 0)
        {
          int v31 = *v41;
          size_t v34 = (size_t)v41[1];
        }

        else
        {
          size_t v34 = *((unsigned __int8 *)v41 + 23);
        }

        if (v32 >= v34) {
          size_t v35 = v34;
        }
        else {
          size_t v35 = v32;
        }
        int v36 = memcmp(v31, v9, v35);
        BOOL v37 = v34 < v32;
        if (v36) {
          BOOL v37 = v36 < 0;
        }
        if (v37) {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry *&,otbr::Mdns::Publisher::TxtEntry *&>( &v42,  (uint64_t *)&v41);
        }
      }
    }
  }

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*>( uint64_t a1, const void **a2, uint64_t a3)
{
  unint64_t v3 = (unsigned __int8 *)a3;
  unint64_t v5 = (const void *)a1;
  uint64_t v42 = a2;
  size_t v43 = (const void **)a1;
  size_t v41 = (const void **)a3;
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v5 = *(const void **)a1;
    size_t v6 = *(void *)(a1 + 8);
  }

  else
  {
    size_t v6 = *(unsigned __int8 *)(a1 + 23);
  }

  size_t v7 = *((unsigned __int8 *)a2 + 23);
  size_t v8 = v7;
  uint64_t v9 = a2;
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t v9 = (const void **)*a2;
    size_t v8 = (size_t)a2[1];
  }

  if (v6 >= v8) {
    size_t v10 = v8;
  }
  else {
    size_t v10 = v6;
  }
  int v11 = memcmp(v9, v5, v10);
  BOOL v12 = v8 < v6;
  if (v11) {
    BOOL v12 = v11 < 0;
  }
  if (v12)
  {
    if ((v7 & 0x80) != 0)
    {
      uint64_t v13 = a2;
      a2  = (const void **)*a2;
      size_t v7 = (size_t)v13[1];
    }

    if ((char)v3[23] < 0)
    {
      size_t v17 = v3;
      unint64_t v3 = *(unsigned __int8 **)v3;
      size_t v14 = *((void *)v17 + 1);
    }

    else
    {
      size_t v14 = v3[23];
    }

    if (v7 >= v14) {
      size_t v18 = v14;
    }
    else {
      size_t v18 = v7;
    }
    int v19 = memcmp(v3, a2, v18);
    BOOL v20 = v14 < v7;
    if (v19) {
      BOOL v20 = v19 < 0;
    }
    size_t v21 = (uint64_t *)&v43;
    if (v20) {
      goto LABEL_52;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry *&,otbr::Mdns::Publisher::TxtEntry *&>( (uint64_t *)&v43,  (uint64_t *)&v42);
    int v22 = v41;
    BOOL v23 = v42;
    if (*((char *)v42 + 23) < 0)
    {
      BOOL v23 = *v42;
      size_t v24 = (size_t)v42[1];
    }

    else
    {
      size_t v24 = *((unsigned __int8 *)v42 + 23);
    }

    if (*((char *)v41 + 23) < 0)
    {
      int v22 = *v41;
      size_t v32 = (size_t)v41[1];
    }

    else
    {
      size_t v32 = *((unsigned __int8 *)v41 + 23);
    }

    if (v24 >= v32) {
      size_t v34 = v32;
    }
    else {
      size_t v34 = v24;
    }
    int v35 = memcmp(v22, v23, v34);
    BOOL v36 = v32 < v24;
    if (v35) {
      BOOL v36 = v35 < 0;
    }
    if (v36)
    {
      size_t v21 = (uint64_t *)&v42;
LABEL_52:
      BOOL v37 = (uint64_t *)&v41;
LABEL_61:
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry *&,otbr::Mdns::Publisher::TxtEntry *&>( v21,  v37);
    }
  }

  else
  {
    if ((v7 & 0x80) != 0)
    {
      int v15 = a2;
      a2  = (const void **)*a2;
      size_t v7 = (size_t)v15[1];
    }

    if ((char)v3[23] < 0)
    {
      size_t v25 = v3;
      unint64_t v3 = *(unsigned __int8 **)v3;
      size_t v16 = *((void *)v25 + 1);
    }

    else
    {
      size_t v16 = v3[23];
    }

    if (v7 >= v16) {
      size_t v26 = v16;
    }
    else {
      size_t v26 = v7;
    }
    int v27 = memcmp(v3, a2, v26);
    BOOL v28 = v16 < v7;
    if (v27) {
      BOOL v28 = v27 < 0;
    }
    if (v28)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry *&,otbr::Mdns::Publisher::TxtEntry *&>( (uint64_t *)&v42,  (uint64_t *)&v41);
      int v29 = v42;
      BOOL v30 = v43;
      if (*((char *)v43 + 23) < 0)
      {
        BOOL v30 = *v43;
        size_t v31 = (size_t)v43[1];
      }

      else
      {
        size_t v31 = *((unsigned __int8 *)v43 + 23);
      }

      if (*((char *)v42 + 23) < 0)
      {
        int v29 = *v42;
        size_t v33 = (size_t)v42[1];
      }

      else
      {
        size_t v33 = *((unsigned __int8 *)v42 + 23);
      }

      if (v31 >= v33) {
        size_t v38 = v33;
      }
      else {
        size_t v38 = v31;
      }
      int v39 = memcmp(v29, v30, v38);
      BOOL v40 = v33 < v31;
      if (v39) {
        BOOL v40 = v39 < 0;
      }
      if (v40)
      {
        size_t v21 = (uint64_t *)&v43;
        BOOL v37 = (uint64_t *)&v42;
        goto LABEL_61;
      }
    }
  }

void std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*>( const void **__s2, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = __s2;
  uint64_t v37 = a2;
  size_t v38 = __s2;
  switch(0xAAAAAAAAAAAAAAABLL * ((a2 - (uint64_t)__s2) >> 4))
  {
    case 0uLL:
    case 1uLL:
      return;
    case 2uLL:
      uint64_t v4 = (const void *)(a2 - 48);
      uint64_t v37 = a2 - 48;
      if (*((char *)v3 + 23) < 0)
      {
        BOOL v28 = v3;
        unint64_t v3 = (const void **)*v3;
        size_t v5 = (size_t)v28[1];
      }

      else
      {
        size_t v5 = *((unsigned __int8 *)v3 + 23);
      }

      if (*(char *)(a2 - 25) < 0)
      {
        uint64_t v4 = *(const void **)(a2 - 48);
        size_t v29 = *(void *)(a2 - 40);
      }

      else
      {
        size_t v29 = *(unsigned __int8 *)(a2 - 25);
      }

      if (v5 >= v29) {
        size_t v30 = v29;
      }
      else {
        size_t v30 = v5;
      }
      int v31 = memcmp(v4, v3, v30);
      BOOL v32 = v29 < v5;
      if (v31) {
        BOOL v32 = v31 < 0;
      }
      if (v32) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry *&,otbr::Mdns::Publisher::TxtEntry *&>( (uint64_t *)&v38,  &v37);
      }
      break;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*>( (uint64_t)__s2,  __s2 + 6,  a2 - 48);
      break;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*>( (uint64_t)__s2,  __s2 + 6,  (uint64_t)(__s2 + 12),  a2 - 48);
      break;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*,0>( (uint64_t)__s2,  __s2 + 6,  (uint64_t)(__s2 + 12),  (uint64_t)(__s2 + 18),  a2 - 48);
      break;
    default:
      size_t v6 = __s2 + 12;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*>( (uint64_t)__s2,  __s2 + 6,  (uint64_t)(__s2 + 12));
      size_t v7 = v3 + 18;
      if (v3 + 18 != (const void **)v2)
      {
        int v8 = 0;
        while (1)
        {
          if (*((char *)v6 + 23) < 0)
          {
            size_t v10 = *v6;
            size_t v9 = (size_t)v6[1];
          }

          else
          {
            size_t v9 = *((unsigned __int8 *)v6 + 23);
            size_t v10 = v6;
          }

          if (*((char *)v7 + 23) < 0)
          {
            BOOL v12 = *v7;
            size_t v11 = (size_t)v7[1];
          }

          else
          {
            size_t v11 = *((unsigned __int8 *)v7 + 23);
            BOOL v12 = v7;
          }

          if (v9 >= v11) {
            size_t v13 = v11;
          }
          else {
            size_t v13 = v9;
          }
          int v14 = memcmp(v12, v10, v13);
          BOOL v15 = v11 < v9;
          if (v14) {
            BOOL v15 = v14 < 0;
          }
          if (v15)
          {
            *(_OWORD *)__p  = *(_OWORD *)v7;
            size_t v34 = v7[2];
            char *v7 = 0LL;
            v7[1]  = 0LL;
            __n128 v35 = 0uLL;
            BOOL v36 = 0LL;
            __n128 v35 = *(__n128 *)(v7 + 3);
            BOOL v36 = v7[5];
            char v7[4] = 0LL;
            v7[5]  = 0LL;
            size_t v16 = (char *)(v6 - 6);
            uint64_t v17 = (uint64_t)v7;
            void v7[2] = 0LL;
            void v7[3] = 0LL;
            do
            {
              uint64_t v18 = (uint64_t)(v16 + 48);
              std::string::operator=[abi:ne180100](v17, (__int128 *)v16 + 3);
              uint64_t v19 = (uint64_t)(v16 + 72);
              std::vector<unsigned char>::__move_assign(v17 + 24, (__n128 *)(v16 + 72));
              if (v16[23] < 0)
              {
                size_t v21 = *(char **)v16;
                size_t v20 = *((void *)v16 + 1);
              }

              else
              {
                size_t v20 = v16[23];
                size_t v21 = v16;
              }

              if (SHIBYTE(v34) >= 0) {
                int v22 = (void *)HIBYTE(v34);
              }
              else {
                int v22 = __p[1];
              }
              if (SHIBYTE(v34) >= 0) {
                BOOL v23 = __p;
              }
              else {
                BOOL v23 = (void **)__p[0];
              }
              else {
                size_t v24 = v20;
              }
              int v25 = memcmp(v23, v21, v24);
              BOOL v26 = (unint64_t)v22 < v20;
              if (v25) {
                BOOL v26 = v25 < 0;
              }
              v16 -= 48;
              uint64_t v17 = v18;
            }

            while (v26);
            std::string::operator=[abi:ne180100](v18, (__int128 *)__p);
            std::vector<unsigned char>::__move_assign(v19, &v35);
            if (__CFADD__(v8++, 1))
            {
              __break(0x5500u);
              return;
            }

            if (v8 == 8) {
              v7 += 6;
            }
            int v39 = &v35;
            std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
            if (SHIBYTE(v34) < 0) {
              operator delete(__p[0]);
            }
            if (v8 == 8) {
              return;
            }
            uint64_t v2 = v37;
          }

          size_t v6 = v7;
          v7 += 6;
        }
      }

      break;
  }

void std::swap[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)__p  = *(_OWORD *)a1;
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 8)  = 0LL;
  *(void *)(a1 + 16)  = 0LL;
  *(void *)a1  = 0LL;
  uint64_t v3 = a1 + 24;
  __n128 v6 = *(__n128 *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0LL;
  *(void *)(a1 + 3ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  *(void *)(a1 + 4ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 0LL;
  std::string::operator=[abi:ne180100](a1, (__int128 *)a2);
  std::vector<unsigned char>::__move_assign(v3, (__n128 *)(a2 + 24));
  std::string::operator=[abi:ne180100](a2, (__int128 *)__p);
  std::vector<unsigned char>::__move_assign(a2 + 24, &v6);
  int v8 = &v6;
  std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*>( uint64_t a1, const void **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (const void **)a4;
  uint64_t v5 = (const void **)a3;
  __n128 v6 = a2;
  uint64_t v7 = (const void **)a1;
  int v31 = a2;
  uint64_t v32 = a1;
  uint64_t v29 = a4;
  size_t v30 = (const void **)a3;
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*>( a1,  a2,  a3);
  if (*((char *)v5 + 23) < 0)
  {
    size_t v9 = v5;
    uint64_t v5 = (const void **)*v5;
    size_t v8 = (size_t)v9[1];
  }

  else
  {
    size_t v8 = *((unsigned __int8 *)v5 + 23);
  }

  if (*((char *)v4 + 23) < 0)
  {
    size_t v11 = v4;
    uint64_t v4 = (const void **)*v4;
    size_t v10 = (size_t)v11[1];
  }

  else
  {
    size_t v10 = *((unsigned __int8 *)v4 + 23);
  }

  if (v8 >= v10) {
    size_t v12 = v10;
  }
  else {
    size_t v12 = v8;
  }
  int v13 = memcmp(v4, v5, v12);
  BOOL v14 = v10 < v8;
  if (v13) {
    BOOL v14 = v13 < 0;
  }
  if (v14)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry *&,otbr::Mdns::Publisher::TxtEntry *&>( (uint64_t *)&v30,  &v29);
    BOOL v15 = v30;
    if (*((char *)v6 + 23) < 0)
    {
      uint64_t v17 = v6;
      __n128 v6 = (const void **)*v6;
      size_t v16 = (size_t)v17[1];
    }

    else
    {
      size_t v16 = *((unsigned __int8 *)v6 + 23);
    }

    if (*((char *)v30 + 23) < 0)
    {
      BOOL v15 = *v30;
      size_t v18 = (size_t)v30[1];
    }

    else
    {
      size_t v18 = *((unsigned __int8 *)v30 + 23);
    }

    if (v16 >= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v16;
    }
    int v20 = memcmp(v15, v6, v19);
    BOOL v21 = v18 < v16;
    if (v20) {
      BOOL v21 = v20 < 0;
    }
    if (v21)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry *&,otbr::Mdns::Publisher::TxtEntry *&>( (uint64_t *)&v31,  (uint64_t *)&v30);
      int v22 = v31;
      if (*((char *)v7 + 23) < 0)
      {
        size_t v24 = v7;
        uint64_t v7 = (const void **)*v7;
        size_t v23 = (size_t)v24[1];
      }

      else
      {
        size_t v23 = *((unsigned __int8 *)v7 + 23);
      }

      if (*((char *)v31 + 23) < 0)
      {
        int v22 = *v31;
        size_t v25 = (size_t)v31[1];
      }

      else
      {
        size_t v25 = *((unsigned __int8 *)v31 + 23);
      }

      if (v23 >= v25) {
        size_t v26 = v25;
      }
      else {
        size_t v26 = v23;
      }
      int v27 = memcmp(v22, v7, v26);
      BOOL v28 = v25 < v23;
      if (v27) {
        BOOL v28 = v27 < 0;
      }
      if (v28) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry *&,otbr::Mdns::Publisher::TxtEntry *&>( &v32,  (uint64_t *)&v31);
      }
    }
  }

void std::__sort_dispatch[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Ip6Address *,std::__less<void,void>>( unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3 = (2 * __clz(((char *)a2 - (char *)a1) >> 4)) ^ 0x7E;
  if (a2 == a1) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = v3;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *,false>(a1, a2, a3, v4, 1);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *,false>( unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    size_t v10 = a1;
    size_t v11 = a1 + 2;
    size_t v12 = a1 + 4;
LABEL_2:
    uint64_t v13 = (char *)a2 - (char *)v10;
    unint64_t v14 = ((char *)a2 - (char *)v10) >> 4;
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        unint64_t v25 = *(a2 - 2);
        size_t v24 = a2 - 2;
        unint64_t v26 = bswap64(v25);
        unint64_t v27 = bswap64(*v10);
        if (v26 == v27 && (unint64_t v26 = bswap64(v24[1]), v27 = bswap64(v10[1]), v26 == v27))
        {
          int v28 = 0;
        }

        else if (v26 < v27)
        {
          int v28 = -1;
        }

        else
        {
          int v28 = 1;
        }

        if (v28 < 0)
        {
          __int128 v30 = *(_OWORD *)v10;
          *(_OWORD *)size_t v10 = *(_OWORD *)v24;
          *(_OWORD *)size_t v24 = v30;
        }

        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>( v10,  v10 + 2,  a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>( v10,  v10 + 2,  v10 + 4,  a2 - 2);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>( v10,  v10 + 2,  v10 + 4,  v10 + 6,  a2 - 2);
        return;
      default:
        if (v13 <= 383)
        {
          if ((a5 & 1) != 0) {
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>( v10,  a2);
          }
          else {
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>( v10,  a2);
          }
          return;
        }

        if (!a4)
        {
          if (v10 != a2) {
            std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *,otbr::Ip6Address *>( v10,  a2,  a2,  a3);
          }
          return;
        }

        if (__OFSUB__(a4--, 1LL)) {
          __break(0x5515u);
        }
        size_t v16 = a2 - 2;
        uint64_t v17 = &v10[2 * (v14 >> 1)];
        if ((unint64_t)v13 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>( &v10[2 * (v14 >> 1)],  v10,  v16);
          if ((a5 & 1) != 0) {
            goto LABEL_17;
          }
        }

        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>( v10,  &v10[2 * (v14 >> 1)],  v16);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>( v11,  v17 - 2,  a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>( v12,  v17 + 2,  a2 - 6);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>( v17 - 2,  v17,  v17 + 2);
          __int128 v29 = *(_OWORD *)v10;
          *(_OWORD *)size_t v10 = *(_OWORD *)v17;
          *(_OWORD *)uint64_t v17 = v29;
          if ((a5 & 1) != 0) {
            goto LABEL_17;
          }
        }

        unint64_t v18 = bswap64(*(v10 - 2));
        unint64_t v19 = bswap64(*v10);
        if (v18 == v19 && (unint64_t v18 = bswap64(*(v10 - 1)), v19 = bswap64(v10[1]), v18 == v19))
        {
          int v20 = 0;
        }

        else if (v18 < v19)
        {
          int v20 = -1;
        }

        else
        {
          int v20 = 1;
        }

        if ((v20 & 0x80000000) == 0)
        {
          a1  = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Ip6Address *,std::__less<void,void> &>( v10,  a2);
          a5  = 0;
          continue;
        }

unint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>( unint64_t *result, unint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = 0LL;
      uint64_t v4 = result;
      do
      {
        uint64_t v5 = v2;
        unint64_t v6 = bswap64(v4[2]);
        unint64_t v7 = bswap64(*v4);
        if (v6 != v7 || (unint64_t v6 = bswap64(v5[1]), v7 = bswap64(v4[1]), v6 != v7))
        {
          int v8 = v6 < v7 ? -1 : 1;
          if (v8 < 0)
          {
            __int128 v15 = *(_OWORD *)v5;
            uint64_t v9 = v3;
            while (1)
            {
              size_t v10 = (char *)result + v9;
              *(_OWORD *)((char *)result + v9 + 16)  = *(_OWORD *)((char *)result + v9);
              if (!v9) {
                break;
              }
              unint64_t v11 = bswap64(v15);
              unint64_t v12 = bswap64(*((void *)v10 - 2));
              if (v11 == v12
                && (unint64_t v11 = bswap64(*((unint64_t *)&v15 + 1)), v12 = bswap64(*((void *)v10 - 1)), v11 == v12))
              {
                int v13 = 0;
              }

              else if (v11 < v12)
              {
                int v13 = -1;
              }

              else
              {
                int v13 = 1;
              }

              v9 -= 16LL;
              if ((v13 & 0x80000000) == 0)
              {
                unint64_t v14 = (unint64_t *)((char *)result + v9 + 16);
                goto LABEL_21;
              }
            }

            unint64_t v14 = result;
LABEL_21:
            *(_OWORD *)unint64_t v14 = v15;
          }
        }

        uint64_t v2 = v5 + 2;
        v3 += 16LL;
        uint64_t v4 = v5;
      }

      while (v5 + 2 != a2);
    }
  }

  return result;
}

unint64_t *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>( unint64_t *result, unint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = result - 2;
      do
      {
        uint64_t v4 = v2;
        unint64_t v5 = bswap64(*v2);
        unint64_t v6 = bswap64(*result);
        if (v5 != v6 || (unint64_t v5 = bswap64(v4[1]), v6 = bswap64(result[1]), v5 != v6))
        {
          int v7 = v5 < v6 ? -1 : 1;
          if (v7 < 0)
          {
            __int128 v12 = *(_OWORD *)v4;
            int v8 = v3;
            do
            {
              *((_OWORD *)v8 + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = *((_OWORD *)v8 + 1);
              unint64_t v9 = bswap64(v12);
              unint64_t v10 = bswap64(*v8);
              if (v9 == v10 && (unint64_t v9 = bswap64(*((unint64_t *)&v12 + 1)), v10 = bswap64(v8[1]), v9 == v10))
              {
                int v11 = 0;
              }

              else if (v9 < v10)
              {
                int v11 = -1;
              }

              else
              {
                int v11 = 1;
              }

              v8 -= 2;
            }

            while (v11 < 0);
            *((_OWORD *)v8 + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = v12;
          }
        }

        uint64_t v2 = v4 + 2;
        v3 += 2;
        uint64_t result = v4;
      }

      while (v4 + 2 != a2);
    }
  }

  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>( unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = bswap64(*a2);
  unint64_t v4 = bswap64(*a1);
  if (v3 == v4 && (unint64_t v3 = bswap64(a2[1]), v4 = bswap64(a1[1]), v3 == v4))
  {
    int v5 = 0;
  }

  else if (v3 < v4)
  {
    int v5 = -1;
  }

  else
  {
    int v5 = 1;
  }

  unint64_t v6 = bswap64(*a3);
  unint64_t v7 = bswap64(*a2);
  if (v6 == v7 && (unint64_t v6 = bswap64(a3[1]), v7 = bswap64(a2[1]), v6 == v7))
  {
    int v8 = 0;
    if (v5 < 0) {
      goto LABEL_10;
    }
  }

  else
  {
    if (v6 < v7) {
      int v8 = -1;
    }
    else {
      int v8 = 1;
    }
    if (v5 < 0)
    {
LABEL_10:
      if (v8 < 0)
      {
        __int128 v20 = *(_OWORD *)a1;
        *(_OWORD *)a1  = *(_OWORD *)a3;
        *(_OWORD *)a3  = v20;
      }

      else
      {
        __int128 v9 = *(_OWORD *)a1;
        *(_OWORD *)a1  = *(_OWORD *)a2;
        *(_OWORD *)a2  = v9;
        unint64_t v10 = bswap64(*a3);
        unint64_t v11 = bswap64(*a2);
        if (v10 != v11 || (v10 = bswap64(a3[1]), unint64_t v11 = bswap64(a2[1]), v10 != v11))
        {
          int v16 = v10 < v11 ? -1 : 1;
          if (v16 < 0)
          {
            __int128 v17 = *(_OWORD *)a2;
            *(_OWORD *)a2  = *(_OWORD *)a3;
            *(_OWORD *)a3  = v17;
            return 2LL;
          }
        }
      }

      return 1LL;
    }
  }

  if ((v8 & 0x80000000) == 0) {
    return 0LL;
  }
  __int128 v13 = *(_OWORD *)a2;
  *(_OWORD *)a2  = *(_OWORD *)a3;
  *(_OWORD *)a3  = v13;
  unint64_t v14 = bswap64(*a2);
  unint64_t v15 = bswap64(*a1);
  if (v14 != v15 || (unint64_t v14 = bswap64(a2[1]), v15 = bswap64(a1[1]), v14 != v15))
  {
    int v18 = v14 < v15 ? -1 : 1;
    if (v18 < 0)
    {
      __int128 v19 = *(_OWORD *)a1;
      *(_OWORD *)a1  = *(_OWORD *)a2;
      *(_OWORD *)a2  = v19;
      return 2LL;
    }
  }

  return 1LL;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Ip6Address *,std::__less<void,void> &>( unint64_t *a1, unint64_t *a2)
{
  __int128 v32 = *(_OWORD *)a1;
  unint64_t v2 = bswap64(*a1);
  unint64_t v3 = bswap64(*(a2 - 2));
  if (v2 == v3 && (unint64_t v2 = bswap64(*((unint64_t *)&v32 + 1)), v3 = bswap64(*(a2 - 1)), v2 == v3)
    || (v2 < v3 ? (int v10 = -1) : (int v10 = 1), (v10 & 0x80000000) == 0))
  {
    unint64_t v11 = a1 + 2;
    do
    {
      int v5 = v11;
      if (v11 >= a2) {
        break;
      }
      unint64_t v12 = bswap64(v32);
      unint64_t v13 = bswap64(*v5);
      else {
        int v14 = v12 < v13 ? -1 : 1;
      }
      unint64_t v11 = v5 + 2;
    }

    while ((v14 & 0x80000000) == 0);
  }

  else
  {
    unint64_t v4 = a1;
    int v5 = a1;
    do
    {
      unint64_t v6 = v5[2];
      v5 += 2;
      unint64_t v7 = bswap64(v32);
      unint64_t v8 = bswap64(v6);
      if (v7 == v8 && (unint64_t v7 = bswap64(*((unint64_t *)&v32 + 1)), v8 = bswap64(v4[3]), v7 == v8))
      {
        int v9 = 0;
      }

      else if (v7 < v8)
      {
        int v9 = -1;
      }

      else
      {
        int v9 = 1;
      }

      unint64_t v4 = v5;
    }

    while ((v9 & 0x80000000) == 0);
  }

  if (v5 >= a2)
  {
    unint64_t v15 = a2;
  }

  else
  {
    unint64_t v15 = a2;
    do
    {
      unint64_t v16 = *(v15 - 2);
      v15 -= 2;
      unint64_t v17 = bswap64(v32);
      unint64_t v18 = bswap64(v16);
      if (v17 == v18 && (unint64_t v17 = bswap64(*((unint64_t *)&v32 + 1)), v18 = bswap64(*(a2 - 1)), v17 == v18))
      {
        int v19 = 0;
      }

      else if (v17 < v18)
      {
        int v19 = -1;
      }

      else
      {
        int v19 = 1;
      }

      a2  = v15;
    }

    while (v19 < 0);
  }

  while (v5 < v15)
  {
    __int128 v33 = *(_OWORD *)v5;
    *(_OWORD *)int v5 = *(_OWORD *)v15;
    *(_OWORD *)unint64_t v15 = v33;
    __int128 v20 = v5;
    do
    {
      unint64_t v21 = v5[2];
      v5 += 2;
      unint64_t v22 = bswap64(v32);
      unint64_t v23 = bswap64(v21);
      if (v22 == v23 && (unint64_t v22 = bswap64(*((unint64_t *)&v32 + 1)), v23 = bswap64(v20[3]), v22 == v23))
      {
        int v24 = 0;
      }

      else if (v22 < v23)
      {
        int v24 = -1;
      }

      else
      {
        int v24 = 1;
      }

      __int128 v20 = v5;
    }

    while ((v24 & 0x80000000) == 0);
    unint64_t v25 = v15;
    do
    {
      unint64_t v26 = *(v15 - 2);
      v15 -= 2;
      unint64_t v27 = bswap64(v32);
      unint64_t v28 = bswap64(v26);
      if (v27 == v28 && (v27 = bswap64(*((unint64_t *)&v32 + 1)), unint64_t v28 = bswap64(*(v25 - 1)), v27 == v28))
      {
        int v29 = 0;
      }

      else if (v27 < v28)
      {
        int v29 = -1;
      }

      else
      {
        int v29 = 1;
      }

      unint64_t v25 = v15;
    }

    while (v29 < 0);
  }

  __int128 v30 = v5 - 2;
  if (v5 - 2 != a1) {
    *(_OWORD *)a1  = *(_OWORD *)v30;
  }
  *(_OWORD *)__int128 v30 = v32;
  return v5;
}

__int128 *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Ip6Address *,std::__less<void,void> &>( __int128 *a1, __int128 *a2)
{
  uint64_t v2 = 0LL;
  __int128 v30 = *a1;
  do
  {
    unint64_t v3 = bswap64(*(void *)&a1[v2 + 1]);
    unint64_t v4 = bswap64(v30);
    if (v3 == v4
      && (unint64_t v3 = bswap64(*((void *)&a1[v2 + 1] + 1)), v4 = bswap64(*((unint64_t *)&v30 + 1)), v3 == v4))
    {
      int v5 = 0;
    }

    else if (v3 < v4)
    {
      int v5 = -1;
    }

    else
    {
      int v5 = 1;
    }

    ++v2;
  }

  while (v5 < 0);
  unint64_t v6 = &a1[v2];
  unint64_t v7 = &a1[v2 - 1];
  if (v2 == 1)
  {
    while (v6 < a2)
    {
      unint64_t v8 = a2 - 1;
      unint64_t v13 = bswap64(*((void *)a2 - 2));
      unint64_t v14 = bswap64(v30);
      if (v13 == v14
        && (unint64_t v13 = bswap64(*((void *)a2 - 1)), v14 = bswap64(*((unint64_t *)&v30 + 1)), v13 == v14))
      {
        int v15 = 0;
      }

      else if (v13 < v14)
      {
        int v15 = -1;
      }

      else
      {
        int v15 = 1;
      }

      --a2;
      if (v15 < 0) {
        goto LABEL_28;
      }
    }

    unint64_t v8 = a2;
  }

  else
  {
    unint64_t v8 = a2;
    do
    {
      unint64_t v9 = *((void *)v8-- - 2);
      unint64_t v10 = bswap64(v9);
      unint64_t v11 = bswap64(v30);
      if (v10 == v11
        && (v10 = bswap64(*((void *)a2 - 1)), unint64_t v11 = bswap64(*((unint64_t *)&v30 + 1)), v10 == v11))
      {
        int v12 = 0;
      }

      else if (v10 < v11)
      {
        int v12 = -1;
      }

      else
      {
        int v12 = 1;
      }

      a2  = v8;
    }

    while ((v12 & 0x80000000) == 0);
  }

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>( unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  uint64_t result = 1LL;
  switch(v4)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      unint64_t v6 = a2 - 2;
      unint64_t v7 = bswap64(*(a2 - 2));
      unint64_t v8 = bswap64(*a1);
      if (v7 != v8 || (unint64_t v7 = bswap64(*(a2 - 1)), v8 = bswap64(a1[1]), v7 != v8))
      {
        if (v7 < v8) {
          int v23 = -1;
        }
        else {
          int v23 = 1;
        }
        if (v23 < 0)
        {
          __int128 v24 = *(_OWORD *)a1;
          *(_OWORD *)a1  = *(_OWORD *)v6;
          *(_OWORD *)unint64_t v6 = v24;
        }
      }

      return result;
    case 3LL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>(a1, a1 + 2, a2 - 2);
      return 1LL;
    case 4LL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>( a1,  a1 + 2,  a1 + 4,  a2 - 2);
      return 1LL;
    case 5LL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>( a1,  a1 + 2,  a1 + 4,  a1 + 6,  a2 - 2);
      return 1LL;
    default:
      unint64_t v9 = a1 + 4;
      uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>( a1,  a1 + 2,  a1 + 4);
      unint64_t v10 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1LL;
      }
      uint64_t v11 = 0LL;
      int v12 = 0;
      break;
  }

  while (1)
  {
    unint64_t v13 = bswap64(*v10);
    unint64_t v14 = bswap64(*v9);
    if (v13 == v14)
    {
      unint64_t v13 = bswap64(v10[1]);
      unint64_t v14 = bswap64(v9[1]);
      if (v13 == v14) {
        goto LABEL_26;
      }
    }

    int v15 = v13 < v14 ? -1 : 1;
    if ((v15 & 0x80000000) == 0) {
      goto LABEL_26;
    }
    __int128 v25 = *(_OWORD *)v10;
    uint64_t v16 = v11;
    while (1)
    {
      unint64_t v17 = (char *)a1 + v16;
      *(_OWORD *)((char *)a1 + v16 + 48)  = *(_OWORD *)((char *)a1 + v16 + 32);
      if (v16 == -32) {
        break;
      }
      unint64_t v18 = bswap64(v25);
      unint64_t v19 = bswap64(*((void *)v17 + 2));
      if (v18 == v19
        && (unint64_t v18 = bswap64(*((unint64_t *)&v25 + 1)), v19 = bswap64(*((void *)v17 + 3)), v18 == v19))
      {
        int v20 = 0;
      }

      else if (v18 < v19)
      {
        int v20 = -1;
      }

      else
      {
        int v20 = 1;
      }

      v16 -= 16LL;
      if ((v20 & 0x80000000) == 0)
      {
        unint64_t v21 = (unint64_t *)((char *)a1 + v16 + 48);
        goto LABEL_24;
      }
    }

    unint64_t v21 = a1;
LABEL_24:
    *(_OWORD *)unint64_t v21 = v25;
    if (__CFADD__(v12++, 1)) {
      break;
    }
    if (v12 == 8) {
      return v10 + 2 == a2;
    }
LABEL_26:
    unint64_t v9 = v10;
    v11 += 16LL;
    v10 += 2;
    if (v10 == a2) {
      return 1LL;
    }
  }

  __break(0x5500u);
  return result;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>( unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t v9 = bswap64(*a4);
  unint64_t v10 = bswap64(*a3);
  if (v9 != v10 || (unint64_t v9 = bswap64(a4[1]), v10 = bswap64(a3[1]), v9 != v10))
  {
    int v11 = v9 < v10 ? -1 : 1;
    if (v11 < 0)
    {
      __n128 result = *(__n128 *)a3;
      *(_OWORD *)a3  = *(_OWORD *)a4;
      *(__n128 *)a4  = result;
      unint64_t v12 = bswap64(*a3);
      unint64_t v13 = bswap64(*a2);
      if (v12 != v13 || (unint64_t v12 = bswap64(a3[1]), v13 = bswap64(a2[1]), v12 != v13))
      {
        int v14 = v12 < v13 ? -1 : 1;
        if (v14 < 0)
        {
          __n128 result = *(__n128 *)a2;
          *(_OWORD *)a2  = *(_OWORD *)a3;
          *(__n128 *)a3  = result;
          unint64_t v15 = bswap64(*a2);
          unint64_t v16 = bswap64(*a1);
          if (v15 != v16 || (unint64_t v15 = bswap64(a2[1]), v16 = bswap64(a1[1]), v15 != v16))
          {
            if (v15 < v16) {
              int v17 = -1;
            }
            else {
              int v17 = 1;
            }
            if (v17 < 0)
            {
              __n128 result = *(__n128 *)a1;
              *(_OWORD *)a1  = *(_OWORD *)a2;
              *(__n128 *)a2  = result;
            }
          }
        }
      }
    }
  }

  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>( unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  result.n128_u64[0]  = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>( a1,  a2,  a3,  a4).n128_u64[0];
  unint64_t v11 = bswap64(*a5);
  unint64_t v12 = bswap64(*a4);
  if (v11 != v12 || (unint64_t v11 = bswap64(a5[1]), v12 = bswap64(a4[1]), v11 != v12))
  {
    int v13 = v11 < v12 ? -1 : 1;
    if (v13 < 0)
    {
      __n128 result = *(__n128 *)a4;
      *(_OWORD *)a4  = *(_OWORD *)a5;
      *(__n128 *)a5  = result;
      unint64_t v14 = bswap64(*a4);
      unint64_t v15 = bswap64(*a3);
      if (v14 != v15 || (unint64_t v14 = bswap64(a4[1]), v15 = bswap64(a3[1]), v14 != v15))
      {
        int v16 = v14 < v15 ? -1 : 1;
        if (v16 < 0)
        {
          __n128 result = *(__n128 *)a3;
          *(_OWORD *)a3  = *(_OWORD *)a4;
          *(__n128 *)a4  = result;
          unint64_t v17 = bswap64(*a3);
          unint64_t v18 = bswap64(*a2);
          if (v17 != v18 || (unint64_t v17 = bswap64(a3[1]), v18 = bswap64(a2[1]), v17 != v18))
          {
            int v19 = v17 < v18 ? -1 : 1;
            if (v19 < 0)
            {
              __n128 result = *(__n128 *)a2;
              *(_OWORD *)a2  = *(_OWORD *)a3;
              *(__n128 *)a3  = result;
              unint64_t v20 = bswap64(*a2);
              unint64_t v21 = bswap64(*a1);
              if (v20 == v21 && (unint64_t v20 = bswap64(a2[1]), v21 = bswap64(a1[1]), v20 == v21))
              {
                int v22 = 0;
              }

              else if (v20 < v21)
              {
                int v22 = -1;
              }

              else
              {
                int v22 = 1;
              }

              if (v22 < 0)
              {
                __n128 result = *(__n128 *)a1;
                *(_OWORD *)a1  = *(_OWORD *)a2;
                *(__n128 *)a2  = result;
              }
            }
          }
        }
      }
    }
  }

  return result;
}

unint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *,otbr::Ip6Address *>( unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unint64_t v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>( (uint64_t)a1,  a4,  v9,  v12);
        v12 -= 2;
        --v11;
      }

      while (v11);
    }

    int v13 = a2;
    if (a2 != a3)
    {
      unint64_t v14 = a2;
      do
      {
        unint64_t v15 = bswap64(*v14);
        unint64_t v16 = bswap64(*a1);
        if (v15 != v16 || (unint64_t v15 = bswap64(v14[1]), v16 = bswap64(a1[1]), v15 != v16))
        {
          int v17 = v15 < v16 ? -1 : 1;
          if (v17 < 0)
          {
            __int128 v18 = *(_OWORD *)v14;
            *(_OWORD *)unint64_t v14 = *(_OWORD *)a1;
            *(_OWORD *)a1  = v18;
            std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>( (uint64_t)a1,  a4,  v9,  a1);
          }
        }

        v14 += 2;
      }

      while (v14 != a3);
      int v13 = a3;
    }

    if (v8 >= 17)
    {
      uint64_t v19 = (unint64_t)v8 >> 4;
      unint64_t v20 = a2 - 2;
      do
      {
        __int128 v24 = *(_OWORD *)a1;
        unint64_t v21 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>( a1,  a4,  v19);
        if (v20 == v21)
        {
          *(_OWORD *)unint64_t v21 = v24;
        }

        else
        {
          *(_OWORD *)unint64_t v21 = *(_OWORD *)v20;
          *(_OWORD *)unint64_t v20 = v24;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>( (uint64_t)a1,  (uint64_t)(v21 + 2),  a4,  ((char *)(v21 + 2) - (char *)a1) >> 4);
        }

        v20 -= 2;
      }

      while (v19-- > 2);
    }

    return v13;
  }

  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>( uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (unint64_t *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        unint64_t v10 = bswap64(*v8);
        unint64_t v11 = bswap64(v8[2]);
        if (v10 == v11 && (v10 = bswap64(v8[1]), unint64_t v11 = bswap64(v8[3]), v10 == v11)) {
          int v12 = 0;
        }
        else {
          int v12 = v10 < v11 ? -1 : 1;
        }
        if (v12 < 0)
        {
          uint64_t v7 = v9;
          v8 += 2;
        }
      }

      if ((unint64_t v13 = bswap64(*v8), v14 = bswap64(*a4), v13 == v14)
        && (unint64_t v13 = bswap64(v8[1]), v14 = bswap64(a4[1]), v13 == v14)
        || (v13 < v14 ? (int v15 = -1) : (int v15 = 1), (v15 & 0x80000000) == 0))
      {
        __int128 v23 = *(_OWORD *)a4;
        while (1)
        {
          unint64_t v16 = v8;
          *(_OWORD *)a4  = *(_OWORD *)v8;
          if (v5 < v7)
          {
LABEL_38:
            *(_OWORD *)unint64_t v16 = v23;
            return result;
          }

          if (v7 + 0x4000000000000000LL < 0) {
            break;
          }
          uint64_t v7 = (2 * v7) | 1;
          if (__OFADD__(v7, 1LL)) {
            goto LABEL_41;
          }
          uint64_t v8 = (unint64_t *)(result + 16 * v7);
          if (v7 + 1 < a3)
          {
            unint64_t v17 = bswap64(*v8);
            unint64_t v18 = bswap64(v8[2]);
            if (v17 == v18 && (unint64_t v17 = bswap64(v8[1]), v18 = bswap64(v8[3]), v17 == v18)) {
              int v19 = 0;
            }
            else {
              int v19 = v17 < v18 ? -1 : 1;
            }
            if (v19 < 0)
            {
              v8 += 2;
              ++v7;
            }
          }

          unint64_t v20 = bswap64(*v8);
          unint64_t v21 = bswap64(v23);
          if (v20 == v21 && (unint64_t v20 = bswap64(v8[1]), v21 = bswap64(*((unint64_t *)&v23 + 1)), v20 == v21))
          {
            int v22 = 0;
          }

          else if (v20 < v21)
          {
            int v22 = -1;
          }

          else
          {
            int v22 = 1;
          }

          a4  = v16;
          if (v22 < 0) {
            goto LABEL_38;
          }
        }

        __break(0x550Cu);
LABEL_41:
        __break(0x5500u);
      }
    }
  }

  return result;
}

unint64_t *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>( unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0LL;
  uint64_t v4 = a3 - 2;
  BOOL v5 = __OFSUB__(a3, 2LL);
  if (v4 < 0) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v6 = v4 >> 1;
  while (v3 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = (2 * v3) | 1;
    if (__OFADD__(v7, 1LL)) {
      goto LABEL_24;
    }
    uint64_t v8 = &result[2 * v3 + 2];
    if (v7 + 1 >= a3)
    {
      uint64_t v3 = (2 * v3) | 1;
    }

    else
    {
      unint64_t v9 = bswap64(*v8);
      unint64_t v10 = bswap64(result[2 * v3 + 4]);
      if (v9 == v10 && (unint64_t v9 = bswap64(result[2 * v3 + 3]), v10 = bswap64(result[2 * v3 + 5]), v9 == v10))
      {
        int v11 = 0;
      }

      else if (v9 < v10)
      {
        int v11 = -1;
      }

      else
      {
        int v11 = 1;
      }

      if (v11 >= 0)
      {
        uint64_t v3 = (2 * v3) | 1;
      }

      else
      {
        uint64_t v8 = &result[2 * v3 + 4];
        uint64_t v3 = v7 + 1;
      }
    }

    *(_OWORD *)__n128 result = *(_OWORD *)v8;
    if (v5) {
      goto LABEL_25;
    }
    __n128 result = v8;
    if (v3 > v6) {
      return v8;
    }
  }

  __break(0x550Cu);
LABEL_24:
  __break(0x5500u);
LABEL_25:
  __break(0x5515u);
  return result;
}

__n128 std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    BOOL v5 = (unint64_t *)(a1 + 16 * v4);
    uint64_t v6 = (__n128 *)(a2 - 16);
    unint64_t v7 = bswap64(*v5);
    unint64_t v8 = bswap64(*(void *)(a2 - 16));
    if (v7 != v8 || (unint64_t v7 = bswap64(v5[1]), v8 = bswap64(*(void *)(a2 - 8)), v7 != v8))
    {
      int v9 = v7 < v8 ? -1 : 1;
      if (v9 < 0)
      {
        __n128 v15 = *v6;
        do
        {
          unint64_t v10 = (__n128 *)v5;
          __n128 *v6 = *(__n128 *)v5;
          if (!v4) {
            break;
          }
          unint64_t v4 = (v4 - 1) >> 1;
          BOOL v5 = (unint64_t *)(a1 + 16 * v4);
          unint64_t v11 = bswap64(*v5);
          unint64_t v12 = bswap64(v15.n128_u64[0]);
          if (v11 == v12 && (unint64_t v11 = bswap64(v5[1]), v12 = bswap64(v15.n128_u64[1]), v11 == v12)) {
            int v13 = 0;
          }
          else {
            int v13 = v11 < v12 ? -1 : 1;
          }
          uint64_t v6 = v10;
        }

        while (v13 < 0);
        __n128 result = v15;
        __n128 *v10 = v15;
      }
    }
  }

  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::__emplace_unique_key_args<std::string,std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>( uint64_t **a1, const void **a2, __n128 *a3, unint64_t *a4)
{
  unint64_t v7 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>( (uint64_t)a1,  &v12,  a2);
  unint64_t v8 = *v7;
  if (!*v7)
  {
    int v9 = v7;
    std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::__construct_node<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>( (uint64_t)a1,  a3,  a4,  (uint64_t)v11);
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__insert_node_at( a1,  v12,  v9,  (uint64_t *)v11[0]);
    unint64_t v8 = (uint64_t *)v11[0];
    v11[0]  = 0LL;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,void *>>>>::reset[abi:ne180100]( v11,  0LL);
  }

  return v8;
}

__n128 std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::__construct_node<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>@<Q0>( uint64_t a1@<X0>, __n128 *a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  unint64_t v8 = (__n128 *)operator new(0x40uLL);
  *(void *)a4  = v8;
  *(void *)(a4 + 8)  = v7;
  __n128 result = *a2;
  void v8[2] = *a2;
  unint64_t v10 = a2[1].n128_u64[0];
  a2->n128_u64[1]  = 0LL;
  a2[1].n128_u64[0]  = 0LL;
  a2->n128_u64[0]  = 0LL;
  unint64_t v11 = *a3;
  *a3  = 0LL;
  v8[3].n128_u64[0]  = v10;
  v8[3].n128_u64[1]  = v11;
  *(_BYTE *)(a4 + 16)  = 1;
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,void *>>>>::reset[abi:ne180100]( void **a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1  = a2;
  if (v3) {
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,void *>>>::operator()[abi:ne180100]( (uint64_t)(a1 + 1),  v3);
  }
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,void *>>>::operator()[abi:ne180100]( uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8)) {
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,0>((uint64_t)__p + 32);
  }
  if (__p) {
    operator delete(__p);
  }
}

uint64_t std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::erase( uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::__map_value_compare<std::string,std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>>>::__remove_node_pointer( a1,  a2);
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,0>((uint64_t)(a2 + 4));
  operator delete(a2);
  return v3;
}

void std::allocate_shared[abi:ne180100]<otbr::OnceCallback<void ()(otbrError)>,std::allocator<otbr::OnceCallback<void ()(otbrError)>>,otbr::OnceCallback<void ()(otbrError)>,void>( void *a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = v6;
  uint64_t v6 = 0LL;
  *a2  = v4 + 3;
  a2[1]  = v4;
  std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<otbr::OnceCallback<void ()(otbrError)>>>>::__destroy[abi:ne180100]((uint64_t)v5);
}

void sub_100378690(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<otbr::OnceCallback<void ()(otbrError)>>>>::__allocation_guard[abi:ne180100]<std::allocator<otbr::OnceCallback<void ()(otbrError)>>>( uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 8)  = a2;
  *(void *)(a1 + 16)  = std::allocator<std::__shared_ptr_emplace<otbr::OnceCallback<void ()(otbrError)>>>::allocate[abi:ne180100]( a1,  a2);
  return a1;
}

void *std::allocator<std::__shared_ptr_emplace<otbr::OnceCallback<void ()(otbrError)>>>::allocate[abi:ne180100]( uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493LL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(56 * a2);
}

void *std::__shared_ptr_emplace<otbr::OnceCallback<void ()(otbrError)>>::__shared_ptr_emplace[abi:ne180100]<otbr::OnceCallback<void ()(otbrError)>,std::allocator<otbr::OnceCallback<void ()(otbrError)>>,0>( void *a1, void *a2)
{
  a1[2]  = 0LL;
  *a1  = off_100448288;
  a1[1]  = 0LL;
  otbr::OnceCallback<void ()(otbrError)>::OnceCallback((uint64_t)(a1 + 3), a2);
  return a1;
}

void std::__shared_ptr_emplace<otbr::OnceCallback<void ()(otbrError)>>::~__shared_ptr_emplace( std::__shared_weak_count *this)
{
  this->__vftable  = (std::__shared_weak_count_vtbl *)off_100448288;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<otbr::OnceCallback<void ()(otbrError)>>::~__shared_ptr_emplace( std::__shared_weak_count *a1)
{
  a1->__vftable  = (std::__shared_weak_count_vtbl *)off_100448288;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<otbr::OnceCallback<void ()(otbrError)>>::__on_zero_shared_impl[abi:ne180100]<std::allocator<otbr::OnceCallback<void ()(otbrError)>>,0>( uint64_t a1)
{
  return std::allocator_traits<std::allocator<otbr::OnceCallback<void ()(otbrError)>>>::destroy[abi:ne180100]<otbr::OnceCallback<void ()(otbrError)>,void>( (uint64_t)&v2,  (void *)(a1 + 24));
}

uint64_t std::allocator_traits<std::allocator<otbr::OnceCallback<void ()(otbrError)>>>::destroy[abi:ne180100]<otbr::OnceCallback<void ()(otbrError)>,void>( uint64_t a1, void *a2)
{
  char v2 = (void *)a2[3];
  if (v2 == a2) {
    return (*(uint64_t (**)(void *))(*a2 + 32LL))(a2);
  }
  if (v2) {
    return (*(uint64_t (**)(void))(*(void *)a2[3] + 40LL))(a2[3]);
  }
  return result;
}

void std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<otbr::OnceCallback<void ()(otbrError)>>>>::__destroy[abi:ne180100]( uint64_t a1)
{
  char v2 = *(void **)(a1 + 16);
  if (v2)
  {
    if (*(void *)(a1 + 8) >= 0x492492492492493uLL) {
      __break(0x550Cu);
    }
    else {
      operator delete(v2);
    }
  }

uint64_t std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  char v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  p_shared_owners  = (unint64_t *)&a1->__shared_owners_;
  do
    unint64_t v3 = __ldaxr(p_shared_owners);
  while (__stlxr(v3 - 1, p_shared_owners));
  if (!v3)
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }

__n128 std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::placeholders::__ph<1>>::__tuple_impl( uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(void *)a2  = 0LL;
  *(void *)(a2 + 8)  = 0LL;
  __n128 result = *(__n128 *)(a2 + 16);
  *(__n128 *)(a1 + 16)  = result;
  *(void *)(a2 + 16)  = 0LL;
  *(void *)(a2 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0LL;
  return result;
}

void *std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateServiceRegistration(std::string const&,std::string const&,std::string const&,std::vector<std::string> const&,unsigned short,std::vector<otbr::Mdns::Publisher::TxtEntry> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::~__func( void *a1)
{
  *a1  = off_1004482D8;
  uint64_t v2 = (uint64_t)(a1 + 2);
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100](v2);
  return a1;
}

void std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateServiceRegistration(std::string const&,std::string const&,std::string const&,std::vector<std::string> const&,unsigned short,std::vector<otbr::Mdns::Publisher::TxtEntry> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::~__func( void *a1)
{
  *a1  = off_1004482D8;
  uint64_t v2 = (uint64_t)(a1 + 2);
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100](v2);
  operator delete(a1);
}

void *std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateServiceRegistration(std::string const&,std::string const&,std::string const&,std::vector<std::string> const&,unsigned short,std::vector<otbr::Mdns::Publisher::TxtEntry> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::__clone( uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  v4[1]  = &v5;
  unsigned __int16 v4[2] = (void *)1;
  void *v2 = off_1004482D8;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::placeholders::__ph<1>>::__tuple_impl( v2 + 2,  (void *)(a1 + 16));
  v4[0]  = 0LL;
  std::unique_ptr<std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateServiceRegistration(std::string const&,std::string const&,std::string const&,std::vector<std::string> const&,unsigned short,std::vector<otbr::Mdns::Publisher::TxtEntry> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>,std::__allocator_destructor<std::allocator<std::allocator<std::placeholders::__ph<1> const&>>>>::~unique_ptr[abi:ne180100](v4);
  return v2;
}

void *std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateServiceRegistration(std::string const&,std::string const&,std::string const&,std::vector<std::string> const&,unsigned short,std::vector<otbr::Mdns::Publisher::TxtEntry> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::__clone( uint64_t a1, void *a2)
{
  *a2  = off_1004482D8;
  return std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::placeholders::__ph<1>>::__tuple_impl( a2 + 2,  (void *)(a1 + 16));
}

uint64_t std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateServiceRegistration(std::string const&,std::string const&,std::string const&,std::vector<std::string> const&,unsigned short,std::vector<otbr::Mdns::Publisher::TxtEntry> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::destroy( uint64_t a1)
{
  return std::__function::__alloc_func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateServiceRegistration(std::string const&,std::string const&,std::string const&,std::vector<std::string> const&,unsigned short,std::vector<otbr::Mdns::Publisher::TxtEntry> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateServiceRegistration(std::string const&,std::string const&,std::string const&,std::vector<std::string> const&,unsigned short,std::vector<otbr::Mdns::Publisher::TxtEntry> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::destroy_deallocate( void *a1)
{
}

void std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateServiceRegistration(std::string const&,std::string const&,std::string const&,std::vector<std::string> const&,unsigned short,std::vector<otbr::Mdns::Publisher::TxtEntry> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::operator()( uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 32);
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::shared_ptr[abi:ne180100](&v4, (void *)(a1 + 16));
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::shared_ptr[abi:ne180100](&v2, v1);
  otbr::OnceCallback<void ()(otbrError)>::operator()(v4);
  otbr::OnceCallback<void ()(otbrError)>::operator()(v2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_100378A44( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateServiceRegistration(std::string const&,std::string const&,std::string const&,std::vector<std::string> const&,unsigned short,std::vector<otbr::Mdns::Publisher::TxtEntry> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateServiceRegistration(std::string const&,std::string const&,std::string const&,std::vector<std::string> const&,unsigned short,std::vector<otbr::Mdns::Publisher::TxtEntry> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::target_type()
{
}

void **std::unique_ptr<std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateServiceRegistration(std::string const&,std::string const&,std::string const&,std::vector<std::string> const&,unsigned short,std::vector<otbr::Mdns::Publisher::TxtEntry> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>,std::__allocator_destructor<std::allocator<std::allocator<std::placeholders::__ph<1> const&>>>>::~unique_ptr[abi:ne180100]( void **a1)
{
  uint64_t v2 = *a1;
  *a1  = 0LL;
  if (v2) {
    std::__allocator_destructor<std::allocator<std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateServiceRegistration(std::string const&,std::string const&,std::string const&,std::vector<std::string> const&,unsigned short,std::vector<otbr::Mdns::Publisher::TxtEntry> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>>>::operator()[abi:ne180100]( (uint64_t)(a1 + 1),  v2);
  }
  return a1;
}

void *std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::placeholders::__ph<1>>::__tuple_impl( void *a1, void *a2)
{
  unint64_t v4 = std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::shared_ptr[abi:ne180100](a1, a2);
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::shared_ptr[abi:ne180100](v4 + 2, a2 + 2);
  return a1;
}

void *std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::shared_ptr[abi:ne180100]( void *result, void *a2)
{
  uint64_t v2 = a2[1];
  *__n128 result = *a2;
  result[1]  = v2;
  if (v2)
  {
    unint64_t v3 = (unint64_t *)(v2 + 8);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

void std::__allocator_destructor<std::allocator<std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateServiceRegistration(std::string const&,std::string const&,std::string const&,std::vector<std::string> const&,unsigned short,std::vector<otbr::Mdns::Publisher::TxtEntry> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>>>::operator()[abi:ne180100]( uint64_t a1, void *__p)
{
  if (*(void *)(a1 + 8) >= 0x555555555555556uLL) {
    __break(0x550Cu);
  }
  else {
    operator delete(__p);
  }
}

uint64_t std::__function::__alloc_func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateServiceRegistration(std::string const&,std::string const&,std::string const&,std::vector<std::string> const&,unsigned short,std::vector<otbr::Mdns::Publisher::TxtEntry> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::destroy[abi:ne180100]( uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100](a1 + 24);
  return std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100](v1);
}

void *std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateHostRegistration(std::string const&,std::vector<otbr::Ip6Address> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::~__func( void *a1)
{
  *a1  = off_1004483D0;
  uint64_t v2 = (uint64_t)(a1 + 2);
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100](v2);
  return a1;
}

void std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateHostRegistration(std::string const&,std::vector<otbr::Ip6Address> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::~__func( void *a1)
{
  *a1  = off_1004483D0;
  uint64_t v2 = (uint64_t)(a1 + 2);
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100](v2);
  operator delete(a1);
}

void *std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateHostRegistration(std::string const&,std::vector<otbr::Ip6Address> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::__clone( uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  v4[1]  = &v5;
  unsigned __int16 v4[2] = (void *)1;
  void *v2 = off_1004483D0;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::placeholders::__ph<1>>::__tuple_impl( v2 + 2,  (void *)(a1 + 16));
  v4[0]  = 0LL;
  std::unique_ptr<std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateServiceRegistration(std::string const&,std::string const&,std::string const&,std::vector<std::string> const&,unsigned short,std::vector<otbr::Mdns::Publisher::TxtEntry> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>,std::__allocator_destructor<std::allocator<std::allocator<std::placeholders::__ph<1> const&>>>>::~unique_ptr[abi:ne180100](v4);
  return v2;
}

void *std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateHostRegistration(std::string const&,std::vector<otbr::Ip6Address> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::__clone( uint64_t a1, void *a2)
{
  *a2  = off_1004483D0;
  return std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::placeholders::__ph<1>>::__tuple_impl( a2 + 2,  (void *)(a1 + 16));
}

uint64_t std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateHostRegistration(std::string const&,std::vector<otbr::Ip6Address> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::destroy( uint64_t a1)
{
  return std::__function::__alloc_func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateServiceRegistration(std::string const&,std::string const&,std::string const&,std::vector<std::string> const&,unsigned short,std::vector<otbr::Mdns::Publisher::TxtEntry> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateHostRegistration(std::string const&,std::vector<otbr::Ip6Address> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::destroy_deallocate( void *a1)
{
}

void std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateHostRegistration(std::string const&,std::vector<otbr::Ip6Address> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::operator()( uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 32);
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::shared_ptr[abi:ne180100](&v4, (void *)(a1 + 16));
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::shared_ptr[abi:ne180100](&v2, v1);
  otbr::OnceCallback<void ()(otbrError)>::operator()(v4);
  otbr::OnceCallback<void ()(otbrError)>::operator()(v2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_100378D20( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateHostRegistration(std::string const&,std::vector<otbr::Ip6Address> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateHostRegistration(std::string const&,std::vector<otbr::Ip6Address> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::target_type()
{
}

uint64_t std::__equal_to::operator()[abi:ne180100]<std::string,std::string>( uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v4 = (char)a2[23];
  if (v4 >= 0) {
    size_t v5 = a2[23];
  }
  else {
    size_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0LL) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0LL;
  }
  if (v7 < 0) {
    a3  = *(unsigned __int8 **)a3;
  }
  if (v4 < 0) {
    return memcmp(*(const void **)a2, a3, v5) == 0;
  }
  if (!v5) {
    return 1LL;
  }
  size_t v8 = v5 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *a3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }

  while (v9 == v11 && v14);
  return result;
}

BOOL otbr::Mdns::Publisher::TxtEntry::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2;
  else {
    size_t v4 = a1[23];
  }
  uint64_t v5 = a2[23];
  int v6 = (char)v5;
  if ((v5 & 0x80u) != 0LL) {
    uint64_t v5 = *((void *)a2 + 1);
  }
  if (v4 != v5) {
    return 0LL;
  }
  if (v6 < 0) {
    a2  = *(unsigned __int8 **)a2;
  }
  if ((a1[23] & 0x80) != 0)
  {
  }

  else if (v4)
  {
    int v7 = a1;
    while (*v7 == *a2)
    {
      ++v7;
      ++a2;
      if (!--v4) {
        goto LABEL_16;
      }
    }

    return 0LL;
  }

uint64_t std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::find<std::pair<std::string,std::string>>( uint64_t a1, const void **a2)
{
  uint64_t v3 = a1 + 8;
  uint64_t v4 = std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::__lower_bound<std::pair<std::string,std::string>>( a1,  a2,  *(void *)(a1 + 8),  a1 + 8);
  if (v3 != v4)
  {
    uint64_t v5 = v4;
    if (!std::operator<[abi:ne180100]<std::string,std::string,std::string,std::string>( a2,  (const void **)(v4 + 32))) {
      return v5;
    }
  }

  return v3;
}

uint64_t std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::__lower_bound<std::pair<std::string,std::string>>( uint64_t a1, const void **a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v5 = a3;
    do
    {
      int v7 = std::operator<[abi:ne180100]<std::string,std::string,std::string,std::string>((const void **)(v5 + 32), a2);
      size_t v8 = (uint64_t *)(v5 + 8);
      if (!v7)
      {
        size_t v8 = (uint64_t *)v5;
        a4  = v5;
      }

      uint64_t v5 = *v8;
    }

    while (*v8);
  }

  return a4;
}

uint64_t std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::erase( uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::__map_value_compare<std::string,std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>>>::__remove_node_pointer( a1,  a2);
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a2 + 4));
  operator delete(a2);
  return v3;
}

uint64_t std::__tree<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::erase( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::__map_value_compare<std::string,std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>>>::__remove_node_pointer( a1,  (uint64_t *)a2);
  operator delete((void *)a2);
  return v3;
}

uint64_t otbr::Ncp::ControllerOpenThread::ControllerOpenThread( uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4, char a5, char a6, uint64_t a7)
{
  BOOL v14 = otbr::MainloopProcessor::MainloopProcessor((otbr::MainloopProcessor *)a1);
  *(void *)BOOL v14 = off_1004484C8;
  *((void *)v14 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = a7;
  *((void *)v14 + 8)  = 0LL;
  *((void *)v14 + 1ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 0LL;
  *((void *)v14 + ot::Mle::Tlv::SetType(this, 11) = 0LL;
  *((void *)v14 + ot::NetworkDiagnostic::Tlv::SetType(this, 9) = 0LL;
  otbr::TaskRunner::TaskRunner((otbr::MainloopProcessor *)((char *)v14 + 96));
  *(void *)(a1 + 24ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 0LL;
  *(void *)(a1 + 248)  = 0LL;
  *(void *)(a1 + 256)  = 0LL;
  *(_BYTE *)(a1 + 26ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a6;
  *(_OWORD *)(a1 + 3ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0u;
  *(_OWORD *)(a1 + 48)  = 0u;
  *(_OWORD *)(a1 + 16)  = 0u;
  *(void *)(a1 + 16)  = a4;
  *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a2;
  *(_BYTE *)(a1 + 6ot::NetworkData::NetworkDataTlv::SetType(this, 1) = a5;
  unint64_t v20 = *a3;
  unint64_t v21 = a3[1];
  if (*a3 != v21)
  {
    unsigned __int8 v22 = 0;
    while (1)
    {
      char v23 = v22 + 1;
      if (v22 >= 2u) {
        break;
      }
      uint64_t v24 = *v20++;
      *(void *)(a1 + 8LL * v22++ + 3ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = v24;
      if (v20 == v21)
      {
        *(_BYTE *)(a1 + 48)  = v23;
        goto LABEL_7;
      }
    }

    *(_BYTE *)(a1 + 48)  = v23;
    __break(0x5512u);
LABEL_9:
    otbrLog( 0,  "NCP",  "FAILED %s:%d - %s",  v15,  v16,  v17,  v18,  v19,  (char)"/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread_border_router/src/ncp/ncp_openthread.cpp");
    exit(-1);
  }

void sub_100379164( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12  = v12 + 9;
  std::vector<std::function<void ()(void)>>::__destroy_vector::operator()[abi:ne180100](&a12);
  std::unique_ptr<otbr::agent::ThreadHelper>::reset[abi:ne180100](v13, 0LL);
  otbr::MainloopProcessor::~MainloopProcessor((otbr::MainloopProcessor *)v12);
  _Unwind_Resume(a1);
}

void otbr::Ncp::ControllerOpenThread::~ControllerOpenThread(otbr::Ncp::ControllerOpenThread *this)
{
  *(void *)this  = off_1004484C8;
  uint64_t v2 = (std::random_device **)((char *)this + 64);
  uint64_t v3 = (void **)((char *)this + 240);
  std::vector<std::function<void ()(unsigned long long)>>::__destroy_vector::operator()[abi:ne180100](&v3);
  otbr::TaskRunner::~TaskRunner((otbr::Ncp::ControllerOpenThread *)((char *)this + 96));
  uint64_t v3 = (void **)((char *)this + 72);
  std::vector<std::function<void ()(void)>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::unique_ptr<otbr::agent::ThreadHelper>::reset[abi:ne180100](v2, 0LL);
  otbr::MainloopProcessor::~MainloopProcessor(this);
}

{
  void *v1;
  otbr::Ncp::ControllerOpenThread::~ControllerOpenThread(this);
  operator delete(v1);
}

uint64_t otbr::Ncp::ControllerOpenThread::ConvertToOtbrLogLevel(otbr::Ncp::ControllerOpenThread *this)
{
  else {
    return dword_1003ACEF8[(int)this];
  }
}

uint64_t otbr::Ncp::ControllerOpenThread::ConvertToOtLogLevel(unsigned int a1)
{
  if (a1 > 6) {
    return 5LL;
  }
  else {
    return dword_1003ACEDC[a1];
  }
}

uint64_t otbr::Ncp::ControllerOpenThread::SetOtbrAndOtLogLevel(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = a2;
  otbrLogSetLevel(a2);
  if (v2 > 6) {
    unsigned int v3 = 5;
  }
  else {
    unsigned int v3 = dword_1003ACEDC[v2];
  }
  return otLoggingSetLevel(v3);
}

void otbr::Ncp::ControllerOpenThread::Init(otbr::Ncp::ControllerOpenThread *this)
{
  Level  = otbrLogGetLevel();
  if (Level > 6) {
    unsigned int v3 = 5;
  }
  else {
    unsigned int v3 = dword_1003ACEDC[Level];
  }
  uint64_t v9 = *((void *)this + 1);
  if (!v9)
  {
    uint64_t v9 = otSysInit((uint64_t)this + 16);
    *((void *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = v9;
    if (!v9) {
      otbr::Ncp::ControllerOpenThread::Init();
    }
  }

  int v10 = otSetStateChangedCallback( v9,  (void (*)(unint64_t, void *))otbr::Ncp::ControllerOpenThread::HandleStateChanged,  (uint64_t)this);
  otbr::agent::ThreadHelper::LogOpenThreadResult((char)"Set state callback", v10);
  if (v10)
  {
LABEL_10:
    otbrLog( 0,  "NCP",  "FAILED %s:%d - %s",  v4,  v5,  v6,  v7,  v8,  (char)"/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread_border_router/src/ncp/ncp_openthread.cpp");
    exit(-1);
  }

  int v11 = (std::random_device *)operator new(0x240uLL);
  otbr::agent::ThreadHelper::ThreadHelper(v11, *((void *)this + 1), this);
  int v12 = 0LL;
  std::unique_ptr<otbr::agent::ThreadHelper>::reset[abi:ne180100]((std::random_device **)this + 8, v11);
  std::unique_ptr<otbr::agent::ThreadHelper>::reset[abi:ne180100](&v12, 0LL);
}

void sub_1003793BC(_Unwind_Exception *a1)
{
}

void otbr::Ncp::ControllerOpenThread::HandleStateChanged( otbr::Ncp::ControllerOpenThread *this, otbr::Ncp::ControllerOpenThread *a2, void *a3)
{
}

void otbr::Ncp::ControllerOpenThread::Deinit(otbr::Ncp::ControllerOpenThread *this)
{
  if (!*((void *)this + 1)) {
    otbr::Ncp::ControllerOpenThread::Deinit();
  }
  otSysDeinit(this);
  *((void *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = 0LL;
}

void otbr::Ncp::ControllerOpenThread::HandleStateChanged(otbr::Ncp::ControllerOpenThread *this, int a2)
{
  uint64_t v4 = *((void *)this + 30);
  for (uint64_t i = *((void *)this + 31); v4 != i; v4 += 32LL)
    std::__function::__value_func<void ()(otbrError)>::operator()[abi:ne180100](v4);
  otbr::agent::ThreadHelper::StateChangedCallback(*((otbr::agent::ThreadHelper **)this + 8), a2);
}

BOOL otbr::Ncp::ControllerOpenThread::Update(uint64_t a1, uint64_t a2)
{
  if (otTaskletsArePending(*(void *)(a1 + 8)))
  {
    *(void *)(a2 + 39ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
    *(void *)(a2 + 40ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 0LL;
  }

  return otSysMainloopUpdate(*(ot::Posix::Mainloop::Manager **)(a1 + 8), a2);
}

void otbr::Ncp::ControllerOpenThread::Process(uint64_t a1, _DWORD *a2)
{
  if (*(_BYTE *)(a1 + 264))
  {
  }

uint64_t otbr::Ncp::ControllerOpenThread::IsAutoAttachEnabled(otbr::Ncp::ControllerOpenThread *this)
{
  return *((unsigned __int8 *)this + 264);
}

uint64_t otbr::Ncp::ControllerOpenThread::DisableAutoAttach(uint64_t this)
{
  *(_BYTE *)(this + 26ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  return this;
}

void *otbr::Ncp::ControllerOpenThread::PostTimerTask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + 96;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v7, a3);
  otbr::TaskRunner::Post(v4, a2, (uint64_t)v7);
  uint64_t result = v8;
  if (v8 == v7)
  {
    uint64_t v6 = 4LL;
    uint64_t result = v7;
  }

  else
  {
    if (!v8) {
      return result;
    }
    uint64_t v6 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_1003795BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    uint64_t v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t otbr::Ncp::ControllerOpenThread::RegisterResetHandler(uint64_t *a1, uint64_t a2)
{
  unsigned int v3 = a1 + 9;
  unint64_t v4 = a1[10];
  if (v4 >= a1[11])
  {
    uint64_t result = std::vector<std::function<void ()(void)>>::__emplace_back_slow_path<std::function<void ()(void)>>(v3, a2);
  }

  else
  {
    std::vector<std::function<void ()(void)>>::__construct_one_at_end[abi:ne180100]<std::function<void ()(void)>>( (uint64_t)v3,  a2);
    uint64_t result = v4 + 32;
  }

  a1[10]  = result;
  return result;
}

uint64_t otbr::Ncp::ControllerOpenThread::AddThreadStateChangedCallback(uint64_t *a1, uint64_t a2)
{
  unsigned int v3 = a1 + 30;
  unint64_t v4 = a1[31];
  if (v4 >= a1[32])
  {
    uint64_t result = std::vector<std::function<void ()(unsigned long long)>>::__emplace_back_slow_path<std::function<void ()(unsigned long long)>>( v3,  a2);
  }

  else
  {
    std::vector<std::function<void ()(unsigned long long)>>::__construct_one_at_end[abi:ne180100]<std::function<void ()(unsigned long long)>>( (uint64_t)v3,  a2);
    uint64_t result = v4 + 32;
  }

  a1[31]  = result;
  return result;
}

void otbr::Ncp::ControllerOpenThread::Reset(otbr::Ncp::ControllerOpenThread *this)
{
  gPlatResetReason  = 2;
  otSysDeinit(this);
  *((void *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = 0LL;
  otbr::Ncp::ControllerOpenThread::Init(this);
  uint64_t v2 = *((void *)this + 9);
  uint64_t v3 = *((void *)this + 10);
  while (v2 != v3)
  {
    std::__function::__value_func<void ()(void)>::operator()[abi:ne180100](v2);
    v2 += 32LL;
  }

  *((_BYTE *)this + 26ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 1;
}

char *otbr::Ncp::ControllerOpenThread::GetThreadVersion(otbr::Ncp::ControllerOpenThread *this)
{
  unsigned int v1 = otThreadGetVersion() - 2;
  if (v1 >= 3)
  {
    char Version = otThreadGetVersion();
    otbrLog(0, "NCP", "Unexpected thread version %hu", v4, v5, v6, v7, v8, Version);
    exit(-1);
  }

  return off_100448500[(__int16)v1];
}

void otPlatLog( unsigned int a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a1 > 4) {
    int v9 = 7;
  }
  else {
    int v9 = dword_1003ACEF8[a1];
  }
  otbrLogvNoFilter(v9, a3, &a9);
}

void otPlatLogHandleLevelChanged(unsigned int a1)
{
  char v1 = a1;
  if (a1 > 4) {
    uint64_t v2 = 7LL;
  }
  else {
    uint64_t v2 = dword_1003ACEF8[a1];
  }
  otbrLogSetLevel(v2);
  otbrLog(6u, "NCP", "OpenThread log level changed to %d", v3, v4, v5, v6, v7, v1);
}

uint64_t std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  void *v3 = 0LL;
  return a1;
}

void std::unique_ptr<otbr::agent::ThreadHelper>::reset[abi:ne180100]( std::random_device **a1, std::random_device *a2)
{
  uint64_t v3 = *a1;
  *a1  = a2;
  if (v3)
  {
    otbr::agent::ThreadHelper::~ThreadHelper(v3);
    operator delete(v4);
  }

void otbr::agent::ThreadHelper::~ThreadHelper(std::random_device *this)
{
  uint64_t v2 = *(otbr::agent::ThreadHelper **)&this[76].__padding_;
  if (v2 == (otbr::agent::ThreadHelper *)&this[70])
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = (otbr::agent::ThreadHelper *)&this[70];
  }

  else
  {
    if (!v2) {
      goto LABEL_6;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*(void *)v2 + 8 * v3))();
LABEL_6:
  uint64_t v4 = *(otbr::agent::ThreadHelper **)&this[68].__padding_;
  if (v4 == (otbr::agent::ThreadHelper *)&this[62])
  {
    uint64_t v5 = 4LL;
    uint64_t v4 = (otbr::agent::ThreadHelper *)&this[62];
  }

  else
  {
    if (!v4) {
      goto LABEL_11;
    }
    uint64_t v5 = 5LL;
  }

  (*(void (**)(void))(*(void *)v4 + 8 * v5))();
LABEL_11:
  uint64_t v6 = *(otbr::agent::ThreadHelper **)&this[60].__padding_;
  if (v6 == (otbr::agent::ThreadHelper *)&this[54])
  {
    uint64_t v7 = 4LL;
    uint64_t v6 = (otbr::agent::ThreadHelper *)&this[54];
  }

  else
  {
    if (!v6) {
      goto LABEL_16;
    }
    uint64_t v7 = 5LL;
  }

  (*(void (**)(void))(*(void *)v6 + 8 * v7))();
LABEL_16:
  std::__tree<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::__map_value_compare<_DNSRecordRef_t *,std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::less<_DNSRecordRef_t *>,true>,std::allocator<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>>>::~__tree((uint64_t)&this[44]);
  int v12 = this + 38;
  std::vector<std::function<void ()(otOperationalDatasetTlvs const&)>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  int v12 = this + 32;
  std::vector<std::function<void ()(otDeviceRole)>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  int v12 = this + 26;
  std::vector<otbr::Ip6Address>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  uint64_t v8 = *(otbr::agent::ThreadHelper **)&this[24].__padding_;
  if (v8 == (otbr::agent::ThreadHelper *)&this[18])
  {
    uint64_t v9 = 4LL;
    uint64_t v8 = (otbr::agent::ThreadHelper *)&this[18];
  }

  else
  {
    if (!v8) {
      goto LABEL_21;
    }
    uint64_t v9 = 5LL;
  }

  (*(void (**)(void))(*(void *)v8 + 8 * v9))();
LABEL_21:
  int v12 = this + 12;
  std::vector<otActiveScanResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  int v10 = *(otbr::agent::ThreadHelper **)&this[10].__padding_;
  if (v10 == (otbr::agent::ThreadHelper *)&this[4])
  {
    uint64_t v11 = 4LL;
    int v10 = (otbr::agent::ThreadHelper *)&this[4];
  }

  else
  {
    if (!v10) {
      return;
    }
    uint64_t v11 = 5LL;
  }

  (*(void (**)(void))(*(void *)v10 + 8 * v11))();
}

void std::vector<std::function<void ()(otOperationalDatasetTlvs const&)>>::__destroy_vector::operator()[abi:ne180100]( void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::function<void ()(otOperationalDatasetTlvs const&)>>::__base_destruct_at_end[abi:ne180100]( (uint64_t)v2,  *v2);
    uint64_t v3 = **a1;
    if ((_BYTE *)(*a1)[2] - (_BYTE *)v3 < 0) {
      __break(0x550Cu);
    }
    else {
      operator delete(v3);
    }
  }

uint64_t std::vector<std::function<void ()(otOperationalDatasetTlvs const&)>>::__base_destruct_at_end[abi:ne180100]( uint64_t result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void **)(result + 8);
  uint64_t v5 = result + 16;
  while (v4 != a2)
  {
    v4 -= 4;
    uint64_t result = std::allocator_traits<std::allocator<otbr::OnceCallback<void ()(otbrError)>>>::destroy[abi:ne180100]<otbr::OnceCallback<void ()(otbrError)>,void>( v5,  v4);
  }

  *(void *)(v3 + 8)  = a2;
  return result;
}

void std::vector<std::function<void ()(otDeviceRole)>>::__destroy_vector::operator()[abi:ne180100]( void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::function<void ()(otDeviceRole)>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    if ((_BYTE *)(*a1)[2] - (_BYTE *)v3 < 0) {
      __break(0x550Cu);
    }
    else {
      operator delete(v3);
    }
  }

uint64_t std::vector<std::function<void ()(otDeviceRole)>>::__base_destruct_at_end[abi:ne180100]( uint64_t result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void **)(result + 8);
  uint64_t v5 = result + 16;
  while (v4 != a2)
  {
    v4 -= 4;
    uint64_t result = std::allocator_traits<std::allocator<otbr::OnceCallback<void ()(otbrError)>>>::destroy[abi:ne180100]<otbr::OnceCallback<void ()(otbrError)>,void>( v5,  v4);
  }

  *(void *)(v3 + 8)  = a2;
  return result;
}

void std::vector<otActiveScanResult>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  char v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    v1[1]  = v2;
    if (0xEEEEEEEEEEEEEEEFLL * (((_BYTE *)v1[2] - (_BYTE *)v2) >> 2) >= 0x444444444444445LL) {
      __break(0x550Cu);
    }
    else {
      operator delete(v2);
    }
  }

void std::vector<std::function<void ()(void)>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::function<void ()(void)>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    if ((_BYTE *)(*a1)[2] - (_BYTE *)v3 < 0) {
      __break(0x550Cu);
    }
    else {
      operator delete(v3);
    }
  }

uint64_t std::vector<std::function<void ()(void)>>::__base_destruct_at_end[abi:ne180100]( uint64_t result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void **)(result + 8);
  uint64_t v5 = result + 16;
  while (v4 != a2)
  {
    v4 -= 4;
    uint64_t result = std::allocator_traits<std::allocator<otbr::OnceCallback<void ()(otbrError)>>>::destroy[abi:ne180100]<otbr::OnceCallback<void ()(otbrError)>,void>( v5,  v4);
  }

  *(void *)(v3 + 8)  = a2;
  return result;
}

void std::vector<std::function<void ()(unsigned long long)>>::__destroy_vector::operator()[abi:ne180100]( void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::function<void ()(unsigned long long)>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    if ((_BYTE *)(*a1)[2] - (_BYTE *)v3 < 0) {
      __break(0x550Cu);
    }
    else {
      operator delete(v3);
    }
  }

uint64_t std::vector<std::function<void ()(unsigned long long)>>::__base_destruct_at_end[abi:ne180100]( uint64_t result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void **)(result + 8);
  uint64_t v5 = result + 16;
  while (v4 != a2)
  {
    v4 -= 4;
    uint64_t result = std::allocator_traits<std::allocator<otbr::OnceCallback<void ()(otbrError)>>>::destroy[abi:ne180100]<otbr::OnceCallback<void ()(otbrError)>,void>( v5,  v4);
  }

  *(void *)(v3 + 8)  = a2;
  return result;
}

uint64_t std::vector<std::function<void ()(void)>>::__construct_one_at_end[abi:ne180100]<std::function<void ()(void)>>( uint64_t a1, uint64_t a2)
{
  uint64_t result = std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](*(void *)(a1 + 8), a2);
  *(void *)(a1 + 8)  = result + 32;
  return result;
}

uint64_t std::vector<std::function<void ()(void)>>::__emplace_back_slow_path<std::function<void ()(void)>>( uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 5;
  unint64_t v3 = v2 + 1;
  if (v2 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }

  if (v3 >> 59) {
    goto LABEL_10;
  }
  unint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v3) {
    unint64_t v3 = v6 >> 4;
  }
  if (v6 >= 0x7FFFFFFFFFFFFFE0LL) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  std::__split_buffer<std::function<void ()(void)>>::__split_buffer(v10, v7, v2, (uint64_t)(a1 + 2));
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](v11, a2);
  v11 += 32LL;
  std::vector<std::function<void ()(void)>>::__swap_out_circular_buffer(a1, v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<std::function<void ()(void)>>::~__split_buffer(v10);
  return v8;
}

void sub_100379D98(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t std::vector<std::function<void ()(void)>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::function<void ()(void)>>,std::reverse_iterator<std::function<void ()(void)>*>,std::reverse_iterator<std::function<void ()(void)>*>,std::reverse_iterator<std::function<void ()(void)>*>>( (uint64_t)(a1 + 2),  a1[1],  a1[1],  *a1,  *a1,  a2[1],  a2[1]);
  a2[1]  = v5;
  uint64_t v6 = *a1;
  *a1  = v5;
  a2[1]  = v6;
  uint64_t v7 = a1[1];
  a1[1]  = a2[2];
  a2[2]  = v7;
  uint64_t v8 = a1[2];
  a1[2]  = a2[3];
  a2[3]  = v8;
  *a2  = a2[1];
  return result;
}

void *std::__split_buffer<std::function<void ()(void)>>::__split_buffer( void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[3]  = 0LL;
  a1[4]  = a4;
  if (a2) {
    uint64_t v7 = (char *)std::allocator<std::function<void ()(void)>>::allocate[abi:ne180100](a4, a2);
  }
  else {
    uint64_t v7 = 0LL;
  }
  uint64_t v8 = &v7[32 * a3];
  *a1  = v7;
  a1[1]  = v8;
  a1[2]  = v8;
  a1[3]  = &v7[32 * a2];
  return a1;
}

void *std::allocator<std::function<void ()(void)>>::allocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::function<void ()(void)>>,std::reverse_iterator<std::function<void ()(void)>*>,std::reverse_iterator<std::function<void ()(void)>*>,std::reverse_iterator<std::function<void ()(void)>*>>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v15 = a6;
  *((void *)&v15 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = a7;
  __int128 v14 = v15;
  v12[0]  = a1;
  v12[1]  = &v14;
  void v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }

  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 32LL;
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](v7 - 32, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 32LL;
      *((void *)&v15 + 1) -= 32LL;
    }

    while (v9 != a5);
    uint64_t v10 = v15;
  }

  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(void)>>,std::reverse_iterator<std::function<void ()(void)>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(void)>>,std::reverse_iterator<std::function<void ()(void)>*>>>::~__exception_guard_exceptions[abi:ne180100]( uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(void)>>,std::reverse_iterator<std::function<void ()(void)>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(void)>>,std::reverse_iterator<std::function<void ()(void)>*>>::operator()[abi:ne180100]( uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v11 = *(void *)a1[2];
  uint64_t v12 = v1;
  uint64_t v13 = v11;
  uint64_t v14 = v1;
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(a1[1] + 8);
  uint64_t v6 = *(void *)a1[1];
  uint64_t v7 = v3;
  uint64_t v8 = v6;
  uint64_t v9 = v3;
  return std::__allocator_destroy[abi:ne180100]<std::allocator<std::function<void ()(void)>>,std::reverse_iterator<std::reverse_iterator<std::function<void ()(void)>*>>,std::reverse_iterator<std::reverse_iterator<std::function<void ()(void)>*>>>( v2,  (uint64_t)v10,  (uint64_t)v5);
}

uint64_t std::__allocator_destroy[abi:ne180100]<std::allocator<std::function<void ()(void)>>,std::reverse_iterator<std::reverse_iterator<std::function<void ()(void)>*>>,std::reverse_iterator<std::reverse_iterator<std::function<void ()(void)>*>>>( uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void **)(a2 + 32);
  if (v4 != *(void **)(a3 + 32))
  {
    uint64_t v6 = result;
    do
    {
      uint64_t result = std::allocator_traits<std::allocator<otbr::OnceCallback<void ()(otbrError)>>>::destroy[abi:ne180100]<otbr::OnceCallback<void ()(otbrError)>,void>( v6,  v4);
      uint64_t v4 = (void *)(*(void *)(a2 + 32) + 32LL);
      *(void *)(a2 + 3ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = v4;
    }

    while (v4 != *(void **)(a3 + 32));
  }

  return result;
}

void *std::__split_buffer<std::function<void ()(void)>>::~__split_buffer(void *a1)
{
  uint64_t result = (void *)*a1;
  if (!*a1) {
    return a1;
  }
  if ((uint64_t)(a1[3] - (void)result) >= 0)
  {
    operator delete(result);
    return a1;
  }

  __break(0x550Cu);
  return result;
}

uint64_t std::__split_buffer<std::function<void ()(void)>>::__destruct_at_end[abi:ne180100]( uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  while (1)
  {
    uint64_t v4 = *(void *)(v3 + 16);
    if (v4 == a2) {
      break;
    }
    uint64_t v5 = *(void *)(v3 + 32);
    *(void *)(v3 + 16)  = v4 - 32;
    uint64_t result = std::allocator_traits<std::allocator<otbr::OnceCallback<void ()(otbrError)>>>::destroy[abi:ne180100]<otbr::OnceCallback<void ()(otbrError)>,void>( v5,  (void *)(v4 - 32));
  }

  return result;
}

uint64_t std::vector<std::function<void ()(unsigned long long)>>::__construct_one_at_end[abi:ne180100]<std::function<void ()(unsigned long long)>>( uint64_t a1, uint64_t a2)
{
  uint64_t result = std::__function::__value_func<void ()(unsigned long long)>::__value_func[abi:ne180100]( *(void *)(a1 + 8),  a2);
  *(void *)(a1 + 8)  = result + 32;
  return result;
}

uint64_t std::vector<std::function<void ()(unsigned long long)>>::__emplace_back_slow_path<std::function<void ()(unsigned long long)>>( uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 5;
  unint64_t v3 = v2 + 1;
  if (v2 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }

  if (v3 >> 59) {
    goto LABEL_10;
  }
  unint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v3) {
    unint64_t v3 = v6 >> 4;
  }
  if (v6 >= 0x7FFFFFFFFFFFFFE0LL) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  std::__split_buffer<std::function<void ()(void)>>::__split_buffer(v10, v7, v2, (uint64_t)(a1 + 2));
  std::__function::__value_func<void ()(unsigned long long)>::__value_func[abi:ne180100](v11, a2);
  v11 += 32LL;
  std::vector<std::function<void ()(unsigned long long)>>::__swap_out_circular_buffer(a1, v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<std::function<void ()(unsigned long long)>>::~__split_buffer(v10);
  return v8;
}

void sub_10037A1A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t std::__function::__value_func<void ()(unsigned long long)>::__value_func[abi:ne180100]( uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v4;
  }

  else
  {
    unint64_t v3 = (void *)(a1 + 24);
  }

  void *v3 = 0LL;
  return a1;
}

uint64_t std::vector<std::function<void ()(unsigned long long)>>::__swap_out_circular_buffer( uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::function<void ()(unsigned long long)>>,std::reverse_iterator<std::function<void ()(unsigned long long)>*>,std::reverse_iterator<std::function<void ()(unsigned long long)>*>,std::reverse_iterator<std::function<void ()(unsigned long long)>*>>( (uint64_t)(a1 + 2),  a1[1],  a1[1],  *a1,  *a1,  a2[1],  a2[1]);
  a2[1]  = v5;
  uint64_t v6 = *a1;
  *a1  = v5;
  a2[1]  = v6;
  uint64_t v7 = a1[1];
  a1[1]  = a2[2];
  a2[2]  = v7;
  uint64_t v8 = a1[2];
  a1[2]  = a2[3];
  a2[3]  = v8;
  *a2  = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::function<void ()(unsigned long long)>>,std::reverse_iterator<std::function<void ()(unsigned long long)>*>,std::reverse_iterator<std::function<void ()(unsigned long long)>*>,std::reverse_iterator<std::function<void ()(unsigned long long)>*>>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v15 = a6;
  *((void *)&v15 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = a7;
  __int128 v14 = v15;
  v12[0]  = a1;
  v12[1]  = &v14;
  void v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }

  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 32LL;
      std::__function::__value_func<void ()(unsigned long long)>::__value_func[abi:ne180100](v7 - 32, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 32LL;
      *((void *)&v15 + 1) -= 32LL;
    }

    while (v9 != a5);
    uint64_t v10 = v15;
  }

  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(unsigned long long)>>,std::reverse_iterator<std::function<void ()(unsigned long long)>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(unsigned long long)>>,std::reverse_iterator<std::function<void ()(unsigned long long)>*>>>::~__exception_guard_exceptions[abi:ne180100]( uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(void)>>,std::reverse_iterator<std::function<void ()(void)>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void *std::__split_buffer<std::function<void ()(unsigned long long)>>::~__split_buffer(void *a1)
{
  uint64_t result = (void *)*a1;
  if (!*a1) {
    return a1;
  }
  if ((uint64_t)(a1[3] - (void)result) >= 0)
  {
    operator delete(result);
    return a1;
  }

  __break(0x550Cu);
  return result;
}

uint64_t std::__split_buffer<std::function<void ()(unsigned long long)>>::__destruct_at_end[abi:ne180100]( uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  while (1)
  {
    uint64_t v4 = *(void *)(v3 + 16);
    if (v4 == a2) {
      break;
    }
    uint64_t v5 = *(void *)(v3 + 32);
    *(void *)(v3 + 16)  = v4 - 32;
    uint64_t result = std::allocator_traits<std::allocator<otbr::OnceCallback<void ()(otbrError)>>>::destroy[abi:ne180100]<otbr::OnceCallback<void ()(otbrError)>,void>( v5,  (void *)(v4 - 32));
  }

  return result;
}

uint64_t std::__function::__value_func<void ()(void)>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48LL))(v1);
}

otbr::TaskRunner *otbr::TaskRunner::TaskRunner(otbr::TaskRunner *this)
{
  uint64_t v2 = otbr::MainloopProcessor::MainloopProcessor(this);
  *(void *)uint64_t v2 = off_100448528;
  *((void *)v2 + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  *((void *)v2 + ot::NetworkData::NetworkDataTlv::SetType(this, 3) = 0LL;
  *((void *)v2 + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0LL;
  *((void *)v2 + ot::ThreadTlv::SetType(this, 7) = 0LL;
  *((void *)v2 + 6)  = (char *)v2 + 56;
  *((_OWORD *)v2 + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = xmmword_1003ABFC0;
  *((void *)v2 + 1ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 850045863LL;
  *(_OWORD *)((char *)v2 + 88)  = 0u;
  *(_OWORD *)((char *)v2 + 10ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
  *(_OWORD *)((char *)v2 + 1ot::Mle::Tlv::SetType(this, 20) = 0u;
  uint64_t v3 = (int *)((char *)v2 + 8);
  *((void *)v2 + 1ot::ThreadTlv::SetType(this, 7) = 0LL;
  if (pipe((int *)v2 + 2) == -1
    || (int v4 = fcntl(*v3, 3, 0LL), fcntl(*v3, 4, v4 | 4u) == -1)
    || (int v5 = fcntl(*((_DWORD *)this + 3), 3, 0LL), fcntl(*((_DWORD *)this + 3), 4, v5 | 4u) == -1))
  {
    uint64_t v7 = __error();
    strerror(*v7);
    otbrLog( 0,  "UTILS",  "FAILED %s:%d - %s",  v8,  v9,  v10,  v11,  v12,  (char)"/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread_border_router/src/common/task_runner.cpp");
    exit(-1);
  }

  return this;
}

void sub_10037A58C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void otbr::TaskRunner::~TaskRunner(otbr::TaskRunner *this)
{
  *(void *)this  = off_100448528;
  int v2 = *((_DWORD *)this + 2);
  if (v2 != -1)
  {
    close(v2);
    *((_DWORD *)this + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = -1;
  }

  int v3 = *((_DWORD *)this + 3);
  if (v3 != -1)
  {
    close(v3);
    *((_DWORD *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 3) = -1;
  }

  std::mutex::~mutex((std::mutex *)((char *)this + 80));
  std::__tree<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::__map_value_compare<_DNSRecordRef_t *,std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::less<_DNSRecordRef_t *>,true>,std::allocator<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>>>::~__tree((uint64_t)this + 48);
  int v4 = (void **)((char *)this + 16);
  std::vector<otbr::TaskRunner::DelayedTask>::__destroy_vector::operator()[abi:ne180100](&v4);
  otbr::MainloopProcessor::~MainloopProcessor(this);
}

{
  void *v1;
  otbr::TaskRunner::~TaskRunner(this);
  operator delete(v1);
}

void *otbr::TaskRunner::Post(uint64_t a1, uint64_t a2)
{
  uint64_t result = v6;
  if (v6 == v5)
  {
    uint64_t v4 = 4LL;
    uint64_t result = v5;
  }

  else
  {
    if (!v6) {
      return result;
    }
    uint64_t v4 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_10037A6FC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  __int128 v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    __int128 v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t otbr::TaskRunner::Post(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = otbr::TaskRunner::PushTask(a1, a2, (uint64_t)v9);
  uint64_t v6 = v10;
  if (v10 == v9)
  {
    uint64_t v7 = 4LL;
    uint64_t v6 = v9;
    goto LABEL_5;
  }

  if (v10)
  {
    uint64_t v7 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }

  return v5;
}

void sub_10037A7E4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  __int128 v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    __int128 v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t otbr::TaskRunner::PushTask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = a2;
  __buf  = 1;
  uint64_t v5 = (std::mutex *)(a1 + 80);
  std::mutex::lock((std::mutex *)(a1 + 80));
  uint64_t v6 = *(void *)(a1 + 72);
  if (v6 == -1)
  {
    __break(0x5500u);
    goto LABEL_13;
  }

  *(void *)(a1 + 7ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = v6 + 1;
  unint64_t v24 = v6;
  std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>( (uint64_t **)(a1 + 48),  &v24,  (uint64_t *)&v24);
  uint64_t v7 = (uint64_t *)(a1 + 16);
  unint64_t v8 = *(void *)(a1 + 24);
  if (v8 >= *(void *)(a1 + 32))
  {
    uint64_t v9 = std::vector<otbr::TaskRunner::DelayedTask>::__emplace_back_slow_path<unsigned long long &,std::chrono::duration<long long,std::ratio<1l,1000l>> &,std::function<void ()(void)>>( v7,  (uint64_t *)&v24,  &v26,  a3);
  }

  else
  {
    std::vector<otbr::TaskRunner::DelayedTask>::__construct_one_at_end[abi:ne180100]<unsigned long long &,std::chrono::duration<long long,std::ratio<1l,1000l>> &,std::function<void ()(void)>>( (uint64_t)v7,  (uint64_t *)&v24,  &v26,  a3);
    uint64_t v9 = v8 + 48;
  }

  *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v9;
  std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,otbr::TaskRunner::DelayedTask::Comparator &,std::__wrap_iter<otbr::TaskRunner::DelayedTask*>>( *(void **)(a1 + 16),  v9,  (uint64_t)&v27,  0xAAAAAAAAAAAAAAABLL * ((v9 - *(void *)(a1 + 16)) >> 4));
  std::mutex::unlock(v5);
  do
  {
    if (write(*(_DWORD *)(a1 + 12), &__buf, 1uLL) != -1) {
      return v24;
    }
  }

  while (*__error() == 4);
  if (*__error() != 35 && *__error() != 35)
  {
LABEL_13:
    uint64_t v18 = __error();
    strerror(*v18);
    otbrLog( 0,  "UTILS",  "FAILED %s:%d - %s",  v19,  v20,  v21,  v22,  v23,  (char)"/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread_border_router/src/common/task_runner.cpp");
    exit(-1);
  }

  int v10 = *(_DWORD *)(a1 + 12);
  uint64_t v11 = __error();
  strerror(*v11);
  otbrLog(4u, "UTILS", "Failed to write fd %d: %s", v12, v13, v14, v15, v16, v10);
  return v24;
}

void sub_10037A9AC(_Unwind_Exception *a1)
{
}

void otbr::TaskRunner::Update(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 8);
  int v5 = *(_DWORD *)(a2 + 384);
  if (*(_DWORD *)(a1 + 8) > v5) {
    int v5 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a2 + 38ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v5;
  std::mutex::lock((std::mutex *)(a1 + 80));
  if (*(void *)(a1 + 16) == *(void *)(a1 + 24)) {
    goto LABEL_14;
  }
  v6.__d_.__rep_  = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v7 = *(void *)(*(void *)(a1 + 16) + 8LL);
  if (__OFSUB__(v7, v6.__d_.__rep_))
  {
    __break(0x5515u);
    goto LABEL_16;
  }

  uint64_t v8 = *(void *)(a2 + 392);
  uint64_t v9 = 1000000 * v8;
  if ((unsigned __int128)(v8 * (__int128)1000000LL) >> 64 != (1000000 * v8) >> 63)
  {
LABEL_16:
    __break(0x550Cu);
    goto LABEL_17;
  }

  uint64_t v10 = *(int *)(a2 + 400);
  BOOL v11 = __OFADD__(v10, v9);
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = v10 + v9;
  if (!v11)
  {
    if (v7 >= v6.__d_.__rep_) {
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v13 = (v7 - v6.__d_.__rep_) / 1000;
    }
    else {
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v13 = 0LL;
    }
    if (v12 >= v13)
    {
      *(void *)(a2 + 39ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = v13 / 1000000;
      *(_DWORD *)(a2 + 40ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = v13 % 1000000;
    }

void *otbr::TaskRunner::Process(int *a1)
{
  do
  {
    do
      ssize_t v2 = read(a1[2], &v10, 1uLL);
    while (v2 > 0);
  }

  while (v2 == -1 && *__error() == 4);
  if (*__error() != 35 && *__error() != 35)
  {
    int v4 = __error();
    strerror(*v4);
    otbrLog( 0,  "UTILS",  "FAILED %s:%d - %s",  v5,  v6,  v7,  v8,  v9,  (char)"/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread_border_router/src/common/task_runner.cpp");
    exit(-1);
  }

  return otbr::TaskRunner::PopTasks((otbr::TaskRunner *)a1);
}

void *otbr::TaskRunner::PopTasks(otbr::TaskRunner *this)
{
  ssize_t v2 = (std::mutex *)((char *)this + 80);
  int v3 = (unint64_t **)((char *)this + 16);
  int v4 = (char *)this + 48;
  do
  {
    uint64_t v15 = 0LL;
    std::mutex::lock(v2);
    uint64_t v5 = *((void *)this + 2);
    if (v5 == *((void *)this + 3) || (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v6 = *(void *)(v5 + 8), std::chrono::steady_clock::now().__d_.__rep_ < v6))
    {
      std::mutex::unlock(v2);
      char v7 = 0;
    }

    else
    {
      uint64_t v8 = (uint64_t)(*v3 + 2);
      unint64_t v12 = **v3;
      std::function<void ()(void)>::operator=(v14, v8);
      std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,otbr::TaskRunner::DelayedTask::Comparator,std::__wrap_iter<otbr::TaskRunner::DelayedTask*>>( *((char **)this + 2),  *((void *)this + 3),  (uint64_t)&v13,  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 3) - *((void *)this + 2)) >> 4));
      std::vector<otbr::TaskRunner::DelayedTask>::__base_destruct_at_end[abi:ne180100](v3, *((void *)this + 3) - 48LL);
      uint64_t v9 = std::__tree<unsigned long long>::__erase_unique<unsigned long long>((uint64_t)v4, &v12);
      std::mutex::unlock(v2);
      if (v9) {
        std::__function::__value_func<void ()(void)>::operator()[abi:ne180100]((uint64_t)v14);
      }
      char v7 = 1;
    }

    uint64_t result = v15;
    if (v15 == v14)
    {
      uint64_t result = v14;
      uint64_t v11 = 4LL;
    }

    else
    {
      if (!v15) {
        continue;
      }
      uint64_t v11 = 5LL;
    }

    uint64_t result = (void *)(*(uint64_t (**)(void))(*result + 8 * v11))();
  }

  while ((v7 & 1) != 0);
  return result;
}

void sub_10037ACD0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v16 = a15;
  if (a15 == &a12)
  {
    uint64_t v17 = 4LL;
    uint64_t v16 = &a12;
  }

  else
  {
    if (!a15) {
      goto LABEL_6;
    }
    uint64_t v17 = 5LL;
  }

  (*(void (**)(void))(*(void *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void otbr::TaskRunner::Cancel(otbr::TaskRunner *this, unint64_t a2)
{
  unint64_t v4 = a2;
  int v3 = (std::mutex *)((char *)this + 80);
  std::mutex::lock((std::mutex *)((char *)this + 80));
  std::__tree<unsigned long long>::__erase_unique<unsigned long long>((uint64_t)this + 48, &v4);
  std::mutex::unlock(v3);
}

void sub_10037AD68(_Unwind_Exception *a1)
{
}

void *std::function<void ()(void)>::operator=(void *a1, uint64_t a2)
{
  int v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    int v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

{
  std::__function::__value_func<void ()(otbrError)>::operator=[abi:ne180100](a1, a2);
  return a1;
}

void std::vector<otbr::TaskRunner::DelayedTask>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  ssize_t v2 = *a1;
  if (*v2)
  {
    std::vector<otbr::TaskRunner::DelayedTask>::__base_destruct_at_end[abi:ne180100](v2, (uint64_t)*v2);
    int v3 = **a1;
    if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)(*a1)[2] - (_BYTE *)v3) >> 4) >= 0x555555555555556LL) {
      __break(0x550Cu);
    }
    else {
      operator delete(v3);
    }
  }

void *std::vector<otbr::TaskRunner::DelayedTask>::__base_destruct_at_end[abi:ne180100]( void *result, uint64_t a2)
{
  int v3 = result;
  for (uint64_t i = result[1];
        i != a2;
        uint64_t result = std::allocator<otbr::TaskRunner::DelayedTask>::destroy[abi:ne180100]((uint64_t)(v3 + 2), i))
  {
    i -= 48LL;
  }

  v3[1]  = a2;
  return result;
}

void *std::allocator<otbr::TaskRunner::DelayedTask>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 40);
  if (result == (void *)(a2 + 16))
  {
    uint64_t v3 = 4LL;
    uint64_t result = (void *)(a2 + 16);
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t *std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>( uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::__map_value_compare<_DNSRecordRef_t *,std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::less<_DNSRecordRef_t *>,true>,std::allocator<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>>>::__find_equal<_DNSRecordRef_t *>( (uint64_t)a1,  &v11,  a2);
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v6 = *v5;
  if (!*v5)
  {
    char v7 = v5;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v6 = (uint64_t *)operator new(0x28uLL);
    v9[1]  = a1 + 1;
    v6[4]  = *a3;
    char v10 = 1;
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__insert_node_at( a1,  v11,  v7,  v6);
    v9[0]  = 0LL;
    std::unique_ptr<std::__tree_node<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,void *>>>>::reset[abi:ne180100]( v9,  0LL);
  }

  return v6;
}

void *std::vector<otbr::TaskRunner::DelayedTask>::__construct_one_at_end[abi:ne180100]<unsigned long long &,std::chrono::duration<long long,std::ratio<1l,1000l>> &,std::function<void ()(void)>>( uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t result = std::allocator<otbr::TaskRunner::DelayedTask>::construct[abi:ne180100]<otbr::TaskRunner::DelayedTask,unsigned long long &,std::chrono::duration<long long,std::ratio<1l,1000l>> &,std::function<void ()(void)>>( a1 + 16,  v5,  a2,  a3,  a4);
  *(void *)(a1 + 8)  = v5 + 6;
  return result;
}

void sub_10037AFF4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8)  = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<otbr::TaskRunner::DelayedTask>::__emplace_back_slow_path<unsigned long long &,std::chrono::duration<long long,std::ratio<1l,1000l>> &,std::function<void ()(void)>>( uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }

  if (v6 > 0x555555555555555LL) {
    goto LABEL_10;
  }
  if (0x5555555555555556LL * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556LL * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555LL;
  }
  else {
    unint64_t v10 = v6;
  }
  std::__split_buffer<otbr::Mdns::Publisher::TxtEntry>::__split_buffer(v13, v10, v5, (uint64_t)(a1 + 2));
  std::allocator<otbr::TaskRunner::DelayedTask>::construct[abi:ne180100]<otbr::TaskRunner::DelayedTask,unsigned long long &,std::chrono::duration<long long,std::ratio<1l,1000l>> &,std::function<void ()(void)>>( (uint64_t)(a1 + 2),  v14,  a2,  a3,  a4);
  v14 += 6;
  std::vector<otbr::TaskRunner::DelayedTask>::__swap_out_circular_buffer(a1, v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<otbr::TaskRunner::DelayedTask>::~__split_buffer(v13);
  return v11;
}

void sub_10037B0FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *std::allocator<otbr::TaskRunner::DelayedTask>::construct[abi:ne180100]<otbr::TaskRunner::DelayedTask,unsigned long long &,std::chrono::duration<long long,std::ratio<1l,1000l>> &,std::function<void ()(void)>>( uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v6 = *a3;
  uint64_t v7 = *a4;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v10, a5);
  otbr::TaskRunner::DelayedTask::DelayedTask(a2, v6, v7, (uint64_t)v10);
  uint64_t result = v11;
  if (v11 == v10)
  {
    uint64_t v9 = 4LL;
    uint64_t result = v10;
  }

  else
  {
    if (!v11) {
      return result;
    }
    uint64_t v9 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_10037B1C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    uint64_t v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

std::chrono::steady_clock::time_point otbr::TaskRunner::DelayedTask::DelayedTask( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1  = a2;
  result.__d_.__rep_  = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v8 = 1000000 * a3;
  if ((unsigned __int128)(a3 * (__int128)1000000LL) >> 64 == (1000000 * a3) >> 63)
  {
    BOOL v9 = __OFADD__(result.__d_.__rep_, v8);
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v10 = result.__d_.__rep_ + v8;
    if (!v9)
    {
      a1[1]  = v10;
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(a1 + 2), a4);
      return (std::chrono::steady_clock::time_point)a1;
    }
  }

  else
  {
    __break(0x550Cu);
  }

  __break(0x5500u);
  return result;
}

uint64_t std::vector<otbr::TaskRunner::DelayedTask>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<otbr::TaskRunner::DelayedTask>,std::reverse_iterator<otbr::TaskRunner::DelayedTask*>,std::reverse_iterator<otbr::TaskRunner::DelayedTask*>,std::reverse_iterator<otbr::TaskRunner::DelayedTask*>>( (uint64_t)(a1 + 2),  a1[1],  (_OWORD *)a1[1],  *a1,  (_OWORD *)*a1,  a2[1],  a2[1]);
  a2[1]  = v5;
  uint64_t v6 = *a1;
  *a1  = v5;
  a2[1]  = v6;
  uint64_t v7 = a1[1];
  a1[1]  = a2[2];
  a2[2]  = v7;
  uint64_t v8 = a1[2];
  a1[2]  = a2[3];
  a2[3]  = v8;
  *a2  = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<otbr::TaskRunner::DelayedTask>,std::reverse_iterator<otbr::TaskRunner::DelayedTask*>,std::reverse_iterator<otbr::TaskRunner::DelayedTask*>,std::reverse_iterator<otbr::TaskRunner::DelayedTask*>>( uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, _OWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v16 = a6;
  *((void *)&v16 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = a7;
  __int128 v15 = v16;
  v13[0]  = a1;
  v13[1]  = &v15;
  void v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }

  else
  {
    BOOL v9 = a3;
    do
    {
      v9 -= 3;
      std::allocator_traits<std::allocator<otbr::TaskRunner::DelayedTask>>::construct[abi:ne180100]<otbr::TaskRunner::DelayedTask,otbr::TaskRunner::DelayedTask,void>( a1,  (_OWORD *)(v7 - 48),  v9);
      uint64_t v7 = *((void *)&v16 + 1) - 48LL;
      *((void *)&v16 + 1) -= 48LL;
    }

    while (v9 != a5);
    uint64_t v11 = v16;
  }

  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<otbr::TaskRunner::DelayedTask>,std::reverse_iterator<otbr::TaskRunner::DelayedTask*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_10037B390( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::allocator_traits<std::allocator<otbr::TaskRunner::DelayedTask>>::construct[abi:ne180100]<otbr::TaskRunner::DelayedTask,otbr::TaskRunner::DelayedTask,void>( uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  *a2  = *a3;
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), (uint64_t)(a3 + 1));
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<otbr::TaskRunner::DelayedTask>,std::reverse_iterator<otbr::TaskRunner::DelayedTask*>>>::~__exception_guard_exceptions[abi:ne180100]( uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<otbr::TaskRunner::DelayedTask>,std::reverse_iterator<otbr::TaskRunner::DelayedTask*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<otbr::TaskRunner::DelayedTask>,std::reverse_iterator<otbr::TaskRunner::DelayedTask*>>::operator()[abi:ne180100]( uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8LL);
  uint64_t v11 = **(void **)(a1 + 16);
  uint64_t v12 = v1;
  uint64_t v13 = v11;
  uint64_t v14 = v1;
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 8LL);
  uint64_t v6 = **(void **)(a1 + 8);
  uint64_t v7 = v3;
  uint64_t v8 = v6;
  uint64_t v9 = v3;
  return std::__allocator_destroy[abi:ne180100]<std::allocator<otbr::TaskRunner::DelayedTask>,std::reverse_iterator<std::reverse_iterator<otbr::TaskRunner::DelayedTask*>>,std::reverse_iterator<std::reverse_iterator<otbr::TaskRunner::DelayedTask*>>>( v2,  (uint64_t)v10,  (uint64_t)v5);
}

void *std::__allocator_destroy[abi:ne180100]<std::allocator<otbr::TaskRunner::DelayedTask>,std::reverse_iterator<std::reverse_iterator<otbr::TaskRunner::DelayedTask*>>,std::reverse_iterator<std::reverse_iterator<otbr::TaskRunner::DelayedTask*>>>( void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 32);
  if (v4 != *(void *)(a3 + 32))
  {
    uint64_t v6 = (uint64_t)result;
    do
    {
      uint64_t result = std::allocator<otbr::TaskRunner::DelayedTask>::destroy[abi:ne180100](v6, v4);
      uint64_t v4 = *(void *)(a2 + 32) + 48LL;
      *(void *)(a2 + 3ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = v4;
    }

    while (v4 != *(void *)(a3 + 32));
  }

  return result;
}

void *std::__split_buffer<otbr::TaskRunner::DelayedTask>::~__split_buffer(void *a1)
{
  uint64_t result = (void *)*a1;
  if (!*a1) {
    return a1;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[3] - (void)result) >> 4) < 0x555555555555556LL)
  {
    operator delete(result);
    return a1;
  }

  __break(0x550Cu);
  return result;
}

void *std::__split_buffer<otbr::TaskRunner::DelayedTask>::__destruct_at_end[abi:ne180100]( void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      uint64_t v5 = v4[4];
      unsigned __int16 v4[2] = v2 - 48;
      uint64_t result = std::allocator<otbr::TaskRunner::DelayedTask>::destroy[abi:ne180100](v5, v2 - 48);
      uint64_t v2 = v4[2];
    }

    while (v2 != a2);
  }

  return result;
}

void *std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,otbr::TaskRunner::DelayedTask::Comparator &,std::__wrap_iter<otbr::TaskRunner::DelayedTask*>>( void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v5 = result;
    unint64_t v6 = v4 >> 1;
    if (result[6 * (v4 >> 1) + 1] >= *(void *)(a2 - 40))
    {
      uint64_t v7 = (void *)(a2 - 48);
      __int128 v11 = *(_OWORD *)(a2 - 48);
      uint64_t v8 = v12;
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v12, a2 - 32);
      do
      {
        uint64_t v9 = v7;
        uint64_t v7 = &v5[6 * v6];
        *(_OWORD *)uint64_t v9 = *(_OWORD *)v7;
        std::function<void ()(void)>::operator=(v9 + 2, (uint64_t)(v7 + 2));
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
      }

      while (v5[6 * v6 + 1] >= *((uint64_t *)&v11 + 1));
      *(_OWORD *)uint64_t v7 = v11;
      uint64_t result = std::function<void ()(void)>::operator=(v7 + 2, (uint64_t)v12);
      if (v13 == v12)
      {
        uint64_t v10 = 4LL;
      }

      else
      {
        if (!v13) {
          return result;
        }
        uint64_t v10 = 5LL;
        uint64_t v8 = v13;
      }

      return (void *)(*(uint64_t (**)(void *))(*v8 + 8 * v10))(v8);
    }
  }

  return result;
}

uint64_t std::__tree<unsigned long long>::__erase_unique<unsigned long long>( uint64_t a1, unint64_t *a2)
{
  uint64_t v3 = std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::find<unsigned long long>( a1,  a2);
  std::__tree<unsigned long long>::erase(a1, v3);
  return 1LL;
}

uint64_t std::__tree<unsigned long long>::erase(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::__map_value_compare<std::string,std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>>>::__remove_node_pointer( a1,  a2);
  operator delete(a2);
  return v3;
}

void *std::__function::__value_func<void ()(void)>::swap[abi:ne180100](void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3]  = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3]  = 0LL;
        v3[3]  = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3]  = a2[3];
      }

      a2[3]  = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3]  = v3[3];
      v3[3]  = v3;
    }

    else
    {
      result[3]  = v5;
      a2[3]  = v4;
    }
  }

  return result;
}

void sub_10037B89C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

char *std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,otbr::TaskRunner::DelayedTask::Comparator,std::__wrap_iter<otbr::TaskRunner::DelayedTask*>>( char *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v7 = result;
    __int128 v14 = *(_OWORD *)result;
    uint64_t v8 = v15;
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)(result + 16));
    uint64_t v9 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,otbr::TaskRunner::DelayedTask::Comparator &,std::__wrap_iter<otbr::TaskRunner::DelayedTask*>>( v7,  a3,  a4);
    uint64_t v10 = (_OWORD *)(a2 - 48);
    __int128 v11 = v9 + 2;
    if ((void *)(a2 - 48) == v9)
    {
      *(_OWORD *)uint64_t v9 = v14;
      uint64_t result = (char *)std::function<void ()(void)>::operator=(v11, (uint64_t)v15);
    }

    else
    {
      *(_OWORD *)uint64_t v9 = *v10;
      uint64_t v12 = (void *)(a2 - 32);
      std::function<void ()(void)>::operator=(v11, (uint64_t)v12);
      _OWORD *v10 = v14;
      std::function<void ()(void)>::operator=(v12, (uint64_t)v15);
      uint64_t result = (char *)std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,otbr::TaskRunner::DelayedTask::Comparator &,std::__wrap_iter<otbr::TaskRunner::DelayedTask*>>( v7,  (uint64_t)(v9 + 6),  a3,  0xAAAAAAAAAAAAAAABLL * (((char *)(v9 + 6) - v7) >> 4));
    }

    if (v16 == v15)
    {
      uint64_t v13 = 4LL;
    }

    else
    {
      if (!v16) {
        return result;
      }
      uint64_t v13 = 5LL;
      uint64_t v8 = v16;
    }

    return (char *)(*(uint64_t (**)(void *))(*v8 + 8 * v13))(v8);
  }

  return result;
}

void sub_10037B9EC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  if (a14 == v14)
  {
    uint64_t v16 = 4LL;
  }

  else
  {
    if (!a14) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
    __int128 v14 = a14;
  }

  (*(void (**)(void *))(*v14 + 8 * v16))(v14);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,otbr::TaskRunner::DelayedTask::Comparator &,std::__wrap_iter<otbr::TaskRunner::DelayedTask*>>( void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0LL;
  uint64_t v5 = a3 - 2;
  BOOL v6 = __OFSUB__(a3, 2LL);
  if (v5 < 0) {
    uint64_t v5 = a3 - 1;
  }
  uint64_t v7 = v5 >> 1;
  while (v4 + 0x4000000000000000LL >= 0)
  {
    uint64_t v8 = (2 * v4) | 1;
    if (__OFADD__(v8, 1LL)) {
      goto LABEL_19;
    }
    uint64_t v9 = &result[6 * v4 + 6];
    if (v8 + 1 >= a3)
    {
      uint64_t v4 = (2 * v4) | 1;
    }

    else
    {
      uint64_t v10 = result[6 * v4 + 7];
      uint64_t v11 = v9[7];
      BOOL v12 = v10 < v11;
      BOOL v13 = v10 >= v11;
      if (v12) {
        uint64_t v4 = (2 * v4) | 1;
      }
      else {
        uint64_t v4 = v8 + 1;
      }
      v9 += 6 * v13;
    }

    *(_OWORD *)uint64_t result = *(_OWORD *)v9;
    uint64_t result = std::function<void ()(void)>::operator=(result + 2, (uint64_t)(v9 + 2));
    if (v6) {
      goto LABEL_20;
    }
    uint64_t result = v9;
    if (v4 > v7) {
      return v9;
    }
  }

  __break(0x550Cu);
LABEL_19:
  __break(0x5500u);
LABEL_20:
  __break(0x5515u);
  return result;
}

uint64_t otbr::agent::ThreadHelper::ThreadHelper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1  = a2;
  *(void *)(a1 + 8)  = a3;
  *(void *)(a1 + 4ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 0LL;
  *(void *)(a1 + 48)  = 0LL;
  *(void *)(a1 + 56)  = 0LL;
  *(void *)(a1 + 6ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0LL;
  *(void *)(a1 + 96)  = 0LL;
  *(void *)(a1 + 10ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0LL;
  *(void *)(a1 + 11ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  *(void *)(a1 + 1ot::Mle::Tlv::SetType(this, 20) = 0LL;
  *(void *)(a1 + 128)  = 0LL;
  *(void *)(a1 + 136)  = 0LL;
  *(void *)(a1 + 14ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0LL;
  *(void *)(a1 + 15ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  *(void *)(a1 + 16ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 0LL;
  *(void *)(a1 + 168)  = 0LL;
  *(void *)(a1 + 19ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  *(void *)(a1 + 18ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0LL;
  *(void *)(a1 + 176)  = a1 + 184;
  *(_BYTE *)(a1 + 20ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 0;
  *(void *)(a1 + 208)  = 0LL;
  *(void *)(a1 + 24ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 0LL;
  *(void *)(a1 + 27ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  *(_OWORD *)(a1 + 3ot::Mle::Tlv::SetType(this, 20) = 0u;
  *(_OWORD *)(a1 + 336)  = 0u;
  *(_OWORD *)(a1 + 35ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0u;
  *(_OWORD *)(a1 + 368)  = 0u;
  *(_OWORD *)(a1 + 38ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
  *(_OWORD *)(a1 + 40ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 0u;
  *(_OWORD *)(a1 + 416)  = 0u;
  *(_OWORD *)(a1 + 43ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0u;
  *(_OWORD *)(a1 + 448)  = 0u;
  *(_OWORD *)(a1 + 46ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
  *(_OWORD *)(a1 + 4ot::Mle::Tlv::SetType(this, 80) = 0u;
  *(_OWORD *)(a1 + 496)  = 0u;
  *(_OWORD *)(a1 + 51ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0u;
  *(_OWORD *)(a1 + 528)  = 0u;
  *(_OWORD *)(a1 + 54ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
  *(_OWORD *)(a1 + 30ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
  *(void *)(a1 + 55ot::NetworkDiagnostic::Tlv::SetType(this, 9) = 0LL;
  std::random_device::random_device[abi:ne180100]((std::random_device *)(a1 + 568));
  return a1;
}

void sub_10037BBBC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10  = (void **)(v10 + 152);
  std::vector<std::function<void ()(otOperationalDatasetTlvs const&)>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10  = (void **)(v10 + 128);
  std::vector<std::function<void ()(otDeviceRole)>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10  = (void **)(v10 + 104);
  std::vector<otbr::Ip6Address>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::function<void ()(otbr::Mdns::Publisher::State)>::~function((void *)(v10 + 72));
  a10  = (void **)(v10 + 48);
  std::vector<otActiveScanResult>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::function<void ()(otbr::Mdns::Publisher::State)>::~function((void *)(v10 + 16));
  _Unwind_Resume(a1);
}

std::random_device *std::random_device::random_device[abi:ne180100](std::random_device *a1)
{
  return a1;
}

void sub_10037BC9C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void otbr::agent::ThreadHelper::StateChangedCallback(otbr::agent::ThreadHelper *this, int a2)
{
  if ((a2 & 4) == 0) {
    goto LABEL_21;
  }
  DeviceRole  = otThreadGetDeviceRole(*(void *)this);
  uint64_t v10 = *((void *)this + 16);
  uint64_t v11 = *((void *)this + 17);
  while (v10 != v11)
  {
    LODWORD(v18)  = DeviceRole;
    std::__function::__value_func<void ()(otbrError)>::operator()[abi:ne180100](v10);
    v10 += 32LL;
  }

  if (DeviceRole <= 1) {
    goto LABEL_21;
  }
  if (!*((void *)this + 30))
  {
    if (*((void *)this + 34))
    {
      LODWORD(v18)  = 0;
      std::__function::__value_func<void ()(otbrError)>::operator()[abi:ne180100]((uint64_t)this + 248);
      std::function<void ()(otbrError)>::operator=((void *)this + 31);
    }

    goto LABEL_21;
  }

  if (*((_BYTE *)this + 200))
  {
    otbrLog(6u, "UTILS", "StateChangedCallback is called during waiting for Mgmt Set Response", v4, v5, v6, v7, v8, v15);
    return;
  }

  unsigned __int8 v12 = *((_BYTE *)this + 566);
  if (!v12)
  {
    std::__function::__value_func<void ()(otbr::Mdns::Publisher::State)>::__value_func[abi:ne180100]( (uint64_t)&v18,  (uint64_t)this + 216);
    std::function<void ()(otbrError)>::operator=((void *)this + 27);
    v16[0]  = *((void *)this + 26);
    std::__function::__value_func<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>::operator()[abi:ne180100]((uint64_t)&v18);
    BOOL v13 = (__int128 *)*((void *)&v19 + 1);
    if (*((__int128 **)&v19 + 1) == &v18)
    {
      uint64_t v14 = 4LL;
      BOOL v13 = &v18;
      goto LABEL_20;
    }

void sub_10037BEF0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  __int128 v20 = a18;
  if (a18 == v18)
  {
    uint64_t v21 = 4LL;
    __int128 v20 = &a15;
  }

  else
  {
    if (!a18) {
      goto LABEL_6;
    }
    uint64_t v21 = 5LL;
  }

  (*(void (**)(void))(*(void *)v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void *otbr::agent::ThreadHelper::MgmtSetResponseHandler(int a1, uint64_t a2)
{
  return otbr::agent::ThreadHelper::MgmtSetResponseHandler(a2, a1);
}

void otbr::agent::ThreadHelper::ActiveDatasetChangedCallback(otbr::agent::ThreadHelper *this)
{
  ActiveTlvs  = otDatasetGetActiveTlvs(*(void *)this, v11);
  if (ActiveTlvs)
  {
    char v3 = otThreadErrorToString(ActiveTlvs);
    otbrLog(4u, "UTILS", "Error handling active dataset change: %s", v4, v5, v6, v7, v8, v3);
  }

  else
  {
    uint64_t v9 = *((void *)this + 19);
    uint64_t v10 = *((void *)this + 20);
    while (v9 != v10)
    {
      std::__function::__value_func<void ()(otbrError)>::operator()[abi:ne180100](v9);
      v9 += 32LL;
    }
  }

uint64_t otbr::agent::ThreadHelper::AddDeviceRoleHandler(uint64_t *a1, uint64_t a2)
{
  char v3 = a1 + 16;
  unint64_t v4 = a1[17];
  if (v4 >= a1[18])
  {
    uint64_t result = std::vector<std::function<void ()(otDeviceRole)>>::__emplace_back_slow_path<std::function<void ()(otDeviceRole)>&>( v3,  a2);
  }

  else
  {
    std::vector<std::function<void ()(otDeviceRole)>>::__construct_one_at_end[abi:ne180100]<std::function<void ()(otDeviceRole)>&>( (uint64_t)v3,  a2);
    uint64_t result = v4 + 32;
  }

  a1[17]  = result;
  return result;
}

uint64_t *otbr::agent::ThreadHelper::Scan(uint64_t *result, uint64_t a2)
{
  if (*(void *)(a2 + 24))
  {
    char v3 = result;
    unint64_t v4 = result + 2;
    std::function<void ()(otError,std::vector<otActiveScanResult> const&)>::operator=(result + 2, a2);
    v3[7]  = v3[6];
    uint64_t result = (uint64_t *)otLinkActiveScan(*v3, 0, 0, (uint64_t)otbr::agent::ThreadHelper::ActiveScanHandler, (uint64_t)v3);
    if ((_DWORD)result)
    {
      if (*(void *)(a2 + 24))
      {
        memset(v5, 0, sizeof(v5));
        int v6 = (int)result;
        std::__function::__value_func<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>::operator()[abi:ne180100]((uint64_t)v4);
        uint64_t v7 = (void **)v5;
        std::vector<otActiveScanResult>::__destroy_vector::operator()[abi:ne180100](&v7);
      }

      return std::function<void ()(otbrError)>::operator=(v4);
    }
  }

  return result;
}

void sub_10037C0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void *std::function<void ()(otError,std::vector<otActiveScanResult> const&)>::operator=( void *a1, uint64_t a2)
{
  char v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    char v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void *otbr::agent::ThreadHelper::ActiveScanHandler(__int128 *a1, void *a2)
{
  return otbr::agent::ThreadHelper::ActiveScanHandler(a2, a1);
}

void *otbr::agent::ThreadHelper::EnergyScan( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = a2;
  PreferredChannelMask  = otPlatRadioGetPreferredChannelMask(*a1, a2, a3, a4, a5, a6, a7, a8);
  if (!*(void *)(a3 + 24)) {
    return std::function<void ()(otbrError)>::operator=(a1 + 9);
  }
  if (v9 > 0xFFFE)
  {
    LODWORD(result)  = 7;
LABEL_7:
    memset(v14, 0, sizeof(v14));
    int v15 = (int)result;
    std::__function::__value_func<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>::operator()[abi:ne180100]((uint64_t)(a1 + 9));
    uint64_t v16 = (void **)v14;
    std::vector<otbr::Ip6Address>::__destroy_vector::operator()[abi:ne180100](&v16);
    return std::function<void ()(otbrError)>::operator=(a1 + 9);
  }

  unsigned int v12 = PreferredChannelMask;
  std::function<void ()(otError,std::vector<otEnergyScanResult> const&)>::operator=(a1 + 9, a3);
  a1[14]  = a1[13];
  uint64_t result = (void *)otLinkEnergyScan(*a1, v12, v9, (uint64_t)otbr::agent::ThreadHelper::EnergyScanCallback, (uint64_t)a1);
  if (!(_DWORD)result) {
    return result;
  }
  if (*(void *)(a3 + 24)) {
    goto LABEL_7;
  }
  return std::function<void ()(otbrError)>::operator=(a1 + 9);
}

void sub_10037C284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void *std::function<void ()(otError,std::vector<otEnergyScanResult> const&)>::operator=( void *a1, uint64_t a2)
{
  char v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    char v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

uint64_t otbr::agent::ThreadHelper::EnergyScanCallback(_WORD *a1, uint64_t a2)
{
  return otbr::agent::ThreadHelper::EnergyScanCallback(a2, a1);
}

uint64_t otbr::agent::ThreadHelper::RandomFill(uint64_t this, char *a2, uint64_t a3)
{
  uint64_t v6 = 0xFF00000000LL;
  if (a3)
  {
    uint64_t v3 = a3;
    uint64_t v5 = this + 568;
    do
    {
      this  = std::uniform_int_distribution<int>::operator()<std::random_device>((uint64_t)&v6, v5, &v6);
      *a2++  = this;
      --v3;
    }

    while (v3);
  }

  return this;
}

void *otbr::agent::ThreadHelper::ActiveScanHandler(void *result, __int128 *a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    uint64_t v3 = (_OWORD *)result[7];
    if ((unint64_t)v3 >= result[8])
    {
      uint64_t result = (void *)std::vector<otActiveScanResult>::__push_back_slow_path<otActiveScanResult const&>( result + 6,  a2);
    }

    else
    {
      __int128 v4 = *a2;
      __int128 v5 = a2[1];
      __int128 v6 = a2[2];
      *(_OWORD *)((char *)v3 + 4ot::NetworkData::NetworkDataTlv::SetType(this, 4) = *(__int128 *)((char *)a2 + 44);
      v3[1]  = v5;
      char v3[2] = v6;
      _OWORD *v3 = v4;
      uint64_t result = (void *)((char *)v3 + 60);
    }

    v2[7]  = result;
  }

  else if (result[5])
  {
    return (void *)std::__function::__value_func<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>::operator()[abi:ne180100]((uint64_t)(result + 2));
  }

  return result;
}

uint64_t otbr::agent::ThreadHelper::EnergyScanCallback(uint64_t result, _WORD *a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    uint64_t v3 = (uint64_t *)(result + 104);
    unint64_t v4 = *(void *)(v2 + 112);
    if (v4 >= *(void *)(v2 + 120))
    {
      uint64_t result = std::vector<otEnergyScanResult>::__push_back_slow_path<otEnergyScanResult const&>(v3, a2);
    }

    else
    {
      std::vector<otEnergyScanResult>::__construct_one_at_end[abi:ne180100]<otEnergyScanResult const&>((uint64_t)v3, a2);
      uint64_t result = v4 + 2;
    }

    *(void *)(v2 + 11ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = result;
  }

  else if (*(void *)(result + 96))
  {
    return std::__function::__value_func<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>::operator()[abi:ne180100](result + 72);
  }

  return result;
}

uint64_t otbr::agent::ThreadHelper::RandomChannelFromChannelMask( otbr::agent::ThreadHelper *this, unsigned int a2)
{
  int v2 = 0;
  unsigned __int8 v3 = 0;
  do
  {
    if (((a2 >> v2) & 1) != 0)
    {
      if (v3 >= 0x20u) {
        goto LABEL_8;
      }
      uint64_t v4 = v3++;
      *((_BYTE *)&v7[2] + vot::NetworkData::NetworkDataTlv::SetType(this, 4) = v2;
    }

    ++v2;
  }

  while (v2 != 32);
  v7[0]  = 0;
  v7[1]  = v3 - 1;
  unsigned int v5 = std::uniform_int_distribution<int>::operator()<std::random_device>((uint64_t)v7, (uint64_t)this + 568, v7);
  if (v5 >= 0x20) {
LABEL_8:
  }
    __break(0x5512u);
  return *((unsigned __int8 *)&v7[2] + v5);
}

uint64_t otbr::agent::ThreadHelper::Attach( uint64_t this, uint64_t a2, int a3, unint64_t a4, __int128 **a5, __int128 **a6, int a7, uint64_t a8)
{
  __int16 v35 = a3;
  if (*(void *)(a8 + 24))
  {
    unsigned int v9 = (uint64_t *)this;
    if (*(void *)(this + 240) || *(void *)(this + 272))
    {
      this  = 13LL;
      goto LABEL_5;
    }

    uint64_t v11 = a5[1];
    if (v11 != *a5 && (char *)v11 - (char *)*a5 != 16)
    {
LABEL_46:
      this  = 7LL;
LABEL_5:
      if (*(void *)(a8 + 24))
      {
        int v37 = this;
        uint64_t v36 = 0LL;
        return std::__function::__value_func<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>::operator()[abi:ne180100](a8);
      }

      return this;
    }

    uint64_t v17 = a6[1];
    if (*a6 == v17)
    {
      if (!a7) {
        goto LABEL_46;
      }
    }

    else
    {
      this  = 7LL;
    }

    if (a3 == 0xFFFF)
    {
      do
        otbr::agent::ThreadHelper::RandomFill((uint64_t)v9, (char *)&v35, 2LL);
      while (v35 == -1);
    }

    if (a4 == -1LL)
    {
      int8x8_t v40 = (int8x8_t)-1LL;
      do
        otbr::agent::ThreadHelper::RandomFill((uint64_t)v9, (char *)&v40, 8LL);
      while (*(void *)&v40 == -1LL);
    }

    else
    {
      uint64x2_t v18 = (uint64x2_t)vdupq_n_s64(a4);
      int8x8_t v40 = vmovn_s16( vuzp1q_s16( (int16x8_t)vuzp1q_s32( (int32x4_t)vshlq_u64(v18, (uint64x2_t)xmmword_1003ACF30),  (int32x4_t)vshlq_u64(v18, (uint64x2_t)xmmword_1003ACF20)),  (int16x8_t)vuzp1q_s32( (int32x4_t)vshlq_u64(v18, (uint64x2_t)xmmword_1003ACF50),  (int32x4_t)vshlq_u64(v18, (uint64x2_t)xmmword_1003ACF40))));
    }

    if (*a5 == a5[1]) {
      otbr::agent::ThreadHelper::RandomFill((uint64_t)v9, (char *)&v39, 16LL);
    }
    else {
      __int128 v39 = **a5;
    }
    if (*a6 == a6[1]) {
      otbr::agent::ThreadHelper::RandomFill((uint64_t)v9, (char *)&v38, 16LL);
    }
    else {
      __int128 v38 = **a6;
    }
    if ((otIp6IsEnabled(*v9) & 1) == 0)
    {
      this  = otIp6SetEnabled(*v9, 1);
      if ((_DWORD)this) {
        goto LABEL_5;
      }
    }

    __int128 v19 = *(char *)(a2 + 23) >= 0 ? (ot *)a2 : *(ot **)a2;
    this  = otThreadSetNetworkName(*v9, v19);
    if ((_DWORD)this) {
      goto LABEL_5;
    }
    this  = otLinkSetPanId(*v9, v35);
    if ((_DWORD)this) {
      goto LABEL_5;
    }
    this  = otThreadSetExtendedPanId(*v9, (uint64_t)&v40);
    if ((_DWORD)this) {
      goto LABEL_5;
    }
    this  = otThreadSetNetworkKey(*v9, (uint64_t)&v39);
    if ((_DWORD)this) {
      goto LABEL_5;
    }
    unsigned int v27 = otPlatRadioGetPreferredChannelMask(*v9, v20, v21, v22, v23, v24, v25, v26) & a7;
    if (v27 || (unsigned int v27 = otLinkGetSupportedChannelMask(*v9) & a7) != 0)
    {
      char v33 = otbr::agent::ThreadHelper::RandomChannelFromChannelMask((otbr::agent::ThreadHelper *)v9, v27);
      this  = otLinkSetChannel(*v9, v33);
      if ((_DWORD)this) {
        return this;
      }
      this  = otThreadSetPskc(*v9, (uint64_t)&v38);
      if (!(_DWORD)this)
      {
        this  = otThreadSetEnabled(*v9, 1);
        if (!(_DWORD)this)
        {
          v9[26]  = 0LL;
          return (uint64_t)std::function<void ()(otError,long long)>::operator=(v9 + 27, a8);
        }
      }

      goto LABEL_5;
    }

    otbrLog(4u, "UTILS", "Invalid channel mask", v28, v29, v30, v31, v32, v34);
    goto LABEL_46;
  }

  return this;
}

void *std::function<void ()(otError,long long)>::operator=(void *a1, uint64_t a2)
{
  unsigned __int8 v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    unsigned __int8 v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

uint64_t otbr::agent::ThreadHelper::Attach(uint64_t *a1, uint64_t a2)
{
  if (a1[30] || a1[34])
  {
    uint64_t result = 13LL;
  }

  else if ((otIp6IsEnabled(*a1) & 1) != 0 || (uint64_t result = otIp6SetEnabled(*a1, 1), !(_DWORD)result))
  {
    uint64_t result = otThreadSetEnabled(*a1, 1);
    if (!(_DWORD)result) {
      return (uint64_t)std::function<void ()(otError,long long)>::operator=(a1 + 27, a2);
    }
  }

  if (*(void *)(a2 + 24)) {
    return std::__function::__value_func<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>::operator()[abi:ne180100](a2);
  }
  return result;
}

uint64_t otbr::agent::ThreadHelper::Detach(otbr::agent::ThreadHelper *this)
{
  uint64_t result = otThreadSetEnabled(*(void *)this, 0);
  if (!(_DWORD)result) {
    return otIp6SetEnabled(*(void *)this, 0);
  }
  return result;
}

void otbr::agent::ThreadHelper::Reset(otbr::agent::ThreadHelper *this)
{
}

uint64_t sub_10037C9AC()
{
  return 0LL;
}

uint64_t otbr::agent::ThreadHelper::JoinerStart( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(void *)(a8 + 24))
  {
    unsigned int v9 = (uint64_t *)result;
    if (*(void *)(result + 240) || *(void *)(result + 272))
    {
      uint64_t result = 13LL;
    }

    else if ((otIp6IsEnabled(*(void *)result) & 1) != 0 || (uint64_t result = otIp6SetEnabled(*v9, 1), !(_DWORD)result))
    {
      uint64_t v16 = *(char *)(a2 + 23) >= 0 ? (ot *)a2 : *(ot **)a2;
      uint64_t v17 = *(char *)(a3 + 23) >= 0 ? (ot *)a3 : *(ot **)a3;
      uint64x2_t v18 = *(char *)(a4 + 23) >= 0 ? (ot *)a4 : *(ot **)a4;
      __int128 v19 = *(char *)(a5 + 23) >= 0 ? (ot *)a5 : *(ot **)a5;
      uint64_t v20 = *(char *)(a6 + 23) >= 0 ? (ot *)a6 : *(ot **)a6;
      uint64_t v21 = *(char *)(a7 + 23) >= 0 ? (char *)a7 : *(char **)a7;
      uint64_t result = otJoinerStart( *v9,  v16,  v17,  v18,  v19,  v20,  v21,  (uint64_t)otbr::agent::ThreadHelper::JoinerCallback,  (uint64_t)v9);
      if (!(_DWORD)result) {
        return (uint64_t)std::function<void ()(otError)>::operator=(v9 + 31, a8);
      }
    }

    if (*(void *)(a8 + 24)) {
      return std::__function::__value_func<void ()(otbrError)>::operator()[abi:ne180100](a8);
    }
  }

  return result;
}

void otbr::agent::ThreadHelper::JoinerCallback(int a1, uint64_t *a2)
{
}

void *std::function<void ()(otError)>::operator=(void *a1, uint64_t a2)
{
  unsigned __int8 v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    unsigned __int8 v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void otbr::agent::ThreadHelper::JoinerCallback(uint64_t *a1, int a2)
{
  if (a2)
  {
    char v3 = otThreadErrorToString(a2);
    otbrLog(4u, "UTILS", "Failed to join Thread network: %s", v4, v5, v6, v7, v8, v3);
    unsigned int v9 = a1 + 31;
    std::__function::__value_func<void ()(otbrError)>::operator()[abi:ne180100]((uint64_t)v9);
    std::function<void ()(otbrError)>::operator=(v9);
  }

  else
  {
    int v10 = otThreadSetEnabled(*a1, 1);
    if (v10) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 6;
    }
    otThreadErrorToString(v10);
    otbrLog(v11, "UTILS", "%s: %s", v12, v13, v14, v15, v16, (char)"Start Thread network");
  }

void otbr::agent::ThreadHelper::LogOpenThreadResult(char a1, int a2)
{
  if (a2) {
    unsigned int v3 = 4;
  }
  else {
    unsigned int v3 = 6;
  }
  otThreadErrorToString(a2);
  otbrLog(v3, "UTILS", "%s: %s", v4, v5, v6, v7, v8, a1);
}

uint64_t otbr::agent::ThreadHelper::TryResumeNetwork(otbr::agent::ThreadHelper *this)
{
  if (otLinkGetPanId(*(void *)this) == 0xFFFF
    || otThreadGetDeviceRole(*(void *)this)
    || (otIp6IsEnabled(*(void *)this) & 1) != 0)
  {
    return 0LL;
  }

  uint64_t v2 = otIp6SetEnabled(*(void *)this, 1);
  if ((_DWORD)v2 || (uint64_t v2 = otThreadSetEnabled(*(void *)this, 1), (_DWORD)v2)) {
    otIp6SetEnabled(*(void *)this, 0);
  }
  return v2;
}

uint64_t otbr::agent::ThreadHelper::AttachAllNodesTo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  DeviceRole  = otThreadGetDeviceRole(*(void *)a1);
  if (!*(void *)(a3 + 24))
  {
    otbrLog(4u, "UTILS", "Attach Handler is nullptr", v7, v8, v9, v10, v11, v38);
    goto LABEL_6;
  }

  if (*(void *)(a1 + 240) || *(void *)(a1 + 272))
  {
    Active  = 5;
    goto LABEL_7;
  }

  uint64_t v14 = *(const void **)a2;
  uint64_t v15 = *(const void **)(a2 + 8);
  size_t v16 = (size_t)v15 - *(void *)a2;
  if (v16 > 0xFE) {
    goto LABEL_6;
  }
  unsigned int v17 = DeviceRole;
  if (v15 != v14) {
    memmove(__dst, v14, v16);
  }
  v46[30]  = v16;
  Active  = otDatasetParseTlvs((unsigned __int8 *)__dst, (uint64_t)v43);
  if (Active) {
    goto LABEL_7;
  }
  if ((~v44 & 0xFBD) != 0) {
    goto LABEL_6;
  }
  unsigned int v18 = v46[30];
  if (v46[30] >= 3u)
  {
    __int128 v19 = (char *)__dst + v46[30];
    unsigned __int16 Next = (otbr::Tlv *)__dst;
    do
    {
      if (*(_BYTE *)Next == 51) {
        goto LABEL_6;
      }
      unsigned __int16 Next = (otbr::Tlv *)otbr::Tlv::GetNext(Next);
    }

    while ((char *)Next + 2 < v19);
    unsigned int v18 = v46[30];
    if (v46[30] >= 3u)
    {
      uint64_t v21 = (char *)__dst + v46[30];
      uint64_t v22 = (otbr::Tlv *)__dst;
      do
      {
        if (*(_BYTE *)v22 == 52) {
          goto LABEL_6;
        }
        uint64_t v22 = (otbr::Tlv *)otbr::Tlv::GetNext(v22);
      }

      while ((char *)v22 + 2 < v21);
      unsigned int v18 = v46[30];
      if (v46[30] > 0xEEu)
      {
LABEL_6:
        Active  = 7;
        goto LABEL_7;
      }
    }
  }

  if (v18 == 255) {
    goto LABEL_46;
  }
  uint64_t v23 = (otbr::Tlv *)((char *)__dst + v18);
  *(_BYTE *)uint64_t v23 = 51;
  uint64_t result = clock_gettime(_CLOCK_REALTIME, &__tp);
  if ((unint64_t)__tp.tv_nsec >> 49)
  {
    __break(0x550Cu);
    return result;
  }

  if (v18 > 0xFD) {
LABEL_46:
  }
    __break(1u);
  unint64_t v24 = (((((__tp.tv_nsec & 0x1FFFFFFFFFFFFuLL) << 6) * (unsigned __int128)0x44B82FA09B5A53uLL) >> 64) >> 10) & 0xFFFELL | (__tp.tv_sec << 16);
  *((_BYTE *)v23 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = 8;
  unint64_t v25 = v18 + 2LL;
  for (uint64_t i = 56LL; i != -8; i -= 8LL)
  {
    if (v25 > 0xFE) {
      goto LABEL_46;
    }
    *((_BYTE *)__dst + v25++)  = v24 >> i;
  }

  uint64_t v27 = otbr::Tlv::GetNext(v23);
  *(_WORD *)uint64_t v27 = 1076;
  *(_DWORD *)(v27 + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = -527236096;
  uint64_t v28 = otbr::Tlv::GetNext((otbr::Tlv *)v27) - (void)__dst;
  v46[30]  = v28;
  if (!(_BYTE)v28) {
    otbr::agent::ThreadHelper::AttachAllNodesTo();
  }
  if (v17 > 1)
  {
    Active  = otDatasetSendMgmtPendingSet( *(void *)a1,  (uint64_t)v42,  (char *)__dst,  v28,  (uint64_t)otbr::agent::ThreadHelper::MgmtSetResponseHandler,  a1);
    if (!Active)
    {
      *(void *)(a1 + 208)  = 300000LL;
      uint64_t result = (uint64_t)std::function<void ()(otError,long long)>::operator=((void *)(a1 + 216), a3);
      *(_BYTE *)(a1 + 20ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 1;
      return result;
    }

    goto LABEL_7;
  }

  Active  = otDatasetGetActive(*(void *)a1, (uint64_t)v41);
  int v29 = Active;
  if (Active != 23 && Active
    || Active && (Active  = otDatasetSetActiveTlvs(*(void *)a1, (unsigned __int8 *)__dst)) != 0
    || (otIp6IsEnabled(*(void *)a1) & 1) == 0 && (Active  = otIp6SetEnabled(*(void *)a1, 1)) != 0
    || (Active  = otThreadSetEnabled(*(void *)a1, 1)) != 0)
  {
LABEL_7:
    int v40 = Active;
    v41[0]  = 0LL;
    return std::__function::__value_func<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>::operator()[abi:ne180100](a3);
  }

  uint64_t v30 = (_OWORD *)(a1 + 312);
  if (v29)
  {
    *(void *)(a1 + 208)  = 0LL;
    *uint64_t v30 = 0u;
    *(_OWORD *)(a1 + 328)  = 0u;
    *(_OWORD *)(a1 + 34ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
    *(_OWORD *)(a1 + 36ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 0u;
    *(_OWORD *)(a1 + 376)  = 0u;
    *(_OWORD *)(a1 + 39ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0u;
    *(_OWORD *)(a1 + 408)  = 0u;
    *(_OWORD *)(a1 + 42ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
    *(_OWORD *)(a1 + 44ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 0u;
    *(_OWORD *)(a1 + 456)  = 0u;
    *(_OWORD *)(a1 + 47ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0u;
    *(_OWORD *)(a1 + 488)  = 0u;
    *(_OWORD *)(a1 + 50ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
    *(_OWORD *)(a1 + 5ot::Mle::Tlv::SetType(this, 20) = 0u;
    *(_OWORD *)(a1 + 536)  = 0u;
    *(_OWORD *)(a1 + 55ot::NetworkData::NetworkDataTlv::SetType(this, 1) = 0u;
  }

  else
  {
    *(void *)(a1 + 208)  = 300000LL;
    __int128 v31 = __dst[13];
    *(_OWORD *)(a1 + 50ot::NetworkData::NetworkDataTlv::SetType(this, 4) = __dst[12];
    *(_OWORD *)(a1 + 5ot::Mle::Tlv::SetType(this, 20) = v31;
    *(_OWORD *)(a1 + 536)  = *(_OWORD *)v46;
    *(_OWORD *)(a1 + 55ot::NetworkData::NetworkDataTlv::SetType(this, 1) = *(_OWORD *)&v46[15];
    __int128 v32 = __dst[9];
    *(_OWORD *)(a1 + 44ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = __dst[8];
    *(_OWORD *)(a1 + 456)  = v32;
    __int128 v33 = __dst[11];
    *(_OWORD *)(a1 + 47ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = __dst[10];
    *(_OWORD *)(a1 + 488)  = v33;
    __int128 v34 = __dst[5];
    *(_OWORD *)(a1 + 376)  = __dst[4];
    *(_OWORD *)(a1 + 39ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = v34;
    __int128 v35 = __dst[7];
    *(_OWORD *)(a1 + 408)  = __dst[6];
    *(_OWORD *)(a1 + 42ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v35;
    __int128 v36 = __dst[1];
    *uint64_t v30 = __dst[0];
    *(_OWORD *)(a1 + 328)  = v36;
    __int128 v37 = __dst[3];
    *(_OWORD *)(a1 + 34ot::NetworkData::NetworkDataTlv::SetType(this, 4) = __dst[2];
    *(_OWORD *)(a1 + 36ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = v37;
  }

  *(_BYTE *)(a1 + 20ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 0;
  return (uint64_t)std::function<void ()(otError,long long)>::operator=((void *)(a1 + 216), a3);
}

uint64_t otbr::Tlv::GetNext(otbr::Tlv *this)
{
  uint64_t v1 = *((unsigned __int8 *)this + 1);
  if (v1 == 255)
  {
    uint64_t v1 = __rev16(*((unsigned __int16 *)this + 1));
    uint64_t v2 = 3LL;
  }

  else
  {
    uint64_t v2 = 1LL;
  }

  return (uint64_t)this + v2 + v1 + 1;
}

void *otbr::agent::ThreadHelper::MgmtSetResponseHandler(uint64_t a1, int a2)
{
  __int128 v19 = 0LL;
  otThreadErrorToString(a2);
  if (a2) {
    unsigned int v9 = 4;
  }
  else {
    unsigned int v9 = 6;
  }
  otbrLog(v9, "UTILS", "%s: %s", v4, v5, v6, v7, v8, (char)"MgmtSetResponseHandler()");
  *(_BYTE *)(a1 + 20ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 0;
  if (*(void *)(a1 + 240))
  {
    std::function<void ()(otError,long long)>::operator=(v18, a1 + 216);
    *(void *)(a1 + 208)  = 0LL;
    std::function<void ()(otbrError)>::operator=((void *)(a1 + 216));
    *(_OWORD *)(a1 + 31ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0u;
    *(_OWORD *)(a1 + 328)  = 0u;
    *(_OWORD *)(a1 + 34ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
    *(_OWORD *)(a1 + 36ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 0u;
    *(_OWORD *)(a1 + 376)  = 0u;
    *(_OWORD *)(a1 + 39ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0u;
    *(_OWORD *)(a1 + 408)  = 0u;
    *(_OWORD *)(a1 + 42ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
    *(_OWORD *)(a1 + 44ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 0u;
    *(_OWORD *)(a1 + 456)  = 0u;
    *(_OWORD *)(a1 + 47ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0u;
    *(_OWORD *)(a1 + 488)  = 0u;
    *(_OWORD *)(a1 + 50ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
    *(_OWORD *)(a1 + 5ot::Mle::Tlv::SetType(this, 20) = 0u;
    *(_OWORD *)(a1 + 536)  = 0u;
    *(_OWORD *)(a1 + 55ot::NetworkData::NetworkDataTlv::SetType(this, 1) = 0u;
    std::__function::__value_func<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>::operator()[abi:ne180100]((uint64_t)v18);
  }

  else
  {
    otbrLog(4u, "UTILS", "mAttachHandler is nullptr", v10, v11, v12, v13, v14, v17);
    *(void *)(a1 + 208)  = 0LL;
    *(_OWORD *)(a1 + 31ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0u;
    *(_OWORD *)(a1 + 328)  = 0u;
    *(_OWORD *)(a1 + 34ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
    *(_OWORD *)(a1 + 36ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 0u;
    *(_OWORD *)(a1 + 376)  = 0u;
    *(_OWORD *)(a1 + 39ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0u;
    *(_OWORD *)(a1 + 408)  = 0u;
    *(_OWORD *)(a1 + 42ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
    *(_OWORD *)(a1 + 44ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 0u;
    *(_OWORD *)(a1 + 456)  = 0u;
    *(_OWORD *)(a1 + 47ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0u;
    *(_OWORD *)(a1 + 488)  = 0u;
    *(_OWORD *)(a1 + 50ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
    *(_OWORD *)(a1 + 5ot::Mle::Tlv::SetType(this, 20) = 0u;
    *(_OWORD *)(a1 + 536)  = 0u;
    *(_OWORD *)(a1 + 55ot::NetworkData::NetworkDataTlv::SetType(this, 1) = 0u;
  }

  uint64_t result = v19;
  if (v19 == v18)
  {
    uint64_t v16 = 4LL;
    uint64_t result = v18;
  }

  else
  {
    if (!v19) {
      return result;
    }
    uint64_t v16 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v16))();
}

void sub_10037D308( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  unsigned int v18 = a17;
  if (a17 == &a14)
  {
    uint64_t v19 = 4LL;
    unsigned int v18 = &a14;
  }

  else
  {
    if (!a17) {
      goto LABEL_6;
    }
    uint64_t v19 = 5LL;
  }

  (*(void (**)(void))(*(void *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t otbr::agent::ThreadHelper::AddActiveDatasetChangeHandler(uint64_t *a1, uint64_t a2)
{
  unsigned int v3 = a1 + 19;
  unint64_t v4 = a1[20];
  if (v4 >= a1[21])
  {
    uint64_t result = std::vector<std::function<void ()(otOperationalDatasetTlvs const&)>>::__push_back_slow_path<std::function<void ()(otOperationalDatasetTlvs const&)>>( v3,  a2);
  }

  else
  {
    std::vector<std::function<void ()(otOperationalDatasetTlvs const&)>>::__construct_one_at_end[abi:ne180100]<std::function<void ()(otOperationalDatasetTlvs const&)>>( (uint64_t)v3,  a2);
    uint64_t result = v4 + 32;
  }

  a1[20]  = result;
  return result;
}

void *otbr::agent::ThreadHelper::DetachGracefully(uint64_t *a1, uint64_t a2)
{
  if (a1[38]
    || otThreadDetachGracefully( *a1,  (void (*)(void *))otbr::agent::ThreadHelper::DetachGracefullyCallback,  (uint64_t)a1))
  {
    return (void *)std::__function::__value_func<void ()(otbrError)>::operator()[abi:ne180100](a2);
  }

  else
  {
    return std::function<void ()(otError)>::operator=(a1 + 35, a2);
  }

uint64_t otbr::agent::ThreadHelper::DetachGracefullyCallback(uint64_t this)
{
  if (*(void *)(this + 304)) {
    return std::__function::__value_func<void ()(otbrError)>::operator()[abi:ne180100](this + 280);
  }
  return this;
}

uint64_t std::vector<std::function<void ()(otDeviceRole)>>::__construct_one_at_end[abi:ne180100]<std::function<void ()(otDeviceRole)>&>( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t result = std::__function::__value_func<void ()(otbr::Mdns::Publisher::State)>::__value_func[abi:ne180100](v3, a2);
  *(void *)(a1 + 8)  = v3 + 32;
  return result;
}

void sub_10037D460(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8)  = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::function<void ()(otDeviceRole)>>::__emplace_back_slow_path<std::function<void ()(otDeviceRole)>&>( uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 5;
  unint64_t v3 = v2 + 1;
  if (v2 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }

  if (v3 >> 59) {
    goto LABEL_10;
  }
  unint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v3) {
    unint64_t v3 = v6 >> 4;
  }
  if (v6 >= 0x7FFFFFFFFFFFFFE0LL) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  std::__split_buffer<std::function<void ()(void)>>::__split_buffer(v10, v7, v2, (uint64_t)(a1 + 2));
  std::__function::__value_func<void ()(otbr::Mdns::Publisher::State)>::__value_func[abi:ne180100](v11, a2);
  v11 += 32LL;
  std::vector<std::function<void ()(otDeviceRole)>>::__swap_out_circular_buffer(a1, v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<std::function<void ()(otDeviceRole)>>::~__split_buffer(v10);
  return v8;
}

void sub_10037D51C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t std::vector<std::function<void ()(otDeviceRole)>>::__swap_out_circular_buffer( uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::function<void ()(otDeviceRole)>>,std::reverse_iterator<std::function<void ()(otDeviceRole)>*>,std::reverse_iterator<std::function<void ()(otDeviceRole)>*>,std::reverse_iterator<std::function<void ()(otDeviceRole)>*>>( (uint64_t)(a1 + 2),  a1[1],  a1[1],  *a1,  *a1,  a2[1],  a2[1]);
  a2[1]  = v5;
  uint64_t v6 = *a1;
  *a1  = v5;
  a2[1]  = v6;
  uint64_t v7 = a1[1];
  a1[1]  = a2[2];
  a2[2]  = v7;
  uint64_t v8 = a1[2];
  a1[2]  = a2[3];
  a2[3]  = v8;
  *a2  = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::function<void ()(otDeviceRole)>>,std::reverse_iterator<std::function<void ()(otDeviceRole)>*>,std::reverse_iterator<std::function<void ()(otDeviceRole)>*>,std::reverse_iterator<std::function<void ()(otDeviceRole)>*>>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v15 = a6;
  *((void *)&v15 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = a7;
  __int128 v14 = v15;
  v12[0]  = a1;
  v12[1]  = &v14;
  void v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }

  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 32LL;
      std::__function::__value_func<void ()(otDeviceRole)>::__value_func[abi:ne180100](v7 - 32, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 32LL;
      *((void *)&v15 + 1) -= 32LL;
    }

    while (v9 != a5);
    uint64_t v10 = v15;
  }

  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(otDeviceRole)>>,std::reverse_iterator<std::function<void ()(otDeviceRole)>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__function::__value_func<void ()(otDeviceRole)>::__value_func[abi:ne180100]( uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v4;
  }

  else
  {
    unint64_t v3 = (void *)(a1 + 24);
  }

  void *v3 = 0LL;
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(otDeviceRole)>>,std::reverse_iterator<std::function<void ()(otDeviceRole)>*>>>::~__exception_guard_exceptions[abi:ne180100]( uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(void)>>,std::reverse_iterator<std::function<void ()(void)>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void *std::__split_buffer<std::function<void ()(otDeviceRole)>>::~__split_buffer(void *a1)
{
  uint64_t result = (void *)*a1;
  if (!*a1) {
    return a1;
  }
  if ((uint64_t)(a1[3] - (void)result) >= 0)
  {
    operator delete(result);
    return a1;
  }

  __break(0x550Cu);
  return result;
}

uint64_t std::__split_buffer<std::function<void ()(otDeviceRole)>>::__destruct_at_end[abi:ne180100]( uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  while (1)
  {
    uint64_t v4 = *(void *)(v3 + 16);
    if (v4 == a2) {
      break;
    }
    uint64_t v5 = *(void *)(v3 + 32);
    *(void *)(v3 + 16)  = v4 - 32;
    uint64_t result = std::allocator_traits<std::allocator<otbr::OnceCallback<void ()(otbrError)>>>::destroy[abi:ne180100]<otbr::OnceCallback<void ()(otbrError)>,void>( v5,  (void *)(v4 - 32));
  }

  return result;
}

void *std::__function::__value_func<void ()(otError,std::vector<otActiveScanResult> const&)>::swap[abi:ne180100]( void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3]  = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3]  = 0LL;
        v3[3]  = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3]  = a2[3];
      }

      a2[3]  = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3]  = v3[3];
      v3[3]  = v3;
    }

    else
    {
      result[3]  = v5;
      a2[3]  = v4;
    }
  }

  return result;
}

void sub_10037D8D0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<void ()(otError,std::vector<otEnergyScanResult> const&)>::swap[abi:ne180100]( void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3]  = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3]  = 0LL;
        v3[3]  = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3]  = a2[3];
      }

      a2[3]  = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3]  = v3[3];
      v3[3]  = v3;
    }

    else
    {
      result[3]  = v5;
      a2[3]  = v4;
    }
  }

  return result;
}

void sub_10037DA44(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::uniform_int_distribution<int>::operator()<std::random_device>( uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result = a3[1];
  int v4 = result - *a3;
  if ((_DWORD)result != *a3)
  {
    unsigned int v5 = v4 + 1;
    if (v4 == -1)
    {
      std::__independent_bits_engine<std::random_device,unsigned int>::__independent_bits_engine( (uint64_t)v11,  a2,  0x20uLL);
      std::random_device::result_type v10 = std::random_device::operator()(v11[0]);
      return v12 & v10;
    }

    else
    {
      uint64_t v7 = __clz(v5);
      uint64_t v8 = 31LL;
      if (((v5 << v7) & 0x7FFFFFFF) != 0) {
        uint64_t v8 = 32LL;
      }
      std::__independent_bits_engine<std::random_device,unsigned int>::__independent_bits_engine( (uint64_t)v11,  a2,  v8 - v7);
      do
        std::random_device::result_type v9 = std::random_device::operator()(v11[0]);
      while ((v12 & v9) >= v5);
      return *a3 + (v12 & v9);
    }
  }

  return result;
}

uint64_t std::__independent_bits_engine<std::random_device,unsigned int>::__independent_bits_engine( uint64_t result, uint64_t a2, unint64_t a3)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 8)  = a3;
  if ((a3 & 0x1F) != 0) {
    unint64_t v3 = (a3 >> 5) + 1;
  }
  else {
    unint64_t v3 = a3 >> 5;
  }
  unint64_t v4 = a3 / v3;
  *(void *)(result + 16)  = a3 / v3;
  *(void *)(result + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v3;
  *(_DWORD *)(result + 4ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 0;
  if (v3 < a3 % v3) {
    goto LABEL_15;
  }
  unsigned int v5 = 0;
  *(void *)(result + 3ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = v3 - a3 % v3;
  *(_DWORD *)(result + 4ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  if (v4 <= 0x1E && v3 > a3) {
    goto LABEL_11;
  }
  if (v4 > 0x20)
  {
LABEL_15:
    __break(0x5515u);
    return result;
  }

  unsigned int v5 = 0xFFFFFFFF >> (32 - v4);
LABEL_11:
  if (v4 >= 0x1F) {
    unsigned int v7 = -1;
  }
  else {
    unsigned int v7 = 0xFFFFFFFF >> ~(_BYTE)v4;
  }
  *(_DWORD *)(result + 48)  = v5;
  *(_DWORD *)(result + 5ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = v7;
  return result;
}

uint64_t std::vector<otActiveScanResult>::__push_back_slow_path<otActiveScanResult const&>( uint64_t *a1, _OWORD *a2)
{
  uint64_t v2 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 2);
  unint64_t v3 = v2 + 1;
  if (v2 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }

  if (v3 > 0x444444444444444LL) {
    goto LABEL_10;
  }
  if (0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 2) > v3) {
    unint64_t v3 = 0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 2);
  }
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - *a1) >> 2) >= 0x222222222222222LL) {
    unint64_t v6 = 0x444444444444444LL;
  }
  else {
    unint64_t v6 = v3;
  }
  std::__split_buffer<otActiveScanResult>::__split_buffer(v13, v6, v2, (uint64_t)(a1 + 2));
  unsigned int v7 = v14;
  __int128 v9 = a2[1];
  __int128 v8 = a2[2];
  __int128 v10 = *(_OWORD *)((char *)a2 + 44);
  _OWORD *v14 = *a2;
  v7[1]  = v9;
  *(_OWORD *)((char *)v7 + 4ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v10;
  void v7[2] = v8;
  __int128 v14 = (_OWORD *)((char *)v7 + 60);
  std::vector<otActiveScanResult>::__swap_out_circular_buffer(a1, v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<otActiveScanResult>::~__split_buffer(v13);
  return v11;
}

void sub_10037DC40(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *std::vector<otActiveScanResult>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v8 = a2[1];
  }

  else
  {
    do
    {
      __int128 v5 = *(_OWORD *)(v3 - 60);
      __int128 v6 = *(_OWORD *)(v3 - 44);
      __int128 v7 = *(_OWORD *)(v3 - 28);
      uint64_t v8 = v4 - 60;
      *(_OWORD *)(v4 - 16)  = *(_OWORD *)(v3 - 16);
      *(_OWORD *)(v4 - 28)  = v7;
      *(_OWORD *)(v4 - 4ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v6;
      *(_OWORD *)(v4 - 6ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = v5;
      v4 -= 60LL;
      v3 -= 60LL;
    }

    while (v3 != v2);
  }

  a2[1]  = v8;
  uint64_t v9 = *result;
  *uint64_t result = v8;
  a2[1]  = v9;
  uint64_t v10 = result[1];
  result[1]  = a2[2];
  a2[2]  = v10;
  uint64_t v11 = result[2];
  result[2]  = a2[3];
  a2[3]  = v11;
  *a2  = a2[1];
  return result;
}

void *std::__split_buffer<otActiveScanResult>::__split_buffer( void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[3]  = 0LL;
  a1[4]  = a4;
  if (a2) {
    __int128 v7 = (char *)std::allocator<otActiveScanResult>::allocate[abi:ne180100](a4, a2);
  }
  else {
    __int128 v7 = 0LL;
  }
  uint64_t v8 = &v7[60 * a3];
  *a1  = v7;
  a1[1]  = v8;
  a1[2]  = v8;
  a1[3]  = &v7[60 * a2];
  return a1;
}

void *std::allocator<otActiveScanResult>::allocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x444444444444445LL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(60 * a2);
}

void *std::__split_buffer<otActiveScanResult>::~__split_buffer(void *a1)
{
  uint64_t result = (void *)*a1;
  if (!*a1) {
    return a1;
  }
  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a1[3] - (void)result) >> 2) < 0x444444444444445LL)
  {
    operator delete(result);
    return a1;
  }

  __break(0x550Cu);
  return result;
}

uint64_t std::__split_buffer<otActiveScanResult>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2) {
    *(void *)(result + 16)  = (v2 - a2 - 60) % 0x3CuLL + a2;
  }
  return result;
}

uint64_t std::vector<otEnergyScanResult>::__construct_one_at_end[abi:ne180100]<otEnergyScanResult const&>( uint64_t result, _WORD *a2)
{
  uint64_t v2 = *(_WORD **)(result + 8);
  _WORD *v2 = *a2;
  *(void *)(result + 8)  = v2 + 1;
  return result;
}

uint64_t std::vector<otEnergyScanResult>::__push_back_slow_path<otEnergyScanResult const&>( uint64_t *a1, _WORD *a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 1;
  unint64_t v3 = v2 + 1;
  if (v2 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }

  if ((v3 & 0x8000000000000000LL) != 0) {
    goto LABEL_10;
  }
  unint64_t v6 = a1[2] - *a1;
  if (v6 > v3) {
    unint64_t v3 = a1[2] - *a1;
  }
  if (v6 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v7 = v3;
  }
  std::__split_buffer<otEnergyScanResult>::__split_buffer(v10, v7, v2, (uint64_t)(a1 + 2));
  *v11++  = *a2;
  std::vector<otEnergyScanResult>::__swap_out_circular_buffer(a1, v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<otEnergyScanResult>::~__split_buffer(v10);
  return v8;
}

void sub_10037DECC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *std::vector<otEnergyScanResult>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  while (v3 != v2)
  {
    __int16 v5 = *(_WORD *)(v3 - 2);
    v3 -= 2LL;
    *(_WORD *)(v4 - ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = v5;
    v4 -= 2LL;
  }

  a2[1]  = v4;
  uint64_t v6 = *result;
  *uint64_t result = v4;
  a2[1]  = v6;
  uint64_t v7 = result[1];
  result[1]  = a2[2];
  a2[2]  = v7;
  uint64_t v8 = result[2];
  result[2]  = a2[3];
  a2[3]  = v8;
  *a2  = a2[1];
  return result;
}

void *std::__split_buffer<otEnergyScanResult>::__split_buffer( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[3]  = 0LL;
  a1[4]  = a4;
  if (a2) {
    uint64_t v7 = (char *)std::allocator<otEnergyScanResult>::allocate[abi:ne180100](a4, a2);
  }
  else {
    uint64_t v7 = 0LL;
  }
  uint64_t v8 = &v7[2 * a3];
  *a1  = v7;
  a1[1]  = v8;
  a1[2]  = v8;
  a1[3]  = &v7[2 * a2];
  return a1;
}

void *std::allocator<otEnergyScanResult>::allocate[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a2);
}

void *std::__split_buffer<otEnergyScanResult>::~__split_buffer(void *a1)
{
  uint64_t result = (void *)*a1;
  if (!*a1) {
    return a1;
  }
  if ((uint64_t)(a1[3] - (void)result) >= 0)
  {
    operator delete(result);
    return a1;
  }

  __break(0x550Cu);
  return result;
}

uint64_t std::__split_buffer<otEnergyScanResult>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2) {
    *(void *)(result + 16)  = v2 + ((a2 - v2 + 1) & 0xFFFFFFFFFFFFFFFELL);
  }
  return result;
}

void *std::__function::__value_func<void ()(otError,long long)>::swap[abi:ne180100]( void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    __int16 v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3]  = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3]  = 0LL;
        v3[3]  = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3]  = a2[3];
      }

      a2[3]  = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3]  = v3[3];
      v3[3]  = v3;
    }

    else
    {
      result[3]  = v5;
      a2[3]  = v4;
    }
  }

  return result;
}

void sub_10037E17C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<void ()(otError)>::swap[abi:ne180100](void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    __int16 v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3]  = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3]  = 0LL;
        v3[3]  = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3]  = a2[3];
      }

      a2[3]  = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3]  = v3[3];
      v3[3]  = v3;
    }

    else
    {
      result[3]  = v5;
      a2[3]  = v4;
    }
  }

  return result;
}

void sub_10037E2F0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::vector<std::function<void ()(otOperationalDatasetTlvs const&)>>::__construct_one_at_end[abi:ne180100]<std::function<void ()(otOperationalDatasetTlvs const&)>>( uint64_t a1, uint64_t a2)
{
  uint64_t result = std::__function::__value_func<void ()(otOperationalDatasetTlvs const&)>::__value_func[abi:ne180100]( *(void *)(a1 + 8),  a2);
  *(void *)(a1 + 8)  = result + 32;
  return result;
}

uint64_t std::vector<std::function<void ()(otOperationalDatasetTlvs const&)>>::__push_back_slow_path<std::function<void ()(otOperationalDatasetTlvs const&)>>( uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 5;
  unint64_t v3 = v2 + 1;
  if (v2 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }

  if (v3 >> 59) {
    goto LABEL_10;
  }
  unint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v3) {
    unint64_t v3 = v6 >> 4;
  }
  if (v6 >= 0x7FFFFFFFFFFFFFE0LL) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  std::__split_buffer<std::function<void ()(void)>>::__split_buffer(v10, v7, v2, (uint64_t)(a1 + 2));
  std::__function::__value_func<void ()(otOperationalDatasetTlvs const&)>::__value_func[abi:ne180100](v11, a2);
  v11 += 32LL;
  std::vector<std::function<void ()(otOperationalDatasetTlvs const&)>>::__swap_out_circular_buffer(a1, v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<std::function<void ()(otOperationalDatasetTlvs const&)>>::~__split_buffer(v10);
  return v8;
}

void sub_10037E3DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t std::__function::__value_func<void ()(otOperationalDatasetTlvs const&)>::__value_func[abi:ne180100]( uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v4;
  }

  else
  {
    unint64_t v3 = (void *)(a1 + 24);
  }

  void *v3 = 0LL;
  return a1;
}

uint64_t std::vector<std::function<void ()(otOperationalDatasetTlvs const&)>>::__swap_out_circular_buffer( uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::function<void ()(otOperationalDatasetTlvs const&)>>,std::reverse_iterator<std::function<void ()(otOperationalDatasetTlvs const&)>*>,std::reverse_iterator<std::function<void ()(otOperationalDatasetTlvs const&)>*>,std::reverse_iterator<std::function<void ()(otOperationalDatasetTlvs const&)>*>>( (uint64_t)(a1 + 2),  a1[1],  a1[1],  *a1,  *a1,  a2[1],  a2[1]);
  a2[1]  = v5;
  uint64_t v6 = *a1;
  *a1  = v5;
  a2[1]  = v6;
  uint64_t v7 = a1[1];
  a1[1]  = a2[2];
  a2[2]  = v7;
  uint64_t v8 = a1[2];
  a1[2]  = a2[3];
  a2[3]  = v8;
  *a2  = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::function<void ()(otOperationalDatasetTlvs const&)>>,std::reverse_iterator<std::function<void ()(otOperationalDatasetTlvs const&)>*>,std::reverse_iterator<std::function<void ()(otOperationalDatasetTlvs const&)>*>,std::reverse_iterator<std::function<void ()(otOperationalDatasetTlvs const&)>*>>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v15 = a6;
  *((void *)&v15 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = a7;
  __int128 v14 = v15;
  v12[0]  = a1;
  v12[1]  = &v14;
  void v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }

  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 32LL;
      std::__function::__value_func<void ()(otOperationalDatasetTlvs const&)>::__value_func[abi:ne180100](v7 - 32, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 32LL;
      *((void *)&v15 + 1) -= 32LL;
    }

    while (v9 != a5);
    uint64_t v10 = v15;
  }

  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(otOperationalDatasetTlvs const&)>>,std::reverse_iterator<std::function<void ()(otOperationalDatasetTlvs const&)>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(otOperationalDatasetTlvs const&)>>,std::reverse_iterator<std::function<void ()(otOperationalDatasetTlvs const&)>*>>>::~__exception_guard_exceptions[abi:ne180100]( uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(void)>>,std::reverse_iterator<std::function<void ()(void)>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void *std::__split_buffer<std::function<void ()(otOperationalDatasetTlvs const&)>>::~__split_buffer( void *a1)
{
  uint64_t result = (void *)*a1;
  if (!*a1) {
    return a1;
  }
  if ((uint64_t)(a1[3] - (void)result) >= 0)
  {
    operator delete(result);
    return a1;
  }

  __break(0x550Cu);
  return result;
}

uint64_t std::__split_buffer<std::function<void ()(otOperationalDatasetTlvs const&)>>::__destruct_at_end[abi:ne180100]( uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  while (1)
  {
    uint64_t v4 = *(void *)(v3 + 16);
    if (v4 == a2) {
      break;
    }
    uint64_t v5 = *(void *)(v3 + 32);
    *(void *)(v3 + 16)  = v4 - 32;
    uint64_t result = std::allocator_traits<std::allocator<otbr::OnceCallback<void ()(otbrError)>>>::destroy[abi:ne180100]<otbr::OnceCallback<void ()(otbrError)>,void>( v5,  (void *)(v4 - 32));
  }

  return result;
}

std::string *otbr::StringUtils::EqualCaseInsensitive(std::string *a1, std::string *a2)
{
  uint64_t result = otbr::StringUtils::ToLowercase(a2, &__p);
  size  = __s1.__r_.__value_.__s.__size_;
  if ((__s1.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v5 = __s1.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v5 = __s1.__r_.__value_.__l.__size_;
  }
  std::string::size_type v6 = __p.__r_.__value_.__s.__size_;
  int v7 = (char)__p.__r_.__value_.__s.__size_;
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type v6 = __p.__r_.__value_.__l.__size_;
  }
  if (v5 != v6)
  {
    BOOL v12 = 0LL;
    goto LABEL_27;
  }

  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p  = &__p;
  }
  else {
    p_p  = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((char)__s1.__r_.__value_.__s.__size_ < 0)
  {
    BOOL v12 = memcmp(__s1.__r_.__value_.__l.__data_, p_p, __s1.__r_.__value_.__l.__size_) == 0;
LABEL_23:
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_24;
    }
LABEL_27:
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((__s1.__r_.__value_.__s.__size_ & 0x80) != 0) {
      goto LABEL_28;
    }
    return (std::string *)v12;
  }

  if (!__s1.__r_.__value_.__s.__size_)
  {
    BOOL v12 = 1LL;
LABEL_24:
    if ((size & 0x80) != 0) {
LABEL_28:
    }
      operator delete(__s1.__r_.__value_.__l.__data_);
    return (std::string *)v12;
  }

  unint64_t v9 = 0LL;
  while (v9 <= 0x17)
  {
    int v10 = __s1.__r_.__value_.__s.__data_[v9];
    int v11 = p_p->__r_.__value_.__s.__data_[v9];
    BOOL v12 = v10 == v11;
    ++v9;
    if (v10 != v11 || __s1.__r_.__value_.__s.__size_ == v9) {
      goto LABEL_23;
    }
  }

  __break(1u);
  return result;
}

void sub_10037E730( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *otbr::StringUtils::ToLowercase@<X0>(std::string *__str@<X0>, std::string *a2@<X8>)
{
  uint64_t result = std::string::basic_string(a2, __str);
  size  = a2->__r_.__value_.__s.__size_;
  int v5 = (char)size;
  std::string::size_type v6 = (char *)a2 + size;
  if (v5 >= 0) {
    int v7 = v6;
  }
  else {
    int v7 = (char *)(a2->__r_.__value_.__r.__words[0] + a2->__r_.__value_.__l.__size_);
  }
  if (v5 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  while (v8 != (std::string *)v7)
  {
    uint64_t result = (std::string *)__tolower(v8->__r_.__value_.__s.__data_[0]);
    v8->__r_.__value_.__s.__data_[0]  = (char)result;
    uint64_t v8 = (std::string *)((char *)v8 + 1);
  }

  return result;
}

void sub_10037E7B4(_Unwind_Exception *exception_object)
{
}

void *otbr::MainloopManager::AddMainloopProcessor( otbr::MainloopManager *this, otbr::MainloopProcessor *a2)
{
  uint64_t v3 = a2;
  if (!a2) {
    otbr::MainloopManager::AddMainloopProcessor();
  }
  return std::list<otbr::MainloopProcessor *>::emplace_back<otbr::MainloopProcessor *&>((uint64_t *)this, &v3);
}

void *std::list<otbr::MainloopProcessor *>::emplace_back<otbr::MainloopProcessor *&>( uint64_t *a1, void *a2)
{
  uint64_t result = std::__list_imp<otbr::MainloopProcessor *>::__create_node[abi:ne180100]<otbr::MainloopProcessor *&>( (uint64_t)a1,  0LL,  0LL,  a2);
  uint64_t v4 = *a1;
  *uint64_t result = *a1;
  result[1]  = a1;
  *(void *)(v4 + 8)  = result;
  *a1  = (uint64_t)result;
  uint64_t v5 = a1[2];
  BOOL v6 = __CFADD__(v5, 1LL);
  uint64_t v7 = v5 + 1;
  if (v6)
  {
    __break(0x5500u);
  }

  else
  {
    a1[2]  = v7;
    result += 2;
  }

  return result;
}

void otbr::MainloopManager::RemoveMainloopProcessor( otbr::MainloopManager *this, otbr::MainloopProcessor *a2)
{
  uint64_t v2 = a2;
  std::list<otbr::MainloopProcessor *>::remove((uint64_t)this, &v2);
}

void std::list<otbr::MainloopProcessor *>::remove(uint64_t a1, void *a2)
{
  v9[0]  = (uint64_t)v9;
  v9[1]  = (uint64_t)v9;
  uint64_t v9[2] = 0LL;
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2 != (void *)a1)
  {
    do
    {
      uint64_t v5 = v2[2];
      BOOL v6 = v2 + 1;
      if (v5 == *a2)
      {
        uint64_t v7 = (void *)*v6;
        uint64_t v8 = (void *)a1;
        if (v7 != (void *)a1)
        {
          uint64_t v8 = v7;
          while (v8[2] == v5)
          {
            uint64_t v8 = (void *)v8[1];
            if (v8 == (void *)a1)
            {
              uint64_t v8 = (void *)a1;
              break;
            }
          }
        }

        std::list<otbr::MainloopProcessor *>::splice((uint64_t)v9, v9, a1, v2, v8);
        if (v8 == (void *)a1) {
          break;
        }
        BOOL v6 = v8 + 1;
      }

      uint64_t v2 = (void *)*v6;
    }

    while (*v6 != a1);
  }

  std::__list_imp<otbr::MainloopProcessor *>::clear(v9);
}

void sub_10037E934(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t otbr::MainloopManager::Update(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (v2 != result)
  {
    uint64_t v4 = result;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 16) + 16LL))(*(void *)(v2 + 16), a2);
      uint64_t v2 = *(void *)(v2 + 8);
    }

    while (v2 != v4);
  }

  return result;
}

uint64_t otbr::MainloopManager::Process(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (v2 != result)
  {
    uint64_t v4 = result;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 16) + 24LL))(*(void *)(v2 + 16), a2);
      uint64_t v2 = *(void *)(v2 + 8);
    }

    while (v2 != v4);
  }

  return result;
}

void *std::__list_imp<otbr::MainloopProcessor *>::__create_node[abi:ne180100]<otbr::MainloopProcessor *&>( uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v10 = 1LL;
  uint64_t v7 = operator new(0x18uLL);
  void *v7 = a2;
  v7[1]  = a3;
  void v7[2] = *a4;
  uint64_t v11 = 0LL;
  std::__allocation_guard<std::allocator<std::__list_node<otbr::MainloopProcessor *,void *>>>::__destroy[abi:ne180100]((uint64_t)v9);
  return v7;
}

void std::__allocation_guard<std::allocator<std::__list_node<otbr::MainloopProcessor *,void *>>>::__destroy[abi:ne180100]( uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    if (*(void *)(a1 + 8) >= 0xAAAAAAAAAAAAAABuLL) {
      __break(0x550Cu);
    }
    else {
      operator delete(v2);
    }
  }

uint64_t std::list<otbr::MainloopProcessor *>::splice( uint64_t result, uint64_t *a2, uint64_t a3, void *a4, void *a5)
{
  if (a4 != a5)
  {
    uint64_t v5 = (void *)*a5;
    if (result != a3)
    {
      if (v5 != a4)
      {
        uint64_t v6 = 0LL;
        uint64_t v7 = a4;
        while (1)
        {
          uint64_t v8 = v6 + 1;
          if (__OFADD__(v6, 1LL)) {
            goto LABEL_16;
          }
          uint64_t v7 = (void *)v7[1];
          ++v6;
          if (v7 == v5) {
            goto LABEL_9;
          }
        }
      }

      uint64_t v8 = 0LL;
LABEL_9:
      BOOL v9 = __OFADD__(v8, 1LL);
      unint64_t v10 = v8 + 1;
      if (v9) {
        goto LABEL_16;
      }
      unint64_t v11 = *(void *)(a3 + 16);
      BOOL v12 = v11 >= v10;
      unint64_t v13 = v11 - v10;
      if (!v12) {
        goto LABEL_17;
      }
      *(void *)(a3 + 16)  = v13;
      uint64_t v14 = *(void *)(result + 16);
      BOOL v12 = __CFADD__(v14, v10);
      uint64_t v15 = v14 + v10;
      if (v12)
      {
LABEL_16:
        __break(0x5500u);
LABEL_17:
        __break(0x5515u);
        return result;
      }

      *(void *)(result + 16)  = v15;
    }

    uint64_t v16 = *a4;
    *(void *)(v16 + 8)  = v5[1];
    *(void *)v5[1]  = v16;
    uint64_t v17 = *a2;
    *(void *)(v17 + 8)  = a4;
    *a4  = v17;
    *a2  = (uint64_t)v5;
    v5[1]  = a2;
  }

  return result;
}

void std::__list_imp<otbr::MainloopProcessor *>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    uint64_t v2 = (uint64_t *)a1[1];
    uint64_t v4 = *v2;
    *(void *)(v4 + 8)  = *(void *)(*a1 + 8);
    **(void **)(v3 + 8)  = v4;
    a1[2]  = 0LL;
    while (v2 != a1)
    {
      uint64_t v5 = (uint64_t *)v2[1];
      std::__list_imp<otbr::MainloopProcessor *>::__delete_node[abi:ne180100]<>((int)a1, v2);
      uint64_t v2 = v5;
    }
  }

void std::__list_imp<otbr::MainloopProcessor *>::__delete_node[abi:ne180100]<>(int a1, void *__p)
{
}

otbr::MainloopProcessor *otbr::MainloopProcessor::MainloopProcessor(otbr::MainloopProcessor *this)
{
  *(void *)this  = off_100448590;
  Instance  = otbr::MainloopManager::GetInstance(this);
  otbr::MainloopManager::AddMainloopProcessor((otbr::MainloopManager *)Instance, this);
  return this;
}

uint64_t *otbr::MainloopManager::GetInstance(otbr::MainloopManager *this)
{
  if ((v1 & 1) == 0
  {
    otbr::MainloopManager::GetInstance(void)::sMainloopManager  = (uint64_t)&otbr::MainloopManager::GetInstance(void)::sMainloopManager;
    *(void *)algn_10045D488  = &otbr::MainloopManager::GetInstance(void)::sMainloopManager;
    qword_10045D490  = 0LL;
    __cxa_atexit( (void (*)(void *))otbr::MainloopManager::~MainloopManager,  &otbr::MainloopManager::GetInstance(void)::sMainloopManager,  (void *)&_mh_execute_header);
  }

  return &otbr::MainloopManager::GetInstance(void)::sMainloopManager;
}

void otbr::MainloopProcessor::~MainloopProcessor(otbr::MainloopProcessor *this)
{
  *(void *)this  = off_100448590;
  Instance  = otbr::MainloopManager::GetInstance(this);
  otbr::MainloopManager::RemoveMainloopProcessor((otbr::MainloopManager *)Instance, this);
}

void otbr::MainloopManager::~MainloopManager(otbr::MainloopManager *this)
{
}

uint64_t otbr::Utils::Hex2Bytes(otbr::Utils *this, char *a2, unsigned __int8 *a3)
{
  unsigned int v3 = a3;
  uint64_t v5 = this;
  uint64_t result = strlen((const char *)this);
  if (result == -1)
  {
    __break(0x5500u);
  }

  else if (v3 >= (unint64_t)(result + 1) >> 1)
  {
    LODWORD(vot::ThreadTlv::SetType(this, 7) = (_DWORD)a2;
    if (result >= 1)
    {
      int v8 = 0;
      BOOL v9 = (otbr::Utils *)((char *)v5 + result);
      int v10 = result & 1;
      uint64_t v7 = a2;
      do
      {
        int v11 = *(unsigned __int8 *)v5;
        if ((v11 - 65) > 5)
        {
          if ((v11 - 97) > 5)
          {
            unsigned int v12 = v11 - 48;
            if (v12 > 9) {
              return 0xFFFFFFFFLL;
            }
          }

          else
          {
            unsigned int v12 = v11 - 87;
          }
        }

        else
        {
          unsigned int v12 = v11 - 55;
        }

        int v13 = v12 | v8;
        if (++v10 >= 2u)
        {
          int v10 = 0;
          int v8 = 0;
          *v7++  = v13;
        }

        else
        {
          int v8 = 16 * v13;
        }

        uint64_t v5 = (otbr::Utils *)((char *)v5 + 1);
      }

      while (v5 < v9);
    }

    return ((_DWORD)v7 - (_DWORD)a2);
  }

  else
  {
    return 0xFFFFFFFFLL;
  }

  return result;
}

size_t otbr::Utils::Bytes2Hex(otbr::Utils *this, const unsigned __int8 *a2, char *__s, char *a4)
{
  *__s  = 0;
  if ((_DWORD)a2)
  {
    uint64_t v6 = a2;
    do
    {
      int v7 = *(unsigned __int8 *)this;
      this  = (otbr::Utils *)((char *)this + 1);
      snprintf(__str, 3uLL, "%02X", v7);
      strcat(__s, __str);
      --v6;
    }

    while (v6);
  }

  return strlen(__s);
}

void otbr::Utils::Bytes2Hex( otbr::Utils *this@<X0>, const unsigned __int8 *a2@<X1>, char *a3@<X3>, void *a4@<X8>)
{
  uint64_t v5 = (char *)((const unsigned __int8 *)&__dst - a2);
  *a4  = 0LL;
  a4[1]  = 0LL;
  a4[2]  = 0LL;
  size_t v6 = otbr::Utils::Bytes2Hex(this, a2, v5, a3);
  std::string::basic_string[abi:ne180100](&__dst, v5, v6);
  std::string::operator=[abi:ne180100]((uint64_t)a4, &__dst);
  if (v8 < 0) {
    operator delete((void *)__dst);
  }
}

size_t otbr::Utils::Long2Hex(unint64_t this, char *a2, char *a3)
{
  unsigned int v5 = 0;
  *a2  = 0;
  do
  {
    snprintf(__str, 3uLL, "%02X", this);
    strcat(a2, __str);
    this >>= 8;
  }

  while (v5++ < 7);
  return strlen(a2);
}

otbr::BorderAgent *otbr::BorderAgent::BorderAgent( otbr::BorderAgent *this, otbr::Ncp::ControllerOpenThread *a2)
{
  uint64_t v4 = otbr::MainloopProcessor::MainloopProcessor(this);
  *(void *)uint64_t v4 = off_1004485D0;
  *((void *)v4 + ot::NetworkData::NetworkDataTlv::SetType(this, 1) = a2;
  v9[0]  = off_100448618;
  v9[1]  = v4;
  int v10 = v9;
  unsigned int v5 = otbr::Mdns::Publisher::Create((uint64_t)v9);
  size_t v6 = v10;
  if (v10 == v9)
  {
    uint64_t v7 = 4LL;
    size_t v6 = v9;
    goto LABEL_5;
  }

  if (v10)
  {
    uint64_t v7 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }

  *((void *)this + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = v5;
  otbr::TrelDnssd::TrelDnssd::TrelDnssd((otbr::BorderAgent *)((char *)this + 24), a2, (otbr::Mdns::Publisher *)v5);
  *((void *)this + 3ot::NetworkDiagnostic::Tlv::SetType(this, 9) = 0LL;
  *((void *)this + 4ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = 0LL;
  *((void *)this + 4ot::NetworkData::NetworkDataTlv::SetType(this, 1) = 0LL;
  return this;
}

void sub_10037EFF8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
}

void otbr::BorderAgent::Init(otbr::BorderAgent *this)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 1);
  v6[0]  = off_1004486A8;
  v6[1]  = this;
  uint64_t v7 = v6;
  otbr::Ncp::ControllerOpenThread::AddThreadStateChangedCallback(v2, (uint64_t)v6);
  unsigned int v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    unsigned int v3 = v6;
  }

  else
  {
    if (!v7) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  otbr::BorderAgent::BaseServiceInstanceName((otbr::Ncp::ControllerOpenThread **)this, &__p);
  std::string::operator=[abi:ne180100]((uint64_t)this + 312, (__int128 *)&__p);
  otbr::BorderAgent::Start(this);
}

void sub_10037F110( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v17 = a15;
  if (a15 == v15)
  {
    uint64_t v18 = 4LL;
    uint64_t v17 = &a12;
  }

  else
  {
    if (!a15) {
      goto LABEL_6;
    }
    uint64_t v18 = 5LL;
  }

  (*(void (**)(void))(*(void *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

std::stringbuf::string_type *otbr::BorderAgent::BaseServiceInstanceName@<X0>( otbr::Ncp::ControllerOpenThread **this@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  Instance  = otbr::Ncp::ControllerOpenThread::GetInstance(this[1]);
  ExtendedAddress  = otLinkGetExtendedAddress(Instance);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v15);
  unsigned int v5 = std::operator<<[abi:ne180100]<std::char_traits<char>>(&v16, "Apple BorderRouter");
  uint64_t result = (std::stringbuf::string_type *)std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, " #");
  uint64_t v7 = v16;
  uint64_t v8 = *(void *)(v16 - 24);
  *(_DWORD *)((char *)&v16 + v8 + 8) |= 0x4000u;
  uint64_t v9 = *(void *)(v7 - 24);
  *(_DWORD *)((char *)&v16 + v9 + 8)  = *(_DWORD *)((_BYTE *)&v16 + v9 + 8) & 0xFFFFFFB5 | 8;
  char v14 = 48;
  uint64_t result = (std::stringbuf::string_type *)std::operator<<[abi:ne180100]<std::char_traits<char>>(&v16, &v14);
  uint64_t v10 = *(void *)(v16 - 24);
  *(std::streambuf::char_type **)((char *)&v17.__binp_ + v1ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = (std::streambuf::char_type *)2;
  uint64_t result = (std::stringbuf::string_type *)std::ostream::operator<<(&v16, *(unsigned __int8 *)(ExtendedAddress + 6));
  uint64_t v11 = *(void *)(v16 - 24);
  if ((unint64_t)(v11 - 233) < 0xFFFFFFFFFFFFFEEFLL {
    || (*(std::streambuf::char_type **)((char *)&v17.__binp_ + vot::Mle::Tlv::SetType(this, 11) = (std::streambuf::char_type *)2,
  }
        std::ostream::operator<<(&v16, *(unsigned __int8 *)(ExtendedAddress + 7)),
        uint64_t result = std::stringbuf::str(a2, &v17),
        v12 > 0x110))
  {
LABEL_9:
    __break(1u);
  }

  else
  {
    uint64_t v16 = v13;
    std::streambuf::~streambuf(&v17);
    return (std::stringbuf::string_type *)std::ios::~ios(&v18);
  }

  return result;
}

void sub_10037F2EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void otbr::BorderAgent::Start(otbr::BorderAgent *this)
{
  int v1 = (***((uint64_t (****)(void))this + 2))(*((void *)this + 2));
  if (v1) {
    unsigned int v2 = 4;
  }
  else {
    unsigned int v2 = 6;
  }
  char v3 = otbrErrorString(v1);
  otbrLog(v2, "BA", "Start Thread Border Agent: %s", v4, v5, v6, v7, v8, v3);
}

uint64_t otbr::BorderAgent::Stop( otbr::BorderAgent *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 8LL))(*((void *)this + 2));
}

void otbr::BorderAgent::UnpublishMeshCopService( otbr::BorderAgent *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = (uint64_t *)((char *)this + 312);
  LOBYTE(v1ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = (_BYTE)this + 56;
  otbrLog(6u, "BA", "Unpublish meshcop service %s.%s.local", a4, a5, a6, a7, a8, v10);
  uint64_t v11 = *((void *)this + 2);
  std::string::basic_string[abi:ne180100]<0>(__p, "_meshcop._udp");
  v16[0]  = off_1004487B8;
  v16[1]  = this;
  char v17 = v16;
  (*(void (**)(uint64_t, uint64_t *, void **, void *))(*(void *)v11 + 40LL))(v11, v9, __p, v16);
  uint64_t v12 = v17;
  if (v17 == v16)
  {
    uint64_t v13 = 4LL;
    uint64_t v12 = v16;
  }

  else
  {
    if (!v17) {
      goto LABEL_8;
    }
    uint64_t v13 = 5LL;
  }

  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_8:
  if (v15 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10037F4C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  uint64_t v22 = a20;
  if (a20 == v20)
  {
    uint64_t v23 = 4LL;
    uint64_t v22 = &a17;
  }

  else
  {
    if (!a20) {
      goto LABEL_6;
    }
    uint64_t v23 = 5LL;
  }

  (*(void (**)(void))(*(void *)v22 + 8 * v23))();
LABEL_6:
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void otbr::BorderAgent::~BorderAgent(otbr::BorderAgent *this)
{
  *(void *)this  = off_1004485D0;
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 96LL))(v2);
    *((void *)this + ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0LL;
  }

  std::__tree<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::__map_value_compare<std::string,std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>>>::~__tree((uint64_t)this + 280);
  char v3 = (void **)((char *)this + 232);
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__destroy_vector::operator()[abi:ne180100](&v3);
  otbr::TaskRunner::~TaskRunner((otbr::BorderAgent *)((char *)this + 40));
  otbr::MainloopProcessor::~MainloopProcessor(this);
}

{
  void *v1;
  otbr::BorderAgent::~BorderAgent(this);
  operator delete(v1);
}

void otbr::BorderAgent::HandleMdnsState( otbr::Ncp::ControllerOpenThread **a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a2 == 1)
  {
    otbr::BorderAgent::UpdateMeshCopService(a1);
    otbr::TrelDnssd::TrelDnssd::OnMdnsPublisherReady( (otbr::TrelDnssd::TrelDnssd *)(a1 + 3),  v10,  v11,  v12,  v13,  v14,  v15,  v16);
  }

  else
  {
    otbrLog(4u, "BA", "mDNS publisher not available!", a4, a5, a6, a7, a8, a9);
  }

void otbr::BorderAgent::UpdateMeshCopService(otbr::Ncp::ControllerOpenThread **this)
{
  if (otbr::BorderAgent::IsThreadStarted(this))
  {
    otbr::BorderAgent::BaseServiceInstanceName(this, &__p);
    std::string::operator=[abi:ne180100]((uint64_t)(this + 39), (__int128 *)&__p);
    else {
      (**(void (***)(otbr::Ncp::ControllerOpenThread *))this[2])(this[2]);
    }
  }

uint64_t otbr::BorderAgent::Update(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24LL))(result);
  }
  return result;
}

uint64_t otbr::BorderAgent::Process(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 32LL))(result);
  }
  return result;
}

uint64_t otbr::GetStateBitmap(uint64_t a1)
{
  DeviceRole  = otThreadGetDeviceRole(a1);
  if (DeviceRole)
  {
    if (DeviceRole == 1)
    {
      DeviceRole  = 0;
      int v3 = 41;
    }

    else
    {
      else {
        int v3 = 49;
      }
      DeviceRole  = (otBackboneRouterGetState(a1) == 2) << 8;
    }
  }

  else
  {
    int v3 = 33;
  }

  return v3 | DeviceRole;
}

uint64_t otbr::AppendBbrTxtEntries(uint64_t a1, char a2, uint64_t *a3)
{
  if (a2 < 0)
  {
    __int16 v13 = -16400;
    otBackboneRouterGetConfig(a1, (uint64_t)&v14);
    uint64_t v11 = 1LL;
    uint64_t v12 = (const unsigned __int8 *)&v15;
    unint64_t v5 = a3[1];
    if (v5 >= a3[2])
    {
      unint64_t v6 = std::vector<otbr::Mdns::Publisher::TxtEntry>::__emplace_back_slow_path<char const(&)[3],unsigned char *,unsigned long>( a3,  "sq",  &v12,  &v11);
    }

    else
    {
      std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_one_at_end[abi:ne180100]<char const(&)[3],unsigned char *,unsigned long>( (uint64_t)a3,  "sq",  &v12,  &v11);
      unint64_t v6 = v5 + 48;
    }

    a3[1]  = v6;
    uint64_t v12 = (const unsigned __int8 *)&v13;
    uint64_t v11 = 2LL;
    if (v6 >= a3[2])
    {
      uint64_t v7 = std::vector<otbr::Mdns::Publisher::TxtEntry>::__emplace_back_slow_path<char const(&)[3],unsigned char *,unsigned long>( a3,  "bb",  &v12,  &v11);
    }

    else
    {
      std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_one_at_end[abi:ne180100]<char const(&)[3],unsigned char *,unsigned long>( (uint64_t)a3,  "bb",  &v12,  &v11);
      uint64_t v7 = v6 + 48;
    }

    a3[1]  = v7;
  }

  otThreadGetDomainName(a1);
  uint64_t v14 = v8;
  unint64_t v9 = a3[1];
  if (v9 >= a3[2])
  {
    uint64_t result = std::vector<otbr::Mdns::Publisher::TxtEntry>::__emplace_back_slow_path<char const(&)[3],char const*>( a3,  "dn",  &v14);
  }

  else
  {
    std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_one_at_end[abi:ne180100]<char const(&)[3],char const*>( (uint64_t)a3,  "dn",  &v14);
    uint64_t result = v9 + 48;
  }

  a3[1]  = result;
  return result;
}

void otbr::AppendActiveTimestampTxtEntry(uint64_t a1, uint64_t *a2)
{
  Active  = otDatasetGetActive(a1, (uint64_t)&v15);
  if (Active)
  {
    char v4 = otThreadErrorToString(Active);
    otbrLog(4u, "BA", "Failed to get active dataset: %s", v5, v6, v7, v8, v9, v4);
  }

  else
  {
    __int16 v13 = (const unsigned __int8 *)&v14;
    unint64_t v14 = bswap64((2LL * v16) | (v15 << 16) | v17);
    uint64_t v12 = 8LL;
    unint64_t v10 = a2[1];
    if (v10 >= a2[2])
    {
      uint64_t v11 = std::vector<otbr::Mdns::Publisher::TxtEntry>::__emplace_back_slow_path<char const(&)[3],unsigned char *,unsigned long>( a2,  "at",  &v13,  &v12);
    }

    else
    {
      std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_one_at_end[abi:ne180100]<char const(&)[3],unsigned char *,unsigned long>( (uint64_t)a2,  "at",  &v13,  &v12);
      uint64_t v11 = v10 + 48;
    }

    a2[1]  = v11;
  }

void otbr::BorderAgent::PublishMeshCopService(otbr::BorderAgent *this)
{
  Instance  = otbr::Ncp::ControllerOpenThread::GetInstance(*((otbr::Ncp::ControllerOpenThread **)this + 1));
  otThreadGetExtendedPanId(Instance);
  char v4 = v3;
  ExtendedAddress  = (const unsigned __int8 *)otLinkGetExtendedAddress(Instance);
  otThreadGetNetworkName(Instance);
  uint64_t v46 = v6;
  otbr::Mdns::Publisher::TxtEntry::TxtEntry((otbr::Mdns::Publisher::TxtEntry *)&v48, "rv", "1");
  uint64_t v43 = 0LL;
  unint64_t v44 = 0LL;
  unint64_t v45 = 0LL;
  char v41 = 0;
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__vallocate[abi:ne180100](&v43, 1uLL);
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_at_end<otbr::Mdns::Publisher::TxtEntry const*,otbr::Mdns::Publisher::TxtEntry const*>( (uint64_t)&v43,  &v48,  &v50);
  int v40 = &v49;
  std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  LOBYTE(vot::ThreadTlv::SetType(this, 7) = (_BYTE)this + 56;
  otBorderAgentGetUdpPort(Instance);
  getDeviceName();
  otbrLog( 6u,  "BA",  "Publish meshcop service %s.%s.local. xa:0x%llx xp:%llx port:%d deviceName:%s",  v8,  v9,  v10,  v11,  v12,  v7);
  unint64_t v13 = v44;
  if (v44 >= v45)
  {
    unint64_t v14 = std::vector<otbr::Mdns::Publisher::TxtEntry>::__emplace_back_slow_path<char const(&)[3],char const(&)[11]>( &v43,  "vn",  "Apple Inc.");
  }

  else
  {
    std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_one_at_end[abi:ne180100]<char const(&)[3],char const(&)[11]>( (uint64_t)&v43,  "vn",  "Apple Inc.");
    unint64_t v14 = v13 + 48;
  }

  unint64_t v44 = v14;
  if (v14 >= v45)
  {
    unint64_t v15 = std::vector<otbr::Mdns::Publisher::TxtEntry>::__emplace_back_slow_path<char const(&)[3],char const(&)[11]>( &v43,  "mn",  "BorderRouter");
  }

  else
  {
    std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_one_at_end[abi:ne180100]<char const(&)[3],char const(&)[11]>( (uint64_t)&v43,  "mn",  "BorderRouter");
    unint64_t v15 = v14 + 48;
  }

  unint64_t v44 = v15;
  if (v15 >= v45)
  {
    unint64_t v16 = std::vector<otbr::Mdns::Publisher::TxtEntry>::__emplace_back_slow_path<char const(&)[3],char const*>( &v43,  "nn",  &v46);
  }

  else
  {
    std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_one_at_end[abi:ne180100]<char const(&)[3],char const*>( (uint64_t)&v43,  "nn",  &v46);
    unint64_t v16 = v15 + 48;
  }

  unint64_t v44 = v16;
  v48.__r_.__value_.__r.__words[0]  = 8LL;
  if (v16 >= v45)
  {
    unsigned __int8 v17 = (otbr::Ncp::ControllerOpenThread *)std::vector<otbr::Mdns::Publisher::TxtEntry>::__emplace_back_slow_path<char const(&)[3],unsigned char const(&)[8],unsigned long>( &v43,  "xp",  v4,  (uint64_t *)&v48);
  }

  else
  {
    std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_one_at_end[abi:ne180100]<char const(&)[3],unsigned char const(&)[8],unsigned long>( (uint64_t)&v43,  "xp",  v4,  (uint64_t *)&v48);
    unsigned __int8 v17 = (otbr::Ncp::ControllerOpenThread *)(v16 + 48);
  }

  unint64_t v44 = (unint64_t)v17;
  v48.__r_.__value_.__r.__words[0]  = (std::string::size_type)otbr::Ncp::ControllerOpenThread::GetThreadVersion(v17);
  unint64_t v18 = v44;
  if (v44 >= v45)
  {
    unint64_t v19 = std::vector<otbr::Mdns::Publisher::TxtEntry>::__emplace_back_slow_path<char const(&)[3],char const*>( &v43,  "tv",  (const char **)&v48.__r_.__value_.__l.__data_);
  }

  else
  {
    std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_one_at_end[abi:ne180100]<char const(&)[3],char const*>( (uint64_t)&v43,  "tv",  (const char **)&v48.__r_.__value_.__l.__data_);
    unint64_t v19 = v18 + 48;
  }

  unint64_t v44 = v19;
  v48.__r_.__value_.__r.__words[0]  = 8LL;
  if (v19 >= v45)
  {
    unint64_t v20 = std::vector<otbr::Mdns::Publisher::TxtEntry>::__emplace_back_slow_path<char const(&)[3],unsigned char const(&)[8],unsigned long>( &v43,  "xa",  ExtendedAddress,  (uint64_t *)&v48);
  }

  else
  {
    std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_one_at_end[abi:ne180100]<char const(&)[3],unsigned char const(&)[8],unsigned long>( (uint64_t)&v43,  "xa",  ExtendedAddress,  (uint64_t *)&v48);
    unint64_t v20 = v19 + 48;
  }

  unint64_t v44 = v20;
  v48.__r_.__value_.__r.__words[0]  = 8LL;
  if (v20 >= v45)
  {
    uint64_t v21 = std::vector<otbr::Mdns::Publisher::TxtEntry>::__emplace_back_slow_path<char const(&)[3],unsigned char const(&)[8],unsigned long>( &v43,  "dd",  ExtendedAddress,  (uint64_t *)&v48);
  }

  else
  {
    std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_one_at_end[abi:ne180100]<char const(&)[3],unsigned char const(&)[8],unsigned long>( (uint64_t)&v43,  "dd",  ExtendedAddress,  (uint64_t *)&v48);
    uint64_t v21 = v20 + 48;
  }

  unint64_t v44 = v21;
  StateBitmap  = otbr::GetStateBitmap(Instance);
  char v23 = StateBitmap;
  char v24 = StateBitmap;
  unsigned int v47 = bswap32(StateBitmap & 0x1FF);
  v48.__r_.__value_.__r.__words[0]  = (std::string::size_type)&v47;
  int v40 = (void *)4;
  unint64_t v25 = v44;
  if (v44 >= v45)
  {
    uint64_t v31 = std::vector<otbr::Mdns::Publisher::TxtEntry>::__emplace_back_slow_path<char const(&)[3],unsigned char *,unsigned long>( &v43,  "sb",  (const unsigned __int8 **)&v48,  (uint64_t *)&v40);
  }

  else
  {
    std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_one_at_end[abi:ne180100]<char const(&)[3],unsigned char *,unsigned long>( (uint64_t)&v43,  "sb",  (const unsigned __int8 **)&v48,  (uint64_t *)&v40);
    uint64_t v31 = v25 + 48;
  }

  unint64_t v44 = v31;
  otbrLog(6u, "BA", "Meshcop entry state bitmap sb entry:0x%x stateUint32:%llu", v26, v27, v28, v29, v30, v24);
  if ((v23 & 0x18) == 0x10)
  {
    otbr::AppendActiveTimestampTxtEntry(Instance, &v43);
    LODWORD(__p.__r_.__value_.__l.__data_)  = otThreadGetPartitionId(Instance);
    v48.__r_.__value_.__r.__words[0]  = (std::string::size_type)&__p;
    int v40 = (void *)4;
    unint64_t v32 = v44;
    if (v44 >= v45)
    {
      uint64_t v33 = std::vector<otbr::Mdns::Publisher::TxtEntry>::__emplace_back_slow_path<char const(&)[3],unsigned char *,unsigned long>( &v43,  "pt",  (const unsigned __int8 **)&v48,  (uint64_t *)&v40);
    }

    else
    {
      std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_one_at_end[abi:ne180100]<char const(&)[3],unsigned char *,unsigned long>( (uint64_t)&v43,  "pt",  (const unsigned __int8 **)&v48,  (uint64_t *)&v40);
      uint64_t v33 = v32 + 48;
    }

    unint64_t v44 = v33;
  }

  otbr::AppendBbrTxtEntries(Instance, v23, &v43);
  else {
    uint64_t UdpPort = 49152LL;
  }
  uint64_t v35 = *((void *)this + 2);
  std::string::basic_string[abi:ne180100]<0>(&v40, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "_meshcop._udp");
  memset(v38, 0, sizeof(v38));
  v48.__r_.__value_.__r.__words[0]  = (std::string::size_type)off_100448738;
  v48.__r_.__value_.__l.__size_  = (std::string::size_type)this;
  size_t v49 = &v48;
  otbr::Mdns::Publisher::PublishService( v35,  (uint64_t)&v40,  (const std::string *)this + 13,  &__p,  (uint64_t)v38,  UdpPort,  (uint64_t)&v43,  (uint64_t)&v48);
  __int128 v36 = v49;
  if (v49 == &v48)
  {
    uint64_t v37 = 4LL;
    __int128 v36 = &v48;
  }

  else
  {
    if (!v49) {
      goto LABEL_42;
    }
    uint64_t v37 = 5LL;
  }

  (*(void (**)(void))(v36->__r_.__value_.__r.__words[0] + 8 * v37))();
LABEL_42:
  v48.__r_.__value_.__r.__words[0]  = (std::string::size_type)v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
  if (v42 < 0) {
    operator delete(v40);
  }
  v48.__r_.__value_.__r.__words[0]  = (std::string::size_type)&v43;
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
}

void sub_10037FEA4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, char a31)
{
  *(void *)(v31 - 1ot::Mle::Tlv::SetType(this, 20) = &a31;
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 120));
  _Unwind_Resume(a1);
}

otbr::Mdns::Publisher::TxtEntry *otbr::Mdns::Publisher::TxtEntry::TxtEntry( otbr::Mdns::Publisher::TxtEntry *this, char *a2, const char *__s)
{
  size_t v6 = strlen(__s);
  size_t v7 = strlen(a2);
  return otbr::Mdns::Publisher::TxtEntry::TxtEntry(this, a2, v7, (const unsigned __int8 *)__s, v6);
}

void otbr::Mdns::Publisher::TxtEntry::~TxtEntry(void **this)
{
  uint64_t v2 = this + 3;
  std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100](&v2);
}

BOOL otbr::BorderAgent::IsThreadStarted(otbr::Ncp::ControllerOpenThread **this)
{
  Instance  = otbr::Ncp::ControllerOpenThread::GetInstance(this[1]);
  DeviceRole  = otThreadGetDeviceRole(Instance);
  return DeviceRole == 4 || (DeviceRole & 0xFFFFFFFE) == 2;
}

void otbr::BorderAgent::HandleThreadStateChanged(otbr::Ncp::ControllerOpenThread **this, int a2)
{
  if (this[2])
  {
    if ((a2 & 4) == 0) {
      goto LABEL_6;
    }
    IsThreadStarted  = otbr::BorderAgent::IsThreadStarted(this);
    uint64_t v10 = "down";
    if (IsThreadStarted) {
      uint64_t v10 = "up";
    }
    otbrLog(6u, "BA", "Thread is %s", v5, v6, v7, v8, v9, (char)v10);
    if (!otbr::BorderAgent::IsThreadStarted(this))
    {
      otbr::BorderAgent::Stop((otbr::BorderAgent *)this, v11, v12, v13, v14, v15, v16, v17);
    }

    else
    {
LABEL_6:
      if ((a2 & 0x2030204) != 0) {
        otbr::BorderAgent::UpdateMeshCopService(this);
      }
    }
  }

void *std::operator<<[abi:ne180100]<std::char_traits<char>>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v4);
}

void otbr::BorderAgent::GetAlternativeServiceInstanceName( otbr::Ncp::ControllerOpenThread **this@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  size_t v4 = std::random_device::random_device[abi:ne180100](&v20);
  std::random_device::result_type v5 = std::random_device::operator()(v4);
  if (v5 + ((v5 / 0x7FFFFFFF) | ((v5 / 0x7FFFFFFF) << 31)) <= 1) {
    int v6 = 1;
  }
  else {
    int v6 = v5 + ((v5 / 0x7FFFFFFF) | ((v5 / 0x7FFFFFFF) << 31));
  }
  int v18 = -65535;
  int v19 = v6;
  uint64_t v7 = std::uniform_int_distribution<unsigned short>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>( (uint64_t)&v18,  (uint64_t)&v19,  (unsigned __int16 *)&v18);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
  otbr::BorderAgent::BaseServiceInstanceName(this, &__p);
  uint64_t v8 = std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v15, (uint64_t)&__p);
  uint64_t v9 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, " (");
  uint64_t v10 = (void *)std::ostream::operator<<(v9, v7);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, ")");
  std::stringbuf::str(a2, &v16);
  if (v11 > 0x110)
  {
    __break(1u);
  }

  else
  {
    uint64_t v15 = v12;
    std::streambuf::~streambuf(&v16);
    std::ios::~ios(&v17);
    std::random_device::~random_device(&v20);
  }

void sub_100380280( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void *std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>( void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }

  else
  {
    a2  = *(void *)a2;
    uint64_t v3 = v2;
  }

  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, a2, v3);
}

uint64_t std::__tree<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::__map_value_compare<std::string,std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,otbr::TrelDnssd::TrelDnssd::Peer>>>::~__tree( uint64_t a1)
{
  return a1;
}

void *std::__function::__func<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0,std::allocator<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0>,void ()(otbr::Mdns::Publisher::State)>::__clone( uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  v5[1]  = &v6;
  _BYTE v5[2] = 1LL;
  uint64_t v3 = *(void *)(a1 + 8);
  void *v2 = off_100448618;
  v2[1]  = v3;
  v5[0]  = 0LL;
  std::unique_ptr<std::__function::__func<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0>,void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::__allocator_destructor<std::allocator<std::__function::__func<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0>,void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>>>>::~unique_ptr[abi:ne180100]((uint64_t)v5);
  return v2;
}

uint64_t std::__function::__func<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0,std::allocator<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0>,void ()(otbr::Mdns::Publisher::State)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2  = off_100448618;
  a2[1]  = v2;
  return result;
}

void std::__function::__func<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0,std::allocator<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0>,void ()(otbr::Mdns::Publisher::State)>::operator()( uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

uint64_t std::__function::__func<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0,std::allocator<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0>,void ()(otbr::Mdns::Publisher::State)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **std::__function::__func<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0,std::allocator<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0>,void ()(otbr::Mdns::Publisher::State)>::target_type()
{
}

void *std::__function::__func<otbr::BorderAgent::Init(void)::$_0,std::allocator<otbr::BorderAgent::Init(void)::$_0>,void ()(unsigned long long)>::__clone( uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  v5[1]  = &v6;
  _BYTE v5[2] = 1LL;
  uint64_t v3 = *(void *)(a1 + 8);
  void *v2 = off_1004486A8;
  v2[1]  = v3;
  v5[0]  = 0LL;
  std::unique_ptr<std::__function::__func<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0>,void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::__allocator_destructor<std::allocator<std::__function::__func<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0>,void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>>>>::~unique_ptr[abi:ne180100]((uint64_t)v5);
  return v2;
}

uint64_t std::__function::__func<otbr::BorderAgent::Init(void)::$_0,std::allocator<otbr::BorderAgent::Init(void)::$_0>,void ()(unsigned long long)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2  = off_1004486A8;
  a2[1]  = v2;
  return result;
}

void std::__function::__func<otbr::BorderAgent::Init(void)::$_0,std::allocator<otbr::BorderAgent::Init(void)::$_0>,void ()(unsigned long long)>::operator()( uint64_t a1, void *a2)
{
}

uint64_t std::__function::__func<otbr::BorderAgent::Init(void)::$_0,std::allocator<otbr::BorderAgent::Init(void)::$_0>,void ()(unsigned long long)>::target( uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **std::__function::__func<otbr::BorderAgent::Init(void)::$_0,std::allocator<otbr::BorderAgent::Init(void)::$_0>,void ()(unsigned long long)>::target_type()
{
}

otbr::Mdns::Publisher::TxtEntry *std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_one_at_end[abi:ne180100]<char const(&)[3],unsigned char *,unsigned long>( uint64_t a1, char *__s, const unsigned __int8 **a3, uint64_t *a4)
{
  std::random_device::result_type v5 = *(otbr::Mdns::Publisher::TxtEntry **)(a1 + 8);
  uint64_t result = std::allocator<otbr::Mdns::Publisher::TxtEntry>::construct[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry,char const(&)[3],unsigned char *,unsigned long>( (int)a1 + 16,  v5,  __s,  a3,  a4);
  *(void *)(a1 + 8)  = (char *)v5 + 48;
  return result;
}

void sub_1003804F4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8)  = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<otbr::Mdns::Publisher::TxtEntry>::__emplace_back_slow_path<char const(&)[3],unsigned char *,unsigned long>( uint64_t *a1, char *a2, const unsigned __int8 **a3, uint64_t *a4)
{
  uint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }

  if (v6 > 0x555555555555555LL) {
    goto LABEL_10;
  }
  if (0x5555555555555556LL * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556LL * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555LL;
  }
  else {
    unint64_t v10 = v6;
  }
  std::__split_buffer<otbr::Mdns::Publisher::TxtEntry>::__split_buffer(v13, v10, v5, (uint64_t)(a1 + 2));
  std::allocator<otbr::Mdns::Publisher::TxtEntry>::construct[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry,char const(&)[3],unsigned char *,unsigned long>( (_DWORD)a1 + 16,  *(otbr::Mdns::Publisher::TxtEntry **)v14,  a2,  a3,  a4);
  *(void *)v14 += 48LL;
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__swap_out_circular_buffer(a1, v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<otbr::Mdns::Publisher::TxtEntry>::~__split_buffer(v13);
  return v11;
}

void sub_1003805FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

otbr::Mdns::Publisher::TxtEntry *std::allocator<otbr::Mdns::Publisher::TxtEntry>::construct[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry,char const(&)[3],unsigned char *,unsigned long>( int a1, otbr::Mdns::Publisher::TxtEntry *a2, char *__s, const unsigned __int8 **a4, uint64_t *a5)
{
  uint64_t v7 = *a4;
  uint64_t v8 = *a5;
  size_t v9 = strlen(__s);
  return otbr::Mdns::Publisher::TxtEntry::TxtEntry(a2, __s, v9, v7, v8);
}

otbr::Mdns::Publisher::TxtEntry *std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_one_at_end[abi:ne180100]<char const(&)[3],char const*>( uint64_t a1, char *a2, const char **a3)
{
  size_t v4 = *(otbr::Mdns::Publisher::TxtEntry **)(a1 + 8);
  uint64_t result = std::allocator_traits<std::allocator<otbr::Mdns::Publisher::TxtEntry>>::construct[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry,char const(&)[3],char const*,void>( (int)a1 + 16,  v4,  a2,  a3);
  *(void *)(a1 + 8)  = (char *)v4 + 48;
  return result;
}

void sub_100380698(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8)  = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<otbr::Mdns::Publisher::TxtEntry>::__emplace_back_slow_path<char const(&)[3],char const*>( uint64_t *a1, char *a2, const char **a3)
{
  uint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }

  if (v5 > 0x555555555555555LL) {
    goto LABEL_10;
  }
  if (0x5555555555555556LL * ((a1[2] - *a1) >> 4) > v5) {
    unint64_t v5 = 0x5555555555555556LL * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v8 = 0x555555555555555LL;
  }
  else {
    unint64_t v8 = v5;
  }
  std::__split_buffer<otbr::Mdns::Publisher::TxtEntry>::__split_buffer(v11, v8, v4, (uint64_t)(a1 + 2));
  std::allocator_traits<std::allocator<otbr::Mdns::Publisher::TxtEntry>>::construct[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry,char const(&)[3],char const*,void>( (_DWORD)a1 + 16,  v12,  a2,  a3);
  uint64_t v12 = (otbr::Mdns::Publisher::TxtEntry *)((char *)v12 + 48);
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__swap_out_circular_buffer(a1, v11);
  uint64_t v9 = a1[1];
  std::__split_buffer<otbr::Mdns::Publisher::TxtEntry>::~__split_buffer(v11);
  return v9;
}

void sub_100380790(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

otbr::Mdns::Publisher::TxtEntry *std::allocator_traits<std::allocator<otbr::Mdns::Publisher::TxtEntry>>::construct[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry,char const(&)[3],char const*,void>( int a1, otbr::Mdns::Publisher::TxtEntry *this, char *a3, const char **a4)
{
  return otbr::Mdns::Publisher::TxtEntry::TxtEntry(this, a3, *a4);
}

std::string *std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_at_end<otbr::Mdns::Publisher::TxtEntry const*,otbr::Mdns::Publisher::TxtEntry const*>( uint64_t a1, std::string *a2, std::string *a3)
{
  uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<otbr::Mdns::Publisher::TxtEntry>,otbr::Mdns::Publisher::TxtEntry const*,otbr::Mdns::Publisher::TxtEntry const*,otbr::Mdns::Publisher::TxtEntry*>( a1 + 16,  a2,  a3,  *(std::string **)(a1 + 8));
  *(void *)(a1 + 8)  = result;
  return result;
}

void sub_1003807E8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8)  = v2;
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<otbr::Mdns::Publisher::TxtEntry>,otbr::Mdns::Publisher::TxtEntry const*,otbr::Mdns::Publisher::TxtEntry const*,otbr::Mdns::Publisher::TxtEntry*>( uint64_t a1, std::string *__str, std::string *a3, std::string *this)
{
  uint64_t v4 = this;
  uint64_t v11 = this;
  uint64_t v12 = this;
  v9[0]  = a1;
  v9[1]  = &v11;
  uint64_t v9[2] = &v12;
  char v10 = 0;
  if (__str != a3)
  {
    unint64_t v6 = __str;
    int v7 = a1;
    do
    {
      std::allocator<otbr::Mdns::Publisher::TxtEntry>::construct[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry,otbr::Mdns::Publisher::TxtEntry&>( v7,  v4,  v6);
      v6 += 2;
      uint64_t v4 = v12 + 2;
      v12 += 2;
    }

    while (v6 != a3);
  }

  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<otbr::Mdns::Publisher::TxtEntry>,otbr::Mdns::Publisher::TxtEntry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_100380884( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

otbr::Mdns::Publisher::TxtEntry *std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_one_at_end[abi:ne180100]<char const(&)[3],char const(&)[11]>( uint64_t a1, char *a2, const char *a3)
{
  uint64_t v4 = *(otbr::Mdns::Publisher::TxtEntry **)(a1 + 8);
  uint64_t result = otbr::Mdns::Publisher::TxtEntry::TxtEntry(v4, a2, a3);
  *(void *)(a1 + 8)  = (char *)v4 + 48;
  return result;
}

void sub_1003808C8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8)  = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<otbr::Mdns::Publisher::TxtEntry>::__emplace_back_slow_path<char const(&)[3],char const(&)[11]>( uint64_t *a1, char *a2, const char *a3)
{
  uint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }

  if (v5 > 0x555555555555555LL) {
    goto LABEL_10;
  }
  if (0x5555555555555556LL * ((a1[2] - *a1) >> 4) > v5) {
    unint64_t v5 = 0x5555555555555556LL * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v8 = 0x555555555555555LL;
  }
  else {
    unint64_t v8 = v5;
  }
  std::__split_buffer<otbr::Mdns::Publisher::TxtEntry>::__split_buffer(v11, v8, v4, (uint64_t)(a1 + 2));
  otbr::Mdns::Publisher::TxtEntry::TxtEntry(v12, a2, a3);
  uint64_t v12 = (otbr::Mdns::Publisher::TxtEntry *)((char *)v12 + 48);
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__swap_out_circular_buffer(a1, v11);
  uint64_t v9 = a1[1];
  std::__split_buffer<otbr::Mdns::Publisher::TxtEntry>::~__split_buffer(v11);
  return v9;
}

void sub_1003809B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

otbr::Mdns::Publisher::TxtEntry *std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_one_at_end[abi:ne180100]<char const(&)[3],unsigned char const(&)[8],unsigned long>( uint64_t a1, char *__s, const unsigned __int8 *a3, uint64_t *a4)
{
  unint64_t v5 = *(otbr::Mdns::Publisher::TxtEntry **)(a1 + 8);
  uint64_t result = std::allocator<otbr::Mdns::Publisher::TxtEntry>::construct[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry,char const(&)[3],unsigned char const(&)[8],unsigned long>( (int)a1 + 16,  v5,  __s,  a3,  a4);
  *(void *)(a1 + 8)  = (char *)v5 + 48;
  return result;
}

void sub_100380A0C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8)  = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<otbr::Mdns::Publisher::TxtEntry>::__emplace_back_slow_path<char const(&)[3],unsigned char const(&)[8],unsigned long>( uint64_t *a1, char *a2, const unsigned __int8 *a3, uint64_t *a4)
{
  uint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }

  if (v6 > 0x555555555555555LL) {
    goto LABEL_10;
  }
  if (0x5555555555555556LL * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556LL * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555LL;
  }
  else {
    unint64_t v10 = v6;
  }
  std::__split_buffer<otbr::Mdns::Publisher::TxtEntry>::__split_buffer(v13, v10, v5, (uint64_t)(a1 + 2));
  std::allocator<otbr::Mdns::Publisher::TxtEntry>::construct[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry,char const(&)[3],unsigned char const(&)[8],unsigned long>( (_DWORD)a1 + 16,  *(otbr::Mdns::Publisher::TxtEntry **)v14,  a2,  a3,  a4);
  *(void *)v14 += 48LL;
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__swap_out_circular_buffer(a1, v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<otbr::Mdns::Publisher::TxtEntry>::~__split_buffer(v13);
  return v11;
}

void sub_100380B14(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

otbr::Mdns::Publisher::TxtEntry *std::allocator<otbr::Mdns::Publisher::TxtEntry>::construct[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry,char const(&)[3],unsigned char const(&)[8],unsigned long>( int a1, otbr::Mdns::Publisher::TxtEntry *a2, char *__s, const unsigned __int8 *a4, uint64_t *a5)
{
  uint64_t v8 = *a5;
  size_t v9 = strlen(__s);
  return otbr::Mdns::Publisher::TxtEntry::TxtEntry(a2, __s, v9, a4, v8);
}

void *std::__function::__func<otbr::BorderAgent::PublishMeshCopService(void)::$_0,std::allocator<otbr::BorderAgent::PublishMeshCopService(void)::$_0>,void ()(otbrError)>::__clone( uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  v5[1]  = &v6;
  _BYTE v5[2] = 1LL;
  uint64_t v3 = *(void *)(a1 + 8);
  void *v2 = off_100448738;
  v2[1]  = v3;
  v5[0]  = 0LL;
  std::unique_ptr<std::__function::__func<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0>,void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::__allocator_destructor<std::allocator<std::__function::__func<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0>,void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>>>>::~unique_ptr[abi:ne180100]((uint64_t)v5);
  return v2;
}

uint64_t std::__function::__func<otbr::BorderAgent::PublishMeshCopService(void)::$_0,std::allocator<otbr::BorderAgent::PublishMeshCopService(void)::$_0>,void ()(otbrError)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2  = off_100448738;
  a2[1]  = v2;
  return result;
}

void std::__function::__func<otbr::BorderAgent::PublishMeshCopService(void)::$_0,std::allocator<otbr::BorderAgent::PublishMeshCopService(void)::$_0>,void ()(otbrError)>::operator()( uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *a2;
  uint64_t v9 = *(void *)(a1 + 8);
  if (*a2 == -12)
  {
    unint64_t v10 = (void *)(v9 + 312);
    otbrLog(6u, "BA", "Cancelled previous publishing meshcop service %s.%s.local", a4, a5, a6, a7, a8, (char)v10);
  }

  else
  {
    if (v8) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 6;
    }
    LOBYTE(v1ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = v9 + 56;
    otbrErrorString(*a2);
    otbrLog(v11, "BA", "Result of publish meshcop service %s.%s.local: %s", v13, v14, v15, v16, v17, v12);
    if (v8 == -11)
    {
      otbr::BorderAgent::UnpublishMeshCopService((otbr::BorderAgent *)v9, v18, v19, v20, v21, v22, v23, v24);
      otbr::BorderAgent::GetAlternativeServiceInstanceName((otbr::Ncp::ControllerOpenThread **)v9, &__p);
      std::string::operator=[abi:ne180100](v9 + 312, (__int128 *)&__p);
      otbr::BorderAgent::PublishMeshCopService((otbr::BorderAgent *)v9);
    }
  }

uint64_t std::__function::__func<otbr::BorderAgent::PublishMeshCopService(void)::$_0,std::allocator<otbr::BorderAgent::PublishMeshCopService(void)::$_0>,void ()(otbrError)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **std::__function::__func<otbr::BorderAgent::PublishMeshCopService(void)::$_0,std::allocator<otbr::BorderAgent::PublishMeshCopService(void)::$_0>,void ()(otbrError)>::target_type()
{
}

void *std::__function::__func<otbr::BorderAgent::UnpublishMeshCopService(void)::$_0,std::allocator<otbr::BorderAgent::UnpublishMeshCopService(void)::$_0>,void ()(otbrError)>::__clone( uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  v5[1]  = &v6;
  _BYTE v5[2] = 1LL;
  uint64_t v3 = *(void *)(a1 + 8);
  void *v2 = off_1004487B8;
  v2[1]  = v3;
  v5[0]  = 0LL;
  std::unique_ptr<std::__function::__func<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0>,void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::__allocator_destructor<std::allocator<std::__function::__func<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0,std::allocator<otbr::TrelDnssd::TrelDnssd::StartBrowse(void)::$_0>,void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>>>>::~unique_ptr[abi:ne180100]((uint64_t)v5);
  return v2;
}

uint64_t std::__function::__func<otbr::BorderAgent::UnpublishMeshCopService(void)::$_0,std::allocator<otbr::BorderAgent::UnpublishMeshCopService(void)::$_0>,void ()(otbrError)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2  = off_1004487B8;
  a2[1]  = v2;
  return result;
}

void std::__function::__func<otbr::BorderAgent::UnpublishMeshCopService(void)::$_0,std::allocator<otbr::BorderAgent::UnpublishMeshCopService(void)::$_0>,void ()(otbrError)>::operator()( uint64_t a1, int *a2)
{
  int v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (void *)(v4 + 312);
  if (v3) {
    unsigned int v6 = 4;
  }
  else {
    unsigned int v6 = 6;
  }
  otbrErrorString(v3);
  otbrLog(v6, "BA", "Result of unpublish meshcop service %s.%s.local: %s", v7, v8, v9, v10, v11, (char)v5);
}

uint64_t std::__function::__func<otbr::BorderAgent::UnpublishMeshCopService(void)::$_0,std::allocator<otbr::BorderAgent::UnpublishMeshCopService(void)::$_0>,void ()(otbrError)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **std::__function::__func<otbr::BorderAgent::UnpublishMeshCopService(void)::$_0,std::allocator<otbr::BorderAgent::UnpublishMeshCopService(void)::$_0>,void ()(otbrError)>::target_type()
{
}

uint64_t std::uniform_int_distribution<unsigned short>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>( uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  LODWORD(result)  = a3[1];
  int v4 = result - *a3;
  if (v4)
  {
    unsigned int v5 = v4 + 1;
    if (v4 == -1)
    {
      std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__independent_bits_engine( (uint64_t)v9,  a2,  0x20uLL);
      LOWORD(result)  = (unsigned __int16)std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__eval(v9);
    }

    else
    {
      uint64_t v7 = __clz(v5);
      uint64_t v8 = 31LL;
      if (((v5 << v7) & 0x7FFFFFFF) != 0) {
        uint64_t v8 = 32LL;
      }
      std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__independent_bits_engine( (uint64_t)v9,  a2,  v8 - v7);
      do
        LODWORD(result)  = std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__eval(v9);
      while (result >= v5);
      LOWORD(result)  = *a3 + result;
    }
  }

  return (unsigned __int16)result;
}

uint64_t std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__independent_bits_engine( uint64_t result, uint64_t a2, unint64_t a3)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 8)  = a3;
  if (a3 % 0x1E) {
    unint64_t v3 = a3 / 0x1E + 1;
  }
  else {
    unint64_t v3 = a3 / 0x1E;
  }
  unint64_t v4 = a3 / v3;
  *(void *)(result + 16)  = a3 / v3;
  *(void *)(result + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v3;
  LODWORD(v5)  = (-1 << (a3 / v3)) & 0x7FFFFFFE;
  if (a3 / v3 >= 0x20) {
    unint64_t v5 = 0LL;
  }
  else {
    unint64_t v5 = v5;
  }
  *(_DWORD *)(result + 4ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = v5;
  if (v5 / v3 < (v5 ^ 0x7FFFFFFE))
  {
    ++v3;
    unint64_t v4 = a3 / v3;
    *(void *)(result + 16)  = a3 / v3;
    *(void *)(result + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v3;
    int v6 = (-1 << (a3 / v3)) & 0x7FFFFFFE;
    if (a3 / v3 >= 0x20) {
      int v6 = 0;
    }
    *(_DWORD *)(result + 4ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0) = v6;
  }

  BOOL v7 = v3 >= a3 % v3;
  unint64_t v8 = v3 - a3 % v3;
  if (!v7) {
    goto LABEL_23;
  }
  *(void *)(result + 3ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = v8;
  if (v4 >= 0x1F)
  {
    *(_DWORD *)(result + 4ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  }

  else
  {
    *(_DWORD *)(result + 4ot::NetworkData::NetworkDataTlv::SetType(this, 4) = (-2 << v4) & 0x7FFFFFFE;
    if (!v4)
    {
      unsigned int v9 = 0;
      goto LABEL_19;
    }
  }

  if (v4 > 0x20)
  {
LABEL_23:
    __break(0x5515u);
    return result;
  }

  unsigned int v9 = 0xFFFFFFFF >> (32 - v4);
LABEL_19:
  if (v4 >= 0x1F) {
    unsigned int v10 = -1;
  }
  else {
    unsigned int v10 = 0xFFFFFFFF >> ~(_BYTE)v4;
  }
  *(_DWORD *)(result + 48)  = v9;
  *(_DWORD *)(result + 5ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = v10;
  return result;
}

unsigned int **std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__eval( unsigned int **result)
{
  unint64_t v1 = 0LL;
  uint64_t v2 = 0LL;
  unint64_t v3 = result[4];
LABEL_2:
  if (v1 >= (unint64_t)v3)
  {
    uint64_t v16 = result[3];
LABEL_18:
    if (v3 >= v16) {
      return (unsigned int **)v2;
    }
    uint64_t v17 = *result;
    unsigned int v18 = **result;
    while (1)
    {
      unsigned int v19 = v18 / 0xADC8;
      unsigned int v20 = 48271 * (v18 % 0xADC8);
      unsigned int v21 = 3399 * v19;
      int v22 = v20 >= v21 ? 0 : 0x7FFFFFFF;
      unsigned int v23 = v22 + v20;
      BOOL v11 = v23 >= v21;
      unsigned int v18 = v23 - v21;
      if (!v11) {
        break;
      }
      unsigned int *v17 = v18;
      unsigned int v24 = v18 - 1;
      if (!v18) {
        break;
      }
      if (v24 < *((_DWORD *)result + 11))
      {
        unint64_t v25 = (unint64_t)result[2];
        int v26 = (_DWORD)v2 << (v25 + 1);
        if (v25 >= 0x1F) {
          int v26 = 0;
        }
        int v27 = *((_DWORD *)result + 13) & v24;
        BOOL v11 = __CFADD__(v26, v27);
        uint64_t v2 = (v26 + v27);
        if (v11 || (BOOL v11 = __CFADD__(v3, 1LL), v3 = (unsigned int *)((char *)v3 + 1), v11))
        {
LABEL_32:
          __break(0x5500u);
          return (unsigned int **)v2;
        }

        goto LABEL_18;
      }
    }
  }

  else
  {
    unint64_t v4 = *result;
    unsigned int v5 = **result;
    while (1)
    {
      unsigned int v6 = v5 / 0xADC8;
      unsigned int v7 = 48271 * (v5 % 0xADC8);
      unsigned int v8 = 3399 * v6;
      int v9 = v7 >= v8 ? 0 : 0x7FFFFFFF;
      unsigned int v10 = v9 + v7;
      BOOL v11 = v10 >= v8;
      unsigned int v5 = v10 - v8;
      if (!v11) {
        break;
      }
      unsigned int *v4 = v5;
      unsigned int v12 = v5 - 1;
      if (!v5) {
        break;
      }
      if (v12 < *((_DWORD *)result + 10))
      {
        unint64_t v13 = (unint64_t)result[2];
        int v14 = (_DWORD)v2 << v13;
        if (v13 >= 0x20) {
          int v14 = 0;
        }
        int v15 = (_DWORD)result[6] & v12;
        BOOL v11 = __CFADD__(v14, v15);
        uint64_t v2 = (v14 + v15);
        if (v11) {
          goto LABEL_32;
        }
        BOOL v11 = __CFADD__(v1++, 1LL);
        if (v11) {
          goto LABEL_32;
        }
        goto LABEL_2;
      }
    }
  }

  __break(0x5515u);
  return result;
}

uint64_t otbrLogGetLevel(void)
{
  return sLevel;
}

uint64_t otbrLogGetDefaultLevel(void)
{
  return sDefaultLevel;
}

uint64_t otbrLogSetLevel(uint64_t result)
{
  sLevel  = result;
  return result;
}

void otbrLogInit(const char *a1, unsigned int a2, int a3)
{
  if (!a1) {
    otbrLogInit();
  }
  if (a2 >= 8) {
    otbrLogInit();
  }
  if (a3) {
    int v4 = 35;
  }
  else {
    int v4 = 3;
  }
  openlog(a1, v4, 8);
  sLevel  = a2;
  sDefaultLevel  = a2;
}

void otbrLog( unsigned int a1, const char *a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  logging_obg  = (os_log_s *)log_get_logging_obg("com.apple.wpantund.commissioning", "commissioning");
  if (sLevel >= (int)a1)
  {
    unint64_t v13 = logging_obg;
    if (vsnprintf(__str, 0x400uLL, a3, &a9) >= 1)
    {
      if (a1 >= 5)
      {
        if (a1 - 5 >= 2)
        {
          if (a1 != 7) {
            otbrLog();
          }
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
            otbrLog(a2, (uint64_t)__str, v13);
          }
        }

        else if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          GetPrefix(a2);
          *(_DWORD *)buf  = 136315394;
          int v15 = GetPrefix(char const*)::prefix;
          __int16 v16 = 2080;
          uint64_t v17 = __str;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%s: %s", buf, 0x16u);
        }
      }

      else if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        otbrLog(a2, (uint64_t)__str, v13);
      }
    }
  }

const char *GetPrefix(const char *result)
{
  if (*result)
  {
    unint64_t v1 = result;
    size_t v2 = strlen(result);
    if (v2 >= 7) {
      size_t v3 = 7LL;
    }
    else {
      size_t v3 = v2;
    }
    GetPrefix(char const*)::prefix[0]  = 45;
    memcpy(&unk_100477131, v1, v3);
    uint64_t result = (const char *)memset((char *)&unk_100477131 + v3, 45, 8 - v3);
    uint64_t v4 = &dword_100000008 + 1;
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  GetPrefix(char const*)::prefix[v4]  = 0;
  return result;
}

void otbrLogv(int a1, const char *a2, char *a3)
{
  if (!a2) {
    otbrLogv();
  }
  if (sLevel >= a1) {
    vsyslog(a1, a2, a3);
  }
}

void otbrLogvNoFilter(int a1, const char *a2, char *a3)
{
}

uint64_t otbrDump(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3 || !a4 && a5) {
    otbrDump();
  }
  if (a5)
  {
  }

  return result;
}

char *otbrErrorString(int a1)
{
  int v1 = a1 + 13;
  uint64_t result = "OK";
  switch(v1)
  {
    case 0:
      uint64_t result = "Invalid state";
      break;
    case 1:
      uint64_t result = "Aborted";
      break;
    case 2:
      uint64_t result = "Duplicated";
      break;
    case 3:
      uint64_t result = "Invalid arguments";
      break;
    case 4:
      uint64_t result = "Not implemented";
      break;
    case 5:
      uint64_t result = "Parse error";
      break;
    case 6:
      uint64_t result = "Not found";
      break;
    case 9:
      uint64_t result = "OpenThread error";
      break;
    case 10:
      uint64_t result = "MDNS error";
      break;
    case 11:
      uint64_t result = "DBUS error";
      break;
    case 12:
      size_t v3 = __error();
      uint64_t result = strerror(*v3);
      break;
    case 13:
      return result;
    default:
      uint64_t result = "Unknown";
      break;
  }

  return result;
}

  ;
}

void SplitFullDnsName(std::string *__str@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 48)  = 0u;
  uint64_t v3 = a2 + 48;
  *(_OWORD *)(a2 + 6ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
  *(_OWORD *)(a2 + ot::Mle::Tlv::SetType(this, 80) = 0u;
  *(_OWORD *)(a2 + 16)  = 0u;
  *(_OWORD *)(a2 + 3ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2) = 0u;
  *(_OWORD *)a2  = 0u;
  std::string::basic_string(&__stra, __str);
  if ((__stra.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_stra  = &__stra;
  }
  else {
    p_stra  = (std::string *)__stra.__r_.__value_.__r.__words[0];
  }
  if ((__stra.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    size  = __stra.__r_.__value_.__s.__size_;
  }
  else {
    size  = __stra.__r_.__value_.__l.__size_;
  }
  if (!size) {
    goto LABEL_46;
  }
  unsigned int v6 = (std::string *)((char *)p_stra + size);
  unsigned int v7 = p_stra;
  unsigned int v8 = (std::string *)((char *)p_stra + size);
  do
  {
    if (v7->__r_.__value_.__s.__data_[0] == 46)
    {
      uint64_t v9 = &_mh_execute_header.magic + 1;
      while (v9 != 6)
      {
        int v10 = v7->__r_.__value_.__s.__data_[v9];
        int v11 = aUdp_1[v9++];
        if (v10 != v11) {
          goto LABEL_12;
        }
      }

      unsigned int v8 = v7;
    }

void sub_10038189C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  DnsNameInfo::~DnsNameInfo(v18);
  _Unwind_Resume(a1);
}

BOOL NameEndsWithDot(uint64_t *a1)
{
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    uint64_t v1 = *((unsigned __int8 *)a1 + 23);
    if (!*((_BYTE *)a1 + 23)) {
      return 0LL;
    }
    return *((_BYTE *)a1 + v1 - 1) == 46;
  }

  uint64_t v1 = a1[1];
  if (v1)
  {
    a1  = (uint64_t *)*a1;
    return *((_BYTE *)a1 + v1 - 1) == 46;
  }

  return 0LL;
}

void DnsNameInfo::~DnsNameInfo(void **this)
{
}

uint64_t SplitFullServiceInstanceName(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = v11;
  if ((v11 & 0x80u) != 0) {
    unint64_t v7 = (unint64_t)v10[1];
  }
  if (v7)
  {
    std::string::operator=[abi:ne180100](a2, (__int128 *)v10);
    std::string::operator=[abi:ne180100](a3, &v12);
    std::string::operator=[abi:ne180100](a4, &__p);
    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v8 = 4294967286LL;
  }

  if (v17 < 0) {
    operator delete((void *)__p);
  }
  if (v15 < 0) {
    operator delete(v14);
  }
  if (v13 < 0) {
    operator delete((void *)v12);
  }
  return v8;
}

uint64_t SplitFullServiceName(std::string *a1, uint64_t a2, uint64_t a3)
{
  if (DnsNameInfo::IsService((DnsNameInfo *)v7))
  {
    std::string::operator=[abi:ne180100](a2, &v9);
    std::string::operator=[abi:ne180100](a3, &__p);
    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v5 = 4294967286LL;
  }

  if (v14 < 0) {
    operator delete((void *)__p);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v10 < 0) {
    operator delete((void *)v9);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  return v5;
}

BOOL DnsNameInfo::IsService(DnsNameInfo *this)
{
  if (*((char *)this + 47) < 0)
  {
    if (*((void *)this + 4)) {
      goto LABEL_3;
    }
    return 0LL;
  }

  if (!*((_BYTE *)this + 47)) {
    return 0LL;
  }
LABEL_3:
  else {
    uint64_t v1 = *((unsigned __int8 *)this + 23);
  }
  return v1 == 0;
}

uint64_t SplitFullHostName(std::string *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v12;
  if ((v12 & 0x80u) != 0) {
    uint64_t v5 = v11;
  }
  if (v5)
  {
    uint64_t v6 = 4294967286LL;
  }

  else
  {
    std::string::operator=[abi:ne180100](a2, &v13);
    std::string::operator=[abi:ne180100](a3, &__p);
    uint64_t v6 = 0LL;
  }

  if (v16 < 0) {
    operator delete((void *)__p);
  }
  if (v14 < 0) {
    operator delete((void *)v13);
  }
  if (v9 < 0) {
    operator delete(v8);
  }
  return v6;
}

uint64_t updateBorderAgent(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(**(void **)(result + 8) + 16LL))(*(void *)(result + 8));
  }
  return result;
}

uint64_t processBorderAgent(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(**(void **)(result + 8) + 24LL))(*(void *)(result + 8));
  }
  return result;
}

void destroyBorderAgent(void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
    __p[1]  = 0LL;
    if (*__p) {
      (*(void (**)(void))(*(void *)*__p + 8LL))(*__p);
    }
    operator delete(__p);
  }

void *setupBorderAgent(uint64_t a1, void *a2, int a3, uint64_t a4)
{
  LODWORD(v5)  = a3;
  char v8 = operator new(0x10uLL);
  void *v8 = 0LL;
  v8[1]  = 0LL;
  uint64_t v18 = 0LL;
  std::string::size_type v19 = 0LL;
  unint64_t v20 = 0LL;
  if ((_DWORD)v5)
  {
    char v9 = 0LL;
    uint64_t v5 = v5;
    do
    {
      else {
        *v9++  = *a2;
      }
      std::string::size_type v19 = v9;
      ++a2;
      --v5;
    }

    while (v5);
  }

  char v10 = (otbr::Ncp::ControllerOpenThread *)operator new(0x110uLL);
  otbr::Ncp::ControllerOpenThread::ControllerOpenThread(v10, a1, &v18, "", 0LL, 1LL, a4);
  void *v8 = v10;
  uint64_t v11 = (otbr::BorderAgent *)operator new(0x150uLL);
  otbr::BorderAgent::BorderAgent(v11, v10);
  v8[1]  = v11;
  otbrLog(6u, "AGENT", "Border router agent intiialized.", v12, v13, v14, v15, v16, v18);
  otbr::Ncp::ControllerOpenThread::Init(v10);
  otbr::BorderAgent::Init(v11);
  std::string::size_type v21 = (void **)&v18;
  std::vector<otbr::Ip6Address>::__destroy_vector::operator()[abi:ne180100](&v21);
  return v8;
}

void sub_100381D98( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  a12  = &a9;
  std::vector<otbr::Ip6Address>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

__n128 otbr::Ip6Address::Ip6Address(__n128 *this, __n128 *a2)
{
  __n128 result = *a2;
  *this  = *a2;
  return result;
}

{
  __n128 result;
  __n128 result = *a2;
  *this  = *a2;
  return result;
}

void *otbr::Ip6Address::ToString@<X0>(otbr::Ip6Address *this@<X0>, void *a2@<X8>)
{
  if (!inet_ntop(30, this, __s, 0x2Eu))
  {
    otbrLog( 0,  "UTILS",  "FAILED %s:%d - %s",  v3,  v4,  v5,  v6,  v7,  (char)"/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread_border_router/src/common/types.cpp");
    exit(-1);
  }

  return std::string::basic_string[abi:ne180100]<0>(a2, __s);
}

uint64_t otbr::Ip6Address::ToSolicitedNodeMulticastAddress(otbr::Ip6Address *this)
{
  return *otbr::Ip6Address::GetSolicitedMulticastAddressPrefix(this);
}

uint64_t *otbr::Ip6Address::GetSolicitedMulticastAddressPrefix(otbr::Ip6Address *this)
{
  if ((v1 & 1) == 0
  {
    otbr::Ip6Address::GetSolicitedMulticastAddressPrefix(void)::sSolicitedMulticastAddressuint64_t Prefix = otbr::Ip6Address::FromString( (otbr::Ip6Address *)"ff02::01:ff00:0",  v3);
    unk_10045D4B0  = v4;
  }

  return &otbr::Ip6Address::GetSolicitedMulticastAddressPrefix(void)::sSolicitedMulticastAddressPrefix;
}

void sub_100381F44(_Unwind_Exception *a1)
{
}

__n128 otbr::Ip6Address::CopyTo(in6_addr *this, sockaddr_in6 *a2)
{
  *(void *)&a2->sin6_len  = 0LL;
  *(void *)a2->sin6_addr.__u6_addr8  = 0LL;
  a2->sin6_scope_id  = 0;
  *(void *)&a2->sin6_addr.__u6_addr32[2]  = 0LL;
  __n128 result = *(__n128 *)this;
  a2->sin6_addr  = *this;
  a2->sin6_family  = 30;
  return result;
}

__n128 otbr::Ip6Address::CopyTo(__n128 *this, in6_addr *a2)
{
  __n128 result = *this;
  *a2  = *(in6_addr *)this;
  return result;
}

__n128 otbr::Ip6Address::CopyFrom(__n128 *this, const sockaddr_in6 *a2)
{
  __n128 result = (__n128)a2->sin6_addr;
  *this  = result;
  return result;
}

__n128 otbr::Ip6Address::CopyFrom(in6_addr *this, __n128 *a2)
{
  __n128 result = *a2;
  *this  = *(in6_addr *)a2;
  return result;
}

uint64_t otbr::Ip6Address::FromString(otbr::Ip6Address *this, char *a2, otbr::Ip6Address *a3)
{
  else {
    return 4294967286LL;
  }
}

uint64_t otbr::Ip6Address::FromString(otbr::Ip6Address *this, const char *a2)
{
  v8[0]  = 0LL;
  v8[1]  = 0LL;
  if (inet_pton(30, (const char *)this, v8) != 1)
  {
    otbrLog( 0,  "UTILS",  "FAILED %s:%d - %s",  v2,  v3,  v4,  v5,  v6,  (char)"/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread_border_router/src/common/types.cpp");
    exit(-1);
  }

  return v8[0];
}

__n128 otbr::Ip6Prefix::Set(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0]  = a2[1].n128_u64[0];
  *a1  = result;
  return result;
}

uint64_t otbr::Ip6Prefix::ToString@<X0>(otbr::Ip6Prefix *this@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  v13.__mode_  = 24;
  if (!inet_ntop(30, this, __s, 0x2Eu))
  {
    otbrLog( 0,  "UTILS",  "FAILED %s:%d - %s",  v4,  v5,  v6,  v7,  v8,  (char)"/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread_border_router/src/common/types.cpp");
    exit(-1);
  }

  size_t v9 = strlen(__s);
  ((void (*)(std::stringbuf *, char *, size_t))v13.xsputn)(&v13, __s, v9);
  nout  = v13.__nout_;
  if (v13.__nout_ == v13.__eout_)
  {
    ((void (*)(std::stringbuf *, uint64_t))v13.overflow)(&v13, 47LL);
  }

  else
  {
    ++v13.__nout_;
    *nout  = 47;
  }

  snprintf(__s, 0x2EuLL, "%d", *((unsigned __int8 *)this + 16));
  size_t v11 = strlen(__s);
  ((void (*)(std::stringbuf *, char *, size_t))v13.xsputn)(&v13, __s, v11);
  std::stringbuf::str(a2, &v13);
  return std::streambuf::~streambuf(&v13);
}

void sub_1003821E8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void *otbr::MacAddress::ToString@<X0>(otbr::MacAddress *this@<X0>, void *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, __str);
}

void *getDeviceName()
{
  if (getDeviceName_onceToken != -1) {
    dispatch_once(&getDeviceName_onceToken, &__block_literal_global_12);
  }
  return &getDeviceName_deviceName;
}

void __getDeviceName_block_invoke(id a1)
{
  unsigned __int8 v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIDevice currentDevice](&OBJC_CLASS___UIDevice, "currentDevice"));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 name]);

  id v3 = v2;
  __strcpy_chk(&getDeviceName_deviceName, [v3 UTF8String], 256);
}

void otbr::DnsUtils::UnescapeInstanceName(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0]  = 0LL;
  a2->__r_.__value_.__l.__size_  = 0LL;
  a2->__r_.__value_.__l.__cap_  = 0LL;
  else {
    std::string::size_type v4 = a1[1];
  }
  std::string::reserve(a2, v4);
  if (v4)
  {
    uint64_t v5 = 0LL;
    for (unsigned int i = 0; ; ++i)
    {
      uint64_t v7 = (uint64_t *)*a1;
      uint64_t v8 = *((char *)a1 + 23) >= 0 ? (uint64_t)a1 : *a1;
      int v9 = *(unsigned __int8 *)(v8 + v5);
      if (v9 != 92) {
        break;
      }
      uint64_t v10 = i + 3;
      if (i >= 0xFFFFFFFD) {
        goto LABEL_28;
      }
      unint64_t v11 = i + 1LL;
      if (v4 > v10
        && (*(char *)(v8 + v11) & 0x80000000) == 0
        && (uint64_t v12 = *(unsigned __int8 *)(v8 + v11), (_DefaultRuneLocale.__runetype[v12] & 0x400) != 0)
        && (*(char *)(v8 + i + 2) & 0x80000000) == 0
        && (uint64_t v13 = *(unsigned __int8 *)(v8 + i + 2), (_DefaultRuneLocale.__runetype[v13] & 0x400) != 0)
        && (int v14 = *(char *)(v8 + v10), (v14 & 0x80000000) == 0)
        && (_DefaultRuneLocale.__runetype[v14] & 0x400) != 0)
      {
        std::string::push_back(a2, 10 * v13 + 100 * v12 + v14 + 48);
        i += 3;
      }

      else
      {
        if (v4 <= v11) {
          break;
        }
        std::string::push_back(a2, *((_BYTE *)v7 + v11));
        ++i;
      }

void sub_1003824BC(_Unwind_Exception *exception_object)
{
}

uint64_t *otbr::DnsUtils::CheckHostnameSanity(uint64_t *result)
{
  if (*((char *)result + 23) < 0)
  {
    uint64_t v1 = result[1];
    if (!v1) {
      goto LABEL_8;
    }
    __n128 result = (uint64_t *)*result;
  }

  else
  {
    uint64_t v1 = *((unsigned __int8 *)result + 23);
    if (!*((_BYTE *)result + 23)) {
LABEL_8:
    }
      otbr::DnsUtils::CheckHostnameSanity();
  }

  if (*((_BYTE *)result + v1 - 1) != 46) {
    otbr::DnsUtils::CheckHostnameSanity();
  }
  return result;
}

std::string::size_type otbr::DnsUtils::CheckServiceNameSanity(std::string *this)
{
  if (((char)this->__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    if (this->__r_.__value_.__s.__size_)
    {
      size  = this->__r_.__value_.__s.__size_;
      goto LABEL_5;
    }

void FaultInfo::setControlInterface()
{
  v0  = 136315394;
  uint64_t v1 = "com.apple.wpantund.ncp";
  __int16 v2 = 2080;
  id v3 = "default";
  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging1 Module is not defined for SubSystem: %s, Category: %s",  (uint8_t *)&v0,  0x16u);
}

void CAMetricsHandlers_handle_getprop_joinerRssi()
{
}

void CAMetricsHandlers_handle_getprop_bbrCounters()
{
}

void CAMetricsHandlers_handle_getprop_linkLossCounters()
{
}

void CAMetricsHandlers_handle_getprop_nbrRssi()
{
}

void CAMetricsHandlers_handle_getprop_macPktLqi()
{
}

void CAMetricsHandlers_handle_getprop_macPktSize()
{
}

void CAMetricsHandlers_handle_getprop_frameTxPowerHist()
{
}

void CAMetricsHandlers_handle_getprop_neighborTxPowerHist()
{
}

void CAMetricsHandlers_handle_getprop_neighborEnergySavingsFactorHist()
{
}

void CAMetricsHandlers_handle_getprop_radiocounters()
{
}

void CAMetricsHandlers_handle_getprop_radiostat()
{
}

void CAMetricsHandlers_handle_getprop_generic_function()
{
}

void CAMetricsHandlers_handle_getprop_macerror()
{
}

void CAMetricsHandlers_handle_getprop_macretry()
{
}

void CAMetricsHandlers_handle_getprop_ccaEnergyDetect()
{
}

void CAMetricsHandlers_handle_getprop_csmaBackoff()
{
}

void CAMetricsHandlers_handle_getprop_allmac()
{
}

void CAMetricsHandlers_handle_getprop_vendorcoex_histograms()
{
}

void CAMetricsHandlers_handle_getprop_vendorcoex()
{
}

void CAMetricsHandlers_handle_getprop_threadmle()
{
}

void CAMetricsHandlers_handle_getprop_allipv6()
{
}

void CAMetricsHandlers_handle_getprop_trel_link_counters()
{
}

void CAMetricsHandlers_handle_getprop_allTriggerMetrics_accessory_specific()
{
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_3((void *)&_mh_execute_header, v0, v1, "%s:%d: msg is not of type XPC_ARRAY", v2, v3, v4, v5, v6);
}

void CAMetricsHandlers_handle_getprop_connectednodes()
{
}

void PcapManager::start_pcap_capture()
{
}

{
  int *v0;
  void *v1;
  os_log_t v2;
  os_log_type_t v3;
  const char *v4;
  uint8_t *v5;
  v0  = __error();
  strerror(*v0);
  __error();
  OUTLINED_FUNCTION_7();
  _os_log_error_impl(v1, v2, v3, v4, v5, 0x1Cu);
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0( (void *)&_mh_execute_header,  v0,  v1,  "SNIFFER_TLF::start_pcap_capture: pcap already in progress\n",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_t v0;
  uint8_t v1[16];
  OUTLINED_FUNCTION_2();
  _os_log_debug_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_DEBUG,  "SNIFFER_TLF::Starting pcap, checking descriptor",  v1,  2u);
  OUTLINED_FUNCTION_1();
}

void PcapManager::start_pcap_capture(char *a1, void *a2, os_log_s *a3)
{
  if (*a1 < 0) {
    a2  = (void *)*a2;
  }
  LODWORD(vot::NetworkData::NetworkDataTlv::SetType(this, 3) = 136315138;
  HIDWORD(vot::NetworkData::NetworkDataTlv::SetType(this, 3) = (_DWORD)a2;
  OUTLINED_FUNCTION_5( (void *)&_mh_execute_header,  (uint64_t)a2,  a3,  "SNIFFER_TLF::Starting pcap, checking fd path : %s",  v3);
  OUTLINED_FUNCTION_2_0();
}

void PcapManager::stop_pcap_capture()
{
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0((void *)&_mh_execute_header, v0, v1, "SNIFFER_TLF::stop_pcap_capture\n", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

void PcapManager::insert_fd()
{
  v0  = __error();
  strerror(*v0);
  __error();
  OUTLINED_FUNCTION_7();
  _os_log_error_impl(v1, v2, v3, v4, v5, 0x18u);
}

void PcapManager::new_fd()
{
  v0  = __error();
  strerror(*v0);
  __error();
  OUTLINED_FUNCTION_7();
  _os_log_error_impl(v1, v2, v3, v4, v5, 0x12u);
}

void PcapManager::remove_old_pcap_files(char *a1, uint64_t *a2, os_log_s *a3)
{
  if (*a1 >= 0) {
    LODWORD(vot::NetworkData::NetworkDataTlv::SetType(this, 3) = (_DWORD)a2;
  }
  else {
    uint64_t v3 = *a2;
  }
  LODWORD(vot::NetworkData::NetworkDataTlv::SetType(this, 4) = 136315138;
  HIDWORD(vot::NetworkData::NetworkDataTlv::SetType(this, 4) = v3;
  OUTLINED_FUNCTION_5( (void *)&_mh_execute_header,  (uint64_t)a2,  a3,  "PcapManager::remove_old_pcap_files => oldest file deleted : %s",  v4);
  OUTLINED_FUNCTION_2_0();
}

void PcapManager::remove_old_pcap_files()
{
  OUTLINED_FUNCTION_0( (void *)&_mh_execute_header,  v0,  v1,  "PcapManager::remove_old_pcap_files => invalid oldest filepath saved!",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0( (void *)&_mh_execute_header,  v0,  v1,  "PcapManager::remove_old_pcap_files => Packet directory path is invalid!",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

void PcapManager::push_packet_to_file(uint64_t a1, os_log_s *a2, uint64_t a3)
{
  uint64_t v3 = (void *)(a1 + 32);
  int v4 = 136315138;
  uint64_t v5 = v3;
  OUTLINED_FUNCTION_8( (void *)&_mh_execute_header,  a2,  a3,  "SNIFFER_TLF:: Could not get file size :%s for sniffer file.",  (uint8_t *)&v4);
  OUTLINED_FUNCTION_2_0();
}

void PcapManager::push_packet_to_file(char *a1, void *a2, os_log_s *a3)
{
  if (*a1 < 0) {
    a2  = (void *)*a2;
  }
  int v3 = 136315138;
  int v4 = a2;
  OUTLINED_FUNCTION_8( (void *)&_mh_execute_header,  a3,  (uint64_t)a3,  "SNIFFER_TLF:: Failed to open sniffer file : %s for writing after backup sniff file.",  (uint8_t *)&v3);
  OUTLINED_FUNCTION_2_0();
}

void AWDMetricsClient_TriggerAutoBugCaptures( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_2_1((void *)&_mh_execute_header, a1, a3, "AWDMetrics : %s", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_2_0();
}

void AWDMetricsClient_TriggerAutoBugCaptures()
{
}

void ___Z39AWDMetricsClient_TriggerAutoBugCapturesNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_S5_Pc_block_invoke_cold_1()
{
  _DWORD *v1 = 136315394;
  OUTLINED_FUNCTION_4_0(v2, (uint64_t)v1, (uint64_t)"AWDMetricsClient_TriggerAutoBugCaptures_block_invoke");
  OUTLINED_FUNCTION_3_1((void *)&_mh_execute_header, v3, v4, "%s : SDR rejected snapshotWithSignature. Reason %@", v5);

  OUTLINED_FUNCTION_8_0();
}

void AWDMetricsClient_TriggerAutoBugCaptures_internal( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_2_1((void *)&_mh_execute_header, a1, a3, "AWDMetrics : %s", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_2_0();
}

void ___Z48AWDMetricsClient_TriggerAutoBugCaptures_internalNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_S5_S5_S5_S5_Pc_block_invoke_cold_1()
{
  _DWORD *v1 = 136315394;
  OUTLINED_FUNCTION_4_0(v2, (uint64_t)v1, (uint64_t)"AWDMetricsClient_TriggerAutoBugCaptures_internal_block_invoke");
  OUTLINED_FUNCTION_3_1((void *)&_mh_execute_header, v3, v4, "%s : SDR rejected snapshotWithSignature. Reason %@", v5);

  OUTLINED_FUNCTION_8_0();
}

void AWDMetricsClient_TriggerGroupAutoBugCapture( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_2_1((void *)&_mh_execute_header, a1, a3, "AWDMetrics : %s", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_2_0();
}

void AWDMetricsClient_TriggerGroupAutoBugCapture()
{
}

void ___Z43AWDMetricsClient_TriggerGroupAutoBugCaptureNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_S5_S5_S5_b_block_invoke_cold_1()
{
  _DWORD *v1 = 136315394;
  OUTLINED_FUNCTION_4_0(v2, (uint64_t)v1, (uint64_t)"AWDMetricsClient_TriggerGroupAutoBugCapture_block_invoke");
  OUTLINED_FUNCTION_3_1((void *)&_mh_execute_header, v3, v4, "%s : SDR rejected snapshotWithSignature. Reason %@", v5);

  OUTLINED_FUNCTION_8_0();
}

void AWDMetricsClient_GroupAutoBugCapture_Rx( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_2_1((void *)&_mh_execute_header, a1, a3, "AWDMetrics : %s", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_2_0();
}

void ___Z39AWDMetricsClient_GroupAutoBugCapture_RxNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_S5_S5_S5_S5_b_block_invoke_cold_1()
{
  _DWORD *v1 = 136315394;
  OUTLINED_FUNCTION_4_0(v2, (uint64_t)v1, (uint64_t)"AWDMetricsClient_GroupAutoBugCapture_Rx_block_invoke");
  OUTLINED_FUNCTION_3_1((void *)&_mh_execute_header, v3, v4, "%s : SDR rejected snapshotWithSignature. Reason %@", v5);

  OUTLINED_FUNCTION_8_0();
}

void AWDMetricsClient_TriggerAutoBugCapture()
{
}

{
  os_log_t v0;
  uint8_t v1[16];
  OUTLINED_FUNCTION_2();
  _os_log_debug_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_DEBUG,  "AWDMetrics : AWDMetricsClient_TriggerAutoBugCapture",  v1,  2u);
  OUTLINED_FUNCTION_1();
}

void ___Z38AWDMetricsClient_TriggerAutoBugCaptureN9FaultInfo14NCP_FAULT_INFOEPc_block_invoke_cold_1()
{
  *(_DWORD *)uint64_t v1 = 138412290;
  *(void *)(v1 + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v2;
  _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "AWDMetricsClient_TriggerAutoBugCapture : SDR rejected snapshotWithSignature. Reason %@",  v4,  0xCu);

  OUTLINED_FUNCTION_8_0();
}

void AWDMetricsHandlers_handle_getprop_joinerRssi()
{
}

void AWDMetricsHandlers_handle_getprop_linkLossCounters()
{
}

void AWDMetricsHandlers_handle_getprop_nbrRssi()
{
}

void AWDMetricsHandlers_handle_getprop_macPktLqi()
{
}

void AWDMetricsHandlers_handle_getprop_macPktSize()
{
}

void AWDMetricsHandlers_handle_getprop_frameTxPowerHist()
{
}

void AWDMetricsHandlers_handle_getprop_neighborTxPowerHist()
{
}

void AWDMetricsHandlers_handle_getprop_neighborEnergySavingsFactorHist()
{
}

void AWDMetricsHandlers_handle_getprop_radiocounters()
{
}

void AWDMetricsHandlers_handle_getprop_radiostat()
{
}

void AWDMetricsHandlers_handle_getprop_otradiocounters()
{
}

void AWDMetricsHandlers_handle_getprop_macerror()
{
}

void AWDMetricsHandlers_handle_getprop_macretry()
{
}

void AWDMetricsHandlers_handle_getprop_ccaEnergyDetect()
{
}

void AWDMetricsHandlers_handle_getprop_csmaBackoff()
{
}

void AWDMetricsHandlers_handle_getprop_allmac()
{
}

void AWDMetricsHandlers_handle_getprop_vendorcoex_histograms()
{
}

void AWDMetricsHandlers_handle_getprop_vendorcoex()
{
}

void AWDMetricsHandlers_handle_getprop_threadmle()
{
}

void AWDMetricsHandlers_handle_getprop_allipv6()
{
}

void AWDMetricsHandlers_handle_getprop_connectednodes()
{
}

void ne_tunnel_open_cold_3(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "RETRY of NEVirtualInterfaceCreateNexus returned NULL",  v1,  2u);
}

void boost::any_cast<std::list<std::map<std::string,boost::any>>>( uint64_t **a1, uint64_t *a2, void *a3, uint64_t a4, int a5, uint64_t a6)
{
  int v9 = *a1;
  uint64_t v10 = *a2;
  uint64_t v11 = **a1;
  *(void *)(v11 + 8)  = *(void *)(*a2 + 8);
  **(void **)(v10 + 8)  = v11;
  *a3  = 0LL;
  if (v9 != a2)
  {
    do
    {
      uint64_t v13 = (uint64_t *)v9[1];
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy( (uint64_t)(v9 + 2),  (char *)v9[3]);
      operator delete(v9);
      int v9 = v13;
    }

    while (v13 != a2);
  }

  *(void *)a6  = a4;
  *(_DWORD *)(a6 + 8)  = a5;
}

void postFollowUpNotification(os_log_t log)
{
  int v1 = 136315394;
  uint64_t v2 = "postFollowUpNotification";
  __int16 v3 = 1024;
  int v4 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "%s: FAULT detected, Failed Post Followup Notification : %d, asserting !!! ",  (uint8_t *)&v1,  0x12u);
  OUTLINED_FUNCTION_2_0();
}

void postFollowUpNotification( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void clearFollowUpNotification( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void dskeychainRcp::printCFData()
{
}

{
  os_log_t v0;
  uint8_t v1[24];
  OUTLINED_FUNCTION_8_1();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, " %s", v1, 0xCu);
  OUTLINED_FUNCTION_2_0();
}

void dskeychainRcp::AddKeychainItem()
{
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0( (void *)&_mh_execute_header,  v0,  v1,  "dskeychain::AddKeychainItem Credential exists. Will update instead.",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

void dskeychainRcp::FindKeychainItem()
{
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_8_1();
  OUTLINED_FUNCTION_1_1( (void *)&_mh_execute_header,  v0,  v1,  "dskeychain::FindKeychainItem: Keychain item not found: %p",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_2_0();
}

void dskeychainRcp::DeleteKeychainItem()
{
}

void dskeychainRcp::AddDataSet(os_log_t log)
{
  v1[0]  = 67109120;
  v1[1]  = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "dskeychain::AddDataSet: Empty data, len  = %d",  (uint8_t *)v1,  8u);
  OUTLINED_FUNCTION_1();
}

void dskeychainRcp::AddDataSet()
{
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0( (void *)&_mh_execute_header,  v0,  v1,  "dskeychain::AddDataSet: Pending Dataset: Invoking SecItemPersistKeychainWritesAtHighPerformanceCost",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

void dskeychainRcp::FindDataSet()
{
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0( (void *)&_mh_execute_header,  v0,  v1,  "dskeychain::FindDataSet: Unable to find the keychain item",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

void dskeychainRcp::FindAndGetDataSet()
{
}

void XPCIPCAPI_v1_rcp::interface_update_accessory_addr()
{
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0((void *)&_mh_execute_header, v0, v1, "Missing ipaddr_lookup", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0((void *)&_mh_execute_header, v0, v1, "Missing host_info", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

void XPCIPCAPI_v1_rcp::interface_update_accessory_addr(os_log_t log)
{
  v1[0]  = 67109120;
  v1[1]  = 50;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "String size exceeded for inputs [max= %d]",  (uint8_t *)v1,  8u);
  OUTLINED_FUNCTION_1();
}

void XPCIPCAPI_v1_rcp::interface_prop_get_handler(os_log_s *a1, uint64_t a2, uint64_t a3)
{
  int v3 = 136315138;
  uint64_t v4 = "interface_prop_get_handler";
  OUTLINED_FUNCTION_8((void *)&_mh_execute_header, a1, a3, "%s: reconnect_thread_network", (uint8_t *)&v3);
  OUTLINED_FUNCTION_2_0();
}

void XPCIPCAPI_v1_rcp::interface_prop_get_handler()
{
  int v2 = 136315138;
  uint64_t v3 = v0;
  OUTLINED_FUNCTION_8( (void *)&_mh_execute_header,  v1,  (uint64_t)v1,  "property_get_value: Unsupported property %s",  (uint8_t *)&v2);
  OUTLINED_FUNCTION_2_0();
}

void XPCIPCAPI_v1_rcp::interface_hard_reset_handler()
{
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0((void *)&_mh_execute_header, v0, v1, "fillmoreController reset failure", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

void InternalClientsInterface::InternalClientsInterface(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "OTD InternalClientsInterface Server - Started",  v1,  2u);
}

void HostCmdTask::free_apidata()
{
}

void RcpHostContext::GetThreadStartMetrics()
{
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_3_2((void *)&_mh_execute_header, v0, v1, "%s: %d", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_2_0();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_3_2((void *)&_mh_execute_header, v0, v1, "%s: %d", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_2_0();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_3_2((void *)&_mh_execute_header, v0, v1, "%s: %u ms", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_2_0();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_3_2((void *)&_mh_execute_header, v0, v1, "%s: %u ms", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_2_0();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_3_2((void *)&_mh_execute_header, v0, v1, "%s: %u ms", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_2_0();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_3_2((void *)&_mh_execute_header, v0, v1, "%s: %u ms", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_2_0();
}

void RcpHostContext::is_device_state_valid_for_service_or_route_modification()
{
}

void RcpHostContext::handle_rcp_reset(int a1, os_log_s *a2)
{
  v2[0]  = 67109120;
  v2[1]  = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "handle_rcp_reset:: status[%d]",  (uint8_t *)v2,  8u);
  OUTLINED_FUNCTION_1();
}

void RcpHostContext::handle_hard_reset()
{
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0((void *)&_mh_execute_header, v0, v1, "fillmoreController reset failure", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0((void *)&_mh_execute_header, v0, v1, "Hard Reset RCP", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

void RcpHostContext::captureABC()
{
}

void RcpHostContext::captureGroupABC( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void RcpHostContext::TriggeredGroupABC( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void RcpHostContext::too_many_partitions()
{
}

void RcpHostContext::too_many_partitions(uint64_t a1, uint64_t *a2, os_log_t log)
{
  int v3 = *(_DWORD *)(a1 + 776);
  uint64_t v4 = *(void *)(a1 + 768);
  uint64_t v5 = *a2;
  v6[0]  = 67109632;
  v6[1]  = v3;
  __int16 v7 = 2048;
  uint64_t v8 = v4;
  __int16 v9 = 2048;
  uint64_t v10 = v5;
  _os_log_debug_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEBUG,  "numPartitions=%d, Partition-time-Sec=%ld, Curr-Time-Sec=%ld",  (uint8_t *)v6,  0x1Cu);
}

void InternalIPCAPI::received_network_diagnostics_response(void *a1, uint64_t *a2, os_log_t log)
{
  int v3 = *a1 - *a2;
  if (*a2 == *a1) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = *a2;
  }
  int v5 = 136315650;
  uint8_t v6 = "received_network_diagnostics_response";
  __int16 v7 = 1024;
  int v8 = v3;
  __int16 v9 = 2080;
  uint64_t v10 = v4;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "ERROR %s got empty data in response length=%d data=%s",  (uint8_t *)&v5,  0x1Cu);
}

void InternalIPCAPI::received_network_diagnostics_response(os_log_t log)
{
  int v1 = 136315138;
  uint64_t v2 = "received_network_diagnostics_response";
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "%s any_cast to convert the value to type Data failed \n",  (uint8_t *)&v1,  0xCu);
  OUTLINED_FUNCTION_2_0();
}

void InternalIPCAPI::interface_send_network_diagnostics_req(int a1, os_log_s *a2)
{
  v2[0]  = 67109376;
  v2[1]  = a1;
  __int16 v3 = 1024;
  int v4 = 16;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "TDM: WPANTUND_v1 Error dest_addr_len=%d does not match sizeof(dest)=%d\n",  (uint8_t *)v2,  0xEu);
  OUTLINED_FUNCTION_2_0();
}

void createTmpSubDir(os_log_t log)
{
  *(_WORD *)int v1 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "Failed to set user directory suffix: com.apple.threadradiod",  v1,  2u);
}

void ___Z17create_xpc_serverP16dispatch_queue_sS0__block_invoke_cold_2(const std::exception *a1)
{
}

void ___Z17create_xpc_serverP16dispatch_queue_sS0__block_invoke_cold_4(const std::exception *a1)
{
}

void delete_xpc_server(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "xpc_server_helper: delete_xpc_server called",  v1,  2u);
}

void setDaemonExit_cold_1( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void log_create_log_domain_cold_1( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_1( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  a3,  "%s: Input is null, return",  a5,  a6,  a7,  a8,  2u);
  OUTLINED_FUNCTION_2_0();
}

void log_get_logging_obg_cold_1( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_1( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  a3,  "%s: Input is null, return default logObj",  a5,  a6,  a7,  a8,  2u);
  OUTLINED_FUNCTION_2_0();
}

void log_get_logging_obg_cold_2( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_1( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  a3,  "%s: Input memory is corrupt, return default logObj",  a5,  a6,  a7,  a8,  2u);
  OUTLINED_FUNCTION_2_0();
}

void log_get_logging_obg_cold_3(uint64_t a1, uint64_t a2)
{
  int v2 = 136315394;
  uint64_t v3 = a1;
  __int16 v4 = 2080;
  uint64_t v5 = a2;
  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Logging Module is not defined for SubSystem: %s, Category: %s, using default logObj",  (uint8_t *)&v2,  0x16u);
  OUTLINED_FUNCTION_2_0();
}

void OpenFile1M()
{
  v0  = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/Rcp/host-ot-adaptation/RcpConfigHelper.cpp";
  uint64_t v1 = strrchr[abi:ne180100]( "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/Rcp/host-ot-adaptation/RcpConfigHelper.cpp",  47);
  if (v1) {
    v0  = v1 + 1;
  }
  otExitCodeToString(1u);
  otLogCritPlat("%s() at %s:%d: %s", "OpenFile1M", v0, 85, v2);
  handle_daemon_exit();
  exit(1);
}

void XPCIPCServer_rcp::xpc_message_handler(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Message is not a Dictionary", v1, 2u);
}

void CtrXPC::Server::create(std::__shared_weak_count *a1)
{
  p_shared_owners  = (unint64_t *)&a1->__shared_owners_;
  do
    unint64_t v3 = __ldaxr(p_shared_owners);
  while (__stlxr(v3 - 1, p_shared_owners));
  if (!v3)
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }

void CtrXPC::Server::State::create(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "Could not create CtrXPCServer, verify parameters\n",  v1,  2u);
}

void HostInterpreter::ProcessDatasetUpdate()
{
  int v3 = v0;
  OUTLINED_FUNCTION_24( (void *)&_mh_execute_header,  v1,  (uint64_t)v1,  "HostInterpreter::ProcessDatasetUpdate: type[%d] error[%d]",  v2);
  OUTLINED_FUNCTION_2_0();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0( (void *)&_mh_execute_header,  v0,  v1,  "HostInterpreter::ProcessDatasetUpdate: UNKNOWN DATASET TYPE",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_3_0( (void *)&_mh_execute_header,  v0,  v1,  "HostInterpreter::ProcessDatasetUpdate: Pending Dataset Len[%d]",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

void HostInterpreter::ProcessGeneratePSKc()
{
}

void HostInterpreter::ProcessGetRcpCrashDump()
{
  OUTLINED_FUNCTION_3_0((void *)&_mh_execute_header, v0, v1, "SaveCrashLogs returned error %d", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_3_0((void *)&_mh_execute_header, v0, v1, "otPlatVendorGetVersion Error  = %d", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

void HostInterpreter::ProcessInitialize()
{
}

void HostInterpreter::ProcessPeekCmd()
{
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0((void *)&_mh_execute_header, v0, v1, "Process peek cmd", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

void HostInterpreter::ProcessPingNode()
{
}

void HostInterpreter::ProcessPrefixAdd()
{
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_3_0( (void *)&_mh_execute_header,  v0,  v1,  "HostInterpreter::ProcessPrefixAdd: otBorderRouterAddOnMeshPrefix error[%d]",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0( (void *)&_mh_execute_header,  v0,  v1,  "HostInterpreter::ProcessPrefixAdd: Prefix already exists",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_3_0( (void *)&_mh_execute_header,  v0,  v1,  "HostInterpreter::ProcessPrefixAdd: ParseAsIp6Prefix error[%d]",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

void HostInterpreter::ProcessPrefixRemove()
{
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_3_0( (void *)&_mh_execute_header,  v0,  v1,  "HostInterpreter::ProcessPrefixRemove: otBorderRouterRemoveOnMeshPrefix error[%d]",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

void HostInterpreter::ProcessPropertyGet()
{
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_3( (void *)&_mh_execute_header,  v0,  v1,  "HostInterpreter::ProcessPropertyGet[E(0)]: %s Leader extended address cannot be determined] leaderInfoUpdateStatus:%d",  v2,  v3,  v4,  v5,  2u);
  OUTLINED_FUNCTION_2_0();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_3_0( (void *)&_mh_execute_header,  v0,  v1,  "NO UNICAST SERVICE, NETDATA FULL [%d]:",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0((void *)&_mh_execute_header, v0, v1, "Leader re-election Initiated", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_3_0((void *)&_mh_execute_header, v0, v1, "Leader re-election Failed err[%d]", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

void HostInterpreter::ProcessPropertyGet(char *a1, void *a2, os_log_s *a3)
{
  if (*a1 < 0) {
    a2  = (void *)*a2;
  }
  int v3 = 136315138;
  uint64_t v4 = a2;
  OUTLINED_FUNCTION_8( (void *)&_mh_execute_header,  a3,  (uint64_t)a3,  "HostInterpreter::ProcessPropertyGet[E(0)]: %s returned empty address",  (uint8_t *)&v3);
  OUTLINED_FUNCTION_2_0();
}

void HostInterpreter::ProcessPropertyGet(int a1, os_log_s *a2)
{
  int v4 = 136315394;
  uint64_t v5 = otThreadErrorToString(a1);
  OUTLINED_FUNCTION_4_3();
  uint8_t v6 = "vendor:ncp:logsdropped:counter";
  OUTLINED_FUNCTION_1_2((void *)&_mh_execute_header, a2, v3, "Error (%s) getting %s", (uint8_t *)&v4);
  OUTLINED_FUNCTION_4_2();
}

{
  uint64_t v3;
  int v4;
  const char *v5;
  const char *v6;
  int v4 = 136315394;
  uint64_t v5 = otThreadErrorToString(a1);
  OUTLINED_FUNCTION_4_3();
  uint8_t v6 = "vendor:ncp:logsdropped:filter:threshold";
  OUTLINED_FUNCTION_1_2((void *)&_mh_execute_header, a2, v3, "Error (%s) getting %s", (uint8_t *)&v4);
  OUTLINED_FUNCTION_4_2();
}

{
  uint64_t v3;
  int v4;
  const char *v5;
  const char *v6;
  int v4 = 136315394;
  uint64_t v5 = otThreadErrorToString(a1);
  OUTLINED_FUNCTION_4_3();
  uint8_t v6 = "vendor:ncp:logsdropped:filter:timeout:ms";
  OUTLINED_FUNCTION_1_2((void *)&_mh_execute_header, a2, v3, "Error (%s) getting %s", (uint8_t *)&v4);
  OUTLINED_FUNCTION_4_2();
}

{
  uint64_t v3;
  int v4;
  const char *v5;
  const char *v6;
  int v4 = 136315394;
  uint64_t v5 = otThreadErrorToString(a1);
  OUTLINED_FUNCTION_4_3();
  uint8_t v6 = "tx:streaming:enable";
  OUTLINED_FUNCTION_1_2((void *)&_mh_execute_header, a2, v3, "Error (%s) getting %s", (uint8_t *)&v4);
  OUTLINED_FUNCTION_4_2();
}

void HostInterpreter::ProcessPropertySet(int a1, os_log_s *a2)
{
  int v4 = 136315394;
  uint64_t v5 = otThreadErrorToString(a1);
  OUTLINED_FUNCTION_4_3();
  uint8_t v6 = "vendor:ncp:logsdropped:counter";
  OUTLINED_FUNCTION_1_2((void *)&_mh_execute_header, a2, v3, "Error (%s) setting %s", (uint8_t *)&v4);
  OUTLINED_FUNCTION_4_2();
}

{
  uint64_t v3;
  int v4;
  const char *v5;
  const char *v6;
  int v4 = 136315394;
  uint64_t v5 = otThreadErrorToString(a1);
  OUTLINED_FUNCTION_4_3();
  uint8_t v6 = "vendor:ncp:logsdropped:filter:threshold";
  OUTLINED_FUNCTION_1_2((void *)&_mh_execute_header, a2, v3, "Error (%s) setting %s", (uint8_t *)&v4);
  OUTLINED_FUNCTION_4_2();
}

{
  uint64_t v3;
  int v4;
  const char *v5;
  const char *v6;
  int v4 = 136315394;
  uint64_t v5 = otThreadErrorToString(a1);
  OUTLINED_FUNCTION_4_3();
  uint8_t v6 = "vendor:ncp:logsdropped:filter:timeout:ms";
  OUTLINED_FUNCTION_1_2((void *)&_mh_execute_header, a2, v3, "Error (%s) setting %s", (uint8_t *)&v4);
  OUTLINED_FUNCTION_4_2();
}

{
  uint64_t v3;
  int v4;
  const char *v5;
  const char *v6;
  int v4 = 136315394;
  uint64_t v5 = otThreadErrorToString(a1);
  OUTLINED_FUNCTION_4_3();
  uint8_t v6 = "tx:streaming:enable";
  OUTLINED_FUNCTION_1_2((void *)&_mh_execute_header, a2, v3, "Error (%s) getting %s", (uint8_t *)&v4);
  OUTLINED_FUNCTION_4_2();
}

void HostInterpreter::ProcessPropertySet(char *a1, void *a2)
{
  if (*a1 < 0) {
    a2  = (void *)*a2;
  }
  int v3 = 136315394;
  int v4 = a2;
  OUTLINED_FUNCTION_4_3();
  uint64_t v5 = "Property Not Found";
  OUTLINED_FUNCTION_1_2( (void *)&_mh_execute_header,  v2,  (uint64_t)v2,  "HostInterpreter::ProcessPropertySet[E(0)]: %s  = %s",  (uint8_t *)&v3);
  OUTLINED_FUNCTION_2_0();
}

void HostInterpreter::ProcessRcpReportCrashInfo()
{
  OUTLINED_FUNCTION_8_2( (void *)&_mh_execute_header,  v0,  v1,  "ProcessRcpReportCrashInfo: Crash type in stability_settings  = %d",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

void HostInterpreter::ProcessReconnectThread()
{
}

void HostInterpreter::ProcessResolveTrelPeers()
{
}

void HostInterpreter::ProcessRouteAdd()
{
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_3_0( (void *)&_mh_execute_header,  v0,  v1,  "HostInterpreter::ProcessRouteAdd: otBorderRouterAddRoute error[%d]",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0( (void *)&_mh_execute_header,  v0,  v1,  "HostInterpreter::ProcessRouteAdd: Offmesh Prefix already exists",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_3_0( (void *)&_mh_execute_header,  v0,  v1,  "HostInterpreter::ProcessRouteAdd: ParseAsIp6Prefix error[%d]",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

void HostInterpreter::ProcessRouteRemove()
{
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_3_0( (void *)&_mh_execute_header,  v0,  v1,  "HostInterpreter::ProcessRouteRemove: ParseAsIp6Prefix error[%d]",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

void HostInterpreter::ProcessServiceAdd()
{
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_3_0( (void *)&_mh_execute_header,  v0,  v1,  "HostInterpreter::ProcessServiceAdd: otServerAddService error[%d]",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

void HostInterpreter::ProcessServiceRemove( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void HostInterpreter::ProcessServiceRemove()
{
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_3_0( (void *)&_mh_execute_header,  v0,  v1,  "HostInterpreter::ProcessServiceRemove: otServerRemoveService error[%d]",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

void HostInterpreter::ProcessUpdateAccessoryAddr()
{
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_3_0((void *)&_mh_execute_header, v0, v1, "ipaddr_lookup parsing error[%d]", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7_0( (void *)&_mh_execute_header,  v0,  v1,  "HostInterpreter::ProcessUpdateAccessoryAddr",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

void HostInterpreter::ProcessUpdateWiFiLinkState()
{
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7_0( (void *)&_mh_execute_header,  v0,  v1,  "ProcessUpdateWiFiLinkState: Disable TREL here",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7_0((void *)&_mh_execute_header, v0, v1, "InterfaceName is nullptr", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7_0((void *)&_mh_execute_header, v0, v1, "InterfaceUp is false", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7_0( (void *)&_mh_execute_header,  v0,  v1,  "ProcessUpdateWiFiLinkState: Enable TREL here",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7_0((void *)&_mh_execute_header, v0, v1, "WiFi channel is 2G", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

void HostInterpreter::ProcessUpdateWiFiLinkState( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void HostInterpreter::clearRcpSrpServiceABCTimer( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void HostInterpreter::checkAnycastSrpServiceConvergence()
{
}

void HostInterpreter::checkSrpAdvertisedWithoutPrefix()
{
}

void HostInterpreter::checkChildRoleDetection()
{
}

void HostInterpreter::checkUnicastSrpServiceConvergence()
{
}

void HostInterpreter::checkSrpPrefixCovergence()
{
}

void HostInterpreter::force_leader_reelection()
{
}

void HostInterpreter::check_thcl()
{
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0((void *)&_mh_execute_header, v0, v1, "[THCL CHECK] FAILURE", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0( (void *)&_mh_execute_header,  v0,  v1,  "[THCL CHECK] FAILURE: could not get CAL content from RCP flash",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

void HostInterpreter::restore_health_metrics_from_persisted_db()
{
}

void HostInterpreter::restore_awd_stability_counters_from_persisted_db()
{
}

void HostInterpreter::HandleDiagnosticGetResponseFromLeader(uint64_t *a1, int a2, os_log_s *a3)
{
  int v7 = a2;
  OUTLINED_FUNCTION_24( (void *)&_mh_execute_header,  a3,  v5,  "HostInterpreter::HandleDiagnosticGetResponseFromLeader Leader rloc16:0x%x does not match DIAG rsp rloc16:0x%x",  v6);
  OUTLINED_FUNCTION_4_2();
}

void HostInterpreter::HandleDiagnosticGetResponse()
{
}

void HostInterpreter::HandleDiagnosticGetResponse(uint64_t a1, os_log_s *a2, uint64_t a3)
{
  int v3 = 136315138;
  uint64_t v4 = a1;
  OUTLINED_FUNCTION_8( (void *)&_mh_execute_header,  a2,  a3,  "TDM HostInterpreter::HandleDiagnosticGetResponse Message is nullptr for peer:%s",  (uint8_t *)&v3);
  OUTLINED_FUNCTION_2_0();
}

void HostInterpreter::remove_all_address_prefix_route_entries(uint8_t *a1, _BYTE *a2, os_log_s *a3)
{
  *a1  = 0;
  *a2  = 0;
  OUTLINED_FUNCTION_9_1( (void *)&_mh_execute_header,  a3,  (uint64_t)a3,  "HostInterpreter::remove_all_address_prefix_route_entries: otBorderRouterRemoveRoute success",  a1);
}

{
  *a1  = 0;
  *a2  = 0;
  OUTLINED_FUNCTION_9_1( (void *)&_mh_execute_header,  a3,  (uint64_t)a3,  "HostInterpreter::remove_all_address_prefix_route_entries: otBorderRouterRemoveOnMeshPrefix success",  a1);
}

void HostInterpreter::ProcessUpdateLeaderInfo()
{
  OUTLINED_FUNCTION_8_2( (void *)&_mh_execute_header,  v0,  v1,  "HostInterpreter::ProcessUpdateLeaderInfo Leader info did not change, return here leaderRloc16=0x%x",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_8_2( (void *)&_mh_execute_header,  v0,  v1,  "HostInterpreter::ProcessUpdateLeaderInfo Leader is current node, return here rloc16=0x%x",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

void HostInterpreter::HandleDiagGetDeviceDataResponse()
{
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0((void *)&_mh_execute_header, v0, v1, "kNmDeviceData tlv not found", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_3_0((void *)&_mh_execute_header, v0, v1, "counter  = %d", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

void HostInterpreter::HandleDiagGetDeviceDataResponse(uint64_t a1, os_log_s *a2, uint64_t a3)
{
  int v3 = 136315138;
  uint64_t v4 = a1;
  OUTLINED_FUNCTION_8( (void *)&_mh_execute_header,  a2,  a3,  "NM HostInterpreter::HandleDiagGetDeviceDataResponse Message is nullptr for peer:%s",  (uint8_t *)&v3);
  OUTLINED_FUNCTION_2_0();
}

void HostInterpreter::GetRcpStateInfo()
{
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_8_2((void *)&_mh_execute_header, v0, v1, "Role Leader: %u", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_8_2((void *)&_mh_execute_header, v0, v1, "Role Router: %u", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_8_2((void *)&_mh_execute_header, v0, v1, "Role Child: %u", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_8_2((void *)&_mh_execute_header, v0, v1, "Role Detached: %u", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_8_2((void *)&_mh_execute_header, v0, v1, "Role Disabled: %u", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7_0((void *)&_mh_execute_header, v0, v1, "MLE Counters:", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_8_2((void *)&_mh_execute_header, v0, v1, "HomeKitMsgErrorRatePercent: %u%%", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_8_2((void *)&_mh_execute_header, v0, v1, "MatterMsgErrorRatePercent: %u%%", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7_0((void *)&_mh_execute_header, v0, v1, "IP Counters:", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7_0( (void *)&_mh_execute_header,  v0,  v1,  "| Role | RLOC16 | ExtendedAddress  | Avg RSSI | Last RSSI | Age | ThreadVersion|Router IdSeq|Leader fDataV|Leader sD ataV| MMER | HMER",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7_0((void *)&_mh_execute_header, v0, v1, "Neighbours and Children:", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_8_2((void *)&_mh_execute_header, v0, v1, "CoapQueue.mNumBuffers: %u", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_8_2((void *)&_mh_execute_header, v0, v1, "CoapQueue.mNumMessages: %u", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_8_2((void *)&_mh_execute_header, v0, v1, "MleQueue.mNumBuffers: %u", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_8_2((void *)&_mh_execute_header, v0, v1, "MleQueue.mNumMessages: %u", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_8_2((void *)&_mh_execute_header, v0, v1, "MplQueue.mNumBuffers: %u", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_8_2((void *)&_mh_execute_header, v0, v1, "MplQueue.mNumMessages: %u", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_8_2((void *)&_mh_execute_header, v0, v1, "Ip6Queue.mNumBuffers: %u", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_8_2((void *)&_mh_execute_header, v0, v1, "Ip6Queue.mNumMessages: %u", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_8_2((void *)&_mh_execute_header, v0, v1, "6loReassemblyQueue.mNumBuffers: %u", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_8_2((void *)&_mh_execute_header, v0, v1, "6loReassemblyQueue.mNumMessages: %u", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_8_2((void *)&_mh_execute_header, v0, v1, "6loSendQueue.mNumBuffers: %u", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_8_2((void *)&_mh_execute_header, v0, v1, "6loSendQueue.mNumMessages: %u", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_8_2((void *)&_mh_execute_header, v0, v1, "FreeBuffers: %u", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_8_2((void *)&_mh_execute_header, v0, v1, "TotalBuffers: %u", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7_0((void *)&_mh_execute_header, v0, v1, "Message Buffers:", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7_0((void *)&_mh_execute_header, v0, v1, "IPv6 Addresses:", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_8_2((void *)&_mh_execute_header, v0, v1, "partition_id: %u", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_8_2((void *)&_mh_execute_header, v0, v1, "ExtendedAddress: %u", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7_0((void *)&_mh_execute_header, v0, v1, "RCP status dump begin", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

void HostInterpreter::GetThreadHealthMetrics()
{
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_3_2((void *)&_mh_execute_header, v0, v1, "%s: %u", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_2_0();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_3_2((void *)&_mh_execute_header, v0, v1, "%s: %u", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_2_0();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_3_2((void *)&_mh_execute_header, v0, v1, "%s: %u", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_2_0();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_3_2((void *)&_mh_execute_header, v0, v1, "%s: %u", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_2_0();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_3_2((void *)&_mh_execute_header, v0, v1, "%s: %u", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_2_0();
}

void HostInterpreter::persist_awd_stability_counters()
{
}

void HostInterpreter::save_awd_stability_counters(const __CFString *a1, int a2, os_log_t log)
{
  int v6 = xmmword_100477240;
  int v5 = DWORD1(xmmword_100477240);
  uint64_t v7 = *((void *)&xmmword_100477240 + 1);
  if (a1)
  {
    SystemEncoding  = CFStringGetSystemEncoding();
    CStringPtr  = CFStringGetCStringPtr(a1, SystemEncoding);
  }

  else
  {
    CStringPtr  = " ";
  }

  v11[0]  = 67110914;
  v11[1]  = v6;
  __int16 v12 = 1024;
  int v13 = v5;
  __int16 v14 = 2048;
  uint64_t v15 = v7;
  __int16 v16 = 2080;
  char v17 = CStringPtr;
  __int16 v18 = 1024;
  int v19 = a2;
  __int16 v20 = 1024;
  int v21 = xmmword_100477250;
  __int16 v22 = 1024;
  int v23 = DWORD1(xmmword_100477250);
  __int16 v24 = 1024;
  int v25 = WORD4(xmmword_100477250);
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "\n Fault Block Random Id: %u \n Crash Type: %d \n Timestamp(ms): %llu \n Timestamp(format): [%s.%03d]\n Address: 0x%0x \n Line: %d \n Crash Count: %d",  (uint8_t *)v11,  0x3Au);
}

void HostInterpreter::SaveCrashLogs()
{
}

void HostInterpreter::processCommand()
{
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0( (void *)&_mh_execute_header,  v0,  v1,  "=====> processHostCmd[HOST_CMD_NULL/HOST_CMD_DEFAULT_OTCTL]",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0( (void *)&_mh_execute_header,  v0,  v1,  "=====> processHostCmd[HOST_CMD_CONFIG_DEEP_SLEEP]",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7_0( (void *)&_mh_execute_header,  v0,  v1,  "=====> processHostCmd[HOST_CMD_UPDATE_BACKBONE_STATE]",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7_0( (void *)&_mh_execute_header,  v0,  v1,  "=====> processHostCmd[HOST_CMD_UPDATE_WIFILINK_STATE]",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0( (void *)&_mh_execute_header,  v0,  v1,  "=====> processHostCmd[HOST_CMD_TREL_RESOLVE_PEERS]",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0( (void *)&_mh_execute_header,  v0,  v1,  "=====> processHostCmd[HOST_CMD_PING_NODE]",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7_0( (void *)&_mh_execute_header,  v0,  v1,  "=====> processHostCmd[HOST_CMD_TRIGGER_GROUP_ABC]",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0( (void *)&_mh_execute_header,  v0,  v1,  "=====> processHostCmd[HOST_CMD_DIAG_GET_DEVICE_DATA]",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0( (void *)&_mh_execute_header,  v0,  v1,  "=====> processHostCmd[HOST_CMD_UPDATE_ACCESSORY_ADDR]",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

void HostInterpreter::rcp_ot_dataset_update()
{
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_3_0((void *)&_mh_execute_header, v0, v1, "Invalid dataset type [%d]", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0((void *)&_mh_execute_header, v0, v1, "Dataset format changed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0((void *)&_mh_execute_header, v0, v1, "Conversion to RCP dataset failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0( (void *)&_mh_execute_header,  v0,  v1,  "Spinel Data decode failure, trying conversion to RCP",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

void processXpcOtctl()
{
}

void boost::any::any<std::list<std::map<std::string,boost::any>> &>(uint64_t **a1, uint64_t *a2, void *a3)
{
  if (!v6)
  {
    uint64_t v7 = v5;
    do
    {
      OUTLINED_FUNCTION_19();
      operator delete(v3);
      uint64_t v3 = v4;
    }

    while (v4 != v7);
  }

  OUTLINED_FUNCTION_22();
}

void __main_block_invoke(uint64_t a1)
{
  do
  {
    while (1)
    {
      otTaskletsProcess(*(void *)(a1 + 32));
      bzero(buf, 0x180uLL);
      int v23 = -1;
      uint64_t v24 = 10LL;
      int v25 = 0;
      otSysMainloopUpdate(*(ot::Posix::Mainloop::Manager **)(a1 + 32), (uint64_t)buf);
      int v2 = gPfdX;
      if (__darwin_check_fd_set_overflow(gPfdX, buf, 0)) {
        *(_DWORD *)&buf[((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFFCLL] |= 1 << v2;
      }
      int v3 = v23 <= gPfdX + 1 ? gPfdX + 1 : v23;
      int v23 = v3;
      if (hostCmdPending())
      {
        uint64_t v24 = 0LL;
        int v25 = 0;
      }

      updateBorderAgent(*(void *)(a1 + 40));
      otSysMainloopProcess(*(ot::Posix::Mainloop::Manager **)(a1 + 32), buf);
      processBorderAgent(*(void *)(a1 + 40));
      processHostCmd();
    }
  }

  while (*__error() == 4);
  perror("select");
  logging_obg  = (os_log_s *)log_get_logging_obg("com.apple.threadradiod", "default");
  if (!logging_obg)
  {
    if (!OUTLINED_FUNCTION_16((os_log_s *)&_os_log_default)) {
      goto LABEL_16;
    }
    int v15 = 136315394;
    __int16 v16 = "com.apple.wpantund.ncp";
    __int16 v17 = 2080;
    __int16 v18 = "default";
    uint64_t v7 = (os_log_s *)&_os_log_default;
    char v6 = "Logging1 Module is not defined for SubSystem: %s, Category: %s";
    uint32_t v8 = 22;
    goto LABEL_23;
  }

  uint64_t v5 = logging_obg;
  if (syslog_is_the_mask_enabled(3) && OUTLINED_FUNCTION_16(v5))
  {
    LOWORD(vot::Mle::Tlv::SetType(this, 15) = 0;
    char v6 = "Main Loop:: Select() fail";
    uint64_t v7 = v5;
    uint32_t v8 = 2;
LABEL_23:
    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v15, v8);
  }

void reconnect_thread_network()
{
}

void handle_captureABC()
{
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0((void *)&_mh_execute_header, v0, v1, "[-RCP-]: Invalid argument received", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0( (void *)&_mh_execute_header,  v0,  v1,  "[-RCP-]: Got a corrupted RCP Vendor version",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0((void *)&_mh_execute_header, v0, v1, "[-RCP-]: RCP critical log received", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0( (void *)&_mh_execute_header,  v0,  v1,  "[-RCP-]: STREAM_DEBUG when TX Transmission in progress",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0((void *)&_mh_execute_header, v0, v1, "[-RCP-]: RCP INVALID STATE", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

void handle_getnextframe_captureABC()
{
}

void handle_sendmesh_captureABC()
{
}

void handle_txframecounter_captureABC()
{
}

void handle_transmitdone_captureABC()
{
}

void handle_rxframecounter_captureABC()
{
}

void handle_directTxToSED_captureABC()
{
}

void handle_addrRegfailure_captureABC()
{
}

void handle_hdlc_waitforframe_captureABC( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void handle_hdlc_write_captureABC( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void handle_daemon_exit()
{
}

void trigger_leader_override()
{
}

void host_crash_dump_collection()
{
}

void processHostSystemStartActionsBasedOnTime()
{
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0( (void *)&_mh_execute_header,  v0,  v1,  "Threadradiod startup after a prior Threadradiod crash",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

void processHostSystemStartActions()
{
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0( (void *)&_mh_execute_header,  v0,  v1,  "Threadradiod startup: System Boot Session UUID not present in persistence",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0( (void *)&_mh_execute_header,  v0,  v1,  "Threadradiod startup: startup after a prior Threadradiod crash",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0((void *)&_mh_execute_header, v0, v1, "Threadradiod startup: startup on Boot", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint8_t v2[24];
  OUTLINED_FUNCTION_8_1();
  OUTLINED_FUNCTION_8( (void *)&_mh_execute_header,  v0,  v1,  "Threadradiod startup: System Boot Session UUID persisted  = %s",  v2);
  OUTLINED_FUNCTION_2_0();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint8_t v2[24];
  OUTLINED_FUNCTION_8_1();
  OUTLINED_FUNCTION_8( (void *)&_mh_execute_header,  v0,  v1,  "Threadradiod startup: System Boot Session UUID parsed  = %s",  v2);
  OUTLINED_FUNCTION_2_0();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0( (void *)&_mh_execute_header,  v0,  v1,  "Threadradiod startup: System Boot Session UUID parse Failure",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

void raise_trigerred_group_ABC()
{
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_9_0(__stack_chk_guard);
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_2_1( (void *)&_mh_execute_header,  v0,  v1,  "raise_trigerred_group_ABC: caseSubType[%s]",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_2_0();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_9_0(__stack_chk_guard);
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_2_1( (void *)&_mh_execute_header,  v0,  v1,  "raise_trigerred_group_ABC: caseType[%s]",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_2_0();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_9_0(__stack_chk_guard);
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_2_1( (void *)&_mh_execute_header,  v0,  v1,  "raise_trigerred_group_ABC: group_id[%s]",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_2_0();
}

{
  int v0;
  __int16 v1;
  int v2;
  int v3;
  int v4;
  os_log_t v5;
  uint8_t v6[10];
  int v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  OUTLINED_FUNCTION_26();
  uint64_t v7 = v0;
  uint32_t v8 = v1;
  __int16 v9 = v2;
  uint64_t v10 = v1;
  uint64_t v11 = v3;
  __int16 v12 = v1;
  int v13 = v4;
  _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "raise_trigerred_group_ABC: mCaseType[%d] mCaseSubType[%d] mCaseSubTypeContext[%d]  mGroupIdLen[%d] mSrcRloc[0x%x]",  v6,  0x20u);
}

void update_stabilitymetrics_host_for_periodic_ca_metrics()
{
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_8_1();
  OUTLINED_FUNCTION_2_1( (void *)&_mh_execute_header,  v0,  v1,  "update_stabilitymetrics_host_for_periodic_ca_metrics numHostReboots:%s",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_2_0();
}

{
  uint64_t v0;
  os_log_t v1;
  int v2;
  const char *v3;
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_7_2( (void *)&_mh_execute_header,  v0,  v1,  "Size of kCAPeriodicCounters_Num_Daemon_Restart_Reboots : %d, String is : %s. Reseting it to 1.",  v2,  v3);
  OUTLINED_FUNCTION_2_0();
}

{
  uint64_t v0;
  os_log_t v1;
  int v2;
  const char *v3;
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_7_2( (void *)&_mh_execute_header,  v0,  v1,  "Size of kCAPeriodicCounters_Num_Daemon_Restart_Crashes : %d, String is : %s. Reseting it to 1.",  v2,  v3);
  OUTLINED_FUNCTION_2_0();
}

void update_stabilitymetrics_host_for_triggerbased_ca_metrics()
{
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_8_1();
  OUTLINED_FUNCTION_2_1( (void *)&_mh_execute_header,  v0,  v1,  "update_stabilitymetrics_host_for_triggerbased_ca_metrics numHostReboots:%s",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_2_0();
}

{
  uint64_t v0;
  os_log_t v1;
  int v2;
  const char *v3;
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_7_2( (void *)&_mh_execute_header,  v0,  v1,  "Size of kCATriggerBasedCounters_Num_Daemon_Restart_Reboots : %d, String is : %s. Reseting it to 1.",  v2,  v3);
  OUTLINED_FUNCTION_2_0();
}

{
  os_log_s *v0;
  uint8_t v1[24];
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_14( (void *)&_mh_execute_header,  v0,  (uint64_t)v0,  "Size of kCATriggerBasedCounters_Num_Daemon_Restart_Crashes : %d, String is : %s. Reseting it to 1.",  v1);
  OUTLINED_FUNCTION_2_0();
}

void handle_xpc_output_nobuff( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void isiPad( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void isMac(os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void main_cold_2()
{
}

void main_cold_8(const std::runtime_error *a1, os_log_s *a2)
{
}

void main_cold_10(const std::exception *a1, os_log_s *a2)
{
}

void main_cold_12()
{
  __int16 v3 = 1024;
  int v4 = 20;
  OUTLINED_FUNCTION_14( (void *)&_mh_execute_header,  v0,  v1,  "Flash contains Tx power value(%s) which is invalid. Restoring to new default(%d)",  v2);
  OUTLINED_FUNCTION_2_0();
}

void main_cold_17()
{
  OUTLINED_FUNCTION_0((void *)&_mh_execute_header, v0, v1, "FillmoreHasEPA() returned error.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

void main_cold_20()
{
}

void main_cold_24()
{
}

void main_cold_26()
{
}

void main_cold_28()
{
}

void main_cold_30()
{
}

void main_cold_32()
{
}

void main_cold_34()
{
}

void main_cold_36()
{
}

void main_cold_38()
{
}

void main_cold_40()
{
}

void main_cold_42()
{
}

uint64_t (***boost::filesystem::detail::recursive_directory_iterator_increment( void *a1, uint64_t *a2))(boost::system::detail::generic_error_category *__hidden this)
{
  std::string::size_type result = &boost::system::detail::generic_cat_holder<void>::instance;
  if ((unint64_t)qword_10045D3F0 >> 1 == 0x595588BD12BF6FE8LL
    || (std::string::size_type result = (uint64_t (***)(boost::system::detail::generic_error_category *__hidden))((BOOL (*)(boost::system::error_category *, int))boost::system::detail::generic_cat_holder<void>::instance[6])((boost::system::error_category *)&boost::system::detail::generic_cat_holder<void>::instance, 12),
        (result & 1) != 0))
  {
    uint64_t v4 = 3LL;
  }

  else
  {
    uint64_t v4 = 2LL;
  }

  *a2  = v4;
  return result;
}

void otbr::TrelDnssd::TrelDnssd::StartBrowse()
{
  __assert_rtn("StartBrowse", "trel_dnssd.cpp", 141, "mSubscriberId == 0");
}

void otbr::TrelDnssd::TrelDnssd::StopBrowse()
{
}

void otbr::TrelDnssd::TrelDnssd::RegisterService()
{
}

{
  __assert_rtn("RegisterService", "trel_dnssd.cpp", 194, "aTxtData != nullptr");
}

void otbr::TrelDnssd::TrelDnssd::CheckTrelNetifReady()
{
}

void otbr::TrelDnssd::TrelDnssd::IsReady()
{
}

void otbr::TrelDnssd::TrelDnssd::UnpublishTrelService()
{
}

{
  __assert_rtn("UnpublishTrelService", "trel_dnssd.cpp", 318, "mRegisterInfo.IsPublished()");
}

void otbr::TrelDnssd::TrelDnssd::RegisterInfo::Assign()
{
}

{
  __assert_rtn("Assign", "trel_dnssd.cpp", 535, "error == OTBR_ERROR_NONE");
}

{
  __assert_rtn("Assign", "trel_dnssd.cpp", 528, "!IsPublished()");
}

void otbr::TrelDnssd::TrelDnssd::PublishTrelService()
{
}

{
  __assert_rtn("PublishTrelService", "trel_dnssd.cpp", 299, "mTrelNetifIndex > 0");
}

{
  __assert_rtn("PublishTrelService", "trel_dnssd.cpp", 298, "!mRegisterInfo.IsPublished()");
}

void otbr::TrelDnssd::TrelDnssd::RegisterInfo::Clear()
{
}

void otbr::Ncp::ControllerOpenThread::GetInstance()
{
  __assert_rtn("GetInstance", "ncp_openthread.hpp", 118, "mInstance != nullptr");
}

void otbr::Mdns::PublisherMDnsSd::Update()
{
  __assert_rtn("Update", "mdns_mdnssd.cpp", 305, "fd != -1");
}

{
  __assert_rtn("Update", "mdns_mdnssd.cpp", 290, "serviceReg.GetServiceRef() != nullptr");
}

void otbr::Mdns::PublisherMDnsSd::ServiceRef::Update()
{
  __assert_rtn("Update", "mdns_mdnssd.cpp", 855, "fd != -1");
}

void otbr::Mdns::PublisherMDnsSd::ServiceRef::Process()
{
  __assert_rtn("Process", "mdns_mdnssd.cpp", 870, "fd != -1");
}

void otbr::Mdns::DNSErrorToString()
{
}

void otbr::Mdns::PublisherMDnsSd::ServiceSubscription::Browse()
{
  __assert_rtn("Browse", "mdns_mdnssd.cpp", 881, "mServiceRef == nullptr");
}

void otbr::Mdns::PublisherMDnsSd::UnsubscribeService()
{
  __assert_rtn("UnsubscribeService", "mdns_mdnssd.cpp", 764, "it != mSubscribedServices.end()");
}

void otbr::Mdns::PublisherMDnsSd::UnsubscribeHost()
{
  __assert_rtn("UnsubscribeHost", "mdns_mdnssd.cpp", 814, "it != mSubscribedHosts.end()");
}

void otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::Resolve()
{
  __assert_rtn("Resolve", "mdns_mdnssd.cpp", 1072, "mServiceRef == nullptr");
}

void otbr::Mdns::PublisherMDnsSd::ServiceSubscription::RemoveInstanceResolution()
{
  __assert_rtn("RemoveInstanceResolution", "mdns_mdnssd.cpp", 976, "it != mResolvingInstances.end()");
}

void otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::GetAddrInfo()
{
  __assert_rtn("GetAddrInfo", "mdns_mdnssd.cpp", 1148, "mServiceRef == nullptr");
}

void otbr::Mdns::Publisher::RemoveSubscriptionCallbacks()
{
}

{
  __assert_rtn("RemoveSubscriptionCallbacks", "mdns.cpp", 164, "erased == 1");
}

void otbr::Mdns::Publisher::AddSubscriptionCallbacks()
{
}

void otbr::Ncp::ControllerOpenThread::Init()
{
  __assert_rtn("Init", "ncp_openthread.cpp", 247, "mInstance != nullptr");
}

void otbr::Ncp::ControllerOpenThread::Deinit()
{
  __assert_rtn("Deinit", "ncp_openthread.cpp", 320, "mInstance != nullptr");
}

void otbr::agent::ThreadHelper::AttachAllNodesTo()
{
}

void otbr::MainloopManager::AddMainloopProcessor()
{
  __assert_rtn("AddMainloopProcessor", "mainloop_manager.cpp", 36, "aMainloopProcessor != nullptr");
}

void otbrLogSetLevel()
{
  __assert_rtn("otbrLogSetLevel", "logging.cpp", 79, "aLevel >= OTBR_LOG_EMERG && aLevel <= OTBR_LOG_DEBUG");
}

void otbrLogInit()
{
}

{
  __assert_rtn("otbrLogInit", "logging.cpp", 87, "aLevel >= OTBR_LOG_EMERG && aLevel <= OTBR_LOG_DEBUG");
}

void otbrLog()
{
}

void otbrLog(const char *a1, uint64_t a2, os_log_s *a3)
{
  v4[0]  = 136315394;
  OUTLINED_FUNCTION_1_3();
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "%s: %s", (uint8_t *)v4, 0x16u);
  OUTLINED_FUNCTION_4_2();
}

{
  int v4[6];
  GetPrefix(a1);
  v4[0]  = 136315394;
  OUTLINED_FUNCTION_1_3();
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "%s: %s", (uint8_t *)v4, 0x16u);
  OUTLINED_FUNCTION_4_2();
}

void otbrLogv()
{
}

void otbrDump()
{
  __assert_rtn("otbrDump", "logging.cpp", 187, "aPrefix && (aMemory || aSize == 0)");
}

void otbr::DnsUtils::CheckHostnameSanity()
{
}

{
  __assert_rtn("CheckHostnameSanity", "dns_utils.cpp", 81, "aHostName.back() == '.'");
}

void otbr::DnsUtils::CheckServiceNameSanity()
{
}

{
  __assert_rtn("CheckServiceNameSanity", "dns_utils.cpp", 92, "aServiceName[aServiceName.length() - 1] != '.'");
}

{
  __assert_rtn("CheckServiceNameSanity", "dns_utils.cpp", 94, "dotpos != std::string::npos");
}

{
  __assert_rtn("CheckServiceNameSanity", "dns_utils.cpp", 95, "dotpos == aServiceName.find_last_of('.')");
}

void trelDnssdProcess()
{
}

void trelDnssdUpdateFdSet(fd_set *a1, fd_set *a2, int *a3, timeval *a4)
{
}

void ot::AsCoreType<otInstance>(uint64_t a1)
{
}

void ot::AsCoreType<otSockAddr>(uint64_t a1)
{
}

{
  __ZN2ot10AsCoreTypeI10otSockAddrEERNS_8CoreTypeIT_E4TypeEPS3_(a1);
}

void ot::AsCoreType<otChildInfo>(uint64_t a1)
{
}

void ot::AsCoreType<otIp6Prefix>(uint64_t a1)
{
}

{
  __ZN2ot10AsCoreTypeI11otIp6PrefixEERNS_8CoreTypeIT_E4TypeEPS3_(a1);
}

void ot::AsCoreType<otUdpSocket>(uint64_t a1)
{
}

{
  __ZN2ot10AsCoreTypeI11otUdpSocketEERNS_8CoreTypeIT_E4TypeEPS3_(a1);
}

void ot::AsCoreType<otBufferInfo>(uint64_t a1)
{
}

void ot::AsCoreType<otExtAddress>(uint64_t a1)
{
}

{
  __ZN2ot10AsCoreTypeI12otExtAddressEERNS_8CoreTypeIT_E4TypeEPS3_(a1);
}

void ot::AsCoreType<otIp4Address>(uint64_t a1)
{
}

{
  __ZN2ot10AsCoreTypeI12otIp4AddressEERNS_8CoreTypeIT_E4TypeEPS3_(a1);
}

void ot::AsCoreType<otIp6Address>(uint64_t a1)
{
}

{
  __ZN2ot10AsCoreTypeI12otIp6AddressEERNS_8CoreTypeIT_E4TypeEPS3_(a1);
}

void ot::AsCoreType<otLeaderData>(uint64_t a1)
{
}

void ot::AsCoreType<otNetworkKey>(uint64_t a1)
{
}

{
  __ZN2ot10AsCoreTypeI12otNetworkKeyEERNS_8CoreTypeIT_E4TypeEPS3_(a1);
}

void ot::AsCoreType<otRouterInfo>(uint64_t a1)
{
}

void ot::AsCoreType<otDnsTxtEntry>(uint64_t a1)
{
}

void ot::AsCoreType<otIcmp6Header>(uint64_t a1)
{
}

void ot::AsCoreType<otMessageInfo>(uint64_t a1)
{
}

{
  __ZN2ot10AsCoreTypeI13otMessageInfoEERNS_8CoreTypeIT_E4TypeEPS3_(a1);
}

void ot::AsCoreType<otNetworkName>(uint64_t a1)
{
}

{
  __ZN2ot10AsCoreTypeI13otNetworkNameEERNS_8CoreTypeIT_E4TypeEPS3_(a1);
}

void ot::AsCoreType<otUdpReceiver>(uint64_t a1)
{
}

void ot::AsCoreType<otCoapResource>(uint64_t a1)
{
}

void ot::AsCoreType<otIcmp6Handler>(uint64_t a1)
{
}

void ot::AsCoreType<otMessageQueue>(uint64_t a1)
{
}

void ot::AsCoreType<otNeighborInfo>(uint64_t a1)
{
}

void ot::AsCoreType<otNetifAddress>(uint64_t a1)
{
}

void ot::AsCoreType<otSteeringData>(uint64_t a1)
{
}

{
  __ZN2ot10AsCoreTypeI14otSteeringDataEERNS_8CoreTypeIT_E4TypeEPS3_(a1);
}

void ot::AsCoreType<otExtendedPanId>(uint64_t a1)
{
}

{
  __ZN2ot10AsCoreTypeI15otExtendedPanIdEERNS_8CoreTypeIT_E4TypeEPS3_(a1);
}

void ot::AsCoreType<otServiceConfig>(uint64_t a1)
{
}

void ot::AsCoreType<otCacheEntryInfo>(uint64_t a1)
{
}

void ot::AsCoreType<otSecurityPolicy>(uint64_t a1)
{
}

{
  __ZN2ot10AsCoreTypeI16otSecurityPolicyEERNS_8CoreTypeIT_E4TypeEPS3_(a1);
}

void ot::AsCoreType<otJoinerDiscerner>(uint64_t a1)
{
}

{
  __ZN2ot10AsCoreTypeI17otJoinerDiscernerEERNS_8CoreTypeIT_E4TypeEPS3_(a1);
}

void ot::AsCoreType<otMessageSettings>(uint64_t a1)
{
}

void ot::AsCoreType<otDeviceProperties>(uint64_t a1)
{
}

void ot::AsCoreType<otIp6NetworkPrefix>(uint64_t a1)
{
}

{
  __ZN2ot10AsCoreTypeI18otIp6NetworkPrefixEERNS_8CoreTypeIT_E4TypeEPS3_(a1);
}

void ot::AsCoreType<otPingSenderConfig>(uint64_t a1)
{
}

void ot::AsCoreType<otLowpanContextInfo>(uint64_t a1)
{
}

void ot::AsCoreType<otMeshDiagChildInfo>(uint64_t a1)
{
}

void ot::AsCoreType<otBorderRouterConfig>(uint64_t a1)
{
}

{
  __ZN2ot10AsCoreTypeI20otBorderRouterConfigEERNS_8CoreTypeIT_E4TypeEPS3_(a1);
}

void ot::AsCoreType<otCacheEntryIterator>(uint64_t a1)
{
}

void ot::AsCoreType<otCoapOptionIterator>(uint64_t a1)
{
}

void ot::AsCoreType<otOperationalDataset>(uint64_t a1)
{
}

{
  __ZN2ot10AsCoreTypeI20otOperationalDatasetEERNS_8CoreTypeIT_E4TypeEPS3_(a1);
}

void ot::AsCoreType<otDnsTxtEntryIterator>(uint64_t a1)
{
}

void ot::AsCoreType<otExternalRouteConfig>(uint64_t a1)
{
}

{
  __ZN2ot10AsCoreTypeI21otExternalRouteConfigEERNS_8CoreTypeIT_E4TypeEPS3_(a1);
}

void ot::AsCoreType<otCommissioningDataset>(uint64_t a1)
{
}

void ot::AsCoreType<otMeshDiagChildIterator>(uint64_t a1)
{
}

void ot::AsCoreType<otNetifMulticastAddress>(uint64_t a1)
{
}

void ot::AsCoreType<otHistoryTrackerIterator>(uint64_t a1)
{
}

void ot::AsCoreType<otIp6InterfaceIdentifier>(uint64_t a1)
{
}

void ot::AsCoreType<otLinkMetricsSeriesFlags>(uint64_t a1)
{
}

void ot::AsCoreType<otMeshDiagIp6AddrIterator>(uint64_t a1)
{
}

void ot::AsCoreType<otOperationalDatasetComponents>(uint64_t a1)
{
}

void ot::AsCoreType<otPskc>(uint64_t a1)
{
}

{
  __ZN2ot10AsCoreTypeI6otPskcEERNS_8CoreTypeIT_E4TypeEPS3_(a1);
}

void ot::AsCoreType<otMacKey>(uint64_t a1)
{
}

void ot::AsCoreType<otIp4Cidr>(uint64_t a1)
{
}

{
  __ZN2ot10AsCoreTypeI9otIp4CidrEERNS_8CoreTypeIT_E4TypeEPS3_(a1);
}

void ot::AsCoreType<otMessage>(uint64_t a1)
{
}

{
  __ZN2ot10AsCoreTypeI9otMessageEERNS_8CoreTypeIT_E4TypeEPS3_(a1);
}

void ot::AsNonConst<otNetifMulticastAddress>()
{
}

{
  __ZN2ot10AsNonConstI23otNetifMulticastAddressEERT_RKS2_();
}

void ot::AsNonConst<ot::LinkMetrics::SeriesInfo>()
{
}

void ot::AsNonConst<ot::NetworkData::ServiceTlv>()
{
}

void ot::AsNonConst<ot::NetworkData::NetworkDataTlv>()
{
}

void ot::AsNonConst<ot::NetworkData::CommissioningDataTlv>()
{
}

void ot::AsNonConst<ot::NetworkData::PrefixTlv>()
{
}

void ot::AsNonConst<ot::AddressResolver::CacheEntry>()
{
}

void ot::AsNonConst<ot::Ip6::Udp::SocketHandle>()
{
}

void ot::AsNonConst<ot::Ip6::Netif::UnicastAddress>()
{
}

void ot::AsNonConst<ot::Ip6::Netif::MulticastAddress>()
{
}

void ot::AsNonConst<ot::Ip6::Netif::ExternalMulticastAddress>()
{
}

void ot::AsNonConst<ot::Mac::Filter::FilterEntry>()
{
}

void ot::AsNonConst<ot::Coap::Message::HelpData>()
{
}

void ot::AsNonConst<ot::Trel::Interface::Peer>()
{
}

void ot::AsNonConst<ot::Child>()
{
}

void ot::AsNonConst<ot::Router>()
{
}

void ot::AsNonConst<ot::MeshCoP::ChannelMaskEntryBase>()
{
}

void ot::AsNonConst<ot::MeshCoP::Tlv>()
{
}

void ot::AsNonConst<ot::Message>()
{
}

void ot::AsNonConst<unsigned char>()
{
}

void ot::AsNonConst<unsigned short>()
{
}

void ot::LinkMetrics::MetricsValues::GetMetrics(ot::LinkMetrics::MetricsValues *this)
{
}

void ot::NetworkData::As<ot::NetworkData::ContextTlv>()
{
}

{
  __ZN2ot11NetworkData2AsINS0_10ContextTlvEEEPT_PNS0_14NetworkDataTlvE();
}

void ot::NetworkData::As<ot::NetworkData::ServiceTlv>()
{
}

{
  __ZN2ot11NetworkData2AsINS0_10ServiceTlvEEEPT_PNS0_14NetworkDataTlvE();
}

void ot::NetworkData::As<ot::NetworkData::HasRouteTlv>()
{
}

{
  __ZN2ot11NetworkData2AsINS0_11HasRouteTlvEEEPT_PNS0_14NetworkDataTlvE();
}

void ot::NetworkData::As<ot::NetworkData::BorderRouterTlv>()
{
}

{
  __ZN2ot11NetworkData2AsINS0_15BorderRouterTlvEEEPT_PNS0_14NetworkDataTlvE();
}

void ot::NetworkData::As<ot::NetworkData::CommissioningDataTlv>()
{
}

{
  __ZN2ot11NetworkData2AsINS0_20CommissioningDataTlvEEEPT_PNS0_14NetworkDataTlvE();
}

void ot::NetworkData::As<ot::NetworkData::PrefixTlv>()
{
}

{
  __ZN2ot11NetworkData2AsINS0_9PrefixTlvEEEPT_PNS0_14NetworkDataTlvE();
}

void ot::NetworkData::As<ot::NetworkData::ServerTlv>()
{
}

{
  __ZN2ot11NetworkData2AsINS0_9ServerTlvEEEPT_PNS0_14NetworkDataTlvE();
}

void ot::ToUlonglong(ot *this)
{
}

void *ot::MessageQueue::SetTail(void *this, uint64_t a2)
{
  return __ZN2ot12MessageQueue7SetTailEPNS_7MessageE(this, a2);
}

void ot::SettingsBase::BorderAgentId::GetId(ot::SettingsBase::BorderAgentId *this)
{
}

{
  __ZNK2ot12SettingsBase13BorderAgentId5GetIdEv(this);
}

void ot::AsCoapMessage()
{
}

{
  __ZN2ot13AsCoapMessageEPK9otMessage();
}

void ot::AsCoreTypePtr<otIp6Address>()
{
}

void ot::AsCoreTypePtr<otLinkMetrics>()
{
}

void ot::AsCoreTypePtr<otMessageInfo>()
{
}

void ot::AsCoreTypePtr<otNetifMulticastAddress>()
{
}

double ot::BackboneRouter::MulticastListenersTable::Listener::SetAddress(__n128 *this, __n128 *a2)
{
  *(void *)&double result = __ZN2ot14BackboneRouter23MulticastListenersTable8Listener10SetAddressERKNS_3Ip67AddressE( this,  a2).n128_u64[0];
  return result;
}

double ot::AddressResolver::CacheEntry::SetTarget(__n128 *this, __n128 *a2)
{
  *(void *)&double result = __ZN2ot15AddressResolver10CacheEntry9SetTargetERKNS_3Ip67AddressE(this, a2).n128_u64[0];
  return result;
}

void ot::AsCoapMessagePtr()
{
}

void ot::InstanceLocatorInit::Init(ot::InstanceLocatorInit *this, ot::Instance *a2)
{
}

void ot::As<ot::ExtendedTlv>()
{
}

void ot::As<ot::MeshCoP::ChannelTlv>()
{
}

{
  __ZN2ot2AsINS_7MeshCoP10ChannelTlvEEEPT_PNS_3TlvE();
}

{
  __ZN2ot2AsINS_7MeshCoP10ChannelTlvEEERKT_RKNS_3TlvE();
}

void ot::As<ot::MeshCoP::DelayTimerTlv>()
{
}

{
  __ZN2ot2AsINS_7MeshCoP13DelayTimerTlvEEEPT_PNS_3TlvE();
}

{
  __ZN2ot2AsINS_7MeshCoP13DelayTimerTlvEEERT_RNS_3TlvE();
}

void ot::As<ot::MeshCoP::NetworkKeyTlv>()
{
}

{
  __ZN2ot2AsINS_7MeshCoP13NetworkKeyTlvEEEPT_PNS_3TlvE();
}

{
  __ZN2ot2AsINS_7MeshCoP13NetworkKeyTlvEEERKT_RKNS_3TlvE();
}

void ot::As<ot::MeshCoP::ChannelMaskTlv>()
{
}

{
  __ZN2ot2AsINS_7MeshCoP14ChannelMaskTlvEEEPT_PNS_3TlvE();
}

{
  __ZN2ot2AsINS_7MeshCoP14ChannelMaskTlvEEERKT_RKNS_3TlvE();
}

void ot::As<ot::MeshCoP::NetworkNameTlv>()
{
}

{
  __ZN2ot2AsINS_7MeshCoP14NetworkNameTlvEEEPT_PNS_3TlvE();
}

{
  __ZN2ot2AsINS_7MeshCoP14NetworkNameTlvEEERKT_RKNS_3TlvE();
}

void ot::As<ot::MeshCoP::SteeringDataTlv>()
{
}

void ot::As<ot::MeshCoP::ExtendedPanIdTlv>()
{
}

{
  __ZN2ot2AsINS_7MeshCoP16ExtendedPanIdTlvEEEPT_PNS_3TlvE();
}

{
  __ZN2ot2AsINS_7MeshCoP16ExtendedPanIdTlvEEERKT_RKNS_3TlvE();
}

void ot::As<ot::MeshCoP::JoinerUdpPortTlv>()
{
}

void ot::As<ot::MeshCoP::WakeupChannelTlv>()
{
}

{
  __ZN2ot2AsINS_7MeshCoP16WakeupChannelTlvEEEPT_PNS_3TlvE();
}

{
  __ZN2ot2AsINS_7MeshCoP16WakeupChannelTlvEEERKT_RKNS_3TlvE();
}

void ot::As<ot::MeshCoP::SecurityPolicyTlv>()
{
}

{
  __ZN2ot2AsINS_7MeshCoP17SecurityPolicyTlvEEEPT_PNS_3TlvE();
}

{
  __ZN2ot2AsINS_7MeshCoP17SecurityPolicyTlvEEERKT_RKNS_3TlvE();
}

void ot::As<ot::MeshCoP::ActiveTimestampTlv>()
{
}

{
  __ZN2ot2AsINS_7MeshCoP18ActiveTimestampTlvEEEPT_PNS_3TlvE();
}

void ot::As<ot::MeshCoP::MeshLocalPrefixTlv>()
{
}

{
  __ZN2ot2AsINS_7MeshCoP18MeshLocalPrefixTlvEEEPT_PNS_3TlvE();
}

{
  __ZN2ot2AsINS_7MeshCoP18MeshLocalPrefixTlvEEERKT_RKNS_3TlvE();
}

void ot::As<ot::MeshCoP::PendingTimestampTlv>()
{
}

void ot::As<ot::MeshCoP::BorderAgentLocatorTlv>()
{
}

void ot::As<ot::MeshCoP::CommissionerSessionIdTlv>()
{
}

void ot::As<ot::MeshCoP::Tlv>()
{
}

{
  __ZN2ot2AsINS_7MeshCoP3TlvEEEPT_PNS_3TlvE();
}

void ot::As<ot::MeshCoP::PskcTlv>()
{
}

{
  __ZN2ot2AsINS_7MeshCoP7PskcTlvEEEPT_PNS_3TlvE();
}

{
  __ZN2ot2AsINS_7MeshCoP7PskcTlvEEERKT_RKNS_3TlvE();
}

void ot::As<ot::MeshCoP::PanIdTlv>()
{
}

{
  __ZN2ot2AsINS_7MeshCoP8PanIdTlvEEEPT_PNS_3TlvE();
}

{
  __ZN2ot2AsINS_7MeshCoP8PanIdTlvEEERKT_RKNS_3TlvE();
}

void ot::Cli::OutputImplementer::SetEmittingCommandOutput(ot::Cli::OutputImplementer *this)
{
}

void ot::Cli::Output::LogInput(ot::Cli::Output *this, const ot::Utils::CmdLineParser::Arg *a2)
{
}

double ot::Ip6::MessageInfo::SetPeerAddr(__n128 *this, __n128 *a2)
{
  *(void *)&double result = __ZN2ot3Ip611MessageInfo11SetPeerAddrERKNS0_7AddressE(this, a2).n128_u64[0];
  return result;
}

double ot::Ip6::MessageInfo::SetSockAddr(__n128 *this, __n128 *a2)
{
  *(void *)&double result = __ZN2ot3Ip611MessageInfo11SetSockAddrERKNS0_7AddressE(this, a2).n128_u64[0];
  return result;
}

double ot::Ip6::Header::SetDestination(ot::Ip6::Header *this, __n128 *a2)
{
  *(void *)&double result = __ZN2ot3Ip66Header14SetDestinationERKNS0_7AddressE(this, a2).n128_u64[0];
  return result;
}

double ot::Ip6::Header::SetSource(ot::Ip6::Header *this, __n128 *a2)
{
  *(void *)&double result = __ZN2ot3Ip66Header9SetSourceERKNS0_7AddressE(this, a2).n128_u64[0];
  return result;
}

double ot::Ip6::Address::SetBytes(__n128 *this, __n128 *a2)
{
  *(void *)&double result = __ZN2ot3Ip67Address8SetBytesEPKh(this, a2).n128_u64[0];
  return result;
}

double ot::Ip6::SockAddr::SetAddress(__n128 *this, __n128 *a2)
{
  *(void *)&double result = __ZN2ot3Ip68SockAddr10SetAddressERKNS0_7AddressE(this, a2).n128_u64[0];
  return result;
}

void ot::Mac::KeyMaterial::GetKey(ot::Mac::KeyMaterial *this)
{
}

{
  __ZNK2ot3Mac11KeyMaterial6GetKeyEv(this);
}

double ot::Mac::KeyMaterial::SetKey(__n128 *this, __n128 *a2)
{
  *(void *)&double result = __ZN2ot3Mac11KeyMaterial6SetKeyERKNS0_3KeyE(this, a2).n128_u64[0];
  return result;
}

uint64_t ot::Mac::SubMac::SetCslParentAccuracy(uint64_t this, _WORD *a2)
{
  return __ZN2ot3Mac6SubMac20SetCslParentAccuracyERKNS0_11CslAccuracyE(this, a2);
}

void ot::Mac::Address::GetExtended(ot::Mac::Address *this)
{
}

{
  __ZNK2ot3Mac7Address11GetExtendedEv(this);
}

uint64_t ot::Coap::CoapBase::SetResourceHandler(uint64_t this, uint64_t a2)
{
  return __ZN2ot4Coap8CoapBase18SetResourceHandlerEPFbRS1_PKcRNS0_7MessageERKNS_3Ip611MessageInfoEE(this, a2);
}

void ot::Trel::Link::GetTrelLinkCounters(ot::Trel::Link *this)
{
}

double ot::Trel::Interface::Peer::SetSockAddr(ot::Trel::Interface::Peer *this, const ot::Ip6::SockAddr *a2)
{
  *(void *)&double result = __ZN2ot4Trel9Interface4Peer11SetSockAddrERKNS_3Ip68SockAddrE(this, a2).n128_u64[0];
  return result;
}

void ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>::begin()
{
}

{
  __ZNK2ot5ArrayINS_4Trel9Interface4PeerELt128EtE5beginEv();
}

void ot::Array<ot::Router,(unsigned short)32,unsigned char>::begin()
{
}

{
  __ZNK2ot5ArrayINS_6RouterELt32EhE5beginEv();
}

void ot::Array<unsigned char,(unsigned short)32,unsigned char>::GetArrayBuffer()
{
}

void ot::Dhcp6::Server::PrefixAgent::GetAloc(ot::Dhcp6::Server::PrefixAgent *this)
{
}

double ot::Dhcp6::IaAddress::SetAddress(ot::Dhcp6::IaAddress *this, __n128 *a2)
{
  *(void *)&double result = __ZN2ot5Dhcp69IaAddress10SetAddressERKNS_3Ip67AddressE(this, a2).n128_u64[0];
  return result;
}

double ot::Utils::FifoHistogram<unsigned char,(short)24>::Update(uint64_t a1, char a2)
{
  *(void *)&double result = __ZN2ot5Utils13FifoHistogramIhLs24EE6UpdateEh(a1, a2).n128_u64[0];
  return result;
}

BOOL ot::Lowpan::Lowpan::IsLowpanHc(uint64_t this, const ot::FrameData *a2)
{
  return __ZN2ot6Lowpan6Lowpan10IsLowpanHcERKNS_9FrameDataE(this);
}

void ot::AsConst<ot::ChildTable>()
{
}

void ot::AsConst<ot::LinkedList<ot::LinkMetrics::SeriesInfo>>()
{
}

void ot::AsConst<ot::LinkedList<ot::AddressResolver::CacheEntry>>()
{
}

void ot::AsConst<ot::LinkedList<ot::Ip6::Udp::SocketHandle>>()
{
}

void ot::AsConst<ot::LinkedList<ot::Ip6::Udp::Receiver>>()
{
}

void ot::AsConst<ot::LinkedList<ot::Ip6::Netif::UnicastAddress>>()
{
}

void ot::AsConst<ot::LinkedList<ot::Ip6::Netif::MulticastAddress>>()
{
}

void ot::AsConst<ot::LinkedList<ot::Coap::Resource>>()
{
}

void ot::AsConst<ot::LinkedList<ot::Timer>>()
{
}

void ot::AsConst<ot::NetworkData::LeaderBase>()
{
}

void ot::AsConst<ot::NetworkData::NetworkDataTlv>()
{
}

void ot::AsConst<ot::NetworkData::MutableNetworkData>()
{
}

void ot::AsConst<ot::NetworkData::PrefixTlv>()
{
}

void ot::AsConst<ot::NetworkData::ServerTlv>()
{
}

void ot::AsConst<ot::RouterTable>()
{
}

void ot::AsConst<ot::PriorityQueue>()
{
}

void ot::AsConst<ot::Mac::Frame>()
{
}

void ot::AsConst<ot::Mac::Filter>()
{
}

void ot::AsConst<ot::Coap::Message>()
{
}

void ot::AsConst<ot::Array<ot::Trel::Interface::Peer,(unsigned short)128,unsigned short>>()
{
}

void ot::AsConst<ot::Array<unsigned short,(unsigned short)2,unsigned char>>()
{
}

void ot::AsConst<ot::MeshCoP::ChannelMaskBaseTlv>()
{
}

void ot::AsConst<ot::MeshCoP::Dataset>()
{
}

void ot::AsConst<ot::Message>()
{
}

void ot::MeshCoP::Dataset::GetTlvsStart(ot::MeshCoP::Dataset *this)
{
}

{
  __ZNK2ot7MeshCoP7Dataset12GetTlvsStartEv(this);
}

double ot::MeshCoP::Dataset::Info::SetNetworkKey(__n128 *a1, __n128 *a2)
{
  *(void *)&double result = __ZN2ot7MeshCoP7Dataset4Info13SetNetworkKeyERKNS_10NetworkKeyE(a1, a2).n128_u64[0];
  return result;
}

uint64_t ot::MeshCoP::Dataset::Info::SetSecurityPolicy(uint64_t this, _DWORD *a2)
{
  return __ZN2ot7MeshCoP7Dataset4Info17SetSecurityPolicyERKNS_14SecurityPolicyE(this, a2);
}

double ot::MeshCoP::Dataset::Info::SetPskc(uint64_t a1, __n128 *a2)
{
  *(void *)&double result = __ZN2ot7MeshCoP7Dataset4Info7SetPskcERKNS_4PskcE(a1, a2).n128_u64[0];
  return result;
}

void ot::MeshCoP::Dataset::GetBytes(ot::MeshCoP::Dataset *this)
{
}

{
  __ZNK2ot7MeshCoP7Dataset8GetBytesEv(this);
}

uint64_t ot::ChildTable::GetChildIndex(uint64_t this, uint64_t a2)
{
  return __ZNK2ot10ChildTable13GetChildIndexERKNS_5ChildE(this, a2);
}

void ot::KeyManager::HashKeys::GetMleKey(ot::KeyManager::HashKeys *this)
{
}

void ot::SettingsBase::ParentInfo::GetExtAddress(ot::SettingsBase::ParentInfo *this)
{
}

void ot::SettingsBase::ChildInfo::GetExtAddress(ot::SettingsBase::ChildInfo *this)
{
}

void ot::MeshForwarder::GetSendQueue(ot::MeshForwarder *this)
{
}

void ot::AddressResolver::CacheEntry::GetTarget(ot::AddressResolver::CacheEntry *this)
{
}

void ot::Ip4::Cidr::GetBytes(ot::Ip4::Cidr *this)
{
}

void ot::Ip4::Address::GetBytes(ot::Ip4::Address *this)
{
}

void ot::Ip6::Netif::GetUnicastAddresses(ot::Ip6::Netif *this)
{
}

void ot::Ip6::Prefix::GetBytes(ot::Ip6::Prefix *this)
{
}

void ot::Ip6::Address::GetBytes(ot::Ip6::Address *this)
{
}

void ot::Ip6::Address::GetPrefix(ot::Ip6::Address *this)
{
}

void ot::Ip6::Headers::GetIp6Header(ot::Ip6::Headers *this)
{
}

void ot::Mac::Key::GetBytes(ot::Mac::Key *this)
{
}

void ot::Coap::ResponsesQueue::GetResponses(ot::Coap::ResponsesQueue *this)
{
}

void ot::Coap::CoapBase::GetRequestMessages(ot::Coap::CoapBase *this)
{
}

uint64_t ot::Coap::Resource::HandleRequest(uint64_t this, uint64_t a2, uint64_t a3)
{
  return __ZNK2ot4Coap8Resource13HandleRequestERNS0_7MessageERKNS_3Ip611MessageInfoE(this, a2, a3);
}

void ot::Trel::Interface::Peer::GetExtAddress(ot::Trel::Interface::Peer *this)
{
}

void ot::Array<unsigned char,(unsigned short)32,unsigned char>::begin()
{
}

void ot::Array<unsigned short,(unsigned short)2,unsigned char>::begin()
{
}

void ot::Posix::Ip6Utils::Ip6AddressString::AsCString(ot::Posix::Ip6Utils::Ip6AddressString *this)
{
}

void ot::Power::RawPowerSetting::GetData(ot::Power::RawPowerSetting *this)
{
}

void ot::Utils::FifoHistogram<unsigned char,(short)24>::GetData()
{
}

void ot::Utils::CountHistogram<(short)0,(short)127,(short)5>::GetData()
{
}

void ot::Utils::CountHistogram<(short)0,(short)255,(short)4>::GetData()
{
}

void ot::Utils::CountHistogram<(short)-41,(short)-110,(short)5>::GetData()
{
}

void ot::Crypto::Sha256::Hash::GetBytes(ot::Crypto::Sha256::Hash *this)
{
}

void ot::MeshCoP::JoinerPskd::GetAsCString(ot::MeshCoP::JoinerPskd *this)
{
}

void ot::MeshCoP::NetworkName::GetAsCString(ot::MeshCoP::NetworkName *this)
{
}

void ot::MeshCoP::NetworkNameManager::GetNetworkName(ot::MeshCoP::NetworkNameManager *this)
{
}

void ot::MeshCoP::ExtendedPanIdManager::GetExtPanId(ot::MeshCoP::ExtendedPanIdManager *this)
{
}

void ot::MeshCoP::Joiner::GetId(ot::MeshCoP::Joiner *this)
{
}

void ot::Settings::ChildInfoIterator::GetChildInfo(ot::Settings::ChildInfoIterator *this)
{
}

void ot::Settings::ChildInfoIterator::operator*()
{
}

_OWORD *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>@<X0>( _OWORD *a7@<X8>, uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, unint64_t a5@<X5>, unint64_t a6@<X6>)
{
  return __ZNKSt3__111__move_loopINS_17_ClassicAlgPolicyEEclB8nn180100INS_16reverse_iteratorIPN2ot3Ip67AddressEEES9_S9_EENS_4pairIT_T1_EESB_T0_SC_( a1,  a2,  a3,  a4,  a5,  a6,  a7);
}

void std::__tree_key_value_types<std::__value_type<std::pair<std::string,unsigned int>,unsigned int>>::__get_key[abi:nn180100]<std::pair<std::pair<std::string,unsigned int> const,unsigned int>,0>()
{
}

void std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>( uint64_t *a3@<X2>, uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
}

double std::allocator<ot::Ip6::Address>::construct[abi:nn180100]<ot::Ip6::Address,ot::Ip6::Address const&>( uint64_t a1, __n128 *a2, __n128 *a3)
{
  *(void *)&double result = __ZNSt3__19allocatorIN2ot3Ip67AddressEE9constructB8nn180100IS3_JRKS3_EEEvPT_DpOT0_(a1, a2, a3).n128_u64[0];
  return result;
}

void std::operator<<[abi:nn180100]<std::char_traits<char>>(void *a1, char *a2)
{
}

void operator delete[](void *__p)
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void *__cdecl operator new[](size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new[](size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

uint64_t j__otPlatCryptoAesEncrypt(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  return otPlatCryptoAesEncrypt(a1, a2, a3);
}

uint64_t j__otPlatCryptoAesFree(uint64_t a1)
{
  return otPlatCryptoAesFree(a1);
}

uint64_t j__otPlatCryptoAesInit(uint64_t a1)
{
  return otPlatCryptoAesInit(a1);
}

uint64_t j__otPlatCryptoAesSetKey(uint64_t a1, const ot::Crypto::Key *a2)
{
  return otPlatCryptoAesSetKey(a1, a2);
}

uint64_t j__otPlatCryptoHkdfExpand( uint64_t a1, uint64_t a2, unsigned __int16 a3, char *a4, unsigned __int16 a5)
{
  return otPlatCryptoHkdfExpand(a1, a2, a3, a4, a5);
}

uint64_t j__otPlatCryptoHkdfExtract( uint64_t a1, const unsigned __int8 *a2, __int16 a3, const ot::Crypto::Key *a4)
{
  return otPlatCryptoHkdfExtract(a1, a2, a3, a4);
}

uint64_t j__otPlatCryptoHmacSha256Deinit(uint64_t a1)
{
  return otPlatCryptoHmacSha256Deinit(a1);
}

uint64_t j__otPlatCryptoHmacSha256Finish(uint64_t a1, _BYTE *a2)
{
  return otPlatCryptoHmacSha256Finish(a1, a2);
}

uint64_t j__otPlatCryptoHmacSha256Init(uint64_t a1)
{
  return otPlatCryptoHmacSha256Init(a1);
}

uint64_t j__otPlatCryptoHmacSha256Start(uint64_t a1, const ot::Crypto::Key *a2)
{
  return otPlatCryptoHmacSha256Start(a1, a2);
}

uint64_t j__otPlatCryptoHmacSha256Update(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  return otPlatCryptoHmacSha256Update(a1, a2, a3);
}

uint64_t j__otPlatCryptoInit()
{
  return otPlatCryptoInit();
}

void *j__otPlatCryptoPbkdf2GenerateKey( __int128 *a1, unsigned __int16 a2, const void *a3, unsigned __int16 a4, unsigned int a5, unsigned __int16 a6, char *a7)
{
  return otPlatCryptoPbkdf2GenerateKey(a1, a2, a3, a4, a5, a6, a7);
}

_DWORD *j__otPlatCryptoRandomDeinit()
{
  return otPlatCryptoRandomDeinit();
}

uint64_t j__otPlatCryptoRandomGet(uint64_t a1, unsigned __int16 a2)
{
  return otPlatCryptoRandomGet(a1, a2);
}

uint64_t j__otPlatCryptoRandomInit()
{
  return otPlatCryptoRandomInit();
}

uint64_t j__otPlatCryptoSha256Deinit(uint64_t a1)
{
  return otPlatCryptoSha256Deinit(a1);
}

uint64_t j__otPlatCryptoSha256Finish(uint64_t a1, _BYTE *a2)
{
  return otPlatCryptoSha256Finish(a1, a2);
}

uint64_t j__otPlatCryptoSha256Init(uint64_t *a1)
{
  return otPlatCryptoSha256Init(a1);
}

uint64_t j__otPlatCryptoSha256Start(uint64_t a1)
{
  return otPlatCryptoSha256Start(a1);
}

uint64_t j__otPlatCryptoSha256Update(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  return otPlatCryptoSha256Update(a1, a2, a3);
}

id objc_msgSend_addPreferredNetworkWithCompletionInternally_borderAgentID_ipV4NwSignature_ipv6NwSignature_wifiSSID_wifiPassword_completion_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "addPreferredNetworkWithCompletionInternally:borderAgentID:ipV4NwSignature:ipv6NwSignature:wifiSSID:wifiPassword:completion:");
}

id objc_msgSend_checkAndUpdateNetworkParamsFromMdnsScan_borderAgentID_leaderBorderAgentID_isNwFound_numAppleBRs_numThirdPartyBRs_isLeaderAppleDevice_numThreadNwsFound_shouldRunPeriodicTdm_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "checkAndUpdateNetworkParamsFromMdnsScan:borderAgentID:leaderBorderAgentID:isNwFound:numAppleBRs:numThirdParty BRs:isLeaderAppleDevice:numThreadNwsFound:shouldRunPeriodicTdm:");
}

id objc_msgSend_checkIfNetworkSignatureUpdateIsRequiredForPreferredNetwork_nwSignature_signaturePrefEntries_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "checkIfNetworkSignatureUpdateIsRequiredForPreferredNetwork:nwSignature:signaturePrefEntries:");
}

id objc_msgSend_deleteActiveDataSetRecordForThreadBorderAgentWithKeychainAccessGroup_keychainAccessGroup_completion_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "deleteActiveDataSetRecordForThreadBorderAgentWithKeychainAccessGroup:keychainAccessGroup:completion:");
}

id objc_msgSend_deleteActiveDataSetRecordWithUniqueIdentifierWithKeychainAccessGroup_keychainAccessGroup_completion_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "deleteActiveDataSetRecordWithUniqueIdentifierWithKeychainAccessGroup:keychainAccessGroup:completion:");
}

id objc_msgSend_deletePreferredNetworkForNetworkSignatureInternallyWithCompletion_ipv6NwSignature_wifiSSID_completion_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "deletePreferredNetworkForNetworkSignatureInternallyWithCompletion:ipv6NwSignature:wifiSSID:completion:");
}

id objc_msgSend_initSignaturesWithArrays_ipv4BytesLen_ipv6Bytes_ipv6BytesLen_wifSSID_wifiPassword_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initSignaturesWithArrays:ipv4BytesLen:ipv6Bytes:ipv6BytesLen:wifSSID:wifiPassword:");
}

id objc_msgSend_initWithBorderAgent_credentialsDataSet_network_credentials_uniqueIdentifier_keychainAccessGroup_creationDate_lastModificationDate_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithBorderAgent:credentialsDataSet:network:credentials:uniqueIdentifier:keychainAccessGroup:creationDate: lastModificationDate:");
}

id objc_msgSend_initWithMasterKey_passPhrase_PSKc_channel_PANID_userInfo_credentialDataSet_isActiveDevice_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithMasterKey:passPhrase:PSKc:channel:PANID:userInfo:credentialDataSet:isActiveDevice:");
}

id objc_msgSend_initWithNetwork_credentials_uniqueIdentifier_keychainAccessGroup_creationDate_lastModificationDate_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithNetwork:credentials:uniqueIdentifier:keychainAccessGroup:creationDate:lastModificationDate:");
}

id objc_msgSend_initWithThreadNetwork_networkSignature_credentialsDataSetRecord_creationDate_lastModificationDate_userInfo_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithThreadNetwork:networkSignature:credentialsDataSetRecord:creationDate:lastModificationDate:userInfo:");
}

id objc_msgSend_isMatchingNetworkSignature_preferredNwSignature_preferred_signaturePrefEntries_updatedPreferred_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "isMatchingNetworkSignature:preferredNwSignature:preferred:signaturePrefEntries:updatedPreferred:");
}

id objc_msgSend_keyChainQueryFetchForNumberOfActiveDataSetOperationForKeychainAccessGroup_count_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyChainQueryFetchForNumberOfActiveDataSetOperationForKeychainAccessGroup:count:");
}

id objc_msgSend_keyChainQueryForDeleteActiveDataSetOperationForNetworkAndBorderAgent_borderAgent_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyChainQueryForDeleteActiveDataSetOperationForNetworkAndBorderAgent:borderAgent:");
}

id objc_msgSend_keyChainQueryForDeleteActiveDataSetOperationForThreadNetworkBorderAgentWithKeychainAccessGroup_clientKeychainAccessGroup_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "keyChainQueryForDeleteActiveDataSetOperationForThreadNetworkBorderAgentWithKeychainAccessGroup:clientKeychainAccessGroup:");
}

id objc_msgSend_keyChainQueryForDeleteActiveDataSetRecordOperationForUniqueIdentifierWithKeychainAccessGroup_clientKeychainAccessGroup_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "keyChainQueryForDeleteActiveDataSetRecordOperationForUniqueIdentifierWithKeychainAccessGroup:clientKeychainAccessGroup:");
}

id objc_msgSend_keyChainQueryForFetchActiveDataSetRecordOperationForBorderAgentWithKeychainAccessGroup_clientKeychainAccessGroup_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "keyChainQueryForFetchActiveDataSetRecordOperationForBorderAgentWithKeychainAccessGroup:clientKeychainAccessGroup:");
}

id objc_msgSend_keyChainQueryForFetchActiveDataSetRecordOperationForNetworkAndBorderAgent_borderAgent_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyChainQueryForFetchActiveDataSetRecordOperationForNetworkAndBorderAgent:borderAgent:");
}

id objc_msgSend_keyChainQueryForFetchActiveDataSetRecordsOperationForClientKeychainAccessGroup_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyChainQueryForFetchActiveDataSetRecordsOperationForClientKeychainAccessGroup:");
}

id objc_msgSend_keyChainQueryForFetchOneActiveDataSetRecordOperationForUniqueIdentifierWithKeychainAccessGroup_clientKeychainAccessGroup_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "keyChainQueryForFetchOneActiveDataSetRecordOperationForUniqueIdentifierWithKeychainAccessGroup:clientKeychainAccessGroup:");
}

id objc_msgSend_keyChainQueryForPreferredNetworkRecordsOperationForWifiNetworkWithSignature_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyChainQueryForPreferredNetworkRecordsOperationForWifiNetworkWithSignature:");
}

id objc_msgSend_retrieveActiveDataSetRecordForThreadBorderAgentWithKeychainAccessGroup_keychainAccessGroup_completion_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "retrieveActiveDataSetRecordForThreadBorderAgentWithKeychainAccessGroup:keychainAccessGroup:completion:");
}

id objc_msgSend_retrieveActiveDataSetRecordWithUniqueIdentifierWithKeychainAccessGroup_keychainAccessGroup_completion_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "retrieveActiveDataSetRecordWithUniqueIdentifierWithKeychainAccessGroup:keychainAccessGroup:completion:");
}

id objc_msgSend_retrieveAllActiveDataSetRecordsWithFlagForClientKeychainAccessGroup_activeFlag_compleiton_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "retrieveAllActiveDataSetRecordsWithFlagForClientKeychainAccessGroup:activeFlag:compleiton:");
}

id objc_msgSend_retrieveAllActiveDataSetRecordsWithFlagForClientKeychainAccessGroup_activeFlag_completion_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "retrieveAllActiveDataSetRecordsWithFlagForClientKeychainAccessGroup:activeFlag:completion:");
}

id objc_msgSend_signatureWithDomain_type_subType_subtypeContext_detectedProcess_triggerThresholdValues_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "signatureWithDomain:type:subType:subtypeContext:detectedProcess:triggerThresholdValues:");
}

id objc_msgSend_snapshotWithSignature_duration_events_payload_actions_wantsRemoteCase_reply_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "snapshotWithSignature:duration:events:payload:actions:wantsRemoteCase:reply:");
}

id objc_msgSend_storeThreadNetworkCredentialActiveDataSet_network_credentials_credentialsDataSet_waitForSync_completion_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "storeThreadNetworkCredentialActiveDataSet:network:credentials:credentialsDataSet:waitForSync:completion:");
}

id objc_msgSend_updateInternalDBForTriggerBasedMetrics_isTriggerBased_triggerType_triggerId_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateInternalDBForTriggerBasedMetrics:isTriggerBased:triggerType:triggerId:");
}

id objc_msgSend_updateMeshcopRelatedParams_numAppleBRs_numThirdPartyBRs_isLeaderAppleDevice_numThreadNwsFound_shouldRunPeriodicTdm_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "updateMeshcopRelatedParams:numAppleBRs:numThirdPartyBRs:isLeaderAppleDevice:numThreadNwsFound:shouldRunPeriodicTdm:");
}

id objc_msgSend_updatePreferredNetworkWithNewDataset_network_credentialsDataSet_completion_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updatePreferredNetworkWithNewDataset:network:credentialsDataSet:completion:");
}

id objc_msgSend_wifiSSID(void *a1, const char *a2, ...)
{
  return [a1 wifiSSID];
}